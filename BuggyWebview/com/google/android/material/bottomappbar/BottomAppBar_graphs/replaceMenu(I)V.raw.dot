digraph "CFG forcom.google.android.material.bottomappbar.BottomAppBar.replaceMenu(I)V" {
Node_6 [shape=record,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newMenu' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:?  (LINE:755)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:757)\l0x0003: IPUT  (r0 I:int), (r1 I:com.google.android.material.bottomappbar.BottomAppBar) com.google.android.material.bottomappbar.BottomAppBar.pendingMenuResId int \l0x0005: INVOKE  (r0 I:android.view.Menu) = (r1 I:com.google.android.material.bottomappbar.BottomAppBar) type: VIRTUAL call: com.google.android.material.bottomappbar.BottomAppBar.getMenu():android.view.Menu A[MD:():android.view.Menu (m)] (LINE:758)\l0x0009: INVOKE  (r0 I:android.view.Menu) type: INTERFACE call: android.view.Menu.clear():void A[MD:():void (c)]\l0x000c: INVOKE  (r1 I:com.google.android.material.bottomappbar.BottomAppBar), (r2 I:int A[D('newMenu' int)]) type: VIRTUAL call: com.google.android.material.bottomappbar.BottomAppBar.inflateMenu(int):void A[MD:(int):void (m)] (LINE:759)\l}"];
Node_10 [shape=record,label="{10\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN    (LINE:761)\l}"];
Node_7 [shape=record,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN   A[SYNTHETIC] (LINE:761)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.bottomappbar.BottomAppBar.replaceMenu((r1 'this' I:com.google.android.material.bottomappbar.BottomAppBar A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('newMenu' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0000 \-\> B:10:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r2 'newMenu' I\l}"];
MethodNode -> Node_6;Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_11 -> Node_7;
}

