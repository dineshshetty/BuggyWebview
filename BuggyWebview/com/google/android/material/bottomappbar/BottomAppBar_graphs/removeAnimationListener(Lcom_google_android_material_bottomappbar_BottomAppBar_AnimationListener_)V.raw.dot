digraph "CFG forcom.google.android.material.bottomappbar.BottomAppBar.removeAnimationListener(Lcom\/google\/android\/material\/bottomappbar\/BottomAppBar$AnimationListener;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:java.util.ArrayList\<com.google.android.material.bottomappbar.BottomAppBar$AnimationListener\>) = (r1 I:com.google.android.material.bottomappbar.BottomAppBar) com.google.android.material.bottomappbar.BottomAppBar.animationListeners java.util.ArrayList  (LINE:772)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:773)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  \l  (r0 I:java.util.ArrayList)\l  (r2 I:java.lang.Object A[D('listener' com.google.android.material.bottomappbar.BottomAppBar$AnimationListener)])\l type: VIRTUAL call: java.util.ArrayList.remove(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:775)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:776)\l}"];
MethodNode[shape=record,label="{void com.google.android.material.bottomappbar.BottomAppBar.removeAnimationListener((r1 'this' I:com.google.android.material.bottomappbar.BottomAppBar A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.android.material.bottomappbar.BottomAppBar$AnimationListener A[D('listener' com.google.android.material.bottomappbar.BottomAppBar$AnimationListener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0008: r2 'listener' Lcom\/google\/android\/material\/bottomappbar\/BottomAppBar$AnimationListener;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

