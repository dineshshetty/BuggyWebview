digraph "CFG forcom.google.android.material.datepicker.MaterialCalendarGridView.skipMonth(Ljava\/lang\/Long;Ljava\/lang\/Long;Ljava\/lang\/Long;Ljava\/lang\/Long;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:247)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0001|0x0001: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstOfMonth' java.lang.Long)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0025 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|0x0003: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastOfMonth' java.lang.Long)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0025 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|0x0005: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startDay' java.lang.Long)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0025 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|0x0007: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endDay' java.lang.Long)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000a \l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|0x000a: INVOKE  (r1 I:long) = (r8 I:java.lang.Long A[D('startDay' java.lang.Long)]) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)] (LINE:250)\l0x000e: INVOKE  (r3 I:long) = (r7 I:java.lang.Long A[D('lastOfMonth' java.lang.Long)]) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)]\l0x0012: CMP_L  (r5 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0014|0x0014: IF  (r5 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:34:? \l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|0x0016: INVOKE  (r1 I:long) = (r9 I:java.lang.Long A[D('endDay' java.lang.Long)]) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)]\l0x001a: INVOKE  (r3 I:long) = (r6 I:java.lang.Long A[D('firstOfMonth' java.lang.Long)]) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)]\l0x001e: CMP_L  (r5 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|0x0020: IF  (r5 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:31:0x0023 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|RETURN\lORIG_RETURN\l|0x0023: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: RETURN  (r0 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0025|RETURN\l|0x0025: RETURN  (r0 I:boolean)  (LINE:248)\l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.material.datepicker.MaterialCalendarGridView.skipMonth((r6 I:java.lang.Long A[D('firstOfMonth' java.lang.Long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Long A[D('lastOfMonth' java.lang.Long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Long A[D('startDay' java.lang.Long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Long A[D('endDay' java.lang.Long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0020 \-\> B:32:0x0024, CROSS_EDGE: B:27:0x0014 \-\> B:32:0x0024, CROSS_EDGE: B:33:0x0025 \-\> B:19:?, CROSS_EDGE: B:23:0x0005 \-\> B:33:0x0025, CROSS_EDGE: B:22:0x0003 \-\> B:33:0x0025, CROSS_EDGE: B:21:0x0001 \-\> B:33:0x0025\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r6 'firstOfMonth' Ljava\/lang\/Long;\l  \-1 \-0x0025: r7 'lastOfMonth' Ljava\/lang\/Long;\l  \-1 \-0x0025: r8 'startDay' Ljava\/lang\/Long;\l  \-1 \-0x0025: r9 'endDay' Ljava\/lang\/Long;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_33;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_33;
Node_24 -> Node_26;
Node_24 -> Node_33[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_35[style=dashed];
Node_31 -> Node_19;
Node_35 -> Node_19;
Node_34 -> Node_19;
Node_33 -> Node_19;
}

