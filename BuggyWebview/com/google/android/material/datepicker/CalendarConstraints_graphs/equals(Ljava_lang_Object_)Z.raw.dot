digraph "CFG forcom.google.android.material.datepicker.CalendarConstraints.equals(Ljava\/lang\/Object;)Z" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:166)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0001|0x0001: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('o' java.lang.Object)])  \-\> B:27:0x0004 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean)  (LINE:167)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('o' java.lang.Object)]) com.google.android.material.datepicker.CalendarConstraints  (LINE:169)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x000a \l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|RETURN\l|0x0009: RETURN  (r2 I:boolean)  (LINE:170)\l}"];
Node_30 [shape=record,label="{30\:\ 0x000a|0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('o' java.lang.Object)])  (LINE:172)\l0x000b: CHECK_CAST (r1 I:com.google.android.material.datepicker.CalendarConstraints) = (com.google.android.material.datepicker.CalendarConstraints) (r1 I:??[OBJECT, ARRAY]) \l0x000d: IGET  (r3 I:com.google.android.material.datepicker.Month) = (r5 I:com.google.android.material.datepicker.CalendarConstraints) com.google.android.material.datepicker.CalendarConstraints.start com.google.android.material.datepicker.Month  (LINE:173)\l0x000f: IGET  (r4 I:com.google.android.material.datepicker.Month) = \l  (r1 I:com.google.android.material.datepicker.CalendarConstraints A[D('that' com.google.android.material.datepicker.CalendarConstraints)])\l com.google.android.material.datepicker.CalendarConstraints.start com.google.android.material.datepicker.Month \l0x0011: INVOKE  (r3 I:boolean) = (r3 I:com.google.android.material.datepicker.Month), (r4 I:java.lang.Object) type: VIRTUAL call: com.google.android.material.datepicker.Month.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003c \l}"];
Node_32 [shape=record,label="{32\:\ 0x0017|0x0017: IGET  (r3 I:com.google.android.material.datepicker.Month) = (r5 I:com.google.android.material.datepicker.CalendarConstraints) com.google.android.material.datepicker.CalendarConstraints.end com.google.android.material.datepicker.Month \l0x0019: IGET  (r4 I:com.google.android.material.datepicker.Month) = \l  (r1 I:com.google.android.material.datepicker.CalendarConstraints A[D('that' com.google.android.material.datepicker.CalendarConstraints)])\l com.google.android.material.datepicker.CalendarConstraints.end com.google.android.material.datepicker.Month \l0x001b: INVOKE  (r3 I:boolean) = (r3 I:com.google.android.material.datepicker.Month), (r4 I:java.lang.Object) type: VIRTUAL call: com.google.android.material.datepicker.Month.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)] (LINE:174)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003c \l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|0x0021: IGET  (r3 I:com.google.android.material.datepicker.Month) = (r5 I:com.google.android.material.datepicker.CalendarConstraints) com.google.android.material.datepicker.CalendarConstraints.openAt com.google.android.material.datepicker.Month \l0x0023: IGET  (r4 I:com.google.android.material.datepicker.Month) = \l  (r1 I:com.google.android.material.datepicker.CalendarConstraints A[D('that' com.google.android.material.datepicker.CalendarConstraints)])\l com.google.android.material.datepicker.CalendarConstraints.openAt com.google.android.material.datepicker.Month \l0x0025: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: STATIC call: androidx.core.util.ObjectsCompat.equals(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:175)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0029|0x0029: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003c \l}"];
Node_36 [shape=record,label="{36\:\ 0x002b|0x002b: IGET  (r3 I:int) = (r5 I:com.google.android.material.datepicker.CalendarConstraints) com.google.android.material.datepicker.CalendarConstraints.firstDayOfWeek int \l0x002d: IGET  (r4 I:int) = \l  (r1 I:com.google.android.material.datepicker.CalendarConstraints A[D('that' com.google.android.material.datepicker.CalendarConstraints)])\l com.google.android.material.datepicker.CalendarConstraints.firstDayOfWeek int \l}"];
Node_37 [shape=record,label="{37\:\ 0x002f|0x002f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003c \l}"];
Node_38 [shape=record,label="{38\:\ 0x0031|0x0031: IGET  (r3 I:com.google.android.material.datepicker.CalendarConstraints$DateValidator) = (r5 I:com.google.android.material.datepicker.CalendarConstraints) com.google.android.material.datepicker.CalendarConstraints.validator com.google.android.material.datepicker.CalendarConstraints$DateValidator \l0x0033: IGET  (r4 I:com.google.android.material.datepicker.CalendarConstraints$DateValidator) = \l  (r1 I:com.google.android.material.datepicker.CalendarConstraints A[D('that' com.google.android.material.datepicker.CalendarConstraints)])\l com.google.android.material.datepicker.CalendarConstraints.validator com.google.android.material.datepicker.CalendarConstraints$DateValidator \l0x0035: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:177)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0039|0x0039: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003c \l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x003d: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:173)\l}"];
Node_41 [shape=record,label="{41\:\ 0x003c|RETURN\lORIG_RETURN\l|0x003c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003d: RETURN  (r0 I:boolean)  (LINE:173)\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.datepicker.CalendarConstraints.equals((r5 'this' I:com.google.android.material.datepicker.CalendarConstraints A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[D('o' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0009 \-\> B:23:?, CROSS_EDGE: B:42:0x003d \-\> B:23:?, CROSS_EDGE: B:39:0x0039 \-\> B:42:0x003d, CROSS_EDGE: B:37:0x002f \-\> B:41:0x003c, CROSS_EDGE: B:35:0x0029 \-\> B:41:0x003c, CROSS_EDGE: B:33:0x001f \-\> B:41:0x003c, CROSS_EDGE: B:31:0x0015 \-\> B:41:0x003c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x003d: r1 'that' Lcom\/google\/android\/material\/datepicker\/CalendarConstraints;\l  \-1 \-0x003d: r6 'o' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_23;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_41;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_41;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_43[style=dashed];
Node_43 -> Node_23;
Node_41 -> Node_23;
}

