digraph "CFG forcom.google.android.material.datepicker.CompositeDateValidator.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0001|if (r5 != r6) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004}"];
Node_6 [shape=record,label="{6\:\ 0x0007|if ((r6 instanceof com.google.android.material.datepicker.CompositeDateValidator) != false) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|com.google.android.material.datepicker.CompositeDateValidator r1 = (com.google.android.material.datepicker.CompositeDateValidator) r6\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|if (r5.validators.equals(r1.validators) == false) goto L13\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017}"];
Node_11 [shape=record,label="{11\:\ 0x0023|if (r5.operator.getId() != r1.operator.getId()) goto L13\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.datepicker.CompositeDateValidator.equals((r5v0 'this' com.google.android.material.datepicker.CompositeDateValidator A[IMMUTABLE_TYPE, THIS]), (r6v0 'o' java.lang.Object A[D('o' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0009 \-\> B:1:?, CROSS_EDGE: B:14:0x0027 \-\> B:1:?, CROSS_EDGE: B:11:0x0023 \-\> B:14:0x0027, CROSS_EDGE: B:9:0x0015 \-\> B:13:0x0026\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_15 -> Node_1;
Node_13 -> Node_1;
}

