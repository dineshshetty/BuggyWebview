digraph "CFG forcom.google.android.material.datepicker.MonthsPagerAdapter.\<init\>(Landroid\/content\/Context;Lcom\/google\/android\/material\/datepicker\/DateSelector;Lcom\/google\/android\/material\/datepicker\/CalendarConstraints;Lcom\/google\/android\/material\/datepicker\/DayViewDecorator;Lcom\/google\/android\/material\/datepicker\/MaterialCalendar$OnDayClickListener;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|com.google.android.material.datepicker.Month r0 = r9.getStart()\lcom.google.android.material.datepicker.Month r1 = r9.getEnd()\lcom.google.android.material.datepicker.Month r2 = r9.getOpenAt()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|if (r0.compareTo(r2) \> 0) goto L14\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015}"];
Node_5 [shape=record,label="{5\:\ 0x0019|if (r2.compareTo(r1) \> 0) goto L12\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|int r3 = com.google.android.material.datepicker.MonthAdapter.MAXIMUM_WEEKS * com.google.android.material.datepicker.MaterialCalendar.getDayHeight(r7)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|if (com.google.android.material.datepicker.MaterialDatePicker.isFullscreen(r7) == false) goto L11\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|int r4 = com.google.android.material.datepicker.MaterialCalendar.getDayHeight(r7)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|PHI: r4 \l  PHI: (r4v5 'labelHeight' int) = (r4v4 'labelHeight' int), (r4v6 'labelHeight' int) binds: [B:9:0x002e, B:8:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|r6.itemHeight = r3 + r4\lr6.calendarConstraints = r9\lr6.dateSelector = r8\lr6.dayViewDecorator = r10\lr6.onDayClickListener = r11\lsetHasStableIds(true)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x002e|r4 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040}"];
Node_13 [shape=record,label="{13\:\ 0x0047|throw new java.lang.IllegalArgumentException(\"currentPage cannot be after lastPage\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0048}"];
Node_15 [shape=record,label="{15\:\ 0x004f|throw new java.lang.IllegalArgumentException(\"firstPage cannot be after currentPage\")\l}"];
MethodNode[shape=record,label="{void com.google.android.material.datepicker.MonthsPagerAdapter.\<init\>((r6v0 'this' com.google.android.material.datepicker.MonthsPagerAdapter A[IMMUTABLE_TYPE, THIS]), (r7v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'dateSelector' com.google.android.material.datepicker.DateSelector\<?\> A[D('dateSelector' com.google.android.material.datepicker.DateSelector\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'calendarConstraints' com.google.android.material.datepicker.CalendarConstraints A[D('calendarConstraints' com.google.android.material.datepicker.CalendarConstraints), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'dayViewDecorator' com.google.android.material.datepicker.DayViewDecorator A[D('dayViewDecorator' com.google.android.material.datepicker.DayViewDecorator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'onDayClickListener' com.google.android.material.datepicker.MaterialCalendar$OnDayClickListener A[D('onDayClickListener' com.google.android.material.datepicker.MaterialCalendar$OnDayClickListener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x002e \-\> B:10:0x002f, CROSS_EDGE: B:13:0x0047 \-\> B:1:?, CROSS_EDGE: B:15:0x004f \-\> B:1:?\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/content\/Context;Lcom\/google\/android\/material\/datepicker\/DateSelector\<*\>;Lcom\/google\/android\/material\/datepicker\/CalendarConstraints;Lcom\/google\/android\/material\/datepicker\/DayViewDecorator;Lcom\/google\/android\/material\/datepicker\/MaterialCalendar$OnDayClickListener;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_1;
}

