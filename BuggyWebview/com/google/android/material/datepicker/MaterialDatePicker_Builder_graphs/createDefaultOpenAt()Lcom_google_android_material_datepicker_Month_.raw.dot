digraph "CFG forcom.google.android.material.datepicker.MaterialDatePicker.Builder.createDefaultOpenAt()Lcom\/google\/android\/material\/datepicker\/Month;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.datepicker.DateSelector\<S\>) = \l  (r2 I:com.google.android.material.datepicker.MaterialDatePicker$Builder A[D('this' com.google.android.material.datepicker.MaterialDatePicker$Builder\<S\>)])\l com.google.android.material.datepicker.MaterialDatePicker.Builder.dateSelector com.google.android.material.datepicker.DateSelector  (LINE:848)\l0x0002: INVOKE  (r0 I:java.util.Collection) = (r0 I:com.google.android.material.datepicker.DateSelector) type: INTERFACE call: com.google.android.material.datepicker.DateSelector.getSelectedDays():java.util.Collection A[MD:():java.util.Collection\<java.lang.Long\> (m)]\l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002d \l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: IGET  (r0 I:com.google.android.material.datepicker.DateSelector\<S\>) = \l  (r2 I:com.google.android.material.datepicker.MaterialDatePicker$Builder A[D('this' com.google.android.material.datepicker.MaterialDatePicker$Builder\<S\>)])\l com.google.android.material.datepicker.MaterialDatePicker.Builder.dateSelector com.google.android.material.datepicker.DateSelector  (LINE:850)\l0x000e: INVOKE  (r0 I:java.util.Collection) = (r0 I:com.google.android.material.datepicker.DateSelector) type: INTERFACE call: com.google.android.material.datepicker.DateSelector.getSelectedDays():java.util.Collection A[MD:():java.util.Collection\<java.lang.Long\> (m)]\l0x0012: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Collection) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l0x0016: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001a: CHECK_CAST (r0 I:java.lang.Long) = (java.lang.Long) (r0 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r0 I:long) = (r0 I:java.lang.Long) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)]\l0x0020: INVOKE  (r0 I:com.google.android.material.datepicker.Month) = (r0 I:long) type: STATIC call: com.google.android.material.datepicker.Month.create(long):com.google.android.material.datepicker.Month A[MD:(long):com.google.android.material.datepicker.Month (m)]\l0x0024: IGET  (r1 I:com.google.android.material.datepicker.CalendarConstraints) = \l  (r2 I:com.google.android.material.datepicker.MaterialDatePicker$Builder A[D('this' com.google.android.material.datepicker.MaterialDatePicker$Builder\<S\>)])\l com.google.android.material.datepicker.MaterialDatePicker.Builder.calendarConstraints com.google.android.material.datepicker.CalendarConstraints  (LINE:852)\l0x0026: INVOKE  (r1 I:boolean) = \l  (r0 I:com.google.android.material.datepicker.Month A[D('firstSelectedMonth' com.google.android.material.datepicker.Month)])\l  (r1 I:com.google.android.material.datepicker.CalendarConstraints)\l type: STATIC call: com.google.android.material.datepicker.MaterialDatePicker.Builder.monthInValidRange(com.google.android.material.datepicker.Month, com.google.android.material.datepicker.CalendarConstraints):boolean A[MD:(com.google.android.material.datepicker.Month, com.google.android.material.datepicker.CalendarConstraints):boolean (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x002a|0x002a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002d \l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|RETURN\l|0x002c: RETURN  \l  (r0 I:com.google.android.material.datepicker.Month A[D('firstSelectedMonth' com.google.android.material.datepicker.Month)])\l  (LINE:853)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x002d|0x002d: INVOKE  (r0 I:com.google.android.material.datepicker.Month) =  type: STATIC call: com.google.android.material.datepicker.Month.current():com.google.android.material.datepicker.Month A[MD:():com.google.android.material.datepicker.Month (m)] (LINE:857)\l0x0031: IGET  (r1 I:com.google.android.material.datepicker.CalendarConstraints) = \l  (r2 I:com.google.android.material.datepicker.MaterialDatePicker$Builder A[D('this' com.google.android.material.datepicker.MaterialDatePicker$Builder\<S\>)])\l com.google.android.material.datepicker.MaterialDatePicker.Builder.calendarConstraints com.google.android.material.datepicker.CalendarConstraints  (LINE:858)\l0x0033: INVOKE  (r1 I:boolean) = \l  (r0 I:com.google.android.material.datepicker.Month A[D('thisMonth' com.google.android.material.datepicker.Month)])\l  (r1 I:com.google.android.material.datepicker.CalendarConstraints)\l type: STATIC call: com.google.android.material.datepicker.MaterialDatePicker.Builder.monthInValidRange(com.google.android.material.datepicker.Month, com.google.android.material.datepicker.CalendarConstraints):boolean A[MD:(com.google.android.material.datepicker.Month, com.google.android.material.datepicker.CalendarConstraints):boolean (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0037|0x0037: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003b \l}"];
Node_22 [shape=record,label="{22\:\ 0x0039|0x0039: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('thisMonth' com.google.android.material.datepicker.Month)])  (LINE:859)\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x0041: RETURN  (r1 I:com.google.android.material.datepicker.Month) A[SYNTHETIC] (LINE:858)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003b|0x003b: IGET  (r1 I:com.google.android.material.datepicker.CalendarConstraints) = \l  (r2 I:com.google.android.material.datepicker.MaterialDatePicker$Builder A[D('this' com.google.android.material.datepicker.MaterialDatePicker$Builder\<S\>)])\l com.google.android.material.datepicker.MaterialDatePicker.Builder.calendarConstraints com.google.android.material.datepicker.CalendarConstraints \l0x003d: INVOKE  (r1 I:com.google.android.material.datepicker.Month) = (r1 I:com.google.android.material.datepicker.CalendarConstraints) type: VIRTUAL call: com.google.android.material.datepicker.CalendarConstraints.getStart():com.google.android.material.datepicker.Month A[MD:():com.google.android.material.datepicker.Month (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0041|RETURN\lORIG_RETURN\l|0x0041: RETURN  (r1 I:com.google.android.material.datepicker.Month)  (LINE:858)\l}"];
MethodNode[shape=record,label="{private com.google.android.material.datepicker.Month com.google.android.material.datepicker.MaterialDatePicker.Builder.createDefaultOpenAt((r2 'this' I:com.google.android.material.datepicker.MaterialDatePicker$Builder\<S\> A[D('this' com.google.android.material.datepicker.MaterialDatePicker$Builder\<S\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0041 \-\> B:14:?, CROSS_EDGE: B:23:0x003b \-\> B:24:0x0041, CROSS_EDGE: B:16:0x000a \-\> B:20:0x002d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x002d: r0 'firstSelectedMonth' Lcom\/google\/android\/material\/datepicker\/Month;\l  0x0031\-0x0041: r0 'thisMonth' Lcom\/google\/android\/material\/datepicker\/Month;\l  0x0000\-0x0041: r2 'this' Lcom\/google\/android\/material\/datepicker\/MaterialDatePicker$Builder;, signature: Lcom\/google\/android\/material\/datepicker\/MaterialDatePicker$Builder\<TS;\>;\lTYPE_VARS: [S]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_14;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_25;
Node_25 -> Node_14;
Node_23 -> Node_24;
Node_24 -> Node_14;
}

