digraph "CFG forcom.google.android.material.datepicker.UtcDates.removeYearFromDateFormatPattern(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"yY\"  (LINE:234)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:236)\l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: INVOKE  (r2 I:int) = \l  (r7 I:java.lang.String A[D('pattern' java.lang.String)])\l  (r0 I:java.lang.String A[D('yearCharacters' java.lang.String)])\l  (r1 I:int)\l  (r2 I:int)\l type: STATIC call: com.google.android.material.datepicker.UtcDates.findCharactersInDateFormatPattern(java.lang.String, java.lang.String, int, int):int A[MD:(java.lang.String, java.lang.String, int, int):int (m)]\l0x0008: INVOKE  (r3 I:int) = (r7 I:java.lang.String A[D('pattern' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:238)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|0x000c: IF  (r2 I:??[int, byte, short, char] A[D('yearPosition' int)]) \< (r3 I:??[int, byte, short, char])  \-\> B:15:0x000f \l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|RETURN\l|0x000e: RETURN  (r7 I:java.lang.String A[D('pattern' java.lang.String)])  (LINE:240)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: CONST_STR  (r3 I:java.lang.String) =  \"EMd\"  (LINE:243)\l0x0012: INVOKE  (r4 I:int) = \l  (r7 I:java.lang.String A[D('pattern' java.lang.String)])\l  (r3 I:java.lang.String A[D('monthDayCharacters' java.lang.String)])\l  (r1 I:int)\l  (r2 I:int A[D('yearPosition' int)])\l type: STATIC call: com.google.android.material.datepicker.UtcDates.findCharactersInDateFormatPattern(java.lang.String, java.lang.String, int, int):int A[MD:(java.lang.String, java.lang.String, int, int):int (m)] (LINE:245)\l0x0016: INVOKE  (r5 I:int) = (r7 I:java.lang.String A[D('pattern' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:247)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001a|0x001a: IF  (r4 I:??[int, byte, short, char] A[D('yearEndPosition' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:18:0x002d \l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|0x001c: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:248)\l0x001e: INVOKE  (r5 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0021: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String A[D('monthDayCharacters' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0024: CONST_STR  (r6 I:java.lang.String) =  \",\" \l0x0026: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0029: INVOKE  (r3 I:java.lang.String A[D('monthDayCharacters' java.lang.String)]) = (r5 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|0x002d: CONST  (r5 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:251)\l0x002e: INVOKE  (r5 I:int) = \l  (r7 I:java.lang.String A[D('pattern' java.lang.String)])\l  (r3 I:java.lang.String A[D('monthDayCharacters' java.lang.String)])\l  (r5 I:int)\l  (r2 I:int A[D('yearPosition' int)])\l type: STATIC call: com.google.android.material.datepicker.UtcDates.findCharactersInDateFormatPattern(java.lang.String, java.lang.String, int, int):int A[MD:(java.lang.String, java.lang.String, int, int):int (m)] (LINE:252)\l0x0032: ARITH  (r5 I:int) = (r5 I:int A[D('yearStartPosition' int)]) + (r1 I:int)  (LINE:253)\l0x0033: INVOKE  (r1 I:java.lang.String) = \l  (r7 I:java.lang.String A[D('pattern' java.lang.String)])\l  (r5 I:int A[D('yearStartPosition' int)])\l  (r4 I:int A[D('yearEndPosition' int)])\l type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)] (LINE:255)\l0x0037: CONST_STR  (r6 I:java.lang.String) =  \" \"  (LINE:256)\l0x0039: INVOKE  (r6 I:java.lang.String) = \l  (r7 I:java.lang.String A[D('pattern' java.lang.String)])\l  (r1 I:java.lang.CharSequence A[D('yearPattern' java.lang.String)])\l  (r6 I:java.lang.CharSequence)\l type: VIRTUAL call: java.lang.String.replace(java.lang.CharSequence, java.lang.CharSequence):java.lang.String A[MD:(java.lang.CharSequence, java.lang.CharSequence):java.lang.String (c)]\l0x003d: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.String) type: VIRTUAL call: java.lang.String.trim():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0041|RETURN\l|0x0041: RETURN  (r6 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private static java.lang.String com.google.android.material.datepicker.UtcDates.removeYearFromDateFormatPattern((r7 I:java.lang.String A[D('pattern' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0041 \-\> B:11:?, CROSS_EDGE: B:16:0x001a \-\> B:18:0x002d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0041: r0 'yearCharacters' Ljava\/lang\/String;\l  0x0037\-0x0041: r1 'yearPattern' Ljava\/lang\/String;\l  0x0008\-0x0041: r2 'yearPosition' I\l  0x0011\-0x0041: r3 'monthDayCharacters' Ljava\/lang\/String;\l  0x0016\-0x0041: r4 'yearEndPosition' I\l  0x0032\-0x0041: r5 'yearStartPosition' I\l  \-1 \-0x0041: r7 'pattern' Ljava\/lang\/String;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

