digraph "CFG forcom.google.android.material.datepicker.UtcDates.findCharactersInDateFormatPattern(Ljava\/lang\/String;Ljava\/lang\/String;II)I" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('initialPosition' int)])  (LINE:264)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0001|LOOP_START\lLOOP:0: B:29:0x0001\-\>B:43:0x002d\l|0x0001: IF  (r0 I:??[int, byte, short, char] A[D('position' int)]) \< (0 ??[int, byte, short, char])  \-\> B:45:0x002f  (LINE:267)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0003|0x0003: INVOKE  (r1 I:int) = (r3 I:java.lang.String A[D('pattern' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char] A[D('position' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:46:0x002f \l}"];
Node_32 [shape=record,label="{32\:\ 0x0009|0x0009: INVOKE  (r1 I:char) = (r3 I:java.lang.String A[D('pattern' java.lang.String)]), (r0 I:int A[D('position' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:268)\l0x000d: INVOKE  (r1 I:int) = (r4 I:java.lang.String A[D('characterSequence' java.lang.String)]), (r1 I:int) type: VIRTUAL call: java.lang.String.indexOf(int):int A[MD:(int):int (c)]\l0x0011: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x002f \l}"];
Node_34 [shape=record,label="{34\:\ 0x0014|0x0014: INVOKE  (r1 I:char) = (r3 I:java.lang.String A[D('pattern' java.lang.String)]), (r0 I:int A[D('position' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:271)\l0x0018: CONST  (r2 I:??[int, float, short, byte, char]) = (39 ??[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001a|0x001a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x002d \l}"];
Node_36 [shape=record,label="{36\:\ 0x001c|0x001c: ARITH  (r0 I:int) = (r0 I:int A[D('position' int)]) + (r5 I:int A[D('increment' int)])  (LINE:272)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001d|LOOP_START\lLOOP:1: B:37:0x001d\-\>B:42:0x002b\l|0x001d: IF  (r0 I:??[int, byte, short, char] A[D('position' int)]) \< (0 ??[int, byte, short, char])  \-\> B:49:0x002d  (LINE:273)\l}"];
Node_38 [shape=record,label="{38\:\ 0x001f|0x001f: INVOKE  (r1 I:int) = (r3 I:java.lang.String A[D('pattern' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0023|0x0023: IF  (r0 I:??[int, byte, short, char] A[D('position' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:50:0x002d \l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|0x0025: INVOKE  (r1 I:char) = (r3 I:java.lang.String A[D('pattern' java.lang.String)]), (r0 I:int A[D('position' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0029|0x0029: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x002d \l}"];
Node_42 [shape=record,label="{42\:\ 0x002b|LOOP_END\lLOOP:1: B:37:0x001d\-\>B:42:0x002b\l|0x002b: ARITH  (r0 I:int) = (r0 I:int A[D('position' int)]) + (r5 I:int A[D('increment' int)])  (LINE:274)\l}"];
Node_51 [shape=record,label="{51\:\ 0x002d|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x002d|LOOP_END\lLOOP:0: B:29:0x0001\-\>B:43:0x002d\l|0x002d: ARITH  (r0 I:int) = (r0 I:int A[D('position' int)]) + (r5 I:int A[D('increment' int)])  (LINE:278)\l}"];
Node_50 [shape=record,label="{50\:\ 0x002d|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x002d|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x002d|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x002f|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x002f|RETURN\l|0x002f: RETURN  (r0 I:int A[D('position' int)])  (LINE:281)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_46 [shape=record,label="{46\:\ 0x002f|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x002f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int com.google.android.material.datepicker.UtcDates.findCharactersInDateFormatPattern((r3 I:java.lang.String A[D('pattern' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[D('characterSequence' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('increment' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('initialPosition' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:42:0x002b \-\> B:37:0x001d, BACK_EDGE: B:43:0x002d \-\> B:29:0x0001, CROSS_EDGE: B:39:0x0023 \-\> B:43:0x002d, CROSS_EDGE: B:37:0x001d \-\> B:43:0x002d, CROSS_EDGE: B:35:0x001a \-\> B:43:0x002d, CROSS_EDGE: B:31:0x0007 \-\> B:44:0x002f, CROSS_EDGE: B:29:0x0001 \-\> B:44:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x002f: r0 'position' I\l  \-1 \-0x002f: r3 'pattern' Ljava\/lang\/String;\l  \-1 \-0x002f: r4 'characterSequence' Ljava\/lang\/String;\l  \-1 \-0x002f: r5 'increment' I\l  \-1 \-0x002f: r6 'initialPosition' I\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_45;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_46;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_47;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_48;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_49;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_50;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_51;
Node_42 -> Node_37;
Node_51 -> Node_43;
Node_43 -> Node_29;
Node_50 -> Node_43;
Node_49 -> Node_43;
Node_48 -> Node_43;
Node_47 -> Node_44;
Node_44 -> Node_27;
Node_46 -> Node_44;
Node_45 -> Node_44;
}

