digraph "CFG forcom.google.android.material.datepicker.MaterialCalendar.7.onScrolled(Landroidx\/recyclerview\/widget\/RecyclerView;II)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|if (r5 \>= 0) goto L6\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|int r0 = com.google.android.material.datepicker.MaterialCalendar.this.getLayoutManager().findFirstVisibleItemPosition()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|PHI: r0 \l  PHI: (r0v3 'currentItem' int) = (r0v2 'currentItem' int), (r0v6 'currentItem' int) binds: [B:11:0x000d, B:10:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|com.google.android.material.datepicker.MaterialCalendar r1 = com.google.android.material.datepicker.MaterialCalendar.this\lr1.current = r2.getPageMonth(r0)\lr3.setText(r2.getPageTitle(r0))\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|int r0 = com.google.android.material.datepicker.MaterialCalendar.this.getLayoutManager().findLastVisibleItemPosition()\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.datepicker.MaterialCalendar.7.onScrolled((r3v0 'this' com.google.android.material.datepicker.MaterialCalendar$7 A[D('this' com.google.android.material.datepicker.MaterialCalendar$7), IMMUTABLE_TYPE, THIS]), (r4v0 'recyclerView' androidx.recyclerview.widget.RecyclerView A[D('recyclerView' androidx.recyclerview.widget.RecyclerView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'dx' int A[D('dx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'dy' int A[D('dy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x000d \-\> B:12:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: [S]\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.OnScrollListener.onScrolled(androidx.recyclerview.widget.RecyclerView, int, int):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
}

