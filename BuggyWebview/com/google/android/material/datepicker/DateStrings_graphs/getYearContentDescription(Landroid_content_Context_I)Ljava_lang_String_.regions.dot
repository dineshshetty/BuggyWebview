digraph "CFG forcom.google.android.material.datepicker.DateStrings.getYearContentDescription(Landroid\/content\/Context;I)Ljava\/lang\/String;" {
subgraph cluster_Region_2082350025 {
label = "R(1:(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_661846756 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1781651541 {
label = "IF [B:11:0x000a] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000a|if (com.google.android.material.datepicker.UtcDates.getTodayCalendar().get(1) == r5) goto L3\l}"];
subgraph cluster_Region_599809124 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001e|RETURN\l|return java.lang.String.format(r4.getString(com.google.android.material.C0571R.string.mtrl_picker_navigate_to_current_year_description), java.lang.Integer.valueOf(r5))\l}"];
}
}
subgraph cluster_Region_776811454 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0031|RETURN\l|return java.lang.String.format(r4.getString(com.google.android.material.C0571R.string.mtrl_picker_navigate_to_year_description), java.lang.Integer.valueOf(r5))\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000c}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001f}"];
MethodNode[shape=record,label="{public static java.lang.String com.google.android.material.datepicker.DateStrings.getYearContentDescription((r4v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'year' int A[D('year' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0031 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

