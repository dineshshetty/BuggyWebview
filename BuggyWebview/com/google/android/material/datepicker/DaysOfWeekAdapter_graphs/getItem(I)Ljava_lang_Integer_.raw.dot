digraph "CFG forcom.google.android.material.datepicker.DaysOfWeekAdapter.getItem(I)Ljava\/lang\/Integer;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r1 I:com.google.android.material.datepicker.DaysOfWeekAdapter) com.google.android.material.datepicker.DaysOfWeekAdapter.daysInWeek int  (LINE:64)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r2 I:??[int, byte, short, char] A[D('position' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:14:0x0006 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|RETURN\l|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:65)\l0x0005: RETURN  (r0 I:java.lang.Integer) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r1 I:com.google.android.material.datepicker.DaysOfWeekAdapter), (r2 I:int A[D('position' int)]) type: DIRECT call: com.google.android.material.datepicker.DaysOfWeekAdapter.positionToDayOfWeek(int):int A[MD:(int):int (m)] (LINE:67)\l0x000a: INVOKE  (r0 I:java.lang.Integer) = (r0 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.lang.Integer) \l}"];
MethodNode[shape=record,label="{public java.lang.Integer com.google.android.material.datepicker.DaysOfWeekAdapter.getItem((r1 'this' I:com.google.android.material.datepicker.DaysOfWeekAdapter A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r2 'position' I\lREPLACED_BY: com.google.android.material.datepicker.DaysOfWeekAdapter.getItem(int):java.lang.Object\lMETHOD_OVERRIDE: [ClspMth\{android.widget.Adapter.getItem(int):java.lang.Object\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

