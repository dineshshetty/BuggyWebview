digraph "CFG forcom.google.android.material.datepicker.DateFormatTextWatcher.onTextChanged(Ljava\/lang\/CharSequence;III)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.textfield.TextInputLayout) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.textInputLayout com.google.android.material.textfield.TextInputLayout  (LINE:80)\l0x0002: IGET  (r1 I:java.lang.Runnable) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.setErrorCallback java.lang.Runnable \l0x0004: INVOKE  (r0 I:com.google.android.material.textfield.TextInputLayout), (r1 I:java.lang.Runnable) type: VIRTUAL call: com.google.android.material.textfield.TextInputLayout.removeCallbacks(java.lang.Runnable):boolean A[MD:(java.lang.Runnable):boolean (s)]\l0x0007: IGET  (r0 I:com.google.android.material.textfield.TextInputLayout) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.textInputLayout com.google.android.material.textfield.TextInputLayout  (LINE:81)\l0x0009: IGET  (r1 I:java.lang.Runnable) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.setRangeErrorCallback java.lang.Runnable \l0x000b: INVOKE  (r0 I:com.google.android.material.textfield.TextInputLayout), (r1 I:java.lang.Runnable) type: VIRTUAL call: com.google.android.material.textfield.TextInputLayout.removeCallbacks(java.lang.Runnable):boolean A[MD:(java.lang.Runnable):boolean (s)]\l0x000e: IGET  (r0 I:com.google.android.material.textfield.TextInputLayout) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.textInputLayout com.google.android.material.textfield.TextInputLayout  (LINE:82)\l0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: INVOKE  (r0 I:com.google.android.material.textfield.TextInputLayout), (r1 I:java.lang.CharSequence) type: VIRTUAL call: com.google.android.material.textfield.TextInputLayout.setError(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (m)]\l0x0014: INVOKE  (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher), (r1 I:java.lang.Long) type: VIRTUAL call: com.google.android.material.datepicker.DateFormatTextWatcher.onValidDate(java.lang.Long):void A[MD:(java.lang.Long):void (m)] (LINE:83)\l0x0017: INVOKE  (r0 I:boolean) = (r6 I:java.lang.CharSequence A[D('s' java.lang.CharSequence)]) type: STATIC call: android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (c)] (LINE:84)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x001e \l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|RETURN\l|0x001d: RETURN    (LINE:85)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x001e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|TRY_ENTER\lTryCatch #0 \{ParseException \-\> 0x005d, blocks: (B:23:0x001e, B:25:0x003d, B:27:0x0045, B:29:0x0051), top: B:34:0x001e \}\lCatch: ParseException \-\> 0x005d\l|0x001e: IGET  (r0 I:java.text.DateFormat) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.dateFormat java.text.DateFormat A[Catch: ParseException \-\> 0x005d, TRY_ENTER] (LINE:89)\l0x0020: INVOKE  (r2 I:java.lang.String) = (r6 I:java.lang.CharSequence A[D('s' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.toString():java.lang.String A[Catch: ParseException \-\> 0x005d, MD:():java.lang.String (c)]\l0x0024: INVOKE  (r0 I:java.util.Date) = (r0 I:java.text.DateFormat), (r2 I:java.lang.String) type: VIRTUAL call: java.text.DateFormat.parse(java.lang.String):java.util.Date A[Catch: ParseException \-\> 0x005d, MD:(java.lang.String):java.util.Date throws java.text.ParseException (c)]\l0x0028: IGET  (r2 I:com.google.android.material.textfield.TextInputLayout) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.textInputLayout com.google.android.material.textfield.TextInputLayout A[Catch: ParseException \-\> 0x005d] (LINE:90)\l0x002a: INVOKE  (r2 I:com.google.android.material.textfield.TextInputLayout), (r1 I:java.lang.CharSequence) type: VIRTUAL call: com.google.android.material.textfield.TextInputLayout.setError(java.lang.CharSequence):void A[Catch: ParseException \-\> 0x005d, MD:(java.lang.CharSequence):void (m)]\l0x002d: INVOKE  (r1 I:long) = (r0 I:java.util.Date A[D('date' java.util.Date)]) type: VIRTUAL call: java.util.Date.getTime():long A[Catch: ParseException \-\> 0x005d, MD:():long (c)] (LINE:91)\l0x0031: IGET  (r3 I:com.google.android.material.datepicker.CalendarConstraints) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.constraints com.google.android.material.datepicker.CalendarConstraints A[Catch: ParseException \-\> 0x005d] (LINE:92)\l0x0033: INVOKE  (r3 I:com.google.android.material.datepicker.CalendarConstraints$DateValidator) = (r3 I:com.google.android.material.datepicker.CalendarConstraints) type: VIRTUAL call: com.google.android.material.datepicker.CalendarConstraints.getDateValidator():com.google.android.material.datepicker.CalendarConstraints$DateValidator A[Catch: ParseException \-\> 0x005d, MD:():com.google.android.material.datepicker.CalendarConstraints$DateValidator (m)]\l0x0037: INVOKE  (r3 I:boolean) = (r3 I:com.google.android.material.datepicker.CalendarConstraints$DateValidator), (r1 I:long A[D('milliseconds' long)]) type: INTERFACE call: com.google.android.material.datepicker.CalendarConstraints.DateValidator.isValid(long):boolean A[Catch: ParseException \-\> 0x005d, MD:(long):boolean (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x003b|0x003b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0051 \l}"];
Node_25 [shape=record,label="{25\:\ 0x003d|TryCatch #0 \{ParseException \-\> 0x005d, blocks: (B:23:0x001e, B:25:0x003d, B:27:0x0045, B:29:0x0051), top: B:34:0x001e \}\lCatch: ParseException \-\> 0x005d\l|0x003d: IGET  (r3 I:com.google.android.material.datepicker.CalendarConstraints) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.constraints com.google.android.material.datepicker.CalendarConstraints A[Catch: ParseException \-\> 0x005d]\l0x003f: INVOKE  (r3 I:boolean) = (r3 I:com.google.android.material.datepicker.CalendarConstraints), (r1 I:long A[D('milliseconds' long)]) type: VIRTUAL call: com.google.android.material.datepicker.CalendarConstraints.isWithinBounds(long):boolean A[Catch: ParseException \-\> 0x005d, MD:(long):boolean (m)] (LINE:93)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0043|0x0043: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0051 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0045|TryCatch #0 \{ParseException \-\> 0x005d, blocks: (B:23:0x001e, B:25:0x003d, B:27:0x0045, B:29:0x0051), top: B:34:0x001e \}\lCatch: ParseException \-\> 0x005d\l|0x0045: INVOKE  (r3 I:long) = (r0 I:java.util.Date A[D('date' java.util.Date)]) type: VIRTUAL call: java.util.Date.getTime():long A[Catch: ParseException \-\> 0x005d, MD:():long (c)] (LINE:94)\l0x0049: INVOKE  (r3 I:java.lang.Long) = (r3 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[Catch: ParseException \-\> 0x005d, MD:(long):java.lang.Long (c)]\l0x004d: INVOKE  (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher), (r3 I:java.lang.Long) type: VIRTUAL call: com.google.android.material.datepicker.DateFormatTextWatcher.onValidDate(java.lang.Long):void A[Catch: ParseException \-\> 0x005d, MD:(java.lang.Long):void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0050|RETURN\l|0x0050: RETURN    (LINE:95)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0051|TRY_LEAVE\lTryCatch #0 \{ParseException \-\> 0x005d, blocks: (B:23:0x001e, B:25:0x003d, B:27:0x0045, B:29:0x0051), top: B:34:0x001e \}\lCatch: ParseException \-\> 0x005d\l|0x0051: INVOKE  (r3 I:java.lang.Runnable) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher), (r1 I:long A[D('milliseconds' long)]) type: DIRECT call: com.google.android.material.datepicker.DateFormatTextWatcher.createRangeErrorCallback(long):java.lang.Runnable A[Catch: ParseException \-\> 0x005d, MD:(long):java.lang.Runnable (m)] (LINE:98)\l0x0055: IPUT  (r3 I:java.lang.Runnable), (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.setRangeErrorCallback java.lang.Runnable A[Catch: ParseException \-\> 0x005d]\l0x0057: IGET  (r4 I:com.google.android.material.textfield.TextInputLayout) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.textInputLayout com.google.android.material.textfield.TextInputLayout A[Catch: ParseException \-\> 0x005d] (LINE:99)\l0x0059: INVOKE  \l  (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher)\l  (r4 I:android.view.View)\l  (r3 I:java.lang.Runnable)\l type: VIRTUAL call: com.google.android.material.datepicker.DateFormatTextWatcher.runValidation(android.view.View, java.lang.Runnable):void A[Catch: ParseException \-\> 0x005d, MD:(android.view.View, java.lang.Runnable):void (m), TRY_LEAVE]\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0065: RETURN   A[SYNTHETIC] (LINE:103)\l}"];
Node_31 [shape=record,label="{31\:\ 0x005d|ExcHandler: ParseException \-\> 0x005d\l|0x005d: MOVE_EXCEPTION  (r0 I:java.text.ParseException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: ParseException \-\> 0x005d] (LINE:100)\l}"];
Node_32 [shape=record,label="{32\:\ 0x005e|0x005e: IGET  (r1 I:com.google.android.material.textfield.TextInputLayout) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.textInputLayout com.google.android.material.textfield.TextInputLayout  (LINE:101)\l0x0060: IGET  (r2 I:java.lang.Runnable) = (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher) com.google.android.material.datepicker.DateFormatTextWatcher.setErrorCallback java.lang.Runnable \l0x0062: INVOKE  \l  (r5 I:com.google.android.material.datepicker.DateFormatTextWatcher)\l  (r1 I:android.view.View)\l  (r2 I:java.lang.Runnable)\l type: VIRTUAL call: com.google.android.material.datepicker.DateFormatTextWatcher.runValidation(android.view.View, java.lang.Runnable):void A[MD:(android.view.View, java.lang.Runnable):void (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0065|RETURN\lORIG_RETURN\l|0x0065: RETURN    (LINE:103)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.datepicker.DateFormatTextWatcher.onTextChanged((r5 'this' I:com.google.android.material.datepicker.DateFormatTextWatcher A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.CharSequence A[D('s' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('before' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:28:0x0050 \-\> B:19:?, CROSS_EDGE: B:33:0x0065 \-\> B:19:?, CROSS_EDGE: B:24:0x003b \-\> B:29:0x0051, CROSS_EDGE: B:32:0x005e \-\> B:33:0x0065\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x005c: r0 'date' Ljava\/util\/Date;\l  0x0031\-0x005c: r1 'milliseconds' J\l  0x005e\-0x0065: r0 'e' Ljava\/text\/ParseException;\l  \-1 \-0x0065: r6 's' Ljava\/lang\/CharSequence;\l  \-1 \-0x0065: r7 'start' I\l  \-1 \-0x0065: r8 'before' I\l  \-1 \-0x0065: r9 'count' I\lTryCatch #0 \{ParseException \-\> 0x005d, blocks: (B:23:0x001e, B:25:0x003d, B:27:0x0045, B:29:0x0051), top: B:34:0x001e \}\lMETHOD_OVERRIDE: [ClspMth\{android.text.TextWatcher.onTextChanged(java.lang.CharSequence, int, int, int):void\}]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_34;
Node_22 -> Node_19;
Node_34 -> Node_23;
Node_34 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_19;
Node_29 -> Node_35;
Node_35 -> Node_19;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_19;
}

