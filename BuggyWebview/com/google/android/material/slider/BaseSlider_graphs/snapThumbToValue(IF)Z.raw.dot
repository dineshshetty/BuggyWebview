digraph "CFG forcom.google.android.material.slider.BaseSlider.snapThumbToValue(IF)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IPUT  \l  (r6 I:int A[D('idx' int)])\l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.focusedThumbIdx int  (LINE:2040)\l0x0002: IGET  (r0 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList  (LINE:2043)\l0x0004: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.ArrayList), (r6 I:int A[D('idx' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0008: CHECK_CAST (r0 I:java.lang.Float) = (java.lang.Float) (r0 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:float) = (r0 I:java.lang.Float) type: VIRTUAL call: java.lang.Float.floatValue():float A[MD:():float (c)]\l0x000e: ARITH  (r0 I:float) = (r7 I:float A[D('value' float)]) \- (r0 I:float) \l0x0010: INVOKE  (r0 I:float) = (r0 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x0014: CAST (r0 I:double) = (double) (r0 I:float) \l0x0015: CONST  (r2 I:??[long, double]) = (4547007122018943789(0x3f1a36e2eb1c432d, double:1.0E\-4) ??[long, double]) \l0x001a: CMP_G  (r4 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:14:0x0020 \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|RETURN\l|0x001e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2044)\l0x001f: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|0x0020: INVOKE  (r0 I:float) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r6 I:int A[D('idx' int)])\l  (r7 I:float A[D('value' float)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.getClampedValue(int, float):float A[MD:(int, float):float (m)] (LINE:2047)\l0x0024: IGET  (r1 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList  (LINE:2049)\l0x0026: INVOKE  (r2 I:java.lang.Float) = (r0 I:float A[D('newValue' float)]) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l0x002a: INVOKE  (r1 I:java.util.ArrayList), (r6 I:int A[D('idx' int)]), (r2 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.set(int, java.lang.Object):java.lang.Object A[MD:(int, E):E (c)]\l0x002d: INVOKE  \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r6 I:int A[D('idx' int)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.dispatchOnChangedFromUser(int):void A[MD:(int):void (m)] (LINE:2051)\l0x0030: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:2052)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|RETURN\l|0x0031: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.slider.BaseSlider.snapThumbToValue((r5 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('idx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0031 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x0031: r0 'newValue' F\l  0x0000\-0x0031: r5 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\l  \-1 \-0x0031: r6 'idx' I\l  \-1 \-0x0031: r7 'value' F\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

