digraph "CFG forcom.google.android.material.slider.BaseSlider.getClampedValue(IF)F" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|float r0 = getMinSeparation()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|if (r4.separationUnit != 0) goto L18\l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|float r1 = dimenToValue(r0)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|PHI: r1 \l  PHI: (r1v2 float) = (r1v1 float), (r1v12 float) binds: [B:24:0x000d, B:23:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|r0 = r1\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|if (isRtl() == false) goto L7\l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|float r0 = \-r0\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|PHI: r0 \l  PHI: (r0v2 'minSeparation' float) = (r0v1 'minSeparation' float), (r0v3 'minSeparation' float) binds: [B:26:0x0013, B:27:0x0015] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x001e|if ((r5 + 1) \< r4.values.size()) goto L17\l}"];
Node_30 [shape=record,label="{30\:\ 0x0020|float r1 = r4.valueTo\l}"];
Node_32 [shape=record,label="{32\:\ 0x0032|PHI: r1 \l  PHI: (r1v10 'upperBound' float) = (r1v9 'upperBound' float), (r1v11 'upperBound' float) binds: [B:31:0x0023, B:30:0x0020] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|if ((r5 + (\-1)) \>= 0) goto L16\l}"];
Node_34 [shape=record,label="{34\:\ 0x0036|float r2 = r4.valueFrom\l}"];
Node_36 [shape=record,label="{36\:\ 0x0048|PHI: r2 \l  PHI: (r2v9 'lowerBound' float) = (r2v8 'lowerBound' float), (r2v10 'lowerBound' float) binds: [B:35:0x0039, B:34:0x0036] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_37 [shape=record,label="{37\:\ 0x004c|RETURN\l|return androidx.core.math.MathUtils.clamp(r6, r2, r1)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0039|float r2 = r4.values.get(r5 + (\-1)).floatValue() + r0\l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|float r1 = r4.values.get(r5 + 1).floatValue() \- r0\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|r1 = r0\l}"];
MethodNode[shape=record,label="{private float com.google.android.material.slider.BaseSlider.getClampedValue((r4v0 'this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r5v0 'idx' int A[D('idx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'value' float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0039 \-\> B:36:0x0048, CROSS_EDGE: B:31:0x0023 \-\> B:32:0x0032, CROSS_EDGE: B:26:0x0013 \-\> B:28:0x0016, CROSS_EDGE: B:24:0x000d \-\> B:25:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_35 -> Node_36;
Node_31 -> Node_32;
Node_24 -> Node_25;
}

