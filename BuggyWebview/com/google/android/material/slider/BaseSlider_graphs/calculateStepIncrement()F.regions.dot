digraph "CFG forcom.google.android.material.slider.BaseSlider.calculateStepIncrement()F" {
subgraph cluster_Region_228733071 {
label = "R(2:1|(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|float float r0 = r2.stepSize\l}"];
subgraph cluster_Region_735966769 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1531766374 {
label = "IF [B:10:0x0005] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0005|if (r0 == 0.0f) goto L3\l}"];
subgraph cluster_Region_1099849089 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0007|RETURN\lORIG_RETURN\l|return 1.0f\l}"];
}
}
subgraph cluster_Region_1869893571 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private float com.google.android.material.slider.BaseSlider.calculateStepIncrement((r2v0 'this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0005 \-\> B:12:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

