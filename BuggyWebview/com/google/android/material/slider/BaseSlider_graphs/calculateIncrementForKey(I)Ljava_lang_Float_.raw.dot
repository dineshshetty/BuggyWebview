digraph "CFG forcom.google.android.material.slider.BaseSlider.calculateIncrementForKey(I)Ljava\/lang\/Float;" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = \l  (r2 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.isLongPress boolean  (LINE:2490)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x000b \l}"];
Node_29 [shape=record,label="{29\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, short, byte, char]) = (20 ??[int, float, short, byte, char]) \l0x0006: INVOKE  (r0 I:float) = \l  (r2 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r0 I:int)\l type: DIRECT call: com.google.android.material.slider.BaseSlider.calculateStepIncrement(int):float A[MD:(int):float (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x000f|0x000f: SWITCH  (r3 I:?? A[D('keyCode' int)])\l case 21: goto B:44:0x002d\l case 22: goto B:38:0x001f\l case 69: goto B:36:0x0019\l case 70: goto B:34:0x0014\l case 81: goto B:34:0x0014\l default: goto B:32:0x0012  (LINE:2491)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0012|RETURN\l|0x0012: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2503)\l0x0013: RETURN  (r1 I:java.lang.Float) \l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Float) = (r0 I:float A[D('increment' float)]) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)] (LINE:2501)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0018|RETURN\l|0x0018: RETURN  (r1 I:java.lang.Float) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0019|0x0019: NEG  (r1 I:float) = (r0 I:float A[D('increment' float)])  (LINE:2497)\l0x001a: INVOKE  (r1 I:java.lang.Float) = (r1 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|RETURN\l|0x001e: RETURN  (r1 I:java.lang.Float) \l}"];
Node_38 [shape=record,label="{38\:\ 0x001f|0x001f: INVOKE  (r1 I:boolean) = \l  (r2 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: VIRTUAL call: com.google.android.material.slider.BaseSlider.isRtl():boolean A[MD:():boolean (m)] (LINE:2495)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0023|0x0023: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0027 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|0x0025: NEG  (r1 I:float) = (r0 I:float A[D('increment' float)]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0028|0x0028: INVOKE  (r1 I:java.lang.Float) = (r1 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x002c|RETURN\l|0x002c: RETURN  (r1 I:java.lang.Float) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0027|0x0027: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('increment' float)]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x002d|0x002d: INVOKE  (r1 I:boolean) = \l  (r2 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: VIRTUAL call: com.google.android.material.slider.BaseSlider.isRtl():boolean A[MD:():boolean (m)] (LINE:2493)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0031|0x0031: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0035 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0033|0x0033: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('increment' float)]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0036|0x0036: INVOKE  (r1 I:java.lang.Float) = (r1 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x003a|RETURN\l|0x003a: RETURN  (r1 I:java.lang.Float) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0035|0x0035: NEG  (r1 I:float) = (r0 I:float A[D('increment' float)]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|0x000b: INVOKE  (r0 I:float) = \l  (r2 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.calculateStepIncrement():float A[MD:():float (m)]\l}"];
MethodNode[shape=record,label="{private java.lang.Float com.google.android.material.slider.BaseSlider.calculateIncrementForKey((r2 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('keyCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0018 \-\> B:26:?, CROSS_EDGE: B:37:0x001e \-\> B:26:?, CROSS_EDGE: B:43:0x002c \-\> B:26:?, CROSS_EDGE: B:41:0x0027 \-\> B:42:0x0028, CROSS_EDGE: B:49:0x003a \-\> B:26:?, CROSS_EDGE: B:47:0x0035 \-\> B:48:0x0036, CROSS_EDGE: B:30:0x000b \-\> B:31:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x0051: r0 'increment' F\l  0x0000\-0x0051: r2 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\l  \-1 \-0x0051: r3 'keyCode' I\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_34;
Node_31 -> Node_36;
Node_31 -> Node_38;
Node_31 -> Node_44;
Node_32 -> Node_26;
Node_34 -> Node_35;
Node_35 -> Node_26;
Node_36 -> Node_37;
Node_37 -> Node_26;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_26;
Node_41 -> Node_42;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_26;
Node_47 -> Node_48;
Node_30 -> Node_31;
}

