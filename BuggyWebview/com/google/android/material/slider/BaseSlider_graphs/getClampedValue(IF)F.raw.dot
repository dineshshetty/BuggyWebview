digraph "CFG forcom.google.android.material.slider.BaseSlider.getClampedValue(IF)F" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: INVOKE  (r0 I:float) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: VIRTUAL call: com.google.android.material.slider.BaseSlider.getMinSeparation():float A[MD:():float (m)] (LINE:2057)\l0x0004: IGET  (r1 I:int) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.separationUnit int  (LINE:2058)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000d \l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|0x0008: INVOKE  (r1 I:float) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r0 I:float A[D('minSeparation' float)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.dimenToValue(float):float A[MD:(float):float (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|0x000e: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minSeparation' float)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: INVOKE  (r1 I:boolean) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: VIRTUAL call: com.google.android.material.slider.BaseSlider.isRtl():boolean A[MD:():boolean (m)] (LINE:2059)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0016 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: NEG  (r0 I:float) = (r0 I:float A[D('minSeparation' float)])  (LINE:2060)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|0x0016: ARITH  (r1 I:int) = (r5 I:int A[D('idx' int)]) + (1 int)  (LINE:2063)\l0x0018: IGET  (r2 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList \l0x001a: INVOKE  (r2 I:int) = (r2 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x001e|0x001e: IF  (r1 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:31:0x0023 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0020|0x0020: IGET  (r1 I:float) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.valueTo float \l}"];
Node_32 [shape=record,label="{32\:\ 0x0032|0x0032: ARITH  (r2 I:int) = (r5 I:int A[D('idx' int)]) + (\-1 int)  (LINE:2064)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|0x0034: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:35:0x0039 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0036|0x0036: IGET  (r2 I:float) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.valueFrom float \l}"];
Node_36 [shape=record,label="{36\:\ 0x0048|0x0048: INVOKE  (r3 I:float) = (r6 I:float A[D('value' float)]), (r2 I:float A[D('lowerBound' float)]), (r1 I:float A[D('upperBound' float)]) type: STATIC call: androidx.core.math.MathUtils.clamp(float, float, float):float A[MD:(float, float, float):float (m)] (LINE:2065)\l}"];
Node_37 [shape=record,label="{37\:\ 0x004c|RETURN\l|0x004c: RETURN  (r3 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0039|0x0039: IGET  (r2 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList \l0x003b: ARITH  (r3 I:int) = (r5 I:int A[D('idx' int)]) + (\-1 int) \l0x003d: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.ArrayList), (r3 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0041: CHECK_CAST (r2 I:java.lang.Float) = (java.lang.Float) (r2 I:??[OBJECT, ARRAY]) \l0x0043: INVOKE  (r2 I:float) = (r2 I:java.lang.Float) type: VIRTUAL call: java.lang.Float.floatValue():float A[MD:():float (c)]\l0x0047: ARITH  (r2 I:float) = (r2 I:float) + (r0 I:float A[D('minSeparation' float)]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|0x0023: IGET  (r1 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r4 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList \l0x0025: ARITH  (r2 I:int) = (r5 I:int A[D('idx' int)]) + (1 int) \l0x0027: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.ArrayList), (r2 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x002b: CHECK_CAST (r1 I:java.lang.Float) = (java.lang.Float) (r1 I:??[OBJECT, ARRAY]) \l0x002d: INVOKE  (r1 I:float) = (r1 I:java.lang.Float) type: VIRTUAL call: java.lang.Float.floatValue():float A[MD:():float (c)]\l0x0031: ARITH  (r1 I:float) = (r1 I:float) \- (r0 I:float A[D('minSeparation' float)]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|0x000d: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minSeparation' float)]) \l}"];
MethodNode[shape=record,label="{private float com.google.android.material.slider.BaseSlider.getClampedValue((r4 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('idx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0039 \-\> B:36:0x0048, CROSS_EDGE: B:31:0x0023 \-\> B:32:0x0032, CROSS_EDGE: B:26:0x0013 \-\> B:28:0x0016, CROSS_EDGE: B:24:0x000d \-\> B:25:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x004c: r0 'minSeparation' F\l  0x0032\-0x004c: r1 'upperBound' F\l  0x0048\-0x004c: r2 'lowerBound' F\l  0x0000\-0x004c: r4 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\l  \-1 \-0x004c: r5 'idx' I\l  \-1 \-0x004c: r6 'value' F\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_35 -> Node_36;
Node_31 -> Node_32;
Node_24 -> Node_25;
}

