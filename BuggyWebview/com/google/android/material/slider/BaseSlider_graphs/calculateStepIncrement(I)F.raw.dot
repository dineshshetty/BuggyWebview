digraph "CFG forcom.google.android.material.slider.BaseSlider.calculateStepIncrement(I)F" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:float) = \l  (r3 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.calculateStepIncrement():float A[MD:():float (m)] (LINE:2517)\l0x0004: IGET  (r1 I:float) = \l  (r3 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.valueTo float  (LINE:2518)\l0x0006: IGET  (r2 I:float) = \l  (r3 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.valueFrom float \l0x0008: ARITH  (r1 I:float) = (r1 I:float) \- (r2 I:float) \l0x0009: ARITH  (r1 I:float) = (r1 I:float) \/ (r0 I:float A[D('increment' float)]) \l0x000a: CAST (r2 I:float) = (float) (r4 I:int A[D('stepFactor' int)])  (LINE:2519)\l0x000b: CMP_G  (r2 I:int) = (r1 I:float A[D('numSteps' float)]), (r2 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000d|0x000d: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:12:0x0010 \l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:float A[D('increment' float)])  (LINE:2520)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|0x0010: CAST (r2 I:float) = (float) (r4 I:int A[D('stepFactor' int)])  (LINE:2523)\l0x0011: ARITH  (r2 I:float) = (r1 I:float A[D('numSteps' float)]) \/ (r2 I:float) \l0x0013: INVOKE  (r2 I:int) = (r2 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x0017: CAST (r2 I:float) = (float) (r2 I:int) \l0x0018: ARITH  (r2 I:float) = (r2 I:float) * (r0 I:float A[D('increment' float)]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|RETURN\l|0x001a: RETURN  (r2 I:float) \l}"];
MethodNode[shape=record,label="{public float com.google.android.material.slider.BaseSlider.calculateStepIncrement((r3 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('stepFactor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001a \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x001a: r0 'increment' F\l  0x000a\-0x001a: r1 'numSteps' F\l  0x0000\-0x001a: r3 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\l  \-1 \-0x001a: r4 'stepFactor' I\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

