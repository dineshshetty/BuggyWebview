digraph "CFG forcom.google.android.material.slider.BaseSlider.adjustCustomThumbDrawableBounds(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IGET  (r0 I:int) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.thumbRadius int  (LINE:896)\l0x0002: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0004: INVOKE  (r1 I:int) = (r8 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicWidth():int A[MD:():int (c)] (LINE:897)\l0x0008: INVOKE  (r2 I:int) = (r8 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicHeight():int A[MD:():int (c)] (LINE:898)\l0x000c: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:899)\l0x000d: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('originalWidth' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0016 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('originalHeight' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0016 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|0x0012: INVOKE  \l  (r8 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r4 I:int)\l  (r4 I:int)\l  (r0 I:int A[D('thumbDiameter' int)])\l  (r0 I:int A[D('thumbDiameter' int)])\l type: VIRTUAL call: android.graphics.drawable.Drawable.setBounds(int, int, int, int):void A[MD:(int, int, int, int):void (c)] (LINE:900)\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x0028: RETURN   A[SYNTHETIC] (LINE:906)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|0x0016: CAST (r3 I:float) = (float) (r0 I:int A[D('thumbDiameter' int)])  (LINE:902)\l0x0017: INVOKE  (r5 I:int) = (r1 I:int A[D('originalWidth' int)]), (r2 I:int A[D('originalHeight' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x001b: CAST (r5 I:float) = (float) (r5 I:int) \l0x001c: ARITH  (r3 I:float) = (r3 I:float) \/ (r5 I:float) \l0x001d: CAST (r5 I:float) = (float) (r1 I:int A[D('originalWidth' int)])  (LINE:903)\l0x001e: ARITH  (r5 I:float) = (r5 I:float) * (r3 I:float A[D('scaleRatio' float)]) \l0x0020: CAST (r5 I:int) = (int) (r5 I:float) \l0x0021: CAST (r6 I:float) = (float) (r2 I:int A[D('originalHeight' int)]) \l0x0022: ARITH  (r6 I:float) = (r6 I:float) * (r3 I:float A[D('scaleRatio' float)]) \l0x0024: CAST (r6 I:int) = (int) (r6 I:float) \l0x0025: INVOKE  \l  (r8 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r4 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l type: VIRTUAL call: android.graphics.drawable.Drawable.setBounds(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|RETURN\lORIG_RETURN\l|0x0028: RETURN    (LINE:906)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.slider.BaseSlider.adjustCustomThumbDrawableBounds((r7 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r8 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0016 \-\> B:16:0x0028, CROSS_EDGE: B:12:0x000e \-\> B:15:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0028: r3 'scaleRatio' F\l  0x0004\-0x0028: r0 'thumbDiameter' I\l  0x0008\-0x0028: r1 'originalWidth' I\l  0x000c\-0x0028: r2 'originalHeight' I\l  0x0000\-0x0028: r7 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\l  \-1 \-0x0028: r8 'drawable' Landroid\/graphics\/drawable\/Drawable;\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

