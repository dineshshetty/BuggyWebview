digraph "CFG forcom.google.android.material.slider.BaseSlider.snapThumbToValue(IF)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|r5.focusedThumbIdx = r6\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|if ((((double) java.lang.Math.abs(r7 \- r5.values.get(r6).floatValue())) \> com.google.android.material.slider.BaseSlider.THRESHOLD ? 1 : (((double) java.lang.Math.abs(r7 \- r5.values.get(r6).floatValue())) == com.google.android.material.slider.BaseSlider.THRESHOLD ? 0 : \-1)) \>= 0) goto L5\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|RETURN\l|return false\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|float r0 = getClampedValue(r6, r7)\lr5.values.set(r6, java.lang.Float.valueOf(r0))\ldispatchOnChangedFromUser(r6)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.slider.BaseSlider.snapThumbToValue((r5v0 'this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r6v0 'idx' int A[D('idx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'value' float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0031 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

