digraph "CFG forcom.google.android.material.slider.BaseSlider.validateMinSeparation()V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:float) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: VIRTUAL call: com.google.android.material.slider.BaseSlider.getMinSeparation():float A[MD:():float (m)] (LINE:570)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:571)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: CMP_G  (r4 I:int) = (r0 I:float A[D('minSeparation' float)]), (r2 I:float) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0009|0x0009: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:44:0x0067 \l}"];
Node_28 [shape=record,label="{28\:\ 0x000b|0x000b: IGET  (r4 I:float) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.stepSize float  (LINE:575)\l0x000d: CMP_L  (r5 I:int) = (r4 I:float), (r2 I:float) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|0x000f: IF  (r5 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:43:0x0066 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: CMP_L  (r2 I:int) = (r0 I:float A[D('minSeparation' float)]), (r2 I:float) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0013|0x0013: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:46:? \l}"];
Node_32 [shape=record,label="{32\:\ 0x0015|0x0015: IGET  (r2 I:int) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.separationUnit int  (LINE:576)\l0x0017: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x004a \l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|0x001a: CMP_G  (r2 I:int) = (r0 I:float A[D('minSeparation' float)]), (r4 I:float)  (LINE:581)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001c|0x001c: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:39:0x0025 \l}"];
Node_36 [shape=record,label="{36\:\ 0x001e|0x001e: INVOKE  (r2 I:boolean) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r0 I:float A[D('minSeparation' float)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.isMultipleOfStepSize(float):boolean A[MD:(float):boolean (m)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0022|0x0022: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0025 \l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0066: RETURN   A[SYNTHETIC] (LINE:587)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0025|0x0025: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:582)\l0x0027: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0028: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x002a: INVOKE  (r6 I:java.lang.Float) = (r0 I:float A[D('minSeparation' float)]) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)] (LINE:584)\l0x002e: APUT  (r4 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r6 I:??[OBJECT, ARRAY]) \l0x0030: IGET  (r1 I:float) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.stepSize float \l0x0032: INVOKE  (r1 I:java.lang.Float) = (r1 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l0x0036: APUT  (r4 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x0038: IGET  (r1 I:float) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.stepSize float \l0x003a: INVOKE  (r1 I:java.lang.Float) = (r1 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l0x003e: APUT  (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x0040: CONST_STR  (r1 I:java.lang.String) =  \"minSeparation(%s) must be greater or equal and a multiple of stepSize(%s) when using stepSize(%s)\"  (LINE:583)\l0x0042: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r4 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x0046: INVOKE  (r2 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0049|0x0049: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_41 [shape=record,label="{41\:\ 0x004a|0x004a: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:577)\l0x004c: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x004e: INVOKE  (r5 I:java.lang.Float) = (r0 I:float A[D('minSeparation' float)]) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)] (LINE:579)\l0x0052: APUT  (r4 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r5 I:??[OBJECT, ARRAY]) \l0x0054: IGET  (r1 I:float) = \l  (r7 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.stepSize float \l0x0056: INVOKE  (r1 I:java.lang.Float) = (r1 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l0x005a: APUT  (r4 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x005c: CONST_STR  (r1 I:java.lang.String) =  \"minSeparation(%s) cannot be set as a dimension when using stepSize(%s)\"  (LINE:578)\l0x005e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r4 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x0062: INVOKE  (r2 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0065|0x0065: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x0066: RETURN   A[SYNTHETIC] (LINE:587)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0066|RETURN\lORIG_RETURN\l|0x0066: RETURN    (LINE:587)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0067|0x0067: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:572)\l0x0069: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x006b: INVOKE  (r4 I:java.lang.Float) = (r0 I:float A[D('minSeparation' float)]) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)] (LINE:573)\l0x006f: APUT  (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r4 I:??[OBJECT, ARRAY]) \l0x0071: CONST_STR  (r1 I:java.lang.String) =  \"minSeparation(%s) must be greater or equal to 0\" \l0x0073: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r3 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x0077: INVOKE  (r2 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x007a|0x007a: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void com.google.android.material.slider.BaseSlider.validateMinSeparation((r7 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x0066 \-\> B:25:?, CROSS_EDGE: B:35:0x001c \-\> B:39:0x0025, CROSS_EDGE: B:42:0x0065 \-\> B:25:?, CROSS_EDGE: B:31:0x0013 \-\> B:43:0x0066, CROSS_EDGE: B:29:0x000f \-\> B:43:0x0066, CROSS_EDGE: B:45:0x007a \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x007a: r0 'minSeparation' F\l  0x0000\-0x007a: r7 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_44;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_43;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_46;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_47[style=dashed];
Node_47 -> Node_25;
Node_39 -> Node_40;
Node_40 -> Node_25;
Node_41 -> Node_42;
Node_42 -> Node_25;
Node_46 -> Node_25;
Node_43 -> Node_25;
Node_44 -> Node_45;
Node_45 -> Node_25;
}

