digraph "CFG forcom.google.android.material.slider.BaseSlider.drawInactiveTrack(Landroid\/graphics\/Canvas;II)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:float[]) = \l  (r11 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.getActiveRange():float[] A[MD:():float[] (m)] (LINE:1752)\l0x0004: IGET  (r1 I:int) = \l  (r11 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.trackSidePadding int  (LINE:1753)\l0x0006: CAST (r2 I:float) = (float) (r1 I:int) \l0x0007: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0008: AGET  (r3 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('activeRange' float[])]), (r3 I:??[int, short, byte, char]) \l0x000a: CAST (r4 I:float) = (float) (r13 I:int A[D('width' int)]) \l0x000b: ARITH  (r3 I:float) = (r3 I:float) * (r4 I:float) \l0x000d: ARITH  (r2 I:float) = (r2 I:float) + (r3 I:float) \l0x000e: ARITH  (r3 I:int) = (r1 I:int) + (r13 I:int A[D('width' int)])  (LINE:1754)\l0x0010: CAST (r3 I:float) = (float) (r3 I:int) \l0x0011: CMP_G  (r3 I:int) = (r2 I:float A[D('right' float)]), (r3 I:float) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0013|0x0013: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:15:0x0020 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|0x0015: CAST (r6 I:float) = (float) (r14 I:int A[D('yCenter' int)])  (LINE:1755)\l0x0016: ARITH  (r1 I:int) = (r1 I:int) + (r13 I:int A[D('width' int)]) \l0x0017: CAST (r7 I:float) = (float) (r1 I:int) \l0x0018: CAST (r8 I:float) = (float) (r14 I:int A[D('yCenter' int)]) \l0x0019: IGET  (r9 I:android.graphics.Paint) = \l  (r11 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.inactiveTrackPaint android.graphics.Paint \l0x001b: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)]) \l0x001c: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('right' float)]) \l0x001d: INVOKE  (r4 I:android.graphics.Canvas), (r5 I:float), (r6 I:float), (r7 I:float), (r8 I:float), (r9 I:android.graphics.Paint) type: VIRTUAL call: android.graphics.Canvas.drawLine(float, float, float, float, android.graphics.Paint):void A[MD:(float, float, float, float, android.graphics.Paint):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: IGET  (r1 I:int) = \l  (r11 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.trackSidePadding int  (LINE:1759)\l0x0022: CAST (r3 I:float) = (float) (r1 I:int) \l0x0023: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: AGET  (r4 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('activeRange' float[])]), (r4 I:??[int, short, byte, char]) \l0x0026: CAST (r5 I:float) = (float) (r13 I:int A[D('width' int)]) \l0x0027: ARITH  (r4 I:float) = (r4 I:float) * (r5 I:float) \l0x0029: ARITH  (r3 I:float) = (r3 I:float) + (r4 I:float) \l0x002a: CAST (r4 I:float) = (float) (r1 I:int)  (LINE:1760)\l0x002b: CMP_L  (r4 I:int) = (r3 I:float A[D('left' float)]), (r4 I:float) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:19:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x002f|0x002f: CAST (r6 I:float) = (float) (r1 I:int)  (LINE:1761)\l0x0030: CAST (r7 I:float) = (float) (r14 I:int A[D('yCenter' int)]) \l0x0031: CAST (r9 I:float) = (float) (r14 I:int A[D('yCenter' int)]) \l0x0032: IGET  (r10 I:android.graphics.Paint) = \l  (r11 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.inactiveTrackPaint android.graphics.Paint \l0x0034: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)]) \l0x0035: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('left' float)]) \l0x0036: INVOKE  (r5 I:android.graphics.Canvas), (r6 I:float), (r7 I:float), (r8 I:float), (r9 I:float), (r10 I:android.graphics.Paint) type: VIRTUAL call: android.graphics.Canvas.drawLine(float, float, float, float, android.graphics.Paint):void A[MD:(float, float, float, float, android.graphics.Paint):void (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|RETURN\lORIG_RETURN\l|0x0039: RETURN    (LINE:1763)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0039: RETURN   A[SYNTHETIC] (LINE:1763)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.slider.BaseSlider.drawInactiveTrack((r11 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r12 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('yCenter' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x002d \-\> B:18:0x0039, CROSS_EDGE: B:13:0x0013 \-\> B:15:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0039: r0 'activeRange' [F\l  0x000e\-0x0039: r2 'right' F\l  0x002a\-0x0039: r3 'left' F\l  0x0000\-0x0039: r11 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\l  \-1 \-0x0039: r12 'canvas' Landroid\/graphics\/Canvas;\l  \-1 \-0x0039: r13 'width' I\l  \-1 \-0x0039: r14 'yCenter' I\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

