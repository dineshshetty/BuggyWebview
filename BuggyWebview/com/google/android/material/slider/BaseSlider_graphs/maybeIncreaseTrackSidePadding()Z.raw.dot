digraph "CFG forcom.google.android.material.slider.BaseSlider.maybeIncreaseTrackSidePadding()Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:int) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.thumbRadius int  (LINE:505)\l0x0002: IGET  (r1 I:int) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.defaultThumbRadius int \l0x0004: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x000a: IGET  (r2 I:int) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.trackHeight int  (LINE:506)\l0x000c: IGET  (r3 I:int) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.defaultTrackHeight int \l0x000e: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x000f: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0011: INVOKE  (r2 I:int) = (r2 I:int), (r1 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0015: IGET  (r3 I:int) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.minTrackSidePadding int  (LINE:507)\l0x0017: INVOKE  (r4 I:int) = (r0 I:int A[D('increasedSidePaddingByThumb' int)]), (r2 I:int A[D('increasedSidePaddingByTrack' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)] (LINE:508)\l0x001b: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x001c: IGET  (r4 I:int) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.trackSidePadding int  (LINE:509)\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|0x001e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newTrackSidePadding' int)])  \-\> B:16:0x0021 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|RETURN\l|0x0020: RETURN  (r1 I:boolean)  (LINE:510)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|0x0021: IPUT  \l  (r3 I:int A[D('newTrackSidePadding' int)])\l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.trackSidePadding int  (LINE:512)\l0x0023: INVOKE  (r1 I:boolean) = \l  (r5 I:android.view.View A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: STATIC call: androidx.core.view.ViewCompat.isLaidOut(android.view.View):boolean A[MD:(android.view.View):boolean (m)] (LINE:513)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|0x0027: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:? \l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|0x0029: INVOKE  (r1 I:int) = \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: VIRTUAL call: com.google.android.material.slider.BaseSlider.getWidth():int A[MD:():int (c)] (LINE:514)\l0x002d: INVOKE  \l  (r5 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r1 I:int)\l type: DIRECT call: com.google.android.material.slider.BaseSlider.updateTrackWidth(int):void A[MD:(int):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:516)\l0x0031: RETURN  (r1 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0030: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) A[SYNTHETIC] (LINE:516)\l0x0031: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.slider.BaseSlider.maybeIncreaseTrackSidePadding((r5 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0031 \-\> B:12:?, CROSS_EDGE: B:17:0x0027 \-\> B:19:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0031: r0 'increasedSidePaddingByThumb' I\l  0x0015\-0x0031: r2 'increasedSidePaddingByTrack' I\l  0x001c\-0x0031: r3 'newTrackSidePadding' I\l  0x0000\-0x0031: r5 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_21 -> Node_12;
}

