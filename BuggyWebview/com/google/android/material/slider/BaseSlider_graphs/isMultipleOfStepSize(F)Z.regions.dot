digraph "CFG forcom.google.android.material.slider.BaseSlider.isMultipleOfStepSize(F)Z" {
subgraph cluster_Region_1707144730 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|double double r0 = new java.math.BigDecimal(java.lang.Float.toString(r8)).divide(new java.math.BigDecimal(java.lang.Float.toString(r7.stepSize)), java.math.MathContext.DECIMAL64).doubleValue()\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|RETURN\l|return java.lang.Math.abs(((double) java.lang.Math.round(r0)) \- r0) \< com.google.android.material.slider.BaseSlider.THRESHOLD\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0031|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0033|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.slider.BaseSlider.isMultipleOfStepSize((r7v0 'this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]), (r8v0 'value' float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0033 \-\> B:14:0x0034\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_8 -> Node_10;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

