digraph "CFG forcom.google.android.material.slider.BaseSlider.pickActiveThumb()Z" {
Node_45 [shape=record,label="{45\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x0000|0x0000: IGET  (r0 I:int) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.activeThumbIdx int  (LINE:1976)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0007 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0006|RETURN\l|0x0006: RETURN  (r2 I:boolean)  (LINE:1977)\l}"];
Node_46 [shape=record,label="{46\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x0007|0x0007: INVOKE  (r0 I:float) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.getValueOfTouchPositionAbsolute():float A[MD:():float (m)] (LINE:1980)\l0x000b: INVOKE  (r3 I:float) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r0 I:float A[D('touchValue' float)])\l type: DIRECT call: com.google.android.material.slider.BaseSlider.valueToX(float):float A[MD:(float):float (m)] (LINE:1981)\l0x000f: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1982)\l0x0010: IPUT  \l  (r4 I:int)\l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.activeThumbIdx int \l0x0012: IGET  (r5 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList  (LINE:1983)\l0x0014: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.ArrayList), (r4 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0018: CHECK_CAST (r5 I:java.lang.Float) = (java.lang.Float) (r5 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r5 I:float) = (r5 I:java.lang.Float) type: VIRTUAL call: java.lang.Float.floatValue():float A[MD:():float (c)]\l0x001e: ARITH  (r5 I:float) = (r5 I:float) \- (r0 I:float A[D('touchValue' float)]) \l0x001f: INVOKE  (r5 I:float) = (r5 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x0023: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1984)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0024|LOOP_START\lLOOP:0: B:51:0x0024\-\>B:76:0x0090\l|0x0024: IGET  (r7 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList \l0x0026: INVOKE  (r7 I:int) = (r7 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x002a|0x002a: IF  (r6 I:??[int, byte, short, char] A[D('i' int)]) \>= (r7 I:??[int, byte, short, char])  \-\> B:83:0x0093 \l}"];
Node_53 [shape=record,label="{53\:\ 0x002c|0x002c: IGET  (r7 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList  (LINE:1985)\l0x002e: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.util.ArrayList), (r6 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0032: CHECK_CAST (r7 I:java.lang.Float) = (java.lang.Float) (r7 I:??[OBJECT, ARRAY]) \l0x0034: INVOKE  (r7 I:float) = (r7 I:java.lang.Float) type: VIRTUAL call: java.lang.Float.floatValue():float A[MD:():float (c)]\l0x0038: ARITH  (r7 I:float) = (r7 I:float) \- (r0 I:float A[D('touchValue' float)]) \l0x0039: INVOKE  (r7 I:float) = (r7 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x003d: IGET  (r8 I:java.util.ArrayList\<java.lang.Float\>) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.values java.util.ArrayList  (LINE:1986)\l0x003f: INVOKE  (r8 I:java.lang.Object) = (r8 I:java.util.ArrayList), (r6 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0043: CHECK_CAST (r8 I:java.lang.Float) = (java.lang.Float) (r8 I:??[OBJECT, ARRAY]) \l0x0045: INVOKE  (r8 I:float) = (r8 I:java.lang.Float) type: VIRTUAL call: java.lang.Float.floatValue():float A[MD:():float (c)]\l0x0049: INVOKE  (r8 I:float) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l  (r8 I:float)\l type: DIRECT call: com.google.android.material.slider.BaseSlider.valueToX(float):float A[MD:(float):float (m)]\l0x004d: INVOKE  (r9 I:int) = (r7 I:float A[D('valueDiff' float)]), (r5 I:float A[D('activeThumbDiff' float)]) type: STATIC call: java.lang.Float.compare(float, float):int A[MD:(float, float):int (c)] (LINE:1987)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0051|0x0051: IF  (r9 I:??[int, byte, short, char]) \<= (r2 I:??[int, byte, short, char])  \-\> B:56:0x0054 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0054|0x0054: INVOKE  (r9 I:boolean) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l type: VIRTUAL call: com.google.android.material.slider.BaseSlider.isRtl():boolean A[MD:():boolean (m)] (LINE:1991)\l0x0058: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0059|0x0059: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0062 \l}"];
Node_58 [shape=record,label="{58\:\ 0x005b|0x005b: ARITH  (r9 I:float) = (r8 I:float A[D('valueX' float)]) \- (r3 I:float A[D('touchX' float)]) \l0x005d: CMP_L  (r9 I:int) = (r9 I:float), (r10 I:float) \l}"];
Node_59 [shape=record,label="{59\:\ 0x005f|0x005f: IF  (r9 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:64:0x006a \l}"];
Node_64 [shape=record,label="{64\:\ 0x006a|0x006a: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_65 [shape=record,label="{65\:\ 0x006b|0x006b: INVOKE  (r10 I:int) = (r7 I:float A[D('valueDiff' float)]), (r5 I:float A[D('activeThumbDiff' float)]) type: STATIC call: java.lang.Float.compare(float, float):int A[MD:(float, float):int (c)] (LINE:1994)\l}"];
Node_66 [shape=record,label="{66\:\ 0x006f|0x006f: IF  (r10 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:68:0x0075 \l}"];
Node_67 [shape=record,label="{67\:\ 0x0071|0x0071: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('activeThumbDiff' float)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('valueDiff' float)])  (LINE:1995)\l0x0072: IPUT  \l  (r6 I:int A[D('i' int)])\l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.activeThumbIdx int  (LINE:1996)\l}"];
Node_86 [shape=record,label="{86\:\ 0x0090|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0090|LOOP_END\lLOOP:0: B:51:0x0024\-\>B:76:0x0090\l|0x0090: ARITH  (r6 I:int) = (r6 I:int A[D('i' int)]) + (1 int)  (LINE:1984)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0075|0x0075: INVOKE  (r10 I:int) = (r7 I:float A[D('valueDiff' float)]), (r5 I:float A[D('activeThumbDiff' float)]) type: STATIC call: java.lang.Float.compare(float, float):int A[MD:(float, float):int (c)] (LINE:2000)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0079|0x0079: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:87:0x0090 \l}"];
Node_70 [shape=record,label="{70\:\ 0x007b|0x007b: ARITH  (r10 I:float) = (r8 I:float A[D('valueX' float)]) \- (r3 I:float A[D('touchX' float)])  (LINE:2002)\l0x007d: INVOKE  (r10 I:float) = (r10 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x0081: IGET  (r11 I:int) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.scaledTouchSlop int \l0x0083: CAST (r11 I:float) = (float) (r11 I:int) \l0x0084: CMP_G  (r10 I:int) = (r10 I:float), (r11 I:float) \l}"];
Node_71 [shape=record,label="{71\:\ 0x0086|0x0086: IF  (r10 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:74:0x008b \l}"];
Node_74 [shape=record,label="{74\:\ 0x008b|0x008b: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('movingForward' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x0090  (LINE:2007)\l}"];
Node_75 [shape=record,label="{75\:\ 0x008d|0x008d: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('activeThumbDiff' float)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('valueDiff' float)])  (LINE:2008)\l0x008e: IPUT  \l  (r6 I:int A[D('i' int)])\l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.activeThumbIdx int  (LINE:2009)\l}"];
Node_85 [shape=record,label="{85\:\ 0x0090|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x0090|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0088|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0088|0x0088: IPUT  \l  (r1 I:int)\l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.activeThumbIdx int  (LINE:2003)\l}"];
Node_73 [shape=record,label="{73\:\ 0x008a|RETURN\l|0x008a: RETURN  (r4 I:boolean)  (LINE:2004)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0090|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0068|0x0068: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0062|0x0062: ARITH  (r9 I:float) = (r8 I:float A[D('valueX' float)]) \- (r3 I:float A[D('touchX' float)]) \l0x0064: CMP_G  (r9 I:int) = (r9 I:float), (r10 I:float) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0066|0x0066: IF  (r9 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:64:0x006a \l}"];
Node_84 [shape=record,label="{84\:\ 0x0093|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0093|0x0093: IGET  (r6 I:int A[D('i' int)]) = \l  (r12 I:com.google.android.material.slider.BaseSlider A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>)])\l com.google.android.material.slider.BaseSlider.activeThumbIdx int  (LINE:2014)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0095|0x0095: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x0098 \l}"];
Node_80 [shape=record,label="{80\:\ 0x0098|RETURN\lORIG_RETURN\l|0x0098: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0099: RETURN  (r2 I:boolean) \l}"];
Node_89 [shape=record,label="{89\:\ ?|SYNTHETIC\lRETURN\l|0x0099: RETURN  (r2 I:boolean) A[SYNTHETIC]\l}"];
Node_83 [shape=record,label="{83\:\ 0x0093|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected boolean com.google.android.material.slider.BaseSlider.pickActiveThumb((r12 'this' I:com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\> A[D('this' com.google.android.material.slider.BaseSlider\<S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:76:0x0090 \-\> B:51:0x0024, CROSS_EDGE: B:73:0x008a \-\> B:46:?, CROSS_EDGE: B:75:0x008d \-\> B:76:0x0090, CROSS_EDGE: B:74:0x008b \-\> B:76:0x0090, CROSS_EDGE: B:69:0x0079 \-\> B:76:0x0090, CROSS_EDGE: B:63:0x0068 \-\> B:65:0x006b, CROSS_EDGE: B:62:0x0066 \-\> B:63:0x0068, CROSS_EDGE: B:62:0x0066 \-\> B:64:0x006a, CROSS_EDGE: B:81:0x0099 \-\> B:46:?, CROSS_EDGE: B:78:0x0095 \-\> B:81:0x0099, CROSS_EDGE: B:52:0x002a \-\> B:77:0x0093\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003d\-0x0090: r7 'valueDiff' F\l  0x004d\-0x0090: r8 'valueX' F\l  0x006b\-0x0090: r9 'movingForward' Z\l  0x0024\-0x0093: r6 'i' I\l  0x000b\-0x0099: r0 'touchValue' F\l  0x000f\-0x0099: r3 'touchX' F\l  0x0023\-0x0099: r5 'activeThumbDiff' F\l  0x0000\-0x0099: r12 'this' Lcom\/google\/android\/material\/slider\/BaseSlider;, signature: Lcom\/google\/android\/material\/slider\/BaseSlider\<TS;TL;TT;\>;\lTYPE_VARS: [S extends com.google.android.material.slider.BaseSlider\<S, L, T\>, T extends com.google.android.material.slider.BaseOnSliderTouchListener\<S\>, L extends com.google.android.material.slider.BaseOnChangeListener\<S\>]\lMETHOD_OVERRIDE: [com.google.android.material.slider.BaseSlider.pickActiveThumb():boolean]\l}"];
MethodNode -> Node_45;Node_45 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_46;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_83;
Node_53 -> Node_54;
Node_54 -> Node_56;
Node_54 -> Node_84[style=dashed];
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_61;
Node_58 -> Node_59;
Node_59 -> Node_64;
Node_59 -> Node_63[style=dashed];
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_86;
Node_86 -> Node_76;
Node_76 -> Node_51;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_87;
Node_70 -> Node_71;
Node_71 -> Node_74;
Node_71 -> Node_82[style=dashed];
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_88;
Node_75 -> Node_85;
Node_85 -> Node_76;
Node_88 -> Node_76;
Node_82 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_46;
Node_87 -> Node_76;
Node_63 -> Node_65;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_84 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_80;
Node_78 -> Node_89[style=dashed];
Node_80 -> Node_46;
Node_89 -> Node_46;
Node_83 -> Node_77;
}

