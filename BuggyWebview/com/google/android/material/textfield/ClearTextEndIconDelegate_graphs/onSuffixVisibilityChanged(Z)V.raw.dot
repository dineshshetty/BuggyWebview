digraph "CFG forcom.google.android.material.textfield.ClearTextEndIconDelegate.onSuffixVisibilityChanged(Z)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.textfield.EndCompoundLayout) = (r1 I:com.google.android.material.textfield.ClearTextEndIconDelegate) com.google.android.material.textfield.ClearTextEndIconDelegate.endLayout com.google.android.material.textfield.EndCompoundLayout  (LINE:112)\l0x0002: INVOKE  (r0 I:java.lang.CharSequence) = (r0 I:com.google.android.material.textfield.EndCompoundLayout) type: VIRTUAL call: com.google.android.material.textfield.EndCompoundLayout.getSuffixText():java.lang.CharSequence A[MD:():java.lang.CharSequence (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:113)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r1 I:com.google.android.material.textfield.ClearTextEndIconDelegate), (r2 I:boolean A[D('visible' boolean)]) type: DIRECT call: com.google.android.material.textfield.ClearTextEndIconDelegate.animateIcon(boolean):void A[MD:(boolean):void (m)] (LINE:115)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|RETURN\l|0x000c: RETURN    (LINE:116)\l}"];
MethodNode[shape=record,label="{void com.google.android.material.textfield.ClearTextEndIconDelegate.onSuffixVisibilityChanged((r1 'this' I:com.google.android.material.textfield.ClearTextEndIconDelegate A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[D('visible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000c \-\> B:1:?\lDebug Info:\l  \-1 \-0x000c: r2 'visible' Z\lMETHOD_OVERRIDE: [com.google.android.material.textfield.EndIconDelegate.onSuffixVisibilityChanged(boolean):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

