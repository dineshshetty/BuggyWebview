digraph "CFG forcom.google.android.material.textfield.CutoutDrawable.ImplApi14.preDraw(Landroid\/graphics\/Canvas;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:android.graphics.drawable.Drawable$Callback) = (r4 I:com.google.android.material.textfield.CutoutDrawable$ImplApi14) type: VIRTUAL call: com.google.android.material.textfield.CutoutDrawable.ImplApi14.getCallback():android.graphics.drawable.Drawable$Callback A[MD:():android.graphics.drawable.Drawable$Callback (s)] (LINE:137)\l0x0004: INVOKE  (r1 I:boolean) = \l  (r4 I:com.google.android.material.textfield.CutoutDrawable$ImplApi14)\l  (r0 I:android.graphics.drawable.Drawable$Callback A[D('callback' android.graphics.drawable.Drawable$Callback)])\l type: DIRECT call: com.google.android.material.textfield.CutoutDrawable.ImplApi14.useHardwareLayer(android.graphics.drawable.Drawable$Callback):boolean A[MD:(android.graphics.drawable.Drawable$Callback):boolean (m)] (LINE:139)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0019 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('callback' android.graphics.drawable.Drawable$Callback)])  (LINE:140)\l0x000b: CHECK_CAST (r1 I:android.view.View) = (android.view.View) (r1 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r2 I:int) = (r1 I:android.view.View A[D('viewCallback' android.view.View)]) type: VIRTUAL call: android.view.View.getLayerType():int A[MD:():int (c)] (LINE:142)\l0x0011: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|0x0012: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:? \l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:143)\l0x0015: INVOKE  (r1 I:android.view.View A[D('viewCallback' android.view.View)]), (r3 I:int), (r2 I:android.graphics.Paint) type: VIRTUAL call: android.view.View.setLayerType(int, android.graphics.Paint):void A[MD:(int, android.graphics.Paint):void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN   A[SYNTHETIC] (LINE:149)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN   A[SYNTHETIC] (LINE:149)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|0x0019: INVOKE  \l  (r4 I:com.google.android.material.textfield.CutoutDrawable$ImplApi14)\l  (r5 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l type: DIRECT call: com.google.android.material.textfield.CutoutDrawable.ImplApi14.saveCanvasLayer(android.graphics.Canvas):void A[MD:(android.graphics.Canvas):void (m)] (LINE:147)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: RETURN    (LINE:149)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.textfield.CutoutDrawable.ImplApi14.preDraw((r4 'this' I:com.google.android.material.textfield.CutoutDrawable$ImplApi14 A[IMMUTABLE_TYPE, THIS]), (r5 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0012 \-\> B:21:0x001c, CROSS_EDGE: B:20:0x0019 \-\> B:21:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0018: r1 'viewCallback' Landroid\/view\/View;\l  0x0004\-0x001c: r0 'callback' Landroid\/graphics\/drawable\/Drawable$Callback;\l  \-1 \-0x001c: r5 'canvas' Landroid\/graphics\/Canvas;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_22;
Node_22 -> Node_13;
Node_23 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

