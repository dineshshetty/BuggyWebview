digraph "CFG forcom.google.android.material.textfield.PasswordToggleEndIconDelegate.lambda$new$0$com\-google\-android\-material\-textfield\-PasswordToggleEndIconDelegate(Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|android.widget.EditText r0 = r3.editText\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|int r0 = r0.getSelectionEnd()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|if (hasPasswordTransformation() == false) goto L12\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|r3.editText.setTransformationMethod(null)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|if (r0 \< 0) goto L10\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|r3.editText.setSelection(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|refreshIconState()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|r3.editText.setTransformationMethod(android.text.method.PasswordTransformationMethod.getInstance())\l}"];
MethodNode[shape=record,label="{\/* synthetic *\/ void com.google.android.material.textfield.PasswordToggleEndIconDelegate.lambda$new$0$com\-google\-android\-material\-textfield\-PasswordToggleEndIconDelegate((r3v0 'this' com.google.android.material.textfield.PasswordToggleEndIconDelegate A[IMMUTABLE_TYPE, THIS]), (r4v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0029 \-\> B:1:?, CROSS_EDGE: B:9:0x001f \-\> B:11:0x0026, CROSS_EDGE: B:8:0x0016 \-\> B:9:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_8 -> Node_9;
}

