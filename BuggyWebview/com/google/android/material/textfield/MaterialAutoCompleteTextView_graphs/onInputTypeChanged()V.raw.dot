digraph "CFG forcom.google.android.material.textfield.MaterialAutoCompleteTextView.onInputTypeChanged()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:com.google.android.material.textfield.TextInputLayout) = (r1 I:com.google.android.material.textfield.MaterialAutoCompleteTextView) type: DIRECT call: com.google.android.material.textfield.MaterialAutoCompleteTextView.findTextInputLayoutAncestor():com.google.android.material.textfield.TextInputLayout A[MD:():com.google.android.material.textfield.TextInputLayout (m)] (LINE:423)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('textInputLayout' com.google.android.material.textfield.TextInputLayout)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:424)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: INVOKE  \l  (r0 I:com.google.android.material.textfield.TextInputLayout A[D('textInputLayout' com.google.android.material.textfield.TextInputLayout)])\l type: VIRTUAL call: com.google.android.material.textfield.TextInputLayout.updateEditTextBoxBackgroundIfNeeded():void A[MD:():void (m)] (LINE:425)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|RETURN\lORIG_RETURN\l|0x0009: RETURN    (LINE:427)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0009: RETURN   A[SYNTHETIC] (LINE:427)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.textfield.MaterialAutoCompleteTextView.onInputTypeChanged((r1 'this' I:com.google.android.material.textfield.MaterialAutoCompleteTextView A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:12:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0009: r0 'textInputLayout' Lcom\/google\/android\/material\/textfield\/TextInputLayout;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

