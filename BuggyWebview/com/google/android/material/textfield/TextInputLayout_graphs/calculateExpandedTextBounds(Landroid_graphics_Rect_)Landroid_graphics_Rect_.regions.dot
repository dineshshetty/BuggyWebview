digraph "CFG forcom.google.android.material.textfield.TextInputLayout.calculateExpandedTextBounds(Landroid\/graphics\/Rect;)Landroid\/graphics\/Rect;" {
subgraph cluster_Region_2049123566 {
label = "R(1:(2:(1:7)|(2:3|4)))";
node [shape=record,color=blue];
subgraph cluster_Region_1029086155 {
label = "R(2:(1:7)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1773817971 {
label = "IF [B:11:0x0002] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r4.editText == null) goto L6\l}"];
subgraph cluster_Region_192320556 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0034|throw new java.lang.IllegalStateException()\l}"];
}
}
subgraph cluster_Region_18164300 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|android.graphics.Rect android.graphics.Rect r0 = r4.tmpBoundsRect\lfloat float r1 = r4.collapsingTextHelper.getExpandedTextHeight()\lr0.left = r5.left + r4.editText.getCompoundPaddingLeft()\lr0.top = calculateExpandedLabelTop(r5, r1)\lr0.right = r5.right \- r4.editText.getCompoundPaddingRight()\lr0.bottom = calculateExpandedLabelBottom(r5, r0, r1)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|RETURN\l|return r0\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x002f}"];
MethodNode[shape=record,label="{private android.graphics.Rect com.google.android.material.textfield.TextInputLayout.calculateExpandedTextBounds((r4v0 'this' com.google.android.material.textfield.TextInputLayout A[IMMUTABLE_TYPE, THIS]), (r5v0 'rect' android.graphics.Rect A[D('rect' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0034 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_14 -> Node_15;
}

