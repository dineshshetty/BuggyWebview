digraph "CFG forcom.google.android.material.textfield.TextInputLayout.updateEditTextHeightBasedOnIcon()Z" {
subgraph cluster_Region_128459972 {
label = "R(1:(2:(2:7|8)|(1:9))) | DECL_VAR: int maxIconHeight\l";
node [shape=record,color=blue];
subgraph cluster_Region_1338375548 {
label = "R(2:(2:7|8)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_227206304 {
label = "IF [B:13:0x0003, B:16:0x001c] THEN: R(2:7|8) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0003|if (r3.editText != null) goto L5\l}"];
Node_16 [shape=record,label="{16\:\ 0x001c|ADDED_TO_REGION\l|if (r3.editText.getMeasuredHeight() \< (r0 = java.lang.Math.max(r3.endLayout.getMeasuredHeight(), r3.startLayout.getMeasuredHeight()))) goto L7\l}"];
subgraph cluster_Region_675387142 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x001e|r3.editText.setMinimumHeight(r0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0024|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1846089934 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0025|RETURN\l|return false\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0005|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0006}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.textfield.TextInputLayout.updateEditTextHeightBasedOnIcon((r3v0 'this' com.google.android.material.textfield.TextInputLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0024 \-\> B:11:?, CROSS_EDGE: B:19:0x0025 \-\> B:11:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_16 -> Node_17;
Node_16 -> Node_19[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_11;
Node_15 -> Node_16;
}

