digraph "CFG forcom.google.android.material.textfield.TextInputLayout.calculateExpandedLabelBottom(Landroid\/graphics\/Rect;Landroid\/graphics\/Rect;F)I" {
subgraph cluster_Region_1572939325 {
label = "R(1:(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_826288307 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_121628381 {
label = "IF [B:11:0x0004] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (isSingleLineFilledTextField() != false) goto L3\l}"];
subgraph cluster_Region_1673421477 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|return (int) (r4.top + r5)\l}"];
}
}
subgraph cluster_Region_932855841 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0015|RETURN\l|return r3.bottom \- r2.editText.getCompoundPaddingBottom()\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0006}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000c}"];
MethodNode[shape=record,label="{private int com.google.android.material.textfield.TextInputLayout.calculateExpandedLabelBottom((r2v0 'this' com.google.android.material.textfield.TextInputLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'rect' android.graphics.Rect A[D('rect' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'bounds' android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'labelHeight' float A[D('labelHeight' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0015 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

