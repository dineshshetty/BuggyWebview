digraph "CFG forcom.google.android.material.textfield.StartCompoundLayout.setStartIconVisible(Z)V" {
subgraph cluster_Region_895355852 {
label = "R(1:(1:(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_925230133 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1003780899 {
label = "IF [B:3:0x0004] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|if (isStartIconVisible() != r3) goto L3\l}"];
subgraph cluster_Region_728492163 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x000e|PHI: r1 \l  PHI: (r1v1 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r2.startIconView.setVisibility(r3 ? 0 : 8)\lupdatePrefixTextViewPadding()\lupdateVisibility()\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0006}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0008}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000a}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0017|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000c}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.textfield.StartCompoundLayout.setStartIconVisible((r2v0 'this' com.google.android.material.textfield.StartCompoundLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'visible' boolean A[D('visible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000c \-\> B:8:0x000e, CROSS_EDGE: B:3:0x0004 \-\> B:9:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l INFO: \l \-\> Access modifiers changed from: package\-private\}\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_9 -> Node_1;
Node_7 -> Node_8;
Node_10 -> Node_1;
}

