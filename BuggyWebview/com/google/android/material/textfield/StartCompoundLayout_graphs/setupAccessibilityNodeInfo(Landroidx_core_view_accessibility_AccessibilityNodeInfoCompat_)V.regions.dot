digraph "CFG forcom.google.android.material.textfield.StartCompoundLayout.setupAccessibilityNodeInfo(Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat;)V" {
subgraph cluster_Region_1856935497 {
label = "R(1:(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1983042533 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1848091491 {
label = "IF [B:3:0x0006] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r1.prefixTextView.getVisibility() == 0) goto L3\l}"];
subgraph cluster_Region_452747732 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|r2.setLabelFor(r1.prefixTextView)\lr2.setTraversalAfter(r1.prefixTextView)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_16424988 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0013|r2.setTraversalAfter(r1.startIconView)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0018|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.textfield.StartCompoundLayout.setupAccessibilityNodeInfo((r1v0 'this' com.google.android.material.textfield.StartCompoundLayout A[IMMUTABLE_TYPE, THIS]), (r2v0 'info' androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[D('info' androidx.core.view.accessibility.AccessibilityNodeInfoCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0013 \-\> B:6:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l INFO: \l \-\> Access modifiers changed from: package\-private\}\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_6 -> Node_1;
}

