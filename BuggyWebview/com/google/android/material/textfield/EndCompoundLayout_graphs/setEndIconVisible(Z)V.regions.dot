digraph "CFG forcom.google.android.material.textfield.EndCompoundLayout.setEndIconVisible(Z)V" {
subgraph cluster_Region_874123488 {
label = "R(1:(1:(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_464116580 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1503173918 {
label = "IF [B:14:0x0004] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0004|if (isEndIconVisible() != r3) goto L3\l}"];
subgraph cluster_Region_758611486 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000e|PHI: r1 \l  PHI: (r1v1 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r2.endIconView.setVisibility(r3 ? 0 : 8)\lupdateEndLayoutVisibility()\lupdateSuffixTextViewPadding()\lr2.textInputLayout.updateDummyDrawables()\l}"];
}
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0006}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0008}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000a}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x001c|ORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000c}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.textfield.EndCompoundLayout.setEndIconVisible((r2v0 'this' com.google.android.material.textfield.EndCompoundLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'visible' boolean A[D('visible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000c \-\> B:19:0x000e, CROSS_EDGE: B:14:0x0004 \-\> B:20:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_14 -> Node_15;
Node_14 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_20 -> Node_12;
Node_18 -> Node_19;
Node_21 -> Node_12;
}

