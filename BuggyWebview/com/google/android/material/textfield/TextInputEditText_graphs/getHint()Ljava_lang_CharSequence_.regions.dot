digraph "CFG forcom.google.android.material.textfield.TextInputEditText.getHint()Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_1993702107 {
label = "R(2:1|(2:(1:6)|(1:9)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|com.google.android.material.textfield.TextInputLayout com.google.android.material.textfield.TextInputLayout r0 = getTextInputLayout()\l}"];
subgraph cluster_Region_1380819703 {
label = "R(2:(1:6)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1516769501 {
label = "IF [B:3:0x0004, B:5:0x000a] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r0 != null) goto L3\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|ADDED_TO_REGION\l|if (r0.isProvidingHint() != false) goto L5\l}"];
subgraph cluster_Region_25820259 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0010|RETURN\l|return r0.getHint()\l}"];
}
}
subgraph cluster_Region_1805826626 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0015|RETURN\l|return super.getHint()\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0006}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0011}"];
MethodNode[shape=record,label="{public java.lang.CharSequence com.google.android.material.textfield.TextInputEditText.getHint((r2v0 'this' com.google.android.material.textfield.TextInputEditText A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:9:0x0015 \-\> B:1:?, CROSS_EDGE: B:3:0x0004 \-\> B:8:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.widget.TextView.getHint():java.lang.CharSequence\}]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_1;
Node_9 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_8 -> Node_9;
}

