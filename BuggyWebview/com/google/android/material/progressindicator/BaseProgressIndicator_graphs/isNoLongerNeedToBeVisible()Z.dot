digraph "CFG forcom.google.android.material.progressindicator.BaseProgressIndicator.isNoLongerNeedToBeVisible()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (getProgressDrawable() == null) goto L7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (getProgressDrawable().isVisible() != false) goto L5\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\lRETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010}"];
Node_7 [shape=record,label="{7\:\ 0x0014|if (getIndeterminateDrawable() == null) goto L11\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016}"];
Node_9 [shape=record,label="{9\:\ 0x001e|if (getIndeterminateDrawable().isVisible() != false) goto L5\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|RETURN\lORIG_RETURN\l|return true\l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.progressindicator.BaseProgressIndicator.isNoLongerNeedToBeVisible((r1v0 'this' com.google.android.material.progressindicator.BaseProgressIndicator\<S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec\> A[D('this' com.google.android.material.progressindicator.BaseProgressIndicator\<S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0023 \-\> B:13:0x0024, CROSS_EDGE: B:7:0x0014 \-\> B:12:0x0023, CROSS_EDGE: B:5:0x000e \-\> B:11:0x0021, CROSS_EDGE: B:3:0x0004 \-\> B:6:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_11 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_12[style=dashed];
Node_12 -> Node_1;
}

