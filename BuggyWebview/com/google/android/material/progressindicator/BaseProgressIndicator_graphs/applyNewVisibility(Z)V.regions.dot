digraph "CFG forcom.google.android.material.progressindicator.BaseProgressIndicator.applyNewVisibility(Z)V" {
subgraph cluster_Region_705356528 {
label = "R(1:(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1446522374 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1809302787 {
label = "IF [B:3:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r3.isParentDoneInitializing == false) goto L3\l}"];
subgraph cluster_Region_406864623 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1696611957 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0005|((com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange) getCurrentDrawable()).setVisible(visibleToUser(), false, r4)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0013}"];
MethodNode[shape=record,label="{protected void com.google.android.material.progressindicator.BaseProgressIndicator.applyNewVisibility((r3v0 'this' com.google.android.material.progressindicator.BaseProgressIndicator\<S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec\> A[D('this' com.google.android.material.progressindicator.BaseProgressIndicator\<S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec\>), IMMUTABLE_TYPE, THIS]), (r4v0 'animate' boolean A[D('animate' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0013 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_6 -> Node_1;
}

