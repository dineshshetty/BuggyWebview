digraph "CFG forcom.google.android.material.progressindicator.LinearProgressIndicator.setIndicatorDirection(I)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: IGET  (r0 I:S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec) = (r4 I:com.google.android.material.progressindicator.LinearProgressIndicator) com.google.android.material.progressindicator.LinearProgressIndicator.spec com.google.android.material.progressindicator.BaseProgressIndicatorSpec  (LINE:213)\l0x0002: CHECK_CAST (r0 I:com.google.android.material.progressindicator.LinearProgressIndicatorSpec) = (com.google.android.material.progressindicator.LinearProgressIndicatorSpec) (r0 I:??[OBJECT, ARRAY]) \l0x0004: IPUT  \l  (r5 I:int A[D('indicatorDirection' int)])\l  (r0 I:com.google.android.material.progressindicator.LinearProgressIndicatorSpec)\l com.google.android.material.progressindicator.LinearProgressIndicatorSpec.indicatorDirection int \l0x0006: IGET  (r0 I:S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec) = (r4 I:com.google.android.material.progressindicator.LinearProgressIndicator) com.google.android.material.progressindicator.LinearProgressIndicator.spec com.google.android.material.progressindicator.BaseProgressIndicatorSpec  (LINE:214)\l0x0008: CHECK_CAST (r0 I:com.google.android.material.progressindicator.LinearProgressIndicatorSpec) = (com.google.android.material.progressindicator.LinearProgressIndicatorSpec) (r0 I:??[OBJECT, ARRAY]) \l0x000a: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('indicatorDirection' int)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0029 \l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: INVOKE  (r2 I:int) = (r4 I:android.view.View) type: STATIC call: androidx.core.view.ViewCompat.getLayoutDirection(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:216)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001c \l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|0x0013: IGET  (r2 I:S extends com.google.android.material.progressindicator.BaseProgressIndicatorSpec) = (r4 I:com.google.android.material.progressindicator.LinearProgressIndicator) com.google.android.material.progressindicator.LinearProgressIndicator.spec com.google.android.material.progressindicator.BaseProgressIndicatorSpec \l0x0015: CHECK_CAST (r2 I:com.google.android.material.progressindicator.LinearProgressIndicatorSpec) = (com.google.android.material.progressindicator.LinearProgressIndicatorSpec) (r2 I:??[OBJECT, ARRAY]) \l0x0017: IGET  (r2 I:int) = (r2 I:com.google.android.material.progressindicator.LinearProgressIndicatorSpec) com.google.android.material.progressindicator.LinearProgressIndicatorSpec.indicatorDirection int \l0x0019: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0029 \l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|0x001c: INVOKE  (r2 I:int) = (r4 I:android.view.View) type: STATIC call: androidx.core.view.ViewCompat.getLayoutDirection(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:218)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|0x0020: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0026 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0022|0x0022: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|0x0023: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('indicatorDirection' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0026 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0026|0x0026: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0029|0x0029: IPUT  (r1 I:boolean), (r0 I:com.google.android.material.progressindicator.LinearProgressIndicatorSpec) com.google.android.material.progressindicator.LinearProgressIndicatorSpec.drawHorizontallyInverse boolean \l0x002b: INVOKE  (r4 I:com.google.android.material.progressindicator.LinearProgressIndicator) type: VIRTUAL call: com.google.android.material.progressindicator.LinearProgressIndicator.invalidate():void A[MD:():void (m)] (LINE:220)\l}"];
Node_33 [shape=record,label="{33\:\ 0x002e|RETURN\l|0x002e: RETURN    (LINE:221)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.progressindicator.LinearProgressIndicator.setIndicatorDirection((r4 'this' I:com.google.android.material.progressindicator.LinearProgressIndicator A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('indicatorDirection' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0023 \-\> B:32:0x0029, CROSS_EDGE: B:26:0x0020 \-\> B:30:0x0026, CROSS_EDGE: B:24:0x001a \-\> B:32:0x0029, CROSS_EDGE: B:22:0x0011 \-\> B:25:0x001c, CROSS_EDGE: B:20:0x000b \-\> B:32:0x0029\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002e: r5 'indicatorDirection' I\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_32;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_32;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_32[style=dashed];
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_18;
}

