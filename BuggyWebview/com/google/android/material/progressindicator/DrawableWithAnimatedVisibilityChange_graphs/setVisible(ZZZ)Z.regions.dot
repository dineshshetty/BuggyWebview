digraph "CFG forcom.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setVisible(ZZZ)Z" {
subgraph cluster_Region_1200059270 {
label = "R(2:1|7)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|float float r0 = r2.animatorDurationScaleProvider.getSystemAnimatorDurationScale(r2.context.getContentResolver())\l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|RETURN\l|return setVisibleInternal(r3, r4, r5 && r0 \> 0.0f)\l}"];
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000c}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000e}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0011|REMOVE\lADDED_TO_REGION\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0013}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0016|PHI: r1 \l  PHI: (r1v3 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0015}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setVisible((r2v0 'this' com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange A[IMMUTABLE_TYPE, THIS]), (r3v0 'visible' boolean A[D('visible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'restart' boolean A[D('restart' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'animate' boolean A[D('animate' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0015 \-\> B:18:0x0016, CROSS_EDGE: B:13:0x000c \-\> B:17:0x0015\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setVisible(boolean, boolean, boolean):boolean]\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_17 -> Node_18;
}

