digraph "CFG forcom.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setVisible(ZZZ)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.progressindicator.AnimatorDurationScaleProvider) = (r2 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange) com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.animatorDurationScaleProvider com.google.android.material.progressindicator.AnimatorDurationScaleProvider  (LINE:236)\l0x0002: IGET  (r1 I:android.content.Context) = (r2 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange) com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.context android.content.Context \l0x0004: INVOKE  (r1 I:android.content.ContentResolver) = (r1 I:android.content.Context) type: VIRTUAL call: android.content.Context.getContentResolver():android.content.ContentResolver A[MD:():android.content.ContentResolver (c)] (LINE:237)\l0x0008: INVOKE  (r0 I:float) = \l  (r0 I:com.google.android.material.progressindicator.AnimatorDurationScaleProvider)\l  (r1 I:android.content.ContentResolver)\l type: VIRTUAL call: com.google.android.material.progressindicator.AnimatorDurationScaleProvider.getSystemAnimatorDurationScale(android.content.ContentResolver):float A[MD:(android.content.ContentResolver):float (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|0x000c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('animate' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0015  (LINE:240)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: CMP_L  (r1 I:int) = (r0 I:float A[D('systemAnimatorDurationScale' float)]), (r1 I:float) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|0x0011: IF  (r1 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:17:0x0015 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|0x0013: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|0x0016: INVOKE  (r1 I:boolean) = \l  (r2 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange)\l  (r3 I:boolean A[D('visible' boolean)])\l  (r4 I:boolean A[D('restart' boolean)])\l  (r1 I:boolean)\l type: VIRTUAL call: com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setVisibleInternal(boolean, boolean, boolean):boolean A[MD:(boolean, boolean, boolean):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|RETURN\l|0x001a: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setVisible((r2 'this' I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[D('visible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('restart' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('animate' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0015 \-\> B:18:0x0016, CROSS_EDGE: B:13:0x000c \-\> B:17:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x001a: r0 'systemAnimatorDurationScale' F\l  \-1 \-0x001a: r3 'visible' Z\l  \-1 \-0x001a: r4 'restart' Z\l  \-1 \-0x001a: r5 'animate' Z\lMETHOD_OVERRIDE: [com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setVisible(boolean, boolean, boolean):boolean]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_17 -> Node_18;
}

