digraph "CFG forcom.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.registerAnimationCallback(Landroidx\/vectordrawable\/graphics\/drawable\/Animatable2Compat$AnimationCallback;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000}"];
Node_13 [shape=record,label="{13\:\ 0x0002|if (r1.animationCallbacks != null) goto L4\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|r1.animationCallbacks = new java.util.ArrayList()\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b}"];
Node_16 [shape=record,label="{16\:\ 0x0011|if (r1.animationCallbacks.contains(r2) != false) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|r1.animationCallbacks.add(r2)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|RETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.registerAnimationCallback((r1v0 'this' com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange A[IMMUTABLE_TYPE, THIS]), (r2v0 'callback' androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback A[D('callback' androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0011 \-\> B:18:0x0018, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):void, androidx.vectordrawable.graphics.drawable.Animatable2Compat.registerAnimationCallback(androidx.vectordrawable.graphics.drawable.Animatable2Compat$AnimationCallback):void]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

