digraph "CFG forcom.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setShowAnimator(Landroid\/animation\/ValueAnimator;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:android.animation.ValueAnimator) = (r2 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange) com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.showAnimator android.animation.ValueAnimator  (LINE:355)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0013 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r0 I:android.animation.ValueAnimator) type: VIRTUAL call: android.animation.ValueAnimator.isRunning():boolean A[MD:():boolean (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b \l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:356)\l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"Cannot set showAnimator while the current showAnimator is running.\" \l0x000f: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: IPUT  \l  (r3 I:android.animation.ValueAnimator A[D('showAnimator' android.animation.ValueAnimator)])\l  (r2 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange)\l com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.showAnimator android.animation.ValueAnimator  (LINE:359)\l0x0015: NEW_INSTANCE  (r0 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange$1) =  com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange$1  (LINE:362)\l0x0017: INVOKE  \l  (r0 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange$1)\l  (r2 I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange)\l type: DIRECT call: com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.1.\<init\>(com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange):void A[MD:(com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange):void (m)]\l0x001a: INVOKE  \l  (r3 I:android.animation.ValueAnimator A[D('showAnimator' android.animation.ValueAnimator)])\l  (r0 I:android.animation.Animator$AnimatorListener)\l type: VIRTUAL call: android.animation.ValueAnimator.addListener(android.animation.Animator$AnimatorListener):void A[MD:(android.animation.Animator$AnimatorListener):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|RETURN\l|0x001d: RETURN    (LINE:371)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange.setShowAnimator((r2 'this' I:com.google.android.material.progressindicator.DrawableWithAnimatedVisibilityChange A[IMMUTABLE_TYPE, THIS]), (r3 I:android.animation.ValueAnimator A[D('showAnimator' android.animation.ValueAnimator), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001d \-\> B:12:?, CROSS_EDGE: B:14:0x0002 \-\> B:20:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001d: r3 'showAnimator' Landroid\/animation\/ValueAnimator;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_20[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

