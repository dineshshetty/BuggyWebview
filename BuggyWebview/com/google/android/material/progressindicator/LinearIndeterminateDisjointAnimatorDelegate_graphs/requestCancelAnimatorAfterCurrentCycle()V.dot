digraph "CFG forcom.google.android.material.progressindicator.LinearIndeterminateDisjointAnimatorDelegate.requestCancelAnimatorAfterCurrentCycle()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|android.animation.ObjectAnimator r0 = r4.completeEndAnimator\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 == null) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004}"];
Node_5 [shape=record,label="{5\:\ 0x0008|if (r0.isRunning() == false) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|cancelAnimatorImmediately()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|if (r4.drawable.isVisible() == false) goto L10\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|r4.completeEndAnimator.setFloatValues(new float[]\{r4.animationFraction, 1.0f\})\lr4.completeEndAnimator.setDuration((long) ((1.0f \- r4.animationFraction) * 1800.0f))\lr4.completeEndAnimator.start()\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.progressindicator.LinearIndeterminateDisjointAnimatorDelegate.requestCancelAnimatorAfterCurrentCycle((r4v0 'this' com.google.android.material.progressindicator.LinearIndeterminateDisjointAnimatorDelegate A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0014 \-\> B:10:0x003a, CROSS_EDGE: B:11:0x003b \-\> B:1:?, CROSS_EDGE: B:3:0x0002 \-\> B:11:0x003b\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [com.google.android.material.progressindicator.IndeterminateAnimatorDelegate.requestCancelAnimatorAfterCurrentCycle():void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_13[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_12 -> Node_1;
Node_13 -> Node_1;
Node_11 -> Node_1;
}

