digraph "CFG forcom.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate.3.get(Lcom\/google\/android\/material\/progressindicator\/CircularIndeterminateAnimatorDelegate;)Ljava\/lang\/Float;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:float) = \l  (r2 I:com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate A[D('delegate' com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate)])\l type: STATIC call: com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate.access$200(com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate):float A[MD:(com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate):float (m)] (LINE:242)\l0x0004: INVOKE  (r0 I:java.lang.Float) = (r0 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:java.lang.Float) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.Float com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate.3.get((r1 'this' I:com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate$3 A[IMMUTABLE_TYPE, THIS]), (r2 I:com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate A[D('delegate' com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0008: r2 'delegate' Lcom\/google\/android\/material\/progressindicator\/CircularIndeterminateAnimatorDelegate;\lBRIDGED_BY: com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate.3.get(com.google.android.material.progressindicator.CircularIndeterminateAnimatorDelegate):java.lang.Float\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

