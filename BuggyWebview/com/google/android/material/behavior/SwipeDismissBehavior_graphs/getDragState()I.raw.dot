digraph "CFG forcom.google.android.material.behavior.SwipeDismissBehavior.getDragState()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.customview.widget.ViewDragHelper) = \l  (r1 I:com.google.android.material.behavior.SwipeDismissBehavior A[D('this' com.google.android.material.behavior.SwipeDismissBehavior\<V extends android.view.View\>)])\l com.google.android.material.behavior.SwipeDismissBehavior.viewDragHelper androidx.customview.widget.ViewDragHelper  (LINE:465)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r0 I:androidx.customview.widget.ViewDragHelper) type: VIRTUAL call: androidx.customview.widget.ViewDragHelper.getViewDragState():int A[MD:():int (m)]\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x000a: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\lORIG_RETURN\l|0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int com.google.android.material.behavior.SwipeDismissBehavior.getDragState((r1 'this' I:com.google.android.material.behavior.SwipeDismissBehavior\<V extends android.view.View\> A[D('this' com.google.android.material.behavior.SwipeDismissBehavior\<V extends android.view.View\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0009 \-\> B:6:0x000a\lDebug Info:\l  0x0000\-0x000a: r1 'this' Lcom\/google\/android\/material\/behavior\/SwipeDismissBehavior;, signature: Lcom\/google\/android\/material\/behavior\/SwipeDismissBehavior\<TV;\>;\lTYPE_VARS: [V extends android.view.View]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_1;
}

