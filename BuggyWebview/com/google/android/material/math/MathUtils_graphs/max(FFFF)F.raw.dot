digraph "CFG forcom.google.android.material.math.MathUtils.max(FFFF)F" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CMP_L  (r0 I:int) = (r1 I:float A[D('a' float)]), (r2 I:float A[D('b' float)])  (LINE:74)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|0x0002: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:31:0x000e \l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|0x0004: CMP_L  (r0 I:int) = (r1 I:float A[D('a' float)]), (r3 I:float A[D('c' float)]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:31:0x000e \l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|0x0008: CMP_L  (r0 I:int) = (r1 I:float A[D('a' float)]), (r4 I:float A[D('d' float)]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|0x000a: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:31:0x000e \l}"];
Node_30 [shape=record,label="{30\:\ 0x000c|0x000c: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('a' float)]) \l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:float) A[SYNTHETIC]\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|0x000e: CMP_L  (r0 I:int) = (r2 I:float A[D('b' float)]), (r3 I:float A[D('c' float)]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0010|0x0010: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:36:0x0018 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0012|0x0012: CMP_L  (r0 I:int) = (r2 I:float A[D('b' float)]), (r4 I:float A[D('d' float)]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0014|0x0014: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:36:0x0018 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0016|0x0016: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('b' float)]) \l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:float) A[SYNTHETIC]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0018|0x0018: CMP_L  (r0 I:int) = (r3 I:float A[D('c' float)]), (r4 I:float A[D('d' float)]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x001a|0x001a: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:39:0x001e \l}"];
Node_38 [shape=record,label="{38\:\ 0x001c|0x001c: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('c' float)]) \l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:float) A[SYNTHETIC]\l}"];
Node_39 [shape=record,label="{39\:\ 0x001e|0x001e: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('d' float)]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{private static float com.google.android.material.math.MathUtils.max((r1 I:float A[D('a' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:float A[D('b' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:float A[D('c' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[D('d' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0016 \-\> B:40:0x001f, CROSS_EDGE: B:38:0x001c \-\> B:40:0x001f, CROSS_EDGE: B:39:0x001e \-\> B:40:0x001f, CROSS_EDGE: B:32:0x0010 \-\> B:36:0x0018, CROSS_EDGE: B:27:0x0006 \-\> B:31:0x000e, CROSS_EDGE: B:25:0x0002 \-\> B:31:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001f: r1 'a' F\l  \-1 \-0x001f: r2 'b' F\l  \-1 \-0x001f: r3 'c' F\l  \-1 \-0x001f: r4 'd' F\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_41;
Node_41 -> Node_23;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_42;
Node_42 -> Node_23;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_43;
Node_43 -> Node_23;
Node_39 -> Node_40;
Node_40 -> Node_23;
}

