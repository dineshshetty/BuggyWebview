digraph "CFG forcom.google.android.material.math.MathUtils.floorMod(II)I" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: ARITH  (r0 I:int) = (r2 I:int A[D('x' int)]) \/ (r3 I:int A[D('y' int)])  (LINE:95)\l0x0002: ARITH  (r1 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('x' int)]) ^ (r3 I:??[int, boolean, short, byte, char] A[D('y' int)])  (LINE:97)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IF  (r1 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:16:0x000c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|0x0006: ARITH  (r1 I:int) = (r0 I:int A[D('r' int)]) * (r3 I:int A[D('y' int)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('x' int)])  \-\> B:16:0x000c \l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|0x000a: ARITH  (r0 I:int) = (r0 I:int A[D('r' int)]) + (\-1 int)  (LINE:98)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|0x000c: ARITH  (r1 I:int) = (r0 I:int A[D('r' int)]) * (r3 I:int A[D('y' int)])  (LINE:100)\l0x000e: ARITH  (r1 I:int) = (r2 I:int A[D('x' int)]) \- (r1 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|RETURN\l|0x0010: RETURN  (r1 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static int com.google.android.material.math.MathUtils.floorMod((r2 I:int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0008 \-\> B:16:0x000c, CROSS_EDGE: B:12:0x0004 \-\> B:16:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0010: r0 'r' I\l  \-1 \-0x0010: r2 'x' I\l  \-1 \-0x0010: r3 'y' I\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

