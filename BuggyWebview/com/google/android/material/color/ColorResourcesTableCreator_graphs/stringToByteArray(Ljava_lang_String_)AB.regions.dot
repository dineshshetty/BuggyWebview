digraph "CFG forcom.google.android.material.color.ColorResourcesTableCreator.stringToByteArray(Ljava\/lang\/String;)[B" {
subgraph cluster_Region_664880839 {
label = "R(4:1|(1:4)|6|7)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|char[] char[] r0 = r9.toCharArray()\lbyte[] byte[] r1 = new byte[(r0.length * 2) + 4]\lbyte[] byte[] r2 = shortToByteArray((short) r0.length)\lr1[0] = r2[0]\lr1[1] = r2[1]\lint r5 = 0\l}"];
subgraph cluster_LoopRegion_101939261 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001d|if (r5 \< r0.length) goto L4\l}"];
subgraph cluster_Region_1680300190 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x001f|LOOP_END\lLOOP:0: B:12:0x001c\-\>B:14:0x001f\l|byte[] byte[] r6 = charToByteArray(r0[r5])\lr1[(r5 * 2) + 2] = r6[0]\lr1[(r5 * 2) + 3] = r6[1]\lr5++\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0038|int int r5 = r1.length\lr1[r5 \- 2] = 0\lr1[r1.length \- 1] = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|RETURN\l|return r1\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001c|LOOP_START\lLOOP:0: B:12:0x001c\-\>B:14:0x001f\lPHI: r5 \l  PHI: (r5v2 'i' int) = (r5v1 'i' int), (r5v7 'i' int) binds: [B:11:0x0000, B:14:0x001f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0038|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static byte[] com.google.android.material.color.ColorResourcesTableCreator.stringToByteArray((r9v0 'value' java.lang.String A[D('value' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x001f \-\> B:12:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_17[style=dashed];
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_16 -> Node_10;
Node_9 -> Node_11;
Node_12 -> Node_13;
Node_17 -> Node_15;
}

