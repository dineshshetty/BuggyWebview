digraph "CFG forcom.google.android.material.color.ResourcesLoaderUtils.addResourcesLoaderToContext(Landroid\/content\/Context;Ljava\/util\/Map;)Z" {
subgraph cluster_Region_1812033879 {
label = "R(2:1|(2:(1:6)|(2:3|4)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0001|android.content.res.loader.ResourcesLoader android.content.res.loader.ResourcesLoader r0 = com.google.android.material.color.ColorResourcesLoaderCreator.create(r5, r6)\l}"];
subgraph cluster_Region_1680205580 {
label = "R(2:(1:6)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1924896218 {
label = "IF [B:10:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0006|if (r0 == null) goto L6\l}"];
subgraph cluster_Region_1959915468 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_518111396 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0008|r5.getResources().addLoaders(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|RETURN\l|return true\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static boolean com.google.android.material.color.ResourcesLoaderUtils.addResourcesLoaderToContext((r5v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'colorReplacementMap' java.util.Map\<java.lang.Integer, java.lang.Integer\> A[D('colorReplacementMap' java.util.Map\<java.lang.Integer, java.lang.Integer\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/content\/Context;Ljava\/util\/Map\<Ljava\/lang\/Integer;Ljava\/lang\/Integer;\>;)Z\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_7 -> Node_9;
}

