digraph "CFG forcom.google.android.material.color.utilities.MathUtils.signum(D)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:38)\l0x0002: CMP_G  (r2 I:int) = (r3 I:double A[D('num' double)]), (r0 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:18:0x0008 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|RETURN\l|0x0006: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:39)\l0x0007: RETURN  (r0 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: CMP_L  (r2 I:int) = (r3 I:double A[D('num' double)]), (r0 I:double)  (LINE:40)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000e \l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|RETURN\l|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:41)\l0x000d: RETURN  (r0 I:int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|RETURN\l|0x000e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:43)\l0x000f: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static int com.google.android.material.color.utilities.MathUtils.signum((r3 I:double A[D('num' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x000d \-\> B:13:?, CROSS_EDGE: B:23:0x000f \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r3 'num' D\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_13;
Node_22 -> Node_13;
}

