digraph "CFG forcom.google.android.material.color.utilities.QuantizerWu.constructHistogram(Ljava\/util\/Map;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY])  (LINE:72)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (35937(0x8c61, float:5.0358E\-41) ??[int, float, short, byte, char]) \l0x0005: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0007: IPUT  (r2 I:int[]), (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.weights int[] \l0x0009: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[]  (LINE:73)\l0x000b: IPUT  (r2 I:int[]), (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.momentsR int[] \l0x000d: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[]  (LINE:74)\l0x000f: IPUT  (r2 I:int[]), (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.momentsG int[] \l0x0011: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[]  (LINE:75)\l0x0013: IPUT  (r2 I:int[]), (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.momentsB int[] \l0x0015: NEW_ARRAY  (r1 I:double[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: double[]  (LINE:76)\l0x0017: IPUT  (r1 I:double[]), (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.moments double[] \l0x0019: INVOKE  (r1 I:java.util.Set) = (r19 I:java.util.Map A[D('pixels' java.util.Map\<java.lang.Integer, java.lang.Integer\>)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:78)\l0x001d: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|LOOP_START\lLOOP:0: B:11:0x0021\-\>B:13:0x0027\l|0x0021: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x009b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|LOOP_END\lLOOP:0: B:11:0x0021\-\>B:13:0x0027\l|0x0027: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002b: CHECK_CAST (r2 I:java.util.Map$Entry) = (java.util.Map$Entry) (r2 I:??[OBJECT, ARRAY]) \l0x002d: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Map$Entry A[D('pair' java.util.Map$Entry\<java.lang.Integer, java.lang.Integer\>)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:79)\l0x0031: CHECK_CAST (r3 I:java.lang.Integer) = (java.lang.Integer) (r3 I:??[OBJECT, ARRAY]) \l0x0033: INVOKE  (r3 I:int) = (r3 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x0037: INVOKE  (r4 I:java.lang.Object) = (r2 I:java.util.Map$Entry A[D('pair' java.util.Map$Entry\<java.lang.Integer, java.lang.Integer\>)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)] (LINE:80)\l0x003b: CHECK_CAST (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:??[OBJECT, ARRAY]) \l0x003d: INVOKE  (r4 I:int) = (r4 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x0041: INVOKE  (r5 I:int) = (r3 I:int A[D('pixel' int)]) type: STATIC call: com.google.android.material.color.utilities.ColorUtils.redFromArgb(int):int A[MD:(int):int (m)] (LINE:81)\l0x0045: INVOKE  (r6 I:int) = (r3 I:int A[D('pixel' int)]) type: STATIC call: com.google.android.material.color.utilities.ColorUtils.greenFromArgb(int):int A[MD:(int):int (m)] (LINE:82)\l0x0049: INVOKE  (r7 I:int) = (r3 I:int A[D('pixel' int)]) type: STATIC call: com.google.android.material.color.utilities.ColorUtils.blueFromArgb(int):int A[MD:(int):int (m)] (LINE:83)\l0x004d: CONST  (r8 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:84)\l0x004e: ARITH  (r9 I:int) = (r5 I:int A[D('red' int)]) \>\> (r8 I:int A[D('bitsToRemove' int)])  (LINE:85)\l0x0050: ARITH  (r9 I:int) = (r9 I:int) + (1 int) \l0x0052: ARITH  (r10 I:int) = (r6 I:int A[D('green' int)]) \>\> (r8 I:int A[D('bitsToRemove' int)])  (LINE:86)\l0x0054: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l0x0056: ARITH  (r11 I:int) = (r7 I:int A[D('blue' int)]) \>\> (r8 I:int A[D('bitsToRemove' int)])  (LINE:87)\l0x0058: ARITH  (r11 I:int) = (r11 I:int) + (1 int) \l0x005a: INVOKE  (r12 I:int) = (r9 I:int A[D('iR' int)]), (r10 I:int A[D('iG' int)]), (r11 I:int A[D('iB' int)]) type: STATIC call: com.google.android.material.color.utilities.QuantizerWu.getIndex(int, int, int):int A[MD:(int, int, int):int (m)] (LINE:88)\l0x005e: IGET  (r13 I:int[]) = (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.weights int[]  (LINE:89)\l0x0060: AGET  (r14 I:??[int, float, short, byte, char]) = (r13 I:??[int, float][]), (r12 I:??[int, short, byte, char] A[D('index' int)]) \l0x0062: ARITH  (r14 I:int) = (r14 I:int) + (r4 I:int A[D('count' int)]) \l0x0063: APUT  \l  (r13 I:??[int, float][])\l  (r12 I:??[int, short, byte, char] A[D('index' int)])\l  (r14 I:??[int, float, short, byte, char])\l \l0x0065: IGET  (r13 I:int[]) = (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.momentsR int[]  (LINE:90)\l0x0067: AGET  (r14 I:??[int, float, short, byte, char]) = (r13 I:??[int, float][]), (r12 I:??[int, short, byte, char] A[D('index' int)]) \l0x0069: ARITH  (r15 I:int) = (r5 I:int A[D('red' int)]) * (r4 I:int A[D('count' int)]) \l0x006b: ARITH  (r14 I:int) = (r14 I:int) + (r15 I:int) \l0x006c: APUT  \l  (r13 I:??[int, float][])\l  (r12 I:??[int, short, byte, char] A[D('index' int)])\l  (r14 I:??[int, float, short, byte, char])\l \l0x006e: IGET  (r13 I:int[]) = (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.momentsG int[]  (LINE:91)\l0x0070: AGET  (r14 I:??[int, float, short, byte, char]) = (r13 I:??[int, float][]), (r12 I:??[int, short, byte, char] A[D('index' int)]) \l0x0072: ARITH  (r15 I:int) = (r6 I:int A[D('green' int)]) * (r4 I:int A[D('count' int)]) \l0x0074: ARITH  (r14 I:int) = (r14 I:int) + (r15 I:int) \l0x0075: APUT  \l  (r13 I:??[int, float][])\l  (r12 I:??[int, short, byte, char] A[D('index' int)])\l  (r14 I:??[int, float, short, byte, char])\l \l0x0077: IGET  (r13 I:int[]) = (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.momentsB int[]  (LINE:92)\l0x0079: AGET  (r14 I:??[int, float, short, byte, char]) = (r13 I:??[int, float][]), (r12 I:??[int, short, byte, char] A[D('index' int)]) \l0x007b: ARITH  (r15 I:int) = (r7 I:int A[D('blue' int)]) * (r4 I:int A[D('count' int)]) \l0x007d: ARITH  (r14 I:int) = (r14 I:int) + (r15 I:int) \l0x007e: APUT  \l  (r13 I:??[int, float][])\l  (r12 I:??[int, short, byte, char] A[D('index' int)])\l  (r14 I:??[int, float, short, byte, char])\l \l0x0080: IGET  (r13 I:double[]) = (r0 I:com.google.android.material.color.utilities.QuantizerWu) com.google.android.material.color.utilities.QuantizerWu.moments double[]  (LINE:93)\l0x0082: AGET  (r14 I:??[long, double]) = (r13 I:??[long, double][]), (r12 I:??[int, short, byte, char] A[D('index' int)]) \l0x0084: ARITH  (r16 I:int) = (r5 I:int A[D('red' int)]) * (r5 I:int A[D('red' int)]) \l0x0086: ARITH  (r17 I:int) = (r6 I:int A[D('green' int)]) * (r6 I:int A[D('green' int)]) \l0x0088: ARITH  (r16 I:int) = (r16 I:int) + (r17 I:int) \l0x008a: ARITH  (r17 I:int) = (r7 I:int A[D('blue' int)]) * (r7 I:int A[D('blue' int)]) \l0x008c: ARITH  (r16 I:int) = (r16 I:int) + (r17 I:int) \l0x008e: ARITH  (r0 I:int) = (r4 I:int A[D('count' int)]) * (r16 I:int) \l0x0090: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0092: CAST (r0 I:double) = (double) (r0 I:int) \l0x0093: ARITH  (r14 I:double) = (r14 I:double) + (r0 I:double) \l0x0094: APUT  (r13 I:??[long, double][]), (r12 I:??[int, short, byte, char] A[D('index' int)]), (r14 I:??[long, double]) \l0x0096: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY])  (LINE:94)\l0x0098: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x009b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x009b|RETURN\l|0x009b: RETURN    (LINE:95)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void com.google.android.material.color.utilities.QuantizerWu.constructHistogram((r18 'this' I:com.google.android.material.color.utilities.QuantizerWu A[IMMUTABLE_TYPE, THIS]), (r19 I:java.util.Map\<java.lang.Integer, java.lang.Integer\> A[D('pixels' java.util.Map\<java.lang.Integer, java.lang.Integer\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0027 \-\> B:11:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002d\-0x0096: r2 'pair' Ljava\/util\/Map$Entry;, signature: Ljava\/util\/Map$Entry\<Ljava\/lang\/Integer;Ljava\/lang\/Integer;\>;\l  0x0037\-0x0096: r3 'pixel' I\l  0x0041\-0x0096: r4 'count' I\l  0x0045\-0x0096: r5 'red' I\l  0x0049\-0x0096: r6 'green' I\l  0x004d\-0x0096: r7 'blue' I\l  0x004e\-0x0096: r8 'bitsToRemove' I\l  0x0052\-0x0096: r9 'iR' I\l  0x0056\-0x0096: r10 'iG' I\l  0x005a\-0x0096: r11 'iB' I\l  0x005e\-0x0096: r12 'index' I\l  0x0000\-0x009b: r19 'pixels' Ljava\/util\/Map;, signature: Ljava\/util\/Map\<Ljava\/lang\/Integer;Ljava\/lang\/Integer;\>;\lSIGNATURE: (Ljava\/util\/Map\<Ljava\/lang\/Integer;Ljava\/lang\/Integer;\>;)V\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

