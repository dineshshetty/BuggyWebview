digraph "CFG forcom.google.android.material.color.utilities.QuantizerMap.quantize([II)Lcom\/google\/android\/material\/color\/utilities\/QuantizerResult;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap  (LINE:37)\l0x0002: INVOKE  (r0 I:java.util.HashMap) type: DIRECT call: java.util.HashMap.\<init\>():void A[MD:():void (c)]\l0x0005: ARRAY_LENGTH  (r1 I:int) = (r9 I:??[] A[D('pixels' int[])])  (LINE:38)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|LOOP_START\lLOOP:0: B:17:0x0007\-\>B:22:0x001e\l|0x0007: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:25:0x002c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: AGET  (r3 I:??[int, float, short, byte, char]) = (r9 I:??[int, float][] A[D('pixels' int[])]), (r2 I:??[int, short, byte, char]) \l0x000b: INVOKE  (r4 I:java.lang.Integer) = (r3 I:int A[D('pixel' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:39)\l0x000f: INVOKE  (r4 I:java.lang.Object) = \l  (r0 I:java.util.HashMap A[D('pixelByCount' java.util.HashMap\<java.lang.Integer, java.lang.Integer\>)])\l  (r4 I:java.lang.Object)\l type: VIRTUAL call: java.util.HashMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0013: CHECK_CAST (r4 I:java.lang.Integer) = (java.lang.Integer) (r4 I:??[OBJECT, ARRAY]) \l0x0015: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:40)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentPixelCount' java.lang.Integer)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0019 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0019|0x0019: INVOKE  (r6 I:int) = (r4 I:java.lang.Integer A[D('currentPixelCount' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x001d: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x001e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|LOOP_END\lLOOP:0: B:17:0x0007\-\>B:22:0x001e\l|0x001e: INVOKE  (r6 I:java.lang.Integer) = (r3 I:int A[D('pixel' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:41)\l0x0022: INVOKE  (r7 I:java.lang.Integer) = (r5 I:int A[D('newPixelCount' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0026: INVOKE  \l  (r0 I:java.util.HashMap A[D('pixelByCount' java.util.HashMap\<java.lang.Integer, java.lang.Integer\>)])\l  (r6 I:java.lang.Object)\l  (r7 I:java.lang.Object)\l type: VIRTUAL call: java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l0x0029: ARITH  (r2 I:int) = (r2 I:int) + (1 int)  (LINE:38)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x002c|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002c|0x002c: IPUT  \l  (r0 I:java.util.Map\<java.lang.Integer, java.lang.Integer\> A[D('pixelByCount' java.util.HashMap\<java.lang.Integer, java.lang.Integer\>)])\l  (r8 I:com.google.android.material.color.utilities.QuantizerMap)\l com.google.android.material.color.utilities.QuantizerMap.colorToCount java.util.Map  (LINE:43)\l0x002e: NEW_INSTANCE  (r1 I:com.google.android.material.color.utilities.QuantizerResult) =  com.google.android.material.color.utilities.QuantizerResult  (LINE:44)\l0x0030: INVOKE  \l  (r1 I:com.google.android.material.color.utilities.QuantizerResult)\l  (r0 I:java.util.Map A[D('pixelByCount' java.util.HashMap\<java.lang.Integer, java.lang.Integer\>)])\l type: DIRECT call: com.google.android.material.color.utilities.QuantizerResult.\<init\>(java.util.Map):void A[MD:(java.util.Map\<java.lang.Integer, java.lang.Integer\>):void (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0033|RETURN\l|0x0033: RETURN  (r1 I:com.google.android.material.color.utilities.QuantizerResult) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public com.google.android.material.color.utilities.QuantizerResult com.google.android.material.color.utilities.QuantizerMap.quantize((r8 'this' I:com.google.android.material.color.utilities.QuantizerMap A[IMMUTABLE_TYPE, THIS]), (r9 I:int[] A[D('pixels' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('colorCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x001e \-\> B:17:0x0007, CROSS_EDGE: B:19:0x0016 \-\> B:22:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x0029: r3 'pixel' I\l  0x0015\-0x0029: r4 'currentPixelCount' Ljava\/lang\/Integer;\l  0x001e\-0x0029: r5 'newPixelCount' I\l  0x0005\-0x0033: r0 'pixelByCount' Ljava\/util\/HashMap;, signature: Ljava\/util\/HashMap\<Ljava\/lang\/Integer;Ljava\/lang\/Integer;\>;\l  \-1 \-0x0033: r9 'pixels' [I\l  \-1 \-0x0033: r10 'colorCount' I\lMETHOD_OVERRIDE: [com.google.android.material.color.utilities.Quantizer.quantize(int[], int):com.google.android.material.color.utilities.QuantizerResult]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_27[style=dashed];
Node_21 -> Node_26;
Node_26 -> Node_22;
Node_22 -> Node_17;
Node_27 -> Node_22;
Node_25 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_15;
}

