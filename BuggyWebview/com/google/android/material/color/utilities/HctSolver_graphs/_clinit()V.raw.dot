digraph "CFG forcom.google.android.material.color.utilities.HctSolver.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:32)\l0x0001: NEW_ARRAY  (r1 I:double[][]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[][] \l0x0003: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0005: FILL_ARRAY  (r2 I:??[]), data: 0x0048: FILL_ARRAY_DATA  , data: [4563180690278563712, 4567656682865241161, 4553792858995338393] \l0x0008: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: APUT  (r1 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x000b: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x000d: FILL_ARRAY  (r2 I:??[]), data: 0x0058: FILL_ARRAY_DATA  , data: [4558572791660270439, 4569014491814800473, 4554668937701320922] \l0x0010: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0011: APUT  (r1 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x0013: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0015: FILL_ARRAY  (r2 I:??[]), data: 0x0068: FILL_ARRAY_DATA  , data: [4547115361972976925, 4558086837743593197, 4569750954828417064] \l0x0018: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0019: APUT  (r1 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x001b: SPUT  (r1 I:double[][]) com.google.android.material.color.utilities.HctSolver.SCALED_DISCOUNT_FROM_LINRGB double[][] \l0x001d: NEW_ARRAY  (r1 I:double[][]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[][]  (LINE:45)\l0x001f: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0021: FILL_ARRAY  (r2 I:??[]), data: 0x0078: FILL_ARRAY_DATA  , data: [4653754300308803648, \-4570817500552742808, \-4603490952067231679] \l0x0024: APUT  (r1 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x0026: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0028: FILL_ARRAY  (r2 I:??[]), data: 0x0088: FILL_ARRAY_DATA  , data: [\-4579882583565303232, 4648134020057450064, \-4593606813847174742] \l0x002b: APUT  (r1 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x002d: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x002f: FILL_ARRAY  (r2 I:??[]), data: 0x0098: FILL_ARRAY_DATA  , data: [4611516187505145207, \-4590128720487386175, 4644138734269452162] \l0x0032: APUT  (r1 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x0034: SPUT  (r1 I:double[][]) com.google.android.material.color.utilities.HctSolver.LINRGB_FROM_SCALED_DISCOUNT double[][] \l0x0036: NEW_ARRAY  (r0 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[]  (LINE:58)\l0x0038: FILL_ARRAY  (r0 I:??[]), data: 0x00a8: FILL_ARRAY_DATA  , data: [4596827742536767164, 4604617168452267173, 4589866978952703325] \l0x003b: SPUT  (r0 I:double[]) com.google.android.material.color.utilities.HctSolver.Y_FROM_LINRGB double[] \l0x003d: CONST  (r0 I:??[int, float, short, byte, char]) = (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char])  (LINE:60)\l0x003f: NEW_ARRAY  (r0 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0041: FILL_ARRAY  (r0 I:??[]), data: 0x00b8: FILL_ARRAY_DATA  , data: [4579902191445101026, 4586722248283830121, 4590132276703194669, 4592319419119206566, 4594089090726562190, 4595182661934568139, 4596276233142574086, 4597369804350580035, 4598319297551931200, 4598866083155934174, 4599415152223961264, 4599993339557554103, 4600604127797384872, 4601248022022383854, 4601925516007072940, 4602637092872232998, 4603031022424726288, 4603421598565390387, 4603829911699615164, 4604256184796179975, 4604700636746540938, 4605163482557825057, 4605644933531403035, 4606145197428491360, 4606664478624053163, 4607192698525064880, 4607471656564740588, 4607760420350332768, 4608059085967490067, 4608367748123105663, 4608686500196850546, 4609015434289647817, 4609354641269333833, 4609704210813727368, 4610064231451306159, 4610434790599671070, 4610815974601961079, 4611207868761367246, 4611610557373880335, 4611855071093391427, 4612067334359334994, 4612285118425960339, 4612508463574977203, 4612737409655089301, 4612971996094189114, 4613212261911004224, 4613458245726228713, 4613709985773170670, 4613967519907944419, 4614230885619234013, 4614500120037652566, 4614775259944720202, 4615056341781481853, 4615343401656784577, 4615636475355232722, 4615935598344838114, 4616215211919569774, 4616370875292628065, 4616529615599632208, 4616691449976872178, 4616856395419441158, 4617024468784296090, 4617195686793211866, 4617370066035634218, 4617547622971436010, 4617728373933581454, 4617912335130702427, 4618099522649590851, 4618289952457610916, 4618483640405034599, 4618680602227303887, 4618880853547222806, 4619084409877082270, 4619291286620720537, 4619501499075521954, 4619715062434356516, 4619931991787462676, 4620152302124275621, 4620376008335203209, 4620603125213351606, 4620763442569165759, 4620880433674686702, 4620999152019843489, 4621119604814744327, 4621241799224816048, 4621365742371534952, 4621491441333138438, 4621618903145318084, 4621748134801894866, 4621879143255477120, 4622011935418101880, 4622146518161860145, 4622282898319506637, 4622421082685054575, 4622561078014355982, 4622702891025667973, 4622846528400205557, 4622991996782681293, 4623139302781832335, 4623288452970935186, 4623439453888308616, 4623592312037805078, 4623747033889290991, 4623903625879116247, 4624062094410573275, 4624222445854345961, 4624384686548948761, 4624548822801156258, 4624714860886423508, 4624882807049297389, 4625052667503819266, 4625210632871709275, 4625297486651650571, 4625385306808911890, 4625474096391433360, 4625563858432847940, 4625654595952659106, 4625746311956415008, 4625839009435879146, 4625932691369197680, 4626027360721063483, 4626123020442876984, 4626219673472903927, 4626317322736430091, 4626415971145913094, 4626515621601131305, 4626616276989329999, 4626717940185364762, 4626820614051842266, 4626924301439258476, 4627029005186134299, 4627134728119148831, 4627241473053270172, 4627349242791883926, 4627458040126919441, 4627567867838973780, 4627678728697433589, 4627790625460594799, 4627903560875780285, 4628017537679455519, 4628132558597342234, 4628248626344530177, 4628365743625587008, 4628483913134666308, 4628603137555613863, 4628723419562072149, 4628844761817583119, 4628967166975689348, 4629090637680033469, 4629215176564456113, 4629340786253092199, 4629467469360465727, 4629595228491583094, 4629712241589447398, 4629777201067453150, 4629842702436743186, 4629908746981237562, 4629975335980320128, 4630042470708880985, 4630110152437358354, 4630178382431779783, 4630247161953802740, 4630316492260754622, 4630386374605672153, 4630456810237340203, 4630527800400330062, 4630599346335037121, 4630671449277718047, 4630744110460527385, 4630817331111553677, 4630891112454855033, 4630965455710494212, 4631040362094573213, 4631115832819267388, 4631191869092859051, 4631268472119770665, 4631345643100597525, 4631423383232140038, 4631501693707435534, 4631580575715789650, 4631660030442807299, 4631740059070423220, 4631820662776932122, 4631901842737018425, 4631983600121785599, 4632065936098785144, 4632148851832045157, 4632232348482098562, 4632316427206010939, 4632401089157408025, 4632486335486502848, 4632572167340122509, 4632658585861734647, 4632745592191473537, 4632833187466165889, 4632921372819356314, 4633010149381332451, 4633099518279149837, 4633189480636656412, 4633280037574516751, 4633371190210236008, 4633462939658183536, 4633555287029616272, 4633648233432701789, 4633741779972541089, 4633835927751191153, 4633930677867687184, 4634026031418064590, 4634121989495380747, 4634211284876988415, 4634259870076268772, 4634308759169777192, 4634357952698192419, 4634407451200756650, 4634457255215285655, 4634507365278178801, 4634557781924428958, 4634608505687632279, 4634659537099997902, 4634710876692357502, 4634762524994174769, 4634814482533554771, 4634866749837253199, 4634919327430685537, 4634972215837936106, 4635025415581767022, 4635078927183627061, 4635132751163660409, 4635186888040715339, 4635241338332352781, 4635296102554854808, 4635351181223233026, 4635406574851236876, 4635462283951361850, 4635518309034857618, 4635574650611736079, 4635631309190779308, 4635688285279547439, 4635745579384386464, 4635803192010435943, 4635861123661636633, 4635919374840738054, 4635977946049305967, 4636036837787729777, 4636096050555229854, 4636155584849864797, 4636215441168538620, 4636275620007007844, 4636336121859888558, 4636396947220663375, 4636458096581688329, 4636519570434199722, 4636581369268320872, 4636643493573068830, 4636705943836361001] \l0x0044: SPUT  (r0 I:double[]) com.google.android.material.color.utilities.HctSolver.CRITICAL_PLANES double[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x0046|RETURN\l|0x0046: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void com.google.android.material.color.utilities.HctSolver.\<clinit\>()  | USE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

