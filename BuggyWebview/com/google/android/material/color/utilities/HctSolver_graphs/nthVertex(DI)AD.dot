digraph "CFG forcom.google.android.material.color.utilities.HctSolver.nthVertex(DI)[D" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|double[] r1 = com.google.android.material.color.utilities.HctSolver.Y_FROM_LINRGB\lr3 = r1[0]\lr6 = r1[1]\lr9 = r1[2]\lr11 = 0.0d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|if ((r27 % 4) \> 1) goto L30\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|r15 = 0.0d\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|PHI: r15 \l  PHI: (r15v1 'coordA' double) = (r15v0 'coordA' double), (r15v2 'coordA' double) binds: [B:5:0x0017, B:4:0x0015] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|if ((r27 % 2) != 0) goto L6\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|r11 = 100.0d\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|PHI: r11 \l  PHI: (r11v1 'coordB' double) = (r11v0 'coordB' double), (r11v2 'coordB' double) binds: [B:7:0x001a, B:9:0x001d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|if (r27 \>= 4) goto L16\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|r17 = r15\lr19 = r11\ldouble r21 = ((r25 \- (r17 * r6)) \- (r19 * r9)) \/ r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|if (isBounded(r21) == false) goto L14\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036}"];
Node_15 [shape=record,label="{15\:\ 0x003e|RETURN\l|return new double[]\{r21, r17, r19\}\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x003f}"];
Node_17 [shape=record,label="{17\:\ 0x0044|RETURN\l|return new double[]\{\-1.0d, \-1.0d, \-1.0d\}\l}"];
Node_18 [shape=record,label="{18\:\ 0x0045}"];
Node_19 [shape=record,label="{19\:\ 0x0047|if (r27 \>= 8) goto L24\l}"];
Node_20 [shape=record,label="{20\:\ 0x0049|r17 = r15\lr19 = r11\ldouble r21 = ((r25 \- (r19 * r3)) \- (r17 * r9)) \/ r6\l}"];
Node_21 [shape=record,label="{21\:\ 0x005b|if (isBounded(r21) == false) goto L22\l}"];
Node_22 [shape=record,label="{22\:\ 0x005d}"];
Node_23 [shape=record,label="{23\:\ 0x0065|RETURN\l|return new double[]\{r19, r21, r17\}\l}"];
Node_24 [shape=record,label="{24\:\ 0x0066}"];
Node_25 [shape=record,label="{25\:\ 0x006b|RETURN\l|return new double[]\{\-1.0d, \-1.0d, \-1.0d\}\l}"];
Node_26 [shape=record,label="{26\:\ 0x006c|r17 = r15\lr19 = r11\ldouble r21 = ((r25 \- (r17 * r3)) \- (r19 * r6)) \/ r9\l}"];
Node_27 [shape=record,label="{27\:\ 0x007e|if (isBounded(r21) == false) goto L28\l}"];
Node_28 [shape=record,label="{28\:\ 0x0080}"];
Node_29 [shape=record,label="{29\:\ 0x0088|RETURN\l|return new double[]\{r17, r19, r21\}\l}"];
Node_30 [shape=record,label="{30\:\ 0x0089}"];
Node_31 [shape=record,label="{31\:\ 0x008e|RETURN\l|return new double[]\{\-1.0d, \-1.0d, \-1.0d\}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|r15 = 100.0d\l}"];
MethodNode[shape=record,label="{static double[] com.google.android.material.color.utilities.HctSolver.nthVertex((r25v0 'y' double A[D('y' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r27v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0044 \-\> B:1:?, CROSS_EDGE: B:23:0x0065 \-\> B:1:?, CROSS_EDGE: B:25:0x006b \-\> B:1:?, CROSS_EDGE: B:29:0x0088 \-\> B:1:?, CROSS_EDGE: B:31:0x008e \-\> B:1:?, CROSS_EDGE: B:7:0x001a \-\> B:10:0x001e, CROSS_EDGE: B:5:0x0017 \-\> B:6:0x0018\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_1;
Node_24 -> Node_25;
Node_25 -> Node_1;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_1;
Node_30 -> Node_31;
Node_31 -> Node_1;
Node_5 -> Node_6;
}

