digraph "CFG forcom.google.android.material.color.utilities.HctSolver.bisectToSegment(DD)[[D" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:468)\l0x0001: NEW_ARRAY  (r0 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0003: FILL_ARRAY  (r0 I:??[]), data: 0x0066: FILL_ARRAY_DATA  , data: [\-4616189618054758400, \-4616189618054758400, \-4616189618054758400] \l0x0006: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('left' double[])])  (LINE:469)\l0x0007: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:470)\l0x0009: CONST  (r4 I:??[long, double]) = (0 ??[long, double])  (LINE:471)\l0x000b: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:472)\l0x000c: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:473)\l0x000d: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:474)\l0x000e: MOVE  (r10 I:??[long, double]) = (r4 I:??[long, double] A[D('rightHue' double)]) \l0x000f: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('initialized' boolean)]) \l0x0010: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('uncut' boolean)]) \l0x0011: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: MOVE  (r8 I:??[long, double]) = (r2 I:??[long, double] A[D('leftHue' double)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|LOOP_START\lLOOP:0: B:3:0x0013\-\>B:18:0x0059\l|0x0013: CONST  (r2 I:??[int, float, short, byte, char] A[D('leftHue' double)]) = (12 ??[int, float, short, byte, char]) \l0x0015: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: IF  (r14 I:??[int, byte, short, char] A[D('n' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:21:0x005c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: MOVE  (r6 I:??[long, double]) = (r18 I:??[long, double] A[D('y' double)])  (LINE:475)\l0x001a: INVOKE  (r15 I:double[]) = (r6 I:double), (r14 I:int A[D('n' int)]) type: STATIC call: com.google.android.material.color.utilities.HctSolver.nthVertex(double, int):double[] A[MD:(double, int):double[] (m)]\l0x001e: AGET  (r2 I:??[long, double]) = (r15 I:??[long, double][] A[D('mid' double[])]), (r3 I:??[int, short, byte, char])  (LINE:476)\l0x0020: CONST  (r4 I:??[long, double]) = (0 ??[long, double]) \l0x0022: CMP_G  (r16 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0024|0x0024: IF  (r16 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:8:0x0027 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0027|0x0027: INVOKE  (r16 I:double) = (r15 I:double[] A[D('mid' double[])]) type: STATIC call: com.google.android.material.color.utilities.HctSolver.hueOf(double[]):double A[MD:(double[]):double (m)] (LINE:479)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('initialized' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0038  (LINE:480)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('left' double[])]) = (r15 I:??[OBJECT, ARRAY] A[D('mid' double[])])  (LINE:481)\l0x002e: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('right' double[])]) = (r15 I:??[OBJECT, ARRAY] A[D('mid' double[])])  (LINE:482)\l0x002f: MOVE  (r2 I:??[long, double]) = (r16 I:??[long, double] A[D('midHue' double)])  (LINE:483)\l0x0031: MOVE  (r4 I:??[long, double]) = (r16 I:??[long, double] A[D('midHue' double)])  (LINE:484)\l0x0033: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:485)\l0x0034: MOVE  (r10 I:??[long, double]) = (r4 I:??[long, double] A[D('rightHue' double)])  (LINE:486)\l0x0035: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('initialized' boolean)]) \l0x0036: MOVE  (r8 I:??[long, double] A[D('initialized' boolean)]) = (r2 I:??[long, double] A[D('leftHue' double)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0059|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|LOOP_END\lLOOP:0: B:3:0x0013\-\>B:18:0x0059\l|0x0059: ARITH  (r14 I:int) = (r14 I:int A[D('n' int)]) + (1 int)  (LINE:474)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|0x0038: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('uncut' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0044  (LINE:488)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: MOVE  (r2 I:??[long, double]) = (r8 I:??[long, double] A[D('leftHue' double)]) \l0x003b: MOVE  (r4 I:??[long, double]) = (r16 I:??[long, double] A[D('midHue' double)]) \l0x003d: MOVE  (r6 I:??[long, double]) = (r10 I:??[long, double] A[D('rightHue' double)]) \l0x003e: INVOKE  (r2 I:boolean) = (r2 I:double), (r4 I:double), (r6 I:double) type: STATIC call: com.google.android.material.color.utilities.HctSolver.areInCyclicOrder(double, double, double):boolean A[MD:(double, double, double):boolean (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|0x0042: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0059 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0059|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0044|0x0044: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('uncut' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:489)\l0x0045: MOVE  (r2 I:??[long, double]) = (r8 I:??[long, double] A[D('leftHue' double)])  (LINE:490)\l0x0046: MOVE  (r4 I:??[long, double]) = (r20 I:??[long, double] A[D('targetHue' double)]) \l0x0048: MOVE  (r6 I:??[long, double]) = (r16 I:??[long, double] A[D('midHue' double)]) \l0x004a: INVOKE  (r2 I:boolean) = (r2 I:double), (r4 I:double), (r6 I:double) type: STATIC call: com.google.android.material.color.utilities.HctSolver.areInCyclicOrder(double, double, double):boolean A[MD:(double, double, double):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004e|0x004e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0055 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0050|0x0050: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('right' double[])]) = (r15 I:??[OBJECT, ARRAY] A[D('mid' double[])])  (LINE:491)\l0x0051: MOVE  (r2 I:??[long, double]) = (r16 I:??[long, double] A[D('midHue' double)])  (LINE:492)\l0x0053: MOVE  (r10 I:??[long, double] A[D('rightHue' double)]) = (r2 I:??[long, double]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('left' double[])]) = (r15 I:??[OBJECT, ARRAY] A[D('mid' double[])])  (LINE:494)\l0x0056: MOVE  (r2 I:??[long, double]) = (r16 I:??[long, double] A[D('midHue' double)])  (LINE:495)\l0x0058: MOVE  (r8 I:??[long, double] A[D('leftHue' double)]) = (r2 I:??[long, double]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0059|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0059|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x005c|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x005c|0x005c: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:499)\l0x005d: NEW_ARRAY  (r2 I:double[][]) = (r2 I:int A[IMMUTABLE_TYPE]) type: double[][] \l0x005f: APUT  (r2 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r0 I:??[OBJECT, ARRAY] A[D('left' double[])]) \l0x0061: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0062: APUT  (r2 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY] A[D('right' double[])]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0064|RETURN\l|0x0064: RETURN  (r2 I:double[][]) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static double[][] com.google.android.material.color.utilities.HctSolver.bisectToSegment((r18 I:double A[D('y' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:double A[D('targetHue' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x0059 \-\> B:3:0x0013, CROSS_EDGE: B:16:0x0050 \-\> B:18:0x0059, CROSS_EDGE: B:17:0x0055 \-\> B:18:0x0059, CROSS_EDGE: B:13:0x0042 \-\> B:18:0x0059, CROSS_EDGE: B:11:0x0038 \-\> B:14:0x0044, CROSS_EDGE: B:6:0x0024 \-\> B:18:0x0059\lDebug Info:\l  0x0009\-0x0013: r2 'leftHue' D\l  0x000b\-0x0013: r4 'rightHue' D\l  0x000c\-0x0013: r6 'initialized' Z\l  0x000d\-0x0013: r7 'uncut' Z\l  0x0013\-0x0031: r8 'leftHue' D\l  0x0013\-0x0033: r10 'rightHue' D\l  0x0013\-0x0034: r12 'initialized' Z\l  0x0031\-0x0038: r2 'leftHue' D\l  0x0033\-0x0038: r4 'rightHue' D\l  0x0034\-0x0038: r8 'initialized' Z\l  0x0038\-0x0054: r10 'rightHue' D\l  0x0054\-0x0055: r2 'rightHue' D\l  0x001e\-0x0059: r15 'mid' [D\l  0x002b\-0x0059: r16 'midHue' D\l  0x0013\-0x005c: r14 'n' I\l  0x0006\-0x0075: r0 'left' [D\l  0x0007\-0x0075: r1 'right' [D\l  0x0038\-0x0075: r8 'leftHue' D\l  0x0055\-0x0075: r10 'rightHue' D\l  0x0038\-0x0075: r12 'initialized' Z\l  0x0013\-0x0075: r13 'uncut' Z\l  \-1 \-0x0075: r18 'y' D\l  \-1 \-0x0075: r20 'targetHue' D\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_21;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_26[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_23;
Node_23 -> Node_18;
Node_18 -> Node_3;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_24;
Node_24 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_25;
Node_25 -> Node_18;
Node_17 -> Node_22;
Node_22 -> Node_18;
Node_26 -> Node_18;
Node_21 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_1;
}

