digraph "CFG forcom.google.android.material.color.utilities.Cam16.viewed(Lcom\/google\/android\/material\/color\/utilities\/ViewingConditions;)I" {
subgraph cluster_Region_1874833666 {
label = "R(3:2|6|7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000a|double r0 = (getChroma() == 0.0d \|\| getJ() == 0.0d) ? 0.0d : getChroma() \/ java.lang.Math.sqrt(getJ() \/ 100.0d)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0025|PHI: r0 \l  PHI: (r0v2 'alpha' double) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|double double r6 = java.lang.Math.pow(r0 \/ java.lang.Math.pow(1.64d \- java.lang.Math.pow(0.29d, r64.getN()), 0.73d), 1.1111111111111112d)\ldouble double r8 = java.lang.Math.toRadians(getHue())\ldouble double r12 = (java.lang.Math.cos(2.0d + r8) + 3.8d) * 0.25d\ldouble double r10 = r64.getAw() * java.lang.Math.pow(getJ() \/ 100.0d, (1.0d \/ r64.getC()) \/ r64.getZ())\ldouble double r2 = 3846.153846153846d * r12 * r64.getNc() * r64.getNcb()\ldouble double r14 = r10 \/ r64.getNbb()\ldouble double r16 = java.lang.Math.sin(r8)\ldouble double r18 = java.lang.Math.cos(r8)\ldouble double r22 = (((r14 + 0.305d) * 23.0d) * r6) \/ (((23.0d * r2) + ((11.0d * r6) * r18)) + ((108.0d * r6) * r16))\ldouble double r24 = r22 * r18\ldouble double r26 = r22 * r16\ldouble double r30 = (((r14 * 460.0d) + (451.0d * r24)) + (288.0d * r26)) \/ 1403.0d\ldouble double r34 = (((r14 * 460.0d) \- (891.0d * r24)) \- (261.0d * r26)) \/ 1403.0d\ldouble double r28 = (((460.0d * r14) \- (220.0d * r24)) \- (6300.0d * r26)) \/ 1403.0d\ldouble double r0 = (java.lang.Math.abs(r30) * 27.13d) \/ (400.0d \- java.lang.Math.abs(r30))\ldouble double r0 = java.lang.Math.max(0.0d, r0)\ldouble double r32 = java.lang.Math.signum(r30) * (100.0d \/ r64.getFl()) * java.lang.Math.pow(r0, 2.380952380952381d)\ldouble double r4 = java.lang.Math.max(0.0d, (java.lang.Math.abs(r34) * 27.13d) \/ (400.0d \- java.lang.Math.abs(r34)))\ldouble double r0 = java.lang.Math.signum(r34) * (100.0d \/ r64.getFl()) * java.lang.Math.pow(r4, 2.380952380952381d)\ldouble double r2 = java.lang.Math.max(0.0d, (java.lang.Math.abs(r28) * 27.13d) \/ (400.0d \- java.lang.Math.abs(r28)))\ldouble double r4 = java.lang.Math.signum(r28) * (100.0d \/ r64.getFl()) * java.lang.Math.pow(r2, 2.380952380952381d)\ldouble double r38 = r32 \/ r64.getRgbD()[0]\ldouble double r48 = r0 \/ r64.getRgbD()[1]\ldouble double r50 = r4 \/ r64.getRgbD()[2]\ldouble[][] double[][] r6 = com.google.android.material.color.utilities.Cam16.CAM16RGB_TO_XYZ\ldouble double r53 = (r6[0][0] * r38) + (r6[0][1] * r48) + (r6[0][2] * r50)\ldouble double r55 = (r6[1][0] * r38) + (r6[1][1] * r48) + (r6[1][2] * r50)\ldouble double r40 = (r6[2][0] * r38) + (r6[2][1] * r48) + (r6[2][2] * r50)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0216|RETURN\l|return com.google.android.material.color.utilities.ColorUtils.argbFromXyz(r53, r55, r40)\l}"];
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000c}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0012|REMOVE\lADDED_TO_REGION\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0015}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0024}"];
MethodNode[shape=record,label="{int com.google.android.material.color.utilities.Cam16.viewed((r63v0 'this' com.google.android.material.color.utilities.Cam16 A[IMMUTABLE_TYPE, THIS]), (r64v0 'viewingConditions' com.google.android.material.color.utilities.ViewingConditions A[D('viewingConditions' com.google.android.material.color.utilities.ViewingConditions), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0024 \-\> B:20:0x0025, CROSS_EDGE: B:14:0x000a \-\> B:19:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_14 -> Node_15;
Node_14 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
}

