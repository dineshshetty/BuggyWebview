digraph "CFG forcom.google.android.material.color.HarmonizedColors.applyToContextIfAvailable(Landroid\/content\/Context;Lcom\/google\/android\/material\/color\/HarmonizedColorsOptions;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (isHarmonizedColorAvailable() != false) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|java.util.Map r0 = createHarmonizedColorReplacementMap(r3, r4)\lint r1 = r4.getThemeOverlayResourceId(0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|if (com.google.android.material.color.ResourcesLoaderUtils.addResourcesLoaderToContext(r3, r0) == false) goto L11\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|if (r1 == 0) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|com.google.android.material.color.ThemeUtils.applyThemeOverlay(r3, r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|RETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void com.google.android.material.color.HarmonizedColors.applyToContextIfAvailable((r3v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'options' com.google.android.material.color.HarmonizedColorsOptions A[D('options' com.google.android.material.color.HarmonizedColorsOptions), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x001c \-\> B:1:?, CROSS_EDGE: B:7:0x0017 \-\> B:9:0x001c, CROSS_EDGE: B:6:0x0015 \-\> B:9:0x001c\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_11 -> Node_1;
Node_10 -> Node_1;
}

