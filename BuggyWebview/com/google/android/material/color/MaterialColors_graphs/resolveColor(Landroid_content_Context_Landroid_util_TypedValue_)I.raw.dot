digraph "CFG forcom.google.android.material.color.MaterialColors.resolveColor(Landroid\/content\/Context;Landroid\/util\/TypedValue;)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:android.util.TypedValue A[D('typedValue' android.util.TypedValue)]) android.util.TypedValue.resourceId int  (LINE:154)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IGET  (r0 I:int) = (r2 I:android.util.TypedValue A[D('typedValue' android.util.TypedValue)]) android.util.TypedValue.resourceId int  (LINE:156)\l0x0006: INVOKE  (r0 I:int) = (r1 I:android.content.Context A[D('context' android.content.Context)]), (r0 I:int) type: STATIC call: androidx.core.content.ContextCompat.getColor(android.content.Context, int):int A[MD:(android.content.Context, int):int (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: IGET  (r0 I:int) = (r2 I:android.util.TypedValue A[D('typedValue' android.util.TypedValue)]) android.util.TypedValue.data int  (LINE:159)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private static int com.google.android.material.color.MaterialColors.resolveColor((r1 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.util.TypedValue A[D('typedValue' android.util.TypedValue), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000d \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r1 'context' Landroid\/content\/Context;\l  \-1 \-0x000d: r2 'typedValue' Landroid\/util\/TypedValue;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

