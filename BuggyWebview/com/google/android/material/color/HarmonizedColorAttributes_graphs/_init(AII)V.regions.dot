digraph "CFG forcom.google.android.material.color.HarmonizedColorAttributes.\<init\>([II)V" {
subgraph cluster_Region_729838946 {
label = "R(1:(2:(1:6)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1555144417 {
label = "R(2:(1:6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_468607023 {
label = "IF [B:14:0x0003, B:16:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0003|if (r4 != 0) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|ADDED_TO_REGION\l|if (r3.length == 0) goto L5\l}"];
subgraph cluster_Region_1341719253 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0010|throw new java.lang.IllegalArgumentException(\"Theme overlay should be used with the accompanying int[] attributes.\")\l}"];
}
}
subgraph cluster_Region_1744454957 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0011|r2.attributes = r3\lr2.themeOverlay = r4\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0005}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0009}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0015}"];
MethodNode[shape=record,label="{private void com.google.android.material.color.HarmonizedColorAttributes.\<init\>((r2v0 'this' com.google.android.material.color.HarmonizedColorAttributes A[IMMUTABLE_TYPE, THIS]), (r3v0 'attributes' int[] A[D('attributes' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'themeOverlay' int A[D('themeOverlay' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0015 \-\> B:12:?, CROSS_EDGE: B:14:0x0003 \-\> B:20:0x0011\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_14 -> Node_15;
Node_14 -> Node_20[style=dashed];
Node_16 -> Node_18;
Node_16 -> Node_20[style=dashed];
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_18 -> Node_19;
Node_21 -> Node_12;
}

