digraph "CFG forcom.google.android.material.color.ColorResourcesTableCreator.ResTable.writeTo(Ljava\/io\/ByteArrayOutputStream;)V" {
subgraph cluster_Region_2128364356 {
label = "R(2:1|(1:4))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|r2.header.writeTo(r3)\lr3.write(com.google.android.material.color.ColorResourcesTableCreator.intToByteArray(r2.packageCount))\lr2.stringPool.writeTo(r3)\ljava.util.Iterator r0 = r2.packageChunks.iterator()\l\l}"];
subgraph cluster_LoopRegion_720625967 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x001d|com.google.android.material.color.ColorResourcesTableCreator$PackageChunk \lif (r0.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_724716510 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001f|LOOP_END\lLOOP:0: B:11:0x0019\-\>B:13:0x001f\l|com.google.android.material.color.ColorResourcesTableCreator$PackageChunk r1 = r0.next()\lr1.writeTo(r3)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0019|LOOP_START\lLOOP:0: B:11:0x0019\-\>B:13:0x001f\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0029|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0029}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void com.google.android.material.color.ColorResourcesTableCreator.ResTable.writeTo((r2v0 'this' com.google.android.material.color.ColorResourcesTableCreator$ResTable A[IMMUTABLE_TYPE, THIS]), (r3v0 'outputStream' java.io.ByteArrayOutputStream A[D('outputStream' java.io.ByteArrayOutputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x001f \-\> B:11:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_15[style=dashed];
Node_13 -> Node_11;
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

