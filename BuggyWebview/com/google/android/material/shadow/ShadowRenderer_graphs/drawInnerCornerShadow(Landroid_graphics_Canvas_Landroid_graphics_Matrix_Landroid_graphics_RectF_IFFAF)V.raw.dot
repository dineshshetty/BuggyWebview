digraph "CFG forcom.google.android.material.shadow.ShadowRenderer.drawInnerCornerShadow(Landroid\/graphics\/Canvas;Landroid\/graphics\/Matrix;Landroid\/graphics\/RectF;IFF[F)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:195)\l0x0001: CMP_L  (r0 I:int) = (r13 I:float A[D('sweepAngle' float)]), (r0 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0003|0x0003: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:12:0x0007 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: ARITH  (r12 I:float) = (r12 I:float A[D('startAngle' float)]) + (r13 I:float A[D('sweepAngle' float)])  (LINE:196)\l0x0006: NEG  (r13 I:float) = (r13 I:float A[D('sweepAngle' float)])  (LINE:197)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:199)\l0x0008: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)]) \l0x0009: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('matrix' android.graphics.Matrix)]) \l0x000a: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('bounds' android.graphics.RectF)]) \l0x000b: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('elevation' int)]) \l0x000c: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startAngle' float)]) \l0x000d: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sweepAngle' float)]) \l0x000e: INVOKE  \l  (r0 I:com.google.android.material.shadow.ShadowRenderer)\l  (r1 I:android.graphics.Canvas)\l  (r2 I:android.graphics.Matrix)\l  (r3 I:android.graphics.RectF)\l  (r4 I:int)\l  (r5 I:float)\l  (r6 I:float)\l type: VIRTUAL call: com.google.android.material.shadow.ShadowRenderer.drawCornerShadow(android.graphics.Canvas, android.graphics.Matrix, android.graphics.RectF, int, float, float):void A[MD:(android.graphics.Canvas, android.graphics.Matrix, android.graphics.RectF, int, float, float):void (m)]\l0x0011: IGET  (r0 I:android.graphics.Path) = (r7 I:com.google.android.material.shadow.ShadowRenderer) com.google.android.material.shadow.ShadowRenderer.scratch android.graphics.Path  (LINE:201)\l0x0013: INVOKE  (r0 I:android.graphics.Path A[D('shapeBounds' android.graphics.Path)]) type: VIRTUAL call: android.graphics.Path.rewind():void A[MD:():void (c)] (LINE:202)\l0x0016: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l0x0017: AGET  (r1 I:??[int, float, short, byte, char]) = (r14 I:??[int, float][] A[D('cornerPosition' float[])]), (r1 I:??[int, short, byte, char]) \l0x0019: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001a: AGET  (r2 I:??[int, float, short, byte, char]) = (r14 I:??[int, float][] A[D('cornerPosition' float[])]), (r2 I:??[int, short, byte, char]) \l0x001c: INVOKE  (r0 I:android.graphics.Path A[D('shapeBounds' android.graphics.Path)]), (r1 I:float), (r2 I:float) type: VIRTUAL call: android.graphics.Path.moveTo(float, float):void A[MD:(float, float):void (c)]\l0x001f: INVOKE  \l  (r0 I:android.graphics.Path A[D('shapeBounds' android.graphics.Path)])\l  (r10 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)])\l  (r12 I:float A[D('startAngle' float)])\l  (r13 I:float A[D('sweepAngle' float)])\l type: VIRTUAL call: android.graphics.Path.arcTo(android.graphics.RectF, float, float):void A[MD:(android.graphics.RectF, float, float):void (c)] (LINE:204)\l0x0022: INVOKE  (r0 I:android.graphics.Path A[D('shapeBounds' android.graphics.Path)]) type: VIRTUAL call: android.graphics.Path.close():void A[MD:():void (c)] (LINE:205)\l0x0025: INVOKE  (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]) type: VIRTUAL call: android.graphics.Canvas.save():int A[MD:():int (c)] (LINE:207)\l0x0028: INVOKE  \l  (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l  (r9 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix)])\l type: VIRTUAL call: android.graphics.Canvas.concat(android.graphics.Matrix):void A[MD:(android.graphics.Matrix):void (c)] (LINE:208)\l0x002b: CONST  (r1 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:209)\l0x002d: INVOKE  (r2 I:float) = (r10 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.height():float A[MD:():float (c)]\l0x0031: INVOKE  (r3 I:float) = (r10 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)]\l0x0035: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x0036: INVOKE  (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]), (r1 I:float), (r2 I:float) type: VIRTUAL call: android.graphics.Canvas.scale(float, float):void A[MD:(float, float):void (c)]\l0x0039: IGET  (r1 I:android.graphics.Paint) = (r7 I:com.google.android.material.shadow.ShadowRenderer) com.google.android.material.shadow.ShadowRenderer.transparentPaint android.graphics.Paint  (LINE:211)\l0x003b: INVOKE  \l  (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l  (r0 I:android.graphics.Path A[D('shapeBounds' android.graphics.Path)])\l  (r1 I:android.graphics.Paint)\l type: VIRTUAL call: android.graphics.Canvas.drawPath(android.graphics.Path, android.graphics.Paint):void A[MD:(android.graphics.Path, android.graphics.Paint):void (c)]\l0x003e: IGET  (r1 I:android.graphics.Paint) = (r7 I:com.google.android.material.shadow.ShadowRenderer) com.google.android.material.shadow.ShadowRenderer.shadowPaint android.graphics.Paint  (LINE:212)\l0x0040: INVOKE  \l  (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l  (r0 I:android.graphics.Path A[D('shapeBounds' android.graphics.Path)])\l  (r1 I:android.graphics.Paint)\l type: VIRTUAL call: android.graphics.Canvas.drawPath(android.graphics.Path, android.graphics.Paint):void A[MD:(android.graphics.Path, android.graphics.Paint):void (c)]\l0x0043: INVOKE  (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]) type: VIRTUAL call: android.graphics.Canvas.restore():void A[MD:():void (c)] (LINE:213)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|RETURN\l|0x0046: RETURN    (LINE:214)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.shadow.ShadowRenderer.drawInnerCornerShadow((r7 'this' I:com.google.android.material.shadow.ShadowRenderer A[IMMUTABLE_TYPE, THIS]), (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.graphics.RectF A[D('bounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('elevation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:float A[D('startAngle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:float A[D('sweepAngle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:float[] A[D('cornerPosition' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0003 \-\> B:12:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0046: r0 'shapeBounds' Landroid\/graphics\/Path;\l  \-1 \-0x0046: r8 'canvas' Landroid\/graphics\/Canvas;\l  \-1 \-0x0046: r9 'matrix' Landroid\/graphics\/Matrix;\l  \-1 \-0x0046: r10 'bounds' Landroid\/graphics\/RectF;\l  \-1 \-0x0046: r11 'elevation' I\l  \-1 \-0x0046: r12 'startAngle' F\l  \-1 \-0x0046: r13 'sweepAngle' F\l  \-1 \-0x0046: r14 'cornerPosition' [F\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

