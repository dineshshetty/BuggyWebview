digraph "CFG forcom.google.android.material.checkbox.MaterialCheckBox.1.onAnimationStart(Landroid\/graphics\/drawable\/Drawable;)V" {
subgraph cluster_Region_2057335739 {
label = "R(2:1|(1:(1:3)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|super.onAnimationStart(r4)\l}"];
subgraph cluster_Region_186007487 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1013366677 {
label = "IF [B:10:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0007|if (com.google.android.material.checkbox.MaterialCheckBox.this.buttonTintList != null) goto L3\l}"];
subgraph cluster_Region_67804075 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0009|androidx.core.graphics.drawable.DrawableCompat.setTint(r4, com.google.android.material.checkbox.MaterialCheckBox.this.buttonTintList.getColorForState(com.google.android.material.checkbox.MaterialCheckBox.this.currentStateChecked, com.google.android.material.checkbox.MaterialCheckBox.this.buttonTintList.getDefaultColor()))\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0022|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.checkbox.MaterialCheckBox.1.onAnimationStart((r3v0 'this' com.google.android.material.checkbox.MaterialCheckBox$1 A[IMMUTABLE_TYPE, THIS]), (r4v0 'drawable' android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0007 \-\> B:12:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.vectordrawable.graphics.drawable.Animatable2Compat.AnimationCallback.onAnimationStart(android.graphics.drawable.Drawable):void]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

