digraph "CFG forcom.google.android.material.snackbar.Snackbar.SnackbarLayout.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|super.onMeasure(r8, r9)\lint r0 = getChildCount()\lint r1 = (getMeasuredWidth() \- getPaddingLeft()) \- getPaddingRight()\lr2 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|LOOP_START\lLOOP:0: B:3:0x0016\-\>B:7:0x0037\lPHI: r2 \l  PHI: (r2v3 'i' int) = (r2v2 'i' int), (r2v4 'i' int) binds: [B:2:0x0000, B:7:0x0037] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r0) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|android.view.View r3 = getChildAt(r2)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|if (r3.getLayoutParams().width != (\-1)) goto L8\l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|r3.measure(android.view.View.MeasureSpec.makeMeasureSpec(r1, androidx.constraintlayout.core.widgets.analyzer.BasicMeasure.EXACTLY), android.view.View.MeasureSpec.makeMeasureSpec(r3.getMeasuredHeight(), androidx.constraintlayout.core.widgets.analyzer.BasicMeasure.EXACTLY))\l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|LOOP_END\lLOOP:0: B:3:0x0016\-\>B:7:0x0037\l|int r2 = r2 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0037|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.snackbar.Snackbar.SnackbarLayout.onMeasure((r7v0 'this' com.google.android.material.snackbar.Snackbar$SnackbarLayout A[IMMUTABLE_TYPE, THIS]), (r8v0 'widthMeasureSpec' int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'heightMeasureSpec' int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:7:0x0037 \-\> B:3:0x0016, CROSS_EDGE: B:5:0x0023 \-\> B:7:0x0037\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_10;
Node_10 -> Node_7;
Node_7 -> Node_3;
Node_11 -> Node_7;
Node_9 -> Node_8;
Node_8 -> Node_1;
}

