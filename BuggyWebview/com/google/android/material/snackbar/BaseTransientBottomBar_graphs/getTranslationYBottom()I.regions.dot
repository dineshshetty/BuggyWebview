digraph "CFG forcom.google.android.material.snackbar.BaseTransientBottomBar.getTranslationYBottom()I" {
subgraph cluster_Region_897428088 {
label = "R(2:1|(2:(1:4)|(1:6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|int int r0 = r3.view.getHeight()\landroid.view.ViewGroup$LayoutParams android.view.ViewGroup.LayoutParams r1 = r3.view.getLayoutParams()\l}"];
subgraph cluster_Region_805079829 {
label = "R(2:(1:4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1353143660 {
label = "IF [B:10:0x000e] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000e|if ((r1 instanceof android.view.ViewGroup.MarginLayoutParams) != false) goto L3\l}"];
subgraph cluster_Region_526951367 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0016|RETURN\lORIG_RETURN\l|return r0 + ((android.view.ViewGroup.MarginLayoutParams) r1).bottomMargin\l}"];
}
}
subgraph cluster_Region_736219646 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private int com.google.android.material.snackbar.BaseTransientBottomBar.getTranslationYBottom((r3v0 'this' com.google.android.material.snackbar.BaseTransientBottomBar\<B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>\> A[D('this' com.google.android.material.snackbar.BaseTransientBottomBar\<B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000e \-\> B:12:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
Node_11 -> Node_12;
}

