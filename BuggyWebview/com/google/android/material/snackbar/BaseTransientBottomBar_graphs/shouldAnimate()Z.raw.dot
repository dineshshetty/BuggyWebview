digraph "CFG forcom.google.android.material.snackbar.BaseTransientBottomBar.shouldAnimate()Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:android.view.accessibility.AccessibilityManager) = \l  (r4 I:com.google.android.material.snackbar.BaseTransientBottomBar A[D('this' com.google.android.material.snackbar.BaseTransientBottomBar\<B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>\>)])\l com.google.android.material.snackbar.BaseTransientBottomBar.accessibilityManager android.view.accessibility.AccessibilityManager  (LINE:1129)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0006 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:boolean)  (LINE:1130)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1132)\l0x0008: INVOKE  (r0 I:java.util.List) = (r0 I:android.view.accessibility.AccessibilityManager), (r2 I:int A[D('feedbackFlags' int)]) type: VIRTUAL call: android.view.accessibility.AccessibilityManager.getEnabledAccessibilityServiceList(int):java.util.List A[MD:(int):java.util.List\<android.accessibilityservice.AccessibilityServiceInfo\> (c)] (LINE:1134)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('serviceList' java.util.List\<android.accessibilityservice.AccessibilityServiceInfo\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0015  (LINE:1135)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: INVOKE  (r3 I:boolean) = (r0 I:java.util.List A[D('serviceList' java.util.List\<android.accessibilityservice.AccessibilityServiceInfo\>)]) type: INTERFACE call: java.util.List.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|0x0012: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0015 \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x0016: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|RETURN\lORIG_RETURN\l|0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean com.google.android.material.snackbar.BaseTransientBottomBar.shouldAnimate((r4 'this' I:com.google.android.material.snackbar.BaseTransientBottomBar\<B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>\> A[D('this' com.google.android.material.snackbar.BaseTransientBottomBar\<B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0016 \-\> B:14:?, CROSS_EDGE: B:21:0x0012 \-\> B:24:0x0016, CROSS_EDGE: B:19:0x000c \-\> B:23:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0016: r0 'serviceList' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroid\/accessibilityservice\/AccessibilityServiceInfo;\>;\l  0x0007\-0x0016: r2 'feedbackFlags' I\l  0x0000\-0x0016: r4 'this' Lcom\/google\/android\/material\/snackbar\/BaseTransientBottomBar;, signature: Lcom\/google\/android\/material\/snackbar\/BaseTransientBottomBar\<TB;\>;\lTYPE_VARS: [B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_25[style=dashed];
Node_25 -> Node_14;
Node_23 -> Node_14;
}

