digraph "CFG forcom.google.android.material.snackbar.SnackbarContentLayout.onMeasure(II)V" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: INVOKE  (r9 I:android.widget.LinearLayout), (r10 I:int A[D('widthMeasureSpec' int)]), (r11 I:int A[D('heightMeasureSpec' int)]) type: SUPER call: android.widget.LinearLayout.onMeasure(int, int):void A[MD:(int, int):void (c)] (LINE:87)\l0x0003: INVOKE  (r0 I:int) = (r9 I:com.google.android.material.snackbar.SnackbarContentLayout) type: VIRTUAL call: com.google.android.material.snackbar.SnackbarContentLayout.getOrientation():int A[MD:():int (c)] (LINE:88)\l0x0007: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x000b \l}"];
Node_34 [shape=record,label="{34\:\ 0x000a|RETURN\l|0x000a: RETURN    (LINE:92)\l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x000b|0x000c: INVOKE  (r0 I:android.content.res.Resources) = (r9 I:com.google.android.material.snackbar.SnackbarContentLayout) type: VIRTUAL call: com.google.android.material.snackbar.SnackbarContentLayout.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (s)] (LINE:96)\l0x0010: SGET  (r2 I:int) =  com.google.android.material.R.dimen.design_snackbar_padding_vertical_2lines int \l0x0012: INVOKE  (r0 I:int) = (r0 I:android.content.res.Resources), (r2 I:int) type: VIRTUAL call: android.content.res.Resources.getDimensionPixelSize(int):int A[MD:(int):int throws android.content.res.Resources$NotFoundException (c)]\l0x0017: INVOKE  (r2 I:android.content.res.Resources) = (r9 I:com.google.android.material.snackbar.SnackbarContentLayout) type: VIRTUAL call: com.google.android.material.snackbar.SnackbarContentLayout.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (s)] (LINE:98)\l0x001b: SGET  (r3 I:int) =  com.google.android.material.R.dimen.design_snackbar_padding_vertical int \l0x001d: INVOKE  (r2 I:int) = (r2 I:android.content.res.Resources), (r3 I:int) type: VIRTUAL call: android.content.res.Resources.getDimensionPixelSize(int):int A[MD:(int):int throws android.content.res.Resources$NotFoundException (c)]\l0x0021: IGET  (r3 I:android.widget.TextView) = (r9 I:com.google.android.material.snackbar.SnackbarContentLayout) com.google.android.material.snackbar.SnackbarContentLayout.messageView android.widget.TextView  (LINE:99)\l0x0023: INVOKE  (r3 I:android.text.Layout) = (r3 I:android.widget.TextView) type: VIRTUAL call: android.widget.TextView.getLayout():android.text.Layout A[MD:():android.text.Layout (c)]\l0x0027: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:100)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0028|0x0028: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('messageLayout' android.text.Layout)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0032 \l}"];
Node_37 [shape=record,label="{37\:\ 0x002a|0x002a: INVOKE  (r5 I:int) = (r3 I:android.text.Layout A[D('messageLayout' android.text.Layout)]) type: VIRTUAL call: android.text.Layout.getLineCount():int A[MD:():int (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x002e|0x002e: IF  (r5 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:40:0x0032 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0030|0x0030: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0033|0x0033: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:102)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|0x0034: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isMultiLine' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x004e  (LINE:103)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0036|0x0036: IGET  (r7 I:int) = (r9 I:com.google.android.material.snackbar.SnackbarContentLayout) com.google.android.material.snackbar.SnackbarContentLayout.maxInlineActionWidth int \l}"];
Node_44 [shape=record,label="{44\:\ 0x0038|0x0038: IF  (r7 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:50:0x004e \l}"];
Node_45 [shape=record,label="{45\:\ 0x003a|0x003a: IGET  (r7 I:android.widget.Button) = (r9 I:com.google.android.material.snackbar.SnackbarContentLayout) com.google.android.material.snackbar.SnackbarContentLayout.actionView android.widget.Button \l0x003c: INVOKE  (r7 I:int) = (r7 I:android.widget.Button) type: VIRTUAL call: android.widget.Button.getMeasuredWidth():int A[MD:():int (s)] (LINE:105)\l0x0040: IGET  (r8 I:int) = (r9 I:com.google.android.material.snackbar.SnackbarContentLayout) com.google.android.material.snackbar.SnackbarContentLayout.maxInlineActionWidth int \l}"];
Node_46 [shape=record,label="{46\:\ 0x0042|0x0042: IF  (r7 I:??[int, byte, short, char]) \<= (r8 I:??[int, byte, short, char])  \-\> B:50:0x004e \l}"];
Node_47 [shape=record,label="{47\:\ 0x0044|0x0044: ARITH  (r4 I:int) = (r0 I:int A[D('multiLineVPadding' int)]) \- (r2 I:int A[D('singleLineVPadding' int)])  (LINE:106)\l0x0046: INVOKE  (r1 I:boolean) = \l  (r9 I:com.google.android.material.snackbar.SnackbarContentLayout)\l  (r1 I:int)\l  (r0 I:int A[D('multiLineVPadding' int)])\l  (r4 I:int)\l type: DIRECT call: com.google.android.material.snackbar.SnackbarContentLayout.updateViewsWithinLayout(int, int, int):boolean A[MD:(int, int, int):boolean (m)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x004a|0x004a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x005a \l}"];
Node_49 [shape=record,label="{49\:\ 0x004c|0x004c: CONST  (r6 I:??[boolean, int, float, short, byte, char] A[D('remeasure' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:108)\l}"];
Node_56 [shape=record,label="{56\:\ 0x005a|0x005a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('remeasure' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:?  (LINE:117)\l}"];
Node_57 [shape=record,label="{57\:\ 0x005c|0x005c: INVOKE  (r9 I:android.widget.LinearLayout), (r10 I:int A[D('widthMeasureSpec' int)]), (r11 I:int A[D('heightMeasureSpec' int)]) type: SUPER call: android.widget.LinearLayout.onMeasure(int, int):void A[MD:(int, int):void (c)] (LINE:118)\l}"];
Node_58 [shape=record,label="{58\:\ 0x005f|RETURN\lORIG_RETURN\l|0x005f: RETURN    (LINE:120)\l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lRETURN\l|0x005f: RETURN   A[SYNTHETIC] (LINE:120)\l}"];
Node_50 [shape=record,label="{50\:\ 0x004e|0x004e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isMultiLine' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0052  (LINE:111)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0050|0x0050: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('multiLineVPadding' int)]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0053|0x0053: INVOKE  (r4 I:boolean) = \l  (r9 I:com.google.android.material.snackbar.SnackbarContentLayout)\l  (r4 I:int)\l  (r1 I:int A[D('messagePadding' int)])\l  (r1 I:int A[D('messagePadding' int)])\l type: DIRECT call: com.google.android.material.snackbar.SnackbarContentLayout.updateViewsWithinLayout(int, int, int):boolean A[MD:(int, int, int):boolean (m)] (LINE:112)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0057|0x0057: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x005a \l}"];
Node_55 [shape=record,label="{55\:\ 0x0059|0x0059: CONST  (r6 I:??[boolean, int, float, short, byte, char] A[D('remeasure' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:113)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0052|0x0052: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('singleLineVPadding' int)]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0032|0x0032: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.snackbar.SnackbarContentLayout.onMeasure((r9 'this' I:com.google.android.material.snackbar.SnackbarContentLayout A[IMMUTABLE_TYPE, THIS]), (r10 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:58:0x005f \-\> B:31:?, CROSS_EDGE: B:56:0x005a \-\> B:58:0x005f, CROSS_EDGE: B:48:0x004a \-\> B:56:0x005a, CROSS_EDGE: B:55:0x0059 \-\> B:56:0x005a, CROSS_EDGE: B:54:0x0057 \-\> B:56:0x005a, CROSS_EDGE: B:52:0x0052 \-\> B:53:0x0053, CROSS_EDGE: B:44:0x0038 \-\> B:50:0x004e, CROSS_EDGE: B:42:0x0034 \-\> B:50:0x004e, CROSS_EDGE: B:40:0x0032 \-\> B:41:0x0033, CROSS_EDGE: B:36:0x0028 \-\> B:40:0x0032\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0053\-0x005a: r1 'messagePadding' I\l  0x0016\-0x005f: r0 'multiLineVPadding' I\l  0x0021\-0x005f: r2 'singleLineVPadding' I\l  0x0027\-0x005f: r3 'messageLayout' Landroid\/text\/Layout;\l  0x0033\-0x005f: r5 'isMultiLine' Z\l  0x0034\-0x005f: r6 'remeasure' Z\l  \-1 \-0x005f: r10 'widthMeasureSpec' I\l  \-1 \-0x005f: r11 'heightMeasureSpec' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_31;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_50;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_50;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_56;
Node_49 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_59;
Node_57 -> Node_58;
Node_58 -> Node_31;
Node_59 -> Node_31;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_56;
Node_52 -> Node_53;
Node_40 -> Node_41;
}

