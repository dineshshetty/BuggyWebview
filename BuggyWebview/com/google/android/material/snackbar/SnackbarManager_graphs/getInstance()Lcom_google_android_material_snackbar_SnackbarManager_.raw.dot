digraph "CFG forcom.google.android.material.snackbar.SnackbarManager.getInstance()Lcom\/google\/android\/material\/snackbar\/SnackbarManager;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:com.google.android.material.snackbar.SnackbarManager) =  com.google.android.material.snackbar.SnackbarManager.snackbarManager com.google.android.material.snackbar.SnackbarManager  (LINE:37)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:com.google.android.material.snackbar.SnackbarManager) =  com.google.android.material.snackbar.SnackbarManager  (LINE:38)\l0x0006: INVOKE  (r0 I:com.google.android.material.snackbar.SnackbarManager) type: DIRECT call: com.google.android.material.snackbar.SnackbarManager.\<init\>():void A[MD:():void (m)]\l0x0009: SPUT  (r0 I:com.google.android.material.snackbar.SnackbarManager) com.google.android.material.snackbar.SnackbarManager.snackbarManager com.google.android.material.snackbar.SnackbarManager \l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|0x000b: SGET  (r0 I:com.google.android.material.snackbar.SnackbarManager) =  com.google.android.material.snackbar.SnackbarManager.snackbarManager com.google.android.material.snackbar.SnackbarManager  (LINE:40)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:com.google.android.material.snackbar.SnackbarManager) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static com.google.android.material.snackbar.SnackbarManager com.google.android.material.snackbar.SnackbarManager.getInstance()  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000b\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

