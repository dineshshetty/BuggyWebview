digraph "CFG forcom.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.createThemedBackground()Landroid\/graphics\/drawable\/Drawable;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: SGET  (r0 I:int) =  com.google.android.material.R.attr.colorSurface int  (LINE:1345)\l0x0002: SGET  (r1 I:int) =  com.google.android.material.R.attr.colorOnSurface int \l0x0004: INVOKE  (r2 I:float) = (r4 I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout) type: VIRTUAL call: com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.getBackgroundOverlayColorAlpha():float A[MD:():float (m)] (LINE:1347)\l0x0008: INVOKE  (r0 I:int) = (r4 I:android.view.View), (r0 I:int), (r1 I:int), (r2 I:float) type: STATIC call: com.google.android.material.color.MaterialColors.layer(android.view.View, int, int, float):int A[MD:(android.view.View, int, int, float):int (m)] (LINE:1346)\l0x000c: IGET  (r1 I:com.google.android.material.shape.ShapeAppearanceModel) = (r4 I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout) com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.shapeAppearanceModel com.google.android.material.shape.ShapeAppearanceModel  (LINE:1351)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0015 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|0x0010: INVOKE  (r1 I:com.google.android.material.shape.MaterialShapeDrawable) = (r0 I:int A[D('backgroundColor' int)]), (r1 I:com.google.android.material.shape.ShapeAppearanceModel) type: STATIC call: com.google.android.material.snackbar.BaseTransientBottomBar.access$1900(int, com.google.android.material.shape.ShapeAppearanceModel):com.google.android.material.shape.MaterialShapeDrawable A[MD:(int, com.google.android.material.shape.ShapeAppearanceModel):com.google.android.material.shape.MaterialShapeDrawable (m)] (LINE:1352)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|0x001e: IGET  (r2 I:android.content.res.ColorStateList) = (r4 I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout) com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.backgroundTint android.content.res.ColorStateList  (LINE:1354)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|0x0020: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x002c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|0x0022: INVOKE  (r2 I:android.graphics.drawable.Drawable) = (r1 I:android.graphics.drawable.Drawable A[D('background' android.graphics.drawable.Drawable)]) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.wrap(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable A[MD:(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable (m)] (LINE:1355)\l0x0026: IGET  (r3 I:android.content.res.ColorStateList) = (r4 I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout) com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.backgroundTint android.content.res.ColorStateList  (LINE:1356)\l0x0028: INVOKE  \l  (r2 I:android.graphics.drawable.Drawable A[D('wrappedDrawable' android.graphics.drawable.Drawable)])\l  (r3 I:android.content.res.ColorStateList)\l type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.setTintList(android.graphics.drawable.Drawable, android.content.res.ColorStateList):void A[MD:(android.graphics.drawable.Drawable, android.content.res.ColorStateList):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|RETURN\l|0x002b: RETURN  (r2 I:android.graphics.drawable.Drawable A[D('wrappedDrawable' android.graphics.drawable.Drawable)])  (LINE:1357)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x002c|0x002c: INVOKE  (r2 I:android.graphics.drawable.Drawable) = (r1 I:android.graphics.drawable.Drawable A[D('background' android.graphics.drawable.Drawable)]) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.wrap(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable A[MD:(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable (m)] (LINE:1359)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0030|RETURN\l|0x0030: RETURN  (r2 I:android.graphics.drawable.Drawable) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|0x0015: INVOKE  (r1 I:android.content.res.Resources) = (r4 I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout) type: VIRTUAL call: com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (s)] (LINE:1353)\l0x0019: INVOKE  (r1 I:android.graphics.drawable.GradientDrawable) = (r0 I:int A[D('backgroundColor' int)]), (r1 I:android.content.res.Resources) type: STATIC call: com.google.android.material.snackbar.BaseTransientBottomBar.access$2000(int, android.content.res.Resources):android.graphics.drawable.GradientDrawable A[MD:(int, android.content.res.Resources):android.graphics.drawable.GradientDrawable (m)]\l}"];
MethodNode[shape=record,label="{private android.graphics.drawable.Drawable com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.createThemedBackground((r4 'this' I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0030 \-\> B:13:?, CROSS_EDGE: B:17:0x0015 \-\> B:18:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x002c: r2 'wrappedDrawable' Landroid\/graphics\/drawable\/Drawable;\l  0x000c\-0x0030: r0 'backgroundColor' I\l  0x001e\-0x0030: r1 'background' Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
}

