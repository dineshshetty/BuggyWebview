digraph "CFG forcom.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.setBackgroundTintMode(Landroid\/graphics\/PorterDuff$Mode;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|r2.backgroundTintMode = r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|if (getBackground() == null) goto L9\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|android.graphics.drawable.Drawable r0 = androidx.core.graphics.drawable.DrawableCompat.wrap(getBackground().mutate())\landroidx.core.graphics.drawable.DrawableCompat.setTintMode(r0, r3)\l}"];
Node_15 [shape=record,label="{15\:\ 0x001b|if (r0 == getBackground()) goto L8\l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|super.setBackgroundDrawable(r0)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0020|RETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.setBackgroundTintMode((r2v0 'this' com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'backgroundTintMode' android.graphics.PorterDuff$Mode A[D('backgroundTintMode' android.graphics.PorterDuff$Mode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x001b \-\> B:17:0x0020, CROSS_EDGE: B:13:0x0006 \-\> B:17:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: [B extends com.google.android.material.snackbar.BaseTransientBottomBar\<B\>]\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.setBackgroundTintMode(android.graphics.PorterDuff$Mode):void\}]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_18 -> Node_11;
}

