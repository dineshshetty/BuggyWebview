digraph "CFG forcom.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.onAttachedToWindow()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r1 I:android.widget.FrameLayout) type: SUPER call: android.widget.FrameLayout.onAttachedToWindow():void A[MD:():void (c)] (LINE:1274)\l0x0003: IGET  (r0 I:com.google.android.material.snackbar.BaseTransientBottomBar\<?\>) = (r1 I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout) com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.baseTransientBottomBar com.google.android.material.snackbar.BaseTransientBottomBar  (LINE:1275)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: INVOKE  (r0 I:com.google.android.material.snackbar.BaseTransientBottomBar) type: VIRTUAL call: com.google.android.material.snackbar.BaseTransientBottomBar.onAttachedToWindow():void A[MD:():void (m)] (LINE:1276)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: INVOKE  (r1 I:android.view.View) type: STATIC call: androidx.core.view.ViewCompat.requestApplyInsets(android.view.View):void A[MD:(android.view.View):void (m)] (LINE:1278)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|RETURN\l|0x000d: RETURN    (LINE:1279)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.snackbar.BaseTransientBottomBar.SnackbarBaseLayout.onAttachedToWindow((r1 'this' I:com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0005 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onAttachedToWindow():void\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

