digraph "CFG forcom.google.android.material.snackbar.BaseTransientBottomBar.Anchor.unanchorIfNoTransientBottomBar()Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.ref.WeakReference\<com.google.android.material.snackbar.BaseTransientBottomBar\>) = (r1 I:com.google.android.material.snackbar.BaseTransientBottomBar$Anchor) com.google.android.material.snackbar.BaseTransientBottomBar.Anchor.transientBottomBar java.lang.ref.WeakReference  (LINE:1506)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ref.WeakReference) type: VIRTUAL call: java.lang.ref.WeakReference.get():java.lang.Object A[MD:():T (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: INVOKE  (r1 I:com.google.android.material.snackbar.BaseTransientBottomBar$Anchor) type: VIRTUAL call: com.google.android.material.snackbar.BaseTransientBottomBar.Anchor.unanchor():void A[MD:():void (m)] (LINE:1507)\l0x000b: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1508)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|RETURN\l|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1510)\l0x000e: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.snackbar.BaseTransientBottomBar.Anchor.unanchorIfNoTransientBottomBar((r1 'this' I:com.google.android.material.snackbar.BaseTransientBottomBar$Anchor A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

