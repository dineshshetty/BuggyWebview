digraph "CFG forcom.google.android.material.chip.Chip.setEllipsize(Landroid\/text\/TextUtils$TruncateAt;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.chip.ChipDrawable) = (r2 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.chipDrawable com.google.android.material.chip.ChipDrawable  (LINE:655)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0005 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:656)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: SGET  (r0 I:android.text.TextUtils$TruncateAt) =  android.text.TextUtils.TruncateAt.MARQUEE android.text.TextUtils$TruncateAt  (LINE:658)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('where' android.text.TextUtils$TruncateAt)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0014 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|0x0009: INVOKE  \l  (r2 I:androidx.appcompat.widget.AppCompatCheckBox)\l  (r3 I:android.text.TextUtils$TruncateAt A[D('where' android.text.TextUtils$TruncateAt)])\l type: SUPER call: androidx.appcompat.widget.AppCompatCheckBox.setEllipsize(android.text.TextUtils$TruncateAt):void A[MD:(android.text.TextUtils$TruncateAt):void (s)] (LINE:661)\l0x000c: IGET  (r0 I:com.google.android.material.chip.ChipDrawable) = (r2 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.chipDrawable com.google.android.material.chip.ChipDrawable  (LINE:662)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:? \l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|0x0010: INVOKE  \l  (r0 I:com.google.android.material.chip.ChipDrawable)\l  (r3 I:android.text.TextUtils$TruncateAt A[D('where' android.text.TextUtils$TruncateAt)])\l type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.setEllipsize(android.text.TextUtils$TruncateAt):void A[MD:(android.text.TextUtils$TruncateAt):void (m)] (LINE:663)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: RETURN    (LINE:665)\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0013: RETURN   A[SYNTHETIC] (LINE:665)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException  (LINE:659)\l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"Text within a chip are not allowed to scroll.\" \l0x0018: INVOKE  (r0 I:java.lang.UnsupportedOperationException), (r1 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|0x001b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.Chip.setEllipsize((r2 'this' I:com.google.android.material.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r3 I:android.text.TextUtils$TruncateAt A[D('where' android.text.TextUtils$TruncateAt), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:24:0x0013 \-\> B:15:?, CROSS_EDGE: B:22:0x000e \-\> B:24:0x0013, CROSS_EDGE: B:26:0x001b \-\> B:15:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001b: r3 'where' Landroid\/text\/TextUtils$TruncateAt;\lMETHOD_OVERRIDE: [ClspMth\{android.widget.TextView.setEllipsize(android.text.TextUtils$TruncateAt):void\}]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_15;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_15;
Node_27 -> Node_15;
Node_25 -> Node_26;
Node_26 -> Node_15;
}

