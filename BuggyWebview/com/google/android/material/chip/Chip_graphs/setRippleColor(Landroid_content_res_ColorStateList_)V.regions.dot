digraph "CFG forcom.google.android.material.chip.Chip.setRippleColor(Landroid\/content\/res\/ColorStateList;)V" {
subgraph cluster_Region_344480677 {
label = "R(3:1|(1:3)|(1:(1:6)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|com.google.android.material.chip.ChipDrawable com.google.android.material.chip.ChipDrawable r0 = r1.chipDrawable\l}"];
subgraph cluster_IfRegion_437538605 {
label = "IF [B:13:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0002|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1315222706 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0004|r0.setRippleColor(r2)\l}"];
}
}
subgraph cluster_Region_1064766048 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1113518767 {
label = "IF [B:16:0x000d] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000d|if (r1.chipDrawable.getUseCompatRipple() == false) goto L6\l}"];
subgraph cluster_Region_1502036585 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000f|updateFrameworkRippleBackground()\l}"];
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0007}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0012|ORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.Chip.setRippleColor((r1v0 'this' com.google.android.material.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r2v0 'rippleColor' android.content.res.ColorStateList A[D('rippleColor' android.content.res.ColorStateList), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x000d \-\> B:18:0x0012, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_16 -> Node_19[style=dashed];
Node_17 -> Node_18;
Node_10 -> Node_12;
Node_15 -> Node_16;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

