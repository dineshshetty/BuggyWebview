digraph "CFG forcom.google.android.material.chip.Chip.onInitializeAccessibilityNodeInfo(Landroid\/view\/accessibility\/AccessibilityNodeInfo;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  \l  (r9 I:androidx.appcompat.widget.AppCompatCheckBox)\l  (r10 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo)])\l type: SUPER call: androidx.appcompat.widget.AppCompatCheckBox.onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo):void A[MD:(android.view.accessibility.AccessibilityNodeInfo):void (s)] (LINE:285)\l0x0003: INVOKE  (r0 I:java.lang.CharSequence) = (r9 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.getAccessibilityClassName():java.lang.CharSequence A[MD:():java.lang.CharSequence (m)] (LINE:286)\l0x0007: INVOKE  \l  (r10 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo)])\l  (r0 I:java.lang.CharSequence)\l type: VIRTUAL call: android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (c)]\l0x000a: INVOKE  (r0 I:boolean) = (r9 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.isCheckable():boolean A[MD:():boolean (m)] (LINE:287)\l0x000e: INVOKE  \l  (r10 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo)])\l  (r0 I:boolean)\l type: VIRTUAL call: android.view.accessibility.AccessibilityNodeInfo.setCheckable(boolean):void A[MD:(boolean):void (c)]\l0x0011: INVOKE  (r0 I:boolean) = (r9 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.isClickable():boolean A[MD:():boolean (s)] (LINE:288)\l0x0015: INVOKE  \l  (r10 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo)])\l  (r0 I:boolean)\l type: VIRTUAL call: android.view.accessibility.AccessibilityNodeInfo.setClickable(boolean):void A[MD:(boolean):void (c)]\l0x0018: INVOKE  (r0 I:android.view.ViewParent) = (r9 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.getParent():android.view.ViewParent A[MD:():android.view.ViewParent (s)] (LINE:290)\l0x001c: INSTANCE_OF  (r0 I:boolean) = (r0 I:??[OBJECT, ARRAY]) com.google.android.material.chip.ChipGroup \l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|0x001e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:? \l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: INVOKE  (r0 I:android.view.ViewParent) = (r9 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.getParent():android.view.ViewParent A[MD:():android.view.ViewParent (s)] (LINE:291)\l0x0024: CHECK_CAST (r0 I:com.google.android.material.chip.ChipGroup) = (com.google.android.material.chip.ChipGroup) (r0 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r1 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat) = (r10 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo)]) type: STATIC call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.wrap(android.view.accessibility.AccessibilityNodeInfo):androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[MD:(android.view.accessibility.AccessibilityNodeInfo):androidx.core.view.accessibility.AccessibilityNodeInfoCompat (m)] (LINE:292)\l0x002a: INVOKE  (r2 I:boolean) = (r0 I:com.google.android.material.chip.ChipGroup A[D('chipGroup' com.google.android.material.chip.ChipGroup)]) type: VIRTUAL call: com.google.android.material.chip.ChipGroup.isSingleLine():boolean A[MD:():boolean (m)] (LINE:294)\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|0x002e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0036 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|0x0030: INVOKE  (r2 I:int) = \l  (r0 I:com.google.android.material.chip.ChipGroup A[D('chipGroup' com.google.android.material.chip.ChipGroup)])\l  (r9 I:android.view.View)\l type: VIRTUAL call: com.google.android.material.chip.ChipGroup.getIndexOfChip(android.view.View):int A[MD:(android.view.View):int (m)]\l0x0034: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0038|0x0039: INVOKE  (r3 I:int) = \l  (r0 I:com.google.android.material.chip.ChipGroup A[D('chipGroup' com.google.android.material.chip.ChipGroup)])\l  (r9 I:android.view.View)\l type: VIRTUAL call: com.google.android.material.chip.ChipGroup.getRowIndex(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:297)\l0x003d: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x003e: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x003f: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0040: INVOKE  (r8 I:boolean) = (r9 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.isChecked():boolean A[MD:():boolean (s)] (LINE:302)\l0x0044: INVOKE  (r2 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat) = (r3 I:int), (r4 I:int), (r5 I:int A[D('columnIndex' int)]), (r6 I:int), (r7 I:boolean), (r8 I:boolean) type: STATIC call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain(int, int, int, int, boolean, boolean):androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat A[MD:(int, int, int, int, boolean, boolean):androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat (m)] (LINE:296)\l0x0048: INVOKE  \l  (r1 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[D('infoCompat' androidx.core.view.accessibility.AccessibilityNodeInfoCompat)])\l  (r2 I:java.lang.Object)\l type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.setCollectionItemInfo(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:295)\l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|RETURN\lORIG_RETURN\l|0x004b: RETURN    (LINE:304)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0037: CONST  (r5 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x004b: RETURN   A[SYNTHETIC] (LINE:304)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.Chip.onInitializeAccessibilityNodeInfo((r9 'this' I:com.google.android.material.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r10 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:18:0x0036 \-\> B:19:0x0038, CROSS_EDGE: B:14:0x001e \-\> B:20:0x004b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x004b: r0 'chipGroup' Lcom\/google\/android\/material\/chip\/ChipGroup;\l  0x002a\-0x004b: r1 'infoCompat' Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat;\l  0x0038\-0x004b: r5 'columnIndex' I\l  \-1 \-0x004b: r10 'info' Landroid\/view\/accessibility\/AccessibilityNodeInfo;\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo):void\}]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_18 -> Node_19;
Node_21 -> Node_12;
}

