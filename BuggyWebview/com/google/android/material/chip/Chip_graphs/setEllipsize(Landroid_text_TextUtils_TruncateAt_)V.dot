digraph "CFG forcom.google.android.material.chip.Chip.setEllipsize(Landroid\/text\/TextUtils$TruncateAt;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0002|if (r2.chipDrawable != null) goto L5\l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005}"];
Node_20 [shape=record,label="{20\:\ 0x0007|if (r3 == android.text.TextUtils.TruncateAt.MARQUEE) goto L12\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|super.setEllipsize(r3)\lcom.google.android.material.chip.ChipDrawable r0 = r2.chipDrawable\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|if (r0 == null) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|r0.setEllipsize(r3)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|RETURN\lORIG_RETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014}"];
Node_26 [shape=record,label="{26\:\ 0x001b|throw new java.lang.UnsupportedOperationException(\"Text within a chip are not allowed to scroll.\")\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.Chip.setEllipsize((r2v0 'this' com.google.android.material.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r3v0 'where' android.text.TextUtils$TruncateAt A[D('where' android.text.TextUtils$TruncateAt), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:24:0x0013 \-\> B:15:?, CROSS_EDGE: B:22:0x000e \-\> B:24:0x0013, CROSS_EDGE: B:26:0x001b \-\> B:15:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.widget.TextView.setEllipsize(android.text.TextUtils$TruncateAt):void\}]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_15;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_15;
Node_27 -> Node_15;
Node_25 -> Node_26;
Node_26 -> Node_15;
}

