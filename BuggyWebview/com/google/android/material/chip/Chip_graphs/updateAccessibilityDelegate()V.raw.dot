digraph "CFG forcom.google.android.material.chip.Chip.updateAccessibilityDelegate()V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r1 I:com.google.android.material.chip.Chip) type: DIRECT call: com.google.android.material.chip.Chip.hasCloseIcon():boolean A[MD:():boolean (m)] (LINE:309)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0019 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r1 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.isCloseIconVisible():boolean A[MD:():boolean (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0019 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: IGET  (r0 I:android.view.View$OnClickListener) = (r1 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.onCloseIconClickListener android.view.View$OnClickListener \l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0019 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: IGET  (r0 I:com.google.android.material.chip.Chip$ChipTouchHelper) = (r1 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.touchHelper com.google.android.material.chip.Chip$ChipTouchHelper  (LINE:310)\l0x0012: INVOKE  (r1 I:android.view.View), (r0 I:androidx.core.view.AccessibilityDelegateCompat) type: STATIC call: androidx.core.view.ViewCompat.setAccessibilityDelegate(android.view.View, androidx.core.view.AccessibilityDelegateCompat):void A[MD:(android.view.View, androidx.core.view.AccessibilityDelegateCompat):void (m)]\l0x0015: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:311)\l0x0016: IPUT  (r0 I:boolean), (r1 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.touchHelperEnabled boolean \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN   A[SYNTHETIC] (LINE:317)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0019|0x0019: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:314)\l0x001a: INVOKE  (r1 I:android.view.View), (r0 I:androidx.core.view.AccessibilityDelegateCompat) type: STATIC call: androidx.core.view.ViewCompat.setAccessibilityDelegate(android.view.View, androidx.core.view.AccessibilityDelegateCompat):void A[MD:(android.view.View, androidx.core.view.AccessibilityDelegateCompat):void (m)]\l0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:315)\l0x001e: IPUT  (r0 I:boolean), (r1 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.touchHelperEnabled boolean \l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN    (LINE:317)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.chip.Chip.updateAccessibilityDelegate((r1 'this' I:com.google.android.material.chip.Chip A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0019 \-\> B:22:0x0020, CROSS_EDGE: B:17:0x000a \-\> B:21:0x0019, CROSS_EDGE: B:15:0x0004 \-\> B:21:0x0019\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

