digraph "CFG forcom.google.android.material.chip.Chip.onRtlPropertiesChanged(I)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r1 I:androidx.appcompat.widget.AppCompatCheckBox), (r2 I:int A[D('layoutDirection' int)]) type: SUPER call: androidx.appcompat.widget.AppCompatCheckBox.onRtlPropertiesChanged(int):void A[MD:(int):void (s)] (LINE:372)\l0x0003: IGET  (r0 I:int) = (r1 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.lastLayoutDirection int  (LINE:376)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('layoutDirection' int)])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: IPUT  (r2 I:int A[D('layoutDirection' int)]), (r1 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.lastLayoutDirection int  (LINE:377)\l0x0009: INVOKE  (r1 I:com.google.android.material.chip.Chip) type: DIRECT call: com.google.android.material.chip.Chip.updatePaddingInternal():void A[MD:():void (m)] (LINE:378)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: RETURN    (LINE:380)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000c: RETURN   A[SYNTHETIC] (LINE:380)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.Chip.onRtlPropertiesChanged((r1 'this' I:com.google.android.material.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('layoutDirection' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0005 \-\> B:12:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 'layoutDirection' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onRtlPropertiesChanged(int):void\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

