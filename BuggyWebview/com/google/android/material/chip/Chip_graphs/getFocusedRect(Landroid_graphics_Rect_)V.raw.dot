digraph "CFG forcom.google.android.material.chip.Chip.getFocusedRect(Landroid\/graphics\/Rect;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r2 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.touchHelperEnabled boolean  (LINE:858)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001d \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IGET  (r0 I:com.google.android.material.chip.Chip$ChipTouchHelper) = (r2 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.touchHelper com.google.android.material.chip.Chip$ChipTouchHelper \l0x0006: INVOKE  (r0 I:int) = (r0 I:com.google.android.material.chip.Chip$ChipTouchHelper) type: VIRTUAL call: com.google.android.material.chip.Chip.ChipTouchHelper.getKeyboardFocusedVirtualViewId():int A[MD:():int (m)] (LINE:859)\l0x000a: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0015 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: IGET  (r0 I:com.google.android.material.chip.Chip$ChipTouchHelper) = (r2 I:com.google.android.material.chip.Chip) com.google.android.material.chip.Chip.touchHelper com.google.android.material.chip.Chip$ChipTouchHelper \l0x000f: INVOKE  (r0 I:int) = (r0 I:com.google.android.material.chip.Chip$ChipTouchHelper) type: VIRTUAL call: com.google.android.material.chip.Chip.ChipTouchHelper.getAccessibilityFocusedVirtualViewId():int A[MD:():int (m)] (LINE:860)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: INVOKE  (r0 I:android.graphics.Rect) = (r2 I:com.google.android.material.chip.Chip) type: DIRECT call: com.google.android.material.chip.Chip.getCloseIconTouchBoundsInt():android.graphics.Rect A[MD:():android.graphics.Rect (m)] (LINE:861)\l0x0019: INVOKE  (r3 I:android.graphics.Rect A[D('r' android.graphics.Rect)]), (r0 I:android.graphics.Rect) type: VIRTUAL call: android.graphics.Rect.set(android.graphics.Rect):void A[MD:(android.graphics.Rect):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN   A[SYNTHETIC] (LINE:865)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|0x001d: INVOKE  (r2 I:androidx.appcompat.widget.AppCompatCheckBox), (r3 I:android.graphics.Rect A[D('r' android.graphics.Rect)]) type: SUPER call: androidx.appcompat.widget.AppCompatCheckBox.getFocusedRect(android.graphics.Rect):void A[MD:(android.graphics.Rect):void (s)] (LINE:863)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN    (LINE:865)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.Chip.getFocusedRect((r2 'this' I:com.google.android.material.chip.Chip A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.Rect A[D('r' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:21:0x001d \-\> B:22:0x0020, CROSS_EDGE: B:17:0x000b \-\> B:20:0x0015, CROSS_EDGE: B:15:0x0002 \-\> B:21:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r3 'r' Landroid\/graphics\/Rect;\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.getFocusedRect(android.graphics.Rect):void\}]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

