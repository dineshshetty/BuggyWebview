digraph "CFG forcom.google.android.material.chip.ChipDrawable.setCheckable(Z)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r3.checkable == r4) goto L14\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|r3.checkable = r4\lfloat r0 = calculateChipIconWidth()\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r4 != false) goto L8\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c}"];
Node_7 [shape=record,label="{7\:\ 0x000e|if (r3.currentChecked == false) goto L8\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|r3.currentChecked = false\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|float r1 = calculateChipIconWidth()\linvalidateSelf()\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|if ((r0 \> r1 ? 1 : (r0 == r1 ? 0 : \-1)) == 0) goto L13\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|onSizeChange()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.ChipDrawable.setCheckable((r3v0 'this' com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r4v0 'checkable' boolean A[D('checkable' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x001c \-\> B:12:0x0021, CROSS_EDGE: B:7:0x000e \-\> B:9:0x0013, CROSS_EDGE: B:5:0x000a \-\> B:9:0x0013, CROSS_EDGE: B:3:0x0002 \-\> B:12:0x0021\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_14 -> Node_1;
Node_13 -> Node_1;
}

