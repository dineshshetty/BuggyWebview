digraph "CFG forcom.google.android.material.chip.ChipDrawable.drawChipStroke(Landroid\/graphics\/Canvas;Landroid\/graphics\/Rect;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:float) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStrokeWidth float  (LINE:663)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:11:? \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:boolean) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.isShapeThemingEnabled boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:? \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IGET  (r0 I:android.graphics.Paint) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipPaint android.graphics.Paint  (LINE:664)\l0x000d: IGET  (r1 I:int) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.currentChipStrokeColor int \l0x000f: INVOKE  (r0 I:android.graphics.Paint), (r1 I:int) type: VIRTUAL call: android.graphics.Paint.setColor(int):void A[MD:(int):void (c)]\l0x0012: IGET  (r0 I:android.graphics.Paint) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipPaint android.graphics.Paint  (LINE:665)\l0x0014: SGET  (r1 I:android.graphics.Paint$Style) =  android.graphics.Paint.Style.STROKE android.graphics.Paint$Style \l0x0016: INVOKE  (r0 I:android.graphics.Paint), (r1 I:android.graphics.Paint$Style) type: VIRTUAL call: android.graphics.Paint.setStyle(android.graphics.Paint$Style):void A[MD:(android.graphics.Paint$Style):void (c)]\l0x0019: IGET  (r0 I:boolean) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.isShapeThemingEnabled boolean  (LINE:666)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0026 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: IGET  (r0 I:android.graphics.Paint) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipPaint android.graphics.Paint  (LINE:667)\l0x001f: INVOKE  (r1 I:android.graphics.ColorFilter) = (r7 I:com.google.android.material.chip.ChipDrawable) type: DIRECT call: com.google.android.material.chip.ChipDrawable.getTintColorFilter():android.graphics.ColorFilter A[MD:():android.graphics.ColorFilter (m)]\l0x0023: INVOKE  (r0 I:android.graphics.Paint), (r1 I:android.graphics.ColorFilter) type: VIRTUAL call: android.graphics.Paint.setColorFilter(android.graphics.ColorFilter):android.graphics.ColorFilter A[MD:(android.graphics.ColorFilter):android.graphics.ColorFilter (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|0x0026: IGET  (r0 I:android.graphics.RectF) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.rectF android.graphics.RectF  (LINE:669)\l0x0028: IGET  (r1 I:int) = (r9 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.left int \l0x002a: CAST (r1 I:float) = (float) (r1 I:int) \l0x002b: IGET  (r2 I:float) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStrokeWidth float \l0x002d: CONST  (r3 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l0x002f: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x0030: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l0x0031: IGET  (r2 I:int) = (r9 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.top int \l0x0033: CAST (r2 I:float) = (float) (r2 I:int) \l0x0034: IGET  (r4 I:float) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStrokeWidth float \l0x0036: ARITH  (r4 I:float) = (r4 I:float) \/ (r3 I:float) \l0x0037: ARITH  (r2 I:float) = (r2 I:float) + (r4 I:float) \l0x0038: IGET  (r4 I:int) = (r9 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.right int \l0x003a: CAST (r4 I:float) = (float) (r4 I:int) \l0x003b: IGET  (r5 I:float) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStrokeWidth float \l0x003d: ARITH  (r5 I:float) = (r5 I:float) \/ (r3 I:float) \l0x003e: ARITH  (r4 I:float) = (r4 I:float) \- (r5 I:float) \l0x003f: IGET  (r5 I:int) = (r9 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.bottom int \l0x0041: CAST (r5 I:float) = (float) (r5 I:int) \l0x0042: IGET  (r6 I:float) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStrokeWidth float \l0x0044: ARITH  (r6 I:float) = (r6 I:float) \/ (r3 I:float) \l0x0045: ARITH  (r5 I:float) = (r5 I:float) \- (r6 I:float) \l0x0046: INVOKE  (r0 I:android.graphics.RectF), (r1 I:float), (r2 I:float), (r4 I:float), (r5 I:float) type: VIRTUAL call: android.graphics.RectF.set(float, float, float, float):void A[MD:(float, float, float, float):void (c)]\l0x0049: IGET  (r0 I:float) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipCornerRadius float  (LINE:676)\l0x004b: IGET  (r1 I:float) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStrokeWidth float \l0x004d: ARITH  (r1 I:float) = (r1 I:float) \/ (r3 I:float) \l0x004e: ARITH  (r0 I:float) = (r0 I:float) \- (r1 I:float) \l0x004f: IGET  (r1 I:android.graphics.RectF) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.rectF android.graphics.RectF  (LINE:677)\l0x0051: IGET  (r2 I:android.graphics.Paint) = (r7 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipPaint android.graphics.Paint \l0x0053: INVOKE  \l  (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l  (r1 I:android.graphics.RectF)\l  (r0 I:float A[D('strokeCornerRadius' float)])\l  (r0 I:float A[D('strokeCornerRadius' float)])\l  (r2 I:android.graphics.Paint)\l type: VIRTUAL call: android.graphics.Canvas.drawRoundRect(android.graphics.RectF, float, float, android.graphics.Paint):void A[MD:(android.graphics.RectF, float, float, android.graphics.Paint):void (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0056|RETURN\lORIG_RETURN\l|0x0056: RETURN    (LINE:679)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|0x0056: RETURN   A[SYNTHETIC] (LINE:679)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|0x0056: RETURN   A[SYNTHETIC] (LINE:679)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.chip.ChipDrawable.drawChipStroke((r7 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r8 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x001b \-\> B:9:0x0026, CROSS_EDGE: B:5:0x0009 \-\> B:10:0x0056, CROSS_EDGE: B:3:0x0005 \-\> B:10:0x0056\lDebug Info:\l  0x004f\-0x0056: r0 'strokeCornerRadius' F\l  \-1 \-0x0056: r8 'canvas' Landroid\/graphics\/Canvas;\l  \-1 \-0x0056: r9 'bounds' Landroid\/graphics\/Rect;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_12 -> Node_1;
Node_11 -> Node_1;
}

