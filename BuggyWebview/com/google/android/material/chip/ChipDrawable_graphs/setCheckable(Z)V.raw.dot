digraph "CFG forcom.google.android.material.chip.ChipDrawable.setCheckable(Z)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.checkable boolean  (LINE:1970)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('checkable' boolean)])  \-\> B:13:? \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IPUT  (r4 I:boolean A[D('checkable' boolean)]), (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.checkable boolean  (LINE:1971)\l0x0006: INVOKE  (r0 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateChipIconWidth():float A[MD:():float (m)] (LINE:1973)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('checkable' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013  (LINE:1974)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IGET  (r1 I:boolean) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.currentChecked boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1975)\l0x0011: IPUT  (r1 I:boolean), (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.currentChecked boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: INVOKE  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateChipIconWidth():float A[MD:():float (m)] (LINE:1977)\l0x0017: INVOKE  (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.invalidateSelf():void A[MD:():void (m)] (LINE:1979)\l0x001a: CMP_L  (r2 I:int) = (r0 I:float A[D('oldChipIconWidth' float)]), (r1 I:float A[D('newChipIconWidth' float)])  (LINE:1980)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: INVOKE  (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.onSizeChange():void A[MD:():void (m)] (LINE:1981)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|RETURN\lORIG_RETURN\l|0x0021: RETURN    (LINE:1984)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN   A[SYNTHETIC] (LINE:1984)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN   A[SYNTHETIC] (LINE:1984)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.ChipDrawable.setCheckable((r3 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[D('checkable' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x001c \-\> B:12:0x0021, CROSS_EDGE: B:7:0x000e \-\> B:9:0x0013, CROSS_EDGE: B:5:0x000a \-\> B:9:0x0013, CROSS_EDGE: B:3:0x0002 \-\> B:12:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0021: r0 'oldChipIconWidth' F\l  0x0017\-0x0021: r1 'newChipIconWidth' F\l  \-1 \-0x0021: r4 'checkable' Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_14 -> Node_1;
Node_13 -> Node_1;
}

