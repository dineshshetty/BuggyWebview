digraph "CFG forcom.google.android.material.chip.ChipDrawable.calculateTextOriginAndAlignment(Landroid\/graphics\/Rect;Landroid\/graphics\/PointF;)Landroid\/graphics\/Paint$Align;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:846)\l0x0001: INVOKE  (r6 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]), (r0 I:float), (r0 I:float) type: VIRTUAL call: android.graphics.PointF.set(float, float):void A[MD:(float, float):void (c)]\l0x0004: SGET  (r0 I:android.graphics.Paint$Align) =  android.graphics.Paint.Align.LEFT android.graphics.Paint$Align  (LINE:847)\l0x0006: IGET  (r1 I:java.lang.CharSequence) = (r4 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.text java.lang.CharSequence  (LINE:849)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0037 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IGET  (r1 I:float) = (r4 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStartPadding float  (LINE:850)\l0x000c: INVOKE  (r2 I:float) = (r4 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateChipIconWidth():float A[MD:():float (m)]\l0x0010: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l0x0011: IGET  (r2 I:float) = (r4 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textStartPadding float \l0x0013: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l0x0014: INVOKE  (r2 I:int) = (r4 I:android.graphics.drawable.Drawable) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.getLayoutDirection(android.graphics.drawable.Drawable):int A[MD:(android.graphics.drawable.Drawable):int (m)] (LINE:852)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x001a|0x001a: IGET  (r2 I:int) = (r5 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:853)\l0x001c: CAST (r2 I:float) = (float) (r2 I:int) \l0x001d: ARITH  (r2 I:float) = (r2 I:float) + (r1 I:float A[D('offsetFromStart' float)]) \l0x001e: IPUT  (r2 I:float), (r6 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]) android.graphics.PointF.x float \l0x0020: SGET  (r0 I:android.graphics.Paint$Align A[D('align' android.graphics.Paint$Align)]) =  android.graphics.Paint.Align.LEFT android.graphics.Paint$Align  (LINE:854)\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: INVOKE  (r2 I:int) = (r5 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.centerY():int A[MD:():int (c)] (LINE:860)\l0x002f: CAST (r2 I:float) = (float) (r2 I:int) \l0x0030: INVOKE  (r3 I:float) = (r4 I:com.google.android.material.chip.ChipDrawable) type: DIRECT call: com.google.android.material.chip.ChipDrawable.calculateTextCenterFromBaseline():float A[MD:():float (m)]\l0x0034: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x0035: IPUT  (r2 I:float), (r6 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]) android.graphics.PointF.y float \l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: IGET  (r2 I:int) = (r5 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.right int  (LINE:856)\l0x0025: CAST (r2 I:float) = (float) (r2 I:int) \l0x0026: ARITH  (r2 I:float) = (r2 I:float) \- (r1 I:float A[D('offsetFromStart' float)]) \l0x0027: IPUT  (r2 I:float), (r6 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]) android.graphics.PointF.x float \l0x0029: SGET  (r0 I:android.graphics.Paint$Align A[D('align' android.graphics.Paint$Align)]) =  android.graphics.Paint.Align.RIGHT android.graphics.Paint$Align  (LINE:857)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|RETURN\l|0x0037: RETURN  (r0 I:android.graphics.Paint$Align A[D('align' android.graphics.Paint$Align)])  (LINE:863)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{android.graphics.Paint$Align com.google.android.material.chip.ChipDrawable.calculateTextOriginAndAlignment((r4 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r5 I:android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.graphics.PointF A[D('pointF' android.graphics.PointF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0023 \-\> B:8:0x002b, CROSS_EDGE: B:3:0x0008 \-\> B:9:0x0037\lDebug Info:\l  0x0014\-0x0037: r1 'offsetFromStart' F\l  0x0006\-0x0037: r0 'align' Landroid\/graphics\/Paint$Align;\l  \-1 \-0x0037: r5 'bounds' Landroid\/graphics\/Rect;\l  \-1 \-0x0037: r6 'pointF' Landroid\/graphics\/PointF;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_7 -> Node_8;
Node_9 -> Node_1;
}

