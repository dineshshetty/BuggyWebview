digraph "CFG forcom.google.android.material.chip.ChipDrawable.onSizeChange()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.ref.WeakReference\<com.google.android.material.chip.ChipDrawable$Delegate\>) = (r1 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.delegate java.lang.ref.WeakReference  (LINE:473)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ref.WeakReference) type: VIRTUAL call: java.lang.ref.WeakReference.get():java.lang.Object A[MD:():T (c)]\l0x0006: CHECK_CAST (r0 I:com.google.android.material.chip.ChipDrawable$Delegate) = (com.google.android.material.chip.ChipDrawable$Delegate) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('delegate' com.google.android.material.chip.ChipDrawable$Delegate)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:?  (LINE:474)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INVOKE  \l  (r0 I:com.google.android.material.chip.ChipDrawable$Delegate A[D('delegate' com.google.android.material.chip.ChipDrawable$Delegate)])\l type: INTERFACE call: com.google.android.material.chip.ChipDrawable.Delegate.onChipDrawableSizeChange():void A[MD:():void (m)] (LINE:475)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: RETURN    (LINE:477)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\l|0x000d: RETURN   A[SYNTHETIC] (LINE:477)\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.chip.ChipDrawable.onSizeChange((r1 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:3:0x0008 \-\> B:5:0x000d\lDebug Info:\l  0x0008\-0x000d: r0 'delegate' Lcom\/google\/android\/material\/chip\/ChipDrawable$Delegate;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

