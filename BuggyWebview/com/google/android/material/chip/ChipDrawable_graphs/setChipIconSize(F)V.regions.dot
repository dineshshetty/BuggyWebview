digraph "CFG forcom.google.android.material.chip.ChipDrawable.setChipIconSize(F)V" {
subgraph cluster_Region_922354743 {
label = "R(1:(1:(2:3|(1:(1:5)))))";
node [shape=record,color=blue];
subgraph cluster_Region_253392746 {
label = "R(1:(2:3|(1:(1:5))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_33527955 {
label = "IF [B:3:0x0004] THEN: R(2:3|(1:(1:5))) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r3.chipIconSize != r4) goto L3\l}"];
subgraph cluster_Region_443729963 {
label = "R(2:3|(1:(1:5)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|float float r0 = calculateChipIconWidth()\lr3.chipIconSize = r4\lfloat float r1 = calculateChipIconWidth()\linvalidateSelf()\l}"];
subgraph cluster_Region_1363288452 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1305520401 {
label = "IF [B:5:0x0015] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r0 != r1) goto L5\l}"];
subgraph cluster_Region_931093543 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0017|onSizeChange()\l}"];
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.ChipDrawable.setChipIconSize((r3v0 'this' com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r4v0 'chipIconSize' float A[D('chipIconSize' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0015 \-\> B:7:0x001a, CROSS_EDGE: B:3:0x0004 \-\> B:7:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_7;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_7 -> Node_1;
Node_9 -> Node_1;
Node_8 -> Node_1;
}

