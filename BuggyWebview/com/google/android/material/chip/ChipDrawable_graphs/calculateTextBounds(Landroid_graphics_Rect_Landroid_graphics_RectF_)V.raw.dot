digraph "CFG forcom.google.android.material.chip.ChipDrawable.calculateTextBounds(Landroid\/graphics\/Rect;Landroid\/graphics\/RectF;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.setEmpty():void A[MD:():void (c)] (LINE:888)\l0x0003: IGET  (r0 I:java.lang.CharSequence) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.text java.lang.CharSequence  (LINE:890)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:? \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStartPadding float  (LINE:891)\l0x0009: INVOKE  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateChipIconWidth():float A[MD:():float (m)]\l0x000d: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x000e: IGET  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textStartPadding float \l0x0010: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0011: IGET  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipEndPadding float  (LINE:892)\l0x0013: INVOKE  (r2 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateCloseIconWidth():float A[MD:():float (m)]\l0x0017: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l0x0018: IGET  (r2 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textEndPadding float \l0x001a: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float) \l0x001b: INVOKE  (r2 I:int) = (r3 I:android.graphics.drawable.Drawable) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.getLayoutDirection(android.graphics.drawable.Drawable):int A[MD:(android.graphics.drawable.Drawable):int (m)] (LINE:894)\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: IGET  (r2 I:int) = (r4 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:895)\l0x0023: CAST (r2 I:float) = (float) (r2 I:int) \l0x0024: ARITH  (r2 I:float) = (r2 I:float) + (r0 I:float A[D('offsetFromStart' float)]) \l0x0025: IPUT  (r2 I:float), (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF)]) android.graphics.RectF.left float \l0x0027: IGET  (r2 I:int) = (r4 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.right int  (LINE:896)\l0x0029: CAST (r2 I:float) = (float) (r2 I:int) \l0x002a: ARITH  (r2 I:float) = (r2 I:float) \- (r1 I:float A[D('offsetFromEnd' float)]) \l0x002b: IPUT  (r2 I:float), (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF)]) android.graphics.RectF.right float \l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IGET  (r2 I:int) = (r4 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.top int  (LINE:904)\l0x003c: CAST (r2 I:float) = (float) (r2 I:int) \l0x003d: IPUT  (r2 I:float), (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF)]) android.graphics.RectF.top float \l0x003f: IGET  (r2 I:int) = (r4 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.bottom int  (LINE:905)\l0x0041: CAST (r2 I:float) = (float) (r2 I:int) \l0x0042: IPUT  (r2 I:float), (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF)]) android.graphics.RectF.bottom float \l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|RETURN\lORIG_RETURN\l|0x0044: RETURN    (LINE:907)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IGET  (r2 I:int) = (r4 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:898)\l0x0030: CAST (r2 I:float) = (float) (r2 I:int) \l0x0031: ARITH  (r2 I:float) = (r2 I:float) + (r1 I:float A[D('offsetFromEnd' float)]) \l0x0032: IPUT  (r2 I:float), (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF)]) android.graphics.RectF.left float \l0x0034: IGET  (r2 I:int) = (r4 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) android.graphics.Rect.right int  (LINE:899)\l0x0036: CAST (r2 I:float) = (float) (r2 I:int) \l0x0037: ARITH  (r2 I:float) = (r2 I:float) \- (r0 I:float A[D('offsetFromStart' float)]) \l0x0038: IPUT  (r2 I:float), (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF)]) android.graphics.RectF.right float \l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|0x0044: RETURN   A[SYNTHETIC] (LINE:907)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.chip.ChipDrawable.calculateTextBounds((r3 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r4 I:android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.RectF A[D('outBounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x002e \-\> B:8:0x003a, CROSS_EDGE: B:3:0x0005 \-\> B:9:0x0044\lDebug Info:\l  0x0011\-0x0044: r0 'offsetFromStart' F\l  0x001b\-0x0044: r1 'offsetFromEnd' F\l  \-1 \-0x0044: r4 'bounds' Landroid\/graphics\/Rect;\l  \-1 \-0x0044: r5 'outBounds' Landroid\/graphics\/RectF;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_7 -> Node_8;
Node_10 -> Node_1;
}

