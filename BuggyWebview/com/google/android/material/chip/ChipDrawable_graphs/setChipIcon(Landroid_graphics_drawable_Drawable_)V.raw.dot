digraph "CFG forcom.google.android.material.chip.ChipDrawable.setChipIcon(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r4 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.getChipIcon():android.graphics.drawable.Drawable A[MD:():android.graphics.drawable.Drawable (m)] (LINE:1726)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldChipIcon' android.graphics.drawable.Drawable)]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('chipIcon' android.graphics.drawable.Drawable)])  \-\> B:15:?  (LINE:1727)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r1 I:float) = (r4 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateChipIconWidth():float A[MD:():float (m)] (LINE:1728)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('chipIcon' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0015  (LINE:1729)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INVOKE  (r2 I:android.graphics.drawable.Drawable) = (r5 I:android.graphics.drawable.Drawable A[D('chipIcon' android.graphics.drawable.Drawable)]) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.wrap(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable A[MD:(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable (m)]\l0x0010: INVOKE  (r2 I:android.graphics.drawable.Drawable) = (r2 I:android.graphics.drawable.Drawable) type: VIRTUAL call: android.graphics.drawable.Drawable.mutate():android.graphics.drawable.Drawable A[MD:():android.graphics.drawable.Drawable (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IPUT  (r2 I:android.graphics.drawable.Drawable), (r4 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipIcon android.graphics.drawable.Drawable \l0x0018: INVOKE  (r2 I:float) = (r4 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateChipIconWidth():float A[MD:():float (m)] (LINE:1730)\l0x001c: INVOKE  \l  (r4 I:com.google.android.material.chip.ChipDrawable)\l  (r0 I:android.graphics.drawable.Drawable A[D('oldChipIcon' android.graphics.drawable.Drawable)])\l type: DIRECT call: com.google.android.material.chip.ChipDrawable.unapplyChildDrawable(android.graphics.drawable.Drawable):void A[MD:(android.graphics.drawable.Drawable):void (m)] (LINE:1732)\l0x001f: INVOKE  (r3 I:boolean) = (r4 I:com.google.android.material.chip.ChipDrawable) type: DIRECT call: com.google.android.material.chip.ChipDrawable.showsChipIcon():boolean A[MD:():boolean (m)] (LINE:1733)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002a \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IGET  (r3 I:android.graphics.drawable.Drawable) = (r4 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipIcon android.graphics.drawable.Drawable  (LINE:1734)\l0x0027: INVOKE  (r4 I:com.google.android.material.chip.ChipDrawable), (r3 I:android.graphics.drawable.Drawable) type: DIRECT call: com.google.android.material.chip.ChipDrawable.applyChildDrawable(android.graphics.drawable.Drawable):void A[MD:(android.graphics.drawable.Drawable):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: INVOKE  (r4 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.invalidateSelf():void A[MD:():void (m)] (LINE:1737)\l0x002d: CMP_L  (r3 I:int) = (r1 I:float A[D('oldChipIconWidth' float)]), (r2 I:float A[D('newChipIconWidth' float)])  (LINE:1738)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|0x002f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:? \l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: INVOKE  (r4 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.onSizeChange():void A[MD:():void (m)] (LINE:1739)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|RETURN\lORIG_RETURN\l|0x0034: RETURN    (LINE:1742)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|0x0034: RETURN   A[SYNTHETIC] (LINE:1742)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0034: RETURN   A[SYNTHETIC] (LINE:1742)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.ChipDrawable.setChipIcon((r4 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r5 I:android.graphics.drawable.Drawable A[D('chipIcon' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x002f \-\> B:14:0x0034, CROSS_EDGE: B:9:0x0023 \-\> B:11:0x002a, CROSS_EDGE: B:7:0x0015 \-\> B:8:0x0016, CROSS_EDGE: B:3:0x0004 \-\> B:14:0x0034\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0034: r1 'oldChipIconWidth' F\l  0x001c\-0x0034: r2 'newChipIconWidth' F\l  0x0004\-0x0034: r0 'oldChipIcon' Landroid\/graphics\/drawable\/Drawable;\l  \-1 \-0x0034: r5 'chipIcon' Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_16 -> Node_1;
Node_7 -> Node_8;
Node_15 -> Node_1;
}

