digraph "CFG forcom.google.android.material.chip.ChipDrawable.calculateCloseIconWidth()F" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:com.google.android.material.chip.ChipDrawable) type: DIRECT call: com.google.android.material.chip.ChipDrawable.showsCloseIcon():boolean A[MD:():boolean (m)] (LINE:578)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:float) = (r2 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.closeIconStartPadding float  (LINE:579)\l0x0008: IGET  (r1 I:float) = (r2 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.closeIconSize float \l0x000a: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x000b: IGET  (r1 I:float) = (r2 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.closeIconEndPadding float \l0x000d: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|RETURN\l|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:581)\l0x0010: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{float com.google.android.material.chip.ChipDrawable.calculateCloseIconWidth((r2 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0010 \-\> B:1:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

