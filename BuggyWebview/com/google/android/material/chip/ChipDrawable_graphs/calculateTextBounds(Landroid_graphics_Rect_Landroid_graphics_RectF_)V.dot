digraph "CFG forcom.google.android.material.chip.ChipDrawable.calculateTextBounds(Landroid\/graphics\/Rect;Landroid\/graphics\/RectF;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r5.setEmpty()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r3.text == null) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|float r0 = (r3.chipStartPadding + calculateChipIconWidth()) + r3.textStartPadding\lfloat r1 = (r3.chipEndPadding + calculateCloseIconWidth()) + r3.textEndPadding\l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|if (androidx.core.graphics.drawable.DrawableCompat.getLayoutDirection(r3) != 0) goto L9\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|r5.left = ((float) r4.left) + r0\lr5.right = ((float) r4.right) \- r1\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|r5.top = (float) r4.top\lr5.bottom = (float) r4.bottom\l}"];
Node_9 [shape=record,label="{9\:\ 0x0044|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|r5.left = ((float) r4.left) + r1\lr5.right = ((float) r4.right) \- r0\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.chip.ChipDrawable.calculateTextBounds((r3v0 'this' com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r4v0 'bounds' android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'outBounds' android.graphics.RectF A[D('outBounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x002e \-\> B:8:0x003a, CROSS_EDGE: B:3:0x0005 \-\> B:9:0x0044\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_7 -> Node_8;
Node_10 -> Node_1;
}

