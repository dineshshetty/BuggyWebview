digraph "CFG forcom.google.android.material.chip.ChipDrawable.setChipIconVisible(Z)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r4.chipIconVisible == r5) goto L15\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|boolean r0 = showsChipIcon()\lr4.chipIconVisible = r5\lboolean r1 = showsChipIcon()\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r0 == r1) goto L14\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|r2 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|PHI: r2 \l  PHI: (r2v1 'changed' boolean) = (r2v0 'changed' boolean), (r2v2 'changed' boolean) binds: [B:7:0x0012, B:6:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L13\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|if (r1 == false) goto L12\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|applyChildDrawable(r4.chipIcon)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|invalidateSelf()\lonSizeChange()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|unapplyChildDrawable(r4.chipIcon)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|r2 = false\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.ChipDrawable.setChipIconVisible((r4v0 'this' com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r5v0 'chipIconVisible' boolean A[D('chipIconVisible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x001d \-\> B:12:0x0022, CROSS_EDGE: B:8:0x0013 \-\> B:13:0x0028, CROSS_EDGE: B:7:0x0012 \-\> B:8:0x0013, CROSS_EDGE: B:3:0x0002 \-\> B:13:0x0028\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_11 -> Node_12;
Node_15 -> Node_1;
Node_7 -> Node_8;
Node_14 -> Node_1;
}

