digraph "CFG forcom.google.android.material.chip.ChipDrawable.getIntrinsicWidth()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipStartPadding float  (LINE:498)\l0x0002: INVOKE  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateChipIconWidth():float A[MD:():float (m)] (LINE:501)\l0x0006: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0007: IGET  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textStartPadding float \l0x0009: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x000a: IGET  (r1 I:com.google.android.material.internal.TextDrawableHelper) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper \l0x000c: INVOKE  (r2 I:java.lang.CharSequence) = (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.getText():java.lang.CharSequence A[MD:():java.lang.CharSequence (m)] (LINE:503)\l0x0010: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0014: INVOKE  (r1 I:float) = (r1 I:com.google.android.material.internal.TextDrawableHelper), (r2 I:java.lang.String) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.getTextWidth(java.lang.String):float A[MD:(java.lang.String):float (m)]\l0x0018: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0019: IGET  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textEndPadding float \l0x001b: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x001c: INVOKE  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateCloseIconWidth():float A[MD:():float (m)] (LINE:505)\l0x0020: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0021: IGET  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipEndPadding float \l0x0023: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0024: INVOKE  (r0 I:int) = (r0 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)] (LINE:499)\l0x0028: IGET  (r1 I:int) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.maxWidth int  (LINE:507)\l0x002a: INVOKE  (r1 I:int) = (r0 I:int A[D('calculatedWidth' int)]), (r1 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x002e|RETURN\l|0x002e: RETURN  (r1 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int com.google.android.material.chip.ChipDrawable.getIntrinsicWidth((r3 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x002e: r0 'calculatedWidth' I\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.getIntrinsicWidth():int\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

