digraph "CFG forcom.google.android.material.chip.ChipDrawable.getCurrentChipIconHeight()F" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.currentChecked boolean  (LINE:561)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IGET  (r0 I:android.graphics.drawable.Drawable) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.checkedIcon android.graphics.drawable.Drawable \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IGET  (r1 I:float) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipIconSize float  (LINE:562)\l0x000b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: CMP_G  (r2 I:int) = (r1 I:float), (r2 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('icon' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0030 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IGET  (r1 I:android.content.Context) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.context android.content.Context  (LINE:563)\l0x0014: CONST  (r2 I:??[int, float, short, byte, char]) = (24 ??[int, float, short, byte, char]) \l0x0016: INVOKE  (r1 I:float) = (r1 I:android.content.Context), (r2 I:int) type: STATIC call: com.google.android.material.internal.ViewUtils.dpToPx(android.content.Context, int):float A[MD:(android.content.Context, int):float (m)]\l0x001a: CAST (r1 I:double) = (double) (r1 I:float) \l0x001b: INVOKE  (r1 I:double) = (r1 I:double) type: STATIC call: java.lang.Math.ceil(double):double A[MD:(double):double (c)]\l0x001f: CAST (r1 I:float) = (float) (r1 I:double) \l0x0020: INVOKE  (r2 I:int) = (r0 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicHeight():int A[MD:():int (c)] (LINE:564)\l0x0024: CAST (r2 I:float) = (float) (r2 I:int) \l0x0025: CMP_G  (r2 I:int) = (r2 I:float), (r1 I:float A[D('maxChipIconHeight' float)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:13:0x002f \l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|0x0029: INVOKE  (r2 I:int) = (r0 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicHeight():int A[MD:():int (c)] (LINE:565)\l0x002d: CAST (r2 I:float) = (float) (r2 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|RETURN\l|0x002e: RETURN  (r2 I:float) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|RETURN\l|0x002f: RETURN  (r1 I:float A[D('maxChipIconHeight' float)])  (LINE:567)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|RETURN\l|0x0030: RETURN  (r1 I:float A[D('maxChipIconHeight' float)])  (LINE:570)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IGET  (r0 I:android.graphics.drawable.Drawable) = (r3 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.chipIcon android.graphics.drawable.Drawable \l}"];
MethodNode[shape=record,label="{private float com.google.android.material.chip.ChipDrawable.getCurrentChipIconHeight((r3 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002f \-\> B:1:?, CROSS_EDGE: B:14:0x0030 \-\> B:1:?, CROSS_EDGE: B:7:0x000e \-\> B:14:0x0030, CROSS_EDGE: B:5:0x0007 \-\> B:6:0x0009\lDebug Info:\l  0x0020\-0x0030: r1 'maxChipIconHeight' F\l  0x0009\-0x0030: r0 'icon' Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_1;
Node_14 -> Node_1;
Node_5 -> Node_6;
}

