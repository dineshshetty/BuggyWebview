digraph "CFG forcom.google.android.material.chip.ChipDrawable.drawText(Landroid\/graphics\/Canvas;Landroid\/graphics\/Rect;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.CharSequence) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.text java.lang.CharSequence  (LINE:725)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:? \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IGET  (r0 I:android.graphics.PointF) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.pointF android.graphics.PointF  (LINE:726)\l0x0006: INVOKE  (r0 I:android.graphics.Paint$Align) = \l  (r11 I:com.google.android.material.chip.ChipDrawable)\l  (r13 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)])\l  (r0 I:android.graphics.PointF)\l type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.calculateTextOriginAndAlignment(android.graphics.Rect, android.graphics.PointF):android.graphics.Paint$Align A[MD:(android.graphics.Rect, android.graphics.PointF):android.graphics.Paint$Align (m)]\l0x000a: IGET  (r1 I:android.graphics.RectF) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.rectF android.graphics.RectF  (LINE:729)\l0x000c: INVOKE  \l  (r11 I:com.google.android.material.chip.ChipDrawable)\l  (r13 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)])\l  (r1 I:android.graphics.RectF)\l type: DIRECT call: com.google.android.material.chip.ChipDrawable.calculateTextBounds(android.graphics.Rect, android.graphics.RectF):void A[MD:(android.graphics.Rect, android.graphics.RectF):void (m)]\l0x000f: IGET  (r1 I:com.google.android.material.internal.TextDrawableHelper) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper  (LINE:731)\l0x0011: INVOKE  (r1 I:com.google.android.material.resources.TextAppearance) = (r1 I:com.google.android.material.internal.TextDrawableHelper) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.getTextAppearance():com.google.android.material.resources.TextAppearance A[MD:():com.google.android.material.resources.TextAppearance (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IGET  (r1 I:com.google.android.material.internal.TextDrawableHelper) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper  (LINE:732)\l0x0019: INVOKE  (r1 I:android.text.TextPaint) = (r1 I:com.google.android.material.internal.TextDrawableHelper) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.getTextPaint():android.text.TextPaint A[MD:():android.text.TextPaint (m)]\l0x001d: INVOKE  (r2 I:int[]) = (r11 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.getState():int[] A[MD:():int[] (m)]\l0x0021: IPUT  (r2 I:int[]), (r1 I:android.text.TextPaint) android.text.TextPaint.drawableState int[] \l0x0023: IGET  (r1 I:com.google.android.material.internal.TextDrawableHelper) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper  (LINE:733)\l0x0025: IGET  (r2 I:android.content.Context) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.context android.content.Context \l0x0027: INVOKE  (r1 I:com.google.android.material.internal.TextDrawableHelper), (r2 I:android.content.Context) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.updateTextPaintDrawState(android.content.Context):void A[MD:(android.content.Context):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: IGET  (r1 I:com.google.android.material.internal.TextDrawableHelper) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper  (LINE:735)\l0x002c: INVOKE  (r1 I:android.text.TextPaint) = (r1 I:com.google.android.material.internal.TextDrawableHelper) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.getTextPaint():android.text.TextPaint A[MD:():android.text.TextPaint (m)]\l0x0030: INVOKE  (r1 I:android.text.TextPaint), (r0 I:android.graphics.Paint$Align A[D('align' android.graphics.Paint$Align)]) type: VIRTUAL call: android.text.TextPaint.setTextAlign(android.graphics.Paint$Align):void A[MD:(android.graphics.Paint$Align):void (c)]\l0x0033: IGET  (r1 I:com.google.android.material.internal.TextDrawableHelper) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper  (LINE:737)\l0x0035: INVOKE  (r2 I:java.lang.CharSequence) = (r11 I:com.google.android.material.chip.ChipDrawable) type: VIRTUAL call: com.google.android.material.chip.ChipDrawable.getText():java.lang.CharSequence A[MD:():java.lang.CharSequence (m)] (LINE:738)\l0x0039: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003d: INVOKE  (r1 I:float) = (r1 I:com.google.android.material.internal.TextDrawableHelper), (r2 I:java.lang.String) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.getTextWidth(java.lang.String):float A[MD:(java.lang.String):float (m)]\l0x0041: INVOKE  (r1 I:int) = (r1 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x0045: IGET  (r2 I:android.graphics.RectF) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.rectF android.graphics.RectF \l0x0047: INVOKE  (r2 I:float) = (r2 I:android.graphics.RectF) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)] (LINE:739)\l0x004b: INVOKE  (r2 I:int) = (r2 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|0x004f: IF  (r1 I:??[int, byte, short, char]) \<= (r2 I:??[int, byte, short, char])  \-\> B:10:0x0053 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|0x0051: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0054|0x0054: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:740)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|0x0055: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clip' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0060  (LINE:741)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|0x0057: INVOKE  (r2 I:int A[D('saveCount' int)]) = (r12 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]) type: VIRTUAL call: android.graphics.Canvas.save():int A[MD:():int (c)] (LINE:742)\l0x005b: IGET  (r3 I:android.graphics.RectF) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.rectF android.graphics.RectF  (LINE:743)\l0x005d: INVOKE  (r12 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]), (r3 I:android.graphics.RectF) type: VIRTUAL call: android.graphics.Canvas.clipRect(android.graphics.RectF):boolean A[MD:(android.graphics.RectF):boolean (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0060|0x0060: IGET  (r3 I:java.lang.CharSequence) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.text java.lang.CharSequence  (LINE:746)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0062|0x0062: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clip' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x007c  (LINE:747)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0064|0x0064: IGET  (r4 I:android.text.TextUtils$TruncateAt) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.truncateAt android.text.TextUtils$TruncateAt \l}"];
Node_17 [shape=record,label="{17\:\ 0x0066|0x0066: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x007c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0068|0x0068: IGET  (r4 I:java.lang.CharSequence) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.text java.lang.CharSequence  (LINE:748)\l0x006a: IGET  (r5 I:com.google.android.material.internal.TextDrawableHelper) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper \l0x006c: INVOKE  (r5 I:android.text.TextPaint) = (r5 I:com.google.android.material.internal.TextDrawableHelper) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.getTextPaint():android.text.TextPaint A[MD:():android.text.TextPaint (m)] (LINE:749)\l0x0070: IGET  (r6 I:android.graphics.RectF) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.rectF android.graphics.RectF \l0x0072: INVOKE  (r6 I:float) = (r6 I:android.graphics.RectF) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)]\l0x0076: IGET  (r7 I:android.text.TextUtils$TruncateAt) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.truncateAt android.text.TextUtils$TruncateAt \l0x0078: INVOKE  (r3 I:java.lang.CharSequence A[D('finalText' java.lang.CharSequence)]) = (r4 I:java.lang.CharSequence), (r5 I:android.text.TextPaint), (r6 I:float), (r7 I:android.text.TextUtils$TruncateAt) type: STATIC call: android.text.TextUtils.ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt):java.lang.CharSequence A[MD:(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt):java.lang.CharSequence (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x007c|0x007c: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:751)\l0x007d: INVOKE  (r7 I:int) = (r3 I:java.lang.CharSequence A[D('finalText' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:752)\l0x0081: IGET  (r4 I:android.graphics.PointF) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.pointF android.graphics.PointF \l0x0083: IGET  (r8 I:float) = (r4 I:android.graphics.PointF) android.graphics.PointF.x float \l0x0085: IGET  (r4 I:android.graphics.PointF) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.pointF android.graphics.PointF \l0x0087: IGET  (r9 I:float) = (r4 I:android.graphics.PointF) android.graphics.PointF.y float \l0x0089: IGET  (r4 I:com.google.android.material.internal.TextDrawableHelper) = (r11 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.textDrawableHelper com.google.android.material.internal.TextDrawableHelper \l0x008b: INVOKE  (r10 I:android.text.TextPaint) = (r4 I:com.google.android.material.internal.TextDrawableHelper) type: VIRTUAL call: com.google.android.material.internal.TextDrawableHelper.getTextPaint():android.text.TextPaint A[MD:():android.text.TextPaint (m)]\l0x008f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)])  (LINE:751)\l0x0090: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('finalText' java.lang.CharSequence)]) \l0x0091: INVOKE  \l  (r4 I:android.graphics.Canvas)\l  (r5 I:java.lang.CharSequence)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:float)\l  (r9 I:float)\l  (r10 I:android.graphics.Paint)\l type: VIRTUAL call: android.graphics.Canvas.drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint):void A[MD:(java.lang.CharSequence, int, int, float, float, android.graphics.Paint):void (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0094|0x0094: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('clip' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:?  (LINE:753)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0096|0x0096: INVOKE  (r12 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]), (r2 I:int A[D('saveCount' int)]) type: VIRTUAL call: android.graphics.Canvas.restoreToCount(int):void A[MD:(int):void (c)] (LINE:754)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0099|RETURN\lORIG_RETURN\l|0x0099: RETURN    (LINE:757)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|0x0099: RETURN   A[SYNTHETIC] (LINE:757)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0053|0x0053: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0099: RETURN   A[SYNTHETIC] (LINE:757)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.chip.ChipDrawable.drawText((r11 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r12 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0094 \-\> B:22:0x0099, CROSS_EDGE: B:17:0x0066 \-\> B:19:0x007c, CROSS_EDGE: B:15:0x0062 \-\> B:19:0x007c, CROSS_EDGE: B:12:0x0055 \-\> B:14:0x0060, CROSS_EDGE: B:10:0x0053 \-\> B:11:0x0054, CROSS_EDGE: B:5:0x0015 \-\> B:7:0x002a, CROSS_EDGE: B:3:0x0002 \-\> B:22:0x0099\lDebug Info:\l  0x000a\-0x0099: r0 'align' Landroid\/graphics\/Paint$Align;\l  0x0054\-0x0099: r1 'clip' Z\l  0x0055\-0x0099: r2 'saveCount' I\l  0x0062\-0x0099: r3 'finalText' Ljava\/lang\/CharSequence;\l  \-1 \-0x0099: r12 'canvas' Landroid\/graphics\/Canvas;\l  \-1 \-0x0099: r13 'bounds' Landroid\/graphics\/Rect;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_23;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_1;
Node_24 -> Node_1;
Node_10 -> Node_11;
Node_23 -> Node_1;
}

