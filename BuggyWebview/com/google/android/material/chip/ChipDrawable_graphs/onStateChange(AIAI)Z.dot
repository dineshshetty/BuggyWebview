digraph "CFG forcom.google.android.material.chip.ChipDrawable.onStateChange([I[I)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|boolean r3 = super.onStateChange(r19)\lr4 = false\landroid.content.res.ColorStateList r5 = r18.chipSurfaceColor\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r5 == null) goto L92\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|int r5 = r5.getColorForState(r19, r18.currentChipSurfaceColor)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|PHI: r5 \l  PHI: (r5v2 'newChipSurfaceColor' int) = (r5v1 'newChipSurfaceColor' int), (r5v5 'newChipSurfaceColor' int) binds: [B:5:0x0016, B:4:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|int r5 = compositeElevationOverlayIfNeeded(r5)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|if (r18.currentChipSurfaceColor == r5) goto L7\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|r18.currentChipSurfaceColor = r5\lr3 = true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|PHI: r3 \l  PHI: (r3v1 'invalidate' boolean) = (r3v0 'invalidate' boolean), (r3v24 'invalidate' boolean) binds: [B:7:0x001e, B:8:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|android.content.res.ColorStateList r7 = r18.chipBackgroundColor\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|if (r7 == null) goto L91\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|int r7 = r7.getColorForState(r19, r18.currentChipBackgroundColor)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|PHI: r7 \l  PHI: (r7v3 'newChipBackgroundColor' int) = (r7v2 'newChipBackgroundColor' int), (r7v5 'newChipBackgroundColor' int) binds: [B:12:0x002e, B:11:0x0027] A[DONT_GENERATE, DONT_INLINE]\l|int r7 = compositeElevationOverlayIfNeeded(r7)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|if (r18.currentChipBackgroundColor == r7) goto L13\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|r18.currentChipBackgroundColor = r7\lr3 = true\l}"];
Node_16 [shape=record,label="{16\:\ 0x003b|PHI: r3 \l  PHI: (r3v2 'invalidate' boolean) = (r3v1 'invalidate' boolean), (r3v23 'invalidate' boolean) binds: [B:14:0x0036, B:15:0x0038] A[DONT_GENERATE, DONT_INLINE]\l|int r8 = com.google.android.material.color.MaterialColors.layer(r5, r7)\lr10 = true\l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|if (r18.currentCompositeSurfaceBackgroundColor == r8) goto L90\l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|r9 = true\l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|PHI: r9 \l  PHI: (r9v2 'shouldUpdate' boolean) = (r9v1 'shouldUpdate' boolean), (r9v4 'shouldUpdate' boolean) binds: [B:19:0x0047, B:18:0x0045] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x004c|if (getFillColor() != null) goto L89\l}"];
Node_22 [shape=record,label="{22\:\ 0x004e|r11 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0051|PHI: r11 \l  PHI: (r11v2 boolean) = (r11v1 boolean), (r11v8 boolean) binds: [B:23:0x0050, B:22:0x004e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0052|if ((r9 \| r11) == false) goto L22\l}"];
Node_26 [shape=record,label="{26\:\ 0x0054|r18.currentCompositeSurfaceBackgroundColor = r8\lsetFillColor(android.content.res.ColorStateList.valueOf(r8))\lr3 = true\l}"];
Node_27 [shape=record,label="{27\:\ 0x005e|PHI: r3 \l  PHI: (r3v3 'invalidate' boolean) = (r3v2 'invalidate' boolean), (r3v22 'invalidate' boolean) binds: [B:25:0x0052, B:26:0x0054] A[DONT_GENERATE, DONT_INLINE]\l|android.content.res.ColorStateList r11 = r18.chipStrokeColor\l}"];
Node_28 [shape=record,label="{28\:\ 0x0060|if (r11 == null) goto L88\l}"];
Node_29 [shape=record,label="{29\:\ 0x0062|int r11 = r11.getColorForState(r19, r18.currentChipStrokeColor)\l}"];
Node_31 [shape=record,label="{31\:\ 0x006a|PHI: r11 \l  PHI: (r11v5 'newChipStrokeColor' int) = (r11v4 'newChipStrokeColor' int), (r11v6 'newChipStrokeColor' int) binds: [B:30:0x0069, B:29:0x0062] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x006d|if (r18.currentChipStrokeColor == r11) goto L28\l}"];
Node_33 [shape=record,label="{33\:\ 0x006f|r18.currentChipStrokeColor = r11\lr3 = true\l}"];
Node_34 [shape=record,label="{34\:\ 0x0072|PHI: r3 \l  PHI: (r3v4 'invalidate' boolean) = (r3v3 'invalidate' boolean), (r3v21 'invalidate' boolean) binds: [B:32:0x006d, B:33:0x006f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0074|if (r18.compatRippleColor == null) goto L87\l}"];
Node_36 [shape=record,label="{36\:\ 0x0076}"];
Node_37 [shape=record,label="{37\:\ 0x007a|if (com.google.android.material.ripple.RippleUtils.shouldDrawRippleCompat(r19) == false) goto L87\l}"];
Node_38 [shape=record,label="{38\:\ 0x007c|int r12 = r18.compatRippleColor.getColorForState(r19, r18.currentCompatRippleColor)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0086|PHI: r12 \l  PHI: (r12v3 'newCompatRippleColor' int) = (r12v2 'newCompatRippleColor' int), (r12v6 'newCompatRippleColor' int) binds: [B:39:0x0085, B:38:0x007c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0089|if (r18.currentCompatRippleColor == r12) goto L38\l}"];
Node_42 [shape=record,label="{42\:\ 0x008b|r18.currentCompatRippleColor = r12\l}"];
Node_43 [shape=record,label="{43\:\ 0x008f|if (r18.useCompatRipple == false) goto L38\l}"];
Node_44 [shape=record,label="{44\:\ 0x0091|r3 = true\l}"];
Node_45 [shape=record,label="{45\:\ 0x0092|PHI: r3 \l  PHI: (r3v5 'invalidate' boolean) = (r3v4 'invalidate' boolean), (r3v4 'invalidate' boolean), (r3v20 'invalidate' boolean) binds: [B:41:0x0089, B:43:0x008f, B:44:0x0091] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0098|if (r18.textDrawableHelper.getTextAppearance() == null) goto L86\l}"];
Node_47 [shape=record,label="{47\:\ 0x009a}"];
Node_48 [shape=record,label="{48\:\ 0x00a4|if (r18.textDrawableHelper.getTextAppearance().getTextColor() == null) goto L86\l}"];
Node_49 [shape=record,label="{49\:\ 0x00a6|int r13 = r18.textDrawableHelper.getTextAppearance().getTextColor().getColorForState(r19, r18.currentTextColor)\l}"];
Node_51 [shape=record,label="{51\:\ 0x00b8|PHI: r13 \l  PHI: (r13v4 'newTextColor' int) = (r13v3 'newTextColor' int), (r13v11 'newTextColor' int) binds: [B:50:0x00b7, B:49:0x00a6] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_52 [shape=record,label="{52\:\ 0x00bb|if (r18.currentTextColor == r13) goto L46\l}"];
Node_53 [shape=record,label="{53\:\ 0x00bd|r18.currentTextColor = r13\lr3 = true\l}"];
Node_54 [shape=record,label="{54\:\ 0x00c0|PHI: r3 \l  PHI: (r3v6 'invalidate' boolean) = (r3v5 'invalidate' boolean), (r3v19 'invalidate' boolean) binds: [B:52:0x00bb, B:53:0x00bd] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_55 [shape=record,label="{55\:\ 0x00cb|if (hasState(getState(), 16842912) == false) goto L85\l}"];
Node_56 [shape=record,label="{56\:\ 0x00cd}"];
Node_57 [shape=record,label="{57\:\ 0x00cf|if (r18.checkable == false) goto L85\l}"];
Node_60 [shape=record,label="{60\:\ 0x00d3|PHI: r10 \l  PHI: (r10v2 'newChecked' boolean) = (r10v1 'newChecked' boolean), (r10v0 'newChecked' boolean) binds: [B:59:0x00d2, B:57:0x00cf] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_61 [shape=record,label="{61\:\ 0x00d5|if (r18.currentChecked == r10) goto L57\l}"];
Node_62 [shape=record,label="{62\:\ 0x00d7}"];
Node_63 [shape=record,label="{63\:\ 0x00d9|if (r18.checkedIcon == null) goto L57\l}"];
Node_64 [shape=record,label="{64\:\ 0x00db|float r14 = calculateChipIconWidth()\lr18.currentChecked = r10\lfloat r15 = calculateChipIconWidth()\lr3 = true\l}"];
Node_65 [shape=record,label="{65\:\ 0x00e8|if ((r14 \> r15 ? 1 : (r14 == r15 ? 0 : \-1)) == 0) goto L57\l}"];
Node_66 [shape=record,label="{66\:\ 0x00ea|r4 = true\l}"];
Node_67 [shape=record,label="{67\:\ 0x00eb|PHI: r3 r4 \l  PHI: (r3v7 'invalidate' boolean) = (r3v6 'invalidate' boolean), (r3v6 'invalidate' boolean), (r3v18 'invalidate' boolean), (r3v18 'invalidate' boolean) binds: [B:61:0x00d5, B:63:0x00d9, B:65:0x00e8, B:66:0x00ea] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'sizeChanged' boolean) = (r4v0 'sizeChanged' boolean), (r4v0 'sizeChanged' boolean), (r4v0 'sizeChanged' boolean), (r4v2 'sizeChanged' boolean) binds: [B:61:0x00d5, B:63:0x00d9, B:65:0x00e8, B:66:0x00ea] A[DONT_GENERATE, DONT_INLINE]\l|android.content.res.ColorStateList r14 = r18.tint\l}"];
Node_68 [shape=record,label="{68\:\ 0x00ed|if (r14 == null) goto L84\l}"];
Node_69 [shape=record,label="{69\:\ 0x00ef|int r14 = r14.getColorForState(r19, r18.currentTint)\l}"];
Node_71 [shape=record,label="{71\:\ 0x00f7|PHI: r14 \l  PHI: (r14v6 'newTint' int) = (r14v5 'newTint' int), (r14v7 'newTint' int) binds: [B:70:0x00f6, B:69:0x00ef] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_72 [shape=record,label="{72\:\ 0x00f9|if (r18.currentTint == r14) goto L63\l}"];
Node_73 [shape=record,label="{73\:\ 0x00fb|r18.currentTint = r14\lr18.tintFilter = com.google.android.material.drawable.DrawableUtils.updateTintFilter(r18, r18.tint, r18.tintMode)\lr3 = true\l}"];
Node_74 [shape=record,label="{74\:\ 0x0108|PHI: r3 \l  PHI: (r3v8 'invalidate' boolean) = (r3v7 'invalidate' boolean), (r3v17 'invalidate' boolean) binds: [B:72:0x00f9, B:73:0x00fb] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_75 [shape=record,label="{75\:\ 0x010e|if (isStateful(r18.chipIcon) == false) goto L66\l}"];
Node_76 [shape=record,label="{76\:\ 0x0110|r3 = r3 \| r18.chipIcon.setState(r19)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0117|PHI: r3 \l  PHI: (r3v9 'invalidate' boolean) = (r3v8 'invalidate' boolean), (r3v16 'invalidate' boolean) binds: [B:75:0x010e, B:76:0x0110] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_78 [shape=record,label="{78\:\ 0x011d|if (isStateful(r18.checkedIcon) == false) goto L69\l}"];
Node_79 [shape=record,label="{79\:\ 0x011f|r3 = r3 \| r18.checkedIcon.setState(r19)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0126|PHI: r3 \l  PHI: (r3v10 'invalidate' boolean) = (r3v9 'invalidate' boolean), (r3v15 'invalidate' boolean) binds: [B:78:0x011d, B:79:0x011f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_81 [shape=record,label="{81\:\ 0x012c|if (isStateful(r18.closeIcon) == false) goto L83\l}"];
Node_82 [shape=record,label="{82\:\ 0x012e|int[] r6 = new int[r19.length + r20.length]\ljava.lang.System.arraycopy(r19, 0, r6, 0, r19.length)\ljava.lang.System.arraycopy(r20, 0, r6, r19.length, r20.length)\lr3 = r3 \| r18.closeIcon.setState(r6)\l}"];
Node_84 [shape=record,label="{84\:\ 0x0149|PHI: r3 \l  PHI: (r3v11 'invalidate' boolean) = (r3v10 'invalidate' boolean), (r3v14 'invalidate' boolean) binds: [B:83:0x0147, B:82:0x012e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_85 [shape=record,label="{85\:\ 0x014b|if (com.google.android.material.ripple.RippleUtils.USE_FRAMEWORK_RIPPLE == false) goto L77\l}"];
Node_86 [shape=record,label="{86\:\ 0x014d}"];
Node_87 [shape=record,label="{87\:\ 0x0153|if (isStateful(r18.closeIconRipple) == false) goto L77\l}"];
Node_88 [shape=record,label="{88\:\ 0x0155|r3 = r3 \| r18.closeIconRipple.setState(r20)\l}"];
Node_89 [shape=record,label="{89\:\ 0x015c|PHI: r3 \l  PHI: (r3v12 'invalidate' boolean) = (r3v11 'invalidate' boolean), (r3v11 'invalidate' boolean), (r3v13 'invalidate' boolean) binds: [B:85:0x014b, B:87:0x0153, B:88:0x0155] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L79\l}"];
Node_90 [shape=record,label="{90\:\ 0x015e|invalidateSelf()\l}"];
Node_91 [shape=record,label="{91\:\ 0x0161|if (r4 == false) goto L81\l}"];
Node_92 [shape=record,label="{92\:\ 0x0163|onSizeChange()\l}"];
Node_93 [shape=record,label="{93\:\ 0x0166|RETURN\l|return r3\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_83 [shape=record,label="{83\:\ 0x0147}"];
Node_70 [shape=record,label="{70\:\ 0x00f6|r14 = 0\l}"];
Node_59 [shape=record,label="{59\:\ 0x00d2|r10 = false\l}"];
Node_50 [shape=record,label="{50\:\ 0x00b7|r13 = 0\l}"];
Node_39 [shape=record,label="{39\:\ 0x0085|r12 = 0\l}"];
Node_30 [shape=record,label="{30\:\ 0x0069|r11 = 0\l}"];
Node_23 [shape=record,label="{23\:\ 0x0050|r11 = false\l}"];
Node_19 [shape=record,label="{19\:\ 0x0047|r9 = false\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|r7 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|r5 = 0\l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.chip.ChipDrawable.onStateChange((r18v0 'this' com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r19v0 'chipState' int[] A[D('chipState' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 'closeIconState' int[] A[D('closeIconState' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:91:0x0161 \-\> B:93:0x0166, CROSS_EDGE: B:89:0x015c \-\> B:91:0x0161, CROSS_EDGE: B:87:0x0153 \-\> B:89:0x015c, CROSS_EDGE: B:85:0x014b \-\> B:89:0x015c, CROSS_EDGE: B:83:0x0147 \-\> B:84:0x0149, CROSS_EDGE: B:78:0x011d \-\> B:80:0x0126, CROSS_EDGE: B:75:0x010e \-\> B:77:0x0117, CROSS_EDGE: B:72:0x00f9 \-\> B:74:0x0108, CROSS_EDGE: B:70:0x00f6 \-\> B:71:0x00f7, CROSS_EDGE: B:65:0x00e8 \-\> B:67:0x00eb, CROSS_EDGE: B:63:0x00d9 \-\> B:67:0x00eb, CROSS_EDGE: B:61:0x00d5 \-\> B:67:0x00eb, CROSS_EDGE: B:57:0x00cf \-\> B:60:0x00d3, CROSS_EDGE: B:55:0x00cb \-\> B:59:0x00d2, CROSS_EDGE: B:52:0x00bb \-\> B:54:0x00c0, CROSS_EDGE: B:50:0x00b7 \-\> B:51:0x00b8, CROSS_EDGE: B:46:0x0098 \-\> B:50:0x00b7, CROSS_EDGE: B:43:0x008f \-\> B:45:0x0092, CROSS_EDGE: B:41:0x0089 \-\> B:45:0x0092, CROSS_EDGE: B:39:0x0085 \-\> B:40:0x0086, CROSS_EDGE: B:35:0x0074 \-\> B:39:0x0085, CROSS_EDGE: B:32:0x006d \-\> B:34:0x0072, CROSS_EDGE: B:30:0x0069 \-\> B:31:0x006a, CROSS_EDGE: B:25:0x0052 \-\> B:27:0x005e, CROSS_EDGE: B:23:0x0050 \-\> B:24:0x0051, CROSS_EDGE: B:19:0x0047 \-\> B:20:0x0048, CROSS_EDGE: B:14:0x0036 \-\> B:16:0x003b, CROSS_EDGE: B:12:0x002e \-\> B:13:0x002f, CROSS_EDGE: B:7:0x001e \-\> B:9:0x0023, CROSS_EDGE: B:5:0x0016 \-\> B:6:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_45;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_50;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_59;
Node_56 -> Node_57;
Node_57 -> Node_59;
Node_57 -> Node_60[style=dashed];
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_67;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_67;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_67;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_70;
Node_69 -> Node_71;
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_74;
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_77;
Node_76 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_83;
Node_82 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_89;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_89;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_91;
Node_90 -> Node_91;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_93;
Node_92 -> Node_93;
Node_93 -> Node_1;
Node_83 -> Node_84;
Node_70 -> Node_71;
Node_59 -> Node_60;
Node_50 -> Node_51;
Node_39 -> Node_40;
Node_30 -> Node_31;
Node_23 -> Node_24;
Node_19 -> Node_20;
Node_12 -> Node_13;
Node_5 -> Node_6;
}

