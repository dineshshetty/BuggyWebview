digraph "CFG forcom.google.android.material.chip.ChipDrawable.onLayoutDirectionChanged(I)Z" {
subgraph cluster_Region_2137803194 {
label = "R(5:1|(1:3)|(1:6)|(1:9)|(2:(2:11|12)|(1:14)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|boolean boolean r0 = super.onLayoutDirectionChanged(r3)\l}"];
subgraph cluster_IfRegion_303530571 {
label = "IF [B:3:0x0008] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (showsChipIcon() != false) goto L3\l}"];
subgraph cluster_Region_1906606247 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|r0 \|= androidx.core.graphics.drawable.DrawableCompat.setLayoutDirection(r2.chipIcon, r3)\l}"];
}
}
subgraph cluster_IfRegion_1639762262 {
label = "IF [B:6:0x0015] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0015|if (showsCheckedIcon() != false) goto L6\l}"];
subgraph cluster_Region_500276102 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0017|r0 \|= androidx.core.graphics.drawable.DrawableCompat.setLayoutDirection(r2.checkedIcon, r3)\l}"];
}
}
subgraph cluster_IfRegion_169510038 {
label = "IF [B:9:0x0022] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0022|if (showsCloseIcon() != false) goto L9\l}"];
subgraph cluster_Region_1775942426 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0024|r0 \|= androidx.core.graphics.drawable.DrawableCompat.setLayoutDirection(r2.closeIcon, r3)\l}"];
}
}
subgraph cluster_Region_287498634 {
label = "R(2:(2:11|12)|(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1813526192 {
label = "IF [B:11:0x002b] THEN: R(2:11|12) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002b|PHI: r0 \l  PHI: (r0v3 'invalidate' boolean) = (r0v2 'invalidate' boolean), (r0v4 'invalidate' boolean) binds: [B:9:0x0022, B:10:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != false) goto L11\l}"];
subgraph cluster_Region_1057569855 {
label = "R(2:11|12)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x002d|invalidateSelf()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|RETURN\lORIG_RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_955823345 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0011|PHI: r0 \l  PHI: (r0v1 'invalidate' boolean) = (r0v0 'invalidate' boolean), (r0v6 'invalidate' boolean) binds: [B:3:0x0008, B:4:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001e|PHI: r0 \l  PHI: (r0v2 'invalidate' boolean) = (r0v1 'invalidate' boolean), (r0v5 'invalidate' boolean) binds: [B:6:0x0015, B:7:0x0017] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.chip.ChipDrawable.onLayoutDirectionChanged((r2v0 'this' com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r3v0 'layoutDirection' int A[D('layoutDirection' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:11:0x002b \-\> B:13:0x0030, CROSS_EDGE: B:9:0x0022 \-\> B:11:0x002b, CROSS_EDGE: B:6:0x0015 \-\> B:8:0x001e, CROSS_EDGE: B:3:0x0008 \-\> B:5:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.onLayoutDirectionChanged(int):boolean\}]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_15[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_15 -> Node_1;
Node_0 -> Node_2;
Node_5 -> Node_6;
Node_8 -> Node_9;
}

