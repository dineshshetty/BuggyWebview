digraph "CFG forcom.google.android.material.chip.ChipDrawable.drawText(Landroid\/graphics\/Canvas;Landroid\/graphics\/Rect;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r11.text == null) goto L24\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|android.graphics.Paint$Align r0 = calculateTextOriginAndAlignment(r13, r11.pointF)\lcalculateTextBounds(r13, r11.rectF)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r11.textDrawableHelper.getTextAppearance() == null) goto L6\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|android.text.TextPaint r1 = r11.textDrawableHelper.getTextPaint()\lr1.drawableState = getState()\lr11.textDrawableHelper.updateTextPaintDrawState(r11.context)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|r11.textDrawableHelper.getTextPaint().setTextAlign(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x004f|if (java.lang.Math.round(r11.textDrawableHelper.getTextWidth(getText().toString())) \<= java.lang.Math.round(r11.rectF.width())) goto L23\l}"];
Node_9 [shape=record,label="{9\:\ 0x0051|r1 = true\l}"];
Node_11 [shape=record,label="{11\:\ 0x0054|PHI: r1 \l  PHI: (r1v9 'clip' boolean) = (r1v8 'clip' boolean), (r1v10 'clip' boolean) binds: [B:10:0x0053, B:9:0x0051] A[DONT_GENERATE, DONT_INLINE]\l|r2 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0055|if (r1 == false) goto L12\l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|int r2 = r12.save()\lr12.clipRect(r11.rectF)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0060|PHI: r2 \l  PHI: (r2v6 'saveCount' int) = (r2v5 'saveCount' int), (r2v7 'saveCount' int) binds: [B:12:0x0055, B:13:0x0057] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.CharSequence r3 = r11.text\l}"];
Node_15 [shape=record,label="{15\:\ 0x0062|if (r1 == false) goto L17\l}"];
Node_16 [shape=record,label="{16\:\ 0x0064}"];
Node_17 [shape=record,label="{17\:\ 0x0066|if (r11.truncateAt == null) goto L17\l}"];
Node_18 [shape=record,label="{18\:\ 0x0068|java.lang.CharSequence r3 = android.text.TextUtils.ellipsize(r11.text, r11.textDrawableHelper.getTextPaint(), r11.rectF.width(), r11.truncateAt)\l}"];
Node_19 [shape=record,label="{19\:\ 0x007c|PHI: r3 \l  PHI: (r3v1 'finalText' java.lang.CharSequence) = (r3v0 'finalText' java.lang.CharSequence), (r3v0 'finalText' java.lang.CharSequence), (r3v2 'finalText' java.lang.CharSequence) binds: [B:15:0x0062, B:17:0x0066, B:18:0x0068] A[DONT_GENERATE, DONT_INLINE]\l|r5 = r3\lr12.drawText(r5, 0, r3.length(), r11.pointF.x, r11.pointF.y, r11.textDrawableHelper.getTextPaint())\l}"];
Node_20 [shape=record,label="{20\:\ 0x0094|if (r1 == false) goto L22\l}"];
Node_21 [shape=record,label="{21\:\ 0x0096|r12.restoreToCount(r2)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0099|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ 0x0053|r1 = false\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.chip.ChipDrawable.drawText((r11v0 'this' com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]), (r12v0 'canvas' android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'bounds' android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0094 \-\> B:22:0x0099, CROSS_EDGE: B:17:0x0066 \-\> B:19:0x007c, CROSS_EDGE: B:15:0x0062 \-\> B:19:0x007c, CROSS_EDGE: B:12:0x0055 \-\> B:14:0x0060, CROSS_EDGE: B:10:0x0053 \-\> B:11:0x0054, CROSS_EDGE: B:5:0x0015 \-\> B:7:0x002a, CROSS_EDGE: B:3:0x0002 \-\> B:22:0x0099\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_23;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_1;
Node_24 -> Node_1;
Node_10 -> Node_11;
Node_23 -> Node_1;
}

