digraph "CFG forcom.google.android.material.chip.ChipDrawable.updateCompatRippleColor()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0001|0x0001: IGET  (r0 I:boolean) = (r1 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.useCompatRipple boolean  (LINE:1360)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:android.content.res.ColorStateList) = (r1 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.rippleColor android.content.res.ColorStateList \l0x0007: INVOKE  (r0 I:android.content.res.ColorStateList) = (r0 I:android.content.res.ColorStateList) type: STATIC call: com.google.android.material.ripple.RippleUtils.sanitizeRippleDrawableColor(android.content.res.ColorStateList):android.content.res.ColorStateList A[MD:(android.content.res.ColorStateList):android.content.res.ColorStateList (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IPUT  (r0 I:android.content.res.ColorStateList), (r1 I:com.google.android.material.chip.ChipDrawable) com.google.android.material.chip.ChipDrawable.compatRippleColor android.content.res.ColorStateList \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN    (LINE:1361)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private void com.google.android.material.chip.ChipDrawable.updateCompatRippleColor((r1 'this' I:com.google.android.material.chip.ChipDrawable A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000c \-\> B:6:0x000d\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
}

