digraph "CFG forcom.google.android.material.chip.ChipGroup.onInitializeAccessibilityNodeInfo(Landroid\/view\/accessibility\/AccessibilityNodeInfo;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  \l  (r5 I:com.google.android.material.internal.FlowLayout)\l  (r6 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo)])\l type: SUPER call: com.google.android.material.internal.FlowLayout.onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo):void A[MD:(android.view.accessibility.AccessibilityNodeInfo):void (s)] (LINE:174)\l0x0003: INVOKE  (r0 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat) = (r6 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo)]) type: STATIC call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.wrap(android.view.accessibility.AccessibilityNodeInfo):androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[MD:(android.view.accessibility.AccessibilityNodeInfo):androidx.core.view.accessibility.AccessibilityNodeInfoCompat (m)] (LINE:175)\l0x0007: INVOKE  (r1 I:boolean) = (r5 I:com.google.android.material.chip.ChipGroup) type: VIRTUAL call: com.google.android.material.chip.ChipGroup.isSingleLine():boolean A[MD:():boolean (m)] (LINE:177)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r1 I:int) = (r5 I:com.google.android.material.chip.ChipGroup) type: DIRECT call: com.google.android.material.chip.ChipGroup.getVisibleChipCount():int A[MD:():int (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0014: INVOKE  (r2 I:int) = (r5 I:com.google.android.material.chip.ChipGroup) type: VIRTUAL call: com.google.android.material.chip.ChipGroup.getRowCount():int A[MD:():int (m)] (LINE:180)\l0x0018: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: INVOKE  (r4 I:boolean) = (r5 I:com.google.android.material.chip.ChipGroup) type: VIRTUAL call: com.google.android.material.chip.ChipGroup.isSingleSelection():boolean A[MD:():boolean (m)] (LINE:183)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:184)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: INVOKE  (r2 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat) = (r2 I:int), (r1 I:int A[D('columnCount' int)]), (r3 I:boolean), (r4 I:int) type: STATIC call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.obtain(int, int, boolean, int):androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat A[MD:(int, int, boolean, int):androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionInfoCompat (m)] (LINE:179)\l0x0026: INVOKE  \l  (r0 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[D('infoCompat' androidx.core.view.accessibility.AccessibilityNodeInfoCompat)])\l  (r2 I:java.lang.Object)\l type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.setCollectionInfo(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:178)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|RETURN\l|0x0029: RETURN    (LINE:186)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:185)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.ChipGroup.onInitializeAccessibilityNodeInfo((r5 'this' I:com.google.android.material.chip.ChipGroup A[IMMUTABLE_TYPE, THIS]), (r6 I:android.view.accessibility.AccessibilityNodeInfo A[D('info' android.view.accessibility.AccessibilityNodeInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:9:0x0021 \-\> B:10:0x0022, CROSS_EDGE: B:5:0x0012 \-\> B:6:0x0013\lDebug Info:\l  0x0007\-0x0029: r0 'infoCompat' Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat;\l  0x0013\-0x0029: r1 'columnCount' I\l  \-1 \-0x0029: r6 'info' Landroid\/view\/accessibility\/AccessibilityNodeInfo;\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

