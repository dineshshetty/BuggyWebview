digraph "CFG forcom.google.android.material.chip.ChipGroup.getVisibleChipCount()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = 0\lr1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|LOOP_START\lLOOP:0: B:3:0x0002\-\>B:10:0x0018\lPHI: r0 r1 \l  PHI: (r0v1 'count' int) = (r0v0 'count' int), (r0v2 'count' int) binds: [B:2:0x0000, B:10:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:2:0x0000, B:10:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|if (r1 \>= getChildCount()) goto L13\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008}"];
Node_6 [shape=record,label="{6\:\ 0x000e|if ((getChildAt(r1) instanceof com.google.android.material.chip.Chip) == false) goto L12\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010}"];
Node_8 [shape=record,label="{8\:\ 0x0014|if (isChildVisible(r1) == false) goto L11\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|int r0 = r0 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0018|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|LOOP_END\lLOOP:0: B:3:0x0002\-\>B:10:0x0018\lPHI: r0 \l  PHI: (r0v2 'count' int) = (r0v1 'count' int), (r0v1 'count' int), (r0v3 'count' int) binds: [B:14:0x0018, B:15:0x0018, B:13:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r1 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private int com.google.android.material.chip.ChipGroup.getVisibleChipCount((r3v0 'this' com.google.android.material.chip.ChipGroup A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:10:0x0018 \-\> B:3:0x0002, CROSS_EDGE: B:8:0x0014 \-\> B:10:0x0018, CROSS_EDGE: B:6:0x000e \-\> B:10:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_13;
Node_13 -> Node_10;
Node_10 -> Node_3;
Node_15 -> Node_10;
Node_14 -> Node_10;
Node_12 -> Node_11;
Node_11 -> Node_1;
}

