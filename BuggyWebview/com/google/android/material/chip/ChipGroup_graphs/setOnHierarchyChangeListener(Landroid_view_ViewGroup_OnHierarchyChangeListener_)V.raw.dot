digraph "CFG forcom.google.android.material.chip.ChipGroup.setOnHierarchyChangeListener(Landroid\/view\/ViewGroup$OnHierarchyChangeListener;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener) = (r1 I:com.google.android.material.chip.ChipGroup) com.google.android.material.chip.ChipGroup.passThroughListener com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener  (LINE:214)\l0x0002: INVOKE  \l  (r0 I:com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener)\l  (r2 I:android.view.ViewGroup$OnHierarchyChangeListener A[D('listener' android.view.ViewGroup$OnHierarchyChangeListener)])\l type: STATIC call: com.google.android.material.chip.ChipGroup.PassThroughHierarchyChangeListener.access$302(com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener, android.view.ViewGroup$OnHierarchyChangeListener):android.view.ViewGroup$OnHierarchyChangeListener A[MD:(com.google.android.material.chip.ChipGroup$PassThroughHierarchyChangeListener, android.view.ViewGroup$OnHierarchyChangeListener):android.view.ViewGroup$OnHierarchyChangeListener (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:215)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.chip.ChipGroup.setOnHierarchyChangeListener((r1 'this' I:com.google.android.material.chip.ChipGroup A[IMMUTABLE_TYPE, THIS]), (r2 I:android.view.ViewGroup$OnHierarchyChangeListener A[D('listener' android.view.ViewGroup$OnHierarchyChangeListener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0005: r2 'listener' Landroid\/view\/ViewGroup$OnHierarchyChangeListener;\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewGroup.setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

