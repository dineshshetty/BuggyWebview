digraph "CFG forcom.google.android.material.animation.ChildrenAlphaProperty.get(Landroid\/view\/ViewGroup;)Ljava\/lang\/Float;" {
subgraph cluster_Region_1904536530 {
label = "R(2:1|(2:(1:3)|(1:6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|java.lang.Float java.lang.Float r0 = (java.lang.Float) r3.getTag(com.google.android.material.C0571R.C0574id.mtrl_internal_children_alpha_tag)\l}"];
subgraph cluster_Region_1893351852 {
label = "R(2:(1:3)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_251321270 {
label = "IF [B:10:0x0008] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0008|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1727036714 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000a|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_2122049571 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0011|RETURN\l|return java.lang.Float.valueOf(1.0f)\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000b}"];
MethodNode[shape=record,label="{public java.lang.Float com.google.android.material.animation.ChildrenAlphaProperty.get((r2v0 'this' com.google.android.material.animation.ChildrenAlphaProperty A[IMMUTABLE_TYPE, THIS]), (r3v0 'object' android.view.ViewGroup A[D('object' android.view.ViewGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lREPLACED_BY: com.google.android.material.animation.ChildrenAlphaProperty.get(android.view.ViewGroup):java.lang.Float\lBRIDGED_BY: com.google.android.material.animation.ChildrenAlphaProperty.get(android.view.ViewGroup):java.lang.Float\lMETHOD_OVERRIDE: [ClspMth\{android.util.Property.get(T):V\}]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
Node_12 -> Node_13;
}

