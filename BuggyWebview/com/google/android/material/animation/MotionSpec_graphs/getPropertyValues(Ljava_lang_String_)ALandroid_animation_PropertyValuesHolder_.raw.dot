digraph "CFG forcom.google.android.material.animation.MotionSpec.getPropertyValues(Ljava\/lang\/String;)[Landroid\/animation\/PropertyValuesHolder;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r1 I:com.google.android.material.animation.MotionSpec), (r2 I:java.lang.String A[D('name' java.lang.String)]) type: VIRTUAL call: com.google.android.material.animation.MotionSpec.hasPropertyValues(java.lang.String):boolean A[MD:(java.lang.String):boolean (m)] (LINE:110)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0013 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: IGET  (r0 I:androidx.collection.SimpleArrayMap\<java.lang.String, android.animation.PropertyValuesHolder[]\>) = (r1 I:com.google.android.material.animation.MotionSpec) com.google.android.material.animation.MotionSpec.propertyValues androidx.collection.SimpleArrayMap  (LINE:113)\l0x0008: INVOKE  (r0 I:java.lang.Object) = (r0 I:androidx.collection.SimpleArrayMap), (r2 I:java.lang.Object A[D('name' java.lang.String)]) type: VIRTUAL call: androidx.collection.SimpleArrayMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (m)]\l0x000c: CHECK_CAST (r0 I:android.animation.PropertyValuesHolder[]) = (android.animation.PropertyValuesHolder[]) (r0 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:android.animation.PropertyValuesHolder[]) = (r1 I:com.google.android.material.animation.MotionSpec), (r0 I:android.animation.PropertyValuesHolder[]) type: DIRECT call: com.google.android.material.animation.MotionSpec.clonePropertyValuesHolder(android.animation.PropertyValuesHolder[]):android.animation.PropertyValuesHolder[] A[MD:(android.animation.PropertyValuesHolder[]):android.animation.PropertyValuesHolder[] (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:android.animation.PropertyValuesHolder[]) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:111)\l0x0015: INVOKE  (r0 I:java.lang.IllegalArgumentException) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>():void A[MD:():void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.animation.PropertyValuesHolder[] com.google.android.material.animation.MotionSpec.getPropertyValues((r1 'this' I:com.google.android.material.animation.MotionSpec A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0018 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0018: r2 'name' Ljava\/lang\/String;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

