digraph "CFG forcom.google.android.material.animation.MotionTiming.apply(Landroid\/animation\/Animator;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:long) = (r2 I:com.google.android.material.animation.MotionTiming) type: VIRTUAL call: com.google.android.material.animation.MotionTiming.getDelay():long A[MD:():long (m)] (LINE:51)\l0x0004: INVOKE  (r3 I:android.animation.Animator A[D('animator' android.animation.Animator)]), (r0 I:long) type: VIRTUAL call: android.animation.Animator.setStartDelay(long):void A[MD:(long):void (c)]\l0x0007: INVOKE  (r0 I:long) = (r2 I:com.google.android.material.animation.MotionTiming) type: VIRTUAL call: com.google.android.material.animation.MotionTiming.getDuration():long A[MD:():long (m)] (LINE:52)\l0x000b: INVOKE  (r3 I:android.animation.Animator A[D('animator' android.animation.Animator)]), (r0 I:long) type: VIRTUAL call: android.animation.Animator.setDuration(long):android.animation.Animator A[MD:(long):android.animation.Animator (c)]\l0x000e: INVOKE  (r0 I:android.animation.TimeInterpolator) = (r2 I:com.google.android.material.animation.MotionTiming) type: VIRTUAL call: com.google.android.material.animation.MotionTiming.getInterpolator():android.animation.TimeInterpolator A[MD:():android.animation.TimeInterpolator (m)] (LINE:53)\l0x0012: INVOKE  \l  (r3 I:android.animation.Animator A[D('animator' android.animation.Animator)])\l  (r0 I:android.animation.TimeInterpolator)\l type: VIRTUAL call: android.animation.Animator.setInterpolator(android.animation.TimeInterpolator):void A[MD:(android.animation.TimeInterpolator):void (c)]\l0x0015: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('animator' android.animation.Animator)]) android.animation.ValueAnimator  (LINE:54)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|0x0017: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|0x0019: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('animator' android.animation.Animator)])  (LINE:55)\l0x001a: CHECK_CAST (r0 I:android.animation.ValueAnimator) = (android.animation.ValueAnimator) (r0 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r1 I:int) = (r2 I:com.google.android.material.animation.MotionTiming) type: VIRTUAL call: com.google.android.material.animation.MotionTiming.getRepeatCount():int A[MD:():int (m)]\l0x0020: INVOKE  (r0 I:android.animation.ValueAnimator), (r1 I:int) type: VIRTUAL call: android.animation.ValueAnimator.setRepeatCount(int):void A[MD:(int):void (c)]\l0x0023: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('animator' android.animation.Animator)])  (LINE:56)\l0x0024: CHECK_CAST (r0 I:android.animation.ValueAnimator) = (android.animation.ValueAnimator) (r0 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r1 I:int) = (r2 I:com.google.android.material.animation.MotionTiming) type: VIRTUAL call: com.google.android.material.animation.MotionTiming.getRepeatMode():int A[MD:():int (m)]\l0x002a: INVOKE  (r0 I:android.animation.ValueAnimator), (r1 I:int) type: VIRTUAL call: android.animation.ValueAnimator.setRepeatMode(int):void A[MD:(int):void (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|RETURN\lORIG_RETURN\l|0x002d: RETURN    (LINE:58)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN   A[SYNTHETIC] (LINE:58)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.animation.MotionTiming.apply((r2 'this' I:com.google.android.material.animation.MotionTiming A[IMMUTABLE_TYPE, THIS]), (r3 I:android.animation.Animator A[D('animator' android.animation.Animator), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0017 \-\> B:12:0x002d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002d: r3 'animator' Landroid\/animation\/Animator;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

