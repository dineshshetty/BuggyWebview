digraph "CFG forcom.google.android.material.animation.AnimatorSetCompat.playTogether(Landroid\/animation\/AnimatorSet;Ljava\/util\/List;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|r0 = 0\lr2 = 0\lint r3 = r10.size()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|LOOP_START\lLOOP:0: B:11:0x0007\-\>B:12:0x0009\lPHI: r0 r2 \l  PHI: (r0v1 'totalDuration' long) = (r0v0 'totalDuration' long), (r0v2 'totalDuration' long) binds: [B:10:0x0000, B:12:0x0009] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v5 'i' int) binds: [B:10:0x0000, B:12:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r3) goto L4\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|LOOP_END\lLOOP:0: B:11:0x0007\-\>B:12:0x0009\l|android.animation.Animator r4 = r10.get(r2)\llong r0 = java.lang.Math.max(r0, r4.getStartDelay() + r4.getDuration())\lint r2 = r2 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|android.animation.ValueAnimator r2 = android.animation.ValueAnimator.ofInt(new int[]\{0, 0\})\lr2.setDuration(r0)\lr10.add(0, r2)\lr9.playTogether(r10)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0033|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static void com.google.android.material.animation.AnimatorSetCompat.playTogether((r9v0 'animatorSet' android.animation.AnimatorSet A[D('animatorSet' android.animation.AnimatorSet), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'items' java.util.List\<android.animation.Animator\> A[D('items' java.util.List\<android.animation.Animator\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0009 \-\> B:11:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/animation\/AnimatorSet;Ljava\/util\/List\<Landroid\/animation\/Animator;\>;)V\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

