digraph "CFG forcom.google.android.material.appbar.AppBarLayout.BaseBehavior.getAppBarChildOnOffset(Lcom\/google\/android\/material\/appbar\/AppBarLayout;I)Landroid\/view\/View;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r6 I:int A[D('offset' int)]) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:2241)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2242)\l0x0005: INVOKE  (r2 I:int) = (r5 I:com.google.android.material.appbar.AppBarLayout A[D('layout' com.google.android.material.appbar.AppBarLayout)]) type: VIRTUAL call: com.google.android.material.appbar.AppBarLayout.getChildCount():int A[MD:():int (s)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|LOOP_START\lLOOP:0: B:19:0x0009\-\>B:25:0x001c\l|0x0009: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('z' int)])  \-\> B:28:0x001f \l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: INVOKE  (r3 I:android.view.View) = \l  (r5 I:com.google.android.material.appbar.AppBarLayout A[D('layout' com.google.android.material.appbar.AppBarLayout)])\l  (r1 I:int A[D('i' int)])\l type: VIRTUAL call: com.google.android.material.appbar.AppBarLayout.getChildAt(int):android.view.View A[MD:(int):android.view.View (s)] (LINE:2243)\l0x000f: INVOKE  (r4 I:int) = (r3 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getTop():int A[MD:():int (c)] (LINE:2244)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|0x0013: IF  (r0 I:??[int, byte, short, char] A[D('absOffset' int)]) \< (r4 I:??[int, byte, short, char])  \-\> B:30:0x001c \l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: INVOKE  (r4 I:int) = (r3 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getBottom():int A[MD:():int (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|0x0019: IF  (r0 I:??[int, byte, short, char] A[D('absOffset' int)]) \> (r4 I:??[int, byte, short, char])  \-\> B:31:0x001c \l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|RETURN\l|0x001b: RETURN  (r3 I:android.view.View A[D('child' android.view.View)])  (LINE:2245)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|LOOP_END\lLOOP:0: B:19:0x0009\-\>B:25:0x001c\l|0x001c: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:2242)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|RETURN\l|0x001f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2248)\l0x0020: RETURN  (r1 I:android.view.View) \l}"];
MethodNode[shape=record,label="{private static android.view.View com.google.android.material.appbar.AppBarLayout.BaseBehavior.getAppBarChildOnOffset((r5 I:com.google.android.material.appbar.AppBarLayout A[D('layout' com.google.android.material.appbar.AppBarLayout), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x001c \-\> B:19:0x0009, CROSS_EDGE: B:21:0x0013 \-\> B:25:0x001c, CROSS_EDGE: B:27:0x0020 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x001c: r3 'child' Landroid\/view\/View;\l  0x0005\-0x001f: r1 'i' I\l  0x0009\-0x001f: r2 'z' I\l  0x0004\-0x0020: r0 'absOffset' I\l  \-1 \-0x0020: r5 'layout' Lcom\/google\/android\/material\/appbar\/AppBarLayout;\l  \-1 \-0x0020: r6 'offset' I\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_30;
Node_22 -> Node_23;
Node_23 -> Node_29[style=dashed];
Node_23 -> Node_31;
Node_29 -> Node_24;
Node_24 -> Node_17;
Node_31 -> Node_25;
Node_25 -> Node_19;
Node_30 -> Node_25;
Node_28 -> Node_26;
Node_26 -> Node_17;
}

