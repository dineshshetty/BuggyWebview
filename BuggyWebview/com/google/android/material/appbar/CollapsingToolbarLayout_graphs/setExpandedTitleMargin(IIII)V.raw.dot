digraph "CFG forcom.google.android.material.appbar.CollapsingToolbarLayout.setExpandedTitleMargin(IIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IPUT  (r1 I:int A[D('start' int)]), (r0 I:com.google.android.material.appbar.CollapsingToolbarLayout) com.google.android.material.appbar.CollapsingToolbarLayout.expandedMarginStart int  (LINE:1273)\l0x0002: IPUT  (r2 I:int A[D('top' int)]), (r0 I:com.google.android.material.appbar.CollapsingToolbarLayout) com.google.android.material.appbar.CollapsingToolbarLayout.expandedMarginTop int  (LINE:1274)\l0x0004: IPUT  (r3 I:int A[D('end' int)]), (r0 I:com.google.android.material.appbar.CollapsingToolbarLayout) com.google.android.material.appbar.CollapsingToolbarLayout.expandedMarginEnd int  (LINE:1275)\l0x0006: IPUT  (r4 I:int A[D('bottom' int)]), (r0 I:com.google.android.material.appbar.CollapsingToolbarLayout) com.google.android.material.appbar.CollapsingToolbarLayout.expandedMarginBottom int  (LINE:1276)\l0x0008: INVOKE  (r0 I:com.google.android.material.appbar.CollapsingToolbarLayout) type: VIRTUAL call: com.google.android.material.appbar.CollapsingToolbarLayout.requestLayout():void A[MD:():void (s)] (LINE:1277)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|RETURN\l|0x000b: RETURN    (LINE:1278)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.appbar.CollapsingToolbarLayout.setExpandedTitleMargin((r0 'this' I:com.google.android.material.appbar.CollapsingToolbarLayout A[IMMUTABLE_TYPE, THIS]), (r1 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000b: r1 'start' I\l  \-1 \-0x000b: r2 'top' I\l  \-1 \-0x000b: r3 'end' I\l  \-1 \-0x000b: r4 'bottom' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

