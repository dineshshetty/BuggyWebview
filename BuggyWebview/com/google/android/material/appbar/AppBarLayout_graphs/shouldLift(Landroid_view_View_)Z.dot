digraph "CFG forcom.google.android.material.appbar.AppBarLayout.shouldLift(Landroid\/view\/View;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|android.view.View r0 = findLiftOnScrollTargetView(r3)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|if (r0 != null) goto L4\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|r0 = r3\l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|PHI: r0 \l  PHI: (r0v1 'scrollingView' android.view.View) = (r0v0 'scrollingView' android.view.View), (r0v2 'scrollingView' android.view.View) binds: [B:17:0x0004, B:18:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L11\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009}"];
Node_21 [shape=record,label="{21\:\ 0x000e|if (r0.canScrollVertically(\-1) != false) goto L9\l}"];
Node_22 [shape=record,label="{22\:\ 0x0010}"];
Node_23 [shape=record,label="{23\:\ 0x0014|if (r0.getScrollY() \<= 0) goto L11\l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|SYNTHETIC\lRETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{boolean com.google.android.material.appbar.AppBarLayout.shouldLift((r2v0 'this' com.google.android.material.appbar.AppBarLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'defaultScrollingView' android.view.View A[D('defaultScrollingView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0018 \-\> B:26:0x0019, CROSS_EDGE: B:21:0x000e \-\> B:24:0x0016, CROSS_EDGE: B:19:0x0007 \-\> B:25:0x0018, CROSS_EDGE: B:17:0x0004 \-\> B:19:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_15;
Node_25 -> Node_15;
}

