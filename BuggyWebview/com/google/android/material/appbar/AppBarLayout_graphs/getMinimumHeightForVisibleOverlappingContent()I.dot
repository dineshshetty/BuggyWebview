digraph "CFG forcom.google.android.material.appbar.AppBarLayout.getMinimumHeightForVisibleOverlappingContent()I" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|int r0 = getTopInset()\lint r1 = androidx.core.view.ViewCompat.getMinimumHeight(r5)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|if (r1 == 0) goto L6\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a}"];
Node_20 [shape=record,label="{20\:\ 0x000d|RETURN\l|return (r1 * 2) + r0\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|int r2 = getChildCount()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0013|if (r2 \< 1) goto L14\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|int r3 = androidx.core.view.ViewCompat.getMinimumHeight(getChildAt(r2 + (\-1)))\l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|PHI: r3 \l  PHI: (r3v2 'lastChildMinHeight' int) = (r3v1 'lastChildMinHeight' int), (r3v5 'lastChildMinHeight' int) binds: [B:24:0x0020, B:23:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == 0) goto L12\l}"];
Node_26 [shape=record,label="{26\:\ 0x0023}"];
Node_27 [shape=record,label="{27\:\ 0x0026|RETURN\l|return (r3 * 2) + r0\l}"];
Node_28 [shape=record,label="{28\:\ 0x0027}"];
Node_29 [shape=record,label="{29\:\ 0x002d|RETURN\l|return getHeight() \/ 3\l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|r3 = 0\l}"];
MethodNode[shape=record,label="{public final int com.google.android.material.appbar.AppBarLayout.getMinimumHeightForVisibleOverlappingContent((r5v0 'this' com.google.android.material.appbar.AppBarLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0026 \-\> B:16:?, CROSS_EDGE: B:29:0x002d \-\> B:16:?, CROSS_EDGE: B:24:0x0020 \-\> B:25:0x0021\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_24 -> Node_25;
}

