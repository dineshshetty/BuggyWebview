digraph "CFG forcom.google.android.material.appbar.AppBarLayout.setLiftableState(Z)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r1 I:com.google.android.material.appbar.AppBarLayout) com.google.android.material.appbar.AppBarLayout.liftable boolean  (LINE:961)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('liftable' boolean)])  \-\> B:14:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IPUT  (r2 I:boolean A[D('liftable' boolean)]), (r1 I:com.google.android.material.appbar.AppBarLayout) com.google.android.material.appbar.AppBarLayout.liftable boolean  (LINE:962)\l0x0006: INVOKE  (r1 I:com.google.android.material.appbar.AppBarLayout) type: VIRTUAL call: com.google.android.material.appbar.AppBarLayout.refreshDrawableState():void A[MD:():void (s)] (LINE:963)\l0x0009: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:964)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|RETURN\l|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:966)\l0x000c: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.appbar.AppBarLayout.setLiftableState((r1 'this' I:com.google.android.material.appbar.AppBarLayout A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[D('liftable' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000c \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 'liftable' Z\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

