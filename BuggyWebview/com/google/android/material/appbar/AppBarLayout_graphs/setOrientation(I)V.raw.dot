digraph "CFG forcom.google.android.material.appbar.AppBarLayout.setOrientation(I)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:628)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0001|0x0001: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('orientation' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0007 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0003|0x0003: INVOKE  (r2 I:android.widget.LinearLayout), (r3 I:int A[D('orientation' int)]) type: SUPER call: android.widget.LinearLayout.setOrientation(int):void A[MD:(int):void (c)] (LINE:632)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|RETURN\l|0x0006: RETURN    (LINE:633)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:629)\l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"AppBarLayout is always vertical and does not support horizontal orientation\" \l0x000b: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|0x000e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.material.appbar.AppBarLayout.setOrientation((r2 'this' I:com.google.android.material.appbar.AppBarLayout A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('orientation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r3 'orientation' I\lMETHOD_OVERRIDE: [ClspMth\{android.widget.LinearLayout.setOrientation(int):void\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

