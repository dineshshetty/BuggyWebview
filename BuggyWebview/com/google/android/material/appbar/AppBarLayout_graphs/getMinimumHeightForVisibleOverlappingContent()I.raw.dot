digraph "CFG forcom.google.android.material.appbar.AppBarLayout.getMinimumHeightForVisibleOverlappingContent()I" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:com.google.android.material.appbar.AppBarLayout) type: VIRTUAL call: com.google.android.material.appbar.AppBarLayout.getTopInset():int A[MD:():int (m)] (LINE:893)\l0x0004: INVOKE  (r1 I:int) = (r5 I:android.view.View) type: STATIC call: androidx.core.view.ViewCompat.getMinimumHeight(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:894)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('minHeight' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000e  (LINE:895)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: ARITH  (r2 I:int) = (r1 I:int A[D('minHeight' int)]) * (2 int)  (LINE:897)\l0x000c: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('topInset' int)]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|RETURN\l|0x000d: RETURN  (r2 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|0x000e: INVOKE  (r2 I:int) = (r5 I:com.google.android.material.appbar.AppBarLayout) type: VIRTUAL call: com.google.android.material.appbar.AppBarLayout.getChildCount():int A[MD:():int (s)] (LINE:901)\l0x0012: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:903)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0013|0x0013: IF  (r2 I:??[int, byte, short, char] A[D('childCount' int)]) \< (r3 I:??[int, byte, short, char])  \-\> B:24:0x0020 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|0x0015: ARITH  (r3 I:int) = (r2 I:int A[D('childCount' int)]) + (\-1 int) \l0x0017: INVOKE  (r3 I:android.view.View) = (r5 I:com.google.android.material.appbar.AppBarLayout), (r3 I:int) type: VIRTUAL call: com.google.android.material.appbar.AppBarLayout.getChildAt(int):android.view.View A[MD:(int):android.view.View (s)]\l0x001b: INVOKE  (r3 I:int) = (r3 I:android.view.View) type: STATIC call: androidx.core.view.ViewCompat.getMinimumHeight(android.view.View):int A[MD:(android.view.View):int (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|0x0021: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastChildMinHeight' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0027  (LINE:904)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0023|0x0023: ARITH  (r4 I:int) = (r3 I:int A[D('lastChildMinHeight' int)]) * (2 int)  (LINE:905)\l0x0025: ARITH  (r4 I:int) = (r4 I:int) + (r0 I:int A[D('topInset' int)]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0026|RETURN\l|0x0026: RETURN  (r4 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0027|0x0027: INVOKE  (r4 I:int) = (r5 I:com.google.android.material.appbar.AppBarLayout) type: VIRTUAL call: com.google.android.material.appbar.AppBarLayout.getHeight():int A[MD:():int (s)] (LINE:910)\l0x002b: ARITH  (r4 I:int) = (r4 I:int) \/ (3 int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x002d|RETURN\l|0x002d: RETURN  (r4 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|0x0020: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final int com.google.android.material.appbar.AppBarLayout.getMinimumHeightForVisibleOverlappingContent((r5 'this' I:com.google.android.material.appbar.AppBarLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0026 \-\> B:16:?, CROSS_EDGE: B:29:0x002d \-\> B:16:?, CROSS_EDGE: B:24:0x0020 \-\> B:25:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x002d: r0 'topInset' I\l  0x0008\-0x002d: r1 'minHeight' I\l  0x0012\-0x002d: r2 'childCount' I\l  0x0021\-0x002d: r3 'lastChildMinHeight' I\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_24 -> Node_25;
}

