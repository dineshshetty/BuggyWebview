digraph "CFG forcom.google.android.material.appbar.ViewOffsetBehavior.setTopAndBottomOffset(I)Z" {
subgraph cluster_Region_43372058 {
label = "R(2:1|(2:(1:4)|(2:6|7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|com.google.android.material.appbar.ViewOffsetHelper com.google.android.material.appbar.ViewOffsetHelper r0 = r1.viewOffsetHelper\l}"];
subgraph cluster_Region_450883696 {
label = "R(2:(1:4)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_426390860 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_86624349 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|return r0.setTopAndBottomOffset(r2)\l}"];
}
}
subgraph cluster_Region_20289277 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0009|r1.tempTopBottomOffset = r2\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|RETURN\l|return false\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.appbar.ViewOffsetBehavior.setTopAndBottomOffset((r1v0 'this' com.google.android.material.appbar.ViewOffsetBehavior\<V extends android.view.View\> A[D('this' com.google.android.material.appbar.ViewOffsetBehavior\<V extends android.view.View\>), IMMUTABLE_TYPE, THIS]), (r2v0 'offset' int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000c \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends android.view.View]\lMETHOD_OVERRIDE: [com.google.android.material.appbar.ViewOffsetBehavior.setTopAndBottomOffset(int):boolean]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
}

