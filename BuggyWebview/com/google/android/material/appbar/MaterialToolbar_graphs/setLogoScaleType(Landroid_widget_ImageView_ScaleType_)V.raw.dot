digraph "CFG forcom.google.android.material.appbar.MaterialToolbar.setLogoScaleType(Landroid\/widget\/ImageView$ScaleType;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:android.widget.ImageView$ScaleType) = (r1 I:com.google.android.material.appbar.MaterialToolbar) com.google.android.material.appbar.MaterialToolbar.logoScaleType android.widget.ImageView$ScaleType  (LINE:232)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('logoScaleType' android.widget.ImageView$ScaleType)])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IPUT  \l  (r2 I:android.widget.ImageView$ScaleType A[D('logoScaleType' android.widget.ImageView$ScaleType)])\l  (r1 I:com.google.android.material.appbar.MaterialToolbar)\l com.google.android.material.appbar.MaterialToolbar.logoScaleType android.widget.ImageView$ScaleType  (LINE:233)\l0x0006: INVOKE  (r1 I:com.google.android.material.appbar.MaterialToolbar) type: VIRTUAL call: com.google.android.material.appbar.MaterialToolbar.requestLayout():void A[MD:():void (s)] (LINE:234)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|RETURN\lORIG_RETURN\l|0x0009: RETURN    (LINE:236)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0009: RETURN   A[SYNTHETIC] (LINE:236)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.appbar.MaterialToolbar.setLogoScaleType((r1 'this' I:com.google.android.material.appbar.MaterialToolbar A[IMMUTABLE_TYPE, THIS]), (r2 I:android.widget.ImageView$ScaleType A[D('logoScaleType' android.widget.ImageView$ScaleType), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0009: r2 'logoScaleType' Landroid\/widget\/ImageView$ScaleType;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

