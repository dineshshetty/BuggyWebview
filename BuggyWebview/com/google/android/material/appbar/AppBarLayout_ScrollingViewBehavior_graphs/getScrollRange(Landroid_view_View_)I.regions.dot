digraph "CFG forcom.google.android.material.appbar.AppBarLayout.ScrollingViewBehavior.getScrollRange(Landroid\/view\/View;)I" {
subgraph cluster_Region_1542355896 {
label = "R(1:(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_64938306 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1175508512 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if ((r2 instanceof com.google.android.material.appbar.AppBarLayout) != false) goto L3\l}"];
subgraph cluster_Region_130647529 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|return ((com.google.android.material.appbar.AppBarLayout) r2).getTotalScrollRange()\l}"];
}
}
subgraph cluster_Region_793906451 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0010|RETURN\l|return super.getScrollRange(r2)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000c}"];
MethodNode[shape=record,label="{public int com.google.android.material.appbar.AppBarLayout.ScrollingViewBehavior.getScrollRange((r1v0 'this' com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior A[IMMUTABLE_TYPE, THIS]), (r2v0 'v' android.view.View A[D('v' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0010 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l INFO: \l \-\> Access modifiers changed from: package\-private\}\lMETHOD_OVERRIDE: [com.google.android.material.appbar.HeaderScrollingViewBehavior.getScrollRange(android.view.View):int]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

