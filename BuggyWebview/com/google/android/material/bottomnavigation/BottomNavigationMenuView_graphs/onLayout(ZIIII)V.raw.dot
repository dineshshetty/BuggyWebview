digraph "CFG forcom.google.android.material.bottomnavigation.BottomNavigationMenuView.onLayout(ZIIII)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r9 I:com.google.android.material.bottomnavigation.BottomNavigationMenuView) type: VIRTUAL call: com.google.android.material.bottomnavigation.BottomNavigationMenuView.getChildCount():int A[MD:():int (s)] (LINE:152)\l0x0004: ARITH  (r1 I:int) = (r13 I:int A[D('right' int)]) \- (r11 I:int A[D('left' int)])  (LINE:153)\l0x0006: ARITH  (r2 I:int) = (r14 I:int A[D('bottom' int)]) \- (r12 I:int A[D('top' int)])  (LINE:154)\l0x0008: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:155)\l0x0009: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:156)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|LOOP_START\lLOOP:0: B:20:0x000a\-\>B:29:0x003b\l|0x000a: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:31:0x003e \l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|0x000c: INVOKE  (r5 I:android.view.View) = (r9 I:com.google.android.material.bottomnavigation.BottomNavigationMenuView), (r4 I:int A[D('i' int)]) type: VIRTUAL call: com.google.android.material.bottomnavigation.BottomNavigationMenuView.getChildAt(int):android.view.View A[MD:(int):android.view.View (s)] (LINE:157)\l0x0010: INVOKE  (r6 I:int) = (r5 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getVisibility():int A[MD:():int (c)] (LINE:158)\l0x0014: CONST  (r7 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0019 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: INVOKE  (r6 I:int) = (r9 I:android.view.View) type: STATIC call: androidx.core.view.ViewCompat.getLayoutDirection(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:161)\l0x001d: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|0x001f: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x002e \l}"];
Node_26 [shape=record,label="{26\:\ 0x0021|0x0021: ARITH  (r6 I:int) = (r1 I:int A[D('width' int)]) \- (r3 I:int A[D('used' int)])  (LINE:162)\l0x0023: INVOKE  (r8 I:int) = (r5 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredWidth():int A[MD:():int (c)]\l0x0027: ARITH  (r6 I:int) = (r6 I:int) \- (r8 I:int) \l0x0028: ARITH  (r8 I:int) = (r1 I:int A[D('width' int)]) \- (r3 I:int A[D('used' int)]) \l0x002a: INVOKE  \l  (r5 I:android.view.View A[D('child' android.view.View)])\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l  (r2 I:int A[D('height' int)])\l type: VIRTUAL call: android.view.View.layout(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0036|0x0036: INVOKE  (r6 I:int) = (r5 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredWidth():int A[MD:():int (c)] (LINE:166)\l0x003a: ARITH  (r3 I:int) = (r3 I:int A[D('used' int)]) + (r6 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x003b|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x003b|LOOP_END\lLOOP:0: B:20:0x000a\-\>B:29:0x003b\l|0x003b: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:156)\l}"];
Node_27 [shape=record,label="{27\:\ 0x002e|0x002e: INVOKE  (r6 I:int) = (r5 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredWidth():int A[MD:():int (c)] (LINE:164)\l0x0032: ARITH  (r6 I:int) = (r6 I:int) + (r3 I:int A[D('used' int)]) \l0x0033: INVOKE  \l  (r5 I:android.view.View A[D('child' android.view.View)])\l  (r3 I:int A[D('used' int)])\l  (r7 I:int)\l  (r6 I:int)\l  (r2 I:int A[D('height' int)])\l type: VIRTUAL call: android.view.View.layout(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x003b|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x003e|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x003e|RETURN\l|0x003e: RETURN    (LINE:168)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.bottomnavigation.BottomNavigationMenuView.onLayout((r9 'this' I:com.google.android.material.bottomnavigation.BottomNavigationMenuView A[IMMUTABLE_TYPE, THIS]), (r10 I:boolean A[D('changed' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:29:0x003b \-\> B:20:0x000a, CROSS_EDGE: B:27:0x002e \-\> B:28:0x0036, CROSS_EDGE: B:22:0x0016 \-\> B:29:0x003b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x003b: r5 'child' Landroid\/view\/View;\l  0x000a\-0x003e: r4 'i' I\l  0x0004\-0x003e: r0 'count' I\l  0x0006\-0x003e: r1 'width' I\l  0x0008\-0x003e: r2 'height' I\l  0x0009\-0x003e: r3 'used' I\l  \-1 \-0x003e: r10 'changed' Z\l  \-1 \-0x003e: r11 'left' I\l  \-1 \-0x003e: r12 'top' I\l  \-1 \-0x003e: r13 'right' I\l  \-1 \-0x003e: r14 'bottom' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onLayout(boolean, int, int, int, int):void\}]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_33[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_32;
Node_32 -> Node_29;
Node_29 -> Node_20;
Node_27 -> Node_28;
Node_33 -> Node_29;
Node_31 -> Node_30;
Node_30 -> Node_18;
}

