digraph "CFG forcom.google.android.material.navigation.NavigationBarItemView.ActiveIndicatorTransform.calculateAlpha(FF)F" {
subgraph cluster_Region_749672999 {
label = "R(3:2|5|8)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0003|float r1 = r6 == 0.0f ? 0.8f : 0.0f\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|float r3 = r6 == 0.0f ? 1.0f : 0.2f\l}"];
Node_23 [shape=record,label="{23\:\ 0x001a|RETURN\l|return com.google.android.material.animation.AnimationUtils.lerp(0.0f, 1.0f, r1, r3, r5)\l}"];
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0000}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0005}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000a|PHI: r1 \l  PHI: (r1v2 'startAlphaFraction' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0010}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0016|PHI: r3 \l  PHI: (r3v2 'endAlphaFraction' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0013}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0009}"];
MethodNode[shape=record,label="{protected float com.google.android.material.navigation.NavigationBarItemView.ActiveIndicatorTransform.calculateAlpha((r4v0 'this' com.google.android.material.navigation.NavigationBarItemView$ActiveIndicatorTransform A[IMMUTABLE_TYPE, THIS]), (r5v0 'progress' float A[D('progress' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'targetValue' float A[D('targetValue' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0013 \-\> B:22:0x0016, CROSS_EDGE: B:17:0x0009 \-\> B:18:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_15 -> Node_16;
Node_15 -> Node_17;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_23 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

