digraph "CFG forcom.google.android.material.navigation.NavigationBarView.createMaterialShapeDrawableBackground(Landroid\/content\/Context;)Lcom\/google\/android\/material\/shape\/MaterialShapeDrawable;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:com.google.android.material.shape.MaterialShapeDrawable) =  com.google.android.material.shape.MaterialShapeDrawable  (LINE:301)\l0x0002: INVOKE  (r0 I:com.google.android.material.shape.MaterialShapeDrawable) type: DIRECT call: com.google.android.material.shape.MaterialShapeDrawable.\<init\>():void A[MD:():void (m)]\l0x0005: INVOKE  (r1 I:android.graphics.drawable.Drawable) = (r3 I:com.google.android.material.navigation.NavigationBarView) type: VIRTUAL call: com.google.android.material.navigation.NavigationBarView.getBackground():android.graphics.drawable.Drawable A[MD:():android.graphics.drawable.Drawable (s)] (LINE:302)\l0x0009: INSTANCE_OF  (r2 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('originalBackground' android.graphics.drawable.Drawable)]) android.graphics.drawable.ColorDrawable  (LINE:303)\l}"];
Node_10 [shape=record,label="{10\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|0x000d: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('originalBackground' android.graphics.drawable.Drawable)])  (LINE:304)\l0x000e: CHECK_CAST (r2 I:android.graphics.drawable.ColorDrawable) = (android.graphics.drawable.ColorDrawable) (r2 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r2 I:int) = (r2 I:android.graphics.drawable.ColorDrawable) type: VIRTUAL call: android.graphics.drawable.ColorDrawable.getColor():int A[MD:():int (c)] (LINE:305)\l0x0014: INVOKE  (r2 I:android.content.res.ColorStateList) = (r2 I:int) type: STATIC call: android.content.res.ColorStateList.valueOf(int):android.content.res.ColorStateList A[MD:(int):android.content.res.ColorStateList (c)]\l0x0018: INVOKE  \l  (r0 I:com.google.android.material.shape.MaterialShapeDrawable A[D('materialShapeDrawable' com.google.android.material.shape.MaterialShapeDrawable)])\l  (r2 I:android.content.res.ColorStateList)\l type: VIRTUAL call: com.google.android.material.shape.MaterialShapeDrawable.setFillColor(android.content.res.ColorStateList):void A[MD:(android.content.res.ColorStateList):void (m)] (LINE:304)\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: INVOKE  \l  (r0 I:com.google.android.material.shape.MaterialShapeDrawable A[D('materialShapeDrawable' com.google.android.material.shape.MaterialShapeDrawable)])\l  (r4 I:android.content.Context A[D('context' android.content.Context)])\l type: VIRTUAL call: com.google.android.material.shape.MaterialShapeDrawable.initializeElevationOverlay(android.content.Context):void A[MD:(android.content.Context):void (m)] (LINE:307)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|RETURN\l|0x001e: RETURN  \l  (r0 I:com.google.android.material.shape.MaterialShapeDrawable A[D('materialShapeDrawable' com.google.android.material.shape.MaterialShapeDrawable)])\l  (LINE:308)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private com.google.android.material.shape.MaterialShapeDrawable com.google.android.material.navigation.NavigationBarView.createMaterialShapeDrawableBackground((r3 'this' I:com.google.android.material.navigation.NavigationBarView A[IMMUTABLE_TYPE, THIS]), (r4 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000b \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x001e: r0 'materialShapeDrawable' Lcom\/google\/android\/material\/shape\/MaterialShapeDrawable;\l  0x0009\-0x001e: r1 'originalBackground' Landroid\/graphics\/drawable\/Drawable;\l  \-1 \-0x001e: r4 'context' Landroid\/content\/Context;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

