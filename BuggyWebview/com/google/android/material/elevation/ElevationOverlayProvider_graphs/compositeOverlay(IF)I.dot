digraph "CFG forcom.google.android.material.elevation.ElevationOverlayProvider.compositeOverlay(IF)I" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|float r0 = calculateOverlayAlphaFraction(r8)\lint r1 = android.graphics.Color.alpha(r7)\lint r2 = androidx.core.graphics.ColorUtils.setAlphaComponent(r7, 255)\lint r3 = com.google.android.material.color.MaterialColors.layer(r2, r6.elevationOverlayColor, r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|if ((r0 \> 0.0f ? 1 : (r0 == 0.0f ? 0 : \-1)) \<= 0) goto L6\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|int r4 = r6.elevationOverlayAccentColor\l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|if (r4 == 0) goto L6\l}"];
Node_15 [shape=record,label="{15\:\ 0x001d|int r4 = androidx.core.graphics.ColorUtils.setAlphaComponent(r4, com.google.android.material.elevation.ElevationOverlayProvider.OVERLAY_ACCENT_COLOR_ALPHA)\lint r3 = com.google.android.material.color.MaterialColors.layer(r3, r4)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|PHI: r3 \l  PHI: (r3v2 'overlayColorOpaque' int) = (r3v1 'overlayColorOpaque' int), (r3v1 'overlayColorOpaque' int), (r3v3 'overlayColorOpaque' int) binds: [B:12:0x0017, B:14:0x001b, B:15:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = androidx.core.graphics.ColorUtils.setAlphaComponent(r3, r1)\l}"];
Node_17 [shape=record,label="{17\:\ 0x002b|RETURN\l|return r4\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int com.google.android.material.elevation.ElevationOverlayProvider.compositeOverlay((r6v0 'this' com.google.android.material.elevation.ElevationOverlayProvider A[IMMUTABLE_TYPE, THIS]), (r7v0 'backgroundColor' int A[D('backgroundColor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'elevation' float A[D('elevation' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x001b \-\> B:16:0x0027, CROSS_EDGE: B:12:0x0017 \-\> B:16:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

