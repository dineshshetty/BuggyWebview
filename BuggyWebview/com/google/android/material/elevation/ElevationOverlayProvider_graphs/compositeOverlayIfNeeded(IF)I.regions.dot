digraph "CFG forcom.google.android.material.elevation.ElevationOverlayProvider.compositeOverlayIfNeeded(IF)I" {
subgraph cluster_Region_652690596 {
label = "R(1:(2:(1:6)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_675767679 {
label = "R(2:(1:6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_701737569 {
label = "IF [B:12:0x0002, B:14:0x0008] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0002|if (r1.elevationOverlayEnabled != false) goto L3\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|ADDED_TO_REGION\l|if (isThemeSurfaceColor(r2) != false) goto L5\l}"];
subgraph cluster_Region_475013122 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000e|RETURN\l|return compositeOverlay(r2, r3)\l}"];
}
}
subgraph cluster_Region_9344328 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000f|RETURN\l|return r2\l}"];
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0004}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000a}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int com.google.android.material.elevation.ElevationOverlayProvider.compositeOverlayIfNeeded((r1v0 'this' com.google.android.material.elevation.ElevationOverlayProvider A[IMMUTABLE_TYPE, THIS]), (r2v0 'backgroundColor' int A[D('backgroundColor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'elevation' float A[D('elevation' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000f \-\> B:10:?, CROSS_EDGE: B:12:0x0002 \-\> B:17:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_12 -> Node_13;
Node_12 -> Node_17[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_10;
Node_17 -> Node_10;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_15 -> Node_16;
}

