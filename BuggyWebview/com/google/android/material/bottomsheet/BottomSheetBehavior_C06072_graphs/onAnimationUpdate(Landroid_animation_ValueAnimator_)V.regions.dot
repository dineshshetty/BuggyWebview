digraph "CFG forcom.google.android.material.bottomsheet.BottomSheetBehavior.2.onAnimationUpdate(Landroid\/animation\/ValueAnimator;)V" {
subgraph cluster_Region_1000804833 {
label = "R(2:1|(1:(1:3)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|float float r0 = ((java.lang.Float) r3.getAnimatedValue()).floatValue()\l}"];
subgraph cluster_Region_1170836831 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1955534488 {
label = "IF [B:10:0x0010] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0010|if (com.google.android.material.bottomsheet.BottomSheetBehavior.this.materialShapeDrawable != null) goto L3\l}"];
subgraph cluster_Region_630084573 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0012|com.google.android.material.bottomsheet.BottomSheetBehavior.this.materialShapeDrawable.setInterpolation(r0)\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001b|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.bottomsheet.BottomSheetBehavior.2.onAnimationUpdate((r2v0 'this' com.google.android.material.bottomsheet.BottomSheetBehavior$2 A[D('this' com.google.android.material.bottomsheet.BottomSheetBehavior$2), IMMUTABLE_TYPE, THIS]), (r3v0 'animation' android.animation.ValueAnimator A[D('animation' android.animation.ValueAnimator), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0010 \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends android.view.View]\lMETHOD_OVERRIDE: [ClspMth\{android.animation.ValueAnimator.AnimatorUpdateListener.onAnimationUpdate(android.animation.ValueAnimator):void\}]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

