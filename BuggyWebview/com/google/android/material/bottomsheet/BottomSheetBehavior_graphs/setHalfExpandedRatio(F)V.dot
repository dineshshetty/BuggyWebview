digraph "CFG forcom.google.android.material.bottomsheet.BottomSheetBehavior.setHalfExpandedRatio(F)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0003|if ((r3 \> 0.0f ? 1 : (r3 == 0.0f ? 0 : \-1)) \<= 0) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005}"];
Node_18 [shape=record,label="{18\:\ 0x0009|if ((r3 \> 1.0f ? 1 : (r3 == 1.0f ? 0 : \-1)) \>= 0) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|r2.halfExpandedRatio = r3\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|if (r2.viewRef == null) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|calculateHalfExpandedOffset()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|RETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015}"];
Node_24 [shape=record,label="{24\:\ 0x001c|throw new java.lang.IllegalArgumentException(\"ratio must be a float value between 0 and 1\")\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.bottomsheet.BottomSheetBehavior.setHalfExpandedRatio((r2v0 'this' com.google.android.material.bottomsheet.BottomSheetBehavior\<V extends android.view.View\> A[D('this' com.google.android.material.bottomsheet.BottomSheetBehavior\<V extends android.view.View\>), IMMUTABLE_TYPE, THIS]), (r3v0 'ratio' float A[D('ratio' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x000f \-\> B:22:0x0014, CROSS_EDGE: B:24:0x001c \-\> B:14:?, CROSS_EDGE: B:16:0x0003 \-\> B:23:0x0015\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends android.view.View]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_14;
Node_25 -> Node_14;
Node_23 -> Node_24;
Node_24 -> Node_14;
}

