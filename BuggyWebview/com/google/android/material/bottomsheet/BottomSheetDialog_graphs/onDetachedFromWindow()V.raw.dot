digraph "CFG forcom.google.android.material.bottomsheet.BottomSheetDialog.onDetachedFromWindow()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.bottomsheet.BottomSheetDialog$EdgeToEdgeCallback) = (r2 I:com.google.android.material.bottomsheet.BottomSheetDialog) com.google.android.material.bottomsheet.BottomSheetDialog.edgeToEdgeCallback com.google.android.material.bottomsheet.BottomSheetDialog$EdgeToEdgeCallback  (LINE:200)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:201)\l0x0005: INVOKE  (r0 I:com.google.android.material.bottomsheet.BottomSheetDialog$EdgeToEdgeCallback), (r1 I:android.view.Window) type: VIRTUAL call: com.google.android.material.bottomsheet.BottomSheetDialog.EdgeToEdgeCallback.setWindow(android.view.Window):void A[MD:(android.view.Window):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|RETURN\lORIG_RETURN\l|0x0008: RETURN    (LINE:203)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0008: RETURN   A[SYNTHETIC] (LINE:203)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.bottomsheet.BottomSheetDialog.onDetachedFromWindow((r2 'this' I:com.google.android.material.bottomsheet.BottomSheetDialog A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0008\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [ClspMth\{android.view.Window.Callback.onDetachedFromWindow():void\}, ClspMth\{android.app.Dialog.onDetachedFromWindow():void\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

