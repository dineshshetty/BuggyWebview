digraph "CFG forcom.google.android.material.navigationrail.NavigationRailView.makeMinWidthSpec(I)I" {
subgraph cluster_Region_398007545 {
label = "R(2:1|(2:(2:4|5)|(1:7)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|int int r0 = getSuggestedMinimumWidth()\l}"];
subgraph cluster_Region_1285326966 {
label = "R(2:(2:4|5)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1173411789 {
label = "IF [B:3:0x000a, B:4:0x000c] THEN: R(2:4|5) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (android.view.View.MeasureSpec.getMode(r5) != 1073741824) goto L3\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|ADDED_TO_REGION\l|if (r0 \> 0) goto L4\l}"];
subgraph cluster_Region_599896777 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e}"];
Node_6 [shape=record,label="{6\:\ 0x0025|RETURN\l|return android.view.View.MeasureSpec.makeMeasureSpec(java.lang.Math.min(android.view.View.MeasureSpec.getSize(r5), r0 + getPaddingLeft() + getPaddingRight()), androidx.constraintlayout.core.widgets.analyzer.BasicMeasure.EXACTLY)\l}"];
}
}
subgraph cluster_Region_880859260 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0026|RETURN\l|return r5\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private int com.google.android.material.navigationrail.NavigationRailView.makeMinWidthSpec((r4v0 'this' com.google.android.material.navigationrail.NavigationRailView A[IMMUTABLE_TYPE, THIS]), (r5v0 'measureSpec' int A[D('measureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0026 \-\> B:1:?, CROSS_EDGE: B:3:0x000a \-\> B:7:0x0026\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_1;
Node_0 -> Node_2;
}

