digraph "CFG forcom.google.android.material.navigationrail.NavigationRailMenuView.onMeasure(II)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|int r0 = android.view.View.MeasureSpec.getSize(r7)\lint r1 = getMenu().getVisibleItems().size()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|if (r1 \<= 1) goto L9\l}"];
Node_14 [shape=record,label="{14\:\ 0x0013}"];
Node_15 [shape=record,label="{15\:\ 0x001b|if (isShifting(getLabelVisibilityMode(), r1) == false) goto L9\l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|int r2 = measureShiftingChildHeights(r6, r0, r1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0027|PHI: r2 \l  PHI: (r2v3 'measuredHeight' int) = (r2v2 'measuredHeight' int), (r2v6 'measuredHeight' int) binds: [B:17:0x0022, B:16:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|setMeasuredDimension(android.view.View.MeasureSpec.getSize(r6), android.view.View.resolveSizeAndState(r2, r7, 0))\l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0022|int r2 = measureSharedChildHeights(r6, r0, r1, null)\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.navigationrail.NavigationRailMenuView.onMeasure((r5v0 'this' com.google.android.material.navigationrail.NavigationRailMenuView A[IMMUTABLE_TYPE, THIS]), (r6v0 'widthMeasureSpec' int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'heightMeasureSpec' int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0022 \-\> B:18:0x0027, CROSS_EDGE: B:13:0x0011 \-\> B:17:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_17 -> Node_18;
}

