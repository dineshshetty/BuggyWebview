digraph "CFG forcom.google.android.material.sidesheet.SideSheetBehavior.updateSheetVisibility(Landroid\/view\/View;)V" {
subgraph cluster_Region_1363775662 {
label = "R(2:2|(1:(1:6)))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0003|int r0 = r2.state == 5 ? 4 : 0\l}"];
subgraph cluster_Region_655188614 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2125771817 {
label = "IF [B:18:0x000c] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000c|if (r3.getVisibility() != r0) goto L6\l}"];
subgraph cluster_Region_1408816875 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000e|r3.setVisibility(r0)\l}"];
}
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0005}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0008|PHI: r0 \l  PHI: (r0v2 'visibility' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0011|ORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0007}"];
MethodNode[shape=record,label="{private void com.google.android.material.sidesheet.SideSheetBehavior.updateSheetVisibility((r2v0 'this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\> A[D('this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\>), IMMUTABLE_TYPE, THIS]), (r3v0 'sheet' android.view.View A[D('sheet' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000c \-\> B:20:0x0011, CROSS_EDGE: B:16:0x0007 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends android.view.View]\l}"];
MethodNode -> Node_11;Node_14 -> Node_15;
Node_14 -> Node_16;
Node_18 -> Node_19;
Node_18 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_20 -> Node_12;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

