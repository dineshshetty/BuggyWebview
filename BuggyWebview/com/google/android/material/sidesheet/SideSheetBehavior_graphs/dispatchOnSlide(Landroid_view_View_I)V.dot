digraph "CFG forcom.google.android.material.sidesheet.SideSheetBehavior.dispatchOnSlide(Landroid\/view\/View;I)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0006|if (r3.callbacks.isEmpty() != false) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|float r0 = r3.sheetDelegate.calculateSlideOffsetBasedOnOutwardEdge(r5)\ljava.util.Iterator r1 = r3.callbacks.iterator()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0014|LOOP_START\lLOOP:0: B:16:0x0014\-\>B:18:0x001a\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|if (r1.hasNext() == false) goto L7\l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|LOOP_END\lLOOP:0: B:16:0x0014\-\>B:18:0x001a\l|com.google.android.material.sidesheet.SheetCallback r2 = r1.next()\lr2.onSlide(r4, r0)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.sidesheet.SideSheetBehavior.dispatchOnSlide((r3v0 'this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\> A[D('this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\>), IMMUTABLE_TYPE, THIS]), (r4v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'outwardEdge' int A[D('outwardEdge' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x001a \-\> B:16:0x0014, CROSS_EDGE: B:14:0x0006 \-\> B:19:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends android.view.View]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_12;
}

