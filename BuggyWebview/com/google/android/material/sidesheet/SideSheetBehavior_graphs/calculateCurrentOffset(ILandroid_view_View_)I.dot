digraph "CFG forcom.google.android.material.sidesheet.SideSheetBehavior.calculateCurrentOffset(ILandroid\/view\/View;)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0002|switch(r3.state) \{\l    case 1: goto L9;\l    case 2: goto L9;\l    case 3: goto L8;\l    case 4: goto L3;\l    case 5: goto L6;\l    default: goto L3;\l\}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Unexpected value: \")\lr1.append(r3.state)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001d|throw new java.lang.IllegalStateException(r1.toString())\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x001e|int r0 = r3.sheetDelegate.getHiddenOffset()\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|int r0 = r4 \- r3.sheetDelegate.getOutwardEdge(r5)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0030|RETURN\lORIG_RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private int com.google.android.material.sidesheet.SideSheetBehavior.calculateCurrentOffset((r3v0 'this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\> A[D('this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\>), IMMUTABLE_TYPE, THIS]), (r4v0 'savedOutwardEdge' int A[D('savedOutwardEdge' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'child' V extends android.view.View A[D('child' V extends android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0030 \-\> B:13:?, CROSS_EDGE: B:19:0x0025 \-\> B:21:0x0030, CROSS_EDGE: B:20:0x0027 \-\> B:21:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends android.view.View]\lSIGNATURE: (ITV;)I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_15 -> Node_19;
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_22;
Node_22 -> Node_13;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

