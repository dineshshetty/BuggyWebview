digraph "CFG forcom.google.android.material.sidesheet.SideSheetBehavior.isDraggedFarEnough(Landroid\/view\/MotionEvent;)Z" {
subgraph cluster_Region_1997681816 {
label = "R(1:(2:(2:5|6)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_2052516361 {
label = "R(2:(2:5|6)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_691360142 {
label = "IF [B:13:0x0005] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0005|if (shouldHandleDraggingWithHelper() == true) goto L5\l}"];
subgraph cluster_Region_2040709323 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0008|float float r0 = calculateDragDistance(r3.initialX, r4.getX())\l}"];
Node_16 [shape=record,label="{16\:\ 0x001c|RETURN\l|return r0 \> ((float) r3.viewDragHelper.getTouchSlop())\l}"];
}
}
subgraph cluster_Region_878184648 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0007|RETURN\l|return false\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x001e|ORIG_RETURN\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.sidesheet.SideSheetBehavior.isDraggedFarEnough((r3v0 'this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\> A[D('this' com.google.android.material.sidesheet.SideSheetBehavior\<V extends android.view.View\>), IMMUTABLE_TYPE, THIS]), (r4v0 'event' android.view.MotionEvent A[D('event' android.view.MotionEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x001f \-\> B:11:?, CROSS_EDGE: B:16:0x001c \-\> B:18:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends android.view.View]\l}"];
MethodNode -> Node_10;Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19;
Node_14 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_17 -> Node_11;
Node_19 -> Node_11;
}

