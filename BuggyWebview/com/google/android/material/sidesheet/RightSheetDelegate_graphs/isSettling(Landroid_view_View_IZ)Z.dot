digraph "CFG forcom.google.android.material.sidesheet.RightSheetDelegate.isSettling(Landroid\/view\/View;IZ)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = r3.sheetBehavior.getOutwardEdgeOffsetForState(r5)\landroidx.customview.widget.ViewDragHelper r1 = r3.sheetBehavior.getViewDragHelper()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r1 == null) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r6 == false) goto L8\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010}"];
Node_6 [shape=record,label="{6\:\ 0x0018|if (r1.settleCapturedViewAt(r0, r4.getTop()) == false) goto L10\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|SYNTHETIC\lRETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b}"];
Node_9 [shape=record,label="{9\:\ 0x0023|if (r1.smoothSlideViewTo(r4, r0, r4.getTop()) == false) goto L10\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{boolean com.google.android.material.sidesheet.RightSheetDelegate.isSettling((r3v0 'this' com.google.android.material.sidesheet.RightSheetDelegate A[IMMUTABLE_TYPE, THIS]), (r4v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'state' int A[D('state' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'isReleasingView' boolean A[D('isReleasingView' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0025 \-\> B:12:0x0028, CROSS_EDGE: B:9:0x0023 \-\> B:10:0x0025, CROSS_EDGE: B:9:0x0023 \-\> B:11:0x0027, CROSS_EDGE: B:3:0x000c \-\> B:11:0x0027\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [com.google.android.material.sidesheet.SheetDelegate.isSettling(android.view.View, int, boolean):boolean]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_11;
Node_6 -> Node_10[style=dashed];
Node_10 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_11 -> Node_1;
}

