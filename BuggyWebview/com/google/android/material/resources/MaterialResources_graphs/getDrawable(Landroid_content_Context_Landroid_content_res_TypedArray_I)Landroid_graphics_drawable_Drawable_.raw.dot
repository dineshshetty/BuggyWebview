digraph "CFG forcom.google.android.material.resources.MaterialResources.getDrawable(Landroid\/content\/Context;Landroid\/content\/res\/TypedArray;I)Landroid\/graphics\/drawable\/Drawable;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r3 I:android.content.res.TypedArray A[D('attributes' android.content.res.TypedArray)]), (r4 I:int A[D('index' int)]) type: VIRTUAL call: android.content.res.TypedArray.hasValue(int):boolean A[MD:(int):boolean (c)] (LINE:122)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0014 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:123)\l0x0007: INVOKE  (r0 I:int) = \l  (r3 I:android.content.res.TypedArray A[D('attributes' android.content.res.TypedArray)])\l  (r4 I:int A[D('index' int)])\l  (r0 I:int)\l type: VIRTUAL call: android.content.res.TypedArray.getResourceId(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('resourceId' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0014  (LINE:124)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|0x000d: INVOKE  (r1 I:android.graphics.drawable.Drawable) = (r2 I:android.content.Context A[D('context' android.content.Context)]), (r0 I:int A[D('resourceId' int)]) type: STATIC call: androidx.appcompat.content.res.AppCompatResources.getDrawable(android.content.Context, int):android.graphics.drawable.Drawable A[MD:(android.content.Context, int):android.graphics.drawable.Drawable (m)] (LINE:125)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0014  (LINE:126)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|RETURN\l|0x0013: RETURN  (r1 I:android.graphics.drawable.Drawable A[D('value' android.graphics.drawable.Drawable)])  (LINE:127)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|0x0014: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r3 I:android.content.res.TypedArray A[D('attributes' android.content.res.TypedArray)]), (r4 I:int A[D('index' int)]) type: VIRTUAL call: android.content.res.TypedArray.getDrawable(int):android.graphics.drawable.Drawable A[MD:(int):android.graphics.drawable.Drawable (c)] (LINE:131)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:android.graphics.drawable.Drawable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.drawable.Drawable com.google.android.material.resources.MaterialResources.getDrawable((r2 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.content.res.TypedArray A[D('attributes' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0018 \-\> B:12:?, CROSS_EDGE: B:16:0x000b \-\> B:20:0x0014, CROSS_EDGE: B:14:0x0004 \-\> B:20:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x0014: r0 'resourceId' I\l  0x0011\-0x0014: r1 'value' Landroid\/graphics\/drawable\/Drawable;\l  \-1 \-0x0018: r2 'context' Landroid\/content\/Context;\l  \-1 \-0x0018: r3 'attributes' Landroid\/content\/res\/TypedArray;\l  \-1 \-0x0018: r4 'index' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

