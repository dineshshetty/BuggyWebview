digraph "CFG forcom.google.android.material.resources.TextAppearance.updateMeasureState(Landroid\/content\/Context;Landroid\/text\/TextPaint;Lcom\/google\/android\/material\/resources\/TextAppearanceFontCallback;)V" {
subgraph cluster_Region_1044608023 {
label = "R(1:(1:3)(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1894467204 {
label = "IF [B:11:0x0004] THEN: R(1:3) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (shouldLoadFontSynchronously(r2) != false) goto L3\l}"];
subgraph cluster_Region_810043020 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0006|updateTextPaintMeasureState(r2, r3, getFont(r2))\l}"];
}
subgraph cluster_Region_141222051 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000e|getFontAsync(r2, r3, r4)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0011|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.resources.TextAppearance.updateMeasureState((r1v0 'this' com.google.android.material.resources.TextAppearance A[IMMUTABLE_TYPE, THIS]), (r2v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'textPaint' android.text.TextPaint A[D('textPaint' android.text.TextPaint), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'callback' com.google.android.material.resources.TextAppearanceFontCallback A[D('callback' com.google.android.material.resources.TextAppearanceFontCallback), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000e \-\> B:14:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_15 -> Node_9;
Node_14 -> Node_9;
}

