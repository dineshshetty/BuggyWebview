digraph "CFG forcom.google.android.material.badge.BadgeUtils.attachBadgeDrawable(Lcom\/google\/android\/material\/badge\/BadgeDrawable;Landroid\/view\/View;Landroid\/widget\/FrameLayout;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|setBadgeDrawableBounds(r2, r3, r4)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|if (r2.getCustomBadgeParent() == null) goto L6\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|r2.getCustomBadgeParent().setForeground(r2)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0011}"];
Node_18 [shape=record,label="{18\:\ 0x0013|if (com.google.android.material.badge.BadgeUtils.USE_COMPAT_PARENT != false) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|r3.getOverlay().add(r2)\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|RETURN\lORIG_RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d}"];
Node_22 [shape=record,label="{22\:\ 0x0024|throw new java.lang.IllegalArgumentException(\"Trying to reference null customBadgeParent\")\l}"];
MethodNode[shape=record,label="{public static void com.google.android.material.badge.BadgeUtils.attachBadgeDrawable((r2v0 'badgeDrawable' com.google.android.material.badge.BadgeDrawable A[D('badgeDrawable' com.google.android.material.badge.BadgeDrawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'anchor' android.view.View A[D('anchor' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'customBadgeParent' android.widget.FrameLayout A[D('customBadgeParent' android.widget.FrameLayout), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0015 \-\> B:20:0x001c, CROSS_EDGE: B:22:0x0024 \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

