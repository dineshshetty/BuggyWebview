digraph "CFG forcom.google.android.material.badge.BadgeUtils.detachBadgeDrawable(Lcom\/google\/android\/material\/badge\/BadgeDrawable;Landroid\/view\/View;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('badgeDrawable' com.google.android.material.badge.BadgeDrawable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0003  (LINE:176)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|RETURN\l|0x0002: RETURN    (LINE:177)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0003|0x0003: SGET  (r0 I:boolean) =  com.google.android.material.badge.BadgeUtils.USE_COMPAT_PARENT boolean  (LINE:179)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0016 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|0x0007: INVOKE  (r0 I:android.widget.FrameLayout) = \l  (r2 I:com.google.android.material.badge.BadgeDrawable A[D('badgeDrawable' com.google.android.material.badge.BadgeDrawable)])\l type: VIRTUAL call: com.google.android.material.badge.BadgeDrawable.getCustomBadgeParent():android.widget.FrameLayout A[MD:():android.widget.FrameLayout (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000e \l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: INVOKE  (r0 I:android.view.ViewOverlay) = (r3 I:android.view.View A[D('anchor' android.view.View)]) type: VIRTUAL call: android.view.View.getOverlay():android.view.ViewOverlay A[MD:():android.view.ViewOverlay (c)] (LINE:182)\l0x0012: INVOKE  \l  (r0 I:android.view.ViewOverlay)\l  (r2 I:android.graphics.drawable.Drawable A[D('badgeDrawable' com.google.android.material.badge.BadgeDrawable)])\l type: VIRTUAL call: android.view.ViewOverlay.remove(android.graphics.drawable.Drawable):void A[MD:(android.graphics.drawable.Drawable):void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN   A[SYNTHETIC] (LINE:184)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|0x0016: INVOKE  (r0 I:android.widget.FrameLayout) = \l  (r2 I:com.google.android.material.badge.BadgeDrawable A[D('badgeDrawable' com.google.android.material.badge.BadgeDrawable)])\l type: VIRTUAL call: com.google.android.material.badge.BadgeDrawable.getCustomBadgeParent():android.widget.FrameLayout A[MD:():android.widget.FrameLayout (m)] (LINE:180)\l0x001a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: INVOKE  (r0 I:android.widget.FrameLayout), (r1 I:android.graphics.drawable.Drawable) type: VIRTUAL call: android.widget.FrameLayout.setForeground(android.graphics.drawable.Drawable):void A[MD:(android.graphics.drawable.Drawable):void (s)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: RETURN    (LINE:184)\l}"];
MethodNode[shape=record,label="{public static void com.google.android.material.badge.BadgeUtils.detachBadgeDrawable((r2 I:com.google.android.material.badge.BadgeDrawable A[D('badgeDrawable' com.google.android.material.badge.BadgeDrawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.view.View A[D('anchor' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x001e \-\> B:14:?, CROSS_EDGE: B:23:0x0016 \-\> B:24:0x001e, CROSS_EDGE: B:18:0x0005 \-\> B:23:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001e: r2 'badgeDrawable' Lcom\/google\/android\/material\/badge\/BadgeDrawable;\l  \-1 \-0x001e: r3 'anchor' Landroid\/view\/View;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_14;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_25 -> Node_14;
Node_23 -> Node_24;
Node_24 -> Node_14;
}

