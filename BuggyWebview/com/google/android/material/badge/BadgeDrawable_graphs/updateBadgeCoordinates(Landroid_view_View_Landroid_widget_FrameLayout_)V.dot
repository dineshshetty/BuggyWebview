digraph "CFG forcom.google.android.material.badge.BadgeDrawable.updateBadgeCoordinates(Landroid\/view\/View;Landroid\/widget\/FrameLayout;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|r1.anchorViewRef = new java.lang.ref.WeakReference\<\>(r2)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|if (com.google.android.material.badge.BadgeUtils.USE_COMPAT_PARENT == false) goto L11\l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|if (r3 != null) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|tryWrapAnchorInCompatParent(r2)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018}"];
Node_20 [shape=record,label="{20\:\ 0x001a|if (com.google.android.material.badge.BadgeUtils.USE_COMPAT_PARENT != false) goto L8\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|updateAnchorParentToNotClip(r2)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|updateCenterAndBounds()\linvalidateSelf()\l}"];
Node_23 [shape=record,label="{23\:\ 0x0025|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|r1.customBadgeParentRef = new java.lang.ref.WeakReference\<\>(r3)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.badge.BadgeDrawable.updateBadgeCoordinates((r1v0 'this' com.google.android.material.badge.BadgeDrawable A[IMMUTABLE_TYPE, THIS]), (r2v0 'anchorView' android.view.View A[D('anchorView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'customBadgeParent' android.widget.FrameLayout A[D('customBadgeParent' android.widget.FrameLayout), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x001a \-\> B:22:0x001f, CROSS_EDGE: B:18:0x0011 \-\> B:19:0x0018, CROSS_EDGE: B:15:0x0009 \-\> B:18:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_18 -> Node_19;
}

