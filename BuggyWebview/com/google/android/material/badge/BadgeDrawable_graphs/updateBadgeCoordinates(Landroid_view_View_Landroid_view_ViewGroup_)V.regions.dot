digraph "CFG forcom.google.android.material.badge.BadgeDrawable.updateBadgeCoordinates(Landroid\/view\/View;Landroid\/view\/ViewGroup;)V" {
subgraph cluster_Region_1818996050 {
label = "R(1:(2:(1:7)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_1709182295 {
label = "R(2:(1:7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_68337415 {
label = "IF [B:11:0x0002] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if ((r4 instanceof android.widget.FrameLayout) == false) goto L6\l}"];
subgraph cluster_Region_626460227 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0012|throw new java.lang.IllegalArgumentException(\"customBadgeParent must be a FrameLayout\")\l}"];
}
}
subgraph cluster_Region_350695046 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|updateBadgeCoordinates(r3, (android.widget.FrameLayout) r4)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000a}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000b}"];
MethodNode[shape=record,label="{public void com.google.android.material.badge.BadgeDrawable.updateBadgeCoordinates((r2v0 'this' com.google.android.material.badge.BadgeDrawable A[IMMUTABLE_TYPE, THIS]), (r3v0 'anchorView' android.view.View A[D('anchorView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'customBadgeParent' android.view.ViewGroup A[D('customBadgeParent' android.view.ViewGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Ljava\/lang\/Deprecated;=Annotation\{RUNTIME, type=Ljava\/lang\/Deprecated;, values=\{\}\}\}\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:15:0x0012 \-\> B:9:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

