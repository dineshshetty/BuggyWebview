digraph "CFG forcom.google.android.material.badge.BadgeDrawable.setTextAppearance(Lcom\/google\/android\/material\/resources\/TextAppearance;)V" {
subgraph cluster_Region_1182623216 {
label = "R(1:(2:(1:7)|(1:8))) | DECL_VAR: android.content.Context context\l";
node [shape=record,color=blue];
subgraph cluster_Region_321330035 {
label = "R(2:(1:7)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_356012123 {
label = "IF [B:13:0x0006, B:16:0x0011] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0006|if (r2.textDrawableHelper.getTextAppearance() == r3) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|ADDED_TO_REGION\l|if ((r0 = r2.contextRef.get()) == null) goto L7\l}"];
subgraph cluster_Region_1310733798 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0013|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1667210039 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0014|r2.textDrawableHelper.setTextAppearance(r3, r0)\lupdateCenterAndBounds()\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0008|RETURN\lADDED_TO_REGION\l|return\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0009}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x001c}"];
MethodNode[shape=record,label="{private void com.google.android.material.badge.BadgeDrawable.setTextAppearance((r2v0 'this' com.google.android.material.badge.BadgeDrawable A[IMMUTABLE_TYPE, THIS]), (r3v0 'textAppearance' com.google.android.material.resources.TextAppearance A[D('textAppearance' com.google.android.material.resources.TextAppearance), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0013 \-\> B:11:?, CROSS_EDGE: B:19:0x001c \-\> B:11:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_18[style=dashed];
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_19 -> Node_11;
}

