digraph "CFG forcom.google.android.material.transformation.FabTransformationBehavior.createDependencyTranslationAnimation(Landroid\/view\/View;Landroid\/view\/View;ZLcom\/google\/android\/material\/transformation\/FabTransformationBehavior$FabTransformationSpec;Ljava\/util\/List;)V" {
subgraph cluster_Region_748791689 {
label = "R(3:1|4|7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|float float r0 = calculateTranslationX(r11, r12, r14.positioning)\lfloat float r1 = calculateTranslationY(r11, r12, r14.positioning)\landroid.util.Pair android.util.Pair\<com.google.android.material.animation.MotionTiming, com.google.android.material.animation.MotionTiming\> r2 = calculateMotionTiming(r0, r1, r13, r14)\lcom.google.android.material.animation.MotionTiming com.google.android.material.animation.MotionTiming r3 = (com.google.android.material.animation.MotionTiming) r2.first\lcom.google.android.material.animation.MotionTiming com.google.android.material.animation.MotionTiming r4 = (com.google.android.material.animation.MotionTiming) r2.second\landroid.util.Property android.util.Property r5 = android.view.View.TRANSLATION_X\lfloat[] float[] r7 = new float[1]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0024|PHI: r8 \l  PHI: (r8v1 float A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r7[0] = r13 ? r0 : r10.dependencyOriginalTranslationX\landroid.animation.ObjectAnimator android.animation.ValueAnimator r5 = android.animation.ObjectAnimator.ofFloat(r11, r5, r7)\landroid.util.Property android.util.Property r7 = android.view.View.TRANSLATION_Y\lfloat[] float[] r6 = new float[1]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0035|PHI: r8 \l  PHI: (r8v3 float A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r6[0] = r13 ? r1 : r10.dependencyOriginalTranslationY\landroid.animation.ObjectAnimator android.animation.ValueAnimator r6 = android.animation.ObjectAnimator.ofFloat(r11, r7, r6)\lr3.apply(r5)\lr4.apply(r6)\lr15.add(r5)\lr15.add(r6)\l}"];
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x001e}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0020}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x002f}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0031}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0047}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0033}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0022}"];
MethodNode[shape=record,label="{private void com.google.android.material.transformation.FabTransformationBehavior.createDependencyTranslationAnimation((r10v0 'this' com.google.android.material.transformation.FabTransformationBehavior A[IMMUTABLE_TYPE, THIS]), (r11v0 'dependency' android.view.View A[D('dependency' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'expanded' boolean A[D('expanded' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'spec' com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec A[D('spec' com.google.android.material.transformation.FabTransformationBehavior$FabTransformationSpec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'animations' java.util.List\<android.animation.Animator\> A[D('animations' java.util.List\<android.animation.Animator\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0033 \-\> B:22:0x0035, CROSS_EDGE: B:17:0x0022 \-\> B:18:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/view\/View;Landroid\/view\/View;ZLcom\/google\/android\/material\/transformation\/FabTransformationBehavior$FabTransformationSpec;Ljava\/util\/List\<Landroid\/animation\/Animator;\>;)V\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_18 -> Node_19;
Node_22 -> Node_23;
Node_12 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

