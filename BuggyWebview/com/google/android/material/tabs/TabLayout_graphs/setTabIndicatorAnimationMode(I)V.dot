digraph "CFG forcom.google.android.material.tabs.TabLayout.setTabIndicatorAnimationMode(I)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|r3.tabIndicatorAnimationMode = r4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|switch(r4) \{\l    case 0: goto L10;\l    case 1: goto L8;\l    case 2: goto L6;\l    default: goto L3;\l\}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r4)\lr1.append(\" is not a valid TabIndicatorAnimationMode\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|r3.tabIndicatorInterpolator = new com.google.android.material.tabs.FadeTabIndicatorInterpolator()\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|r3.tabIndicatorInterpolator = new com.google.android.material.tabs.ElasticTabIndicatorInterpolator()\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ 0x002c|r3.tabIndicatorInterpolator = new com.google.android.material.tabs.TabIndicatorInterpolator()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.tabs.TabLayout.setTabIndicatorAnimationMode((r3v0 'this' com.google.android.material.tabs.TabLayout A[IMMUTABLE_TYPE, THIS]), (r4v0 'tabIndicatorAnimationMode' int A[D('tabIndicatorAnimationMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0034 \-\> B:13:?, CROSS_EDGE: B:19:0x0024 \-\> B:21:0x0034, CROSS_EDGE: B:20:0x002c \-\> B:21:0x0034\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_15 -> Node_19;
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_22;
Node_22 -> Node_13;
Node_19 -> Node_23;
Node_23 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

