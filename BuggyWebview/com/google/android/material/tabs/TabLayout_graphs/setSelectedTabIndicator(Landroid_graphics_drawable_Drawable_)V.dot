digraph "CFG forcom.google.android.material.tabs.TabLayout.setSelectedTabIndicator(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|if (r3 != null) goto L3\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|r3 = new android.graphics.drawable.GradientDrawable()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|PHI: r3 \l  PHI: (r3v1 'tabSelectedIndicator' android.graphics.drawable.Drawable) = (r3v0 'tabSelectedIndicator' android.graphics.drawable.Drawable), (r3v2 'tabSelectedIndicator' android.graphics.drawable.Drawable) binds: [B:12:0x0000, B:13:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|android.graphics.drawable.Drawable r0 = androidx.core.graphics.drawable.DrawableCompat.wrap(r3).mutate()\lr2.tabSelectedIndicator = r0\lcom.google.android.material.drawable.DrawableUtils.setTint(r0, r2.tabSelectedIndicatorColor)\lint r0 = r2.tabIndicatorHeight\l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|if (r0 != (\-1)) goto L6\l}"];
Node_16 [shape=record,label="{16\:\ 0x001c|int r0 = r2.tabSelectedIndicator.getIntrinsicHeight()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0024|PHI: r0 \l  PHI: (r0v3 'indicatorHeight' int) = (r0v2 'indicatorHeight' int), (r0v5 'indicatorHeight' int) binds: [B:15:0x001a, B:16:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|r2.slidingTabIndicator.setSelectedIndicatorHeight(r0)\l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.tabs.TabLayout.setSelectedTabIndicator((r2v0 'this' com.google.android.material.tabs.TabLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'tabSelectedIndicator' android.graphics.drawable.Drawable A[D('tabSelectedIndicator' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001a \-\> B:18:0x0024, CROSS_EDGE: B:12:0x0000 \-\> B:14:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

