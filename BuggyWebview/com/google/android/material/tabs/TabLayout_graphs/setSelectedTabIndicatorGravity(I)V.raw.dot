digraph "CFG forcom.google.android.material.tabs.TabLayout.setSelectedTabIndicatorGravity(I)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r1 I:com.google.android.material.tabs.TabLayout) com.google.android.material.tabs.TabLayout.tabIndicatorGravity int  (LINE:1137)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('indicatorGravity' int)])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IPUT  (r2 I:int A[D('indicatorGravity' int)]), (r1 I:com.google.android.material.tabs.TabLayout) com.google.android.material.tabs.TabLayout.tabIndicatorGravity int  (LINE:1138)\l0x0006: IGET  (r0 I:com.google.android.material.tabs.TabLayout$SlidingTabIndicator) = (r1 I:com.google.android.material.tabs.TabLayout) com.google.android.material.tabs.TabLayout.slidingTabIndicator com.google.android.material.tabs.TabLayout$SlidingTabIndicator  (LINE:1139)\l0x0008: INVOKE  (r0 I:android.view.View) type: STATIC call: androidx.core.view.ViewCompat.postInvalidateOnAnimation(android.view.View):void A[MD:(android.view.View):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\lORIG_RETURN\l|0x000b: RETURN    (LINE:1141)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000b: RETURN   A[SYNTHETIC] (LINE:1141)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.tabs.TabLayout.setSelectedTabIndicatorGravity((r1 'this' I:com.google.android.material.tabs.TabLayout A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('indicatorGravity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r2 'indicatorGravity' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

