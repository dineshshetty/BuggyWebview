digraph "CFG forcom.google.android.material.tabs.TabLayout.TabView.inflateAndAddDefaultIconView()V" {
subgraph cluster_Region_2102634767 {
label = "R(3:1|(1:3)|4)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|android.view.ViewGroup r0 = r4\l}"];
subgraph cluster_IfRegion_1352005335 {
label = "IF [B:10:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0004|if (com.google.android.material.badge.BadgeUtils.USE_COMPAT_PARENT != false) goto L3\l}"];
subgraph cluster_Region_894916420 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0006|android.widget.FrameLayout r0 = createPreApi18BadgeAnchorRoot()\laddView(r0, 0)\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x000d|PHI: r0 \l  PHI: (r0v1 'iconViewParent' android.view.ViewGroup) = (r0v0 'iconViewParent' android.view.ViewGroup), (r0v2 'iconViewParent' android.view.ViewGroup) binds: [B:10:0x0004, B:11:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|android.widget.ImageView android.widget.ImageView r1 = (android.widget.ImageView) android.view.LayoutInflater.from(getContext()).inflate(com.google.android.material.C0571R.layout.design_layout_tab_icon, r0, false)\lr4.iconView = r1\lr0.addView(r1, 0)\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0023}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.tabs.TabLayout.TabView.inflateAndAddDefaultIconView((r4v0 'this' com.google.android.material.tabs.TabLayout$TabView A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:12:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r4v0, resolved type: com.google.android.material.tabs.TabLayout$TabView\}\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_7 -> Node_9;
Node_13 -> Node_8;
}

