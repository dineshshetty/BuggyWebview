digraph "CFG forcom.google.android.material.tabs.ElasticTabIndicatorInterpolator.updateIndicatorForOffset(Lcom\/google\/android\/material\/tabs\/TabLayout;Landroid\/view\/View;Landroid\/view\/View;FLandroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|android.graphics.RectF r0 = calculateIndicatorWidthForTab(r10, r11)\landroid.graphics.RectF r1 = calculateIndicatorWidthForTab(r10, r12)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|if ((r0.left \> r1.left ? 1 : (r0.left == r1.left ? 0 : \-1)) \>= 0) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|r2 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|PHI: r2 \l  PHI: (r2v3 'isMovingRight' boolean) = (r2v2 'isMovingRight' boolean), (r2v4 'isMovingRight' boolean) binds: [B:5:0x0012, B:4:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L9\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|float r3 = accInterp(r13)\lfloat r4 = decInterp(r13)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|PHI: r3 r4 \l  PHI: (r3v2 'leftFraction' float) = (r3v1 'leftFraction' float), (r3v3 'leftFraction' float) binds: [B:8:0x001e, B:7:0x0015] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'rightFraction' float) = (r4v0 'rightFraction' float), (r4v2 'rightFraction' float) binds: [B:8:0x001e, B:7:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|r14.setBounds(com.google.android.material.animation.AnimationUtils.lerp((int) r0.left, (int) r1.left, r3), r14.getBounds().top, com.google.android.material.animation.AnimationUtils.lerp((int) r0.right, (int) r1.right, r4), r14.getBounds().bottom)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0049|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|float r3 = decInterp(r13)\lfloat r4 = accInterp(r13)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|r2 = false\l}"];
MethodNode[shape=record,label="{void com.google.android.material.tabs.ElasticTabIndicatorInterpolator.updateIndicatorForOffset((r9v0 'this' com.google.android.material.tabs.ElasticTabIndicatorInterpolator A[IMMUTABLE_TYPE, THIS]), (r10v0 'tabLayout' com.google.android.material.tabs.TabLayout A[D('tabLayout' com.google.android.material.tabs.TabLayout), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'startTitle' android.view.View A[D('startTitle' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'endTitle' android.view.View A[D('endTitle' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'offset' float A[D('offset' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'indicator' android.graphics.drawable.Drawable A[D('indicator' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x001e \-\> B:9:0x0026, CROSS_EDGE: B:5:0x0012 \-\> B:6:0x0013\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [com.google.android.material.tabs.TabIndicatorInterpolator.updateIndicatorForOffset(com.google.android.material.tabs.TabLayout, android.view.View, android.view.View, float, android.graphics.drawable.Drawable):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_8 -> Node_9;
Node_5 -> Node_6;
}

