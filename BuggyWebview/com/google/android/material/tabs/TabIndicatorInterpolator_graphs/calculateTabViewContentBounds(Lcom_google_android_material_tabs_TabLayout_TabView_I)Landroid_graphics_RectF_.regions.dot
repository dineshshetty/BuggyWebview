digraph "CFG forcom.google.android.material.tabs.TabIndicatorInterpolator.calculateTabViewContentBounds(Lcom\/google\/android\/material\/tabs\/TabLayout$TabView;I)Landroid\/graphics\/RectF;" {
subgraph cluster_Region_2116592736 {
label = "R(4:1|(1:3)|4|5)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|int int r0 = r14.getContentWidth()\lint int r1 = r14.getContentHeight()\lint int r2 = (int) com.google.android.material.internal.ViewUtils.dpToPx(r14.getContext(), r15)\l}"];
subgraph cluster_IfRegion_204623439 {
label = "IF [B:10:0x0011] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0011|if (r0 \< r2) goto L3\l}"];
subgraph cluster_Region_101047735 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0013|r0 = r2\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0014|PHI: r0 \l  PHI: (r0v1 'tabViewContentWidth' int) = (r0v0 'tabViewContentWidth' int), (r0v2 'tabViewContentWidth' int) binds: [B:10:0x0011, B:11:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|int int r3 = (r14.getLeft() + r14.getRight()) \/ 2\lint int r4 = (r14.getTop() + r14.getBottom()) \/ 2\lint int r5 = r3 \- (r0 \/ 2)\lint int r6 = r4 \- (r1 \/ 2)\lint int r7 = (r0 \/ 2) + r3\lint int r8 = (r3 \/ 2) + r4\l}"];
Node_13 [shape=record,label="{13\:\ 0x0041|RETURN\l|return new android.graphics.RectF(r5, r6, r7, r8)\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static android.graphics.RectF com.google.android.material.tabs.TabIndicatorInterpolator.calculateTabViewContentBounds((r14v0 'tabView' com.google.android.material.tabs.TabLayout$TabView A[D('tabView' com.google.android.material.tabs.TabLayout$TabView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'minWidth' int A[D('minWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0011 \-\> B:12:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

