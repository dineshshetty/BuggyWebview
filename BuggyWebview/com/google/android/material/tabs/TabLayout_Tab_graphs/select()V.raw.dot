digraph "CFG forcom.google.android.material.tabs.TabLayout.Tab.select()V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.tabs.TabLayout) = (r2 I:com.google.android.material.tabs.TabLayout$Tab) com.google.android.material.tabs.TabLayout.Tab.parent com.google.android.material.tabs.TabLayout  (LINE:2395)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: INVOKE  (r0 I:com.google.android.material.tabs.TabLayout), (r2 I:com.google.android.material.tabs.TabLayout$Tab) type: VIRTUAL call: com.google.android.material.tabs.TabLayout.selectTab(com.google.android.material.tabs.TabLayout$Tab):void A[MD:(com.google.android.material.tabs.TabLayout$Tab):void (m)] (LINE:2398)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:2399)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:2396)\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"Tab not attached to a TabLayout\" \l0x000c: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void com.google.android.material.tabs.TabLayout.Tab.select((r2 'this' I:com.google.android.material.tabs.TabLayout$Tab A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

