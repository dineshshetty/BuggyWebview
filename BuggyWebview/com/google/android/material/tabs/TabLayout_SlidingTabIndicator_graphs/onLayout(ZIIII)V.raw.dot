digraph "CFG forcom.google.android.material.tabs.TabLayout.SlidingTabIndicator.onLayout(ZIIII)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  \l  (r3 I:android.widget.LinearLayout)\l  (r4 I:boolean A[D('changed' boolean)])\l  (r5 I:int A[D('l' int)])\l  (r6 I:int A[D('t' int)])\l  (r7 I:int A[D('r' int)])\l  (r8 I:int A[D('b' int)])\l type: SUPER call: android.widget.LinearLayout.onLayout(boolean, int, int, int, int):void A[MD:(boolean, int, int, int, int):void (c)] (LINE:3247)\l0x0003: IGET  (r0 I:android.animation.ValueAnimator) = (r3 I:com.google.android.material.tabs.TabLayout$SlidingTabIndicator) com.google.android.material.tabs.TabLayout.SlidingTabIndicator.indicatorAnimator android.animation.ValueAnimator  (LINE:3249)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0019 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r0 I:android.animation.ValueAnimator) type: VIRTUAL call: android.animation.ValueAnimator.isRunning():boolean A[MD:():boolean (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0019 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3254)\l0x000e: IGET  (r1 I:com.google.android.material.tabs.TabLayout) = (r3 I:com.google.android.material.tabs.TabLayout$SlidingTabIndicator) com.google.android.material.tabs.TabLayout.SlidingTabIndicator.this$0 com.google.android.material.tabs.TabLayout \l0x0010: INVOKE  (r1 I:int) = (r1 I:com.google.android.material.tabs.TabLayout) type: VIRTUAL call: com.google.android.material.tabs.TabLayout.getSelectedTabPosition():int A[MD:():int (m)] (LINE:3255)\l0x0014: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0015: INVOKE  (r3 I:com.google.android.material.tabs.TabLayout$SlidingTabIndicator), (r0 I:boolean), (r1 I:int), (r2 I:int) type: DIRECT call: com.google.android.material.tabs.TabLayout.SlidingTabIndicator.updateOrRecreateIndicatorAnimation(boolean, int, int):void A[MD:(boolean, int, int):void (m)] (LINE:3254)\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN   A[SYNTHETIC] (LINE:3260)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0019|0x0019: INVOKE  (r3 I:com.google.android.material.tabs.TabLayout$SlidingTabIndicator) type: DIRECT call: com.google.android.material.tabs.TabLayout.SlidingTabIndicator.jumpIndicatorToIndicatorPosition():void A[MD:():void (m)] (LINE:3258)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: RETURN    (LINE:3260)\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.tabs.TabLayout.SlidingTabIndicator.onLayout((r3 'this' I:com.google.android.material.tabs.TabLayout$SlidingTabIndicator A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[D('changed' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('l' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('t' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('r' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('b' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0019 \-\> B:18:0x001c, CROSS_EDGE: B:13:0x0005 \-\> B:17:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001c: r4 'changed' Z\l  \-1 \-0x001c: r5 'l' I\l  \-1 \-0x001c: r6 't' I\l  \-1 \-0x001c: r7 'r' I\l  \-1 \-0x001c: r8 'b' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onLayout(boolean, int, int, int, int):void\}]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_19;
Node_19 -> Node_11;
Node_17 -> Node_18;
Node_18 -> Node_11;
}

