digraph "CFG forcom.google.android.material.drawable.DrawableUtils.getCheckedState([I)[I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:256)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0001|LOOP_START\lLOOP:0: B:21:0x0001\-\>B:30:0x0019\l|0x0001: ARRAY_LENGTH  (r1 I:int) = (r3 I:??[] A[D('state' int[])]) \l0x0002: CONST  (r2 I:??[int, float, short, byte, char]) = (16842912(0x10100a0, float:2.3694006E\-38) ??[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:33:0x001c \l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|0x0007: AGET  (r1 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('state' int[])]), (r0 I:??[int, short, byte, char] A[D('i' int)])  (LINE:257)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000c \l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|0x000c: AGET  (r1 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('state' int[])]), (r0 I:??[int, short, byte, char] A[D('i' int)])  (LINE:259)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0019 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0019|LOOP_END\lLOOP:0: B:21:0x0001\-\>B:30:0x0019\l|0x0019: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:256)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Object) = (r3 I:java.lang.Object A[D('state' int[])]) type: VIRTUAL call: java.lang.Object.clone():java.lang.Object A[MD:():java.lang.Object throws java.lang.CloneNotSupportedException (c)] (LINE:260)\l0x0014: CHECK_CAST (r1 I:int[]) = (int[]) (r1 I:??[OBJECT, ARRAY]) \l0x0016: APUT  \l  (r1 I:??[int, float][] A[D('newState' int[])])\l  (r0 I:??[int, short, byte, char] A[D('i' int)])\l  (r2 I:??[int, float, short, byte, char])\l  (LINE:261)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|RETURN\l|0x0018: RETURN  (r1 I:int[] A[D('newState' int[])])  (LINE:262)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x000b|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|RETURN\l|0x000b: RETURN  (r3 I:int[] A[D('state' int[])])  (LINE:258)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|0x001c: ARRAY_LENGTH  (r0 I:int A[D('i' int)]) = (r3 I:??[] A[D('state' int[])])  (LINE:265)\l0x001d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x001f: INVOKE  (r0 I:int[]) = (r3 I:int[] A[D('state' int[])]), (r0 I:int) type: STATIC call: java.util.Arrays.copyOf(int[], int):int[] A[MD:(int[], int):int[] (c)]\l0x0023: ARRAY_LENGTH  (r1 I:int) = (r3 I:??[] A[D('state' int[])])  (LINE:266)\l0x0024: APUT  \l  (r0 I:??[int, float][] A[D('newState' int[])])\l  (r1 I:??[int, short, byte, char])\l  (r2 I:??[int, float, short, byte, char])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x0026|RETURN\l|0x0026: RETURN  (r0 I:int[] A[D('newState' int[])])  (LINE:267)\l}"];
MethodNode[shape=record,label="{public static int[] com.google.android.material.drawable.DrawableUtils.getCheckedState((r3 I:int[] A[D('state' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0018 \-\> B:19:?, BACK_EDGE: B:30:0x0019 \-\> B:21:0x0001, CROSS_EDGE: B:32:0x0026 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x0019: r1 'newState' [I\l  0x0001\-0x001c: r0 'i' I\l  0x0023\-0x0026: r0 'newState' [I\l  \-1 \-0x0026: r3 'state' [I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_34[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_30;
Node_27 -> Node_35[style=dashed];
Node_30 -> Node_21;
Node_35 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_19;
Node_34 -> Node_25;
Node_25 -> Node_19;
Node_33 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_19;
}

