digraph "CFG forcom.google.android.material.drawable.DrawableUtils.setOutlineToPath(Landroid\/graphics\/Outline;Landroid\/graphics\/Path;)V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:285)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (30 ??[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:29:0x000a \l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: INVOKE  \l  (r2 I:android.graphics.Outline A[D('outline' android.graphics.Outline)])\l  (r3 I:android.graphics.Path A[D('path' android.graphics.Path)])\l type: VIRTUAL call: android.graphics.Outline.setPath(android.graphics.Path):void A[MD:(android.graphics.Path):void (c)] (LINE:286)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN   A[SYNTHETIC] (LINE:299)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|0x000a: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:287)\l0x000c: CONST  (r1 I:??[int, float, short, byte, char]) = (29 ??[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x000e|0x000e: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:35:0x0016 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0016|0x0016: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:296)\l0x0018: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x001a|0x001a: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:44:? \l}"];
Node_37 [shape=record,label="{37\:\ 0x001c|0x001c: INVOKE  (r0 I:boolean) = (r3 I:android.graphics.Path A[D('path' android.graphics.Path)]) type: VIRTUAL call: android.graphics.Path.isConvex():boolean A[MD:():boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:? \l}"];
Node_39 [shape=record,label="{39\:\ 0x0022|0x0022: INVOKE  \l  (r2 I:android.graphics.Outline A[D('outline' android.graphics.Outline)])\l  (r3 I:android.graphics.Path A[D('path' android.graphics.Path)])\l type: VIRTUAL call: android.graphics.Outline.setConvexPath(android.graphics.Path):void A[MD:(android.graphics.Path):void (c)] (LINE:297)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|RETURN\lORIG_RETURN\l|0x0025: RETURN    (LINE:299)\l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN   A[SYNTHETIC] (LINE:299)\l}"];
Node_44 [shape=record,label="{44\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN   A[SYNTHETIC] (LINE:299)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0010|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ 0x0010|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IllegalArgumentException \-\> 0x0014, blocks: (B:31:0x0010), top: B:41:0x0010 \}\lCatch: IllegalArgumentException \-\> 0x0014\l|0x0010: INVOKE  \l  (r2 I:android.graphics.Outline A[D('outline' android.graphics.Outline)])\l  (r3 I:android.graphics.Path A[D('path' android.graphics.Path)])\l type: VIRTUAL call: android.graphics.Outline.setConvexPath(android.graphics.Path):void A[Catch: IllegalArgumentException \-\> 0x0014, MD:(android.graphics.Path):void (c), TRY_ENTER, TRY_LEAVE] (LINE:291)\l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN   A[SYNTHETIC] (LINE:299)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0014|ExcHandler: IllegalArgumentException \-\> 0x0014\l|0x0014: MOVE_EXCEPTION  (r0 I:java.lang.IllegalArgumentException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalArgumentException \-\> 0x0014] (LINE:292)\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN   A[SYNTHETIC] (LINE:299)\l}"];
MethodNode[shape=record,label="{public static void com.google.android.material.drawable.DrawableUtils.setOutlineToPath((r2 I:android.graphics.Outline A[D('outline' android.graphics.Outline), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.graphics.Path A[D('path' android.graphics.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x0022 \-\> B:40:0x0025, CROSS_EDGE: B:38:0x0020 \-\> B:40:0x0025, CROSS_EDGE: B:36:0x001a \-\> B:40:0x0025, CROSS_EDGE: B:31:0x0010 \-\> B:40:0x0025, CROSS_EDGE: B:33:0x0014 \-\> B:40:0x0025, CROSS_EDGE: B:41:0x0010 \-\> B:33:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r2 'outline' Landroid\/graphics\/Outline;\l  \-1 \-0x0025: r3 'path' Landroid\/graphics\/Path;\lTryCatch #0 \{IllegalArgumentException \-\> 0x0014, blocks: (B:31:0x0010), top: B:41:0x0010 \}\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_43;
Node_43 -> Node_25;
Node_29 -> Node_30;
Node_30 -> Node_35;
Node_30 -> Node_41[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_44;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_45;
Node_39 -> Node_40;
Node_40 -> Node_25;
Node_45 -> Node_25;
Node_44 -> Node_25;
Node_41 -> Node_31;
Node_41 -> Node_33;
Node_31 -> Node_42;
Node_31 -> Node_46;
Node_42 -> Node_33;
Node_46 -> Node_25;
Node_33 -> Node_47;
Node_47 -> Node_25;
}

