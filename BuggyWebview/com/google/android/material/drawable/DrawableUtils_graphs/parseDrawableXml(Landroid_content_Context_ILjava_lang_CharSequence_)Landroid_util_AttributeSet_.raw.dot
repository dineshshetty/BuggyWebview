digraph "CFG forcom.google.android.material.drawable.DrawableUtils.parseDrawableXml(Landroid\/content\/Context;ILjava\/lang\/CharSequence;)Landroid\/util\/AttributeSet;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|TRY_ENTER\lTryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x0000: INVOKE  (r0 I:android.content.res.Resources) = (r5 I:android.content.Context A[D('context' android.content.Context)]) type: VIRTUAL call: android.content.Context.getResources():android.content.res.Resources A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:():android.content.res.Resources (c), TRY_ENTER] (LINE:104)\l0x0004: INVOKE  (r0 I:android.content.res.XmlResourceParser) = (r0 I:android.content.res.Resources), (r6 I:int A[D('id' int)]) type: VIRTUAL call: android.content.res.Resources.getXml(int):android.content.res.XmlResourceParser A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(int):android.content.res.XmlResourceParser throws android.content.res.Resources$NotFoundException (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0008|LOOP_START\lTryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lLOOP:0: B:27:0x0008\-\>B:30:0x0010\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x0008: INVOKE  (r1 I:int) = (r0 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: INTERFACE call: org.xmlpull.v1.XmlPullParser.next():int A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:():int throws java.io.IOException, org.xmlpull.v1.XmlPullParserException (c)] (LINE:108)\l0x000c: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:109)\l}"];
Node_28 [shape=record,label="{28\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0012 \l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|0x000f: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|LOOP_END\lLOOP:0: B:27:0x0008\-\>B:30:0x0010\l|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0008 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0012|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x003f  (LINE:110)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|TryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x0014: INVOKE  (r2 I:java.lang.String) = (r0 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: INTERFACE call: org.xmlpull.v1.XmlPullParser.getName():java.lang.String A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:():java.lang.String (c)] (LINE:114)\l0x0018: INVOKE  (r2 I:boolean) = (r2 I:java.lang.CharSequence), (r7 I:java.lang.CharSequence A[D('startTag' java.lang.CharSequence)]) type: STATIC call: android.text.TextUtils.equals(java.lang.CharSequence, java.lang.CharSequence):boolean A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(java.lang.CharSequence, java.lang.CharSequence):boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0023 \l}"];
Node_34 [shape=record,label="{34\:\ 0x001e|TryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x001e: INVOKE  (r2 I:android.util.AttributeSet) = (r0 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: STATIC call: android.util.Xml.asAttributeSet(org.xmlpull.v1.XmlPullParser):android.util.AttributeSet A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(org.xmlpull.v1.XmlPullParser):android.util.AttributeSet (c)] (LINE:118)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|RETURN\l|0x0022: RETURN  (r2 I:android.util.AttributeSet A[D('attrs' android.util.AttributeSet)])  (LINE:120)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0023|TryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x0023: NEW_INSTANCE  (r2 I:org.xmlpull.v1.XmlPullParserException A[D('attrs' android.util.AttributeSet)]) =  org.xmlpull.v1.XmlPullParserException A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049] (LINE:115)\l0x0025: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049]\l0x0027: INVOKE  (r3 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:():void (c)]\l0x002a: CONST_STR  (r4 I:java.lang.String) =  \"Must have a \<\" \l0x002c: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002f: INVOKE  (r3 I:java.lang.StringBuilder), (r7 I:java.lang.Object A[D('startTag' java.lang.CharSequence)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0032: CONST_STR  (r4 I:java.lang.String) =  \"\> start tag\" \l0x0034: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0037: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:():java.lang.String (c)]\l0x003b: INVOKE  (r2 I:org.xmlpull.v1.XmlPullParserException), (r3 I:java.lang.String) type: DIRECT call: org.xmlpull.v1.XmlPullParserException.\<init\>(java.lang.String):void A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(java.lang.String):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x003e|TryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x003e: THROW  (r2 I:java.lang.Throwable) A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049]\l}"];
Node_38 [shape=record,label="{38\:\ 0x003f|TryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x003f: NEW_INSTANCE  (r2 I:org.xmlpull.v1.XmlPullParserException) =  org.xmlpull.v1.XmlPullParserException A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049] (LINE:111)\l0x0041: CONST_STR  (r3 I:java.lang.String) =  \"No start tag found\" \l0x0043: INVOKE  (r2 I:org.xmlpull.v1.XmlPullParserException), (r3 I:java.lang.String) type: DIRECT call: org.xmlpull.v1.XmlPullParserException.\<init\>(java.lang.String):void A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, MD:(java.lang.String):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0046|TRY_LEAVE\lTryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\lCatch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049\l|0x0046: THROW  (r2 I:java.lang.Throwable) A[Catch: IOException \-\> 0x0047, IOException \| XmlPullParserException \-\> 0x0049, TRY_LEAVE]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0012|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0049|ExcHandler: IOException \| XmlPullParserException \-\> 0x0049\l|0x0049: MOVE_EXCEPTION  (r0 I:org.xmlpull.v1.XmlPullParserException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IOException \| XmlPullParserException \-\> 0x0049]\l}"];
Node_43 [shape=record,label="{43\:\ 0x004a|0x004a: NEW_INSTANCE  (r1 I:android.content.res.Resources$NotFoundException) =  android.content.res.Resources$NotFoundException  (LINE:122)\l0x004c: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x004e: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0051: CONST_STR  (r3 I:java.lang.String) =  \"Can't load badge resource ID #0x\" \l0x0053: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0056: INVOKE  (r3 I:java.lang.String) = (r6 I:int A[D('id' int)]) type: STATIC call: java.lang.Integer.toHexString(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:123)\l0x005a: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0061: INVOKE  (r1 I:android.content.res.Resources$NotFoundException), (r2 I:java.lang.String) type: DIRECT call: android.content.res.Resources.NotFoundException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l0x0064: INVOKE  \l  (r1 I:android.content.res.Resources$NotFoundException A[D('exception' android.content.res.Resources$NotFoundException)])\l  (r0 I:java.lang.Throwable A[D('e' java.lang.Exception)])\l type: VIRTUAL call: android.content.res.Resources.NotFoundException.initCause(java.lang.Throwable):java.lang.Throwable A[MD:(java.lang.Throwable):java.lang.Throwable (s)] (LINE:124)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0067|0x0067: THROW  (r1 I:java.lang.Throwable A[D('exception' android.content.res.Resources$NotFoundException)])  (LINE:125)\l}"];
MethodNode[shape=record,label="{public static android.util.AttributeSet com.google.android.material.drawable.DrawableUtils.parseDrawableXml((r5 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[D('startTag' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x0010 \-\> B:27:0x0008, CROSS_EDGE: B:37:0x003e \-\> B:25:?, CROSS_EDGE: B:39:0x0046 \-\> B:25:?, CROSS_EDGE: B:28:0x000d \-\> B:31:0x0012, CROSS_EDGE: B:44:0x0067 \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0022\-0x0023: r2 'attrs' Landroid\/util\/AttributeSet;\l  \-1 \-0x003e: r5 'context' Landroid\/content\/Context;\l  \-1 \-0x003e: r6 'id' I\l  \-1 \-0x003e: r7 'startTag' Ljava\/lang\/CharSequence;\l  0x003f\-0x0046: r5 'context' Landroid\/content\/Context;\l  0x003f\-0x0046: r6 'id' I\l  0x003f\-0x0046: r7 'startTag' Ljava\/lang\/CharSequence;\l  0x0008\-0x0047: r0 'parser' Lorg\/xmlpull\/v1\/XmlPullParser;\l  0x000c\-0x0047: r1 'type' I\l  0x004a\-0x0067: r0 'e' Ljava\/lang\/Exception;\l  0x0064\-0x0067: r1 'exception' Landroid\/content\/res\/Resources$NotFoundException;\l  0x0047\-0x0067: r5 'context' Landroid\/content\/Context;\l  0x0047\-0x0067: r6 'id' I\l  0x0047\-0x0067: r7 'startTag' Ljava\/lang\/CharSequence;\lTryCatch #2 \{IOException \| XmlPullParserException \-\> 0x0049, blocks: (B:26:0x0000, B:27:0x0008, B:32:0x0014, B:34:0x001e, B:36:0x0023, B:37:0x003e, B:38:0x003f, B:39:0x0046), top: B:45:0x0000 \}\l}"];
MethodNode -> Node_24;Node_24 -> Node_45;
Node_45 -> Node_26;
Node_45 -> Node_42;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_47;
Node_29 -> Node_30;
Node_30 -> Node_27;
Node_30 -> Node_46[style=dashed];
Node_46 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_38;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_25;
Node_36 -> Node_37;
Node_37 -> Node_25;
Node_38 -> Node_39;
Node_39 -> Node_25;
Node_47 -> Node_31;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_25;
}

