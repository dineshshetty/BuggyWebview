digraph "CFG forcom.google.android.material.timepicker.TimePickerClockPresenter.performHapticFeedback(II)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.timepicker.TimeModel) = (r2 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:149)\l0x0002: IGET  (r0 I:int) = (r0 I:com.google.android.material.timepicker.TimeModel) com.google.android.material.timepicker.TimeModel.minute int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prevMinute' int)])  \-\> B:19:0x000c \l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|0x0006: IGET  (r0 I:com.google.android.material.timepicker.TimeModel) = (r2 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel \l0x0008: IGET  (r0 I:int) = (r0 I:com.google.android.material.timepicker.TimeModel) com.google.android.material.timepicker.TimeModel.hour int \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prevHour' int)])  \-\> B:25:? \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN   A[SYNTHETIC] (LINE:153)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:150)\l0x000e: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:22:0x0014 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|0x0015: IGET  (r1 I:com.google.android.material.timepicker.TimePickerView) = (r2 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.timePickerView com.google.android.material.timepicker.TimePickerView  (LINE:151)\l0x0017: INVOKE  (r1 I:com.google.android.material.timepicker.TimePickerView), (r0 I:int A[D('feedbackKey' int)]) type: VIRTUAL call: com.google.android.material.timepicker.TimePickerView.performHapticFeedback(int):boolean A[MD:(int):boolean (s)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: RETURN    (LINE:153)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|0x0014: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private void com.google.android.material.timepicker.TimePickerClockPresenter.performHapticFeedback((r2 'this' I:com.google.android.material.timepicker.TimePickerClockPresenter A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('prevHour' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('prevMinute' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0014 \-\> B:23:0x0015, CROSS_EDGE: B:18:0x000a \-\> B:24:0x001a, CROSS_EDGE: B:16:0x0004 \-\> B:19:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x001a: r0 'feedbackKey' I\l  \-1 \-0x001a: r3 'prevHour' I\l  \-1 \-0x001a: r4 'prevMinute' I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_25 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_14;
Node_22 -> Node_23;
}

