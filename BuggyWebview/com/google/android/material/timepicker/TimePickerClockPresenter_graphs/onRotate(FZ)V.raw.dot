digraph "CFG forcom.google.android.material.timepicker.TimePickerClockPresenter.onRotate(FZ)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.broadcasting boolean  (LINE:115)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0005 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:116)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|0x0005: IGET  (r0 I:com.google.android.material.timepicker.TimeModel) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:119)\l0x0007: IGET  (r0 I:int) = (r0 I:com.google.android.material.timepicker.TimeModel) com.google.android.material.timepicker.TimeModel.hour int \l0x0009: IGET  (r1 I:com.google.android.material.timepicker.TimeModel) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:120)\l0x000b: IGET  (r1 I:int) = (r1 I:com.google.android.material.timepicker.TimeModel) com.google.android.material.timepicker.TimeModel.minute int \l0x000d: INVOKE  (r2 I:int) = (r8 I:float A[D('rotation' float)]) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)] (LINE:121)\l0x0011: IGET  (r3 I:com.google.android.material.timepicker.TimeModel) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:122)\l0x0013: IGET  (r3 I:int) = (r3 I:com.google.android.material.timepicker.TimeModel) com.google.android.material.timepicker.TimeModel.selection int \l0x0015: CONST  (r4 I:??[int, float, short, byte, char]) = (12 ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0032 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|0x0019: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:123)\l0x001a: IGET  (r4 I:com.google.android.material.timepicker.TimeModel) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:124)\l0x001c: ARITH  (r5 I:int) = (r2 I:int A[D('rotationInt' int)]) + (r3 I:int A[D('minuteOffset' int)]) \l0x001e: ARITH  (r5 I:int) = (r5 I:int) \/ (6 int) \l0x0020: INVOKE  (r4 I:com.google.android.material.timepicker.TimeModel), (r5 I:int) type: VIRTUAL call: com.google.android.material.timepicker.TimeModel.setMinute(int):void A[MD:(int):void (m)]\l0x0023: IGET  (r4 I:com.google.android.material.timepicker.TimeModel) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:125)\l0x0025: IGET  (r4 I:int) = (r4 I:com.google.android.material.timepicker.TimeModel) com.google.android.material.timepicker.TimeModel.minute int \l0x0027: ARITH  (r4 I:int) = (r4 I:int) * (6 int) \l0x0029: CAST (r4 I:double) = (double) (r4 I:int) \l0x002a: INVOKE  (r4 I:double) = (r4 I:double) type: STATIC call: java.lang.Math.floor(double):double A[MD:(double):double (c)]\l0x002e: CAST (r4 I:float) = (float) (r4 I:double) \l0x002f: IPUT  (r4 I:float), (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.minuteRotation float \l}"];
Node_32 [shape=record,label="{32\:\ 0x0058|0x0058: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('animating' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:?  (LINE:142)\l}"];
Node_33 [shape=record,label="{33\:\ 0x005a|0x005a: INVOKE  (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) type: DIRECT call: com.google.android.material.timepicker.TimePickerClockPresenter.updateTime():void A[MD:():void (m)] (LINE:143)\l0x005d: INVOKE  \l  (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter)\l  (r0 I:int A[D('prevHour' int)])\l  (r1 I:int A[D('prevMinute' int)])\l type: DIRECT call: com.google.android.material.timepicker.TimePickerClockPresenter.performHapticFeedback(int, int):void A[MD:(int, int):void (m)] (LINE:144)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0060|RETURN\lORIG_RETURN\l|0x0060: RETURN    (LINE:146)\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0060: RETURN   A[SYNTHETIC] (LINE:146)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0032|0x0032: CONST  (r3 I:??[int, float, short, byte, char]) = (15 ??[int, float, short, byte, char])  (LINE:127)\l0x0034: ARITH  (r4 I:int) = (r2 I:int A[D('rotationInt' int)]) + (r3 I:int A[D('hourOffset' int)])  (LINE:129)\l0x0036: ARITH  (r4 I:int) = (r4 I:int) \/ (30 int) \l0x0038: IGET  (r5 I:com.google.android.material.timepicker.TimeModel) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:130)\l0x003a: IGET  (r5 I:int) = (r5 I:com.google.android.material.timepicker.TimeModel) com.google.android.material.timepicker.TimeModel.format int \l0x003c: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x003d|0x003d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x004c \l}"];
Node_28 [shape=record,label="{28\:\ 0x003f|0x003f: ARITH  (r4 I:int) = (r4 I:int A[D('hour' int)]) % (12 int)  (LINE:131)\l0x0041: IGET  (r5 I:com.google.android.material.timepicker.TimePickerView) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.timePickerView com.google.android.material.timepicker.TimePickerView  (LINE:132)\l0x0043: INVOKE  (r5 I:int) = (r5 I:com.google.android.material.timepicker.TimePickerView) type: VIRTUAL call: com.google.android.material.timepicker.TimePickerView.getCurrentLevel():int A[MD:():int (m)]\l0x0047: CONST  (r6 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0048|0x0048: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x004c \l}"];
Node_30 [shape=record,label="{30\:\ 0x004a|0x004a: ARITH  (r4 I:int) = (r4 I:int A[D('hour' int)]) + (12 int)  (LINE:133)\l}"];
Node_31 [shape=record,label="{31\:\ 0x004c|0x004c: IGET  (r5 I:com.google.android.material.timepicker.TimeModel) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.time com.google.android.material.timepicker.TimeModel  (LINE:137)\l0x004e: INVOKE  (r5 I:com.google.android.material.timepicker.TimeModel), (r4 I:int A[D('hour' int)]) type: VIRTUAL call: com.google.android.material.timepicker.TimeModel.setHour(int):void A[MD:(int):void (m)]\l0x0051: INVOKE  (r5 I:int) = (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) type: DIRECT call: com.google.android.material.timepicker.TimePickerClockPresenter.getHourRotation():int A[MD:():int (m)] (LINE:138)\l0x0055: CAST (r5 I:float) = (float) (r5 I:int) \l0x0056: IPUT  (r5 I:float), (r7 I:com.google.android.material.timepicker.TimePickerClockPresenter) com.google.android.material.timepicker.TimePickerClockPresenter.hourRotation float \l}"];
MethodNode[shape=record,label="{public void com.google.android.material.timepicker.TimePickerClockPresenter.onRotate((r7 'this' I:com.google.android.material.timepicker.TimePickerClockPresenter A[IMMUTABLE_TYPE, THIS]), (r8 I:float A[D('rotation' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('animating' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0060 \-\> B:19:?, CROSS_EDGE: B:32:0x0058 \-\> B:34:0x0060, CROSS_EDGE: B:31:0x004c \-\> B:32:0x0058, CROSS_EDGE: B:29:0x0048 \-\> B:31:0x004c, CROSS_EDGE: B:27:0x003d \-\> B:31:0x004c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x0031: r3 'minuteOffset' I\l  0x0034\-0x0058: r3 'hourOffset' I\l  0x0038\-0x0058: r4 'hour' I\l  0x0009\-0x0060: r0 'prevHour' I\l  0x000d\-0x0060: r1 'prevMinute' I\l  0x0011\-0x0060: r2 'rotationInt' I\l  \-1 \-0x0060: r8 'rotation' F\l  \-1 \-0x0060: r9 'animating' Z\lMETHOD_OVERRIDE: [com.google.android.material.timepicker.ClockHandView.OnRotateListener.onRotate(float, boolean):void]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_19;
Node_35 -> Node_19;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
}

