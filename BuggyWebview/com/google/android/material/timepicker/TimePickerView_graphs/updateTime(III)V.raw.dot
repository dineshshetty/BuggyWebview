digraph "CFG forcom.google.android.material.timepicker.TimePickerView.updateTime(III)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:200)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0001|0x0001: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('period' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0006 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|0x0003: SGET  (r1 I:int) =  com.google.android.material.R.id.material_clock_period_pm_button int  (LINE:201)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0009: IGET  (r2 I:com.google.android.material.button.MaterialButtonToggleGroup) = (r7 I:com.google.android.material.timepicker.TimePickerView) com.google.android.material.timepicker.TimePickerView.toggle com.google.android.material.button.MaterialButtonToggleGroup  (LINE:203)\l0x000b: INVOKE  (r2 I:com.google.android.material.button.MaterialButtonToggleGroup), (r1 I:int A[D('checkedId' int)]) type: VIRTUAL call: com.google.android.material.button.MaterialButtonToggleGroup.check(int):void A[MD:(int):void (m)]\l0x000e: INVOKE  (r2 I:android.content.res.Resources) = (r7 I:com.google.android.material.timepicker.TimePickerView) type: VIRTUAL call: com.google.android.material.timepicker.TimePickerView.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (s)] (LINE:204)\l0x0012: INVOKE  (r2 I:android.content.res.Configuration) = (r2 I:android.content.res.Resources) type: VIRTUAL call: android.content.res.Resources.getConfiguration():android.content.res.Configuration A[MD:():android.content.res.Configuration (c)]\l0x0016: IGET  (r2 I:java.util.Locale) = (r2 I:android.content.res.Configuration) android.content.res.Configuration.locale java.util.Locale \l0x0018: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[]  (LINE:205)\l0x001a: INVOKE  (r4 I:java.lang.Integer) = (r10 I:int A[D('minute' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x001e: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: APUT  (r3 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r4 I:??[OBJECT, ARRAY]) \l0x0021: CONST_STR  (r4 I:java.lang.String) =  \"%02d\" \l0x0023: INVOKE  (r3 I:java.lang.String) = (r2 I:java.util.Locale A[D('current' java.util.Locale)]), (r4 I:java.lang.String), (r3 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x0027: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[]  (LINE:206)\l0x0029: INVOKE  (r6 I:java.lang.Integer) = (r9 I:int A[D('hourOfDay' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x002d: APUT  (r0 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r6 I:??[OBJECT, ARRAY]) \l0x002f: INVOKE  (r0 I:java.lang.String) = (r2 I:java.util.Locale A[D('current' java.util.Locale)]), (r4 I:java.lang.String), (r0 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x0033: IGET  (r4 I:com.google.android.material.chip.Chip) = (r7 I:com.google.android.material.timepicker.TimePickerView) com.google.android.material.timepicker.TimePickerView.minuteView com.google.android.material.chip.Chip  (LINE:207)\l0x0035: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.getText():java.lang.CharSequence A[MD:():java.lang.CharSequence (s)]\l0x0039: INVOKE  (r4 I:boolean) = (r4 I:java.lang.CharSequence), (r3 I:java.lang.CharSequence A[D('minuteFormatted' java.lang.String)]) type: STATIC call: android.text.TextUtils.equals(java.lang.CharSequence, java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence):boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|0x003d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0044 \l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|0x003f: IGET  (r4 I:com.google.android.material.chip.Chip) = (r7 I:com.google.android.material.timepicker.TimePickerView) com.google.android.material.timepicker.TimePickerView.minuteView com.google.android.material.chip.Chip  (LINE:208)\l0x0041: INVOKE  (r4 I:com.google.android.material.chip.Chip), (r3 I:java.lang.CharSequence A[D('minuteFormatted' java.lang.String)]) type: VIRTUAL call: com.google.android.material.chip.Chip.setText(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (s)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0044|0x0044: IGET  (r4 I:com.google.android.material.chip.Chip) = (r7 I:com.google.android.material.timepicker.TimePickerView) com.google.android.material.timepicker.TimePickerView.hourView com.google.android.material.chip.Chip  (LINE:210)\l0x0046: INVOKE  (r4 I:java.lang.CharSequence) = (r4 I:com.google.android.material.chip.Chip) type: VIRTUAL call: com.google.android.material.chip.Chip.getText():java.lang.CharSequence A[MD:():java.lang.CharSequence (s)]\l0x004a: INVOKE  (r4 I:boolean) = (r4 I:java.lang.CharSequence), (r0 I:java.lang.CharSequence A[D('hourFormatted' java.lang.String)]) type: STATIC call: android.text.TextUtils.equals(java.lang.CharSequence, java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence):boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x004e|0x004e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:? \l}"];
Node_25 [shape=record,label="{25\:\ 0x0050|0x0050: IGET  (r4 I:com.google.android.material.chip.Chip) = (r7 I:com.google.android.material.timepicker.TimePickerView) com.google.android.material.timepicker.TimePickerView.hourView com.google.android.material.chip.Chip  (LINE:211)\l0x0052: INVOKE  (r4 I:com.google.android.material.chip.Chip), (r0 I:java.lang.CharSequence A[D('hourFormatted' java.lang.String)]) type: VIRTUAL call: com.google.android.material.chip.Chip.setText(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (s)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|RETURN\lORIG_RETURN\l|0x0055: RETURN    (LINE:213)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0055: RETURN   A[SYNTHETIC] (LINE:213)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: SGET  (r1 I:int) =  com.google.android.material.R.id.material_clock_period_am_button int  (LINE:202)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.timepicker.TimePickerView.updateTime((r7 'this' I:com.google.android.material.timepicker.TimePickerView A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('period' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('hourOfDay' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('minute' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x004e \-\> B:26:0x0055, CROSS_EDGE: B:21:0x003d \-\> B:23:0x0044, CROSS_EDGE: B:19:0x0006 \-\> B:20:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0033\-0x0055: r0 'hourFormatted' Ljava\/lang\/String;\l  0x0009\-0x0055: r1 'checkedId' I\l  0x0018\-0x0055: r2 'current' Ljava\/util\/Locale;\l  0x0027\-0x0055: r3 'minuteFormatted' Ljava\/lang\/String;\l  \-1 \-0x0055: r8 'period' I\l  \-1 \-0x0055: r9 'hourOfDay' I\l  \-1 \-0x0055: r10 'minute' I\lMETHOD_OVERRIDE: [com.google.android.material.timepicker.TimePickerControls.updateTime(int, int, int):void]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_15;
Node_27 -> Node_15;
Node_19 -> Node_20;
}

