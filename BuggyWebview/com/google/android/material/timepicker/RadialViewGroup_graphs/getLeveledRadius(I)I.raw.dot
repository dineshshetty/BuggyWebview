digraph "CFG forcom.google.android.material.timepicker.RadialViewGroup.getLeveledRadius(I)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:184)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0001|0x0001: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('level' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0010 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0003|0x0003: IGET  (r0 I:int) = (r2 I:com.google.android.material.timepicker.RadialViewGroup) com.google.android.material.timepicker.RadialViewGroup.radius int \l0x0005: CAST (r0 I:float) = (float) (r0 I:int) \l0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (1059648963(0x3f28f5c3, float:0.66) ??[int, float, short, byte, char]) \l0x0009: ARITH  (r0 I:float) = (r0 I:float) * (r1 I:float) \l0x000b: INVOKE  (r0 I:int) = (r0 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0012: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0010|0x0010: IGET  (r0 I:int) = (r2 I:com.google.android.material.timepicker.RadialViewGroup) com.google.android.material.timepicker.RadialViewGroup.radius int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{int com.google.android.material.timepicker.RadialViewGroup.getLeveledRadius((r2 'this' I:com.google.android.material.timepicker.RadialViewGroup A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('level' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0010 \-\> B:14:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r3 'level' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

