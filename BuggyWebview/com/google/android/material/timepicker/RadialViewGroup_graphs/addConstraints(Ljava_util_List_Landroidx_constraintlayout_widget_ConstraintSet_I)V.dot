digraph "CFG forcom.google.android.material.timepicker.RadialViewGroup.addConstraints(Ljava\/util\/List;Landroidx\/constraintlayout\/widget\/ConstraintSet;I)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|r0 = 0.0f\ljava.util.Iterator r1 = r6.iterator()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|LOOP_START\lLOOP:0: B:11:0x0005\-\>B:13:0x000b\lPHI: r0 \l  PHI: (r0v1 'currentAngle' float) = (r0v0 'currentAngle' float), (r0v2 'currentAngle' float) binds: [B:10:0x0000, B:13:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|if (r1.hasNext() == false) goto L5\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|LOOP_END\lLOOP:0: B:11:0x0005\-\>B:13:0x000b\l|android.view.View r2 = r1.next()\lr7.constrainCircle(r2.getId(), com.google.android.material.C0571R.C0574id.circle_center, r8, r0)\lfloat r0 = r0 + (360.0f \/ ((float) r6.size()))\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.timepicker.RadialViewGroup.addConstraints((r5v0 'this' com.google.android.material.timepicker.RadialViewGroup A[IMMUTABLE_TYPE, THIS]), (r6v0 'views' java.util.List\<android.view.View\> A[D('views' java.util.List\<android.view.View\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'constraintSet' androidx.constraintlayout.widget.ConstraintSet A[D('constraintSet' androidx.constraintlayout.widget.ConstraintSet), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'leveledRadius' int A[D('leveledRadius' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x000b \-\> B:11:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/util\/List\<Landroid\/view\/View;\>;Landroidx\/constraintlayout\/widget\/ConstraintSet;I)V\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

