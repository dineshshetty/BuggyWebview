digraph "CFG forcom.google.android.material.timepicker.ClockFaceView.1.onPreDraw()Z" {
subgraph cluster_Region_695698881 {
label = "R(1:(2:(2:5|6)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_786384633 {
label = "R(2:(2:5|6)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_907342960 {
label = "IF [B:3:0x0007] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0007|if (com.google.android.material.timepicker.ClockFaceView.this.isShown() == true) goto L5\l}"];
subgraph cluster_Region_1342916851 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000a|com.google.android.material.timepicker.ClockFaceView.this.getViewTreeObserver().removeOnPreDrawListener(r3)\lint int r0 = ((com.google.android.material.timepicker.ClockFaceView.this.getHeight() \/ 2) \- com.google.android.material.timepicker.ClockFaceView.this.clockHandView.getSelectorRadius()) \- com.google.android.material.timepicker.ClockFaceView.this.clockHandPadding\lcom.google.android.material.timepicker.ClockFaceView.this.setRadius(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1745074629 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0009|RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.timepicker.ClockFaceView.1.onPreDraw((r3v0 'this' com.google.android.material.timepicker.ClockFaceView$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:6:0x0032 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewTreeObserver.OnPreDrawListener.onPreDraw():boolean\}]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_4 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
}

