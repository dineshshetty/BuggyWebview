digraph "CFG forcom.google.android.material.search.SearchBar.layoutCenterView()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:android.view.View) = (r12 I:com.google.android.material.search.SearchBar) com.google.android.material.search.SearchBar.centerView android.view.View  (LINE:501)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:502)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r0 I:int) = (r0 I:android.view.View) type: VIRTUAL call: android.view.View.getMeasuredWidth():int A[MD:():int (c)] (LINE:505)\l0x0009: INVOKE  (r1 I:int) = (r12 I:com.google.android.material.search.SearchBar) type: VIRTUAL call: com.google.android.material.search.SearchBar.getMeasuredWidth():int A[MD:():int (s)] (LINE:506)\l0x000d: ARITH  (r1 I:int) = (r1 I:int) \/ (2 int) \l0x000f: ARITH  (r2 I:int) = (r0 I:int A[D('centerViewWidth' int)]) \/ (2 int) \l0x0011: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0012: ARITH  (r2 I:int) = (r1 I:int A[D('left' int)]) + (r0 I:int A[D('centerViewWidth' int)])  (LINE:507)\l0x0014: IGET  (r3 I:android.view.View) = (r12 I:com.google.android.material.search.SearchBar) com.google.android.material.search.SearchBar.centerView android.view.View  (LINE:509)\l0x0016: INVOKE  (r9 I:int) = (r3 I:android.view.View) type: VIRTUAL call: android.view.View.getMeasuredHeight():int A[MD:():int (c)]\l0x001a: INVOKE  (r3 I:int) = (r12 I:com.google.android.material.search.SearchBar) type: VIRTUAL call: com.google.android.material.search.SearchBar.getMeasuredHeight():int A[MD:():int (s)] (LINE:510)\l0x001e: ARITH  (r3 I:int) = (r3 I:int) \/ (2 int) \l0x0020: ARITH  (r4 I:int) = (r9 I:int A[D('centerViewHeight' int)]) \/ (2 int) \l0x0022: ARITH  (r10 I:int) = (r3 I:int) \- (r4 I:int) \l0x0024: ARITH  (r11 I:int) = (r10 I:int A[D('top' int)]) + (r9 I:int A[D('centerViewHeight' int)])  (LINE:511)\l0x0026: IGET  (r4 I:android.view.View) = (r12 I:com.google.android.material.search.SearchBar) com.google.android.material.search.SearchBar.centerView android.view.View  (LINE:513)\l0x0028: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY]) \l0x0029: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('left' int)]) \l0x002a: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('top' int)]) \l0x002b: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('right' int)]) \l0x002c: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bottom' int)]) \l0x002d: INVOKE  \l  (r3 I:com.google.android.material.search.SearchBar)\l  (r4 I:android.view.View)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:int)\l type: DIRECT call: com.google.android.material.search.SearchBar.layoutChild(android.view.View, int, int, int, int):void A[MD:(android.view.View, int, int, int, int):void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|RETURN\l|0x0030: RETURN    (LINE:514)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.search.SearchBar.layoutCenterView((r12 'this' I:com.google.android.material.search.SearchBar A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0030 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0030: r0 'centerViewWidth' I\l  0x0012\-0x0030: r1 'left' I\l  0x0014\-0x0030: r2 'right' I\l  0x001a\-0x0030: r9 'centerViewHeight' I\l  0x0024\-0x0030: r10 'top' I\l  0x0026\-0x0030: r11 'bottom' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

