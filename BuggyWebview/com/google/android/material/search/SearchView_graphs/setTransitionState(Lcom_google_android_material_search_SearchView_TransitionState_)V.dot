digraph "CFG forcom.google.android.material.search.SearchView.setTransitionState(Lcom\/google\/android\/material\/search\/SearchView$TransitionState;)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000}"];
Node_25 [shape=record,label="{25\:\ 0x0006|if (r4.currentTransitionState.equals(r5) == false) goto L5\l}"];
Node_26 [shape=record,label="{26\:\ 0x0008|RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0009|com.google.android.material.search.SearchView$TransitionState r0 = r4.currentTransitionState\lr4.currentTransitionState = r5\ljava.util.LinkedHashSet r1 = new java.util.LinkedHashSet\<\>(r4.transitionListeners)\ljava.util.Iterator r2 = r1.iterator()\l}"];
Node_28 [shape=record,label="{28\:\ 0x0018|LOOP_START\lLOOP:0: B:28:0x0018\-\>B:30:0x001e\l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|if (r2.hasNext() == false) goto L9\l}"];
Node_30 [shape=record,label="{30\:\ 0x001e|LOOP_END\lLOOP:0: B:28:0x0018\-\>B:30:0x001e\l|com.google.android.material.search.SearchView$TransitionListener r3 = r2.next()\lr3.onStateChanged(r4, r0, r5)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0028|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0028|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.search.SearchView.setTransitionState((r4v0 'this' com.google.android.material.search.SearchView A[IMMUTABLE_TYPE, THIS]), (r5v0 'state' com.google.android.material.search.SearchView$TransitionState A[D('state' com.google.android.material.search.SearchView$TransitionState), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x001e \-\> B:28:0x0018, CROSS_EDGE: B:31:0x0028 \-\> B:23:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_28;
Node_32 -> Node_31;
Node_31 -> Node_23;
}

