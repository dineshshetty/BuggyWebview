digraph "CFG forcom.google.android.material.search.SearchView.getOverlayElevation()F" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.search.SearchBar) = (r2 I:com.google.android.material.search.SearchView) com.google.android.material.search.SearchView.searchBar com.google.android.material.search.SearchBar  (LINE:278)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0009 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: INVOKE  (r0 I:float) = (r0 I:com.google.android.material.search.SearchBar) type: VIRTUAL call: com.google.android.material.search.SearchBar.getCompatElevation():float A[MD:():float (m)] (LINE:279)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:float) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|0x0009: INVOKE  (r0 I:android.content.res.Resources) = (r2 I:com.google.android.material.search.SearchView) type: VIRTUAL call: com.google.android.material.search.SearchView.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (s)] (LINE:281)\l0x000d: SGET  (r1 I:int) =  com.google.android.material.R.dimen.m3_searchview_elevation int \l0x000f: INVOKE  (r0 I:float) = (r0 I:android.content.res.Resources), (r1 I:int) type: VIRTUAL call: android.content.res.Resources.getDimension(int):float A[MD:(int):float throws android.content.res.Resources$NotFoundException (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{private float com.google.android.material.search.SearchView.getOverlayElevation((r2 'this' I:com.google.android.material.search.SearchView A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0013 \-\> B:17:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

