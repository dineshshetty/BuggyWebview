digraph "CFG forcom.google.android.material.search.SearchView.SavedState.writeToParcel(Landroid\/os\/Parcel;I)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  \l  (r1 I:androidx.customview.view.AbsSavedState)\l  (r2 I:android.os.Parcel A[D('dest' android.os.Parcel)])\l  (r3 I:int A[D('flags' int)])\l type: SUPER call: androidx.customview.view.AbsSavedState.writeToParcel(android.os.Parcel, int):void A[MD:(android.os.Parcel, int):void (m)] (LINE:986)\l0x0003: IGET  (r0 I:java.lang.String) = (r1 I:com.google.android.material.search.SearchView$SavedState) com.google.android.material.search.SearchView.SavedState.text java.lang.String  (LINE:987)\l0x0005: INVOKE  (r2 I:android.os.Parcel A[D('dest' android.os.Parcel)]), (r0 I:java.lang.String) type: VIRTUAL call: android.os.Parcel.writeString(java.lang.String):void A[MD:(java.lang.String):void (c)]\l0x0008: IGET  (r0 I:int) = (r1 I:com.google.android.material.search.SearchView$SavedState) com.google.android.material.search.SearchView.SavedState.visibility int  (LINE:988)\l0x000a: INVOKE  (r2 I:android.os.Parcel A[D('dest' android.os.Parcel)]), (r0 I:int) type: VIRTUAL call: android.os.Parcel.writeInt(int):void A[MD:(int):void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|RETURN\l|0x000d: RETURN    (LINE:989)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.search.SearchView.SavedState.writeToParcel((r1 'this' I:com.google.android.material.search.SearchView$SavedState A[IMMUTABLE_TYPE, THIS]), (r2 I:android.os.Parcel A[D('dest' android.os.Parcel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r2 'dest' Landroid\/os\/Parcel;\l  \-1 \-0x000d: r3 'flags' I\lMETHOD_OVERRIDE: [ClspMth\{android.os.Parcelable.writeToParcel(android.os.Parcel, int):void\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

