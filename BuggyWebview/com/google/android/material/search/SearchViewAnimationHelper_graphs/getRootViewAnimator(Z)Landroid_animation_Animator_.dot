digraph "CFG forcom.google.android.material.search.SearchViewAnimationHelper.getRootViewAnimator(Z)Landroid\/animation\/Animator;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|android.graphics.Rect r0 = com.google.android.material.internal.ViewUtils.calculateRectFromBounds(r7.searchView)\landroid.graphics.Rect r1 = calculateFromClipBounds()\landroid.graphics.Rect r2 = new android.graphics.Rect(r1)\lfloat r3 = r7.searchBar.getCornerSize()\landroid.animation.ValueAnimator r4 = android.animation.ValueAnimator.ofObject(new com.google.android.material.internal.RectEvaluator(r2), new java.lang.Object[]\{r1, r0\})\lr4.addUpdateListener(new com.google.android.material.search.SearchViewAnimationHelper$$ExternalSyntheticLambda2())\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|if (r8 == false) goto L7\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|r5 = 300\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|PHI: r5 \l  PHI: (r5v4 long) = (r5v3 long), (r5v7 long) binds: [B:13:0x0034, B:12:0x0031] A[DONT_GENERATE, DONT_INLINE]\l|r4.setDuration(r5)\lr4.setInterpolator(com.google.android.material.internal.ReversableAnimatedValueInterpolator.m59of(r8, com.google.android.material.animation.AnimationUtils.FAST_OUT_SLOW_IN_INTERPOLATOR))\l}"];
Node_15 [shape=record,label="{15\:\ 0x0042|RETURN\l|return r4\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034|r5 = 250\l}"];
MethodNode[shape=record,label="{private android.animation.Animator com.google.android.material.search.SearchViewAnimationHelper.getRootViewAnimator((r7v0 'this' com.google.android.material.search.SearchViewAnimationHelper A[IMMUTABLE_TYPE, THIS]), (r8v0 'show' boolean A[D('show' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0034 \-\> B:14:0x0036\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

