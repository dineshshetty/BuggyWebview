digraph "CFG forcom.google.android.material.search.SearchViewAnimationHelper.getFromTranslationXEnd(Landroid\/view\/View;)I" {
subgraph cluster_Region_340175302 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0001|int int r0 = androidx.core.view.MarginLayoutParamsCompat.getMarginEnd((android.view.ViewGroup.MarginLayoutParams) r4.getLayoutParams())\l}"];
subgraph cluster_Region_1148111635 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_837047881 {
label = "IF [B:11:0x0011] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0011|if (com.google.android.material.internal.ViewUtils.isLayoutRtl(r3.searchBar) != false) goto L3\l}"];
subgraph cluster_Region_1301347431 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r3.searchBar.getLeft() \- r0\l}"];
}
}
subgraph cluster_Region_1346519167 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0029|RETURN\lORIG_RETURN\l|return (r3.searchBar.getRight() \- r3.searchView.getWidth()) + r0\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0013}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001b}"];
MethodNode[shape=record,label="{private int com.google.android.material.search.SearchViewAnimationHelper.getFromTranslationXEnd((r3v0 'this' com.google.android.material.search.SearchViewAnimationHelper A[IMMUTABLE_TYPE, THIS]), (r4v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001b \-\> B:14:0x0029\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_15 -> Node_9;
Node_14 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_15;
Node_13 -> Node_14;
}

