digraph "CFG forcom.google.android.material.imageview.ShapeableImageView.setContentPaddingRelative(IIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0001|super.setPaddingRelative((super.getPaddingStart() \- getContentPaddingStart()) + r6, (super.getPaddingTop() \- r5.topContentPadding) + r7, (super.getPaddingEnd() \- getContentPaddingEnd()) + r8, (super.getPaddingBottom() \- r5.bottomContentPadding) + r9)\l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|if (isRtl() == false) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|r0 = r8\l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|PHI: r0 \l  PHI: (r0v5 int) = (r0v4 int), (r0v10 int) binds: [B:5:0x0030, B:4:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|r5.leftContentPadding = r0\lr5.topContentPadding = r7\l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|if (isRtl() == false) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|r0 = r6\l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|PHI: r0 \l  PHI: (r0v8 int) = (r0v7 int), (r0v9 int) binds: [B:9:0x003d, B:8:0x003b] A[DONT_GENERATE, DONT_INLINE]\l|r5.rightContentPadding = r0\lr5.bottomContentPadding = r9\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|r0 = r8\l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|r0 = r6\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.imageview.ShapeableImageView.setContentPaddingRelative((r5v0 'this' com.google.android.material.imageview.ShapeableImageView A[IMMUTABLE_TYPE, THIS]), (r6v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'top' int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'end' int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'bottom' int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x003d \-\> B:10:0x003e, CROSS_EDGE: B:5:0x0030 \-\> B:6:0x0031\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

