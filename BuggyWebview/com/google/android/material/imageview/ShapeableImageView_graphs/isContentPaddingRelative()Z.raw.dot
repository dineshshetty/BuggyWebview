digraph "CFG forcom.google.android.material.imageview.ShapeableImageView.isContentPaddingRelative()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.startContentPadding int  (LINE:252)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r2 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.endContentPadding int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000b \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|SYNTHETIC\lRETURN\l|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000e: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.imageview.ShapeableImageView.isContentPaddingRelative((r2 'this' I:com.google.android.material.imageview.ShapeableImageView A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x000d \-\> B:9:0x000e, CROSS_EDGE: B:3:0x0004 \-\> B:8:0x000d\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_1;
Node_8 -> Node_1;
}

