digraph "CFG forcom.google.android.material.imageview.ShapeableImageView.setContentPaddingRelative(IIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0001|0x0001: INVOKE  (r0 I:int) = (r5 I:androidx.appcompat.widget.AppCompatImageView) type: SUPER call: androidx.appcompat.widget.AppCompatImageView.getPaddingStart():int A[MD:():int (s)] (LINE:240)\l0x0005: INVOKE  (r1 I:int) = (r5 I:com.google.android.material.imageview.ShapeableImageView) type: VIRTUAL call: com.google.android.material.imageview.ShapeableImageView.getContentPaddingStart():int A[MD:():int (m)]\l0x0009: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x000a: ARITH  (r0 I:int) = (r0 I:int) + (r6 I:int A[D('start' int)]) \l0x000b: INVOKE  (r1 I:int) = (r5 I:androidx.appcompat.widget.AppCompatImageView) type: SUPER call: androidx.appcompat.widget.AppCompatImageView.getPaddingTop():int A[MD:():int (s)] (LINE:241)\l0x000f: IGET  (r2 I:int) = (r5 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.topContentPadding int \l0x0011: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0012: ARITH  (r1 I:int) = (r1 I:int) + (r7 I:int A[D('top' int)]) \l0x0013: INVOKE  (r2 I:int) = (r5 I:androidx.appcompat.widget.AppCompatImageView) type: SUPER call: androidx.appcompat.widget.AppCompatImageView.getPaddingEnd():int A[MD:():int (s)] (LINE:242)\l0x0017: INVOKE  (r3 I:int) = (r5 I:com.google.android.material.imageview.ShapeableImageView) type: VIRTUAL call: com.google.android.material.imageview.ShapeableImageView.getContentPaddingEnd():int A[MD:():int (m)]\l0x001b: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001c: ARITH  (r2 I:int) = (r2 I:int) + (r8 I:int A[D('end' int)]) \l0x001d: INVOKE  (r3 I:int) = (r5 I:androidx.appcompat.widget.AppCompatImageView) type: SUPER call: androidx.appcompat.widget.AppCompatImageView.getPaddingBottom():int A[MD:():int (s)] (LINE:243)\l0x0021: IGET  (r4 I:int) = (r5 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.bottomContentPadding int \l0x0023: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0024: ARITH  (r3 I:int) = (r3 I:int) + (r9 I:int A[D('bottom' int)]) \l0x0025: INVOKE  (r5 I:androidx.appcompat.widget.AppCompatImageView), (r0 I:int), (r1 I:int), (r2 I:int), (r3 I:int) type: SUPER call: androidx.appcompat.widget.AppCompatImageView.setPaddingRelative(int, int, int, int):void A[MD:(int, int, int, int):void (s)] (LINE:239)\l0x0028: INVOKE  (r0 I:boolean) = (r5 I:com.google.android.material.imageview.ShapeableImageView) type: DIRECT call: com.google.android.material.imageview.ShapeableImageView.isRtl():boolean A[MD:():boolean (m)] (LINE:245)\l}"];
Node_3 [shape=record,label="{3\:\ 0x002c|0x002c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x002e|0x002e: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('end' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0031|0x0031: IPUT  (r0 I:int), (r5 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.leftContentPadding int \l0x0033: IPUT  (r7 I:int A[D('top' int)]), (r5 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.topContentPadding int  (LINE:246)\l0x0035: INVOKE  (r0 I:boolean) = (r5 I:com.google.android.material.imageview.ShapeableImageView) type: DIRECT call: com.google.android.material.imageview.ShapeableImageView.isRtl():boolean A[MD:():boolean (m)] (LINE:247)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0039|0x0039: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003d \l}"];
Node_8 [shape=record,label="{8\:\ 0x003b|0x003b: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003e|0x003e: IPUT  (r0 I:int), (r5 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.rightContentPadding int \l0x0040: IPUT  (r9 I:int A[D('bottom' int)]), (r5 I:com.google.android.material.imageview.ShapeableImageView) com.google.android.material.imageview.ShapeableImageView.bottomContentPadding int  (LINE:248)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|RETURN\l|0x0042: RETURN    (LINE:249)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|0x003d: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('end' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|0x0030: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
MethodNode[shape=record,label="{public void com.google.android.material.imageview.ShapeableImageView.setContentPaddingRelative((r5 'this' I:com.google.android.material.imageview.ShapeableImageView A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x003d \-\> B:10:0x003e, CROSS_EDGE: B:5:0x0030 \-\> B:6:0x0031\lDebug Info:\l  \-1 \-0x0042: r6 'start' I\l  \-1 \-0x0042: r7 'top' I\l  \-1 \-0x0042: r8 'end' I\l  \-1 \-0x0042: r9 'bottom' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

