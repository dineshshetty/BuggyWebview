digraph "CFG forcom.google.android.material.textview.MaterialTextView.applyLineHeightFromViewAppearance(Landroid\/content\/res\/Resources$Theme;I)V" {
subgraph cluster_Region_1178858928 {
label = "R(2:1|(1:(1:3)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|android.content.res.TypedArray android.content.res.TypedArray r0 = r6.obtainStyledAttributes(r7, com.google.android.material.C0571R.styleable.MaterialTextAppearance)\lint int r1 = readFirstAvailableDimension(getContext(), r0, com.google.android.material.C0571R.styleable.MaterialTextAppearance_android_lineHeight, com.google.android.material.C0571R.styleable.MaterialTextAppearance_lineHeight)\lr0.recycle()\l}"];
subgraph cluster_Region_4918504 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_76506048 {
label = "IF [B:10:0x001f] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001f|if (r1 \>= 0) goto L3\l}"];
subgraph cluster_Region_1938470106 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0021|setLineHeight(r1)\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0024|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.textview.MaterialTextView.applyLineHeightFromViewAppearance((r5v0 'this' com.google.android.material.textview.MaterialTextView A[IMMUTABLE_TYPE, THIS]), (r6v0 'theme' android.content.res.Resources$Theme A[D('theme' android.content.res.Resources$Theme), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'resId' int A[D('resId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x001f \-\> B:12:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

