digraph "CFG forcom.google.android.material.floatingactionbutton.BorderDrawable.onStateChange([I)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:android.content.res.ColorStateList) = (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) com.google.android.material.floatingactionbutton.BorderDrawable.borderTint android.content.res.ColorStateList  (LINE:208)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0013 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IGET  (r1 I:int) = (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) com.google.android.material.floatingactionbutton.BorderDrawable.currentBorderTintColor int  (LINE:209)\l0x0006: INVOKE  (r0 I:int) = (r0 I:android.content.res.ColorStateList), (r3 I:int[] A[D('state' int[])]), (r1 I:int) type: VIRTUAL call: android.content.res.ColorStateList.getColorForState(int[], int):int A[MD:(int[], int):int (c)]\l0x000a: IGET  (r1 I:int) = (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) com.google.android.material.floatingactionbutton.BorderDrawable.currentBorderTintColor int  (LINE:210)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newColor' int)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0013 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:211)\l0x000f: IPUT  (r1 I:boolean), (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) com.google.android.material.floatingactionbutton.BorderDrawable.invalidateShader boolean \l0x0011: IPUT  (r0 I:int A[D('newColor' int)]), (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) com.google.android.material.floatingactionbutton.BorderDrawable.currentBorderTintColor int  (LINE:212)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|0x0013: IGET  (r0 I:boolean A[D('newColor' int)]) = (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) com.google.android.material.floatingactionbutton.BorderDrawable.invalidateShader boolean  (LINE:215)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|0x0017: INVOKE  (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) type: VIRTUAL call: com.google.android.material.floatingactionbutton.BorderDrawable.invalidateSelf():void A[MD:():void (c)] (LINE:216)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001a|0x001a: IGET  (r0 I:boolean) = (r2 I:com.google.android.material.floatingactionbutton.BorderDrawable) com.google.android.material.floatingactionbutton.BorderDrawable.invalidateShader boolean  (LINE:218)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected boolean com.google.android.material.floatingactionbutton.BorderDrawable.onStateChange((r2 'this' I:com.google.android.material.floatingactionbutton.BorderDrawable A[IMMUTABLE_TYPE, THIS]), (r3 I:int[] A[D('state' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:20:0x0015 \-\> B:22:0x001a, CROSS_EDGE: B:17:0x000c \-\> B:19:0x0013, CROSS_EDGE: B:15:0x0002 \-\> B:19:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0013: r0 'newColor' I\l  \-1 \-0x001c: r3 'state' [I\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.onStateChange(int[]):boolean\}]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

