digraph "CFG forcom.google.android.material.internal.TextDrawableHelper.calculateTextWidth(Ljava\/lang\/CharSequence;)F" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('charSequence' java.lang.CharSequence)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0004  (LINE:110)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|RETURN\l|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:111)\l0x0003: RETURN  (r0 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IGET  (r0 I:android.text.TextPaint) = (r3 I:com.google.android.material.internal.TextDrawableHelper) com.google.android.material.internal.TextDrawableHelper.textPaint android.text.TextPaint  (LINE:113)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x000b: INVOKE  (r0 I:float) = \l  (r0 I:android.text.TextPaint)\l  (r4 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)])\l  (r1 I:int)\l  (r2 I:int)\l type: VIRTUAL call: android.text.TextPaint.measureText(java.lang.CharSequence, int, int):float A[MD:(java.lang.CharSequence, int, int):float (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{private float com.google.android.material.internal.TextDrawableHelper.calculateTextWidth((r3 'this' I:com.google.android.material.internal.TextDrawableHelper A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000f \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r4 'charSequence' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

