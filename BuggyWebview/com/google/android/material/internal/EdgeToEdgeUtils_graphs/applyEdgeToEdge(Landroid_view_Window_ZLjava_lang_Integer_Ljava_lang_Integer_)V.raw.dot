digraph "CFG forcom.google.android.material.internal.EdgeToEdgeUtils.applyEdgeToEdge(Landroid\/view\/Window;ZLjava\/lang\/Integer;Ljava\/lang\/Integer;)V" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:77)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:31:0x0007 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0006|RETURN\l|0x0006: RETURN    (LINE:78)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:82)\l0x0008: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0009|0x0009: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('statusBarOverlapBackgroundColor' java.lang.Integer)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0014 \l}"];
Node_33 [shape=record,label="{33\:\ 0x000b|0x000b: INVOKE  (r2 I:int) = (r7 I:java.lang.Integer A[D('statusBarOverlapBackgroundColor' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:83)\l}"];
Node_34 [shape=record,label="{34\:\ 0x000f|0x000f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0012 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|0x0012: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0015|0x0015: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('navigationBarOverlapBackgroundColor' java.lang.Integer)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x001d  (LINE:84)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0017|0x0017: INVOKE  (r3 I:int) = (r8 I:java.lang.Integer A[D('navigationBarOverlapBackgroundColor' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:85)\l}"];
Node_40 [shape=record,label="{40\:\ 0x001b|0x001b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x001e \l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('useDefaultBackgroundColorForStatusBar' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0023  (LINE:86)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('useDefaultBackgroundColorForNavigationBar' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x003c \l}"];
Node_50 [shape=record,label="{50\:\ 0x003c|0x003c: ARITH  (r1 I:??[int, boolean] A[D('defaultBackgroundColor' int)]) = (r6 I:??[int, boolean, short, byte, char] A[D('edgeToEdgeEnabled' boolean)]) ^ (1 ??[boolean, int, float, short, byte, char])  (LINE:97)\l0x003e: INVOKE  (r5 I:android.view.Window A[D('window' android.view.Window)]), (r1 I:boolean) type: STATIC call: androidx.core.view.WindowCompat.setDecorFitsSystemWindows(android.view.Window, boolean):void A[MD:(android.view.Window, boolean):void (m)]\l0x0041: INVOKE  (r1 I:android.content.Context) = (r5 I:android.view.Window A[D('window' android.view.Window)]) type: VIRTUAL call: android.view.Window.getContext():android.content.Context A[MD:():android.content.Context (c)] (LINE:99)\l0x0045: INVOKE  (r1 I:int) = (r1 I:android.content.Context), (r6 I:boolean A[D('edgeToEdgeEnabled' boolean)]) type: STATIC call: com.google.android.material.internal.EdgeToEdgeUtils.getStatusBarColor(android.content.Context, boolean):int A[MD:(android.content.Context, boolean):int (m)]\l0x0049: INVOKE  (r3 I:android.content.Context) = (r5 I:android.view.Window A[D('window' android.view.Window)]) type: VIRTUAL call: android.view.Window.getContext():android.content.Context A[MD:():android.content.Context (c)] (LINE:100)\l0x004d: INVOKE  (r3 I:int) = (r3 I:android.content.Context), (r6 I:boolean A[D('edgeToEdgeEnabled' boolean)]) type: STATIC call: com.google.android.material.internal.EdgeToEdgeUtils.getNavigationBarColor(android.content.Context, boolean):int A[MD:(android.content.Context, boolean):int (m)]\l0x0051: INVOKE  (r5 I:android.view.Window A[D('window' android.view.Window)]), (r1 I:int A[D('statusBarColor' int)]) type: VIRTUAL call: android.view.Window.setStatusBarColor(int):void A[MD:(int):void (c)] (LINE:102)\l0x0054: INVOKE  (r5 I:android.view.Window A[D('window' android.view.Window)]), (r3 I:int A[D('navigationBarColor' int)]) type: VIRTUAL call: android.view.Window.setNavigationBarColor(int):void A[MD:(int):void (c)] (LINE:103)\l0x0058: INVOKE  (r4 I:int) = (r7 I:java.lang.Integer A[D('statusBarOverlapBackgroundColor' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:107)\l0x005c: INVOKE  (r4 I:boolean) = (r4 I:int) type: STATIC call: com.google.android.material.color.MaterialColors.isColorLight(int):boolean A[MD:(int):boolean (m)]\l0x0060: INVOKE  (r4 I:boolean) = (r1 I:int A[D('statusBarColor' int)]), (r4 I:boolean) type: STATIC call: com.google.android.material.internal.EdgeToEdgeUtils.isUsingLightSystemBar(int, boolean):boolean A[MD:(int, boolean):boolean (m)]\l0x0064: INVOKE  (r5 I:android.view.Window A[D('window' android.view.Window)]), (r4 I:boolean) type: STATIC call: com.google.android.material.internal.EdgeToEdgeUtils.setLightStatusBar(android.view.Window, boolean):void A[MD:(android.view.Window, boolean):void (m)] (LINE:105)\l0x0068: INVOKE  (r4 I:int) = (r8 I:java.lang.Integer A[D('navigationBarOverlapBackgroundColor' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:111)\l0x006c: INVOKE  (r4 I:boolean) = (r4 I:int) type: STATIC call: com.google.android.material.color.MaterialColors.isColorLight(int):boolean A[MD:(int):boolean (m)]\l0x0070: INVOKE  (r4 I:boolean) = (r3 I:int A[D('navigationBarColor' int)]), (r4 I:boolean) type: STATIC call: com.google.android.material.internal.EdgeToEdgeUtils.isUsingLightSystemBar(int, boolean):boolean A[MD:(int, boolean):boolean (m)] (LINE:110)\l0x0074: INVOKE  (r5 I:android.view.Window A[D('window' android.view.Window)]), (r4 I:boolean) type: STATIC call: com.google.android.material.internal.EdgeToEdgeUtils.setLightNavigationBar(android.view.Window, boolean):void A[MD:(android.view.Window, boolean):void (m)] (LINE:108)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0077|RETURN\l|0x0077: RETURN    (LINE:112)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0023|0x0023: INVOKE  (r1 I:android.content.Context) = (r5 I:android.view.Window A[D('window' android.view.Window)]) type: VIRTUAL call: android.view.Window.getContext():android.content.Context A[MD:():android.content.Context (c)] (LINE:88)\l0x0027: CONST  (r3 I:??[int, float, short, byte, char]) = (16842801(0x1010031, float:2.3693695E\-38) ??[int, float, short, byte, char]) \l0x002a: CONST  (r4 I:??[int, float, short, byte, char]) = (\-16777216(0xffffffffff000000, float:\-1.7014118E38) ??[int, float, short, byte, char]) \l0x002c: INVOKE  (r1 I:int) = (r1 I:android.content.Context), (r3 I:int), (r4 I:int) type: STATIC call: com.google.android.material.color.MaterialColors.getColor(android.content.Context, int, int):int A[MD:(android.content.Context, int, int):int (m)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0030|0x0030: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('useDefaultBackgroundColorForStatusBar' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0036  (LINE:89)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0032|0x0032: INVOKE  (r7 I:java.lang.Integer A[D('statusBarOverlapBackgroundColor' java.lang.Integer)]) = (r1 I:int A[D('defaultBackgroundColor' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:90)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0036|0x0036: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('useDefaultBackgroundColorForNavigationBar' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x003c  (LINE:92)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0038|0x0038: INVOKE  (r8 I:java.lang.Integer A[D('navigationBarOverlapBackgroundColor' java.lang.Integer)]) = (r1 I:int A[D('defaultBackgroundColor' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:93)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001d|0x001d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0014|0x0014: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public static void com.google.android.material.internal.EdgeToEdgeUtils.applyEdgeToEdge((r5 I:android.view.Window A[D('window' android.view.Window), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('edgeToEdgeEnabled' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Integer A[D('statusBarOverlapBackgroundColor' java.lang.Integer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Integer A[D('navigationBarOverlapBackgroundColor' java.lang.Integer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:51:0x0077 \-\> B:27:?, CROSS_EDGE: B:48:0x0036 \-\> B:50:0x003c, CROSS_EDGE: B:46:0x0030 \-\> B:48:0x0036, CROSS_EDGE: B:43:0x0020 \-\> B:50:0x003c, CROSS_EDGE: B:42:0x001e \-\> B:45:0x0023, CROSS_EDGE: B:40:0x001b \-\> B:42:0x001e, CROSS_EDGE: B:38:0x0015 \-\> B:41:0x001d, CROSS_EDGE: B:37:0x0014 \-\> B:38:0x0015, CROSS_EDGE: B:32:0x0009 \-\> B:37:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0030\-0x003c: r1 'defaultBackgroundColor' I\l  0x001e\-0x0077: r0 'useDefaultBackgroundColorForNavigationBar' Z\l  0x0049\-0x0077: r1 'statusBarColor' I\l  0x0015\-0x0077: r2 'useDefaultBackgroundColorForStatusBar' Z\l  0x0051\-0x0077: r3 'navigationBarColor' I\l  \-1 \-0x0077: r5 'window' Landroid\/view\/Window;\l  \-1 \-0x0077: r6 'edgeToEdgeEnabled' Z\l  \-1 \-0x0077: r7 'statusBarOverlapBackgroundColor' Ljava\/lang\/Integer;\l  \-1 \-0x0077: r8 'navigationBarOverlapBackgroundColor' Ljava\/lang\/Integer;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_27;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_41;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_45;
Node_43 -> Node_45[style=dashed];
Node_43 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_27;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_41 -> Node_42;
Node_37 -> Node_38;
}

