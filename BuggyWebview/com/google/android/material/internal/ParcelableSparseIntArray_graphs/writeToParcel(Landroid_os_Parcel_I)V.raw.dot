digraph "CFG forcom.google.android.material.internal.ParcelableSparseIntArray.writeToParcel(Landroid\/os\/Parcel;I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r4 I:com.google.android.material.internal.ParcelableSparseIntArray) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseIntArray.size():int A[MD:():int (c)] (LINE:57)\l0x0004: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0006: INVOKE  (r1 I:int) = (r4 I:com.google.android.material.internal.ParcelableSparseIntArray) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseIntArray.size():int A[MD:():int (c)] (LINE:58)\l0x000a: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:60)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lLOOP:0: B:3:0x000d\-\>B:5:0x0013\l|0x000d: INVOKE  (r3 I:int) = (r4 I:com.google.android.material.internal.ParcelableSparseIntArray) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseIntArray.size():int A[MD:():int (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:8:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|LOOP_END\lLOOP:0: B:3:0x000d\-\>B:5:0x0013\l|0x0013: INVOKE  (r3 I:int) = (r4 I:com.google.android.material.internal.ParcelableSparseIntArray), (r2 I:int A[D('i' int)]) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseIntArray.keyAt(int):int A[MD:(int):int (c)] (LINE:61)\l0x0017: APUT  \l  (r0 I:??[int, float][] A[D('keys' int[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (r3 I:??[int, float, short, byte, char])\l \l0x0019: INVOKE  (r3 I:int) = (r4 I:com.google.android.material.internal.ParcelableSparseIntArray), (r2 I:int A[D('i' int)]) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseIntArray.valueAt(int):int A[MD:(int):int (c)] (LINE:62)\l0x001d: APUT  \l  (r1 I:??[int, float][] A[D('values' int[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (r3 I:??[int, float, short, byte, char])\l \l0x001f: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:60)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|0x0022: INVOKE  (r2 I:int) = (r4 I:com.google.android.material.internal.ParcelableSparseIntArray) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseIntArray.size():int A[MD:():int (c)] (LINE:65)\l0x0026: INVOKE  (r5 I:android.os.Parcel A[D('dest' android.os.Parcel)]), (r2 I:int) type: VIRTUAL call: android.os.Parcel.writeInt(int):void A[MD:(int):void (c)]\l0x0029: INVOKE  (r5 I:android.os.Parcel A[D('dest' android.os.Parcel)]), (r0 I:int[] A[D('keys' int[])]) type: VIRTUAL call: android.os.Parcel.writeIntArray(int[]):void A[MD:(int[]):void (c)] (LINE:66)\l0x002c: INVOKE  (r5 I:android.os.Parcel A[D('dest' android.os.Parcel)]), (r1 I:int[] A[D('values' int[])]) type: VIRTUAL call: android.os.Parcel.writeIntArray(int[]):void A[MD:(int[]):void (c)] (LINE:67)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002f|RETURN\l|0x002f: RETURN    (LINE:68)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.internal.ParcelableSparseIntArray.writeToParcel((r4 'this' I:com.google.android.material.internal.ParcelableSparseIntArray A[IMMUTABLE_TYPE, THIS]), (r5 I:android.os.Parcel A[D('dest' android.os.Parcel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:5:0x0013 \-\> B:3:0x000d\lDebug Info:\l  0x000d\-0x0022: r2 'i' I\l  0x0006\-0x002f: r0 'keys' [I\l  0x000c\-0x002f: r1 'values' [I\l  \-1 \-0x002f: r5 'dest' Landroid\/os\/Parcel;\l  \-1 \-0x002f: r6 'flags' I\lMETHOD_OVERRIDE: [ClspMth\{android.os.Parcelable.writeToParcel(android.os.Parcel, int):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_3;
Node_8 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

