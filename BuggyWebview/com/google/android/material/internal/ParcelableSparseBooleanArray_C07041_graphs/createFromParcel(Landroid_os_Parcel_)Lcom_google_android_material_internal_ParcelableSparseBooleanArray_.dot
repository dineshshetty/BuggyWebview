digraph "CFG forcom.google.android.material.internal.ParcelableSparseBooleanArray.1.createFromParcel(Landroid\/os\/Parcel;)Lcom\/google\/android\/material\/internal\/ParcelableSparseBooleanArray;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = r8.readInt()\lcom.google.android.material.internal.ParcelableSparseBooleanArray r1 = new com.google.android.material.internal.ParcelableSparseBooleanArray(r0)\lint[] r2 = new int[r0]\lboolean[] r3 = new boolean[r0]\lr8.readIntArray(r2)\lr8.readBooleanArray(r3)\lr4 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|LOOP_START\lLOOP:0: B:3:0x0014\-\>B:4:0x0016\lPHI: r4 \l  PHI: (r4v1 'i' int) = (r4v0 'i' int), (r4v2 'i' int) binds: [B:2:0x0000, B:4:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r0) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|LOOP_END\lLOOP:0: B:3:0x0014\-\>B:4:0x0016\l|r1.put(r2[r4], r3[r4])\lint r4 = r4 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|RETURN\l|return r1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public com.google.android.material.internal.ParcelableSparseBooleanArray com.google.android.material.internal.ParcelableSparseBooleanArray.1.createFromParcel((r7v0 'this' com.google.android.material.internal.ParcelableSparseBooleanArray$1 A[IMMUTABLE_TYPE, THIS]), (r8v0 'source' android.os.Parcel A[D('source' android.os.Parcel), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:4:0x0016 \-\> B:3:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lBRIDGED_BY: com.google.android.material.internal.ParcelableSparseBooleanArray.1.createFromParcel(android.os.Parcel):com.google.android.material.internal.ParcelableSparseBooleanArray\lJadxCommentsAttr\{\l WARN: \l \-\> Can't rename method to resolve collision\}\lMETHOD_OVERRIDE: [ClspMth\{android.os.Parcelable.Creator.createFromParcel(android.os.Parcel):T\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_3;
Node_6 -> Node_5;
Node_5 -> Node_1;
}

