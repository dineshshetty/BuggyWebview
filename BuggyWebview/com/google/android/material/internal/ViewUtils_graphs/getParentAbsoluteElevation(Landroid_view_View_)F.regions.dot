digraph "CFG forcom.google.android.material.internal.ViewUtils.getParentAbsoluteElevation(Landroid\/view\/View;)F" {
subgraph cluster_Region_689380750 {
label = "R(3:1|(1:4)|6)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|float r0 = 0.0f\landroid.view.ViewParent android.view.ViewParent r1 = r3.getParent()\l}"];
subgraph cluster_LoopRegion_1381157558 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0007|if ((r1 instanceof android.view.View) != false) goto L4\l}"];
subgraph cluster_Region_434768424 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0009|LOOP_END\lLOOP:0: B:11:0x0005\-\>B:13:0x0009\l|r0 += androidx.core.view.ViewCompat.getElevation((android.view.View) r1)\landroid.view.ViewParent r1 = r1.getParent()\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0016|RETURN\l|return r0\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0005|LOOP_START\lLOOP:0: B:11:0x0005\-\>B:13:0x0009\lPHI: r0 r1 \l  PHI: (r0v1 'absoluteElevation' float) = (r0v0 'absoluteElevation' float), (r0v2 'absoluteElevation' float) binds: [B:10:0x0000, B:13:0x0009] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'viewParent' android.view.ViewParent) = (r1v0 'viewParent' android.view.ViewParent), (r1v2 'viewParent' android.view.ViewParent) binds: [B:10:0x0000, B:13:0x0009] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0016|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static float com.google.android.material.internal.ViewUtils.getParentAbsoluteElevation((r3v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0009 \-\> B:11:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_15[style=dashed];
Node_13 -> Node_11;
Node_14 -> Node_9;
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_15 -> Node_14;
}

