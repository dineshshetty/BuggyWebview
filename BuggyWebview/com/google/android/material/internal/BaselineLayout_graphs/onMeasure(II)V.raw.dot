digraph "CFG forcom.google.android.material.internal.BaselineLayout.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r11 I:com.google.android.material.internal.BaselineLayout) type: VIRTUAL call: com.google.android.material.internal.BaselineLayout.getChildCount():int A[MD:():int (c)] (LINE:47)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:48)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:49)\l0x0006: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:50)\l0x0007: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:51)\l0x0008: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:52)\l0x0009: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:54)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_START\lLOOP:0: B:3:0x000a\-\>B:12:0x0048\l|0x000a: CONST  (r7 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r6 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:17:0x004b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r8 I:android.view.View) = (r11 I:com.google.android.material.internal.BaselineLayout), (r6 I:int A[D('i' int)]) type: VIRTUAL call: com.google.android.material.internal.BaselineLayout.getChildAt(int):android.view.View A[MD:(int):android.view.View (c)] (LINE:55)\l0x0011: INVOKE  (r9 I:int) = (r8 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getVisibility():int A[MD:():int (c)] (LINE:56)\l0x0015: CONST  (r10 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: INVOKE  \l  (r11 I:com.google.android.material.internal.BaselineLayout)\l  (r8 I:android.view.View A[D('child' android.view.View)])\l  (r12 I:int A[D('widthMeasureSpec' int)])\l  (r13 I:int A[D('heightMeasureSpec' int)])\l type: VIRTUAL call: com.google.android.material.internal.BaselineLayout.measureChild(android.view.View, int, int):void A[MD:(android.view.View, int, int):void (c)] (LINE:60)\l0x001d: INVOKE  (r9 I:int) = (r8 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getBaseline():int A[MD:():int (c)] (LINE:61)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('baseline' int)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0030  (LINE:62)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: INVOKE  (r3 I:int A[D('maxChildBaseline' int)]) = (r3 I:int A[D('maxChildBaseline' int)]), (r9 I:int A[D('baseline' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)] (LINE:63)\l0x0027: INVOKE  (r7 I:int) = (r8 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredHeight():int A[MD:():int (c)] (LINE:64)\l0x002b: ARITH  (r7 I:int) = (r7 I:int) \- (r9 I:int A[D('baseline' int)]) \l0x002c: INVOKE  (r4 I:int A[D('maxChildDescent' int)]) = (r4 I:int A[D('maxChildDescent' int)]), (r7 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: INVOKE  (r7 I:int) = (r8 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredWidth():int A[MD:():int (c)] (LINE:66)\l0x0034: INVOKE  (r1 I:int A[D('maxWidth' int)]) = (r1 I:int A[D('maxWidth' int)]), (r7 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0038: INVOKE  (r7 I:int) = (r8 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredHeight():int A[MD:():int (c)] (LINE:67)\l0x003c: INVOKE  (r2 I:int A[D('maxHeight' int)]) = (r2 I:int A[D('maxHeight' int)]), (r7 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0040: INVOKE  (r7 I:int) = (r8 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredState():int A[MD:():int (c)] (LINE:68)\l0x0044: INVOKE  (r5 I:int A[D('childState' int)]) = (r5 I:int A[D('childState' int)]), (r7 I:int) type: STATIC call: android.view.View.combineMeasuredStates(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0048|LOOP_END\lLOOP:0: B:3:0x000a\-\>B:12:0x0048\l|0x0048: ARITH  (r6 I:int) = (r6 I:int A[D('i' int)]) + (1 int)  (LINE:54)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x004b|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|0x004b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('maxChildBaseline' int)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x005d  (LINE:70)\l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|0x004d: INVOKE  (r6 I:int) = (r11 I:com.google.android.material.internal.BaselineLayout) type: VIRTUAL call: com.google.android.material.internal.BaselineLayout.getPaddingBottom():int A[MD:():int (s)] (LINE:71)\l0x0051: INVOKE  (r4 I:int A[D('maxChildDescent' int)]) = (r4 I:int A[D('maxChildDescent' int)]), (r6 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0055: ARITH  (r6 I:int) = (r3 I:int A[D('maxChildBaseline' int)]) + (r4 I:int A[D('maxChildDescent' int)])  (LINE:72)\l0x0057: INVOKE  (r2 I:int A[D('maxHeight' int)]) = (r2 I:int A[D('maxHeight' int)]), (r6 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x005b: IPUT  (r3 I:int A[D('maxChildBaseline' int)]), (r11 I:com.google.android.material.internal.BaselineLayout) com.google.android.material.internal.BaselineLayout.baseline int  (LINE:73)\l}"];
Node_15 [shape=record,label="{15\:\ 0x005d|0x005d: INVOKE  (r6 I:int) = (r11 I:com.google.android.material.internal.BaselineLayout) type: VIRTUAL call: com.google.android.material.internal.BaselineLayout.getSuggestedMinimumHeight():int A[MD:():int (s)] (LINE:75)\l0x0061: INVOKE  (r2 I:int A[D('maxHeight' int)]) = (r2 I:int A[D('maxHeight' int)]), (r6 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0065: INVOKE  (r6 I:int) = (r11 I:com.google.android.material.internal.BaselineLayout) type: VIRTUAL call: com.google.android.material.internal.BaselineLayout.getSuggestedMinimumWidth():int A[MD:():int (s)] (LINE:76)\l0x0069: INVOKE  (r1 I:int A[D('maxWidth' int)]) = (r1 I:int A[D('maxWidth' int)]), (r6 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x006e: INVOKE  (r6 I:int) = (r1 I:int A[D('maxWidth' int)]), (r12 I:int A[D('widthMeasureSpec' int)]), (r5 I:int A[D('childState' int)]) type: STATIC call: android.view.View.resolveSizeAndState(int, int, int):int A[MD:(int, int, int):int (c)] (LINE:78)\l0x0072: ARITH  (r7 I:int) = (r5 I:int A[D('childState' int)]) \<\< (16 int) \l0x0074: INVOKE  (r7 I:int) = (r2 I:int A[D('maxHeight' int)]), (r13 I:int A[D('heightMeasureSpec' int)]), (r7 I:int) type: STATIC call: android.view.View.resolveSizeAndState(int, int, int):int A[MD:(int, int, int):int (c)] (LINE:79)\l0x0078: INVOKE  (r11 I:com.google.android.material.internal.BaselineLayout), (r6 I:int), (r7 I:int) type: VIRTUAL call: com.google.android.material.internal.BaselineLayout.setMeasuredDimension(int, int):void A[MD:(int, int):void (s)] (LINE:77)\l}"];
Node_16 [shape=record,label="{16\:\ 0x007b|RETURN\l|0x007b: RETURN    (LINE:81)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.internal.BaselineLayout.onMeasure((r11 'this' I:com.google.android.material.internal.BaselineLayout A[IMMUTABLE_TYPE, THIS]), (r12 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:12:0x0048 \-\> B:3:0x000a, CROSS_EDGE: B:9:0x0021 \-\> B:11:0x0030, CROSS_EDGE: B:6:0x0017 \-\> B:12:0x0048, CROSS_EDGE: B:13:0x004b \-\> B:15:0x005d\lDebug Info:\l  0x0011\-0x0048: r8 'child' Landroid\/view\/View;\l  0x0021\-0x0048: r9 'baseline' I\l  0x000a\-0x004b: r6 'i' I\l  0x0004\-0x007b: r0 'count' I\l  0x0005\-0x007b: r1 'maxWidth' I\l  0x0006\-0x007b: r2 'maxHeight' I\l  0x0007\-0x007b: r3 'maxChildBaseline' I\l  0x0008\-0x007b: r4 'maxChildDescent' I\l  0x0009\-0x007b: r5 'childState' I\l  \-1 \-0x007b: r12 'widthMeasureSpec' I\l  \-1 \-0x007b: r13 'heightMeasureSpec' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_19[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_18;
Node_18 -> Node_12;
Node_12 -> Node_3;
Node_19 -> Node_12;
Node_17 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

