digraph "CFG forcom.google.android.material.internal.FlowLayout.getRowIndex(Landroid\/view\/View;)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:int) =  com.google.android.material.R.id.row_index_key int  (LINE:253)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r3 I:android.view.View A[D('child' android.view.View)]), (r0 I:int) type: VIRTUAL call: android.view.View.getTag(int):java.lang.Object A[MD:(int):java.lang.Object (c)]\l0x0006: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('index' java.lang.Object)]) java.lang.Integer  (LINE:254)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000c \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|RETURN\l|0x000a: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:255)\l0x000b: RETURN  (r1 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|0x000c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('index' java.lang.Object)])  (LINE:257)\l0x000d: CHECK_CAST (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0013|RETURN\l|0x0013: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int com.google.android.material.internal.FlowLayout.getRowIndex((r2 'this' I:com.google.android.material.internal.FlowLayout A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0013 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0013: r0 'index' Ljava\/lang\/Object;\l  \-1 \-0x0013: r3 'child' Landroid\/view\/View;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

