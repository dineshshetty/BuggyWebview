digraph "CFG forcom.google.android.material.internal.DescendantOffsetUtils.offsetDescendantMatrix(Landroid\/view\/ViewParent;Landroid\/view\/View;Landroid\/graphics\/Matrix;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|android.view.ViewParent r0 = r5.getParent()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|if ((r0 instanceof android.view.View) == false) goto L5\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|if (r0 == r4) goto L5\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|android.view.View r1 = (android.view.View) r0\loffsetDescendantMatrix(r4, r1, r6)\lr6.preTranslate((float) (\-r1.getScrollX()), (float) (\-r1.getScrollY()))\l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|r6.preTranslate((float) r5.getLeft(), (float) r5.getTop())\l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|if (r5.getMatrix().isIdentity() != false) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|r6.preConcat(r5.getMatrix())\l}"];
Node_20 [shape=record,label="{20\:\ 0x003d|RETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private static void com.google.android.material.internal.DescendantOffsetUtils.offsetDescendantMatrix((r4v0 'target' android.view.ViewParent A[D('target' android.view.ViewParent), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'm' android.graphics.Matrix A[D('m' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0034 \-\> B:20:0x003d, CROSS_EDGE: B:15:0x0008 \-\> B:17:0x001f, CROSS_EDGE: B:14:0x0006 \-\> B:17:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_21 -> Node_12;
}

