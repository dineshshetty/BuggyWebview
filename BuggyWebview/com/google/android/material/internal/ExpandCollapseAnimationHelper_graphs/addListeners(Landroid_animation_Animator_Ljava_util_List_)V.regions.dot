digraph "CFG forcom.google.android.material.internal.ExpandCollapseAnimationHelper.addListeners(Landroid\/animation\/Animator;Ljava\/util\/List;)V" {
subgraph cluster_Region_1084475185 {
label = "R(2:1|(1:4))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|java.util.Iterator r0 = r4.iterator()\l\l}"];
subgraph cluster_LoopRegion_1597732773 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0008|android.animation.AnimatorListenerAdapter \lif (r0.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_10005272 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000a|LOOP_END\lLOOP:0: B:11:0x0004\-\>B:13:0x000a\l|android.animation.AnimatorListenerAdapter r1 = r0.next()\lr3.addListener(r1)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0004|LOOP_START\lLOOP:0: B:11:0x0004\-\>B:13:0x000a\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0014|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0014}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.internal.ExpandCollapseAnimationHelper.addListeners((r2v0 'this' com.google.android.material.internal.ExpandCollapseAnimationHelper A[IMMUTABLE_TYPE, THIS]), (r3v0 'animator' android.animation.Animator A[D('animator' android.animation.Animator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'listeners' java.util.List\<android.animation.AnimatorListenerAdapter\> A[D('listeners' java.util.List\<android.animation.AnimatorListenerAdapter\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x000a \-\> B:11:0x0004\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/animation\/Animator;Ljava\/util\/List\<Landroid\/animation\/AnimatorListenerAdapter;\>;)V\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_15[style=dashed];
Node_13 -> Node_11;
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

