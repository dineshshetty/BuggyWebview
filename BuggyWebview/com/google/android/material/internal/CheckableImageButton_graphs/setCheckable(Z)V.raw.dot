digraph "CFG forcom.google.android.material.internal.CheckableImageButton.setCheckable(Z)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r1 I:com.google.android.material.internal.CheckableImageButton) com.google.android.material.internal.CheckableImageButton.checkable boolean  (LINE:136)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('checkable' boolean)])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IPUT  (r2 I:boolean A[D('checkable' boolean)]), (r1 I:com.google.android.material.internal.CheckableImageButton) com.google.android.material.internal.CheckableImageButton.checkable boolean  (LINE:137)\l0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:138)\l0x0007: INVOKE  (r1 I:com.google.android.material.internal.CheckableImageButton), (r0 I:int) type: VIRTUAL call: com.google.android.material.internal.CheckableImageButton.sendAccessibilityEvent(int):void A[MD:(int):void (s)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|RETURN\lORIG_RETURN\l|0x000a: RETURN    (LINE:140)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000a: RETURN   A[SYNTHETIC] (LINE:140)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.internal.CheckableImageButton.setCheckable((r1 'this' I:com.google.android.material.internal.CheckableImageButton A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[D('checkable' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000a: r2 'checkable' Z\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

