digraph "CFG forcom.google.android.material.internal.ParcelableSparseIntArray.1.createFromParcel(Landroid\/os\/Parcel;)Lcom\/google\/android\/material\/internal\/ParcelableSparseIntArray;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r8 I:android.os.Parcel A[D('source' android.os.Parcel)]) type: VIRTUAL call: android.os.Parcel.readInt():int A[MD:():int (c)] (LINE:75)\l0x0004: NEW_INSTANCE  (r1 I:com.google.android.material.internal.ParcelableSparseIntArray) =  com.google.android.material.internal.ParcelableSparseIntArray  (LINE:76)\l0x0006: INVOKE  (r1 I:com.google.android.material.internal.ParcelableSparseIntArray), (r0 I:int A[D('size' int)]) type: DIRECT call: com.google.android.material.internal.ParcelableSparseIntArray.\<init\>(int):void A[MD:(int):void (m)]\l0x0009: NEW_ARRAY  (r2 I:int[]) = (r0 I:int A[D('size' int), IMMUTABLE_TYPE]) type: int[]  (LINE:78)\l0x000b: NEW_ARRAY  (r3 I:int[]) = (r0 I:int A[D('size' int), IMMUTABLE_TYPE]) type: int[]  (LINE:79)\l0x000d: INVOKE  (r8 I:android.os.Parcel A[D('source' android.os.Parcel)]), (r2 I:int[] A[D('keys' int[])]) type: VIRTUAL call: android.os.Parcel.readIntArray(int[]):void A[MD:(int[]):void (c)] (LINE:81)\l0x0010: INVOKE  (r8 I:android.os.Parcel A[D('source' android.os.Parcel)]), (r3 I:int[] A[D('values' int[])]) type: VIRTUAL call: android.os.Parcel.readIntArray(int[]):void A[MD:(int[]):void (c)] (LINE:82)\l0x0013: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:84)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|LOOP_START\lLOOP:0: B:3:0x0014\-\>B:4:0x0016\l|0x0014: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:6:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|LOOP_END\lLOOP:0: B:3:0x0014\-\>B:4:0x0016\l|0x0016: AGET  (r5 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][] A[D('keys' int[])]), (r4 I:??[int, short, byte, char] A[D('i' int)])  (LINE:85)\l0x0018: AGET  (r6 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('values' int[])]), (r4 I:??[int, short, byte, char] A[D('i' int)]) \l0x001a: INVOKE  \l  (r1 I:com.google.android.material.internal.ParcelableSparseIntArray A[D('read' com.google.android.material.internal.ParcelableSparseIntArray)])\l  (r5 I:int)\l  (r6 I:int)\l type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseIntArray.put(int, int):void A[MD:(int, int):void (c)]\l0x001d: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:84)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|RETURN\l|0x0020: RETURN  \l  (r1 I:com.google.android.material.internal.ParcelableSparseIntArray A[D('read' com.google.android.material.internal.ParcelableSparseIntArray)])\l  (LINE:88)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public com.google.android.material.internal.ParcelableSparseIntArray com.google.android.material.internal.ParcelableSparseIntArray.1.createFromParcel((r7 'this' I:com.google.android.material.internal.ParcelableSparseIntArray$1 A[IMMUTABLE_TYPE, THIS]), (r8 I:android.os.Parcel A[D('source' android.os.Parcel), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:4:0x0016 \-\> B:3:0x0014\lDebug Info:\l  0x0014\-0x0020: r4 'i' I\l  0x0004\-0x0020: r0 'size' I\l  0x0009\-0x0020: r1 'read' Lcom\/google\/android\/material\/internal\/ParcelableSparseIntArray;\l  0x000b\-0x0020: r2 'keys' [I\l  0x000d\-0x0020: r3 'values' [I\l  \-1 \-0x0020: r8 'source' Landroid\/os\/Parcel;\lBRIDGED_BY: com.google.android.material.internal.ParcelableSparseIntArray.1.createFromParcel(android.os.Parcel):com.google.android.material.internal.ParcelableSparseIntArray\lJadxCommentsAttr\{\l WARN: \l \-\> Can't rename method to resolve collision\}\lMETHOD_OVERRIDE: [ClspMth\{android.os.Parcelable.Creator.createFromParcel(android.os.Parcel):T\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_3;
Node_6 -> Node_5;
Node_5 -> Node_1;
}

