digraph "CFG forcom.google.android.material.internal.CollapsingTextHelper.isTextDirectionHeuristicsIsRtl(Ljava\/lang\/CharSequence;Z)Z" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('defaultIsRtl' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0005  (LINE:958)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: SGET  (r0 I:androidx.core.text.TextDirectionHeuristicCompat) =  androidx.core.text.TextDirectionHeuristicsCompat.FIRSTSTRONG_RTL androidx.core.text.TextDirectionHeuristicCompat  (LINE:959)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:961)\l0x000c: INVOKE  (r0 I:boolean) = \l  (r0 I:androidx.core.text.TextDirectionHeuristicCompat)\l  (r4 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)])\l  (r1 I:int)\l  (r2 I:int)\l type: INTERFACE call: androidx.core.text.TextDirectionHeuristicCompat.isRtl(java.lang.CharSequence, int, int):boolean A[MD:(java.lang.CharSequence, int, int):boolean (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:boolean)  (LINE:958)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: SGET  (r0 I:androidx.core.text.TextDirectionHeuristicCompat) =  androidx.core.text.TextDirectionHeuristicsCompat.FIRSTSTRONG_LTR androidx.core.text.TextDirectionHeuristicCompat  (LINE:960)\l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.internal.CollapsingTextHelper.isTextDirectionHeuristicsIsRtl((r3 'this' I:com.google.android.material.internal.CollapsingTextHelper A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.CharSequence A[D('text' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('defaultIsRtl' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0005 \-\> B:12:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r4 'text' Ljava\/lang\/CharSequence;\l  \-1 \-0x0010: r5 'defaultIsRtl' Z\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
}

