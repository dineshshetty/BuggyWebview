digraph "CFG forcom.google.android.material.internal.CollapsingTextHelper.lerp(FFFLandroid\/animation\/TimeInterpolator;)F" {
Node_6 [shape=record,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('interpolator' android.animation.TimeInterpolator)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0006  (LINE:1284)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0002|0x0002: INVOKE  (r3 I:float A[D('fraction' float)]) = \l  (r4 I:android.animation.TimeInterpolator A[D('interpolator' android.animation.TimeInterpolator)])\l  (r3 I:float A[D('fraction' float)])\l type: INTERFACE call: android.animation.TimeInterpolator.getInterpolation(float):float A[MD:(float):float (c)] (LINE:1285)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|0x0006: INVOKE  (r0 I:float) = (r1 I:float A[D('startValue' float)]), (r2 I:float A[D('endValue' float)]), (r3 I:float A[D('fraction' float)]) type: STATIC call: com.google.android.material.animation.AnimationUtils.lerp(float, float, float):float A[MD:(float, float, float):float (m)] (LINE:1287)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static float com.google.android.material.internal.CollapsingTextHelper.lerp((r1 I:float A[D('startValue' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:float A[D('endValue' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:float A[D('fraction' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.animation.TimeInterpolator A[D('interpolator' android.animation.TimeInterpolator), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0000 \-\> B:10:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000a: r1 'startValue' F\l  \-1 \-0x000a: r2 'endValue' F\l  \-1 \-0x000a: r3 'fraction' F\l  \-1 \-0x000a: r4 'interpolator' Landroid\/animation\/TimeInterpolator;\l}"];
MethodNode -> Node_6;Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_7;
}

