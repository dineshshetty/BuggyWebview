digraph "CFG forcom.google.android.material.internal.CollapsingTextHelper.setState([I)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IPUT  (r2 I:int[] A[D('state' int[])]), (r1 I:com.google.android.material.internal.CollapsingTextHelper) com.google.android.material.internal.CollapsingTextHelper.state int[]  (LINE:563)\l0x0002: INVOKE  (r0 I:boolean) = (r1 I:com.google.android.material.internal.CollapsingTextHelper) type: VIRTUAL call: com.google.android.material.internal.CollapsingTextHelper.isStateful():boolean A[MD:():boolean (m)] (LINE:565)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: INVOKE  (r1 I:com.google.android.material.internal.CollapsingTextHelper) type: VIRTUAL call: com.google.android.material.internal.CollapsingTextHelper.recalculate():void A[MD:():void (m)] (LINE:566)\l0x000b: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:567)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|RETURN\l|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:570)\l0x000e: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean com.google.android.material.internal.CollapsingTextHelper.setState((r1 'this' I:com.google.android.material.internal.CollapsingTextHelper A[IMMUTABLE_TYPE, THIS]), (r2 I:int[] A[D('state' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r2 'state' [I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

