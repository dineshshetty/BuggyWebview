digraph "CFG forcom.google.android.material.internal.ParcelableSparseArray.writeToParcel(Landroid\/os\/Parcel;I)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:com.google.android.material.internal.ParcelableSparseArray) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseArray.size():int A[MD:():int (c)] (LINE:54)\l0x0004: NEW_ARRAY  (r1 I:int[]) = (r0 I:int A[D('size' int), IMMUTABLE_TYPE]) type: int[]  (LINE:55)\l0x0006: NEW_ARRAY  (r2 I:android.os.Parcelable[]) = (r0 I:int A[D('size' int), IMMUTABLE_TYPE]) type: android.os.Parcelable[]  (LINE:56)\l0x0008: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:57)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|LOOP_START\lLOOP:0: B:11:0x0009\-\>B:12:0x000b\l|0x0009: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:15:0x001c \l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|LOOP_END\lLOOP:0: B:11:0x0009\-\>B:12:0x000b\l|0x000b: INVOKE  (r4 I:int) = (r5 I:com.google.android.material.internal.ParcelableSparseArray), (r3 I:int A[D('i' int)]) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseArray.keyAt(int):int A[MD:(int):int (c)] (LINE:58)\l0x000f: APUT  \l  (r1 I:??[int, float][] A[D('keys' int[])])\l  (r3 I:??[int, short, byte, char] A[D('i' int)])\l  (r4 I:??[int, float, short, byte, char])\l \l0x0011: INVOKE  (r4 I:java.lang.Object) = (r5 I:com.google.android.material.internal.ParcelableSparseArray), (r3 I:int A[D('i' int)]) type: VIRTUAL call: com.google.android.material.internal.ParcelableSparseArray.valueAt(int):java.lang.Object A[MD:(int):E (c)] (LINE:59)\l0x0015: CHECK_CAST (r4 I:android.os.Parcelable) = (android.os.Parcelable) (r4 I:??[OBJECT, ARRAY]) \l0x0017: APUT  \l  (r2 I:??[OBJECT, ARRAY][] A[D('values' android.os.Parcelable[])])\l  (r3 I:??[int, short, byte, char] A[D('i' int)])\l  (r4 I:??[OBJECT, ARRAY])\l \l0x0019: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:57)\l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: INVOKE  (r6 I:android.os.Parcel A[D('parcel' android.os.Parcel)]), (r0 I:int A[D('size' int)]) type: VIRTUAL call: android.os.Parcel.writeInt(int):void A[MD:(int):void (c)] (LINE:61)\l0x001f: INVOKE  (r6 I:android.os.Parcel A[D('parcel' android.os.Parcel)]), (r1 I:int[] A[D('keys' int[])]) type: VIRTUAL call: android.os.Parcel.writeIntArray(int[]):void A[MD:(int[]):void (c)] (LINE:62)\l0x0022: INVOKE  \l  (r6 I:android.os.Parcel A[D('parcel' android.os.Parcel)])\l  (r2 I:android.os.Parcelable[] A[D('values' android.os.Parcelable[])])\l  (r7 I:int A[D('flags' int)])\l type: VIRTUAL call: android.os.Parcel.writeParcelableArray(android.os.Parcelable[], int):void A[MD:\<T extends android.os.Parcelable\>:(T extends android.os.Parcelable[], int):void (c)] (LINE:63)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:64)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.internal.ParcelableSparseArray.writeToParcel((r5 'this' I:com.google.android.material.internal.ParcelableSparseArray A[IMMUTABLE_TYPE, THIS]), (r6 I:android.os.Parcel A[D('parcel' android.os.Parcel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:12:0x000b \-\> B:11:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x001c: r3 'i' I\l  0x0004\-0x0025: r0 'size' I\l  0x0006\-0x0025: r1 'keys' [I\l  0x0008\-0x0025: r2 'values' [Landroid\/os\/Parcelable;\l  \-1 \-0x0025: r6 'parcel' Landroid\/os\/Parcel;\l  \-1 \-0x0025: r7 'flags' I\lMETHOD_OVERRIDE: [ClspMth\{android.os.Parcelable.writeToParcel(android.os.Parcel, int):void\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

