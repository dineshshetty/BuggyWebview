digraph "CFG forcom.google.android.material.internal.ForegroundLinearLayout.setForeground(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:android.graphics.drawable.Drawable) = (r2 I:com.google.android.material.internal.ForegroundLinearLayout) com.google.android.material.internal.ForegroundLinearLayout.foreground android.graphics.drawable.Drawable  (LINE:152)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drawable' android.graphics.drawable.Drawable)])  \-\> B:35:? \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000f  (LINE:153)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:154)\l0x0007: INVOKE  (r0 I:android.graphics.drawable.Drawable), (r1 I:android.graphics.drawable.Drawable$Callback) type: VIRTUAL call: android.graphics.drawable.Drawable.setCallback(android.graphics.drawable.Drawable$Callback):void A[MD:(android.graphics.drawable.Drawable$Callback):void (c)]\l0x000a: IGET  (r0 I:android.graphics.drawable.Drawable) = (r2 I:com.google.android.material.internal.ForegroundLinearLayout) com.google.android.material.internal.ForegroundLinearLayout.foreground android.graphics.drawable.Drawable  (LINE:155)\l0x000c: INVOKE  (r2 I:com.google.android.material.internal.ForegroundLinearLayout), (r0 I:android.graphics.drawable.Drawable) type: VIRTUAL call: com.google.android.material.internal.ForegroundLinearLayout.unscheduleDrawable(android.graphics.drawable.Drawable):void A[MD:(android.graphics.drawable.Drawable):void (s)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: IPUT  \l  (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r2 I:com.google.android.material.internal.ForegroundLinearLayout)\l com.google.android.material.internal.ForegroundLinearLayout.foreground android.graphics.drawable.Drawable  (LINE:158)\l0x0011: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:159)\l0x0012: IPUT  (r0 I:boolean), (r2 I:com.google.android.material.internal.ForegroundLinearLayout) com.google.android.material.internal.ForegroundLinearLayout.foregroundBoundsChanged boolean \l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|0x0014: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drawable' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0039  (LINE:161)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:162)\l0x0017: INVOKE  (r2 I:com.google.android.material.internal.ForegroundLinearLayout), (r0 I:boolean) type: VIRTUAL call: com.google.android.material.internal.ForegroundLinearLayout.setWillNotDraw(boolean):void A[MD:(boolean):void (s)]\l0x001a: INVOKE  \l  (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r2 I:android.graphics.drawable.Drawable$Callback)\l type: VIRTUAL call: android.graphics.drawable.Drawable.setCallback(android.graphics.drawable.Drawable$Callback):void A[MD:(android.graphics.drawable.Drawable$Callback):void (c)] (LINE:163)\l0x001d: INVOKE  (r0 I:boolean) = (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.isStateful():boolean A[MD:():boolean (c)] (LINE:164)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002a \l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|0x0023: INVOKE  (r0 I:int[]) = (r2 I:com.google.android.material.internal.ForegroundLinearLayout) type: VIRTUAL call: com.google.android.material.internal.ForegroundLinearLayout.getDrawableState():int[] A[MD:():int[] (s)] (LINE:165)\l0x0027: INVOKE  (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]), (r0 I:int[]) type: VIRTUAL call: android.graphics.drawable.Drawable.setState(int[]):boolean A[MD:(int[]):boolean (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x002a|0x002a: IGET  (r0 I:int) = (r2 I:com.google.android.material.internal.ForegroundLinearLayout) com.google.android.material.internal.ForegroundLinearLayout.foregroundGravity int  (LINE:167)\l0x002c: CONST  (r1 I:??[int, float, short, byte, char]) = (119(0x77, float:1.67E\-43) ??[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|0x002e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x003c \l}"];
Node_31 [shape=record,label="{31\:\ 0x0030|0x0030: NEW_INSTANCE  (r0 I:android.graphics.Rect) =  android.graphics.Rect  (LINE:168)\l0x0032: INVOKE  (r0 I:android.graphics.Rect) type: DIRECT call: android.graphics.Rect.\<init\>():void A[MD:():void (c)]\l0x0035: INVOKE  \l  (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r0 I:android.graphics.Rect A[D('padding' android.graphics.Rect)])\l type: VIRTUAL call: android.graphics.drawable.Drawable.getPadding(android.graphics.Rect):boolean A[MD:(android.graphics.Rect):boolean (c)] (LINE:169)\l}"];
Node_33 [shape=record,label="{33\:\ 0x003c|0x003c: INVOKE  (r2 I:com.google.android.material.internal.ForegroundLinearLayout) type: VIRTUAL call: com.google.android.material.internal.ForegroundLinearLayout.requestLayout():void A[MD:():void (s)] (LINE:174)\l0x003f: INVOKE  (r2 I:com.google.android.material.internal.ForegroundLinearLayout) type: VIRTUAL call: com.google.android.material.internal.ForegroundLinearLayout.invalidate():void A[MD:():void (s)] (LINE:175)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0042|RETURN\lORIG_RETURN\l|0x0042: RETURN    (LINE:177)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0039|0x0039: INVOKE  (r2 I:com.google.android.material.internal.ForegroundLinearLayout), (r0 I:boolean) type: VIRTUAL call: com.google.android.material.internal.ForegroundLinearLayout.setWillNotDraw(boolean):void A[MD:(boolean):void (s)] (LINE:172)\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0042: RETURN   A[SYNTHETIC] (LINE:177)\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.internal.ForegroundLinearLayout.setForeground((r2 'this' I:com.google.android.material.internal.ForegroundLinearLayout A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:30:0x002e \-\> B:33:0x003c, CROSS_EDGE: B:27:0x0021 \-\> B:29:0x002a, CROSS_EDGE: B:32:0x0039 \-\> B:33:0x003c, CROSS_EDGE: B:22:0x0004 \-\> B:24:0x000f, CROSS_EDGE: B:21:0x0002 \-\> B:34:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0035\-0x0038: r0 'padding' Landroid\/graphics\/Rect;\l  \-1 \-0x0042: r3 'drawable' Landroid\/graphics\/drawable\/Drawable;\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.setForeground(android.graphics.drawable.Drawable):void\}]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_35;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_19;
Node_32 -> Node_33;
Node_35 -> Node_19;
}

