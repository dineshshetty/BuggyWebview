digraph "CFG forcom.google.android.material.circularreveal.CircularRevealGridLayout.isOpaque()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:com.google.android.material.circularreveal.CircularRevealHelper) = (r1 I:com.google.android.material.circularreveal.CircularRevealGridLayout) com.google.android.material.circularreveal.CircularRevealGridLayout.helper com.google.android.material.circularreveal.CircularRevealHelper  (LINE:99)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r0 I:com.google.android.material.circularreveal.CircularRevealHelper) type: VIRTUAL call: com.google.android.material.circularreveal.CircularRevealHelper.isOpaque():boolean A[MD:():boolean (m)] (LINE:100)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: INVOKE  (r0 I:boolean) = (r1 I:android.widget.GridLayout) type: SUPER call: android.widget.GridLayout.isOpaque():boolean A[MD:():boolean (s)] (LINE:102)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean com.google.android.material.circularreveal.CircularRevealGridLayout.isOpaque((r1 'this' I:com.google.android.material.circularreveal.CircularRevealGridLayout A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x000d \-\> B:1:?\lMETHOD_OVERRIDE: [com.google.android.material.circularreveal.CircularRevealWidget.isOpaque():boolean, ClspMth\{android.view.View.isOpaque():boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

