digraph "CFG forcom.google.android.material.divider.MaterialDivider.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r3 I:android.view.View), (r4 I:int A[D('widthMeasureSpec' int)]), (r5 I:int A[D('heightMeasureSpec' int)]) type: SUPER call: android.view.View.onMeasure(int, int):void A[MD:(int, int):void (c)] (LINE:92)\l0x0003: INVOKE  (r0 I:int) = (r5 I:int A[D('heightMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getMode(int):int A[MD:(int):int (c)] (LINE:94)\l0x0007: INVOKE  (r1 I:int) = (r3 I:com.google.android.material.divider.MaterialDivider) type: VIRTUAL call: com.google.android.material.divider.MaterialDivider.getMeasuredHeight():int A[MD:():int (c)] (LINE:95)\l0x000b: CONST  (r2 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char])  (LINE:96)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:? \l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN   A[SYNTHETIC] (LINE:102)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IGET  (r2 I:int) = (r3 I:com.google.android.material.divider.MaterialDivider) com.google.android.material.divider.MaterialDivider.thickness int  (LINE:97)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newThickness' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IGET  (r1 I:int A[D('newThickness' int)]) = (r3 I:com.google.android.material.divider.MaterialDivider) com.google.android.material.divider.MaterialDivider.thickness int  (LINE:98)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: INVOKE  (r2 I:int) = (r3 I:com.google.android.material.divider.MaterialDivider) type: VIRTUAL call: com.google.android.material.divider.MaterialDivider.getMeasuredWidth():int A[MD:():int (c)] (LINE:100)\l0x001d: INVOKE  (r3 I:com.google.android.material.divider.MaterialDivider), (r2 I:int), (r1 I:int A[D('newThickness' int)]) type: VIRTUAL call: com.google.android.material.divider.MaterialDivider.setMeasuredDimension(int, int):void A[MD:(int, int):void (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN    (LINE:102)\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.divider.MaterialDivider.onMeasure((r3 'this' I:com.google.android.material.divider.MaterialDivider A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x0015 \-\> B:9:0x0019, CROSS_EDGE: B:6:0x0013 \-\> B:9:0x0019, CROSS_EDGE: B:4:0x000f \-\> B:10:0x0020, CROSS_EDGE: B:3:0x000d \-\> B:5:0x0011\lDebug Info:\l  0x0007\-0x0020: r0 'heightMode' I\l  0x000b\-0x0020: r1 'newThickness' I\l  \-1 \-0x0020: r4 'widthMeasureSpec' I\l  \-1 \-0x0020: r5 'heightMeasureSpec' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_11 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

