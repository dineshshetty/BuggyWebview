digraph "CFG forcom.google.android.material.divider.MaterialDivider.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|super.onMeasure(r4, r5)\lint r0 = android.view.View.MeasureSpec.getMode(r5)\lint r1 = getMeasuredHeight()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r0 == Integer.MIN_VALUE) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|if (r0 != 0) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|int r2 = r3.thickness\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r2 \<= 0) goto L10\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|if (r1 == r2) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|int r1 = r3.thickness\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|PHI: r1 \l  PHI: (r1v1 'newThickness' int) = (r1v0 'newThickness' int), (r1v0 'newThickness' int), (r1v2 'newThickness' int) binds: [B:6:0x0013, B:7:0x0015, B:8:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|setMeasuredDimension(getMeasuredWidth(), r1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void com.google.android.material.divider.MaterialDivider.onMeasure((r3v0 'this' com.google.android.material.divider.MaterialDivider A[IMMUTABLE_TYPE, THIS]), (r4v0 'widthMeasureSpec' int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'heightMeasureSpec' int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x0015 \-\> B:9:0x0019, CROSS_EDGE: B:6:0x0013 \-\> B:9:0x0019, CROSS_EDGE: B:4:0x000f \-\> B:10:0x0020, CROSS_EDGE: B:3:0x000d \-\> B:5:0x0011\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_11 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

