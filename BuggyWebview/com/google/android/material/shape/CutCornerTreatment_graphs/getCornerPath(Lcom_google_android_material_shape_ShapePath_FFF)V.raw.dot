digraph "CFG forcom.google.android.material.shape.CutCornerTreatment.getCornerPath(Lcom\/google\/android\/material\/shape\/ShapePath;FFF)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: ARITH  (r0 I:float) = (r9 I:float A[D('radius' float)]) * (r8 I:float A[D('interpolation' float)])  (LINE:47)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (1127481344(0x43340000, float:180.0) ??[int, float, short, byte, char]) \l0x0004: ARITH  (r2 I:float) = (r1 I:float) \- (r7 I:float A[D('angle' float)]) \l0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  \l  (r6 I:com.google.android.material.shape.ShapePath A[D('shapePath' com.google.android.material.shape.ShapePath)])\l  (r3 I:float)\l  (r0 I:float)\l  (r1 I:float)\l  (r2 I:float)\l type: VIRTUAL call: com.google.android.material.shape.ShapePath.reset(float, float, float, float):void A[MD:(float, float, float, float):void (m)]\l0x000a: CAST (r0 I:double) = (double) (r7 I:float A[D('angle' float)])  (LINE:48)\l0x000b: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.toRadians(double):double A[MD:(double):double (c)] (LINE:49)\l0x000f: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)]\l0x0013: CAST (r2 I:double) = (double) (r9 I:float A[D('radius' float)]) \l0x0014: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l0x0016: CAST (r2 I:double) = (double) (r8 I:float A[D('interpolation' float)]) \l0x0017: ARITH  (r0 I:double) = (r0 I:double) * (r2 I:double) \l0x0019: CAST (r0 I:float) = (float) (r0 I:double) \l0x001a: CONST  (r1 I:??[int, float, short, byte, char]) = (1119092736(0x42b40000, float:90.0) ??[int, float, short, byte, char]) \l0x001c: ARITH  (r1 I:float) = (r1 I:float) \- (r7 I:float A[D('angle' float)]) \l0x001d: CAST (r1 I:double) = (double) (r1 I:float) \l0x001e: INVOKE  (r1 I:double) = (r1 I:double) type: STATIC call: java.lang.Math.toRadians(double):double A[MD:(double):double (c)] (LINE:52)\l0x0022: INVOKE  (r1 I:double) = (r1 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)]\l0x0026: CAST (r3 I:double) = (double) (r9 I:float A[D('radius' float)]) \l0x0027: ARITH  (r1 I:double) = (r1 I:double) * (r3 I:double) \l0x0029: CAST (r3 I:double) = (double) (r8 I:float A[D('interpolation' float)]) \l0x002a: ARITH  (r1 I:double) = (r1 I:double) * (r3 I:double) \l0x002c: CAST (r1 I:float) = (float) (r1 I:double) \l0x002d: INVOKE  \l  (r6 I:com.google.android.material.shape.ShapePath A[D('shapePath' com.google.android.material.shape.ShapePath)])\l  (r0 I:float)\l  (r1 I:float)\l type: VIRTUAL call: com.google.android.material.shape.ShapePath.lineTo(float, float):void A[MD:(float, float):void (m)] (LINE:48)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|RETURN\l|0x0030: RETURN    (LINE:53)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.shape.CutCornerTreatment.getCornerPath((r5 'this' I:com.google.android.material.shape.CutCornerTreatment A[IMMUTABLE_TYPE, THIS]), (r6 I:com.google.android.material.shape.ShapePath A[D('shapePath' com.google.android.material.shape.ShapePath), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('angle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:float A[D('interpolation' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:float A[D('radius' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0030: r6 'shapePath' Lcom\/google\/android\/material\/shape\/ShapePath;\l  \-1 \-0x0030: r7 'angle' F\l  \-1 \-0x0030: r8 'interpolation' F\l  \-1 \-0x0030: r9 'radius' F\lMETHOD_OVERRIDE: [com.google.android.material.shape.CornerTreatment.getCornerPath(com.google.android.material.shape.ShapePath, float, float, float):void]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

