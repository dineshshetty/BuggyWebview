digraph "CFG forcom.google.android.material.shape.ShapeAppearancePathProvider.getCoordinatesOfCorner(ILandroid\/graphics\/RectF;Landroid\/graphics\/PointF;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: SWITCH  (r3 I:?? A[D('index' int)])\l case 1: goto B:17:0x001b\l case 2: goto B:16:0x0013\l case 3: goto B:15:0x000b\l default: goto B:14:0x0003  (LINE:307)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0003|0x0003: IGET  (r0 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.right float  (LINE:319)\l0x0005: IGET  (r1 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.top float \l0x0007: INVOKE  (r5 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]), (r0 I:float), (r1 I:float) type: VIRTUAL call: android.graphics.PointF.set(float, float):void A[MD:(float, float):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN   A[SYNTHETIC] (LINE:322)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IGET  (r0 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.left float  (LINE:315)\l0x000d: IGET  (r1 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.top float \l0x000f: INVOKE  (r5 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]), (r0 I:float), (r1 I:float) type: VIRTUAL call: android.graphics.PointF.set(float, float):void A[MD:(float, float):void (c)]\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN   A[SYNTHETIC] (LINE:322)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|0x0013: IGET  (r0 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.left float  (LINE:312)\l0x0015: IGET  (r1 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.bottom float \l0x0017: INVOKE  (r5 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]), (r0 I:float), (r1 I:float) type: VIRTUAL call: android.graphics.PointF.set(float, float):void A[MD:(float, float):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN   A[SYNTHETIC] (LINE:322)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|0x001b: IGET  (r0 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.right float  (LINE:309)\l0x001d: IGET  (r1 I:float) = (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) android.graphics.RectF.bottom float \l0x001f: INVOKE  (r5 I:android.graphics.PointF A[D('pointF' android.graphics.PointF)]), (r0 I:float), (r1 I:float) type: VIRTUAL call: android.graphics.PointF.set(float, float):void A[MD:(float, float):void (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0023|RETURN\lORIG_RETURN\l|0x0023: RETURN    (LINE:322)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.shape.ShapeAppearancePathProvider.getCoordinatesOfCorner((r2 'this' I:com.google.android.material.shape.ShapeAppearancePathProvider A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.RectF A[D('bounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.PointF A[D('pointF' android.graphics.PointF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000b \-\> B:18:0x0023, CROSS_EDGE: B:16:0x0013 \-\> B:18:0x0023, CROSS_EDGE: B:17:0x001b \-\> B:18:0x0023\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002d: r3 'index' I\l  \-1 \-0x002d: r4 'bounds' Landroid\/graphics\/RectF;\l  \-1 \-0x002d: r5 'pointF' Landroid\/graphics\/PointF;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15;
Node_13 -> Node_16;
Node_13 -> Node_17;
Node_14 -> Node_19;
Node_19 -> Node_12;
Node_15 -> Node_20;
Node_20 -> Node_12;
Node_16 -> Node_21;
Node_21 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_12;
}

