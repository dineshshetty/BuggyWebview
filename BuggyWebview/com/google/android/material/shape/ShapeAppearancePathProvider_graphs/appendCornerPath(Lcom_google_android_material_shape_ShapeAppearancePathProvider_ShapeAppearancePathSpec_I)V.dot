digraph "CFG forcom.google.android.material.shape.ShapeAppearancePathProvider.appendCornerPath(Lcom\/google\/android\/material\/shape\/ShapeAppearancePathProvider$ShapeAppearancePathSpec;I)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|r4.scratch[0] = r4.cornerPaths[r6].getStartX()\lr4.scratch[1] = r4.cornerPaths[r6].getStartY()\lr4.cornerTransforms[r6].mapPoints(r4.scratch)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|if (r6 != 0) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|android.graphics.Path r0 = r5.path\lfloat[] r1 = r4.scratch\lr0.moveTo(r1[0], r1[1])\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|r4.cornerPaths[r6].applyToPath(r4.cornerTransforms[r6], r5.path)\l}"];
Node_18 [shape=record,label="{18\:\ 0x004b|if (r5.pathListener == null) goto L9\l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|r5.pathListener.onCornerPathCreated(r4.cornerPaths[r6], r4.cornerTransforms[r6], r6)\l}"];
Node_20 [shape=record,label="{20\:\ 0x005a|RETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|android.graphics.Path r0 = r5.path\lfloat[] r1 = r4.scratch\lr0.lineTo(r1[0], r1[1])\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.shape.ShapeAppearancePathProvider.appendCornerPath((r4v0 'this' com.google.android.material.shape.ShapeAppearancePathProvider A[IMMUTABLE_TYPE, THIS]), (r5v0 'spec' com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec A[D('spec' com.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x004b \-\> B:20:0x005a, CROSS_EDGE: B:16:0x0031 \-\> B:17:0x003c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

