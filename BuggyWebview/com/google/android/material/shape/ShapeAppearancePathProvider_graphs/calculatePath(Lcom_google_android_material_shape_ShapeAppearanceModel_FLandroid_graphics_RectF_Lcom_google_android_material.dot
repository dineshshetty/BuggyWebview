digraph "CFG forcom.google.android.material.shape.ShapeAppearancePathProvider.calculatePath(Lcom\/google\/android\/material\/shape\/ShapeAppearanceModel;FLandroid\/graphics\/RectF;Lcom\/google\/android\/material\/shape\/ShapeAppearancePathProvider$PathListener;Landroid\/graphics\/Path;)V" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|r13.rewind()\lr8.overlappedEdgePath.rewind()\lr8.boundsPath.rewind()\lr8.boundsPath.addRect(r11, android.graphics.Path.Direction.CW)\lcom.google.android.material.shape.ShapeAppearancePathProvider$ShapeAppearancePathSpec r0 = new com.google.android.material.shape.ShapeAppearancePathProvider.ShapeAppearancePathSpec(r9, r10, r11, r12, r13)\lr1 = 0\l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|LOOP_START\lLOOP:0: B:22:0x0020\-\>B:24:0x0023\lPHI: r1 \l  PHI: (r1v2 'index' int) = (r1v1 'index' int), (r1v11 'index' int) binds: [B:21:0x0000, B:24:0x0023] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|if (r1 \>= 4) goto L5\l}"];
Node_24 [shape=record,label="{24\:\ 0x0023|LOOP_END\lLOOP:0: B:22:0x0020\-\>B:24:0x0023\l|setCornerPathAndTransform(r0, r1)\lsetEdgePathAndTransform(r1)\lint r1 = r1 + 1\l}"];
Node_34 [shape=record,label="{34\:\ 0x002c|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x002c|r1 = 0\l}"];
Node_26 [shape=record,label="{26\:\ 0x002d|LOOP_START\lLOOP:1: B:26:0x002d\-\>B:27:0x002f\lPHI: r1 \l  PHI: (r1v4 'index' int) = (r1v3 'index' int), (r1v10 'index' int) binds: [B:25:0x002c, B:27:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= 4) goto L9\l}"];
Node_27 [shape=record,label="{27\:\ 0x002f|LOOP_END\lLOOP:1: B:26:0x002d\-\>B:27:0x002f\l|appendCornerPath(r0, r1)\lappendEdgePath(r0, r1)\lint r1 = r1 + 1\l}"];
Node_35 [shape=record,label="{35\:\ 0x0038|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0038|r13.close()\lr8.overlappedEdgePath.close()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0044|if (android.os.Build.VERSION.SDK_INT \< 19) goto L18\l}"];
Node_30 [shape=record,label="{30\:\ 0x0046}"];
Node_31 [shape=record,label="{31\:\ 0x004c|if (r8.overlappedEdgePath.isEmpty() != false) goto L17\l}"];
Node_32 [shape=record,label="{32\:\ 0x004e|r13.op(r8.overlappedEdgePath, android.graphics.Path.Op.UNION)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0055|RETURN\lORIG_RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.shape.ShapeAppearancePathProvider.calculatePath((r8v0 'this' com.google.android.material.shape.ShapeAppearancePathProvider A[IMMUTABLE_TYPE, THIS]), (r9v0 'shapeAppearanceModel' com.google.android.material.shape.ShapeAppearanceModel A[D('shapeAppearanceModel' com.google.android.material.shape.ShapeAppearanceModel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'interpolation' float A[D('interpolation' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'bounds' android.graphics.RectF A[D('bounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'pathListener' com.google.android.material.shape.ShapeAppearancePathProvider$PathListener A[D('pathListener' com.google.android.material.shape.ShapeAppearancePathProvider$PathListener), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'path' android.graphics.Path A[D('path' android.graphics.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0023 \-\> B:22:0x0020, BACK_EDGE: B:27:0x002f \-\> B:26:0x002d, CROSS_EDGE: B:31:0x004c \-\> B:33:0x0055, CROSS_EDGE: B:29:0x0044 \-\> B:33:0x0055\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_34;
Node_24 -> Node_22;
Node_34 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_26;
Node_35 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_36;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_33 -> Node_20;
Node_37 -> Node_20;
Node_36 -> Node_20;
}

