digraph "CFG forcom.google.android.material.shape.ShapeAppearancePathProvider.\<init\>()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r4 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:71)\l0x0003: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:55)\l0x0004: NEW_ARRAY  (r1 I:com.google.android.material.shape.ShapePath[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: com.google.android.material.shape.ShapePath[] \l0x0006: IPUT  \l  (r1 I:com.google.android.material.shape.ShapePath[])\l  (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider)\l com.google.android.material.shape.ShapeAppearancePathProvider.cornerPaths com.google.android.material.shape.ShapePath[] \l0x0008: NEW_ARRAY  (r1 I:android.graphics.Matrix[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: android.graphics.Matrix[]  (LINE:56)\l0x000a: IPUT  (r1 I:android.graphics.Matrix[]), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.cornerTransforms android.graphics.Matrix[] \l0x000c: NEW_ARRAY  (r1 I:android.graphics.Matrix[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: android.graphics.Matrix[]  (LINE:57)\l0x000e: IPUT  (r1 I:android.graphics.Matrix[]), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.edgeTransforms android.graphics.Matrix[] \l0x0010: NEW_INSTANCE  (r1 I:android.graphics.PointF) =  android.graphics.PointF  (LINE:60)\l0x0012: INVOKE  (r1 I:android.graphics.PointF) type: DIRECT call: android.graphics.PointF.\<init\>():void A[MD:():void (c)]\l0x0015: IPUT  (r1 I:android.graphics.PointF), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.pointF android.graphics.PointF \l0x0017: NEW_INSTANCE  (r1 I:android.graphics.Path) =  android.graphics.Path  (LINE:61)\l0x0019: INVOKE  (r1 I:android.graphics.Path) type: DIRECT call: android.graphics.Path.\<init\>():void A[MD:():void (c)]\l0x001c: IPUT  (r1 I:android.graphics.Path), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.overlappedEdgePath android.graphics.Path \l0x001e: NEW_INSTANCE  (r1 I:android.graphics.Path) =  android.graphics.Path  (LINE:62)\l0x0020: INVOKE  (r1 I:android.graphics.Path) type: DIRECT call: android.graphics.Path.\<init\>():void A[MD:():void (c)]\l0x0023: IPUT  (r1 I:android.graphics.Path), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.boundsPath android.graphics.Path \l0x0025: NEW_INSTANCE  (r1 I:com.google.android.material.shape.ShapePath) =  com.google.android.material.shape.ShapePath  (LINE:63)\l0x0027: INVOKE  (r1 I:com.google.android.material.shape.ShapePath) type: DIRECT call: com.google.android.material.shape.ShapePath.\<init\>():void A[MD:():void (m)]\l0x002a: IPUT  \l  (r1 I:com.google.android.material.shape.ShapePath)\l  (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider)\l com.google.android.material.shape.ShapeAppearancePathProvider.shapePath com.google.android.material.shape.ShapePath \l0x002c: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:64)\l0x002d: NEW_ARRAY  (r2 I:float[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x002f: IPUT  (r2 I:float[]), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.scratch float[] \l0x0031: NEW_ARRAY  (r1 I:float[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: float[]  (LINE:65)\l0x0033: IPUT  (r1 I:float[]), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.scratch2 float[] \l0x0035: NEW_INSTANCE  (r1 I:android.graphics.Path) =  android.graphics.Path  (LINE:66)\l0x0037: INVOKE  (r1 I:android.graphics.Path) type: DIRECT call: android.graphics.Path.\<init\>():void A[MD:():void (c)]\l0x003a: IPUT  (r1 I:android.graphics.Path), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.edgePath android.graphics.Path \l0x003c: NEW_INSTANCE  (r1 I:android.graphics.Path) =  android.graphics.Path  (LINE:67)\l0x003e: INVOKE  (r1 I:android.graphics.Path) type: DIRECT call: android.graphics.Path.\<init\>():void A[MD:():void (c)]\l0x0041: IPUT  (r1 I:android.graphics.Path), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.cornerPath android.graphics.Path \l0x0043: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:69)\l0x0044: IPUT  (r1 I:boolean), (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.edgeIntersectionCheckEnabled boolean \l0x0046: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:72)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0047|LOOP_START\lLOOP:0: B:10:0x0047\-\>B:11:0x0049\l|0x0047: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:13:0x0067 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0049|LOOP_END\lLOOP:0: B:10:0x0047\-\>B:11:0x0049\l|0x0049: IGET  (r2 I:com.google.android.material.shape.ShapePath[]) = (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.cornerPaths com.google.android.material.shape.ShapePath[]  (LINE:73)\l0x004b: NEW_INSTANCE  (r3 I:com.google.android.material.shape.ShapePath) =  com.google.android.material.shape.ShapePath \l0x004d: INVOKE  (r3 I:com.google.android.material.shape.ShapePath) type: DIRECT call: com.google.android.material.shape.ShapePath.\<init\>():void A[MD:():void (m)]\l0x0050: APUT  (r2 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[OBJECT, ARRAY]) \l0x0052: IGET  (r2 I:android.graphics.Matrix[]) = (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.cornerTransforms android.graphics.Matrix[]  (LINE:74)\l0x0054: NEW_INSTANCE  (r3 I:android.graphics.Matrix) =  android.graphics.Matrix \l0x0056: INVOKE  (r3 I:android.graphics.Matrix) type: DIRECT call: android.graphics.Matrix.\<init\>():void A[MD:():void (c)]\l0x0059: APUT  (r2 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[OBJECT, ARRAY]) \l0x005b: IGET  (r2 I:android.graphics.Matrix[]) = (r4 I:com.google.android.material.shape.ShapeAppearancePathProvider) com.google.android.material.shape.ShapeAppearancePathProvider.edgeTransforms android.graphics.Matrix[]  (LINE:75)\l0x005d: NEW_INSTANCE  (r3 I:android.graphics.Matrix) =  android.graphics.Matrix \l0x005f: INVOKE  (r3 I:android.graphics.Matrix) type: DIRECT call: android.graphics.Matrix.\<init\>():void A[MD:():void (c)]\l0x0062: APUT  (r2 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[OBJECT, ARRAY]) \l0x0064: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:72)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0067|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0067|RETURN\l|0x0067: RETURN    (LINE:77)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.shape.ShapeAppearancePathProvider.\<init\>((r4 'this' I:com.google.android.material.shape.ShapeAppearancePathProvider A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0049 \-\> B:10:0x0047\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0047\-0x0067: r1 'i' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_10;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

