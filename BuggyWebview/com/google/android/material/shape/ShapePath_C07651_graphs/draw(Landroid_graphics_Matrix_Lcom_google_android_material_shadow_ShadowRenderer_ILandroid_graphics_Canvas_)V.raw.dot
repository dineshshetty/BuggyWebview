digraph "CFG forcom.google.android.material.shape.ShapePath.1.draw(Landroid\/graphics\/Matrix;Lcom\/google\/android\/material\/shadow\/ShadowRenderer;ILandroid\/graphics\/Canvas;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:java.util.List) = (r3 I:com.google.android.material.shape.ShapePath$1) com.google.android.material.shape.ShapePath.1.val$operations java.util.List  (LINE:304)\l0x0002: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|LOOP_START\lLOOP:0: B:11:0x0006\-\>B:13:0x000c\l|0x0006: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0018 \l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|LOOP_END\lLOOP:0: B:11:0x0006\-\>B:13:0x000c\l|0x000c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0010: CHECK_CAST (r1 I:com.google.android.material.shape.ShapePath$ShadowCompatOperation) = (com.google.android.material.shape.ShapePath$ShadowCompatOperation) (r1 I:??[OBJECT, ARRAY]) \l0x0012: IGET  (r2 I:android.graphics.Matrix) = (r3 I:com.google.android.material.shape.ShapePath$1) com.google.android.material.shape.ShapePath.1.val$transformCopy android.graphics.Matrix  (LINE:305)\l0x0014: INVOKE  \l  (r1 I:com.google.android.material.shape.ShapePath$ShadowCompatOperation A[D('op' com.google.android.material.shape.ShapePath$ShadowCompatOperation)])\l  (r2 I:android.graphics.Matrix)\l  (r5 I:com.google.android.material.shadow.ShadowRenderer A[D('shadowRenderer' com.google.android.material.shadow.ShadowRenderer)])\l  (r6 I:int A[D('shadowElevation' int)])\l  (r7 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l type: VIRTUAL call: com.google.android.material.shape.ShapePath.ShadowCompatOperation.draw(android.graphics.Matrix, com.google.android.material.shadow.ShadowRenderer, int, android.graphics.Canvas):void A[MD:(android.graphics.Matrix, com.google.android.material.shadow.ShadowRenderer, int, android.graphics.Canvas):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|RETURN\l|0x0018: RETURN    (LINE:307)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.shape.ShapePath.1.draw((r3 'this' I:com.google.android.material.shape.ShapePath$1 A[IMMUTABLE_TYPE, THIS]), (r4 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:com.google.android.material.shadow.ShadowRenderer A[D('shadowRenderer' com.google.android.material.shadow.ShadowRenderer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('shadowElevation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x000c \-\> B:11:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0017: r1 'op' Lcom\/google\/android\/material\/shape\/ShapePath$ShadowCompatOperation;\l  \-1 \-0x0018: r4 'matrix' Landroid\/graphics\/Matrix;\l  \-1 \-0x0018: r5 'shadowRenderer' Lcom\/google\/android\/material\/shadow\/ShadowRenderer;\l  \-1 \-0x0018: r6 'shadowElevation' I\l  \-1 \-0x0018: r7 'canvas' Landroid\/graphics\/Canvas;\lMETHOD_OVERRIDE: [com.google.android.material.shape.ShapePath.ShadowCompatOperation.draw(android.graphics.Matrix, com.google.android.material.shadow.ShadowRenderer, int, android.graphics.Canvas):void]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

