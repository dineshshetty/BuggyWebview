digraph "CFG forcom.google.android.material.shape.ShapePath.1.draw(Landroid\/graphics\/Matrix;Lcom\/google\/android\/material\/shadow\/ShadowRenderer;ILandroid\/graphics\/Canvas;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|java.util.Iterator r0 = r2.iterator()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|LOOP_START\lLOOP:0: B:11:0x0006\-\>B:13:0x000c\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|if (r0.hasNext() == false) goto L5\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|LOOP_END\lLOOP:0: B:11:0x0006\-\>B:13:0x000c\l|com.google.android.material.shape.ShapePath$ShadowCompatOperation r1 = (com.google.android.material.shape.ShapePath.ShadowCompatOperation) r0.next()\lr1.draw(r3, r5, r6, r7)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.shape.ShapePath.1.draw((r3v0 'this' com.google.android.material.shape.ShapePath$1 A[IMMUTABLE_TYPE, THIS]), (r4v0 'matrix' android.graphics.Matrix A[D('matrix' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'shadowRenderer' com.google.android.material.shadow.ShadowRenderer A[D('shadowRenderer' com.google.android.material.shadow.ShadowRenderer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'shadowElevation' int A[D('shadowElevation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'canvas' android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x000c \-\> B:11:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [com.google.android.material.shape.ShapePath.ShadowCompatOperation.draw(android.graphics.Matrix, com.google.android.material.shadow.ShadowRenderer, int, android.graphics.Canvas):void]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

