digraph "CFG forcom.google.android.material.shape.MaterialShapeDrawable.calculateTintColorTintFilter(Landroid\/content\/res\/ColorStateList;Landroid\/graphics\/PorterDuff$Mode;Z)Landroid\/graphics\/PorterDuffColorFilter;" {
subgraph cluster_Region_1436210960 {
label = "R(4:1|(1:3)|4|5)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|int int r0 = r3.getColorForState(getState(), 0)\l}"];
subgraph cluster_IfRegion_1801354162 {
label = "IF [B:10:0x0009] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0009|if (r5 != false) goto L3\l}"];
subgraph cluster_Region_1649717881 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000b|int r0 = compositeElevationOverlayIfNeeded(r0)\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x000f|PHI: r0 \l  PHI: (r0v2 'tintColor' int) = (r0v1 'tintColor' int), (r0v3 'tintColor' int) binds: [B:10:0x0009, B:11:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|r2.resolvedTintColor = r0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0016|RETURN\l|return new android.graphics.PorterDuffColorFilter(r0, r4)\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private android.graphics.PorterDuffColorFilter com.google.android.material.shape.MaterialShapeDrawable.calculateTintColorTintFilter((r2v0 'this' com.google.android.material.shape.MaterialShapeDrawable A[IMMUTABLE_TYPE, THIS]), (r3v0 'tintList' android.content.res.ColorStateList A[D('tintList' android.content.res.ColorStateList), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'tintMode' android.graphics.PorterDuff$Mode A[D('tintMode' android.graphics.PorterDuff$Mode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'requiresElevationOverlay' boolean A[D('requiresElevationOverlay' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0009 \-\> B:12:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

