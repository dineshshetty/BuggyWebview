digraph "CFG forcom.google.android.material.shape.MaterialShapeDrawable.prepareCanvasForShadow(Landroid\/graphics\/Canvas;)V" {
subgraph cluster_Region_2017157781 {
label = "R(3:1|(1:5)|6)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|int int r0 = getShadowOffsetX()\lint int r1 = getShadowOffsetY()\l}"];
subgraph cluster_IfRegion_1523616227 {
label = "IF [B:12:0x000c, B:14:0x0010] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000c|if (android.os.Build.VERSION.SDK_INT \< 21) goto L3\l}"];
Node_14 [shape=record,label="{14\:\ 0x0010|ADDED_TO_REGION\l|if (r5.shadowBitmapDrawingEnable != false) goto L5\l}"];
subgraph cluster_Region_532535216 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0012|android.graphics.Rect android.graphics.Rect r2 = r6.getClipBounds()\lr2.inset(\-r5.drawableState.shadowCompatRadius, \-r5.drawableState.shadowCompatRadius)\lr2.offset(r0, r1)\lr6.clipRect(r2, android.graphics.Region.Op.REPLACE)\l}"];
}
}
Node_16 [shape=record,label="{16\:\ 0x002b|r6.translate(r0, r1)\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000e}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0030}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.shape.MaterialShapeDrawable.prepareCanvasForShadow((r5v0 'this' com.google.android.material.shape.MaterialShapeDrawable A[IMMUTABLE_TYPE, THIS]), (r6v0 'canvas' android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0010 \-\> B:16:0x002b, CROSS_EDGE: B:12:0x000c \-\> B:16:0x002b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_9 -> Node_11;
Node_13 -> Node_14;
Node_17 -> Node_10;
}

