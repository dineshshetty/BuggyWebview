digraph "CFG forcom.google.android.material.shape.MaterialShapeDrawable.calculatePath(Landroid\/graphics\/RectF;Landroid\/graphics\/Path;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  \l  (r6 I:com.google.android.material.shape.MaterialShapeDrawable)\l  (r7 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)])\l  (r8 I:android.graphics.Path A[D('path' android.graphics.Path)])\l type: VIRTUAL call: com.google.android.material.shape.MaterialShapeDrawable.calculatePathForSize(android.graphics.RectF, android.graphics.Path):void A[MD:(android.graphics.RectF, android.graphics.Path):void (m)] (LINE:1220)\l0x0003: IGET  (r0 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) = (r6 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.drawableState com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState  (LINE:1222)\l0x0005: IGET  (r0 I:float) = (r0 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState.scale float \l0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x0009: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0030 \l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|0x000d: IGET  (r0 I:android.graphics.Matrix) = (r6 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.matrix android.graphics.Matrix  (LINE:1223)\l0x000f: INVOKE  (r0 I:android.graphics.Matrix) type: VIRTUAL call: android.graphics.Matrix.reset():void A[MD:():void (c)]\l0x0012: IGET  (r0 I:android.graphics.Matrix) = (r6 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.matrix android.graphics.Matrix  (LINE:1224)\l0x0014: IGET  (r1 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) = (r6 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.drawableState com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState \l0x0016: IGET  (r1 I:float) = (r1 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState.scale float \l0x0018: IGET  (r2 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) = (r6 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.drawableState com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState \l0x001a: IGET  (r2 I:float) = (r2 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState.scale float \l0x001c: INVOKE  (r3 I:float) = (r7 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)] (LINE:1225)\l0x0020: CONST  (r4 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l0x0022: ARITH  (r3 I:float) = (r3 I:float) \/ (r4 I:float) \l0x0023: INVOKE  (r5 I:float) = (r7 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.height():float A[MD:():float (c)]\l0x0027: ARITH  (r5 I:float) = (r5 I:float) \/ (r4 I:float) \l0x0028: INVOKE  (r0 I:android.graphics.Matrix), (r1 I:float), (r2 I:float), (r3 I:float), (r5 I:float) type: VIRTUAL call: android.graphics.Matrix.setScale(float, float, float, float):void A[MD:(float, float, float, float):void (c)] (LINE:1224)\l0x002b: IGET  (r0 I:android.graphics.Matrix) = (r6 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.matrix android.graphics.Matrix  (LINE:1226)\l0x002d: INVOKE  (r8 I:android.graphics.Path A[D('path' android.graphics.Path)]), (r0 I:android.graphics.Matrix) type: VIRTUAL call: android.graphics.Path.transform(android.graphics.Matrix):void A[MD:(android.graphics.Matrix):void (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: IGET  (r0 I:android.graphics.RectF) = (r6 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.pathBounds android.graphics.RectF  (LINE:1230)\l0x0032: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0033: INVOKE  (r8 I:android.graphics.Path A[D('path' android.graphics.Path)]), (r0 I:android.graphics.RectF), (r1 I:boolean) type: VIRTUAL call: android.graphics.Path.computeBounds(android.graphics.RectF, boolean):void A[MD:(android.graphics.RectF, boolean):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0036|RETURN\l|0x0036: RETURN    (LINE:1231)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.shape.MaterialShapeDrawable.calculatePath((r6 'this' I:com.google.android.material.shape.MaterialShapeDrawable A[IMMUTABLE_TYPE, THIS]), (r7 I:android.graphics.RectF A[D('bounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.graphics.Path A[D('path' android.graphics.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000b \-\> B:12:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0036: r7 'bounds' Landroid\/graphics\/RectF;\l  \-1 \-0x0036: r8 'path' Landroid\/graphics\/Path;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

