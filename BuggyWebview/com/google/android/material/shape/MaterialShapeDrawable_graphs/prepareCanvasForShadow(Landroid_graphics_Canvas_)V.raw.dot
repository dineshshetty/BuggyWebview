digraph "CFG forcom.google.android.material.shape.MaterialShapeDrawable.prepareCanvasForShadow(Landroid\/graphics\/Canvas;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:com.google.android.material.shape.MaterialShapeDrawable) type: VIRTUAL call: com.google.android.material.shape.MaterialShapeDrawable.getShadowOffsetX():int A[MD:():int (m)] (LINE:1085)\l0x0004: INVOKE  (r1 I:int) = (r5 I:com.google.android.material.shape.MaterialShapeDrawable) type: VIRTUAL call: com.google.android.material.shape.MaterialShapeDrawable.getShadowOffsetY():int A[MD:():int (m)] (LINE:1086)\l0x0008: SGET  (r2 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:1091)\l0x000a: CONST  (r3 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|0x000c: IF  (r2 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:16:0x002b \l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|0x000e: IGET  (r2 I:boolean) = (r5 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.shadowBitmapDrawingEnable boolean \l}"];
Node_14 [shape=record,label="{14\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x002b \l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|0x0012: INVOKE  (r2 I:android.graphics.Rect) = (r6 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]) type: VIRTUAL call: android.graphics.Canvas.getClipBounds():android.graphics.Rect A[MD:():android.graphics.Rect (c)] (LINE:1094)\l0x0016: IGET  (r3 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) = (r5 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.drawableState com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState  (LINE:1095)\l0x0018: IGET  (r3 I:int) = (r3 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState.shadowCompatRadius int \l0x001a: NEG  (r3 I:int) = (r3 I:int) \l0x001b: IGET  (r4 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) = (r5 I:com.google.android.material.shape.MaterialShapeDrawable) com.google.android.material.shape.MaterialShapeDrawable.drawableState com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState \l0x001d: IGET  (r4 I:int) = (r4 I:com.google.android.material.shape.MaterialShapeDrawable$MaterialShapeDrawableState) com.google.android.material.shape.MaterialShapeDrawable.MaterialShapeDrawableState.shadowCompatRadius int \l0x001f: NEG  (r4 I:int) = (r4 I:int) \l0x0020: INVOKE  (r2 I:android.graphics.Rect A[D('canvasClipBounds' android.graphics.Rect)]), (r3 I:int), (r4 I:int) type: VIRTUAL call: android.graphics.Rect.inset(int, int):void A[MD:(int, int):void (c)]\l0x0023: INVOKE  \l  (r2 I:android.graphics.Rect A[D('canvasClipBounds' android.graphics.Rect)])\l  (r0 I:int A[D('shadowOffsetX' int)])\l  (r1 I:int A[D('shadowOffsetY' int)])\l type: VIRTUAL call: android.graphics.Rect.offset(int, int):void A[MD:(int, int):void (c)] (LINE:1096)\l0x0026: SGET  (r3 I:android.graphics.Region$Op) =  android.graphics.Region.Op.REPLACE android.graphics.Region$Op  (LINE:1097)\l0x0028: INVOKE  \l  (r6 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l  (r2 I:android.graphics.Rect A[D('canvasClipBounds' android.graphics.Rect)])\l  (r3 I:android.graphics.Region$Op)\l type: VIRTUAL call: android.graphics.Canvas.clipRect(android.graphics.Rect, android.graphics.Region$Op):boolean A[MD:(android.graphics.Rect, android.graphics.Region$Op):boolean (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: CAST (r2 I:float A[D('canvasClipBounds' android.graphics.Rect)]) = (float) (r0 I:int A[D('shadowOffsetX' int)])  (LINE:1102)\l0x002c: CAST (r3 I:float) = (float) (r1 I:int A[D('shadowOffsetY' int)]) \l0x002d: INVOKE  (r6 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)]), (r2 I:float), (r3 I:float) type: VIRTUAL call: android.graphics.Canvas.translate(float, float):void A[MD:(float, float):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0030|RETURN\l|0x0030: RETURN    (LINE:1103)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.shape.MaterialShapeDrawable.prepareCanvasForShadow((r5 'this' I:com.google.android.material.shape.MaterialShapeDrawable A[IMMUTABLE_TYPE, THIS]), (r6 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0010 \-\> B:16:0x002b, CROSS_EDGE: B:12:0x000c \-\> B:16:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x002b: r2 'canvasClipBounds' Landroid\/graphics\/Rect;\l  0x0004\-0x0030: r0 'shadowOffsetX' I\l  0x0008\-0x0030: r1 'shadowOffsetY' I\l  \-1 \-0x0030: r6 'canvas' Landroid\/graphics\/Canvas;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

