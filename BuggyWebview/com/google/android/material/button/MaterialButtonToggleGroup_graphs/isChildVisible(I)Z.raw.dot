digraph "CFG forcom.google.android.material.button.MaterialButtonToggleGroup.isChildVisible(I)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:android.view.View) = (r3 I:com.google.android.material.button.MaterialButtonToggleGroup), (r4 I:int A[D('i' int)]) type: VIRTUAL call: com.google.android.material.button.MaterialButtonToggleGroup.getChildAt(int):android.view.View A[MD:(int):android.view.View (s)] (LINE:601)\l0x0004: INVOKE  (r1 I:int) = (r0 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getVisibility():int A[MD:():int (c)] (LINE:602)\l0x0008: CONST  (r2 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000e \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|SYNTHETIC\lRETURN\l|0x000c: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\lORIG_RETURN\l|0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean com.google.android.material.button.MaterialButtonToggleGroup.isChildVisible((r3 'this' I:com.google.android.material.button.MaterialButtonToggleGroup A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000e \-\> B:14:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000f: r0 'child' Landroid\/view\/View;\l  \-1 \-0x000f: r4 'i' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

