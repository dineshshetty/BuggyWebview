digraph "CFG forcom.google.android.material.transition.MaterialContainerTransform.2.onTransitionEnd(Landroidx\/transition\/Transition;)V" {
subgraph cluster_Region_224036206 {
label = "R(2:1|(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|com.google.android.material.transition.MaterialContainerTransform.this.removeListener(r2)\l}"];
subgraph cluster_Region_895379498 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_542759382 {
label = "IF [B:10:0x000b] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000b|if (com.google.android.material.transition.MaterialContainerTransform.this.holdAtEndEnabled != false) goto L3\l}"];
subgraph cluster_Region_1760324930 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000d|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_826598596 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000e|r4.setAlpha(1.0f)\lr5.setAlpha(1.0f)\lcom.google.android.material.internal.ViewUtils.getOverlay(r2).remove(r3)\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0025}"];
MethodNode[shape=record,label="{public void com.google.android.material.transition.MaterialContainerTransform.2.onTransitionEnd((r2v0 'this' com.google.android.material.transition.MaterialContainerTransform$2 A[IMMUTABLE_TYPE, THIS]), (r3v0 'transition' androidx.transition.Transition A[D('transition' androidx.transition.Transition), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0025 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.transition.Transition.TransitionListener.onTransitionEnd(androidx.transition.Transition):void]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_7 -> Node_9;
Node_13 -> Node_8;
}

