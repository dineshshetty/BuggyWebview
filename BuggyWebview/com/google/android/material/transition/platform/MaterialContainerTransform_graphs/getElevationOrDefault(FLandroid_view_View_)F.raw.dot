digraph "CFG forcom.google.android.material.transition.platform.MaterialContainerTransform.getElevationOrDefault(FLandroid\/view\/View;)F" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1082130432(0xffffffffbf800000, float:\-1.0) ??[int, float, short, byte, char])  (LINE:1025)\l0x0002: CMP_L  (r0 I:int) = (r1 I:float A[D('elevation' float)]), (r0 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('elevation' float)]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000c: RETURN  (r0 I:float) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|0x0008: INVOKE  (r0 I:float) = (r2 I:android.view.View A[D('view' android.view.View)]) type: STATIC call: androidx.core.view.ViewCompat.getElevation(android.view.View):float A[MD:(android.view.View):float (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{private static float com.google.android.material.transition.platform.MaterialContainerTransform.getElevationOrDefault((r1 I:float A[D('elevation' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:14:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r1 'elevation' F\l  \-1 \-0x000c: r2 'view' Landroid\/view\/View;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

