digraph "CFG forcom.google.android.material.transition.platform.MaterialContainerTransform.\<init\>(Landroid\/content\/Context;Z)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|r0 = false\lr4.drawDebugEnabled = false\lr4.holdAtEndEnabled = false\lr4.pathMotionCustom = false\lr4.appliedThemeValues = false\lr4.drawingViewId = 16908290\lr4.startViewId = \-1\lr4.endViewId = \-1\lr4.containerColor = 0\lr4.startContainerColor = 0\lr4.endContainerColor = 0\lr4.scrimColor = 1375731712\lr4.transitionDirection = 0\lr4.fadeMode = 0\lr4.fitMode = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|if (android.os.Build.VERSION.SDK_INT \< 28) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|r0 = true\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v3 boolean) binds: [B:10:0x002b, B:11:0x002d] A[DONT_GENERATE, DONT_INLINE]\l|r4.elevationShadowEnabled = r0\lr4.startElevation = com.google.android.material.transition.platform.MaterialContainerTransform.ELEVATION_NOT_SET\lr4.endElevation = com.google.android.material.transition.platform.MaterialContainerTransform.ELEVATION_NOT_SET\lmaybeApplyThemeValues(r5, r6)\lr4.appliedThemeValues = true\l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void com.google.android.material.transition.platform.MaterialContainerTransform.\<init\>((r4v0 'this' com.google.android.material.transition.platform.MaterialContainerTransform A[IMMUTABLE_TYPE, THIS]), (r5v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'entering' boolean A[D('entering' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x002b \-\> B:12:0x002e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

