digraph "CFG forcom.google.android.material.transition.platform.TransitionUtils.isShapeAppearanceSignificant(Lcom\/google\/android\/material\/shape\/ShapeAppearanceModel;Landroid\/graphics\/RectF;)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:com.google.android.material.shape.CornerSize) = \l  (r2 I:com.google.android.material.shape.ShapeAppearanceModel A[D('shapeAppearanceModel' com.google.android.material.shape.ShapeAppearanceModel)])\l type: VIRTUAL call: com.google.android.material.shape.ShapeAppearanceModel.getTopLeftCornerSize():com.google.android.material.shape.CornerSize A[MD:():com.google.android.material.shape.CornerSize (m)] (LINE:170)\l0x0004: INVOKE  (r0 I:float) = \l  (r0 I:com.google.android.material.shape.CornerSize)\l  (r3 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)])\l type: INTERFACE call: com.google.android.material.shape.CornerSize.getCornerSize(android.graphics.RectF):float A[MD:(android.graphics.RectF):float (m)]\l0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0034 \l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|0x000d: INVOKE  (r0 I:com.google.android.material.shape.CornerSize) = \l  (r2 I:com.google.android.material.shape.ShapeAppearanceModel A[D('shapeAppearanceModel' com.google.android.material.shape.ShapeAppearanceModel)])\l type: VIRTUAL call: com.google.android.material.shape.ShapeAppearanceModel.getTopRightCornerSize():com.google.android.material.shape.CornerSize A[MD:():com.google.android.material.shape.CornerSize (m)] (LINE:171)\l0x0011: INVOKE  (r0 I:float) = \l  (r0 I:com.google.android.material.shape.CornerSize)\l  (r3 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)])\l type: INTERFACE call: com.google.android.material.shape.CornerSize.getCornerSize(android.graphics.RectF):float A[MD:(android.graphics.RectF):float (m)]\l0x0015: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0017|0x0017: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0034 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0019|0x0019: INVOKE  (r0 I:com.google.android.material.shape.CornerSize) = \l  (r2 I:com.google.android.material.shape.ShapeAppearanceModel A[D('shapeAppearanceModel' com.google.android.material.shape.ShapeAppearanceModel)])\l type: VIRTUAL call: com.google.android.material.shape.ShapeAppearanceModel.getBottomRightCornerSize():com.google.android.material.shape.CornerSize A[MD:():com.google.android.material.shape.CornerSize (m)] (LINE:172)\l0x001d: INVOKE  (r0 I:float) = \l  (r0 I:com.google.android.material.shape.CornerSize)\l  (r3 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)])\l type: INTERFACE call: com.google.android.material.shape.CornerSize.getCornerSize(android.graphics.RectF):float A[MD:(android.graphics.RectF):float (m)]\l0x0021: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0034 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0025|0x0025: INVOKE  (r0 I:com.google.android.material.shape.CornerSize) = \l  (r2 I:com.google.android.material.shape.ShapeAppearanceModel A[D('shapeAppearanceModel' com.google.android.material.shape.ShapeAppearanceModel)])\l type: VIRTUAL call: com.google.android.material.shape.ShapeAppearanceModel.getBottomLeftCornerSize():com.google.android.material.shape.CornerSize A[MD:():com.google.android.material.shape.CornerSize (m)] (LINE:173)\l0x0029: INVOKE  (r0 I:float) = \l  (r0 I:com.google.android.material.shape.CornerSize)\l  (r3 I:android.graphics.RectF A[D('bounds' android.graphics.RectF)])\l type: INTERFACE call: com.google.android.material.shape.CornerSize.getCornerSize(android.graphics.RectF):float A[MD:(android.graphics.RectF):float (m)]\l0x002d: CMP_L  (r0 I:int) = (r0 I:float), (r1 I:float) \l}"];
Node_24 [shape=record,label="{24\:\ 0x002f|0x002f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0032 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0032|SYNTHETIC\lRETURN\l|0x0032: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0035: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:170)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0034|RETURN\lORIG_RETURN\l|0x0034: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0035: RETURN  (r0 I:boolean)  (LINE:170)\l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.material.transition.platform.TransitionUtils.isShapeAppearanceSignificant((r2 I:com.google.android.material.shape.ShapeAppearanceModel A[D('shapeAppearanceModel' com.google.android.material.shape.ShapeAppearanceModel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.graphics.RectF A[D('bounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0034 \-\> B:28:0x0035, CROSS_EDGE: B:22:0x0023 \-\> B:27:0x0034, CROSS_EDGE: B:20:0x0017 \-\> B:27:0x0034, CROSS_EDGE: B:18:0x000b \-\> B:27:0x0034\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0035: r2 'shapeAppearanceModel' Lcom\/google\/android\/material\/shape\/ShapeAppearanceModel;\l  \-1 \-0x0035: r3 'bounds' Landroid\/graphics\/RectF;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_16;
Node_27 -> Node_16;
}

