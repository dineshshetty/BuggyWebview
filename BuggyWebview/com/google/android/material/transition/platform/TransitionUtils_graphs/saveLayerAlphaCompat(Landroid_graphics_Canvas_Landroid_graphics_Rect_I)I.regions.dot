digraph "CFG forcom.google.android.material.transition.platform.TransitionUtils.saveLayerAlphaCompat(Landroid\/graphics\/Canvas;Landroid\/graphics\/Rect;I)I" {
subgraph cluster_Region_858903640 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|android.graphics.RectF android.graphics.RectF r0 = com.google.android.material.transition.platform.TransitionUtils.transformAlphaRectF\lr0.set(r9)\l}"];
subgraph cluster_Region_1665065878 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_801831395 {
label = "IF [B:11:0x0009] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0009|if (android.os.Build.VERSION.SDK_INT \>= 21) goto L3\l}"];
subgraph cluster_Region_775768520 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000f|RETURN\l|return r8.saveLayerAlpha(r0, r10)\l}"];
}
}
subgraph cluster_Region_1588851731 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0020|RETURN\l|return r8.saveLayerAlpha(r0.left, r0.top, r0.right, r0.bottom, r10, 31)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000b}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0010}"];
MethodNode[shape=record,label="{private static int com.google.android.material.transition.platform.TransitionUtils.saveLayerAlphaCompat((r8v0 'canvas' android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'bounds' android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'alpha' int A[D('alpha' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0020 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

