digraph "CFG forcom.google.android.material.transition.platform.TransitionUtils.transform(Landroid\/graphics\/Canvas;Landroid\/graphics\/Rect;FFFILcom\/google\/android\/material\/transition\/platform\/TransitionUtils$CanvasOperation;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|if (r7 \> 0) goto L4\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|int r0 = r2.save()\lr2.translate(r4, r5)\lr2.scale(r6, r6)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|if (r7 \>= 255) goto L7\l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|saveLayerAlphaCompat(r2, r3, r7)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0014|r8.run(r2)\lr2.restoreToCount(r0)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001a|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public static void com.google.android.material.transition.platform.TransitionUtils.transform((r2v0 'canvas' android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'bounds' android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'dx' float A[D('dx' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'dy' float A[D('dy' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'scale' float A[D('scale' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'alpha' int A[D('alpha' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'op' com.google.android.material.transition.platform.TransitionUtils$CanvasOperation A[D('op' com.google.android.material.transition.platform.TransitionUtils$CanvasOperation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001a \-\> B:10:?, CROSS_EDGE: B:14:0x000f \-\> B:16:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

