digraph "CFG forcom.google.android.material.transition.platform.ScaleProvider.createAppear(Landroid\/view\/ViewGroup;Landroid\/view\/View;)Landroid\/animation\/Animator;" {
subgraph cluster_Region_514806459 {
label = "R(1:(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1319850724 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_500980086 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r2.growing != false) goto L3\l}"];
subgraph cluster_Region_126777143 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|return createScaleAnimator(r4, r2.incomingStartScale, r2.incomingEndScale)\l}"];
}
}
subgraph cluster_Region_1674631159 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0015|RETURN\l|return createScaleAnimator(r4, r2.outgoingEndScale, r2.outgoingStartScale)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000d}"];
MethodNode[shape=record,label="{public android.animation.Animator com.google.android.material.transition.platform.ScaleProvider.createAppear((r2v0 'this' com.google.android.material.transition.platform.ScaleProvider A[IMMUTABLE_TYPE, THIS]), (r3v0 'sceneRoot' android.view.ViewGroup A[D('sceneRoot' android.view.ViewGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0015 \-\> B:9:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [com.google.android.material.transition.platform.VisibilityAnimatorProvider.createAppear(android.view.ViewGroup, android.view.View):android.animation.Animator]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

