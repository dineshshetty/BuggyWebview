digraph "CFG forcom.google.android.material.transition.platform.FitModeEvaluators.shouldAutoFitToWidth(ZLandroid\/graphics\/RectF;Landroid\/graphics\/RectF;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:float) = (r10 I:android.graphics.RectF A[D('startBounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)] (LINE:143)\l0x0004: INVOKE  (r1 I:float) = (r10 I:android.graphics.RectF A[D('startBounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.height():float A[MD:():float (c)] (LINE:144)\l0x0008: INVOKE  (r2 I:float) = (r11 I:android.graphics.RectF A[D('endBounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)] (LINE:145)\l0x000c: INVOKE  (r3 I:float) = (r11 I:android.graphics.RectF A[D('endBounds' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.height():float A[MD:():float (c)] (LINE:146)\l0x0010: ARITH  (r4 I:float) = (r3 I:float A[D('endHeight' float)]) * (r0 I:float A[D('startWidth' float)])  (LINE:148)\l0x0012: ARITH  (r4 I:float) = (r4 I:float) \/ (r2 I:float A[D('endWidth' float)]) \l0x0013: ARITH  (r5 I:float) = (r1 I:float A[D('startHeight' float)]) * (r2 I:float A[D('endWidth' float)])  (LINE:149)\l0x0015: ARITH  (r5 I:float) = (r5 I:float) \/ (r0 I:float A[D('startWidth' float)]) \l0x0016: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:150)\l0x0017: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|0x0018: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('entering' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001f \l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|0x001a: CMP_L  (r8 I:int) = (r4 I:float A[D('endHeightFitToWidth' float)]), (r1 I:float A[D('startHeight' float)]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|0x001c: IF  (r8 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:24:0x0024 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: RETURN  (r6 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN  (r6 I:boolean) A[SYNTHETIC]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|0x001f: CMP_L  (r8 I:int) = (r5 I:float A[D('startHeightFitToWidth' float)]), (r3 I:float A[D('endHeight' float)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0021|0x0021: IF  (r8 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:24:0x0024 \l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN  (r6 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{private static boolean com.google.android.material.transition.platform.FitModeEvaluators.shouldAutoFitToWidth((r9 I:boolean A[D('entering' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.graphics.RectF A[D('startBounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:android.graphics.RectF A[D('endBounds' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001c \-\> B:25:0x0025, CROSS_EDGE: B:22:0x0021 \-\> B:24:0x0024, CROSS_EDGE: B:22:0x0021 \-\> B:25:0x0025\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0025: r0 'startWidth' F\l  0x0008\-0x0025: r1 'startHeight' F\l  0x000c\-0x0025: r2 'endWidth' F\l  0x0010\-0x0025: r3 'endHeight' F\l  0x0013\-0x0025: r4 'endHeightFitToWidth' F\l  0x0016\-0x0025: r5 'startHeightFitToWidth' F\l  \-1 \-0x0025: r9 'entering' Z\l  \-1 \-0x0025: r10 'startBounds' Landroid\/graphics\/RectF;\l  \-1 \-0x0025: r11 'endBounds' Landroid\/graphics\/RectF;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_24;
Node_19 -> Node_27[style=dashed];
Node_24 -> Node_15;
Node_27 -> Node_15;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_26[style=dashed];
Node_26 -> Node_15;
}

