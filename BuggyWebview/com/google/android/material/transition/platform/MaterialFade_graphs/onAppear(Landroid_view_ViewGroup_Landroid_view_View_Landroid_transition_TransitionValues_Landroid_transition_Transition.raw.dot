digraph "CFG forcom.google.android.material.transition.platform.MaterialFade.onAppear(Landroid\/view\/ViewGroup;Landroid\/view\/View;Landroid\/transition\/TransitionValues;Landroid\/transition\/TransitionValues;)Landroid\/animation\/Animator;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r1 I:android.animation.Animator) = \l  (r0 I:com.google.android.material.transition.platform.MaterialVisibility)\l  (r1 I:android.view.ViewGroup)\l  (r2 I:android.view.View)\l  (r3 I:android.transition.TransitionValues)\l  (r4 I:android.transition.TransitionValues)\l type: SUPER call: com.google.android.material.transition.platform.MaterialVisibility.onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues):android.animation.Animator A[MD:(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues):android.animation.Animator (m)] (LINE:38)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|RETURN\l|0x0004: RETURN  (r1 I:android.animation.Animator) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ android.animation.Animator com.google.android.material.transition.platform.MaterialFade.onAppear((r0 'this' I:com.google.android.material.transition.platform.MaterialFade A[IMMUTABLE_TYPE, THIS]), (r1 I:android.view.ViewGroup A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.view.View A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.transition.TransitionValues A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.transition.TransitionValues A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lMETHOD_OVERRIDE: [ClspMth\{android.transition.Visibility.onAppear(android.view.ViewGroup, android.view.View, android.transition.TransitionValues, android.transition.TransitionValues):android.animation.Animator\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

