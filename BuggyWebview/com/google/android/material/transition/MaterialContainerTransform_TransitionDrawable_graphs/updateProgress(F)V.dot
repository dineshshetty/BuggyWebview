digraph "CFG forcom.google.android.material.transition.MaterialContainerTransform.TransitionDrawable.updateProgress(F)V" {
Node_33 [shape=record,label="{33\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0000|r21.progress = r22\landroid.graphics.Paint r1 = r21.scrimPaint\l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|if (r21.entering == false) goto L31\l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|float r2 = com.google.android.material.transition.TransitionUtils.lerp(0.0f, 255.0f, r22)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0018|PHI: r2 \l  PHI: (r2v2 float) = (r2v1 float), (r2v32 float) binds: [B:38:0x0014, B:37:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|r1.setAlpha((int) r2)\lr21.motionPathMeasure.getPosTan(r21.motionPathLength * r22, r21.motionPathPosition, null)\lfloat[] r1 = r21.motionPathPosition\lr3 = r1[0]\lr6 = r1[1]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0034|if ((r22 \> 1.0f ? 1 : (r22 == 1.0f ? 0 : \-1)) \> 0) goto L26\l}"];
Node_41 [shape=record,label="{41\:\ 0x0036}"];
Node_42 [shape=record,label="{42\:\ 0x0038|if ((r22 \> 0.0f ? 1 : (r22 == 0.0f ? 0 : \-1)) \>= 0) goto L8\l}"];
Node_44 [shape=record,label="{44\:\ 0x003b|r12 = r3\lr13 = r6\l}"];
Node_50 [shape=record,label="{50\:\ 0x006f|PHI: r12 r13 \l  PHI: (r12v4 'motionPathX' float) = (r12v2 'motionPathX' float), (r12v5 'motionPathX' float) binds: [B:49:0x0054, B:44:0x003b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v3 'motionPathY' float) = (r13v2 'motionPathY' float), (r13v4 'motionPathY' float) binds: [B:49:0x0054, B:44:0x003b] A[DONT_GENERATE, DONT_INLINE]\l|float r14 = ((java.lang.Float) androidx.core.util.Preconditions.checkNotNull(java.lang.Float.valueOf(r21.progressThresholds.scale.start))).floatValue()\lfloat r15 = ((java.lang.Float) androidx.core.util.Preconditions.checkNotNull(java.lang.Float.valueOf(r21.progressThresholds.scale.end))).floatValue()\lcom.google.android.material.transition.FitModeResult r1 = r21.fitModeEvaluator.evaluate(r22, r14, r15, r21.startBounds.width(), r21.startBounds.height(), r21.endBounds.width(), r21.endBounds.height())\lr21.fitModeResult = r1\lr21.currentStartBounds.set(r12 \- (r1.currentStartWidth \/ 2.0f), r13, (r21.fitModeResult.currentStartWidth \/ 2.0f) + r12, r21.fitModeResult.currentStartHeight + r13)\lr21.currentEndBounds.set(r12 \- (r21.fitModeResult.currentEndWidth \/ 2.0f), r13, (r21.fitModeResult.currentEndWidth \/ 2.0f) + r12, r21.fitModeResult.currentEndHeight + r13)\lr21.currentStartBoundsMasked.set(r21.currentStartBounds)\lr21.currentEndBoundsMasked.set(r21.currentEndBounds)\lfloat r8 = ((java.lang.Float) androidx.core.util.Preconditions.checkNotNull(java.lang.Float.valueOf(r21.progressThresholds.scaleMask.start))).floatValue()\lfloat r7 = ((java.lang.Float) androidx.core.util.Preconditions.checkNotNull(java.lang.Float.valueOf(r21.progressThresholds.scaleMask.end))).floatValue()\lboolean r16 = r21.fitModeEvaluator.shouldMaskStartBounds(r21.fitModeResult)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0137|if (r16 == false) goto L25\l}"];
Node_52 [shape=record,label="{52\:\ 0x0139|android.graphics.RectF r1 = r21.currentStartBoundsMasked\l}"];
Node_54 [shape=record,label="{54\:\ 0x013e|PHI: r1 \l  PHI: (r1v39 android.graphics.RectF) = (r1v38 android.graphics.RectF), (r1v47 android.graphics.RectF) binds: [B:53:0x013c, B:52:0x0139] A[DONT_GENERATE, DONT_INLINE]\l|r6 = r1\lfloat r10 = com.google.android.material.transition.TransitionUtils.lerp(0.0f, 1.0f, r8, r7, r22)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0143|if (r16 == false) goto L24\l}"];
Node_56 [shape=record,label="{56\:\ 0x0145|r11 = r10\l}"];
Node_58 [shape=record,label="{58\:\ 0x0148|PHI: r11 \l  PHI: (r11v2 'maskMultiplier' float) = (r11v1 'maskMultiplier' float), (r11v3 'maskMultiplier' float) binds: [B:57:0x0147, B:56:0x0145] A[DONT_GENERATE, DONT_INLINE]\l|r21.fitModeEvaluator.applyMask(r6, r11, r21.fitModeResult)\lfloat r2 = java.lang.Math.min(r21.currentStartBoundsMasked.left, r21.currentEndBoundsMasked.left)\lfloat r3 = java.lang.Math.min(r21.currentStartBoundsMasked.top, r21.currentEndBoundsMasked.top)\lfloat r4 = java.lang.Math.max(r21.currentStartBoundsMasked.right, r21.currentEndBoundsMasked.right)\lfloat r5 = r21.currentStartBoundsMasked.bottom\landroid.graphics.RectF r6 = r21.currentEndBoundsMasked\lr21.currentMaskBounds = new android.graphics.RectF(r2, r3, r4, java.lang.Math.max(r5, r6.bottom))\lr21.maskEvaluator.evaluate(r22, r21.startShapeAppearanceModel, r21.endShapeAppearanceModel, r21.currentStartBounds, r21.currentStartBoundsMasked, r21.currentEndBoundsMasked, r21.progressThresholds.shapeMask)\lr21.currentElevation = com.google.android.material.transition.TransitionUtils.lerp(r21.startElevation, r21.endElevation, r22)\lfloat r1 = calculateElevationDxMultiplier(r21.currentMaskBounds, r21.displayWidth)\lfloat r2 = calculateElevationDyMultiplier(r21.currentMaskBounds, r21.displayHeight)\lfloat r3 = r21.currentElevation\lfloat r4 = (float) ((int) (r3 * r1))\lfloat r5 = (float) ((int) (r3 * r2))\lr21.currentElevationDy = r5\lr21.shadowPaint.setShadowLayer(r3, r4, r5, com.google.android.material.transition.MaterialContainerTransform.TransitionDrawable.SHADOW_COLOR)\lfloat r3 = ((java.lang.Float) androidx.core.util.Preconditions.checkNotNull(java.lang.Float.valueOf(r21.progressThresholds.fade.start))).floatValue()\lfloat r5 = ((java.lang.Float) androidx.core.util.Preconditions.checkNotNull(java.lang.Float.valueOf(r21.progressThresholds.fade.end))).floatValue()\lr21.fadeModeResult = r21.fadeModeEvaluator.evaluate(r22, r3, r5, 0.35f)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0217|if (r21.startContainerPaint.getColor() == 0) goto L18\l}"];
Node_60 [shape=record,label="{60\:\ 0x0219|r21.startContainerPaint.setAlpha(r21.fadeModeResult.startAlpha)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0222}"];
Node_62 [shape=record,label="{62\:\ 0x0228|if (r21.endContainerPaint.getColor() == 0) goto L21\l}"];
Node_63 [shape=record,label="{63\:\ 0x022a|r21.endContainerPaint.setAlpha(r21.fadeModeResult.endAlpha)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0233|invalidateSelf()\l}"];
Node_65 [shape=record,label="{65\:\ 0x0236|RETURN\l|return\l}"];
Node_34 [shape=record,label="{34\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_57 [shape=record,label="{57\:\ 0x0147|float r11 = 1.0f \- r10\l}"];
Node_53 [shape=record,label="{53\:\ 0x013c|android.graphics.RectF r1 = r21.currentEndBoundsMasked\l}"];
Node_45 [shape=record,label="{45\:\ 0x003e}"];
Node_46 [shape=record,label="{46\:\ 0x0040|if ((r22 \> 1.0f ? 1 : (r22 == 1.0f ? 0 : \-1)) \<= 0) goto L30\l}"];
Node_47 [shape=record,label="{47\:\ 0x0042|r7 = 0.99f\lfloat r8 = (r22 \- 1.0f) \/ (1.0f \- 0.99f)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0054|PHI: r7 r8 \l  PHI: (r7v3 'trajectoryProgress' float) = (r7v2 'trajectoryProgress' float), (r7v4 'trajectoryProgress' float) binds: [B:48:0x004b, B:47:0x0042] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v2 'trajectoryMultiplier' float) = (r8v1 'trajectoryMultiplier' float), (r8v4 'trajectoryMultiplier' float) binds: [B:48:0x004b, B:47:0x0042] A[DONT_GENERATE, DONT_INLINE]\l|r21.motionPathMeasure.getPosTan(r21.motionPathLength * r7, r1, null)\lfloat[] r1 = r21.motionPathPosition\lr2 = r1[0]\lr1 = r1[1]\lfloat r3 = r3 + ((r3 \- r2) * r8)\lr12 = r3\lr13 = r6 + ((r6 \- r1) * r8)\l}"];
Node_48 [shape=record,label="{48\:\ 0x004b|r7 = 0.01f\lfloat r8 = (r22 \/ 0.01f) * com.google.android.material.transition.MaterialContainerTransform.ELEVATION_NOT_SET\l}"];
Node_38 [shape=record,label="{38\:\ 0x0014|float r2 = com.google.android.material.transition.TransitionUtils.lerp(255.0f, 0.0f, r22)\l}"];
MethodNode[shape=record,label="{private void com.google.android.material.transition.MaterialContainerTransform.TransitionDrawable.updateProgress((r21v0 'this' com.google.android.material.transition.MaterialContainerTransform$TransitionDrawable A[IMMUTABLE_TYPE, THIS]), (r22v0 'progress' float A[D('progress' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:62:0x0228 \-\> B:64:0x0233, CROSS_EDGE: B:59:0x0217 \-\> B:61:0x0222, CROSS_EDGE: B:57:0x0147 \-\> B:58:0x0148, CROSS_EDGE: B:53:0x013c \-\> B:54:0x013e, CROSS_EDGE: B:49:0x0054 \-\> B:50:0x006f, CROSS_EDGE: B:48:0x004b \-\> B:49:0x0054, CROSS_EDGE: B:40:0x0034 \-\> B:45:0x003e, CROSS_EDGE: B:38:0x0014 \-\> B:39:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_33;Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_45;
Node_41 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_34;
Node_57 -> Node_58;
Node_53 -> Node_54;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_49;
Node_49 -> Node_50;
Node_48 -> Node_49;
Node_38 -> Node_39;
}

