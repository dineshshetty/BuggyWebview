digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1.invokeSuspend$$forInline(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r6 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1) kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1.L$0 java.lang.Object \l0x0002: CHECK_CAST (r0 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r0 I:??[OBJECT, ARRAY]) \l0x0004: IGET  (r1 I:kotlinx.coroutines.flow.Flow\<T\>[]) = (r6 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1) kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1.$flows kotlinx.coroutines.flow.Flow[]  (LINE:273)\l0x0006: INVOKE  (r2 I:kotlin.jvm.functions.Function0) =  type: STATIC call: kotlinx.coroutines.flow.FlowKt__ZipKt.access$nullArrayFactory():kotlin.jvm.functions.Function0 A[MD:():kotlin.jvm.functions.Function0 (m)]\l0x000a: INVOKE   type: STATIC call: kotlin.jvm.internal.Intrinsics.needClassReification():void A[MD:():void (m)]\l0x000d: NEW_INSTANCE  (r3 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1$1) =  kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1$1 \l0x000f: IGET  (r4 I:kotlin.jvm.functions.Function3\<kotlinx.coroutines.flow.FlowCollector\<? super R\>, T[], kotlin.coroutines.Continuation\<? super kotlin.Unit\>, java.lang.Object\>) = (r6 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1) kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1.$transform kotlin.jvm.functions.Function3 \l0x0011: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: INVOKE  \l  (r3 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1$1)\l  (r4 I:kotlin.jvm.functions.Function3)\l  (r5 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1.1.\<init\>(kotlin.jvm.functions.Function3, kotlin.coroutines.Continuation):void A[MD:(kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T[], ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1$1\>):void (m)]\l0x0015: CHECK_CAST (r3 I:kotlin.jvm.functions.Function3) = (kotlin.jvm.functions.Function3) (r3 I:??[OBJECT, ARRAY]) \l0x0017: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0018: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x001a: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: INVOKE  (r5 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[MD:(int):void (m)]\l0x001e: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.FlowCollector A[D('$this$flow' kotlinx.coroutines.flow.FlowCollector)])\l  (r1 I:kotlinx.coroutines.flow.Flow[])\l  (r2 I:kotlin.jvm.functions.Function0)\l  (r3 I:kotlin.jvm.functions.Function3)\l  (r4 I:kotlin.coroutines.Continuation)\l type: STATIC call: kotlinx.coroutines.flow.internal.CombineKt.combineInternal(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.flow.Flow[], kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function3, kotlin.coroutines.Continuation):java.lang.Object A[MD:\<R, T\>:(kotlinx.coroutines.flow.FlowCollector\<? super R\>, kotlinx.coroutines.flow.Flow\<? extends T\>[], kotlin.jvm.functions.Function0\<T[]\>, kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T[], ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l0x0021: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0022: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[MD:(int):void (m)]\l0x0025: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:274)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|RETURN\l|0x0027: RETURN  (r1 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1.invokeSuspend$$forInline((r6 'this' I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransformUnsafe$1 A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[D('$result' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  0x0004\-0x0027: r0 '$this$flow' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0027: r7 '$result' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

