digraph "CFG forkotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.create(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Lkotlin\/coroutines\/Continuation;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1 r0 = new kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1(r3.$this_transformWhile, r3.$transform, r5)\lr0.L$0 = r4\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlin.coroutines.Continuation\<kotlin.Unit\> kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1.create((r3v0 'this' kotlinx.coroutines.flow.FlowKt__LimitKt$transformWhile$1 A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.coroutines.Continuation\<?\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation\<*\>;)Lkotlin\/coroutines\/Continuation\<Lkotlin\/Unit;\>;\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.create(java.lang.Object, kotlin.coroutines.Continuation\<?\>):kotlin.coroutines.Continuation\<kotlin.Unit\>]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

