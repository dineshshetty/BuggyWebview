digraph "CFG forkotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r11 instanceof kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.C09031) == false) goto L36\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1 r0 = (kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.C09031) r11\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if ((r0.label & Integer.MIN_VALUE) == 0) goto L36\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|r0.label = r0.label \- Integer.MIN_VALUE\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1) = (r0v1 kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1), (r0v5 kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1) binds: [B:7:0x0014, B:6:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|r11 = r0\ljava.lang.Object r0 = r11.result\ljava.lang.Object r1 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|switch(r11.label) \{\l    case 0: goto L33;\l    case 1: goto L21;\l    case 2: goto L11;\l    default: goto L8;\l\}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025}"];
Node_11 [shape=record,label="{11\:\ 0x002c|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|kotlinx.coroutines.flow.internal.SafeCollector r1 = (kotlinx.coroutines.flow.internal.SafeCollector) r11.L$0\l}"];
Node_37 [shape=record,label="{37\:\ 0x0032|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0036, blocks: (B:13:0x0032), top: B:37:0x0032 \}\lCatch: all \-\> 0x0036\l|kotlin.ResultKt.throwOnFailure(r0)     \/\/ Catch: java.lang.Throwable \-\> L36\l}"];
Node_28 [shape=record,label="{28\:\ 0x009e|PHI: r1 \l  PHI: (r1v5 'collector' kotlinx.coroutines.flow.internal.SafeCollector) = (r1v3 'collector' kotlinx.coroutines.flow.internal.SafeCollector), (r1v7 'collector' kotlinx.coroutines.flow.internal.SafeCollector) binds: [B:27:0x009d, B:13:0x0032] A[DONT_GENERATE, DONT_INLINE]\l|r1.releaseIntercepted()\l}"];
Node_33 [shape=record,label="{33\:\ 0x00aa}"];
Node_34 [shape=record,label="{34\:\ 0x00ad|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|ExcHandler: all \-\> 0x0036\l|java.lang.Throwable r2 = th\l}"];
Node_31 [shape=record,label="{31\:\ 0x00a6|PHI: r1 r2 \l  PHI: (r1v4 'collector' kotlinx.coroutines.flow.internal.SafeCollector) = (r1v2 'collector' kotlinx.coroutines.flow.internal.SafeCollector), (r1v7 'collector' kotlinx.coroutines.flow.internal.SafeCollector) binds: [B:30:0x00a3, B:15:0x0036] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v9 'th' java.lang.Throwable) = (r2v6 'th' java.lang.Throwable), (r2v10 'th' java.lang.Throwable) binds: [B:30:0x00a3, B:15:0x0036] A[DONT_GENERATE, DONT_INLINE]\l|r1.releaseIntercepted()\l}"];
Node_32 [shape=record,label="{32\:\ 0x00a9|throw r2\l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|kotlin.jvm.internal.Ref$BooleanRef r2 = (kotlin.jvm.internal.Ref.BooleanRef) r11.L$2\lkotlinx.coroutines.flow.FlowCollector r3 = (kotlinx.coroutines.flow.FlowCollector) r11.L$1\lkotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1 r4 = (kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1) r11.L$0\lkotlin.ResultKt.throwOnFailure(r0)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0073|PHI: r2 r3 r4 \l  PHI: (r2v4 'isEmpty' kotlin.jvm.internal.Ref$BooleanRef) = (r2v3 'isEmpty' kotlin.jvm.internal.Ref$BooleanRef), (r2v8 'isEmpty' kotlin.jvm.internal.Ref$BooleanRef) binds: [B:19:0x0070, B:17:0x0039] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 '$this$onEmpty_u24lambda_u2d3' kotlinx.coroutines.flow.FlowCollector) = (r3v0 '$this$onEmpty_u24lambda_u2d3' kotlinx.coroutines.flow.FlowCollector), (r3v5 '$this$onEmpty_u24lambda_u2d3' kotlinx.coroutines.flow.FlowCollector) binds: [B:19:0x0070, B:17:0x0039] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1) = (r4v0 kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1), (r4v3 kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1) binds: [B:19:0x0070, B:17:0x0039] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0075|if (r2.element == false) goto L15\l}"];
Node_23 [shape=record,label="{23\:\ 0x0077|kotlinx.coroutines.flow.internal.SafeCollector r2 = new kotlinx.coroutines.flow.internal.SafeCollector(r3, r11.getContext())\l}"];
Node_35 [shape=record,label="{35\:\ 0x0082|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x0082|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x00a2, blocks: (B:24:0x0082), top: B:35:0x0082 \}\lCatch: all \-\> 0x00a2\l|kotlin.jvm.functions.Function2 r3 = r4.$action$inlined     \/\/ Catch: java.lang.Throwable \-\> La2\lr11.L$0 = r2     \/\/ Catch: java.lang.Throwable \-\> La2\lr11.L$1 = null     \/\/ Catch: java.lang.Throwable \-\> La2\lr11.L$2 = null     \/\/ Catch: java.lang.Throwable \-\> La2\lr11.label = 2     \/\/ Catch: java.lang.Throwable \-\> La2\lkotlin.jvm.internal.InlineMarker.mark(6)     \/\/ Catch: java.lang.Throwable \-\> La2\ljava.lang.Object r3 = r3.invoke(r2, r11)     \/\/ Catch: java.lang.Throwable \-\> La2\lkotlin.jvm.internal.InlineMarker.mark(7)     \/\/ Catch: java.lang.Throwable \-\> La2\l}"];
Node_25 [shape=record,label="{25\:\ 0x009a|if (r3 != r1) goto L29\l}"];
Node_26 [shape=record,label="{26\:\ 0x009c|RETURN\l|return r1\l}"];
Node_27 [shape=record,label="{27\:\ 0x009d|r1 = r2\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_29 [shape=record,label="{29\:\ 0x00a2|ExcHandler: all \-\> 0x00a2\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_30 [shape=record,label="{30\:\ 0x00a3|r2 = r1\lr1 = r2\l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|kotlin.ResultKt.throwOnFailure(r0)\lr4 = r9\lr3 = r10\lkotlin.jvm.internal.Ref$BooleanRef r2 = new kotlin.jvm.internal.Ref.BooleanRef()\lr2.element = true\lr11.L$0 = r4\lr11.L$1 = r3\lr11.L$2 = r2\lr11.label = 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x0070|if (r4.$this_onEmpty$inlined.collect(new kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$1$1(r2, r3), r11) != r1) goto L22\l}"];
Node_20 [shape=record,label="{20\:\ 0x0072|RETURN\l|return r1\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1$1 r0 = new kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.C09031(r9, r11)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1.collect((r9v0 'this' kotlinx.coroutines.flow.FlowKt__EmittersKt$onEmpty$$inlined$unsafeFlow$1 A[IMMUTABLE_TYPE, THIS]), (r10v0 kotlinx.coroutines.flow.FlowCollector\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:34:0x00ad \-\> B:1:?, CROSS_EDGE: B:32:0x00a9 \-\> B:1:?, CROSS_EDGE: B:37:0x0032 \-\> B:15:0x0036, CROSS_EDGE: B:26:0x009c \-\> B:1:?, CROSS_EDGE: B:27:0x009d \-\> B:28:0x009e, CROSS_EDGE: B:30:0x00a3 \-\> B:31:0x00a6, CROSS_EDGE: B:35:0x0082 \-\> B:29:0x00a2, CROSS_EDGE: B:22:0x0075 \-\> B:33:0x00aa, CROSS_EDGE: B:20:0x0072 \-\> B:1:?, CROSS_EDGE: B:19:0x0070 \-\> B:21:0x0073, CROSS_EDGE: B:7:0x0014 \-\> B:8:0x0019, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x0014\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x00a2, blocks: (B:24:0x0082), top: B:35:0x0082 \}, TryCatch #1 \{all \-\> 0x0036, blocks: (B:13:0x0032), top: B:37:0x0032 \}\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [105=5]\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_9 -> Node_17;
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_37;
Node_37 -> Node_13;
Node_37 -> Node_15;
Node_13 -> Node_28;
Node_13 -> Node_38;
Node_28 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_1;
Node_38 -> Node_15;
Node_15 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_1;
Node_17 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_35;
Node_35 -> Node_24;
Node_35 -> Node_29;
Node_24 -> Node_25;
Node_24 -> Node_36;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_1;
Node_27 -> Node_28;
Node_36 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_1;
Node_7 -> Node_8;
}

