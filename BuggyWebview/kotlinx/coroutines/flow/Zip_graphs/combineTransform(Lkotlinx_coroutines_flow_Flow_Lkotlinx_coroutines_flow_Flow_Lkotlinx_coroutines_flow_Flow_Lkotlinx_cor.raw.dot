digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt.combineTransform(Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/jvm\/functions\/Function7;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char])  (LINE:220)\l0x0001: NEW_ARRAY  (r0 I:kotlinx.coroutines.flow.Flow[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: kotlinx.coroutines.flow.Flow[] \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r1 I:??[int, short, byte, char])\l  (r4 I:??[OBJECT, ARRAY] A[D('flow' kotlinx.coroutines.flow.Flow)])\l \l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r1 I:??[int, short, byte, char])\l  (r5 I:??[OBJECT, ARRAY] A[D('flow2' kotlinx.coroutines.flow.Flow)])\l \l0x0009: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x000a: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r1 I:??[int, short, byte, char])\l  (r6 I:??[OBJECT, ARRAY] A[D('flow3' kotlinx.coroutines.flow.Flow)])\l \l0x000c: CONST  (r1 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x000d: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r1 I:??[int, short, byte, char])\l  (r7 I:??[OBJECT, ARRAY] A[D('flow4' kotlinx.coroutines.flow.Flow)])\l \l0x000f: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0010: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r1 I:??[int, short, byte, char])\l  (r8 I:??[OBJECT, ARRAY] A[D('flow5' kotlinx.coroutines.flow.Flow)])\l \l0x0012: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: NEW_INSTANCE  (r2 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5) =  kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5  (LINE:355)\l0x0015: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: INVOKE  \l  (r2 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5)\l  (r0 I:kotlinx.coroutines.flow.Flow[] A[D('flows$iv' kotlinx.coroutines.flow.Flow[])])\l  (r3 I:kotlin.coroutines.Continuation)\l  (r9 I:kotlin.jvm.functions.Function7 A[D('transform' kotlin.jvm.functions.Function7)])\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5.\<init\>(kotlinx.coroutines.flow.Flow[], kotlin.coroutines.Continuation, kotlin.jvm.functions.Function7):void A[MD:(kotlinx.coroutines.flow.Flow[], kotlin.coroutines.Continuation, kotlin.jvm.functions.Function7):void (m)]\l0x0019: CHECK_CAST (r2 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r2 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r2 I:kotlinx.coroutines.flow.Flow) = (r2 I:kotlin.jvm.functions.Function2) type: STATIC call: kotlinx.coroutines.flow.FlowKt.flow(kotlin.jvm.functions.Function2):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.flow.FlowCollector\<? super T\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|RETURN\l|0x0020: RETURN  (r2 I:kotlinx.coroutines.flow.Flow\<R\>)  (LINE:228)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<R\> kotlinx.coroutines.flow.FlowKt__ZipKt.combineTransform((r4 I:kotlinx.coroutines.flow.Flow\<? extends T1\> A[D('flow' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlinx.coroutines.flow.Flow\<? extends T2\> A[D('flow2' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlinx.coroutines.flow.Flow\<? extends T3\> A[D('flow3' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlinx.coroutines.flow.Flow\<? extends T4\> A[D('flow4' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlinx.coroutines.flow.Flow\<? extends T5\> A[D('flow5' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function7\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T1, ? super T2, ? super T3, ? super T4, ? super T5, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[D('transform' kotlin.jvm.functions.Function7), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0020: r0 'flows$iv' [Lkotlinx\/coroutines\/flow\/Flow;\l  0x0013\-0x0020: r1 '$i$f$combineTransformUnsafe' I\l  \-1 \-0x0020: r4 'flow' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0020: r5 'flow2' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0020: r6 'flow3' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0020: r7 'flow4' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0020: r8 'flow5' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0020: r9 'transform' Lkotlin\/jvm\/functions\/Function7;\lTYPE_VARS: [T4, T5, R, T1, T2, T3]\lSIGNATURE: \<T1:Ljava\/lang\/Object;T2:Ljava\/lang\/Object;T3:Ljava\/lang\/Object;T4:Ljava\/lang\/Object;T5:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT1;\>;Lkotlinx\/coroutines\/flow\/Flow\<+TT2;\>;Lkotlinx\/coroutines\/flow\/Flow\<+TT3;\>;Lkotlinx\/coroutines\/flow\/Flow\<+TT4;\>;Lkotlinx\/coroutines\/flow\/Flow\<+TT5;\>;Lkotlin\/jvm\/functions\/Function7\<\-Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TR;\>;\-TT1;\-TT2;\-TT3;\-TT4;\-TT5;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TR;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

