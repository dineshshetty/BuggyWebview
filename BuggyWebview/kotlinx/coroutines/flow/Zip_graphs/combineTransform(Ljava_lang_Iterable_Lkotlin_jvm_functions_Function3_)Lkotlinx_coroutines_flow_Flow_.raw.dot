digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt.combineTransform(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function3;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:java.util.List) = (r6 I:java.lang.Iterable A[D('flows' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.List\<T\> (m)] (LINE:306)\l0x0005: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$toTypedArray$iv' java.util.Collection)])  (LINE:366)\l0x000a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:368)\l0x000b: NEW_ARRAY  (r4 I:kotlinx.coroutines.flow.Flow[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: kotlinx.coroutines.flow.Flow[] \l0x000d: INVOKE  (r4 I:java.lang.Object[]) = (r3 I:java.util.Collection A[D('thisCollection$iv' java.util.Collection)]), (r4 I:java.lang.Object[]) type: INTERFACE call: java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] A[MD:\<T\>:(T[]):T[] (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0026 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('$this$toTypedArray$iv' java.util.Collection)]) = (r4 I:??[OBJECT, ARRAY])  (LINE:306)\l0x0014: CHECK_CAST (r1 I:kotlinx.coroutines.flow.Flow[]) = (kotlinx.coroutines.flow.Flow[]) (r1 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE   type: STATIC call: kotlin.jvm.internal.Intrinsics.needClassReification():void A[MD:():void (m)] (LINE:307)\l0x0019: NEW_INSTANCE  (r2 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7) =  kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7 \l0x001b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: INVOKE  \l  (r2 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7)\l  (r1 I:kotlinx.coroutines.flow.Flow[] A[D('flowArray' kotlinx.coroutines.flow.Flow[])])\l  (r7 I:kotlin.jvm.functions.Function3 A[D('transform' kotlin.jvm.functions.Function3)])\l  (r3 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7.\<init\>(kotlinx.coroutines.flow.Flow[], kotlin.jvm.functions.Function3, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.Flow\<T\>[], kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T[], ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7\>):void (m)]\l0x001f: CHECK_CAST (r2 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r2 I:??[OBJECT, ARRAY]) \l0x0021: INVOKE  (r2 I:kotlinx.coroutines.flow.Flow) = (r2 I:kotlin.jvm.functions.Function2) type: STATIC call: kotlinx.coroutines.flow.FlowKt.flow(kotlin.jvm.functions.Function2):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.flow.FlowCollector\<? super T\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|RETURN\l|0x0025: RETURN  (r2 I:kotlinx.coroutines.flow.Flow\<R\>) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|0x0026: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException  (LINE:368)\l0x0028: CONST_STR  (r5 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray\>\" \l0x002a: INVOKE  (r4 I:java.lang.NullPointerException), (r5 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x002d|0x002d: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ kotlinx.coroutines.flow.Flow\<R\> kotlinx.coroutines.flow.FlowKt__ZipKt.combineTransform((r6 I:java.lang.Iterable\<? extends kotlinx.coroutines.flow.Flow\<? extends T\>\> A[D('flows' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T[], ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[D('transform' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:23:0x002d \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0013: r1 '$this$toTypedArray$iv' Ljava\/util\/Collection;\l  0x0008\-0x0013: r2 '$i$f$toTypedArray' I\l  0x000a\-0x0013: r3 'thisCollection$iv' Ljava\/util\/Collection;\l  0x0016\-0x0026: r1 'flowArray' [Lkotlinx\/coroutines\/flow\/Flow;\l  0x0001\-0x002d: r0 '$i$f$combineTransform' I\l  0x0026\-0x002d: r1 '$this$toTypedArray$iv' Ljava\/util\/Collection;\l  0x0026\-0x002d: r2 '$i$f$toTypedArray' I\l  0x0026\-0x002d: r3 'thisCollection$iv' Ljava\/util\/Collection;\l  \-1 \-0x002d: r6 'flows' Ljava\/lang\/Iterable;\l  \-1 \-0x002d: r7 'transform' Lkotlin\/jvm\/functions\/Function3;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;\>;Lkotlin\/jvm\/functions\/Function3\<\-Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TR;\>;\-[TT;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TR;\>;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

