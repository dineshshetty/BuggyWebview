digraph "CFG forkotlinx.coroutines.flow.LintKt.getCoroutineContext$annotations(Lkotlinx\/coroutines\/flow\/FlowCollector;)V" {
subgraph cluster_Region_942785788 {
label = "R(0)";
node [shape=record,color=blue];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void kotlinx.coroutines.flow.LintKt.getCoroutineContext$annotations((r0v0 kotlinx.coroutines.flow.FlowCollector A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=coroutineContext is resolved into the property of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext() instead or specify the receiver of coroutineContext explicitly, replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=currentCoroutineContext(), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_1;
}

