digraph "CFG forkotlinx.coroutines.flow.LintKt.distinctUntilChanged(Lkotlinx\/coroutines\/flow\/StateFlow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlinx.coroutines.flow.FlowKt.noImpl()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|throw new kotlin.ExceptionsH()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.LintKt.distinctUntilChanged((r1v0 kotlinx.coroutines.flow.StateFlow\<? extends T\> A[D('$this$distinctUntilChanged' kotlinx.coroutines.flow.StateFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Applying 'distinctUntilChanged' to StateFlow has no effect. See the StateFlow documentation on Operator Fusion., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this, imports=[[]]\}\}\}\}\}\}\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/StateFlow\<+TT;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

