digraph "CFG forkotlinx.coroutines.flow.LintKt.retry$default(Lkotlinx\/coroutines\/flow\/SharedFlow;JLkotlin\/jvm\/functions\/Function2;ILjava\/lang\/Object;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:120)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: CONST  (r1 I:??[long, double] A[D('retries' long)]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double])  (LINE:121)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:120)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: NEW_INSTANCE  (r4 I:kotlinx.coroutines.flow.LintKt$retry$1) =  kotlinx.coroutines.flow.LintKt$retry$1  (LINE:122)\l0x000f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: INVOKE  (r4 I:kotlinx.coroutines.flow.LintKt$retry$1), (r5 I:kotlin.coroutines.Continuation) type: DIRECT call: kotlinx.coroutines.flow.LintKt$retry$1.\<init\>(kotlin.coroutines.Continuation):void A[MD:(kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.LintKt$retry$1\>):void (m)]\l0x0013: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('predicate' kotlin.jvm.functions.Function2)]) = (r4 I:??[OBJECT, ARRAY]) \l0x0014: CHECK_CAST (r3 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r3 I:??[OBJECT, ARRAY] A[D('predicate' kotlin.jvm.functions.Function2)]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0017: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$retry_u24default' kotlinx.coroutines.flow.SharedFlow)])  (LINE:124)\l0x0018: CHECK_CAST (r4 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r4 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r4 I:kotlinx.coroutines.flow.Flow) = \l  (r4 I:kotlinx.coroutines.flow.Flow)\l  (r1 I:long A[D('retries' long)])\l  (r3 I:kotlin.jvm.functions.Function2 A[D('predicate' kotlin.jvm.functions.Function2)])\l type: STATIC call: kotlinx.coroutines.flow.FlowKt.retry(kotlinx.coroutines.flow.Flow, long, kotlin.jvm.functions.Function2):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, long, kotlin.jvm.functions.Function2\<? super java.lang.Throwable, ? super kotlin.coroutines.Continuation\<? super java.lang.Boolean\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|RETURN\l|0x001e: RETURN  (r4 I:kotlinx.coroutines.flow.Flow) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ kotlinx.coroutines.flow.Flow kotlinx.coroutines.flow.LintKt.retry$default((r0 I:kotlinx.coroutines.flow.SharedFlow A[D('$this$retry_u24default' kotlinx.coroutines.flow.SharedFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:long A[D('retries' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function2 A[D('predicate' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:6:0x000b \-\> B:8:0x0016, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0009\lDebug Info:\l  \-1 \-0x001e: r0 '$this$retry_u24default' Lkotlinx\/coroutines\/flow\/SharedFlow;\l  \-1 \-0x001e: r1 'retries' J\l  \-1 \-0x001e: r3 'predicate' Lkotlin\/jvm\/functions\/Function2;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

