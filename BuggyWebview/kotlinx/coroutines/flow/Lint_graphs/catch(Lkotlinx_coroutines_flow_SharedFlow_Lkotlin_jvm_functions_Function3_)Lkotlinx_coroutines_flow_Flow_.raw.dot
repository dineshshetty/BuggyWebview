digraph "CFG forkotlinx.coroutines.flow.LintKt.catch(Lkotlinx\/coroutines\/flow\/SharedFlow;Lkotlin\/jvm\/functions\/Function3;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$catch' kotlinx.coroutines.flow.SharedFlow)])  (LINE:109)\l0x0001: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = \l  (r0 I:kotlinx.coroutines.flow.Flow)\l  (r2 I:kotlin.jvm.functions.Function3 A[D('action' kotlin.jvm.functions.Function3)])\l type: STATIC call: kotlinx.coroutines.flow.FlowKt.catch(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super T\>, ? super java.lang.Throwable, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.LintKt.catch((r1 I:kotlinx.coroutines.flow.SharedFlow\<? extends T\> A[D('$this$catch' kotlinx.coroutines.flow.SharedFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super T\>, ? super java.lang.Throwable, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[D('action' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>WARNING:Lkotlin\/DeprecationLevel;\}, message=SharedFlow never completes, so this operator typically has not effect, it can only catch exceptions from 'onSubscribe' operator, replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this, imports=[[]]\}\}\}\}\}\}\lDebug Info:\l  \-1 \-0x0007: r1 '$this$catch' Lkotlinx\/coroutines\/flow\/SharedFlow;\l  \-1 \-0x0007: r2 'action' Lkotlin\/jvm\/functions\/Function3;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/SharedFlow\<+TT;\>;Lkotlin\/jvm\/functions\/Function3\<\-Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;\-Ljava\/lang\/Throwable;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

