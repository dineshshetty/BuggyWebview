digraph "CFG forkotlinx.coroutines.flow.LintKt.cancel(Lkotlinx\/coroutines\/flow\/FlowCollector;Ljava\/util\/concurrent\/CancellationException;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlinx.coroutines.flow.FlowKt.noImpl()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|throw new kotlin.ExceptionsH()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.flow.LintKt.cancel((r1v0 kotlinx.coroutines.flow.FlowCollector\<?\> A[D('$this$cancel' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'cause' java.util.concurrent.CancellationException A[D('cause' java.util.concurrent.CancellationException), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=cancel() is resolved into the extension of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext().cancel() instead or specify the receiver of cancel() explicitly, replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=currentCoroutineContext().cancel(cause), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<*\>;Ljava\/util\/concurrent\/CancellationException;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

