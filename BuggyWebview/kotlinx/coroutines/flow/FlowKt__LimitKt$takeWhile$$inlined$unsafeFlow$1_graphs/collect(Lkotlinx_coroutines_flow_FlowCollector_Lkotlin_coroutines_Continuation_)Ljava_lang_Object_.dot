digraph "CFG forkotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r12 instanceof kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1.C09101) == false) goto L28\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1 r0 = (kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1.C09101) r12\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if ((r0.label & Integer.MIN_VALUE) == 0) goto L28\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|r0.label = r0.label \- Integer.MIN_VALUE\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1) = (r0v1 kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1), (r0v5 kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1) binds: [B:7:0x0014, B:6:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|r12 = r0\ljava.lang.Object r0 = r12.result\ljava.lang.Object r1 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|switch(r12.label) \{\l    case 0: goto L19;\l    case 1: goto L11;\l    default: goto L8;\l\}\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025}"];
Node_11 [shape=record,label="{11\:\ 0x002c|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda\-6$$inlined$collectWhile$1 r2 = (kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda6$$inlined$collectWhile$1) r12.L$0\l}"];
Node_30 [shape=record,label="{30\:\ 0x0033|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0033|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{AbortFlowException \-\> 0x0037, blocks: (B:13:0x0033), top: B:30:0x0033 \}\lCatch: AbortFlowException \-\> 0x0037\l|kotlin.ResultKt.throwOnFailure(r0)     \/\/ Catch: kotlinx.coroutines.flow.internal.FlowExceptions \-\> L37\l}"];
Node_26 [shape=record,label="{26\:\ 0x006c}"];
Node_27 [shape=record,label="{27\:\ 0x0070|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|ExcHandler: AbortFlowException \-\> 0x0037\l|kotlinx.coroutines.flow.internal.AbortFlowException r3 = e\l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|PHI: r2 r3 \l  PHI: (r2v5 'collector$iv' kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda\-6$$inlined$collectWhile$1) = (r2v2 'collector$iv' kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda\-6$$inlined$collectWhile$1), (r2v7 'collector$iv' kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda\-6$$inlined$collectWhile$1) binds: [B:24:0x0061, B:15:0x0037] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 'e$iv' kotlinx.coroutines.flow.internal.AbortFlowException) = (r3v3 'e$iv' kotlinx.coroutines.flow.internal.AbortFlowException), (r3v5 'e$iv' kotlinx.coroutines.flow.internal.AbortFlowException) binds: [B:24:0x0061, B:15:0x0037] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkOwnership(r3, r2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0039|kotlin.ResultKt.throwOnFailure(r0)\lkotlinx.coroutines.flow.Flow r4 = r10.$this_takeWhile$inlined\lkotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda\-6$$inlined$collectWhile$1 r7 = new kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$lambda6$$inlined$collectWhile$1(r10.$predicate$inlined, r11)\l}"];
Node_28 [shape=record,label="{28\:\ 0x004d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{AbortFlowException \-\> 0x0060, blocks: (B:18:0x004d), top: B:28:0x004d \}\lCatch: AbortFlowException \-\> 0x0060\l|r12.L$0 = r7     \/\/ Catch: kotlinx.coroutines.flow.internal.FlowExceptions \-\> L60\lr12.label = 1     \/\/ Catch: kotlinx.coroutines.flow.internal.FlowExceptions \-\> L60\l}"];
Node_19 [shape=record,label="{19\:\ 0x0059|if (r4.collect(r7, r12) != r1) goto L24\l}"];
Node_20 [shape=record,label="{20\:\ 0x005b|RETURN\l|return r1\l}"];
Node_21 [shape=record,label="{21\:\ 0x005c}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x0060|ExcHandler: AbortFlowException \-\> 0x0060\l|kotlinx.coroutines.flow.internal.AbortFlowException r11 = move\-exception\l}"];
Node_24 [shape=record,label="{24\:\ 0x0061|r2 = r7\lr3 = r11\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1$1 r0 = new kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1.C09101(r10, r12)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1.collect((r10v0 'this' kotlinx.coroutines.flow.FlowKt__LimitKt$takeWhile$$inlined$unsafeFlow$1 A[IMMUTABLE_TYPE, THIS]), (r11v0 kotlinx.coroutines.flow.FlowCollector\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:27:0x0070 \-\> B:1:?, CROSS_EDGE: B:25:0x0066 \-\> B:26:0x006c, CROSS_EDGE: B:30:0x0033 \-\> B:15:0x0037, CROSS_EDGE: B:20:0x005b \-\> B:1:?, CROSS_EDGE: B:21:0x005c \-\> B:26:0x006c, CROSS_EDGE: B:24:0x0061 \-\> B:25:0x0066, CROSS_EDGE: B:28:0x004d \-\> B:23:0x0060, CROSS_EDGE: B:7:0x0014 \-\> B:8:0x0019, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x0014\lINLINE_NOT_NEEDED\lTryCatch #0 \{AbortFlowException \-\> 0x0060, blocks: (B:18:0x004d), top: B:28:0x004d \}, TryCatch #1 \{AbortFlowException \-\> 0x0037, blocks: (B:13:0x0033), top: B:30:0x0033 \}\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [105=4]\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_30;
Node_30 -> Node_13;
Node_30 -> Node_15;
Node_13 -> Node_26;
Node_13 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_1;
Node_31 -> Node_15;
Node_15 -> Node_25;
Node_25 -> Node_26;
Node_17 -> Node_28;
Node_28 -> Node_18;
Node_28 -> Node_23;
Node_18 -> Node_19;
Node_18 -> Node_29;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_1;
Node_21 -> Node_26;
Node_29 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_7 -> Node_8;
}

