digraph "CFG forkotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1016936318 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlinx.coroutines.flow.Flow kotlinx.coroutines.flow.Flow r3 = r5.$this_unsafeTransform$inlined\lkotlin.jvm.internal.Intrinsics.needClassReification()\ljava.lang.Object java.lang.Object r3 = r3.collect(new kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.C09272(r6), r7)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|RETURN\l|return r3 == kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED() ? r3 : kotlin.Unit.INSTANCE\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0019}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001a}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001d}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1.collect((r5v0 'this' kotlinx.coroutines.flow.FlowKt__TransformKt$filterIsInstance$$inlined$filter$1 A[IMMUTABLE_TYPE, THIS]), (r6v0 kotlinx.coroutines.flow.FlowCollector\<? super java.lang.Object\> A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 '$completion' kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001d \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_7 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

