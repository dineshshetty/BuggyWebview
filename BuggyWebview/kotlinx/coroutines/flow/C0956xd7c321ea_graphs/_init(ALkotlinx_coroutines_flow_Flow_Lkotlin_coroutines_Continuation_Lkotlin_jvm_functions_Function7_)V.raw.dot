digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5.\<init\>([Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/coroutines\/Continuation;Lkotlin\/jvm\/functions\/Function7;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IPUT  \l  (r1 I:kotlinx.coroutines.flow.Flow[])\l  (r0 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5)\l kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5.$flows kotlinx.coroutines.flow.Flow[] \l0x0002: IPUT  \l  (r3 I:kotlin.jvm.functions.Function7)\l  (r0 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5)\l kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5.$transform$inlined kotlin.jvm.functions.Function7 \l0x0004: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0005: INVOKE  (r0 I:kotlin.coroutines.jvm.internal.SuspendLambda), (r3 I:int), (r2 I:kotlin.coroutines.Continuation) type: DIRECT call: kotlin.coroutines.jvm.internal.SuspendLambda.\<init\>(int, kotlin.coroutines.Continuation):void A[MD:(int, kotlin.coroutines.Continuation\<java.lang.Object\>):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|0x0008: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5.\<init\>((r0 'this' I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$5 A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlinx.coroutines.flow.Flow[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.coroutines.Continuation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function7 A[IMMUTABLE_TYPE, METHOD_ARGUMENT])) }"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

