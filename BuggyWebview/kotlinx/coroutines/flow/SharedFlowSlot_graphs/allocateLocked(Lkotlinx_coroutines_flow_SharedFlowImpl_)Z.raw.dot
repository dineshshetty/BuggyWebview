digraph "CFG forkotlinx.coroutines.flow.SharedFlowSlot.allocateLocked(Lkotlinx\/coroutines\/flow\/SharedFlowImpl;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:long) = (r5 I:kotlinx.coroutines.flow.SharedFlowSlot) kotlinx.coroutines.flow.SharedFlowSlot.index long  (LINE:289)\l0x0002: CONST  (r2 I:??[long, double]) = (0 ??[long, double]) \l0x0004: CMP_L  (r4 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|RETURN\l|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: INVOKE  (r0 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl A[D('flow' kotlinx.coroutines.flow.SharedFlowImpl)]) type: VIRTUAL call: kotlinx.coroutines.flow.SharedFlowImpl.updateNewCollectorIndexLocked$kotlinx_coroutines_core():long A[MD:():long (m)] (LINE:290)\l0x000e: IPUT  (r0 I:long), (r5 I:kotlinx.coroutines.flow.SharedFlowSlot) kotlinx.coroutines.flow.SharedFlowSlot.index long \l0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:291)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.SharedFlowSlot.allocateLocked((r5 'this' I:kotlinx.coroutines.flow.SharedFlowSlot A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlinx.coroutines.flow.SharedFlowImpl\<?\> A[D('flow' kotlinx.coroutines.flow.SharedFlowImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0011 \-\> B:1:?\lDebug Info:\l  \-1 \-0x0011: r6 'flow' Lkotlinx\/coroutines\/flow\/SharedFlowImpl;\lBRIDGED_BY: kotlinx.coroutines.flow.SharedFlowSlot.allocateLocked(kotlinx.coroutines.flow.SharedFlowImpl\<?\>):boolean\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/SharedFlowImpl\<*\>;)Z\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

