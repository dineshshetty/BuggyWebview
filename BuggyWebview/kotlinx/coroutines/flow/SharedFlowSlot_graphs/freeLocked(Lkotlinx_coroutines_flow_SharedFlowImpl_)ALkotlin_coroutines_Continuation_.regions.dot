digraph "CFG forkotlinx.coroutines.flow.SharedFlowSlot.freeLocked(Lkotlinx\/coroutines\/flow\/SharedFlowImpl;)[Lkotlin\/coroutines\/Continuation;" {
subgraph cluster_Region_1635140687 {
label = "R(3:(1:(1:8))|11|12)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2113010019 {
label = "IF [B:3:0x0004] THEN: R(1:(1:8)) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L3\l}"];
subgraph cluster_Region_1549984731 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1099170655 {
label = "IF [B:8:0x0012] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0012|PHI: r1 \l  PHI: (r1v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r6.index \>= 0) == false) goto L7\l}"];
subgraph cluster_Region_1345161798 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001a|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_12 [shape=record,label="{12\:\ 0x001b|long long r0 = r6.index\lr6.index = \-1L\lr6.cont = null\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|RETURN\l|return r7.updateCollectorIndexLocked$kotlinx_coroutines_core(r0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0006}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0015}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0011}"];
MethodNode[shape=record,label="{public kotlin.coroutines.Continuation\<kotlin.Unit\>[] kotlinx.coroutines.flow.SharedFlowSlot.freeLocked((r6v0 'this' kotlinx.coroutines.flow.SharedFlowSlot A[IMMUTABLE_TYPE, THIS]), (r7v0 kotlinx.coroutines.flow.SharedFlowImpl\<?\> A[D('flow' kotlinx.coroutines.flow.SharedFlowImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0028 \-\> B:1:?, CROSS_EDGE: B:7:0x0011 \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0004 \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/SharedFlowImpl\<*\>;)[Lkotlin\/coroutines\/Continuation\<Lkotlin\/Unit;\>;\lRENAME_REASON:avoid collision after fix types in other method\lREPLACED_BY: kotlinx.coroutines.flow.SharedFlowSlot.freeLocked(kotlinx.coroutines.flow.SharedFlowImpl\<?\>):kotlin.coroutines.Continuation[]\lBRIDGED_BY: kotlinx.coroutines.flow.SharedFlowSlot.freeLocked(kotlinx.coroutines.flow.SharedFlowImpl\<?\>):kotlin.coroutines.Continuation[]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Method merged with bridge method\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot.freeLocked(F):kotlin.coroutines.Continuation\<kotlin.Unit\>[]]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_10 -> Node_11;
Node_7 -> Node_8;
}

