digraph "CFG forkotlinx.coroutines.flow.SharedFlowSlot.allocateLocked(Lkotlinx\/coroutines\/flow\/SharedFlowImpl;)Z" {
subgraph cluster_Region_389384143 {
label = "R(1:(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1144192346 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_897521379 {
label = "IF [B:3:0x0006] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r5.index \>= 0) goto L3\l}"];
subgraph cluster_Region_1481588657 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1669316744 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000a|r5.index = r6.updateNewCollectorIndexLocked$kotlinx_coroutines_core()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.SharedFlowSlot.allocateLocked((r5v0 'this' kotlinx.coroutines.flow.SharedFlowSlot A[IMMUTABLE_TYPE, THIS]), (r6v0 kotlinx.coroutines.flow.SharedFlowImpl\<?\> A[D('flow' kotlinx.coroutines.flow.SharedFlowImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0011 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/SharedFlowImpl\<*\>;)Z\lRENAME_REASON:avoid collision after fix types in other method\lREPLACED_BY: kotlinx.coroutines.flow.SharedFlowSlot.allocateLocked(kotlinx.coroutines.flow.SharedFlowImpl\<?\>):boolean\lBRIDGED_BY: kotlinx.coroutines.flow.SharedFlowSlot.allocateLocked(kotlinx.coroutines.flow.SharedFlowImpl\<?\>):boolean\lJadxCommentsAttr\{\l DEBUG: \l \-\> Method merged with bridge method\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot.allocateLocked(F):boolean]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
}

