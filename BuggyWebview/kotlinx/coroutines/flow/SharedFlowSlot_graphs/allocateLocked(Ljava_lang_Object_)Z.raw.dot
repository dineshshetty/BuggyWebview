digraph "CFG forkotlinx.coroutines.flow.SharedFlowSlot.allocateLocked(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('flow' java.lang.Object)])  (LINE:281)\l0x0001: CHECK_CAST (r0 I:kotlinx.coroutines.flow.SharedFlowImpl) = (kotlinx.coroutines.flow.SharedFlowImpl) (r0 I:??[OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:boolean) = (r1 I:kotlinx.coroutines.flow.SharedFlowSlot), (r0 I:kotlinx.coroutines.flow.SharedFlowImpl) type: VIRTUAL call: kotlinx.coroutines.flow.SharedFlowSlot.allocateLocked(kotlinx.coroutines.flow.SharedFlowImpl):boolean A[MD:(kotlinx.coroutines.flow.SharedFlowImpl\<?\>):boolean (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ boolean kotlinx.coroutines.flow.SharedFlowSlot.allocateLocked((r1 'this' I:kotlinx.coroutines.flow.SharedFlowSlot A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.flow.SharedFlowImpl\<?\> A[D('flow' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0007: r2 'flow' Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Method arguments types fixed to match base method, original types: [java.lang.Object]\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot.allocateLocked(F):boolean]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

