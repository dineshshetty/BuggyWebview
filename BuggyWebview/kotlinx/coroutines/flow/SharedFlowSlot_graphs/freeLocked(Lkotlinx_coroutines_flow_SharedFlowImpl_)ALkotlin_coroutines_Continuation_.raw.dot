digraph "CFG forkotlinx.coroutines.flow.SharedFlowSlot.freeLocked(Lkotlinx\/coroutines\/flow\/SharedFlowImpl;)[Lkotlin\/coroutines\/Continuation;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:295)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:734)\l0x0007: IGET  (r1 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowSlot) kotlinx.coroutines.flow.SharedFlowSlot.index long  (LINE:295)\l0x0009: CONST  (r3 I:??[long, double]) = (0 ??[long, double]) \l0x000b: CMP_L  (r5 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r5 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0015 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0017: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: IGET  (r0 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowSlot) kotlinx.coroutines.flow.SharedFlowSlot.index long  (LINE:296)\l0x001d: CONST  (r2 I:??[long, double]) = (\-1 ??[long, double])  (LINE:297)\l0x001f: IPUT  (r2 I:long), (r6 I:kotlinx.coroutines.flow.SharedFlowSlot) kotlinx.coroutines.flow.SharedFlowSlot.index long \l0x0021: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:298)\l0x0022: IPUT  (r2 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\>), (r6 I:kotlinx.coroutines.flow.SharedFlowSlot) kotlinx.coroutines.flow.SharedFlowSlot.cont kotlin.coroutines.Continuation \l0x0024: INVOKE  (r2 I:kotlin.coroutines.Continuation[]) = \l  (r7 I:kotlinx.coroutines.flow.SharedFlowImpl A[D('flow' kotlinx.coroutines.flow.SharedFlowImpl)])\l  (r0 I:long A[D('oldIndex' long)])\l type: VIRTUAL call: kotlinx.coroutines.flow.SharedFlowImpl.updateCollectorIndexLocked$kotlinx_coroutines_core(long):kotlin.coroutines.Continuation[] A[MD:(long):kotlin.coroutines.Continuation\<kotlin.Unit\>[] (m)] (LINE:299)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|RETURN\l|0x0028: RETURN  (r2 I:kotlin.coroutines.Continuation\<kotlin.Unit\>[]) \l}"];
MethodNode[shape=record,label="{public kotlin.coroutines.Continuation\<kotlin.Unit\>[] kotlinx.coroutines.flow.SharedFlowSlot.freeLocked((r6 'this' I:kotlinx.coroutines.flow.SharedFlowSlot A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlinx.coroutines.flow.SharedFlowImpl\<?\> A[D('flow' kotlinx.coroutines.flow.SharedFlowImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0028 \-\> B:1:?, CROSS_EDGE: B:7:0x0011 \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0004 \-\> B:12:0x001b\lDebug Info:\l  0x0007\-0x0012: r0 '$i$a$\-assert\-SharedFlowSlot$freeLocked$1' I\l  0x001d\-0x0028: r0 'oldIndex' J\l  \-1 \-0x0028: r7 'flow' Lkotlinx\/coroutines\/flow\/SharedFlowImpl;\lBRIDGED_BY: kotlinx.coroutines.flow.SharedFlowSlot.freeLocked(kotlinx.coroutines.flow.SharedFlowImpl\<?\>):kotlin.coroutines.Continuation[]\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/SharedFlowImpl\<*\>;)[Lkotlin\/coroutines\/Continuation\<Lkotlin\/Unit;\>;\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_7 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

