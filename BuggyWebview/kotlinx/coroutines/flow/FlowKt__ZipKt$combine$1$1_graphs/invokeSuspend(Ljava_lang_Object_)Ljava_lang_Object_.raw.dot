digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0004: IGET  (r1 I:int) = (r9 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1) kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.label int  (LINE:33)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: SWITCH  (r1 I:??)\l case 0: goto B:8:0x0022\l case 1: goto B:7:0x0016\l case 2: goto B:6:0x0011\l default: goto B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r10 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000d: INVOKE  (r10 I:java.lang.IllegalStateException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r10 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0058|0x0058: SGET  (r1 I:kotlin.Unit A[D('$result' java.lang.Object)]) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|RETURN\l|0x005a: RETURN  (r1 I:java.lang.Object) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0017: IGET  (r2 I:java.lang.Object) = (r1 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.L$0 java.lang.Object \l0x0019: CHECK_CAST (r2 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r2 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r10 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x001e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x001f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) \l0x0020: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) = (r10 I:??[OBJECT, ARRAY] A[D('$result' java.lang.Object)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) \l0x0047: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x0049: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x004a: IPUT  \l  (r5 I:java.lang.Object)\l  (r2 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)])\l kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.L$0 java.lang.Object \l0x004c: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x004d: IPUT  \l  (r5 I:int)\l  (r2 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)])\l kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.label int \l0x004f: INVOKE  (r10 I:java.lang.Object) = (r3 I:kotlinx.coroutines.flow.FlowCollector), (r10 I:java.lang.Object), (r4 I:kotlin.coroutines.Continuation) type: INTERFACE call: kotlinx.coroutines.flow.FlowCollector.emit(java.lang.Object, kotlin.coroutines.Continuation):java.lang.Object A[MD:(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0053|0x0053: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0056 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|RETURN\l|0x0055: RETURN  (r0 I:java.lang.Object) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0056|0x0056: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$result' java.lang.Object)]) \l0x0057: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: INVOKE  (r10 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0025: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0026: IGET  (r2 I:java.lang.Object) = (r1 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.L$0 java.lang.Object \l0x0028: CHECK_CAST (r2 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r2 I:??[OBJECT, ARRAY]) \l0x002a: IGET  (r3 I:java.lang.Object) = (r1 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.L$1 java.lang.Object \l0x002c: CHECK_CAST (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:??[OBJECT, ARRAY]) \l0x002e: IGET  (r4 I:kotlin.jvm.functions.Function3\<T1, T2, kotlin.coroutines.Continuation\<? super R\>, java.lang.Object\>) = (r1 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.$transform kotlin.jvm.functions.Function3 \l0x0030: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0031: AGET  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][] A[D('it' java.lang.Object[])]), (r5 I:??[int, short, byte, char]) \l0x0033: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0034: AGET  (r7 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][] A[D('it' java.lang.Object[])]), (r6 I:??[int, short, byte, char]) \l0x0036: IPUT  \l  (r2 I:java.lang.Object A[D('$this$combineInternal' kotlinx.coroutines.flow.FlowCollector)])\l  (r1 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)])\l kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.L$0 java.lang.Object \l0x0038: IPUT  \l  (r6 I:int)\l  (r1 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)])\l kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.label int \l0x003a: INVOKE  (r3 I:java.lang.Object A[D('it' java.lang.Object[])]) = \l  (r4 I:kotlin.jvm.functions.Function3)\l  (r5 I:java.lang.Object)\l  (r7 I:java.lang.Object)\l  (r1 I:java.lang.Object A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)])\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|0x003e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.Object[])]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0041 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0040|RETURN\l|0x0040: RETURN  (r0 I:java.lang.Object) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|0x0041: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) \l0x0042: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1)]) = (r10 I:??[OBJECT, ARRAY] A[D('$result' java.lang.Object)]) \l0x0043: MOVE  (r10 I:??[OBJECT, ARRAY] A[D('$result' java.lang.Object)]) = (r3 I:??[OBJECT, ARRAY]) \l0x0044: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0045: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1.invokeSuspend((r9 'this' I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$1$1 A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x005a \-\> B:1:?, CROSS_EDGE: B:14:0x0055 \-\> B:1:?, CROSS_EDGE: B:15:0x0056 \-\> B:16:0x0058, CROSS_EDGE: B:10:0x0040 \-\> B:1:?, CROSS_EDGE: B:11:0x0041 \-\> B:12:0x0046\lDebug Info:\l  0x0012\-0x0016: r0 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ZipKt$combine$1$1;\l  0x0012\-0x0016: r10 '$result' Ljava\/lang\/Object;\l  0x0017\-0x0022: r1 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ZipKt$combine$1$1;\l  0x0017\-0x0022: r10 '$result' Ljava\/lang\/Object;\l  0x002a\-0x003e: r2 '$this$combineInternal' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x002e\-0x003e: r3 'it' [Ljava\/lang\/Object;\l  0x0026\-0x0046: r10 '$result' Ljava\/lang\/Object;\l  0x0026\-0x0046: r1 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ZipKt$combine$1$1;\l  0x0046\-0x0058: r1 '$result' Ljava\/lang\/Object;\l  0x0046\-0x0058: r2 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ZipKt$combine$1$1;\l  0x0058\-0x0065: r0 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ZipKt$combine$1$1;\l  0x0058\-0x0065: r10 '$result' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_7 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_1;
Node_15 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_12;
}

