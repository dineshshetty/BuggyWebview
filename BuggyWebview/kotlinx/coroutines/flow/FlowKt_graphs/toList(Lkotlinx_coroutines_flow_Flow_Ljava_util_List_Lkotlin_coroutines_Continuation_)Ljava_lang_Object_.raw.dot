digraph "CFG forkotlinx.coroutines.flow.FlowKt.toList(Lkotlinx\/coroutines\/flow\/Flow;Ljava\/util\/List;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.flow.Flow A[D('$this$toList' kotlinx.coroutines.flow.Flow)])\l  (r2 I:java.util.List A[D('destination' java.util.List)])\l  (r3 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: STATIC call: kotlinx.coroutines.flow.FlowKt__CollectionKt.toList(kotlinx.coroutines.flow.Flow, java.util.List, kotlin.coroutines.Continuation):java.lang.Object A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, java.util.List\<T\>, kotlin.coroutines.Continuation\<? super java.util.List\<? extends T\>\>):java.lang.Object (m)] (LINE:1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:java.lang.Object) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.Object kotlinx.coroutines.flow.FlowKt.toList((r1 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$toList' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.util.List\<T\> A[D('destination' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.coroutines.Continuation\<? super java.util.List\<? extends T\>\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0004: r1 '$this$toList' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0004: r2 'destination' Ljava\/util\/List;\l  \-1 \-0x0004: r3 '$completion' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Ljava\/util\/List\<TT;\>;Lkotlin\/coroutines\/Continuation\<\-Ljava\/util\/List\<+TT;\>;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

