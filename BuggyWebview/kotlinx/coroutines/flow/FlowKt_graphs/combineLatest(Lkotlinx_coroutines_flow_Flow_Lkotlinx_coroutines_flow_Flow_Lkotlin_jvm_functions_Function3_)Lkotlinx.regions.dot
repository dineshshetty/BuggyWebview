digraph "CFG forkotlinx.coroutines.flow.FlowKt.combineLatest(Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/jvm\/functions\/Function3;)Lkotlinx\/coroutines\/flow\/Flow;" {
subgraph cluster_Region_494281352 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|return kotlinx.coroutines.flow.Migration.combineLatest(r1, r2, r3)\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0000}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<R\> kotlinx.coroutines.flow.FlowKt.combineLatest((r1v0 kotlinx.coroutines.flow.Flow\<? extends T1\> A[D('$this$combineLatest' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlinx.coroutines.flow.Flow\<? extends T2\> A[D('other' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function3\<? super T1, ? super T2, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\> A[D('transform' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Flow analogue of 'combineLatest' is 'combine', replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this.combine(other, transform), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T1, T2]\lSIGNATURE: \<T1:Ljava\/lang\/Object;T2:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT1;\>;Lkotlinx\/coroutines\/flow\/Flow\<+TT2;\>;Lkotlin\/jvm\/functions\/Function3\<\-TT1;\-TT2;\-Lkotlin\/coroutines\/Continuation\<\-TR;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TR;\>;\l}"];
MethodNode -> Node_4;Node_7 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
}

