digraph "CFG forkotlinx.coroutines.flow.FlowKt.shareIn(Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;I)Lkotlinx\/coroutines\/flow\/SharedFlow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|return kotlinx.coroutines.flow.Share.shareIn(r1, r2, r3, r4)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.SharedFlow\<T\> kotlinx.coroutines.flow.FlowKt.shareIn((r1v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$shareIn' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'scope' kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'started' kotlinx.coroutines.flow.SharingStarted A[D('started' kotlinx.coroutines.flow.SharingStarted), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'replay' int A[D('replay' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;I)Lkotlinx\/coroutines\/flow\/SharedFlow\<TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

