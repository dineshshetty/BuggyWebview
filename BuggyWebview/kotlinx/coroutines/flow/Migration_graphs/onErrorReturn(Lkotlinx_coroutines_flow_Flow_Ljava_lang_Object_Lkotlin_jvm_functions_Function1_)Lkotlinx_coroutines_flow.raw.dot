digraph "CFG forkotlinx.coroutines.flow.FlowKt__MigrationKt.onErrorReturn(Lkotlinx\/coroutines\/flow\/Flow;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2) =  kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2  (LINE:303)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2)\l  (r4 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r3 I:java.lang.Object A[D('fallback' java.lang.Object)])\l  (r1 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2.\<init\>(kotlin.jvm.functions.Function1, java.lang.Object, kotlin.coroutines.Continuation):void A[MD:(kotlin.jvm.functions.Function1\<? super java.lang.Throwable, java.lang.Boolean\>, T, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2\>):void (m)]\l0x0006: CHECK_CAST (r0 I:kotlin.jvm.functions.Function3) = (kotlin.jvm.functions.Function3) (r0 I:??[OBJECT, ARRAY]) \l0x0008: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = \l  (r2 I:kotlinx.coroutines.flow.Flow A[D('$this$onErrorReturn' kotlinx.coroutines.flow.Flow)])\l  (r0 I:kotlin.jvm.functions.Function3)\l type: STATIC call: kotlinx.coroutines.flow.FlowKt.catch(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super T\>, ? super java.lang.Throwable, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>)  (LINE:307)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__MigrationKt.onErrorReturn((r2 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$onErrorReturn' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:T A[D('fallback' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch \{ e \-\> if (predicate(e)) emit(fallback) else throw e \}', replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=catch \{ e \-\> if (predicate(e)) emit(fallback) else throw e \}, imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 '$this$onErrorReturn' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x000c: r3 'fallback' Ljava\/lang\/Object;\l  \-1 \-0x000c: r4 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;TT;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Ljava\/lang\/Boolean;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

