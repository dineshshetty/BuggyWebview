digraph "CFG forkotlinx.coroutines.flow.FlowKt__MigrationKt.switchMap(Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/jvm\/functions\/Function2;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$switchMap' kotlinx.coroutines.flow.Flow)])  (LINE:435)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: NEW_INSTANCE  (r2 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$switchMap$$inlined$flatMapLatest$1) =  kotlinx.coroutines.flow.FlowKt__MigrationKt$switchMap$$inlined$flatMapLatest$1  (LINE:497)\l0x0004: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  \l  (r2 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$switchMap$$inlined$flatMapLatest$1)\l  (r5 I:kotlin.jvm.functions.Function2 A[D('transform' kotlin.jvm.functions.Function2)])\l  (r3 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__MigrationKt$switchMap$$inlined$flatMapLatest$1.\<init\>(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation):void A[MD:(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation):void (m)]\l0x0008: CHECK_CAST (r2 I:kotlin.jvm.functions.Function3) = (kotlin.jvm.functions.Function3) (r2 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow A[D('$this$flatMapLatest$iv' kotlinx.coroutines.flow.Flow)]) = \l  (r0 I:kotlinx.coroutines.flow.Flow A[D('$this$flatMapLatest$iv' kotlinx.coroutines.flow.Flow)])\l  (r2 I:kotlin.jvm.functions.Function3)\l type: STATIC call: kotlinx.coroutines.flow.FlowKt.transformLatest(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3):kotlinx.coroutines.flow.Flow A[MD:\<T, R\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<R\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<R\> A[D('$this$flatMapLatest$iv' kotlinx.coroutines.flow.Flow)])  (LINE:435)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<R\> kotlinx.coroutines.flow.FlowKt__MigrationKt.switchMap((r4 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$switchMap' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.Flow\<? extends R\>\>, ? extends java.lang.Object\> A[D('transform' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Flow analogues of 'switchMap' are 'transformLatest', 'flatMapLatest' and 'mapLatest', replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this.flatMapLatest(transform), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000e: r0 '$this$flatMapLatest$iv' Lkotlinx\/coroutines\/flow\/Flow;\l  0x0002\-0x000e: r1 '$i$f$flatMapLatest' I\l  \-1 \-0x000e: r4 '$this$switchMap' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x000e: r5 'transform' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlin\/jvm\/functions\/Function2\<\-TT;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlinx\/coroutines\/flow\/Flow\<+TR;\>;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TR;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

