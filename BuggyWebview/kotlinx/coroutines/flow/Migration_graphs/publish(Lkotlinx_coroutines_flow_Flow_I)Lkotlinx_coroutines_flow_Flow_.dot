digraph "CFG forkotlinx.coroutines.flow.FlowKt__MigrationKt.publish(Lkotlinx\/coroutines\/flow\/Flow;I)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.flow.FlowKt.noImpl()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|throw new kotlin.ExceptionsH()\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__MigrationKt.publish((r1v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$publish' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'bufferSize' int A[D('bufferSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Flow analogue of 'publish(bufferSize)' is 'buffer' followed by 'shareIn'. \lpublish().connect() is the default strategy (no extra call is needed), \lpublish().autoConnect() translates to 'started = SharingStared.Lazily' argument, \lpublish().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this.buffer(bufferSize).shareIn(scope, 0), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;I)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

