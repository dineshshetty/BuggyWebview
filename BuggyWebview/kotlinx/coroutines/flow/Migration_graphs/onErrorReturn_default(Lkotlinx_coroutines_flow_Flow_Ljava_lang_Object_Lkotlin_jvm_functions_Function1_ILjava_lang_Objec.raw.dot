digraph "CFG forkotlinx.coroutines.flow.FlowKt__MigrationKt.onErrorReturn$default(Lkotlinx\/coroutines\/flow\/Flow;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:302)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0008 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: SGET  (r2 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$1) =  kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$1.INSTANCE kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$1 \l0x0006: CHECK_CAST (r2 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = (r0 I:kotlinx.coroutines.flow.Flow), (r1 I:java.lang.Object), (r2 I:kotlin.jvm.functions.Function1) type: STATIC call: kotlinx.coroutines.flow.FlowKt.onErrorReturn(kotlinx.coroutines.flow.Flow, java.lang.Object, kotlin.jvm.functions.Function1):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, T, kotlin.jvm.functions.Function1\<? super java.lang.Throwable, java.lang.Boolean\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlinx.coroutines.flow.Flow) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlinx.coroutines.flow.Flow kotlinx.coroutines.flow.FlowKt__MigrationKt.onErrorReturn$default((r0 I:kotlinx.coroutines.flow.Flow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0008\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

