digraph "CFG forkotlinx.coroutines.flow.FlowKt__MigrationKt.delayEach(Lkotlinx\/coroutines\/flow\/Flow;J)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$delayEach$1) =  kotlinx.coroutines.flow.FlowKt__MigrationKt$delayEach$1  (LINE:427)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$delayEach$1)\l  (r3 I:long A[D('timeMillis' long)])\l  (r1 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__MigrationKt$delayEach$1.\<init\>(long, kotlin.coroutines.Continuation):void A[MD:(long, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__MigrationKt$delayEach$1\>):void (m)]\l0x0006: CHECK_CAST (r0 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r0 I:??[OBJECT, ARRAY]) \l0x0008: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = \l  (r2 I:kotlinx.coroutines.flow.Flow A[D('$this$delayEach' kotlinx.coroutines.flow.Flow)])\l  (r0 I:kotlin.jvm.functions.Function2)\l type: STATIC call: kotlinx.coroutines.flow.FlowKt.onEach(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__MigrationKt.delayEach((r2 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$delayEach' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[D('timeMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Use 'onEach \{ delay(timeMillis) \}', replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=onEach \{ delay(timeMillis) \}, imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 '$this$delayEach' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x000c: r3 'timeMillis' J\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;J)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

