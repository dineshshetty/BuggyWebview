digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('collector' kotlinx.coroutines.flow.FlowCollector)])  (LINE:108)\l0x0001: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$completion' kotlin.coroutines.Continuation)]) \l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: IGET  (r3 I:kotlinx.coroutines.flow.Flow[]) = (r8 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1) kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.$flows$inlined kotlinx.coroutines.flow.Flow[]  (LINE:113)\l0x0005: INVOKE  (r4 I:kotlin.jvm.functions.Function0) =  type: STATIC call: kotlinx.coroutines.flow.FlowKt__ZipKt.access$nullArrayFactory():kotlin.jvm.functions.Function0 A[MD:():kotlin.jvm.functions.Function0 (m)]\l0x0009: NEW_INSTANCE  (r5 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1$2) =  kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1$2 \l0x000b: IGET  (r6 I:kotlin.jvm.functions.Function4) = (r8 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1) kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.$transform$inlined$1 kotlin.jvm.functions.Function4 \l0x000d: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  \l  (r5 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1$2)\l  (r7 I:kotlin.coroutines.Continuation)\l  (r6 I:kotlin.jvm.functions.Function4)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.2.\<init\>(kotlin.coroutines.Continuation, kotlin.jvm.functions.Function4):void A[MD:(kotlin.coroutines.Continuation, kotlin.jvm.functions.Function4):void (m)]\l0x0011: CHECK_CAST (r5 I:kotlin.jvm.functions.Function3) = (kotlin.jvm.functions.Function3) (r5 I:??[OBJECT, ARRAY]) \l0x0013: INVOKE  (r3 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.flow.FlowCollector A[D('$this$combineUnsafe_u24lambda_u2d10' kotlinx.coroutines.flow.FlowCollector)])\l  (r3 I:kotlinx.coroutines.flow.Flow[])\l  (r4 I:kotlin.jvm.functions.Function0)\l  (r5 I:kotlin.jvm.functions.Function3)\l  (r10 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: STATIC call: kotlinx.coroutines.flow.internal.CombineKt.combineInternal(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.flow.Flow[], kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function3, kotlin.coroutines.Continuation):java.lang.Object A[MD:\<R, T\>:(kotlinx.coroutines.flow.FlowCollector\<? super R\>, kotlinx.coroutines.flow.Flow\<? extends T\>[], kotlin.jvm.functions.Function0\<T[]\>, kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T[], ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l0x0017: INVOKE  (r4 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|0x001b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x001d|RETURN\l|0x001d: RETURN  (r3 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001f: SGET  (r0 I:kotlin.Unit A[D('$this$combineUnsafe_u24lambda_u2d10' kotlinx.coroutines.flow.FlowCollector)]) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:java.lang.Object)  (LINE:109)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.collect((r8 'this' I:kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1 A[IMMUTABLE_TYPE, THIS]), (r9 I:kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0021 \-\> B:1:?\lDebug Info:\l  0x0001\-0x001f: r0 '$this$combineUnsafe_u24lambda_u2d10' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x0002\-0x001f: r1 '$completion' Lkotlin\/coroutines\/Continuation;\l  0x0003\-0x001f: r2 '$i$a$\-unsafeFlow\-FlowKt__ZipKt$combineUnsafe$1' I\l  \-1 \-0x0021: r9 'collector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0021: r10 '$completion' Lkotlin\/coroutines\/Continuation;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

