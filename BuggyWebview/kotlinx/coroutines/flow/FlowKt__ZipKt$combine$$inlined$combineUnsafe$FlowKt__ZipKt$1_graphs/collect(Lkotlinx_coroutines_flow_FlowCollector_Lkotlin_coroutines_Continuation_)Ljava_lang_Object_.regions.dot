digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_800424982 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object java.lang.Object r3 = kotlinx.coroutines.flow.internal.Combine.combineInternal(r9, r1, kotlinx.coroutines.flow.Zip.access$nullArrayFactory(), new kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.C09432(null, r2), r10)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|RETURN\l|return r3 == kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED() ? r3 : kotlin.Unit.INSTANCE\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x001d}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x001e}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0021}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1.collect((r8v0 'this' kotlinx.coroutines.flow.FlowKt__ZipKt$combine$$inlined$combineUnsafe$FlowKt__ZipKt$1 A[IMMUTABLE_TYPE, THIS]), (r9v0 'collector' kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 '$completion' kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0021 \-\> B:1:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_0 -> Node_2;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

