digraph "CFG forkotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r10 I:??[OBJECT, ARRAY]) kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 \l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY]) \l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1) = (kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1) (r0 I:??[OBJECT, ARRAY]) \l0x0007: IGET  (r1 I:int) = (r0 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1) kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.label int \l0x0009: CONST  (r2 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char]) \l0x000b: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) & (r2 I:??[int, boolean, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0014 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IGET  (r10 I:int) = (r0 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1) kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.label int \l0x0010: ARITH  (r10 I:int) = (r10 I:int) \- (r2 I:int) \l0x0011: IPUT  (r10 I:int), (r0 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1) kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.label int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001a: IGET  (r0 I:java.lang.Object) = \l  (r10 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 A[D('$continuation' kotlin.coroutines.Continuation)])\l kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.result java.lang.Object \l0x001c: INVOKE  (r1 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0020: IGET  (r2 I:int) = \l  (r10 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 A[D('$continuation' kotlin.coroutines.Continuation)])\l kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.label int  (LINE:105)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: SWITCH  (r2 I:??)\l case 0: goto B:17:0x0038\l case 1: goto B:12:0x002d\l default: goto B:10:0x0025 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: NEW_INSTANCE  (r9 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:109)\l0x0027: CONST_STR  (r10 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x0029: INVOKE  (r9 I:java.lang.IllegalStateException), (r10 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|0x002c: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:105)\l0x002e: IGET  (r1 I:java.lang.Object) = \l  (r10 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 A[D('$continuation' kotlin.coroutines.Continuation)])\l kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.L$0 java.lang.Object \l0x0030: CHECK_CAST (r1 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0032|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{AbortFlowException \-\> 0x0036, blocks: (B:13:0x0032), top: B:30:0x0032 \}\lCatch: AbortFlowException \-\> 0x0036\l|0x0032: INVOKE  (r0 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[Catch: AbortFlowException \-\> 0x0036, MD:(java.lang.Object):void (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0066|0x0067: SGET  (r9 I:kotlin.Unit A[D('$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' int)]) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_27 [shape=record,label="{27\:\ 0x0069|RETURN\l|0x0069: RETURN  (r9 I:java.lang.Object)  (LINE:109)\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|ExcHandler: AbortFlowException \-\> 0x0036\l|0x0036: MOVE_EXCEPTION  (r2 I:kotlinx.coroutines.flow.internal.AbortFlowException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: AbortFlowException \-\> 0x0036] (LINE:116)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0063|0x0063: INVOKE  \l  (r2 I:kotlinx.coroutines.flow.internal.AbortFlowException A[D('e' kotlinx.coroutines.flow.internal.AbortFlowException)])\l  (r1 I:kotlinx.coroutines.flow.FlowCollector A[D('$this$take_u24lambda_u2d4' kotlinx.coroutines.flow.FlowCollector)])\l type: STATIC call: kotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkOwnership(kotlinx.coroutines.flow.internal.AbortFlowException, kotlinx.coroutines.flow.FlowCollector):void A[MD:(kotlinx.coroutines.flow.internal.AbortFlowException, kotlinx.coroutines.flow.FlowCollector\<?\>):void (m)] (LINE:117)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: INVOKE  (r0 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:105)\l0x003b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x003c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$continuation' kotlin.coroutines.Continuation)])  (LINE:108)\l0x003d: CHECK_CAST (r3 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r3 I:??[OBJECT, ARRAY]) \l0x003f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0040: NEW_INSTANCE  (r4 I:kotlin.jvm.internal.Ref$IntRef) =  kotlin.jvm.internal.Ref$IntRef  (LINE:113)\l0x0042: INVOKE  (r4 I:kotlin.jvm.internal.Ref$IntRef) type: DIRECT call: kotlin.jvm.internal.Ref.IntRef.\<init\>():void A[MD:():void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0046|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0046|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{AbortFlowException \-\> 0x0060, blocks: (B:18:0x0046), top: B:28:0x0046 \}\lCatch: AbortFlowException \-\> 0x0060\l|0x0046: IGET  (r5 I:kotlinx.coroutines.flow.Flow) = \l  (r2 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1 A[D('this' kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1)])\l kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.$this_take$inlined kotlinx.coroutines.flow.Flow A[Catch: AbortFlowException \-\> 0x0060, TRY_ENTER] (LINE:115)\l0x0048: NEW_INSTANCE  (r6 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$2$1) =  kotlinx.coroutines.flow.FlowKt__LimitKt$take$2$1 A[Catch: AbortFlowException \-\> 0x0060]\l0x004a: IGET  (r7 I:int) = \l  (r2 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1 A[D('this' kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1)])\l kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.$count$inlined int A[Catch: AbortFlowException \-\> 0x0060]\l0x004c: INVOKE  \l  (r6 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$2$1)\l  (r4 I:kotlin.jvm.internal.Ref$IntRef A[D('consumed' kotlin.jvm.internal.Ref$IntRef)])\l  (r7 I:int)\l  (r9 I:kotlinx.coroutines.flow.FlowCollector A[D('$this$take_u24lambda_u2d4' kotlinx.coroutines.flow.FlowCollector)])\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__LimitKt$take$2$1.\<init\>(kotlin.jvm.internal.Ref$IntRef, int, kotlinx.coroutines.flow.FlowCollector):void A[Catch: AbortFlowException \-\> 0x0060, MD:(kotlin.jvm.internal.Ref$IntRef, int, kotlinx.coroutines.flow.FlowCollector\<? super T\>):void (m)]\l0x004f: CHECK_CAST (r6 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r6 I:??[OBJECT, ARRAY]) A[Catch: AbortFlowException \-\> 0x0060]\l0x0051: IPUT  \l  (r9 I:java.lang.Object A[D('$this$take_u24lambda_u2d4' kotlinx.coroutines.flow.FlowCollector)])\l  (r10 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 A[D('$continuation' kotlin.coroutines.Continuation)])\l kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.L$0 java.lang.Object A[Catch: AbortFlowException \-\> 0x0060]\l0x0053: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0054: IPUT  \l  (r7 I:int)\l  (r10 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 A[D('$continuation' kotlin.coroutines.Continuation)])\l kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.label int A[Catch: AbortFlowException \-\> 0x0060]\l0x0056: INVOKE  (r5 I:java.lang.Object) = \l  (r5 I:kotlinx.coroutines.flow.Flow)\l  (r6 I:kotlinx.coroutines.flow.FlowCollector)\l  (r10 I:kotlin.coroutines.Continuation A[D('$continuation' kotlin.coroutines.Continuation)])\l type: INTERFACE call: kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation):java.lang.Object A[Catch: AbortFlowException \-\> 0x0060, MD:(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m), TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x005a|0x005a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x005d \l}"];
Node_20 [shape=record,label="{20\:\ 0x005c|RETURN\l|0x005c: RETURN  (r1 I:java.lang.Object)  (LINE:105)\l}"];
Node_21 [shape=record,label="{21\:\ 0x005d|0x005d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$take_u24lambda_u2d4' kotlinx.coroutines.flow.FlowCollector)])  (LINE:115)\l0x005e: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$take_u24lambda_u2d4' kotlinx.coroutines.flow.FlowCollector)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' int)]) \l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x0060|ExcHandler: AbortFlowException \-\> 0x0060\l|0x0060: MOVE_EXCEPTION  (r2 I:kotlinx.coroutines.flow.internal.AbortFlowException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: AbortFlowException \-\> 0x0060] (LINE:116)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0061|0x0061: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$take_u24lambda_u2d4' kotlinx.coroutines.flow.FlowCollector)]) \l0x0062: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$take_u24lambda_u2d4' kotlinx.coroutines.flow.FlowCollector)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' int)]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1) =  kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1 \l0x0016: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1$1)\l  (r8 I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1)\l  (r10 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.1.\<init\>(kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1, kotlin.coroutines.Continuation):void (m)]\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1.collect((r8 'this' I:kotlinx.coroutines.flow.FlowKt__LimitKt$take$$inlined$unsafeFlow$1 A[IMMUTABLE_TYPE, THIS]), (r9 I:kotlinx.coroutines.flow.FlowCollector\<? super T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:27:0x0069 \-\> B:1:?, CROSS_EDGE: B:25:0x0063 \-\> B:26:0x0066, CROSS_EDGE: B:30:0x0032 \-\> B:15:0x0036, CROSS_EDGE: B:20:0x005c \-\> B:1:?, CROSS_EDGE: B:21:0x005d \-\> B:26:0x0066, CROSS_EDGE: B:24:0x0061 \-\> B:25:0x0063, CROSS_EDGE: B:28:0x0046 \-\> B:23:0x0060, CROSS_EDGE: B:7:0x0014 \-\> B:8:0x0019, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x0014\lTryCatch #0 \{AbortFlowException \-\> 0x0060, blocks: (B:18:0x0046), top: B:28:0x0046 \}, TryCatch #1 \{AbortFlowException \-\> 0x0036, blocks: (B:13:0x0032), top: B:30:0x0032 \}\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x001c\-0x0025: r0 '$result' Ljava\/lang\/Object;\l  0x001a\-0x0025: r10 '$continuation' Lkotlin\/coroutines\/Continuation;\l  0x0032\-0x0038: r1 '$this$take_u24lambda_u2d4' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x002e\-0x0038: r9 '$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' I\l  0x003c\-0x003f: r9 'collector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x003c\-0x005a: r2 'this' Lkotlinx\/coroutines\/flow\/FlowKt__LimitKt$take$$inlined$unsafeFlow$1;\l  0x0045\-0x005a: r4 'consumed' Lkotlin\/jvm\/internal\/Ref$IntRef;\l  0x0040\-0x005f: r3 '$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' I\l  0x003f\-0x005f: r9 '$this$take_u24lambda_u2d4' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x005f\-0x0060: r1 '$this$take_u24lambda_u2d4' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x005f\-0x0060: r9 '$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' I\l  0x0060\-0x0063: r3 '$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' I\l  0x0060\-0x0063: r9 '$this$take_u24lambda_u2d4' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x0063\-0x0066: r2 'e' Lkotlinx\/coroutines\/flow\/internal\/AbortFlowException;\l  0x0063\-0x0067: r1 '$this$take_u24lambda_u2d4' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x0063\-0x0067: r9 '$i$a$\-unsafeFlow\-FlowKt__LimitKt$take$2' I\l  0x002d\-0x0071: r0 '$result' Ljava\/lang\/Object;\l  0x002d\-0x0071: r10 '$continuation' Lkotlin\/coroutines\/Continuation;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [105=4]\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_12;
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_30;
Node_30 -> Node_13;
Node_30 -> Node_15;
Node_13 -> Node_26;
Node_13 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_1;
Node_31 -> Node_15;
Node_15 -> Node_25;
Node_25 -> Node_26;
Node_17 -> Node_28;
Node_28 -> Node_18;
Node_28 -> Node_23;
Node_18 -> Node_19;
Node_18 -> Node_29;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_1;
Node_21 -> Node_26;
Node_29 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_7 -> Node_8;
}

