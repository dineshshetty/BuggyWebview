digraph "CFG forkotlinx.coroutines.flow.SharingStartedKt.WhileSubscribed\-5qebJ5I(Lkotlinx\/coroutines\/flow\/SharingStarted$Companion;JJ)Lkotlinx\/coroutines\/flow\/SharingStarted;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.StartedWhileSubscribed) =  kotlinx.coroutines.flow.StartedWhileSubscribed  (LINE:142)\l0x0002: INVOKE  (r1 I:long) = (r6 I:long A[D('stopTimeout' long)]) type: STATIC call: kotlin.time.Duration.getInWholeMilliseconds\-impl(long):long A[MD:(long):long (m)]\l0x0006: INVOKE  (r3 I:long) = (r8 I:long A[D('replayExpiration' long)]) type: STATIC call: kotlin.time.Duration.getInWholeMilliseconds\-impl(long):long A[MD:(long):long (m)]\l0x000a: INVOKE  (r0 I:kotlinx.coroutines.flow.StartedWhileSubscribed), (r1 I:long), (r3 I:long) type: DIRECT call: kotlinx.coroutines.flow.StartedWhileSubscribed.\<init\>(long, long):void A[MD:(long, long):void (m)]\l0x000d: CHECK_CAST (r0 I:kotlinx.coroutines.flow.SharingStarted) = (kotlinx.coroutines.flow.SharingStarted) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:kotlinx.coroutines.flow.SharingStarted) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.SharingStarted kotlinx.coroutines.flow.SharingStartedKt.WhileSubscribed\-5qebJ5I((r5 I:kotlinx.coroutines.flow.SharingStarted$Companion A[D('$this$WhileSubscribed' kotlinx.coroutines.flow.SharingStarted$Companion), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('stopTimeout' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('replayExpiration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000f: r5 '$this$WhileSubscribed' Lkotlinx\/coroutines\/flow\/SharingStarted$Companion;\l  \-1 \-0x000f: r6 'stopTimeout' J\l  \-1 \-0x000f: r8 'replayExpiration' J\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

