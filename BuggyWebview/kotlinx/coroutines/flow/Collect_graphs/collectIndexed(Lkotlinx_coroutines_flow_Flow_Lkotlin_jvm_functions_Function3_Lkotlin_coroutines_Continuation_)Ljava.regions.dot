digraph "CFG forkotlinx.coroutines.flow.FlowKt__CollectKt.collectIndexed(Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/jvm\/functions\/Function3;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1476223389 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|java.lang.Object java.lang.Object r1 = r3.collect(new kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2(r4), r5)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|RETURN\l|return r1 == kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED() ? r1 : kotlin.Unit.INSTANCE\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0012}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0013}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0015}"];
MethodNode[shape=record,label="{public static final java.lang.Object kotlinx.coroutines.flow.FlowKt__CollectKt.collectIndexed((r3v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$collectIndexed' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super T, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[D('action' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlin\/jvm\/functions\/Function3\<\-Ljava\/lang\/Integer;\-TT;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_7 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

