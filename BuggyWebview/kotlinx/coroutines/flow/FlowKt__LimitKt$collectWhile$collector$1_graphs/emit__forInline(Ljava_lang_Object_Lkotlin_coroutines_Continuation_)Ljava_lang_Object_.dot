digraph "CFG forkotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.emit$$forInline(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.InlineMarker.mark(4)\lkotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1 new kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1$emit$1(r2, r4)\lkotlin.jvm.internal.InlineMarker.mark(5)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|if (((java.lang.Boolean) r2.$predicate.invoke(r3, r4)).booleanValue() == false) goto L6\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b}"];
Node_13 [shape=record,label="{13\:\ 0x001d|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e}"];
Node_15 [shape=record,label="{15\:\ 0x0026|throw new kotlinx.coroutines.flow.internal.FlowExceptions(r2)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.emit$$forInline((r2v0 'this' kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0026 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (TT;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

