digraph "CFG forkotlinx.coroutines.flow.StartedWhileSubscribed$command$2.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE   type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0003: IGET  (r0 I:int) = (r3 I:kotlinx.coroutines.flow.StartedWhileSubscribed$command$2) kotlinx.coroutines.flow.StartedWhileSubscribed$command$2.label int  (LINE:188)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: SWITCH  (r0 I:??)\l case 0: goto B:18:0x0010\l default: goto B:16:0x0008 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000c: INVOKE  (r4 I:java.lang.IllegalStateException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|0x000f: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|0x0010: INVOKE  (r4 I:java.lang.Object) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0013: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x0014: IGET  (r1 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.flow.StartedWhileSubscribed$command$2 A[D('this' kotlinx.coroutines.flow.StartedWhileSubscribed$command$2)])\l kotlinx.coroutines.flow.StartedWhileSubscribed$command$2.L$0 java.lang.Object \l0x0016: CHECK_CAST (r1 I:kotlinx.coroutines.flow.SharingCommand) = (kotlinx.coroutines.flow.SharingCommand) (r1 I:??[OBJECT, ARRAY]) \l0x0018: SGET  (r2 I:kotlinx.coroutines.flow.SharingCommand) =  kotlinx.coroutines.flow.SharingCommand.START kotlinx.coroutines.flow.SharingCommand \l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|0x001a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' kotlinx.coroutines.flow.SharingCommand)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001e \l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|0x001c: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|0x001f: INVOKE  (r2 I:java.lang.Boolean) = (r2 I:boolean) type: STATIC call: kotlin.coroutines.jvm.internal.Boxing.boxBoolean(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0023|RETURN\l|0x0023: RETURN  (r2 I:java.lang.Object) \l}"];
Node_21 [shape=record,label="{21\:\ 0x001e|0x001e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.StartedWhileSubscribed$command$2.invokeSuspend((r3 'this' I:kotlinx.coroutines.flow.StartedWhileSubscribed$command$2 A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0023 \-\> B:13:?, CROSS_EDGE: B:21:0x001e \-\> B:22:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x0029: r0 'this' Lkotlinx\/coroutines\/flow\/StartedWhileSubscribed$command$2;\l  0x0018\-0x0029: r1 'it' Lkotlinx\/coroutines\/flow\/SharingCommand;\l  0x0014\-0x0029: r4 '$result' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
}

