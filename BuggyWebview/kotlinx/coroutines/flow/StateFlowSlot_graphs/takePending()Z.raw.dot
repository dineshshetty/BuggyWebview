digraph "CFG forkotlinx.coroutines.flow.StateFlowSlot.takePending()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.flow.StateFlowSlot._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:294)\l0x0002: INVOKE  (r1 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.access$getNONE$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater), (r5 I:java.lang.Object), (r1 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(T, V):V (c)]\l0x000a: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  (r2 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:295)\l0x0012: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:433)\l0x0016: INSTANCE_OF  (r4 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.CancellableContinuationImpl  (LINE:295)\l0x0018: ARITH  (r2 I:??[int, boolean] A[D('$i$a$\-assert\-StateFlowSlot$takePending$1$1' int)]) = (r4 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001f: INVOKE  (r2 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: INVOKE  (r2 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.access$getPENDING$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:296)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|0x0027: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|RETURN\lORIG_RETURN\l|0x002a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002b: RETURN  (r3 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x002b: RETURN  (r3 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.flow.StateFlowSlot.takePending((r5 'this' I:kotlinx.coroutines.flow.StateFlowSlot A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002b \-\> B:1:?, CROSS_EDGE: B:10:0x0027 \-\> B:13:0x002b, CROSS_EDGE: B:3:0x0013 \-\> B:9:0x0023\lDebug Info:\l  0x0016\-0x0018: r2 '$i$a$\-assert\-StateFlowSlot$takePending$1$1' I\l  0x000d\-0x002b: r0 'state' Ljava\/lang\/Object;\l  0x000e\-0x002b: r1 '$i$a$\-let\-StateFlowSlot$takePending$1' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_1;
Node_14 -> Node_1;
}

