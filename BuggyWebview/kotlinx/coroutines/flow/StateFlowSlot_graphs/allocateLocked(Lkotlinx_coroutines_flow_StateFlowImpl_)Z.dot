digraph "CFG forkotlinx.coroutines.flow.StateFlowSlot.allocateLocked(Lkotlinx\/coroutines\/flow\/StateFlowImpl;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r1._state == null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0006|kotlinx.coroutines.internal.Symbol r0 = kotlinx.coroutines.flow.StateFlowKt.NONE\lr1._state = r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.StateFlowSlot.allocateLocked((r1v0 'this' kotlinx.coroutines.flow.StateFlowSlot A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlinx.coroutines.flow.StateFlowImpl\<?\> A[D('flow' kotlinx.coroutines.flow.StateFlowImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000d \-\> B:1:?\lINLINE_NOT_NEEDED\lBRIDGED_BY: kotlinx.coroutines.flow.StateFlowSlot.allocateLocked(kotlinx.coroutines.flow.StateFlowImpl\<?\>):boolean\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/StateFlowImpl\<*\>;)Z\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

