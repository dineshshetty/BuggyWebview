digraph "CFG forkotlinx.coroutines.flow.StateFlowSlot.makePending()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY])  (LINE:276)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|LOOP_START\lLOOP:0: B:3:0x0002\-\>B:25:0x0002\l|0x0003: IGET  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.flow.StateFlowSlot A[D('$this$loop$iv' kotlinx.coroutines.flow.StateFlowSlot)]) kotlinx.coroutines.flow.StateFlowSlot._state java.lang.Object  (LINE:432)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a  (LINE:278)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: INVOKE  (r4 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.access$getPENDING$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:279)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0011 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: INVOKE  (r4 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.access$getNONE$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:280)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0024 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.flow.StateFlowSlot._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:285)\l0x0026: INVOKE  (r5 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.access$getNONE$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l0x002a: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r6 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r5 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0002 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0030|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:286)\l0x0031: CHECK_CAST (r4 I:kotlinx.coroutines.CancellableContinuationImpl) = (kotlinx.coroutines.CancellableContinuationImpl) (r4 I:??[OBJECT, ARRAY]) \l0x0033: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x0035: SGET  (r5 I:kotlin.Result$Companion) =  kotlin.Result.Companion kotlin.Result$Companion \l0x0037: SGET  (r5 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l0x0039: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.lang.Object) type: STATIC call: kotlin.Result.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<T\>:(java.lang.Object):java.lang.Object (m)]\l0x003d: INVOKE  (r4 I:kotlin.coroutines.Continuation), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.coroutines.Continuation.resumeWith(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0040|RETURN\l|0x0040: RETURN    (LINE:287)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0002|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x0002\-\>B:25:0x0002\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.flow.StateFlowSlot._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:281)\l0x0019: INVOKE  (r5 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.access$getPENDING$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l0x001d: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r6 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r5 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021|0x0021: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0002 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0023|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|RETURN\l|0x0023: RETURN   \l}"];
Node_27 [shape=record,label="{27\:\ 0x0002|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|RETURN\l|0x0010: RETURN   \l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|RETURN\l|0x0009: RETURN   \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.flow.StateFlowSlot.makePending((r6 'this' I:kotlinx.coroutines.flow.StateFlowSlot A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0010 \-\> B:1:?, CROSS_EDGE: B:13:0x0023 \-\> B:1:?, BACK_EDGE: B:12:0x0021 \-\> B:3:0x0002, CROSS_EDGE: B:17:0x0040 \-\> B:1:?, BACK_EDGE: B:15:0x002e \-\> B:3:0x0002\lDebug Info:\l  0x0005\-0x0042: r2 'state' Ljava\/lang\/Object;\l  0x0006\-0x0042: r3 '$i$a$\-loop\-StateFlowSlot$makePending$1' I\l  0x0001\-0x0042: r0 '$this$loop$iv' Lkotlinx\/coroutines\/flow\/StateFlowSlot;\l  0x0002\-0x0042: r1 '$i$f$loop' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_6;
Node_4 -> Node_21[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_22[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_20;
Node_10 -> Node_23[style=dashed];
Node_20 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_24[style=dashed];
Node_15 -> Node_26;
Node_24 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_26 -> Node_25;
Node_25 -> Node_3;
Node_23 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_19[style=dashed];
Node_12 -> Node_27;
Node_19 -> Node_13;
Node_13 -> Node_1;
Node_27 -> Node_25;
Node_22 -> Node_8;
Node_8 -> Node_1;
Node_21 -> Node_5;
Node_5 -> Node_1;
}

