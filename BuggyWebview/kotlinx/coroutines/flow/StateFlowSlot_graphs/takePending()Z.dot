digraph "CFG forkotlinx.coroutines.flow.StateFlowSlot.takePending()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0 = kotlinx.coroutines.flow.StateFlowSlot._state$FU\lkotlinx.coroutines.internal.Symbol r1 = kotlinx.coroutines.flow.StateFlowKt.NONE\ljava.lang.Object r0 = r0.getAndSet(r5, r1)\lkotlin.jvm.internal.Intrinsics.checkNotNull(r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L8\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015}"];
Node_5 [shape=record,label="{5\:\ 0x001a|if (((r0 instanceof kotlinx.coroutines.CancellableContinuationImpl) ^ 1) == 0) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d}"];
Node_8 [shape=record,label="{8\:\ 0x0022|throw new java.lang.AssertionError()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|kotlinx.coroutines.internal.Symbol r2 = kotlinx.coroutines.flow.StateFlowKt.PENDING\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|if (r0 != r2) goto L10\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|RETURN\lORIG_RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.flow.StateFlowSlot.takePending((r5v0 'this' kotlinx.coroutines.flow.StateFlowSlot A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002b \-\> B:1:?, CROSS_EDGE: B:10:0x0027 \-\> B:13:0x002b, CROSS_EDGE: B:3:0x0013 \-\> B:9:0x0023\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_1;
Node_14 -> Node_1;
}

