digraph "CFG forkotlinx.coroutines.flow.StateFlowSlot.allocateLocked(Lkotlinx\/coroutines\/flow\/StateFlowImpl;)Z" {
subgraph cluster_Region_1501963473 {
label = "R(1:(2:(1:3)|(2:5|6))) | DECL_VAR: kotlinx.coroutines.internal.Symbol null\l";
node [shape=record,color=blue];
subgraph cluster_Region_1065998453 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1798863315 {
label = "IF [B:3:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r1._state != null) goto L3\l}"];
subgraph cluster_Region_7650438 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_236267677 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0006|kotlinx.coroutines.internal.Symbol r0 = kotlinx.coroutines.flow.StateFlowKt.NONE\lr1._state = r0\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.StateFlowSlot.allocateLocked((r1v0 'this' kotlinx.coroutines.flow.StateFlowSlot A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlinx.coroutines.flow.StateFlowImpl\<?\> A[D('flow' kotlinx.coroutines.flow.StateFlowImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000d \-\> B:1:?\lINLINE_NOT_NEEDED\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/StateFlowImpl\<*\>;)Z\lRENAME_REASON:avoid collision after fix types in other method\lREPLACED_BY: kotlinx.coroutines.flow.StateFlowSlot.allocateLocked(kotlinx.coroutines.flow.StateFlowImpl\<?\>):boolean\lBRIDGED_BY: kotlinx.coroutines.flow.StateFlowSlot.allocateLocked(kotlinx.coroutines.flow.StateFlowImpl\<?\>):boolean\lJadxCommentsAttr\{\l DEBUG: \l \-\> Method merged with bridge method\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot.allocateLocked(F):boolean]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
}

