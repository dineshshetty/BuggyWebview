digraph "CFG forkotlinx.coroutines.flow.StateFlowSlot.allocateLocked(Lkotlinx\/coroutines\/flow\/StateFlowImpl;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r1 I:kotlinx.coroutines.flow.StateFlowSlot) kotlinx.coroutines.flow.StateFlowSlot._state java.lang.Object  (LINE:264)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0006|0x0006: INVOKE  (r0 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.access$getNONE$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:265)\l0x000a: IPUT  (r0 I:java.lang.Object), (r1 I:kotlinx.coroutines.flow.StateFlowSlot) kotlinx.coroutines.flow.StateFlowSlot._state java.lang.Object \l0x000c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:266)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.StateFlowSlot.allocateLocked((r1 'this' I:kotlinx.coroutines.flow.StateFlowSlot A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.flow.StateFlowImpl\<?\> A[D('flow' kotlinx.coroutines.flow.StateFlowImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000d \-\> B:1:?\lDebug Info:\l  \-1 \-0x000d: r2 'flow' Lkotlinx\/coroutines\/flow\/StateFlowImpl;\lBRIDGED_BY: kotlinx.coroutines.flow.StateFlowSlot.allocateLocked(kotlinx.coroutines.flow.StateFlowImpl\<?\>):boolean\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/StateFlowImpl\<*\>;)Z\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

