digraph "CFG forkotlinx.coroutines.flow.FlowKt__BuildersKt.asFlow(Lkotlin\/sequences\/Sequence;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:109)\l0x0001: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5) =  kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5  (LINE:361)\l0x0003: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5)\l  (r2 I:kotlin.sequences.Sequence A[D('$this$asFlow' kotlin.sequences.Sequence)])\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5.\<init\>(kotlin.sequences.Sequence):void A[MD:(kotlin.sequences.Sequence):void (m)]\l0x0006: CHECK_CAST (r1 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|0x0008: RETURN  (r1 I:kotlinx.coroutines.flow.Flow\<T\>)  (LINE:113)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__BuildersKt.asFlow((r2 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$asFlow' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0008: r0 '$i$f$unsafeFlow' I\l  \-1 \-0x0008: r2 '$this$asFlow' Lkotlin\/sequences\/Sequence;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

