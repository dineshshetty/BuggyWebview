digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$3.1.invoke(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CHECK_CAST (r2 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r2 I:??[OBJECT, ARRAY]) \l0x0002: CHECK_CAST (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:??[OBJECT, ARRAY]) \l0x0004: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x0006: INVOKE  (r0 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$3$1)\l  (r2 I:kotlinx.coroutines.flow.FlowCollector)\l  (r3 I:java.lang.Object[])\l  (r4 I:kotlin.coroutines.Continuation)\l type: VIRTUAL call: kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$3.1.invoke(kotlinx.coroutines.flow.FlowCollector, java.lang.Object[], kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlinx.coroutines.flow.FlowCollector\<? super R\>, java.lang.Object[], kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ java.lang.Object kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$3.1.invoke((r1 'this' I:kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$$inlined$combineTransformUnsafe$FlowKt__ZipKt$3$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | JadxCommentsAttr\{\l DEBUG: \l \-\> Method arguments types fixed to match base method, original types: [java.lang.Object, java.lang.Object, java.lang.Object]\}\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function3.invoke(P1, P2, P3):R]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

