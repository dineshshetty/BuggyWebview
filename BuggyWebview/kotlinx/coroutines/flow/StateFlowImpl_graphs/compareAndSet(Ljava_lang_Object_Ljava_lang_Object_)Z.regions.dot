digraph "CFG forkotlinx.coroutines.flow.StateFlowImpl.compareAndSet(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1550961725 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|return updateState(r3 == null ? kotlinx.coroutines.flow.internal.NullSurrogate.NULL : r3, r4 == null ? kotlinx.coroutines.flow.internal.NullSurrogate.NULL : r4)\l}"];
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0002}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0006|PHI: r0 \l  PHI: (r0v1 java.lang.Object A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0008}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000c|PHI: r1 \l  PHI: (r1v1 java.lang.Object A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000b}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0005}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.StateFlowImpl.compareAndSet((r2v0 'this' kotlinx.coroutines.flow.StateFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 T A[D('expect' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 T A[D('update' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000b \-\> B:18:0x000c, CROSS_EDGE: B:14:0x0005 \-\> B:15:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;TT;)Z\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.MutableStateFlow.compareAndSet(T, T):boolean]\l}"];
MethodNode -> Node_10;Node_19 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_17 -> Node_18;
Node_14 -> Node_15;
}

