digraph "CFG forkotlinx.coroutines.flow.StateFlowImpl.updateState(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
Node_62 [shape=record,label="{62\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_64 [shape=record,label="{64\:\ 0x0000|getSlots()\l}"];
Node_65 [shape=record,label="{65\:\ 0x0007|monitor\-enter(r11)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0008}"];
Node_115 [shape=record,label="{115\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_67 [shape=record,label="{67\:\ 0x0009|TRY_ENTER\lTryCatch #0 \{, blocks: (B:67:0x0009, B:69:0x000e, B:73:0x0016, B:78:0x001f, B:80:0x0028, B:109:0x0070), top: B:115:0x0009 \}\lCatch: all \-\> 0x0075\l|java.lang.Object r4 = r11._state     \/\/ Catch: java.lang.Throwable \-\> L75\l}"];
Node_68 [shape=record,label="{68\:\ 0x000c|if (r12 == null) goto L12\l}"];
Node_69 [shape=record,label="{69\:\ 0x000e|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:67:0x0009, B:69:0x000e, B:73:0x0016, B:78:0x001f, B:80:0x0028, B:109:0x0070), top: B:115:0x0009 \}\lCatch: all \-\> 0x0075\l}"];
Node_70 [shape=record,label="{70\:\ 0x0012|if (kotlin.jvm.internal.Intrinsics.areEqual(r4, r12) != false) goto L12\l}"];
Node_71 [shape=record,label="{71\:\ 0x0014|monitor\-exit(r11)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0015|RETURN\l|return false\l}"];
Node_63 [shape=record,label="{63\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_73 [shape=record,label="{73\:\ 0x0016|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:67:0x0009, B:69:0x000e, B:73:0x0016, B:78:0x001f, B:80:0x0028, B:109:0x0070), top: B:115:0x0009 \}\lCatch: all \-\> 0x0075\l}"];
Node_74 [shape=record,label="{74\:\ 0x001a}"];
Node_75 [shape=record,label="{75\:\ 0x001b|if (kotlin.jvm.internal.Intrinsics.areEqual(r4, r13) == false) goto L17\l}"];
Node_76 [shape=record,label="{76\:\ 0x001d|monitor\-exit(r11)\l}"];
Node_77 [shape=record,label="{77\:\ 0x001e|RETURN\l|return true\l}"];
Node_78 [shape=record,label="{78\:\ 0x001f|TRY_ENTER\lTryCatch #0 \{, blocks: (B:67:0x0009, B:69:0x000e, B:73:0x0016, B:78:0x001f, B:80:0x0028, B:109:0x0070), top: B:115:0x0009 \}\lCatch: all \-\> 0x0075\l|r11._state = r13     \/\/ Catch: java.lang.Throwable \-\> L75\lint r6 = r11.sequence     \/\/ Catch: java.lang.Throwable \-\> L75\l}"];
Node_79 [shape=record,label="{79\:\ 0x0026|if ((r6 & 1) != 0) goto L49\l}"];
Node_80 [shape=record,label="{80\:\ 0x0028|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:67:0x0009, B:69:0x000e, B:73:0x0016, B:78:0x001f, B:80:0x0028, B:109:0x0070), top: B:115:0x0009 \}\lCatch: all \-\> 0x0075\l|int r0 = r6 + 1     \/\/ Catch: java.lang.Throwable \-\> L75\lr11.sequence = r0     \/\/ Catch: java.lang.Throwable \-\> L75\lr1 = getSlots()     \/\/ Catch: java.lang.Throwable \-\> L75\lkotlin.Unit r3 = kotlin.Unit.INSTANCE     \/\/ Catch: java.lang.Throwable \-\> L75\l}"];
Node_81 [shape=record,label="{81\:\ 0x0034|monitor\-exit(r11)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0036|LOOP_START\lLOOP:0: B:82:0x0036\-\>B:103:0x0068\lPHI: r0 r1 \l  PHI: (r0v3 'curSequence' int) = (r0v2 'curSequence' int), (r0v4 'curSequence' int) binds: [B:81:0x0034, B:103:0x0068] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v3 'curSlots' java.lang.Object) = (r1v2 'curSlots' java.lang.Object), (r1v4 'curSlots' java.lang.Object) binds: [B:81:0x0034, B:103:0x0068] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.flow.StateFlowSlot[] r2 = (kotlinx.coroutines.flow.StateFlowSlot[]) r1\l}"];
Node_83 [shape=record,label="{83\:\ 0x003a|if (r2 != null) goto L23\l}"];
Node_85 [shape=record,label="{85\:\ 0x003d|int r4 = r2.length\lr6 = 0\l}"];
Node_86 [shape=record,label="{86\:\ 0x0040|LOOP_START\lLOOP:1: B:86:0x0040\-\>B:121:0x0040\lPHI: r6 \l  PHI: (r6v5 int) = (r6v4 int), (r6v6 int) binds: [B:85:0x003d, B:121:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 \>= r4) goto L32\l}"];
Node_87 [shape=record,label="{87\:\ 0x0042|r8 = r2[r6]\lint r6 = r6 + 1\l}"];
Node_88 [shape=record,label="{88\:\ 0x0048|if (r8 != null) goto L27\l}"];
Node_120 [shape=record,label="{120\:\ 0x004b|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x004b|r8.makePending()\l}"];
Node_123 [shape=record,label="{123\:\ 0x0040|SYNTHETIC\l}"];
Node_121 [shape=record,label="{121\:\ 0x0040|LOOP_END\lSYNTHETIC\lLOOP:1: B:86:0x0040\-\>B:121:0x0040\l}"];
Node_122 [shape=record,label="{122\:\ 0x0040|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x0051|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x0051}"];
Node_94 [shape=record,label="{94\:\ 0x0052|monitor\-enter(r11)\l}"];
Node_95 [shape=record,label="{95\:\ 0x0053}"];
Node_116 [shape=record,label="{116\:\ 0x0054|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_96 [shape=record,label="{96\:\ 0x0054|TRY_ENTER\lTryCatch #1 \{, blocks: (B:96:0x0054, B:98:0x0058, B:102:0x0060), top: B:116:0x0054 \}\lCatch: all \-\> 0x006b\l|int r4 = r11.sequence     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
Node_97 [shape=record,label="{97\:\ 0x0056|if (r4 != r0) goto L39\l}"];
Node_101 [shape=record,label="{101\:\ 0x005f|r0 = r4\l}"];
Node_102 [shape=record,label="{102\:\ 0x0060|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{, blocks: (B:96:0x0054, B:98:0x0058, B:102:0x0060), top: B:116:0x0054 \}\lCatch: all \-\> 0x006b\l|r1 = getSlots()     \/\/ Catch: java.lang.Throwable \-\> L6b\lkotlin.Unit r3 = kotlin.Unit.INSTANCE     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
Node_103 [shape=record,label="{103\:\ 0x0068|LOOP_END\lLOOP:0: B:82:0x0036\-\>B:103:0x0068\l|monitor\-exit(r11)\l}"];
Node_118 [shape=record,label="{118\:\ 0x0058|SYNTHETIC\l}"];
Node_98 [shape=record,label="{98\:\ 0x0058|TRY_LEAVE\lTryCatch #1 \{, blocks: (B:96:0x0054, B:98:0x0058, B:102:0x0060), top: B:116:0x0054 \}\lCatch: all \-\> 0x006b\l|r11.sequence = r0 + 1     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
Node_99 [shape=record,label="{99\:\ 0x005d|monitor\-exit(r11)\l}"];
Node_100 [shape=record,label="{100\:\ 0x005e|RETURN\l|return true\l}"];
Node_117 [shape=record,label="{117\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_105 [shape=record,label="{105\:\ 0x006b|REMOVE\lExcHandler: all \-\> 0x006b\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_107 [shape=record,label="{107\:\ 0x006d|REMOVE\l|throw r3\l}"];
Node_108 [shape=record,label="{108\:\ 0x006e}"];
Node_109 [shape=record,label="{109\:\ 0x0070|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:67:0x0009, B:69:0x000e, B:73:0x0016, B:78:0x001f, B:80:0x0028, B:109:0x0070), top: B:115:0x0009 \}\lCatch: all \-\> 0x0075\l|r11.sequence = r6 + 2     \/\/ Catch: java.lang.Throwable \-\> L75\l}"];
Node_110 [shape=record,label="{110\:\ 0x0073|monitor\-exit(r11)\l}"];
Node_111 [shape=record,label="{111\:\ 0x0074|RETURN\l|return true\l}"];
Node_112 [shape=record,label="{112\:\ 0x0075|REMOVE\lExcHandler: all \-\> 0x0075\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_114 [shape=record,label="{114\:\ 0x0077|REMOVE\l|throw r3\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.flow.StateFlowImpl.updateState((r11v0 'this' kotlinx.coroutines.flow.StateFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r12v0 'expectedState' java.lang.Object A[D('expectedState' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'newState' java.lang.Object A[D('newState' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:77:0x001e \-\> B:63:?, BACK_EDGE: B:90:0x004b \-\> B:86:0x0040, BACK_EDGE: B:88:0x0048 \-\> B:86:0x0040, CROSS_EDGE: B:100:0x005e \-\> B:63:?, CROSS_EDGE: B:107:0x006d \-\> B:63:?, BACK_EDGE: B:103:0x0068 \-\> B:82:0x0036, CROSS_EDGE: B:116:0x0054 \-\> B:105:0x006b, CROSS_EDGE: B:83:0x003a \-\> B:93:0x0051, CROSS_EDGE: B:111:0x0074 \-\> B:63:?, CROSS_EDGE: B:68:0x000c \-\> B:73:0x0016, CROSS_EDGE: B:114:0x0077 \-\> B:63:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_62;Node_62 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_115;
Node_115 -> Node_67;
Node_115 -> Node_112;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_73;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_73;
Node_71 -> Node_72;
Node_72 -> Node_63;
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_78;
Node_76 -> Node_77;
Node_77 -> Node_63;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_108;
Node_80 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_83;
Node_83 -> Node_85;
Node_83 -> Node_93[style=dashed];
Node_85 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_119;
Node_87 -> Node_88;
Node_88 -> Node_120;
Node_88 -> Node_122[style=dashed];
Node_120 -> Node_90;
Node_90 -> Node_123;
Node_123 -> Node_121;
Node_121 -> Node_86;
Node_122 -> Node_121;
Node_119 -> Node_93;
Node_93 -> Node_94;
Node_94 -> Node_95;
Node_95 -> Node_116;
Node_116 -> Node_96;
Node_116 -> Node_105;
Node_96 -> Node_97;
Node_97 -> Node_101;
Node_97 -> Node_118[style=dashed];
Node_101 -> Node_102;
Node_102 -> Node_103;
Node_103 -> Node_82;
Node_118 -> Node_98;
Node_98 -> Node_99;
Node_98 -> Node_117;
Node_99 -> Node_100;
Node_100 -> Node_63;
Node_117 -> Node_105;
Node_105 -> Node_107;
Node_107 -> Node_63;
Node_108 -> Node_109;
Node_109 -> Node_110;
Node_110 -> Node_111;
Node_111 -> Node_63;
Node_112 -> Node_114;
Node_114 -> Node_63;
}

