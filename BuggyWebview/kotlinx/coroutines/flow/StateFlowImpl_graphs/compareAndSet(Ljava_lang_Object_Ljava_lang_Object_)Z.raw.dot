digraph "CFG forkotlinx.coroutines.flow.StateFlowImpl.compareAndSet(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('expect' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0005  (LINE:321)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: SGET  (r0 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL kotlinx.coroutines.internal.Symbol \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('update' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL kotlinx.coroutines.internal.Symbol \l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = (r2 I:kotlinx.coroutines.flow.StateFlowImpl), (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: DIRECT call: kotlinx.coroutines.flow.StateFlowImpl.updateState(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('update' java.lang.Object)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('expect' java.lang.Object)]) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.StateFlowImpl.compareAndSet((r2 'this' I:kotlinx.coroutines.flow.StateFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:T A[D('expect' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[D('update' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000b \-\> B:18:0x000c, CROSS_EDGE: B:14:0x0005 \-\> B:15:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;TT;)Z\lDebug Info:\l  \-1 \-0x0010: r3 'expect' Ljava\/lang\/Object;\l  \-1 \-0x0010: r4 'update' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.MutableStateFlow.compareAndSet(T, T):boolean]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_17 -> Node_18;
Node_14 -> Node_15;
}

