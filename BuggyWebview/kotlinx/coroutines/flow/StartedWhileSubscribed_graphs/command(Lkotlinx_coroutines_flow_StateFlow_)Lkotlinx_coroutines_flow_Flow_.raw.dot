digraph "CFG forkotlinx.coroutines.flow.StartedWhileSubscribed.command(Lkotlinx\/coroutines\/flow\/StateFlow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('subscriptionCount' kotlinx.coroutines.flow.StateFlow)])  (LINE:175)\l0x0001: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l0x0003: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.StartedWhileSubscribed$command$1) =  kotlinx.coroutines.flow.StartedWhileSubscribed$command$1  (LINE:176)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.StartedWhileSubscribed$command$1)\l  (r3 I:kotlinx.coroutines.flow.StartedWhileSubscribed)\l  (r2 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.StartedWhileSubscribed$command$1.\<init\>(kotlinx.coroutines.flow.StartedWhileSubscribed, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.StartedWhileSubscribed, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.StartedWhileSubscribed$command$1\>):void (m)]\l0x0009: CHECK_CAST (r1 I:kotlin.jvm.functions.Function3) = (kotlin.jvm.functions.Function3) (r1 I:??[OBJECT, ARRAY]) \l0x000b: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = (r0 I:kotlinx.coroutines.flow.Flow), (r1 I:kotlin.jvm.functions.Function3) type: STATIC call: kotlinx.coroutines.flow.FlowKt.transformLatest(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3):kotlinx.coroutines.flow.Flow A[MD:\<T, R\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<R\> (m)]\l0x000f: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.StartedWhileSubscribed$command$2) =  kotlinx.coroutines.flow.StartedWhileSubscribed$command$2  (LINE:188)\l0x0011: INVOKE  (r1 I:kotlinx.coroutines.flow.StartedWhileSubscribed$command$2), (r2 I:kotlin.coroutines.Continuation) type: DIRECT call: kotlinx.coroutines.flow.StartedWhileSubscribed$command$2.\<init\>(kotlin.coroutines.Continuation):void A[MD:(kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.StartedWhileSubscribed$command$2\>):void (m)]\l0x0014: CHECK_CAST (r1 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r1 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = (r0 I:kotlinx.coroutines.flow.Flow), (r1 I:kotlin.jvm.functions.Function2) type: STATIC call: kotlinx.coroutines.flow.FlowKt.dropWhile(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function2):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super java.lang.Boolean\>, ? extends java.lang.Object\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l0x001a: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = (r0 I:kotlinx.coroutines.flow.Flow) type: STATIC call: kotlinx.coroutines.flow.FlowKt.distinctUntilChanged(kotlinx.coroutines.flow.Flow):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>):kotlinx.coroutines.flow.Flow\<T\> (m)] (LINE:189)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|RETURN\l|0x001e: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<kotlinx.coroutines.flow.SharingCommand\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.flow.Flow\<kotlinx.coroutines.flow.SharingCommand\> kotlinx.coroutines.flow.StartedWhileSubscribed.command((r3 'this' I:kotlinx.coroutines.flow.StartedWhileSubscribed A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.flow.StateFlow\<java.lang.Integer\> A[D('subscriptionCount' kotlinx.coroutines.flow.StateFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001e: r4 'subscriptionCount' Lkotlinx\/coroutines\/flow\/StateFlow;\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/StateFlow\<Ljava\/lang\/Integer;\>;)Lkotlinx\/coroutines\/flow\/Flow\<Lkotlinx\/coroutines\/flow\/SharingCommand;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.SharingStarted.command(kotlinx.coroutines.flow.StateFlow\<java.lang.Integer\>):kotlinx.coroutines.flow.Flow\<kotlinx.coroutines.flow.SharingCommand\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

