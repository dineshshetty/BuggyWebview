digraph "CFG forkotlinx.coroutines.flow.StartedWhileSubscribed.\<init\>(JJ)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|r6.stopTimeout = r7\lr6.replayExpiration = r9\lr0 = true\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|if ((r7 \> 0 ? 1 : (r7 == 0 ? 0 : \-1)) \< 0) goto L16\l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|r4 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|PHI: r4 \l  PHI: (r4v2 boolean) = (r4v1 boolean), (r4v4 boolean) binds: [B:23:0x0012, B:22:0x0010] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|if (r4 == false) goto L14\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017}"];
Node_27 [shape=record,label="{27\:\ 0x0019|if ((r9 \> 0 ? 1 : (r9 == 0 ? 0 : \-1)) \< 0) goto L8\l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|r0 = false\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v0 boolean), (r0v8 boolean) binds: [B:27:0x0019, B:29:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L12\l}"];
Node_31 [shape=record,label="{31\:\ 0x0020|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0021|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"replayExpiration(\")\lr1.append(r9)\lr1.append(\" ms) cannot be negative\")\l}"];
Node_33 [shape=record,label="{33\:\ 0x003f|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_34 [shape=record,label="{34\:\ 0x0040|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"stopTimeout(\")\lr1.append(r7)\lr1.append(\" ms) cannot be negative\")\l}"];
Node_35 [shape=record,label="{35\:\ 0x005e|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|r4 = false\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.StartedWhileSubscribed.\<init\>((r6v0 'this' kotlinx.coroutines.flow.StartedWhileSubscribed A[IMMUTABLE_TYPE, THIS]), (r7v0 'stopTimeout' long A[D('stopTimeout' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'replayExpiration' long A[D('replayExpiration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x003f \-\> B:19:?, CROSS_EDGE: B:27:0x0019 \-\> B:30:0x001d, CROSS_EDGE: B:35:0x005e \-\> B:19:?, CROSS_EDGE: B:23:0x0012 \-\> B:24:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_34;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_30[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_23 -> Node_24;
}

