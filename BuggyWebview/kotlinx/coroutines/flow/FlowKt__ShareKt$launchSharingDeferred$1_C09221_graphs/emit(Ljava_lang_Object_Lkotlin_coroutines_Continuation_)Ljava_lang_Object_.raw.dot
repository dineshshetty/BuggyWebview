digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.1.emit(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.jvm.internal.Ref$ObjectRef\<kotlinx.coroutines.flow.MutableStateFlow\<T\>\>) = (r10 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1) kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.1.$state kotlin.jvm.internal.Ref$ObjectRef  (LINE:341)\l0x0002: IGET  (r0 I:T) = (r0 I:kotlin.jvm.internal.Ref$ObjectRef) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object \l0x0004: CHECK_CAST (r0 I:kotlinx.coroutines.flow.MutableStateFlow) = (kotlinx.coroutines.flow.MutableStateFlow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000a \l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0037 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|0x0012: IGET  (r0 I:kotlinx.coroutines.CoroutineScope) = (r10 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1) kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.1.$$this$launch kotlinx.coroutines.CoroutineScope \l0x0014: IGET  (r1 I:kotlin.jvm.internal.Ref$ObjectRef\<kotlinx.coroutines.flow.MutableStateFlow\<T\>\>) = (r10 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1) kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.1.$state kotlin.jvm.internal.Ref$ObjectRef \l0x0016: IGET  (r2 I:kotlinx.coroutines.CompletableDeferred\<kotlinx.coroutines.flow.StateFlow\<T\>\>) = (r10 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1) kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.1.$result kotlinx.coroutines.CompletableDeferred \l0x0018: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: INVOKE  (r4 I:kotlinx.coroutines.flow.MutableStateFlow) = (r11 I:java.lang.Object A[D('value' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.MutableStateFlow(java.lang.Object):kotlinx.coroutines.flow.MutableStateFlow A[MD:\<T\>:(T):kotlinx.coroutines.flow.MutableStateFlow\<T\> (m)] (LINE:342)\l0x001d: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x001e: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: NEW_INSTANCE  (r7 I:kotlinx.coroutines.flow.ReadonlyStateFlow) =  kotlinx.coroutines.flow.ReadonlyStateFlow  (LINE:343)\l0x0021: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.flow.MutableStateFlow)]) \l0x0022: CHECK_CAST (r8 I:kotlinx.coroutines.flow.StateFlow) = (kotlinx.coroutines.flow.StateFlow) (r8 I:??[OBJECT, ARRAY]) \l0x0024: INVOKE  (r9 I:kotlin.coroutines.CoroutineContext) = (r0 I:kotlinx.coroutines.CoroutineScope A[D('$this$emit_u24lambda_u2d2' kotlinx.coroutines.CoroutineScope)]) type: INTERFACE call: kotlinx.coroutines.CoroutineScope.getCoroutineContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)]\l0x0028: INVOKE  (r9 I:kotlinx.coroutines.Job) = (r9 I:kotlin.coroutines.CoroutineContext) type: STATIC call: kotlinx.coroutines.JobKt.getJob(kotlin.coroutines.CoroutineContext):kotlinx.coroutines.Job A[MD:(kotlin.coroutines.CoroutineContext):kotlinx.coroutines.Job (m)]\l0x002c: INVOKE  \l  (r7 I:kotlinx.coroutines.flow.ReadonlyStateFlow)\l  (r8 I:kotlinx.coroutines.flow.StateFlow)\l  (r9 I:kotlinx.coroutines.Job)\l type: DIRECT call: kotlinx.coroutines.flow.ReadonlyStateFlow.\<init\>(kotlinx.coroutines.flow.StateFlow, kotlinx.coroutines.Job):void A[MD:(kotlinx.coroutines.flow.StateFlow\<? extends T\>, kotlinx.coroutines.Job):void (m)]\l0x002f: INVOKE  (r2 I:kotlinx.coroutines.CompletableDeferred), (r7 I:java.lang.Object) type: INTERFACE call: kotlinx.coroutines.CompletableDeferred.complete(java.lang.Object):boolean A[MD:(T):boolean (m)]\l0x0033: IPUT  (r4 I:T), (r1 I:kotlin.jvm.internal.Ref$ObjectRef) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object  (LINE:342)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0037|0x0037: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:346)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|RETURN\l|0x0039: RETURN  (r0 I:java.lang.Object) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:427)\l0x000b: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.MutableStateFlow A[D('it' kotlinx.coroutines.flow.MutableStateFlow)])\l  (r11 I:java.lang.Object A[D('value' java.lang.Object)])\l type: INTERFACE call: kotlinx.coroutines.flow.MutableStateFlow.setValue(java.lang.Object):void A[MD:(T):void (m)] (LINE:341)\l0x000e: SGET  (r0 I:kotlin.Unit A[D('it' kotlinx.coroutines.flow.MutableStateFlow)]) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.1.emit((r10 'this' I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1\<T\> A[IMMUTABLE_TYPE, THIS]), (r11 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0010 \-\> B:18:0x0037, CROSS_EDGE: B:15:0x000a \-\> B:16:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x000a\-0x000e: r0 'it' Lkotlinx\/coroutines\/flow\/MutableStateFlow;\l  0x000b\-0x000e: r1 '$i$a$\-let\-FlowKt__ShareKt$launchSharingDeferred$1$1$1' I\l  0x001e\-0x0033: r5 'it' Lkotlinx\/coroutines\/flow\/MutableStateFlow;\l  0x001f\-0x0033: r6 '$i$a$\-also\-FlowKt__ShareKt$launchSharingDeferred$1$1$2$1' I\l  0x0014\-0x0036: r0 '$this$emit_u24lambda_u2d2' Lkotlinx\/coroutines\/CoroutineScope;\l  0x0019\-0x0036: r3 '$i$a$\-run\-FlowKt__ShareKt$launchSharingDeferred$1$1$2' I\l  \-1 \-0x0039: r11 'value' Ljava\/lang\/Object;\l  \-1 \-0x0039: r12 '$completion' Lkotlin\/coroutines\/Continuation;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.FlowCollector.emit(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

