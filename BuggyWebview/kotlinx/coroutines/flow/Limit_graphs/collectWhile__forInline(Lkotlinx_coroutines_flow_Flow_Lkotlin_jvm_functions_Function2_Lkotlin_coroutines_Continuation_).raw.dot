digraph "CFG forkotlinx.coroutines.flow.FlowKt__LimitKt.collectWhile$$forInline(Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/jvm\/functions\/Function2;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1) =  kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1  (LINE:127)\l0x0003: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1)\l  (r5 I:kotlin.jvm.functions.Function2 A[D('predicate' kotlin.jvm.functions.Function2)])\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1.\<init\>(kotlin.jvm.functions.Function2):void A[MD:(kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super java.lang.Boolean\>, ? extends java.lang.Object\>):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{AbortFlowException \-\> 0x0016, blocks: (B:14:0x0007), top: B:20:0x0007 \}\lCatch: AbortFlowException \-\> 0x0016\l|0x0007: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('collector' kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1)]) A[TRY_ENTER] (LINE:137)\l0x0008: CHECK_CAST (r2 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r2 I:??[OBJECT, ARRAY]) A[Catch: AbortFlowException \-\> 0x0016]\l0x000a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[Catch: AbortFlowException \-\> 0x0016, MD:(int):void (m)]\l0x000e: INVOKE  \l  (r4 I:kotlinx.coroutines.flow.Flow A[D('$this$collectWhile' kotlinx.coroutines.flow.Flow)])\l  (r2 I:kotlinx.coroutines.flow.FlowCollector)\l  (r6 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: INTERFACE call: kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation):java.lang.Object A[Catch: AbortFlowException \-\> 0x0016, MD:(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l0x0011: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0012: INVOKE  (r2 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[Catch: AbortFlowException \-\> 0x0016, MD:(int):void (m), TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|0x001d: SGET  (r2 I:kotlin.Unit A[D('e' kotlinx.coroutines.flow.internal.AbortFlowException)]) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:141)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|RETURN\l|0x001f: RETURN  (r2 I:java.lang.Object) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|ExcHandler: AbortFlowException \-\> 0x0016\l|0x0016: MOVE_EXCEPTION  (r2 I:kotlinx.coroutines.flow.internal.AbortFlowException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: AbortFlowException \-\> 0x0016] (LINE:138)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|0x0017: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('collector' kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1)])  (LINE:139)\l0x0018: CHECK_CAST (r3 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r3 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  \l  (r2 I:kotlinx.coroutines.flow.internal.AbortFlowException A[D('e' kotlinx.coroutines.flow.internal.AbortFlowException)])\l  (r3 I:kotlinx.coroutines.flow.FlowCollector)\l type: STATIC call: kotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkOwnership(kotlinx.coroutines.flow.internal.AbortFlowException, kotlinx.coroutines.flow.FlowCollector):void A[MD:(kotlinx.coroutines.flow.internal.AbortFlowException, kotlinx.coroutines.flow.FlowCollector\<?\>):void (m)]\l}"];
MethodNode[shape=record,label="{private static final java.lang.Object kotlinx.coroutines.flow.FlowKt__LimitKt.collectWhile$$forInline((r4 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$collectWhile' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super java.lang.Boolean\>, ? extends java.lang.Object\> A[D('predicate' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0017 \-\> B:18:0x001d, CROSS_EDGE: B:20:0x0007 \-\> B:16:0x0016\lINLINE_NOT_NEEDED\lTryCatch #0 \{AbortFlowException \-\> 0x0016, blocks: (B:14:0x0007), top: B:20:0x0007 \}\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlin\/jvm\/functions\/Function2\<\-TT;\-Lkotlin\/coroutines\/Continuation\<\-Ljava\/lang\/Boolean;\>;+Ljava\/lang\/Object;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x0017\-0x001d: r2 'e' Lkotlinx\/coroutines\/flow\/internal\/AbortFlowException;\l  0x0001\-0x001f: r0 '$i$f$collectWhile' I\l  0x0006\-0x001f: r1 'collector' Lkotlinx\/coroutines\/flow\/FlowKt__LimitKt$collectWhile$collector$1;\l  \-1 \-0x001f: r4 '$this$collectWhile' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x001f: r5 'predicate' Lkotlin\/jvm\/functions\/Function2;\l  \-1 \-0x001f: r6 '$completion' Lkotlin\/coroutines\/Continuation;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_16;
Node_14 -> Node_18;
Node_14 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_21 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

