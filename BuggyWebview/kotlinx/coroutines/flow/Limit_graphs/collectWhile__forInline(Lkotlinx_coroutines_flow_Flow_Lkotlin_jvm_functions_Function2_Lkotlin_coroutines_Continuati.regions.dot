digraph "CFG forkotlinx.coroutines.flow.FlowKt__LimitKt.collectWhile$$forInline(Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/jvm\/functions\/Function2;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1954588844 {
label = "R(3:1|(1:3)|5)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1 kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1 r1 = new kotlinx.coroutines.flow.FlowKt__LimitKt$collectWhile$collector$1(r5)\l}"];
subgraph cluster_TryCatchRegion_371214484 {
label = "Try: R(1:3) catches: R(2:8|9)";
node [shape=record,color=blue];
subgraph cluster_Region_612523201 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0007|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{AbortFlowException \-\> 0x0016, blocks: (B:14:0x0007), top: B:20:0x0007 \}\lCatch: AbortFlowException \-\> 0x0016\l|kotlin.jvm.internal.InlineMarker.mark(0)     \/\/ Catch: kotlinx.coroutines.flow.internal.FlowExceptions \-\> L16\lr4.collect(r1, r6)     \/\/ Catch: kotlinx.coroutines.flow.internal.FlowExceptions \-\> L16\lkotlin.jvm.internal.InlineMarker.mark(1)     \/\/ Catch: kotlinx.coroutines.flow.internal.FlowExceptions \-\> L16\l}"];
}
subgraph cluster_Region_1395162788 {
label = "R(2:8|9) | ExcHandler: AbortFlowException \-\> 0x0016\l";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0016|ExcHandler: AbortFlowException \-\> 0x0016\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|kotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkOwnership(r2, r1)\l}"];
}
}
Node_19 [shape=record,label="{19\:\ 0x001f|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
}
subgraph cluster_Region_1395162788 {
label = "R(2:8|9) | ExcHandler: AbortFlowException \-\> 0x0016\l";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0016|ExcHandler: AbortFlowException \-\> 0x0016\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|kotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkOwnership(r2, r1)\l}"];
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x001d}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
MethodNode[shape=record,label="{private static final java.lang.Object kotlinx.coroutines.flow.FlowKt__LimitKt.collectWhile$$forInline((r4v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$collectWhile' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super java.lang.Boolean\>, ? extends java.lang.Object\> A[D('predicate' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0017 \-\> B:18:0x001d, CROSS_EDGE: B:20:0x0007 \-\> B:16:0x0016\lINLINE_NOT_NEEDED\lTryCatch #0 \{AbortFlowException \-\> 0x0016, blocks: (B:14:0x0007), top: B:20:0x0007 \}\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlin\/jvm\/functions\/Function2\<\-TT;\-Lkotlin\/coroutines\/Continuation\<\-Ljava\/lang\/Boolean;\>;+Ljava\/lang\/Object;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_11;Node_13 -> Node_20;
Node_14 -> Node_18;
Node_14 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_11 -> Node_13;
Node_20 -> Node_14;
Node_20 -> Node_16;
Node_18 -> Node_19;
Node_21 -> Node_16;
}

