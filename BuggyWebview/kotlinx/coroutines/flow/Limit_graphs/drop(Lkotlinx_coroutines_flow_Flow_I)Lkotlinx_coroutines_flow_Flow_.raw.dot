digraph "CFG forkotlinx.coroutines.flow.FlowKt__LimitKt.drop(Lkotlinx\/coroutines\/flow\/Flow;I)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IF  (r4 I:??[int, byte, short, char] A[D('count' int)]) \< (0 ??[int, byte, short, char])  \-\> B:14:0x0004  (LINE:21)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0010 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:22)\l0x0008: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1) =  kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1  (LINE:144)\l0x000a: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1)\l  (r3 I:kotlinx.coroutines.flow.Flow A[D('$this$drop' kotlinx.coroutines.flow.Flow)])\l  (r4 I:int A[D('count' int)])\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__LimitKt$drop$$inlined$unsafeFlow$1.\<init\>(kotlinx.coroutines.flow.Flow, int):void A[MD:(kotlinx.coroutines.flow.Flow, int):void (m)]\l0x000d: CHECK_CAST (r1 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:kotlinx.coroutines.flow.Flow\<T\>)  (LINE:22)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:143)\l0x0011: INVOKE  (r1 I:java.lang.Integer) = (r4 I:int A[D('count' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:21)\l0x0015: CONST_STR  (r2 I:java.lang.String) =  \"Drop count should be non\-negative, but had \" \l0x0017: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-FlowKt__LimitKt$drop$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x001b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0021: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|0x0024: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__LimitKt.drop((r3 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$drop' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0024 \-\> B:11:?, CROSS_EDGE: B:14:0x0004 \-\> B:15:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x000f: r0 '$i$f$unsafeFlow' I\l  0x0011\-0x001b: r0 '$i$a$\-require\-FlowKt__LimitKt$drop$1' I\l  \-1 \-0x0024: r3 '$this$drop' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0024: r4 'count' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;I)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_14 -> Node_15;
}

