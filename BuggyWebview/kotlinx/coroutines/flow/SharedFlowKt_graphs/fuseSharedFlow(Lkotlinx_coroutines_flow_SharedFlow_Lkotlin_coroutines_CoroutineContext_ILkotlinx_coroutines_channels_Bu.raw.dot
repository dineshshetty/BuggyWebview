digraph "CFG forkotlinx.coroutines.flow.SharedFlowKt.fuseSharedFlow(Lkotlinx\/coroutines\/flow\/SharedFlow;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0005  (LINE:727)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|0x0003: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x000d \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl) =  kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl  (LINE:731)\l0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$fuseSharedFlow' kotlinx.coroutines.flow.SharedFlow)]) \l0x0010: CHECK_CAST (r1 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r1 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl)\l  (r1 I:kotlinx.coroutines.flow.Flow)\l  (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r4 I:int A[D('capacity' int)])\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)])\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.\<init\>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void (m)]\l0x0015: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|RETURN\l|0x0017: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: SGET  (r0 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|0x0007: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x000d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$fuseSharedFlow' kotlinx.coroutines.flow.SharedFlow)])  (LINE:728)\l0x000a: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.SharedFlowKt.fuseSharedFlow((r2 I:kotlinx.coroutines.flow.SharedFlow\<? extends T\> A[D('$this$fuseSharedFlow' kotlinx.coroutines.flow.SharedFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0017 \-\> B:12:?, CROSS_EDGE: B:15:0x0003 \-\> B:20:0x000d, CROSS_EDGE: B:13:0x0000 \-\> B:16:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0017: r2 '$this$fuseSharedFlow' Lkotlinx\/coroutines\/flow\/SharedFlow;\l  \-1 \-0x0017: r3 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0017: r4 'capacity' I\l  \-1 \-0x0017: r5 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/SharedFlow\<+TT;\>;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
}

