digraph "CFG forkotlinx.coroutines.flow.SharedFlowKt.MutableSharedFlow$default(IILkotlinx\/coroutines\/channels\/BufferOverflow;ILjava\/lang\/Object;)Lkotlinx\/coroutines\/flow\/MutableSharedFlow;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:264)\l0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|0x0003: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0006 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:265)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:264)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|0x0008: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000b \l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|0x000a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:266)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|0x000b: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:264)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|0x000d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0011 \l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|0x000f: SGET  (r3 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow  (LINE:267)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0011|0x0011: INVOKE  (r1 I:kotlinx.coroutines.flow.MutableSharedFlow) = (r1 I:int), (r2 I:int), (r3 I:kotlinx.coroutines.channels.BufferOverflow) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.MutableSharedFlow(int, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.MutableSharedFlow A[MD:\<T\>:(int, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.MutableSharedFlow\<T\> (m)] (LINE:264)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|RETURN\l|0x0015: RETURN  (r1 I:kotlinx.coroutines.flow.MutableSharedFlow) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlinx.coroutines.flow.MutableSharedFlow kotlinx.coroutines.flow.SharedFlowKt.MutableSharedFlow$default((r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlinx.coroutines.channels.BufferOverflow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:22:0x000d \-\> B:24:0x0011, CROSS_EDGE: B:19:0x0008 \-\> B:21:0x000b, CROSS_EDGE: B:16:0x0003 \-\> B:18:0x0006\lINLINE_NOT_NEEDED\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [264=4]\}\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

