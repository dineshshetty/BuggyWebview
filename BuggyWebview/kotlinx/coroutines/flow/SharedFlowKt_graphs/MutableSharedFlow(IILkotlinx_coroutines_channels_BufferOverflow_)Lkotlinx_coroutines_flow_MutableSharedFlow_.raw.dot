digraph "CFG forkotlinx.coroutines.flow.SharedFlowKt.MutableSharedFlow(IILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/MutableSharedFlow;" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:269)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0002|0x0002: IF  (r3 I:??[int, byte, short, char] A[D('replay' int)]) \< (0 ??[int, byte, short, char])  \-\> B:35:0x0006 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0004|0x0004: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0053 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0009|0x0009: IF  (r4 I:??[int, byte, short, char] A[D('extraBufferCapacity' int)]) \< (0 ??[int, byte, short, char])  \-\> B:39:0x000d  (LINE:270)\l}"];
Node_38 [shape=record,label="{38\:\ 0x000b|0x000b: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x003e \l}"];
Node_41 [shape=record,label="{41\:\ 0x0010|0x0010: IF  (r3 I:??[int, byte, short, char] A[D('replay' int)]) \> (0 ??[int, byte, short, char])  \-\> B:47:0x001a  (LINE:271)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0012|0x0012: IF  (r4 I:??[int, byte, short, char] A[D('extraBufferCapacity' int)]) \> (0 ??[int, byte, short, char])  \-\> B:47:0x001a \l}"];
Node_43 [shape=record,label="{43\:\ 0x0014|0x0014: SGET  (r2 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow \l}"];
Node_44 [shape=record,label="{44\:\ 0x0016|0x0016: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0019 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0019|0x0019: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x002d \l}"];
Node_48 [shape=record,label="{48\:\ 0x001c|0x001c: ARITH  (r0 I:int) = (r3 I:int A[D('replay' int)]) + (r4 I:int A[D('extraBufferCapacity' int)])  (LINE:274)\l}"];
Node_49 [shape=record,label="{49\:\ 0x001e|0x001e: IF  (r0 I:??[int, byte, short, char] A[D('bufferCapacity0' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:51:0x0024  (LINE:275)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0020|0x0020: CONST  (r1 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0025|0x0025: NEW_INSTANCE  (r2 I:kotlinx.coroutines.flow.SharedFlowImpl) =  kotlinx.coroutines.flow.SharedFlowImpl  (LINE:276)\l0x0027: INVOKE  \l  (r2 I:kotlinx.coroutines.flow.SharedFlowImpl)\l  (r3 I:int A[D('replay' int)])\l  (r1 I:int A[D('bufferCapacity' int)])\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)])\l type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.\<init\>(int, int, kotlinx.coroutines.channels.BufferOverflow):void A[MD:(int, int, kotlinx.coroutines.channels.BufferOverflow):void (m)]\l0x002a: CHECK_CAST (r2 I:kotlinx.coroutines.flow.MutableSharedFlow) = (kotlinx.coroutines.flow.MutableSharedFlow) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x002c|RETURN\l|0x002c: RETURN  (r2 I:kotlinx.coroutines.flow.MutableSharedFlow\<T\>) \l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_51 [shape=record,label="{51\:\ 0x0024|0x0024: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferCapacity0' int)]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x002d|0x002d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bufferCapacity0' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:271)\l0x002e: CONST_STR  (r1 I:java.lang.String) =  \"replay or extraBufferCapacity must be positive with non\-default onBufferOverflow strategy \"  (LINE:272)\l0x0030: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SharedFlowKt$MutableSharedFlow$3' int)]) = (r1 I:java.lang.String), (r5 I:java.lang.Object A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0034: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:271)\l0x0036: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003a: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x003d|0x003d: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_56 [shape=record,label="{56\:\ 0x003e|0x003e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:734)\l0x003f: INVOKE  (r1 I:java.lang.Integer) = (r4 I:int A[D('extraBufferCapacity' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:270)\l0x0043: CONST_STR  (r2 I:java.lang.String) =  \"extraBufferCapacity cannot be negative, but was \" \l0x0045: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SharedFlowKt$MutableSharedFlow$2' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0049: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004b: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004f: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x0052|0x0052: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x000d|0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0053|0x0053: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:734)\l0x0054: INVOKE  (r1 I:java.lang.Integer) = (r3 I:int A[D('replay' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:269)\l0x0058: CONST_STR  (r2 I:java.lang.String) =  \"replay cannot be negative, but was \" \l0x005a: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SharedFlowKt$MutableSharedFlow$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x005e: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0060: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0064: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0067|0x0067: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0006|0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.MutableSharedFlow\<T\> kotlinx.coroutines.flow.SharedFlowKt.MutableSharedFlow((r3 I:int A[D('replay' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('extraBufferCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:51:0x0024 \-\> B:52:0x0025, CROSS_EDGE: B:55:0x003d \-\> B:31:?, CROSS_EDGE: B:44:0x0016 \-\> B:47:0x001a, CROSS_EDGE: B:42:0x0012 \-\> B:47:0x001a, CROSS_EDGE: B:41:0x0010 \-\> B:47:0x001a, CROSS_EDGE: B:57:0x0052 \-\> B:31:?, CROSS_EDGE: B:39:0x000d \-\> B:40:0x000e, CROSS_EDGE: B:59:0x0067 \-\> B:31:?, CROSS_EDGE: B:35:0x0006 \-\> B:36:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001e\-0x002d: r0 'bufferCapacity0' I\l  0x0025\-0x002d: r1 'bufferCapacity' I\l  0x002e\-0x0034: r0 '$i$a$\-require\-SharedFlowKt$MutableSharedFlow$3' I\l  0x003f\-0x0049: r0 '$i$a$\-require\-SharedFlowKt$MutableSharedFlow$2' I\l  0x0054\-0x005e: r0 '$i$a$\-require\-SharedFlowKt$MutableSharedFlow$1' I\l  \-1 \-0x0067: r3 'replay' I\l  \-1 \-0x0067: r4 'extraBufferCapacity' I\l  \-1 \-0x0067: r5 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(IILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/MutableSharedFlow\<TT;\>;\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_58;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_56;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_47;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_47;
Node_43 -> Node_44;
Node_44 -> Node_46;
Node_44 -> Node_47[style=dashed];
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_54;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_31;
Node_51 -> Node_52;
Node_54 -> Node_55;
Node_55 -> Node_31;
Node_56 -> Node_57;
Node_57 -> Node_31;
Node_39 -> Node_40;
Node_58 -> Node_59;
Node_59 -> Node_31;
Node_35 -> Node_36;
}

