digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.dropChannelOperators()Lkotlinx\/coroutines\/flow\/Flow;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r8 I:kotlinx.coroutines.flow.ChannelAsFlow) =  kotlinx.coroutines.flow.ChannelAsFlow  (LINE:138)\l0x0002: IGET  (r1 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) = (r9 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.channel kotlinx.coroutines.channels.ReceiveChannel \l0x0004: IGET  (r2 I:boolean) = (r9 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.consume boolean \l0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: CONST  (r6 I:??[int, float, short, byte, char]) = (28 ??[int, float, short, byte, char]) \l0x000b: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.ChannelAsFlow)\l  (r1 I:kotlinx.coroutines.channels.ReceiveChannel)\l  (r2 I:boolean)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:int)\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r6 I:int)\l  (r7 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlinx.coroutines.flow.ChannelAsFlow.\<init\>(kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x0010: CHECK_CAST (r8 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r8 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|RETURN\l|0x0012: RETURN  (r8 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.ChannelAsFlow.dropChannelOperators((r9 'this' I:kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lTYPE_VARS: [T]\lSIGNATURE: ()Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.dropChannelOperators():kotlinx.coroutines.flow.Flow\<T\>]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

