digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.collectTo(Lkotlinx\/coroutines\/channels\/ProducerScope;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.internal.SendingCollector) =  kotlinx.coroutines.flow.internal.SendingCollector  (LINE:141)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('scope' kotlinx.coroutines.channels.ProducerScope)]) \l0x0003: CHECK_CAST (r1 I:kotlinx.coroutines.channels.SendChannel) = (kotlinx.coroutines.channels.SendChannel) (r1 I:??[OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:kotlinx.coroutines.flow.internal.SendingCollector), (r1 I:kotlinx.coroutines.channels.SendChannel) type: DIRECT call: kotlinx.coroutines.flow.internal.SendingCollector.\<init\>(kotlinx.coroutines.channels.SendChannel):void A[MD:(kotlinx.coroutines.channels.SendChannel\<? super T\>):void (m)]\l0x0008: CHECK_CAST (r0 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r0 I:??[OBJECT, ARRAY]) \l0x000a: IGET  (r1 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) = (r3 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.channel kotlinx.coroutines.channels.ReceiveChannel \l0x000c: IGET  (r2 I:boolean) = (r3 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.consume boolean \l0x000e: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.flow.FlowCollector)\l  (r1 I:kotlinx.coroutines.channels.ReceiveChannel)\l  (r2 I:boolean)\l  (r5 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: STATIC call: kotlinx.coroutines.flow.FlowKt__ChannelsKt.access$emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation):java.lang.Object (m)]\l0x0012: INVOKE  (r1 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|RETURN\l|0x001b: RETURN  (r0 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{protected java.lang.Object kotlinx.coroutines.flow.ChannelAsFlow.collectTo((r3 'this' I:kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.channels.ProducerScope\<? super T\> A[D('scope' kotlinx.coroutines.channels.ProducerScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x001b \-\> B:1:?\lDebug Info:\l  \-1 \-0x001b: r4 'scope' Lkotlinx\/coroutines\/channels\/ProducerScope;\l  \-1 \-0x001b: r5 '$completion' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/ProducerScope\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.collectTo(kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

