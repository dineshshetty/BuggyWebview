digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.produceImpl(Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|markConsumed()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2.capacity != (\-3)) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return r2.channel\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b}"];
Node_6 [shape=record,label="{6\:\ 0x000f|RETURN\lORIG_RETURN\l|return super.produceImpl(r3)\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveChannel\<T\> kotlinx.coroutines.flow.ChannelAsFlow.produceImpl((r2v0 'this' kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'scope' kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000b \-\> B:6:0x000f\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel\<T\>]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

