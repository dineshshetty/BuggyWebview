digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1839661877 {
label = "R(1:(2:(2:3|4)|(2:9|10))) | DECL_VAR: java.lang.Object null\l";
node [shape=record,color=blue];
subgraph cluster_Region_1383773674 {
label = "R(2:(2:3|4)|(2:9|10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_171273183 {
label = "IF [B:3:0x0003] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r2.capacity == (\-3)) goto L3\l}"];
subgraph cluster_Region_97881958 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|markConsumed()\ljava.lang.Object r0 = kotlinx.coroutines.flow.FlowKt__ChannelsKt.emitAllImpl$FlowKt__ChannelsKt(r3, r2.channel, r2.consume, r4)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|return r0 == kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED() ? r0 : kotlin.Unit.INSTANCE\l}"];
}
}
subgraph cluster_Region_1460481074 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001a|java.lang.Object java.lang.Object r0 = super.collect(r3, r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|RETURN\l|return r0 == kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED() ? r0 : kotlin.Unit.INSTANCE\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0016}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0017}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019|ORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0024}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0025}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.ChannelAsFlow.collect((r2v0 'this' kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 kotlinx.coroutines.flow.FlowCollector\<? super T\> A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0019 \-\> B:1:?, CROSS_EDGE: B:11:0x0024 \-\> B:1:?, CROSS_EDGE: B:12:0x0025 \-\> B:8:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

