digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.produceImpl(Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) type: DIRECT call: kotlinx.coroutines.flow.ChannelAsFlow.markConsumed():void A[MD:():void (m)] (LINE:144)\l0x0003: IGET  (r0 I:int) = (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.capacity int  (LINE:145)\l0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) = (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.channel kotlinx.coroutines.channels.ReceiveChannel  (LINE:146)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) A[SYNTHETIC] (LINE:145)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: INVOKE  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) = \l  (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow)\l  (r3 I:kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope)])\l type: SUPER call: kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel A[MD:(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel\<T\> (m)] (LINE:148)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>)  (LINE:145)\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveChannel\<T\> kotlinx.coroutines.flow.ChannelAsFlow.produceImpl((r2 'this' I:kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000b \-\> B:6:0x000f\lDebug Info:\l  \-1 \-0x000f: r3 'scope' Lkotlinx\/coroutines\/CoroutineScope;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel\<T\>]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

