digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.markConsumed()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.consume boolean  (LINE:129)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0020 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.flow.ChannelAsFlow.consumed$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:130)\l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: INVOKE  (r0 I:int) = (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r2 I:java.lang.Object), (r1 I:int) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(java.lang.Object, int):int A[MD:(T, int):int (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0012 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:202)\l0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('$i$a$\-check\-ChannelAsFlow$markConsumed$1' int)]) =  java.lang.IllegalStateException \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"ReceiveChannel.consumeAsFlow can be collected just once\" \l0x0018: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001c: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN   A[SYNTHETIC] (LINE:132)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN    (LINE:132)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.ChannelAsFlow.markConsumed((r2 'this' I:kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0020 \-\> B:1:?, CROSS_EDGE: B:5:0x000b \-\> B:8:0x000f, CROSS_EDGE: B:3:0x0002 \-\> B:12:0x0020\lDebug Info:\l  0x0013\-0x0014: r0 '$i$a$\-check\-ChannelAsFlow$markConsumed$1' I\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_13[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_13 -> Node_1;
Node_12 -> Node_1;
}

