digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.produceImpl(Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
subgraph cluster_Region_20832129 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|markConsumed()\l}"];
subgraph cluster_Region_544679914 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1409460817 {
label = "IF [B:3:0x0006] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2.capacity == (\-3)) goto L3\l}"];
subgraph cluster_Region_770593525 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return r2.channel\l}"];
}
}
subgraph cluster_Region_1119899934 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000f|RETURN\lORIG_RETURN\l|return super.produceImpl(r3)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000b}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveChannel\<T\> kotlinx.coroutines.flow.ChannelAsFlow.produceImpl((r2v0 'this' kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'scope' kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000b \-\> B:6:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel\<T\>]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_7 -> Node_1;
Node_6 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_7;
Node_5 -> Node_6;
}

