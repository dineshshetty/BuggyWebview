digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.markConsumed()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r2.consume == false) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|r1 = true\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (kotlinx.coroutines.flow.ChannelAsFlow.consumed$FU.getAndSet(r2, 1) != 0) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|r1 = false\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v4 boolean) binds: [B:5:0x000b, B:7:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L7\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012}"];
Node_11 [shape=record,label="{11\:\ 0x001f|throw new java.lang.IllegalStateException(\"ReceiveChannel.consumeAsFlow can be collected just once\".toString())\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.ChannelAsFlow.markConsumed((r2v0 'this' kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0020 \-\> B:1:?, CROSS_EDGE: B:5:0x000b \-\> B:8:0x000f, CROSS_EDGE: B:3:0x0002 \-\> B:12:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_13[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_13 -> Node_1;
Node_12 -> Node_1;
}

