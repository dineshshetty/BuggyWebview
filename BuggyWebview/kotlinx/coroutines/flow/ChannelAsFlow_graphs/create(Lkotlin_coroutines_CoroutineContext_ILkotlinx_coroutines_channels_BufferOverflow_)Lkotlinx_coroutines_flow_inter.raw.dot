digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.create(Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/internal\/ChannelFlow;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r6 I:kotlinx.coroutines.flow.ChannelAsFlow) =  kotlinx.coroutines.flow.ChannelAsFlow  (LINE:135)\l0x0002: IGET  (r1 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) = (r7 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.channel kotlinx.coroutines.channels.ReceiveChannel \l0x0004: IGET  (r2 I:boolean) = (r7 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.consume boolean \l0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0007: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('context' kotlin.coroutines.CoroutineContext)]) \l0x0008: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) \l0x0009: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) \l0x000a: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.ChannelAsFlow)\l  (r1 I:kotlinx.coroutines.channels.ReceiveChannel)\l  (r2 I:boolean)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:int)\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow)\l type: DIRECT call: kotlinx.coroutines.flow.ChannelAsFlow.\<init\>(kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void A[MD:(kotlinx.coroutines.channels.ReceiveChannel\<? extends T\>, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void (m)]\l0x000d: CHECK_CAST (r6 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|RETURN\l|0x000f: RETURN  (r6 I:kotlinx.coroutines.flow.internal.ChannelFlow\<T\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected kotlinx.coroutines.flow.internal.ChannelFlow\<T\> kotlinx.coroutines.flow.ChannelAsFlow.create((r7 'this' I:kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000f: r8 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x000f: r9 'capacity' I\l  \-1 \-0x000f: r10 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/internal\/ChannelFlow\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.internal.ChannelFlow\<T\>]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

