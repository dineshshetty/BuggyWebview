digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.collectTo(Lkotlinx\/coroutines\/channels\/ProducerScope;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object r0 = kotlinx.coroutines.flow.FlowKt__ChannelsKt.emitAllImpl$FlowKt__ChannelsKt(new kotlinx.coroutines.flow.internal.SendingCollector(r4), r3.channel, r3.consume, r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|if (r0 != kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019}"];
Node_6 [shape=record,label="{6\:\ 0x001b|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
MethodNode[shape=record,label="{protected java.lang.Object kotlinx.coroutines.flow.ChannelAsFlow.collectTo((r3v0 'this' kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 kotlinx.coroutines.channels.ProducerScope\<? super T\> A[D('scope' kotlinx.coroutines.channels.ProducerScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x001b \-\> B:1:?\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/ProducerScope\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.collectTo(kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

