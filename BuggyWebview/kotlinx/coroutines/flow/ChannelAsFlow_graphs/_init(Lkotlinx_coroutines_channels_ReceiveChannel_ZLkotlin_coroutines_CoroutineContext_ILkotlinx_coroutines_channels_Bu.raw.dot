digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.\<init\>(Lkotlinx\/coroutines\/channels\/ReceiveChannel;ZLkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r13 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:119)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r9 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:122)\l0x0006: CHECK_CAST (r9 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r9 I:??[OBJECT, ARRAY]) \l0x0008: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: ARITH  (r9 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: CONST  (r10 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char])  (LINE:123)\l0x0010: CONST  (r4 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: ARITH  (r9 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (16 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: SGET  (r11 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow  (LINE:124)\l0x0019: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x001d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x001e: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.ChannelAsFlow)\l  (r1 I:kotlinx.coroutines.channels.ReceiveChannel)\l  (r2 I:boolean)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:int)\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow)\l type: DIRECT call: kotlinx.coroutines.flow.ChannelAsFlow.\<init\>(kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void A[MD:(kotlinx.coroutines.channels.ReceiveChannel\<? extends T\>, boolean, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:161)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|0x001b: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY])  (LINE:119)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:119)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY])  (LINE:119)\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.flow.ChannelAsFlow.\<init\>((r6 'this' I:kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlinx.coroutines.channels.ReceiveChannel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.coroutines.CoroutineContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlinx.coroutines.channels.BufferOverflow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:13:0x001b \-\> B:14:0x001c, CROSS_EDGE: B:9:0x0012 \-\> B:10:0x0013, CROSS_EDGE: B:5:0x000a \-\> B:6:0x000b\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [119=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_13 -> Node_14;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

