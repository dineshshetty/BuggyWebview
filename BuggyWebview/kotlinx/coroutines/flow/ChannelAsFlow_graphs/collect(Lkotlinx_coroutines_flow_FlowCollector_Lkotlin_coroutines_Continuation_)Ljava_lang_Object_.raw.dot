digraph "CFG forkotlinx.coroutines.flow.ChannelAsFlow.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.capacity int  (LINE:152)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) type: DIRECT call: kotlinx.coroutines.flow.ChannelAsFlow.markConsumed():void A[MD:():void (m)] (LINE:153)\l0x0008: IGET  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) = (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.channel kotlinx.coroutines.channels.ReceiveChannel  (LINE:154)\l0x000a: IGET  (r1 I:boolean) = (r2 I:kotlinx.coroutines.flow.ChannelAsFlow) kotlinx.coroutines.flow.ChannelAsFlow.consume boolean \l0x000c: INVOKE  (r0 I:java.lang.Object) = \l  (r3 I:kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector)])\l  (r0 I:kotlinx.coroutines.channels.ReceiveChannel)\l  (r1 I:boolean)\l  (r4 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: STATIC call: kotlinx.coroutines.flow.FlowKt__ChannelsKt.access$emitAllImpl$FlowKt__ChannelsKt(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.channels.ReceiveChannel, boolean, kotlin.coroutines.Continuation):java.lang.Object (m)]\l0x0010: INVOKE  (r1 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|RETURN\l|0x0016: RETURN  (r0 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|RETURN\lORIG_RETURN\l|0x0019: RETURN  (r0 I:java.lang.Object)  (LINE:158)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow)\l  (r3 I:kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector)])\l  (r4 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: SUPER call: kotlinx.coroutines.flow.internal.ChannelFlow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)] (LINE:156)\l0x001e: INVOKE  (r1 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|RETURN\l|0x0024: RETURN  (r0 I:java.lang.Object) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|0x0025: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0019: RETURN  (r0 I:java.lang.Object) A[SYNTHETIC] (LINE:158)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.ChannelAsFlow.collect((r2 'this' I:kotlinx.coroutines.flow.ChannelAsFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.flow.FlowCollector\<? super T\> A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0019 \-\> B:1:?, CROSS_EDGE: B:11:0x0024 \-\> B:1:?, CROSS_EDGE: B:12:0x0025 \-\> B:8:0x0019\lDebug Info:\l  \-1 \-0x0027: r3 'collector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0027: r4 '$completion' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

