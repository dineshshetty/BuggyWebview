digraph "CFG forkotlinx.coroutines.flow.StateFlowKt.MutableStateFlow(Ljava\/lang\/Object;)Lkotlinx\/coroutines\/flow\/MutableStateFlow;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.StateFlowImpl) =  kotlinx.coroutines.flow.StateFlowImpl  (LINE:187)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0007 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.flow.internal.NullSurrogateKt.NULL kotlinx.coroutines.internal.Symbol \l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: INVOKE  (r0 I:kotlinx.coroutines.flow.StateFlowImpl), (r1 I:java.lang.Object) type: DIRECT call: kotlinx.coroutines.flow.StateFlowImpl.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x000b: CHECK_CAST (r0 I:kotlinx.coroutines.flow.MutableStateFlow) = (kotlinx.coroutines.flow.MutableStateFlow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:kotlinx.coroutines.flow.MutableStateFlow\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|0x0007: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('value' java.lang.Object)]) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.MutableStateFlow\<T\> kotlinx.coroutines.flow.StateFlowKt.MutableStateFlow((r2 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0007 \-\> B:14:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r2 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(TT;)Lkotlinx\/coroutines\/flow\/MutableStateFlow\<TT;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

