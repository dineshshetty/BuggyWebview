digraph "CFG forkotlinx.coroutines.flow.StateFlowKt.fuseStateFlow(Lkotlinx\/coroutines\/flow\/StateFlow;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|r1 = true\l}"];
Node_29 [shape=record,label="{29\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_30 [shape=record,label="{30\:\ 0x0008}"];
Node_31 [shape=record,label="{31\:\ 0x000a|if (r6 == (\-1)) goto L10\l}"];
Node_32 [shape=record,label="{32\:\ 0x000c|r0 = 1\l}"];
Node_34 [shape=record,label="{34\:\ 0x000f|PHI: r0 \l  PHI: (r0v11 int) = (r0v10 int), (r0v13 int) binds: [B:33:0x000e, B:32:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == 0) goto L7\l}"];
Node_36 [shape=record,label="{36\:\ 0x0012}"];
Node_37 [shape=record,label="{37\:\ 0x0017|throw new java.lang.AssertionError()\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x000e|r0 = 0\l}"];
Node_38 [shape=record,label="{38\:\ 0x0018|if (r6 \< 0) goto L23\l}"];
Node_39 [shape=record,label="{39\:\ 0x001a}"];
Node_40 [shape=record,label="{40\:\ 0x001b|if (r6 \>= 2) goto L23\l}"];
Node_43 [shape=record,label="{43\:\ 0x001f|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v0 boolean) binds: [B:42:0x001e, B:40:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 != false) goto L19\l}"];
Node_44 [shape=record,label="{44\:\ 0x0021}"];
Node_45 [shape=record,label="{45\:\ 0x0022|if (r6 != (\-2)) goto L17\l}"];
Node_50 [shape=record,label="{50\:\ 0x002c}"];
Node_51 [shape=record,label="{51\:\ 0x0033|RETURN\l|return kotlinx.coroutines.flow.SharedFlowKt.fuseSharedFlow(r4, r5, r6, r7)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0024}"];
Node_47 [shape=record,label="{47\:\ 0x0026|if (r7 != kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST) goto L17\l}"];
Node_48 [shape=record,label="{48\:\ 0x0028}"];
Node_49 [shape=record,label="{49\:\ 0x002b|RETURN\l|return r4\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|r1 = false\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.StateFlowKt.fuseStateFlow((r4v0 kotlinx.coroutines.flow.StateFlow\<? extends T\> A[D('$this$fuseStateFlow' kotlinx.coroutines.flow.StateFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'capacity' int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:49:0x002b \-\> B:27:?, CROSS_EDGE: B:51:0x0033 \-\> B:27:?, CROSS_EDGE: B:45:0x0022 \-\> B:50:0x002c, CROSS_EDGE: B:43:0x001f \-\> B:46:0x0024, CROSS_EDGE: B:40:0x001b \-\> B:43:0x001f, CROSS_EDGE: B:38:0x0018 \-\> B:42:0x001e, CROSS_EDGE: B:33:0x000e \-\> B:34:0x000f, CROSS_EDGE: B:29:0x0006 \-\> B:38:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/StateFlow\<+TT;\>;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_38[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_27;
Node_33 -> Node_34;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_43[style=dashed];
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_46;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_27;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_27;
Node_42 -> Node_43;
}

