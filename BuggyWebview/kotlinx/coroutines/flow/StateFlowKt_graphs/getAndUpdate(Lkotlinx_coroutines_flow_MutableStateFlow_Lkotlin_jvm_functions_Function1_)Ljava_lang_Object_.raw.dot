digraph "CFG forkotlinx.coroutines.flow.StateFlowKt.getAndUpdate(Lkotlinx\/coroutines\/flow\/MutableStateFlow;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0001|LOOP_START\lLOOP:0: B:11:0x0001\-\>B:12:0x000e\l|0x0002: INVOKE  (r1 I:java.lang.Object) = (r4 I:kotlinx.coroutines.flow.MutableStateFlow A[D('$this$getAndUpdate' kotlinx.coroutines.flow.MutableStateFlow)]) type: INTERFACE call: kotlinx.coroutines.flow.MutableStateFlow.getValue():java.lang.Object A[MD:():T (m)] (LINE:215)\l0x0006: INVOKE  (r2 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function1 A[D('function' kotlin.jvm.functions.Function1)])\l  (r1 I:java.lang.Object A[D('prevValue' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:216)\l0x000a: INVOKE  (r3 I:boolean) = \l  (r4 I:kotlinx.coroutines.flow.MutableStateFlow A[D('$this$getAndUpdate' kotlinx.coroutines.flow.MutableStateFlow)])\l  (r1 I:java.lang.Object A[D('prevValue' java.lang.Object)])\l  (r2 I:java.lang.Object A[D('nextValue' java.lang.Object)])\l type: INTERFACE call: kotlinx.coroutines.flow.MutableStateFlow.compareAndSet(java.lang.Object, java.lang.Object):boolean A[MD:(T, T):boolean (m)] (LINE:217)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000e|LOOP_END\lLOOP:0: B:11:0x0001\-\>B:12:0x000e\l|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0001 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0010|RETURN\l|0x0010: RETURN  (r1 I:T A[D('prevValue' java.lang.Object)])  (LINE:218)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final T kotlinx.coroutines.flow.StateFlowKt.getAndUpdate((r4 I:kotlinx.coroutines.flow.MutableStateFlow\<T\> A[D('$this$getAndUpdate' kotlinx.coroutines.flow.MutableStateFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super T, ? extends T\> A[D('function' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x000e \-\> B:11:0x0001\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0011: r0 '$i$f$getAndUpdate' I\l  0x0006\-0x0011: r1 'prevValue' Ljava\/lang\/Object;\l  0x000a\-0x0011: r2 'nextValue' Ljava\/lang\/Object;\l  \-1 \-0x0011: r4 '$this$getAndUpdate' Lkotlinx\/coroutines\/flow\/MutableStateFlow;\l  \-1 \-0x0011: r5 'function' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/MutableStateFlow\<TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TT;\>;)TT;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_11;
Node_12 -> Node_15[style=dashed];
Node_15 -> Node_13;
Node_13 -> Node_9;
}

