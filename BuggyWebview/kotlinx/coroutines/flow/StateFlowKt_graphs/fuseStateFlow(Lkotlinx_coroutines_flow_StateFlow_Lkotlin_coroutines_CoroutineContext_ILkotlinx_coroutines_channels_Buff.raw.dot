digraph "CFG forkotlinx.coroutines.flow.StateFlowKt.fuseStateFlow(Lkotlinx\/coroutines\/flow\/StateFlow;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:424)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0018 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:431)\l0x0009: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:424)\l}"];
Node_31 [shape=record,label="{31\:\ 0x000a|0x000a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x000e \l}"];
Node_32 [shape=record,label="{32\:\ 0x000c|0x000c: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-StateFlowKt$fuseStateFlow$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-StateFlowKt$fuseStateFlow$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0012 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|0x0012: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0014: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0017|0x0017: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-StateFlowKt$fuseStateFlow$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0018|0x0018: IF  (r6 I:??[int, byte, short, char] A[D('capacity' int)]) \< (0 ??[int, byte, short, char])  \-\> B:42:0x001e  (LINE:425)\l}"];
Node_39 [shape=record,label="{39\:\ 0x001a|0x001a: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x001b|0x001b: IF  (r6 I:??[int, byte, short, char] A[D('capacity' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:42:0x001e \l}"];
Node_43 [shape=record,label="{43\:\ 0x001f|0x001f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0024 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0021|0x0021: CONST  (r0 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0022|0x0022: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x002c \l}"];
Node_50 [shape=record,label="{50\:\ 0x002c|0x002c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$fuseStateFlow' kotlinx.coroutines.flow.StateFlow)])  (LINE:428)\l0x002d: CHECK_CAST (r0 I:kotlinx.coroutines.flow.SharedFlow) = (kotlinx.coroutines.flow.SharedFlow) (r0 I:??[OBJECT, ARRAY]) \l0x002f: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = \l  (r0 I:kotlinx.coroutines.flow.SharedFlow)\l  (r5 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r6 I:int A[D('capacity' int)])\l  (r7 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)])\l type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.fuseSharedFlow(kotlinx.coroutines.flow.SharedFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.SharedFlow\<? extends T\>, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x0033|RETURN\l|0x0033: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0024|0x0024: SGET  (r0 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST kotlinx.coroutines.channels.BufferOverflow \l}"];
Node_47 [shape=record,label="{47\:\ 0x0026|0x0026: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x002c \l}"];
Node_48 [shape=record,label="{48\:\ 0x0028|0x0028: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$fuseStateFlow' kotlinx.coroutines.flow.StateFlow)])  (LINE:426)\l0x0029: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.StateFlowKt.fuseStateFlow((r4 I:kotlinx.coroutines.flow.StateFlow\<? extends T\> A[D('$this$fuseStateFlow' kotlinx.coroutines.flow.StateFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:49:0x002b \-\> B:27:?, CROSS_EDGE: B:51:0x0033 \-\> B:27:?, CROSS_EDGE: B:45:0x0022 \-\> B:50:0x002c, CROSS_EDGE: B:43:0x001f \-\> B:46:0x0024, CROSS_EDGE: B:40:0x001b \-\> B:43:0x001f, CROSS_EDGE: B:38:0x0018 \-\> B:42:0x001e, CROSS_EDGE: B:33:0x000e \-\> B:34:0x000f, CROSS_EDGE: B:29:0x0006 \-\> B:38:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x000f: r0 '$i$a$\-assert\-StateFlowKt$fuseStateFlow$1' I\l  \-1 \-0x0033: r4 '$this$fuseStateFlow' Lkotlinx\/coroutines\/flow\/StateFlow;\l  \-1 \-0x0033: r5 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0033: r6 'capacity' I\l  \-1 \-0x0033: r7 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/StateFlow\<+TT;\>;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_38[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_27;
Node_33 -> Node_34;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_43[style=dashed];
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_46;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_27;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_27;
Node_42 -> Node_43;
}

