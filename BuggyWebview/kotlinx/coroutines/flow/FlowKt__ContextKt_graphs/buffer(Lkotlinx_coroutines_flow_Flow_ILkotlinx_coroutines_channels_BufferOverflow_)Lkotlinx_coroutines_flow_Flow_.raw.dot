digraph "CFG forkotlinx.coroutines.flow.FlowKt__ContextKt.buffer(Lkotlinx\/coroutines\/flow\/Flow;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_58 [shape=record,label="{58\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_60 [shape=record,label="{60\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:126)\l0x0001: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0003|0x0003: IF  (r11 I:??[int, byte, short, char] A[D('capacity' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:67:0x000d \l}"];
Node_62 [shape=record,label="{62\:\ 0x0005|0x0005: CONST  (r3 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0006|0x0006: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x000d \l}"];
Node_64 [shape=record,label="{64\:\ 0x0008|0x0008: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x000b \l}"];
Node_66 [shape=record,label="{66\:\ 0x000b|0x000b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:84:0x0050 \l}"];
Node_69 [shape=record,label="{69\:\ 0x0010|0x0010: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x0016  (LINE:129)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0012|0x0012: SGET  (r3 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow \l}"];
Node_71 [shape=record,label="{71\:\ 0x0014|0x0014: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0017 \l}"];
Node_73 [shape=record,label="{73\:\ 0x0017|0x0017: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0042 \l}"];
Node_74 [shape=record,label="{74\:\ 0x0019|0x0019: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)])  (LINE:133)\l0x001a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)])  (LINE:134)\l}"];
Node_75 [shape=record,label="{75\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x0020  (LINE:135)\l}"];
Node_76 [shape=record,label="{76\:\ 0x001d|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:136)\l0x001e: SGET  (r1 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) =  kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST kotlinx.coroutines.channels.BufferOverflow  (LINE:137)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0020|0x0021: INSTANCE_OF  (r2 I:boolean) = (r10 I:??[OBJECT, ARRAY] A[D('$this$buffer' kotlinx.coroutines.flow.Flow)]) kotlinx.coroutines.flow.internal.FusibleFlow  (LINE:141)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0023|0x0023: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x0032 \l}"];
Node_79 [shape=record,label="{79\:\ 0x0025|0x0025: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$buffer' kotlinx.coroutines.flow.Flow)]) \l0x0026: CHECK_CAST (r2 I:kotlinx.coroutines.flow.internal.FusibleFlow) = (kotlinx.coroutines.flow.internal.FusibleFlow) (r2 I:??[OBJECT, ARRAY]) \l0x0028: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0029: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x002a: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002b: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) \l0x002c: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) \l0x002d: INVOKE  (r2 I:kotlinx.coroutines.flow.Flow) = \l  (r2 I:kotlinx.coroutines.flow.internal.FusibleFlow)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:int)\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.flow.internal.FusibleFlow.DefaultImpls.fuse$default(kotlinx.coroutines.flow.internal.FusibleFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, java.lang.Object):kotlinx.coroutines.flow.Flow A[MD:(kotlinx.coroutines.flow.internal.FusibleFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, java.lang.Object):kotlinx.coroutines.flow.Flow (m)]\l}"];
Node_86 [shape=record,label="{86\:\ ?|SYNTHETIC\lRETURN\l|0x0041: RETURN  (r2 I:kotlinx.coroutines.flow.Flow\<T\>) A[SYNTHETIC] (LINE:140)\l}"];
Node_59 [shape=record,label="{59\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_80 [shape=record,label="{80\:\ 0x0032|0x0032: NEW_INSTANCE  (r9 I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl) =  kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl  (LINE:142)\l0x0034: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0035: CONST  (r7 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0036: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0037: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0038: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$buffer' kotlinx.coroutines.flow.Flow)]) \l0x0039: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) \l0x003a: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) \l0x003b: INVOKE  \l  (r2 I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl)\l  (r3 I:kotlinx.coroutines.flow.Flow)\l  (r4 I:kotlin.coroutines.CoroutineContext)\l  (r5 I:int)\l  (r6 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r7 I:int)\l  (r8 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.\<init\>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x003e: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x003f: CHECK_CAST (r2 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x0041|RETURN\lORIG_RETURN\l|0x0041: RETURN  (r2 I:kotlinx.coroutines.flow.Flow\<T\>)  (LINE:140)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0042|0x0042: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:129)\l0x0044: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('$i$a$\-require\-FlowKt__ContextKt$buffer$2' int)]) =  java.lang.IllegalArgumentException  (LINE:129)\l0x0046: CONST_STR  (r1 I:java.lang.String) =  \"CONFLATED capacity cannot be used with non\-default onBufferOverflow\" \l0x0048: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004c: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_83 [shape=record,label="{83\:\ 0x004f|0x004f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_72 [shape=record,label="{72\:\ 0x0016|0x0016: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_84 [shape=record,label="{84\:\ 0x0050|0x0050: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:126)\l0x0051: INVOKE  (r1 I:java.lang.Integer) = (r11 I:int A[D('capacity' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:127)\l0x0055: CONST_STR  (r2 I:java.lang.String) =  \"Buffer size should be non\-negative, BUFFERED, or CONFLATED, but was \" \l0x0057: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-FlowKt__ContextKt$buffer$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x005b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:126)\l0x005d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0061: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_85 [shape=record,label="{85\:\ 0x0064|0x0064: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_67 [shape=record,label="{67\:\ 0x000d|0x000d: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__ContextKt.buffer((r10 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$buffer' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:80:0x0032 \-\> B:81:0x0041, CROSS_EDGE: B:75:0x001b \-\> B:77:0x0020, CROSS_EDGE: B:83:0x004f \-\> B:59:?, CROSS_EDGE: B:71:0x0014 \-\> B:73:0x0017, CROSS_EDGE: B:69:0x0010 \-\> B:72:0x0016, CROSS_EDGE: B:85:0x0064 \-\> B:59:?, CROSS_EDGE: B:67:0x000d \-\> B:68:0x000e, CROSS_EDGE: B:63:0x0006 \-\> B:67:0x000d, CROSS_EDGE: B:61:0x0003 \-\> B:67:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x0042: r0 'capacity' I\l  0x001b\-0x0042: r1 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\l  0x0043\-0x0044: r0 '$i$a$\-require\-FlowKt__ContextKt$buffer$2' I\l  0x0051\-0x005b: r0 '$i$a$\-require\-FlowKt__ContextKt$buffer$1' I\l  \-1 \-0x0064: r10 '$this$buffer' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0064: r11 'capacity' I\l  \-1 \-0x0064: r12 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_58;Node_58 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_67;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_67;
Node_64 -> Node_66;
Node_64 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_84;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_72;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_82;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_77;
Node_76 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_86;
Node_86 -> Node_59;
Node_80 -> Node_81;
Node_81 -> Node_59;
Node_82 -> Node_83;
Node_83 -> Node_59;
Node_72 -> Node_73;
Node_84 -> Node_85;
Node_85 -> Node_59;
Node_67 -> Node_68;
}

