digraph "CFG forkotlinx.coroutines.flow.FlowKt__ContextKt.checkFlowContext$FlowKt__ContextKt(Lkotlin\/coroutines\/CoroutineContext;)V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000}"];
Node_23 [shape=record,label="{23\:\ 0x0008|if (r2.get(kotlinx.coroutines.Job.Key) != null) goto L9\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|r0 = true\l}"];
Node_26 [shape=record,label="{26\:\ 0x000d|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v8 boolean) binds: [B:25:0x000c, B:24:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L7\l}"];
Node_27 [shape=record,label="{27\:\ 0x000f|RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0010}"];
Node_29 [shape=record,label="{29\:\ 0x0020|throw new java.lang.IllegalArgumentException(kotlin.jvm.internal.Intrinsics.stringPlus(\"Flow context cannot contain job in it. Had \", r2).toString())\l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|r0 = false\l}"];
MethodNode[shape=record,label="{private static final void kotlinx.coroutines.flow.FlowKt__ContextKt.checkFlowContext$FlowKt__ContextKt((r2v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:29:0x0020 \-\> B:21:?, CROSS_EDGE: B:25:0x000c \-\> B:26:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_21;
Node_25 -> Node_26;
}

