digraph "CFG forkotlinx.coroutines.flow.FlowKt__ContextKt.flowOn(Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r9 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)]) type: STATIC call: kotlinx.coroutines.flow.FlowKt__ContextKt.checkFlowContext$FlowKt__ContextKt(kotlin.coroutines.CoroutineContext):void A[MD:(kotlin.coroutines.CoroutineContext):void (m)] (LINE:241)\l0x0004: SGET  (r0 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:243)\l0x0006: INVOKE  (r0 I:boolean) = (r9 I:java.lang.Object A[D('context' kotlin.coroutines.CoroutineContext)]), (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x000e \l}"];
Node_28 [shape=record,label="{28\:\ 0x000c|0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$flowOn' kotlinx.coroutines.flow.Flow)]) \l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x002e: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) A[SYNTHETIC] (LINE:242)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x000e|0x000e: INSTANCE_OF  (r0 I:boolean) = (r8 I:??[OBJECT, ARRAY] A[D('$this$flowOn' kotlinx.coroutines.flow.Flow)]) kotlinx.coroutines.flow.internal.FusibleFlow  (LINE:244)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x001f \l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$flowOn' kotlinx.coroutines.flow.Flow)]) \l0x0013: CHECK_CAST (r1 I:kotlinx.coroutines.flow.internal.FusibleFlow) = (kotlinx.coroutines.flow.internal.FusibleFlow) (r1 I:??[OBJECT, ARRAY]) \l0x0015: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: CONST  (r5 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char]) \l0x0018: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('context' kotlin.coroutines.CoroutineContext)]) \l0x001a: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = \l  (r1 I:kotlinx.coroutines.flow.internal.FusibleFlow)\l  (r2 I:kotlin.coroutines.CoroutineContext)\l  (r3 I:int)\l  (r4 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r5 I:int)\l  (r6 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.flow.internal.FusibleFlow.DefaultImpls.fuse$default(kotlinx.coroutines.flow.internal.FusibleFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, java.lang.Object):kotlinx.coroutines.flow.Flow A[MD:(kotlinx.coroutines.flow.internal.FusibleFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, java.lang.Object):kotlinx.coroutines.flow.Flow (m)]\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x002e: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) A[SYNTHETIC] (LINE:242)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001f|0x001f: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl) =  kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl  (LINE:245)\l0x0021: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: CONST  (r6 I:??[int, float, short, byte, char]) = (12 ??[int, float, short, byte, char]) \l0x0025: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0026: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0027: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$flowOn' kotlinx.coroutines.flow.Flow)]) \l0x0028: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('context' kotlin.coroutines.CoroutineContext)]) \l0x0029: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl)\l  (r2 I:kotlinx.coroutines.flow.Flow)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:int)\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r6 I:int)\l  (r7 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.\<init\>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x002c: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x002e|RETURN\lORIG_RETURN\l|0x002e: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>)  (LINE:242)\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__ContextKt.flowOn((r8 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$flowOn' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0012 \-\> B:33:0x002e, CROSS_EDGE: B:32:0x001f \-\> B:33:0x002e\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\lDebug Info:\l  \-1 \-0x002e: r8 '$this$flowOn' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x002e: r9 'context' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_34;
Node_34 -> Node_25;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_35;
Node_35 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_25;
}

