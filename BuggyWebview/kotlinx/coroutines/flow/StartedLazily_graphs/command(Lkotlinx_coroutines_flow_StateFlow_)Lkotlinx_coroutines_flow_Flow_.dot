digraph "CFG forkotlinx.coroutines.flow.StartedLazily.command(Lkotlinx\/coroutines\/flow\/StateFlow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|return kotlinx.coroutines.flow.FlowKt.flow(new kotlinx.coroutines.flow.StartedLazily$command$1(r3, null))\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.flow.Flow\<kotlinx.coroutines.flow.SharingCommand\> kotlinx.coroutines.flow.StartedLazily.command((r2v0 'this' kotlinx.coroutines.flow.StartedLazily A[IMMUTABLE_TYPE, THIS]), (r3v0 kotlinx.coroutines.flow.StateFlow\<java.lang.Integer\> A[D('subscriptionCount' kotlinx.coroutines.flow.StateFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/StateFlow\<Ljava\/lang\/Integer;\>;)Lkotlinx\/coroutines\/flow\/Flow\<Lkotlinx\/coroutines\/flow\/SharingCommand;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.SharingStarted.command(kotlinx.coroutines.flow.StateFlow\<java.lang.Integer\>):kotlinx.coroutines.flow.Flow\<kotlinx.coroutines.flow.SharingCommand\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

