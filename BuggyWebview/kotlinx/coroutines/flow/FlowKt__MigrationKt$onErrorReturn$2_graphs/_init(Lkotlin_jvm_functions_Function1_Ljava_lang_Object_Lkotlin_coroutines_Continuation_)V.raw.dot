digraph "CFG forkotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2.\<init\>(Lkotlin\/jvm\/functions\/Function1;Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IPUT  \l  (r2 I:kotlin.jvm.functions.Function1\<java.lang.Throwable, java.lang.Boolean\>)\l  (r1 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2)\l kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2.$predicate kotlin.jvm.functions.Function1 \l0x0002: IPUT  (r3 I:T), (r1 I:kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2) kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2.$fallback java.lang.Object \l0x0004: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0005: INVOKE  (r1 I:kotlin.coroutines.jvm.internal.SuspendLambda), (r0 I:int), (r4 I:kotlin.coroutines.Continuation) type: DIRECT call: kotlin.coroutines.jvm.internal.SuspendLambda.\<init\>(int, kotlin.coroutines.Continuation):void A[MD:(int, kotlin.coroutines.Continuation\<java.lang.Object\>):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2.\<init\>((r1 'this' I:kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2 A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, java.lang.Boolean\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:T A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__MigrationKt$onErrorReturn$2\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Ljava\/lang\/Boolean;\>;TT;Lkotlin\/coroutines\/Continuation\<\-Lkotlinx\/coroutines\/flow\/FlowKt__MigrationKt$onErrorReturn$2;\>;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

