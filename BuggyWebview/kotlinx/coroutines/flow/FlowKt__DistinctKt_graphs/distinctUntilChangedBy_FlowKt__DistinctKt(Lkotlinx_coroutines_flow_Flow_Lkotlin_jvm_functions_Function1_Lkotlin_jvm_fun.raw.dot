digraph "CFG forkotlinx.coroutines.flow.FlowKt__DistinctKt.distinctUntilChangedBy$FlowKt__DistinctKt(Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function2;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|0x0001: INSTANCE_OF  (r0 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('$this$distinctUntilChangedBy' kotlinx.coroutines.flow.Flow)]) kotlinx.coroutines.flow.DistinctFlowImpl  (LINE:65)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0015 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$distinctUntilChangedBy' kotlinx.coroutines.flow.Flow)]) \l0x0006: CHECK_CAST (r0 I:kotlinx.coroutines.flow.DistinctFlowImpl) = (kotlinx.coroutines.flow.DistinctFlowImpl) (r0 I:??[OBJECT, ARRAY]) \l0x0008: IGET  (r0 I:kotlin.jvm.functions.Function1\<T, java.lang.Object\>) = (r0 I:kotlinx.coroutines.flow.DistinctFlowImpl) kotlinx.coroutines.flow.DistinctFlowImpl.keySelector kotlin.jvm.functions.Function1 \l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('keySelector' kotlin.jvm.functions.Function1)])  \-\> B:21:0x0015 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$distinctUntilChangedBy' kotlinx.coroutines.flow.Flow)]) \l0x000d: CHECK_CAST (r0 I:kotlinx.coroutines.flow.DistinctFlowImpl) = (kotlinx.coroutines.flow.DistinctFlowImpl) (r0 I:??[OBJECT, ARRAY]) \l0x000f: IGET  (r0 I:kotlin.jvm.functions.Function2\<java.lang.Object, java.lang.Object, java.lang.Boolean\>) = (r0 I:kotlinx.coroutines.flow.DistinctFlowImpl) kotlinx.coroutines.flow.DistinctFlowImpl.areEquivalent kotlin.jvm.functions.Function2 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('areEquivalent' kotlin.jvm.functions.Function2)])  \-\> B:21:0x0015 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$distinctUntilChangedBy' kotlinx.coroutines.flow.Flow)]) \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) A[SYNTHETIC] (LINE:67)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.DistinctFlowImpl) =  kotlinx.coroutines.flow.DistinctFlowImpl  (LINE:66)\l0x0017: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.DistinctFlowImpl)\l  (r1 I:kotlinx.coroutines.flow.Flow A[D('$this$distinctUntilChangedBy' kotlinx.coroutines.flow.Flow)])\l  (r2 I:kotlin.jvm.functions.Function1 A[D('keySelector' kotlin.jvm.functions.Function1)])\l  (r3 I:kotlin.jvm.functions.Function2 A[D('areEquivalent' kotlin.jvm.functions.Function2)])\l type: DIRECT call: kotlinx.coroutines.flow.DistinctFlowImpl.\<init\>(kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.Object\>, kotlin.jvm.functions.Function2\<java.lang.Object, java.lang.Object, java.lang.Boolean\>):void (m)]\l0x001a: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>)  (LINE:67)\l}"];
MethodNode[shape=record,label="{private static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__DistinctKt.distinctUntilChangedBy$FlowKt__DistinctKt((r1 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$distinctUntilChangedBy' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.Object\> A[D('keySelector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function2\<java.lang.Object, java.lang.Object, java.lang.Boolean\> A[D('areEquivalent' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:21:0x0015 \-\> B:22:0x001c, CROSS_EDGE: B:17:0x000a \-\> B:21:0x0015, CROSS_EDGE: B:15:0x0003 \-\> B:21:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001c: r1 '$this$distinctUntilChangedBy' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x001c: r2 'keySelector' Lkotlin\/jvm\/functions\/Function1;\l  \-1 \-0x001c: r3 'areEquivalent' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/Object;\>;Lkotlin\/jvm\/functions\/Function2\<Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Boolean;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

