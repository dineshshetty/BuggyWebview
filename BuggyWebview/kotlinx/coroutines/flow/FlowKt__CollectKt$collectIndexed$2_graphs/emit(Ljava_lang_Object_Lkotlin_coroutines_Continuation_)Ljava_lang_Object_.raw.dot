digraph "CFG forkotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.emit(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.jvm.functions.Function3\<java.lang.Integer, T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>, java.lang.Object\>) = (r4 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2) kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.$action kotlin.jvm.functions.Function3  (LINE:62)\l0x0002: IGET  (r1 I:int) = (r4 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2) kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.index int \l0x0004: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x0006: IPUT  (r2 I:int), (r4 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2) kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.index int \l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: IF  (r1 I:??[int, byte, short, char] A[D('index$iv' int)]) \< (0 ??[int, byte, short, char])  \-\> B:20:0x001e  (LINE:119)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|0x000c: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int A[D('index$iv' int)]) type: STATIC call: kotlin.coroutines.jvm.internal.Boxing.boxInt(int):java.lang.Integer A[MD:(int):java.lang.Integer (m)]\l0x0010: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:kotlin.jvm.functions.Function3)\l  (r1 I:java.lang.Object)\l  (r5 I:java.lang.Object A[D('value' java.lang.Object)])\l  (r6 I:java.lang.Object A[D('$completion' kotlin.coroutines.Continuation)])\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)] (LINE:62)\l0x0014: INVOKE  (r1 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x001b \l}"];
Node_17 [shape=record,label="{17\:\ 0x001a|RETURN\l|0x001a: RETURN  (r0 I:java.lang.Object) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x001b|0x001b: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|RETURN\l|0x001d: RETURN  (r0 I:java.lang.Object) \l}"];
Node_20 [shape=record,label="{20\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:java.lang.ArithmeticException) =  java.lang.ArithmeticException  (LINE:120)\l0x0020: CONST_STR  (r3 I:java.lang.String) =  \"Index overflow has happened\" \l0x0022: INVOKE  (r0 I:java.lang.ArithmeticException), (r3 I:java.lang.String) type: DIRECT call: java.lang.ArithmeticException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|0x0025: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.emit((r4 'this' I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2 A[IMMUTABLE_TYPE, THIS]), (r5 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001d \-\> B:12:?, CROSS_EDGE: B:21:0x0025 \-\> B:12:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (TT;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x0008\-0x000c: r1 'index$iv' I\l  0x0009\-0x000c: r2 '$i$f$checkIndexOverflow' I\l  0x001e\-0x0025: r1 'index$iv' I\l  0x001e\-0x0025: r2 '$i$f$checkIndexOverflow' I\l  \-1 \-0x0025: r5 'value' Ljava\/lang\/Object;\l  \-1 \-0x0025: r6 '$completion' Lkotlin\/coroutines\/Continuation;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.FlowCollector.emit(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

