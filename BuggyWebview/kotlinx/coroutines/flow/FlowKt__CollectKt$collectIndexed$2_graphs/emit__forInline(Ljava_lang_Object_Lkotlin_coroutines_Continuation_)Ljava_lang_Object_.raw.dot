digraph "CFG forkotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.emit$$forInline(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0001: INVOKE  (r0 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[MD:(int):void (m)]\l0x0004: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1) =  kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1 \l0x0006: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1)\l  (r4 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2)\l  (r6 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1.\<init\>(kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2$emit$1\>):void (m)]\l0x0009: CONST  (r0 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char]) \l0x000a: INVOKE  (r0 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[MD:(int):void (m)]\l0x000d: IGET  (r0 I:kotlin.jvm.functions.Function3\<java.lang.Integer, T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>, java.lang.Object\>) = (r4 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2) kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.$action kotlin.jvm.functions.Function3  (LINE:62)\l0x000f: IGET  (r1 I:int) = (r4 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2) kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.index int \l0x0011: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x0013: IPUT  (r2 I:int), (r4 I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2) kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.index int \l0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: IF  (r1 I:??[int, byte, short, char] A[D('index$iv' int)]) \< (0 ??[int, byte, short, char])  \-\> B:14:0x0023  (LINE:119)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|0x0019: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int A[D('index$iv' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x001d: INVOKE  \l  (r0 I:kotlin.jvm.functions.Function3)\l  (r1 I:java.lang.Object)\l  (r5 I:java.lang.Object A[D('value' java.lang.Object)])\l  (r6 I:java.lang.Object A[D('$completion' kotlin.coroutines.Continuation)])\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)] (LINE:62)\l0x0020: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:java.lang.Object) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.lang.ArithmeticException) =  java.lang.ArithmeticException  (LINE:120)\l0x0025: CONST_STR  (r3 I:java.lang.String) =  \"Index overflow has happened\" \l0x0027: INVOKE  (r0 I:java.lang.ArithmeticException), (r3 I:java.lang.String) type: DIRECT call: java.lang.ArithmeticException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2.emit$$forInline((r4 'this' I:kotlinx.coroutines.flow.FlowKt__CollectKt$collectIndexed$2 A[IMMUTABLE_TYPE, THIS]), (r5 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x002a \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0019: r1 'index$iv' I\l  0x0016\-0x0019: r2 '$i$f$checkIndexOverflow' I\l  0x0023\-0x002a: r1 'index$iv' I\l  0x0023\-0x002a: r2 '$i$f$checkIndexOverflow' I\l  \-1 \-0x002a: r5 'value' Ljava\/lang\/Object;\l  \-1 \-0x002a: r6 '$completion' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: EMPTY\lSIGNATURE: (TT;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

