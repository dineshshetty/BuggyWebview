digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0004: IGET  (r1 I:int) = (r9 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1) kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.label int  (LINE:337)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0006|0x0006: SWITCH  (r1 I:??)\l case 0: goto B:37:0x0018\l case 1: goto B:32:0x0011\l default: goto B:30:0x0009 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|0x0009: NEW_INSTANCE  (r10 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:353)\l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000d: INVOKE  (r10 I:java.lang.IllegalStateException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0010|0x0010: THROW  (r10 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|0x0011: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY])  (LINE:337)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0012|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_33 [shape=record,label="{33\:\ 0x0012|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0016, blocks: (B:33:0x0012), top: B:50:0x0012 \}\lCatch: all \-\> 0x0016\l|0x0012: INVOKE  (r10 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[Catch: all \-\> 0x0016, MD:(java.lang.Object):void (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_42 [shape=record,label="{42\:\ 0x003f|0x0040: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:353)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0042|RETURN\l|0x0042: RETURN  (r1 I:java.lang.Object) \l}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0016|ExcHandler: all \-\> 0x0016\l|0x0016: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0016] (LINE:347)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0047|0x0047: IGET  (r2 I:kotlinx.coroutines.CompletableDeferred\<kotlinx.coroutines.flow.StateFlow\<T\>\>) = \l  (r0 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)])\l kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$result kotlinx.coroutines.CompletableDeferred  (LINE:349)\l0x0049: INVOKE  (r2 I:kotlinx.coroutines.CompletableDeferred), (r1 I:java.lang.Throwable A[D('e' java.lang.Throwable)]) type: INTERFACE call: kotlinx.coroutines.CompletableDeferred.completeExceptionally(java.lang.Throwable):boolean A[MD:(java.lang.Throwable):boolean (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x004c|0x004c: THROW  (r1 I:java.lang.Throwable A[D('e' java.lang.Throwable)])  (LINE:351)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0018|0x0018: INVOKE  (r10 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:337)\l0x001b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x001c: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)])\l kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.L$0 java.lang.Object \l0x001e: CHECK_CAST (r2 I:kotlinx.coroutines.CoroutineScope) = (kotlinx.coroutines.CoroutineScope) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0021|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_38 [shape=record,label="{38\:\ 0x0021|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0043, blocks: (B:38:0x0021), top: B:48:0x0021 \}\lCatch: all \-\> 0x0043\l|0x0021: NEW_INSTANCE  (r3 I:kotlin.jvm.internal.Ref$ObjectRef) =  kotlin.jvm.internal.Ref$ObjectRef A[Catch: all \-\> 0x0043, TRY_ENTER] (LINE:339)\l0x0023: INVOKE  (r3 I:kotlin.jvm.internal.Ref$ObjectRef) type: DIRECT call: kotlin.jvm.internal.Ref.ObjectRef.\<init\>():void A[Catch: all \-\> 0x0043, MD:():void (m)]\l0x0026: IGET  (r4 I:kotlinx.coroutines.flow.Flow\<T\>) = \l  (r1 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)])\l kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$upstream kotlinx.coroutines.flow.Flow A[Catch: all \-\> 0x0043] (LINE:340)\l0x0028: NEW_INSTANCE  (r5 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1) =  kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1 A[Catch: all \-\> 0x0043]\l0x002a: IGET  (r6 I:kotlinx.coroutines.CompletableDeferred\<kotlinx.coroutines.flow.StateFlow\<T\>\>) = \l  (r1 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)])\l kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.$result kotlinx.coroutines.CompletableDeferred A[Catch: all \-\> 0x0043]\l0x002c: INVOKE  \l  (r5 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1$1)\l  (r3 I:kotlin.jvm.internal.Ref$ObjectRef A[D('state' kotlin.jvm.internal.Ref$ObjectRef)])\l  (r2 I:kotlinx.coroutines.CoroutineScope A[D('$this$launch' kotlinx.coroutines.CoroutineScope)])\l  (r6 I:kotlinx.coroutines.CompletableDeferred)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.1.\<init\>(kotlin.jvm.internal.Ref$ObjectRef, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.CompletableDeferred):void A[Catch: all \-\> 0x0043, MD:(kotlin.jvm.internal.Ref$ObjectRef\<kotlinx.coroutines.flow.MutableStateFlow\<T\>\>, kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.CompletableDeferred\<kotlinx.coroutines.flow.StateFlow\<T\>\>):void (m)]\l0x002f: CHECK_CAST (r5 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r5 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0043]\l0x0031: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)]) \l0x0032: CHECK_CAST (r6 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r6 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0043]\l0x0034: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0035: IPUT  \l  (r7 I:int)\l  (r1 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)])\l kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.label int A[Catch: all \-\> 0x0043]\l0x0037: INVOKE  (r4 I:java.lang.Object) = \l  (r4 I:kotlinx.coroutines.flow.Flow)\l  (r5 I:kotlinx.coroutines.flow.FlowCollector)\l  (r6 I:kotlin.coroutines.Continuation)\l type: INTERFACE call: kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation):java.lang.Object A[Catch: all \-\> 0x0043, MD:(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m), TRY_LEAVE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x003b|0x003b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003e \l}"];
Node_40 [shape=record,label="{40\:\ 0x003d|RETURN\l|0x003d: RETURN  (r0 I:java.lang.Object)  (LINE:337)\l}"];
Node_41 [shape=record,label="{41\:\ 0x003e|0x003e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)])  (LINE:340)\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_44 [shape=record,label="{44\:\ 0x0043|ExcHandler: all \-\> 0x0043\l|0x0043: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0043] (LINE:347)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0044|0x0044: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)]) \l0x0045: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1)]) = (r0 I:??[OBJECT, ARRAY]) \l0x0046: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1.invokeSuspend((r9 'this' I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharingDeferred$1 A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:43:0x0042 \-\> B:27:?, CROSS_EDGE: B:47:0x004c \-\> B:27:?, CROSS_EDGE: B:50:0x0012 \-\> B:35:0x0016, CROSS_EDGE: B:40:0x003d \-\> B:27:?, CROSS_EDGE: B:41:0x003e \-\> B:42:0x003f, CROSS_EDGE: B:45:0x0044 \-\> B:46:0x0047, CROSS_EDGE: B:48:0x0021 \-\> B:44:0x0043\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0043, blocks: (B:38:0x0021), top: B:48:0x0021 \}, TryCatch #1 \{all \-\> 0x0016, blocks: (B:33:0x0012), top: B:50:0x0012 \}\lDebug Info:\l  0x0012\-0x0018: r0 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ShareKt$launchSharingDeferred$1;\l  0x0012\-0x0018: r10 '$result' Ljava\/lang\/Object;\l  0x0020\-0x003b: r2 '$this$launch' Lkotlinx\/coroutines\/CoroutineScope;\l  0x0026\-0x003b: r3 'state' Lkotlin\/jvm\/internal\/Ref$ObjectRef;\l  0x001c\-0x003f: r1 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ShareKt$launchSharingDeferred$1;\l  0x003f\-0x0043: r0 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ShareKt$launchSharingDeferred$1;\l  0x0043\-0x0047: r1 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ShareKt$launchSharingDeferred$1;\l  0x0047\-0x0055: r0 'this' Lkotlinx\/coroutines\/flow\/FlowKt__ShareKt$launchSharingDeferred$1;\l  0x0047\-0x0055: r1 'e' Ljava\/lang\/Throwable;\l  0x001c\-0x0055: r10 '$result' Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [337=4]\}\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_32;
Node_29 -> Node_37;
Node_30 -> Node_31;
Node_31 -> Node_27;
Node_32 -> Node_50;
Node_50 -> Node_33;
Node_50 -> Node_35;
Node_33 -> Node_42;
Node_33 -> Node_51;
Node_42 -> Node_43;
Node_43 -> Node_27;
Node_51 -> Node_35;
Node_35 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_27;
Node_37 -> Node_48;
Node_48 -> Node_38;
Node_48 -> Node_44;
Node_38 -> Node_39;
Node_38 -> Node_49;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_27;
Node_41 -> Node_42;
Node_49 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46;
}

