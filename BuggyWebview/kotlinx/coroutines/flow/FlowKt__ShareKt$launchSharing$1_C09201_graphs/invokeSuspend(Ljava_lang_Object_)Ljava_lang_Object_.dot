digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|switch(r3.label) \{\l    case 0: goto L6;\l    default: goto L3;\l\}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008}"];
Node_17 [shape=record,label="{17\:\ 0x000f|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|kotlin.ResultKt.throwOnFailure(r4)\lint r1 = r3.I$0\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|if (r1 \<= 0) goto L11\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|r2 = true\l}"];
Node_22 [shape=record,label="{22\:\ 0x001b|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v3 boolean) binds: [B:21:0x001a, B:20:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x001f|RETURN\l|return kotlin.coroutines.jvm.internal.boxing.boxBoolean(r2)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|r2 = false\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.1.invokeSuspend((r3v0 'this' kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1$1 A[IMMUTABLE_TYPE, THIS]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001f \-\> B:13:?, CROSS_EDGE: B:21:0x001a \-\> B:22:0x001b\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
}

