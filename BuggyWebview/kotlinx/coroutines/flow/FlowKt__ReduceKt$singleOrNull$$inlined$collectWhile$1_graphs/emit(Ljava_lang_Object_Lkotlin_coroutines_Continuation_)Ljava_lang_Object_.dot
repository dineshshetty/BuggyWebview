digraph "CFG forkotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1.emit(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r1.element != kotlinx.coroutines.flow.internal.NullSurrogate.NULL) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|r1.element = r6\lr3 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019|PHI: r3 \l  PHI: (r3v4 boolean) = (r3v3 boolean), (r3v6 boolean) binds: [B:5:0x0011, B:4:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L8\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b}"];
Node_9 [shape=record,label="{9\:\ 0x001d|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e}"];
Node_11 [shape=record,label="{11\:\ 0x0026|throw new kotlinx.coroutines.flow.internal.FlowExceptions(r5)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|kotlin.jvm.internal.Ref$ObjectRef r3 = r1\lr3.element = kotlinx.coroutines.flow.internal.NullSurrogate.NULL\lr3 = false\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1.emit((r5v0 'this' kotlinx.coroutines.flow.FlowKt__ReduceKt$singleOrNull$$inlined$collectWhile$1 A[IMMUTABLE_TYPE, THIS]), (r6v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0026 \-\> B:1:?, CROSS_EDGE: B:5:0x0011 \-\> B:7:0x0019\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r4v1, types: [kotlinx.coroutines.internal.Symbol, T]\}\lSIGNATURE: (TT;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.FlowCollector.emit(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_5 -> Node_7;
}

