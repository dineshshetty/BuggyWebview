digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.enqueueLocked(Ljava\/lang\/Object;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getTotalSize():int A[MD:():int (m)] (LINE:465)\l0x0004: IGET  (r1 I:java.lang.Object[]) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.buffer java.lang.Object[]  (LINE:466)\l0x0006: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:467)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('curBuffer' java.lang.Object[])]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0011 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r2 I:java.lang.Object[]) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl), (r3 I:java.lang.Object[]), (r4 I:int), (r2 I:int) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.growBuffer(java.lang.Object[], int, int):java.lang.Object[] A[MD:(java.lang.Object[], int, int):java.lang.Object[] (m)]\l0x000f: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('curBuffer' java.lang.Object[])]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|0x001d: INVOKE  (r2 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)] (LINE:470)\l0x0021: CAST (r4 I:long) = (long) (r0 I:int A[D('curSize' int)]) \l0x0022: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x0023: INVOKE  \l  (r1 I:java.lang.Object[] A[D('buffer' java.lang.Object[])])\l  (r2 I:long)\l  (r7 I:java.lang.Object A[D('item' java.lang.Object)])\l type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$setBufferAt(java.lang.Object[], long, java.lang.Object):void A[MD:(java.lang.Object[], long, java.lang.Object):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0026|RETURN\l|0x0026: RETURN    (LINE:471)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|0x0011: ARRAY_LENGTH  (r3 I:int) = (r1 I:??[] A[D('curBuffer' java.lang.Object[])])  (LINE:468)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|0x0012: IF  (r0 I:??[int, byte, short, char] A[D('curSize' int)]) \< (r3 I:??[int, byte, short, char])  \-\> B:18:0x001c \l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|0x0014: ARRAY_LENGTH  (r3 I:int) = (r1 I:??[] A[D('curBuffer' java.lang.Object[])]) \l0x0015: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l0x0017: INVOKE  (r2 I:java.lang.Object[]) = \l  (r6 I:kotlinx.coroutines.flow.SharedFlowImpl)\l  (r1 I:java.lang.Object[] A[D('curBuffer' java.lang.Object[])])\l  (r0 I:int A[D('curSize' int)])\l  (r3 I:int)\l type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.growBuffer(java.lang.Object[], int, int):java.lang.Object[] A[MD:(java.lang.Object[], int, int):java.lang.Object[] (m)]\l0x001b: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('curBuffer' java.lang.Object[])]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.flow.SharedFlowImpl.enqueueLocked((r6 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[D('item' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0014 \-\> B:18:0x001c, CROSS_EDGE: B:16:0x0012 \-\> B:18:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x001c: r1 'curBuffer' [Ljava\/lang\/Object;\l  0x0004\-0x0026: r0 'curSize' I\l  0x001d\-0x0026: r1 'buffer' [Ljava\/lang\/Object;\l  \-1 \-0x0026: r7 'item' Ljava\/lang\/Object;\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
}

