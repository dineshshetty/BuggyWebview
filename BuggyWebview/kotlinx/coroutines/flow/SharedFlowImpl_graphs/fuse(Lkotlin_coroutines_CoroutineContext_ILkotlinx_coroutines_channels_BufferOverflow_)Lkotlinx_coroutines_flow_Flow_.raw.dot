digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.fuse(Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:701)\l0x0001: CHECK_CAST (r0 I:kotlinx.coroutines.flow.SharedFlow) = (kotlinx.coroutines.flow.SharedFlow) (r0 I:??[OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = \l  (r0 I:kotlinx.coroutines.flow.SharedFlow)\l  (r2 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r3 I:int A[D('capacity' int)])\l  (r4 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)])\l type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.fuseSharedFlow(kotlinx.coroutines.flow.SharedFlow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.SharedFlow\<? extends T\>, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.SharedFlowImpl.fuse((r1 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r2 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0007: r3 'capacity' I\l  \-1 \-0x0007: r4 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.FusibleFlow.fuse(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.Flow\<T\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

