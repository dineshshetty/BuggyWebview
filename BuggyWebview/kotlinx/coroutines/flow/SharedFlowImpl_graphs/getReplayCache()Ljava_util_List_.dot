digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.getReplayCache()Ljava\/util\/List;" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000}"];
Node_26 [shape=record,label="{26\:\ 0x0001|monitor\-enter(r12)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0002}"];
Node_44 [shape=record,label="{44\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lCatch: all \-\> 0x0035\l|int r2 = getReplaySize()     \/\/ Catch: java.lang.Throwable \-\> L35\l}"];
Node_29 [shape=record,label="{29\:\ 0x0007|if (r2 != 0) goto L11\l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lCatch: all \-\> 0x0035\l|java.util.List r3 = kotlin.collections.CollectionsKt.emptyList()     \/\/ Catch: java.lang.Throwable \-\> L35\l}"];
Node_31 [shape=record,label="{31\:\ 0x000d|monitor\-exit(r12)\l}"];
Node_32 [shape=record,label="{32\:\ 0x000e|RETURN\l|return r3\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|TRY_ENTER\lTryCatch #0 \{, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lCatch: all \-\> 0x0035\l|java.util.ArrayList r3 = new java.util.ArrayList(r2)     \/\/ Catch: java.lang.Throwable \-\> L35\ljava.lang.Object[] r4 = r12.buffer     \/\/ Catch: java.lang.Throwable \-\> L35\lkotlin.jvm.internal.Intrinsics.checkNotNull(r4)     \/\/ Catch: java.lang.Throwable \-\> L35\lr5 = 0\l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|LOOP_START\lLOOP:0: B:34:0x001a\-\>B:35:0x001c\lPHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:33:0x000f, B:35:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 \>= r2) goto L14\l}"];
Node_35 [shape=record,label="{35\:\ 0x001c|TRY_LEAVE\lLOOP_END\lTryCatch #0 \{, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lLOOP:0: B:34:0x001a\-\>B:35:0x001c\lCatch: all \-\> 0x0035\l|r6 = r5\lint r5 = r5 + 1     \/\/ Catch: java.lang.Throwable \-\> L35\ljava.lang.Object r8 = kotlinx.coroutines.flow.SharedFlowKt.getBufferAt(r4, r12.replayIndex + ((long) r6))     \/\/ Catch: java.lang.Throwable \-\> L35\lr3.add(r8)     \/\/ Catch: java.lang.Throwable \-\> L35\l}"];
Node_45 [shape=record,label="{45\:\ 0x002f|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x002f|monitor\-exit(r12)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0031}"];
Node_40 [shape=record,label="{40\:\ 0x0034|RETURN\l|return r3\l}"];
Node_41 [shape=record,label="{41\:\ 0x0035|REMOVE\lExcHandler: all \-\> 0x0035\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_43 [shape=record,label="{43\:\ 0x0037|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> kotlinx.coroutines.flow.SharedFlowImpl.getReplayCache((r12v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x001c \-\> B:34:0x001a, CROSS_EDGE: B:40:0x0034 \-\> B:24:?, CROSS_EDGE: B:43:0x0037 \-\> B:24:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: ()Ljava\/util\/List\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.SharedFlow.getReplayCache():java.util.List\<T\>]\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_44;
Node_44 -> Node_28;
Node_44 -> Node_41;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_24;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_45;
Node_35 -> Node_34;
Node_45 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_24;
Node_41 -> Node_43;
Node_43 -> Node_24;
}

