digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryPeekLocked(Lkotlinx\/coroutines\/flow\/SharedFlowSlot;)J" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: IGET  (r0 I:long) = (r8 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot)]) kotlinx.coroutines.flow.SharedFlowSlot.index long  (LINE:646)\l0x0002: INVOKE  (r2 I:long) = (r7 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getBufferEndIndex():long A[MD:():long (m)] (LINE:647)\l0x0006: CMP_L  (r4 I:int) = (r0 I:long A[D('index' long)]), (r2 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:20:0x000b \l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:long A[D('index' long)]) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: IGET  (r2 I:int) = (r7 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferCapacity int  (LINE:648)\l0x000d: CONST  (r3 I:??[long, double]) = (\-1 ??[long, double]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|0x000f: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:23:0x0012 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|RETURN\l|0x0011: RETURN  (r3 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: INVOKE  (r5 I:long) = (r7 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)] (LINE:650)\l0x0016: CMP_L  (r2 I:int) = (r0 I:long A[D('index' long)]), (r5 I:long) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|0x0018: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:26:0x001b \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|RETURN\l|0x001a: RETURN  (r3 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|0x001b: IGET  (r2 I:int) = (r7 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.queueSize int  (LINE:651)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0020 \l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|RETURN\l|0x001f: RETURN  (r3 I:long) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|RETURN\l|0x0020: RETURN  (r0 I:long A[D('index' long)])  (LINE:652)\l}"];
MethodNode[shape=record,label="{public final long kotlinx.coroutines.flow.SharedFlowImpl.tryPeekLocked((r7 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0011 \-\> B:16:?, CROSS_EDGE: B:25:0x001a \-\> B:16:?, CROSS_EDGE: B:28:0x001f \-\> B:16:?, CROSS_EDGE: B:29:0x0020 \-\> B:16:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0020: r0 'index' J\l  \-1 \-0x0020: r8 'slot' Lkotlinx\/coroutines\/flow\/SharedFlowSlot;\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_16;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_16;
Node_29 -> Node_16;
}

