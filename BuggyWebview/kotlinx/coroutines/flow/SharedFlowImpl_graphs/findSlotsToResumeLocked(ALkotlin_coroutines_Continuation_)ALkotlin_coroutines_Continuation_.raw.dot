digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.findSlotsToResumeLocked([Lkotlin\/coroutines\/Continuation;)[Lkotlin\/coroutines\/Continuation;" {
Node_33 [shape=record,label="{33\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r21 I:??[OBJECT, ARRAY])  (LINE:675)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) = (r22 I:??[OBJECT, ARRAY] A[D('resumesIn' kotlin.coroutines.Continuation[])]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:676)\l0x0006: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r22 I:??[OBJECT, ARRAY] A[D('resumesIn' kotlin.coroutines.Continuation[])]) \l0x0008: ARRAY_LENGTH  (r2 I:int A[D('resumeCount' int)]) = (r3 I:??[]) \l0x0009: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY])  (LINE:677)\l0x000a: CHECK_CAST (r4 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) = (kotlinx.coroutines.flow.internal.AbstractSharedFlow) (r4 I:??[OBJECT, ARRAY]) \l0x000c: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: INVOKE  (r6 I:int) = \l  (r4 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow A[D('this_$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlow)])\l type: STATIC call: kotlinx.coroutines.flow.internal.AbstractSharedFlow.access$getNCollectors(kotlinx.coroutines.flow.internal.AbstractSharedFlow):int A[MD:(kotlinx.coroutines.flow.internal.AbstractSharedFlow):int (m)] (LINE:778)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0011|0x0011: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0015 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0015|0x0015: INVOKE  (r6 I:kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) = \l  (r4 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow A[D('this_$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlow)])\l type: STATIC call: kotlinx.coroutines.flow.internal.AbstractSharedFlow.access$getSlots(kotlinx.coroutines.flow.internal.AbstractSharedFlow):kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] A[MD:(kotlinx.coroutines.flow.internal.AbstractSharedFlow):kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] (m)] (LINE:779)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0019|0x0019: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x001d \l}"];
Node_41 [shape=record,label="{41\:\ 0x001d|0x001d: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:780)\l0x001f: ARRAY_LENGTH  (r9 I:int) = (r6 I:??[] A[D('$this$forEach$iv$iv' java.lang.Object[])]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|LOOP_START\lLOOP:0: B:42:0x0020\-\>B:58:0x0075\l|0x0020: IF  (r8 I:??[int, byte, short, char]) \>= (r9 I:??[int, byte, short, char])  \-\> B:63:0x007a \l}"];
Node_43 [shape=record,label="{43\:\ 0x0022|0x0022: AGET  (r10 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][] A[D('$this$forEach$iv$iv' java.lang.Object[])]), (r8 I:??[int, short, byte, char]) \l0x0024: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l0x0026: MOVE  (r11 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('element$iv$iv' java.lang.Object)]) \l0x0027: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0028|0x0028: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('slot$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x0071  (LINE:781)\l}"];
Node_45 [shape=record,label="{45\:\ 0x002a|0x002a: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('slot$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)]) \l0x002b: CHECK_CAST (r13 I:kotlinx.coroutines.flow.SharedFlowSlot) = (kotlinx.coroutines.flow.SharedFlowSlot) (r13 I:??[OBJECT, ARRAY]) \l0x002d: CONST  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002e: IGET  (r15 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\>) = (r13 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot)]) kotlinx.coroutines.flow.SharedFlowSlot.cont kotlin.coroutines.Continuation  (LINE:678)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0030|0x0030: IF  (r15 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0035 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0032|0x0032: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0073|0x0073: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) = (r16 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)])  (LINE:782)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0075|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x0075|LOOP_END\lLOOP:0: B:42:0x0020\-\>B:58:0x0075\l|0x0075: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r21 I:??[OBJECT, ARRAY]) \l0x0077: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r22 I:??[OBJECT, ARRAY] A[D('resumesIn' kotlin.coroutines.Continuation[])]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0035|0x0035: INVOKE  (r16 I:long) = \l  (r0 I:kotlinx.coroutines.flow.SharedFlowImpl)\l  (r13 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot)])\l type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.tryPeekLocked(kotlinx.coroutines.flow.SharedFlowSlot):long A[MD:(kotlinx.coroutines.flow.SharedFlowSlot):long (m)] (LINE:679)\l0x0039: CONST  (r18 I:??[long, double]) = (0 ??[long, double]) \l0x003b: CMP_L  (r20 I:int) = (r16 I:long), (r18 I:long) \l}"];
Node_49 [shape=record,label="{49\:\ 0x003d|0x003d: IF  (r20 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:51:0x0042 \l}"];
Node_50 [shape=record,label="{50\:\ 0x003f|0x003f: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0042|0x0042: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)])  (LINE:680)\l0x0043: CHECK_CAST (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:??[OBJECT, ARRAY]) \l0x0045: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0046|0x0046: IF  (r2 I:??[int, byte, short, char] A[D('resumeCount' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:54:0x0063 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0048|0x0048: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) \l0x0049: CHECK_CAST (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:??[OBJECT, ARRAY]) \l0x004b: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) \l0x004c: CHECK_CAST (r3 I:java.lang.Object[]) = (java.lang.Object[]) (r3 I:??[OBJECT, ARRAY]) \l0x004e: ARRAY_LENGTH  (r3 I:int) = (r3 I:??[]) \l0x004f: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) \l0x0051: CONST  (r1 I:??[int, float, short, byte, char] A[D('resumes' java.lang.Object)]) = (2 ??[int, float, short, byte, char]) \l0x0052: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l0x0054: INVOKE  (r1 I:int) = (r1 I:int), (r3 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0058: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.lang.Object[]), (r1 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x005c: CONST_STR  (r1 I:java.lang.String) =  \"copyOf(this, newSize)\" \l0x005e: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0061: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0065|0x0065: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)])  (LINE:681)\l0x0066: CHECK_CAST (r0 I:kotlin.coroutines.Continuation[]) = (kotlin.coroutines.Continuation[]) (r0 I:??[OBJECT, ARRAY]) \l0x0068: ARITH  (r3 I:int) = (r2 I:int A[D('resumeCount' int)]) + (1 int) \l0x006a: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char] A[D('resumeCount' int)])\l  (r15 I:??[OBJECT, ARRAY] A[D('cont' kotlin.coroutines.Continuation)])\l \l0x006c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:682)\l0x006d: IPUT  \l  (r0 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\>)\l  (r13 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot)])\l kotlinx.coroutines.flow.SharedFlowSlot.cont kotlin.coroutines.Continuation \l0x006f: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resumeCount' int)])  (LINE:683)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0075|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0063|0x0063: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0071|0x0071: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)])  (LINE:781)\l}"];
Node_63 [shape=record,label="{63\:\ 0x007a|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x007a|0x007a: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)])  (LINE:783)\l}"];
Node_61 [shape=record,label="{61\:\ 0x007d|0x007d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)])  (LINE:684)\l0x007e: CHECK_CAST (r0 I:kotlin.coroutines.Continuation[]) = (kotlin.coroutines.Continuation[]) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0080|RETURN\l|0x0080: RETURN  (r0 I:kotlin.coroutines.Continuation\<kotlin.Unit\>[]) \l}"];
Node_34 [shape=record,label="{34\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlin.coroutines.Continuation\<kotlin.Unit\>[] kotlinx.coroutines.flow.SharedFlowImpl.findSlotsToResumeLocked((r21 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r22 I:kotlin.coroutines.Continuation\<kotlin.Unit\>[] A[D('resumesIn' kotlin.coroutines.Continuation[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:58:0x0075 \-\> B:42:0x0020, CROSS_EDGE: B:50:0x003f \-\> B:57:0x0073, CROSS_EDGE: B:55:0x0065 \-\> B:58:0x0075, CROSS_EDGE: B:54:0x0063 \-\> B:55:0x0065, CROSS_EDGE: B:56:0x0071 \-\> B:57:0x0073, CROSS_EDGE: B:39:0x0019 \-\> B:61:0x007d, CROSS_EDGE: B:36:0x0011 \-\> B:61:0x007d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0003\-0x0051: r1 'resumes' Ljava\/lang\/Object;\l  0x0051\-0x0062: r16 'resumes' Ljava\/lang\/Object;\l  0x0008\-0x006a: r2 'resumeCount' I\l  0x006a\-0x0071: r3 'resumeCount' I\l  0x002d\-0x0071: r13 'slot' Lkotlinx\/coroutines\/flow\/SharedFlowSlot;\l  0x002e\-0x0071: r14 '$i$a$\-forEachSlotLocked\-SharedFlowImpl$findSlotsToResumeLocked$1' I\l  0x0035\-0x0071: r15 'cont' Lkotlin\/coroutines\/Continuation;\l  0x0062\-0x0073: r1 'resumes' Ljava\/lang\/Object;\l  0x0073\-0x0075: r16 'resumes' Ljava\/lang\/Object;\l  0x0027\-0x0079: r11 'slot$iv' Lkotlinx\/coroutines\/flow\/internal\/AbstractSharedFlowSlot;\l  0x0028\-0x0079: r12 '$i$a$\-forEach\-AbstractSharedFlow$forEachSlotLocked$1$iv' I\l  0x0024\-0x007a: r10 'element$iv$iv' Ljava\/lang\/Object;\l  0x001d\-0x007c: r6 '$this$forEach$iv$iv' [Ljava\/lang\/Object;\l  0x001e\-0x007c: r7 '$i$f$forEach' I\l  0x000c\-0x007d: r4 'this_$iv' Lkotlinx\/coroutines\/flow\/internal\/AbstractSharedFlow;\l  0x000d\-0x007d: r5 '$i$f$forEachSlotLocked' I\l  0x0075\-0x0080: r1 'resumes' Ljava\/lang\/Object;\l  0x0071\-0x0080: r2 'resumeCount' I\l  \-1 \-0x0080: r22 'resumesIn' [Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [T]\lSIGNATURE: ([Lkotlin\/coroutines\/Continuation\<Lkotlin\/Unit;\>;)[Lkotlin\/coroutines\/Continuation\<Lkotlin\/Unit;\>;\l}"];
MethodNode -> Node_33;Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_38;
Node_36 -> Node_61[style=dashed];
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_61[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_63;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_56;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_57;
Node_57 -> Node_64;
Node_64 -> Node_58;
Node_58 -> Node_42;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_57;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_55;
Node_55 -> Node_65;
Node_65 -> Node_58;
Node_54 -> Node_55;
Node_56 -> Node_57;
Node_63 -> Node_59;
Node_59 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_34;
}

