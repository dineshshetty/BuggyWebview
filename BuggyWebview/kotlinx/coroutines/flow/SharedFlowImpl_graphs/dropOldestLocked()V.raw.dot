digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.dropOldestLocked()V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object[]) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.buffer java.lang.Object[]  (LINE:445)\l0x0002: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0005: INVOKE  (r1 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)]\l0x0009: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:java.lang.Object[]), (r1 I:long), (r3 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$setBufferAt(java.lang.Object[], long, java.lang.Object):void A[MD:(java.lang.Object[], long, java.lang.Object):void (m)]\l0x000d: IGET  (r0 I:int) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int  (LINE:446)\l0x000f: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0011: IPUT  (r0 I:int), (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int \l0x0013: INVOKE  (r0 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)] (LINE:447)\l0x0017: CONST  (r2 I:??[long, double]) = (1 ??[long, double]) \l0x0019: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x001a: IGET  (r2 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replayIndex long  (LINE:448)\l0x001c: CMP_L  (r4 I:int) = (r2 I:long), (r0 I:long A[D('newHead' long)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|0x001e: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:25:0x0022 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|0x0020: IPUT  (r0 I:long A[D('newHead' long)]), (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replayIndex long \l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|0x0022: IGET  (r2 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.minCollectorIndex long  (LINE:449)\l0x0024: CMP_L  (r4 I:int) = (r2 I:long), (r0 I:long A[D('newHead' long)]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0026|0x0026: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:28:0x002b \l}"];
Node_27 [shape=record,label="{27\:\ 0x0028|0x0028: INVOKE  (r6 I:kotlinx.coroutines.flow.SharedFlowImpl), (r0 I:long A[D('newHead' long)]) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.correctCollectorIndexesOnDropOldest(long):void A[MD:(long):void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x002b|0x002b: INVOKE  (r2 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:450)\l}"];
Node_29 [shape=record,label="{29\:\ 0x002f|0x002f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0046 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0031|0x0031: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:737)\l0x0032: INVOKE  (r3 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)] (LINE:450)\l0x0036: CMP_L  (r5 I:int) = (r3 I:long), (r0 I:long A[D('newHead' long)]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0038|0x0038: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x003c \l}"];
Node_32 [shape=record,label="{32\:\ 0x003a|0x003a: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x003d|0x003d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0040 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0040|0x0040: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0042: INVOKE  (r2 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0045|0x0045: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0046: RETURN   A[SYNTHETIC] (LINE:451)\l}"];
Node_33 [shape=record,label="{33\:\ 0x003c|0x003c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0046|RETURN\lORIG_RETURN\l|0x0046: RETURN    (LINE:451)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.SharedFlowImpl.dropOldestLocked((r6 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:38:0x0046 \-\> B:21:?, CROSS_EDGE: B:33:0x003c \-\> B:34:0x003d, CROSS_EDGE: B:29:0x002f \-\> B:38:0x0046, CROSS_EDGE: B:26:0x0026 \-\> B:28:0x002b, CROSS_EDGE: B:23:0x001e \-\> B:25:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0032\-0x003d: r2 '$i$a$\-assert\-SharedFlowImpl$dropOldestLocked$1' I\l  0x001a\-0x0046: r0 'newHead' J\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_39[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_21;
Node_39 -> Node_21;
Node_33 -> Node_34;
Node_38 -> Node_21;
}

