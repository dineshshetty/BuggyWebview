digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryEmitLocked(Ljava\/lang\/Object;)Z" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000}"];
Node_26 [shape=record,label="{26\:\ 0x0004|if (getNCollectors() != 0) goto L6\l}"];
Node_27 [shape=record,label="{27\:\ 0x0006}"];
Node_28 [shape=record,label="{28\:\ 0x000a|RETURN\l|return tryEmitNoCollectorsLocked(r15)\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x000b}"];
Node_30 [shape=record,label="{30\:\ 0x0010|if (r14.bufferSize \< r14.bufferCapacity) goto L14\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012}"];
Node_32 [shape=record,label="{32\:\ 0x0018|if ((r14.minCollectorIndex \> r14.replayIndex ? 1 : (r14.minCollectorIndex == r14.replayIndex ? 0 : \-1)) \> 0) goto L14\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|kotlinx.coroutines.channels.BufferOverflow r0 = r14.onBufferOverflow\l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|switch(kotlinx.coroutines.flow.SharedFlowImpl.WhenMappings.$EnumSwitchMapping$0[r0.ordinal()]) \{\l    case 1: goto L13;\l    case 2: goto L12;\l    default: goto L14;\l\}\l}"];
Node_36 [shape=record,label="{36\:\ 0x0028|RETURN\l|return true\l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|RETURN\l|return false\l}"];
Node_39 [shape=record,label="{39\:\ 0x002b|enqueueLocked(r15)\lint r0 = r14.bufferSize + 1\lr14.bufferSize = r0\l}"];
Node_40 [shape=record,label="{40\:\ 0x0035|if (r0 \<= r14.bufferCapacity) goto L17\l}"];
Node_41 [shape=record,label="{41\:\ 0x0037|dropOldestLocked()\l}"];
Node_42 [shape=record,label="{42\:\ 0x003a}"];
Node_43 [shape=record,label="{43\:\ 0x0040|if (getReplaySize() \<= r14.replay) goto L20\l}"];
Node_44 [shape=record,label="{44\:\ 0x0042|updateBufferLocked(r14.replayIndex + 1, r14.minCollectorIndex, getBufferEndIndex(), getQueueEndIndex())\l}"];
Node_45 [shape=record,label="{45\:\ 0x0056|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.flow.SharedFlowImpl.tryEmitLocked((r14v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r15v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:36:0x0028 \-\> B:24:?, CROSS_EDGE: B:38:0x002a \-\> B:24:?, CROSS_EDGE: B:45:0x0056 \-\> B:24:?, CROSS_EDGE: B:43:0x0040 \-\> B:45:0x0056, CROSS_EDGE: B:40:0x0035 \-\> B:42:0x003a, CROSS_EDGE: B:32:0x0018 \-\> B:39:0x002b, CROSS_EDGE: B:30:0x0010 \-\> B:39:0x002b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Z\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_24;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_39;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_39;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_37;
Node_34 -> Node_39;
Node_36 -> Node_24;
Node_37 -> Node_24;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_45;
Node_45 -> Node_24;
}

