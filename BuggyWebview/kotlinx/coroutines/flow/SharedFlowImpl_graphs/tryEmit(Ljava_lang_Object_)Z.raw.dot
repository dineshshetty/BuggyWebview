digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryEmit(Ljava\/lang\/Object;)Z" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:391)\l0x0001: SGET  (r0 I:kotlin.coroutines.Continuation\<kotlin.Unit\>[] A[D('resumes' java.lang.Object)]) =  kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES kotlin.coroutines.Continuation[] \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:392)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0004|0x0004: MONITOR_ENTER  (r6 I:??[OBJECT, ARRAY])  (LINE:736)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0005|0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0006|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_34 [shape=record,label="{34\:\ 0x0006|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0030, blocks: (B:34:0x0006, B:36:0x000d), top: B:51:0x0006 \}\lCatch: all \-\> 0x0030\l|0x0006: INVOKE  (r3 I:boolean) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl), (r7 I:java.lang.Object A[D('value' java.lang.Object)]) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.tryEmitLocked(java.lang.Object):boolean A[Catch: all \-\> 0x0030, MD:(T):boolean (m), TRY_ENTER] (LINE:393)\l0x000a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x000b|0x000b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0014 \l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0030, blocks: (B:34:0x0006, B:36:0x000d), top: B:51:0x0006 \}\lCatch: all \-\> 0x0030\l|0x000d: INVOKE  (r3 I:kotlin.coroutines.Continuation[]) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl), (r0 I:kotlin.coroutines.Continuation[] A[D('resumes' java.lang.Object)]) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.findSlotsToResumeLocked(kotlin.coroutines.Continuation[]):kotlin.coroutines.Continuation[] A[Catch: all \-\> 0x0030, MD:(kotlin.coroutines.Continuation\<kotlin.Unit\>[]):kotlin.coroutines.Continuation\<kotlin.Unit\>[] (m), TRY_LEAVE] (LINE:394)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|0x0011: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('resumes' java.lang.Object)]) = (r3 I:??[OBJECT, ARRAY]) \l0x0012: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:395)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|0x0016: MONITOR_EXIT  (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0018|0x0018: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$synchronized' int)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:392)\l0x0019: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[] A[D('resumes' java.lang.Object)])  (LINE:400)\l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|LOOP_START\lLOOP:0: B:42:0x001a\-\>B:55:0x001a\l|0x001a: IF  (r4 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:54:0x002f \l}"];
Node_43 [shape=record,label="{43\:\ 0x001c|0x001c: AGET  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('resumes' java.lang.Object)]), (r4 I:??[int, short, byte, char]) \l0x001e: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0020|0x0020: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cont' kotlin.coroutines.Continuation)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0023 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0023|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0023|0x0023: SGET  (r5 I:kotlin.Result$Companion) =  kotlin.Result.Companion kotlin.Result$Companion \l0x0025: SGET  (r5 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l0x0027: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.lang.Object) type: STATIC call: kotlin.Result.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<T\>:(java.lang.Object):java.lang.Object (m)]\l0x002b: INVOKE  (r3 I:kotlin.coroutines.Continuation A[D('cont' kotlin.coroutines.Continuation)]), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.coroutines.Continuation.resumeWith(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x001a|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x001a|LOOP_END\lSYNTHETIC\lLOOP:0: B:42:0x001a\-\>B:55:0x001a\l}"];
Node_56 [shape=record,label="{56\:\ 0x001a|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x002f|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x002f|RETURN\l|0x002f: RETURN  (r1 I:boolean A[D('emitted' boolean)])  (LINE:401)\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_52 [shape=record,label="{52\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_38 [shape=record,label="{38\:\ 0x0014|0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:397)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0030|ExcHandler: all \-\> 0x0030\l|0x0030: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0030] (LINE:393)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0032|0x0032: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.SharedFlowImpl.tryEmit((r6 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r7 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0023 \-\> B:42:0x001a, BACK_EDGE: B:44:0x0020 \-\> B:42:0x001a, CROSS_EDGE: B:50:0x0032 \-\> B:30:?, CROSS_EDGE: B:38:0x0014 \-\> B:40:0x0016, CROSS_EDGE: B:51:0x0006 \-\> B:48:0x0030\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0030, blocks: (B:34:0x0006, B:36:0x000d), top: B:51:0x0006 \}\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Z\lDebug Info:\l  0x0006\-0x0016: r2 '$i$a$\-synchronized\-SharedFlowImpl$tryEmit$emitted$1' I\l  0x0004\-0x0018: r1 '$i$f$synchronized' I\l  0x001e\-0x002f: r3 'cont' Lkotlin\/coroutines\/Continuation;\l  0x0019\-0x0030: r1 'emitted' Z\l  0x0001\-0x0032: r0 'resumes' Ljava\/lang\/Object;\l  0x0030\-0x0032: r1 '$i$f$synchronized' I\l  \-1 \-0x0032: r7 'value' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.MutableSharedFlow.tryEmit(T):boolean]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_51;
Node_51 -> Node_34;
Node_51 -> Node_48;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_36 -> Node_52;
Node_37 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_54;
Node_43 -> Node_44;
Node_44 -> Node_53;
Node_44 -> Node_56[style=dashed];
Node_53 -> Node_46;
Node_46 -> Node_57;
Node_57 -> Node_55;
Node_55 -> Node_42;
Node_56 -> Node_55;
Node_54 -> Node_47;
Node_47 -> Node_30;
Node_52 -> Node_48;
Node_38 -> Node_40;
Node_48 -> Node_50;
Node_50 -> Node_30;
}

