digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.cleanupTailLocked()V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0002|if (r5.bufferCapacity != 0) goto L7\l}"];
Node_21 [shape=record,label="{21\:\ 0x0004}"];
Node_22 [shape=record,label="{22\:\ 0x0007|if (r5.queueSize \> 1) goto L7\l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|java.lang.Object[] r0 = r5.buffer\lkotlin.jvm.internal.Intrinsics.checkNotNull(r0)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|LOOP_START\lLOOP:0: B:25:0x000f\-\>B:29:0x0028\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|if (r5.queueSize \<= 0) goto L15\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|java.lang.Object r1 = kotlinx.coroutines.flow.SharedFlowKt.getBufferAt(r0, (getHead() + ((long) getTotalSize())) \- 1)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0026|if (r1 != kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE) goto L13\l}"];
Node_29 [shape=record,label="{29\:\ 0x0028|LOOP_END\lLOOP:0: B:25:0x000f\-\>B:29:0x0028\l|r5.queueSize = r5.queueSize + (\-1)\lkotlinx.coroutines.flow.SharedFlowKt.setBufferAt(r0, getHead() + ((long) getTotalSize()), null)\l}"];
Node_32 [shape=record,label="{32\:\ 0x003d|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_31 [shape=record,label="{31\:\ 0x003d|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x003d|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.SharedFlowImpl.cleanupTailLocked((r5v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0028 \-\> B:25:0x000f, CROSS_EDGE: B:30:0x003d \-\> B:18:?, CROSS_EDGE: B:26:0x0011 \-\> B:30:0x003d, CROSS_EDGE: B:20:0x0002 \-\> B:24:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_18;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_18;
Node_31 -> Node_30;
Node_30 -> Node_18;
}

