digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.cancelEmitter(Lkotlinx\/coroutines\/flow\/SharedFlowImpl$Emitter;)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000}"];
Node_25 [shape=record,label="{25\:\ 0x0001|monitor\-enter(r7)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0002}"];
Node_42 [shape=record,label="{42\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:27:0x0003, B:32:0x000f, B:36:0x001e), top: B:42:0x0003 \}\lCatch: all \-\> 0x002e\l}"];
Node_28 [shape=record,label="{28\:\ 0x0009}"];
Node_29 [shape=record,label="{29\:\ 0x000b|if ((r8.index \> getHead() ? 1 : (r8.index == getHead() ? 0 : \-1)) \>= 0) goto L11\l}"];
Node_30 [shape=record,label="{30\:\ 0x000d|monitor\-exit(r7)\l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000f|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:27:0x0003, B:32:0x000f, B:36:0x001e), top: B:42:0x0003 \}\lCatch: all \-\> 0x002e\l|java.lang.Object[] r2 = r7.buffer     \/\/ Catch: java.lang.Throwable \-\> L2e\lkotlin.jvm.internal.Intrinsics.checkNotNull(r2)     \/\/ Catch: java.lang.Throwable \-\> L2e\ljava.lang.Object r3 = kotlinx.coroutines.flow.SharedFlowKt.getBufferAt(r2, r8.index)     \/\/ Catch: java.lang.Throwable \-\> L2e\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|if (r3 == r8) goto L15\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|monitor\-exit(r7)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|RETURN\l|return\l}"];
Node_36 [shape=record,label="{36\:\ 0x001e|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:27:0x0003, B:32:0x000f, B:36:0x001e), top: B:42:0x0003 \}\lCatch: all \-\> 0x002e\l|kotlinx.coroutines.flow.SharedFlowKt.setBufferAt(r2, r8.index, kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE)     \/\/ Catch: java.lang.Throwable \-\> L2e\lcleanupTailLocked()     \/\/ Catch: java.lang.Throwable \-\> L2e\lkotlin.Unit r1 = kotlin.Unit.INSTANCE     \/\/ Catch: java.lang.Throwable \-\> L2e\l}"];
Node_37 [shape=record,label="{37\:\ 0x002b|monitor\-exit(r7)\l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|RETURN\l|return\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_39 [shape=record,label="{39\:\ 0x002e|REMOVE\lExcHandler: all \-\> 0x002e\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_41 [shape=record,label="{41\:\ 0x0030|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.flow.SharedFlowImpl.cancelEmitter((r7v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r8v0 'emitter' kotlinx.coroutines.flow.SharedFlowImpl$Emitter A[D('emitter' kotlinx.coroutines.flow.SharedFlowImpl$Emitter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x001d \-\> B:23:?, CROSS_EDGE: B:38:0x002d \-\> B:23:?, CROSS_EDGE: B:41:0x0030 \-\> B:23:?, CROSS_EDGE: B:42:0x0003 \-\> B:39:0x002e\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_42;
Node_42 -> Node_27;
Node_42 -> Node_39;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_23;
Node_36 -> Node_37;
Node_36 -> Node_43;
Node_37 -> Node_38;
Node_38 -> Node_23;
Node_43 -> Node_39;
Node_39 -> Node_41;
Node_41 -> Node_23;
}

