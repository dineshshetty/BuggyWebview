digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.getPeekedValueLockedAt(J)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object[]) = (r2 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.buffer java.lang.Object[]  (LINE:656)\l0x0002: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0005: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.Object[]), (r3 I:long A[D('index' long)]) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$getBufferAt(java.lang.Object[], long):java.lang.Object A[MD:(java.lang.Object[], long):java.lang.Object (m)]\l0x0009: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('item' java.lang.Object)]) kotlinx.coroutines.flow.SharedFlowImpl$Emitter  (LINE:657)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:? \l}"];
Node_12 [shape=record,label="{12\:\ 0x000d|0x000d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('item' java.lang.Object)]) \l0x000e: CHECK_CAST (r1 I:kotlinx.coroutines.flow.SharedFlowImpl$Emitter) = (kotlinx.coroutines.flow.SharedFlowImpl$Emitter) (r1 I:??[OBJECT, ARRAY]) \l0x0010: IGET  (r1 I:java.lang.Object) = (r1 I:kotlinx.coroutines.flow.SharedFlowImpl$Emitter) kotlinx.coroutines.flow.SharedFlowImpl.Emitter.value java.lang.Object \l0x0012: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('item' java.lang.Object)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|RETURN\lORIG_RETURN\l|0x0015: RETURN  (r0 I:java.lang.Object A[D('item' java.lang.Object)])  (LINE:659)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0015: RETURN  (r0 I:java.lang.Object A[D('item' java.lang.Object)]) A[SYNTHETIC] (LINE:659)\l}"];
MethodNode[shape=record,label="{private final java.lang.Object kotlinx.coroutines.flow.SharedFlowImpl.getPeekedValueLockedAt((r2 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:long A[D('index' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x000b \-\> B:14:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0015: r0 'item' Ljava\/lang\/Object;\l  \-1 \-0x0015: r3 'index' J\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_14;
Node_14 -> Node_9;
Node_15 -> Node_9;
}

