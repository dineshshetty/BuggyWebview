digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.correctCollectorIndexesOnDropOldest(J)V" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY])  (LINE:454)\l0x0002: MOVE  (r1 I:??[long, double]) = (r20 I:??[long, double] A[D('newHead' long)]) \l0x0004: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0005: CHECK_CAST (r3 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) = (kotlinx.coroutines.flow.internal.AbstractSharedFlow) (r3 I:??[OBJECT, ARRAY]) \l0x0007: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r5 I:int) = \l  (r3 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow A[D('this_$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlow)])\l type: STATIC call: kotlinx.coroutines.flow.internal.AbstractSharedFlow.access$getNCollectors(kotlinx.coroutines.flow.internal.AbstractSharedFlow):int A[MD:(kotlinx.coroutines.flow.internal.AbstractSharedFlow):int (m)] (LINE:738)\l}"];
Node_35 [shape=record,label="{35\:\ 0x000c|0x000c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x000f \l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|0x000f: INVOKE  (r5 I:kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) = \l  (r3 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow A[D('this_$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlow)])\l type: STATIC call: kotlinx.coroutines.flow.internal.AbstractSharedFlow.access$getSlots(kotlinx.coroutines.flow.internal.AbstractSharedFlow):kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] A[MD:(kotlinx.coroutines.flow.internal.AbstractSharedFlow):kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] (m)] (LINE:739)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0013|0x0013: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0016 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|0x0016: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:740)\l0x0018: ARRAY_LENGTH  (r8 I:int) = (r5 I:??[] A[D('$this$forEach$iv$iv' java.lang.Object[])]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0019|LOOP_START\lLOOP:0: B:41:0x0019\-\>B:59:0x0019\l|0x0019: IF  (r7 I:??[int, byte, short, char]) \>= (r8 I:??[int, byte, short, char])  \-\> B:56:0x003c \l}"];
Node_42 [shape=record,label="{42\:\ 0x001b|0x001b: AGET  (r9 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][] A[D('$this$forEach$iv$iv' java.lang.Object[])]), (r7 I:??[int, short, byte, char]) \l0x001d: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l0x001f: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('element$iv$iv' java.lang.Object)]) \l0x0020: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0021|0x0021: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('slot$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0019  (LINE:741)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0023|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0023|0x0023: MOVE  (r12 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('slot$iv' kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)]) \l0x0024: CHECK_CAST (r12 I:kotlinx.coroutines.flow.SharedFlowSlot) = (kotlinx.coroutines.flow.SharedFlowSlot) (r12 I:??[OBJECT, ARRAY]) \l0x0026: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: IGET  (r14 I:long) = (r12 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot)]) kotlinx.coroutines.flow.SharedFlowSlot.index long  (LINE:456)\l0x0029: CONST  (r16 I:??[long, double]) = (0 ??[long, double]) \l0x002b: CMP_L  (r18 I:int) = (r14 I:long), (r16 I:long) \l}"];
Node_45 [shape=record,label="{45\:\ 0x002d|0x002d: IF  (r18 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:61:0x0019 \l}"];
Node_57 [shape=record,label="{57\:\ 0x002f|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x002f|0x002f: IGET  (r14 I:long) = (r12 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot)]) kotlinx.coroutines.flow.SharedFlowSlot.index long \l0x0031: CMP_L  (r16 I:int) = (r14 I:long), (r1 I:long) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0033|0x0033: IF  (r16 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:62:0x0019 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0035|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0035|0x0035: IPUT  (r1 I:long), (r12 I:kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot)]) kotlinx.coroutines.flow.SharedFlowSlot.index long  (LINE:457)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0019|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0019|LOOP_END\lSYNTHETIC\lLOOP:0: B:41:0x0019\-\>B:59:0x0019\l}"];
Node_62 [shape=record,label="{62\:\ 0x0019|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0019|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0019|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x003c|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x003c|0x003c: IPUT  (r1 I:long), (r0 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.minCollectorIndex long  (LINE:460)\l}"];
Node_54 [shape=record,label="{54\:\ 0x003e|RETURN\l|0x003e: RETURN    (LINE:461)\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.SharedFlowImpl.correctCollectorIndexesOnDropOldest((r19 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r20 I:long A[D('newHead' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:48:0x0035 \-\> B:41:0x0019, BACK_EDGE: B:47:0x0033 \-\> B:41:0x0019, BACK_EDGE: B:45:0x002d \-\> B:41:0x0019, BACK_EDGE: B:43:0x0021 \-\> B:41:0x0019, CROSS_EDGE: B:38:0x0013 \-\> B:53:0x003c, CROSS_EDGE: B:35:0x000c \-\> B:53:0x003c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x0038: r12 'slot' Lkotlinx\/coroutines\/flow\/SharedFlowSlot;\l  0x0027\-0x0038: r13 '$i$a$\-forEachSlotLocked\-SharedFlowImpl$correctCollectorIndexesOnDropOldest$1' I\l  0x0020\-0x0039: r10 'slot$iv' Lkotlinx\/coroutines\/flow\/internal\/AbstractSharedFlowSlot;\l  0x0021\-0x0039: r11 '$i$a$\-forEach\-AbstractSharedFlow$forEachSlotLocked$1$iv' I\l  0x001d\-0x003a: r9 'element$iv$iv' Ljava\/lang\/Object;\l  0x0016\-0x003b: r5 '$this$forEach$iv$iv' [Ljava\/lang\/Object;\l  0x0017\-0x003b: r6 '$i$f$forEach' I\l  0x0007\-0x003c: r3 'this_$iv' Lkotlinx\/coroutines\/flow\/internal\/AbstractSharedFlow;\l  0x0008\-0x003c: r4 '$i$f$forEachSlotLocked' I\l  \-1 \-0x003e: r20 'newHead' J\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_53[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_40;
Node_38 -> Node_53[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_56;
Node_42 -> Node_43;
Node_43 -> Node_55[style=dashed];
Node_43 -> Node_60;
Node_55 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_57[style=dashed];
Node_45 -> Node_61;
Node_57 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_58[style=dashed];
Node_47 -> Node_62;
Node_58 -> Node_48;
Node_48 -> Node_63;
Node_63 -> Node_59;
Node_59 -> Node_41;
Node_62 -> Node_59;
Node_61 -> Node_59;
Node_60 -> Node_59;
Node_56 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_33;
}

