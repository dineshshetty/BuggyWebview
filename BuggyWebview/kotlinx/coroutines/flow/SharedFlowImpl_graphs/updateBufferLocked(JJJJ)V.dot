digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.updateBufferLocked(JJJJ)V" {
Node_49 [shape=record,label="{49\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_51 [shape=record,label="{51\:\ 0x0000|long r5 = java.lang.Math.min(r19, r17)\lr8 = true\l}"];
Node_52 [shape=record,label="{52\:\ 0x0010|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_53 [shape=record,label="{53\:\ 0x0012}"];
Node_54 [shape=record,label="{54\:\ 0x0019|if ((r5 \> getHead() ? 1 : (r5 == getHead() ? 0 : \-1)) \< 0) goto L10\l}"];
Node_55 [shape=record,label="{55\:\ 0x001b|r7 = 1\l}"];
Node_57 [shape=record,label="{57\:\ 0x001e|PHI: r7 \l  PHI: (r7v22 int) = (r7v21 int), (r7v24 int) binds: [B:56:0x001d, B:55:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == 0) goto L7\l}"];
Node_59 [shape=record,label="{59\:\ 0x0021}"];
Node_60 [shape=record,label="{60\:\ 0x0026|throw new java.lang.AssertionError()\l}"];
Node_50 [shape=record,label="{50\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x001d|r7 = 0\l}"];
Node_61 [shape=record,label="{61\:\ 0x0027|long r10 = getHead()\l}"];
Node_62 [shape=record,label="{62\:\ 0x002b|LOOP_START\lLOOP:0: B:62:0x002b\-\>B:64:0x002f\lPHI: r10 \l  PHI: (r10v1 long) = (r10v0 long), (r10v7 long) binds: [B:61:0x0027, B:64:0x002f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_63 [shape=record,label="{63\:\ 0x002d|if ((r10 \> r5 ? 1 : (r10 == r5 ? 0 : \-1)) \>= 0) goto L15\l}"];
Node_64 [shape=record,label="{64\:\ 0x002f|LOOP_END\lLOOP:0: B:62:0x002b\-\>B:64:0x002f\l|r12 = r10\llong r10 = r10 + 1\ljava.lang.Object[] r7 = r16.buffer\lkotlin.jvm.internal.Intrinsics.checkNotNull(r7)\lkotlinx.coroutines.flow.SharedFlowKt.setBufferAt(r7, r12, null)\l}"];
Node_96 [shape=record,label="{96\:\ 0x003d|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x003d|r16.replayIndex = r17\lr16.minCollectorIndex = r19\lr16.bufferSize = (int) (r21 \- r5)\lr16.queueSize = (int) (r23 \- r21)\l}"];
Node_66 [shape=record,label="{66\:\ 0x004f|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L25\l}"];
Node_67 [shape=record,label="{67\:\ 0x0051}"];
Node_68 [shape=record,label="{68\:\ 0x0054|if (r16.bufferSize \< 0) goto L24\l}"];
Node_69 [shape=record,label="{69\:\ 0x0056|r7 = 1\l}"];
Node_71 [shape=record,label="{71\:\ 0x0059|PHI: r7 \l  PHI: (r7v16 int) = (r7v15 int), (r7v18 int) binds: [B:70:0x0058, B:69:0x0056] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == 0) goto L22\l}"];
Node_73 [shape=record,label="{73\:\ 0x005c}"];
Node_74 [shape=record,label="{74\:\ 0x0061|throw new java.lang.AssertionError()\l}"];
Node_70 [shape=record,label="{70\:\ 0x0058|r7 = 0\l}"];
Node_75 [shape=record,label="{75\:\ 0x0062}"];
Node_76 [shape=record,label="{76\:\ 0x0066|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L34\l}"];
Node_77 [shape=record,label="{77\:\ 0x0068}"];
Node_78 [shape=record,label="{78\:\ 0x006b|if (r16.queueSize \< 0) goto L33\l}"];
Node_79 [shape=record,label="{79\:\ 0x006d|r7 = 1\l}"];
Node_81 [shape=record,label="{81\:\ 0x0070|PHI: r7 \l  PHI: (r7v11 int) = (r7v10 int), (r7v13 int) binds: [B:80:0x006f, B:79:0x006d] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == 0) goto L31\l}"];
Node_83 [shape=record,label="{83\:\ 0x0073}"];
Node_84 [shape=record,label="{84\:\ 0x0078|throw new java.lang.AssertionError()\l}"];
Node_80 [shape=record,label="{80\:\ 0x006f|r7 = 0\l}"];
Node_85 [shape=record,label="{85\:\ 0x0079}"];
Node_86 [shape=record,label="{86\:\ 0x007d|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L43\l}"];
Node_87 [shape=record,label="{87\:\ 0x007f}"];
Node_88 [shape=record,label="{88\:\ 0x008c|if ((r16.replayIndex \> (getHead() + ((long) r16.bufferSize)) ? 1 : (r16.replayIndex == (getHead() + ((long) r16.bufferSize)) ? 0 : \-1)) \> 0) goto L38\l}"];
Node_90 [shape=record,label="{90\:\ 0x008f|r8 = false\l}"];
Node_91 [shape=record,label="{91\:\ 0x0090|PHI: r8 \l  PHI: (r8v1 boolean) = (r8v0 boolean), (r8v2 boolean) binds: [B:88:0x008c, B:90:0x008f] A[DONT_GENERATE, DONT_INLINE]\l|if (r8 == false) goto L40\l}"];
Node_93 [shape=record,label="{93\:\ 0x0093}"];
Node_94 [shape=record,label="{94\:\ 0x0098|throw new java.lang.AssertionError()\l}"];
Node_97 [shape=record,label="{97\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_95 [shape=record,label="{95\:\ 0x0099|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.SharedFlowImpl.updateBufferLocked((r16v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r17v0 'newReplayIndex' long A[D('newReplayIndex' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'newMinCollectorIndex' long A[D('newMinCollectorIndex' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 'newBufferEndIndex' long A[D('newBufferEndIndex' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 'newQueueEndIndex' long A[D('newQueueEndIndex' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:64:0x002f \-\> B:62:0x002b, CROSS_EDGE: B:74:0x0061 \-\> B:50:?, CROSS_EDGE: B:84:0x0078 \-\> B:50:?, CROSS_EDGE: B:94:0x0098 \-\> B:50:?, CROSS_EDGE: B:95:0x0099 \-\> B:50:?, CROSS_EDGE: B:88:0x008c \-\> B:91:0x0090, CROSS_EDGE: B:86:0x007d \-\> B:95:0x0099, CROSS_EDGE: B:80:0x006f \-\> B:81:0x0070, CROSS_EDGE: B:76:0x0066 \-\> B:85:0x0079, CROSS_EDGE: B:70:0x0058 \-\> B:71:0x0059, CROSS_EDGE: B:66:0x004f \-\> B:75:0x0062, CROSS_EDGE: B:56:0x001d \-\> B:57:0x001e, CROSS_EDGE: B:52:0x0010 \-\> B:61:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [737=4]\}\l}"];
MethodNode -> Node_49;Node_49 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_61;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_57;
Node_57 -> Node_59;
Node_57 -> Node_61[style=dashed];
Node_59 -> Node_60;
Node_60 -> Node_50;
Node_56 -> Node_57;
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_96;
Node_64 -> Node_62;
Node_96 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_75;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_70;
Node_69 -> Node_71;
Node_71 -> Node_73;
Node_71 -> Node_75[style=dashed];
Node_73 -> Node_74;
Node_74 -> Node_50;
Node_70 -> Node_71;
Node_75 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_85;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_81;
Node_81 -> Node_83;
Node_81 -> Node_85[style=dashed];
Node_83 -> Node_84;
Node_84 -> Node_50;
Node_80 -> Node_81;
Node_85 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_95;
Node_87 -> Node_88;
Node_88 -> Node_90;
Node_88 -> Node_91[style=dashed];
Node_90 -> Node_91;
Node_91 -> Node_93;
Node_91 -> Node_97[style=dashed];
Node_93 -> Node_94;
Node_94 -> Node_50;
Node_97 -> Node_50;
Node_95 -> Node_50;
}

