digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.cleanupTailLocked()V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferCapacity int  (LINE:616)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: IGET  (r0 I:int) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.queueSize int \l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char]) \> (r1 I:??[int, byte, short, char])  \-\> B:24:0x000a \l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|RETURN\l|0x0009: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: IGET  (r0 I:java.lang.Object[]) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.buffer java.lang.Object[]  (LINE:617)\l0x000c: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|LOOP_START\lLOOP:0: B:25:0x000f\-\>B:29:0x0028\l|0x000f: IGET  (r1 I:int) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.queueSize int  (LINE:618)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|0x0011: IF  (r1 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:31:0x003d \l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|0x0013: INVOKE  (r1 I:long) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)]\l0x0017: INVOKE  (r3 I:int) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getTotalSize():int A[MD:():int (m)]\l0x001b: CAST (r3 I:long) = (long) (r3 I:int) \l0x001c: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) \l0x001d: CONST  (r3 I:??[long, double]) = (1 ??[long, double]) \l0x001f: ARITH  (r1 I:long) = (r1 I:long) \- (r3 I:long) \l0x0020: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.lang.Object[] A[D('buffer' java.lang.Object[])]), (r1 I:long) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$getBufferAt(java.lang.Object[], long):java.lang.Object A[MD:(java.lang.Object[], long):java.lang.Object (m)]\l0x0024: SGET  (r2 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE kotlinx.coroutines.internal.Symbol \l}"];
Node_28 [shape=record,label="{28\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x003d \l}"];
Node_29 [shape=record,label="{29\:\ 0x0028|LOOP_END\lLOOP:0: B:25:0x000f\-\>B:29:0x0028\l|0x0028: IGET  (r1 I:int) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.queueSize int  (LINE:619)\l0x002a: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x002c: IPUT  (r1 I:int), (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.queueSize int \l0x002e: INVOKE  (r1 I:long) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)] (LINE:620)\l0x0032: INVOKE  (r3 I:int) = (r5 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getTotalSize():int A[MD:():int (m)]\l0x0036: CAST (r3 I:long) = (long) (r3 I:int) \l0x0037: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) \l0x0038: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0039: INVOKE  (r0 I:java.lang.Object[] A[D('buffer' java.lang.Object[])]), (r1 I:long), (r3 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$setBufferAt(java.lang.Object[], long, java.lang.Object):void A[MD:(java.lang.Object[], long, java.lang.Object):void (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x003d|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x003d: RETURN   A[SYNTHETIC] (LINE:622)\l}"];
Node_31 [shape=record,label="{31\:\ 0x003d|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x003d|RETURN\lORIG_RETURN\l|0x003d: RETURN    (LINE:622)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.SharedFlowImpl.cleanupTailLocked((r5 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0028 \-\> B:25:0x000f, CROSS_EDGE: B:30:0x003d \-\> B:18:?, CROSS_EDGE: B:26:0x0011 \-\> B:30:0x003d, CROSS_EDGE: B:20:0x0002 \-\> B:24:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x003d: r0 'buffer' [Ljava\/lang\/Object;\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_18;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_18;
Node_31 -> Node_30;
Node_30 -> Node_18;
}

