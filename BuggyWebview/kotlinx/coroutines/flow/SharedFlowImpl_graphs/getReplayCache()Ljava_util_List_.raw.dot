digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.getReplayCache()Ljava\/util\/List;" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:352)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0001|0x0001: MONITOR_ENTER  (r12 I:??[OBJECT, ARRAY])  (LINE:734)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0002|0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0035, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lCatch: all \-\> 0x0035\l|0x0003: INVOKE  (r2 I:int) = (r12 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getReplaySize():int A[Catch: all \-\> 0x0035, MD:():int (m), TRY_ENTER] (LINE:353)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('replaySize' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x000f  (LINE:354)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0035, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lCatch: all \-\> 0x0035\l|0x0009: INVOKE  (r3 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[Catch: all \-\> 0x0035, MD:\<T\>:():java.util.List\<T\> (m), TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x000d|0x000d: MONITOR_EXIT  (r12 I:??[OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x000e|RETURN\l|0x000e: RETURN  (r3 I:java.util.List\<T\>) \l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0035, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lCatch: all \-\> 0x0035\l|0x000f: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList A[Catch: all \-\> 0x0035, TRY_ENTER] (LINE:355)\l0x0011: INVOKE  (r3 I:java.util.ArrayList), (r2 I:int A[D('replaySize' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[Catch: all \-\> 0x0035, MD:(int):void (c)]\l0x0014: IGET  (r4 I:java.lang.Object[]) = (r12 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.buffer java.lang.Object[] A[Catch: all \-\> 0x0035] (LINE:356)\l0x0016: INVOKE  (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[Catch: all \-\> 0x0035, MD:(java.lang.Object):void (m)]\l0x0019: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:358)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|LOOP_START\lLOOP:0: B:34:0x001a\-\>B:35:0x001c\l|0x001a: IF  (r5 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char] A[D('replaySize' int)])  \-\> B:45:0x002f \l}"];
Node_35 [shape=record,label="{35\:\ 0x001c|TRY_LEAVE\lLOOP_END\lTryCatch #0 \{all \-\> 0x0035, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lLOOP:0: B:34:0x001a\-\>B:35:0x001c\lCatch: all \-\> 0x0035\l|0x001c: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: ARITH  (r5 I:int) = (r5 I:int) + (1 int) A[Catch: all \-\> 0x0035]\l0x001f: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)]) \l0x0020: CHECK_CAST (r7 I:java.util.Collection) = (java.util.Collection) (r7 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0035]\l0x0022: IGET  (r8 I:long) = (r12 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replayIndex long A[Catch: all \-\> 0x0035]\l0x0024: CAST (r10 I:long) = (long) (r6 I:int A[D('i' int)]) A[Catch: all \-\> 0x0035]\l0x0025: ARITH  (r8 I:long) = (r8 I:long) + (r10 I:long) A[Catch: all \-\> 0x0035]\l0x0026: INVOKE  (r8 I:java.lang.Object) = (r4 I:java.lang.Object[] A[D('buffer' java.lang.Object[])]), (r8 I:long) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$getBufferAt(java.lang.Object[], long):java.lang.Object A[Catch: all \-\> 0x0035, MD:(java.lang.Object[], long):java.lang.Object (m)]\l0x002a: INVOKE  (r7 I:java.util.Collection), (r8 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[Catch: all \-\> 0x0035, MD:(E):boolean (c), TRY_LEAVE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x002f|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x002f|0x002f: MONITOR_EXIT  (r12 I:??[OBJECT, ARRAY]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0031|0x0031: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('$i$f$synchronized' int)]) = (r3 I:??[OBJECT, ARRAY]) \l0x0032: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0034|RETURN\l|0x0034: RETURN  (r0 I:java.util.List\<T\>)  (LINE:360)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0035|ExcHandler: all \-\> 0x0035\l|0x0035: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0035] (LINE:359)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0037|0x0037: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> kotlinx.coroutines.flow.SharedFlowImpl.getReplayCache((r12 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x001c \-\> B:34:0x001a, CROSS_EDGE: B:40:0x0034 \-\> B:24:?, CROSS_EDGE: B:43:0x0037 \-\> B:24:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0035, blocks: (B:28:0x0003, B:30:0x0009, B:33:0x000f, B:35:0x001c), top: B:44:0x0003 \}\lTYPE_VARS: [T]\lSIGNATURE: ()Ljava\/util\/List\<TT;\>;\lDebug Info:\l  0x0001\-0x000d: r0 '$i$f$synchronized' I\l  0x0003\-0x000d: r1 '$i$a$\-synchronized\-SharedFlowImpl$replayCache$1' I\l  0x0007\-0x000d: r2 'replaySize' I\l  0x001d\-0x002e: r6 'i' I\l  0x000f\-0x002f: r1 '$i$a$\-synchronized\-SharedFlowImpl$replayCache$1' I\l  0x000f\-0x002f: r2 'replaySize' I\l  0x0014\-0x002f: r3 'result' Ljava\/util\/ArrayList;\l  0x0019\-0x002f: r4 'buffer' [Ljava\/lang\/Object;\l  0x000f\-0x0031: r0 '$i$f$synchronized' I\l  0x0035\-0x0037: r0 '$i$f$synchronized' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.SharedFlow.getReplayCache():java.util.List\<T\>]\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_44;
Node_44 -> Node_28;
Node_44 -> Node_41;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_24;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_45;
Node_35 -> Node_34;
Node_45 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_24;
Node_41 -> Node_43;
Node_43 -> Node_24;
}

