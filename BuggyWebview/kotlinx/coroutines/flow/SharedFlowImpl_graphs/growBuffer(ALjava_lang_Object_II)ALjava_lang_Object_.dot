digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.growBuffer([Ljava\/lang\/Object;II)[Ljava\/lang\/Object;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|r0 = 0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|if (r12 \<= 0) goto L16\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|r1 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v5 boolean) binds: [B:22:0x0005, B:21:0x0003] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L14\l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|java.lang.Object[] r1 = new java.lang.Object[r12]\lr9.buffer = r1\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|if (r10 != null) goto L9\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|RETURN\l|return r1\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|long r2 = getHead()\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|LOOP_START\lLOOP:0: B:28:0x0016\-\>B:29:0x0018\lPHI: r0 \l  PHI: (r0v3 int) = (r0v0 int), (r0v4 int) binds: [B:27:0x0011, B:29:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= r11) goto L12\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|LOOP_END\lLOOP:0: B:28:0x0016\-\>B:29:0x0018\l|r4 = r0\lint r0 = r0 + 1\ljava.lang.Object r7 = kotlinx.coroutines.flow.SharedFlowKt.getBufferAt(r10, ((long) r4) + r2)\lkotlinx.coroutines.flow.SharedFlowKt.setBufferAt(r1, ((long) r4) + r2, r7)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|RETURN\l|return r1\l}"];
Node_31 [shape=record,label="{31\:\ 0x0028}"];
Node_32 [shape=record,label="{32\:\ 0x0035|throw new java.lang.IllegalStateException(\"Buffer size overflow\".toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|r1 = false\l}"];
MethodNode[shape=record,label="{private final java.lang.Object[] kotlinx.coroutines.flow.SharedFlowImpl.growBuffer((r9v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r10v0 'curBuffer' java.lang.Object[] A[D('curBuffer' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'curSize' int A[D('curSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'newSize' int A[D('newSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0018 \-\> B:28:0x0016, CROSS_EDGE: B:30:0x0027 \-\> B:18:?, CROSS_EDGE: B:32:0x0035 \-\> B:18:?, CROSS_EDGE: B:22:0x0005 \-\> B:23:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_18;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_33;
Node_29 -> Node_28;
Node_33 -> Node_30;
Node_30 -> Node_18;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_22 -> Node_23;
}

