digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryEmit(Ljava\/lang\/Object;)Z" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|kotlin.coroutines.Continuation\<kotlin.Unit\>[] r0 = kotlinx.coroutines.flow.internal.AbstractSharedFlowKt.EMPTY_RESUMES\l}"];
Node_32 [shape=record,label="{32\:\ 0x0004|monitor\-enter(r6)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0005}"];
Node_51 [shape=record,label="{51\:\ 0x0006|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_34 [shape=record,label="{34\:\ 0x0006|TRY_ENTER\lTryCatch #0 \{, blocks: (B:34:0x0006, B:36:0x000d), top: B:51:0x0006 \}\lCatch: all \-\> 0x0030\l|r4 = 0\l}"];
Node_35 [shape=record,label="{35\:\ 0x000b|if (tryEmitLocked(r7) == false) goto L23\l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:34:0x0006, B:36:0x000d), top: B:51:0x0006 \}\lCatch: all \-\> 0x0030\l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|r0 = findSlotsToResumeLocked(r0)     \/\/ Catch: java.lang.Throwable \-\> L30\lr3 = true\l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|PHI: r0 r3 \l  PHI: (r0v2 kotlin.coroutines.Continuation[]) = (r0v1 kotlin.coroutines.Continuation[]), (r0v3 kotlin.coroutines.Continuation[]) binds: [B:38:0x0014, B:37:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v5 boolean) binds: [B:38:0x0014, B:37:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|monitor\-exit(r6)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0018|r1 = r3\lint r2 = r0.length\l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|LOOP_START\lLOOP:0: B:42:0x001a\-\>B:55:0x001a\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:41:0x0018, B:55:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r2) goto L19\l}"];
Node_43 [shape=record,label="{43\:\ 0x001c|r3 = r0[r4]\lint r4 = r4 + 1\l}"];
Node_44 [shape=record,label="{44\:\ 0x0020|if (r3 != null) goto L14\l}"];
Node_53 [shape=record,label="{53\:\ 0x0023|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0023|kotlin.Result$Companion r5 = kotlin.Result.Companion\lr3.resumeWith(kotlin.Result.m144constructorimpl(kotlin.Unit.INSTANCE))\l}"];
Node_57 [shape=record,label="{57\:\ 0x001a|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x001a|LOOP_END\lSYNTHETIC\lLOOP:0: B:42:0x001a\-\>B:55:0x001a\l}"];
Node_56 [shape=record,label="{56\:\ 0x001a|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x002f|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x002f|RETURN\l|return r1\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_52 [shape=record,label="{52\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_38 [shape=record,label="{38\:\ 0x0014|r3 = false\l}"];
Node_48 [shape=record,label="{48\:\ 0x0030|REMOVE\lExcHandler: all \-\> 0x0030\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_50 [shape=record,label="{50\:\ 0x0032|REMOVE\l|throw r2\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.flow.SharedFlowImpl.tryEmit((r6v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r7v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0023 \-\> B:42:0x001a, BACK_EDGE: B:44:0x0020 \-\> B:42:0x001a, CROSS_EDGE: B:50:0x0032 \-\> B:30:?, CROSS_EDGE: B:38:0x0014 \-\> B:40:0x0016, CROSS_EDGE: B:51:0x0006 \-\> B:48:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Z\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.MutableSharedFlow.tryEmit(T):boolean]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_51;
Node_51 -> Node_34;
Node_51 -> Node_48;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_36 -> Node_52;
Node_37 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_54;
Node_43 -> Node_44;
Node_44 -> Node_53;
Node_44 -> Node_56[style=dashed];
Node_53 -> Node_46;
Node_46 -> Node_57;
Node_57 -> Node_55;
Node_55 -> Node_42;
Node_56 -> Node_55;
Node_54 -> Node_47;
Node_47 -> Node_30;
Node_52 -> Node_48;
Node_38 -> Node_40;
Node_48 -> Node_50;
Node_50 -> Node_30;
}

