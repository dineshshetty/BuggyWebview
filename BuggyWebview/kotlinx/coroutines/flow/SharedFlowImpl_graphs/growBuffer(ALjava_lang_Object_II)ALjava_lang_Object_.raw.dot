digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.growBuffer([Ljava\/lang\/Object;II)[Ljava\/lang\/Object;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:474)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|0x0001: IF  (r12 I:??[int, byte, short, char] A[D('newSize' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:22:0x0005 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|0x0003: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0028 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|0x0008: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r12 I:int A[D('newSize' int), IMMUTABLE_TYPE]) type: java.lang.Object[]  (LINE:475)\l0x000a: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x000b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:737)\l0x000c: IPUT  (r2 I:java.lang.Object[] A[D('it' java.lang.Object[])]), (r9 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.buffer java.lang.Object[]  (LINE:475)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|0x000e: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('curBuffer' java.lang.Object[])]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0011  (LINE:476)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|RETURN\l|0x0010: RETURN  (r1 I:java.lang.Object[] A[D('newBuffer' java.lang.Object[])]) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|0x0011: INVOKE  (r2 I:long) = (r9 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)] (LINE:477)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|LOOP_START\lLOOP:0: B:28:0x0016\-\>B:29:0x0018\l|0x0016: IF  (r0 I:??[int, byte, short, char]) \>= (r11 I:??[int, byte, short, char] A[D('curSize' int)])  \-\> B:33:0x0027 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|LOOP_END\lLOOP:0: B:28:0x0016\-\>B:29:0x0018\l|0x0018: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x001b: CAST (r5 I:long) = (long) (r4 I:int A[D('i' int)])  (LINE:479)\l0x001c: ARITH  (r5 I:long) = (r5 I:long) + (r2 I:long A[D('head' long)]) \l0x001d: CAST (r7 I:long) = (long) (r4 I:int A[D('i' int)]) \l0x001e: ARITH  (r7 I:long) = (r7 I:long) + (r2 I:long A[D('head' long)]) \l0x001f: INVOKE  (r7 I:java.lang.Object) = (r10 I:java.lang.Object[] A[D('curBuffer' java.lang.Object[])]), (r7 I:long) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$getBufferAt(java.lang.Object[], long):java.lang.Object A[MD:(java.lang.Object[], long):java.lang.Object (m)]\l0x0023: INVOKE  (r1 I:java.lang.Object[] A[D('newBuffer' java.lang.Object[])]), (r5 I:long), (r7 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$setBufferAt(java.lang.Object[], long, java.lang.Object):void A[MD:(java.lang.Object[], long, java.lang.Object):void (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|RETURN\l|0x0027: RETURN  (r1 I:java.lang.Object[] A[D('newBuffer' java.lang.Object[])])  (LINE:481)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0028|0x0028: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:737)\l0x002a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('$i$a$\-check\-SharedFlowImpl$growBuffer$1' int)]) =  java.lang.IllegalStateException \l0x002c: CONST_STR  (r1 I:java.lang.String) =  \"Buffer size overflow\" \l0x002e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0032: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0035|0x0035: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final java.lang.Object[] kotlinx.coroutines.flow.SharedFlowImpl.growBuffer((r9 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.Object[] A[D('curBuffer' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('curSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('newSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0018 \-\> B:28:0x0016, CROSS_EDGE: B:30:0x0027 \-\> B:18:?, CROSS_EDGE: B:32:0x0035 \-\> B:18:?, CROSS_EDGE: B:22:0x0005 \-\> B:23:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x000e: r2 'it' [Ljava\/lang\/Object;\l  0x000c\-0x000e: r3 '$i$a$\-also\-SharedFlowImpl$growBuffer$newBuffer$1' I\l  0x0019\-0x0027: r4 'i' I\l  0x000e\-0x0028: r1 'newBuffer' [Ljava\/lang\/Object;\l  0x0015\-0x0028: r2 'head' J\l  0x0029\-0x002a: r0 '$i$a$\-check\-SharedFlowImpl$growBuffer$1' I\l  \-1 \-0x0035: r10 'curBuffer' [Ljava\/lang\/Object;\l  \-1 \-0x0035: r11 'curSize' I\l  \-1 \-0x0035: r12 'newSize' I\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_18;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_33;
Node_29 -> Node_28;
Node_33 -> Node_30;
Node_30 -> Node_18;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_22 -> Node_23;
}

