digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryPeekLocked(Lkotlinx\/coroutines\/flow\/SharedFlowSlot;)J" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|long r0 = r8.index\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|if ((r0 \> getBufferEndIndex() ? 1 : (r0 == getBufferEndIndex() ? 0 : \-1)) \>= 0) goto L5\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|RETURN\l|return r0\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b}"];
Node_21 [shape=record,label="{21\:\ 0x000f|if (r7.bufferCapacity \<= 0) goto L8\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|RETURN\l|return \-1\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012}"];
Node_24 [shape=record,label="{24\:\ 0x0018|if ((r0 \> getHead() ? 1 : (r0 == getHead() ? 0 : \-1)) \<= 0) goto L11\l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|RETURN\l|return \-1\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b}"];
Node_27 [shape=record,label="{27\:\ 0x001d|if (r7.queueSize != 0) goto L14\l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|RETURN\l|return \-1\l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public final long kotlinx.coroutines.flow.SharedFlowImpl.tryPeekLocked((r7v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r8v0 'slot' kotlinx.coroutines.flow.SharedFlowSlot A[D('slot' kotlinx.coroutines.flow.SharedFlowSlot), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0011 \-\> B:16:?, CROSS_EDGE: B:25:0x001a \-\> B:16:?, CROSS_EDGE: B:28:0x001f \-\> B:16:?, CROSS_EDGE: B:29:0x0020 \-\> B:16:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_16;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_16;
Node_29 -> Node_16;
}

