digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryEmitNoCollectorsLocked(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_799130292 {
label = "R(2:(1:(1:8))|(2:(1:13)|(4:14|(1:16)|17|18)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_938748078 {
label = "IF [B:23:0x0005] THEN: R(1:(1:8)) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0005|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L3\l}"];
subgraph cluster_Region_325378230 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_11971687 {
label = "IF [B:28:0x0011] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0011|PHI: r2 \l  PHI: (r2v5 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((getNCollectors() == 0) == false) goto L7\l}"];
subgraph cluster_Region_555969191 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0019|throw new java.lang.AssertionError()\l}"];
}
}
}
}
subgraph cluster_Region_931436405 {
label = "R(2:(1:13)|(4:14|(1:16)|17|18))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_64073827 {
label = "IF [B:33:0x001c] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x001c|if (r6.replay == 0) goto L13\l}"];
subgraph cluster_Region_909238762 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x001e|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_667677595 {
label = "R(4:14|(1:16)|17|18)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x001f|enqueueLocked(r7)\lint int r0 = r6.bufferSize + 1\lr6.bufferSize = r0\l}"];
subgraph cluster_IfRegion_1540762496 {
label = "IF [B:36:0x0029] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0029|if (r0 \> r6.replay) goto L16\l}"];
subgraph cluster_Region_217961433 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x002b|dropOldestLocked()\l}"];
}
}
Node_38 [shape=record,label="{38\:\ 0x002e|r6.minCollectorIndex = getHead() + r6.bufferSize\l}"];
Node_39 [shape=record,label="{39\:\ 0x0038|RETURN\l|return true\l}"];
}
}
}
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0000}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0007}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x000c}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000e}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0014}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0010}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x001a}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.flow.SharedFlowImpl.tryEmitNoCollectorsLocked((r6v0 'this' kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r7v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x001e \-\> B:21:?, CROSS_EDGE: B:39:0x0038 \-\> B:21:?, CROSS_EDGE: B:36:0x0029 \-\> B:38:0x002e, CROSS_EDGE: B:27:0x0010 \-\> B:28:0x0011, CROSS_EDGE: B:23:0x0005 \-\> B:32:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Z\l}"];
MethodNode -> Node_20;Node_23 -> Node_24;
Node_23 -> Node_32[style=dashed];
Node_28 -> Node_30;
Node_28 -> Node_32[style=dashed];
Node_31 -> Node_21;
Node_33 -> Node_34;
Node_33 -> Node_35[style=dashed];
Node_34 -> Node_21;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_36 -> Node_38[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_30 -> Node_31;
Node_27 -> Node_28;
Node_32 -> Node_33;
}

