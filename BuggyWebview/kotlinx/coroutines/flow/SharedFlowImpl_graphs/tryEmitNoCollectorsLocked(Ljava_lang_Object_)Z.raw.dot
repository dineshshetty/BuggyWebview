digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryEmitNoCollectorsLocked(Ljava\/lang\/Object;)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:434)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x001a \l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:737)\l0x0008: INVOKE  (r2 I:int) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: VIRTUAL call: kotlinx.coroutines.flow.SharedFlowImpl.getNCollectors():int A[MD:():int (m)] (LINE:434)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0010 \l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|0x000e: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0014 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0016: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0019|0x0019: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0010|0x0010: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: IGET  (r0 I:int) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replay int  (LINE:435)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001f \l}"];
Node_34 [shape=record,label="{34\:\ 0x001e|RETURN\l|0x001e: RETURN  (r1 I:boolean) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001f|0x001f: INVOKE  (r6 I:kotlinx.coroutines.flow.SharedFlowImpl), (r7 I:java.lang.Object A[D('value' java.lang.Object)]) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.enqueueLocked(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:436)\l0x0022: IGET  (r0 I:int) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int  (LINE:437)\l0x0024: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0025: IPUT  (r0 I:int), (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int \l0x0027: IGET  (r2 I:int) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replay int  (LINE:439)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|0x0029: IF  (r0 I:??[int, byte, short, char]) \<= (r2 I:??[int, byte, short, char])  \-\> B:38:0x002e \l}"];
Node_37 [shape=record,label="{37\:\ 0x002b|0x002b: INVOKE  (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.dropOldestLocked():void A[MD:():void (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x002e|0x002e: INVOKE  (r2 I:long) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[MD:():long (m)] (LINE:440)\l0x0032: IGET  (r0 I:int) = (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int \l0x0034: CAST (r4 I:long) = (long) (r0 I:int) \l0x0035: ARITH  (r2 I:long) = (r2 I:long) + (r4 I:long) \l0x0036: IPUT  (r2 I:long), (r6 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.minCollectorIndex long \l}"];
Node_39 [shape=record,label="{39\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:boolean)  (LINE:441)\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.flow.SharedFlowImpl.tryEmitNoCollectorsLocked((r6 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r7 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x001e \-\> B:21:?, CROSS_EDGE: B:39:0x0038 \-\> B:21:?, CROSS_EDGE: B:36:0x0029 \-\> B:38:0x002e, CROSS_EDGE: B:27:0x0010 \-\> B:28:0x0011, CROSS_EDGE: B:23:0x0005 \-\> B:32:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0011: r0 '$i$a$\-assert\-SharedFlowImpl$tryEmitNoCollectorsLocked$1' I\l  \-1 \-0x0038: r7 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Z\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_32;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_32[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_21;
Node_27 -> Node_28;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_21;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_21;
}

