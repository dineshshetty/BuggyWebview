digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.tryEmitLocked(Ljava\/lang\/Object;)Z" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) type: VIRTUAL call: kotlinx.coroutines.flow.SharedFlowImpl.getNCollectors():int A[MD:():int (m)] (LINE:412)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x000b \l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl), (r15 I:java.lang.Object A[D('value' java.lang.Object)]) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.tryEmitNoCollectorsLocked(java.lang.Object):boolean A[MD:(T):boolean (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x000b|0x000b: IGET  (r0 I:int) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int  (LINE:415)\l0x000d: IGET  (r1 I:int) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferCapacity int \l0x000f: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|0x0010: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:39:0x002b \l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: IGET  (r0 I:long) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.minCollectorIndex long \l0x0014: IGET  (r3 I:long) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replayIndex long \l0x0016: CMP_L  (r5 I:int) = (r0 I:long), (r3 I:long) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|0x0018: IF  (r5 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:39:0x002b \l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|0x001a: IGET  (r0 I:kotlinx.coroutines.channels.BufferOverflow) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow  (LINE:416)\l0x001c: SGET  (r1 I:int[]) =  kotlinx.coroutines.flow.SharedFlowImpl.WhenMappings.$EnumSwitchMapping$0 int[] \l0x001e: INVOKE  (r0 I:int) = (r0 I:kotlinx.coroutines.channels.BufferOverflow) type: VIRTUAL call: kotlinx.coroutines.channels.BufferOverflow.ordinal():int A[MD:():int (c)]\l0x0022: AGET  (r0 I:??[int, float, short, byte, char]) = (r1 I:??[int, float][]), (r0 I:??[int, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|0x0024: SWITCH  (r0 I:??)\l case 1: goto B:37:0x0029\l case 2: goto B:36:0x0028\l default: goto B:39:0x002b \l}"];
Node_36 [shape=record,label="{36\:\ 0x0028|RETURN\l|0x0028: RETURN  (r2 I:boolean)  (LINE:418)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|RETURN\l|0x0029: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:417)\l0x002a: RETURN  (r0 I:boolean) \l}"];
Node_39 [shape=record,label="{39\:\ 0x002b|0x002b: INVOKE  (r14 I:kotlinx.coroutines.flow.SharedFlowImpl), (r15 I:java.lang.Object A[D('value' java.lang.Object)]) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.enqueueLocked(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:422)\l0x002e: IGET  (r0 I:int) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int  (LINE:423)\l0x0030: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int) \l0x0031: IPUT  (r0 I:int), (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferSize int \l0x0033: IGET  (r1 I:int) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.bufferCapacity int  (LINE:425)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0035|0x0035: IF  (r0 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:42:0x003a \l}"];
Node_41 [shape=record,label="{41\:\ 0x0037|0x0037: INVOKE  (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.dropOldestLocked():void A[MD:():void (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x003a|0x003a: INVOKE  (r0 I:int) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getReplaySize():int A[MD:():int (m)] (LINE:427)\l0x003e: IGET  (r1 I:int) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replay int \l}"];
Node_43 [shape=record,label="{43\:\ 0x0040|0x0040: IF  (r0 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:45:0x0056 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0042|0x0042: IGET  (r0 I:long) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.replayIndex long  (LINE:428)\l0x0044: CONST  (r3 I:??[long, double]) = (1 ??[long, double]) \l0x0046: ARITH  (r6 I:long) = (r0 I:long) + (r3 I:long) \l0x0048: IGET  (r8 I:long) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.minCollectorIndex long \l0x004a: INVOKE  (r10 I:long) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getBufferEndIndex():long A[MD:():long (m)]\l0x004e: INVOKE  (r12 I:long) = (r14 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getQueueEndIndex():long A[MD:():long (m)]\l0x0052: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY]) \l0x0053: INVOKE  (r5 I:kotlinx.coroutines.flow.SharedFlowImpl), (r6 I:long), (r8 I:long), (r10 I:long), (r12 I:long) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.updateBufferLocked(long, long, long, long):void A[MD:(long, long, long, long):void (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0056|RETURN\l|0x0056: RETURN  (r2 I:boolean)  (LINE:430)\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.flow.SharedFlowImpl.tryEmitLocked((r14 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r15 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:36:0x0028 \-\> B:24:?, CROSS_EDGE: B:38:0x002a \-\> B:24:?, CROSS_EDGE: B:45:0x0056 \-\> B:24:?, CROSS_EDGE: B:43:0x0040 \-\> B:45:0x0056, CROSS_EDGE: B:40:0x0035 \-\> B:42:0x003a, CROSS_EDGE: B:32:0x0018 \-\> B:39:0x002b, CROSS_EDGE: B:30:0x0010 \-\> B:39:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x005f: r15 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Z\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_24;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_39;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_39;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_37;
Node_34 -> Node_39;
Node_36 -> Node_24;
Node_37 -> Node_24;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_45;
Node_45 -> Node_24;
}

