digraph "CFG forkotlinx.coroutines.flow.SharedFlowImpl.cancelEmitter(Lkotlinx\/coroutines\/flow\/SharedFlowImpl$Emitter;)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:507)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0001|0x0001: MONITOR_ENTER  (r7 I:??[OBJECT, ARRAY])  (LINE:757)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0002|0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x002e, blocks: (B:27:0x0003, B:32:0x000f, B:36:0x001e), top: B:42:0x0003 \}\lCatch: all \-\> 0x002e\l|0x0003: IGET  (r2 I:long) = (r8 I:kotlinx.coroutines.flow.SharedFlowImpl$Emitter A[D('emitter' kotlinx.coroutines.flow.SharedFlowImpl$Emitter)]) kotlinx.coroutines.flow.SharedFlowImpl.Emitter.index long A[Catch: all \-\> 0x002e, TRY_ENTER] (LINE:508)\l0x0005: INVOKE  (r4 I:long) = (r7 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.getHead():long A[Catch: all \-\> 0x002e, MD:():long (m), TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0009|0x0009: CMP_L  (r6 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000b|0x000b: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:32:0x000f \l}"];
Node_30 [shape=record,label="{30\:\ 0x000d|0x000d: MONITOR_EXIT  (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|RETURN\l|0x000e: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000f|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x002e, blocks: (B:27:0x0003, B:32:0x000f, B:36:0x001e), top: B:42:0x0003 \}\lCatch: all \-\> 0x002e\l|0x000f: IGET  (r2 I:java.lang.Object[]) = (r7 I:kotlinx.coroutines.flow.SharedFlowImpl) kotlinx.coroutines.flow.SharedFlowImpl.buffer java.lang.Object[] A[Catch: all \-\> 0x002e, TRY_ENTER] (LINE:509)\l0x0011: INVOKE  (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[Catch: all \-\> 0x002e, MD:(java.lang.Object):void (m)]\l0x0014: IGET  (r3 I:long) = (r8 I:kotlinx.coroutines.flow.SharedFlowImpl$Emitter A[D('emitter' kotlinx.coroutines.flow.SharedFlowImpl$Emitter)]) kotlinx.coroutines.flow.SharedFlowImpl.Emitter.index long A[Catch: all \-\> 0x002e] (LINE:510)\l0x0016: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.lang.Object[] A[D('buffer' java.lang.Object[])]), (r3 I:long) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$getBufferAt(java.lang.Object[], long):java.lang.Object A[Catch: all \-\> 0x002e, MD:(java.lang.Object[], long):java.lang.Object (m), TRY_LEAVE]\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|0x001a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('emitter' kotlinx.coroutines.flow.SharedFlowImpl$Emitter)])  \-\> B:36:0x001e \l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|0x001c: MONITOR_EXIT  (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|RETURN\l|0x001d: RETURN   \l}"];
Node_36 [shape=record,label="{36\:\ 0x001e|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x002e, blocks: (B:27:0x0003, B:32:0x000f, B:36:0x001e), top: B:42:0x0003 \}\lCatch: all \-\> 0x002e\l|0x001e: IGET  (r3 I:long) = (r8 I:kotlinx.coroutines.flow.SharedFlowImpl$Emitter A[D('emitter' kotlinx.coroutines.flow.SharedFlowImpl$Emitter)]) kotlinx.coroutines.flow.SharedFlowImpl.Emitter.index long A[Catch: all \-\> 0x002e, TRY_ENTER] (LINE:511)\l0x0020: SGET  (r5 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE kotlinx.coroutines.internal.Symbol A[Catch: all \-\> 0x002e]\l0x0022: INVOKE  (r2 I:java.lang.Object[] A[D('buffer' java.lang.Object[])]), (r3 I:long), (r5 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.access$setBufferAt(java.lang.Object[], long, java.lang.Object):void A[Catch: all \-\> 0x002e, MD:(java.lang.Object[], long, java.lang.Object):void (m)]\l0x0025: INVOKE  (r7 I:kotlinx.coroutines.flow.SharedFlowImpl) type: DIRECT call: kotlinx.coroutines.flow.SharedFlowImpl.cleanupTailLocked():void A[Catch: all \-\> 0x002e, MD:():void (m)] (LINE:512)\l0x0029: SGET  (r1 I:kotlin.Unit A[D('$i$a$\-synchronized\-SharedFlowImpl$cancelEmitter$1' int)]) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x002e, TRY_LEAVE]\l}"];
Node_37 [shape=record,label="{37\:\ 0x002b|0x002b: MONITOR_EXIT  (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|RETURN\l|0x002d: RETURN    (LINE:513)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_39 [shape=record,label="{39\:\ 0x002e|ExcHandler: all \-\> 0x002e\l|0x002e: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x002e]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0030|0x0030: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.flow.SharedFlowImpl.cancelEmitter((r7 'this' I:kotlinx.coroutines.flow.SharedFlowImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlinx.coroutines.flow.SharedFlowImpl$Emitter A[D('emitter' kotlinx.coroutines.flow.SharedFlowImpl$Emitter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x001d \-\> B:23:?, CROSS_EDGE: B:38:0x002d \-\> B:23:?, CROSS_EDGE: B:41:0x0030 \-\> B:23:?, CROSS_EDGE: B:42:0x0003 \-\> B:39:0x002e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000d: r0 '$i$f$synchronized' I\l  0x0003\-0x000d: r1 '$i$a$\-synchronized\-SharedFlowImpl$cancelEmitter$1' I\l  0x000f\-0x001c: r0 '$i$f$synchronized' I\l  0x000f\-0x001c: r1 '$i$a$\-synchronized\-SharedFlowImpl$cancelEmitter$1' I\l  0x0014\-0x001c: r2 'buffer' [Ljava\/lang\/Object;\l  0x001e\-0x0029: r1 '$i$a$\-synchronized\-SharedFlowImpl$cancelEmitter$1' I\l  0x001e\-0x0029: r2 'buffer' [Ljava\/lang\/Object;\l  0x001e\-0x002d: r0 '$i$f$synchronized' I\l  0x002e\-0x0030: r0 '$i$f$synchronized' I\l  \-1 \-0x0030: r8 'emitter' Lkotlinx\/coroutines\/flow\/SharedFlowImpl$Emitter;\lTYPE_VARS: [T]\lTryCatch #0 \{all \-\> 0x002e, blocks: (B:27:0x0003, B:32:0x000f, B:36:0x001e), top: B:42:0x0003 \}\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_42;
Node_42 -> Node_27;
Node_42 -> Node_39;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_23;
Node_36 -> Node_37;
Node_36 -> Node_43;
Node_37 -> Node_38;
Node_38 -> Node_23;
Node_43 -> Node_39;
Node_39 -> Node_41;
Node_41 -> Node_23;
}

