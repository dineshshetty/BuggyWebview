digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector_commonKt.checkContext(Lkotlinx\/coroutines\/flow\/internal\/SafeCollector;Lkotlin\/coroutines\/CoroutineContext;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|int r0 = ((java.lang.Number) r5.fold(0, new kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1(r4))).intValue()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|if (r0 != r4.collectContextSize) goto L5\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Flow invariant is violated:nttFlow was collected in \")\lr2.append(r4.collectContext)\lr2.append(\",nttbut emission happened in \")\lr2.append(r5)\lr2.append(\".nttPlease refer to 'flow' documentation or use 'flowOn' instead\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0047|throw new java.lang.IllegalStateException(r2.toString().toString())\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.flow.internal.SafeCollector_commonKt.checkContext((r4v0 kotlinx.coroutines.flow.internal.SafeCollector\<?\> A[D('$this$checkContext' kotlinx.coroutines.flow.internal.SafeCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'currentContext' kotlin.coroutines.CoroutineContext A[D('currentContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:13:0x0047 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/internal\/SafeCollector\<*\>;Lkotlin\/coroutines\/CoroutineContext;)V\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [85=5]\}\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

