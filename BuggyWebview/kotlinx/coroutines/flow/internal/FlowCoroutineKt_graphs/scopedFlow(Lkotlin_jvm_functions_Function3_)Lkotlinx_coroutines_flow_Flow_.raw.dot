digraph "CFG forkotlinx.coroutines.flow.internal.FlowCoroutineKt.scopedFlow(Lkotlin\/jvm\/functions\/Function3;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:50)\l0x0001: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1) =  kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1  (LINE:64)\l0x0003: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1)\l  (r2 I:kotlin.jvm.functions.Function3 A[D('block' kotlin.jvm.functions.Function3)])\l type: DIRECT call: kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$$inlined$unsafeFlow$1.\<init\>(kotlin.jvm.functions.Function3):void A[MD:(kotlin.jvm.functions.Function3):void (m)]\l0x0006: CHECK_CAST (r1 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN  (r1 I:kotlinx.coroutines.flow.Flow\<R\>)  (LINE:52)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<R\> kotlinx.coroutines.flow.internal.FlowCoroutineKt.scopedFlow((r2 I:kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.CoroutineScope, ? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[D('block' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0008: r0 '$i$f$unsafeFlow' I\l  \-1 \-0x0008: r2 'block' Lkotlin\/jvm\/functions\/Function3;\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Lkotlin\/jvm\/functions\/Function3\<\-Lkotlinx\/coroutines\/CoroutineScope;\-Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TR;\>;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TR;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

