digraph "CFG forkotlinx.coroutines.flow.internal.UndispatchedContextCollector.\<init\>(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/CoroutineContext;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r2.emitContext = r4\lr2.countOrElement = kotlinx.coroutines.internal.ThreadContext.threadContextElements(r4)\lr2.emitRef = new kotlinx.coroutines.flow.internal.UndispatchedContextCollector$emitRef$1(r3, null)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.internal.UndispatchedContextCollector.\<init\>((r2v0 'this' kotlinx.coroutines.flow.internal.UndispatchedContextCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 kotlinx.coroutines.flow.FlowCollector\<? super T\> A[D('downstream' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'emitContext' kotlin.coroutines.CoroutineContext A[D('emitContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/CoroutineContext;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

