digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.\<init\>(Lkotlinx\/coroutines\/flow\/Flow;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:183)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|0x0002: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0008 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: SGET  (r2 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:185)\l0x0006: CHECK_CAST (r2 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:183)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000d \l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|0x000c: CONST  (r3 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char])  (LINE:186)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char])  (LINE:183)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0013 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: SGET  (r4 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow  (LINE:187)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl)\l  (r1 I:kotlinx.coroutines.flow.Flow)\l  (r2 I:kotlin.coroutines.CoroutineContext)\l  (r3 I:int)\l  (r4 I:kotlinx.coroutines.channels.BufferOverflow)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.\<init\>(kotlinx.coroutines.flow.Flow, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void (m)] (LINE:183)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|RETURN\l|0x0016: RETURN    (LINE:196)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl.\<init\>((r0 'this' I:kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlinx.coroutines.flow.Flow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.coroutines.CoroutineContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlinx.coroutines.channels.BufferOverflow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:22:0x000f \-\> B:24:0x0013, CROSS_EDGE: B:19:0x000a \-\> B:21:0x000d, CROSS_EDGE: B:16:0x0002 \-\> B:18:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [183=4]\}\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

