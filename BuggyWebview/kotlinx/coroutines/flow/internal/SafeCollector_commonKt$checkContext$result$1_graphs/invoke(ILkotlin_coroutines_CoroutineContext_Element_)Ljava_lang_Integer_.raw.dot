digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1.invoke(ILkotlin\/coroutines\/CoroutineContext$Element;)Ljava\/lang\/Integer;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Key) = (r9 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element)]) type: INTERFACE call: kotlin.coroutines.CoroutineContext.Element.getKey():kotlin.coroutines.CoroutineContext$Key A[MD:():kotlin.coroutines.CoroutineContext$Key\<?\> (m)] (LINE:26)\l0x0004: IGET  (r1 I:kotlinx.coroutines.flow.internal.SafeCollector\<?\>) = (r7 I:kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1) kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1.$this_checkContext kotlinx.coroutines.flow.internal.SafeCollector  (LINE:27)\l0x0006: IGET  (r1 I:kotlin.coroutines.CoroutineContext) = (r1 I:kotlinx.coroutines.flow.internal.SafeCollector) kotlinx.coroutines.flow.internal.SafeCollector.collectContext kotlin.coroutines.CoroutineContext \l0x0008: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext$Element) = \l  (r1 I:kotlin.coroutines.CoroutineContext)\l  (r0 I:kotlin.coroutines.CoroutineContext$Key A[D('key' kotlin.coroutines.CoroutineContext$Key)])\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x000c: SGET  (r2 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key  (LINE:28)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('key' kotlin.coroutines.CoroutineContext$Key)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('collectElement' kotlin.coroutines.CoroutineContext$Element)])  \-\> B:6:0x0015  (LINE:29)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r2 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|RETURN\l|0x001b: RETURN  (r2 I:java.lang.Integer)  (LINE:29)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: ARITH  (r2 I:int) = (r8 I:int A[D('count' int)]) + (1 int)  (LINE:30)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('collectElement' kotlin.coroutines.CoroutineContext$Element)])  (LINE:33)\l0x001d: CHECK_CAST (r2 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r2 I:??[OBJECT, ARRAY]) \l0x001f: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)])  (LINE:34)\l0x0020: CHECK_CAST (r3 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r3 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r3 I:kotlinx.coroutines.Job) = (r3 I:kotlinx.coroutines.Job), (r2 I:kotlinx.coroutines.Job A[D('collectJob' kotlinx.coroutines.Job)]) type: STATIC call: kotlinx.coroutines.flow.internal.SafeCollector_commonKt.transitiveCoroutineParent(kotlinx.coroutines.Job, kotlinx.coroutines.Job):kotlinx.coroutines.Job A[MD:(kotlinx.coroutines.Job, kotlinx.coroutines.Job):kotlinx.coroutines.Job (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('emissionParentJob' kotlinx.coroutines.Job)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('collectJob' kotlinx.coroutines.Job)])  \-\> B:16:0x0033  (LINE:66)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('collectJob' kotlinx.coroutines.Job)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002c  (LINE:81)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|0x002e: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|RETURN\l|0x0032: RETURN  (r4 I:java.lang.Integer) \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: ARITH  (r4 I:int) = (r8 I:int A[D('count' int)]) + (1 int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0033: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:67)\l0x0035: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:68)\l0x0037: INVOKE  (r5 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x003a: CONST_STR  (r6 I:java.lang.String) =  \"Flow invariant is violated:nttEmission from another coroutine is detected.nttChild of \" \l0x003c: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0040: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.Object A[D('emissionParentJob' kotlinx.coroutines.Job)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)] (LINE:68)\l0x0044: CONST_STR  (r6 I:java.lang.String) =  \", expected child of \"  (LINE:68)\l0x0046: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x004a: INVOKE  (r5 I:java.lang.StringBuilder), (r2 I:java.lang.Object A[D('collectJob' kotlinx.coroutines.Job)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)] (LINE:68)\l0x004e: CONST_STR  (r6 I:java.lang.String) =  \".nttFlowCollector is not thread\-safe and concurrent emissions are prohibited.nttTo mitigate this restriction please use 'channelFlow' builder instead of 'flow'\"  (LINE:68)\l0x0050: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0053: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0057: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005b: INVOKE  (r4 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final java.lang.Integer kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1.invoke((r7 'this' I:kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1 A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:6:0x0015 \-\> B:7:0x0017, CROSS_EDGE: B:15:0x0032 \-\> B:1:?, CROSS_EDGE: B:13:0x002c \-\> B:14:0x002e, CROSS_EDGE: B:17:0x005e \-\> B:1:?\lDebug Info:\l  0x0004\-0x005e: r0 'key' Lkotlin\/coroutines\/CoroutineContext$Key;\l  0x000c\-0x005e: r1 'collectElement' Lkotlin\/coroutines\/CoroutineContext$Element;\l  0x001f\-0x005e: r2 'collectJob' Lkotlinx\/coroutines\/Job;\l  0x0026\-0x005e: r3 'emissionParentJob' Lkotlinx\/coroutines\/Job;\l  \-1 \-0x005e: r8 'count' I\l  \-1 \-0x005e: r9 'element' Lkotlin\/coroutines\/CoroutineContext$Element;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [68=5]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_6 -> Node_7;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_13 -> Node_14;
Node_16 -> Node_17;
Node_17 -> Node_1;
}

