digraph "CFG forkotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0004: IGET  (r1 I:int) = (r6 I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1) kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1.label int  (LINE:51)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: SWITCH  (r1 I:??)\l case 0: goto B:7:0x0016\l case 1: goto B:6:0x0011\l default: goto B:4:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000d: INVOKE  (r7 I:java.lang.IllegalStateException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r7 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: SGET  (r1 I:kotlin.Unit A[D('this' kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1)]) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|RETURN\l|0x002f: RETURN  (r1 I:java.lang.Object) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: INVOKE  (r7 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0019: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x001a: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1 A[D('this' kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1)])\l kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1.L$0 java.lang.Object \l0x001c: CHECK_CAST (r2 I:kotlinx.coroutines.CoroutineScope) = (kotlinx.coroutines.CoroutineScope) (r2 I:??[OBJECT, ARRAY]) \l0x001e: IGET  (r3 I:kotlin.jvm.functions.Function3\<kotlinx.coroutines.CoroutineScope, kotlinx.coroutines.flow.FlowCollector\<? super R\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>, java.lang.Object\>) = \l  (r1 I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1 A[D('this' kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1)])\l kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1.$block kotlin.jvm.functions.Function3 \l0x0020: IGET  (r4 I:kotlinx.coroutines.flow.FlowCollector\<R\>) = \l  (r1 I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1 A[D('this' kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1)])\l kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1.$this_unsafeFlow kotlinx.coroutines.flow.FlowCollector \l0x0022: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0023: IPUT  \l  (r5 I:int)\l  (r1 I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1 A[D('this' kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1)])\l kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1.label int \l0x0025: INVOKE  (r2 I:java.lang.Object A[D('$this$flowScope' kotlinx.coroutines.CoroutineScope)]) = \l  (r3 I:kotlin.jvm.functions.Function3)\l  (r2 I:java.lang.Object A[D('$this$flowScope' kotlinx.coroutines.CoroutineScope)])\l  (r4 I:java.lang.Object)\l  (r1 I:java.lang.Object A[D('this' kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1)])\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|0x0029: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$flowScope' kotlinx.coroutines.CoroutineScope)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x002c \l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:java.lang.Object) \l}"];
Node_10 [shape=record,label="{10\:\ 0x002c|0x002c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1)]) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1.invokeSuspend((r6 'this' I:kotlinx.coroutines.flow.internal.FlowCoroutineKt$scopedFlow$1$1 A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x002f \-\> B:1:?, CROSS_EDGE: B:9:0x002b \-\> B:1:?, CROSS_EDGE: B:10:0x002c \-\> B:11:0x002d\lDebug Info:\l  0x0012\-0x0016: r0 'this' Lkotlinx\/coroutines\/flow\/internal\/FlowCoroutineKt$scopedFlow$1$1;\l  0x0012\-0x0016: r7 '$result' Ljava\/lang\/Object;\l  0x001e\-0x0029: r2 '$this$flowScope' Lkotlinx\/coroutines\/CoroutineScope;\l  0x001a\-0x002d: r1 'this' Lkotlinx\/coroutines\/flow\/internal\/FlowCoroutineKt$scopedFlow$1$1;\l  0x002d\-0x0037: r0 'this' Lkotlinx\/coroutines\/flow\/internal\/FlowCoroutineKt$scopedFlow$1$1;\l  0x001a\-0x0037: r7 '$result' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_1;
Node_10 -> Node_11;
}

