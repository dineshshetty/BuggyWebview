digraph "CFG forkotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1.collect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('collector' kotlinx.coroutines.flow.FlowCollector)])  (LINE:108)\l0x0001: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('$completion' kotlin.coroutines.Continuation)]) \l0x0002: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: NEW_INSTANCE  (r8 I:kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1) =  kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1  (LINE:113)\l0x0005: IGET  (r2 I:kotlinx.coroutines.flow.Flow) = (r9 I:kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1) kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1.$flow2$inlined kotlinx.coroutines.flow.Flow \l0x0007: IGET  (r3 I:kotlinx.coroutines.flow.Flow) = (r9 I:kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1) kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1.$flow$inlined kotlinx.coroutines.flow.Flow \l0x0009: IGET  (r4 I:kotlin.jvm.functions.Function3) = (r9 I:kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1) kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1.$transform$inlined kotlin.jvm.functions.Function3 \l0x000b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1)\l  (r1 I:kotlinx.coroutines.flow.FlowCollector A[D('$this$zipImpl_u24lambda_u2d0' kotlinx.coroutines.flow.FlowCollector)])\l  (r2 I:kotlinx.coroutines.flow.Flow)\l  (r3 I:kotlinx.coroutines.flow.Flow)\l  (r4 I:kotlin.jvm.functions.Function3)\l  (r5 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1.\<init\>(kotlinx.coroutines.flow.FlowCollector, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.Flow, kotlin.jvm.functions.Function3, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.FlowCollector\<? super R\>, kotlinx.coroutines.flow.Flow\<? extends T2\>, kotlinx.coroutines.flow.Flow\<? extends T1\>, kotlin.jvm.functions.Function3\<? super T1, ? super T2, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.internal.CombineKt$zipImpl$1$1\>):void (m)]\l0x0010: CHECK_CAST (r8 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r8 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r0 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function2)\l  (r11 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: STATIC call: kotlinx.coroutines.CoroutineScopeKt.coroutineScope(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation):java.lang.Object A[MD:\<R\>:(kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.CoroutineScope, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super R\>):java.lang.Object (m)]\l0x0016: INVOKE  (r2 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001d \l}"];
Node_4 [shape=record,label="{4\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001e: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|RETURN\l|0x0020: RETURN  (r0 I:java.lang.Object)  (LINE:109)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1.collect((r9 'this' I:kotlinx.coroutines.flow.internal.CombineKt$zipImpl$$inlined$unsafeFlow$1 A[IMMUTABLE_TYPE, THIS]), (r10 I:kotlinx.coroutines.flow.FlowCollector\<? super R\> A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0020 \-\> B:1:?\lDebug Info:\l  0x0001\-0x001e: r1 '$this$zipImpl_u24lambda_u2d0' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  0x0002\-0x001e: r6 '$completion' Lkotlin\/coroutines\/Continuation;\l  0x0003\-0x001e: r7 '$i$a$\-unsafeFlow\-CombineKt$zipImpl$1' I\l  \-1 \-0x0020: r10 'collector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0020: r11 '$completion' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TR;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

