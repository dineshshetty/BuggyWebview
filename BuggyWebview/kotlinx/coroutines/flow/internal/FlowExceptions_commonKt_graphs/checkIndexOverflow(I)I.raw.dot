digraph "CFG forkotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkIndexOverflow(I)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0001|0x0001: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:12:0x0004  (LINE:32)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0003|RETURN\l|0x0003: RETURN  (r3 I:int A[D('index' int)])  (LINE:35)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: NEW_INSTANCE  (r1 I:java.lang.ArithmeticException) =  java.lang.ArithmeticException  (LINE:33)\l0x0006: CONST_STR  (r2 I:java.lang.String) =  \"Index overflow has happened\" \l0x0008: INVOKE  (r1 I:java.lang.ArithmeticException), (r2 I:java.lang.String) type: DIRECT call: java.lang.ArithmeticException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|0x000b: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkIndexOverflow((r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000b \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000b: r0 '$i$f$checkIndexOverflow' I\l  \-1 \-0x000b: r3 'index' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

