digraph "CFG forkotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkOwnership(Lkotlinx\/coroutines\/flow\/internal\/AbortFlowException;Lkotlinx\/coroutines\/flow\/FlowCollector;)V" {
Node_6 [shape=record,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.flow.FlowCollector) = \l  (r1 I:kotlinx.coroutines.flow.internal.AbortFlowException A[D('$this$checkOwnership' kotlinx.coroutines.flow.internal.AbortFlowException)])\l type: VIRTUAL call: kotlinx.coroutines.flow.internal.AbortFlowException.getOwner():kotlinx.coroutines.flow.FlowCollector A[MD:():kotlinx.coroutines.flow.FlowCollector\<?\> (m)] (LINE:21)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('owner' kotlinx.coroutines.flow.FlowCollector)])  \-\> B:11:0x0007 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|RETURN\l|0x0006: RETURN    (LINE:22)\l}"];
Node_7 [shape=record,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: THROW  (r1 I:java.lang.Throwable A[D('$this$checkOwnership' kotlinx.coroutines.flow.internal.AbortFlowException)])  (LINE:21)\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.flow.internal.FlowExceptions_commonKt.checkOwnership((r1 I:kotlinx.coroutines.flow.internal.AbortFlowException A[D('$this$checkOwnership' kotlinx.coroutines.flow.internal.AbortFlowException), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlinx.coroutines.flow.FlowCollector\<?\> A[D('owner' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0007 \-\> B:7:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r1 '$this$checkOwnership' Lkotlinx\/coroutines\/flow\/internal\/AbortFlowException;\l  \-1 \-0x0007: r2 'owner' Lkotlinx\/coroutines\/flow\/FlowCollector;\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/internal\/AbortFlowException;Lkotlinx\/coroutines\/flow\/FlowCollector\<*\>;)V\l}"];
MethodNode -> Node_6;Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_7;
Node_11 -> Node_7;
}

