digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowTransformLatest.flowCollect(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:24)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0012 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:101)\l0x0007: INSTANCE_OF  (r0 I:boolean A[D('$i$a$\-assert\-ChannelFlowTransformLatest$flowCollect$2' int)]) = (r3 I:??[OBJECT, ARRAY] A[D('collector' kotlinx.coroutines.flow.FlowCollector)]) kotlinx.coroutines.flow.internal.SendingCollector  (LINE:24)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-ChannelFlowTransformLatest$flowCollect$2' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000c \l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x000e: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|0x0011: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3) =  kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3  (LINE:25)\l0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3)\l  (r2 I:kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest)\l  (r3 I:kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector)])\l  (r1 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3.\<init\>(kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest, kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest\<T, R\>, kotlinx.coroutines.flow.FlowCollector\<? super R\>, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest$flowCollect$3\>):void (m)]\l0x0018: CHECK_CAST (r0 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r0 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:kotlin.jvm.functions.Function2)\l  (r4 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: STATIC call: kotlinx.coroutines.CoroutineScopeKt.coroutineScope(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation):java.lang.Object A[MD:\<R\>:(kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.CoroutineScope, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super R\>):java.lang.Object (m)]\l0x001e: INVOKE  (r1 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0025 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0024|RETURN\l|0x0024: RETURN  (r0 I:java.lang.Object) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0025|0x0025: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|RETURN\l|0x0027: RETURN  (r0 I:java.lang.Object)  (LINE:38)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest.flowCollect((r2 'this' I:kotlinx.coroutines.flow.internal.ChannelFlowTransformLatest\<T, R\> A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.flow.FlowCollector\<? super R\> A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0024 \-\> B:15:?, CROSS_EDGE: B:27:0x0027 \-\> B:15:?, CROSS_EDGE: B:17:0x0004 \-\> B:23:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TR;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x0007\-0x0009: r0 '$i$a$\-assert\-ChannelFlowTransformLatest$flowCollect$2' I\l  \-1 \-0x0027: r3 'collector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0027: r4 '$completion' Lkotlin\/coroutines\/Continuation;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlowOperator.flowCollect(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_23[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_15;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

