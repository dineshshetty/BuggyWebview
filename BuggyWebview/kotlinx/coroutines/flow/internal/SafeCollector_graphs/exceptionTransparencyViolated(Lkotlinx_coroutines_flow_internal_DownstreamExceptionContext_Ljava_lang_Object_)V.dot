digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector.exceptionTransparencyViolated(Lkotlinx\/coroutines\/flow\/internal\/DownstreamExceptionContext;Ljava\/lang\/Object;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"n            Flow exception transparency is violated:n                Previous 'emit' call has thrown exception \")\lr1.append(r4.f221e)\lr1.append(\", but then emission attempt of value '\")\lr1.append(r5)\lr1.append(\"' has been detected.n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.n                For a more detailed explanation, please refer to Flow documentation.n            \")\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|throw new java.lang.IllegalStateException(kotlin.text.StringsKt.trimIndent(r1.toString()).toString())\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.internal.SafeCollector.exceptionTransparencyViolated((r3v0 'this' kotlinx.coroutines.flow.internal.SafeCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'exception' kotlinx.coroutines.flow.internal.DownstreamExceptionContext A[D('exception' kotlinx.coroutines.flow.internal.DownstreamExceptionContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'value' java.lang.Object A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [135=5]\}\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

