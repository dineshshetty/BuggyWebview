digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector.checkContext(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;Ljava\/lang\/Object;)V" {
subgraph cluster_Region_856363207 {
label = "R(2:(1:3)|4)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_408635289 {
label = "IF [B:10:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|if ((r3 instanceof kotlinx.coroutines.flow.internal.DownstreamExceptionContext) != false) goto L3\l}"];
subgraph cluster_Region_1267255151 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|exceptionTransparencyViolated((kotlinx.coroutines.flow.internal.DownstreamExceptionContext) r3, r4)\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x000a|kotlinx.coroutines.flow.internal.SafeCollector_commonKt.checkContext(r1, r2)\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000d}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.internal.SafeCollector.checkContext((r1v0 'this' kotlinx.coroutines.flow.internal.SafeCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r2v0 'currentContext' kotlin.coroutines.CoroutineContext A[D('currentContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'previousContext' kotlin.coroutines.CoroutineContext A[D('previousContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;TT;)V\l}"];
MethodNode -> Node_7;Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_13 -> Node_8;
}

