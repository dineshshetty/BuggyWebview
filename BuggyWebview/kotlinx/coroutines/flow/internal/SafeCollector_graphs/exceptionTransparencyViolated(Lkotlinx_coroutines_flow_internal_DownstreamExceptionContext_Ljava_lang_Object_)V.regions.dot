digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector.exceptionTransparencyViolated(Lkotlinx\/coroutines\/flow\/internal\/DownstreamExceptionContext;Ljava\/lang\/Object;)V" {
subgraph cluster_Region_1602861956 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x0030|throw new java.lang.IllegalStateException(kotlin.text.StringsKt.trimIndent(\"n            Flow exception transparency is violated:n                Previous 'emit' call has thrown exception \" + r4.f221e + \", but then emission attempt of value '\" + r5 + \"' has been detected.n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.n                For a more detailed explanation, please refer to Flow documentation.n            \").toString())\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.internal.SafeCollector.exceptionTransparencyViolated((r3v0 'this' kotlinx.coroutines.flow.internal.SafeCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'exception' kotlinx.coroutines.flow.internal.DownstreamExceptionContext A[D('exception' kotlinx.coroutines.flow.internal.DownstreamExceptionContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'value' java.lang.Object A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [135=5]\}\l}"];
MethodNode -> Node_4;Node_6 -> Node_7;
Node_7 -> Node_5;
Node_4 -> Node_6;
}

