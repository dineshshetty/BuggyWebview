digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector.emit(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_32 [shape=record,label="{32\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x001b, blocks: (B:20:0x0003), top: B:32:0x0003 \}\lCatch: all \-\> 0x001b\l|java.lang.Object r2 = emit(r7, r6)     \/\/ Catch: java.lang.Throwable \-\> L1b\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008}"];
Node_22 [shape=record,label="{22\:\ 0x000c|if (r2 != kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L7\l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|kotlin.coroutines.jvm.internal.DebugProbes.probeCoroutineSuspended(r7)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0011}"];
Node_25 [shape=record,label="{25\:\ 0x0015|if (r2 != kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L11\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|RETURN\l|return r2\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018}"];
Node_28 [shape=record,label="{28\:\ 0x001a|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|ExcHandler: all \-\> 0x001b\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|r5.lastEmissionContext = new kotlinx.coroutines.flow.internal.DownstreamExceptionContext(r2, r7.getContext())\l}"];
Node_31 [shape=record,label="{31\:\ 0x0029|throw r2\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.internal.SafeCollector.emit((r5v0 'this' kotlinx.coroutines.flow.internal.SafeCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r6v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x001a \-\> B:18:?, CROSS_EDGE: B:22:0x000c \-\> B:24:0x0011, CROSS_EDGE: B:31:0x0029 \-\> B:18:?, CROSS_EDGE: B:32:0x0003 \-\> B:29:0x001b\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x001b, blocks: (B:20:0x0003), top: B:32:0x0003 \}\lTYPE_VARS: [T]\lSIGNATURE: (TT;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.FlowCollector.emit(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_32;
Node_32 -> Node_20;
Node_32 -> Node_29;
Node_20 -> Node_21;
Node_20 -> Node_33;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_18;
Node_27 -> Node_28;
Node_28 -> Node_18;
Node_33 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_18;
}

