digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector.emit(Lkotlin\/coroutines\/Continuation;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = (r6 I:kotlin.coroutines.Continuation A[D('uCont' kotlin.coroutines.Continuation)]) type: INTERFACE call: kotlin.coroutines.Continuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:78)\l0x0004: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext A[D('currentContext' kotlin.coroutines.CoroutineContext)]) type: STATIC call: kotlinx.coroutines.JobKt.ensureActive(kotlin.coroutines.CoroutineContext):void A[MD:(kotlin.coroutines.CoroutineContext):void (m)] (LINE:79)\l0x0007: IGET  (r1 I:kotlin.coroutines.CoroutineContext) = (r5 I:kotlinx.coroutines.flow.internal.SafeCollector) kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext kotlin.coroutines.CoroutineContext  (LINE:81)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previousContext' kotlin.coroutines.CoroutineContext)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentContext' kotlin.coroutines.CoroutineContext)])  \-\> B:14:0x0010  (LINE:82)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|0x000b: INVOKE  \l  (r5 I:kotlinx.coroutines.flow.internal.SafeCollector)\l  (r0 I:kotlin.coroutines.CoroutineContext A[D('currentContext' kotlin.coroutines.CoroutineContext)])\l  (r1 I:kotlin.coroutines.CoroutineContext A[D('previousContext' kotlin.coroutines.CoroutineContext)])\l  (r7 I:java.lang.Object A[D('value' java.lang.Object)])\l type: DIRECT call: kotlinx.coroutines.flow.internal.SafeCollector.checkContext(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext, java.lang.Object):void A[MD:(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext, T):void (m)] (LINE:83)\l0x000e: IPUT  \l  (r0 I:kotlin.coroutines.CoroutineContext A[D('currentContext' kotlin.coroutines.CoroutineContext)])\l  (r5 I:kotlinx.coroutines.flow.internal.SafeCollector)\l kotlinx.coroutines.flow.internal.SafeCollector.lastEmissionContext kotlin.coroutines.CoroutineContext  (LINE:84)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0010|0x0010: IPUT  \l  (r6 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('uCont' kotlin.coroutines.Continuation)])\l  (r5 I:kotlinx.coroutines.flow.internal.SafeCollector)\l kotlinx.coroutines.flow.internal.SafeCollector.completion kotlin.coroutines.Continuation  (LINE:86)\l0x0012: INVOKE  (r2 I:kotlin.jvm.functions.Function3) =  type: STATIC call: kotlinx.coroutines.flow.internal.SafeCollectorKt.access$getEmitFun$p():kotlin.jvm.functions.Function3 A[MD:():kotlin.jvm.functions.Function3 (m)] (LINE:87)\l0x0016: IGET  (r3 I:kotlinx.coroutines.flow.FlowCollector\<T\>) = (r5 I:kotlinx.coroutines.flow.internal.SafeCollector) kotlinx.coroutines.flow.internal.SafeCollector.collector kotlinx.coroutines.flow.FlowCollector \l0x0018: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY]) \l0x0019: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r2 I:java.lang.Object) = \l  (r2 I:kotlin.jvm.functions.Function3)\l  (r3 I:java.lang.Object)\l  (r7 I:java.lang.Object A[D('value' java.lang.Object)])\l  (r4 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)]\l0x001f: INVOKE  (r3 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:92)\l0x0023: INVOKE  (r3 I:boolean) = (r2 I:java.lang.Object A[D('result' java.lang.Object)]), (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|0x0029: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:93)\l0x002a: IPUT  (r3 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\>), (r5 I:kotlinx.coroutines.flow.internal.SafeCollector) kotlinx.coroutines.flow.internal.SafeCollector.completion kotlin.coroutines.Continuation \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|RETURN\l|0x002c: RETURN  (r2 I:java.lang.Object A[D('result' java.lang.Object)])  (LINE:95)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final java.lang.Object kotlinx.coroutines.flow.internal.SafeCollector.emit((r5 'this' I:kotlinx.coroutines.flow.internal.SafeCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('uCont' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0027 \-\> B:17:0x002c, CROSS_EDGE: B:12:0x0009 \-\> B:14:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x002c: r0 'currentContext' Lkotlin\/coroutines\/CoroutineContext;\l  0x0009\-0x002c: r1 'previousContext' Lkotlin\/coroutines\/CoroutineContext;\l  0x001f\-0x002c: r2 'result' Ljava\/lang\/Object;\l  \-1 \-0x002c: r6 'uCont' Lkotlin\/coroutines\/Continuation;\l  \-1 \-0x002c: r7 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;TT;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

