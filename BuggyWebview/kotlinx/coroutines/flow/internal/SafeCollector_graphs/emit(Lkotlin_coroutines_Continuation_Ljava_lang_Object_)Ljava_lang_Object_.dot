digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector.emit(Lkotlin\/coroutines\/Continuation;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|kotlin.coroutines.CoroutineContext r0 = r6.getContext()\lkotlinx.coroutines.JobKt.ensureActive(r0)\lkotlin.coroutines.CoroutineContext r1 = r5.lastEmissionContext\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|if (r1 == r0) goto L4\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|checkContext(r0, r1, r7)\lr5.lastEmissionContext = r0\l}"];
Node_14 [shape=record,label="{14\:\ 0x0010|r5.completion = r6\lkotlin.jvm.functions.Function3 r2 = kotlinx.coroutines.flow.internal.SafeCollectorKt.emitFun\ljava.lang.Object r2 = r2.invoke(r5.collector, r7, r5)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|if (kotlin.jvm.internal.Intrinsics.areEqual(r2, kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) != false) goto L7\l}"];
Node_16 [shape=record,label="{16\:\ 0x0029|r5.completion = null\l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|RETURN\l|return r2\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final java.lang.Object kotlinx.coroutines.flow.internal.SafeCollector.emit((r5v0 'this' kotlinx.coroutines.flow.internal.SafeCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r6v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('uCont' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0027 \-\> B:17:0x002c, CROSS_EDGE: B:12:0x0009 \-\> B:14:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;TT;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

