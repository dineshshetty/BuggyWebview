digraph "CFG forkotlinx.coroutines.flow.internal.SafeCollector.checkContext(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;Ljava\/lang\/Object;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('previousContext' kotlin.coroutines.CoroutineContext)]) kotlinx.coroutines.flow.internal.DownstreamExceptionContext  (LINE:103)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('previousContext' kotlin.coroutines.CoroutineContext)])  (LINE:104)\l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.flow.internal.DownstreamExceptionContext) = (kotlinx.coroutines.flow.internal.DownstreamExceptionContext) (r0 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.internal.SafeCollector)\l  (r0 I:kotlinx.coroutines.flow.internal.DownstreamExceptionContext)\l  (r4 I:java.lang.Object A[D('value' java.lang.Object)])\l type: DIRECT call: kotlinx.coroutines.flow.internal.SafeCollector.exceptionTransparencyViolated(kotlinx.coroutines.flow.internal.DownstreamExceptionContext, java.lang.Object):void A[MD:(kotlinx.coroutines.flow.internal.DownstreamExceptionContext, java.lang.Object):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.internal.SafeCollector)\l  (r2 I:kotlin.coroutines.CoroutineContext A[D('currentContext' kotlin.coroutines.CoroutineContext)])\l type: STATIC call: kotlinx.coroutines.flow.internal.SafeCollector_commonKt.checkContext(kotlinx.coroutines.flow.internal.SafeCollector, kotlin.coroutines.CoroutineContext):void A[MD:(kotlinx.coroutines.flow.internal.SafeCollector\<?\>, kotlin.coroutines.CoroutineContext):void (m)] (LINE:106)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|RETURN\l|0x000d: RETURN    (LINE:107)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.flow.internal.SafeCollector.checkContext((r1 'this' I:kotlinx.coroutines.flow.internal.SafeCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.coroutines.CoroutineContext A[D('currentContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.coroutines.CoroutineContext A[D('previousContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r2 'currentContext' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x000d: r3 'previousContext' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x000d: r4 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;TT;)V\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

