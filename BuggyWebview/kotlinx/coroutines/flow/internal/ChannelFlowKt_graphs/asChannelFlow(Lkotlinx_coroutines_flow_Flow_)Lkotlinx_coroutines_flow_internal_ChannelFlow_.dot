digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowKt.asChannelFlow(Lkotlinx\/coroutines\/flow\/Flow;)Lkotlinx\/coroutines\/flow\/internal\/ChannelFlow;" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000}"];
Node_23 [shape=record,label="{23\:\ 0x0002|if ((r8 instanceof kotlinx.coroutines.flow.internal.ChannelFlow) == false) goto L9\l}"];
Node_24 [shape=record,label="{24\:\ 0x0004|kotlinx.coroutines.flow.internal.ChannelFlow r0 = (kotlinx.coroutines.flow.internal.ChannelFlow) r8\l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.flow.internal.ChannelFlow\<T\>) = (r0v1 kotlinx.coroutines.flow.internal.ChannelFlow\<T\>), (r0v6 kotlinx.coroutines.flow.internal.ChannelFlow\<T\>) binds: [B:25:0x0008, B:24:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L8\l}"];
Node_27 [shape=record,label="{27\:\ 0x000b}"];
Node_28 [shape=record,label="{28\:\ 0x001a|RETURN\lORIG_RETURN\l|return new kotlinx.coroutines.flow.internal.ChannelFlowOperatorImpl(r8, null, 0, null, 14, null)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|r0 = null\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.internal.ChannelFlow\<T\> kotlinx.coroutines.flow.internal.ChannelFlowKt.asChannelFlow((r8v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$asChannelFlow' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0009 \-\> B:28:0x001a, CROSS_EDGE: B:25:0x0008 \-\> B:26:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;)Lkotlinx\/coroutines\/flow\/internal\/ChannelFlow\<TT;\>;\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_21;
Node_29 -> Node_21;
Node_25 -> Node_26;
}

