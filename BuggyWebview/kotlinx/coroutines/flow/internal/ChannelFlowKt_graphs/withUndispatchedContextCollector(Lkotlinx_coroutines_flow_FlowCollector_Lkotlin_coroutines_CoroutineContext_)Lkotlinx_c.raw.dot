digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowKt.withUndispatchedContextCollector(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/flow\/FlowCollector;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0001|0x0001: INSTANCE_OF  (r0 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('$this$withUndispatchedContextCollector' kotlinx.coroutines.flow.FlowCollector)]) kotlinx.coroutines.flow.internal.SendingCollector  (LINE:202)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0007 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0005|0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x000d \l}"];
Node_29 [shape=record,label="{29\:\ 0x000b|0x000b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$withUndispatchedContextCollector' kotlinx.coroutines.flow.FlowCollector)]) \l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x0014: RETURN  (r0 I:kotlinx.coroutines.flow.FlowCollector\<T\>) A[SYNTHETIC] (LINE:205)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.internal.UndispatchedContextCollector) =  kotlinx.coroutines.flow.internal.UndispatchedContextCollector  (LINE:204)\l0x000f: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.UndispatchedContextCollector)\l  (r1 I:kotlinx.coroutines.flow.FlowCollector A[D('$this$withUndispatchedContextCollector' kotlinx.coroutines.flow.FlowCollector)])\l  (r2 I:kotlin.coroutines.CoroutineContext A[D('emitContext' kotlin.coroutines.CoroutineContext)])\l type: DIRECT call: kotlinx.coroutines.flow.internal.UndispatchedContextCollector.\<init\>(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext):void A[MD:(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.CoroutineContext):void (m)]\l0x0012: CHECK_CAST (r0 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0014|RETURN\lORIG_RETURN\l|0x0014: RETURN  (r0 I:kotlinx.coroutines.flow.FlowCollector\<T\>)  (LINE:205)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0007|0x0007: INSTANCE_OF  (r0 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('$this$withUndispatchedContextCollector' kotlinx.coroutines.flow.FlowCollector)]) kotlinx.coroutines.flow.internal.NopCollector \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.FlowCollector\<T\> kotlinx.coroutines.flow.internal.ChannelFlowKt.withUndispatchedContextCollector((r1 I:kotlinx.coroutines.flow.FlowCollector\<? super T\> A[D('$this$withUndispatchedContextCollector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.coroutines.CoroutineContext A[D('emitContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x000d \-\> B:31:0x0014, CROSS_EDGE: B:27:0x0007 \-\> B:28:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/flow\/FlowCollector\<TT;\>;\lDebug Info:\l  \-1 \-0x0014: r1 '$this$withUndispatchedContextCollector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0014: r2 'emitContext' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_32;
Node_32 -> Node_23;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_27 -> Node_28;
}

