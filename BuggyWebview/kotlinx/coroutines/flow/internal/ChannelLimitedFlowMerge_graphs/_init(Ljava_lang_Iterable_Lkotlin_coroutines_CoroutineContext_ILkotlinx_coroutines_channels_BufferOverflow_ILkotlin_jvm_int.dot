digraph "CFG forkotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.\<init\>(Ljava\/lang\/Iterable;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0002|if ((r5 & 2) == 0) goto L4\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|kotlin.coroutines.CoroutineContext r2 = kotlin.coroutines.EmptyCoroutineContext.INSTANCE\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|PHI: r2 \l  PHI: (r2v1 kotlin.coroutines.CoroutineContext) = (r2v0 kotlin.coroutines.CoroutineContext), (r2v3 kotlin.coroutines.EmptyCoroutineContext) binds: [B:16:0x0002, B:17:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|if ((r5 & 4) == 0) goto L7\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|r3 = \-2\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:19:0x000a, B:20:0x000c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|if ((r5 & 8) == 0) goto L10\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|kotlinx.coroutines.channels.BufferOverflow r4 = kotlinx.coroutines.channels.BufferOverflow.SUSPEND\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|PHI: r4 \l  PHI: (r4v1 kotlinx.coroutines.channels.BufferOverflow) = (r4v0 kotlinx.coroutines.channels.BufferOverflow), (r4v2 kotlinx.coroutines.channels.BufferOverflow) binds: [B:22:0x000f, B:23:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|this(r1, r2, r3, r4)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.\<init\>((r0v0 'this' kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r1v0 java.lang.Iterable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.coroutines.CoroutineContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlinx.coroutines.channels.BufferOverflow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:22:0x000f \-\> B:24:0x0013, CROSS_EDGE: B:19:0x000a \-\> B:21:0x000d, CROSS_EDGE: B:16:0x0002 \-\> B:18:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [80=4]\}\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

