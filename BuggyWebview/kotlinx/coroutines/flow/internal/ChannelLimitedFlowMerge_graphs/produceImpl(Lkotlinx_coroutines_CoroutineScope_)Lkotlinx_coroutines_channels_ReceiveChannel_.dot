digraph "CFG forkotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.produceImpl(Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|return kotlinx.coroutines.channels.Produce.produce(r4, r3.context, r3.capacity, getCollectToFun$kotlinx_coroutines_core())\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveChannel\<T\> kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.produceImpl((r3v0 'this' kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'scope' kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel\<T\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

