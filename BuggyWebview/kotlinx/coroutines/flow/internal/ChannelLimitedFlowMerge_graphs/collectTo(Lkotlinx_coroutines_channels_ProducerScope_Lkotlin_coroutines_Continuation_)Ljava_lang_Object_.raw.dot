digraph "CFG forkotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.collectTo(Lkotlinx\/coroutines\/channels\/ProducerScope;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.internal.SendingCollector) =  kotlinx.coroutines.flow.internal.SendingCollector  (LINE:94)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('scope' kotlinx.coroutines.channels.ProducerScope)]) \l0x0003: CHECK_CAST (r1 I:kotlinx.coroutines.channels.SendChannel) = (kotlinx.coroutines.channels.SendChannel) (r1 I:??[OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:kotlinx.coroutines.flow.internal.SendingCollector), (r1 I:kotlinx.coroutines.channels.SendChannel) type: DIRECT call: kotlinx.coroutines.flow.internal.SendingCollector.\<init\>(kotlinx.coroutines.channels.SendChannel):void A[MD:(kotlinx.coroutines.channels.SendChannel\<? super T\>):void (m)]\l0x0008: IGET  (r1 I:java.lang.Iterable\<kotlinx.coroutines.flow.Flow\<T\>\>) = (r13 I:kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge) kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.flows java.lang.Iterable  (LINE:95)\l0x000a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r3 I:java.util.Iterator) = (r1 I:java.lang.Iterable A[D('$this$forEach$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:101)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|LOOP_START\lLOOP:0: B:12:0x000f\-\>B:14:0x0015\l|0x000f: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0013|0x0013: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0031 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|LOOP_END\lLOOP:0: B:12:0x000f\-\>B:14:0x0015\l|0x0015: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0019: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x001a: CHECK_CAST (r5 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r5 I:??[OBJECT, ARRAY]) \l0x001c: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('scope' kotlinx.coroutines.channels.ProducerScope)])  (LINE:96)\l0x001e: CHECK_CAST (r7 I:kotlinx.coroutines.CoroutineScope) = (kotlinx.coroutines.CoroutineScope) (r7 I:??[OBJECT, ARRAY]) \l0x0020: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: NEW_INSTANCE  (r10 I:kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1) =  kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1 \l0x0024: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: INVOKE  \l  (r10 I:kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1)\l  (r5 I:kotlinx.coroutines.flow.Flow A[D('flow' kotlinx.coroutines.flow.Flow)])\l  (r0 I:kotlinx.coroutines.flow.internal.SendingCollector A[D('collector' kotlinx.coroutines.flow.internal.SendingCollector)])\l  (r11 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1.\<init\>(kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.internal.SendingCollector, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends T\>, kotlinx.coroutines.flow.internal.SendingCollector\<T\>, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge$collectTo$2$1\>):void (m)]\l0x0028: CHECK_CAST (r10 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r10 I:??[OBJECT, ARRAY]) \l0x002a: CONST  (r11 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x002b: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002c: INVOKE  \l  (r7 I:kotlinx.coroutines.CoroutineScope)\l  (r8 I:kotlin.coroutines.CoroutineContext)\l  (r9 I:kotlinx.coroutines.CoroutineStart)\l  (r10 I:kotlin.jvm.functions.Function2)\l  (r11 I:int)\l  (r12 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.BuildersKt.launch$default(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2, int, java.lang.Object):kotlinx.coroutines.Job A[MD:(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2, int, java.lang.Object):kotlinx.coroutines.Job (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0032: SGET  (r1 I:kotlin.Unit A[D('$this$forEach$iv' java.lang.Iterable)]) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:98)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|RETURN\l|0x0034: RETURN  (r1 I:java.lang.Object) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge.collectTo((r13 'this' I:kotlinx.coroutines.flow.internal.ChannelLimitedFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r14 I:kotlinx.coroutines.channels.ProducerScope\<? super T\> A[D('scope' kotlinx.coroutines.channels.ProducerScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0015 \-\> B:12:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/ProducerScope\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x0019\-0x0030: r4 'element$iv' Ljava\/lang\/Object;\l  0x001c\-0x0030: r5 'flow' Lkotlinx\/coroutines\/flow\/Flow;\l  0x001d\-0x0030: r6 '$i$a$\-forEach\-ChannelLimitedFlowMerge$collectTo$2' I\l  0x000a\-0x0032: r1 '$this$forEach$iv' Ljava\/lang\/Iterable;\l  0x000b\-0x0032: r2 '$i$f$forEach' I\l  0x0008\-0x0034: r0 'collector' Lkotlinx\/coroutines\/flow\/internal\/SendingCollector;\l  \-1 \-0x0034: r14 'scope' Lkotlinx\/coroutines\/channels\/ProducerScope;\l  \-1 \-0x0034: r15 '$completion' Lkotlin\/coroutines\/Continuation;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.collectTo(kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

