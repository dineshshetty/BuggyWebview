digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowMerge.collectTo(Lkotlinx\/coroutines\/channels\/ProducerScope;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r5 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) kotlinx.coroutines.flow.internal.ChannelFlowMerge.concurrency int  (LINE:56)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0004: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:kotlinx.coroutines.sync.Semaphore) = (r0 I:int), (r1 I:int), (r2 I:int), (r3 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.Semaphore$default(int, int, int, java.lang.Object):kotlinx.coroutines.sync.Semaphore A[MD:(int, int, int, java.lang.Object):kotlinx.coroutines.sync.Semaphore (m)]\l0x0009: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.internal.SendingCollector) =  kotlinx.coroutines.flow.internal.SendingCollector  (LINE:57)\l0x000b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('scope' kotlinx.coroutines.channels.ProducerScope)]) \l0x000c: CHECK_CAST (r2 I:kotlinx.coroutines.channels.SendChannel) = (kotlinx.coroutines.channels.SendChannel) (r2 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r1 I:kotlinx.coroutines.flow.internal.SendingCollector), (r2 I:kotlinx.coroutines.channels.SendChannel) type: DIRECT call: kotlinx.coroutines.flow.internal.SendingCollector.\<init\>(kotlinx.coroutines.channels.SendChannel):void A[MD:(kotlinx.coroutines.channels.SendChannel\<? super T\>):void (m)]\l0x0011: INVOKE  (r2 I:kotlin.coroutines.CoroutineContext) = (r7 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)]) type: INTERFACE call: kotlin.coroutines.Continuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:58)\l0x0015: SGET  (r3 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key \l0x0017: CHECK_CAST (r3 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r3 I:??[OBJECT, ARRAY]) \l0x0019: INVOKE  (r2 I:kotlin.coroutines.CoroutineContext$Element) = (r2 I:kotlin.coroutines.CoroutineContext), (r3 I:kotlin.coroutines.CoroutineContext$Key) type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x001d: CHECK_CAST (r2 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r2 I:??[OBJECT, ARRAY]) \l0x001f: IGET  (r3 I:kotlinx.coroutines.flow.Flow\<kotlinx.coroutines.flow.Flow\<T\>\>) = (r5 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) kotlinx.coroutines.flow.internal.ChannelFlowMerge.flow kotlinx.coroutines.flow.Flow  (LINE:59)\l0x0021: NEW_INSTANCE  (r4 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2) =  kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2 \l0x0023: INVOKE  \l  (r4 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2)\l  (r2 I:kotlinx.coroutines.Job A[D('job' kotlinx.coroutines.Job)])\l  (r0 I:kotlinx.coroutines.sync.Semaphore A[D('semaphore' kotlinx.coroutines.sync.Semaphore)])\l  (r6 I:kotlinx.coroutines.channels.ProducerScope A[D('scope' kotlinx.coroutines.channels.ProducerScope)])\l  (r1 I:kotlinx.coroutines.flow.internal.SendingCollector A[D('collector' kotlinx.coroutines.flow.internal.SendingCollector)])\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2.\<init\>(kotlinx.coroutines.Job, kotlinx.coroutines.sync.Semaphore, kotlinx.coroutines.channels.ProducerScope, kotlinx.coroutines.flow.internal.SendingCollector):void A[MD:(kotlinx.coroutines.Job, kotlinx.coroutines.sync.Semaphore, kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlinx.coroutines.flow.internal.SendingCollector\<T\>):void (m)]\l0x0026: CHECK_CAST (r4 I:kotlinx.coroutines.flow.FlowCollector) = (kotlinx.coroutines.flow.FlowCollector) (r4 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:kotlinx.coroutines.flow.Flow)\l  (r4 I:kotlinx.coroutines.flow.FlowCollector)\l  (r7 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: INTERFACE call: kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l0x002c: INVOKE  (r4 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|0x0030: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0033 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0032|RETURN\l|0x0032: RETURN  (r3 I:java.lang.Object) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: SGET  (r3 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_13 [shape=record,label="{13\:\ 0x0035|RETURN\l|0x0035: RETURN  (r3 I:java.lang.Object)  (LINE:75)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowMerge.collectTo((r5 'this' I:kotlinx.coroutines.flow.internal.ChannelFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlinx.coroutines.channels.ProducerScope\<? super T\> A[D('scope' kotlinx.coroutines.channels.ProducerScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0035 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/ProducerScope\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x0009\-0x0035: r0 'semaphore' Lkotlinx\/coroutines\/sync\/Semaphore;\l  0x0011\-0x0035: r1 'collector' Lkotlinx\/coroutines\/flow\/internal\/SendingCollector;\l  0x001f\-0x0035: r2 'job' Lkotlinx\/coroutines\/Job;\l  \-1 \-0x0035: r6 'scope' Lkotlinx\/coroutines\/channels\/ProducerScope;\l  \-1 \-0x0035: r7 '$completion' Lkotlin\/coroutines\/Continuation;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.collectTo(kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

