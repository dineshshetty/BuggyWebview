digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowMerge.create(Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/internal\/ChannelFlow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r6 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) =  kotlinx.coroutines.flow.internal.ChannelFlowMerge  (LINE:49)\l0x0002: IGET  (r1 I:kotlinx.coroutines.flow.Flow\<kotlinx.coroutines.flow.Flow\<T\>\>) = (r7 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) kotlinx.coroutines.flow.internal.ChannelFlowMerge.flow kotlinx.coroutines.flow.Flow \l0x0004: IGET  (r2 I:int) = (r7 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) kotlinx.coroutines.flow.internal.ChannelFlowMerge.concurrency int \l0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0007: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('context' kotlin.coroutines.CoroutineContext)]) \l0x0008: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) \l0x0009: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)]) \l0x000a: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge)\l  (r1 I:kotlinx.coroutines.flow.Flow)\l  (r2 I:int)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:int)\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowMerge.\<init\>(kotlinx.coroutines.flow.Flow, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends kotlinx.coroutines.flow.Flow\<? extends T\>\>, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void (m)]\l0x000d: CHECK_CAST (r6 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN  (r6 I:kotlinx.coroutines.flow.internal.ChannelFlow\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected kotlinx.coroutines.flow.internal.ChannelFlow\<T\> kotlinx.coroutines.flow.internal.ChannelFlowMerge.create((r7 'this' I:kotlinx.coroutines.flow.internal.ChannelFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r8 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x000f: r9 'capacity' I\l  \-1 \-0x000f: r10 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)Lkotlinx\/coroutines\/flow\/internal\/ChannelFlow\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.create(kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.internal.ChannelFlow\<T\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

