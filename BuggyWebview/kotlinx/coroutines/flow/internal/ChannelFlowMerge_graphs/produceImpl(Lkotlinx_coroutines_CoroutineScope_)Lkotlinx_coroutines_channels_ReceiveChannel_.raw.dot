digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowMerge.produceImpl(Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.coroutines.CoroutineContext) = (r3 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) kotlinx.coroutines.flow.internal.ChannelFlowMerge.context kotlin.coroutines.CoroutineContext  (LINE:52)\l0x0002: IGET  (r1 I:int) = (r3 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) kotlinx.coroutines.flow.internal.ChannelFlowMerge.capacity int \l0x0004: INVOKE  (r2 I:kotlin.jvm.functions.Function2) = (r3 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) type: VIRTUAL call: kotlinx.coroutines.flow.internal.ChannelFlowMerge.getCollectToFun$kotlinx_coroutines_core():kotlin.jvm.functions.Function2 A[MD:():kotlin.jvm.functions.Function2\<kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>, java.lang.Object\> (m)]\l0x0008: INVOKE  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) = \l  (r4 I:kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope)])\l  (r0 I:kotlin.coroutines.CoroutineContext)\l  (r1 I:int)\l  (r2 I:kotlin.jvm.functions.Function2)\l type: STATIC call: kotlinx.coroutines.channels.ProduceKt.produce(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlin.jvm.functions.Function2):kotlinx.coroutines.channels.ReceiveChannel A[MD:\<E\>:(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.channels.ProducerScope\<? super E\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.channels.ReceiveChannel\<E\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveChannel\<T\> kotlinx.coroutines.flow.internal.ChannelFlowMerge.produceImpl((r3 'this' I:kotlinx.coroutines.flow.internal.ChannelFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r4 'scope' Lkotlinx\/coroutines\/CoroutineScope;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel\<T\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

