digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowMerge.\<init\>(Lkotlinx\/coroutines\/flow\/Flow;ILkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|super(r3, r4, r5)\lr0.flow = r1\lr0.concurrency = r2\l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.internal.ChannelFlowMerge.\<init\>((r0v0 'this' kotlinx.coroutines.flow.internal.ChannelFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r1v0 kotlinx.coroutines.flow.Flow\<? extends kotlinx.coroutines.flow.Flow\<? extends T\>\> A[D('flow' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'concurrency' int A[D('concurrency' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'capacity' int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r1v0, resolved type: kotlinx.coroutines.flow.Flow\<? extends kotlinx.coroutines.flow.Flow\<? extends T\>\>\}\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/Flow\<+Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;\>;ILkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

