digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowMerge.\<init\>(Lkotlinx\/coroutines\/flow\/Flow;ILkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: ARITH  (r13 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:41)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0002|0x0002: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: SGET  (r9 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:44)\l0x0006: CHECK_CAST (r9 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r9 I:??[OBJECT, ARRAY]) \l0x0008: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: ARITH  (r9 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0012 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: CONST  (r10 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char])  (LINE:45)\l0x0010: CONST  (r4 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: ARITH  (r9 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (16 ??[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001b \l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|0x0017: SGET  (r11 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow  (LINE:46)\l0x0019: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|0x001c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x001d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x001e: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge)\l  (r1 I:kotlinx.coroutines.flow.Flow)\l  (r2 I:int)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:int)\l  (r5 I:kotlinx.coroutines.channels.BufferOverflow)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowMerge.\<init\>(kotlinx.coroutines.flow.Flow, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends kotlinx.coroutines.flow.Flow\<? extends T\>\>, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow):void (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:78)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|0x001b: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY])  (LINE:41)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|0x0012: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:41)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY])  (LINE:41)\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.flow.internal.ChannelFlowMerge.\<init\>((r6 'this' I:kotlinx.coroutines.flow.internal.ChannelFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlinx.coroutines.flow.Flow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.coroutines.CoroutineContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlinx.coroutines.channels.BufferOverflow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:29:0x001b \-\> B:30:0x001c, CROSS_EDGE: B:25:0x0012 \-\> B:26:0x0013, CROSS_EDGE: B:21:0x000a \-\> B:22:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [41=4]\}\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_17;
Node_29 -> Node_30;
Node_25 -> Node_26;
Node_21 -> Node_22;
}

