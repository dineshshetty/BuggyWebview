digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowMerge.collectTo(Lkotlinx\/coroutines\/channels\/ProducerScope;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_850015005 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlinx.coroutines.sync.Semaphore kotlinx.coroutines.sync.Semaphore r0 = kotlinx.coroutines.sync.SemaphoreKt.Semaphore$default(r5.concurrency, 0, 2, null)\lkotlinx.coroutines.flow.internal.SendingCollector kotlinx.coroutines.flow.internal.SendingCollector r1 = new kotlinx.coroutines.flow.internal.SendingCollector(r6)\lkotlinx.coroutines.Job kotlinx.coroutines.Job r2 = (kotlinx.coroutines.Job) r7.getContext().get(kotlinx.coroutines.Job.Key)\ljava.lang.Object java.lang.Object r3 = r5.flow.collect(new kotlinx.coroutines.flow.internal.ChannelFlowMerge$collectTo$2(r2, r0, r6, r1), r7)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|RETURN\l|return r3 == kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED() ? r3 : kotlin.Unit.INSTANCE\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0032}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0033}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0035}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowMerge.collectTo((r5v0 'this' kotlinx.coroutines.flow.internal.ChannelFlowMerge\<T\> A[IMMUTABLE_TYPE, THIS]), (r6v0 kotlinx.coroutines.channels.ProducerScope\<? super T\> A[D('scope' kotlinx.coroutines.channels.ProducerScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0035 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/ProducerScope\<\-TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.collectTo(kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_7 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

