digraph "CFG forkotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.getValue()Ljava\/lang\/Integer;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:129)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0001|0x0001: MONITOR_ENTER  (r3 I:??[OBJECT, ARRAY])  (LINE:136)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0014, blocks: (B:18:0x0003), top: B:24:0x0003 \}\lCatch: all \-\> 0x0014\l|0x0003: INVOKE  (r2 I:java.lang.Object) = (r3 I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow) type: VIRTUAL call: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.getLastReplayedLocked():java.lang.Object A[Catch: all \-\> 0x0014, MD:():T (m), TRY_ENTER] (LINE:129)\l0x0007: CHECK_CAST (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0014]\l0x0009: INVOKE  (r2 I:int) = (r2 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[Catch: all \-\> 0x0014, MD:():int (c)]\l0x000d: INVOKE  (r1 I:java.lang.Integer) = (r2 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: all \-\> 0x0014, MD:(int):java.lang.Integer (c), TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: MONITOR_EXIT  (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|RETURN\l|0x0013: RETURN  (r1 I:java.lang.Integer)  (LINE:129)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|ExcHandler: all \-\> 0x0014\l|0x0014: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0014]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|0x0016: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Integer kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.getValue((r3 'this' I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0016 \-\> B:14:?, CROSS_EDGE: B:24:0x0003 \-\> B:21:0x0014\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0014, blocks: (B:18:0x0003), top: B:24:0x0003 \}\lDebug Info:\l  0x0003\-0x000d: r1 '$i$a$\-synchronized\-SubscriptionCountStateFlow$value$1' I\l  0x0001\-0x0013: r0 '$i$f$synchronized' I\l  0x0014\-0x0016: r0 '$i$f$synchronized' I\lREPLACED_BY: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.getValue():java.lang.Integer\lBRIDGED_BY: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.getValue():java.lang.Integer\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.StateFlow.getValue():T]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_24;
Node_24 -> Node_18;
Node_24 -> Node_21;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_25 -> Node_21;
Node_21 -> Node_23;
Node_23 -> Node_14;
}

