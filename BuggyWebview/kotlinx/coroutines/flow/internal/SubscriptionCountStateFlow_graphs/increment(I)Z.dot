digraph "CFG forkotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.increment(I)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0001|monitor\-enter(r3)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002}"];
Node_24 [shape=record,label="{24\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:18:0x0003), top: B:24:0x0003 \}\lCatch: all \-\> 0x0019\l|boolean r2 = tryEmit(java.lang.Integer.valueOf(getLastReplayedLocked().intValue() + r4))     \/\/ Catch: java.lang.Throwable \-\> L19\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|monitor\-exit(r3)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|RETURN\l|return r2\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0019|REMOVE\lExcHandler: all \-\> 0x0019\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.increment((r3v0 'this' kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[IMMUTABLE_TYPE, THIS]), (r4v0 'delta' int A[D('delta' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001b \-\> B:14:?, CROSS_EDGE: B:24:0x0003 \-\> B:21:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_24;
Node_24 -> Node_18;
Node_24 -> Node_21;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_25 -> Node_21;
Node_21 -> Node_23;
Node_23 -> Node_14;
}

