digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r1 I:kotlin.coroutines.CoroutineContext) = (r9 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.context kotlin.coroutines.CoroutineContext  (LINE:119)\l0x0002: INVOKE  (r2 I:int) = (r9 I:kotlinx.coroutines.flow.internal.ChannelFlow) type: VIRTUAL call: kotlinx.coroutines.flow.internal.ChannelFlow.getProduceCapacity$kotlinx_coroutines_core():int A[MD:():int (m)]\l0x0006: IGET  (r3 I:kotlinx.coroutines.channels.BufferOverflow) = (r9 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow \l0x0008: SGET  (r4 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart.ATOMIC kotlinx.coroutines.CoroutineStart \l0x000a: INVOKE  (r6 I:kotlin.jvm.functions.Function2) = (r9 I:kotlinx.coroutines.flow.internal.ChannelFlow) type: VIRTUAL call: kotlinx.coroutines.flow.internal.ChannelFlow.getCollectToFun$kotlinx_coroutines_core():kotlin.jvm.functions.Function2 A[MD:():kotlin.jvm.functions.Function2\<kotlinx.coroutines.channels.ProducerScope\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>, java.lang.Object\> (m)]\l0x000e: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: CONST  (r7 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l0x0011: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('scope' kotlinx.coroutines.CoroutineScope)]) \l0x0013: INVOKE  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) = \l  (r0 I:kotlinx.coroutines.CoroutineScope)\l  (r1 I:kotlin.coroutines.CoroutineContext)\l  (r2 I:int)\l  (r3 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r4 I:kotlinx.coroutines.CoroutineStart)\l  (r5 I:kotlin.jvm.functions.Function1)\l  (r6 I:kotlin.jvm.functions.Function2)\l  (r7 I:int)\l  (r8 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.channels.ProduceKt.produce$default(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2, int, java.lang.Object):kotlinx.coroutines.channels.ReceiveChannel A[MD:(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2, int, java.lang.Object):kotlinx.coroutines.channels.ReceiveChannel (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|0x0017: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveChannel\<T\> kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl((r9 'this' I:kotlinx.coroutines.flow.internal.ChannelFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r10 I:kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0017: r10 'scope' Lkotlinx\/coroutines\/CoroutineScope;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineScope;)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<TT;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl(kotlinx.coroutines.CoroutineScope):kotlinx.coroutines.channels.ReceiveChannel\<T\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

