digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlow.\<init\>(Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)V" {
subgraph cluster_Region_341790383 {
label = "R(2:1|(2:(1:12)|(1:(1:(1:8)))))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0000|r2.context = r3\lr2.capacity = r4\lr2.onBufferOverflow = r5\l}"];
subgraph cluster_Region_630316051 {
label = "R(2:(1:12)|(1:(1:(1:8))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_4034808 {
label = "IF [B:18:0x000e] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000e|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L12\l}"];
subgraph cluster_Region_624856021 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0021|RETURN\lORIG_RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1274708971 {
label = "R(1:(1:(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1621147587 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_217471359 {
label = "IF [B:23:0x0017] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0017|PHI: r1 \l  PHI: (r1v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r4 != \-1) != true) goto L7\l}"];
subgraph cluster_Region_1573325591 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x001f|throw new java.lang.AssertionError()\l}"];
}
}
}
}
}
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0010}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0012}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0014}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x001a}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ ?|SYNTHETIC\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0016}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.internal.ChannelFlow.\<init\>((r2v0 'this' kotlinx.coroutines.flow.internal.ChannelFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'capacity' int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0021 \-\> B:16:?, CROSS_EDGE: B:22:0x0016 \-\> B:23:0x0017, CROSS_EDGE: B:18:0x000e \-\> B:28:0x0021\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_15;Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_28 -> Node_16;
Node_23 -> Node_25;
Node_23 -> Node_29[style=dashed];
Node_26 -> Node_16;
Node_15 -> Node_17;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_25 -> Node_26;
Node_29 -> Node_16;
Node_22 -> Node_23;
}

