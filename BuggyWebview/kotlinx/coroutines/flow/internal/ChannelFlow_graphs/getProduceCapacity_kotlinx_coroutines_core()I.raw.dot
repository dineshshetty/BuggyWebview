digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlow.getProduceCapacity$kotlinx_coroutines_core()I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.capacity int  (LINE:63)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|RETURN\lORIG_RETURN\l|0x0005: CONST  (r0 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char]) \l0x0006: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0006: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public final int kotlinx.coroutines.flow.internal.ChannelFlow.getProduceCapacity$kotlinx_coroutines_core((r2 'this' I:kotlinx.coroutines.flow.internal.ChannelFlow\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0003 \-\> B:12:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_8;
Node_13 -> Node_8;
}

