digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlow.collect$suspendImpl(Lkotlinx\/coroutines\/flow\/internal\/ChannelFlow;Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|java.lang.Object r0 = kotlinx.coroutines.CoroutineScopeKt.coroutineScope(new kotlinx.coroutines.flow.internal.ChannelFlow$collect$2(r3, r2, null), r4)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|if (r0 != kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L5\l}"];
Node_11 [shape=record,label="{11\:\ 0x0012|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013}"];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlow.collect$suspendImpl((r2v0 kotlinx.coroutines.flow.internal.ChannelFlow A[D('this' kotlinx.coroutines.flow.internal.ChannelFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'collector' kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 '$completion' kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:8:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

