digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlow.\<init\>(Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/channels\/BufferOverflow;)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r2 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:45)\l0x0003: IPUT  \l  (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow)\l kotlinx.coroutines.flow.internal.ChannelFlow.context kotlin.coroutines.CoroutineContext  (LINE:48)\l0x0005: IPUT  (r4 I:int A[D('capacity' int)]), (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.capacity int  (LINE:50)\l0x0007: IPUT  \l  (r5 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow)])\l  (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow)\l kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow  (LINE:52)\l0x000a: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:55)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0021 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:246)\l0x0011: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:55)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0012|0x0012: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('capacity' int)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0016 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|0x0017: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001a \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001c: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN   A[SYNTHETIC] (LINE:46)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0021|RETURN\lORIG_RETURN\l|0x0021: RETURN    (LINE:46)\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.internal.ChannelFlow.\<init\>((r2 'this' I:kotlinx.coroutines.flow.internal.ChannelFlow\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0021 \-\> B:16:?, CROSS_EDGE: B:22:0x0016 \-\> B:23:0x0017, CROSS_EDGE: B:18:0x000e \-\> B:28:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0017: r0 '$i$a$\-assert\-ChannelFlow$1' I\l  \-1 \-0x0021: r3 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0021: r4 'capacity' I\l  \-1 \-0x0021: r5 'onBufferOverflow' Lkotlinx\/coroutines\/channels\/BufferOverflow;\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_29[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_29 -> Node_16;
Node_22 -> Node_23;
Node_28 -> Node_16;
}

