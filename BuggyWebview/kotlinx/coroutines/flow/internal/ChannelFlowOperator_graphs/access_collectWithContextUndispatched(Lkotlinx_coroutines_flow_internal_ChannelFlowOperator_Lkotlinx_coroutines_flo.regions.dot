digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowOperator.access$collectWithContextUndispatched(Lkotlinx\/coroutines\/flow\/internal\/ChannelFlowOperator;Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1026757338 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|return r1.collectWithContextUndispatched(r2, r3, r4)\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0000}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.access$collectWithContextUndispatched((r1v0 '$this' kotlinx.coroutines.flow.internal.ChannelFlowOperator A[D('$this' kotlinx.coroutines.flow.internal.ChannelFlowOperator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'collector' kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'newContext' kotlin.coroutines.CoroutineContext A[D('newContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 '$completion' kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.internal.ChannelFlowOperator A[D('$this' kotlinx.coroutines.flow.internal.ChannelFlowOperator)])\l  (r2 I:kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector)])\l  (r3 I:kotlin.coroutines.CoroutineContext A[D('newContext' kotlin.coroutines.CoroutineContext)])\l  (r4 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectWithContextUndispatched(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext, kotlin.coroutines.Continuation):java.lang.Object\lTYPE_VARS: [S, T]\l}"];
MethodNode -> Node_4;Node_7 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
}

