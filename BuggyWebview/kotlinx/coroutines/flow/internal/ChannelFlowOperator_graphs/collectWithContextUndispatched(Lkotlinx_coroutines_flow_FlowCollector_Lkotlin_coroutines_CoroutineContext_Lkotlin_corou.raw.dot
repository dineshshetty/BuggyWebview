digraph "CFG forkotlinx.coroutines.flow.internal.ChannelFlowOperator.collectWithContextUndispatched(Lkotlinx\/coroutines\/flow\/FlowCollector;Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = (r11 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)]) type: INTERFACE call: kotlin.coroutines.Continuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:150)\l0x0004: INVOKE  (r0 I:kotlinx.coroutines.flow.FlowCollector) = \l  (r9 I:kotlinx.coroutines.flow.FlowCollector A[D('collector' kotlinx.coroutines.flow.FlowCollector)])\l  (r0 I:kotlin.coroutines.CoroutineContext)\l type: STATIC call: kotlinx.coroutines.flow.internal.ChannelFlowKt.access$withUndispatchedContextCollector(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext):kotlinx.coroutines.flow.FlowCollector A[MD:(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.CoroutineContext):kotlinx.coroutines.flow.FlowCollector (m)]\l0x0008: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2) =  kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2  (LINE:152)\l0x000a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2)\l  (r8 I:kotlinx.coroutines.flow.internal.ChannelFlowOperator)\l  (r2 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2.\<init\>(kotlinx.coroutines.flow.internal.ChannelFlowOperator, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.internal.ChannelFlowOperator\<S, T\>, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.internal.ChannelFlowOperator$collectWithContextUndispatched$2\>):void (m)]\l0x000e: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x000f: CHECK_CAST (r4 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r4 I:??[OBJECT, ARRAY]) \l0x0011: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r6 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0013: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('newContext' kotlin.coroutines.CoroutineContext)]) \l0x0015: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('originalContextCollector' kotlinx.coroutines.flow.FlowCollector)]) \l0x0016: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('$completion' kotlin.coroutines.Continuation)]) \l0x0017: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:kotlin.coroutines.CoroutineContext)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l  (r4 I:kotlin.jvm.functions.Function2)\l  (r5 I:kotlin.coroutines.Continuation)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.flow.internal.ChannelFlowKt.withContextUndispatched$default(kotlin.coroutines.CoroutineContext, java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation, int, java.lang.Object):java.lang.Object A[MD:(kotlin.coroutines.CoroutineContext, java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation, int, java.lang.Object):java.lang.Object (m)]\l0x001b: INVOKE  (r2 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|RETURN\l|0x0021: RETURN  (r1 I:java.lang.Object) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|RETURN\l|0x0024: RETURN  (r1 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.internal.ChannelFlowOperator.collectWithContextUndispatched((r8 'this' I:kotlinx.coroutines.flow.internal.ChannelFlowOperator\<S, T\> A[IMMUTABLE_TYPE, THIS]), (r9 I:kotlinx.coroutines.flow.FlowCollector\<? super T\> A[D('collector' kotlinx.coroutines.flow.FlowCollector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.coroutines.CoroutineContext A[D('newContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0024 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0024: r0 'originalContextCollector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0024: r9 'collector' Lkotlinx\/coroutines\/flow\/FlowCollector;\l  \-1 \-0x0024: r10 'newContext' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0024: r11 '$completion' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [S, T]\lSIGNATURE: (Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TT;\>;Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

