digraph "CFG forkotlinx.coroutines.flow.internal.AbstractSharedFlow.getSubscriptionCount()Lkotlinx\/coroutines\/flow\/StateFlow;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:33)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|0x0001: MONITOR_ENTER  (r5 I:??[OBJECT, ARRAY])  (LINE:136)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x001b, blocks: (B:22:0x0003, B:24:0x0007), top: B:32:0x0003 \}\lCatch: all \-\> 0x001b\l|0x0003: IGET  (r2 I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow) = (r5 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) kotlinx.coroutines.flow.internal.AbstractSharedFlow._subscriptionCount kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[Catch: all \-\> 0x001b, TRY_ENTER] (LINE:35)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|0x0005: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0016 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x001b, blocks: (B:22:0x0003, B:24:0x0007), top: B:32:0x0003 \}\lCatch: all \-\> 0x001b\l|0x0007: NEW_INSTANCE  (r2 I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow) =  kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[Catch: all \-\> 0x001b]\l0x0009: INVOKE  (r3 I:int) = (r5 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) type: VIRTUAL call: kotlinx.coroutines.flow.internal.AbstractSharedFlow.getNCollectors():int A[Catch: all \-\> 0x001b, MD:():int (m)]\l0x000d: INVOKE  (r2 I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow), (r3 I:int) type: DIRECT call: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.\<init\>(int):void A[Catch: all \-\> 0x001b, MD:(int):void (m)]\l0x0010: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: IPUT  \l  (r3 I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[D('it' kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow)])\l  (r5 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow)\l kotlinx.coroutines.flow.internal.AbstractSharedFlow._subscriptionCount kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[Catch: all \-\> 0x001b, TRY_LEAVE] (LINE:36)\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: MONITOR_EXIT  (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: CHECK_CAST (r2 I:kotlinx.coroutines.flow.StateFlow) = (kotlinx.coroutines.flow.StateFlow) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|RETURN\l|0x001a: RETURN  (r2 I:kotlinx.coroutines.flow.StateFlow\<java.lang.Integer\>)  (LINE:38)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|ExcHandler: all \-\> 0x001b\l|0x001b: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x001b] (LINE:35)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001d|0x001d: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.flow.StateFlow\<java.lang.Integer\> kotlinx.coroutines.flow.internal.AbstractSharedFlow.getSubscriptionCount((r5 'this' I:kotlinx.coroutines.flow.internal.AbstractSharedFlow\<S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x001d \-\> B:18:?, CROSS_EDGE: B:23:0x0005 \-\> B:26:0x0016, CROSS_EDGE: B:32:0x0003 \-\> B:29:0x001b\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x001b, blocks: (B:22:0x0003, B:24:0x0007), top: B:32:0x0003 \}\lTYPE_VARS: [S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>]\lSIGNATURE: ()Lkotlinx\/coroutines\/flow\/StateFlow\<Ljava\/lang\/Integer;\>;\lDebug Info:\l  0x0011\-0x0015: r3 'it' Lkotlinx\/coroutines\/flow\/internal\/SubscriptionCountStateFlow;\l  0x0012\-0x0015: r4 '$i$a$\-also\-AbstractSharedFlow$subscriptionCount$1$1' I\l  0x0003\-0x0016: r1 '$i$a$\-synchronized\-AbstractSharedFlow$subscriptionCount$1' I\l  0x0001\-0x0018: r0 '$i$f$synchronized' I\l  0x001b\-0x001d: r0 '$i$f$synchronized' I\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_32;
Node_32 -> Node_22;
Node_32 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_26;
Node_24 -> Node_33;
Node_33 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_18;
Node_29 -> Node_31;
Node_31 -> Node_18;
}

