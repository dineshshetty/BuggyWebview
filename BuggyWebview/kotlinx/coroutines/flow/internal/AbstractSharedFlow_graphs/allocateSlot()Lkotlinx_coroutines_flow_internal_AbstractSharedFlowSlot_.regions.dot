digraph "CFG forkotlinx.coroutines.flow.internal.AbstractSharedFlow.allocateSlot()Lkotlinx\/coroutines\/flow\/internal\/AbstractSharedFlowSlot;" {
subgraph cluster_Region_172413922 {
label = "R(3:2|(1:23)|24) | DECL_VAR: S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\> null, kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow null\l";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_1581446426 {
label = "Synchronized:R(2:2|(5:5|(1:7)(1:(1:29))|8|(4:9|(1:11)|12|(1:14))|18))";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0002}"];
subgraph cluster_Region_1075903911 {
label = "R(5:5|(1:7)(1:(1:29))|8|(4:9|(1:11)|12|(1:14))|18)";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0004|TRY_ENTER\lTryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\l|kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] S[] r3 = getSlots()     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
subgraph cluster_IfRegion_1806245705 {
label = "IF [B:41:0x0009] THEN: R(1:7) ELSE: R(1:(1:29))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0009|if (r3 == null) goto L7\l}"];
subgraph cluster_Region_509067251 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x000b|TryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\l|kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[] S[] r4 = createSlotArray(2)     \/\/ Catch: java.lang.Throwable \-\> L6b\lr9.slots = r4     \/\/ Catch: java.lang.Throwable \-\> L6b\lr3 = r4\l}"];
}
subgraph cluster_Region_647140051 {
label = "R(1:(1:29)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_740493918 {
label = "IF [B:44:0x001a] THEN: R(1:29) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x001a|if (getNCollectors() \>= r3.length) goto L29\l}"];
subgraph cluster_Region_647060913 {
label = "R(1:29)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x001c|TryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\l|java.lang.Object[] java.lang.Object[] r4 = java.util.Arrays.copyOf(r3, r3.length * 2)     \/\/ Catch: java.lang.Throwable \-\> L6b\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r4, \"copyOf(this, newSize)\")     \/\/ Catch: java.lang.Throwable \-\> L6b\lr9.slots = (S[]) ((kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) r4)     \/\/ Catch: java.lang.Throwable \-\> L6b\lr3 = (kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]) r4     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
}
}
}
}
Node_47 [shape=record,label="{47\:\ 0x0033|TryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\lPHI: r3 \l  PHI: (r3v2 S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>[]) = (r3v0 S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>[]), (r3v1 S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>[]), (r3v3 S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>[]) binds: [B:44:0x001a, B:45:0x001c, B:42:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r9.nextIndex     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
subgraph cluster_LoopRegion_1262951198 {
label = "LOOP:0: (4:9|(1:11)|12|(1:14))";
node [shape=record,color=blue];
Node_55 [shape=record,label="{55\:\ 0x0051|LOOP_END\lLOOP:0: B:48:0x0039\-\>B:55:0x0051\l|if (r5.allocateLocked(r9) == false) goto L9\l}"];
subgraph cluster_Region_15972030 {
label = "R(4:9|(1:11)|12|(1:14))";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0039|LOOP_START\lTryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lLOOP:0: B:48:0x0039\-\>B:55:0x0051\lCatch: all \-\> 0x006b\lPHI: r4 \l  PHI: (r4v5 'index' int) = (r4v4 'index' int), (r4v7 'index' int) binds: [B:47:0x0033, B:55:0x0051] A[DONT_GENERATE, DONT_INLINE]\l|S r6 = r3[r4]     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
subgraph cluster_IfRegion_689353937 {
label = "IF [B:49:0x003c] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x003c|if (r6 == null) goto L11\l}"];
subgraph cluster_Region_603470196 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x003e|TryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\l|kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot r6 = createSlot()     \/\/ Catch: java.lang.Throwable \-\> L6b\lr3[r4] = r6     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
}
}
Node_51 [shape=record,label="{51\:\ 0x0046|TryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\lPHI: r6 \l  PHI: (r6v3 S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>) = (r6v2 S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>), (r6v9 S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>) binds: [B:49:0x003c, B:50:0x003e] A[DONT_GENERATE, DONT_INLINE]\l|r5 = r6\lr4++     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
subgraph cluster_IfRegion_534805 {
label = "IF [B:52:0x004a] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x004a|if (r4 \>= r3.length) goto L14\l}"];
subgraph cluster_Region_885891760 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x004c|r4 = 0\l}"];
}
}
}
}
Node_56 [shape=record,label="{56\:\ 0x0053|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\l|r9.nextIndex = r4     \/\/ Catch: java.lang.Throwable \-\> L6b\lr9.nCollectors = getNCollectors() + 1     \/\/ Catch: java.lang.Throwable \-\> L6b\lkotlinx.coroutines.flow.internal.SubscriptionCountStateFlow r6 = r9._subscriptionCount     \/\/ Catch: java.lang.Throwable \-\> L6b\l}"];
}
}
subgraph cluster_IfRegion_1397172280 {
label = "IF [B:60:0x0064] THEN: R(1:23) ELSE: null";
node [shape=record,color=blue];
Node_60 [shape=record,label="{60\:\ 0x0064|if (r6 != null) goto L23\l}"];
subgraph cluster_Region_1332461245 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x0067|r6.increment(1)\l}"];
}
}
Node_63 [shape=record,label="{63\:\ 0x006a|RETURN\l|return r5\l}"];
}
Node_35 [shape=record,color=red,label="{35\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0000}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0003}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x0004|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x004d|TryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\lPHI: r4 \l  PHI: (r4v7 'index' int) = (r4v6 'index' int), (r4v8 'index' int) binds: [B:52:0x004a, B:53:0x004c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_69 [shape=record,color=red,label="{69\:\ 0x0053|SYNTHETIC\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x005f}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x0061|DONT_GENERATE\l|monitor\-exit()\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0063}"];
Node_36 [shape=record,color=red,label="{36\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_68 [shape=record,color=red,label="{68\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0015|TryCatch #0 \{, blocks: (B:40:0x0004, B:42:0x000b, B:47:0x0033, B:48:0x0039, B:50:0x003e, B:51:0x0046, B:54:0x004d, B:56:0x0053, B:43:0x0015, B:45:0x001c), top: B:67:0x0004 \}\lCatch: all \-\> 0x006b\l}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x006b|REMOVE\lExcHandler: all \-\> 0x006b\l}"];
Node_66 [shape=record,color=red,label="{66\:\ 0x006d|REMOVE\l|throw r2\l}"];
MethodNode[shape=record,label="{public final S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\> kotlinx.coroutines.flow.internal.AbstractSharedFlow.allocateSlot((r9v0 'this' kotlinx.coroutines.flow.internal.AbstractSharedFlow\<S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:55:0x0051 \-\> B:48:0x0039, CROSS_EDGE: B:60:0x0064 \-\> B:63:0x006a, CROSS_EDGE: B:66:0x006d \-\> B:36:?, CROSS_EDGE: B:52:0x004a \-\> B:54:0x004d, CROSS_EDGE: B:49:0x003c \-\> B:51:0x0046, CROSS_EDGE: B:45:0x001c \-\> B:47:0x0033, CROSS_EDGE: B:44:0x001a \-\> B:47:0x0033, CROSS_EDGE: B:67:0x0004 \-\> B:64:0x006b\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>]\lSIGNATURE: ()TS;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l \-\> Type inference failed for: r4v2, types: [kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot[]]\}\l}"];
MethodNode -> Node_35;Node_38 -> Node_39;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_43[style=dashed];
Node_42 -> Node_47;
Node_44 -> Node_45;
Node_44 -> Node_47[style=dashed];
Node_45 -> Node_47;
Node_47 -> Node_48;
Node_55 -> Node_48;
Node_55 -> Node_69[style=dashed];
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_49 -> Node_51[style=dashed];
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_52 -> Node_54[style=dashed];
Node_53 -> Node_54;
Node_56 -> Node_57;
Node_56 -> Node_68;
Node_60 -> Node_62;
Node_60 -> Node_63[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_36;
Node_35 -> Node_37;
Node_37 -> Node_38;
Node_39 -> Node_67;
Node_67 -> Node_40;
Node_67 -> Node_64;
Node_54 -> Node_55;
Node_69 -> Node_56;
Node_57 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_60;
Node_68 -> Node_64;
Node_43 -> Node_44;
Node_64 -> Node_66;
Node_66 -> Node_36;
}

