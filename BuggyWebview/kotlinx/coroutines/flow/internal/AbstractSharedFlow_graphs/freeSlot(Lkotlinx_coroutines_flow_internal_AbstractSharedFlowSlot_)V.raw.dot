digraph "CFG forkotlinx.coroutines.flow.internal.AbstractSharedFlow.freeSlot(Lkotlinx\/coroutines\/flow\/internal\/AbstractSharedFlowSlot;)V" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:78)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:79)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0002|0x0002: MONITOR_ENTER  (r7 I:??[OBJECT, ARRAY])  (LINE:139)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0003|0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0004|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_36 [shape=record,label="{36\:\ 0x0004|TRY_ENTER\lTryCatch #0 \{all \-\> 0x003c, blocks: (B:36:0x0004, B:38:0x0016, B:39:0x0018), top: B:54:0x0004 \}\lCatch: all \-\> 0x003c\l|0x0004: INVOKE  (r3 I:int) = (r7 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) type: VIRTUAL call: kotlinx.coroutines.flow.internal.AbstractSharedFlow.getNCollectors():int A[Catch: all \-\> 0x003c, MD:():int (m), TRY_ENTER] (LINE:80)\l0x0008: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0009: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) A[Catch: all \-\> 0x003c]\l0x000a: IPUT  (r3 I:int), (r7 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) kotlinx.coroutines.flow.internal.AbstractSharedFlow.nCollectors int A[Catch: all \-\> 0x003c]\l0x000c: IGET  (r3 I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow) = (r7 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) kotlinx.coroutines.flow.internal.AbstractSharedFlow._subscriptionCount kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[Catch: all \-\> 0x003c] (LINE:81)\l0x000e: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('subscriptionCount' java.lang.Object)]) = (r3 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r3 I:int) = (r7 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) type: VIRTUAL call: kotlinx.coroutines.flow.internal.AbstractSharedFlow.getNCollectors():int A[Catch: all \-\> 0x003c, MD:():int (m)] (LINE:83)\l0x0013: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0014|0x0014: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0018 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0016|TryCatch #0 \{all \-\> 0x003c, blocks: (B:36:0x0004, B:38:0x0016, B:39:0x0018), top: B:54:0x0004 \}\lCatch: all \-\> 0x003c\l|0x0016: IPUT  (r5 I:int), (r7 I:kotlinx.coroutines.flow.internal.AbstractSharedFlow) kotlinx.coroutines.flow.internal.AbstractSharedFlow.nextIndex int A[Catch: all \-\> 0x003c]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0018|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x003c, blocks: (B:36:0x0004, B:38:0x0016, B:39:0x0018), top: B:54:0x0004 \}\lCatch: all \-\> 0x003c\l|0x0018: INVOKE  (r3 I:kotlin.coroutines.Continuation[]) = \l  (r8 I:kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot A[D('slot' kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot)])\l  (r7 I:java.lang.Object)\l type: VIRTUAL call: kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot.freeLocked(java.lang.Object):kotlin.coroutines.Continuation[] A[Catch: all \-\> 0x003c, MD:(F):kotlin.coroutines.Continuation\<kotlin.Unit\>[] (m), TRY_LEAVE] (LINE:84)\l}"];
Node_40 [shape=record,label="{40\:\ 0x001c|0x001c: MONITOR_EXIT  (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x001e|0x001e: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('$i$f$synchronized' int)]) = (r3 I:??[OBJECT, ARRAY])  (LINE:79)\l0x001f: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[] A[D('resumes' kotlin.coroutines.Continuation[])])  (LINE:91)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|LOOP_START\lLOOP:0: B:42:0x0020\-\>B:58:0x0020\l|0x0020: IF  (r5 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:56:0x0035 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0022|0x0022: AGET  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][] A[D('resumes' kotlin.coroutines.Continuation[])]), (r5 I:??[int, short, byte, char]) \l0x0024: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0026|0x0026: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cont' kotlin.coroutines.Continuation)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0029 \l}"];
Node_57 [shape=record,label="{57\:\ 0x0029|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0029|0x0029: SGET  (r6 I:kotlin.Result$Companion) =  kotlin.Result.Companion kotlin.Result$Companion \l0x002b: SGET  (r6 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l0x002d: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.lang.Object) type: STATIC call: kotlin.Result.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<T\>:(java.lang.Object):java.lang.Object (m)]\l0x0031: INVOKE  (r3 I:kotlin.coroutines.Continuation A[D('cont' kotlin.coroutines.Continuation)]), (r6 I:java.lang.Object) type: INTERFACE call: kotlin.coroutines.Continuation.resumeWith(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x0020|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x0020|LOOP_END\lSYNTHETIC\lLOOP:0: B:42:0x0020\-\>B:58:0x0020\l}"];
Node_59 [shape=record,label="{59\:\ 0x0020|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0035|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0035|0x0035: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('subscriptionCount' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0038  (LINE:93)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0038|0x0038: INVOKE  \l  (r0 I:kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow A[D('subscriptionCount' java.lang.Object)])\l  (r4 I:int)\l type: VIRTUAL call: kotlinx.coroutines.flow.internal.SubscriptionCountStateFlow.increment(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x003b|RETURN\lORIG_RETURN\l|0x003b: RETURN    (LINE:94)\l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_61 [shape=record,label="{61\:\ ?|SYNTHETIC\lRETURN\l|0x003b: RETURN   A[SYNTHETIC] (LINE:94)\l}"];
Node_55 [shape=record,label="{55\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_51 [shape=record,label="{51\:\ 0x003c|ExcHandler: all \-\> 0x003c\l|0x003c: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x003c] (LINE:84)\l}"];
Node_53 [shape=record,label="{53\:\ 0x003e|0x003e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.flow.internal.AbstractSharedFlow.freeSlot((r7 'this' I:kotlinx.coroutines.flow.internal.AbstractSharedFlow\<S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>\> A[IMMUTABLE_TYPE, THIS]), (r8 I:S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\> A[D('slot' kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0029 \-\> B:42:0x0020, BACK_EDGE: B:44:0x0026 \-\> B:42:0x0020, CROSS_EDGE: B:47:0x0035 \-\> B:50:0x003b, CROSS_EDGE: B:53:0x003e \-\> B:32:?, CROSS_EDGE: B:37:0x0014 \-\> B:39:0x0018, CROSS_EDGE: B:54:0x0004 \-\> B:51:0x003c\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x003c, blocks: (B:36:0x0004, B:38:0x0016, B:39:0x0018), top: B:54:0x0004 \}\lTYPE_VARS: [S extends kotlinx.coroutines.flow.internal.AbstractSharedFlowSlot\<?\>]\lSIGNATURE: (TS;)V\lDebug Info:\l  0x0004\-0x001c: r2 '$i$a$\-synchronized\-AbstractSharedFlow$freeSlot$resumes$1' I\l  0x0002\-0x001e: r1 '$i$f$synchronized' I\l  0x0024\-0x0035: r3 'cont' Lkotlin\/coroutines\/Continuation;\l  0x001f\-0x003c: r1 'resumes' [Lkotlin\/coroutines\/Continuation;\l  0x0001\-0x003e: r0 'subscriptionCount' Ljava\/lang\/Object;\l  0x003c\-0x003e: r1 '$i$f$synchronized' I\l  \-1 \-0x003e: r8 'slot' Lkotlinx\/coroutines\/flow\/internal\/AbstractSharedFlowSlot;\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_54;
Node_54 -> Node_36;
Node_54 -> Node_51;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_39 -> Node_55;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_56;
Node_43 -> Node_44;
Node_44 -> Node_57;
Node_44 -> Node_59[style=dashed];
Node_57 -> Node_46;
Node_46 -> Node_60;
Node_60 -> Node_58;
Node_58 -> Node_42;
Node_59 -> Node_58;
Node_56 -> Node_47;
Node_47 -> Node_49;
Node_47 -> Node_61[style=dashed];
Node_49 -> Node_50;
Node_50 -> Node_32;
Node_61 -> Node_32;
Node_55 -> Node_51;
Node_51 -> Node_53;
Node_53 -> Node_32;
}

