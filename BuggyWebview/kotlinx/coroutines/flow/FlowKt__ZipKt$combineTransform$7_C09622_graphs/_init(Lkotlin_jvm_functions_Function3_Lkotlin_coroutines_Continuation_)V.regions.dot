digraph "CFG forkotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7.2.\<init\>(Lkotlin\/jvm\/functions\/Function3;Lkotlin\/coroutines\/Continuation;)V" {
subgraph cluster_Region_965559683 {
label = "R(2:1|(1:1))";
node [shape=record,color=blue];
Node_InsnContainer_953975078 [shape=record,label="{|super(3, r3)\l}"];
subgraph cluster_Region_765777193 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0000|r1.$transform = r2\l}"];
}
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0006}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7.2.\<init\>((r1v0 'this' kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7$2 A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T[], ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__ZipKt$combineTransform$7$2\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l \-\> 'super' call moved to the top of the method (can break code semantics)\l DEBUG: \l \-\> Multi\-variable search result rejected for r2v0, resolved type: kotlin.jvm.functions.Function3\<? super kotlinx.coroutines.flow.FlowCollector\<? super R\>, ? super T[], ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>\}\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function3\<\-Lkotlinx\/coroutines\/flow\/FlowCollector\<\-TR;\>;\-[TT;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlinx\/coroutines\/flow\/FlowKt__ZipKt$combineTransform$7$2;\>;)V\l}"];
MethodNode -> Node_4;Node_6 -> Node_7;
Node_4 -> Node_6;
Node_7 -> Node_5;
}

