digraph "CFG forkotlinx.coroutines.flow.FlowKt__MergeKt.flattenMerge(Lkotlinx\/coroutines\/flow\/Flow;I)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:137)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0001|0x0001: IF  (r10 I:??[int, byte, short, char] A[D('concurrency' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:19:0x0005 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|0x0003: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0020 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|0x0008: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('concurrency' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x000f  (LINE:138)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: INVOKE  (r0 I:kotlinx.coroutines.flow.Flow) = (r9 I:kotlinx.coroutines.flow.Flow A[D('$this$flattenMerge' kotlinx.coroutines.flow.Flow)]) type: STATIC call: kotlinx.coroutines.flow.FlowKt.flattenConcat(kotlinx.coroutines.flow.Flow):kotlinx.coroutines.flow.Flow A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends kotlinx.coroutines.flow.Flow\<? extends T\>\>):kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) A[SYNTHETIC]\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge) =  kotlinx.coroutines.flow.internal.ChannelFlowMerge \l0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: CONST  (r7 I:??[int, float, short, byte, char]) = (28 ??[int, float, short, byte, char]) \l0x0016: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0018: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$flattenMerge' kotlinx.coroutines.flow.Flow)]) \l0x0019: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('concurrency' int)]) \l0x001a: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.internal.ChannelFlowMerge)\l  (r2 I:kotlinx.coroutines.flow.Flow)\l  (r3 I:int)\l  (r4 I:kotlin.coroutines.CoroutineContext)\l  (r5 I:int)\l  (r6 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r7 I:int)\l  (r8 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlinx.coroutines.flow.internal.ChannelFlowMerge.\<init\>(kotlinx.coroutines.flow.Flow, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(kotlinx.coroutines.flow.Flow, int, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, int, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x001d: CHECK_CAST (r0 I:kotlinx.coroutines.flow.Flow) = (kotlinx.coroutines.flow.Flow) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: RETURN  (r0 I:kotlinx.coroutines.flow.Flow\<T\>) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0020|0x0020: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:227)\l0x0021: INVOKE  (r1 I:java.lang.Integer) = (r10 I:int A[D('concurrency' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:137)\l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"Expected positive concurrency level, but had \" \l0x0027: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-FlowKt__MergeKt$flattenMerge$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x002b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x002d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0031: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0034|0x0034: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__MergeKt.flattenMerge((r9 I:kotlinx.coroutines.flow.Flow\<? extends kotlinx.coroutines.flow.Flow\<? extends T\>\> A[D('$this$flattenMerge' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('concurrency' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x000f \-\> B:24:0x001f, CROSS_EDGE: B:26:0x0034 \-\> B:15:?, CROSS_EDGE: B:19:0x0005 \-\> B:20:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0021\-0x002b: r0 '$i$a$\-require\-FlowKt__MergeKt$flattenMerge$1' I\l  \-1 \-0x0034: r9 '$this$flattenMerge' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0034: r10 'concurrency' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;\>;I)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_27;
Node_27 -> Node_15;
Node_23 -> Node_24;
Node_24 -> Node_15;
Node_25 -> Node_26;
Node_26 -> Node_15;
Node_19 -> Node_20;
}

