digraph "CFG forkotlinx.coroutines.flow.FlowKt__MergeKt.flatMapMerge(Lkotlinx\/coroutines\/flow\/Flow;ILkotlin\/jvm\/functions\/Function2;)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.flow.Flow r0 = kotlinx.coroutines.flow.FlowKt.flattenMerge(new kotlinx.coroutines.flow.FlowKt__MergeKt$flatMapMerge$$inlined$map$1(), r7)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<R\> kotlinx.coroutines.flow.FlowKt__MergeKt.flatMapMerge((r6v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$flatMapMerge' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'concurrency' int A[D('concurrency' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.Flow\<? extends R\>\>, ? extends java.lang.Object\> A[D('transform' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;ILkotlin\/jvm\/functions\/Function2\<\-TT;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlinx\/coroutines\/flow\/Flow\<+TR;\>;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/flow\/Flow\<TR;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

