digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt.stateIn(Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;Ljava\/lang\/Object;)Lkotlinx\/coroutines\/flow\/StateFlow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:312)\l0x0001: INVOKE  (r0 I:kotlinx.coroutines.flow.SharingConfig) = (r8 I:kotlinx.coroutines.flow.Flow A[D('$this$stateIn' kotlinx.coroutines.flow.Flow)]), (r0 I:int) type: STATIC call: kotlinx.coroutines.flow.FlowKt__ShareKt.configureSharing$FlowKt__ShareKt(kotlinx.coroutines.flow.Flow, int):kotlinx.coroutines.flow.SharingConfig A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, int):kotlinx.coroutines.flow.SharingConfig\<T\> (m)]\l0x0005: INVOKE  (r1 I:kotlinx.coroutines.flow.MutableStateFlow) = (r11 I:java.lang.Object A[D('initialValue' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.flow.StateFlowKt.MutableStateFlow(java.lang.Object):kotlinx.coroutines.flow.MutableStateFlow A[MD:\<T\>:(T):kotlinx.coroutines.flow.MutableStateFlow\<T\> (m)] (LINE:313)\l0x0009: IGET  (r3 I:kotlin.coroutines.CoroutineContext) = (r0 I:kotlinx.coroutines.flow.SharingConfig A[D('config' kotlinx.coroutines.flow.SharingConfig)]) kotlinx.coroutines.flow.SharingConfig.context kotlin.coroutines.CoroutineContext  (LINE:314)\l0x000b: IGET  (r4 I:kotlinx.coroutines.flow.Flow\<T\>) = (r0 I:kotlinx.coroutines.flow.SharingConfig A[D('config' kotlinx.coroutines.flow.SharingConfig)]) kotlinx.coroutines.flow.SharingConfig.upstream kotlinx.coroutines.flow.Flow \l0x000d: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('state' kotlinx.coroutines.flow.MutableStateFlow)]) \l0x000e: CHECK_CAST (r5 I:kotlinx.coroutines.flow.MutableSharedFlow) = (kotlinx.coroutines.flow.MutableSharedFlow) (r5 I:??[OBJECT, ARRAY]) \l0x0010: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('scope' kotlinx.coroutines.CoroutineScope)]) \l0x0011: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('started' kotlinx.coroutines.flow.SharingStarted)]) \l0x0012: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('initialValue' java.lang.Object)]) \l0x0013: INVOKE  (r2 I:kotlinx.coroutines.Job) = \l  (r2 I:kotlinx.coroutines.CoroutineScope)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l  (r4 I:kotlinx.coroutines.flow.Flow)\l  (r5 I:kotlinx.coroutines.flow.MutableSharedFlow)\l  (r6 I:kotlinx.coroutines.flow.SharingStarted)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.flow.FlowKt__ShareKt.launchSharing$FlowKt__ShareKt(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.MutableSharedFlow, kotlinx.coroutines.flow.SharingStarted, java.lang.Object):kotlinx.coroutines.Job A[MD:\<T\>:(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.flow.Flow\<? extends T\>, kotlinx.coroutines.flow.MutableSharedFlow\<T\>, kotlinx.coroutines.flow.SharingStarted, T):kotlinx.coroutines.Job (m)]\l0x0017: NEW_INSTANCE  (r3 I:kotlinx.coroutines.flow.ReadonlyStateFlow) =  kotlinx.coroutines.flow.ReadonlyStateFlow  (LINE:315)\l0x0019: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('state' kotlinx.coroutines.flow.MutableStateFlow)]) \l0x001a: CHECK_CAST (r4 I:kotlinx.coroutines.flow.StateFlow) = (kotlinx.coroutines.flow.StateFlow) (r4 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  \l  (r3 I:kotlinx.coroutines.flow.ReadonlyStateFlow)\l  (r4 I:kotlinx.coroutines.flow.StateFlow)\l  (r2 I:kotlinx.coroutines.Job A[D('job' kotlinx.coroutines.Job)])\l type: DIRECT call: kotlinx.coroutines.flow.ReadonlyStateFlow.\<init\>(kotlinx.coroutines.flow.StateFlow, kotlinx.coroutines.Job):void A[MD:(kotlinx.coroutines.flow.StateFlow\<? extends T\>, kotlinx.coroutines.Job):void (m)]\l0x001f: CHECK_CAST (r3 I:kotlinx.coroutines.flow.StateFlow) = (kotlinx.coroutines.flow.StateFlow) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|RETURN\l|0x0021: RETURN  (r3 I:kotlinx.coroutines.flow.StateFlow\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.StateFlow\<T\> kotlinx.coroutines.flow.FlowKt__ShareKt.stateIn((r8 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$stateIn' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlinx.coroutines.flow.SharingStarted A[D('started' kotlinx.coroutines.flow.SharingStarted), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:T A[D('initialValue' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0021: r0 'config' Lkotlinx\/coroutines\/flow\/SharingConfig;\l  0x0009\-0x0021: r1 'state' Lkotlinx\/coroutines\/flow\/MutableStateFlow;\l  0x0017\-0x0021: r2 'job' Lkotlinx\/coroutines\/Job;\l  \-1 \-0x0021: r8 '$this$stateIn' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0021: r9 'scope' Lkotlinx\/coroutines\/CoroutineScope;\l  \-1 \-0x0021: r10 'started' Lkotlinx\/coroutines\/flow\/SharingStarted;\l  \-1 \-0x0021: r11 'initialValue' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;TT;)Lkotlinx\/coroutines\/flow\/StateFlow\<TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

