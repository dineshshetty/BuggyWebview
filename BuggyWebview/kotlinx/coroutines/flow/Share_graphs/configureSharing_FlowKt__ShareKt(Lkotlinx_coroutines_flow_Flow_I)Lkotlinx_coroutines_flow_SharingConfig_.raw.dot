digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt.configureSharing$FlowKt__ShareKt(Lkotlinx\/coroutines\/flow\/Flow;I)Lkotlinx\/coroutines\/flow\/SharingConfig;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:160)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0017 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:427)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0009|0x0009: IF  (r8 I:??[int, byte, short, char] A[D('replay' int)]) \< (0 ??[int, byte, short, char])  \-\> B:39:0x000d  (LINE:160)\l}"];
Node_38 [shape=record,label="{38\:\ 0x000b|0x000b: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-FlowKt__ShareKt$configureSharing$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-FlowKt__ShareKt$configureSharing$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0011 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0013: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x000d|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-FlowKt__ShareKt$configureSharing$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0017|0x0017: SGET  (r0 I:kotlinx.coroutines.channels.Channel$Factory) =  kotlinx.coroutines.channels.Channel.Factory kotlinx.coroutines.channels.Channel$Factory  (LINE:161)\l0x0019: INVOKE  (r0 I:int) = (r0 I:kotlinx.coroutines.channels.Channel$Factory) type: VIRTUAL call: kotlinx.coroutines.channels.Channel.Factory.getCHANNEL_DEFAULT_CAPACITY$kotlinx_coroutines_core():int A[MD:():int (m)]\l0x001d: INVOKE  (r0 I:int) = (r8 I:int A[D('replay' int)]), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0021: ARITH  (r0 I:int) = (r0 I:int) \- (r8 I:int A[D('replay' int)]) \l0x0022: INSTANCE_OF  (r3 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)]) kotlinx.coroutines.flow.internal.ChannelFlow  (LINE:163)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0024|0x0024: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0067 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0026|0x0026: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])  (LINE:165)\l0x0027: CHECK_CAST (r3 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r3 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r3 I:kotlinx.coroutines.flow.Flow) = (r3 I:kotlinx.coroutines.flow.internal.ChannelFlow) type: VIRTUAL call: kotlinx.coroutines.flow.internal.ChannelFlow.dropChannelOperators():kotlinx.coroutines.flow.Flow A[MD:():kotlinx.coroutines.flow.Flow\<T\> (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x002d|0x002d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('upstream' kotlinx.coroutines.flow.Flow)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0067  (LINE:166)\l}"];
Node_48 [shape=record,label="{48\:\ 0x002f|0x002f: NEW_INSTANCE  (r4 I:kotlinx.coroutines.flow.SharingConfig) =  kotlinx.coroutines.flow.SharingConfig  (LINE:167)\l0x0032: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])  (LINE:169)\l0x0033: CHECK_CAST (r5 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r5 I:??[OBJECT, ARRAY]) \l0x0035: IGET  (r5 I:int) = (r5 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.capacity int \l}"];
Node_49 [shape=record,label="{49\:\ 0x0037|0x0037: SWITCH  (r5 I:??)\l case \-3: goto B:51:0x0040\l case \-2: goto B:51:0x0040\l case \-1: goto B:50:0x003a\l case 0: goto B:51:0x0040\l default: goto B:50:0x003a \l}"];
Node_50 [shape=record,label="{50\:\ 0x003a|0x003a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])  (LINE:177)\l0x003b: CHECK_CAST (r1 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r1 I:??[OBJECT, ARRAY]) \l0x003d: IGET  (r1 I:int) = (r1 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.capacity int \l}"];
Node_60 [shape=record,label="{60\:\ 0x0059|0x0059: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])  (LINE:179)\l0x005a: CHECK_CAST (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r2 I:??[OBJECT, ARRAY]) \l0x005c: IGET  (r2 I:kotlinx.coroutines.channels.BufferOverflow) = (r2 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow \l0x005e: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])  (LINE:180)\l0x005f: CHECK_CAST (r5 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r5 I:??[OBJECT, ARRAY]) \l0x0061: IGET  (r5 I:kotlin.coroutines.CoroutineContext) = (r5 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.context kotlin.coroutines.CoroutineContext \l0x0063: INVOKE  \l  (r4 I:kotlinx.coroutines.flow.SharingConfig)\l  (r3 I:kotlinx.coroutines.flow.Flow A[D('upstream' kotlinx.coroutines.flow.Flow)])\l  (r1 I:int)\l  (r2 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r5 I:kotlin.coroutines.CoroutineContext)\l type: DIRECT call: kotlinx.coroutines.flow.SharingConfig.\<init\>(kotlinx.coroutines.flow.Flow, int, kotlinx.coroutines.channels.BufferOverflow, kotlin.coroutines.CoroutineContext):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends T\>, int, kotlinx.coroutines.channels.BufferOverflow, kotlin.coroutines.CoroutineContext):void (m)] (LINE:167)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0066|RETURN\l|0x0066: RETURN  (r4 I:kotlinx.coroutines.flow.SharingConfig\<T\>) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0040|0x0041: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])  (LINE:172)\l0x0042: CHECK_CAST (r5 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r5 I:??[OBJECT, ARRAY]) \l0x0044: IGET  (r5 I:kotlinx.coroutines.channels.BufferOverflow) = (r5 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow \l0x0046: SGET  (r6 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow \l}"];
Node_52 [shape=record,label="{52\:\ 0x0048|0x0048: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0055 \l}"];
Node_53 [shape=record,label="{53\:\ 0x004a|0x004a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])  (LINE:173)\l0x004b: CHECK_CAST (r1 I:kotlinx.coroutines.flow.internal.ChannelFlow) = (kotlinx.coroutines.flow.internal.ChannelFlow) (r1 I:??[OBJECT, ARRAY]) \l0x004d: IGET  (r1 I:int) = (r1 I:kotlinx.coroutines.flow.internal.ChannelFlow) kotlinx.coroutines.flow.internal.ChannelFlow.capacity int \l}"];
Node_54 [shape=record,label="{54\:\ 0x004f|0x004f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x0053 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0051|0x0051: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0053|0x0053: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('defaultExtraCapacity' int)]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0055|0x0055: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('replay' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0058  (LINE:174)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0058|0x0058: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:175)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0067|0x0067: NEW_INSTANCE  (r1 I:kotlinx.coroutines.flow.SharingConfig) =  kotlinx.coroutines.flow.SharingConfig  (LINE:185)\l0x006b: SGET  (r2 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow  (LINE:188)\l0x006d: SGET  (r3 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:189)\l0x006f: CHECK_CAST (r3 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r3 I:??[OBJECT, ARRAY]) \l0x0071: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.SharingConfig)\l  (r7 I:kotlinx.coroutines.flow.Flow A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow)])\l  (r0 I:int A[D('defaultExtraCapacity' int)])\l  (r2 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r3 I:kotlin.coroutines.CoroutineContext)\l type: DIRECT call: kotlinx.coroutines.flow.SharingConfig.\<init\>(kotlinx.coroutines.flow.Flow, int, kotlinx.coroutines.channels.BufferOverflow, kotlin.coroutines.CoroutineContext):void A[MD:(kotlinx.coroutines.flow.Flow\<? extends T\>, int, kotlinx.coroutines.channels.BufferOverflow, kotlin.coroutines.CoroutineContext):void (m)] (LINE:185)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0074|RETURN\l|0x0074: RETURN  (r1 I:kotlinx.coroutines.flow.SharingConfig\<T\>) \l}"];
MethodNode[shape=record,label="{private static final kotlinx.coroutines.flow.SharingConfig\<T\> kotlinx.coroutines.flow.FlowKt__ShareKt.configureSharing$FlowKt__ShareKt((r7 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$configureSharing' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('replay' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:61:0x0066 \-\> B:33:?, CROSS_EDGE: B:55:0x0051 \-\> B:60:0x0059, CROSS_EDGE: B:56:0x0053 \-\> B:60:0x0059, CROSS_EDGE: B:59:0x0058 \-\> B:60:0x0059, CROSS_EDGE: B:57:0x0055 \-\> B:60:0x0059, CROSS_EDGE: B:63:0x0074 \-\> B:33:?, CROSS_EDGE: B:45:0x0024 \-\> B:62:0x0067, CROSS_EDGE: B:39:0x000d \-\> B:40:0x000e, CROSS_EDGE: B:35:0x0006 \-\> B:44:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x000e: r0 '$i$a$\-assert\-FlowKt__ShareKt$configureSharing$1' I\l  0x002d\-0x0067: r3 'upstream' Lkotlinx\/coroutines\/flow\/Flow;\l  0x0022\-0x0081: r0 'defaultExtraCapacity' I\l  \-1 \-0x0081: r7 '$this$configureSharing' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0081: r8 'replay' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;I)Lkotlinx\/coroutines\/flow\/SharingConfig\<TT;\>;\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_44;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_44[style=dashed];
Node_42 -> Node_43;
Node_43 -> Node_33;
Node_39 -> Node_40;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_62;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_62;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_49 -> Node_51;
Node_50 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_33;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_57;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_60;
Node_56 -> Node_60;
Node_57 -> Node_59;
Node_57 -> Node_60[style=dashed];
Node_59 -> Node_60;
Node_62 -> Node_63;
Node_63 -> Node_33;
}

