digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt.launchSharing$FlowKt__ShareKt(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/flow\/MutableSharedFlow;Lkotlinx\/coroutines\/flow\/SharingStarted;Ljava\/lang\/Object;)Lkotlinx\/coroutines\/Job;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:kotlinx.coroutines.flow.SharingStarted$Companion) =  kotlinx.coroutines.flow.SharingStarted.Companion kotlinx.coroutines.flow.SharingStarted$Companion  (LINE:208)\l0x0002: INVOKE  (r0 I:kotlinx.coroutines.flow.SharingStarted) = (r0 I:kotlinx.coroutines.flow.SharingStarted$Companion) type: VIRTUAL call: kotlinx.coroutines.flow.SharingStarted.Companion.getEagerly():kotlinx.coroutines.flow.SharingStarted A[MD:():kotlinx.coroutines.flow.SharingStarted (m)]\l0x0006: INVOKE  (r0 I:boolean) = (r12 I:java.lang.Object A[D('started' kotlinx.coroutines.flow.SharingStarted)]), (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000f \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|0x000c: SGET  (r0 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart.DEFAULT kotlinx.coroutines.CoroutineStart \l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|0x0011: NEW_INSTANCE  (r7 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1) =  kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1  (LINE:209)\l0x0013: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x0015: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('started' kotlinx.coroutines.flow.SharingStarted)]) \l0x0016: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('upstream' kotlinx.coroutines.flow.Flow)]) \l0x0017: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('shared' kotlinx.coroutines.flow.MutableSharedFlow)]) \l0x0018: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('initialValue' java.lang.Object)]) \l0x0019: INVOKE  \l  (r1 I:kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1)\l  (r2 I:kotlinx.coroutines.flow.SharingStarted)\l  (r3 I:kotlinx.coroutines.flow.Flow)\l  (r4 I:kotlinx.coroutines.flow.MutableSharedFlow)\l  (r5 I:java.lang.Object)\l  (r6 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1.\<init\>(kotlinx.coroutines.flow.SharingStarted, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.MutableSharedFlow, java.lang.Object, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.flow.SharingStarted, kotlinx.coroutines.flow.Flow\<? extends T\>, kotlinx.coroutines.flow.MutableSharedFlow\<T\>, T, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1\>):void (m)]\l0x001c: CHECK_CAST (r7 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r7 I:??[OBJECT, ARRAY]) \l0x001e: INVOKE  (r1 I:kotlinx.coroutines.Job) = \l  (r8 I:kotlinx.coroutines.CoroutineScope A[D('$this$launchSharing' kotlinx.coroutines.CoroutineScope)])\l  (r9 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlinx.coroutines.CoroutineStart A[D('start' kotlinx.coroutines.CoroutineStart)])\l  (r7 I:kotlin.jvm.functions.Function2)\l type: STATIC call: kotlinx.coroutines.BuildersKt.launch(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2):kotlinx.coroutines.Job A[MD:(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.CoroutineScope, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.Job (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|RETURN\l|0x0022: RETURN  (r1 I:kotlinx.coroutines.Job) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|0x000f: SGET  (r0 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart.UNDISPATCHED kotlinx.coroutines.CoroutineStart \l}"];
MethodNode[shape=record,label="{private static final kotlinx.coroutines.Job kotlinx.coroutines.flow.FlowKt__ShareKt.launchSharing$FlowKt__ShareKt((r8 I:kotlinx.coroutines.CoroutineScope A[D('$this$launchSharing' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('upstream' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlinx.coroutines.flow.MutableSharedFlow\<T\> A[D('shared' kotlinx.coroutines.flow.MutableSharedFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlinx.coroutines.flow.SharingStarted A[D('started' kotlinx.coroutines.flow.SharingStarted), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:T A[D('initialValue' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x000f \-\> B:14:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0022: r0 'start' Lkotlinx\/coroutines\/CoroutineStart;\l  \-1 \-0x0022: r8 '$this$launchSharing' Lkotlinx\/coroutines\/CoroutineScope;\l  \-1 \-0x0022: r9 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0022: r10 'upstream' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0022: r11 'shared' Lkotlinx\/coroutines\/flow\/MutableSharedFlow;\l  \-1 \-0x0022: r12 'started' Lkotlinx\/coroutines\/flow\/SharingStarted;\l  \-1 \-0x0022: r13 'initialValue' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlinx\/coroutines\/flow\/MutableSharedFlow\<TT;\>;Lkotlinx\/coroutines\/flow\/SharingStarted;TT;)Lkotlinx\/coroutines\/Job;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

