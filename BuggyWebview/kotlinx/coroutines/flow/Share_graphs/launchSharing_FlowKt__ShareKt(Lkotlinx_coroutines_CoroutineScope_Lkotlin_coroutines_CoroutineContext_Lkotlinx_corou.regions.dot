digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt.launchSharing$FlowKt__ShareKt(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/flow\/MutableSharedFlow;Lkotlinx\/coroutines\/flow\/SharingStarted;Ljava\/lang\/Object;)Lkotlinx\/coroutines\/Job;" {
subgraph cluster_Region_1512220961 {
label = "R(2:2|5)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000a|kotlinx.coroutines.CoroutineStart r0 = kotlin.jvm.internal.Intrinsics.areEqual(r12, kotlinx.coroutines.flow.SharingStarted.Companion.getEagerly()) ? kotlinx.coroutines.CoroutineStart.DEFAULT : kotlinx.coroutines.CoroutineStart.UNDISPATCHED\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|RETURN\l|return kotlinx.coroutines.BuildersKt.launch(r8, r9, r0, new kotlinx.coroutines.flow.FlowKt__ShareKt$launchSharing$1(r12, r10, r11, r13, null))\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000c}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0011|PHI: r0 \l  PHI: (r0v4 'start' kotlinx.coroutines.CoroutineStart) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000f}"];
MethodNode[shape=record,label="{private static final kotlinx.coroutines.Job kotlinx.coroutines.flow.FlowKt__ShareKt.launchSharing$FlowKt__ShareKt((r8v0 '$this$launchSharing' kotlinx.coroutines.CoroutineScope A[D('$this$launchSharing' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('upstream' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 kotlinx.coroutines.flow.MutableSharedFlow\<T\> A[D('shared' kotlinx.coroutines.flow.MutableSharedFlow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'started' kotlinx.coroutines.flow.SharingStarted A[D('started' kotlinx.coroutines.flow.SharingStarted), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 T A[D('initialValue' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x000f \-\> B:14:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlinx\/coroutines\/flow\/MutableSharedFlow\<TT;\>;Lkotlinx\/coroutines\/flow\/SharingStarted;TT;)Lkotlinx\/coroutines\/Job;\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_13 -> Node_14;
}

