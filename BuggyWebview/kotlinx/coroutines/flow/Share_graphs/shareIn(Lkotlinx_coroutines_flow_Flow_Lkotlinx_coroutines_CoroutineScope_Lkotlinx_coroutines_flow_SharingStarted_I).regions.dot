digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt.shareIn(Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;I)Lkotlinx\/coroutines\/flow\/SharedFlow;" {
subgraph cluster_Region_542450880 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.flow.SharingConfig kotlinx.coroutines.flow.SharingConfig r0 = configureSharing$FlowKt__ShareKt(r9, r12)\lkotlinx.coroutines.flow.MutableSharedFlow kotlinx.coroutines.flow.MutableSharedFlow r1 = kotlinx.coroutines.flow.SharedFlowKt.MutableSharedFlow(r12, r0.extraBufferCapacity, r0.onBufferOverflow)\lkotlinx.coroutines.Job kotlinx.coroutines.Job r2 = launchSharing$FlowKt__ShareKt(r10, r0.context, r0.upstream, r1, r11, kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|RETURN\l|return new kotlinx.coroutines.flow.ReadonlySharedFlow(r1, r2)\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.SharedFlow\<T\> kotlinx.coroutines.flow.FlowKt__ShareKt.shareIn((r9v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$shareIn' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'scope' kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'started' kotlinx.coroutines.flow.SharingStarted A[D('started' kotlinx.coroutines.flow.SharingStarted), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'replay' int A[D('replay' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;I)Lkotlinx\/coroutines\/flow\/SharedFlow\<TT;\>;\l}"];
MethodNode -> Node_4;Node_6 -> Node_7;
Node_7 -> Node_5;
Node_4 -> Node_6;
}

