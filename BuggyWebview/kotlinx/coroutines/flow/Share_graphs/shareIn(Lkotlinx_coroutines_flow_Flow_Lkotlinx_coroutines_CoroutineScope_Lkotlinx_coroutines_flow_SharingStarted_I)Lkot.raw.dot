digraph "CFG forkotlinx.coroutines.flow.FlowKt__ShareKt.shareIn(Lkotlinx\/coroutines\/flow\/Flow;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;I)Lkotlinx\/coroutines\/flow\/SharedFlow;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.flow.SharingConfig) = (r9 I:kotlinx.coroutines.flow.Flow A[D('$this$shareIn' kotlinx.coroutines.flow.Flow)]), (r12 I:int A[D('replay' int)]) type: STATIC call: kotlinx.coroutines.flow.FlowKt__ShareKt.configureSharing$FlowKt__ShareKt(kotlinx.coroutines.flow.Flow, int):kotlinx.coroutines.flow.SharingConfig A[MD:\<T\>:(kotlinx.coroutines.flow.Flow\<? extends T\>, int):kotlinx.coroutines.flow.SharingConfig\<T\> (m)] (LINE:140)\l0x0005: IGET  (r1 I:int) = (r0 I:kotlinx.coroutines.flow.SharingConfig A[D('config' kotlinx.coroutines.flow.SharingConfig)]) kotlinx.coroutines.flow.SharingConfig.extraBufferCapacity int  (LINE:143)\l0x0007: IGET  (r2 I:kotlinx.coroutines.channels.BufferOverflow) = (r0 I:kotlinx.coroutines.flow.SharingConfig A[D('config' kotlinx.coroutines.flow.SharingConfig)]) kotlinx.coroutines.flow.SharingConfig.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow  (LINE:144)\l0x0009: INVOKE  (r1 I:kotlinx.coroutines.flow.MutableSharedFlow) = (r12 I:int A[D('replay' int)]), (r1 I:int), (r2 I:kotlinx.coroutines.channels.BufferOverflow) type: STATIC call: kotlinx.coroutines.flow.SharedFlowKt.MutableSharedFlow(int, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.MutableSharedFlow A[MD:\<T\>:(int, int, kotlinx.coroutines.channels.BufferOverflow):kotlinx.coroutines.flow.MutableSharedFlow\<T\> (m)] (LINE:141)\l0x000d: IGET  (r4 I:kotlin.coroutines.CoroutineContext) = (r0 I:kotlinx.coroutines.flow.SharingConfig A[D('config' kotlinx.coroutines.flow.SharingConfig)]) kotlinx.coroutines.flow.SharingConfig.context kotlin.coroutines.CoroutineContext  (LINE:147)\l0x000f: IGET  (r5 I:kotlinx.coroutines.flow.Flow\<T\>) = (r0 I:kotlinx.coroutines.flow.SharingConfig A[D('config' kotlinx.coroutines.flow.SharingConfig)]) kotlinx.coroutines.flow.SharingConfig.upstream kotlinx.coroutines.flow.Flow \l0x0011: SGET  (r2 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.flow.SharedFlowKt.NO_VALUE kotlinx.coroutines.internal.Symbol \l0x0013: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0014: CHECK_CAST (r8 I:java.lang.Object) = (java.lang.Object) (r8 I:??[OBJECT, ARRAY]) \l0x0016: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('scope' kotlinx.coroutines.CoroutineScope)]) \l0x0017: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('shared' kotlinx.coroutines.flow.MutableSharedFlow)]) \l0x0018: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('started' kotlinx.coroutines.flow.SharingStarted)]) \l0x0019: INVOKE  (r2 I:kotlinx.coroutines.Job) = \l  (r3 I:kotlinx.coroutines.CoroutineScope)\l  (r4 I:kotlin.coroutines.CoroutineContext)\l  (r5 I:kotlinx.coroutines.flow.Flow)\l  (r6 I:kotlinx.coroutines.flow.MutableSharedFlow)\l  (r7 I:kotlinx.coroutines.flow.SharingStarted)\l  (r8 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.flow.FlowKt__ShareKt.launchSharing$FlowKt__ShareKt(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.flow.Flow, kotlinx.coroutines.flow.MutableSharedFlow, kotlinx.coroutines.flow.SharingStarted, java.lang.Object):kotlinx.coroutines.Job A[MD:\<T\>:(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.flow.Flow\<? extends T\>, kotlinx.coroutines.flow.MutableSharedFlow\<T\>, kotlinx.coroutines.flow.SharingStarted, T):kotlinx.coroutines.Job (m)]\l0x001e: NEW_INSTANCE  (r3 I:kotlinx.coroutines.flow.ReadonlySharedFlow) =  kotlinx.coroutines.flow.ReadonlySharedFlow  (LINE:148)\l0x0020: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('shared' kotlinx.coroutines.flow.MutableSharedFlow)]) \l0x0021: CHECK_CAST (r4 I:kotlinx.coroutines.flow.SharedFlow) = (kotlinx.coroutines.flow.SharedFlow) (r4 I:??[OBJECT, ARRAY]) \l0x0023: INVOKE  \l  (r3 I:kotlinx.coroutines.flow.ReadonlySharedFlow)\l  (r4 I:kotlinx.coroutines.flow.SharedFlow)\l  (r2 I:kotlinx.coroutines.Job A[D('job' kotlinx.coroutines.Job)])\l type: DIRECT call: kotlinx.coroutines.flow.ReadonlySharedFlow.\<init\>(kotlinx.coroutines.flow.SharedFlow, kotlinx.coroutines.Job):void A[MD:(kotlinx.coroutines.flow.SharedFlow\<? extends T\>, kotlinx.coroutines.Job):void (m)]\l0x0026: CHECK_CAST (r3 I:kotlinx.coroutines.flow.SharedFlow) = (kotlinx.coroutines.flow.SharedFlow) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|RETURN\l|0x0028: RETURN  (r3 I:kotlinx.coroutines.flow.SharedFlow\<T\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.SharedFlow\<T\> kotlinx.coroutines.flow.FlowKt__ShareKt.shareIn((r9 I:kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$shareIn' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlinx.coroutines.CoroutineScope A[D('scope' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlinx.coroutines.flow.SharingStarted A[D('started' kotlinx.coroutines.flow.SharingStarted), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('replay' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0028: r0 'config' Lkotlinx\/coroutines\/flow\/SharingConfig;\l  0x000d\-0x0028: r1 'shared' Lkotlinx\/coroutines\/flow\/MutableSharedFlow;\l  0x001e\-0x0028: r2 'job' Lkotlinx\/coroutines\/Job;\l  \-1 \-0x0028: r9 '$this$shareIn' Lkotlinx\/coroutines\/flow\/Flow;\l  \-1 \-0x0028: r10 'scope' Lkotlinx\/coroutines\/CoroutineScope;\l  \-1 \-0x0028: r11 'started' Lkotlinx\/coroutines\/flow\/SharingStarted;\l  \-1 \-0x0028: r12 'replay' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;Lkotlinx\/coroutines\/CoroutineScope;Lkotlinx\/coroutines\/flow\/SharingStarted;I)Lkotlinx\/coroutines\/flow\/SharedFlow\<TT;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

