digraph "CFG forkotlinx.coroutines.flow.FlowKt__DelayKt.sample(Lkotlinx\/coroutines\/flow\/Flow;J)Lkotlinx\/coroutines\/flow\/Flow;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0004|if ((r4 \> 0 ? 1 : (r4 == 0 ? 0 : \-1)) \<= 0) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|r0 = true\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v8 boolean) binds: [B:16:0x0008, B:15:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b}"];
Node_19 [shape=record,label="{19\:\ 0x0017|RETURN\l|return kotlinx.coroutines.flow.internal.FlowCoroutineKt.scopedFlow(new kotlinx.coroutines.flow.FlowKt__DelayKt$sample$2(r4, r3, null))\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018}"];
Node_21 [shape=record,label="{21\:\ 0x0025|throw new java.lang.IllegalArgumentException(\"Sample period should be positive\".toString())\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|r0 = false\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.flow.Flow\<T\> kotlinx.coroutines.flow.FlowKt__DelayKt.sample((r3v0 kotlinx.coroutines.flow.Flow\<? extends T\> A[D('$this$sample' kotlinx.coroutines.flow.Flow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'periodMillis' long A[D('periodMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0025 \-\> B:12:?, CROSS_EDGE: B:16:0x0008 \-\> B:17:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/flow\/Flow\<+TT;\>;J)Lkotlinx\/coroutines\/flow\/Flow\<TT;\>;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

