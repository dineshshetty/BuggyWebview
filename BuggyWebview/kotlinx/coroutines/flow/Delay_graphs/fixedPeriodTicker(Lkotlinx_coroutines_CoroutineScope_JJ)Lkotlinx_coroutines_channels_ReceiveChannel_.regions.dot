digraph "CFG forkotlinx.coroutines.flow.FlowKt__DelayKt.fixedPeriodTicker(Lkotlinx\/coroutines\/CoroutineScope;JJ)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
subgraph cluster_Region_12482883 {
label = "R(1:(2:(2:15|16)|(1:(2:(2:13|14)|(1:11)))))";
node [shape=record,color=blue];
subgraph cluster_Region_411631587 {
label = "R(2:(2:15|16)|(1:(2:(2:13|14)|(1:11))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1121177642 {
label = "IF [B:26:0x0011] THEN: R(2:15|16) ELSE: null";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0011|if ((r17 \>= 0) == false) goto L15\l}"];
subgraph cluster_Region_2136437446 {
label = "R(2:15|16)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0053}"];
Node_37 [shape=record,label="{37\:\ 0x0071|throw new java.lang.IllegalArgumentException((\"Expected non\-negative delay, but has \" + r17 + \" ms\").toString())\l}"];
}
}
subgraph cluster_Region_206596110 {
label = "R(1:(2:(2:13|14)|(1:11)))";
node [shape=record,color=blue];
subgraph cluster_Region_1400437120 {
label = "R(2:(2:13|14)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_259400005 {
label = "IF [B:31:0x0019] THEN: R(2:13|14) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0019|PHI: r0 \l  PHI: (r0v4 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r19 \>= 0) == false) goto L13\l}"];
subgraph cluster_Region_1265869615 {
label = "R(2:13|14)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0034}"];
Node_35 [shape=record,label="{35\:\ 0x0052|throw new java.lang.IllegalArgumentException((\"Expected non\-negative initial delay, but has \" + r19 + \" ms\").toString())\l}"];
}
}
subgraph cluster_Region_1156362839 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0033|RETURN\l|return kotlinx.coroutines.channels.Produce.produce$default(r16, null, 0, new kotlinx.coroutines.flow.FlowKt__DelayKt$fixedPeriodTicker$3(r19, r17, null), 1, null)\l}"];
}
}
}
}
}
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0000}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x000a}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x000c}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x000f|PHI: r4 \l  PHI: (r4v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0013}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0015}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0018}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x001b}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x000e}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.channels.ReceiveChannel\<kotlin.Unit\> kotlinx.coroutines.flow.FlowKt__DelayKt.fixedPeriodTicker((r16v0 '$this$fixedPeriodTicker' kotlinx.coroutines.CoroutineScope A[D('$this$fixedPeriodTicker' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'delayMillis' long A[D('delayMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'initialDelayMillis' long A[D('initialDelayMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0052 \-\> B:20:?, CROSS_EDGE: B:28:0x0015 \-\> B:31:0x0019, CROSS_EDGE: B:37:0x0071 \-\> B:20:?, CROSS_EDGE: B:24:0x000e \-\> B:25:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineScope;JJ)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<Lkotlin\/Unit;\>;\l}"];
MethodNode -> Node_19;Node_26 -> Node_27[style=dashed];
Node_26 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_20;
Node_33 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_31;
Node_30 -> Node_31;
Node_32 -> Node_33;
Node_24 -> Node_25;
}

