digraph "CFG forkotlinx.coroutines.flow.FlowKt__DelayKt.fixedPeriodTicker$default(Lkotlinx\/coroutines\/CoroutineScope;JJILjava\/lang\/Object;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:310)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: MOVE  (r3 I:??[long, double]) = (r1 I:??[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) = (r0 I:kotlinx.coroutines.CoroutineScope), (r1 I:long), (r3 I:long) type: STATIC call: kotlinx.coroutines.flow.FlowKt.fixedPeriodTicker(kotlinx.coroutines.CoroutineScope, long, long):kotlinx.coroutines.channels.ReceiveChannel A[MD:(kotlinx.coroutines.CoroutineScope, long, long):kotlinx.coroutines.channels.ReceiveChannel\<kotlin.Unit\> (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlinx.coroutines.channels.ReceiveChannel kotlinx.coroutines.flow.FlowKt__DelayKt.fixedPeriodTicker$default((r0 I:kotlinx.coroutines.CoroutineScope A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0005\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

