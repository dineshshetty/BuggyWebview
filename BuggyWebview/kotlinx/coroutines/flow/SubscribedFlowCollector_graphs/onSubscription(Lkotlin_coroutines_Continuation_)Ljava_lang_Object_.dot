digraph "CFG forkotlinx.coroutines.flow.SubscribedFlowCollector.onSubscription(Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_33 [shape=record,label="{33\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0000}"];
Node_36 [shape=record,label="{36\:\ 0x0002|if ((r8 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1) == false) goto L30\l}"];
Node_37 [shape=record,label="{37\:\ 0x0004|kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1 r0 = (kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1) r8\l}"];
Node_38 [shape=record,label="{38\:\ 0x000c|if ((r0.label & Integer.MIN_VALUE) == 0) goto L30\l}"];
Node_39 [shape=record,label="{39\:\ 0x000e|r0.label = r0.label \- Integer.MIN_VALUE\l}"];
Node_41 [shape=record,label="{41\:\ 0x0019|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1) = (r0v1 kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1), (r0v6 kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1) binds: [B:40:0x0014, B:39:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|r8 = r0\ljava.lang.Object r0 = r8.result\ljava.lang.Object r1 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\lint r2 = (kotlinx.coroutines.flow.FlowCollector\<T\>) r8.label\l}"];
Node_64 [shape=record,label="{64\:\ 0x0022|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_42 [shape=record,label="{42\:\ 0x0022|switch(r2) \{\l    case 0: goto L23;\l    case 1: goto L15;\l    case 2: goto L12;\l    default: goto L9;\l\}\l}"];
Node_43 [shape=record,label="{43\:\ 0x0025}"];
Node_44 [shape=record,label="{44\:\ 0x002c|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_34 [shape=record,label="{34\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x002d|kotlin.ResultKt.throwOnFailure(r0)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0079}"];
Node_59 [shape=record,label="{59\:\ 0x007b|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_46 [shape=record,label="{46\:\ 0x0031|kotlinx.coroutines.flow.internal.SafeCollector r2 = (kotlinx.coroutines.flow.internal.SafeCollector) r8.L$1\lkotlinx.coroutines.flow.SubscribedFlowCollector r3 = (kotlinx.coroutines.flow.SubscribedFlowCollector) r8.L$0\l}"];
Node_47 [shape=record,label="{47\:\ 0x0039|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x007d, blocks: (B:47:0x0039, B:50:0x004e), top: B:64:0x0022 \}\lCatch: all \-\> 0x007d\l|kotlin.ResultKt.throwOnFailure(r0)     \/\/ Catch: java.lang.Throwable \-\> L7d\l}"];
Node_53 [shape=record,label="{53\:\ 0x005e|PHI: r2 r3 \l  PHI: (r2v3 'safeCollector' kotlinx.coroutines.flow.internal.SafeCollector) = (r2v2 'safeCollector' kotlinx.coroutines.flow.internal.SafeCollector), (r2v8 'safeCollector' kotlinx.coroutines.flow.internal.SafeCollector) binds: [B:51:0x005b, B:47:0x0039] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 kotlinx.coroutines.flow.SubscribedFlowCollector) = (r3v0 kotlinx.coroutines.flow.SubscribedFlowCollector), (r3v3 kotlinx.coroutines.flow.SubscribedFlowCollector) binds: [B:51:0x005b, B:47:0x0039] A[DONT_GENERATE, DONT_INLINE]\l|r2.releaseIntercepted()\lkotlinx.coroutines.flow.FlowCollector\<T\> r2 = r3.collector\l}"];
Node_54 [shape=record,label="{54\:\ 0x0066|if ((r2 instanceof kotlinx.coroutines.flow.SubscribedFlowCollector) == false) goto L13\l}"];
Node_55 [shape=record,label="{55\:\ 0x0068|r8.L$0 = null\lr8.L$1 = null\lr8.label = 2\l}"];
Node_56 [shape=record,label="{56\:\ 0x0076|if (((kotlinx.coroutines.flow.SubscribedFlowCollector) r2).onSubscription(r8) != r1) goto L13\l}"];
Node_57 [shape=record,label="{57\:\ 0x0078|RETURN\l|return r1\l}"];
Node_65 [shape=record,label="{65\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_49 [shape=record,label="{49\:\ 0x003d|kotlin.ResultKt.throwOnFailure(r0)\lr3 = r7\lkotlinx.coroutines.flow.internal.SafeCollector r2 = new kotlinx.coroutines.flow.internal.SafeCollector(r3.collector, r8.getContext())\l}"];
Node_50 [shape=record,label="{50\:\ 0x004e|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x007d, blocks: (B:47:0x0039, B:50:0x004e), top: B:64:0x0022 \}\lCatch: all \-\> 0x007d\l|kotlin.jvm.functions.Function2\<kotlinx.coroutines.flow.FlowCollector\<? super T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>, java.lang.Object\> r4 = r3.action     \/\/ Catch: java.lang.Throwable \-\> L7d\lr8.L$0 = r3     \/\/ Catch: java.lang.Throwable \-\> L7d\lr8.L$1 = r2     \/\/ Catch: java.lang.Throwable \-\> L7d\lr8.label = 1     \/\/ Catch: java.lang.Throwable \-\> L7d\l}"];
Node_51 [shape=record,label="{51\:\ 0x005b|if (r4.invoke(r2, r8) != r1) goto L17\l}"];
Node_52 [shape=record,label="{52\:\ 0x005d|RETURN\l|return r1\l}"];
Node_61 [shape=record,label="{61\:\ 0x007d|ExcHandler: all \-\> 0x007d\lPHI: r2 \l  PHI: (r2v1 ??) = (r2v0 ??), (r2v4 kotlinx.coroutines.flow.FlowCollector\<T\>) binds: [B:64:0x0022, B:65:?] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_62 [shape=record,label="{62\:\ 0x007e|r2.releaseIntercepted()\l}"];
Node_63 [shape=record,label="{63\:\ 0x0081|throw r1\l}"];
Node_40 [shape=record,label="{40\:\ 0x0014|kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1 r0 = new kotlinx.coroutines.flow.SubscribedFlowCollector$onSubscription$1(r7, r8)\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.flow.SubscribedFlowCollector.onSubscription((r7v0 'this' kotlinx.coroutines.flow.SubscribedFlowCollector\<T\> A[IMMUTABLE_TYPE, THIS]), (r8v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lCROSS_EDGE: B:59:0x007b \-\> B:34:?, CROSS_EDGE: B:57:0x0078 \-\> B:34:?, CROSS_EDGE: B:56:0x0076 \-\> B:58:0x0079, CROSS_EDGE: B:54:0x0066 \-\> B:58:0x0079, CROSS_EDGE: B:63:0x0081 \-\> B:34:?, CROSS_EDGE: B:52:0x005d \-\> B:34:?, CROSS_EDGE: B:51:0x005b \-\> B:53:0x005e, CROSS_EDGE: B:64:0x0022 \-\> B:61:0x007d, CROSS_EDGE: B:40:0x0014 \-\> B:41:0x0019, CROSS_EDGE: B:36:0x0002 \-\> B:40:0x0014\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x007d, blocks: (B:47:0x0039, B:50:0x004e), top: B:64:0x0022 \}\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l \-\> Type inference failed for: r2v0, types: [int]\l \-\> Type inference failed for: r2v1, types: [kotlinx.coroutines.flow.internal.SafeCollector]\l \-\> Type inference failed for: r2v4, types: [kotlinx.coroutines.flow.FlowCollector\<T\>]\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [416=4]\l \-\> Failed to insert an additional move for type inference into block B:64:0x0022\}\l}"];
MethodNode -> Node_33;Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_41;
Node_41 -> Node_64;
Node_64 -> Node_42;
Node_64 -> Node_61;
Node_42 -> Node_43;
Node_42 -> Node_45;
Node_42 -> Node_46;
Node_42 -> Node_49;
Node_43 -> Node_44;
Node_44 -> Node_34;
Node_45 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_34;
Node_46 -> Node_47;
Node_47 -> Node_53;
Node_53 -> Node_54;
Node_53 -> Node_65;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_58;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_58;
Node_57 -> Node_34;
Node_65 -> Node_61;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_34;
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_34;
Node_40 -> Node_41;
}

