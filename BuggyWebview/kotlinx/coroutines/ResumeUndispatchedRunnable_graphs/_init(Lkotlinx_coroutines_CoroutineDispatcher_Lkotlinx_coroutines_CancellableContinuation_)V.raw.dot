digraph "CFG forkotlinx.coroutines.ResumeUndispatchedRunnable.\<init\>(Lkotlinx\/coroutines\/CoroutineDispatcher;Lkotlinx\/coroutines\/CancellableContinuation;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:181)\l0x0003: IPUT  \l  (r1 I:kotlinx.coroutines.CoroutineDispatcher A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher)])\l  (r0 I:kotlinx.coroutines.ResumeUndispatchedRunnable)\l kotlinx.coroutines.ResumeUndispatchedRunnable.dispatcher kotlinx.coroutines.CoroutineDispatcher  (LINE:182)\l0x0005: IPUT  \l  (r2 I:kotlinx.coroutines.CancellableContinuation\<kotlin.Unit\> A[D('continuation' kotlinx.coroutines.CancellableContinuation)])\l  (r0 I:kotlinx.coroutines.ResumeUndispatchedRunnable)\l kotlinx.coroutines.ResumeUndispatchedRunnable.continuation kotlinx.coroutines.CancellableContinuation  (LINE:183)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:181)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.ResumeUndispatchedRunnable.\<init\>((r0 'this' I:kotlinx.coroutines.ResumeUndispatchedRunnable A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlinx.coroutines.CoroutineDispatcher A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\> A[D('continuation' kotlinx.coroutines.CancellableContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r1 'dispatcher' Lkotlinx\/coroutines\/CoroutineDispatcher;\l  \-1 \-0x0007: r2 'continuation' Lkotlinx\/coroutines\/CancellableContinuation;\lSIGNATURE: (Lkotlinx\/coroutines\/CoroutineDispatcher;Lkotlinx\/coroutines\/CancellableContinuation\<\-Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

