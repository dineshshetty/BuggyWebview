digraph "CFG forkotlinx.coroutines.internal.ConcurrentLinkedListNode.getLeftmostAliveNode()Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (r2 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getPrev():kotlinx.coroutines.internal.ConcurrentLinkedListNode A[MD:():N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> (m)] (LINE:170)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|LOOP_START\lLOOP:0: B:13:0x0004\-\>B:16:0x000c\l|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0012  (LINE:171)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = \l  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getRemoved():boolean A[MD:():boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0012 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|LOOP_END\lLOOP:0: B:13:0x0004\-\>B:16:0x000c\l|0x000c: IGET  (r1 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev java.lang.Object  (LINE:172)\l0x000e: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) = (r1 I:??[OBJECT, ARRAY]) \l0x000f: CHECK_CAST (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r0 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|RETURN\l|0x0012: RETURN  \l  (r0 I:N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l  (LINE:173)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> kotlinx.coroutines.internal.ConcurrentLinkedListNode.getLeftmostAliveNode((r2 'this' I:kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:16:0x000c \-\> B:13:0x0004, CROSS_EDGE: B:13:0x0004 \-\> B:17:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0012: r0 'cur' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\lTYPE_VARS: [N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>]\lSIGNATURE: ()TN;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_13;
Node_19 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_17;
}

