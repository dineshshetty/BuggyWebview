digraph "CFG forkotlinx.coroutines.internal.ConcurrentLinkedListNode.remove()V" {
Node_35 [shape=record,label="{35\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:152)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0014 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:250)\l0x0007: INVOKE  (r0 I:boolean A[D('$i$a$\-assert\-ConcurrentLinkedListNode$remove$1' int)]) = (r3 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getRemoved():boolean A[MD:():boolean (m)] (LINE:152)\l}"];
Node_40 [shape=record,label="{40\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-ConcurrentLinkedListNode$remove$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x000e \l}"];
Node_42 [shape=record,label="{42\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0010: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_36 [shape=record,label="{36\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:153)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x002a \l}"];
Node_46 [shape=record,label="{46\:\ 0x001a|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:250)\l0x001b: INVOKE  (r1 I:boolean) = (r3 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.isTail():boolean A[MD:():boolean (m)] (LINE:153)\l0x001f: ARITH  (r0 I:??[int, boolean] A[D('$i$a$\-assert\-ConcurrentLinkedListNode$remove$2' int)]) = (r1 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0024 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0024|0x0024: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0026: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x0029|0x0029: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_68 [shape=record,label="{68\:\ 0x002a|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x002a|LOOP_START\lLOOP:0: B:51:0x002a\-\>B:65:0x002a\l|0x002b: INVOKE  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (r3 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) type: DIRECT call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getLeftmostAliveNode():kotlinx.coroutines.internal.ConcurrentLinkedListNode A[MD:():N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> (m)] (LINE:156)\l0x002f: INVOKE  (r1 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (r3 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) type: DIRECT call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getRightmostAliveNode():kotlinx.coroutines.internal.ConcurrentLinkedListNode A[MD:():N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> (m)] (LINE:157)\l0x0033: IPUT  \l  (r0 I:java.lang.Object A[D('prev' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l  (r1 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('next' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l kotlinx.coroutines.internal.ConcurrentLinkedListNode._prev java.lang.Object  (LINE:159)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0035|0x0035: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prev' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0039  (LINE:160)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0037|0x0037: IPUT  \l  (r1 I:java.lang.Object A[D('next' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('prev' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l kotlinx.coroutines.internal.ConcurrentLinkedListNode._next java.lang.Object \l}"];
Node_54 [shape=record,label="{54\:\ 0x0039|0x0039: INVOKE  (r2 I:boolean) = \l  (r1 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('next' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getRemoved():boolean A[MD:():boolean (m)] (LINE:162)\l}"];
Node_55 [shape=record,label="{55\:\ 0x003d|0x003d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0040 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0040|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x0040|0x0040: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prev' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0049  (LINE:163)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0042|0x0042: INVOKE  (r2 I:boolean) = \l  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('prev' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getRemoved():boolean A[MD:():boolean (m)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0046|0x0046: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x0049 \l}"];
Node_64 [shape=record,label="{64\:\ 0x0049|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ ?|SYNTHETIC\lRETURN\l|0x0049: RETURN   A[SYNTHETIC] (LINE:165)\l}"];
Node_67 [shape=record,label="{67\:\ 0x002a|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x002a|LOOP_END\lSYNTHETIC\lLOOP:0: B:51:0x002a\-\>B:65:0x002a\l}"];
Node_63 [shape=record,label="{63\:\ 0x0049|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0049|RETURN\lORIG_RETURN\l|0x0049: RETURN    (LINE:165)\l}"];
Node_66 [shape=record,label="{66\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.ConcurrentLinkedListNode.remove((r3 'this' I:kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:50:0x0029 \-\> B:36:?, CROSS_EDGE: B:61:0x0049 \-\> B:36:?, BACK_EDGE: B:59:0x0046 \-\> B:51:0x002a, CROSS_EDGE: B:57:0x0040 \-\> B:61:0x0049, BACK_EDGE: B:55:0x003d \-\> B:51:0x002a, CROSS_EDGE: B:52:0x0035 \-\> B:54:0x0039, CROSS_EDGE: B:45:0x0018 \-\> B:51:0x002a, CROSS_EDGE: B:38:0x0004 \-\> B:44:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x000b: r0 '$i$a$\-assert\-ConcurrentLinkedListNode$remove$1' I\l  0x001b\-0x001f: r0 '$i$a$\-assert\-ConcurrentLinkedListNode$remove$2' I\l  0x002f\-0x0049: r0 'prev' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\l  0x0033\-0x0049: r1 'next' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\lTYPE_VARS: [N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>]\l}"];
MethodNode -> Node_35;Node_35 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_44;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_44[style=dashed];
Node_42 -> Node_43;
Node_43 -> Node_36;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_68;
Node_46 -> Node_47;
Node_47 -> Node_49;
Node_47 -> Node_68[style=dashed];
Node_49 -> Node_50;
Node_50 -> Node_36;
Node_68 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_62;
Node_55 -> Node_66[style=dashed];
Node_62 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_63;
Node_58 -> Node_59;
Node_59 -> Node_64;
Node_59 -> Node_67[style=dashed];
Node_64 -> Node_69;
Node_69 -> Node_36;
Node_67 -> Node_65;
Node_65 -> Node_51;
Node_63 -> Node_61;
Node_61 -> Node_36;
Node_66 -> Node_65;
}

