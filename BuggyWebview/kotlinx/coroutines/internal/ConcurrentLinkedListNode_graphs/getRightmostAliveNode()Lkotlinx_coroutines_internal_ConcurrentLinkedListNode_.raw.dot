digraph "CFG forkotlinx.coroutines.internal.ConcurrentLinkedListNode.getRightmostAliveNode()Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:177)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0016 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:250)\l0x0007: INVOKE  (r1 I:boolean) = (r2 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.isTail():boolean A[MD:():boolean (m)] (LINE:177)\l0x000b: ARITH  (r0 I:??[int, boolean] A[D('$i$a$\-assert\-ConcurrentLinkedListNode$rightmostAliveNode$1' int)]) = (r1 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0010 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|0x0010: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0012: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|0x0015: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|0x0016: INVOKE  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (r2 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getNext():kotlinx.coroutines.internal.ConcurrentLinkedListNode A[MD:():N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> (m)] (LINE:178)\l0x001a: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|LOOP_START\lLOOP:0: B:25:0x001d\-\>B:27:0x0023\l|0x001d: INVOKE  (r1 I:boolean) = \l  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getRemoved():boolean A[MD:():boolean (m)] (LINE:179)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0021|0x0021: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0023|LOOP_END\lLOOP:0: B:25:0x001d\-\>B:27:0x0023\l|0x0023: INVOKE  (r1 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = \l  (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.getNext():kotlinx.coroutines.internal.ConcurrentLinkedListNode A[MD:():N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> (m)] (LINE:180)\l0x0027: INVOKE  (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x002a: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x002c|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x002c|RETURN\l|0x002c: RETURN  \l  (r0 I:N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> A[D('cur' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l  (LINE:181)\l}"];
MethodNode[shape=record,label="{private final N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> kotlinx.coroutines.internal.ConcurrentLinkedListNode.getRightmostAliveNode((r2 'this' I:kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0023 \-\> B:25:0x001d, CROSS_EDGE: B:28:0x002c \-\> B:16:?, CROSS_EDGE: B:18:0x0004 \-\> B:24:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x000b: r0 '$i$a$\-assert\-ConcurrentLinkedListNode$rightmostAliveNode$1' I\l  0x001d\-0x002c: r0 'cur' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\lTYPE_VARS: [N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>]\lSIGNATURE: ()TN;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_24[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_16;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_25;
Node_29 -> Node_28;
Node_28 -> Node_16;
}

