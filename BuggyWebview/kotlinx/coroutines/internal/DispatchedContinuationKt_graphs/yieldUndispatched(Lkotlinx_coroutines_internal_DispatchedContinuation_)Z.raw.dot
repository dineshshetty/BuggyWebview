digraph "CFG forkotlinx.coroutines.internal.DispatchedContinuationKt.yieldUndispatched(Lkotlinx\/coroutines\/internal\/DispatchedContinuation;)Z" {
Node_64 [shape=record,label="{64\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_66 [shape=record,label="{66\:\ 0x0000|0x0000: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:287)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0004: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('$this$yieldUndispatched' kotlinx.coroutines.internal.DispatchedContinuation)]) \l0x0005: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: INVOKE  (r5 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:390)\l}"];
Node_67 [shape=record,label="{67\:\ 0x000a|0x000a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x000e \l}"];
Node_68 [shape=record,label="{68\:\ 0x000c|0x000c: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:391)\l}"];
Node_69 [shape=record,label="{69\:\ 0x000e|0x000e: SGET  (r5 I:kotlinx.coroutines.ThreadLocalEventLoop A[D('$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1$iv' int)]) =  kotlinx.coroutines.ThreadLocalEventLoop.INSTANCE kotlinx.coroutines.ThreadLocalEventLoop  (LINE:392)\l0x0010: INVOKE  (r5 I:kotlinx.coroutines.EventLoop) = (r5 I:kotlinx.coroutines.ThreadLocalEventLoop) type: VIRTUAL call: kotlinx.coroutines.ThreadLocalEventLoop.getEventLoop$kotlinx_coroutines_core():kotlinx.coroutines.EventLoop A[MD:():kotlinx.coroutines.EventLoop (m)]\l0x0014: INVOKE  (r6 I:boolean) = (r5 I:kotlinx.coroutines.EventLoop A[D('eventLoop$iv' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.isUnconfinedQueueEmpty():boolean A[MD:():boolean (m)] (LINE:394)\l0x0018: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0019|0x0019: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x001c \l}"];
Node_72 [shape=record,label="{72\:\ 0x001c|0x001c: INVOKE  (r6 I:boolean) = (r5 I:kotlinx.coroutines.EventLoop A[D('eventLoop$iv' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.isUnconfinedLoopActive():boolean A[MD:():boolean (m)] (LINE:395)\l0x0020: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x0021|0x0021: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x002f \l}"];
Node_74 [shape=record,label="{74\:\ 0x0023|0x0023: IPUT  \l  (r0 I:java.lang.Object A[D('contState$iv' java.lang.Object)])\l  (r3 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$executeUnconfined$iv' kotlinx.coroutines.internal.DispatchedContinuation)])\l kotlinx.coroutines.internal.DispatchedContinuation._state java.lang.Object  (LINE:397)\l0x0025: IPUT  \l  (r1 I:int A[D('mode$iv' int)])\l  (r3 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$executeUnconfined$iv' kotlinx.coroutines.internal.DispatchedContinuation)])\l kotlinx.coroutines.internal.DispatchedContinuation.resumeMode int  (LINE:398)\l0x0027: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$executeUnconfined$iv' kotlinx.coroutines.internal.DispatchedContinuation)])  (LINE:399)\l0x0028: CHECK_CAST (r6 I:kotlinx.coroutines.DispatchedTask) = (kotlinx.coroutines.DispatchedTask) (r6 I:??[OBJECT, ARRAY]) \l0x002a: INVOKE  \l  (r5 I:kotlinx.coroutines.EventLoop A[D('eventLoop$iv' kotlinx.coroutines.EventLoop)])\l  (r6 I:kotlinx.coroutines.DispatchedTask)\l type: VIRTUAL call: kotlinx.coroutines.EventLoop.dispatchUnconfined(kotlinx.coroutines.DispatchedTask):void A[MD:(kotlinx.coroutines.DispatchedTask\<?\>):void (m)]\l0x002d: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:400)\l}"];
Node_95 [shape=record,label="{95\:\ ?|SYNTHETIC\lRETURN\l|0x0050: RETURN  (r7 I:boolean) A[SYNTHETIC] (LINE:289)\l}"];
Node_65 [shape=record,label="{65\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_75 [shape=record,label="{75\:\ 0x002f|0x002f: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$executeUnconfined$iv' kotlinx.coroutines.internal.DispatchedContinuation)])  (LINE:403)\l0x0030: CHECK_CAST (r6 I:kotlinx.coroutines.DispatchedTask) = (kotlinx.coroutines.DispatchedTask) (r6 I:??[OBJECT, ARRAY]) \l0x0032: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0033: INVOKE  (r5 I:kotlinx.coroutines.EventLoop A[D('eventLoop$iv' kotlinx.coroutines.EventLoop)]), (r8 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.incrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:404)\l0x0037: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:406)\l}"];
Node_91 [shape=record,label="{91\:\ 0x0038|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_76 [shape=record,label="{76\:\ 0x0038|TRY_ENTER\lTryCatch #1 \{all \-\> 0x0044, blocks: (B:76:0x0038, B:77:0x003c), top: B:91:0x0038 \}\lCatch: all \-\> 0x0044\l|0x0038: INVOKE  \l  (r12 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$yieldUndispatched' kotlinx.coroutines.internal.DispatchedContinuation)])\l type: VIRTUAL call: kotlinx.coroutines.internal.DispatchedContinuation.run():void A[Catch: all \-\> 0x0044, MD:():void (m), TRY_ENTER] (LINE:288)\l}"];
Node_77 [shape=record,label="{77\:\ 0x003c|TRY_LEAVE\lLOOP_START\lTryCatch #1 \{all \-\> 0x0044, blocks: (B:76:0x0038, B:77:0x003c), top: B:91:0x0038 \}\lLOOP:0: B:77:0x003c\-\>B:78:0x0041\lCatch: all \-\> 0x0044\l|0x003d: INVOKE  (r10 I:boolean) = (r5 I:kotlinx.coroutines.EventLoop A[D('eventLoop$iv' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.processUnconfinedEvent():boolean A[Catch: all \-\> 0x0044, MD:():boolean (m), TRY_LEAVE] (LINE:409)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0041|LOOP_END\lLOOP:0: B:77:0x003c\-\>B:78:0x0041\l|0x0041: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x003c \l}"];
Node_93 [shape=record,label="{93\:\ 0x0049|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x0049|0x0049: INVOKE  (r5 I:kotlinx.coroutines.EventLoop A[D('eventLoop$iv' kotlinx.coroutines.EventLoop)]), (r8 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.decrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:418)\l}"];
Node_94 [shape=record,label="{94\:\ ?|SYNTHETIC\lRETURN\l|0x0050: RETURN  (r7 I:boolean) A[SYNTHETIC] (LINE:289)\l}"];
Node_92 [shape=record,label="{92\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_80 [shape=record,label="{80\:\ 0x0044|ExcHandler: all \-\> 0x0044\l|0x0044: MOVE_EXCEPTION  (r10 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0044] (LINE:411)\l}"];
Node_81 [shape=record,label="{81\:\ 0x0045|0x0045: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:416)\l}"];
Node_89 [shape=record,label="{89\:\ 0x0046|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_82 [shape=record,label="{82\:\ 0x0046|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0051, blocks: (B:82:0x0046), top: B:89:0x0046 \}\lCatch: all \-\> 0x0051\l|0x0046: INVOKE  \l  (r6 I:kotlinx.coroutines.DispatchedTask A[D('$this$runUnconfinedEventLoop$iv$iv' kotlinx.coroutines.DispatchedTask)])\l  (r10 I:java.lang.Throwable A[D('e$iv$iv' java.lang.Throwable)])\l  (r11 I:java.lang.Throwable)\l type: VIRTUAL call: kotlinx.coroutines.DispatchedTask.handleFatalException(java.lang.Throwable, java.lang.Throwable):void A[Catch: all \-\> 0x0051, MD:(java.lang.Throwable, java.lang.Throwable):void (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_90 [shape=record,label="{90\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_86 [shape=record,label="{86\:\ 0x0051|ExcHandler: all \-\> 0x0051\l|0x0051: MOVE_EXCEPTION  (r7 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0051] (LINE:417)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0052|0x0052: INVOKE  (r5 I:kotlinx.coroutines.EventLoop A[D('eventLoop$iv' kotlinx.coroutines.EventLoop)]), (r8 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.decrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:418)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0055|0x0055: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_85 [shape=record,label="{85\:\ 0x0050|RETURN\lORIG_RETURN\l|0x0050: RETURN  (r7 I:boolean)  (LINE:289)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlinx.coroutines.internal.DispatchedContinuationKt.yieldUndispatched((r12 I:kotlinx.coroutines.internal.DispatchedContinuation\<? super kotlin.Unit\> A[D('$this$yieldUndispatched' kotlinx.coroutines.internal.DispatchedContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:78:0x0041 \-\> B:77:0x003c, CROSS_EDGE: B:83:0x0049 \-\> B:85:0x0050, CROSS_EDGE: B:82:0x0046 \-\> B:83:0x0049, CROSS_EDGE: B:88:0x0055 \-\> B:65:?, CROSS_EDGE: B:89:0x0046 \-\> B:86:0x0051, CROSS_EDGE: B:91:0x0038 \-\> B:80:0x0044, CROSS_EDGE: B:70:0x0019 \-\> B:85:0x0050, CROSS_EDGE: B:67:0x000a \-\> B:69:0x000e\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0051, blocks: (B:82:0x0046), top: B:89:0x0046 \}, TryCatch #1 \{all \-\> 0x0044, blocks: (B:76:0x0038, B:77:0x003c), top: B:91:0x0038 \}\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/DispatchedContinuation\<\-Lkotlin\/Unit;\>;)Z\lDebug Info:\l  0x000d\-0x000e: r5 '$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1$iv' I\l  0x0038\-0x003c: r10 '$i$a$\-executeUnconfined\-DispatchedContinuationKt$yieldUndispatched$1' I\l  0x0045\-0x0049: r10 'e$iv$iv' Ljava\/lang\/Throwable;\l  0x0032\-0x004e: r6 '$this$runUnconfinedEventLoop$iv$iv' Lkotlinx\/coroutines\/DispatchedTask;\l  0x0033\-0x004e: r9 '$i$f$runUnconfinedEventLoop' I\l  0x0002\-0x0050: r0 'contState$iv' Ljava\/lang\/Object;\l  0x0003\-0x0050: r1 'mode$iv' I\l  0x0004\-0x0050: r2 'doYield$iv' Z\l  0x0005\-0x0050: r3 '$this$executeUnconfined$iv' Lkotlinx\/coroutines\/internal\/DispatchedContinuation;\l  0x0006\-0x0050: r4 '$i$f$executeUnconfined' I\l  0x0014\-0x0050: r5 'eventLoop$iv' Lkotlinx\/coroutines\/EventLoop;\l  0x0051\-0x0055: r0 'contState$iv' Ljava\/lang\/Object;\l  0x0051\-0x0055: r1 'mode$iv' I\l  0x0051\-0x0055: r2 'doYield$iv' Z\l  0x0051\-0x0055: r3 '$this$executeUnconfined$iv' Lkotlinx\/coroutines\/internal\/DispatchedContinuation;\l  0x0051\-0x0055: r4 '$i$f$executeUnconfined' I\l  0x0051\-0x0055: r5 'eventLoop$iv' Lkotlinx\/coroutines\/EventLoop;\l  0x0051\-0x0055: r6 '$this$runUnconfinedEventLoop$iv$iv' Lkotlinx\/coroutines\/DispatchedTask;\l  0x0051\-0x0055: r9 '$i$f$runUnconfinedEventLoop' I\l  \-1 \-0x0055: r12 '$this$yieldUndispatched' Lkotlinx\/coroutines\/internal\/DispatchedContinuation;\l}"];
MethodNode -> Node_64;Node_64 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_69;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_72;
Node_70 -> Node_85[style=dashed];
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_75;
Node_74 -> Node_95;
Node_95 -> Node_65;
Node_75 -> Node_91;
Node_91 -> Node_76;
Node_91 -> Node_80;
Node_76 -> Node_77;
Node_77 -> Node_78;
Node_77 -> Node_92;
Node_78 -> Node_77;
Node_78 -> Node_93[style=dashed];
Node_93 -> Node_83;
Node_83 -> Node_94;
Node_94 -> Node_65;
Node_92 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_89;
Node_89 -> Node_82;
Node_89 -> Node_86;
Node_82 -> Node_83;
Node_82 -> Node_90;
Node_90 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_88;
Node_88 -> Node_65;
Node_85 -> Node_65;
}

