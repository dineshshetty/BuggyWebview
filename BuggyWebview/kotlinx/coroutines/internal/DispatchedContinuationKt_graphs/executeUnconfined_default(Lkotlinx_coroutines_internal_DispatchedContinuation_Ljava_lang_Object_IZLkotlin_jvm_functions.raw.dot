digraph "CFG forkotlinx.coroutines.internal.DispatchedContinuationKt.executeUnconfined$default(Lkotlinx\/coroutines\/internal\/DispatchedContinuation;Ljava\/lang\/Object;IZLkotlin\/jvm\/functions\/Function0;ILjava\/lang\/Object;)Z" {
Node_86 [shape=record,label="{86\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_88 [shape=record,label="{88\:\ 0x0000|0x0000: ARITH  (r11 I:??[int, boolean]) = (r11 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:297)\l}"];
Node_89 [shape=record,label="{89\:\ 0x0002|0x0002: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:91:0x0005 \l}"];
Node_90 [shape=record,label="{90\:\ 0x0004|0x0004: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('doYield' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:298)\l}"];
Node_91 [shape=record,label="{91\:\ 0x0005|0x0005: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:297)\l0x0006: INVOKE  (r12 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:301)\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_92 [shape=record,label="{92\:\ 0x000c|0x000c: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:101:0x001e \l}"];
Node_93 [shape=record,label="{93\:\ 0x000e|0x000e: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:422)\l0x000f: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:301)\l}"];
Node_94 [shape=record,label="{94\:\ 0x0010|0x0010: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mode' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x0014 \l}"];
Node_95 [shape=record,label="{95\:\ 0x0012|0x0012: CONST  (r12 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_97 [shape=record,label="{97\:\ 0x0015|0x0015: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:99:0x0018 \l}"];
Node_99 [shape=record,label="{99\:\ 0x0018|0x0018: NEW_INSTANCE  (r12 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001a: INVOKE  (r12 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_100 [shape=record,label="{100\:\ 0x001d|0x001d: THROW  (r12 I:java.lang.Throwable) \l}"];
Node_87 [shape=record,label="{87\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_96 [shape=record,label="{96\:\ 0x0014|0x0014: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_101 [shape=record,label="{101\:\ 0x001e|0x001e: SGET  (r12 I:kotlinx.coroutines.ThreadLocalEventLoop) =  kotlinx.coroutines.ThreadLocalEventLoop.INSTANCE kotlinx.coroutines.ThreadLocalEventLoop  (LINE:302)\l0x0020: INVOKE  (r12 I:kotlinx.coroutines.EventLoop) = (r12 I:kotlinx.coroutines.ThreadLocalEventLoop) type: VIRTUAL call: kotlinx.coroutines.ThreadLocalEventLoop.getEventLoop$kotlinx_coroutines_core():kotlinx.coroutines.EventLoop A[MD:():kotlinx.coroutines.EventLoop (m)]\l}"];
Node_102 [shape=record,label="{102\:\ 0x0024|0x0024: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('doYield' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:106:0x002d  (LINE:304)\l}"];
Node_103 [shape=record,label="{103\:\ 0x0026|0x0026: INVOKE  (r2 I:boolean) = (r12 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.isUnconfinedQueueEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_104 [shape=record,label="{104\:\ 0x002a|0x002a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:106:0x002d \l}"];
Node_105 [shape=record,label="{105\:\ 0x002c|RETURN\l|0x002c: RETURN  (r0 I:boolean) \l}"];
Node_106 [shape=record,label="{106\:\ 0x002d|0x002d: INVOKE  (r2 I:boolean) = (r12 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.isUnconfinedLoopActive():boolean A[MD:():boolean (m)] (LINE:305)\l}"];
Node_107 [shape=record,label="{107\:\ 0x0031|0x0031: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:109:0x003f \l}"];
Node_108 [shape=record,label="{108\:\ 0x0033|0x0033: IPUT  \l  (r7 I:java.lang.Object A[D('contState' java.lang.Object)])\l  (r6 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$executeUnconfined_u24default' kotlinx.coroutines.internal.DispatchedContinuation)])\l kotlinx.coroutines.internal.DispatchedContinuation._state java.lang.Object  (LINE:307)\l0x0035: IPUT  \l  (r8 I:int A[D('mode' int)])\l  (r6 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$executeUnconfined_u24default' kotlinx.coroutines.internal.DispatchedContinuation)])\l kotlinx.coroutines.internal.DispatchedContinuation.resumeMode int  (LINE:308)\l0x0037: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$executeUnconfined_u24default' kotlinx.coroutines.internal.DispatchedContinuation)])  (LINE:309)\l0x0038: CHECK_CAST (r0 I:kotlinx.coroutines.DispatchedTask) = (kotlinx.coroutines.DispatchedTask) (r0 I:??[OBJECT, ARRAY]) \l0x003a: INVOKE  \l  (r12 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)])\l  (r0 I:kotlinx.coroutines.DispatchedTask)\l type: VIRTUAL call: kotlinx.coroutines.EventLoop.dispatchUnconfined(kotlinx.coroutines.DispatchedTask):void A[MD:(kotlinx.coroutines.DispatchedTask\<?\>):void (m)]\l0x003d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:310)\l}"];
Node_128 [shape=record,label="{128\:\ ?|SYNTHETIC\lRETURN\l|0x0066: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:305)\l}"];
Node_109 [shape=record,label="{109\:\ 0x003f|0x003f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$executeUnconfined_u24default' kotlinx.coroutines.internal.DispatchedContinuation)])  (LINE:313)\l0x0040: CHECK_CAST (r2 I:kotlinx.coroutines.DispatchedTask) = (kotlinx.coroutines.DispatchedTask) (r2 I:??[OBJECT, ARRAY]) \l0x0042: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0043: INVOKE  (r12 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]), (r1 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.incrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:423)\l}"];
Node_123 [shape=record,label="{123\:\ 0x0047|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_110 [shape=record,label="{110\:\ 0x0047|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0055, blocks: (B:110:0x0047, B:111:0x004a), top: B:123:0x0047 \}\lCatch: all \-\> 0x0055\l|0x0047: INVOKE  (r10 I:kotlin.jvm.functions.Function0 A[D('block' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[Catch: all \-\> 0x0055, MD:():R (m), TRY_ENTER] (LINE:425)\l}"];
Node_111 [shape=record,label="{111\:\ 0x004a|TRY_LEAVE\lLOOP_START\lTryCatch #0 \{all \-\> 0x0055, blocks: (B:110:0x0047, B:111:0x004a), top: B:123:0x0047 \}\lLOOP:0: B:111:0x004a\-\>B:112:0x004f\lCatch: all \-\> 0x0055\l|0x004b: INVOKE  (r4 I:boolean) = (r12 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.processUnconfinedEvent():boolean A[Catch: all \-\> 0x0055, MD:():boolean (m), TRY_LEAVE] (LINE:428)\l}"];
Node_112 [shape=record,label="{112\:\ 0x004f|LOOP_END\lLOOP:0: B:111:0x004a\-\>B:112:0x004f\l|0x004f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:111:0x004a \l}"];
Node_127 [shape=record,label="{127\:\ 0x0051|SYNTHETIC\l}"];
Node_113 [shape=record,label="{113\:\ 0x0051|0x0051: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l}"];
Node_118 [shape=record,label="{118\:\ 0x005d|0x005d: INVOKE  (r12 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]), (r1 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.decrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:437)\l0x0060: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_119 [shape=record,label="{119\:\ 0x0066|RETURN\lORIG_RETURN\l|0x0066: RETURN  (r0 I:boolean)  (LINE:305)\l}"];
Node_124 [shape=record,label="{124\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_114 [shape=record,label="{114\:\ 0x0055|ExcHandler: all \-\> 0x0055\l|0x0055: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0055] (LINE:430)\l}"];
Node_115 [shape=record,label="{115\:\ 0x0056|0x0056: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:435)\l}"];
Node_125 [shape=record,label="{125\:\ 0x0057|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_116 [shape=record,label="{116\:\ 0x0057|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0067, blocks: (B:116:0x0057), top: B:125:0x0057 \}\lCatch: all \-\> 0x0067\l|0x0057: INVOKE  \l  (r2 I:kotlinx.coroutines.DispatchedTask A[D('$this$runUnconfinedEventLoop$iv' kotlinx.coroutines.DispatchedTask)])\l  (r4 I:java.lang.Throwable A[D('e$iv' java.lang.Throwable)])\l  (r5 I:java.lang.Throwable)\l type: VIRTUAL call: kotlinx.coroutines.DispatchedTask.handleFatalException(java.lang.Throwable, java.lang.Throwable):void A[Catch: all \-\> 0x0067, MD:(java.lang.Throwable, java.lang.Throwable):void (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_117 [shape=record,label="{117\:\ 0x005a|0x005a: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l}"];
Node_126 [shape=record,label="{126\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_120 [shape=record,label="{120\:\ 0x0067|ExcHandler: all \-\> 0x0067\l|0x0067: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0067] (LINE:436)\l}"];
Node_121 [shape=record,label="{121\:\ 0x0068|0x0068: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x006b: INVOKE  (r12 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]), (r1 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.decrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:437)\l0x006e: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_122 [shape=record,label="{122\:\ 0x0071|0x0071: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ boolean kotlinx.coroutines.internal.DispatchedContinuationKt.executeUnconfined$default((r6 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$executeUnconfined_u24default' kotlinx.coroutines.internal.DispatchedContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Object A[D('contState' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('doYield' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.functions.Function0 A[D('block' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:105:0x002c \-\> B:87:?, CROSS_EDGE: B:119:0x0066 \-\> B:87:?, BACK_EDGE: B:112:0x004f \-\> B:111:0x004a, CROSS_EDGE: B:118:0x005d \-\> B:119:0x0066, CROSS_EDGE: B:117:0x005a \-\> B:118:0x005d, CROSS_EDGE: B:122:0x0071 \-\> B:87:?, CROSS_EDGE: B:125:0x0057 \-\> B:120:0x0067, CROSS_EDGE: B:123:0x0047 \-\> B:114:0x0055, CROSS_EDGE: B:102:0x0024 \-\> B:106:0x002d, CROSS_EDGE: B:96:0x0014 \-\> B:97:0x0015, CROSS_EDGE: B:92:0x000c \-\> B:101:0x001e, CROSS_EDGE: B:89:0x0002 \-\> B:91:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x0015: r12 '$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' I\l  0x0056\-0x005a: r4 'e$iv' Ljava\/lang\/Throwable;\l  0x0042\-0x0065: r2 '$this$runUnconfinedEventLoop$iv' Lkotlinx\/coroutines\/DispatchedTask;\l  0x0043\-0x0065: r3 '$i$f$runUnconfinedEventLoop' I\l  0x0067\-0x0071: r2 '$this$runUnconfinedEventLoop$iv' Lkotlinx\/coroutines\/DispatchedTask;\l  0x0067\-0x0071: r3 '$i$f$runUnconfinedEventLoop' I\l  \-1 \-0x0071: r6 '$this$executeUnconfined_u24default' Lkotlinx\/coroutines\/internal\/DispatchedContinuation;\l  \-1 \-0x0071: r7 'contState' Ljava\/lang\/Object;\l  \-1 \-0x0071: r8 'mode' I\l  \-1 \-0x0071: r9 'doYield' Z\l  \-1 \-0x0071: r10 'block' Lkotlin\/jvm\/functions\/Function0;\l  0x0006\-0x0071: r11 '$i$f$executeUnconfined' I\l  0x0024\-0x0071: r12 'eventLoop' Lkotlinx\/coroutines\/EventLoop;\lTryCatch #0 \{all \-\> 0x0055, blocks: (B:110:0x0047, B:111:0x004a), top: B:123:0x0047 \}, TryCatch #1 \{all \-\> 0x0067, blocks: (B:116:0x0057), top: B:125:0x0057 \}\l}"];
MethodNode -> Node_86;Node_86 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_91;
Node_90 -> Node_91;
Node_91 -> Node_92;
Node_92 -> Node_93[style=dashed];
Node_92 -> Node_101;
Node_93 -> Node_94;
Node_94 -> Node_95[style=dashed];
Node_94 -> Node_96;
Node_95 -> Node_97;
Node_97 -> Node_99;
Node_97 -> Node_101[style=dashed];
Node_99 -> Node_100;
Node_100 -> Node_87;
Node_96 -> Node_97;
Node_101 -> Node_102;
Node_102 -> Node_103[style=dashed];
Node_102 -> Node_106;
Node_103 -> Node_104;
Node_104 -> Node_105[style=dashed];
Node_104 -> Node_106;
Node_105 -> Node_87;
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_109;
Node_108 -> Node_128;
Node_128 -> Node_87;
Node_109 -> Node_123;
Node_123 -> Node_110;
Node_123 -> Node_114;
Node_110 -> Node_111;
Node_111 -> Node_112;
Node_111 -> Node_124;
Node_112 -> Node_111;
Node_112 -> Node_127[style=dashed];
Node_127 -> Node_113;
Node_113 -> Node_118;
Node_118 -> Node_119;
Node_119 -> Node_87;
Node_124 -> Node_114;
Node_114 -> Node_115;
Node_115 -> Node_125;
Node_125 -> Node_116;
Node_125 -> Node_120;
Node_116 -> Node_117;
Node_116 -> Node_126;
Node_117 -> Node_118;
Node_126 -> Node_120;
Node_120 -> Node_121;
Node_121 -> Node_122;
Node_122 -> Node_87;
}

