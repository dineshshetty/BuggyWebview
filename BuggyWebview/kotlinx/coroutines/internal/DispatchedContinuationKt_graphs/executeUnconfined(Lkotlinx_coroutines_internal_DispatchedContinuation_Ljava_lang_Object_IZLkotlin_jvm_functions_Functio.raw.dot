digraph "CFG forkotlinx.coroutines.internal.DispatchedContinuationKt.executeUnconfined(Lkotlinx\/coroutines\/internal\/DispatchedContinuation;Ljava\/lang\/Object;IZLkotlin\/jvm\/functions\/Function0;)Z" {
Node_80 [shape=record,label="{80\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_82 [shape=record,label="{82\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:301)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_83 [shape=record,label="{83\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:92:0x0019 \l}"];
Node_84 [shape=record,label="{84\:\ 0x0009|0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:422)\l0x000a: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:301)\l}"];
Node_85 [shape=record,label="{85\:\ 0x000b|0x000b: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mode' int)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:87:0x000f \l}"];
Node_86 [shape=record,label="{86\:\ 0x000d|0x000d: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_88 [shape=record,label="{88\:\ 0x0010|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:90:0x0013 \l}"];
Node_90 [shape=record,label="{90\:\ 0x0013|0x0013: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0015: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_91 [shape=record,label="{91\:\ 0x0018|0x0018: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_81 [shape=record,label="{81\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_87 [shape=record,label="{87\:\ 0x000f|0x000f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_92 [shape=record,label="{92\:\ 0x0019|0x0019: SGET  (r1 I:kotlinx.coroutines.ThreadLocalEventLoop) =  kotlinx.coroutines.ThreadLocalEventLoop.INSTANCE kotlinx.coroutines.ThreadLocalEventLoop  (LINE:302)\l0x001b: INVOKE  (r1 I:kotlinx.coroutines.EventLoop) = (r1 I:kotlinx.coroutines.ThreadLocalEventLoop) type: VIRTUAL call: kotlinx.coroutines.ThreadLocalEventLoop.getEventLoop$kotlinx_coroutines_core():kotlinx.coroutines.EventLoop A[MD:():kotlinx.coroutines.EventLoop (m)]\l}"];
Node_93 [shape=record,label="{93\:\ 0x001f|0x001f: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('doYield' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:97:0x0028  (LINE:304)\l}"];
Node_94 [shape=record,label="{94\:\ 0x0021|0x0021: INVOKE  (r4 I:boolean) = (r1 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.isUnconfinedQueueEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_95 [shape=record,label="{95\:\ 0x0025|0x0025: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:97:0x0028 \l}"];
Node_96 [shape=record,label="{96\:\ 0x0027|RETURN\l|0x0027: RETURN  (r2 I:boolean) \l}"];
Node_97 [shape=record,label="{97\:\ 0x0028|0x0028: INVOKE  (r4 I:boolean) = (r1 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.isUnconfinedLoopActive():boolean A[MD:():boolean (m)] (LINE:305)\l}"];
Node_98 [shape=record,label="{98\:\ 0x002c|0x002c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:100:0x003a \l}"];
Node_99 [shape=record,label="{99\:\ 0x002e|0x002e: IPUT  \l  (r9 I:java.lang.Object A[D('contState' java.lang.Object)])\l  (r8 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$executeUnconfined' kotlinx.coroutines.internal.DispatchedContinuation)])\l kotlinx.coroutines.internal.DispatchedContinuation._state java.lang.Object  (LINE:307)\l0x0030: IPUT  \l  (r10 I:int A[D('mode' int)])\l  (r8 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$executeUnconfined' kotlinx.coroutines.internal.DispatchedContinuation)])\l kotlinx.coroutines.internal.DispatchedContinuation.resumeMode int  (LINE:308)\l0x0032: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$executeUnconfined' kotlinx.coroutines.internal.DispatchedContinuation)])  (LINE:309)\l0x0033: CHECK_CAST (r2 I:kotlinx.coroutines.DispatchedTask) = (kotlinx.coroutines.DispatchedTask) (r2 I:??[OBJECT, ARRAY]) \l0x0035: INVOKE  \l  (r1 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)])\l  (r2 I:kotlinx.coroutines.DispatchedTask)\l type: VIRTUAL call: kotlinx.coroutines.EventLoop.dispatchUnconfined(kotlinx.coroutines.DispatchedTask):void A[MD:(kotlinx.coroutines.DispatchedTask\<?\>):void (m)]\l0x0038: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:310)\l}"];
Node_119 [shape=record,label="{119\:\ ?|SYNTHETIC\lRETURN\l|0x0061: RETURN  (r2 I:boolean) A[SYNTHETIC] (LINE:305)\l}"];
Node_100 [shape=record,label="{100\:\ 0x003a|0x003a: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$executeUnconfined' kotlinx.coroutines.internal.DispatchedContinuation)])  (LINE:313)\l0x003b: CHECK_CAST (r4 I:kotlinx.coroutines.DispatchedTask) = (kotlinx.coroutines.DispatchedTask) (r4 I:??[OBJECT, ARRAY]) \l0x003d: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003e: INVOKE  (r1 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]), (r3 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.incrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:423)\l}"];
Node_114 [shape=record,label="{114\:\ 0x0042|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_101 [shape=record,label="{101\:\ 0x0042|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0050, blocks: (B:101:0x0042, B:102:0x0045), top: B:114:0x0042 \}\lCatch: all \-\> 0x0050\l|0x0042: INVOKE  (r12 I:kotlin.jvm.functions.Function0 A[D('block' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[Catch: all \-\> 0x0050, MD:():R (m), TRY_ENTER] (LINE:425)\l}"];
Node_102 [shape=record,label="{102\:\ 0x0045|TRY_LEAVE\lLOOP_START\lTryCatch #0 \{all \-\> 0x0050, blocks: (B:101:0x0042, B:102:0x0045), top: B:114:0x0042 \}\lLOOP:0: B:102:0x0045\-\>B:103:0x004a\lCatch: all \-\> 0x0050\l|0x0046: INVOKE  (r6 I:boolean) = (r1 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: kotlinx.coroutines.EventLoop.processUnconfinedEvent():boolean A[Catch: all \-\> 0x0050, MD:():boolean (m), TRY_LEAVE] (LINE:428)\l}"];
Node_103 [shape=record,label="{103\:\ 0x004a|LOOP_END\lLOOP:0: B:102:0x0045\-\>B:103:0x004a\l|0x004a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:102:0x0045 \l}"];
Node_118 [shape=record,label="{118\:\ 0x004c|SYNTHETIC\l}"];
Node_104 [shape=record,label="{104\:\ 0x004c|0x004c: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l}"];
Node_109 [shape=record,label="{109\:\ 0x0058|0x0058: INVOKE  (r1 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]), (r3 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.decrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:437)\l0x005b: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_110 [shape=record,label="{110\:\ 0x0061|RETURN\lORIG_RETURN\l|0x0061: RETURN  (r2 I:boolean)  (LINE:305)\l}"];
Node_115 [shape=record,label="{115\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_105 [shape=record,label="{105\:\ 0x0050|ExcHandler: all \-\> 0x0050\l|0x0050: MOVE_EXCEPTION  (r6 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0050] (LINE:430)\l}"];
Node_106 [shape=record,label="{106\:\ 0x0051|0x0051: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:435)\l}"];
Node_116 [shape=record,label="{116\:\ 0x0052|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_107 [shape=record,label="{107\:\ 0x0052|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0062, blocks: (B:107:0x0052), top: B:116:0x0052 \}\lCatch: all \-\> 0x0062\l|0x0052: INVOKE  \l  (r4 I:kotlinx.coroutines.DispatchedTask A[D('$this$runUnconfinedEventLoop$iv' kotlinx.coroutines.DispatchedTask)])\l  (r6 I:java.lang.Throwable A[D('e$iv' java.lang.Throwable)])\l  (r7 I:java.lang.Throwable)\l type: VIRTUAL call: kotlinx.coroutines.DispatchedTask.handleFatalException(java.lang.Throwable, java.lang.Throwable):void A[Catch: all \-\> 0x0062, MD:(java.lang.Throwable, java.lang.Throwable):void (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_108 [shape=record,label="{108\:\ 0x0055|0x0055: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l}"];
Node_117 [shape=record,label="{117\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_111 [shape=record,label="{111\:\ 0x0062|ExcHandler: all \-\> 0x0062\l|0x0062: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0062] (LINE:436)\l}"];
Node_112 [shape=record,label="{112\:\ 0x0063|0x0063: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x0066: INVOKE  (r1 I:kotlinx.coroutines.EventLoop A[D('eventLoop' kotlinx.coroutines.EventLoop)]), (r3 I:boolean) type: VIRTUAL call: kotlinx.coroutines.EventLoop.decrementUseCount(boolean):void A[MD:(boolean):void (m)] (LINE:437)\l0x0069: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_113 [shape=record,label="{113\:\ 0x006c|0x006c: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final boolean kotlinx.coroutines.internal.DispatchedContinuationKt.executeUnconfined((r8 I:kotlinx.coroutines.internal.DispatchedContinuation\<?\> A[D('$this$executeUnconfined' kotlinx.coroutines.internal.DispatchedContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Object A[D('contState' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('doYield' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlin.jvm.functions.Function0\<kotlin.Unit\> A[D('block' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:96:0x0027 \-\> B:81:?, CROSS_EDGE: B:110:0x0061 \-\> B:81:?, BACK_EDGE: B:103:0x004a \-\> B:102:0x0045, CROSS_EDGE: B:109:0x0058 \-\> B:110:0x0061, CROSS_EDGE: B:108:0x0055 \-\> B:109:0x0058, CROSS_EDGE: B:113:0x006c \-\> B:81:?, CROSS_EDGE: B:116:0x0052 \-\> B:111:0x0062, CROSS_EDGE: B:114:0x0042 \-\> B:105:0x0050, CROSS_EDGE: B:93:0x001f \-\> B:97:0x0028, CROSS_EDGE: B:87:0x000f \-\> B:88:0x0010, CROSS_EDGE: B:83:0x0007 \-\> B:92:0x0019\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0050, blocks: (B:101:0x0042, B:102:0x0045), top: B:114:0x0042 \}, TryCatch #1 \{all \-\> 0x0062, blocks: (B:107:0x0052), top: B:116:0x0052 \}\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/DispatchedContinuation\<*\>;Ljava\/lang\/Object;IZLkotlin\/jvm\/functions\/Function0\<Lkotlin\/Unit;\>;)Z\lDebug Info:\l  0x000a\-0x0010: r1 '$i$a$\-assert\-DispatchedContinuationKt$executeUnconfined$1' I\l  0x0051\-0x0055: r6 'e$iv' Ljava\/lang\/Throwable;\l  0x003d\-0x0060: r4 '$this$runUnconfinedEventLoop$iv' Lkotlinx\/coroutines\/DispatchedTask;\l  0x003e\-0x0060: r5 '$i$f$runUnconfinedEventLoop' I\l  0x0001\-0x006c: r0 '$i$f$executeUnconfined' I\l  0x001f\-0x006c: r1 'eventLoop' Lkotlinx\/coroutines\/EventLoop;\l  0x0062\-0x006c: r4 '$this$runUnconfinedEventLoop$iv' Lkotlinx\/coroutines\/DispatchedTask;\l  0x0062\-0x006c: r5 '$i$f$runUnconfinedEventLoop' I\l  \-1 \-0x006c: r8 '$this$executeUnconfined' Lkotlinx\/coroutines\/internal\/DispatchedContinuation;\l  \-1 \-0x006c: r9 'contState' Ljava\/lang\/Object;\l  \-1 \-0x006c: r10 'mode' I\l  \-1 \-0x006c: r11 'doYield' Z\l  \-1 \-0x006c: r12 'block' Lkotlin\/jvm\/functions\/Function0;\l}"];
MethodNode -> Node_80;Node_80 -> Node_82;
Node_82 -> Node_83;
Node_83 -> Node_84[style=dashed];
Node_83 -> Node_92;
Node_84 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_87;
Node_86 -> Node_88;
Node_88 -> Node_90;
Node_88 -> Node_92[style=dashed];
Node_90 -> Node_91;
Node_91 -> Node_81;
Node_87 -> Node_88;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_97;
Node_94 -> Node_95;
Node_95 -> Node_96[style=dashed];
Node_95 -> Node_97;
Node_96 -> Node_81;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_100;
Node_99 -> Node_119;
Node_119 -> Node_81;
Node_100 -> Node_114;
Node_114 -> Node_101;
Node_114 -> Node_105;
Node_101 -> Node_102;
Node_102 -> Node_103;
Node_102 -> Node_115;
Node_103 -> Node_102;
Node_103 -> Node_118[style=dashed];
Node_118 -> Node_104;
Node_104 -> Node_109;
Node_109 -> Node_110;
Node_110 -> Node_81;
Node_115 -> Node_105;
Node_105 -> Node_106;
Node_106 -> Node_116;
Node_116 -> Node_107;
Node_116 -> Node_111;
Node_107 -> Node_108;
Node_107 -> Node_117;
Node_108 -> Node_109;
Node_117 -> Node_111;
Node_111 -> Node_112;
Node_112 -> Node_113;
Node_113 -> Node_81;
}

