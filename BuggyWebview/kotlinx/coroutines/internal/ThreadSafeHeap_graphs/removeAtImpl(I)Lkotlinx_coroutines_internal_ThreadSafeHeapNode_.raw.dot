digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.removeAtImpl(I)Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:89)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x001b \l}"];
Node_35 [shape=record,label="{35\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:168)\l0x0009: INVOKE  (r3 I:int) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:89)\l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|0x000d: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:38:0x0011 \l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-ThreadSafeHeap$removeAtImpl$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-ThreadSafeHeap$removeAtImpl$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0015 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0017: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-ThreadSafeHeap$removeAtImpl$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x001b|0x001b: IGET  (r0 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[]) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap) kotlinx.coroutines.internal.ThreadSafeHeap.a kotlinx.coroutines.internal.ThreadSafeHeapNode[]  (LINE:90)\l0x001d: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0020: INVOKE  (r3 I:int) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:91)\l0x0024: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0025: ARITH  (r3 I:int) = (r3 I:int) + (r4 I:int) \l0x0026: INVOKE  (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r3 I:int) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.setSize(int):void A[MD:(int):void (m)]\l0x0029: INVOKE  (r3 I:int) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:92)\l}"];
Node_44 [shape=record,label="{44\:\ 0x002d|0x002d: IF  (r8 I:??[int, byte, short, char] A[D('index' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:51:0x0058 \l}"];
Node_45 [shape=record,label="{45\:\ 0x002f|0x002f: INVOKE  (r3 I:int) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:93)\l0x0033: INVOKE  (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r8 I:int A[D('index' int)]), (r3 I:int) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.swap(int, int):void A[MD:(int, int):void (m)]\l0x0036: ARITH  (r3 I:int) = (r8 I:int A[D('index' int)]) + (\-1 int)  (LINE:94)\l0x0038: ARITH  (r3 I:int) = (r3 I:int) \/ (2 int) \l}"];
Node_46 [shape=record,label="{46\:\ 0x003a|0x003a: IF  (r8 I:??[int, byte, short, char] A[D('index' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:50:0x0055  (LINE:95)\l}"];
Node_47 [shape=record,label="{47\:\ 0x003c|0x003c: AGET  (r5 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r8 I:??[int, short, byte, char] A[D('index' int)])\l \l0x003e: INVOKE  (r5 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0041: CHECK_CAST (r5 I:java.lang.Comparable) = (java.lang.Comparable) (r5 I:??[OBJECT, ARRAY]) \l0x0043: AGET  (r6 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r3 I:??[int, short, byte, char] A[D('j' int)])\l \l0x0045: INVOKE  (r6 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0048: INVOKE  (r5 I:int) = (r5 I:java.lang.Comparable), (r6 I:java.lang.Object) type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x004c|0x004c: IF  (r5 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:50:0x0055 \l}"];
Node_49 [shape=record,label="{49\:\ 0x004e|0x004e: INVOKE  (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r8 I:int A[D('index' int)]), (r3 I:int A[D('j' int)]) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.swap(int, int):void A[MD:(int, int):void (m)] (LINE:96)\l0x0051: INVOKE  (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r3 I:int A[D('j' int)]) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.siftUpFrom(int):void A[MD:(int):void (m)] (LINE:97)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0055|0x0055: INVOKE  (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r8 I:int A[D('index' int)]) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.siftDownFrom(int):void A[MD:(int):void (m)] (LINE:99)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0058|0x0058: INVOKE  (r3 I:int) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:102)\l0x005c: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r3 I:??[int, short, byte, char])\l \l0x005e: INVOKE  (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0061: INVOKE  (r5 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:103)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0065|0x0065: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0078 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0067|0x0067: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:168)\l0x0068: INVOKE  (r6 I:kotlinx.coroutines.internal.ThreadSafeHeap) = (r3 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('result' kotlinx.coroutines.internal.ThreadSafeHeapNode)]) type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.getHeap():kotlinx.coroutines.internal.ThreadSafeHeap A[MD:():kotlinx.coroutines.internal.ThreadSafeHeap\<?\> (m)] (LINE:103)\l}"];
Node_54 [shape=record,label="{54\:\ 0x006c|0x006c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x006f \l}"];
Node_55 [shape=record,label="{55\:\ 0x006e|0x006e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x006f|0x006f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0072 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0072|0x0072: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0074: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0077|0x0077: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0078|0x0078: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:104)\l0x0079: INVOKE  \l  (r3 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('result' kotlinx.coroutines.internal.ThreadSafeHeapNode)])\l  (r1 I:kotlinx.coroutines.internal.ThreadSafeHeap)\l type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.setHeap(kotlinx.coroutines.internal.ThreadSafeHeap):void A[MD:(kotlinx.coroutines.internal.ThreadSafeHeap\<?\>):void (m)]\l0x007c: INVOKE  \l  (r3 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('result' kotlinx.coroutines.internal.ThreadSafeHeapNode)])\l  (r4 I:int)\l type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.setIndex(int):void A[MD:(int):void (m)] (LINE:105)\l0x007f: INVOKE  (r2 I:int) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:106)\l0x0083: APUT  \l  (r0 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r2 I:??[int, short, byte, char])\l  (r1 I:??[OBJECT, ARRAY])\l \l}"];
Node_61 [shape=record,label="{61\:\ 0x0085|RETURN\l|0x0085: RETURN  \l  (r3 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> A[D('result' kotlinx.coroutines.internal.ThreadSafeHeapNode)])\l  (LINE:107)\l}"];
MethodNode[shape=record,label="{public final T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> kotlinx.coroutines.internal.ThreadSafeHeap.removeAtImpl((r7 'this' I:kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:59:0x0077 \-\> B:32:?, CROSS_EDGE: B:61:0x0085 \-\> B:32:?, CROSS_EDGE: B:54:0x006c \-\> B:56:0x006f, CROSS_EDGE: B:52:0x0065 \-\> B:60:0x0078, CROSS_EDGE: B:50:0x0055 \-\> B:51:0x0058, CROSS_EDGE: B:46:0x003a \-\> B:50:0x0055, CROSS_EDGE: B:44:0x002d \-\> B:51:0x0058, CROSS_EDGE: B:38:0x0011 \-\> B:39:0x0012, CROSS_EDGE: B:34:0x0006 \-\> B:43:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0012: r0 '$i$a$\-assert\-ThreadSafeHeap$removeAtImpl$1' I\l  0x003a\-0x0058: r3 'j' I\l  0x0068\-0x006f: r5 '$i$a$\-assert\-ThreadSafeHeap$removeAtImpl$2' I\l  0x0020\-0x0085: r0 'a' [Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  0x0061\-0x0085: r3 'result' Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  \-1 \-0x0085: r8 'index' I\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\lSIGNATURE: (I)TT;\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_43;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_43[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_32;
Node_38 -> Node_39;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_51;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_50;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_60;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_56;
Node_56 -> Node_58;
Node_56 -> Node_60[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_32;
Node_60 -> Node_61;
Node_61 -> Node_32;
}

