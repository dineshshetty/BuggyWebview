digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.peek()Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:40)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0001|0x0001: MONITOR_ENTER  (r3 I:??[OBJECT, ARRAY])  (LINE:162)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x000a, blocks: (B:18:0x0003), top: B:24:0x0003 \}\lCatch: all \-\> 0x000a\l|0x0003: INVOKE  (r2 I:kotlinx.coroutines.internal.ThreadSafeHeapNode) = (r3 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.firstImpl():kotlinx.coroutines.internal.ThreadSafeHeapNode A[Catch: all \-\> 0x000a, MD:():T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> (m), TRY_ENTER, TRY_LEAVE] (LINE:40)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|0x0007: MONITOR_EXIT  (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|RETURN\l|0x0009: RETURN  (r2 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>)  (LINE:40)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|ExcHandler: all \-\> 0x000a\l|0x000a: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x000a]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|0x000c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> kotlinx.coroutines.internal.ThreadSafeHeap.peek((r3 'this' I:kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x000c \-\> B:14:?, CROSS_EDGE: B:24:0x0003 \-\> B:21:0x000a\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x000a, blocks: (B:18:0x0003), top: B:24:0x0003 \}\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\lSIGNATURE: ()TT;\lDebug Info:\l  0x0003\-0x0007: r1 '$i$a$\-synchronized\-ThreadSafeHeap$peek$1' I\l  0x0001\-0x0009: r0 '$i$f$synchronized' I\l  0x000a\-0x000c: r0 '$i$f$synchronized' I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_24;
Node_24 -> Node_18;
Node_24 -> Node_21;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_25 -> Node_21;
Node_21 -> Node_23;
Node_23 -> Node_14;
}

