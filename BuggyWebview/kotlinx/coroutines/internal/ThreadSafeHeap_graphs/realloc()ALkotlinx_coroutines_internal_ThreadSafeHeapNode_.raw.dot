digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.realloc()[Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[]) = (r4 I:kotlinx.coroutines.internal.ThreadSafeHeap) kotlinx.coroutines.internal.ThreadSafeHeap.a kotlinx.coroutines.internal.ThreadSafeHeapNode[]  (LINE:142)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000d  (LINE:144)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0006: NEW_ARRAY  (r1 I:kotlinx.coroutines.internal.ThreadSafeHeapNode[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: kotlinx.coroutines.internal.ThreadSafeHeapNode[] \l0x0008: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0009: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:168)\l0x000a: IPUT  \l  (r2 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[] A[D('it' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r4 I:kotlinx.coroutines.internal.ThreadSafeHeap)\l kotlinx.coroutines.internal.ThreadSafeHeap.a kotlinx.coroutines.internal.ThreadSafeHeapNode[]  (LINE:144)\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN  (r1 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[]) A[SYNTHETIC] (LINE:143)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|0x000d: INVOKE  (r1 I:int) = (r4 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:145)\l0x0011: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: IF  (r1 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:20:0x002c \l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|0x0014: INVOKE  (r1 I:int) = (r4 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)]\l0x0018: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x001a: INVOKE  (r1 I:java.lang.Object[]) = (r0 I:java.lang.Object[] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])]), (r1 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x001e: CONST_STR  (r2 I:java.lang.String) =  \"copyOf(this, newSize)\" \l0x0020: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0023: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0024: CHECK_CAST (r2 I:kotlinx.coroutines.internal.ThreadSafeHeapNode[]) = (kotlinx.coroutines.internal.ThreadSafeHeapNode[]) (r2 I:??[OBJECT, ARRAY]) \l0x0026: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:168)\l0x0027: IPUT  \l  (r2 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[] A[D('it' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r4 I:kotlinx.coroutines.internal.ThreadSafeHeap)\l kotlinx.coroutines.internal.ThreadSafeHeap.a kotlinx.coroutines.internal.ThreadSafeHeapNode[]  (LINE:145)\l0x0029: CHECK_CAST (r1 I:kotlinx.coroutines.internal.ThreadSafeHeapNode[]) = (kotlinx.coroutines.internal.ThreadSafeHeapNode[]) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN  (r1 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[]) A[SYNTHETIC] (LINE:143)\l}"];
Node_20 [shape=record,label="{20\:\ 0x002c|0x002c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])  (LINE:146)\l}"];
Node_21 [shape=record,label="{21\:\ 0x002d|RETURN\lORIG_RETURN\l|0x002d: RETURN  (r1 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[])  (LINE:143)\l}"];
MethodNode[shape=record,label="{private final T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[] kotlinx.coroutines.internal.ThreadSafeHeap.realloc((r4 'this' I:kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0014 \-\> B:21:0x002d, CROSS_EDGE: B:20:0x002c \-\> B:21:0x002d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x000c: r2 'it' [Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  0x000a\-0x000c: r3 '$i$a$\-also\-ThreadSafeHeap$realloc$1' I\l  0x0026\-0x0029: r2 'it' [Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  0x0027\-0x0029: r3 '$i$a$\-also\-ThreadSafeHeap$realloc$2' I\l  0x0002\-0x002d: r0 'a' [Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\lSIGNATURE: ()[TT;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_22;
Node_22 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_23;
Node_23 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

