digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.realloc()[Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[] r0 = r4.f223a\l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|if (r0 != null) goto L6\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|kotlinx.coroutines.internal.ThreadSafeHeapNode[] r1 = (T[]) new kotlinx.coroutines.internal.ThreadSafeHeapNode[4]\lr4.f223a = r1\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d}"];
Node_18 [shape=record,label="{18\:\ 0x0012|if (getSize() \< r0.length) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|java.lang.Object[] r1 = java.util.Arrays.copyOf(r0, getSize() * 2)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"copyOf(this, newSize)\")\lr4.f223a = (T[]) ((kotlinx.coroutines.internal.ThreadSafeHeapNode[]) r1)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return (T[]) ((kotlinx.coroutines.internal.ThreadSafeHeapNode[]) r1)\l}"];
Node_20 [shape=record,label="{20\:\ 0x002c}"];
Node_21 [shape=record,label="{21\:\ 0x002d|RETURN\lORIG_RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private final T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[] kotlinx.coroutines.internal.ThreadSafeHeap.realloc((r4v0 'this' kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0014 \-\> B:21:0x002d, CROSS_EDGE: B:20:0x002c \-\> B:21:0x002d\lINLINE_NOT_NEEDED\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\lSIGNATURE: ()[TT;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_22;
Node_22 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_23;
Node_23 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

