digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.addImpl(Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:112)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0019 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:168)\l0x0007: INVOKE  (r1 I:kotlinx.coroutines.internal.ThreadSafeHeap) = (r4 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode)]) type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.getHeap():kotlinx.coroutines.internal.ThreadSafeHeap A[MD:():kotlinx.coroutines.internal.ThreadSafeHeap\<?\> (m)] (LINE:112)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000f \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0013 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0015: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|0x000f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0019|0x0019: INVOKE  \l  (r4 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode)])\l  (r3 I:kotlinx.coroutines.internal.ThreadSafeHeap)\l type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.setHeap(kotlinx.coroutines.internal.ThreadSafeHeap):void A[MD:(kotlinx.coroutines.internal.ThreadSafeHeap\<?\>):void (m)] (LINE:113)\l0x001c: INVOKE  (r0 I:kotlinx.coroutines.internal.ThreadSafeHeapNode[]) = (r3 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.realloc():kotlinx.coroutines.internal.ThreadSafeHeapNode[] A[MD:():T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[] (m)] (LINE:114)\l0x0020: INVOKE  (r1 I:int) = (r3 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:115)\l0x0024: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x0026: INVOKE  (r3 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r2 I:int) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.setSize(int):void A[MD:(int):void (m)]\l0x0029: APUT  \l  (r0 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r1 I:??[int, short, byte, char] A[D('i' int)])\l  (r4 I:??[OBJECT, ARRAY] A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode)])\l  (LINE:116)\l0x002b: INVOKE  \l  (r4 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode)])\l  (r1 I:int A[D('i' int)])\l type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.setIndex(int):void A[MD:(int):void (m)] (LINE:117)\l0x002e: INVOKE  (r3 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r1 I:int A[D('i' int)]) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.siftUpFrom(int):void A[MD:(int):void (m)] (LINE:118)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0031|RETURN\l|0x0031: RETURN    (LINE:119)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.ThreadSafeHeap.addImpl((r3 'this' I:kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]), (r4 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0031 \-\> B:15:?, CROSS_EDGE: B:21:0x000f \-\> B:22:0x0010, CROSS_EDGE: B:17:0x0004 \-\> B:26:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0010: r0 '$i$a$\-assert\-ThreadSafeHeap$addImpl$1' I\l  0x0020\-0x0031: r0 'a' [Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  0x0029\-0x0031: r1 'i' I\l  \-1 \-0x0031: r4 'node' Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\lSIGNATURE: (TT;)V\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_26[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_21 -> Node_22;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

