digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.siftUpFrom(I)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])  (LINE:121)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|LOOP_START\lLOOP:0: B:14:0x0001\-\>B:19:0x0020\l|0x0001: IF  (r0 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:16:0x0004  (LINE:122)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IGET  (r1 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[]) = (r5 I:kotlinx.coroutines.internal.ThreadSafeHeap) kotlinx.coroutines.internal.ThreadSafeHeap.a kotlinx.coroutines.internal.ThreadSafeHeapNode[]  (LINE:123)\l0x0006: INVOKE  (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0009: ARITH  (r2 I:int) = (r0 I:int) + (\-1 int)  (LINE:124)\l0x000b: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x000d: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r1 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r2 I:??[int, short, byte, char] A[D('j' int)])\l  (LINE:125)\l0x000f: INVOKE  (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0012: CHECK_CAST (r3 I:java.lang.Comparable) = (java.lang.Comparable) (r3 I:??[OBJECT, ARRAY]) \l0x0014: AGET  (r4 I:??[OBJECT, ARRAY]) = \l  (r1 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r0 I:??[int, short, byte, char])\l \l0x0016: INVOKE  (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0019: INVOKE  (r3 I:int) = (r3 I:java.lang.Comparable), (r4 I:java.lang.Object) type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001d|0x001d: IF  (r3 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:19:0x0020 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|LOOP_END\lLOOP:0: B:14:0x0001\-\>B:19:0x0020\l|0x0020: INVOKE  (r5 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r0 I:int), (r2 I:int A[D('j' int)]) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.swap(int, int):void A[MD:(int, int):void (m)] (LINE:126)\l0x0023: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)])  (LINE:127)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x001f|RETURN\l|0x001f: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|RETURN\l|0x0003: RETURN   \l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.internal.ThreadSafeHeap.siftUpFrom((r5 'this' I:kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x001f \-\> B:12:?, BACK_EDGE: B:19:0x0020 \-\> B:14:0x0001\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0024: r1 'a' [Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  0x000d\-0x0024: r2 'j' I\l  \-1 \-0x0024: r6 'i' I\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_20[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_14;
Node_21 -> Node_18;
Node_18 -> Node_12;
Node_20 -> Node_15;
Node_15 -> Node_12;
}

