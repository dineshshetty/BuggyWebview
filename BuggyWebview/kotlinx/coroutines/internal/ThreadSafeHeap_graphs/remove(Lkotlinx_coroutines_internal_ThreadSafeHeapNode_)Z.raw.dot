digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.remove(Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;)Z" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:73)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0001|0x0001: MONITOR_ENTER  (r6 I:??[OBJECT, ARRAY])  (LINE:167)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0002|0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_29 [shape=record,label="{29\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002a, blocks: (B:29:0x0003, B:32:0x000d, B:39:0x001e, B:40:0x0023, B:41:0x0024), top: B:47:0x0003 \}\lCatch: all \-\> 0x002a\l|0x0003: INVOKE  (r2 I:kotlinx.coroutines.internal.ThreadSafeHeap) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode)]) type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.getHeap():kotlinx.coroutines.internal.ThreadSafeHeap A[Catch: all \-\> 0x002a, MD:():kotlinx.coroutines.internal.ThreadSafeHeap\<?\> (m), TRY_ENTER] (LINE:74)\l0x0007: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0008: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|0x0009: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000d \l}"];
Node_31 [shape=record,label="{31\:\ 0x000b|0x000b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:75)\l0x000c: GOTO  \-\> 0x0028 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0028|0x0028: MONITOR_EXIT  (r6 I:??[OBJECT, ARRAY])  (LINE:74)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0029|RETURN\l|0x0029: RETURN  (r3 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000d|TryCatch #0 \{all \-\> 0x002a, blocks: (B:29:0x0003, B:32:0x000d, B:39:0x001e, B:40:0x0023, B:41:0x0024), top: B:47:0x0003 \}\lCatch: all \-\> 0x002a\l|0x000d: INVOKE  (r2 I:int) = (r7 I:kotlinx.coroutines.internal.ThreadSafeHeapNode A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode)]) type: INTERFACE call: kotlinx.coroutines.internal.ThreadSafeHeapNode.getIndex():int A[Catch: all \-\> 0x002a, MD:():int (m)] (LINE:77)\l0x0011: INVOKE  (r5 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[Catch: all \-\> 0x002a, MD:():boolean (m)] (LINE:78)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|0x0015: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0024 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0017|0x0017: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:168)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0018|0x0018: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:37:0x001b  (LINE:78)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001a|0x001a: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x001e \l}"];
Node_38 [shape=record,label="{38\:\ 0x001d|0x001d: GOTO  \-\> 0x0024 \l}"];
Node_39 [shape=record,label="{39\:\ 0x001e|TryCatch #0 \{all \-\> 0x002a, blocks: (B:29:0x0003, B:32:0x000d, B:39:0x001e, B:40:0x0023, B:41:0x0024), top: B:47:0x0003 \}\lCatch: all \-\> 0x002a\l|0x001e: NEW_INSTANCE  (r3 I:java.lang.AssertionError) =  java.lang.AssertionError A[Catch: all \-\> 0x002a]\l0x0020: INVOKE  (r3 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[Catch: all \-\> 0x002a, MD:():void (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|TryCatch #0 \{all \-\> 0x002a, blocks: (B:29:0x0003, B:32:0x000d, B:39:0x001e, B:40:0x0023, B:41:0x0024), top: B:47:0x0003 \}\lCatch: all \-\> 0x002a\l|0x0023: THROW  (r3 I:java.lang.Throwable) A[Catch: all \-\> 0x002a]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0024|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x002a, blocks: (B:29:0x0003, B:32:0x000d, B:39:0x001e, B:40:0x0023, B:41:0x0024), top: B:47:0x0003 \}\lCatch: all \-\> 0x002a\l|0x0024: INVOKE  (r6 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r2 I:int A[D('index' int)]) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.removeAtImpl(int):kotlinx.coroutines.internal.ThreadSafeHeapNode A[Catch: all \-\> 0x002a, MD:(int):T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> (m), TRY_LEAVE] (LINE:79)\l}"];
Node_44 [shape=record,label="{44\:\ 0x002a|ExcHandler: all \-\> 0x002a\l|0x002a: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x002a]\l}"];
Node_46 [shape=record,label="{46\:\ 0x002c|0x002c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.ThreadSafeHeap.remove((r6 'this' I:kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]), (r7 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> A[D('node' kotlinx.coroutines.internal.ThreadSafeHeapNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x0024 \-\> B:42:0x0028, CROSS_EDGE: B:40:0x0023 \-\> B:25:?, CROSS_EDGE: B:35:0x0018 \-\> B:37:0x001b, CROSS_EDGE: B:33:0x0015 \-\> B:41:0x0024, CROSS_EDGE: B:46:0x002c \-\> B:25:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x002a, blocks: (B:29:0x0003, B:32:0x000d, B:39:0x001e, B:40:0x0023, B:41:0x0024), top: B:47:0x0003 \}\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\lSIGNATURE: (TT;)Z\lDebug Info:\l  0x0018\-0x001b: r5 '$i$a$\-assert\-ThreadSafeHeap$remove$1$1' I\l  0x0001\-0x0023: r0 '$i$f$synchronized' I\l  \-1 \-0x0023: r7 'node' Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  0x0024\-0x0028: r0 '$i$f$synchronized' I\l  0x0003\-0x0028: r1 '$i$a$\-synchronized\-ThreadSafeHeap$remove$1' I\l  0x0011\-0x0028: r2 'index' I\l  0x002a\-0x002c: r0 '$i$f$synchronized' I\l  0x0024\-0x002c: r7 'node' Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_47;
Node_47 -> Node_29;
Node_47 -> Node_44;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_41;
Node_39 -> Node_40;
Node_40 -> Node_25;
Node_41 -> Node_42;
Node_44 -> Node_46;
Node_46 -> Node_25;
}

