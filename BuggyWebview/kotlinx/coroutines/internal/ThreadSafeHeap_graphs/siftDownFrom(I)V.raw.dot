digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.siftDownFrom(I)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)])  (LINE:130)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|LOOP_START\lLOOP:0: B:20:0x0001\-\>B:31:0x0042\l|0x0001: ARITH  (r1 I:int) = (r0 I:int) * (2 int)  (LINE:131)\l0x0003: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0005: INVOKE  (r2 I:int) = (r5 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)] (LINE:132)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|0x0009: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \< (r2 I:??[int, byte, short, char])  \-\> B:23:0x000c \l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|0x000c: IGET  (r2 I:T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[]) = (r5 I:kotlinx.coroutines.internal.ThreadSafeHeap) kotlinx.coroutines.internal.ThreadSafeHeap.a kotlinx.coroutines.internal.ThreadSafeHeapNode[]  (LINE:133)\l0x000e: INVOKE  (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0011: ARITH  (r3 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:134)\l0x0013: INVOKE  (r4 I:int) = (r5 I:kotlinx.coroutines.internal.ThreadSafeHeap) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.getSize():int A[MD:():int (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|0x0017: IF  (r3 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:28:0x002f \l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|0x0019: ARITH  (r3 I:int) = (r1 I:int A[D('j' int)]) + (1 int) \l0x001b: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r2 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r3 I:??[int, short, byte, char])\l \l0x001d: INVOKE  (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0020: CHECK_CAST (r3 I:java.lang.Comparable) = (java.lang.Comparable) (r3 I:??[OBJECT, ARRAY]) \l0x0022: AGET  (r4 I:??[OBJECT, ARRAY]) = \l  (r2 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l \l0x0024: INVOKE  (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0027: INVOKE  (r3 I:int) = (r3 I:java.lang.Comparable), (r4 I:java.lang.Object) type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x002b|0x002b: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:28:0x002f \l}"];
Node_27 [shape=record,label="{27\:\ 0x002d|0x002d: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x002f|0x002f: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r2 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r0 I:??[int, short, byte, char])\l  (LINE:135)\l0x0031: INVOKE  (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0034: CHECK_CAST (r3 I:java.lang.Comparable) = (java.lang.Comparable) (r3 I:??[OBJECT, ARRAY]) \l0x0036: AGET  (r4 I:??[OBJECT, ARRAY]) = \l  (r2 I:??[OBJECT, ARRAY][] A[D('a' kotlinx.coroutines.internal.ThreadSafeHeapNode[])])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l \l0x0038: INVOKE  (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x003b: INVOKE  (r3 I:int) = (r3 I:java.lang.Comparable), (r4 I:java.lang.Object) type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x003f|0x003f: IF  (r3 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:31:0x0042 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0042|LOOP_END\lLOOP:0: B:20:0x0001\-\>B:31:0x0042\l|0x0042: INVOKE  (r5 I:kotlinx.coroutines.internal.ThreadSafeHeap), (r0 I:int), (r1 I:int A[D('j' int)]) type: DIRECT call: kotlinx.coroutines.internal.ThreadSafeHeap.swap(int, int):void A[MD:(int, int):void (m)] (LINE:136)\l0x0045: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)])  (LINE:137)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0041|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0041|RETURN\l|0x0041: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000b|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|RETURN\l|0x000b: RETURN   \l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.internal.ThreadSafeHeap.siftDownFrom((r5 'this' I:kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0041 \-\> B:18:?, BACK_EDGE: B:31:0x0042 \-\> B:20:0x0001, CROSS_EDGE: B:26:0x002b \-\> B:28:0x002f, CROSS_EDGE: B:24:0x0017 \-\> B:28:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0046: r1 'j' I\l  0x0011\-0x0046: r2 'a' [Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  \-1 \-0x0046: r6 'i' I\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_32[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_33[style=dashed];
Node_31 -> Node_20;
Node_33 -> Node_30;
Node_30 -> Node_18;
Node_32 -> Node_22;
Node_22 -> Node_18;
}

