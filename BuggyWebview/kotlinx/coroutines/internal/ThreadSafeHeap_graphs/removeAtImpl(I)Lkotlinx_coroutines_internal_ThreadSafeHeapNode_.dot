digraph "CFG forkotlinx.coroutines.internal.ThreadSafeHeap.removeAtImpl(I)Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|r1 = false\l}"];
Node_34 [shape=record,label="{34\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_35 [shape=record,label="{35\:\ 0x0008}"];
Node_36 [shape=record,label="{36\:\ 0x000d|if (getSize() \<= 0) goto L10\l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|r0 = 1\l}"];
Node_39 [shape=record,label="{39\:\ 0x0012|PHI: r0 \l  PHI: (r0v4 int) = (r0v3 int), (r0v6 int) binds: [B:38:0x0011, B:37:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == 0) goto L7\l}"];
Node_41 [shape=record,label="{41\:\ 0x0015}"];
Node_42 [shape=record,label="{42\:\ 0x001a|throw new java.lang.AssertionError()\l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0011|r0 = 0\l}"];
Node_43 [shape=record,label="{43\:\ 0x001b|T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>[] r0 = r7.f223a\lkotlin.jvm.internal.Intrinsics.checkNotNull(r0)\lsetSize(getSize() + (\-1))\l}"];
Node_44 [shape=record,label="{44\:\ 0x002d|if (r8 \>= getSize()) goto L19\l}"];
Node_45 [shape=record,label="{45\:\ 0x002f|swap(r8, getSize())\lint r3 = (r8 + (\-1)) \/ 2\l}"];
Node_46 [shape=record,label="{46\:\ 0x003a|if (r8 \<= 0) goto L18\l}"];
Node_47 [shape=record,label="{47\:\ 0x003c|r5 = r0[r8]\lkotlin.jvm.internal.Intrinsics.checkNotNull(r5)\lr6 = r0[r3]\lkotlin.jvm.internal.Intrinsics.checkNotNull(r6)\l}"];
Node_48 [shape=record,label="{48\:\ 0x004c|if (((java.lang.Comparable) r5).compareTo(r6) \>= 0) goto L18\l}"];
Node_49 [shape=record,label="{49\:\ 0x004e|swap(r8, r3)\lsiftUpFrom(r3)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0055|siftDownFrom(r8)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0058|r3 = r0[getSize()]\lkotlin.jvm.internal.Intrinsics.checkNotNull(r3)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0065|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L27\l}"];
Node_53 [shape=record,label="{53\:\ 0x0067}"];
Node_54 [shape=record,label="{54\:\ 0x006c|if (r3.getHeap() != r7) goto L24\l}"];
Node_55 [shape=record,label="{55\:\ 0x006e|r1 = true\l}"];
Node_56 [shape=record,label="{56\:\ 0x006f|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v0 boolean), (r1v4 boolean) binds: [B:54:0x006c, B:55:0x006e] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L25\l}"];
Node_58 [shape=record,label="{58\:\ 0x0072}"];
Node_59 [shape=record,label="{59\:\ 0x0077|throw new java.lang.AssertionError()\l}"];
Node_60 [shape=record,label="{60\:\ 0x0078|r3.setHeap(null)\lr3.setIndex(\-1)\lr0[getSize()] = null\l}"];
Node_61 [shape=record,label="{61\:\ 0x0085|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{public final T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> kotlinx.coroutines.internal.ThreadSafeHeap.removeAtImpl((r7v0 'this' kotlinx.coroutines.internal.ThreadSafeHeap\<T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]), (r8v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:59:0x0077 \-\> B:32:?, CROSS_EDGE: B:61:0x0085 \-\> B:32:?, CROSS_EDGE: B:54:0x006c \-\> B:56:0x006f, CROSS_EDGE: B:52:0x0065 \-\> B:60:0x0078, CROSS_EDGE: B:50:0x0055 \-\> B:51:0x0058, CROSS_EDGE: B:46:0x003a \-\> B:50:0x0055, CROSS_EDGE: B:44:0x002d \-\> B:51:0x0058, CROSS_EDGE: B:38:0x0011 \-\> B:39:0x0012, CROSS_EDGE: B:34:0x0006 \-\> B:43:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\>]\lSIGNATURE: (I)TT;\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_43;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_43[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_32;
Node_38 -> Node_39;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_51;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_50;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_60;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_56;
Node_56 -> Node_58;
Node_56 -> Node_60[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_32;
Node_60 -> Node_61;
Node_61 -> Node_32;
}

