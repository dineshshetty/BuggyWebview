digraph "CFG forkotlinx.coroutines.internal.LockFreeTaskQueue.close()V" {
subgraph cluster_Region_1027224382 {
label = "R(1:(2:2|(2:(1:6)|(1:4))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_41225082 {
label = "LOOP:0: (2:2|(2:(1:6)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_1810836809 {
label = "R(2:2|(2:(1:6)|(1:4)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|LOOP_START\lLOOP:0: B:11:0x0002\-\>B:14:0x000f\l|kotlinx.coroutines.internal.LockFreeTaskQueueCore kotlinx.coroutines.internal.LockFreeTaskQueueCore r2 = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) r6._cur\l}"];
subgraph cluster_Region_1886690564 {
label = "R(2:(1:6)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_389444546 {
label = "IF [B:12:0x000c] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000c|if (r2.close() == true) goto L5\l}"];
subgraph cluster_Region_1262190640 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_431578870 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000f|LOOP_END\lLOOP:0: B:11:0x0002\-\>B:14:0x000f\l|androidx.concurrent.futures.C0125xc40028dd.m112m(kotlinx.coroutines.internal.LockFreeTaskQueue._cur$FU, r6, r2, r2.next())\l}"];
}
}
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000e|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.LockFreeTaskQueue.close((r6v0 'this' kotlinx.coroutines.internal.LockFreeTaskQueue\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x000f \-\> B:11:0x0002\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_12 -> Node_14[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_9;
Node_14 -> Node_11;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_15 -> Node_13;
}

