digraph "CFG forkotlinx.coroutines.internal.ThreadState.append(Lkotlinx\/coroutines\/ThreadContextElement;Ljava\/lang\/Object;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object[]) = (r3 I:kotlinx.coroutines.internal.ThreadState) kotlinx.coroutines.internal.ThreadState.values java.lang.Object[]  (LINE:21)\l0x0002: IGET  (r1 I:int) = (r3 I:kotlinx.coroutines.internal.ThreadState) kotlinx.coroutines.internal.ThreadState.i int \l0x0004: APUT  (r0 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r5 I:??[OBJECT, ARRAY] A[D('value' java.lang.Object)]) \l0x0006: IGET  (r0 I:kotlinx.coroutines.ThreadContextElement\<java.lang.Object\>[]) = (r3 I:kotlinx.coroutines.internal.ThreadState) kotlinx.coroutines.internal.ThreadState.elements kotlinx.coroutines.ThreadContextElement[]  (LINE:22)\l0x0008: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x000a: IPUT  (r2 I:int), (r3 I:kotlinx.coroutines.internal.ThreadState) kotlinx.coroutines.internal.ThreadState.i int \l0x000c: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r1 I:??[int, short, byte, char])\l  (r4 I:??[OBJECT, ARRAY] A[D('element' kotlinx.coroutines.ThreadContextElement)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|RETURN\l|0x000e: RETURN    (LINE:23)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.ThreadState.append((r3 'this' I:kotlinx.coroutines.internal.ThreadState A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.ThreadContextElement\<?\> A[D('element' kotlinx.coroutines.ThreadContextElement), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r4 'element' Lkotlinx\/coroutines\/ThreadContextElement;\l  \-1 \-0x000e: r5 'value' Ljava\/lang\/Object;\lSIGNATURE: (Lkotlinx\/coroutines\/ThreadContextElement\<*\>;Ljava\/lang\/Object;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

