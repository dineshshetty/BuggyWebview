digraph "CFG forkotlinx.coroutines.internal.ThreadState.restore(Lkotlin\/coroutines\/CoroutineContext;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.ThreadContextElement\<java.lang.Object\>[]) = (r4 I:kotlinx.coroutines.internal.ThreadState) kotlinx.coroutines.internal.ThreadState.elements kotlinx.coroutines.ThreadContextElement[]  (LINE:26)\l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:15:0x001a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|LOOP_START\lLOOP:0: B:13:0x0007\-\>B:14:0x0018\l|0x0007: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x000a: IGET  (r2 I:kotlinx.coroutines.ThreadContextElement\<java.lang.Object\>[]) = (r4 I:kotlinx.coroutines.internal.ThreadState) kotlinx.coroutines.internal.ThreadState.elements kotlinx.coroutines.ThreadContextElement[]  (LINE:27)\l0x000c: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x000e: INVOKE  (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0011: IGET  (r3 I:java.lang.Object[]) = (r4 I:kotlinx.coroutines.internal.ThreadState) kotlinx.coroutines.internal.ThreadState.values java.lang.Object[] \l0x0013: AGET  (r3 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x0015: INVOKE  \l  (r2 I:kotlinx.coroutines.ThreadContextElement)\l  (r5 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r3 I:java.lang.Object)\l type: INTERFACE call: kotlinx.coroutines.ThreadContextElement.restoreThreadContext(kotlin.coroutines.CoroutineContext, java.lang.Object):void A[MD:(kotlin.coroutines.CoroutineContext, S):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|LOOP_END\lLOOP:0: B:13:0x0007\-\>B:14:0x0018\l|0x0018: IF  (r0 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:13:0x0007  (LINE:26)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001a|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN   A[SYNTHETIC] (LINE:29)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: RETURN    (LINE:29)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.ThreadState.restore((r4 'this' I:kotlinx.coroutines.internal.ThreadState A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0018 \-\> B:13:0x0007, CROSS_EDGE: B:12:0x0005 \-\> B:15:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x001a: r1 'i' I\l  \-1 \-0x001a: r5 'context' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_13;
Node_14 -> Node_16[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_10;
}

