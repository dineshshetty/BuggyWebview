digraph "CFG forkotlinx.coroutines.internal.LimitedDispatcherKt.checkParallelism(I)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|r0 = true\l}"];
Node_13 [shape=record,label="{13\:\ 0x0001|if (r3 \< 1) goto L3\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|r0 = false\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v5 boolean) binds: [B:13:0x0001, B:15:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008}"];
Node_19 [shape=record,label="{19\:\ 0x001c|throw new java.lang.IllegalArgumentException(kotlin.jvm.internal.Intrinsics.stringPlus(\"Expected positive parallelism level, but got \", java.lang.Integer.valueOf(r3)).toString())\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.internal.LimitedDispatcherKt.checkParallelism((r3v0 '$this$checkParallelism' int A[D('$this$checkParallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001c \-\> B:11:?, CROSS_EDGE: B:13:0x0001 \-\> B:16:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

