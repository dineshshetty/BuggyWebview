digraph "CFG forkotlinx.coroutines.internal.LimitedDispatcherKt.checkParallelism(I)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:106)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0001|0x0001: IF  (r3 I:??[int, byte, short, char] A[D('$this$checkParallelism' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:15:0x0004 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0008 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|RETURN\l|0x0007: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:108)\l0x0009: INVOKE  (r1 I:java.lang.Integer) = (r3 I:int A[D('$this$checkParallelism' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:106)\l0x000d: CONST_STR  (r2 I:java.lang.String) =  \"Expected positive parallelism level, but got \" \l0x000f: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-LimitedDispatcherKt$checkParallelism$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0013: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0015: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0019: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|0x001c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.internal.LimitedDispatcherKt.checkParallelism((r3 I:int A[D('$this$checkParallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001c \-\> B:11:?, CROSS_EDGE: B:13:0x0001 \-\> B:16:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0013: r0 '$i$a$\-require\-LimitedDispatcherKt$checkParallelism$1' I\l  \-1 \-0x001c: r3 '$this$checkParallelism' I\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

