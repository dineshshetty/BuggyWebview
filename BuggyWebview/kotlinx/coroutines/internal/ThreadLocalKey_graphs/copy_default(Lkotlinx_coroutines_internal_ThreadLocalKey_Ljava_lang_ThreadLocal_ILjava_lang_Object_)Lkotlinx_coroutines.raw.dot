digraph "CFG forkotlinx.coroutines.internal.ThreadLocalKey.copy$default(Lkotlinx\/coroutines\/internal\/ThreadLocalKey;Ljava\/lang\/ThreadLocal;ILjava\/lang\/Object;)Lkotlinx\/coroutines\/internal\/ThreadLocalKey;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r2 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0006 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IGET  (r1 I:java.lang.ThreadLocal\<?\>) = (r0 I:kotlinx.coroutines.internal.ThreadLocalKey) kotlinx.coroutines.internal.ThreadLocalKey.threadLocal java.lang.ThreadLocal \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r0 I:kotlinx.coroutines.internal.ThreadLocalKey) = (r0 I:kotlinx.coroutines.internal.ThreadLocalKey), (r1 I:java.lang.ThreadLocal) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadLocalKey.copy(java.lang.ThreadLocal):kotlinx.coroutines.internal.ThreadLocalKey A[MD:(java.lang.ThreadLocal\<?\>):kotlinx.coroutines.internal.ThreadLocalKey (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:kotlinx.coroutines.internal.ThreadLocalKey) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlinx.coroutines.internal.ThreadLocalKey kotlinx.coroutines.internal.ThreadLocalKey.copy$default((r0 I:kotlinx.coroutines.internal.ThreadLocalKey A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.ThreadLocal A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0006\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

