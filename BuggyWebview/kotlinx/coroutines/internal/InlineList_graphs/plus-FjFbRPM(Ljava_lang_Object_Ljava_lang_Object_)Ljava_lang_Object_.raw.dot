digraph "CFG forkotlinx.coroutines.internal.InlineList.plus\-FjFbRPM(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:20)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0015 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:50)\l0x0007: INSTANCE_OF  (r1 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) java.util.List  (LINE:20)\l0x0009: ARITH  (r0 I:??[int, boolean] A[D('$i$a$\-assert\-InlineList$plus$1' int)]) = (r1 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x000e \l}"];
Node_29 [shape=record,label="{29\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0010: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0015|0x0015: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('arg0' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x001c  (LINE:22)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|0x0017: INVOKE  (r0 I:java.lang.Object) = (r3 I:java.lang.Object A[D('element' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.internal.InlineList.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<E\>:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|0x0046: RETURN  (r0 I:java.lang.Object A[D('list' java.util.ArrayList)]) A[SYNTHETIC] (LINE:21)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|0x001c: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('arg0' java.lang.Object)]) java.util.ArrayList  (LINE:23)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001e|0x001e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0035 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0020|0x0020: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('arg0' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x002d  (LINE:24)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0022|0x0022: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('arg0' java.lang.Object)]) \l0x0023: CHECK_CAST (r0 I:java.util.ArrayList) = (java.util.ArrayList) (r0 I:??[OBJECT, ARRAY]) \l0x0025: INVOKE  (r0 I:java.util.ArrayList), (r3 I:java.lang.Object A[D('element' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0028: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.lang.Object A[D('arg0' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.internal.InlineList.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<E\>:(java.lang.Object):java.lang.Object (m)] (LINE:25)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x0046: RETURN  (r0 I:java.lang.Object A[D('list' java.util.ArrayList)]) A[SYNTHETIC] (LINE:21)\l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|0x002d: NEW_INSTANCE  (r0 I:java.lang.NullPointerException) =  java.lang.NullPointerException  (LINE:24)\l0x002f: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type java.util.ArrayList\<E of kotlinx.coroutines.internal.InlineList\>\{ kotlin.collections.TypeAliasesKt.ArrayList\<E of kotlinx.coroutines.internal.InlineList\> \}\" \l0x0031: INVOKE  (r0 I:java.lang.NullPointerException), (r1 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0035|0x0035: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:28)\l0x0037: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0038: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x003b: INVOKE  (r0 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r2 I:java.lang.Object A[D('arg0' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:29)\l0x003e: INVOKE  (r0 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r3 I:java.lang.Object A[D('element' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:30)\l0x0041: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.lang.Object A[D('list' java.util.ArrayList)]) type: STATIC call: kotlinx.coroutines.internal.InlineList.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<E\>:(java.lang.Object):java.lang.Object (m)] (LINE:31)\l0x0045: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('list' java.util.ArrayList)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0046|RETURN\lORIG_RETURN\l|0x0046: RETURN  (r0 I:java.lang.Object A[D('list' java.util.ArrayList)])  (LINE:21)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Object kotlinx.coroutines.internal.InlineList.plus\-FjFbRPM((r2 I:java.lang.Object A[D('arg0' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x0046 \-\> B:23:?, CROSS_EDGE: B:37:0x0022 \-\> B:41:0x0046, CROSS_EDGE: B:39:0x0034 \-\> B:23:?, CROSS_EDGE: B:40:0x0035 \-\> B:41:0x0046, CROSS_EDGE: B:25:0x0004 \-\> B:32:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0009: r0 '$i$a$\-assert\-InlineList$plus$1' I\l  0x003b\-0x0046: r0 'list' Ljava\/util\/ArrayList;\l  \-1 \-0x0046: r2 'arg0' Ljava\/lang\/Object;\l  \-1 \-0x0046: r3 'element' Ljava\/lang\/Object;\lTYPE_VARS: [E]\lSIGNATURE: (Ljava\/lang\/Object;TE;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_32[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_23;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_42;
Node_42 -> Node_23;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_40;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_43;
Node_43 -> Node_23;
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_40 -> Node_41;
Node_41 -> Node_23;
}

