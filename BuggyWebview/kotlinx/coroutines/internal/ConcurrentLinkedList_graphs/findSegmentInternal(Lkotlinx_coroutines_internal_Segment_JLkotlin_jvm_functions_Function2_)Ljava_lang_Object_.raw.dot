digraph "CFG forkotlinx.coroutines.internal.ConcurrentLinkedListKt.findSegmentInternal(Lkotlinx\/coroutines\/internal\/Segment;JLkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/Object;" {
Node_66 [shape=record,label="{66\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_68 [shape=record,label="{68\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$findSegmentInternal' kotlinx.coroutines.internal.Segment)])  (LINE:25)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0002|LOOP_START\lLOOP:0: B:69:0x0002\-\>B:95:0x0002\l|0x0002: INVOKE  (r2 I:long) = (r1 I:kotlinx.coroutines.internal.Segment A[D('cur' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getId():long A[MD:():long (m)] (LINE:26)\l0x0006: CMP_L  (r4 I:int) = (r2 I:long), (r9 I:long A[D('id' long)]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0008|0x0008: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:76:0x0016 \l}"];
Node_71 [shape=record,label="{71\:\ 0x000a|0x000a: INVOKE  (r2 I:boolean) = (r1 I:kotlinx.coroutines.internal.Segment A[D('cur' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getRemoved():boolean A[MD:():boolean (m)]\l}"];
Node_72 [shape=record,label="{72\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:92:0x0011 \l}"];
Node_92 [shape=record,label="{92\:\ 0x0011|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0011|0x0011: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.lang.Object A[D('cur' kotlinx.coroutines.internal.Segment)]) type: STATIC call: kotlinx.coroutines.internal.SegmentOrClosed.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<S extends kotlinx.coroutines.internal.Segment\<S\>\>:(java.lang.Object):java.lang.Object (m)] (LINE:38)\l}"];
Node_75 [shape=record,label="{75\:\ 0x0015|RETURN\l|0x0015: RETURN  (r2 I:java.lang.Object) \l}"];
Node_67 [shape=record,label="{67\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_76 [shape=record,label="{76\:\ 0x0016|0x0016: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.Segment)])  (LINE:27)\l0x0017: CHECK_CAST (r2 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r2 I:??[OBJECT, ARRAY]) \l0x0019: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001a: INVOKE  (r4 I:java.lang.Object) = \l  (r2 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode):java.lang.Object A[MD:(kotlinx.coroutines.internal.ConcurrentLinkedListNode):java.lang.Object (m)] (LINE:243)\l0x001e: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: INVOKE  (r6 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListKt.access$getCLOSED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:244)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0023|0x0023: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it$iv' java.lang.Object)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x002f \l}"];
Node_80 [shape=record,label="{80\:\ 0x002f|0x002f: MOVE  (r6 I:??[OBJECT, ARRAY] A[D('$i$a$\-nextOrIfClosed\-ConcurrentLinkedListKt$findSegmentInternal$next$1' int)]) = (r4 I:??[OBJECT, ARRAY] A[D('it$iv' java.lang.Object)])  (LINE:247)\l0x0030: CHECK_CAST (r6 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r6 I:??[OBJECT, ARRAY]) \l0x0035: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) = (r6 I:??[OBJECT, ARRAY])  (LINE:27)\l0x0036: CHECK_CAST (r2 I:kotlinx.coroutines.internal.Segment) = (kotlinx.coroutines.internal.Segment) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x0038|0x0038: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' kotlinx.coroutines.internal.Segment)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:91:0x003c  (LINE:28)\l}"];
Node_91 [shape=record,label="{91\:\ 0x003c|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x003c|0x003c: INVOKE  (r3 I:long) = (r1 I:kotlinx.coroutines.internal.Segment A[D('cur' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getId():long A[MD:():long (m)] (LINE:32)\l0x0040: CONST  (r5 I:??[long, double]) = (1 ??[long, double]) \l0x0042: ARITH  (r3 I:long) = (r3 I:long) + (r5 I:long) \l0x0043: INVOKE  (r3 I:java.lang.Long) = (r3 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l0x0047: INVOKE  (r3 I:java.lang.Object) = \l  (r11 I:kotlin.jvm.functions.Function2 A[D('createNewSegment' kotlin.jvm.functions.Function2)])\l  (r3 I:java.lang.Object)\l  (r1 I:java.lang.Object A[D('cur' kotlinx.coroutines.internal.Segment)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x004b: CHECK_CAST (r3 I:kotlinx.coroutines.internal.Segment) = (kotlinx.coroutines.internal.Segment) (r3 I:??[OBJECT, ARRAY]) \l0x004d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('newTail' kotlinx.coroutines.internal.Segment)])  (LINE:33)\l0x004e: CHECK_CAST (r4 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r4 I:??[OBJECT, ARRAY]) \l0x0050: INVOKE  (r4 I:boolean) = \l  (r1 I:kotlinx.coroutines.internal.Segment A[D('cur' kotlinx.coroutines.internal.Segment)])\l  (r4 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode)\l type: VIRTUAL call: kotlinx.coroutines.internal.Segment.trySetNext(kotlinx.coroutines.internal.ConcurrentLinkedListNode):boolean A[MD:(N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>):boolean (m)]\l}"];
Node_84 [shape=record,label="{84\:\ 0x0054|0x0054: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x0002 \l}"];
Node_93 [shape=record,label="{93\:\ 0x0056|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0056|0x0056: INVOKE  (r4 I:boolean) = (r1 I:kotlinx.coroutines.internal.Segment A[D('cur' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getRemoved():boolean A[MD:():boolean (m)] (LINE:34)\l}"];
Node_86 [shape=record,label="{86\:\ 0x005a|0x005a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x005f \l}"];
Node_87 [shape=record,label="{87\:\ 0x005c|0x005c: INVOKE  (r1 I:kotlinx.coroutines.internal.Segment A[D('cur' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.remove():void A[MD:():void (m)]\l}"];
Node_88 [shape=record,label="{88\:\ 0x005f|0x005f: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.Segment)]) = (r3 I:??[OBJECT, ARRAY] A[D('newTail' kotlinx.coroutines.internal.Segment)])  (LINE:35)\l}"];
Node_97 [shape=record,label="{97\:\ 0x0002|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0002|LOOP_END\lSYNTHETIC\lLOOP:0: B:69:0x0002\-\>B:95:0x0002\l}"];
Node_96 [shape=record,label="{96\:\ 0x0002|SYNTHETIC\l}"];
Node_94 [shape=record,label="{94\:\ 0x003a|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x003a|0x003a: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.Segment)]) = (r2 I:??[OBJECT, ARRAY] A[D('next' kotlinx.coroutines.internal.Segment)])  (LINE:29)\l}"];
Node_98 [shape=record,label="{98\:\ 0x0002|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0025|SYNTHETIC\l}"];
Node_78 [shape=record,label="{78\:\ 0x0025|0x0025: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:245)\l0x0026: INVOKE  (r7 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListKt.access$getCLOSED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:27)\l0x002a: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.internal.SegmentOrClosed.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<S extends kotlinx.coroutines.internal.Segment\<S\>\>:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_79 [shape=record,label="{79\:\ 0x002e|RETURN\l|0x002e: RETURN  (r7 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{private static final java.lang.Object kotlinx.coroutines.internal.ConcurrentLinkedListKt.findSegmentInternal((r8 I:S extends kotlinx.coroutines.internal.Segment\<S\> A[D('$this$findSegmentInternal' kotlinx.coroutines.internal.Segment), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[D('id' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function2\<? super java.lang.Long, ? super S extends kotlinx.coroutines.internal.Segment\<S\>, ? extends S extends kotlinx.coroutines.internal.Segment\<S\>\> A[D('createNewSegment' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:79:0x002e \-\> B:67:?, BACK_EDGE: B:82:0x003a \-\> B:69:0x0002, BACK_EDGE: B:88:0x005f \-\> B:69:0x0002, CROSS_EDGE: B:86:0x005a \-\> B:88:0x005f, BACK_EDGE: B:84:0x0054 \-\> B:69:0x0002, CROSS_EDGE: B:70:0x0008 \-\> B:76:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends kotlinx.coroutines.internal.Segment\<S\>]\lSIGNATURE: \<S:Lkotlinx\/coroutines\/internal\/Segment\<TS;\>;\>(TS;JLkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Long;\-TS;+TS;\>;)Ljava\/lang\/Object;\lDebug Info:\l  0x0026\-0x002f: r6 '$i$a$\-nextOrIfClosed\-ConcurrentLinkedListKt$findSegmentInternal$next$1' I\l  0x001e\-0x0033: r4 'it$iv' Ljava\/lang\/Object;\l  0x001f\-0x0033: r5 '$i$a$\-let\-ConcurrentLinkedListNode$nextOrIfClosed$1$iv' I\l  0x0019\-0x0035: r2 'this_$iv' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\l  0x001a\-0x0035: r3 '$i$f$nextOrIfClosed' I\l  0x0038\-0x0060: r2 'next' Lkotlinx\/coroutines\/internal\/Segment;\l  0x004d\-0x0060: r3 'newTail' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0001\-0x0061: r0 '$i$f$findSegmentInternal' I\l  0x0002\-0x0061: r1 'cur' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0061\-0x0061: r2 'next' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0061\-0x0061: r3 'newTail' Lkotlinx\/coroutines\/internal\/Segment;\l  \-1 \-0x0061: r8 '$this$findSegmentInternal' Lkotlinx\/coroutines\/internal\/Segment;\l  \-1 \-0x0061: r9 'id' J\l  \-1 \-0x0061: r11 'createNewSegment' Lkotlin\/jvm\/functions\/Function2;\l}"];
MethodNode -> Node_66;Node_66 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_76;
Node_71 -> Node_72;
Node_72 -> Node_76[style=dashed];
Node_72 -> Node_92;
Node_92 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_67;
Node_76 -> Node_77;
Node_77 -> Node_80;
Node_77 -> Node_90[style=dashed];
Node_80 -> Node_81;
Node_81 -> Node_91;
Node_81 -> Node_94[style=dashed];
Node_91 -> Node_83;
Node_83 -> Node_84;
Node_84 -> Node_93[style=dashed];
Node_84 -> Node_96;
Node_93 -> Node_85;
Node_85 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_88;
Node_87 -> Node_88;
Node_88 -> Node_97;
Node_97 -> Node_95;
Node_95 -> Node_69;
Node_96 -> Node_95;
Node_94 -> Node_82;
Node_82 -> Node_98;
Node_98 -> Node_95;
Node_90 -> Node_78;
Node_78 -> Node_79;
Node_79 -> Node_67;
}

