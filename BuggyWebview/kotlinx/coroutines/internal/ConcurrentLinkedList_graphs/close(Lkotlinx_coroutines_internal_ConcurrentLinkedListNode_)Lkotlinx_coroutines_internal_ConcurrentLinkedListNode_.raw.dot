digraph "CFG forkotlinx.coroutines.internal.ConcurrentLinkedListKt.close(Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;)Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;" {
Node_40 [shape=record,label="{40\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:82)\l0x0001: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('cur' java.lang.Object)]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$close' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0002|LOOP_START\lLOOP:0: B:43:0x0002\-\>B:57:0x0002\l|0x0003: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('cur' java.lang.Object)])  (LINE:84)\l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  (r3 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode):java.lang.Object A[MD:(kotlinx.coroutines.internal.ConcurrentLinkedListNode):java.lang.Object (m)] (LINE:284)\l0x0009: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: INVOKE  (r5 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListKt.access$getCLOSED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:285)\l}"];
Node_44 [shape=record,label="{44\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it$iv' java.lang.Object)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0012 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0012|0x0012: MOVE  (r5 I:??[OBJECT, ARRAY] A[D('$i$a$\-nextOrIfClosed\-ConcurrentLinkedListKt$close$next$1' int)]) = (r3 I:??[OBJECT, ARRAY] A[D('it$iv' java.lang.Object)])  (LINE:288)\l0x0013: CHECK_CAST (r5 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r5 I:??[OBJECT, ARRAY]) \l0x0018: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) = (r5 I:??[OBJECT, ARRAY])  (LINE:84)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0019|0x0019: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0022  (LINE:85)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0022|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0022|0x0022: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('cur' java.lang.Object)]) = (r1 I:??[OBJECT, ARRAY] A[D('next' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])  (LINE:88)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0002|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x0002|LOOP_END\lSYNTHETIC\lLOOP:0: B:43:0x0002\-\>B:57:0x0002\l}"];
Node_56 [shape=record,label="{56\:\ 0x001b|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x001b|0x001b: INVOKE  (r2 I:boolean) = (r0 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('cur' java.lang.Object)]) type: VIRTUAL call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.markAsClosed():boolean A[MD:():boolean (m)] (LINE:86)\l}"];
Node_50 [shape=record,label="{50\:\ 0x001f|0x001f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0002 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0021|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> A[D('cur' java.lang.Object)]) \l}"];
Node_41 [shape=record,label="{41\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ 0x0002|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0010|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0010|0x0010: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:286)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> A[D('cur' java.lang.Object)])  (LINE:84)\l}"];
MethodNode[shape=record,label="{public static final N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> kotlinx.coroutines.internal.ConcurrentLinkedListKt.close((r6 I:N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\> A[D('$this$close' kotlinx.coroutines.internal.ConcurrentLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:50:0x001f \-\> B:43:0x0002, CROSS_EDGE: B:51:0x0021 \-\> B:41:?, BACK_EDGE: B:52:0x0022 \-\> B:43:0x0002\lINLINE_NOT_NEEDED\lTYPE_VARS: [N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>]\lSIGNATURE: \<N:Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode\<TN;\>;\>(TN;)TN;\lDebug Info:\l  0x0011\-0x0012: r5 '$i$a$\-nextOrIfClosed\-ConcurrentLinkedListKt$close$next$1' I\l  0x0009\-0x0016: r3 'it$iv' Ljava\/lang\/Object;\l  0x000a\-0x0016: r4 '$i$a$\-let\-ConcurrentLinkedListNode$nextOrIfClosed$1$iv' I\l  0x0004\-0x0018: r1 'this_$iv' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\l  0x0005\-0x0018: r2 '$i$f$nextOrIfClosed' I\l  0x0019\-0x0023: r1 'next' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\l  0x0001\-0x0023: r0 'cur' Ljava\/lang\/Object;\l  \-1 \-0x0023: r6 '$this$close' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\l}"];
MethodNode -> Node_40;Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_47;
Node_44 -> Node_54[style=dashed];
Node_47 -> Node_48;
Node_48 -> Node_53;
Node_48 -> Node_56[style=dashed];
Node_53 -> Node_52;
Node_52 -> Node_58;
Node_58 -> Node_57;
Node_57 -> Node_43;
Node_56 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_55[style=dashed];
Node_50 -> Node_59;
Node_55 -> Node_51;
Node_51 -> Node_41;
Node_59 -> Node_57;
Node_54 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_41;
}

