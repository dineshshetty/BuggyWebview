digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.unwrapImpl(Ljava\/lang\/Throwable;)Ljava\/lang\/Throwable;" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Throwable) = (r9 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getCause():java.lang.Throwable A[MD:():java.lang.Throwable (c)] (LINE:170)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cause' java.lang.Throwable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0032  (LINE:172)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: INVOKE  (r1 I:java.lang.Class) = (r0 I:java.lang.Object A[D('cause' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x000a: INVOKE  (r2 I:java.lang.Class) = (r9 I:java.lang.Object A[D('exception' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x000e: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Object), (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0015 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: INVOKE  (r1 I:java.lang.StackTraceElement[]) = (r9 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getStackTrace():java.lang.StackTraceElement[] A[MD:():java.lang.StackTraceElement[] (c)] (LINE:176)\l0x0019: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001a: ARRAY_LENGTH  (r3 I:int) = (r1 I:??[] A[D('$this$any$iv' java.lang.Object[])])  (LINE:239)\l0x001b: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|LOOP_START\lLOOP:0: B:27:0x001d\-\>B:29:0x0029\l|0x001d: IF  (r5 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:37:0x002e \l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|0x001f: AGET  (r6 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][] A[D('$this$any$iv' java.lang.Object[])]), (r5 I:??[int, short, byte, char]) \l0x0021: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0023: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0024: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: INVOKE  (r7 I:boolean A[D('it' java.lang.StackTraceElement)]) = (r7 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.isArtificial(java.lang.StackTraceElement):boolean A[MD:(java.lang.StackTraceElement):boolean (m)] (LINE:176)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|LOOP_END\lLOOP:0: B:27:0x001d\-\>B:29:0x0029\l|0x0029: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.StackTraceElement)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x001d \l}"];
Node_36 [shape=record,label="{36\:\ 0x002b|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002b|0x002b: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|0x002e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0031  (LINE:176)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0030|RETURN\l|0x0030: RETURN  (r0 I:E extends java.lang.Throwable A[D('cause' java.lang.Throwable)])  (LINE:178)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0031|RETURN\l|0x0031: RETURN  (r9 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable)])  (LINE:180)\l}"];
Node_37 [shape=record,label="{37\:\ 0x002e|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0032|RETURN\l|0x0032: RETURN  (r9 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable)])  (LINE:173)\l}"];
MethodNode[shape=record,label="{public static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.unwrapImpl((r9 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0029 \-\> B:27:0x001d, CROSS_EDGE: B:34:0x0031 \-\> B:20:?, CROSS_EDGE: B:27:0x001d \-\> B:32:0x002e, CROSS_EDGE: B:35:0x0032 \-\> B:20:?, CROSS_EDGE: B:22:0x0004 \-\> B:35:0x0032\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x0029: r7 'it' Ljava\/lang\/StackTraceElement;\l  0x0025\-0x0029: r8 '$i$a$\-any\-StackTraceRecoveryKt$unwrapImpl$1' I\l  0x0021\-0x002d: r6 'element$iv' Ljava\/lang\/Object;\l  0x0019\-0x002e: r1 '$this$any$iv' [Ljava\/lang\/Object;\l  0x001a\-0x002e: r2 '$i$f$any' I\l  0x0004\-0x0032: r0 'cause' Ljava\/lang\/Throwable;\l  \-1 \-0x0032: r9 'exception' Ljava\/lang\/Throwable;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)TE;\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_35;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_35[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_37;
Node_28 -> Node_29;
Node_29 -> Node_27;
Node_29 -> Node_36[style=dashed];
Node_36 -> Node_30;
Node_30 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_20;
Node_34 -> Node_20;
Node_37 -> Node_32;
Node_35 -> Node_20;
}

