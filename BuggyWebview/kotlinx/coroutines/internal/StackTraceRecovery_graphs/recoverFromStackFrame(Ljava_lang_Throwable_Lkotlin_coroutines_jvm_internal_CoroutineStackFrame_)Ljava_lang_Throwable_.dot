digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.recoverFromStackFrame(Ljava\/lang\/Throwable;Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Ljava\/lang\/Throwable;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.Pair r0 = causeAndStacktrace(r5)\ljava.lang.Throwable r1 = (java.lang.Throwable) r0.component1()\ljava.lang.StackTraceElement[] r0 = (java.lang.StackTraceElement[]) r0.component2()\ljava.lang.Throwable r2 = tryCopyAndVerify(r1)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0014|if (r2 != null) goto L5\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|RETURN\l|return r5\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|java.util.ArrayDeque r3 = createStackTrace(r6)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001f|if (r3.isEmpty() == false) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|RETURN\l|return r5\l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|if (r1 == r5) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|mergeRecoveredTraces(r0, r3)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0027}"];
Node_23 [shape=record,label="{23\:\ 0x002b|RETURN\l|return (E) createFinalException(r1, r2, r3)\l}"];
MethodNode[shape=record,label="{public static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.recoverFromStackFrame((r5v0 E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0021 \-\> B:13:?, CROSS_EDGE: B:23:0x002b \-\> B:13:?, CROSS_EDGE: B:20:0x0022 \-\> B:22:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)TE;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_13;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

