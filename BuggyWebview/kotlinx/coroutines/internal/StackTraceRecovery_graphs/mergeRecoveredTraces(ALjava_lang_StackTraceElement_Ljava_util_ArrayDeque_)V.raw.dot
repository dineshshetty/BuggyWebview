digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.mergeRecoveredTraces([Ljava\/lang\/StackTraceElement;Ljava\/util\/ArrayDeque;)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('recoveredStacktrace' java.lang.StackTraceElement[])])  (LINE:145)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[] A[D('$this$indexOfFirst$iv' java.lang.Object[])])  (LINE:233)\l0x0003: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0004|LOOP_START\lLOOP:0: B:25:0x0004\-\>B:28:0x0011\l|0x0004: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0005|0x0005: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:41:0x0014 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0007|0x0007: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x000a: AGET  (r6 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('$this$indexOfFirst$iv' java.lang.Object[])])\l  (r5 I:??[int, short, byte, char] A[D('index$iv' int)])\l  (LINE:234)\l0x000c: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: INVOKE  (r6 I:boolean A[D('it' java.lang.StackTraceElement)]) = (r6 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.isArtificial(java.lang.StackTraceElement):boolean A[MD:(java.lang.StackTraceElement):boolean (m)] (LINE:145)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|LOOP_END\lLOOP:0: B:25:0x0004\-\>B:28:0x0011\l|0x0011: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.StackTraceElement)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0004 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0015|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|0x0015: ARITH  (r5 I:int) = (r5 I:int) + (1 int)  (LINE:145)\l0x0017: ARRAY_LENGTH  (r0 I:int) = (r8 I:??[] A[D('recoveredStacktrace' java.lang.StackTraceElement[])])  (LINE:146)\l0x0018: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: IF  (r5 I:??[int, byte, short, char] A[D('startIndex' int)]) \> (r0 I:??[int, byte, short, char] A[D('lastFrameIndex' int)])  \-\> B:39:0x0037  (LINE:147)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastFrameIndex' int)]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|LOOP_START\lLOOP:1: B:34:0x001d\-\>B:38:0x0035\l|0x001d: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: ARITH  (r1 I:int) = (r1 I:int) + (r4 I:int) \l0x001f: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r8 I:??[OBJECT, ARRAY][] A[D('recoveredStacktrace' java.lang.StackTraceElement[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:148)\l0x0021: INVOKE  (r6 I:java.lang.Object) = (r9 I:java.util.ArrayDeque A[D('result' java.util.ArrayDeque)]) type: VIRTUAL call: java.util.ArrayDeque.getLast():java.lang.Object A[MD:():E (c)] (LINE:149)\l0x0025: CHECK_CAST (r6 I:java.lang.StackTraceElement) = (java.lang.StackTraceElement) (r6 I:??[OBJECT, ARRAY]) \l0x0027: INVOKE  (r6 I:boolean) = (r3 I:java.lang.StackTraceElement A[D('element' java.lang.StackTraceElement)]), (r6 I:java.lang.StackTraceElement) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.elementWiseEquals(java.lang.StackTraceElement, java.lang.StackTraceElement):boolean A[MD:(java.lang.StackTraceElement, java.lang.StackTraceElement):boolean (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x002b|0x002b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0030 \l}"];
Node_36 [shape=record,label="{36\:\ 0x002d|0x002d: INVOKE  (r9 I:java.util.ArrayDeque A[D('result' java.util.ArrayDeque)]) type: VIRTUAL call: java.util.ArrayDeque.removeLast():java.lang.Object A[MD:():E (c)] (LINE:150)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0030|0x0030: AGET  (r6 I:??[OBJECT, ARRAY]) = \l  (r8 I:??[OBJECT, ARRAY][] A[D('recoveredStacktrace' java.lang.StackTraceElement[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:152)\l0x0032: INVOKE  (r9 I:java.util.ArrayDeque A[D('result' java.util.ArrayDeque)]), (r6 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayDeque.addFirst(java.lang.Object):void A[MD:(E):void (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0035|LOOP_END\lLOOP:1: B:34:0x001d\-\>B:38:0x0035\l|0x0035: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startIndex' int)])  \-\> B:34:0x001d  (LINE:147)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0037|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x0037: RETURN   A[SYNTHETIC] (LINE:154)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0037|RETURN\lORIG_RETURN\l|0x0037: RETURN    (LINE:154)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0014|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0014|0x0014: CONST  (r5 I:??[int, float, short, byte, char] A[D('index$iv' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:238)\l}"];
MethodNode[shape=record,label="{private static final void kotlinx.coroutines.internal.StackTraceRecoveryKt.mergeRecoveredTraces((r8 I:java.lang.StackTraceElement[] A[D('recoveredStacktrace' java.lang.StackTraceElement[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.ArrayDeque\<java.lang.StackTraceElement\> A[D('result' java.util.ArrayDeque), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x0011 \-\> B:25:0x0004, BACK_EDGE: B:38:0x0035 \-\> B:34:0x001d, CROSS_EDGE: B:35:0x002b \-\> B:37:0x0030, CROSS_EDGE: B:32:0x001a \-\> B:39:0x0037, CROSS_EDGE: B:30:0x0014 \-\> B:31:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0011: r6 'it' Ljava\/lang\/StackTraceElement;\l  0x000d\-0x0011: r7 '$i$a$\-indexOfFirst\-StackTraceRecoveryKt$mergeRecoveredTraces$startIndex$1' I\l  0x0008\-0x0014: r5 'index$iv' I\l  0x0001\-0x0015: r0 '$this$indexOfFirst$iv' [Ljava\/lang\/Object;\l  0x0002\-0x0015: r1 '$i$f$indexOfFirst' I\l  0x0021\-0x0035: r3 'element' Ljava\/lang\/StackTraceElement;\l  0x001e\-0x0037: r2 'i' I\l  0x001a\-0x0037: r0 'lastFrameIndex' I\l  0x0017\-0x0037: r5 'startIndex' I\l  \-1 \-0x0037: r8 'recoveredStacktrace' [Ljava\/lang\/StackTraceElement;\l  \-1 \-0x0037: r9 'result' Ljava\/util\/ArrayDeque;\lSIGNATURE: ([Ljava\/lang\/StackTraceElement;Ljava\/util\/ArrayDeque\<Ljava\/lang\/StackTraceElement;\>;)V\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_41;
Node_27 -> Node_28;
Node_28 -> Node_25;
Node_28 -> Node_40[style=dashed];
Node_40 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_39;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_34;
Node_38 -> Node_42[style=dashed];
Node_42 -> Node_43;
Node_43 -> Node_23;
Node_39 -> Node_23;
Node_41 -> Node_30;
Node_30 -> Node_31;
}

