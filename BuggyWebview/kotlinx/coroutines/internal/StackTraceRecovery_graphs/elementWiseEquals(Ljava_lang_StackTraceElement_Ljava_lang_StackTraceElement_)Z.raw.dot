digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.elementWiseEquals(Ljava\/lang\/StackTraceElement;Ljava\/lang\/StackTraceElement;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r2 I:java.lang.StackTraceElement A[D('$this$elementWiseEquals' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getLineNumber():int A[MD:():int (c)] (LINE:209)\l0x0004: INVOKE  (r1 I:int) = (r3 I:java.lang.StackTraceElement A[D('e' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getLineNumber():int A[MD:():int (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0036 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StackTraceElement A[D('$this$elementWiseEquals' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getMethodName():java.lang.String A[MD:():java.lang.String (c)]\l0x000e: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StackTraceElement A[D('e' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getMethodName():java.lang.String A[MD:():java.lang.String (c)]\l0x0012: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0036 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|0x0018: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StackTraceElement A[D('$this$elementWiseEquals' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getFileName():java.lang.String A[MD:():java.lang.String (c)] (LINE:210)\l0x001c: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StackTraceElement A[D('e' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getFileName():java.lang.String A[MD:():java.lang.String (c)]\l0x0020: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|0x0024: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0036 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|0x0026: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StackTraceElement A[D('$this$elementWiseEquals' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getClassName():java.lang.String A[MD:():java.lang.String (c)]\l0x002a: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StackTraceElement A[D('e' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getClassName():java.lang.String A[MD:():java.lang.String (c)]\l0x002e: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0032|0x0032: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0036 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0034|SYNTHETIC\lRETURN\l|0x0034: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0037: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:209)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0036|RETURN\lORIG_RETURN\l|0x0036: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0037: RETURN  (r0 I:boolean)  (LINE:209)\l}"];
MethodNode[shape=record,label="{private static final boolean kotlinx.coroutines.internal.StackTraceRecoveryKt.elementWiseEquals((r2 I:java.lang.StackTraceElement A[D('$this$elementWiseEquals' java.lang.StackTraceElement), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.StackTraceElement A[D('e' java.lang.StackTraceElement), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0036 \-\> B:26:0x0037, CROSS_EDGE: B:21:0x0024 \-\> B:25:0x0036, CROSS_EDGE: B:19:0x0016 \-\> B:25:0x0036, CROSS_EDGE: B:17:0x0008 \-\> B:25:0x0036\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0037: r2 '$this$elementWiseEquals' Ljava\/lang\/StackTraceElement;\l  \-1 \-0x0037: r3 'e' Ljava\/lang\/StackTraceElement;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_15;
Node_25 -> Node_15;
}

