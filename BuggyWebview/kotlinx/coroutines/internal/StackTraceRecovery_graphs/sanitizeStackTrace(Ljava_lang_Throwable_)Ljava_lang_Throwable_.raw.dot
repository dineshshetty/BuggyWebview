digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.sanitizeStackTrace(Ljava\/lang\/Throwable;)Ljava\/lang\/Throwable;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.StackTraceElement[]) = (r10 I:java.lang.Throwable A[D('$this$sanitizeStackTrace' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getStackTrace():java.lang.StackTraceElement[] A[MD:():java.lang.StackTraceElement[] (c)] (LINE:37)\l0x0004: ARRAY_LENGTH  (r1 I:int) = (r0 I:??[] A[D('stackTrace' java.lang.StackTraceElement[])])  (LINE:38)\l0x0005: SGET  (r2 I:java.lang.String) =  kotlinx.coroutines.internal.StackTraceRecoveryKt.stackTraceRecoveryClassName java.lang.String  (LINE:39)\l0x0007: INVOKE  (r2 I:int) = (r0 I:java.lang.StackTraceElement[] A[D('stackTrace' java.lang.StackTraceElement[])]), (r2 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.frameIndex(java.lang.StackTraceElement[], java.lang.String):int A[MD:(java.lang.StackTraceElement[], java.lang.String):int (m)]\l0x000b: ARITH  (r3 I:int) = (r2 I:int A[D('lastIntrinsic' int)]) + (1 int)  (LINE:40)\l0x000d: SGET  (r4 I:java.lang.String) =  kotlinx.coroutines.internal.StackTraceRecoveryKt.baseContinuationImplClassName java.lang.String  (LINE:41)\l0x000f: INVOKE  (r4 I:int) = (r0 I:java.lang.StackTraceElement[] A[D('stackTrace' java.lang.StackTraceElement[])]), (r4 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.frameIndex(java.lang.StackTraceElement[], java.lang.String):int A[MD:(java.lang.StackTraceElement[], java.lang.String):int (m)]\l0x0013: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:42)\l0x0014: CONST  (r6 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endIndex' int)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0019 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|0x0017: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|0x001b: ARITH  (r7 I:int) = (r1 I:int A[D('size' int)]) \- (r2 I:int A[D('lastIntrinsic' int)])  (LINE:43)\l0x001d: ARITH  (r7 I:int) = (r7 I:int) \- (r6 I:int A[D('adjustment' int)]) \l0x001e: NEW_ARRAY  (r8 I:java.lang.StackTraceElement[]) = (r7 I:int A[IMMUTABLE_TYPE]) type: java.lang.StackTraceElement[] \l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|LOOP_START\lLOOP:0: B:24:0x0020\-\>B:28:0x0031\l|0x0020: IF  (r5 I:??[int, byte, short, char]) \>= (r7 I:??[int, byte, short, char])  \-\> B:31:0x0036 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|0x0022: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x002b  (LINE:44)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|0x0024: CONST_STR  (r9 I:java.lang.String) =  \"Coroutine boundary\"  (LINE:45)\l0x0026: INVOKE  (r9 I:java.lang.StackTraceElement) = (r9 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.artificialFrame(java.lang.String):java.lang.StackTraceElement A[MD:(java.lang.String):java.lang.StackTraceElement (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0031|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0031|LOOP_END\lLOOP:0: B:24:0x0020\-\>B:28:0x0031\l|0x0031: APUT  (r8 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r9 I:??[OBJECT, ARRAY]) \l0x0033: ARITH  (r5 I:int) = (r5 I:int) + (1 int)  (LINE:43)\l}"];
Node_27 [shape=record,label="{27\:\ 0x002b|0x002b: ARITH  (r9 I:int) = (r3 I:int A[D('startIndex' int)]) + (r5 I:int)  (LINE:47)\l0x002d: ARITH  (r9 I:int) = (r9 I:int) + (\-1 int) \l0x002f: AGET  (r9 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])]), (r9 I:??[int, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0031|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0036|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0036|0x0036: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x0037: INVOKE  \l  (r10 I:java.lang.Throwable A[D('$this$sanitizeStackTrace' java.lang.Throwable)])\l  (r5 I:java.lang.StackTraceElement[] A[D('trace' java.lang.StackTraceElement[])])\l type: VIRTUAL call: java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[]):void A[MD:(java.lang.StackTraceElement[]):void (c)] (LINE:51)\l}"];
Node_30 [shape=record,label="{30\:\ 0x003a|RETURN\l|0x003a: RETURN  (r10 I:E extends java.lang.Throwable A[D('$this$sanitizeStackTrace' java.lang.Throwable)])  (LINE:52)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|0x0019: ARITH  (r6 I:int) = (r1 I:int A[D('size' int)]) \- (r4 I:int A[D('endIndex' int)]) \l}"];
MethodNode[shape=record,label="{private static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.sanitizeStackTrace((r10 I:E extends java.lang.Throwable A[D('$this$sanitizeStackTrace' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x0031 \-\> B:24:0x0020, CROSS_EDGE: B:27:0x002b \-\> B:28:0x0031, CROSS_EDGE: B:22:0x0019 \-\> B:23:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x003a: r0 'stackTrace' [Ljava\/lang\/StackTraceElement;\l  0x0005\-0x003a: r1 'size' I\l  0x000b\-0x003a: r2 'lastIntrinsic' I\l  0x000d\-0x003a: r3 'startIndex' I\l  0x0013\-0x003a: r4 'endIndex' I\l  0x0037\-0x003a: r5 'trace' [Ljava\/lang\/StackTraceElement;\l  0x001b\-0x003a: r6 'adjustment' I\l  \-1 \-0x003a: r10 '$this$sanitizeStackTrace' Ljava\/lang\/Throwable;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)TE;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_33;
Node_33 -> Node_28;
Node_28 -> Node_24;
Node_27 -> Node_32;
Node_32 -> Node_28;
Node_31 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_18;
Node_22 -> Node_23;
}

