digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.causeAndStacktrace(Ljava\/lang\/Throwable;)Lkotlin\/Pair;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|java.lang.Throwable r0 = r10.getCause()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0005|if (r0 == null) goto L19\l}"];
Node_25 [shape=record,label="{25\:\ 0x0007}"];
Node_26 [shape=record,label="{26\:\ 0x0013|if (kotlin.jvm.internal.Intrinsics.areEqual(r0.getClass(), r10.getClass()) == false) goto L19\l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|java.lang.StackTraceElement[] r2 = r10.getStackTrace()\lint r5 = r2.length\lr6 = 0\l}"];
Node_28 [shape=record,label="{28\:\ 0x001d|LOOP_START\lLOOP:0: B:28:0x001d\-\>B:30:0x0029\lPHI: r6 \l  PHI: (r6v1 int) = (r6v0 int), (r6v2 int) binds: [B:27:0x0015, B:30:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 \>= r5) goto L17\l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|r7 = r2[r6]\lint r6 = r6 + 1\l}"];
Node_30 [shape=record,label="{30\:\ 0x0029|LOOP_END\lLOOP:0: B:28:0x001d\-\>B:30:0x0029\l|if (isArtificial(r7) == false) goto L6\l}"];
Node_38 [shape=record,label="{38\:\ 0x002b|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|r5 = true\l}"];
Node_33 [shape=record,label="{33\:\ 0x002e|PHI: r5 \l  PHI: (r5v2 boolean) = (r5v1 boolean), (r5v3 boolean) binds: [B:32:0x002d, B:31:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == false) goto L15\l}"];
Node_34 [shape=record,label="{34\:\ 0x0030}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.TuplesKt.m15to(r0, r2)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0035}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.TuplesKt.m15to(r10, new java.lang.StackTraceElement[0])\l}"];
Node_39 [shape=record,label="{39\:\ 0x002d|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002d|r5 = false\l}"];
Node_36 [shape=record,label="{36\:\ 0x003d}"];
Node_37 [shape=record,label="{37\:\ 0x0044|RETURN\lORIG_RETURN\l|return kotlin.TuplesKt.m15to(r10, new java.lang.StackTraceElement[0])\l}"];
MethodNode[shape=record,label="{private static final kotlin.Pair\<E extends java.lang.Throwable, java.lang.StackTraceElement[]\> kotlinx.coroutines.internal.StackTraceRecoveryKt.causeAndStacktrace((r10v0 E extends java.lang.Throwable A[D('$this$causeAndStacktrace' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x0029 \-\> B:28:0x001d, CROSS_EDGE: B:35:0x0035 \-\> B:37:0x0044, CROSS_EDGE: B:32:0x002d \-\> B:33:0x002e, CROSS_EDGE: B:36:0x003d \-\> B:37:0x0044, CROSS_EDGE: B:24:0x0005 \-\> B:36:0x003d\lINLINE_NOT_NEEDED\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)Lkotlin\/Pair\<TE;[Ljava\/lang\/StackTraceElement;\>;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_36;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_36;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_30;
Node_30 -> Node_28;
Node_30 -> Node_38[style=dashed];
Node_38 -> Node_31;
Node_31 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_40;
Node_40 -> Node_22;
Node_35 -> Node_41;
Node_41 -> Node_22;
Node_39 -> Node_32;
Node_32 -> Node_33;
Node_36 -> Node_37;
Node_37 -> Node_22;
}

