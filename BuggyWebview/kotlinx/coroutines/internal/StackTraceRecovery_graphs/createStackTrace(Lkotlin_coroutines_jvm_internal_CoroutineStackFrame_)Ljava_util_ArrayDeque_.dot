digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.createStackTrace(Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Ljava\/util\/ArrayDeque;" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|java.util.ArrayDeque r0 = new java.util.ArrayDeque()\ljava.lang.StackTraceElement r1 = r4.getStackTraceElement()\l}"];
Node_28 [shape=record,label="{28\:\ 0x0009|if (r1 != null) goto L3\l}"];
Node_30 [shape=record,label="{30\:\ 0x000c|r0.add(r1)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0010|r1 = r4\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|LOOP_START\lLOOP:0: B:32:0x0011\-\>B:47:0x0011\lPHI: r1 \l  PHI: (r1v2 'last' kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r1v1 'last' kotlin.coroutines.jvm.internal.CoroutineStackFrame), (r1v3 'last' kotlin.coroutines.jvm.internal.CoroutineStackFrame) binds: [B:31:0x0010, B:47:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|r3 = null\l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|if ((r1 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame) == false) goto L21\l}"];
Node_34 [shape=record,label="{34\:\ 0x0017|r2 = r1\l}"];
Node_36 [shape=record,label="{36\:\ 0x001a|PHI: r2 \l  PHI: (r2v2 kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r2v1 kotlin.coroutines.jvm.internal.CoroutineStackFrame), (r2v4 kotlin.coroutines.jvm.internal.CoroutineStackFrame) binds: [B:35:0x0019, B:34:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 != null) goto L9\l}"];
Node_38 [shape=record,label="{38\:\ 0x001d|kotlin.coroutines.jvm.internal.CoroutineStackFrame r3 = r2.getCallerFrame()\l}"];
Node_39 [shape=record,label="{39\:\ 0x0021|PHI: r3 \l  PHI: (r3v1 kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r3v0 kotlin.coroutines.jvm.internal.CoroutineStackFrame), (r3v3 kotlin.coroutines.jvm.internal.CoroutineStackFrame) binds: [B:36:0x001a, B:38:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 != null) goto L11\l}"];
Node_41 [shape=record,label="{41\:\ 0x0024|r1 = r3\ljava.lang.StackTraceElement r2 = r1.getStackTraceElement()\l}"];
Node_42 [shape=record,label="{42\:\ 0x0029|if (r2 != null) goto L13\l}"];
Node_46 [shape=record,label="{46\:\ 0x002c|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x002c|r0.add(r2)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0011|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0011|LOOP_END\lSYNTHETIC\lLOOP:0: B:32:0x0011\-\>B:47:0x0011\l}"];
Node_48 [shape=record,label="{48\:\ 0x0011|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0023|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|RETURN\l|return r0\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0019|r2 = null\l}"];
MethodNode[shape=record,label="{private static final java.util.ArrayDeque\<java.lang.StackTraceElement\> kotlinx.coroutines.internal.StackTraceRecoveryKt.createStackTrace((r4v0 'continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:44:0x002c \-\> B:32:0x0011, BACK_EDGE: B:42:0x0029 \-\> B:32:0x0011, CROSS_EDGE: B:36:0x001a \-\> B:39:0x0021, CROSS_EDGE: B:35:0x0019 \-\> B:36:0x001a, CROSS_EDGE: B:28:0x0009 \-\> B:31:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Ljava\/util\/ArrayDeque\<Ljava\/lang\/StackTraceElement;\>;\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_31[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_38;
Node_36 -> Node_39[style=dashed];
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_45[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_46;
Node_42 -> Node_48[style=dashed];
Node_46 -> Node_44;
Node_44 -> Node_49;
Node_49 -> Node_47;
Node_47 -> Node_32;
Node_48 -> Node_47;
Node_45 -> Node_40;
Node_40 -> Node_26;
Node_35 -> Node_36;
}

