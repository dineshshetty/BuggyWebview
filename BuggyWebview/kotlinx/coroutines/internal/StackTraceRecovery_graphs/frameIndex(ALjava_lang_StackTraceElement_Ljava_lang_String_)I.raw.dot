digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.frameIndex([Ljava\/lang\/StackTraceElement;Ljava\/lang\/String;)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$frameIndex' java.lang.StackTraceElement[])])  (LINE:202)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[] A[D('$this$indexOfFirst$iv' java.lang.Object[])])  (LINE:242)\l0x0003: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|LOOP_START\lLOOP:0: B:15:0x0004\-\>B:17:0x0014\l|0x0004: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:21:0x0017 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0009: AGET  (r5 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('$this$indexOfFirst$iv' java.lang.Object[])])\l  (r4 I:??[int, short, byte, char] A[D('index$iv' int)])\l  (LINE:243)\l0x000b: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INVOKE  (r7 I:java.lang.String) = (r5 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getClassName():java.lang.String A[MD:():java.lang.String (c)] (LINE:202)\l0x0010: INVOKE  (r5 I:boolean A[D('it' java.lang.StackTraceElement)]) = (r9 I:java.lang.Object A[D('methodName' java.lang.String)]), (r7 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|LOOP_END\lLOOP:0: B:15:0x0004\-\>B:17:0x0014\l|0x0014: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.StackTraceElement)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0004 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0018: RETURN  (r4 I:int) A[SYNTHETIC] (LINE:202)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: CONST  (r4 I:??[int, float, short, byte, char] A[D('index$iv' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:247)\l0x0018: RETURN  (r4 I:int)  (LINE:202)\l}"];
MethodNode[shape=record,label="{private static final int kotlinx.coroutines.internal.StackTraceRecoveryKt.frameIndex((r8 I:java.lang.StackTraceElement[] A[D('$this$frameIndex' java.lang.StackTraceElement[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[D('methodName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:17:0x0014 \-\> B:15:0x0004, CROSS_EDGE: B:19:0x0017 \-\> B:20:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x0014: r5 'it' Ljava\/lang\/StackTraceElement;\l  0x000c\-0x0014: r6 '$i$a$\-indexOfFirst\-StackTraceRecoveryKt$frameIndex$1' I\l  0x0007\-0x0017: r4 'index$iv' I\l  0x0001\-0x0018: r0 '$this$indexOfFirst$iv' [Ljava\/lang\/Object;\l  0x0002\-0x0018: r1 '$i$f$indexOfFirst' I\l  \-1 \-0x0018: r8 '$this$frameIndex' [Ljava\/lang\/StackTraceElement;\l  \-1 \-0x0018: r9 'methodName' Ljava\/lang\/String;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_15;
Node_17 -> Node_22[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_19;
Node_19 -> Node_13;
}

