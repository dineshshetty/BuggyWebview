digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.recoverFromStackFrame(Ljava\/lang\/Throwable;Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Ljava\/lang\/Throwable;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.Pair) = (r5 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.causeAndStacktrace(java.lang.Throwable):kotlin.Pair A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):kotlin.Pair\<E extends java.lang.Throwable, java.lang.StackTraceElement[]\> (m)] (LINE:66)\l0x0004: INVOKE  (r1 I:java.lang.Object) = (r0 I:kotlin.Pair) type: VIRTUAL call: kotlin.Pair.component1():java.lang.Object A[MD:():A (m)]\l0x0008: CHECK_CAST (r1 I:java.lang.Throwable) = (java.lang.Throwable) (r1 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.Pair) type: VIRTUAL call: kotlin.Pair.component2():java.lang.Object A[MD:():B (m)]\l0x000e: CHECK_CAST (r0 I:java.lang.StackTraceElement[]) = (java.lang.StackTraceElement[]) (r0 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r2 I:java.lang.Throwable) = (r1 I:java.lang.Throwable A[D('cause' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.tryCopyAndVerify(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)] (LINE:69)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0017 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|RETURN\l|0x0016: RETURN  (r5 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable)]) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|0x0017: INVOKE  (r3 I:java.util.ArrayDeque) = \l  (r6 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.createStackTrace(kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.util.ArrayDeque A[MD:(kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.util.ArrayDeque\<java.lang.StackTraceElement\> (m)] (LINE:71)\l0x001b: INVOKE  (r4 I:boolean) = (r3 I:java.util.ArrayDeque A[D('stacktrace' java.util.ArrayDeque)]) type: VIRTUAL call: java.util.ArrayDeque.isEmpty():boolean A[MD:():boolean (c)] (LINE:72)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001f|0x001f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0022 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|RETURN\l|0x0021: RETURN  (r5 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable)]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|0x0022: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cause' java.lang.Throwable)]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('exception' java.lang.Throwable)])  \-\> B:22:0x0027  (LINE:74)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|0x0024: INVOKE  \l  (r0 I:java.lang.StackTraceElement[] A[D('recoveredStacktrace' java.lang.StackTraceElement[])])\l  (r3 I:java.util.ArrayDeque A[D('stacktrace' java.util.ArrayDeque)])\l type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.mergeRecoveredTraces(java.lang.StackTraceElement[], java.util.ArrayDeque):void A[MD:(java.lang.StackTraceElement[], java.util.ArrayDeque\<java.lang.StackTraceElement\>):void (m)] (LINE:75)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0027|0x0027: INVOKE  (r4 I:java.lang.Throwable) = \l  (r1 I:java.lang.Throwable A[D('cause' java.lang.Throwable)])\l  (r2 I:java.lang.Throwable A[D('newException' java.lang.Throwable)])\l  (r3 I:java.util.ArrayDeque A[D('stacktrace' java.util.ArrayDeque)])\l type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.createFinalException(java.lang.Throwable, java.lang.Throwable, java.util.ArrayDeque):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable, E extends java.lang.Throwable, java.util.ArrayDeque\<java.lang.StackTraceElement\>):E extends java.lang.Throwable (m)] (LINE:78)\l}"];
Node_23 [shape=record,label="{23\:\ 0x002b|RETURN\l|0x002b: RETURN  (r4 I:E extends java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.recoverFromStackFrame((r5 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0021 \-\> B:13:?, CROSS_EDGE: B:23:0x002b \-\> B:13:?, CROSS_EDGE: B:20:0x0022 \-\> B:22:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x002b: r0 'recoveredStacktrace' [Ljava\/lang\/StackTraceElement;\l  0x000a\-0x002b: r1 'cause' Ljava\/lang\/Throwable;\l  0x0017\-0x002b: r2 'newException' Ljava\/lang\/Throwable;\l  0x001b\-0x002b: r3 'stacktrace' Ljava\/util\/ArrayDeque;\l  \-1 \-0x002b: r5 'exception' Ljava\/lang\/Throwable;\l  \-1 \-0x002b: r6 'continuation' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)TE;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_13;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

