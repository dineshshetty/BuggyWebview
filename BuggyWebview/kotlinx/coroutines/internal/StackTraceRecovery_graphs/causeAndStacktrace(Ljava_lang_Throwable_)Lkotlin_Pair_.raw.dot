digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.causeAndStacktrace(Ljava\/lang\/Throwable;)Lkotlin\/Pair;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Throwable) = (r10 I:java.lang.Throwable A[D('$this$causeAndStacktrace' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getCause():java.lang.Throwable A[MD:():java.lang.Throwable (c)] (LINE:132)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:133)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cause' java.lang.Throwable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x003d \l}"];
Node_25 [shape=record,label="{25\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.Class) = (r0 I:java.lang.Object A[D('cause' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x000b: INVOKE  (r3 I:java.lang.Class) = (r10 I:java.lang.Object A[D('$this$causeAndStacktrace' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x000f: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Object), (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x003d \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: INVOKE  (r2 I:java.lang.StackTraceElement[]) = (r10 I:java.lang.Throwable A[D('$this$causeAndStacktrace' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getStackTrace():java.lang.StackTraceElement[] A[MD:():java.lang.StackTraceElement[] (c)] (LINE:134)\l0x0019: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('currentTrace' java.lang.StackTraceElement[])])  (LINE:135)\l0x001a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: ARRAY_LENGTH  (r5 I:int) = (r3 I:??[] A[D('$this$any$iv' java.lang.Object[])])  (LINE:229)\l0x001c: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x001d|LOOP_START\lLOOP:0: B:28:0x001d\-\>B:30:0x0029\l|0x001d: IF  (r6 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char])  \-\> B:39:0x002d \l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|0x001f: AGET  (r7 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][] A[D('$this$any$iv' java.lang.Object[])]), (r6 I:??[int, short, byte, char]) \l0x0021: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x0023: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0024: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: INVOKE  (r8 I:boolean A[D('it' java.lang.StackTraceElement)]) = (r8 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.isArtificial(java.lang.StackTraceElement):boolean A[MD:(java.lang.StackTraceElement):boolean (m)] (LINE:135)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0029|LOOP_END\lLOOP:0: B:28:0x001d\-\>B:30:0x0029\l|0x0029: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.StackTraceElement)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x001d \l}"];
Node_38 [shape=record,label="{38\:\ 0x002b|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|0x002b: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x002e|0x002e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0035  (LINE:135)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0030|0x0030: INVOKE  (r1 I:kotlin.Pair) = \l  (r0 I:java.lang.Object A[D('cause' java.lang.Throwable)])\l  (r2 I:java.lang.Object A[D('currentTrace' java.lang.StackTraceElement[])])\l type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)] (LINE:136)\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|0x0044: RETURN  (r1 I:kotlin.Pair\<E extends java.lang.Throwable, java.lang.StackTraceElement[]\>) A[SYNTHETIC] (LINE:133)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0035|0x0035: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:137)\l0x0036: NEW_ARRAY  (r1 I:java.lang.StackTraceElement[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.StackTraceElement[]  (LINE:231)\l0x0038: INVOKE  (r1 I:kotlin.Pair) = (r10 I:java.lang.Object A[D('$this$causeAndStacktrace' java.lang.Throwable)]), (r1 I:java.lang.Object) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)] (LINE:137)\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x0044: RETURN  (r1 I:kotlin.Pair\<E extends java.lang.Throwable, java.lang.StackTraceElement[]\>) A[SYNTHETIC] (LINE:133)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002d|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002d|0x002d: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:230)\l}"];
Node_36 [shape=record,label="{36\:\ 0x003d|0x003d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:139)\l0x003e: NEW_ARRAY  (r1 I:java.lang.StackTraceElement[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.StackTraceElement[]  (LINE:232)\l0x0040: INVOKE  (r1 I:kotlin.Pair) = (r10 I:java.lang.Object A[D('$this$causeAndStacktrace' java.lang.Throwable)]), (r1 I:java.lang.Object) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)] (LINE:139)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0044|RETURN\lORIG_RETURN\l|0x0044: RETURN  (r1 I:kotlin.Pair\<E extends java.lang.Throwable, java.lang.StackTraceElement[]\>)  (LINE:133)\l}"];
MethodNode[shape=record,label="{private static final kotlin.Pair\<E extends java.lang.Throwable, java.lang.StackTraceElement[]\> kotlinx.coroutines.internal.StackTraceRecoveryKt.causeAndStacktrace((r10 I:E extends java.lang.Throwable A[D('$this$causeAndStacktrace' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x0029 \-\> B:28:0x001d, CROSS_EDGE: B:35:0x0035 \-\> B:37:0x0044, CROSS_EDGE: B:32:0x002d \-\> B:33:0x002e, CROSS_EDGE: B:36:0x003d \-\> B:37:0x0044, CROSS_EDGE: B:24:0x0005 \-\> B:36:0x003d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x0029: r8 'it' Ljava\/lang\/StackTraceElement;\l  0x0025\-0x0029: r9 '$i$a$\-any\-StackTraceRecoveryKt$causeAndStacktrace$1' I\l  0x0021\-0x002d: r7 'element$iv' Ljava\/lang\/Object;\l  0x001a\-0x002e: r3 '$this$any$iv' [Ljava\/lang\/Object;\l  0x001b\-0x002e: r4 '$i$f$any' I\l  0x0036\-0x0038: r3 '$i$f$emptyArray' I\l  0x0019\-0x003c: r2 'currentTrace' [Ljava\/lang\/StackTraceElement;\l  0x003e\-0x0040: r2 '$i$f$emptyArray' I\l  0x0004\-0x0044: r0 'cause' Ljava\/lang\/Throwable;\l  \-1 \-0x0044: r10 '$this$causeAndStacktrace' Ljava\/lang\/Throwable;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)Lkotlin\/Pair\<TE;[Ljava\/lang\/StackTraceElement;\>;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_36;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_36;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_30;
Node_30 -> Node_28;
Node_30 -> Node_38[style=dashed];
Node_38 -> Node_31;
Node_31 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_40;
Node_40 -> Node_22;
Node_35 -> Node_41;
Node_41 -> Node_22;
Node_39 -> Node_32;
Node_32 -> Node_33;
Node_36 -> Node_37;
Node_37 -> Node_22;
}

