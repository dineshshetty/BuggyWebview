digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.createFinalException(Ljava\/lang\/Throwable;Ljava\/lang\/Throwable;Ljava\/util\/ArrayDeque;)Ljava\/lang\/Throwable;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|r10.addFirst(artificialFrame(\"Coroutine boundary\"))\ljava.lang.StackTraceElement[] r0 = r8.getStackTrace()\lint r1 = frameIndex(r0, kotlinx.coroutines.internal.StackTraceRecovery.baseContinuationImplClassName)\lr2 = 0\l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|if (r1 != (\-1)) goto L10\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|java.util.Collection r3 = r10\ljava.lang.Object[] r2 = r3.toArray(new java.lang.StackTraceElement[0])\l}"];
Node_26 [shape=record,label="{26\:\ 0x0023|if (r2 == null) goto L8\l}"];
Node_27 [shape=record,label="{27\:\ 0x0025|r9.setStackTrace((java.lang.StackTraceElement[]) r2)\l}"];
Node_28 [shape=record,label="{28\:\ 0x002a|RETURN\l|return r9\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x002b}"];
Node_30 [shape=record,label="{30\:\ 0x0032|throw new java.lang.NullPointerException(\"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray\>\")\l}"];
Node_31 [shape=record,label="{31\:\ 0x0033|java.lang.StackTraceElement[] r3 = new java.lang.StackTraceElement[r10.size() + r1]\lr4 = 0\l}"];
Node_32 [shape=record,label="{32\:\ 0x003b|LOOP_START\lLOOP:0: B:32:0x003b\-\>B:33:0x003d\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v3 int) binds: [B:31:0x0033, B:33:0x003d] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r1) goto L13\l}"];
Node_33 [shape=record,label="{33\:\ 0x003d|LOOP_END\lLOOP:0: B:32:0x003b\-\>B:33:0x003d\l|r5 = r4\lint r4 = r4 + 1\lr3[r5] = r0[r5]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0045|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0045|java.util.Iterator r4 = r10.iterator()\l}"];
Node_35 [shape=record,label="{35\:\ 0x0049|LOOP_START\lLOOP:1: B:35:0x0049\-\>B:37:0x004f\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:34:0x0045, B:37:0x004f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x004d|if (r4.hasNext() == false) goto L18\l}"];
Node_37 [shape=record,label="{37\:\ 0x004f|LOOP_END\lLOOP:1: B:35:0x0049\-\>B:37:0x004f\l|r5 = r2\lint r2 = r2 + 1\ljava.lang.StackTraceElement r6 = r4.next()\lr3[r1 + r5] = r6\l}"];
Node_41 [shape=record,label="{41\:\ 0x005d|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x005d|r9.setStackTrace(r3)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0060|RETURN\l|return r9\l}"];
MethodNode[shape=record,label="{private static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.createFinalException((r8v0 E extends java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 E extends java.lang.Throwable A[D('result' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 java.util.ArrayDeque\<java.lang.StackTraceElement\> A[D('resultStackTrace' java.util.ArrayDeque), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0032 \-\> B:22:?, BACK_EDGE: B:33:0x003d \-\> B:32:0x003b, BACK_EDGE: B:37:0x004f \-\> B:35:0x0049, CROSS_EDGE: B:39:0x0060 \-\> B:22:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;TE;Ljava\/util\/ArrayDeque\<Ljava\/lang\/StackTraceElement;\>;)TE;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_22;
Node_29 -> Node_30;
Node_30 -> Node_22;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_32;
Node_40 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_41;
Node_37 -> Node_35;
Node_41 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_22;
}

