digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.tryCopyAndVerify(Ljava\/lang\/Throwable;)Ljava\/lang\/Throwable;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Throwable) = (r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.ExceptionsConstructorKt.tryCopyException(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)] (LINE:82)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0008 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:E extends java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: INSTANCE_OF  (r2 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Throwable)]) kotlinx.coroutines.CopyableThrowable  (LINE:85)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001b \l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.Throwable A[D('newException' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getMessage():java.lang.String A[MD:():java.lang.String (c)]\l0x0010: INVOKE  (r3 I:java.lang.String) = (r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getMessage():java.lang.String A[MD:():java.lang.String (c)]\l0x0014: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Object), (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001b \l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|RETURN\l|0x001a: RETURN  (r1 I:E extends java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|RETURN\l|0x001b: RETURN  (r0 I:E extends java.lang.Throwable A[D('newException' java.lang.Throwable)])  (LINE:86)\l}"];
MethodNode[shape=record,label="{private static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.tryCopyAndVerify((r4 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x001a \-\> B:12:?, CROSS_EDGE: B:21:0x001b \-\> B:12:?, CROSS_EDGE: B:17:0x000a \-\> B:21:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x001b: r0 'newException' Ljava\/lang\/Throwable;\l  \-1 \-0x001b: r4 'exception' Ljava\/lang\/Throwable;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)TE;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_12;
Node_21 -> Node_12;
}

