digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.recoverStackTrace(Ljava\/lang\/Throwable;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Throwable;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getRECOVER_STACK_TRACES():boolean A[MD:():boolean (m)] (LINE:57)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0014 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: INSTANCE_OF  (r1 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('continuation' kotlin.coroutines.Continuation)]) kotlin.coroutines.jvm.internal.CoroutineStackFrame \l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000c \l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('continuation' kotlin.coroutines.Continuation)])  (LINE:58)\l0x000d: CHECK_CAST (r1 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) (r1 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r1 I:java.lang.Throwable) = \l  (r2 I:java.lang.Throwable A[D('exception' java.lang.Throwable)])\l  (r1 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame)\l type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.access$recoverFromStackFrame(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.lang.Throwable A[MD:(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.lang.Throwable (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|RETURN\l|0x0013: RETURN  (r1 I:E extends java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|RETURN\l|0x0014: RETURN  (r2 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable)])  (LINE:57)\l}"];
MethodNode[shape=record,label="{public static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.recoverStackTrace((r2 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.coroutines.Continuation\<?\> A[D('continuation' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0014 \-\> B:11:?, CROSS_EDGE: B:13:0x0005 \-\> B:19:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0014: r0 '$i$f$recoverStackTrace' I\l  \-1 \-0x0014: r2 'exception' Ljava\/lang\/Throwable;\l  \-1 \-0x0014: r3 'continuation' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;Lkotlin\/coroutines\/Continuation\<*\>;)TE;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_19[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

