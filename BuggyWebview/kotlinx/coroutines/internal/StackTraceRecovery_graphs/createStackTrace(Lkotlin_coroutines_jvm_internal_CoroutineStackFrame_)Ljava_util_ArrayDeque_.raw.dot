digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.createStackTrace(Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Ljava\/util\/ArrayDeque;" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayDeque) =  java.util.ArrayDeque  (LINE:185)\l0x0002: INVOKE  (r0 I:java.util.ArrayDeque) type: DIRECT call: java.util.ArrayDeque.\<init\>():void A[MD:():void (c)]\l0x0005: INVOKE  (r1 I:java.lang.StackTraceElement) = \l  (r4 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l type: INTERFACE call: kotlin.coroutines.jvm.internal.CoroutineStackFrame.getStackTraceElement():java.lang.StackTraceElement A[MD:():java.lang.StackTraceElement (m)] (LINE:186)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x000c \l}"];
Node_30 [shape=record,label="{30\:\ 0x000c|0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:241)\l0x000d: INVOKE  \l  (r0 I:java.util.ArrayDeque A[D('stack' java.util.ArrayDeque)])\l  (r1 I:java.lang.Object A[D('it' java.lang.StackTraceElement)])\l type: VIRTUAL call: java.util.ArrayDeque.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:186)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0010|0x0010: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('it' java.lang.StackTraceElement)]) = (r4 I:??[OBJECT, ARRAY] A[D('continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])  (LINE:188)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|LOOP_START\lLOOP:0: B:32:0x0011\-\>B:47:0x0011\l|0x0012: INSTANCE_OF  (r2 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('last' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) kotlin.coroutines.jvm.internal.CoroutineStackFrame  (LINE:190)\l0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|0x0015: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0019 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0017|0x0017: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('last' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x001d \l}"];
Node_38 [shape=record,label="{38\:\ 0x001d|0x001d: INVOKE  (r3 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r2 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) type: INTERFACE call: kotlin.coroutines.jvm.internal.CoroutineStackFrame.getCallerFrame():kotlin.coroutines.jvm.internal.CoroutineStackFrame A[MD:():kotlin.coroutines.jvm.internal.CoroutineStackFrame (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0021|0x0021: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0024 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0024|0x0024: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('last' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) = (r3 I:??[OBJECT, ARRAY])  (LINE:190)\l0x0025: INVOKE  (r2 I:java.lang.StackTraceElement) = \l  (r1 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('last' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l type: INTERFACE call: kotlin.coroutines.jvm.internal.CoroutineStackFrame.getStackTraceElement():java.lang.StackTraceElement A[MD:():java.lang.StackTraceElement (m)] (LINE:191)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0029|0x0029: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x002c \l}"];
Node_46 [shape=record,label="{46\:\ 0x002c|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x002c|0x002c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:241)\l0x002d: INVOKE  \l  (r0 I:java.util.ArrayDeque A[D('stack' java.util.ArrayDeque)])\l  (r2 I:java.lang.Object A[D('it' java.lang.StackTraceElement)])\l type: VIRTUAL call: java.util.ArrayDeque.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:191)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0011|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0011|LOOP_END\lSYNTHETIC\lLOOP:0: B:32:0x0011\-\>B:47:0x0011\l}"];
Node_48 [shape=record,label="{48\:\ 0x0011|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0023|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|RETURN\l|0x0023: RETURN  (r0 I:java.util.ArrayDeque\<java.lang.StackTraceElement\> A[D('stack' java.util.ArrayDeque)])  (LINE:193)\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0019|0x0019: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static final java.util.ArrayDeque\<java.lang.StackTraceElement\> kotlinx.coroutines.internal.StackTraceRecoveryKt.createStackTrace((r4 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('continuation' kotlin.coroutines.jvm.internal.CoroutineStackFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:44:0x002c \-\> B:32:0x0011, BACK_EDGE: B:42:0x0029 \-\> B:32:0x0011, CROSS_EDGE: B:36:0x001a \-\> B:39:0x0021, CROSS_EDGE: B:35:0x0019 \-\> B:36:0x001a, CROSS_EDGE: B:28:0x0009 \-\> B:31:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0010: r1 'it' Ljava\/lang\/StackTraceElement;\l  0x000d\-0x0010: r2 '$i$a$\-let\-StackTraceRecoveryKt$createStackTrace$1' I\l  0x002c\-0x0030: r2 'it' Ljava\/lang\/StackTraceElement;\l  0x002d\-0x0030: r3 '$i$a$\-let\-StackTraceRecoveryKt$createStackTrace$2' I\l  0x0005\-0x0030: r0 'stack' Ljava\/util\/ArrayDeque;\l  0x0011\-0x0030: r1 'last' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\l  \-1 \-0x0030: r4 'continuation' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\lSIGNATURE: (Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Ljava\/util\/ArrayDeque\<Ljava\/lang\/StackTraceElement;\>;\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_31[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_38;
Node_36 -> Node_39[style=dashed];
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_45[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_46;
Node_42 -> Node_48[style=dashed];
Node_46 -> Node_44;
Node_44 -> Node_49;
Node_49 -> Node_47;
Node_47 -> Node_32;
Node_48 -> Node_47;
Node_45 -> Node_40;
Node_40 -> Node_26;
Node_35 -> Node_36;
}

