digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.recoverStackTrace(Ljava\/lang\/Throwable;)Ljava\/lang\/Throwable;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getRECOVER_STACK_TRACES():boolean A[MD:():boolean (m)] (LINE:30)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0007 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|RETURN\l|0x0006: RETURN  (r2 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable)]) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: INVOKE  (r0 I:java.lang.Throwable) = (r2 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.tryCopyAndVerify(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)] (LINE:32)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000e \l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|RETURN\l|0x000d: RETURN  (r2 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable)]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|0x000e: INVOKE  (r1 I:java.lang.Throwable) = (r0 I:java.lang.Throwable A[D('copy' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.sanitizeStackTrace(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)] (LINE:33)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|RETURN\l|0x0012: RETURN  (r1 I:E extends java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.recoverStackTrace((r2 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000d \-\> B:11:?, CROSS_EDGE: B:19:0x0012 \-\> B:11:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0012: r0 'copy' Ljava\/lang\/Throwable;\l  \-1 \-0x0012: r2 'exception' Ljava\/lang\/Throwable;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)TE;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

