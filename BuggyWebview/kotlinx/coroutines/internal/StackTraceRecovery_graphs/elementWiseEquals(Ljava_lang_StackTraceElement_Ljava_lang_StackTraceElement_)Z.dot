digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.elementWiseEquals(Ljava\/lang\/StackTraceElement;Ljava\/lang\/StackTraceElement;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0008|if (r2.getLineNumber() != r3.getLineNumber()) goto L11\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a}"];
Node_19 [shape=record,label="{19\:\ 0x0016|if (kotlin.jvm.internal.Intrinsics.areEqual(r2.getMethodName(), r3.getMethodName()) == false) goto L11\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018}"];
Node_21 [shape=record,label="{21\:\ 0x0024|if (kotlin.jvm.internal.Intrinsics.areEqual(r2.getFileName(), r3.getFileName()) == false) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x0026}"];
Node_23 [shape=record,label="{23\:\ 0x0032|if (kotlin.jvm.internal.Intrinsics.areEqual(r2.getClassName(), r3.getClassName()) == false) goto L11\l}"];
Node_24 [shape=record,label="{24\:\ 0x0034|SYNTHETIC\lRETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0036|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private static final boolean kotlinx.coroutines.internal.StackTraceRecoveryKt.elementWiseEquals((r2v0 '$this$elementWiseEquals' java.lang.StackTraceElement A[D('$this$elementWiseEquals' java.lang.StackTraceElement), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'e' java.lang.StackTraceElement A[D('e' java.lang.StackTraceElement), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0036 \-\> B:26:0x0037, CROSS_EDGE: B:21:0x0024 \-\> B:25:0x0036, CROSS_EDGE: B:19:0x0016 \-\> B:25:0x0036, CROSS_EDGE: B:17:0x0008 \-\> B:25:0x0036\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_15;
Node_25 -> Node_15;
}

