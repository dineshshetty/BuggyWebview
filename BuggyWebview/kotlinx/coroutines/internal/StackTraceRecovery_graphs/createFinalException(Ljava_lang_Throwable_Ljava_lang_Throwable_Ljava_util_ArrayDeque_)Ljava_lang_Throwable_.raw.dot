digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.createFinalException(Ljava\/lang\/Throwable;Ljava\/lang\/Throwable;Ljava\/util\/ArrayDeque;)Ljava\/lang\/Throwable;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"Coroutine boundary\"  (LINE:106)\l0x0002: INVOKE  (r0 I:java.lang.StackTraceElement) = (r0 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.artificialFrame(java.lang.String):java.lang.StackTraceElement A[MD:(java.lang.String):java.lang.StackTraceElement (m)]\l0x0006: INVOKE  (r10 I:java.util.ArrayDeque A[D('resultStackTrace' java.util.ArrayDeque)]), (r0 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayDeque.addFirst(java.lang.Object):void A[MD:(E):void (c)]\l0x0009: INVOKE  (r0 I:java.lang.StackTraceElement[]) = (r8 I:java.lang.Throwable A[D('cause' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getStackTrace():java.lang.StackTraceElement[] A[MD:():java.lang.StackTraceElement[] (c)] (LINE:107)\l0x000d: SGET  (r1 I:java.lang.String) =  kotlinx.coroutines.internal.StackTraceRecoveryKt.baseContinuationImplClassName java.lang.String  (LINE:108)\l0x000f: INVOKE  (r1 I:int) = (r0 I:java.lang.StackTraceElement[] A[D('causeTrace' java.lang.StackTraceElement[])]), (r1 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.frameIndex(java.lang.StackTraceElement[], java.lang.String):int A[MD:(java.lang.StackTraceElement[], java.lang.String):int (m)]\l0x0013: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:109)\l0x0014: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0033 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|0x0017: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('resultStackTrace' java.util.ArrayDeque)])  (LINE:110)\l0x0018: CHECK_CAST (r3 I:java.util.Collection) = (java.util.Collection) (r3 I:??[OBJECT, ARRAY]) \l0x001a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$toTypedArray$iv' java.util.Collection)])  (LINE:226)\l0x001d: NEW_ARRAY  (r2 I:java.lang.StackTraceElement[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.StackTraceElement[]  (LINE:228)\l0x001f: INVOKE  (r2 I:java.lang.Object[]) = (r5 I:java.util.Collection A[D('thisCollection$iv' java.util.Collection)]), (r2 I:java.lang.Object[]) type: INTERFACE call: java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] A[MD:\<T\>:(T[]):T[] (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0023|0x0023: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002b \l}"];
Node_27 [shape=record,label="{27\:\ 0x0025|0x0025: CHECK_CAST (r2 I:java.lang.StackTraceElement[]) = (java.lang.StackTraceElement[]) (r2 I:??[OBJECT, ARRAY]) \l0x0027: INVOKE  (r9 I:java.lang.Throwable A[D('result' java.lang.Throwable)]), (r2 I:java.lang.StackTraceElement[]) type: VIRTUAL call: java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[]):void A[MD:(java.lang.StackTraceElement[]):void (c)] (LINE:110)\l}"];
Node_28 [shape=record,label="{28\:\ 0x002a|RETURN\l|0x002a: RETURN  (r9 I:E extends java.lang.Throwable A[D('result' java.lang.Throwable)])  (LINE:111)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|0x002b: NEW_INSTANCE  (r2 I:java.lang.NullPointerException) =  java.lang.NullPointerException  (LINE:228)\l0x002d: CONST_STR  (r6 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray\>\" \l0x002f: INVOKE  (r2 I:java.lang.NullPointerException), (r6 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0032|0x0032: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0033|0x0033: INVOKE  (r3 I:int) = (r10 I:java.util.ArrayDeque A[D('resultStackTrace' java.util.ArrayDeque)]) type: VIRTUAL call: java.util.ArrayDeque.size():int A[MD:():int (c)] (LINE:114)\l0x0037: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int A[D('size' int)]) \l0x0038: NEW_ARRAY  (r3 I:java.lang.StackTraceElement[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.StackTraceElement[] \l0x003a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:115)\l}"];
Node_32 [shape=record,label="{32\:\ 0x003b|LOOP_START\lLOOP:0: B:32:0x003b\-\>B:33:0x003d\l|0x003b: IF  (r4 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:40:0x0045 \l}"];
Node_33 [shape=record,label="{33\:\ 0x003d|LOOP_END\lLOOP:0: B:32:0x003b\-\>B:33:0x003d\l|0x003d: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003e: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0040: AGET  (r6 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('causeTrace' java.lang.StackTraceElement[])])\l  (r5 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:116)\l0x0042: APUT  \l  (r3 I:??[OBJECT, ARRAY][] A[D('mergedStackTrace' java.lang.StackTraceElement[])])\l  (r5 I:??[int, short, byte, char] A[D('i' int)])\l  (r6 I:??[OBJECT, ARRAY])\l \l}"];
Node_40 [shape=record,label="{40\:\ 0x0045|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0045|0x0045: INVOKE  (r4 I:java.util.Iterator) = (r10 I:java.util.ArrayDeque A[D('resultStackTrace' java.util.ArrayDeque)]) type: VIRTUAL call: java.util.ArrayDeque.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:119)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0049|LOOP_START\lLOOP:1: B:35:0x0049\-\>B:37:0x004f\l|0x0049: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x004d|0x004d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x005d \l}"];
Node_37 [shape=record,label="{37\:\ 0x004f|LOOP_END\lLOOP:1: B:35:0x0049\-\>B:37:0x004f\l|0x004f: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0050: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0052: INVOKE  (r6 I:java.lang.Object) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0056: CHECK_CAST (r6 I:java.lang.StackTraceElement) = (java.lang.StackTraceElement) (r6 I:??[OBJECT, ARRAY]) \l0x0058: ARITH  (r7 I:int) = (r1 I:int A[D('size' int)]) + (r5 I:int A[D('index' int)])  (LINE:120)\l0x005a: APUT  \l  (r3 I:??[OBJECT, ARRAY][] A[D('mergedStackTrace' java.lang.StackTraceElement[])])\l  (r7 I:??[int, short, byte, char])\l  (r6 I:??[OBJECT, ARRAY] A[D('element' java.lang.StackTraceElement)])\l \l}"];
Node_41 [shape=record,label="{41\:\ 0x005d|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x005d|0x005d: INVOKE  \l  (r9 I:java.lang.Throwable A[D('result' java.lang.Throwable)])\l  (r3 I:java.lang.StackTraceElement[] A[D('mergedStackTrace' java.lang.StackTraceElement[])])\l type: VIRTUAL call: java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[]):void A[MD:(java.lang.StackTraceElement[]):void (c)] (LINE:123)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0060|RETURN\l|0x0060: RETURN  (r9 I:E extends java.lang.Throwable A[D('result' java.lang.Throwable)])  (LINE:124)\l}"];
MethodNode[shape=record,label="{private static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.createFinalException((r8 I:E extends java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:E extends java.lang.Throwable A[D('result' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.ArrayDeque\<java.lang.StackTraceElement\> A[D('resultStackTrace' java.util.ArrayDeque), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0032 \-\> B:22:?, BACK_EDGE: B:33:0x003d \-\> B:32:0x003b, BACK_EDGE: B:37:0x004f \-\> B:35:0x0049, CROSS_EDGE: B:39:0x0060 \-\> B:22:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x0025: r3 '$this$toTypedArray$iv' Ljava\/util\/Collection;\l  0x001b\-0x0025: r4 '$i$f$toTypedArray' I\l  0x001d\-0x0025: r5 'thisCollection$iv' Ljava\/util\/Collection;\l  0x002b\-0x0033: r3 '$this$toTypedArray$iv' Ljava\/util\/Collection;\l  0x002b\-0x0033: r4 '$i$f$toTypedArray' I\l  0x002b\-0x0033: r5 'thisCollection$iv' Ljava\/util\/Collection;\l  0x003e\-0x0045: r5 'i' I\l  0x0050\-0x005d: r5 'index' I\l  0x0058\-0x005d: r6 'element' Ljava\/lang\/StackTraceElement;\l  0x000d\-0x0060: r0 'causeTrace' [Ljava\/lang\/StackTraceElement;\l  0x0013\-0x0060: r1 'size' I\l  0x003a\-0x0060: r3 'mergedStackTrace' [Ljava\/lang\/StackTraceElement;\l  \-1 \-0x0060: r8 'cause' Ljava\/lang\/Throwable;\l  \-1 \-0x0060: r9 'result' Ljava\/lang\/Throwable;\l  \-1 \-0x0060: r10 'resultStackTrace' Ljava\/util\/ArrayDeque;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;TE;Ljava\/util\/ArrayDeque\<Ljava\/lang\/StackTraceElement;\>;)TE;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_22;
Node_29 -> Node_30;
Node_30 -> Node_22;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_32;
Node_40 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_41;
Node_37 -> Node_35;
Node_41 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_22;
}

