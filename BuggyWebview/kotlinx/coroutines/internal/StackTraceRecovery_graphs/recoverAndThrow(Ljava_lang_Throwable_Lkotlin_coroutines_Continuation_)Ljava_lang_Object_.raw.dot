digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.recoverAndThrow(Ljava\/lang\/Throwable;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getRECOVER_STACK_TRACES():boolean A[MD:():boolean (m)] (LINE:158)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0016 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$completion' kotlin.coroutines.Continuation)])  (LINE:159)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INSTANCE_OF  (r3 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('it' kotlin.coroutines.Continuation)]) kotlin.coroutines.jvm.internal.CoroutineStackFrame  (LINE:160)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000e \l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|0x000d: THROW  (r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|0x000e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('it' kotlin.coroutines.Continuation)])  (LINE:161)\l0x000f: CHECK_CAST (r3 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) (r3 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r3 I:java.lang.Throwable) = \l  (r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable)])\l  (r3 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame)\l type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.access$recoverFromStackFrame(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.lang.Throwable A[MD:(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.lang.Throwable (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0015|0x0015: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|0x0016: THROW  (r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable)])  (LINE:158)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Object kotlinx.coroutines.internal.StackTraceRecoveryKt.recoverAndThrow((r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.coroutines.Continuation\<?\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0015 \-\> B:11:?, CROSS_EDGE: B:19:0x0016 \-\> B:11:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0016: r1 'it' Lkotlin\/coroutines\/Continuation;\l  0x0009\-0x0016: r2 '$i$a$\-suspendCoroutineUninterceptedOrReturn\-StackTraceRecoveryKt$recoverAndThrow$2' I\l  0x0001\-0x0016: r0 '$i$f$recoverAndThrow' I\l  \-1 \-0x0016: r4 'exception' Ljava\/lang\/Throwable;\l  \-1 \-0x0016: r5 '$completion' Lkotlin\/coroutines\/Continuation;\lSIGNATURE: (Ljava\/lang\/Throwable;Lkotlin\/coroutines\/Continuation\<*\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

