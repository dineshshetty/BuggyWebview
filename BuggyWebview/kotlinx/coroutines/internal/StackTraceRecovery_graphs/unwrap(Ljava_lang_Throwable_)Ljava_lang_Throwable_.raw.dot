digraph "CFG forkotlinx.coroutines.internal.StackTraceRecoveryKt.unwrap(Ljava\/lang\/Throwable;)Ljava\/lang\/Throwable;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getRECOVER_STACK_TRACES():boolean A[MD:():boolean (m)] (LINE:167)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0009 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Throwable)]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000d: RETURN  (r1 I:E extends java.lang.Throwable) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|0x0009: INVOKE  (r1 I:java.lang.Throwable) = (r2 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.unwrapImpl(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: RETURN  (r1 I:E extends java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final E extends java.lang.Throwable kotlinx.coroutines.internal.StackTraceRecoveryKt.unwrap((r2 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0009 \-\> B:14:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000d: r0 '$i$f$unwrap' I\l  \-1 \-0x000d: r2 'exception' Ljava\/lang\/Throwable;\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)TE;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

