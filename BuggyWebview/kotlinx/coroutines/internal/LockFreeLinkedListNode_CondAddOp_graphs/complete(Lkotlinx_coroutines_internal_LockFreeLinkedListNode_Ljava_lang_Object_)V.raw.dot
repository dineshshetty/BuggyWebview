digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Ljava\/lang\/Object;)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('failure' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0004  (LINE:80)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0002|0x0002: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('success' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000a  (LINE:81)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|0x0007: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.newNode kotlinx.coroutines.internal.LockFreeLinkedListNode \l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('update' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:?  (LINE:82)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|0x000e: SGET  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x0010: INVOKE  (r2 I:boolean) = \l  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r5 I:java.lang.Object A[D('affected' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r4 I:java.lang.Object)\l  (r1 I:java.lang.Object A[D('update' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:? \l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('success' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:?  (LINE:84)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|0x0018: IGET  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.newNode kotlinx.coroutines.internal.LockFreeLinkedListNode \l0x001a: IGET  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.oldNext kotlinx.coroutines.internal.LockFreeLinkedListNode \l0x001c: INVOKE  (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x001f: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode), (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: STATIC call: kotlinx.coroutines.internal.LockFreeLinkedListNode.access$finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):void (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|RETURN\lORIG_RETURN\l|0x0022: RETURN    (LINE:86)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0022: RETURN   A[SYNTHETIC] (LINE:86)\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x0022: RETURN   A[SYNTHETIC] (LINE:86)\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0022: RETURN   A[SYNTHETIC] (LINE:86)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.oldNext kotlinx.coroutines.internal.LockFreeLinkedListNode \l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete((r4 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('affected' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[D('failure' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0016 \-\> B:30:0x0022, CROSS_EDGE: B:27:0x0014 \-\> B:30:0x0022, CROSS_EDGE: B:25:0x000c \-\> B:30:0x0022, CROSS_EDGE: B:24:0x000a \-\> B:25:0x000c, CROSS_EDGE: B:21:0x0004 \-\> B:22:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0022: r0 'success' Z\l  0x000c\-0x0022: r1 'update' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0022: r5 'affected' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0022: r6 'failure' Ljava\/lang\/Object;\lREPLACED_BY: kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object):void\lBRIDGED_BY: kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object):void\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicOp.complete(T, java.lang.Object):void]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_32;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_33;
Node_29 -> Node_30;
Node_30 -> Node_18;
Node_33 -> Node_18;
Node_32 -> Node_18;
Node_31 -> Node_18;
Node_24 -> Node_25;
Node_21 -> Node_22;
}

