digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Ljava\/lang\/Object;)V" {
subgraph cluster_Region_609204790 {
label = "R(3:1|3|(1:(1:9)))";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0000|boolean r0 = r6 == null\l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|PHI: r0 \l  PHI: (r0v1 'success' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.internal.LockFreeLinkedListNode r1 = r0 ? r4.newNode : r4.oldNext\l}"];
subgraph cluster_Region_723120809 {
label = "R(1:(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_113509259 {
label = "IF [B:25:0x000c, B:27:0x0014, B:28:0x0016] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x000c|PHI: r1 \l  PHI: (r1v1 'update' kotlinx.coroutines.internal.LockFreeLinkedListNode) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 != null) goto L6\l}"];
Node_27 [shape=record,label="{27\:\ 0x0014|ADDED_TO_REGION\l|if (androidx.concurrent.futures.C0125xc40028dd.m112m(kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU, r5, r4, r1) != false) goto L8\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|ADDED_TO_REGION\l|if (r0 != false) goto L9\l}"];
subgraph cluster_Region_1990051090 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0018|kotlinx.coroutines.internal.LockFreeLinkedListNode kotlinx.coroutines.internal.LockFreeLinkedListNode r2 = r4.newNode\lkotlinx.coroutines.internal.LockFreeLinkedListNode kotlinx.coroutines.internal.LockFreeLinkedListNode r3 = r4.oldNext\lkotlin.jvm.internal.Intrinsics.checkNotNull(r3)\lr2.finishAdd(r3)\l}"];
}
}
}
}
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0002}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0007}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000e}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0022|ORIG_RETURN\l}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|SYNTHETIC\l}"];
Node_32 [shape=record,color=red,label="{32\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
Node_31 [shape=record,color=red,label="{31\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x000a}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0004}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete((r4v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[IMMUTABLE_TYPE, THIS]), (r5v0 'affected' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('affected' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'failure' java.lang.Object A[D('failure' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0016 \-\> B:30:0x0022, CROSS_EDGE: B:27:0x0014 \-\> B:30:0x0022, CROSS_EDGE: B:25:0x000c \-\> B:30:0x0022, CROSS_EDGE: B:24:0x000a \-\> B:25:0x000c, CROSS_EDGE: B:21:0x0004 \-\> B:22:0x0005\lINLINE_NOT_NEEDED\lREPLACED_BY: kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object):void\lBRIDGED_BY: kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.complete(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object):void\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicOp.complete(T, java.lang.Object):void]\l}"];
MethodNode -> Node_17;Node_19 -> Node_20;
Node_19 -> Node_21;
Node_22 -> Node_23;
Node_22 -> Node_24;
Node_25 -> Node_26;
Node_25 -> Node_31[style=dashed];
Node_27 -> Node_28;
Node_27 -> Node_32[style=dashed];
Node_28 -> Node_29;
Node_28 -> Node_33[style=dashed];
Node_29 -> Node_30;
Node_17 -> Node_19;
Node_20 -> Node_22;
Node_23 -> Node_25;
Node_26 -> Node_27;
Node_30 -> Node_18;
Node_33 -> Node_18;
Node_32 -> Node_18;
Node_31 -> Node_18;
Node_24 -> Node_25;
Node_21 -> Node_22;
}

