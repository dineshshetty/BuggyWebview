digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.perform(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_33 [shape=record,label="{33\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:415)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0017 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:672)\l0x0007: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.affected kotlinx.coroutines.internal.LockFreeLinkedListNode  (LINE:415)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0009|0x0009: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('affected' java.lang.Object)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x000d \l}"];
Node_39 [shape=record,label="{39\:\ 0x000b|0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0011 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0013: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x000d|0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0017|0x0017: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('affected' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x007e  (LINE:416)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0019|0x0019: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('affected' java.lang.Object)]) \l0x001a: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x001c: IGET  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc  (LINE:417)\l0x001e: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc)\l  (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.onPrepare(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):java.lang.Object A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):java.lang.Object (m)]\l0x0022: SGET  (r1 I:java.lang.Object) =  kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED java.lang.Object  (LINE:418)\l0x0024: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0025|0x0025: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decision' java.lang.Object)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0046 \l}"];
Node_48 [shape=record,label="{48\:\ 0x0027|0x0027: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.next kotlinx.coroutines.internal.LockFreeLinkedListNode  (LINE:420)\l0x0029: INVOKE  (r3 I:kotlinx.coroutines.internal.Removed) = \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: STATIC call: kotlinx.coroutines.internal.LockFreeLinkedListNode.access$removed(kotlinx.coroutines.internal.LockFreeLinkedListNode):kotlinx.coroutines.internal.Removed A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode):kotlinx.coroutines.internal.Removed (m)] (LINE:421)\l0x002d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('affected' java.lang.Object)])  (LINE:422)\l0x002e: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r4 I:??[OBJECT, ARRAY]) \l0x0030: SGET  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x0032: INVOKE  (r4 I:boolean) = \l  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r4 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l  (r3 I:java.lang.Object A[D('removed' kotlinx.coroutines.internal.Removed)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0036|0x0036: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0043 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0038|0x0038: IGET  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc  (LINE:424)\l0x003a: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('affected' java.lang.Object)]) \l0x003b: CHECK_CAST (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r5 I:??[OBJECT, ARRAY]) \l0x003d: INVOKE  \l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc)\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.onRemoved(kotlinx.coroutines.internal.LockFreeLinkedListNode):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode):void (m)]\l0x0040: INVOKE  \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r2 I:kotlinx.coroutines.internal.OpDescriptor)\l type: STATIC call: kotlinx.coroutines.internal.LockFreeLinkedListNode.access$correctPrev(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.OpDescriptor):kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.OpDescriptor):kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:427)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0043|0x0043: SGET  (r2 I:java.lang.Object) =  kotlinx.coroutines.internal.LockFreeLinkedList_commonKt.REMOVE_PREPARED java.lang.Object  (LINE:429)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0045|RETURN\l|0x0045: RETURN  (r2 I:java.lang.Object) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0046|0x0046: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decision' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x0051  (LINE:432)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0048|0x0048: INVOKE  (r1 I:kotlinx.coroutines.internal.AtomicOp) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.getAtomicOp():kotlinx.coroutines.internal.AtomicOp A[MD:():kotlinx.coroutines.internal.AtomicOp\<?\> (m)] (LINE:434)\l0x004c: INVOKE  (r1 I:java.lang.Object) = (r1 I:kotlinx.coroutines.internal.AtomicOp), (r0 I:java.lang.Object A[D('decision' java.lang.Object)]) type: VIRTUAL call: kotlinx.coroutines.internal.AtomicOp.decide(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_56 [shape=record,label="{56\:\ 0x0059|0x005b: SGET  (r3 I:java.lang.Object) =  kotlinx.coroutines.internal.AtomicKt.NO_DECISION java.lang.Object  (LINE:439)\l}"];
Node_57 [shape=record,label="{57\:\ 0x005d|0x005d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('consensus' java.lang.Object)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0064 \l}"];
Node_58 [shape=record,label="{58\:\ 0x005f|0x005f: INVOKE  (r3 I:kotlinx.coroutines.internal.AtomicOp) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.getAtomicOp():kotlinx.coroutines.internal.AtomicOp A[MD:():kotlinx.coroutines.internal.AtomicOp\<?\> (m)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x0074|0x0075: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('affected' java.lang.Object)])  (LINE:443)\l0x0076: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r4 I:??[OBJECT, ARRAY]) \l0x0078: SGET  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x007a: INVOKE  \l  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r4 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l  (r3 I:java.lang.Object A[D('update' java.lang.Object)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_63 [shape=record,label="{63\:\ 0x007d|RETURN\l|0x007d: RETURN  (r2 I:java.lang.Object)  (LINE:444)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0064|0x0064: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('consensus' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0072  (LINE:440)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0066|0x0066: IGET  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc \l0x0068: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('affected' java.lang.Object)]) \l0x0069: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r4 I:??[OBJECT, ARRAY]) \l0x006b: IGET  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.next kotlinx.coroutines.internal.LockFreeLinkedListNode \l0x006d: INVOKE  (r3 I:java.lang.Object) = \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc)\l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.updatedNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):java.lang.Object A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):java.lang.Object (m)]\l}"];
Node_61 [shape=record,label="{61\:\ 0x0072|0x0072: IGET  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.next kotlinx.coroutines.internal.LockFreeLinkedListNode  (LINE:441)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0051|0x0051: INVOKE  (r1 I:kotlinx.coroutines.internal.AtomicOp) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.getAtomicOp():kotlinx.coroutines.internal.AtomicOp A[MD:():kotlinx.coroutines.internal.AtomicOp\<?\> (m)] (LINE:436)\l0x0055: INVOKE  (r1 I:java.lang.Object) = (r1 I:kotlinx.coroutines.internal.AtomicOp) type: VIRTUAL call: kotlinx.coroutines.internal.AtomicOp.getConsensus():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_64 [shape=record,label="{64\:\ 0x007e|0x007e: NEW_INSTANCE  (r0 I:java.lang.NullPointerException A[D('decision' java.lang.Object)]) =  java.lang.NullPointerException  (LINE:416)\l0x0080: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlinx.coroutines.internal.LockFreeLinkedListNode\{ kotlinx.coroutines.internal.LockFreeLinkedListKt.Node \}\" \l0x0082: INVOKE  (r0 I:java.lang.NullPointerException), (r1 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_65 [shape=record,label="{65\:\ 0x0085|0x0085: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.perform((r6 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[D('affected' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:52:0x0045 \-\> B:34:?, CROSS_EDGE: B:49:0x0036 \-\> B:51:0x0043, CROSS_EDGE: B:63:0x007d \-\> B:34:?, CROSS_EDGE: B:60:0x0066 \-\> B:62:0x0074, CROSS_EDGE: B:61:0x0072 \-\> B:62:0x0074, CROSS_EDGE: B:55:0x0051 \-\> B:56:0x0059, CROSS_EDGE: B:65:0x0085 \-\> B:34:?, CROSS_EDGE: B:40:0x000d \-\> B:41:0x000e, CROSS_EDGE: B:36:0x0004 \-\> B:45:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x000e: r0 '$i$a$\-assert\-LockFreeLinkedListNode$PrepareOp$perform$1' I\l  0x0029\-0x0046: r1 'next' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x002d\-0x0046: r3 'removed' Lkotlinx\/coroutines\/internal\/Removed;\l  0x0022\-0x007e: r0 'decision' Ljava\/lang\/Object;\l  0x005a\-0x007e: r1 'consensus' Ljava\/lang\/Object;\l  0x0075\-0x007e: r3 'update' Ljava\/lang\/Object;\l  \-1 \-0x0085: r7 'affected' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.OpDescriptor.perform(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_33;Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_45;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_41;
Node_41 -> Node_43;
Node_41 -> Node_45[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_34;
Node_40 -> Node_41;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_64;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_53;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_34;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_54 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_34;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_62;
Node_61 -> Node_62;
Node_55 -> Node_56;
Node_64 -> Node_65;
Node_65 -> Node_34;
}

