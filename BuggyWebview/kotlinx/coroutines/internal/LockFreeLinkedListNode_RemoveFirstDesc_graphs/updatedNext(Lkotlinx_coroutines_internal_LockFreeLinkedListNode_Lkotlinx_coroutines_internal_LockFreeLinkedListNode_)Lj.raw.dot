digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.updatedNext(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)Ljava\/lang\/Object;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.internal.Removed) = \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: STATIC call: kotlinx.coroutines.internal.LockFreeLinkedListNode.access$removed(kotlinx.coroutines.internal.LockFreeLinkedListNode):kotlinx.coroutines.internal.Removed A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode):kotlinx.coroutines.internal.Removed (m)] (LINE:395)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:java.lang.Object) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.updatedNext((r1 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc\<T\> A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('affected' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0004: r2 'affected' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0004: r3 'next' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.updatedNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):java.lang.Object]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

