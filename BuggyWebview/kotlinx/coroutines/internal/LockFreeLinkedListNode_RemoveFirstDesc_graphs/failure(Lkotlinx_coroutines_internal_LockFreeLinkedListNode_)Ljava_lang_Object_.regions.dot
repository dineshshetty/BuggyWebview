digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.failure(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)Ljava\/lang\/Object;" {
subgraph cluster_Region_846116700 {
label = "R(1:(2:(1:4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1488742246 {
label = "R(2:(1:4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1830354213 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r2 == r1.queue) goto L3\l}"];
subgraph cluster_Region_1339914274 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return kotlinx.coroutines.internal.LockFreeLinkedListKt.getLIST_EMPTY()\l}"];
}
}
subgraph cluster_Region_139387602 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0009|RETURN\lORIG_RETURN\l|return null\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected java.lang.Object kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.failure((r1v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc\<T\> A[IMMUTABLE_TYPE, THIS]), (r2v0 'affected' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('affected' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0009 \-\> B:14:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.failure(kotlinx.coroutines.internal.LockFreeLinkedListNode):java.lang.Object]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_15 -> Node_9;
Node_13 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_15;
}

