digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.retry(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1618599366 {
label = "R(1:(2:(2:5|6)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_822755996 {
label = "R(2:(2:5|6)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_127785880 {
label = "IF [B:11:0x0002] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if ((r3 instanceof kotlinx.coroutines.internal.Removed) == true) goto L5\l}"];
subgraph cluster_Region_2005083745 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0006|((kotlinx.coroutines.internal.Removed) r3).ref.helpRemovePrev()\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1505383098 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|RETURN\l|return false\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected final boolean kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.retry((r1v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc\<T\> A[IMMUTABLE_TYPE, THIS]), (r2v0 'affected' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('affected' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'next' java.lang.Object A[D('next' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.retry(kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Object):boolean]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_12 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
}

