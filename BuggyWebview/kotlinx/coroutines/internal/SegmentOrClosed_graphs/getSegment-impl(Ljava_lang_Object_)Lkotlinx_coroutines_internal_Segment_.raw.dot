digraph "CFG forkotlinx.coroutines.internal.SegmentOrClosed.getSegment\-impl(Ljava\/lang\/Object;)Lkotlinx\/coroutines\/internal\/Segment;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListKt.access$getCLOSED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:235)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('arg0' java.lang.Object)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0014 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('arg0' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('arg0' java.lang.Object)]) \l0x0009: CHECK_CAST (r0 I:kotlinx.coroutines.internal.Segment) = (kotlinx.coroutines.internal.Segment) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:S extends kotlinx.coroutines.internal.Segment\<S\>) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:java.lang.NullPointerException) =  java.lang.NullPointerException \l0x000e: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type S of kotlinx.coroutines.internal.SegmentOrClosed\" \l0x0010: INVOKE  (r0 I:java.lang.NullPointerException), (r1 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"Does not contain segment\" \l0x0018: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001c: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final S extends kotlinx.coroutines.internal.Segment\<S\> kotlinx.coroutines.internal.SegmentOrClosed.getSegment\-impl((r2 I:java.lang.Object A[D('arg0' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0013 \-\> B:12:?, CROSS_EDGE: B:21:0x001f \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001f: r2 'arg0' Ljava\/lang\/Object;\lSIGNATURE: (Ljava\/lang\/Object;)TS;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

