digraph "CFG forkotlinx.coroutines.internal.SegmentOrClosed.getSegment\-impl(Ljava\/lang\/Object;)Lkotlinx\/coroutines\/internal\/Segment;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0004|if (r2 == kotlinx.coroutines.internal.ConcurrentLinkedList.CLOSED) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|if (r2 == null) goto L7\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008}"];
Node_17 [shape=record,label="{17\:\ 0x000b|RETURN\l|return (S) r2\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c}"];
Node_19 [shape=record,label="{19\:\ 0x0013|throw new java.lang.NullPointerException(\"null cannot be cast to non\-null type S of kotlinx.coroutines.internal.SegmentOrClosed\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014}"];
Node_21 [shape=record,label="{21\:\ 0x001f|throw new java.lang.IllegalStateException(\"Does not contain segment\".toString())\l}"];
MethodNode[shape=record,label="{public static final S extends kotlinx.coroutines.internal.Segment\<S\> kotlinx.coroutines.internal.SegmentOrClosed.getSegment\-impl((r2v0 'arg0' java.lang.Object A[D('arg0' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0013 \-\> B:12:?, CROSS_EDGE: B:21:0x001f \-\> B:12:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends kotlinx.coroutines.internal.Segment\<S\>]\lSIGNATURE: (Ljava\/lang\/Object;)TS;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

