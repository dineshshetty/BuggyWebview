digraph "CFG forkotlinx.coroutines.internal.Segment.tryIncPointers$kotlinx_coroutines_core()Z" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000}"];
Node_22 [shape=record,label="{22\:\ 0x0004|LOOP_START\lLOOP:0: B:22:0x0004\-\>B:32:0x0026\l|int r3 = r9.cleanedAndPointers\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|if (r3 != getMaxSlots()) goto L15\l}"];
Node_24 [shape=record,label="{24\:\ 0x0011}"];
Node_25 [shape=record,label="{25\:\ 0x0015|if (isTail() == false) goto L6\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|r4 = 0\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|PHI: r4 \l  PHI: (r4v2 'it' int) = (r4v1 'it' int), (r4v5 'it' int) binds: [B:28:0x001a, B:27:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 != 0) goto L8\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e}"];
Node_32 [shape=record,label="{32\:\ 0x0026|LOOP_END\lLOOP:0: B:22:0x0004\-\>B:32:0x0026\l|if (kotlinx.coroutines.internal.Segment.cleanedAndPointers$FU.compareAndSet(r9, r3, r3 + 65536) == false) goto L2\l}"];
Node_35 [shape=record,label="{35\:\ 0x0028|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0028|RETURN\lORIG_RETURN\l|return true\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|r4 = 1\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.Segment.tryIncPointers$kotlinx_coroutines_core((r9v0 'this' kotlinx.coroutines.internal.Segment\<S extends kotlinx.coroutines.internal.Segment\<S\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0026 \-\> B:22:0x0004, CROSS_EDGE: B:29:0x001b \-\> B:34:0x0029, CROSS_EDGE: B:28:0x001a \-\> B:29:0x001b, CROSS_EDGE: B:23:0x000f \-\> B:28:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: [S extends kotlinx.coroutines.internal.Segment\<S\>]\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_36[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_22;
Node_32 -> Node_35[style=dashed];
Node_35 -> Node_33;
Node_33 -> Node_20;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_28 -> Node_29;
}

