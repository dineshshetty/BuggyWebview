digraph "CFG forkotlinx.coroutines.internal.Segment.tryIncPointers$kotlinx_coroutines_core()Z" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (65536(0x10000, float:9.1835E\-41) ??[int, float, short, byte, char])  (LINE:210)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|LOOP_START\lLOOP:0: B:22:0x0004\-\>B:32:0x0026\l|0x0005: IGET  (r3 I:int) = (r1 I:kotlinx.coroutines.internal.Segment A[D('$this$addConditionally$iv' kotlinx.coroutines.internal.Segment)]) kotlinx.coroutines.internal.Segment.cleanedAndPointers int  (LINE:244)\l0x0007: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('cur$iv' int)])  (LINE:245)\l0x0008: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INVOKE  (r6 I:int) = (r9 I:kotlinx.coroutines.internal.Segment) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getMaxSlots():int A[MD:():int (m)] (LINE:210)\l0x000d: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|0x000f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' int)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x001a \l}"];
Node_24 [shape=record,label="{24\:\ 0x0011|0x0011: INVOKE  (r6 I:boolean) = (r9 I:kotlinx.coroutines.internal.Segment) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.isTail():boolean A[MD:():boolean (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|0x0015: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0018 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001e \l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|0x001e: SGET  (r4 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.internal.Segment.cleanedAndPointers$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:246)\l0x0020: ARITH  (r5 I:int) = (r3 I:int A[D('cur$iv' int)]) + (r0 I:int A[D('delta$iv' int)]) \l0x0022: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater)\l  (r1 I:java.lang.Object A[D('$this$addConditionally$iv' kotlinx.coroutines.internal.Segment)])\l  (r3 I:int A[D('cur$iv' int)])\l  (r5 I:int)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.lang.Object, int, int):boolean A[MD:(T, int, int):boolean (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0026|LOOP_END\lLOOP:0: B:22:0x0004\-\>B:32:0x0026\l|0x0026: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0004 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0028|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0028|RETURN\lORIG_RETURN\l|0x0028: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0029: RETURN  (r7 I:boolean)  (LINE:210)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|0x0029: RETURN  (r7 I:boolean) A[SYNTHETIC] (LINE:210)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|0x001a: CONST  (r4 I:??[boolean, int, float, short, byte, char] A[D('it' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.Segment.tryIncPointers$kotlinx_coroutines_core((r9 'this' I:kotlinx.coroutines.internal.Segment\<S extends kotlinx.coroutines.internal.Segment\<S\>\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0026 \-\> B:22:0x0004, CROSS_EDGE: B:29:0x001b \-\> B:34:0x0029, CROSS_EDGE: B:28:0x001a \-\> B:29:0x001b, CROSS_EDGE: B:23:0x000f \-\> B:28:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x001b: r4 'it' I\l  0x0009\-0x001b: r5 '$i$a$\-addConditionally\-Segment$tryIncPointers$1' I\l  0x0002\-0x0029: r0 'delta$iv' I\l  0x0003\-0x0029: r1 '$this$addConditionally$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0004\-0x0029: r2 '$i$f$addConditionally' I\l  0x0007\-0x0029: r3 'cur$iv' I\lTYPE_VARS: [S extends kotlinx.coroutines.internal.Segment\<S\>]\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_36[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_22;
Node_32 -> Node_35[style=dashed];
Node_35 -> Node_33;
Node_33 -> Node_20;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_28 -> Node_29;
}

