digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.complete(Lkotlinx\/coroutines\/internal\/AtomicOp;Ljava\/lang\/Object;)V" {
Node_45 [shape=record,label="{45\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:511)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0002|0x0002: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('failure' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0006 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0004|0x0004: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0007|0x0007: INVOKE  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r7 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.getAffectedNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:512)\l}"];
Node_52 [shape=record,label="{52\:\ 0x000b|0x000b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x0026 \l}"];
Node_53 [shape=record,label="{53\:\ 0x000d|0x000d: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x000e: CHECK_CAST (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = (kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) (r3 I:??[OBJECT, ARRAY]) \l0x0010: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:672)\l0x0011: INVOKE  (r5 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:512)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0015|0x0015: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0025 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0017|0x0017: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:672)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('success' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x001b  (LINE:512)\l}"];
Node_58 [shape=record,label="{58\:\ 0x001b|0x001b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x001c|0x001c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x001f \l}"];
Node_61 [shape=record,label="{61\:\ 0x001f|0x001f: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0021: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x0024|0x0024: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_46 [shape=record,label="{46\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_86 [shape=record,label="{86\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN   A[SYNTHETIC]\l}"];
Node_63 [shape=record,label="{63\:\ 0x0025|RETURN\lORIG_RETURN\l|0x0025: RETURN   \l}"];
Node_64 [shape=record,label="{64\:\ 0x0026|0x0026: INVOKE  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r7 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.getOriginalNext():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:513)\l}"];
Node_65 [shape=record,label="{65\:\ 0x002a|0x002a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x0045 \l}"];
Node_66 [shape=record,label="{66\:\ 0x002c|0x002c: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x002d: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = (kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) (r4 I:??[OBJECT, ARRAY]) \l0x002f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:672)\l0x0030: INVOKE  (r6 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:513)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0034|0x0034: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0044 \l}"];
Node_68 [shape=record,label="{68\:\ 0x0036|0x0036: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:672)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0037|0x0037: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('success' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x003a  (LINE:513)\l}"];
Node_71 [shape=record,label="{71\:\ 0x003a|0x003a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_72 [shape=record,label="{72\:\ 0x003b|0x003b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x003e \l}"];
Node_74 [shape=record,label="{74\:\ 0x003e|0x003e: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0040: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_75 [shape=record,label="{75\:\ 0x0043|0x0043: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_87 [shape=record,label="{87\:\ ?|SYNTHETIC\lRETURN\l|0x0044: RETURN   A[SYNTHETIC]\l}"];
Node_76 [shape=record,label="{76\:\ 0x0044|RETURN\lORIG_RETURN\l|0x0044: RETURN   \l}"];
Node_77 [shape=record,label="{77\:\ 0x0045|0x0045: MOVE  (r0 I:??[OBJECT, ARRAY]) = \l  (r4 I:??[OBJECT, ARRAY] A[D('$this$complete_u24lambda_u2d4' kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc)])\l \l}"];
Node_78 [shape=record,label="{78\:\ 0x0046|0x0046: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('success' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x004d  (LINE:514)\l}"];
Node_79 [shape=record,label="{79\:\ 0x0048|0x0048: INVOKE  (r1 I:java.lang.Object) = \l  (r7 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc)\l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('affectedNode' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('originalNext' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.updatedNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):java.lang.Object A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):java.lang.Object (m)]\l}"];
Node_81 [shape=record,label="{81\:\ 0x004e|0x004e: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:515)\l0x0050: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object A[D('affectedNode' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r8 I:java.lang.Object A[D('op' kotlinx.coroutines.internal.AtomicOp)])\l  (r1 I:java.lang.Object A[D('update' java.lang.Object)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_82 [shape=record,label="{82\:\ 0x0054|0x0054: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:? \l}"];
Node_83 [shape=record,label="{83\:\ 0x0056|0x0056: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('success' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:?  (LINE:516)\l}"];
Node_84 [shape=record,label="{84\:\ 0x0058|0x0058: INVOKE  \l  (r7 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc)\l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('affectedNode' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('originalNext' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.finishOnSuccess(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):void (m)]\l}"];
Node_85 [shape=record,label="{85\:\ 0x005b|RETURN\lORIG_RETURN\l|0x005b: RETURN    (LINE:518)\l}"];
Node_89 [shape=record,label="{89\:\ ?|SYNTHETIC\lRETURN\l|0x005b: RETURN   A[SYNTHETIC] (LINE:518)\l}"];
Node_88 [shape=record,label="{88\:\ ?|SYNTHETIC\lRETURN\l|0x005b: RETURN   A[SYNTHETIC] (LINE:518)\l}"];
Node_80 [shape=record,label="{80\:\ 0x004d|0x004d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('originalNext' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0006|0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.complete((r7 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlinx.coroutines.internal.AtomicOp\<?\> A[D('op' kotlinx.coroutines.internal.AtomicOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Object A[D('failure' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:63:0x0025 \-\> B:46:?, CROSS_EDGE: B:56:0x0018 \-\> B:59:0x001c, CROSS_EDGE: B:54:0x0015 \-\> B:63:0x0025, CROSS_EDGE: B:75:0x0043 \-\> B:46:?, CROSS_EDGE: B:76:0x0044 \-\> B:46:?, CROSS_EDGE: B:69:0x0037 \-\> B:72:0x003b, CROSS_EDGE: B:67:0x0034 \-\> B:76:0x0044, CROSS_EDGE: B:85:0x005b \-\> B:46:?, CROSS_EDGE: B:83:0x0056 \-\> B:85:0x005b, CROSS_EDGE: B:82:0x0054 \-\> B:85:0x005b, CROSS_EDGE: B:80:0x004d \-\> B:81:0x004e, CROSS_EDGE: B:50:0x0006 \-\> B:51:0x0007\lINLINE_NOT_NEEDED\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/AtomicOp\<*\>;Ljava\/lang\/Object;)V\lDebug Info:\l  0x0018\-0x001c: r5 '$i$a$\-assert\-LockFreeLinkedListNode$AbstractAtomicDesc$complete$affectedNode$1$1' I\l  0x0011\-0x0026: r4 '$i$a$\-run\-LockFreeLinkedListNode$AbstractAtomicDesc$complete$affectedNode$1' I\l  0x0010\-0x0026: r3 '$this$complete_u24lambda_u2d2' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$AbstractAtomicDesc;\l  0x0037\-0x003b: r6 '$i$a$\-assert\-LockFreeLinkedListNode$AbstractAtomicDesc$complete$originalNext$1$1' I\l  0x002f\-0x0045: r4 '$this$complete_u24lambda_u2d4' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$AbstractAtomicDesc;\l  0x0030\-0x0045: r5 '$i$a$\-run\-LockFreeLinkedListNode$AbstractAtomicDesc$complete$originalNext$1' I\l  0x0046\-0x005b: r0 'originalNext' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x004e\-0x005b: r1 'update' Ljava\/lang\/Object;\l  0x0007\-0x005b: r2 'success' Z\l  0x0026\-0x005b: r3 'affectedNode' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x005b: r8 'op' Lkotlinx\/coroutines\/internal\/AtomicOp;\l  \-1 \-0x005b: r9 'failure' Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [672=4]\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicDesc.complete(kotlinx.coroutines.internal.AtomicOp\<?\>, java.lang.Object):void]\l}"];
MethodNode -> Node_45;Node_45 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_64;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_63;
Node_55 -> Node_56;
Node_56 -> Node_58;
Node_56 -> Node_59[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_61;
Node_59 -> Node_86[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_46;
Node_86 -> Node_46;
Node_63 -> Node_46;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_77;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_76;
Node_68 -> Node_69;
Node_69 -> Node_71;
Node_69 -> Node_72[style=dashed];
Node_71 -> Node_72;
Node_72 -> Node_74;
Node_72 -> Node_87[style=dashed];
Node_74 -> Node_75;
Node_75 -> Node_46;
Node_87 -> Node_46;
Node_76 -> Node_46;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_88;
Node_83 -> Node_84[style=dashed];
Node_83 -> Node_89;
Node_84 -> Node_85;
Node_85 -> Node_46;
Node_89 -> Node_46;
Node_88 -> Node_46;
Node_80 -> Node_81;
Node_50 -> Node_51;
}

