digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.takeAffectedNode(Lkotlinx\/coroutines\/internal\/OpDescriptor;)Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;" {
subgraph cluster_Region_459055396 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.internal.LockFreeLinkedListNode kotlinx.coroutines.internal.LockFreeLinkedListNode r0 = getAffectedNode()\lkotlin.jvm.internal.Intrinsics.checkNotNull(r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|return r0\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected kotlinx.coroutines.internal.LockFreeLinkedListNode kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.takeAffectedNode((r1v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc A[IMMUTABLE_TYPE, THIS]), (r2v0 'op' kotlinx.coroutines.internal.OpDescriptor A[D('op' kotlinx.coroutines.internal.OpDescriptor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.takeAffectedNode(kotlinx.coroutines.internal.OpDescriptor):kotlinx.coroutines.internal.LockFreeLinkedListNode]\l}"];
MethodNode -> Node_4;Node_6 -> Node_7;
Node_7 -> Node_5;
Node_4 -> Node_6;
}

