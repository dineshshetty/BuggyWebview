digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.complete(Lkotlinx\/coroutines\/internal\/AtomicOp;Ljava\/lang\/Object;)V" {
Node_45 [shape=record,label="{45\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x0000|r0 = true\l}"];
Node_48 [shape=record,label="{48\:\ 0x0002|if (r9 != null) goto L40\l}"];
Node_49 [shape=record,label="{49\:\ 0x0004|r2 = true\l}"];
Node_51 [shape=record,label="{51\:\ 0x0007|PHI: r2 \l  PHI: (r2v1 'success' boolean) = (r2v0 'success' boolean), (r2v2 'success' boolean) binds: [B:50:0x0006, B:49:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.internal.LockFreeLinkedListNode r3 = getAffectedNode()\l}"];
Node_52 [shape=record,label="{52\:\ 0x000b|if (r3 != null) goto L17\l}"];
Node_53 [shape=record,label="{53\:\ 0x000d}"];
Node_54 [shape=record,label="{54\:\ 0x0015|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L16\l}"];
Node_55 [shape=record,label="{55\:\ 0x0017}"];
Node_56 [shape=record,label="{56\:\ 0x0018|if (r2 != false) goto L10\l}"];
Node_58 [shape=record,label="{58\:\ 0x001b|r0 = false\l}"];
Node_59 [shape=record,label="{59\:\ 0x001c|PHI: r0 \l  PHI: (r0v5 boolean) = (r0v0 boolean), (r0v7 boolean) binds: [B:56:0x0018, B:58:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L12\l}"];
Node_61 [shape=record,label="{61\:\ 0x001f}"];
Node_62 [shape=record,label="{62\:\ 0x0024|throw new java.lang.AssertionError()\l}"];
Node_46 [shape=record,label="{46\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_86 [shape=record,label="{86\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_63 [shape=record,label="{63\:\ 0x0025|RETURN\lORIG_RETURN\l|return\l}"];
Node_64 [shape=record,label="{64\:\ 0x0026|kotlinx.coroutines.internal.LockFreeLinkedListNode r4 = getOriginalNext()\l}"];
Node_65 [shape=record,label="{65\:\ 0x002a|if (r4 != null) goto L29\l}"];
Node_66 [shape=record,label="{66\:\ 0x002c}"];
Node_67 [shape=record,label="{67\:\ 0x0034|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L28\l}"];
Node_68 [shape=record,label="{68\:\ 0x0036}"];
Node_69 [shape=record,label="{69\:\ 0x0037|if (r2 != false) goto L23\l}"];
Node_71 [shape=record,label="{71\:\ 0x003a|r0 = false\l}"];
Node_72 [shape=record,label="{72\:\ 0x003b|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v0 boolean), (r0v4 boolean) binds: [B:69:0x0037, B:71:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L25\l}"];
Node_74 [shape=record,label="{74\:\ 0x003e}"];
Node_75 [shape=record,label="{75\:\ 0x0043|throw new java.lang.AssertionError()\l}"];
Node_87 [shape=record,label="{87\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_76 [shape=record,label="{76\:\ 0x0044|RETURN\lORIG_RETURN\l|return\l}"];
Node_77 [shape=record,label="{77\:\ 0x0045}"];
Node_78 [shape=record,label="{78\:\ 0x0046|if (r2 == false) goto L39\l}"];
Node_79 [shape=record,label="{79\:\ 0x0048|java.lang.Object r1 = updatedNext(r3, r4)\l}"];
Node_81 [shape=record,label="{81\:\ 0x004e|PHI: r1 \l  PHI: (r1v2 'update' java.lang.Object) = (r1v1 'update' java.lang.Object), (r1v3 'update' java.lang.Object) binds: [B:80:0x004d, B:79:0x0048] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_82 [shape=record,label="{82\:\ 0x0054|if (androidx.concurrent.futures.C0125xc40028dd.m112m(kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU, r3, r8, r1) == false) goto L38\l}"];
Node_83 [shape=record,label="{83\:\ 0x0056|if (r2 == false) goto L37\l}"];
Node_84 [shape=record,label="{84\:\ 0x0058|finishOnSuccess(r3, r4)\l}"];
Node_85 [shape=record,label="{85\:\ 0x005b|RETURN\lORIG_RETURN\l|return\l}"];
Node_89 [shape=record,label="{89\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_88 [shape=record,label="{88\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_80 [shape=record,label="{80\:\ 0x004d|r1 = r4\l}"];
Node_50 [shape=record,label="{50\:\ 0x0006|r2 = false\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.complete((r7v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc A[IMMUTABLE_TYPE, THIS]), (r8v0 kotlinx.coroutines.internal.AtomicOp\<?\> A[D('op' kotlinx.coroutines.internal.AtomicOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'failure' java.lang.Object A[D('failure' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:63:0x0025 \-\> B:46:?, CROSS_EDGE: B:56:0x0018 \-\> B:59:0x001c, CROSS_EDGE: B:54:0x0015 \-\> B:63:0x0025, CROSS_EDGE: B:75:0x0043 \-\> B:46:?, CROSS_EDGE: B:76:0x0044 \-\> B:46:?, CROSS_EDGE: B:69:0x0037 \-\> B:72:0x003b, CROSS_EDGE: B:67:0x0034 \-\> B:76:0x0044, CROSS_EDGE: B:85:0x005b \-\> B:46:?, CROSS_EDGE: B:83:0x0056 \-\> B:85:0x005b, CROSS_EDGE: B:82:0x0054 \-\> B:85:0x005b, CROSS_EDGE: B:80:0x004d \-\> B:81:0x004e, CROSS_EDGE: B:50:0x0006 \-\> B:51:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/AtomicOp\<*\>;Ljava\/lang\/Object;)V\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [672=4]\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicDesc.complete(kotlinx.coroutines.internal.AtomicOp\<?\>, java.lang.Object):void]\l}"];
MethodNode -> Node_45;Node_45 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_64;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_63;
Node_55 -> Node_56;
Node_56 -> Node_58;
Node_56 -> Node_59[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_61;
Node_59 -> Node_86[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_46;
Node_86 -> Node_46;
Node_63 -> Node_46;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_77;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_76;
Node_68 -> Node_69;
Node_69 -> Node_71;
Node_69 -> Node_72[style=dashed];
Node_71 -> Node_72;
Node_72 -> Node_74;
Node_72 -> Node_87[style=dashed];
Node_74 -> Node_75;
Node_75 -> Node_46;
Node_87 -> Node_46;
Node_76 -> Node_46;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_88;
Node_83 -> Node_84[style=dashed];
Node_83 -> Node_89;
Node_84 -> Node_85;
Node_85 -> Node_46;
Node_89 -> Node_46;
Node_88 -> Node_46;
Node_80 -> Node_81;
Node_50 -> Node_51;
}

