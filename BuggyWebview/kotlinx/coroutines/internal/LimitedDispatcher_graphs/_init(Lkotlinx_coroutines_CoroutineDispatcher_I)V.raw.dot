digraph "CFG forkotlinx.coroutines.internal.LimitedDispatcher.\<init\>(Lkotlinx\/coroutines\/CoroutineDispatcher;I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r2 I:kotlinx.coroutines.CoroutineDispatcher) type: DIRECT call: kotlinx.coroutines.CoroutineDispatcher.\<init\>():void A[MD:():void (m)] (LINE:19)\l0x0003: IPUT  \l  (r3 I:kotlinx.coroutines.CoroutineDispatcher A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher)])\l  (r2 I:kotlinx.coroutines.internal.LimitedDispatcher)\l kotlinx.coroutines.internal.LimitedDispatcher.dispatcher kotlinx.coroutines.CoroutineDispatcher  (LINE:17)\l0x0005: IPUT  (r4 I:int A[D('parallelism' int)]), (r2 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.parallelism int  (LINE:18)\l0x0007: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher)]) kotlinx.coroutines.Delay  (LINE:19)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher)]) \l0x000c: CHECK_CAST (r0 I:kotlinx.coroutines.Delay) = (kotlinx.coroutines.Delay) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: INVOKE  (r0 I:kotlinx.coroutines.Delay) =  type: STATIC call: kotlinx.coroutines.DefaultExecutorKt.getDefaultDelay():kotlinx.coroutines.Delay A[MD:():kotlinx.coroutines.Delay (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IPUT  (r0 I:kotlinx.coroutines.Delay), (r2 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.$$delegate_0 kotlinx.coroutines.Delay \l0x0018: NEW_INSTANCE  (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueue) =  kotlinx.coroutines.internal.LockFreeTaskQueue  (LINE:24)\l0x001a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueue), (r1 I:boolean) type: DIRECT call: kotlinx.coroutines.internal.LockFreeTaskQueue.\<init\>(boolean):void A[MD:(boolean):void (m)]\l0x001e: IPUT  \l  (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueue\<java.lang.Runnable\>)\l  (r2 I:kotlinx.coroutines.internal.LimitedDispatcher)\l kotlinx.coroutines.internal.LimitedDispatcher.queue kotlinx.coroutines.internal.LockFreeTaskQueue \l0x0020: NEW_INSTANCE  (r0 I:java.lang.Object) =  java.lang.Object  (LINE:27)\l0x0022: INVOKE  (r0 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)]\l0x0025: IPUT  (r0 I:java.lang.Object), (r2 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.workerAllocationLock java.lang.Object \l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|RETURN\l|0x0027: RETURN    (LINE:16)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.internal.LimitedDispatcher.\<init\>((r2 'this' I:kotlinx.coroutines.internal.LimitedDispatcher A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.CoroutineDispatcher A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('parallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0010 \-\> B:8:0x0016, CROSS_EDGE: B:5:0x000f \-\> B:6:0x0010\lDebug Info:\l  \-1 \-0x0027: r3 'dispatcher' Lkotlinx\/coroutines\/CoroutineDispatcher;\l  \-1 \-0x0027: r4 'parallelism' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_5 -> Node_6;
}

