digraph "CFG forkotlinx.coroutines.internal.LimitedDispatcher.\<init\>(Lkotlinx\/coroutines\/CoroutineDispatcher;I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r2.dispatcher = r3\lr2.parallelism = r4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if ((r3 instanceof kotlinx.coroutines.Delay) == false) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|kotlinx.coroutines.Delay r0 = (kotlinx.coroutines.Delay) r3\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.Delay) = (r0v1 kotlinx.coroutines.Delay), (r0v8 kotlinx.coroutines.Delay) binds: [B:5:0x000f, B:4:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L6\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|kotlinx.coroutines.Delay r0 = kotlinx.coroutines.DefaultExecutorKt.getDefaultDelay()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|PHI: r0 \l  PHI: (r0v3 kotlinx.coroutines.Delay) = (r0v2 kotlinx.coroutines.Delay), (r0v6 kotlinx.coroutines.Delay) binds: [B:6:0x0010, B:7:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|r2.$$delegate_0 = r0\lr2.queue = new kotlinx.coroutines.internal.LockFreeTaskQueue\<\>(false)\lr2.workerAllocationLock = new java.lang.Object()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|r0 = null\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.internal.LimitedDispatcher.\<init\>((r2v0 'this' kotlinx.coroutines.internal.LimitedDispatcher A[IMMUTABLE_TYPE, THIS]), (r3v0 'dispatcher' kotlinx.coroutines.CoroutineDispatcher A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'parallelism' int A[D('parallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0010 \-\> B:8:0x0016, CROSS_EDGE: B:5:0x000f \-\> B:6:0x0010\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_5 -> Node_6;
}

