digraph "CFG forkotlinx.coroutines.internal.LimitedDispatcher.dispatchYield(Lkotlin\/coroutines\/CoroutineContext;Ljava\/lang\/Runnable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY])  (LINE:73)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: INVOKE  (r2 I:boolean) = \l  (r0 I:kotlinx.coroutines.internal.LimitedDispatcher A[D('this_$iv' kotlinx.coroutines.internal.LimitedDispatcher)])\l  (r8 I:java.lang.Runnable A[D('block' java.lang.Runnable)])\l type: DIRECT call: kotlinx.coroutines.internal.LimitedDispatcher.addAndTryDispatching(java.lang.Runnable):boolean A[MD:(java.lang.Runnable):boolean (m)] (LINE:119)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r2 I:boolean) = (r0 I:kotlinx.coroutines.internal.LimitedDispatcher A[D('this_$iv' kotlinx.coroutines.internal.LimitedDispatcher)]) type: DIRECT call: kotlinx.coroutines.internal.LimitedDispatcher.tryAllocateWorker():boolean A[MD:():boolean (m)] (LINE:126)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0010 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:127)\l0x0011: IGET  (r3 I:kotlinx.coroutines.CoroutineDispatcher) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.dispatcher kotlinx.coroutines.CoroutineDispatcher  (LINE:74)\l0x0013: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0014: CHECK_CAST (r4 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r4 I:??[OBJECT, ARRAY]) \l0x0016: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0017: CHECK_CAST (r5 I:java.lang.Runnable) = (java.lang.Runnable) (r5 I:??[OBJECT, ARRAY]) \l0x0019: INVOKE  (r3 I:kotlinx.coroutines.CoroutineDispatcher), (r4 I:kotlin.coroutines.CoroutineContext), (r5 I:java.lang.Runnable) type: VIRTUAL call: kotlinx.coroutines.CoroutineDispatcher.dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable):void A[MD:(kotlin.coroutines.CoroutineContext, java.lang.Runnable):void (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: RETURN    (LINE:76)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN   A[SYNTHETIC] (LINE:76)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN   A[SYNTHETIC] (LINE:76)\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.internal.LimitedDispatcher.dispatchYield((r6 'this' I:kotlinx.coroutines.internal.LimitedDispatcher A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000d \-\> B:9:0x001e, CROSS_EDGE: B:3:0x0006 \-\> B:9:0x001e\lDebug Info:\l  0x0011\-0x001d: r2 '$i$a$\-dispatchInternal\-LimitedDispatcher$dispatchYield$1' I\l  0x0001\-0x001e: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/LimitedDispatcher;\l  0x0002\-0x001e: r1 '$i$f$dispatchInternal' I\l  \-1 \-0x001e: r7 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x001e: r8 'block' Ljava\/lang\/Runnable;\lMETHOD_OVERRIDE: [kotlinx.coroutines.CoroutineDispatcher.dispatchYield(kotlin.coroutines.CoroutineContext, java.lang.Runnable):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_10[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_11 -> Node_1;
Node_10 -> Node_1;
}

