digraph "CFG forkotlinx.coroutines.internal.LimitedDispatcher.run()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:37)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|LOOP_START\lLOOP:0: B:3:0x0001\-\>B:37:0x0001\l|0x0002: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueue\<java.lang.Runnable\>) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.queue kotlinx.coroutines.internal.LockFreeTaskQueue  (LINE:39)\l0x0004: INVOKE  (r1 I:java.lang.Object) = (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueue) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueue.removeFirstOrNull():java.lang.Object A[MD:():E (m)]\l0x0008: CHECK_CAST (r1 I:java.lang.Runnable) = (java.lang.Runnable) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('task' java.lang.Runnable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0037  (LINE:40)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0011, blocks: (B:5:0x000d), top: B:29:0x000d \}\lCatch: all \-\> 0x0011\l|0x000d: INVOKE  (r1 I:java.lang.Runnable A[D('task' java.lang.Runnable)]) type: INTERFACE call: java.lang.Runnable.run():void A[Catch: all \-\> 0x0011, MD:():void (c), TRY_ENTER, TRY_LEAVE] (LINE:42)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: ARITH  (r0 I:int) = (r0 I:int A[D('fairnessCounter' int)]) + (1 int)  (LINE:47)\l0x001b: CONST  (r2 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r0 I:??[int, byte, short, char] A[D('fairnessCounter' int)]) \< (r2 I:??[int, byte, short, char])  \-\> B:38:0x0001 \l}"];
Node_35 [shape=record,label="{35\:\ 0x001f|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: IGET  (r2 I:kotlinx.coroutines.CoroutineDispatcher) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.dispatcher kotlinx.coroutines.CoroutineDispatcher \l0x0021: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0022: CHECK_CAST (r3 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r3 I:??[OBJECT, ARRAY]) \l0x0024: INVOKE  (r2 I:boolean) = (r2 I:kotlinx.coroutines.CoroutineDispatcher), (r3 I:kotlin.coroutines.CoroutineContext) type: VIRTUAL call: kotlinx.coroutines.CoroutineDispatcher.isDispatchNeeded(kotlin.coroutines.CoroutineContext):boolean A[MD:(kotlin.coroutines.CoroutineContext):boolean (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0001 \l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: IGET  (r2 I:kotlinx.coroutines.CoroutineDispatcher) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.dispatcher kotlinx.coroutines.CoroutineDispatcher  (LINE:50)\l0x002c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x002d: CHECK_CAST (r3 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r3 I:??[OBJECT, ARRAY]) \l0x002f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0030: CHECK_CAST (r4 I:java.lang.Runnable) = (java.lang.Runnable) (r4 I:??[OBJECT, ARRAY]) \l0x0032: INVOKE  (r2 I:kotlinx.coroutines.CoroutineDispatcher), (r3 I:kotlin.coroutines.CoroutineContext), (r4 I:java.lang.Runnable) type: VIRTUAL call: kotlinx.coroutines.CoroutineDispatcher.dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable):void A[MD:(kotlin.coroutines.CoroutineContext, java.lang.Runnable):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0035|RETURN\l|0x0035: RETURN    (LINE:51)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0001|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0001|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x0001\-\>B:37:0x0001\l}"];
Node_38 [shape=record,label="{38\:\ 0x0001|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|ExcHandler: all \-\> 0x0011\l|0x0011: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0011] (LINE:43)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: SGET  (r3 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:44)\l0x0014: CHECK_CAST (r3 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r3 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r3 I:kotlin.coroutines.CoroutineContext), (r2 I:java.lang.Throwable A[D('e' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.CoroutineExceptionHandlerKt.handleCoroutineException(kotlin.coroutines.CoroutineContext, java.lang.Throwable):void A[MD:(kotlin.coroutines.CoroutineContext, java.lang.Throwable):void (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0037|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|0x0037: IGET  (r2 I:java.lang.Object) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.workerAllocationLock java.lang.Object  (LINE:56)\l0x0039: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|0x003a: MONITOR_ENTER  (r2 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)])  (LINE:108)\l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x003c|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x003c|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0059, blocks: (B:19:0x003c, B:23:0x004c), top: B:31:0x003c \}\lCatch: all \-\> 0x0059\l|0x003c: IGET  (r5 I:int) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.runningWorkers int A[Catch: all \-\> 0x0059, TRY_ENTER] (LINE:57)\l0x003e: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) A[Catch: all \-\> 0x0059]\l0x0040: IPUT  (r5 I:int), (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.runningWorkers int A[Catch: all \-\> 0x0059]\l0x0042: IGET  (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueue\<java.lang.Runnable\>) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.queue kotlinx.coroutines.internal.LockFreeTaskQueue A[Catch: all \-\> 0x0059] (LINE:58)\l0x0044: INVOKE  (r5 I:int) = (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueue) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueue.getSize():int A[Catch: all \-\> 0x0059, MD:():int (m), TRY_LEAVE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0048|0x0048: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x004c \l}"];
Node_23 [shape=record,label="{23\:\ 0x004c|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0059, blocks: (B:19:0x003c, B:23:0x004c), top: B:31:0x003c \}\lCatch: all \-\> 0x0059\l|0x004c: IGET  (r5 I:int) = (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.runningWorkers int A[Catch: all \-\> 0x0059, TRY_ENTER] (LINE:59)\l0x004e: ARITH  (r5 I:int) = (r5 I:int) + (1 int) A[Catch: all \-\> 0x0059]\l0x0050: IPUT  (r5 I:int), (r6 I:kotlinx.coroutines.internal.LimitedDispatcher) kotlinx.coroutines.internal.LimitedDispatcher.runningWorkers int A[Catch: all \-\> 0x0059]\l0x0052: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fairnessCounter' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:60)\l0x0054: SGET  (r4 I:kotlin.Unit A[D('$i$a$\-synchronized\-LimitedDispatcher$run$1' int)]) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x0059, TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0056|0x0056: MONITOR_EXIT  (r2 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0001|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x004a|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|0x004a: MONITOR_EXIT  (r2 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x004b|RETURN\l|0x004b: RETURN   \l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_26 [shape=record,label="{26\:\ 0x0059|ExcHandler: all \-\> 0x0059\l|0x0059: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0059] (LINE:61)\l}"];
Node_28 [shape=record,label="{28\:\ 0x005b|0x005b: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.internal.LimitedDispatcher.run((r6 'this' I:kotlinx.coroutines.internal.LimitedDispatcher A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:24:0x0056 \-\> B:3:0x0001, CROSS_EDGE: B:28:0x005b \-\> B:1:?, CROSS_EDGE: B:31:0x003c \-\> B:26:0x0059, CROSS_EDGE: B:14:0x0035 \-\> B:1:?, BACK_EDGE: B:12:0x0028 \-\> B:3:0x0001, BACK_EDGE: B:10:0x001d \-\> B:3:0x0001, CROSS_EDGE: B:8:0x0012 \-\> B:9:0x0019, CROSS_EDGE: B:29:0x000d \-\> B:7:0x0011\lDebug Info:\l  0x0012\-0x0019: r2 'e' Ljava\/lang\/Throwable;\l  0x0039\-0x004a: r2 'lock$iv' Ljava\/lang\/Object;\l  0x003a\-0x004a: r3 '$i$f$synchronized' I\l  0x003c\-0x004a: r4 '$i$a$\-synchronized\-LimitedDispatcher$run$1' I\l  0x004c\-0x0054: r4 '$i$a$\-synchronized\-LimitedDispatcher$run$1' I\l  0x000a\-0x0058: r1 'task' Ljava\/lang\/Runnable;\l  0x004c\-0x0058: r2 'lock$iv' Ljava\/lang\/Object;\l  0x004c\-0x0058: r3 '$i$f$synchronized' I\l  0x0001\-0x005b: r0 'fairnessCounter' I\l  0x0059\-0x005b: r1 'task' Ljava\/lang\/Runnable;\l  0x0059\-0x005b: r2 'lock$iv' Ljava\/lang\/Object;\l  0x0059\-0x005b: r3 '$i$f$synchronized' I\lTryCatch #0 \{all \-\> 0x0011, blocks: (B:5:0x000d), top: B:29:0x000d \}, TryCatch #1 \{all \-\> 0x0059, blocks: (B:19:0x003c, B:23:0x004c), top: B:31:0x003c \}\lMETHOD_OVERRIDE: [ClspMth\{java.lang.Runnable.run():void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_29[style=dashed];
Node_4 -> Node_34;
Node_29 -> Node_5;
Node_29 -> Node_7;
Node_5 -> Node_9;
Node_5 -> Node_30;
Node_9 -> Node_10;
Node_10 -> Node_35[style=dashed];
Node_10 -> Node_38;
Node_35 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_36[style=dashed];
Node_12 -> Node_39;
Node_36 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_39 -> Node_37;
Node_37 -> Node_3;
Node_38 -> Node_37;
Node_30 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_34 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_31;
Node_31 -> Node_19;
Node_31 -> Node_26;
Node_19 -> Node_20;
Node_19 -> Node_32;
Node_20 -> Node_23;
Node_20 -> Node_33[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_40;
Node_40 -> Node_37;
Node_33 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_1;
Node_32 -> Node_26;
Node_26 -> Node_28;
Node_28 -> Node_1;
}

