digraph "CFG forkotlinx.coroutines.internal.LimitedDispatcher.dispatchInternal(Ljava\/lang\/Runnable;Lkotlin\/jvm\/functions\/Function0;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:boolean) = (r2 I:kotlinx.coroutines.internal.LimitedDispatcher), (r3 I:java.lang.Runnable A[D('block' java.lang.Runnable)]) type: DIRECT call: kotlinx.coroutines.internal.LimitedDispatcher.addAndTryDispatching(java.lang.Runnable):boolean A[MD:(java.lang.Runnable):boolean (m)] (LINE:80)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|RETURN\l|0x0007: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: INVOKE  (r1 I:boolean) = (r2 I:kotlinx.coroutines.internal.LimitedDispatcher) type: DIRECT call: kotlinx.coroutines.internal.LimitedDispatcher.tryAllocateWorker():boolean A[MD:():boolean (m)] (LINE:87)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|RETURN\l|0x000e: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: INVOKE  (r4 I:kotlin.jvm.functions.Function0 A[D('dispatch' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[MD:():R (m)] (LINE:88)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|RETURN\l|0x0012: RETURN    (LINE:89)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.internal.LimitedDispatcher.dispatchInternal((r2 'this' I:kotlinx.coroutines.internal.LimitedDispatcher A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function0\<kotlin.Unit\> A[D('dispatch' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000e \-\> B:1:?, CROSS_EDGE: B:9:0x0012 \-\> B:1:?\lDebug Info:\l  0x0001\-0x0012: r0 '$i$f$dispatchInternal' I\l  \-1 \-0x0012: r3 'block' Ljava\/lang\/Runnable;\l  \-1 \-0x0012: r4 'dispatch' Lkotlin\/jvm\/functions\/Function0;\lSIGNATURE: (Ljava\/lang\/Runnable;Lkotlin\/jvm\/functions\/Function0\<Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

