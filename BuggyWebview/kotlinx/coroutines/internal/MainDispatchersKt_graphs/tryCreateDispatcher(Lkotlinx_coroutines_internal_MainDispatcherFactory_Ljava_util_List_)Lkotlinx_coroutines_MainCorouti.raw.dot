digraph "CFG forkotlinx.coroutines.internal.MainDispatchersKt.tryCreateDispatcher(Lkotlinx\/coroutines\/internal\/MainDispatcherFactory;Ljava\/util\/List;)Lkotlinx\/coroutines\/MainCoroutineDispatcher;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0006, blocks: (B:12:0x0001), top: B:17:0x0001 \}\lCatch: all \-\> 0x0006\l|0x0001: INVOKE  (r0 I:kotlinx.coroutines.MainCoroutineDispatcher) = \l  (r2 I:kotlinx.coroutines.internal.MainDispatcherFactory A[D('$this$tryCreateDispatcher' kotlinx.coroutines.internal.MainDispatcherFactory)])\l  (r3 I:java.util.List A[D('factories' java.util.List)])\l type: INTERFACE call: kotlinx.coroutines.internal.MainDispatcherFactory.createDispatcher(java.util.List):kotlinx.coroutines.MainCoroutineDispatcher A[Catch: all \-\> 0x0006, MD:(java.util.List\<? extends kotlinx.coroutines.internal.MainDispatcherFactory\>):kotlinx.coroutines.MainCoroutineDispatcher (m), TRY_ENTER, TRY_LEAVE] (LINE:57)\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0012: RETURN  (r0 I:kotlinx.coroutines.MainCoroutineDispatcher A[D('cause' java.lang.Throwable)]) A[SYNTHETIC] (LINE:60)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|ExcHandler: all \-\> 0x0006\l|0x0006: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0006] (LINE:58)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: INVOKE  (r1 I:java.lang.String) = \l  (r2 I:kotlinx.coroutines.internal.MainDispatcherFactory A[D('$this$tryCreateDispatcher' kotlinx.coroutines.internal.MainDispatcherFactory)])\l type: INTERFACE call: kotlinx.coroutines.internal.MainDispatcherFactory.hintOnError():java.lang.String A[MD:():java.lang.String (m)] (LINE:59)\l0x000b: INVOKE  (r1 I:kotlinx.coroutines.internal.MissingMainCoroutineDispatcher) = (r0 I:java.lang.Throwable A[D('cause' java.lang.Throwable)]), (r1 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.MainDispatchersKt.createMissingDispatcher(java.lang.Throwable, java.lang.String):kotlinx.coroutines.internal.MissingMainCoroutineDispatcher A[MD:(java.lang.Throwable, java.lang.String):kotlinx.coroutines.internal.MissingMainCoroutineDispatcher (m)]\l0x000f: CHECK_CAST (r1 I:kotlinx.coroutines.MainCoroutineDispatcher) = (kotlinx.coroutines.MainCoroutineDispatcher) (r1 I:??[OBJECT, ARRAY]) \l0x0011: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('cause' java.lang.Throwable)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: RETURN  (r0 I:kotlinx.coroutines.MainCoroutineDispatcher A[D('cause' java.lang.Throwable)])  (LINE:60)\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.MainCoroutineDispatcher kotlinx.coroutines.internal.MainDispatchersKt.tryCreateDispatcher((r2 I:kotlinx.coroutines.internal.MainDispatcherFactory A[D('$this$tryCreateDispatcher' kotlinx.coroutines.internal.MainDispatcherFactory), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.List\<? extends kotlinx.coroutines.internal.MainDispatcherFactory\> A[D('factories' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0007 \-\> B:16:0x0012, CROSS_EDGE: B:17:0x0001 \-\> B:14:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0012: r0 'cause' Ljava\/lang\/Throwable;\l  \-1 \-0x0012: r2 '$this$tryCreateDispatcher' Lkotlinx\/coroutines\/internal\/MainDispatcherFactory;\l  \-1 \-0x0012: r3 'factories' Ljava\/util\/List;\lTryCatch #0 \{all \-\> 0x0006, blocks: (B:12:0x0001), top: B:17:0x0001 \}\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/MainDispatcherFactory;Ljava\/util\/List\<+Lkotlinx\/coroutines\/internal\/MainDispatcherFactory;\>;)Lkotlinx\/coroutines\/MainCoroutineDispatcher;\l}"];
MethodNode -> Node_10;Node_10 -> Node_17;
Node_17 -> Node_12;
Node_17 -> Node_14;
Node_12 -> Node_18;
Node_12 -> Node_19;
Node_18 -> Node_14;
Node_19 -> Node_11;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_11;
}

