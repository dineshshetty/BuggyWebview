digraph "CFG forkotlinx.coroutines.internal.ResizableAtomicArray.setSynchronized(ILjava\/lang\/Object;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray\<T\>) = (r6 I:kotlinx.coroutines.internal.ResizableAtomicArray) kotlinx.coroutines.internal.ResizableAtomicArray.array java.util.concurrent.atomic.AtomicReferenceArray  (LINE:27)\l0x0002: INVOKE  (r1 I:int) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray A[D('curArray' java.util.concurrent.atomic.AtomicReferenceArray)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.length():int A[MD:():int (c)] (LINE:28)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r7 I:??[int, byte, short, char] A[D('index' int)]) \>= (r1 I:??[int, byte, short, char] A[D('curLen' int)])  \-\> B:17:0x000c  (LINE:29)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: INVOKE  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray A[D('curArray' java.util.concurrent.atomic.AtomicReferenceArray)])\l  (r7 I:int A[D('index' int)])\l  (r8 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.set(int, java.lang.Object):void A[MD:(int, E):void (c)] (LINE:30)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x002c: RETURN   A[SYNTHETIC] (LINE:37)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: NEW_INSTANCE  (r2 I:java.util.concurrent.atomic.AtomicReferenceArray) =  java.util.concurrent.atomic.AtomicReferenceArray  (LINE:32)\l0x000e: ARITH  (r3 I:int) = (r7 I:int A[D('index' int)]) + (1 int) \l0x0010: ARITH  (r4 I:int) = (r1 I:int A[D('curLen' int)]) * (2 int) \l0x0012: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0016: INVOKE  (r2 I:java.util.concurrent.atomic.AtomicReferenceArray), (r3 I:int) type: DIRECT call: java.util.concurrent.atomic.AtomicReferenceArray.\<init\>(int):void A[MD:(int):void (c)]\l0x0019: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:33)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|LOOP_START\lLOOP:0: B:18:0x001a\-\>B:19:0x001c\l|0x001a: IF  (r3 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('curLen' int)])  \-\> B:22:0x0027 \l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|LOOP_END\lLOOP:0: B:18:0x001a\-\>B:19:0x001c\l|0x001c: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x001f: INVOKE  (r5 I:java.lang.Object) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray A[D('curArray' java.util.concurrent.atomic.AtomicReferenceArray)])\l  (r4 I:int A[D('i' int)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0023: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicReferenceArray A[D('newArray' java.util.concurrent.atomic.AtomicReferenceArray)])\l  (r4 I:int A[D('i' int)])\l  (r5 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.set(int, java.lang.Object):void A[MD:(int, E):void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0027|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|0x0027: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicReferenceArray A[D('newArray' java.util.concurrent.atomic.AtomicReferenceArray)])\l  (r7 I:int A[D('index' int)])\l  (r8 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.set(int, java.lang.Object):void A[MD:(int, E):void (c)] (LINE:34)\l0x002a: IPUT  \l  (r2 I:java.util.concurrent.atomic.AtomicReferenceArray\<T\> A[D('newArray' java.util.concurrent.atomic.AtomicReferenceArray)])\l  (r6 I:kotlinx.coroutines.internal.ResizableAtomicArray)\l kotlinx.coroutines.internal.ResizableAtomicArray.array java.util.concurrent.atomic.AtomicReferenceArray  (LINE:35)\l}"];
Node_21 [shape=record,label="{21\:\ 0x002c|RETURN\lORIG_RETURN\l|0x002c: RETURN    (LINE:37)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.ResizableAtomicArray.setSynchronized((r6 'this' I:kotlinx.coroutines.internal.ResizableAtomicArray\<T\> A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x001c \-\> B:18:0x001a, CROSS_EDGE: B:20:0x0027 \-\> B:21:0x002c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0027: r4 'i' I\l  0x0019\-0x002c: r2 'newArray' Ljava\/util\/concurrent\/atomic\/AtomicReferenceArray;\l  0x0002\-0x002c: r0 'curArray' Ljava\/util\/concurrent\/atomic\/AtomicReferenceArray;\l  0x0006\-0x002c: r1 'curLen' I\l  \-1 \-0x002c: r7 'index' I\l  \-1 \-0x002c: r8 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (ITT;)V\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_18;
Node_22 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

