digraph "CFG forkotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$$inlined$sortedByDescending$1.compare(Ljava\/lang\/Object;Ljava\/lang\/Object;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('b' java.lang.Object)])  (LINE:121)\l0x0001: CHECK_CAST (r0 I:java.lang.reflect.Constructor) = (java.lang.reflect.Constructor) (r0 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: INVOKE  (r2 I:java.lang.Class[]) = (r0 I:java.lang.reflect.Constructor A[D('it' java.lang.reflect.Constructor)]) type: VIRTUAL call: java.lang.reflect.Constructor.getParameterTypes():java.lang.Class[] A[MD:():java.lang.Class\<?\>[] (c)] (LINE:321)\l0x0008: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[]) \l0x0009: INVOKE  (r0 I:java.lang.Integer A[D('it' java.lang.reflect.Constructor)]) = (r2 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x000d: CHECK_CAST (r0 I:java.lang.Comparable) = (java.lang.Comparable) (r0 I:??[OBJECT, ARRAY] A[D('it' java.lang.reflect.Constructor)]) \l0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('a' java.lang.Object)]) \l0x0010: CHECK_CAST (r1 I:java.lang.reflect.Constructor) = (java.lang.reflect.Constructor) (r1 I:??[OBJECT, ARRAY]) \l0x0012: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: INVOKE  (r3 I:java.lang.Class[]) = (r1 I:java.lang.reflect.Constructor A[D('it' java.lang.reflect.Constructor)]) type: VIRTUAL call: java.lang.reflect.Constructor.getParameterTypes():java.lang.Class[] A[MD:():java.lang.Class\<?\>[] (c)]\l0x0017: ARRAY_LENGTH  (r3 I:int) = (r3 I:??[]) \l0x0018: INVOKE  (r1 I:java.lang.Integer A[D('it' java.lang.reflect.Constructor)]) = (r3 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x001c: CHECK_CAST (r1 I:java.lang.Comparable) = (java.lang.Comparable) (r1 I:??[OBJECT, ARRAY] A[D('it' java.lang.reflect.Constructor)]) \l0x001e: INVOKE  (r0 I:int) = (r0 I:java.lang.Comparable), (r1 I:java.lang.Comparable) type: STATIC call: kotlin.comparisons.ComparisonsKt.compareValues(java.lang.Comparable, java.lang.Comparable):int A[MD:\<T extends java.lang.Comparable\<?\>\>:(T extends java.lang.Comparable\<?\>, T extends java.lang.Comparable\<?\>):int (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:int)  (LINE:121)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final int kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$$inlined$sortedByDescending$1.compare((r4 'this' I:kotlinx.coroutines.internal.ExceptionsConstructorKt$createConstructor$$inlined$sortedByDescending$1\<T\> A[IMMUTABLE_TYPE, THIS]), (r5 I:T A[D('a' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:T A[D('b' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lDebug Info:\l  0x0003\-0x000d: r0 'it' Ljava\/lang\/reflect\/Constructor;\l  0x0004\-0x000d: r1 '$i$a$\-sortedByDescending\-ExceptionsConstructorKt$createConstructor$constructors$1' I\l  0x0012\-0x001c: r1 'it' Ljava\/lang\/reflect\/Constructor;\l  0x0013\-0x001c: r2 '$i$a$\-sortedByDescending\-ExceptionsConstructorKt$createConstructor$constructors$1' I\l  \-1 \-0x0022: r5 'a' Ljava\/lang\/Object;\l  \-1 \-0x0022: r6 'b' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (TT;TT;)I\lMETHOD_OVERRIDE: [ClspMth\{java.util.Comparator.compare(T, T):int\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

