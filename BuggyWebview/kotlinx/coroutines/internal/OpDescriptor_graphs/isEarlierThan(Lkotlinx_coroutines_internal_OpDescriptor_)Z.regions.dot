digraph "CFG forkotlinx.coroutines.internal.OpDescriptor.isEarlierThan(Lkotlinx\/coroutines\/internal\/OpDescriptor;)Z" {
subgraph cluster_Region_1304546833 {
label = "R(2:1|2) | DECL_VAR: kotlinx.coroutines.internal.AtomicOp thatOp\l";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlinx.coroutines.internal.AtomicOp kotlinx.coroutines.internal.AtomicOp r0 = getAtomicOp()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|RETURN\l|return (r0 == null \|\| (r2 = r9.getAtomicOp()) == null \|\| r0.getOpSequence() \>= r2.getOpSequence()) ? false : true\l}"];
}
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0007|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0008}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000c|REMOVE\lADDED_TO_REGION\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x000e|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x000f}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0019|REMOVE\lADDED_TO_REGION\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x001b|ORIG_RETURN\l}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.OpDescriptor.isEarlierThan((r8v0 'this' kotlinx.coroutines.internal.OpDescriptor A[IMMUTABLE_TYPE, THIS]), (r9v0 'that' kotlinx.coroutines.internal.OpDescriptor A[D('that' kotlinx.coroutines.internal.OpDescriptor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x000e \-\> B:14:?, CROSS_EDGE: B:24:0x001c \-\> B:14:?, CROSS_EDGE: B:22:0x0019 \-\> B:24:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_18;
Node_13 -> Node_15;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_25;
Node_23 -> Node_14;
Node_25 -> Node_14;
}

