digraph "CFG forkotlinx.coroutines.internal.OpDescriptor.isEarlierThan(Lkotlinx\/coroutines\/internal\/OpDescriptor;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlinx.coroutines.internal.AtomicOp r0 = getAtomicOp()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|if (r0 != null) goto L5\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|kotlinx.coroutines.internal.AtomicOp r2 = r9.getAtomicOp()\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|if (r2 != null) goto L8\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|RETURN\l|return false\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f}"];
Node_22 [shape=record,label="{22\:\ 0x0019|if ((r0.getOpSequence() \> r2.getOpSequence() ? 1 : (r0.getOpSequence() == r2.getOpSequence() ? 0 : \-1)) \>= 0) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|RETURN\lORIG_RETURN\l|return true\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.OpDescriptor.isEarlierThan((r8v0 'this' kotlinx.coroutines.internal.OpDescriptor A[IMMUTABLE_TYPE, THIS]), (r9v0 'that' kotlinx.coroutines.internal.OpDescriptor A[D('that' kotlinx.coroutines.internal.OpDescriptor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x000e \-\> B:14:?, CROSS_EDGE: B:24:0x001c \-\> B:14:?, CROSS_EDGE: B:22:0x0019 \-\> B:24:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_14;
Node_25 -> Node_14;
}

