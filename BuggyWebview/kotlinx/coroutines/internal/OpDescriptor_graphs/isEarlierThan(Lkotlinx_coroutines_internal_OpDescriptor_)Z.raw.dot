digraph "CFG forkotlinx.coroutines.internal.OpDescriptor.isEarlierThan(Lkotlinx\/coroutines\/internal\/OpDescriptor;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.internal.AtomicOp) = (r8 I:kotlinx.coroutines.internal.OpDescriptor) type: VIRTUAL call: kotlinx.coroutines.internal.OpDescriptor.getAtomicOp():kotlinx.coroutines.internal.AtomicOp A[MD:():kotlinx.coroutines.internal.AtomicOp\<?\> (m)] (LINE:35)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0008 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: INVOKE  (r2 I:kotlinx.coroutines.internal.AtomicOp) = (r9 I:kotlinx.coroutines.internal.OpDescriptor A[D('that' kotlinx.coroutines.internal.OpDescriptor)]) type: VIRTUAL call: kotlinx.coroutines.internal.OpDescriptor.getAtomicOp():kotlinx.coroutines.internal.AtomicOp A[MD:():kotlinx.coroutines.internal.AtomicOp\<?\> (m)] (LINE:36)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000f \l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|RETURN\l|0x000e: RETURN  (r1 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|0x000f: INVOKE  (r3 I:long) = (r0 I:kotlinx.coroutines.internal.AtomicOp A[D('thisOp' kotlinx.coroutines.internal.AtomicOp)]) type: VIRTUAL call: kotlinx.coroutines.internal.AtomicOp.getOpSequence():long A[MD:():long (m)] (LINE:37)\l0x0013: INVOKE  (r5 I:long) = (r2 I:kotlinx.coroutines.internal.AtomicOp A[D('thatOp' kotlinx.coroutines.internal.AtomicOp)]) type: VIRTUAL call: kotlinx.coroutines.internal.AtomicOp.getOpSequence():long A[MD:():long (m)]\l0x0017: CMP_L  (r7 I:int) = (r3 I:long), (r5 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|0x0019: IF  (r7 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:25:? \l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|RETURN\lORIG_RETURN\l|0x001b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001c: RETURN  (r1 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.OpDescriptor.isEarlierThan((r8 'this' I:kotlinx.coroutines.internal.OpDescriptor A[IMMUTABLE_TYPE, THIS]), (r9 I:kotlinx.coroutines.internal.OpDescriptor A[D('that' kotlinx.coroutines.internal.OpDescriptor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x000e \-\> B:14:?, CROSS_EDGE: B:24:0x001c \-\> B:14:?, CROSS_EDGE: B:22:0x0019 \-\> B:24:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x001c: r0 'thisOp' Lkotlinx\/coroutines\/internal\/AtomicOp;\l  0x000f\-0x001c: r2 'thatOp' Lkotlinx\/coroutines\/internal\/AtomicOp;\l  \-1 \-0x001c: r9 'that' Lkotlinx\/coroutines\/internal\/OpDescriptor;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_14;
Node_25 -> Node_14;
}

