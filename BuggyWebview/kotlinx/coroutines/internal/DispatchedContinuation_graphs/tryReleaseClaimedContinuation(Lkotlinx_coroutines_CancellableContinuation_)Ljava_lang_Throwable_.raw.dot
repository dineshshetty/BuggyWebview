digraph "CFG forkotlinx.coroutines.internal.DispatchedContinuation.tryReleaseClaimedContinuation(Lkotlinx\/coroutines\/CancellableContinuation;)Ljava\/lang\/Throwable;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:149)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0002|LOOP_START\lLOOP:0: B:24:0x0002\-\>B:27:0x0014\l|0x0003: IGET  (r2 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.internal.DispatchedContinuation A[D('$this$loop$iv' kotlinx.coroutines.internal.DispatchedContinuation)])\l kotlinx.coroutines.internal.DispatchedContinuation._reusableCancellableContinuation java.lang.Object  (LINE:323)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: SGET  (r4 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.internal.DispatchedContinuationKt.REUSABLE_CLAIMED kotlinx.coroutines.internal.Symbol  (LINE:152)\l0x0009: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|0x000a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0019 \l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|0x000c: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.DispatchedContinuation._reusableCancellableContinuation$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:153)\l0x000e: SGET  (r6 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.internal.DispatchedContinuationKt.REUSABLE_CLAIMED kotlinx.coroutines.internal.Symbol \l0x0010: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l  (r8 I:java.lang.Object A[D('continuation' kotlinx.coroutines.CancellableContinuation)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0014|LOOP_END\lLOOP:0: B:24:0x0002\-\>B:27:0x0014\l|0x0014: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0002 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|RETURN\l|0x0016: RETURN  (r5 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0019|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0019|0x0019: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) java.lang.Throwable  (LINE:155)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0035 \l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|0x001d: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.DispatchedContinuation._reusableCancellableContinuation$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:156)\l0x001f: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r5 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0029 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0025|0x0025: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:157)\l0x0026: CHECK_CAST (r4 I:java.lang.Throwable) = (java.lang.Throwable) (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0028|RETURN\l|0x0028: RETURN  (r4 I:java.lang.Throwable) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|0x0029: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:156)\l0x002b: CONST_STR  (r5 I:java.lang.String) =  \"Failed requirement.\" \l0x002d: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0031: INVOKE  (r4 I:java.lang.IllegalArgumentException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0034|0x0034: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0035|0x0035: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:157)\l0x0037: CONST_STR  (r5 I:java.lang.String) =  \"Inconsistent state \"  (LINE:159)\l0x0039: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r2 I:java.lang.Object A[D('state' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x003d: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0041: INVOKE  (r4 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0044|0x0044: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final java.lang.Throwable kotlinx.coroutines.internal.DispatchedContinuation.tryReleaseClaimedContinuation((r7 'this' I:kotlinx.coroutines.internal.DispatchedContinuation\<T\> A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlinx.coroutines.CancellableContinuation\<?\> A[D('continuation' kotlinx.coroutines.CancellableContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0014 \-\> B:24:0x0002, CROSS_EDGE: B:35:0x0028 \-\> B:22:?, CROSS_EDGE: B:37:0x0034 \-\> B:22:?, CROSS_EDGE: B:39:0x0044 \-\> B:22:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0018: r2 'state' Ljava\/lang\/Object;\l  0x0006\-0x0018: r3 '$i$a$\-loop\-DispatchedContinuation$tryReleaseClaimedContinuation$1' I\l  0x0001\-0x0044: r0 '$this$loop$iv' Lkotlinx\/coroutines\/internal\/DispatchedContinuation;\l  0x0002\-0x0044: r1 '$i$f$loop' I\l  0x0019\-0x0044: r2 'state' Ljava\/lang\/Object;\l  0x0019\-0x0044: r3 '$i$a$\-loop\-DispatchedContinuation$tryReleaseClaimedContinuation$1' I\l  \-1 \-0x0044: r8 'continuation' Lkotlinx\/coroutines\/CancellableContinuation;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlinx\/coroutines\/CancellableContinuation\<*\>;)Ljava\/lang\/Throwable;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_41;
Node_26 -> Node_27;
Node_27 -> Node_24;
Node_27 -> Node_40[style=dashed];
Node_40 -> Node_28;
Node_28 -> Node_22;
Node_41 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_38;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_22;
Node_36 -> Node_37;
Node_37 -> Node_22;
Node_38 -> Node_39;
Node_39 -> Node_22;
}

