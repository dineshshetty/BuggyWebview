digraph "CFG forkotlinx.coroutines.internal.DispatchedContinuation.getReusableCancellableContinuation()Lkotlinx\/coroutines\/CancellableContinuationImpl;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r2 I:kotlinx.coroutines.internal.DispatchedContinuation) kotlinx.coroutines.internal.DispatchedContinuation._reusableCancellableContinuation java.lang.Object  (LINE:62)\l0x0002: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) kotlinx.coroutines.CancellableContinuationImpl \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0009 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: CHECK_CAST (r0 I:kotlinx.coroutines.CancellableContinuationImpl) = (kotlinx.coroutines.CancellableContinuationImpl) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000a: RETURN  (r0 I:kotlinx.coroutines.CancellableContinuationImpl\<?\>) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|RETURN\lORIG_RETURN\l|0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: RETURN  (r0 I:kotlinx.coroutines.CancellableContinuationImpl\<?\>) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.CancellableContinuationImpl\<?\> kotlinx.coroutines.internal.DispatchedContinuation.getReusableCancellableContinuation((r2 'this' I:kotlinx.coroutines.internal.DispatchedContinuation\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0009 \-\> B:14:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: ()Lkotlinx\/coroutines\/CancellableContinuationImpl\<*\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_9;
}

