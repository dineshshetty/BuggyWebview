digraph "CFG forkotlinx.coroutines.internal.FastServiceLoader.parseFile(Ljava\/io\/BufferedReader;)Ljava\/util\/List;" {
Node_38 [shape=record,label="{38\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.util.LinkedHashSet) =  java.util.LinkedHashSet  (LINE:149)\l0x0002: INVOKE  (r0 I:java.util.LinkedHashSet) type: DIRECT call: java.util.LinkedHashSet.\<init\>():void A[MD:():void (c)]\l0x0005: CHECK_CAST (r0 I:java.util.Set) = (java.util.Set) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0007|LOOP_START\lLOOP:0: B:41:0x0007\-\>B:69:0x0007\l|0x0008: INVOKE  (r1 I:java.lang.String) = (r13 I:java.io.BufferedReader A[D('r' java.io.BufferedReader)]) type: VIRTUAL call: java.io.BufferedReader.readLine():java.lang.String A[MD:():java.lang.String throws java.io.IOException (c)] (LINE:151)\l}"];
Node_42 [shape=record,label="{42\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0016 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0016|0x0016: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:152)\l0x0017: CONST_STR  (r3 I:java.lang.String) =  \"#\" \l0x0019: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001a: INVOKE  (r2 I:java.lang.String) = \l  (r1 I:java.lang.String A[D('line' java.lang.String)])\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String)\l  (r2 I:int)\l  (r4 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt.substringBefore$default(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object):java.lang.String (m)]\l0x001e: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l0x0020: INVOKE  (r2 I:java.lang.CharSequence) = (r2 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.trim(java.lang.CharSequence):java.lang.CharSequence A[MD:(java.lang.CharSequence):java.lang.CharSequence (m)]\l0x0024: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0028: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('serviceName' java.lang.String)])  (LINE:153)\l0x0029: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l0x002b: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002c: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:196)\l0x002d: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x002e|LOOP_START\lLOOP:1: B:46:0x002e\-\>B:55:0x004b\l|0x002e: INVOKE  (r7 I:int) = (r3 I:java.lang.CharSequence A[D('$this$all$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0032: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0033|0x0033: IF  (r6 I:??[int, byte, short, char]) \>= (r7 I:??[int, byte, short, char])  \-\> B:72:0x004f \l}"];
Node_48 [shape=record,label="{48\:\ 0x0035|0x0035: INVOKE  (r7 I:char) = (r3 I:java.lang.CharSequence A[D('$this$all$iv' java.lang.CharSequence)]), (r6 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0039: ARITH  (r6 I:int) = (r6 I:int) + (1 int) \l0x003b: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('element$iv' char)]) \l0x003c: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003d: CONST  (r11 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char])  (LINE:153)\l}"];
Node_49 [shape=record,label="{49\:\ 0x003f|0x003f: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) == (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x004a \l}"];
Node_50 [shape=record,label="{50\:\ 0x0041|0x0041: INVOKE  (r11 I:boolean) = (r9 I:char A[D('it' char)]) type: STATIC call: java.lang.Character.isJavaIdentifierPart(char):boolean A[MD:(char):boolean (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x0045|0x0045: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0048 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0048|0x0048: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' char)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_75 [shape=record,label="{75\:\ 0x004b|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x004b|LOOP_END\lLOOP:1: B:46:0x002e\-\>B:55:0x004b\l|0x004b: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x002e \l}"];
Node_73 [shape=record,label="{73\:\ 0x004d|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x004d|0x004d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$all$iv' java.lang.CharSequence)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0050|0x0050: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$all$iv' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x0062  (LINE:153)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0052|0x0052: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('serviceName' java.lang.String)])  (LINE:154)\l0x0053: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l0x0055: INVOKE  (r3 I:int) = (r3 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x0059|0x0059: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:62:0x005c \l}"];
Node_61 [shape=record,label="{61\:\ 0x005b|0x005b: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x005c|0x005c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x0007 \l}"];
Node_68 [shape=record,label="{68\:\ 0x005e|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x005e|0x005e: INVOKE  (r0 I:java.util.Set A[D('names' java.util.Set)]), (r2 I:java.lang.Object A[D('serviceName' java.lang.String)]) type: INTERFACE call: java.util.Set.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:155)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0007|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0007|LOOP_END\lSYNTHETIC\lLOOP:0: B:41:0x0007\-\>B:69:0x0007\l}"];
Node_70 [shape=record,label="{70\:\ 0x0007|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x0062|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0062|0x0062: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:167)\l0x0063: CONST_STR  (r4 I:java.lang.String) =  \"Illegal service provider class name: \"  (LINE:153)\l0x0065: INVOKE  (r3 I:java.lang.String A[D('$i$a$\-require\-FastServiceLoader$parseFile$2' int)]) = (r4 I:java.lang.String), (r2 I:java.lang.Object A[D('serviceName' java.lang.String)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0069: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x006b: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x006f: INVOKE  (r4 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_65 [shape=record,label="{65\:\ 0x0072|0x0072: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x004a|0x004a: CONST  (r9 I:??[boolean, int, float, short, byte, char] A[D('it' char)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_74 [shape=record,label="{74\:\ 0x004b|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x004f|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x004f|0x004f: CONST  (r3 I:??[boolean, int, float, short, byte, char] A[D('$this$all$iv' java.lang.CharSequence)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:197)\l}"];
Node_66 [shape=record,label="{66\:\ 0x000e|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x000e|0x000e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('names' java.util.Set)])  (LINE:158)\l0x000f: CHECK_CAST (r1 I:java.lang.Iterable) = (java.lang.Iterable) (r1 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:java.util.List) = (r1 I:java.lang.Iterable) type: STATIC call: kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.List\<T\> (m)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0015|RETURN\l|0x0015: RETURN  (r1 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{private final java.util.List\<java.lang.String\> kotlinx.coroutines.internal.FastServiceLoader.parseFile((r12 'this' I:kotlinx.coroutines.internal.FastServiceLoader A[IMMUTABLE_TYPE, THIS]), (r13 I:java.io.BufferedReader A[D('r' java.io.BufferedReader), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:55:0x004b \-\> B:46:0x002e, BACK_EDGE: B:62:0x005c \-\> B:41:0x0007, BACK_EDGE: B:63:0x005e \-\> B:41:0x0007, CROSS_EDGE: B:60:0x0059 \-\> B:62:0x005c, CROSS_EDGE: B:65:0x0072 \-\> B:39:?, CROSS_EDGE: B:54:0x004a \-\> B:55:0x004b, CROSS_EDGE: B:49:0x003f \-\> B:54:0x004a, CROSS_EDGE: B:57:0x004f \-\> B:58:0x0050\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003c\-0x004b: r9 'it' C\l  0x003d\-0x004b: r10 '$i$a$\-all\-FastServiceLoader$parseFile$1' I\l  0x0039\-0x004f: r7 'element$iv' C\l  0x002b\-0x0050: r3 '$this$all$iv' Ljava\/lang\/CharSequence;\l  0x002c\-0x0050: r4 '$i$f$all' I\l  0x0063\-0x0069: r3 '$i$a$\-require\-FastServiceLoader$parseFile$2' I\l  0x0007\-0x0072: r0 'names' Ljava\/util\/Set;\l  0x0016\-0x0072: r1 'line' Ljava\/lang\/String;\l  0x0028\-0x0072: r2 'serviceName' Ljava\/lang\/String;\l  \-1 \-0x0072: r13 'r' Ljava\/io\/BufferedReader;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [153=4]\}\lSIGNATURE: (Ljava\/io\/BufferedReader;)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_38;Node_38 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_45;
Node_42 -> Node_66[style=dashed];
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_72;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_54;
Node_50 -> Node_51;
Node_51 -> Node_53;
Node_51 -> Node_54[style=dashed];
Node_53 -> Node_75;
Node_75 -> Node_55;
Node_55 -> Node_46;
Node_55 -> Node_73[style=dashed];
Node_73 -> Node_56;
Node_56 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_67;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_62;
Node_61 -> Node_62;
Node_62 -> Node_68[style=dashed];
Node_62 -> Node_70;
Node_68 -> Node_63;
Node_63 -> Node_71;
Node_71 -> Node_69;
Node_69 -> Node_41;
Node_70 -> Node_69;
Node_67 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_39;
Node_54 -> Node_74;
Node_74 -> Node_55;
Node_72 -> Node_57;
Node_57 -> Node_58;
Node_66 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_39;
}

