digraph "CFG forkotlinx.coroutines.internal.FastServiceLoader.getProviderInstance(Ljava\/lang\/String;Ljava\/lang\/ClassLoader;Ljava\/lang\/Class;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:105)\l0x0001: INVOKE  (r1 I:java.lang.Class) = \l  (r5 I:java.lang.String A[D('name' java.lang.String)])\l  (r0 I:boolean)\l  (r6 I:java.lang.ClassLoader A[D('loader' java.lang.ClassLoader)])\l type: STATIC call: java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader):java.lang.Class A[MD:(java.lang.String, boolean, java.lang.ClassLoader):java.lang.Class\<?\> throws java.lang.ClassNotFoundException (c)]\l0x0005: INVOKE  (r2 I:boolean) = (r7 I:java.lang.Class A[D('service' java.lang.Class)]), (r1 I:java.lang.Class A[D('clazz' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.isAssignableFrom(java.lang.Class):boolean A[MD:(java.lang.Class\<?\>):boolean (c)] (LINE:106)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|0x0009: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001c \l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|0x000b: NEW_ARRAY  (r2 I:java.lang.Class[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[]  (LINE:107)\l0x000d: INVOKE  (r2 I:java.lang.reflect.Constructor) = (r1 I:java.lang.Class A[D('clazz' java.lang.Class)]), (r2 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getDeclaredConstructor(java.lang.Class[]):java.lang.reflect.Constructor A[MD:(java.lang.Class\<?\>[]):java.lang.reflect.Constructor\<T\> VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)]\l0x0011: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0013: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.lang.reflect.Constructor), (r0 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Constructor.newInstance(java.lang.Object[]):java.lang.Object A[MD:(java.lang.Object[]):T VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException (c)]\l0x0017: INVOKE  (r0 I:java.lang.Object) = (r7 I:java.lang.Class A[D('service' java.lang.Class)]), (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Class.cast(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):T (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001b|RETURN\l|0x001b: RETURN  (r0 I:S) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:167)\l0x001d: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:106)\l0x001f: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0022: CONST_STR  (r3 I:java.lang.String) =  \"Expected service of class \" \l0x0024: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0027: INVOKE  (r2 I:java.lang.StringBuilder), (r7 I:java.lang.Object A[D('service' java.lang.Class)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x002a: CONST_STR  (r3 I:java.lang.String) =  \", but found \" \l0x002c: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002f: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:java.lang.Object A[D('clazz' java.lang.Class)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0032: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-FastServiceLoader$getProviderInstance$1' int)]) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0036: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0038: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003c: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|0x003f: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final S kotlinx.coroutines.internal.FastServiceLoader.getProviderInstance((r4 'this' I:kotlinx.coroutines.internal.FastServiceLoader A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.ClassLoader A[D('loader' java.lang.ClassLoader), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Class\<S\> A[D('service' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x003f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0036: r0 '$i$a$\-require\-FastServiceLoader$getProviderInstance$1' I\l  0x0005\-0x003f: r1 'clazz' Ljava\/lang\/Class;\l  \-1 \-0x003f: r5 'name' Ljava\/lang\/String;\l  \-1 \-0x003f: r6 'loader' Ljava\/lang\/ClassLoader;\l  \-1 \-0x003f: r7 'service' Ljava\/lang\/Class;\lTYPE_VARS: [S]\lSIGNATURE: \<S:Ljava\/lang\/Object;\>(Ljava\/lang\/String;Ljava\/lang\/ClassLoader;Ljava\/lang\/Class\<TS;\>;)TS;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

