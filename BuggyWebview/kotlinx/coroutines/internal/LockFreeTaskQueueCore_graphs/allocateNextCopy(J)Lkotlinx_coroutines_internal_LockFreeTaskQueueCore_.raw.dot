digraph "CFG forkotlinx.coroutines.internal.LockFreeTaskQueueCore.allocateNextCopy(J)Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY])  (LINE:230)\l0x0002: NEW_INSTANCE  (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore \l0x0004: IGET  (r2 I:int) = (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) kotlinx.coroutines.internal.LockFreeTaskQueueCore.capacity int \l0x0006: ARITH  (r2 I:int) = (r2 I:int) * (2 int) \l0x0008: IGET  (r3 I:boolean) = (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) kotlinx.coroutines.internal.LockFreeTaskQueueCore.singleConsumer boolean \l0x000a: INVOKE  (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore), (r2 I:int), (r3 I:boolean) type: DIRECT call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.\<init\>(int, boolean):void A[MD:(int, boolean):void (m)]\l0x000d: SGET  (r2 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion  (LINE:231)\l0x000f: MOVE  (r3 I:??[long, double]) = (r19 I:??[long, double] A[D('state' long)]) \l0x0011: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: CONST  (r6 I:??[long, double]) = (1073741823(0x3fffffff, double:5.304989472E\-315) ??[long, double])  (LINE:341)\l0x0015: ARITH  (r6 I:long) = (r6 I:long) & (r3 I:long A[D('$this$withState$iv' long)]) \l0x0016: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: ARITH  (r6 I:long) = (r6 I:long) \>\> (r8 I:long) \l0x0018: CAST (r7 I:int) = (int) (r6 I:long) \l0x0019: CONST  (r8 I:??[long, double]) = (1152921503533105152(0xfffffffc0000000, double:1.2882296003504729E\-231) ??[long, double])  (LINE:342)\l0x001e: ARITH  (r8 I:long) = (r8 I:long) & (r3 I:long A[D('$this$withState$iv' long)]) \l0x001f: CONST  (r6 I:??[int, float, short, byte, char]) = (30 ??[int, float, short, byte, char]) \l0x0021: ARITH  (r8 I:long) = (r8 I:long) \>\> (r6 I:long) \l0x0022: CAST (r6 I:int) = (int) (r8 I:long) \l0x0023: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('head$iv' int)])  (LINE:343)\l0x0024: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tail$iv' int)]) \l0x0025: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0026: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('head' int)])  (LINE:232)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|LOOP_START\lLOOP:0: B:17:0x0027\-\>B:22:0x003d\l|0x0027: IGET  (r12 I:int) = (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) kotlinx.coroutines.internal.LockFreeTaskQueueCore.mask int  (LINE:233)\l0x0029: ARITH  (r13 I:??[int, boolean]) = (r11 I:??[int, boolean, short, byte, char] A[D('index' int)]) & (r12 I:??[int, boolean, short, byte, char]) \l0x002b: ARITH  (r14 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char] A[D('tail' int)]) & (r12 I:??[int, boolean, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x002d|0x002d: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0048 \l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|0x002f: IGET  (r13 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) kotlinx.coroutines.internal.LockFreeTaskQueueCore.array java.util.concurrent.atomic.AtomicReferenceArray  (LINE:235)\l0x0031: ARITH  (r12 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (r11 I:??[int, boolean, short, byte, char] A[D('index' int)]) \l0x0032: INVOKE  (r12 I:java.lang.Object) = (r13 I:java.util.concurrent.atomic.AtomicReferenceArray), (r12 I:int) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0036|0x0036: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x003d \l}"];
Node_21 [shape=record,label="{21\:\ 0x0038|0x0038: NEW_INSTANCE  (r12 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder \l0x003a: INVOKE  (r12 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder), (r11 I:int A[D('index' int)]) type: DIRECT call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.Placeholder.\<init\>(int):void A[MD:(int):void (m)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x003d|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003d|LOOP_END\lLOOP:0: B:17:0x0027\-\>B:22:0x003d\l|0x003d: IGET  (r13 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('next' kotlinx.coroutines.internal.LockFreeTaskQueueCore)]) kotlinx.coroutines.internal.LockFreeTaskQueueCore.array java.util.concurrent.atomic.AtomicReferenceArray  (LINE:236)\l0x003f: IGET  (r14 I:int) = (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('next' kotlinx.coroutines.internal.LockFreeTaskQueueCore)]) kotlinx.coroutines.internal.LockFreeTaskQueueCore.mask int \l0x0041: ARITH  (r14 I:??[int, boolean]) = (r14 I:??[int, boolean, short, byte, char]) & (r11 I:??[int, boolean, short, byte, char] A[D('index' int)]) \l0x0042: INVOKE  \l  (r13 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r14 I:int)\l  (r12 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.set(int, java.lang.Object):void A[MD:(int, E):void (c)]\l0x0045: ARITH  (r11 I:int) = (r11 I:int A[D('index' int)]) + (1 int)  (LINE:237)\l}"];
Node_27 [shape=record,label="{27\:\ 0x003d|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0048|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0048|0x0048: SGET  (r12 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion  (LINE:239)\l0x004a: CONST  (r13 I:??[long, double]) = (1152921504606846976(0x1000000000000000, double:1.2882297539194267E\-231) ??[long, double]) \l0x004c: MOVE  (r15 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion)]) \l0x004d: MOVE  (r16 I:??[long, double]) = (r3 I:??[long, double] A[D('$this$withState$iv' long)]) \l0x004f: MOVE  (r2 I:??[long, double] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion)]) = (r19 I:??[long, double] A[D('state' long)]) \l0x0051: INVOKE  (r12 I:long) = \l  (r12 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion)\l  (r2 I:long A[D('this_$iv' kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion)])\l  (r13 I:long)\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.Companion.wo(long, long):long A[MD:(long, long):long (m)]\l0x0055: IPUT  \l  (r12 I:long)\l  (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('next' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l kotlinx.coroutines.internal.LockFreeTaskQueueCore._state long \l}"];
Node_24 [shape=record,label="{24\:\ 0x0058|RETURN\l|0x0058: RETURN  \l  (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> A[D('next' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l  (LINE:241)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> kotlinx.coroutines.internal.LockFreeTaskQueueCore.allocateNextCopy((r18 'this' I:kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> A[IMMUTABLE_TYPE, THIS]), (r19 I:long A[D('state' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x003d \-\> B:17:0x0027, CROSS_EDGE: B:20:0x0036 \-\> B:22:0x003d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003d\-0x0047: r12 'value' Ljava\/lang\/Object;\l  0x000f\-0x0051: r2 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore$Companion;\l  0x0011\-0x0051: r3 '$this$withState$iv' J\l  0x0012\-0x0058: r5 '$i$f$withState' I\l  0x0023\-0x0058: r6 'tail$iv' I\l  0x0019\-0x0058: r7 'head$iv' I\l  0x0024\-0x0058: r8 'head' I\l  0x0025\-0x0058: r9 'tail' I\l  0x0026\-0x0058: r10 '$i$a$\-withState\-LockFreeTaskQueueCore$allocateNextCopy$1' I\l  0x0027\-0x0058: r11 'index' I\l  0x0051\-0x0058: r15 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore$Companion;\l  0x0051\-0x0058: r16 '$this$withState$iv' J\l  0x000d\-0x0058: r1 'next' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  \-1 \-0x0058: r19 'state' J\lTYPE_VARS: [E]\lSIGNATURE: (J)Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore\<TE;\>;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_26;
Node_26 -> Node_22;
Node_22 -> Node_17;
Node_27 -> Node_22;
Node_25 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_15;
}

