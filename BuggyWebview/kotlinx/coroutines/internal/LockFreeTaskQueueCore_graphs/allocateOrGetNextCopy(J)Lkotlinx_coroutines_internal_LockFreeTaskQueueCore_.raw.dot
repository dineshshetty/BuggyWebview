digraph "CFG forkotlinx.coroutines.internal.LockFreeTaskQueueCore.allocateOrGetNextCopy(J)Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:223)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|LOOP_START\lLOOP:0: B:11:0x0002\-\>B:14:0x000b\l|0x0003: IGET  (r2 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('$this$loop$iv' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l kotlinx.coroutines.internal.LockFreeTaskQueueCore._next java.lang.Object  (LINE:340)\l0x0005: CHECK_CAST (r2 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) (r2 I:??[OBJECT, ARRAY]) \l0x0007: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' kotlinx.coroutines.internal.LockFreeTaskQueueCore)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000b  (LINE:224)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|LOOP_END\lLOOP:0: B:11:0x0002\-\>B:14:0x000b\l|0x000b: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:225)\l0x000d: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  (r6 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) = (r7 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore), (r8 I:long A[D('state' long)]) type: DIRECT call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.allocateNextCopy(long):kotlinx.coroutines.internal.LockFreeTaskQueueCore A[MD:(long):kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> (m)]\l0x0012: INVOKE  \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  \l  (r2 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> A[D('next' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> kotlinx.coroutines.internal.LockFreeTaskQueueCore.allocateOrGetNextCopy((r7 'this' I:kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[D('state' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x000b \-\> B:11:0x0002\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0016: r2 'next' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  0x0008\-0x0016: r3 '$i$a$\-loop\-LockFreeTaskQueueCore$allocateOrGetNextCopy$1' I\l  0x0001\-0x0016: r0 '$this$loop$iv' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  0x0002\-0x0016: r1 '$i$f$loop' I\l  \-1 \-0x0016: r8 'state' J\lTYPE_VARS: [E]\lSIGNATURE: (J)Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore\<TE;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_15[style=dashed];
Node_14 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_9;
}

