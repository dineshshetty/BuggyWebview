digraph "CFG forkotlinx.coroutines.internal.LockFreeTaskQueueCore.markFrozen()J" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY])  (LINE:217)\l0x0001: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|LOOP_START\lLOOP:0: B:15:0x0002\-\>B:19:0x001d\l|0x0003: IGET  (r8 I:long) = \l  (r6 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('$this$updateAndGet$iv' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l kotlinx.coroutines.internal.LockFreeTaskQueueCore._state long  (LINE:336)\l0x0005: MOVE  (r0 I:??[long, double]) = (r8 I:??[long, double] A[D('cur$iv' long)])  (LINE:337)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r3 I:??[long, double]) = (1152921504606846976(0x1000000000000000, double:1.2882297539194267E\-231) ??[long, double])  (LINE:218)\l0x0009: ARITH  (r10 I:long) = (r0 I:long A[D('state' long)]) & (r3 I:long) \l0x000b: CONST  (r12 I:??[long, double]) = (0 ??[long, double]) \l0x000d: CMP_L  (r5 I:int) = (r10 I:long), (r12 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0012 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: ARITH  (r10 I:long) = (r0 I:long A[D('state' long)]) \| (r3 I:long)  (LINE:219)\l0x0014: SGET  (r0 I:java.util.concurrent.atomic.AtomicLongFieldUpdater A[D('state' long)]) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore._state$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:338)\l0x0016: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$updateAndGet$iv' kotlinx.coroutines.internal.LockFreeTaskQueueCore)]) \l0x0017: MOVE  (r2 I:??[long, double]) = (r8 I:??[long, double] A[D('cur$iv' long)]) \l0x0018: MOVE  (r4 I:??[long, double]) = (r10 I:??[long, double] A[D('upd$iv' long)]) \l0x0019: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.atomic.AtomicLongFieldUpdater), (r1 I:java.lang.Object), (r2 I:long), (r4 I:long) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(java.lang.Object, long, long):boolean A[MD:(T, long, long):boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|LOOP_END\lLOOP:0: B:15:0x0002\-\>B:19:0x001d\l|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0002 \l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|RETURN\l|0x001f: RETURN  (r10 I:long A[D('upd$iv' long)])  (LINE:220)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:long A[D('state' long)]) \l}"];
MethodNode[shape=record,label="{private final long kotlinx.coroutines.internal.LockFreeTaskQueueCore.markFrozen((r14 'this' I:kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x001f \-\> B:13:?, BACK_EDGE: B:19:0x001d \-\> B:15:0x0002\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0014: r0 'state' J\l  0x0007\-0x0014: r2 '$i$a$\-updateAndGet\-LockFreeTaskQueueCore$markFrozen$1' I\l  0x0001\-0x001f: r6 '$this$updateAndGet$iv' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  0x0002\-0x001f: r7 '$i$f$updateAndGet' I\l  0x0005\-0x001f: r8 'cur$iv' J\l  0x0014\-0x001f: r10 'upd$iv' J\l  0x0020\-0x0020: r6 '$this$updateAndGet$iv' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  0x0020\-0x0020: r7 '$i$f$updateAndGet' I\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_23[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_15;
Node_19 -> Node_22[style=dashed];
Node_22 -> Node_20;
Node_20 -> Node_13;
Node_23 -> Node_17;
Node_17 -> Node_13;
}

