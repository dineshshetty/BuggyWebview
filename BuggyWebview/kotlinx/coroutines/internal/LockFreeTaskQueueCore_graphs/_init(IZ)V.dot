digraph "CFG forkotlinx.coroutines.internal.LockFreeTaskQueueCore.\<init\>(IZ)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|r5.capacity = r6\lr5.singleConsumer = r7\lint r0 = r6 + (\-1)\lr5.mask = r0\lr5._next = null\lr5._state = 0\lr5.array = new java.util.concurrent.atomic.AtomicReferenceArray(r6)\lr1 = false\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|if (r0 \> 1073741823) goto L16\l}"];
Node_21 [shape=record,label="{21\:\ 0x0021|r3 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0024|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v3 boolean) binds: [B:22:0x0023, B:21:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0026|if (r3 == false) goto L14\l}"];
Node_25 [shape=record,label="{25\:\ 0x0028}"];
Node_26 [shape=record,label="{26\:\ 0x0029|if ((r0 & r6) != 0) goto L9\l}"];
Node_27 [shape=record,label="{27\:\ 0x002b|r1 = true\l}"];
Node_28 [shape=record,label="{28\:\ 0x002c|PHI: r1 \l  PHI: (r1v5 boolean) = (r1v3 boolean), (r1v7 boolean) binds: [B:26:0x0029, B:27:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L12\l}"];
Node_29 [shape=record,label="{29\:\ 0x002f|RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0030}"];
Node_31 [shape=record,label="{31\:\ 0x0039|throw new java.lang.IllegalStateException(\"Check failed.\".toString())\l}"];
Node_32 [shape=record,label="{32\:\ 0x003a}"];
Node_33 [shape=record,label="{33\:\ 0x0043|throw new java.lang.IllegalStateException(\"Check failed.\".toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x0023|r3 = false\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.internal.LockFreeTaskQueueCore.\<init\>((r5v0 'this' kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> A[IMMUTABLE_TYPE, THIS]), (r6v0 'capacity' int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'singleConsumer' boolean A[D('singleConsumer' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0039 \-\> B:18:?, CROSS_EDGE: B:26:0x0029 \-\> B:28:0x002c, CROSS_EDGE: B:33:0x0043 \-\> B:18:?, CROSS_EDGE: B:22:0x0023 \-\> B:23:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_32;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_18;
Node_30 -> Node_31;
Node_31 -> Node_18;
Node_32 -> Node_33;
Node_33 -> Node_18;
Node_22 -> Node_23;
}

