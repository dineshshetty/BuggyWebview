digraph "CFG forkotlinx.coroutines.internal.ExceptionsConstructorKt.tryCopyException(Ljava\/lang\/Throwable;)Ljava\/lang\/Throwable;" {
Node_34 [shape=record,label="{34\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Throwable)]) kotlinx.coroutines.CopyableThrowable  (LINE:27)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0028 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0028|0x0028: SGET  (r0 I:kotlinx.coroutines.internal.CtorCache) =  kotlinx.coroutines.internal.ExceptionsConstructorKt.ctorCache kotlinx.coroutines.internal.CtorCache  (LINE:30)\l0x002a: INVOKE  (r1 I:java.lang.Class) = (r2 I:java.lang.Object A[D('exception' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x002e: INVOKE  (r0 I:kotlin.jvm.functions.Function1) = (r0 I:kotlinx.coroutines.internal.CtorCache), (r1 I:java.lang.Class) type: VIRTUAL call: kotlinx.coroutines.internal.CtorCache.get(java.lang.Class):kotlin.jvm.functions.Function1 A[MD:(java.lang.Class\<? extends java.lang.Throwable\>):kotlin.jvm.functions.Function1\<java.lang.Throwable, java.lang.Throwable\> (m)]\l0x0032: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function1), (r2 I:java.lang.Object A[D('exception' java.lang.Throwable)]) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0036: CHECK_CAST (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0038|RETURN\l|0x0038: RETURN  (r0 I:E extends java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ 0x0004|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_38 [shape=record,label="{38\:\ 0x0004|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:38:0x0004), top: B:49:0x0004 \}\lCatch: all \-\> 0x0013\l|0x0004: SGET  (r0 I:kotlin.Result$Companion) =  kotlin.Result.Companion kotlin.Result$Companion A[Catch: all \-\> 0x0013, TRY_ENTER] (LINE:28)\l0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:111)\l0x0007: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Throwable)])  (LINE:28)\l0x0008: CHECK_CAST (r1 I:kotlinx.coroutines.CopyableThrowable) = (kotlinx.coroutines.CopyableThrowable) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0013]\l0x000a: INVOKE  (r1 I:java.lang.Throwable) = (r1 I:kotlinx.coroutines.CopyableThrowable) type: INTERFACE call: kotlinx.coroutines.CopyableThrowable.createCopy():java.lang.Throwable A[Catch: all \-\> 0x0013, MD:():T extends java.lang.Throwable & kotlinx.coroutines.CopyableThrowable\<T\> (m)]\l0x000e: INVOKE  (r0 I:java.lang.Object) = (r1 I:java.lang.Object) type: STATIC call: kotlin.Result.constructor\-impl(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0013, MD:\<T\>:(java.lang.Object):java.lang.Object (m), TRY_LEAVE]\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: INVOKE  (r1 I:boolean) = (r0 I:java.lang.Object) type: STATIC call: kotlin.Result.isFailure\-impl(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0022|0x0022: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0025 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0024|0x0024: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0025|0x0025: CHECK_CAST (r0 I:java.lang.Throwable) = (java.lang.Throwable) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0027|RETURN\l|0x0027: RETURN  (r0 I:E extends java.lang.Throwable) \l}"];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_40 [shape=record,label="{40\:\ 0x0013|ExcHandler: all \-\> 0x0013\l|0x0013: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0013]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0014|0x0014: SGET  (r1 I:kotlin.Result$Companion) =  kotlin.Result.Companion kotlin.Result$Companion \l0x0016: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.Throwable) type: STATIC call: kotlin.ResultKt.createFailure(java.lang.Throwable):java.lang.Object A[MD:(java.lang.Throwable):java.lang.Object (m)]\l0x001a: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.Object) type: STATIC call: kotlin.Result.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<T\>:(java.lang.Object):java.lang.Object (m)]\l}"];
MethodNode[shape=record,label="{public static final E extends java.lang.Throwable kotlinx.coroutines.internal.ExceptionsConstructorKt.tryCopyException((r2 I:E extends java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:46:0x0027 \-\> B:35:?, CROSS_EDGE: B:43:0x0022 \-\> B:45:0x0025, CROSS_EDGE: B:41:0x0014 \-\> B:42:0x001e, CROSS_EDGE: B:49:0x0004 \-\> B:40:0x0013\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:38:0x0004), top: B:49:0x0004 \}\lTYPE_VARS: [E extends java.lang.Throwable]\lSIGNATURE: \<E:Ljava\/lang\/Throwable;\>(TE;)TE;\lDebug Info:\l  0x0007\-0x000e: r0 '$i$a$\-runCatching\-ExceptionsConstructorKt$tryCopyException$1' I\l  \-1 \-0x0038: r2 'exception' Ljava\/lang\/Throwable;\l}"];
MethodNode -> Node_34;Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_47;
Node_37 -> Node_49[style=dashed];
Node_47 -> Node_48;
Node_48 -> Node_35;
Node_49 -> Node_38;
Node_49 -> Node_40;
Node_38 -> Node_42;
Node_38 -> Node_50;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_35;
Node_50 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
}

