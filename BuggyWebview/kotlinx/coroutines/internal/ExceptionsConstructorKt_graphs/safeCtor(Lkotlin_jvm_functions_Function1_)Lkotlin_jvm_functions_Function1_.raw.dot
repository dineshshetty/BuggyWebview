digraph "CFG forkotlinx.coroutines.internal.ExceptionsConstructorKt.safeCtor(Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/jvm\/functions\/Function1;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: NEW_INSTANCE  (r1 I:kotlinx.coroutines.internal.ExceptionsConstructorKt$safeCtor$1) =  kotlinx.coroutines.internal.ExceptionsConstructorKt$safeCtor$1  (LINE:70)\l0x0003: INVOKE  \l  (r1 I:kotlinx.coroutines.internal.ExceptionsConstructorKt$safeCtor$1)\l  (r2 I:kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlinx.coroutines.internal.ExceptionsConstructorKt$safeCtor$1.\<init\>(kotlin.jvm.functions.Function1):void A[MD:(kotlin.jvm.functions.Function1\<? super java.lang.Throwable, ? extends java.lang.Throwable\>):void (m)]\l0x0006: CHECK_CAST (r1 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|RETURN\l|0x0008: RETURN  (r1 I:kotlin.jvm.functions.Function1\<java.lang.Throwable, java.lang.Throwable\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final kotlin.jvm.functions.Function1\<java.lang.Throwable, java.lang.Throwable\> kotlinx.coroutines.internal.ExceptionsConstructorKt.safeCtor((r2 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, ? extends java.lang.Throwable\> A[D('block' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0008: r0 '$i$f$safeCtor' I\l  \-1 \-0x0008: r2 'block' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;+Ljava\/lang\/Throwable;\>;)Lkotlin\/jvm\/functions\/Function1\<Ljava\/lang\/Throwable;Ljava\/lang\/Throwable;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

