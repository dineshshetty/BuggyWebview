digraph "CFG forkotlinx.coroutines.internal.ConcurrentKt.removeFutureOnCancel(Ljava\/util\/concurrent\/Executor;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|0x0001: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:32)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0002|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0020, blocks: (B:21:0x0002, B:23:0x0006, B:27:0x000e, B:30:0x0013), top: B:34:0x0002 \}\lCatch: all \-\> 0x0020\l|0x0002: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('executor' java.util.concurrent.Executor)]) java.util.concurrent.ScheduledThreadPoolExecutor A[Catch: all \-\> 0x0020, TRY_ENTER]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000a \l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|TryCatch #0 \{all \-\> 0x0020, blocks: (B:21:0x0002, B:23:0x0006, B:27:0x000e, B:30:0x0013), top: B:34:0x0002 \}\lCatch: all \-\> 0x0020\l|0x0006: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('executor' java.util.concurrent.Executor)]) \l0x0007: CHECK_CAST (r1 I:java.util.concurrent.ScheduledThreadPoolExecutor) = (java.util.concurrent.ScheduledThreadPoolExecutor) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0020]\l0x0009: GOTO  \-\> 0x000b \l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000e \l}"];
Node_26 [shape=record,label="{26\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|TryCatch #0 \{all \-\> 0x0020, blocks: (B:21:0x0002, B:23:0x0006, B:27:0x000e, B:30:0x0013), top: B:34:0x0002 \}\lCatch: all \-\> 0x0020\l|0x000e: SGET  (r2 I:java.lang.reflect.Method) =  kotlinx.coroutines.internal.ConcurrentKt.REMOVE_FUTURE_ON_CANCEL java.lang.reflect.Method A[Catch: all \-\> 0x0020] (LINE:33)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0013 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:boolean) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0020, blocks: (B:21:0x0002, B:23:0x0006, B:27:0x000e, B:30:0x0013), top: B:34:0x0002 \}\lCatch: all \-\> 0x0020\l|0x0013: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0014: NEW_ARRAY  (r4 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: all \-\> 0x0020]\l0x0016: INVOKE  (r5 I:java.lang.Boolean) = (r3 I:boolean) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[Catch: all \-\> 0x0020, MD:(boolean):java.lang.Boolean (c)]\l0x001a: APUT  (r4 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]), (r5 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0020]\l0x001c: INVOKE  \l  (r2 I:java.lang.reflect.Method)\l  (r1 I:java.lang.Object A[D('executor' java.util.concurrent.ScheduledThreadPoolExecutor)])\l  (r4 I:java.lang.Object[])\l type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: all \-\> 0x0020, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c), TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|RETURN\l|0x001f: RETURN  (r3 I:boolean)  (LINE:34)\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|ExcHandler: all \-\> 0x0020\l|0x0020: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0020] (LINE:35)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:boolean)  (LINE:36)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlinx.coroutines.internal.ConcurrentKt.removeFutureOnCancel((r6 I:java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0012 \-\> B:19:?, CROSS_EDGE: B:31:0x001f \-\> B:19:?, CROSS_EDGE: B:33:0x0021 \-\> B:19:?, CROSS_EDGE: B:24:0x000a \-\> B:25:0x000b, CROSS_EDGE: B:34:0x0002 \-\> B:32:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0020: r1 'executor' Ljava\/util\/concurrent\/ScheduledThreadPoolExecutor;\l  0x0021\-0x0021: r1 'e' Ljava\/lang\/Throwable;\l  \-1 \-0x0021: r6 'executor' Ljava\/util\/concurrent\/Executor;\lTryCatch #0 \{all \-\> 0x0020, blocks: (B:21:0x0002, B:23:0x0006, B:27:0x000e, B:30:0x0013), top: B:34:0x0002 \}\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_34;
Node_34 -> Node_21;
Node_34 -> Node_32;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_19;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_19;
Node_30 -> Node_31;
Node_30 -> Node_35;
Node_31 -> Node_19;
Node_35 -> Node_32;
Node_24 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_19;
}

