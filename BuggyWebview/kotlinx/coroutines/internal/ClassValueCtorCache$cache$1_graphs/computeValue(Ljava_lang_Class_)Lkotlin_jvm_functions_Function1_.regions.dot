digraph "CFG forkotlinx.coroutines.internal.ClassValueCtorCache$cache$1.computeValue(Ljava\/lang\/Class;)Lkotlin\/jvm\/functions\/Function1;" {
subgraph cluster_Region_1543566398 {
label = "R(1:(2:(1:3)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1696774997 {
label = "R(2:(1:3)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_170098254 {
label = "IF [B:2:0x0000] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|if (r3 != null) goto L2\l}"];
subgraph cluster_Region_1038209108 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|return kotlinx.coroutines.internal.ExceptionsConstructorKt.access$createConstructor(r3)\l}"];
}
}
subgraph cluster_Region_1713074898 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|throw new java.lang.NullPointerException(\"null cannot be cast to non\-null type java.lang.Class\<out kotlin.Throwable\>\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0002}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0007}"];
MethodNode[shape=record,label="{protected kotlin.jvm.functions.Function1\<java.lang.Throwable, java.lang.Throwable\> kotlinx.coroutines.internal.ClassValueCtorCache$cache$1.computeValue((r2v0 'this' kotlinx.coroutines.internal.ClassValueCtorCache$cache$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Class\<?\> A[D('type' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000e \-\> B:1:?\lINLINE_NOT_NEEDED\lSIGNATURE: (Ljava\/lang\/Class\<*\>;)Lkotlin\/jvm\/functions\/Function1\<Ljava\/lang\/Throwable;Ljava\/lang\/Throwable;\>;\lRENAME_REASON:collision with other method in class\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_2 -> Node_5[style=dashed];
Node_4 -> Node_1;
Node_6 -> Node_1;
Node_0 -> Node_2;
Node_3 -> Node_4;
Node_5 -> Node_6;
}

