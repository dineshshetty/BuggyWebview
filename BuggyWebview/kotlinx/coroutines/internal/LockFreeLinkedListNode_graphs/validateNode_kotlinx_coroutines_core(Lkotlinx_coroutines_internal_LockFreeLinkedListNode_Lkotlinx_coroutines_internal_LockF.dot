digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.validateNode$kotlinx_coroutines_core(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|r1 = true\l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_28 [shape=record,label="{28\:\ 0x0008}"];
Node_29 [shape=record,label="{29\:\ 0x000b|if (r5 != r4._prev) goto L10\l}"];
Node_30 [shape=record,label="{30\:\ 0x000d|r0 = 1\l}"];
Node_32 [shape=record,label="{32\:\ 0x0010|PHI: r0 \l  PHI: (r0v6 int) = (r0v5 int), (r0v8 int) binds: [B:31:0x000f, B:30:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == 0) goto L7\l}"];
Node_34 [shape=record,label="{34\:\ 0x0013}"];
Node_35 [shape=record,label="{35\:\ 0x0018|throw new java.lang.AssertionError()\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x000f|r0 = 0\l}"];
Node_36 [shape=record,label="{36\:\ 0x0019}"];
Node_37 [shape=record,label="{37\:\ 0x001d|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L20\l}"];
Node_38 [shape=record,label="{38\:\ 0x001f}"];
Node_39 [shape=record,label="{39\:\ 0x0022|if (r6 != r4._next) goto L15\l}"];
Node_41 [shape=record,label="{41\:\ 0x0025|r1 = false\l}"];
Node_42 [shape=record,label="{42\:\ 0x0026|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean) binds: [B:39:0x0022, B:41:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L17\l}"];
Node_44 [shape=record,label="{44\:\ 0x0029}"];
Node_45 [shape=record,label="{45\:\ 0x002e|throw new java.lang.AssertionError()\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_46 [shape=record,label="{46\:\ 0x002f|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.LockFreeLinkedListNode.validateNode$kotlinx_coroutines_core((r4v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r5v0 'prev' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'next' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:45:0x002e \-\> B:25:?, CROSS_EDGE: B:46:0x002f \-\> B:25:?, CROSS_EDGE: B:39:0x0022 \-\> B:42:0x0026, CROSS_EDGE: B:37:0x001d \-\> B:46:0x002f, CROSS_EDGE: B:31:0x000f \-\> B:32:0x0010, CROSS_EDGE: B:27:0x0006 \-\> B:36:0x0019\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_36;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_36[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_25;
Node_31 -> Node_32;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_42[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_47[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_25;
Node_47 -> Node_25;
Node_46 -> Node_25;
}

