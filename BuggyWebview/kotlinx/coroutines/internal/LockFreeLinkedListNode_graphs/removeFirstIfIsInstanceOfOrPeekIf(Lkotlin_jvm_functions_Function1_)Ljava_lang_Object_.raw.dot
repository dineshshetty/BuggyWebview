digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstIfIsInstanceOfOrPeekIf(Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0001|LOOP_START\lLOOP:0: B:25:0x0001\-\>B:39:0x0031\l|0x0002: INVOKE  (r1 I:java.lang.Object) = (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getNext():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:298)\l0x0006: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r1 I:??[OBJECT, ARRAY]) \l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:299)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x000c \l}"];
Node_28 [shape=record,label="{28\:\ 0x000c|0x000c: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:300)\l0x000d: CONST_STR  (r4 I:java.lang.String) =  \"T\" \l0x000f: INVOKE  (r3 I:int), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(int, java.lang.String):void A[MD:(int, java.lang.String):void (m)]\l0x0012: INSTANCE_OF  (r3 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('first' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) java.lang.Object \l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|0x0014: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0017 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0017|0x0017: INVOKE  (r2 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r1 I:java.lang.Object A[D('first' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:301)\l0x001b: CHECK_CAST (r2 I:java.lang.Boolean) = (java.lang.Boolean) (r2 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0021|0x0021: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x002a \l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: INVOKE  (r2 I:boolean) = \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('first' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved():boolean A[MD:():boolean (m)] (LINE:303)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0027|0x0027: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x002a \l}"];
Node_41 [shape=record,label="{41\:\ 0x0029|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0029|RETURN\l|0x0029: RETURN  (r1 I:T A[D('first' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|0x002a: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('first' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.removeOrNext():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:305)\l}"];
Node_37 [shape=record,label="{37\:\ 0x002e|0x002e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0031  (LINE:306)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0031|LOOP_END\lLOOP:0: B:25:0x0001\-\>B:39:0x0031\l|0x0031: INVOKE  \l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.helpRemovePrev():void A[MD:():void (m)] (LINE:308)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0030|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0030|RETURN\l|0x0030: RETURN  (r1 I:T A[D('first' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|RETURN\l|0x0016: RETURN  (r2 I:T) \l}"];
Node_42 [shape=record,label="{42\:\ 0x000b|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x000b|RETURN\l|0x000b: RETURN  (r2 I:T) \l}"];
MethodNode[shape=record,label="{public final \/* synthetic *\/ T kotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstIfIsInstanceOfOrPeekIf((r5 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0016 \-\> B:23:?, CROSS_EDGE: B:35:0x0029 \-\> B:23:?, CROSS_EDGE: B:38:0x0030 \-\> B:23:?, BACK_EDGE: B:39:0x0031 \-\> B:25:0x0001, CROSS_EDGE: B:32:0x0021 \-\> B:36:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0034: r1 'first' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x002e\-0x0034: r2 'next' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0001\-0x0034: r0 '$i$f$removeFirstIfIsInstanceOfOrPeekIf' I\l  \-1 \-0x0034: r6 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_42[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_40[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_41[style=dashed];
Node_41 -> Node_35;
Node_35 -> Node_23;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_43[style=dashed];
Node_39 -> Node_25;
Node_43 -> Node_38;
Node_38 -> Node_23;
Node_40 -> Node_30;
Node_30 -> Node_23;
Node_42 -> Node_27;
Node_27 -> Node_23;
}

