digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstIfIsInstanceOfOrPeekIf(Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000}"];
Node_25 [shape=record,label="{25\:\ 0x0001|LOOP_START\lLOOP:0: B:25:0x0001\-\>B:39:0x0031\l|kotlinx.coroutines.internal.LockFreeLinkedListNode r1 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) getNext()\l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|if (r1 != r5) goto L4\l}"];
Node_28 [shape=record,label="{28\:\ 0x000c|kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(3, \"T\")\l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|if ((r1 instanceof java.lang.Object) != false) goto L6\l}"];
Node_31 [shape=record,label="{31\:\ 0x0017}"];
Node_32 [shape=record,label="{32\:\ 0x0021|if (r6.invoke(r1).booleanValue() == false) goto L13\l}"];
Node_33 [shape=record,label="{33\:\ 0x0023}"];
Node_34 [shape=record,label="{34\:\ 0x0027|if (r1.isRemoved() != false) goto L13\l}"];
Node_41 [shape=record,label="{41\:\ 0x0029|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0029|RETURN\l|return r1\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|kotlinx.coroutines.internal.LockFreeLinkedListNode r2 = r1.removeOrNext()\l}"];
Node_37 [shape=record,label="{37\:\ 0x002e|if (r2 != null) goto L15\l}"];
Node_39 [shape=record,label="{39\:\ 0x0031|LOOP_END\lLOOP:0: B:25:0x0001\-\>B:39:0x0031\l|r2.helpRemovePrev()\l}"];
Node_43 [shape=record,label="{43\:\ 0x0030|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0030|RETURN\l|return r1\l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|RETURN\l|return null\l}"];
Node_42 [shape=record,label="{42\:\ 0x000b|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x000b|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{public final \/* synthetic *\/ T kotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstIfIsInstanceOfOrPeekIf((r5v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r6v0 kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0016 \-\> B:23:?, CROSS_EDGE: B:35:0x0029 \-\> B:23:?, CROSS_EDGE: B:38:0x0030 \-\> B:23:?, BACK_EDGE: B:39:0x0031 \-\> B:25:0x0001, CROSS_EDGE: B:32:0x0021 \-\> B:36:0x002a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r1v1, types: [T, java.lang.Object, kotlinx.coroutines.internal.LockFreeLinkedListNode]\}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_42[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_40[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_41[style=dashed];
Node_41 -> Node_35;
Node_35 -> Node_23;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_43[style=dashed];
Node_39 -> Node_25;
Node_43 -> Node_38;
Node_38 -> Node_23;
Node_40 -> Node_30;
Node_30 -> Node_23;
Node_42 -> Node_27;
Node_27 -> Node_23;
}

