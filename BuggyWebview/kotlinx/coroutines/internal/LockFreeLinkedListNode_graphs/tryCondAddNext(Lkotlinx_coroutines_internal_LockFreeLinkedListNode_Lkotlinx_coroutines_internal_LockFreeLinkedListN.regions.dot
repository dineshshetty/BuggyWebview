digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;)I" {
subgraph cluster_Region_354650418 {
label = "R(2:1|(2:(1:6)|(1:3)))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlinx.coroutines.internal.LockFreeLinkedListNode._prev$FU.lazySet(r2, r1)\ljava.util.concurrent.atomic.AtomicReferenceFieldUpdater java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0 = kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU\lr0.lazySet(r2, r3)\lr4.oldNext = r3\l}"];
subgraph cluster_Region_1125105384 {
label = "R(2:(1:6)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2108798376 {
label = "IF [B:15:0x0010] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0010|if (androidx.concurrent.futures.C0125xc40028dd.m112m(r0, r1, r3, r4) == true) goto L5\l}"];
subgraph cluster_Region_887655544 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0018|RETURN\l|return r4.perform(r1) == null ? 1 : 2\l}"];
}
}
subgraph cluster_Region_1902005688 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0012|RETURN\l|return 0\l}"];
}
}
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0014}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x001a|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x001c|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public final int kotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext((r1v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r2v0 'node' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'next' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x001d \-\> B:13:?, CROSS_EDGE: B:21:0x001c \-\> B:22:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_16 -> Node_13;
Node_12 -> Node_14;
Node_18 -> Node_19;
Node_20 -> Node_13;
Node_21 -> Node_13;
}

