digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.removeOrNext()Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|LOOP_START\lLOOP:0: B:19:0x0000\-\>B:27:0x0022\l|0x0001: INVOKE  (r0 I:java.lang.Object) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getNext():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:251)\l0x0005: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('next' java.lang.Object)]) kotlinx.coroutines.internal.Removed  (LINE:252)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x000f \l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' java.lang.Object)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0015  (LINE:253)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('next' java.lang.Object)])  (LINE:254)\l0x0016: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r1 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r1 I:kotlinx.coroutines.internal.Removed) = (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode.removed():kotlinx.coroutines.internal.Removed A[MD:():kotlinx.coroutines.internal.Removed (m)]\l0x001c: SGET  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:255)\l0x001e: INVOKE  (r2 I:boolean) = \l  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r4 I:java.lang.Object)\l  (r0 I:java.lang.Object A[D('next' java.lang.Object)])\l  (r1 I:java.lang.Object A[D('removed' kotlinx.coroutines.internal.Removed)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0022|LOOP_END\lLOOP:0: B:19:0x0000\-\>B:27:0x0022\l|0x0022: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0000 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|0x0024: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('next' java.lang.Object)])  (LINE:257)\l0x0025: CHECK_CAST (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r2 I:??[OBJECT, ARRAY]) \l0x0027: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0028: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode), (r3 I:kotlinx.coroutines.internal.OpDescriptor) type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode.correctPrev(kotlinx.coroutines.internal.OpDescriptor):kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:(kotlinx.coroutines.internal.OpDescriptor):kotlinx.coroutines.internal.LockFreeLinkedListNode (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|RETURN\l|0x002b: RETURN  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)  (LINE:258)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0011|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0011|0x0011: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('next' java.lang.Object)]) \l0x0012: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|RETURN\l|0x0014: RETURN  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0009|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|0x0009: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('next' java.lang.Object)]) \l0x000a: CHECK_CAST (r1 I:kotlinx.coroutines.internal.Removed) = (kotlinx.coroutines.internal.Removed) (r1 I:??[OBJECT, ARRAY]) \l0x000c: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r1 I:kotlinx.coroutines.internal.Removed) kotlinx.coroutines.internal.Removed.ref kotlinx.coroutines.internal.LockFreeLinkedListNode \l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|RETURN\l|0x000e: RETURN  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.internal.LockFreeLinkedListNode kotlinx.coroutines.internal.LockFreeLinkedListNode.removeOrNext((r4 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0014 \-\> B:18:?, CROSS_EDGE: B:29:0x002b \-\> B:18:?, BACK_EDGE: B:27:0x0022 \-\> B:19:0x0000\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x002c: r0 'next' Ljava\/lang\/Object;\l  0x001c\-0x002c: r1 'removed' Lkotlinx\/coroutines\/internal\/Removed;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_23;
Node_20 -> Node_32[style=dashed];
Node_23 -> Node_26;
Node_23 -> Node_33[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_19;
Node_27 -> Node_31[style=dashed];
Node_31 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_18;
Node_33 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_18;
Node_32 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_18;
}

