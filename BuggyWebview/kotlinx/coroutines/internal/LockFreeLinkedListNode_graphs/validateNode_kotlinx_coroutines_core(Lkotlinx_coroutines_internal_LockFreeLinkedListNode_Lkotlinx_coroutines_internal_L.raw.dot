digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.validateNode$kotlinx_coroutines_core(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:619)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0019 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:672)\l0x0009: IGET  (r3 I:java.lang.Object) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) kotlinx.coroutines.internal.LockFreeLinkedListNode._prev java.lang.Object  (LINE:619)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000b|0x000b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x000f \l}"];
Node_30 [shape=record,label="{30\:\ 0x000d|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-LockFreeLinkedListNode$validateNode$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-LockFreeLinkedListNode$validateNode$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0013 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0015: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x000f|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-LockFreeLinkedListNode$validateNode$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0019|0x0019: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:620)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001d|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x002f \l}"];
Node_38 [shape=record,label="{38\:\ 0x001f|0x001f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:672)\l0x0020: IGET  (r3 I:java.lang.Object) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) kotlinx.coroutines.internal.LockFreeLinkedListNode._next java.lang.Object  (LINE:620)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0022|0x0022: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0025 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0025|0x0025: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0029 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0029|0x0029: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x002b: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x002f: RETURN   A[SYNTHETIC] (LINE:621)\l}"];
Node_46 [shape=record,label="{46\:\ 0x002f|RETURN\lORIG_RETURN\l|0x002f: RETURN    (LINE:621)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.internal.LockFreeLinkedListNode.validateNode$kotlinx_coroutines_core((r4 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:45:0x002e \-\> B:25:?, CROSS_EDGE: B:46:0x002f \-\> B:25:?, CROSS_EDGE: B:39:0x0022 \-\> B:42:0x0026, CROSS_EDGE: B:37:0x001d \-\> B:46:0x002f, CROSS_EDGE: B:31:0x000f \-\> B:32:0x0010, CROSS_EDGE: B:27:0x0006 \-\> B:36:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0010: r0 '$i$a$\-assert\-LockFreeLinkedListNode$validateNode$1' I\l  0x0020\-0x0026: r0 '$i$a$\-assert\-LockFreeLinkedListNode$validateNode$2' I\l  \-1 \-0x002f: r5 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x002f: r6 'next' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_36;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_36[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_25;
Node_31 -> Node_32;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_42[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_47[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_25;
Node_47 -> Node_25;
Node_46 -> Node_25;
}

