digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIfPrevAndIf(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function0;)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY])  (LINE:177)\l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: NEW_INSTANCE  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1) =  kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1  (LINE:678)\l0x0005: INVOKE  \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1)\l  (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r8 I:kotlin.jvm.functions.Function0 A[D('condition' kotlin.jvm.functions.Function0)])\l type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.\<init\>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlin.jvm.functions.Function0):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlin.jvm.functions.Function0\<java.lang.Boolean\>):void (m)]\l0x0008: CHECK_CAST (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) (r3 I:??[OBJECT, ARRAY]) \l0x000b: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r3 I:??[OBJECT, ARRAY])  (LINE:177)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|LOOP_START\lLOOP:0: B:18:0x000c\-\>B:22:0x0023\l|0x000d: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:179)\l0x0011: INVOKE  (r3 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r2 I:java.lang.Object A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:180)\l0x0015: CHECK_CAST (r3 I:java.lang.Boolean) = (java.lang.Boolean) (r3 I:??[OBJECT, ARRAY]) \l0x0017: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l0x001b: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|0x001c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001f \l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|0x001f: INVOKE  (r3 I:int) = \l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int (m)] (LINE:181)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0023|LOOP_END\lLOOP:0: B:18:0x000c\-\>B:22:0x0023\l|0x0023: SWITCH  (r3 I:??)\l case 1: goto B:28:0x0028\l case 2: goto B:27:0x0027\l default: goto B:18:0x000c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|RETURN\l|0x0027: RETURN  (r4 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0028|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0028|RETURN\l|0x0028: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:182)\l0x0029: RETURN  (r3 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001e|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001e|RETURN\l|0x001e: RETURN  (r4 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIfPrevAndIf((r5 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super kotlinx.coroutines.internal.LockFreeLinkedListNode, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function0\<java.lang.Boolean\> A[D('condition' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0027 \-\> B:16:?, CROSS_EDGE: B:26:0x0029 \-\> B:16:?, BACK_EDGE: B:22:0x0023 \-\> B:18:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x000b: r1 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0003\-0x000b: r2 '$i$f$makeCondAddOp' I\l  0x0011\-0x0026: r2 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0001\-0x0031: r0 '$i$f$addLastIfPrevAndIf' I\l  0x000c\-0x0031: r1 'condAdd' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;\l  0x0027\-0x0031: r2 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0031: r6 'node' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0031: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\l  \-1 \-0x0031: r8 'condition' Lkotlin\/jvm\/functions\/Function0;\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Ljava\/lang\/Boolean;\>;Lkotlin\/jvm\/functions\/Function0\<Ljava\/lang\/Boolean;\>;)Z\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_29[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_18;
Node_22 -> Node_27;
Node_22 -> Node_28;
Node_27 -> Node_24;
Node_24 -> Node_16;
Node_28 -> Node_25;
Node_25 -> Node_16;
Node_29 -> Node_20;
Node_20 -> Node_16;
}

