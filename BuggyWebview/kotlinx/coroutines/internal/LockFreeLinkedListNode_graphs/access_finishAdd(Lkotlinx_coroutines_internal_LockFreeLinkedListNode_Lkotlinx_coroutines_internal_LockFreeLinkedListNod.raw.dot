digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.access$finishAdd(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('$this' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode.finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode):void (m)] (LINE:63)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0003|RETURN\l|0x0003: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ void kotlinx.coroutines.internal.LockFreeLinkedListNode.access$finishAdd((r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('$this' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: INVOKE  \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('$this' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode.finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode):void\lDebug Info:\l  \-1 \-0x0003: r0 '$this' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0003: r1 'next' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

