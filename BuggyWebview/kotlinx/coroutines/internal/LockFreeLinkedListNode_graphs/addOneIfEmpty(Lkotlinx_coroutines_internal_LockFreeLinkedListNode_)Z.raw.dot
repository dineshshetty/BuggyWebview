digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.addOneIfEmpty(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._prev$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:124)\l0x0002: INVOKE  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r2 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(java.lang.Object, java.lang.Object):void A[MD:(T, V):void (c)]\l0x0005: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:125)\l0x0007: INVOKE  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r2 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(java.lang.Object, java.lang.Object):void A[MD:(T, V):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|LOOP_START\lLOOP:0: B:17:0x000a\-\>B:22:0x0019\l|0x000b: INVOKE  (r0 I:java.lang.Object) = (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getNext():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:127)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' java.lang.Object)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0013  (LINE:128)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|0x0013: SGET  (r1 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:129)\l0x0015: INVOKE  (r1 I:boolean) = \l  (r1 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r2 I:java.lang.Object)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|LOOP_END\lLOOP:0: B:17:0x000a\-\>B:22:0x0019\l|0x0019: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000a \l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|0x001b: INVOKE  \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode.finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode):void (m)] (LINE:131)\l0x001e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:132)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|RETURN\l|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.LockFreeLinkedListNode.addOneIfEmpty((r2 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:24:0x001f \-\> B:15:?, BACK_EDGE: B:22:0x0019 \-\> B:17:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x0020: r0 'next' Ljava\/lang\/Object;\l  \-1 \-0x0020: r3 'node' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_27[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_17;
Node_22 -> Node_26[style=dashed];
Node_26 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_15;
Node_27 -> Node_19;
Node_19 -> Node_15;
}

