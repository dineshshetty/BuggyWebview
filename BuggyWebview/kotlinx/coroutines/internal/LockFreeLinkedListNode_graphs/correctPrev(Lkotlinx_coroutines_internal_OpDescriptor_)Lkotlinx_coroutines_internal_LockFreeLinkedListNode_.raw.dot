digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.correctPrev(Lkotlinx\/coroutines\/internal\/OpDescriptor;)Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;" {
Node_51 [shape=record,label="{51\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_53 [shape=record,label="{53\:\ 0x0001|LOOP_START\lLOOP:0: B:53:0x0001\-\>B:90:0x0001\l|0x0001: IGET  (r0 I:java.lang.Object) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) kotlinx.coroutines.internal.LockFreeLinkedListNode._prev java.lang.Object  (LINE:573)\l0x0003: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x0005: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('oldPrev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:574)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:575)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0007|LOOP_START\lLOOP:1: B:54:0x0007\-\>B:98:0x0007\l|0x0008: IGET  (r3 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l kotlinx.coroutines.internal.LockFreeLinkedListNode._next java.lang.Object  (LINE:577)\l}"];
Node_55 [shape=record,label="{55\:\ 0x000b|0x000b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prevNext' java.lang.Object)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x001a  (LINE:580)\l}"];
Node_62 [shape=record,label="{62\:\ 0x001a|0x001a: INVOKE  (r4 I:boolean) = (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved():boolean A[MD:():boolean (m)] (LINE:590)\l0x001e: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x001f|0x001f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x0022 \l}"];
Node_65 [shape=record,label="{65\:\ 0x0022|0x0022: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prevNext' java.lang.Object)]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('op' kotlinx.coroutines.internal.OpDescriptor)])  \-\> B:67:0x0025  (LINE:591)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0025|0x0025: INSTANCE_OF  (r4 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('prevNext' java.lang.Object)]) kotlinx.coroutines.internal.OpDescriptor  (LINE:592)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0027|0x0027: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x003c \l}"];
Node_74 [shape=record,label="{74\:\ 0x003c|0x003c: INSTANCE_OF  (r4 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('prevNext' java.lang.Object)]) kotlinx.coroutines.internal.Removed  (LINE:598)\l}"];
Node_75 [shape=record,label="{75\:\ 0x003e|0x003e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:95:0x0059 \l}"];
Node_95 [shape=record,label="{95\:\ 0x0059|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0059|0x0059: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('last' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r1 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:611)\l0x005a: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r3 I:??[OBJECT, ARRAY] A[D('prevNext' java.lang.Object)])  (LINE:612)\l0x005b: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r1 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l}"];
Node_99 [shape=record,label="{99\:\ 0x0007|SYNTHETIC\l}"];
Node_98 [shape=record,label="{98\:\ 0x0007|LOOP_END\lSYNTHETIC\lLOOP:1: B:54:0x0007\-\>B:98:0x0007\l}"];
Node_97 [shape=record,label="{97\:\ 0x0040|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0040|0x0040: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('last' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x0053  (LINE:599)\l}"];
Node_94 [shape=record,label="{94\:\ 0x0053|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0053|0x0053: IGET  (r4 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l kotlinx.coroutines.internal.LockFreeLinkedListNode._prev java.lang.Object  (LINE:607)\l0x0055: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r4 I:??[OBJECT, ARRAY]) \l0x0056: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r1 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l}"];
Node_100 [shape=record,label="{100\:\ 0x0007|SYNTHETIC\l}"];
Node_96 [shape=record,label="{96\:\ 0x0042|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0042|0x0042: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:601)\l0x0044: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('prevNext' java.lang.Object)]) \l0x0045: CHECK_CAST (r5 I:kotlinx.coroutines.internal.Removed) = (kotlinx.coroutines.internal.Removed) (r5 I:??[OBJECT, ARRAY]) \l0x0047: IGET  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r5 I:kotlinx.coroutines.internal.Removed) kotlinx.coroutines.internal.Removed.ref kotlinx.coroutines.internal.LockFreeLinkedListNode \l0x0049: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r2 I:java.lang.Object A[D('last' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r1 I:java.lang.Object A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r5 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_78 [shape=record,label="{78\:\ 0x004d|0x004d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x0050 \l}"];
Node_80 [shape=record,label="{80\:\ 0x0050|0x0050: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r2 I:??[OBJECT, ARRAY] A[D('last' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:604)\l0x0051: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('last' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:605)\l}"];
Node_101 [shape=record,label="{101\:\ 0x0007|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x0001|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0001|LOOP_END\lSYNTHETIC\lLOOP:0: B:53:0x0001\-\>B:90:0x0001\l}"];
Node_84 [shape=record,label="{84\:\ 0x0029|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0029|0x0029: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('op' kotlinx.coroutines.internal.OpDescriptor)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0035  (LINE:593)\l}"];
Node_70 [shape=record,label="{70\:\ 0x002b|0x002b: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('prevNext' java.lang.Object)]) \l0x002c: CHECK_CAST (r4 I:kotlinx.coroutines.internal.OpDescriptor) = (kotlinx.coroutines.internal.OpDescriptor) (r4 I:??[OBJECT, ARRAY]) \l0x002e: INVOKE  (r4 I:boolean) = \l  (r7 I:kotlinx.coroutines.internal.OpDescriptor A[D('op' kotlinx.coroutines.internal.OpDescriptor)])\l  (r4 I:kotlinx.coroutines.internal.OpDescriptor)\l type: VIRTUAL call: kotlinx.coroutines.internal.OpDescriptor.isEarlierThan(kotlinx.coroutines.internal.OpDescriptor):boolean A[MD:(kotlinx.coroutines.internal.OpDescriptor):boolean (m)]\l}"];
Node_71 [shape=record,label="{71\:\ 0x0032|0x0032: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0035 \l}"];
Node_89 [shape=record,label="{89\:\ 0x0034|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0034|RETURN\l|0x0034: RETURN  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)  (LINE:594)\l}"];
Node_52 [shape=record,label="{52\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_73 [shape=record,label="{73\:\ 0x0035|0x0035: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('prevNext' java.lang.Object)])  (LINE:595)\l0x0036: CHECK_CAST (r4 I:kotlinx.coroutines.internal.OpDescriptor) = (kotlinx.coroutines.internal.OpDescriptor) (r4 I:??[OBJECT, ARRAY]) \l0x0038: INVOKE  \l  (r4 I:kotlinx.coroutines.internal.OpDescriptor)\l  (r1 I:java.lang.Object A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.OpDescriptor.perform(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_92 [shape=record,label="{92\:\ 0x0001|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x0024|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0024|RETURN\l|0x0024: RETURN  \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l \l}"];
Node_87 [shape=record,label="{87\:\ 0x0021|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0021|RETURN\l|0x0021: RETURN  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) \l}"];
Node_88 [shape=record,label="{88\:\ 0x000d|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldPrev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  \-\> B:58:0x0010  (LINE:581)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0010|0x0010: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._prev$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:583)\l0x0012: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r6 I:java.lang.Object)\l  (r0 I:java.lang.Object A[D('oldPrev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r1 I:java.lang.Object A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x0019 \l}"];
Node_86 [shape=record,label="{86\:\ 0x0019|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0019|RETURN\l|0x0019: RETURN  \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (LINE:587)\l}"];
Node_93 [shape=record,label="{93\:\ 0x0001|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x000f|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x000f|RETURN\l|0x000f: RETURN  \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.internal.LockFreeLinkedListNode kotlinx.coroutines.internal.LockFreeLinkedListNode.correctPrev((r6 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlinx.coroutines.internal.OpDescriptor A[D('op' kotlinx.coroutines.internal.OpDescriptor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:61:0x0019 \-\> B:52:?, BACK_EDGE: B:59:0x0016 \-\> B:53:0x0001, CROSS_EDGE: B:64:0x0021 \-\> B:52:?, CROSS_EDGE: B:66:0x0024 \-\> B:52:?, CROSS_EDGE: B:72:0x0034 \-\> B:52:?, BACK_EDGE: B:73:0x0035 \-\> B:53:0x0001, CROSS_EDGE: B:69:0x0029 \-\> B:73:0x0035, BACK_EDGE: B:80:0x0050 \-\> B:54:0x0007, BACK_EDGE: B:78:0x004d \-\> B:53:0x0001, BACK_EDGE: B:81:0x0053 \-\> B:54:0x0007, BACK_EDGE: B:82:0x0059 \-\> B:54:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x005d: r3 'prevNext' Ljava\/lang\/Object;\l  0x0005\-0x005d: r0 'oldPrev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0006\-0x005d: r1 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0007\-0x005d: r2 'last' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x005d: r7 'op' Lkotlinx\/coroutines\/internal\/OpDescriptor;\l}"];
MethodNode -> Node_51;Node_51 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_62;
Node_55 -> Node_88[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_65;
Node_63 -> Node_87[style=dashed];
Node_65 -> Node_67;
Node_65 -> Node_83[style=dashed];
Node_67 -> Node_68;
Node_68 -> Node_74;
Node_68 -> Node_84[style=dashed];
Node_74 -> Node_75;
Node_75 -> Node_95;
Node_75 -> Node_97[style=dashed];
Node_95 -> Node_82;
Node_82 -> Node_99;
Node_99 -> Node_98;
Node_98 -> Node_54;
Node_97 -> Node_76;
Node_76 -> Node_94;
Node_76 -> Node_96[style=dashed];
Node_94 -> Node_81;
Node_81 -> Node_100;
Node_100 -> Node_98;
Node_96 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_80;
Node_78 -> Node_91[style=dashed];
Node_80 -> Node_101;
Node_101 -> Node_98;
Node_91 -> Node_90;
Node_90 -> Node_53;
Node_84 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_73;
Node_70 -> Node_71;
Node_71 -> Node_73;
Node_71 -> Node_89[style=dashed];
Node_89 -> Node_72;
Node_72 -> Node_52;
Node_73 -> Node_92;
Node_92 -> Node_90;
Node_83 -> Node_66;
Node_66 -> Node_52;
Node_87 -> Node_64;
Node_64 -> Node_52;
Node_88 -> Node_56;
Node_56 -> Node_58;
Node_56 -> Node_85[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_86;
Node_59 -> Node_93[style=dashed];
Node_86 -> Node_61;
Node_61 -> Node_52;
Node_93 -> Node_90;
Node_85 -> Node_57;
Node_57 -> Node_52;
}

