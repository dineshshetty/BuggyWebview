digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIf(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlin\/jvm\/functions\/Function0;)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY])  (LINE:154)\l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: NEW_INSTANCE  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1) =  kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1  (LINE:675)\l0x0005: INVOKE  \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1)\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r6 I:kotlin.jvm.functions.Function0 A[D('condition' kotlin.jvm.functions.Function0)])\l type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode$makeCondAddOp$1.\<init\>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlin.jvm.functions.Function0):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlin.jvm.functions.Function0\<java.lang.Boolean\>):void (m)]\l0x0008: CHECK_CAST (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) (r3 I:??[OBJECT, ARRAY]) \l0x000b: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r3 I:??[OBJECT, ARRAY])  (LINE:154)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|LOOP_START\lLOOP:0: B:15:0x000c\-\>B:16:0x0015\l|0x000d: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:156)\l0x0011: INVOKE  (r3 I:int) = \l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int (m)] (LINE:157)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0015|LOOP_END\lLOOP:0: B:15:0x000c\-\>B:16:0x0015\l|0x0015: SWITCH  (r3 I:??)\l case 1: goto B:23:0x001b\l case 2: goto B:22:0x0019\l default: goto B:15:0x000c \l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0019|RETURN\l|0x0019: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001a: RETURN  (r3 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001b|RETURN\l|0x001b: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:158)\l0x001c: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIf((r4 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function0\<java.lang.Boolean\> A[D('condition' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001c \-\> B:13:?, BACK_EDGE: B:16:0x0015 \-\> B:15:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x000b: r1 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0003\-0x000b: r2 '$i$f$makeCondAddOp' I\l  0x0011\-0x0018: r2 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0001\-0x0025: r0 '$i$f$addLastIf' I\l  0x000c\-0x0025: r1 'condAdd' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;\l  0x0019\-0x0025: r2 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0025: r5 'node' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0025: r6 'condition' Lkotlin\/jvm\/functions\/Function0;\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlin\/jvm\/functions\/Function0\<Ljava\/lang\/Boolean;\>;)Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_15;
Node_16 -> Node_22;
Node_16 -> Node_23;
Node_22 -> Node_18;
Node_18 -> Node_13;
Node_23 -> Node_20;
Node_20 -> Node_13;
}

