digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.getNext()Ljava\/lang\/Object;" {
subgraph cluster_Region_1137572609 {
label = "R(1:(2:2|(2:(1:6)|(1:4))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_87784647 {
label = "LOOP:0: (2:2|(2:(1:6)|(1:4)))";
node [shape=record,color=blue];
subgraph cluster_Region_1385299176 {
label = "R(2:2|(2:(1:6)|(1:4)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|LOOP_START\lLOOP:0: B:11:0x0002\-\>B:14:0x000b\l|java.lang.Object java.lang.Object r2 = r5._next\l}"];
subgraph cluster_Region_1448255552 {
label = "R(2:(1:6)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_905132730 {
label = "IF [B:12:0x0008] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0008|if ((r2 instanceof kotlinx.coroutines.internal.OpDescriptor) != true) goto L5\l}"];
subgraph cluster_Region_228598089 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_1592630525 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000b|LOOP_END\lLOOP:0: B:11:0x0002\-\>B:14:0x000b\l|((kotlinx.coroutines.internal.OpDescriptor) r2).perform(r5)\l}"];
}
}
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000a|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.internal.LockFreeLinkedListNode.getNext((r5v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x000b \-\> B:11:0x0002\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_12 -> Node_14[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_9;
Node_14 -> Node_11;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_15 -> Node_13;
}

