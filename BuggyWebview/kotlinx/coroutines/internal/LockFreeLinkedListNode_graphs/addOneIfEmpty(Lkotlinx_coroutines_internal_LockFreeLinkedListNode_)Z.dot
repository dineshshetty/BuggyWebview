digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.addOneIfEmpty(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|kotlinx.coroutines.internal.LockFreeLinkedListNode._prev$FU.lazySet(r3, r2)\lkotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU.lazySet(r3, r2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|LOOP_START\lLOOP:0: B:17:0x000a\-\>B:22:0x0019\l|java.lang.Object r0 = getNext()\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|if (r0 == r2) goto L4\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013}"];
Node_22 [shape=record,label="{22\:\ 0x0019|LOOP_END\lLOOP:0: B:17:0x000a\-\>B:22:0x0019\l|if (androidx.concurrent.futures.C0125xc40028dd.m112m(kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU, r2, r2, r3) == false) goto L2\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|r3.finishAdd(r2)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f|RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.internal.LockFreeLinkedListNode.addOneIfEmpty((r2v0 'this' kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r3v0 'node' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:24:0x001f \-\> B:15:?, BACK_EDGE: B:22:0x0019 \-\> B:17:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_27[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_17;
Node_22 -> Node_26[style=dashed];
Node_26 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_15;
Node_27 -> Node_19;
Node_19 -> Node_15;
}

