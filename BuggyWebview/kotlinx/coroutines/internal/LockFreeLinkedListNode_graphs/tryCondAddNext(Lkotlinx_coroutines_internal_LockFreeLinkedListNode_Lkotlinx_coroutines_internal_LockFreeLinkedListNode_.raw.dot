digraph "CFG forkotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._prev$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:226)\l0x0002: INVOKE  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r2 I:java.lang.Object A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r1 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(java.lang.Object, java.lang.Object):void A[MD:(T, V):void (c)]\l0x0005: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.internal.LockFreeLinkedListNode._next$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:227)\l0x0007: INVOKE  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r2 I:java.lang.Object A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r3 I:java.lang.Object A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(java.lang.Object, java.lang.Object):void A[MD:(T, V):void (c)]\l0x000a: IPUT  \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.oldNext kotlinx.coroutines.internal.LockFreeLinkedListNode  (LINE:228)\l0x000c: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r1 I:java.lang.Object)\l  (r3 I:java.lang.Object A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r4 I:java.lang.Object A[D('condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)] (LINE:229)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0014 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|RETURN\l|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: RETURN  (r0 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: INVOKE  (r0 I:java.lang.Object) = \l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l  (r1 I:java.lang.Object)\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.CondAddOp.perform(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)] (LINE:231)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001c \l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|SYNTHETIC\lRETURN\l|0x001a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001d: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x001d: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public final int kotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext((r1 'this' I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('node' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('next' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x001d \-\> B:13:?, CROSS_EDGE: B:21:0x001c \-\> B:22:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001d: r2 'node' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x001d: r3 'next' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x001d: r4 'condAdd' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_13;
Node_21 -> Node_13;
}

