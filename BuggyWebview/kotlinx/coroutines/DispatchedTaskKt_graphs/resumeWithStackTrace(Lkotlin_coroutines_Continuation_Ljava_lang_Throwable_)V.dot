digraph "CFG forkotlinx.coroutines.DispatchedTaskKt.resumeWithStackTrace(Lkotlin\/coroutines\/Continuation;Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.Result$Companion r1 = kotlin.Result.Companion\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (kotlinx.coroutines.Debug.getRECOVER_STACK_TRACES() == false) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if ((r3 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame) != false) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|java.lang.Throwable r2 = kotlinx.coroutines.internal.StackTraceRecovery.recoverFromStackFrame(r4, (kotlin.coroutines.jvm.internal.CoroutineStackFrame) r3)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|PHI: r2 \l  PHI: (r2v2 java.lang.Throwable) = (r2v1 java.lang.Throwable), (r2v6 java.lang.Throwable) binds: [B:8:0x0017, B:7:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|r3.resumeWith(kotlin.Result.m144constructorimpl(kotlin.ResultKt.createFailure(r2)))\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|r2 = r4\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.DispatchedTaskKt.resumeWithStackTrace((r3v0 kotlin.coroutines.Continuation\<?\> A[D('$this$resumeWithStackTrace' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'exception' java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0017 \-\> B:9:0x0018, CROSS_EDGE: B:3:0x0008 \-\> B:8:0x0017\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<*\>;Ljava\/lang\/Throwable;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_8 -> Node_9;
}

