digraph "CFG forkotlinx.coroutines.DispatchedTaskKt.resumeUnconfined(Lkotlinx\/coroutines\/DispatchedTask;)V" {
subgraph cluster_Region_2079082108 {
label = "R(2:1|(2:(2:3|4)|(2:6|(2:8|(0)))))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlinx.coroutines.EventLoop kotlinx.coroutines.EventLoop r0 = kotlinx.coroutines.ThreadLocalEventLoop.INSTANCE.getEventLoop$kotlinx_coroutines_core()\l}"];
subgraph cluster_Region_1572663602 {
label = "R(2:(2:3|4)|(2:6|(2:8|(0))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_71717207 {
label = "IF [B:3:0x000a] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r0.isUnconfinedLoopActive() != false) goto L3\l}"];
subgraph cluster_Region_943404134 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|r0.dispatchUnconfined(r6)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_1603013811 {
label = "R(2:6|(2:8|(0)))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0010|boolean r3 = true\lr0.incrementUseCount(true)\l}"];
subgraph cluster_TryCatchRegion_1713962034 {
label = "Try: R(2:8|(0)) finally: R(2:15|(0))";
node [shape=record,color=blue];
subgraph cluster_Region_2114560906 {
label = "R(2:8|(0))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0018|TRY_ENTER\lTryCatch #1 \{all \-\> 0x0028, blocks: (B:6:0x0018, B:7:0x0020), top: B:20:0x0018 \}\lCatch: all \-\> 0x0028\l|resume(r6, r6.getDelegate$kotlinx_coroutines_core(), true)     \/\/ Catch: java.lang.Throwable \-\> L28\l}"];
subgraph cluster_LoopRegion_1187675800 {
label = "LOOP:0: (0)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0025|LOOP_END\lLOOP:0: B:7:0x0020\-\>B:8:0x0025\l|if (r0.processUnconfinedEvent() != false) goto L9\l}"];
subgraph cluster_Region_527239680 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_635588030 {
label = "R(2:15|(0)) | ExcHandler: all \-\> 0x0028\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0028|ExcHandler: all \-\> 0x0028\l}"];
subgraph cluster_TryCatchRegion_67824732 {
label = "Try: R(0) finally: R(1:22)";
node [shape=record,color=blue];
subgraph cluster_Region_934021796 {
label = "R(0)";
node [shape=record,color=blue];
}
subgraph cluster_Region_1080437595 {
label = "R(1:22) | ExcHandler: all \-\> 0x0033\l";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0037|throw r4\l}"];
}
}
}
}
}
}
}
subgraph cluster_Region_635588030 {
label = "R(2:15|(0)) | ExcHandler: all \-\> 0x0028\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0028|ExcHandler: all \-\> 0x0028\l}"];
subgraph cluster_TryCatchRegion_67824732 {
label = "Try: R(0) finally: R(1:22)";
node [shape=record,color=blue];
subgraph cluster_Region_934021796 {
label = "R(0)";
node [shape=record,color=blue];
}
subgraph cluster_Region_1080437595 {
label = "R(1:22) | ExcHandler: all \-\> 0x0033\l";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0037|throw r4\l}"];
}
}
}
subgraph cluster_Region_1080437595 {
label = "R(1:22) | ExcHandler: all \-\> 0x0033\l";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0037|throw r4\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0018|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0020|TRY_LEAVE\lLOOP_START\lTryCatch #1 \{all \-\> 0x0028, blocks: (B:6:0x0018, B:7:0x0020), top: B:20:0x0018 \}\lLOOP:0: B:7:0x0020\-\>B:8:0x0025\lCatch: all \-\> 0x0028\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x002d|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x002d|DONT_GENERATE\l|r0.decrementUseCount(r3)\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0032|ORIG_RETURN\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0029|DONT_GENERATE\lFINALLY_INSNS\l|r5 = null\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x002a|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002a|TRY_ENTER\lTRY_LEAVE\lDONT_GENERATE\lFINALLY_INSNS\lTryCatch #0 \{all \-\> 0x0033, blocks: (B:12:0x002a), top: B:18:0x002a \}\lCatch: all \-\> 0x0033\l|r6.handleFatalException(r4, r5)     \/\/ Catch: java.lang.Throwable \-\> L33\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0033|DONT_GENERATE\lFINALLY_INSNS\lExcHandler: all \-\> 0x0033\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0034|DONT_GENERATE\lFINALLY_INSNS\l|r0.decrementUseCount(r3)\l}"];
MethodNode[shape=record,label="{private static final void kotlinx.coroutines.DispatchedTaskKt.resumeUnconfined((r6v0 kotlinx.coroutines.DispatchedTask\<?\> A[D('$this$resumeUnconfined' kotlinx.coroutines.DispatchedTask), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x0025 \-\> B:7:0x0020, CROSS_EDGE: B:13:0x002d \-\> B:14:0x0032, CROSS_EDGE: B:12:0x002a \-\> B:13:0x002d, CROSS_EDGE: B:17:0x0037 \-\> B:1:?, CROSS_EDGE: B:18:0x002a \-\> B:15:0x0033, CROSS_EDGE: B:20:0x0018 \-\> B:10:0x0028\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0033, blocks: (B:12:0x002a), top: B:18:0x002a \}, TryCatch #1 \{all \-\> 0x0028, blocks: (B:6:0x0018, B:7:0x0020), top: B:20:0x0018 \}\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/DispatchedTask\<*\>;)V\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_23;
Node_23 -> Node_1;
Node_5 -> Node_20;
Node_6 -> Node_7;
Node_8 -> Node_7;
Node_8 -> Node_22[style=dashed];
Node_10 -> Node_11;
Node_17 -> Node_1;
Node_10 -> Node_11;
Node_17 -> Node_1;
Node_17 -> Node_1;
Node_0 -> Node_2;
Node_20 -> Node_6;
Node_20 -> Node_10;
Node_7 -> Node_8;
Node_7 -> Node_21;
Node_22 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_21 -> Node_10;
Node_11 -> Node_18;
Node_18 -> Node_12;
Node_18 -> Node_15;
Node_12 -> Node_13;
Node_12 -> Node_19;
Node_19 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
}

