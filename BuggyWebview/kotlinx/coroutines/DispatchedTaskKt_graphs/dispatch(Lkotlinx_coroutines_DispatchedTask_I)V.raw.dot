digraph "CFG forkotlinx.coroutines.DispatchedTaskKt.dispatch(Lkotlinx\/coroutines\/DispatchedTask;I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:151)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0018 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:222)\l0x0009: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:151)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mode' int)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-DispatchedTaskKt$dispatch$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-DispatchedTaskKt$dispatch$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0012 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|0x0012: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0014: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-DispatchedTaskKt$dispatch$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: INVOKE  (r0 I:kotlin.coroutines.Continuation) = (r5 I:kotlinx.coroutines.DispatchedTask A[D('$this$dispatch' kotlinx.coroutines.DispatchedTask)]) type: VIRTUAL call: kotlinx.coroutines.DispatchedTask.getDelegate$kotlinx_coroutines_core():kotlin.coroutines.Continuation A[MD:():kotlin.coroutines.Continuation\<T\> (m)] (LINE:152)\l0x001c: CONST  (r3 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:153)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mode' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0020 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|0x0021: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('undispatched' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004d  (LINE:154)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0023|0x0023: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('delegate' kotlin.coroutines.Continuation)]) kotlinx.coroutines.internal.DispatchedContinuation \l}"];
Node_18 [shape=record,label="{18\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|0x0027: INVOKE  (r2 I:boolean) = (r6 I:int A[D('mode' int)]) type: STATIC call: kotlinx.coroutines.DispatchedTaskKt.isCancellableMode(int):boolean A[MD:(int):boolean (m)]\l0x002b: IGET  (r3 I:int) = (r5 I:kotlinx.coroutines.DispatchedTask A[D('$this$dispatch' kotlinx.coroutines.DispatchedTask)]) kotlinx.coroutines.DispatchedTask.resumeMode int \l0x002d: INVOKE  (r3 I:boolean) = (r3 I:int) type: STATIC call: kotlinx.coroutines.DispatchedTaskKt.isCancellableMode(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0031|0x0031: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x004d \l}"];
Node_21 [shape=record,label="{21\:\ 0x0033|0x0033: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('delegate' kotlin.coroutines.Continuation)])  (LINE:156)\l0x0034: CHECK_CAST (r2 I:kotlinx.coroutines.internal.DispatchedContinuation) = (kotlinx.coroutines.internal.DispatchedContinuation) (r2 I:??[OBJECT, ARRAY]) \l0x0036: IGET  (r2 I:kotlinx.coroutines.CoroutineDispatcher) = (r2 I:kotlinx.coroutines.internal.DispatchedContinuation) kotlinx.coroutines.internal.DispatchedContinuation.dispatcher kotlinx.coroutines.CoroutineDispatcher \l0x0038: INVOKE  (r3 I:kotlin.coroutines.CoroutineContext) = (r0 I:kotlin.coroutines.Continuation A[D('delegate' kotlin.coroutines.Continuation)]) type: INTERFACE call: kotlin.coroutines.Continuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:157)\l0x003c: INVOKE  (r4 I:boolean) = \l  (r2 I:kotlinx.coroutines.CoroutineDispatcher A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher)])\l  (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l type: VIRTUAL call: kotlinx.coroutines.CoroutineDispatcher.isDispatchNeeded(kotlin.coroutines.CoroutineContext):boolean A[MD:(kotlin.coroutines.CoroutineContext):boolean (m)] (LINE:158)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|0x0040: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0049 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|0x0042: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$dispatch' kotlinx.coroutines.DispatchedTask)])  (LINE:159)\l0x0043: CHECK_CAST (r4 I:java.lang.Runnable) = (java.lang.Runnable) (r4 I:??[OBJECT, ARRAY]) \l0x0045: INVOKE  \l  (r2 I:kotlinx.coroutines.CoroutineDispatcher A[D('dispatcher' kotlinx.coroutines.CoroutineDispatcher)])\l  (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r4 I:java.lang.Runnable)\l type: VIRTUAL call: kotlinx.coroutines.CoroutineDispatcher.dispatch(kotlin.coroutines.CoroutineContext, java.lang.Runnable):void A[MD:(kotlin.coroutines.CoroutineContext, java.lang.Runnable):void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0050: RETURN   A[SYNTHETIC] (LINE:168)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0049|0x0049: INVOKE  (r5 I:kotlinx.coroutines.DispatchedTask A[D('$this$dispatch' kotlinx.coroutines.DispatchedTask)]) type: STATIC call: kotlinx.coroutines.DispatchedTaskKt.resumeUnconfined(kotlinx.coroutines.DispatchedTask):void A[MD:(kotlinx.coroutines.DispatchedTask\<?\>):void (m)] (LINE:161)\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|0x0050: RETURN   A[SYNTHETIC] (LINE:168)\l}"];
Node_25 [shape=record,label="{25\:\ 0x004d|0x004d: INVOKE  \l  (r5 I:kotlinx.coroutines.DispatchedTask A[D('$this$dispatch' kotlinx.coroutines.DispatchedTask)])\l  (r0 I:kotlin.coroutines.Continuation A[D('delegate' kotlin.coroutines.Continuation)])\l  (r1 I:boolean A[D('undispatched' boolean)])\l type: STATIC call: kotlinx.coroutines.DispatchedTaskKt.resume(kotlinx.coroutines.DispatchedTask, kotlin.coroutines.Continuation, boolean):void A[MD:\<T\>:(kotlinx.coroutines.DispatchedTask\<? super T\>, kotlin.coroutines.Continuation\<? super T\>, boolean):void (m)] (LINE:166)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0050|RETURN\lORIG_RETURN\l|0x0050: RETURN    (LINE:168)\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.DispatchedTaskKt.dispatch((r5 I:kotlinx.coroutines.DispatchedTask\<? super T\> A[D('$this$dispatch' kotlinx.coroutines.DispatchedTask), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0050 \-\> B:1:?, CROSS_EDGE: B:24:0x0049 \-\> B:26:0x0050, CROSS_EDGE: B:25:0x004d \-\> B:26:0x0050, CROSS_EDGE: B:18:0x0025 \-\> B:25:0x004d, CROSS_EDGE: B:16:0x0021 \-\> B:25:0x004d, CROSS_EDGE: B:13:0x001d \-\> B:16:0x0021, CROSS_EDGE: B:7:0x000e \-\> B:8:0x000f, CROSS_EDGE: B:3:0x0006 \-\> B:12:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x000f: r0 '$i$a$\-assert\-DispatchedTaskKt$dispatch$1' I\l  0x0038\-0x004c: r2 'dispatcher' Lkotlinx\/coroutines\/CoroutineDispatcher;\l  0x003c\-0x004c: r3 'context' Lkotlin\/coroutines\/CoroutineContext;\l  0x001c\-0x0050: r0 'delegate' Lkotlin\/coroutines\/Continuation;\l  0x0021\-0x0050: r1 'undispatched' Z\l  \-1 \-0x0050: r5 '$this$dispatch' Lkotlinx\/coroutines\/DispatchedTask;\l  \-1 \-0x0050: r6 'mode' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/DispatchedTask\<\-TT;\>;I)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_7 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_27;
Node_27 -> Node_1;
Node_24 -> Node_28;
Node_28 -> Node_1;
Node_25 -> Node_26;
Node_26 -> Node_1;
}

