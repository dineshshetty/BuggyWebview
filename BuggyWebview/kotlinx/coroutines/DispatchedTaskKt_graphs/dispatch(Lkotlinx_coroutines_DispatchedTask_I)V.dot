digraph "CFG forkotlinx.coroutines.DispatchedTaskKt.dispatch(Lkotlinx\/coroutines\/DispatchedTask;I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r1 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r6 == (\-1)) goto L10\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|r0 = 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|PHI: r0 \l  PHI: (r0v4 int) = (r0v3 int), (r0v6 int) binds: [B:7:0x000e, B:6:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == 0) goto L7\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012}"];
Node_11 [shape=record,label="{11\:\ 0x0017|throw new java.lang.AssertionError()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|r0 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|kotlin.coroutines.Continuation r0 = r5.getDelegate$kotlinx_coroutines_core()\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|if (r6 != 4) goto L13\l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|r1 = false\l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|PHI: r1 \l  PHI: (r1v1 'undispatched' boolean) = (r1v0 'undispatched' boolean), (r1v2 'undispatched' boolean) binds: [B:13:0x001d, B:15:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 != false) goto L25\l}"];
Node_17 [shape=record,label="{17\:\ 0x0023}"];
Node_18 [shape=record,label="{18\:\ 0x0025|if ((r0 instanceof kotlinx.coroutines.internal.DispatchedContinuation) == false) goto L25\l}"];
Node_19 [shape=record,label="{19\:\ 0x0027}"];
Node_20 [shape=record,label="{20\:\ 0x0031|if (isCancellableMode(r6) != isCancellableMode(r5.resumeMode)) goto L25\l}"];
Node_21 [shape=record,label="{21\:\ 0x0033|kotlinx.coroutines.CoroutineDispatcher r2 = ((kotlinx.coroutines.internal.DispatchedContinuation) r0).dispatcher\lkotlin.coroutines.CoroutineContext r3 = r0.getContext()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0040|if (r2.isDispatchNeeded(r3) == false) goto L23\l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|r2.dispatch(r3, r5)\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ 0x0049|resumeUnconfined(r5)\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ 0x004d|resume(r5, r0, r1)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0050|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.DispatchedTaskKt.dispatch((r5v0 kotlinx.coroutines.DispatchedTask\<? super T\> A[D('$this$dispatch' kotlinx.coroutines.DispatchedTask), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'mode' int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0050 \-\> B:1:?, CROSS_EDGE: B:24:0x0049 \-\> B:26:0x0050, CROSS_EDGE: B:25:0x004d \-\> B:26:0x0050, CROSS_EDGE: B:18:0x0025 \-\> B:25:0x004d, CROSS_EDGE: B:16:0x0021 \-\> B:25:0x004d, CROSS_EDGE: B:13:0x001d \-\> B:16:0x0021, CROSS_EDGE: B:7:0x000e \-\> B:8:0x000f, CROSS_EDGE: B:3:0x0006 \-\> B:12:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/DispatchedTask\<\-TT;\>;I)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_7 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_27;
Node_27 -> Node_1;
Node_24 -> Node_28;
Node_28 -> Node_1;
Node_25 -> Node_26;
Node_26 -> Node_1;
}

