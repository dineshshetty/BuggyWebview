digraph "CFG forkotlinx.coroutines.DispatchedTaskKt.resumeWithStackTrace(Lkotlin\/coroutines\/Continuation;Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: SGET  (r1 I:kotlin.Result$Companion) =  kotlin.Result.Companion kotlin.Result$Companion  (LINE:219)\l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: INVOKE  (r2 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getRECOVER_STACK_TRACES():boolean A[MD:():boolean (m)] (LINE:257)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: INSTANCE_OF  (r2 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('$this$resumeWithStackTrace' kotlin.coroutines.Continuation)]) kotlin.coroutines.jvm.internal.CoroutineStackFrame \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$resumeWithStackTrace' kotlin.coroutines.Continuation)])  (LINE:258)\l0x0010: CHECK_CAST (r2 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) (r2 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r2 I:java.lang.Throwable) = \l  (r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable)])\l  (r2 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame)\l type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.access$recoverFromStackFrame(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.lang.Throwable A[MD:(java.lang.Throwable, kotlin.coroutines.jvm.internal.CoroutineStackFrame):java.lang.Throwable (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|0x0018: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.lang.Throwable) type: STATIC call: kotlin.ResultKt.createFailure(java.lang.Throwable):java.lang.Object A[MD:(java.lang.Throwable):java.lang.Object (m)] (LINE:219)\l0x001c: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.Object) type: STATIC call: kotlin.Result.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<T\>:(java.lang.Object):java.lang.Object (m)]\l0x0020: INVOKE  \l  (r3 I:kotlin.coroutines.Continuation A[D('$this$resumeWithStackTrace' kotlin.coroutines.Continuation)])\l  (r1 I:java.lang.Object)\l type: INTERFACE call: kotlin.coroutines.Continuation.resumeWith(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|RETURN\l|0x0023: RETURN    (LINE:220)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Throwable)])  (LINE:257)\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.DispatchedTaskKt.resumeWithStackTrace((r3 I:kotlin.coroutines.Continuation\<?\> A[D('$this$resumeWithStackTrace' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0017 \-\> B:9:0x0018, CROSS_EDGE: B:3:0x0008 \-\> B:8:0x0017\lDebug Info:\l  0x0004\-0x0018: r1 '$i$f$recoverStackTrace' I\l  0x0001\-0x0023: r0 '$i$f$resumeWithStackTrace' I\l  \-1 \-0x0023: r3 '$this$resumeWithStackTrace' Lkotlin\/coroutines\/Continuation;\l  \-1 \-0x0023: r4 'exception' Ljava\/lang\/Throwable;\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<*\>;Ljava\/lang\/Throwable;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_8 -> Node_9;
}

