digraph "CFG forkotlinx.coroutines.android.AndroidExceptionPreHandler.handleException(Lkotlin\/coroutines\/CoroutineContext;Ljava\/lang\/Throwable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:49)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (26 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r2 I:??[int, byte, short, char]) \> (r0 I:??[int, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CONST  (r2 I:??[int, float, short, byte, char]) = (28 ??[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r0 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:7:0x000d \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:? \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: INVOKE  (r0 I:java.lang.reflect.Method) = (r3 I:kotlinx.coroutines.android.AndroidExceptionPreHandler) type: DIRECT call: kotlinx.coroutines.android.AndroidExceptionPreHandler.preHandler():java.lang.reflect.Method A[MD:():java.lang.reflect.Method (m)] (LINE:50)\l0x0014: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0019 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.lang.Thread$UncaughtExceptionHandler \l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0027 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0024: CHECK_CAST (r2 I:java.lang.Thread$UncaughtExceptionHandler) = (java.lang.Thread$UncaughtExceptionHandler) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|0x0027: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x002a  (LINE:50)\l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|0x002a: INVOKE  (r0 I:java.lang.Thread) =  type: STATIC call: java.lang.Thread.currentThread():java.lang.Thread A[MD:():java.lang.Thread (c)]\l0x002e: INVOKE  \l  (r2 I:java.lang.Thread$UncaughtExceptionHandler)\l  (r0 I:java.lang.Thread)\l  (r5 I:java.lang.Throwable A[D('exception' java.lang.Throwable)])\l type: INTERFACE call: java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Throwable):void A[MD:(java.lang.Thread, java.lang.Throwable):void (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0031|RETURN\lORIG_RETURN\l|0x0031: RETURN    (LINE:53)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|0x0031: RETURN   A[SYNTHETIC] (LINE:53)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|0x0019: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x001b: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.reflect.Method), (r2 I:java.lang.Object), (r1 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0031: RETURN   A[SYNTHETIC] (LINE:53)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.android.AndroidExceptionPreHandler.handleException((r3 'this' I:kotlinx.coroutines.android.AndroidExceptionPreHandler A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0027 \-\> B:20:0x0031, CROSS_EDGE: B:14:0x0021 \-\> B:17:0x0027, CROSS_EDGE: B:12:0x0019 \-\> B:13:0x001f, CROSS_EDGE: B:8:0x000e \-\> B:20:0x0031, CROSS_EDGE: B:7:0x000d \-\> B:8:0x000e, CROSS_EDGE: B:3:0x0005 \-\> B:7:0x000d\lDebug Info:\l  \-1 \-0x0031: r4 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0031: r5 'exception' Ljava\/lang\/Throwable;\lMETHOD_OVERRIDE: [kotlinx.coroutines.CoroutineExceptionHandler.handleException(kotlin.coroutines.CoroutineContext, java.lang.Throwable):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_21;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_22[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_22 -> Node_1;
Node_12 -> Node_13;
Node_21 -> Node_1;
Node_7 -> Node_8;
}

