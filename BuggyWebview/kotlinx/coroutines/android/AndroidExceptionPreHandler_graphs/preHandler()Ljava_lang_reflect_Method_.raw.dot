digraph "CFG forkotlinx.coroutines.android.AndroidExceptionPreHandler.preHandler()Ljava\/lang\/reflect\/Method;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r7 I:kotlinx.coroutines.android.AndroidExceptionPreHandler) kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler java.lang.Object  (LINE:22)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('current' java.lang.Object)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0008  (LINE:23)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('current' java.lang.Object)]) \l0x0005: CHECK_CAST (r1 I:java.lang.reflect.Method) = (java.lang.reflect.Method) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:java.lang.reflect.Method) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:24)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002f, blocks: (B:7:0x0009, B:9:0x0020), top: B:18:0x0009 \}\lCatch: all \-\> 0x002f\l|0x0009: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Thread\>) =  java.lang.Thread.class A[TRY_ENTER]\l0x000b: CONST_STR  (r3 I:java.lang.String) =  \"getUncaughtExceptionPreHandler\"  (LINE:25)\l0x000d: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: NEW_ARRAY  (r5 I:java.lang.Class[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch: all \-\> 0x002f]\l0x0010: INVOKE  (r2 I:java.lang.reflect.Method) = (r2 I:java.lang.Class), (r3 I:java.lang.String), (r5 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method A[Catch: all \-\> 0x002f, MD:(java.lang.String, java.lang.Class\<?\>[]):java.lang.reflect.Method VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)]\l0x0014: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0015: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: INVOKE  (r6 I:int) = (r3 I:java.lang.reflect.Method A[D('it' java.lang.reflect.Method)]) type: VIRTUAL call: java.lang.reflect.Method.getModifiers():int A[Catch: all \-\> 0x002f, MD:():int (c)] (LINE:26)\l0x001a: INVOKE  (r6 I:boolean) = (r6 I:int) type: STATIC call: java.lang.reflect.Modifier.isPublic(int):boolean A[Catch: all \-\> 0x002f, MD:(int):boolean (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002b \l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x002f, blocks: (B:7:0x0009, B:9:0x0020), top: B:18:0x0009 \}\lCatch: all \-\> 0x002f\l|0x0020: INVOKE  (r6 I:int) = (r3 I:java.lang.reflect.Method A[D('it' java.lang.reflect.Method)]) type: VIRTUAL call: java.lang.reflect.Method.getModifiers():int A[Catch: all \-\> 0x002f, MD:():int (c)]\l0x0024: INVOKE  (r6 I:boolean) = (r6 I:int) type: STATIC call: java.lang.reflect.Modifier.isStatic(int):boolean A[Catch: all \-\> 0x002f, MD:(int):boolean (c), TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002b \l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ 0x002b|0x002b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0033  (LINE:25)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|0x0034: IPUT  \l  (r1 I:java.lang.Object A[D('declared' java.lang.reflect.Method)])\l  (r7 I:kotlinx.coroutines.android.AndroidExceptionPreHandler)\l kotlinx.coroutines.android.AndroidExceptionPreHandler._preHandler java.lang.Object  (LINE:31)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:java.lang.reflect.Method A[D('declared' java.lang.reflect.Method)])  (LINE:32)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|ExcHandler: all \-\> 0x002f\l|0x002f: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x002f] (LINE:28)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:29)\l0x0031: CHECK_CAST (r3 I:java.lang.reflect.Method) = (java.lang.reflect.Method) (r3 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final java.lang.reflect.Method kotlinx.coroutines.android.AndroidExceptionPreHandler.preHandler((r7 'this' I:kotlinx.coroutines.android.AndroidExceptionPreHandler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0036 \-\> B:1:?, CROSS_EDGE: B:12:0x002b \-\> B:16:0x0033, CROSS_EDGE: B:10:0x0028 \-\> B:12:0x002b, CROSS_EDGE: B:15:0x0030 \-\> B:16:0x0033, CROSS_EDGE: B:8:0x001e \-\> B:12:0x002b, CROSS_EDGE: B:18:0x0009 \-\> B:14:0x002f\lDebug Info:\l  0x0015\-0x002b: r3 'it' Ljava\/lang\/reflect\/Method;\l  0x0016\-0x002b: r5 '$i$a$\-takeIf\-AndroidExceptionPreHandler$preHandler$declared$1' I\l  0x0030\-0x0033: r2 'e' Ljava\/lang\/Throwable;\l  0x0002\-0x0036: r0 'current' Ljava\/lang\/Object;\l  0x0034\-0x0036: r1 'declared' Ljava\/lang\/reflect\/Method;\lTryCatch #0 \{all \-\> 0x002f, blocks: (B:7:0x0009, B:9:0x0020), top: B:18:0x0009 \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_18;
Node_18 -> Node_7;
Node_18 -> Node_14;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_9 -> Node_19;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_19 -> Node_14;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_16;
}

