digraph "CFG forkotlinx.coroutines.android.AndroidDispatcherFactory.createDispatcher(Ljava\/util\/List;)Lkotlinx\/coroutines\/MainCoroutineDispatcher;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:android.os.Looper) =  type: STATIC call: android.os.Looper.getMainLooper():android.os.Looper A[MD:():android.os.Looper (c)] (LINE:55)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: NEW_INSTANCE  (r1 I:kotlinx.coroutines.android.HandlerContext) =  kotlinx.coroutines.android.HandlerContext  (LINE:56)\l0x0008: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0009: INVOKE  (r2 I:android.os.Handler) = (r0 I:android.os.Looper A[D('mainLooper' android.os.Looper)]), (r2 I:boolean) type: STATIC call: kotlinx.coroutines.android.HandlerDispatcherKt.asHandler(android.os.Looper, boolean):android.os.Handler A[MD:(android.os.Looper, boolean):android.os.Handler (m)]\l0x000d: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x000e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: INVOKE  \l  (r1 I:kotlinx.coroutines.android.HandlerContext)\l  (r2 I:android.os.Handler)\l  (r4 I:java.lang.String)\l  (r3 I:int)\l  (r4 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlinx.coroutines.android.HandlerContext.\<init\>(android.os.Handler, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(android.os.Handler, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x0012: CHECK_CAST (r1 I:kotlinx.coroutines.MainCoroutineDispatcher) = (kotlinx.coroutines.MainCoroutineDispatcher) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|0x0014: RETURN  (r1 I:kotlinx.coroutines.MainCoroutineDispatcher) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('mainLooper' android.os.Looper)]) =  java.lang.IllegalStateException  (LINE:55)\l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"The main looper is not available\" \l0x0019: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.MainCoroutineDispatcher kotlinx.coroutines.android.AndroidDispatcherFactory.createDispatcher((r5 'this' I:kotlinx.coroutines.android.AndroidDispatcherFactory A[IMMUTABLE_TYPE, THIS]), (r6 I:java.util.List\<? extends kotlinx.coroutines.internal.MainDispatcherFactory\> A[D('allFactories' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x001c \-\> B:1:?\lDebug Info:\l  0x0006\-0x0015: r0 'mainLooper' Landroid\/os\/Looper;\l  \-1 \-0x001c: r6 'allFactories' Ljava\/util\/List;\lSIGNATURE: (Ljava\/util\/List\<+Lkotlinx\/coroutines\/internal\/MainDispatcherFactory;\>;)Lkotlinx\/coroutines\/MainCoroutineDispatcher;\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.MainDispatcherFactory.createDispatcher(java.util.List\<? extends kotlinx.coroutines.internal.MainDispatcherFactory\>):kotlinx.coroutines.MainCoroutineDispatcher]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

