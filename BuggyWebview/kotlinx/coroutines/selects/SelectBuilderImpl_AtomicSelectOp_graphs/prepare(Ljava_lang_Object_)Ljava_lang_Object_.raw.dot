digraph "CFG forkotlinx.coroutines.selects.SelectBuilderImpl.AtomicSelectOp.prepare(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0001|0x0001: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('affected' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000d  (LINE:580)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|0x0003: INVOKE  (r0 I:java.lang.Object) = (r2 I:kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp) type: DIRECT call: kotlinx.coroutines.selects.SelectBuilderImpl.AtomicSelectOp.prepareSelectOp():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x000a \l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:659)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:java.lang.Object A[D('it' java.lang.Object)])  (LINE:580)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_26 [shape=record,label="{26\:\ 0x000d|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:26:0x000d), top: B:32:0x000d \}\lCatch: all \-\> 0x0017\l|0x000d: IGET  (r0 I:kotlinx.coroutines.internal.AtomicDesc) = (r2 I:kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp) kotlinx.coroutines.selects.SelectBuilderImpl.AtomicSelectOp.desc kotlinx.coroutines.internal.AtomicDesc A[Catch: all \-\> 0x0017, TRY_ENTER] (LINE:583)\l0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0010: CHECK_CAST (r1 I:kotlinx.coroutines.internal.AtomicOp) = (kotlinx.coroutines.internal.AtomicOp) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0017]\l0x0012: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlinx.coroutines.internal.AtomicDesc), (r1 I:kotlinx.coroutines.internal.AtomicOp) type: VIRTUAL call: kotlinx.coroutines.internal.AtomicDesc.prepare(kotlinx.coroutines.internal.AtomicOp):java.lang.Object A[Catch: all \-\> 0x0017, MD:(kotlinx.coroutines.internal.AtomicOp\<?\>):java.lang.Object (m), TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|RETURN\l|0x0016: RETURN  (r0 I:java.lang.Object) \l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|ExcHandler: all \-\> 0x0017\l|0x0017: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0017] (LINE:584)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('affected' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001d  (LINE:586)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001a|0x001a: INVOKE  (r2 I:kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp) type: DIRECT call: kotlinx.coroutines.selects.SelectBuilderImpl.AtomicSelectOp.undoPrepare():void A[MD:():void (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x001d|0x001d: THROW  (r0 I:java.lang.Throwable A[D('e' java.lang.Throwable)])  (LINE:587)\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.selects.SelectBuilderImpl.AtomicSelectOp.prepare((r2 'this' I:kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('affected' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0016 \-\> B:18:?, CROSS_EDGE: B:31:0x001d \-\> B:18:?, CROSS_EDGE: B:29:0x0018 \-\> B:31:0x001d, CROSS_EDGE: B:32:0x000d \-\> B:28:0x0017, CROSS_EDGE: B:19:0x0001 \-\> B:32:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x000c: r0 'it' Ljava\/lang\/Object;\l  0x000b\-0x000c: r1 '$i$a$\-let\-SelectBuilderImpl$AtomicSelectOp$prepare$1' I\l  0x0018\-0x001d: r0 'e' Ljava\/lang\/Throwable;\l  \-1 \-0x001d: r3 'affected' Ljava\/lang\/Object;\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:26:0x000d), top: B:32:0x000d \}\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicOp.prepare(T):java.lang.Object]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_32;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_32[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_18;
Node_32 -> Node_26;
Node_32 -> Node_28;
Node_26 -> Node_27;
Node_26 -> Node_33;
Node_27 -> Node_18;
Node_33 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_18;
}

