digraph "CFG forkotlinx.coroutines.selects.WhileSelectKt.whileSelect$$forInline(Lkotlin\/jvm\/functions\/Function1;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000}"];
Node_22 [shape=record,label="{22\:\ 0x0001|LOOP_START\lLOOP:0: B:22:0x0001\-\>B:31:0x002e\l|kotlin.jvm.internal.InlineMarker.mark(0)\lkotlinx.coroutines.selects.SelectBuilderImpl r4 = new kotlinx.coroutines.selects.SelectBuilderImpl(r7)\l}"];
Node_35 [shape=record,label="{35\:\ 0x000f|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:23:0x000f), top: B:35:0x000f \}\lCatch: all \-\> 0x0013\l|r6.invoke(r4)     \/\/ Catch: java.lang.Throwable \-\> L13\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|java.lang.Object r2 = r4.getResult()\l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|if (r2 != kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L8\l}"];
Node_29 [shape=record,label="{29\:\ 0x0021|kotlin.coroutines.jvm.internal.DebugProbes.probeCoroutineSuspended(r7)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0024|kotlin.jvm.internal.InlineMarker.mark(1)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002e|LOOP_END\lLOOP:0: B:22:0x0001\-\>B:31:0x002e\l|if (((java.lang.Boolean) r2).booleanValue() == false) goto L10\l}"];
Node_37 [shape=record,label="{37\:\ 0x0031|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0031}"];
Node_34 [shape=record,label="{34\:\ 0x0033|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013|ExcHandler: all \-\> 0x0013\l|java.lang.Throwable r5 = move\-exception\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|r4.handleBuilderException(r5)\l}"];
MethodNode[shape=record,label="{private static final java.lang.Object kotlinx.coroutines.selects.WhileSelectKt.whileSelect$$forInline((r6v0 kotlin.jvm.functions.Function1\<? super kotlinx.coroutines.selects.SelectBuilder\<? super java.lang.Boolean\>, kotlin.Unit\> A[D('builder' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:31:0x002e \-\> B:22:0x0001, CROSS_EDGE: B:28:0x001f \-\> B:30:0x0024, CROSS_EDGE: B:26:0x0014 \-\> B:27:0x0017, CROSS_EDGE: B:35:0x000f \-\> B:25:0x0013\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:23:0x000f), top: B:35:0x000f \}\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function1\<\-Lkotlinx\/coroutines\/selects\/SelectBuilder\<\-Ljava\/lang\/Boolean;\>;Lkotlin\/Unit;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_35;
Node_35 -> Node_23;
Node_35 -> Node_25;
Node_23 -> Node_27;
Node_23 -> Node_36;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_22[style=dashed];
Node_31 -> Node_37;
Node_37 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_20;
Node_36 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
}

