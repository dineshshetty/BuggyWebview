digraph "CFG forkotlinx.coroutines.selects.SelectBuilderImpl.PairSelectOp.perform(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('affected' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0026  (LINE:545)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('affected' java.lang.Object)]) \l0x0003: CHECK_CAST (r0 I:kotlinx.coroutines.selects.SelectBuilderImpl) = (kotlinx.coroutines.selects.SelectBuilderImpl) (r0 I:??[OBJECT, ARRAY]) \l0x0005: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) = (r4 I:kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp) kotlinx.coroutines.selects.SelectBuilderImpl.PairSelectOp.otherOp kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp  (LINE:548)\l0x0007: INVOKE  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.finishPrepare():void A[MD:():void (m)]\l0x000a: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) = (r4 I:kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp) kotlinx.coroutines.selects.SelectBuilderImpl.PairSelectOp.otherOp kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp  (LINE:549)\l0x000c: INVOKE  (r1 I:kotlinx.coroutines.internal.AtomicOp) = (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.getAtomicOp():kotlinx.coroutines.internal.AtomicOp A[MD:():kotlinx.coroutines.internal.AtomicOp\<?\> (m)]\l0x0010: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:java.lang.Object) = (r1 I:kotlinx.coroutines.internal.AtomicOp), (r2 I:java.lang.Object) type: VIRTUAL call: kotlinx.coroutines.internal.AtomicOp.decide(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decision' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x001c  (LINE:550)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0017|0x0017: IGET  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) = (r4 I:kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp) kotlinx.coroutines.selects.SelectBuilderImpl.PairSelectOp.otherOp kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp \l0x0019: IGET  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp) kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc \l}"];
Node_18 [shape=record,label="{18\:\ 0x0020|0x0020: SGET  (r3 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.selects.SelectBuilderImpl._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:551)\l0x0022: INVOKE  \l  (r3 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r0 I:java.lang.Object A[D('impl' kotlinx.coroutines.selects.SelectBuilderImpl)])\l  (r4 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('update' java.lang.Object)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|RETURN\l|0x0025: RETURN  (r1 I:java.lang.Object A[D('decision' java.lang.Object)])  (LINE:552)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|0x001c: INVOKE  (r2 I:java.lang.Object) =  type: STATIC call: kotlinx.coroutines.selects.SelectKt.getNOT_SELECTED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|0x0026: NEW_INSTANCE  (r0 I:java.lang.NullPointerException A[D('impl' kotlinx.coroutines.selects.SelectBuilderImpl)]) =  java.lang.NullPointerException  (LINE:545)\l0x0028: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlinx.coroutines.selects.SelectBuilderImpl\<*\>\" \l0x002a: INVOKE  (r0 I:java.lang.NullPointerException), (r1 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002d|0x002d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.selects.SelectBuilderImpl.PairSelectOp.perform((r4 'this' I:kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Object A[D('affected' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001c \-\> B:18:0x0020, CROSS_EDGE: B:21:0x002d \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0026: r0 'impl' Lkotlinx\/coroutines\/selects\/SelectBuilderImpl;\l  0x0015\-0x0026: r1 'decision' Ljava\/lang\/Object;\l  0x0020\-0x0026: r2 'update' Ljava\/lang\/Object;\l  \-1 \-0x002d: r5 'affected' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.OpDescriptor.perform(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_20;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_17 -> Node_18;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

