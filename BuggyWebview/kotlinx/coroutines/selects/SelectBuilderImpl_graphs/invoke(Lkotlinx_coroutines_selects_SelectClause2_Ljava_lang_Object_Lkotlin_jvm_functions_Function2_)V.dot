digraph "CFG forkotlinx.coroutines.selects.SelectBuilderImpl.invoke(Lkotlinx\/coroutines\/selects\/SelectClause2;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|r2.registerSelectClause2(r1, r3, r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.selects.SelectBuilderImpl.invoke((r1v0 'this' kotlinx.coroutines.selects.SelectBuilderImpl\<R\> A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlinx.coroutines.selects.SelectClause2\<? super P, ? extends Q\> A[D('$this$invoke' kotlinx.coroutines.selects.SelectClause2), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 P A[D('param' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function2\<? super Q, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\> A[D('block' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [P, Q, R]\lSIGNATURE: \<P:Ljava\/lang\/Object;Q:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/selects\/SelectClause2\<\-TP;+TQ;\>;TP;Lkotlin\/jvm\/functions\/Function2\<\-TQ;\-Lkotlin\/coroutines\/Continuation\<\-TR;\>;+Ljava\/lang\/Object;\>;)V\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r3v0, resolved type: P\l \-\> Multi\-variable search result rejected for r4v0, resolved type: kotlin.jvm.functions.Function2\<? super Q, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>\}\lMETHOD_OVERRIDE: [kotlinx.coroutines.selects.SelectBuilder.invoke(kotlinx.coroutines.selects.SelectClause2\<? super P, ? extends Q\>, P, kotlin.jvm.functions.Function2\<? super Q, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>):void]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

