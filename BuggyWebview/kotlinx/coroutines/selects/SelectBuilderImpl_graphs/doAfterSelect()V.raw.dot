digraph "CFG forkotlinx.coroutines.selects.SelectBuilderImpl.doAfterSelect()V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.DisposableHandle) = (r6 I:kotlinx.coroutines.selects.SelectBuilderImpl) type: DIRECT call: kotlinx.coroutines.selects.SelectBuilderImpl.getParentHandle():kotlinx.coroutines.DisposableHandle A[MD:():kotlinx.coroutines.DisposableHandle (m)] (LINE:383)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0007 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|0x0007: INVOKE  (r0 I:kotlinx.coroutines.DisposableHandle) type: INTERFACE call: kotlinx.coroutines.DisposableHandle.dispose():void A[MD:():void (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY])  (LINE:384)\l0x000b: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (kotlinx.coroutines.internal.LockFreeLinkedListHead) (r0 I:??[OBJECT, ARRAY]) \l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListHead)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListHead.getNext():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:706)\l0x0012: CHECK_CAST (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|LOOP_START\lLOOP:0: B:25:0x0014\-\>B:30:0x0028\l|0x0014: INVOKE  (r3 I:boolean) = \l  (r2 I:java.lang.Object A[D('cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r0 I:java.lang.Object A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListHead)])\l type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:707)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002e \l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: INSTANCE_OF  (r3 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode  (LINE:708)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001c|0x001c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0028 \l}"];
Node_29 [shape=record,label="{29\:\ 0x001e|0x001e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l0x001f: CHECK_CAST (r3 I:kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode) = (kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode) (r3 I:??[OBJECT, ARRAY]) \l0x0021: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: IGET  (r5 I:kotlinx.coroutines.DisposableHandle) = \l  (r3 I:kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode A[D('it' kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode)])\l kotlinx.coroutines.selects.SelectBuilderImpl.DisposeNode.handle kotlinx.coroutines.DisposableHandle  (LINE:385)\l0x0024: INVOKE  (r5 I:kotlinx.coroutines.DisposableHandle) type: INTERFACE call: kotlinx.coroutines.DisposableHandle.dispose():void A[MD:():void (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0028|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0028|LOOP_END\lLOOP:0: B:25:0x0014\-\>B:30:0x0028\l|0x0028: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = \l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getNextNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:709)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0028|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x002e|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|RETURN\l|0x002e: RETURN    (LINE:387)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.selects.SelectBuilderImpl.doAfterSelect((r6 'this' I:kotlinx.coroutines.selects.SelectBuilderImpl\<R\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x0028 \-\> B:25:0x0014, CROSS_EDGE: B:28:0x001c \-\> B:30:0x0028, CROSS_EDGE: B:21:0x0004 \-\> B:24:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0021\-0x0028: r3 'it' Lkotlinx\/coroutines\/selects\/SelectBuilderImpl$DisposeNode;\l  0x0022\-0x0028: r4 '$i$a$\-forEach\-SelectBuilderImpl$doAfterSelect$1' I\l  0x000d\-0x002e: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListHead;\l  0x000e\-0x002e: r1 '$i$f$forEach' I\l  0x0014\-0x002e: r2 'cur$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\lTYPE_VARS: [R]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_33;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_35;
Node_29 -> Node_34;
Node_34 -> Node_30;
Node_30 -> Node_25;
Node_35 -> Node_30;
Node_33 -> Node_32;
Node_32 -> Node_19;
}

