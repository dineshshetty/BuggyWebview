digraph "CFG forkotlinx.coroutines.selects.SelectBuilderImpl.disposeOnSelect(Lkotlinx\/coroutines\/DisposableHandle;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode) =  kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode  (LINE:371)\l0x0002: INVOKE  \l  (r0 I:kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode)\l  (r3 I:kotlinx.coroutines.DisposableHandle A[D('handle' kotlinx.coroutines.DisposableHandle)])\l type: DIRECT call: kotlinx.coroutines.selects.SelectBuilderImpl.DisposeNode.\<init\>(kotlinx.coroutines.DisposableHandle):void A[MD:(kotlinx.coroutines.DisposableHandle):void (m)]\l0x0005: INVOKE  (r1 I:boolean) = (r2 I:kotlinx.coroutines.selects.SelectBuilderImpl) type: VIRTUAL call: kotlinx.coroutines.selects.SelectBuilderImpl.isSelected():boolean A[MD:():boolean (m)] (LINE:373)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0018 \l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|0x000b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('node' kotlinx.coroutines.selects.SelectBuilderImpl$DisposeNode)])  (LINE:374)\l0x000c: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r1 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r2 I:kotlinx.coroutines.selects.SelectBuilderImpl), (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) type: VIRTUAL call: kotlinx.coroutines.selects.SelectBuilderImpl.addLast(kotlinx.coroutines.internal.LockFreeLinkedListNode):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode):void (m)]\l0x0011: INVOKE  (r1 I:boolean) = (r2 I:kotlinx.coroutines.selects.SelectBuilderImpl) type: VIRTUAL call: kotlinx.coroutines.selects.SelectBuilderImpl.isSelected():boolean A[MD:():boolean (m)] (LINE:376)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0018 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|RETURN\l|0x0017: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|0x0018: INVOKE  (r3 I:kotlinx.coroutines.DisposableHandle A[D('handle' kotlinx.coroutines.DisposableHandle)]) type: INTERFACE call: kotlinx.coroutines.DisposableHandle.dispose():void A[MD:():void (m)] (LINE:379)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|RETURN\l|0x001b: RETURN    (LINE:380)\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.selects.SelectBuilderImpl.disposeOnSelect((r2 'this' I:kotlinx.coroutines.selects.SelectBuilderImpl\<R\> A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.DisposableHandle A[D('handle' kotlinx.coroutines.DisposableHandle), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001b \-\> B:10:?, CROSS_EDGE: B:12:0x0009 \-\> B:16:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x001b: r0 'node' Lkotlinx\/coroutines\/selects\/SelectBuilderImpl$DisposeNode;\l  \-1 \-0x001b: r3 'handle' Lkotlinx\/coroutines\/DisposableHandle;\lTYPE_VARS: [R]\lMETHOD_OVERRIDE: [kotlinx.coroutines.selects.SelectInstance.disposeOnSelect(kotlinx.coroutines.DisposableHandle):void]\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

