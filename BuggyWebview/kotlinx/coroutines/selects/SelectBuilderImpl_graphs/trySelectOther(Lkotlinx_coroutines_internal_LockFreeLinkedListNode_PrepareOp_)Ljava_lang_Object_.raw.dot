digraph "CFG forkotlinx.coroutines.selects.SelectBuilderImpl.trySelectOther(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Ljava\/lang\/Object;" {
Node_53 [shape=record,label="{53\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_55 [shape=record,label="{55\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:484)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0002|LOOP_START\lLOOP:0: B:56:0x0002\-\>B:102:0x0002\l|0x0003: IGET  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.selects.SelectBuilderImpl A[D('$this$loop$iv' kotlinx.coroutines.selects.SelectBuilderImpl)]) kotlinx.coroutines.selects.SelectBuilderImpl._state java.lang.Object  (LINE:713)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r4 I:java.lang.Object) =  type: STATIC call: kotlinx.coroutines.selects.SelectKt.getNOT_SELECTED():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:487)\l0x000b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x000c|0x000c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x003c \l}"];
Node_94 [shape=record,label="{94\:\ 0x003c|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x003c|0x003c: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.internal.OpDescriptor  (LINE:501)\l}"];
Node_71 [shape=record,label="{71\:\ 0x003e|0x003e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:101:0x0073 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0040|0x0040: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:84:0x006b  (LINE:503)\l}"];
Node_73 [shape=record,label="{73\:\ 0x0042|0x0042: INVOKE  (r4 I:kotlinx.coroutines.internal.AtomicOp) = \l  (r8 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.getAtomicOp():kotlinx.coroutines.internal.AtomicOp A[MD:():kotlinx.coroutines.internal.AtomicOp\<?\> (m)] (LINE:504)\l0x0047: INSTANCE_OF  (r5 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('otherAtomicOp' kotlinx.coroutines.internal.AtomicOp)]) kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp  (LINE:507)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0049|0x0049: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x005f \l}"];
Node_75 [shape=record,label="{75\:\ 0x004b|0x004b: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('otherAtomicOp' kotlinx.coroutines.internal.AtomicOp)]) \l0x004c: CHECK_CAST (r5 I:kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp) = (kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp) (r5 I:??[OBJECT, ARRAY]) \l0x004e: IGET  (r5 I:kotlinx.coroutines.selects.SelectBuilderImpl\<?\>) = (r5 I:kotlinx.coroutines.selects.SelectBuilderImpl$AtomicSelectOp) kotlinx.coroutines.selects.SelectBuilderImpl.AtomicSelectOp.impl kotlinx.coroutines.selects.SelectBuilderImpl \l}"];
Node_76 [shape=record,label="{76\:\ 0x0050|0x0050: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:100:0x0053 \l}"];
Node_100 [shape=record,label="{100\:\ 0x0053|SYNTHETIC\l}"];
Node_78 [shape=record,label="{78\:\ 0x0053|0x0053: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0055: CONST_STR  (r6 I:java.lang.String) =  \"Cannot use matching select clauses on the same object\"  (LINE:515)\l0x0057: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005b: INVOKE  (r5 I:java.lang.IllegalStateException), (r6 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_79 [shape=record,label="{79\:\ 0x005e|0x005e: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_54 [shape=record,label="{54\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_80 [shape=record,label="{80\:\ 0x005f|0x005f: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:518)\l0x0060: CHECK_CAST (r5 I:kotlinx.coroutines.internal.OpDescriptor) = (kotlinx.coroutines.internal.OpDescriptor) (r5 I:??[OBJECT, ARRAY]) \l0x0062: INVOKE  (r5 I:boolean) = \l  (r4 I:kotlinx.coroutines.internal.AtomicOp A[D('otherAtomicOp' kotlinx.coroutines.internal.AtomicOp)])\l  (r5 I:kotlinx.coroutines.internal.OpDescriptor)\l type: VIRTUAL call: kotlinx.coroutines.internal.AtomicOp.isEarlierThan(kotlinx.coroutines.internal.OpDescriptor):boolean A[MD:(kotlinx.coroutines.internal.OpDescriptor):boolean (m)]\l}"];
Node_81 [shape=record,label="{81\:\ 0x0066|0x0066: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:84:0x006b \l}"];
Node_98 [shape=record,label="{98\:\ 0x0068|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0068|0x0068: SGET  (r5 I:java.lang.Object) =  kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC java.lang.Object  (LINE:525)\l}"];
Node_83 [shape=record,label="{83\:\ 0x006a|RETURN\l|0x006a: RETURN  (r5 I:java.lang.Object) \l}"];
Node_84 [shape=record,label="{84\:\ 0x006b|0x006b: MOVE  (r4 I:??[OBJECT, ARRAY] A[D('otherAtomicOp' kotlinx.coroutines.internal.AtomicOp)]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:530)\l0x006c: CHECK_CAST (r4 I:kotlinx.coroutines.internal.OpDescriptor) = (kotlinx.coroutines.internal.OpDescriptor) (r4 I:??[OBJECT, ARRAY]) \l0x006e: INVOKE  (r4 I:kotlinx.coroutines.internal.OpDescriptor), (r7 I:java.lang.Object) type: VIRTUAL call: kotlinx.coroutines.internal.OpDescriptor.perform(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_103 [shape=record,label="{103\:\ 0x0002|SYNTHETIC\l}"];
Node_102 [shape=record,label="{102\:\ 0x0002|LOOP_END\lSYNTHETIC\lLOOP:0: B:56:0x0002\-\>B:102:0x0002\l}"];
Node_101 [shape=record,label="{101\:\ 0x0073|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0073|0x0073: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x0076  (LINE:533)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0075|RETURN\l|0x0075: RETURN  (r5 I:java.lang.Object) \l}"];
Node_88 [shape=record,label="{88\:\ 0x0076|0x0076: IGET  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = \l  (r8 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)])\l kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc  (LINE:534)\l}"];
Node_89 [shape=record,label="{89\:\ 0x0078|0x0078: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:92:0x007d \l}"];
Node_90 [shape=record,label="{90\:\ 0x007a|0x007a: SGET  (r4 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN kotlinx.coroutines.internal.Symbol \l}"];
Node_91 [shape=record,label="{91\:\ 0x007c|RETURN\l|0x007c: RETURN  (r4 I:java.lang.Object) \l}"];
Node_92 [shape=record,label="{92\:\ 0x007d|RETURN\l|0x007d: RETURN  (r5 I:java.lang.Object)  (LINE:535)\l}"];
Node_99 [shape=record,label="{99\:\ 0x000e|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x000e|0x000e: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:95:0x001d  (LINE:488)\l}"];
Node_95 [shape=record,label="{95\:\ 0x001d|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x001d|0x001d: NEW_INSTANCE  (r4 I:kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp) =  kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp  (LINE:493)\l0x001f: INVOKE  \l  (r4 I:kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp)\l  (r8 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)])\l type: DIRECT call: kotlinx.coroutines.selects.SelectBuilderImpl.PairSelectOp.\<init\>(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):void (m)]\l0x0022: SGET  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.selects.SelectBuilderImpl._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:494)\l0x0024: INVOKE  (r6 I:java.lang.Object) =  type: STATIC call: kotlinx.coroutines.selects.SelectKt.getNOT_SELECTED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0028: INVOKE  (r5 I:boolean) = \l  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l  (r4 I:java.lang.Object A[D('pairSelectOp' kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_63 [shape=record,label="{63\:\ 0x002c|0x002c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x002f \l}"];
Node_96 [shape=record,label="{96\:\ 0x002f|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x002f|0x002f: INVOKE  (r5 I:java.lang.Object) = \l  (r4 I:kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp A[D('pairSelectOp' kotlinx.coroutines.selects.SelectBuilderImpl$PairSelectOp)])\l  (r7 I:java.lang.Object)\l type: VIRTUAL call: kotlinx.coroutines.selects.SelectBuilderImpl.PairSelectOp.perform(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)] (LINE:495)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0033|0x0033: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('decision' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0036  (LINE:496)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0035|RETURN\l|0x0035: RETURN  (r5 I:java.lang.Object A[D('decision' java.lang.Object)]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x0036|0x0036: INVOKE  (r7 I:kotlinx.coroutines.selects.SelectBuilderImpl) type: DIRECT call: kotlinx.coroutines.selects.SelectBuilderImpl.doAfterSelect():void A[MD:():void (m)] (LINE:498)\l0x0039: SGET  (r4 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN kotlinx.coroutines.internal.Symbol  (LINE:499)\l}"];
Node_69 [shape=record,label="{69\:\ 0x003b|RETURN\l|0x003b: RETURN  (r4 I:java.lang.Object) \l}"];
Node_104 [shape=record,label="{104\:\ 0x0002|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x0010|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0010|0x0010: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.selects.SelectBuilderImpl._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:490)\l0x0012: INVOKE  (r6 I:java.lang.Object) =  type: STATIC call: kotlinx.coroutines.selects.SelectKt.getNOT_SELECTED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0016: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x001a|0x001a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:93:0x0036 \l}"];
Node_93 [shape=record,label="{93\:\ 0x0036|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x0002|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.selects.SelectBuilderImpl.trySelectOther((r7 'this' I:kotlinx.coroutines.selects.SelectBuilderImpl\<R\> A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lBACK_EDGE: B:60:0x001a \-\> B:56:0x0002, CROSS_EDGE: B:67:0x0035 \-\> B:54:?, CROSS_EDGE: B:66:0x0033 \-\> B:68:0x0036, BACK_EDGE: B:63:0x002c \-\> B:56:0x0002, CROSS_EDGE: B:79:0x005e \-\> B:54:?, CROSS_EDGE: B:83:0x006a \-\> B:54:?, BACK_EDGE: B:84:0x006b \-\> B:56:0x0002, CROSS_EDGE: B:74:0x0049 \-\> B:80:0x005f, CROSS_EDGE: B:72:0x0040 \-\> B:84:0x006b, CROSS_EDGE: B:87:0x0075 \-\> B:54:?, CROSS_EDGE: B:91:0x007c \-\> B:54:?, CROSS_EDGE: B:92:0x007d \-\> B:54:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0022\-0x0036: r4 'pairSelectOp' Lkotlinx\/coroutines\/selects\/SelectBuilderImpl$PairSelectOp;\l  0x0033\-0x0036: r5 'decision' Ljava\/lang\/Object;\l  0x0046\-0x006b: r4 'otherAtomicOp' Lkotlinx\/coroutines\/internal\/AtomicOp;\l  0x0005\-0x0072: r2 'state' Ljava\/lang\/Object;\l  0x0006\-0x0072: r3 '$i$a$\-loop\-SelectBuilderImpl$trySelectOther$1' I\l  0x0001\-0x007d: r0 '$this$loop$iv' Lkotlinx\/coroutines\/selects\/SelectBuilderImpl;\l  0x0002\-0x007d: r1 '$i$f$loop' I\l  0x0073\-0x007d: r2 'state' Ljava\/lang\/Object;\l  0x0073\-0x007d: r3 '$i$a$\-loop\-SelectBuilderImpl$trySelectOther$1' I\l  \-1 \-0x007d: r8 'otherOp' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;\lTYPE_VARS: [R]\lMETHOD_OVERRIDE: [kotlinx.coroutines.selects.SelectInstance.trySelectOther(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):java.lang.Object]\l}"];
MethodNode -> Node_53;Node_53 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_94;
Node_57 -> Node_99[style=dashed];
Node_94 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_101;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_84;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_80;
Node_75 -> Node_76;
Node_76 -> Node_80[style=dashed];
Node_76 -> Node_100;
Node_100 -> Node_78;
Node_78 -> Node_79;
Node_79 -> Node_54;
Node_80 -> Node_81;
Node_81 -> Node_84;
Node_81 -> Node_98[style=dashed];
Node_98 -> Node_82;
Node_82 -> Node_83;
Node_83 -> Node_54;
Node_84 -> Node_103;
Node_103 -> Node_102;
Node_102 -> Node_56;
Node_101 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_88;
Node_87 -> Node_54;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_92;
Node_90 -> Node_91;
Node_91 -> Node_54;
Node_92 -> Node_54;
Node_99 -> Node_58;
Node_58 -> Node_95;
Node_58 -> Node_97[style=dashed];
Node_95 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_96;
Node_63 -> Node_104[style=dashed];
Node_96 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_54;
Node_68 -> Node_69;
Node_69 -> Node_54;
Node_104 -> Node_102;
Node_97 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_93;
Node_60 -> Node_105[style=dashed];
Node_93 -> Node_68;
Node_105 -> Node_102;
}

