digraph "CFG forkotlinx.coroutines.JobSupport.addLastAtomic(Ljava\/lang\/Object;Lkotlinx\/coroutines\/NodeList;Lkotlinx\/coroutines\/JobNode;)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('list' kotlinx.coroutines.NodeList)])  (LINE:524)\l0x0001: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1549)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: NEW_INSTANCE  (r4 I:kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1) =  kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1  (LINE:1550)\l0x0008: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('node' kotlinx.coroutines.JobNode)]) \l0x0009: CHECK_CAST (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r5 I:??[OBJECT, ARRAY]) \l0x000b: INVOKE  \l  (r4 I:kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1)\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r6 I:kotlinx.coroutines.JobSupport)\l  (r7 I:java.lang.Object A[D('expect' java.lang.Object)])\l type: DIRECT call: kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1.\<init\>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.JobSupport, java.lang.Object):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.JobSupport, java.lang.Object):void (m)]\l0x000e: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) (r4 I:??[OBJECT, ARRAY]) \l0x0011: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('this_$iv$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r4 I:??[OBJECT, ARRAY])  (LINE:1549)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|LOOP_START\lLOOP:0: B:15:0x0012\-\>B:16:0x001e\l|0x0013: INVOKE  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:1554)\l0x0017: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('node' kotlinx.coroutines.JobNode)])  (LINE:1555)\l0x0018: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r4 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r4 I:int) = \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|LOOP_END\lLOOP:0: B:15:0x0012\-\>B:16:0x001e\l|0x001e: SWITCH  (r4 I:??)\l case 1: goto B:22:0x0024\l case 2: goto B:21:0x0022\l default: goto B:15:0x0012 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0022|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0022|SYNTHETIC\lRETURN\l|0x0022: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: RETURN  (r4 I:boolean) A[SYNTHETIC] (LINE:524)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1556)\l0x0025: RETURN  (r4 I:boolean)  (LINE:524)\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.JobSupport.addLastAtomic((r6 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[D('expect' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlinx.coroutines.NodeList A[D('list' kotlinx.coroutines.NodeList), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlinx.coroutines.JobNode A[D('node' kotlinx.coroutines.JobNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0024 \-\> B:20:0x0025, BACK_EDGE: B:16:0x001e \-\> B:15:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0011: r2 'this_$iv$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0006\-0x0011: r3 '$i$f$makeCondAddOp' I\l  0x0017\-0x0021: r3 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0003\-0x0025: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0004\-0x0025: r1 '$i$f$addLastIf' I\l  0x0012\-0x0025: r2 'condAdd$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;\l  0x0022\-0x0025: r3 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x002d: r7 'expect' Ljava\/lang\/Object;\l  \-1 \-0x002d: r8 'list' Lkotlinx\/coroutines\/NodeList;\l  \-1 \-0x002d: r9 'node' Lkotlinx\/coroutines\/JobNode;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_15;
Node_16 -> Node_21;
Node_16 -> Node_22;
Node_21 -> Node_18;
Node_18 -> Node_13;
Node_22 -> Node_19;
Node_19 -> Node_13;
}

