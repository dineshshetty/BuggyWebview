digraph "CFG forkotlinx.coroutines.JobSupport.getOrPromoteCancellingList(Lkotlinx\/coroutines\/Incomplete;)Lkotlinx\/coroutines\/NodeList;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.NodeList) = (r3 I:kotlinx.coroutines.Incomplete A[D('state' kotlinx.coroutines.Incomplete)]) type: INTERFACE call: kotlinx.coroutines.Incomplete.getList():kotlinx.coroutines.NodeList A[MD:():kotlinx.coroutines.NodeList (m)] (LINE:773)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0030 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|0x0007: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('state' kotlinx.coroutines.Incomplete)]) kotlinx.coroutines.Empty  (LINE:775)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0011 \l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:kotlinx.coroutines.NodeList) =  kotlinx.coroutines.NodeList \l0x000d: INVOKE  (r0 I:kotlinx.coroutines.NodeList) type: DIRECT call: kotlinx.coroutines.NodeList.\<init\>():void A[MD:():void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r0 I:kotlinx.coroutines.NodeList) A[SYNTHETIC] (LINE:783)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|0x0011: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('state' kotlinx.coroutines.Incomplete)]) kotlinx.coroutines.JobNode  (LINE:776)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0020 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|0x0015: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('state' kotlinx.coroutines.Incomplete)])  (LINE:779)\l0x0016: CHECK_CAST (r0 I:kotlinx.coroutines.JobNode) = (kotlinx.coroutines.JobNode) (r0 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r2 I:kotlinx.coroutines.JobSupport), (r0 I:kotlinx.coroutines.JobNode) type: DIRECT call: kotlinx.coroutines.JobSupport.promoteSingleToNodeList(kotlinx.coroutines.JobNode):void A[MD:(kotlinx.coroutines.JobNode):void (m)]\l0x001b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:780)\l0x001c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001d: CHECK_CAST (r1 I:kotlinx.coroutines.NodeList) = (kotlinx.coroutines.NodeList) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r0 I:kotlinx.coroutines.NodeList) A[SYNTHETIC] (LINE:783)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0020|0x0020: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0022: CONST_STR  (r1 I:java.lang.String) =  \"State should have list: \"  (LINE:782)\l0x0024: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r3 I:java.lang.Object A[D('state' kotlinx.coroutines.Incomplete)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0028: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x002c: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x002f|0x002f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: RETURN  (r0 I:kotlinx.coroutines.NodeList)  (LINE:783)\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.NodeList kotlinx.coroutines.JobSupport.getOrPromoteCancellingList((r2 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.Incomplete A[D('state' kotlinx.coroutines.Incomplete), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0015 \-\> B:27:0x0030, CROSS_EDGE: B:26:0x002f \-\> B:16:?, CROSS_EDGE: B:18:0x0004 \-\> B:27:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0030: r3 'state' Lkotlinx\/coroutines\/Incomplete;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_28;
Node_28 -> Node_16;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_29;
Node_29 -> Node_16;
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_27 -> Node_16;
}

