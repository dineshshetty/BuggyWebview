digraph "CFG forkotlinx.coroutines.JobSupport.firstChild(Lkotlinx\/coroutines\/Incomplete;)Lkotlinx\/coroutines\/ChildHandleNode;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000}"];
Node_18 [shape=record,label="{18\:\ 0x0003|if ((r3 instanceof kotlinx.coroutines.ChildHandleNode) == false) goto L13\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|kotlinx.coroutines.ChildHandleNode r0 = (kotlinx.coroutines.ChildHandleNode) r3\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.ChildHandleNode) = (r0v1 kotlinx.coroutines.ChildHandleNode), (r0v6 kotlinx.coroutines.ChildHandleNode) binds: [B:20:0x0009, B:19:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|kotlinx.coroutines.NodeList r0 = r3.getList()\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|if (r0 != null) goto L7\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return nextChild(r0)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_26 [shape=record,label="{26\:\ 0x001a}"];
Node_27 [shape=record,label="{27\:\ 0x001b|RETURN\lORIG_RETURN\l|return r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|r0 = null\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.ChildHandleNode kotlinx.coroutines.JobSupport.firstChild((r2v0 'this' kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r3v0 'state' kotlinx.coroutines.Incomplete A[D('state' kotlinx.coroutines.Incomplete), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0010 \-\> B:27:0x001b, CROSS_EDGE: B:26:0x001a \-\> B:27:0x001b, CROSS_EDGE: B:20:0x0009 \-\> B:21:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_29[style=dashed];
Node_25 -> Node_28;
Node_28 -> Node_16;
Node_29 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_20 -> Node_21;
}

