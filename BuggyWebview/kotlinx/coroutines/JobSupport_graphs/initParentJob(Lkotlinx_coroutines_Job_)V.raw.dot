digraph "CFG forkotlinx.coroutines.JobSupport.initParentJob(Lkotlinx\/coroutines\/Job;)V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:143)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0019 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1479)\l0x0007: INVOKE  (r1 I:kotlinx.coroutines.ChildHandle) = (r2 I:kotlinx.coroutines.JobSupport) type: VIRTUAL call: kotlinx.coroutines.JobSupport.getParentHandle$kotlinx_coroutines_core():kotlinx.coroutines.ChildHandle A[MD:():kotlinx.coroutines.ChildHandle (m)] (LINE:143)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000f \l}"];
Node_26 [shape=record,label="{26\:\ 0x000d|0x000d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0010|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0013 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0015: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x000f|0x000f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|0x0019: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('parent' kotlinx.coroutines.Job)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0023  (LINE:144)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|0x001b: SGET  (r0 I:kotlinx.coroutines.NonDisposableHandle) =  kotlinx.coroutines.NonDisposableHandle.INSTANCE kotlinx.coroutines.NonDisposableHandle  (LINE:145)\l0x001d: CHECK_CAST (r0 I:kotlinx.coroutines.ChildHandle) = (kotlinx.coroutines.ChildHandle) (r0 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r2 I:kotlinx.coroutines.JobSupport), (r0 I:kotlinx.coroutines.ChildHandle) type: VIRTUAL call: kotlinx.coroutines.JobSupport.setParentHandle$kotlinx_coroutines_core(kotlinx.coroutines.ChildHandle):void A[MD:(kotlinx.coroutines.ChildHandle):void (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:146)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0023|0x0023: INVOKE  (r3 I:kotlinx.coroutines.Job A[D('parent' kotlinx.coroutines.Job)]) type: INTERFACE call: kotlinx.coroutines.Job.start():boolean A[MD:():boolean (m)] (LINE:148)\l0x0026: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY])  (LINE:150)\l0x0027: CHECK_CAST (r0 I:kotlinx.coroutines.ChildJob) = (kotlinx.coroutines.ChildJob) (r0 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r0 I:kotlinx.coroutines.ChildHandle) = (r3 I:kotlinx.coroutines.Job A[D('parent' kotlinx.coroutines.Job)]), (r0 I:kotlinx.coroutines.ChildJob) type: INTERFACE call: kotlinx.coroutines.Job.attachChild(kotlinx.coroutines.ChildJob):kotlinx.coroutines.ChildHandle A[MD:(kotlinx.coroutines.ChildJob):kotlinx.coroutines.ChildHandle (m)]\l0x002e: INVOKE  \l  (r2 I:kotlinx.coroutines.JobSupport)\l  (r0 I:kotlinx.coroutines.ChildHandle A[D('handle' kotlinx.coroutines.ChildHandle)])\l type: VIRTUAL call: kotlinx.coroutines.JobSupport.setParentHandle$kotlinx_coroutines_core(kotlinx.coroutines.ChildHandle):void A[MD:(kotlinx.coroutines.ChildHandle):void (m)] (LINE:151)\l0x0031: INVOKE  (r1 I:boolean) = (r2 I:kotlinx.coroutines.JobSupport) type: VIRTUAL call: kotlinx.coroutines.JobSupport.isCompleted():boolean A[MD:():boolean (m)] (LINE:153)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0035|0x0035: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:? \l}"];
Node_37 [shape=record,label="{37\:\ 0x0037|0x0037: INVOKE  (r0 I:kotlinx.coroutines.ChildHandle A[D('handle' kotlinx.coroutines.ChildHandle)]) type: INTERFACE call: kotlinx.coroutines.ChildHandle.dispose():void A[MD:():void (m)] (LINE:154)\l0x003a: SGET  (r1 I:kotlinx.coroutines.NonDisposableHandle) =  kotlinx.coroutines.NonDisposableHandle.INSTANCE kotlinx.coroutines.NonDisposableHandle  (LINE:155)\l0x003c: CHECK_CAST (r1 I:kotlinx.coroutines.ChildHandle) = (kotlinx.coroutines.ChildHandle) (r1 I:??[OBJECT, ARRAY]) \l0x003e: INVOKE  (r2 I:kotlinx.coroutines.JobSupport), (r1 I:kotlinx.coroutines.ChildHandle) type: VIRTUAL call: kotlinx.coroutines.JobSupport.setParentHandle$kotlinx_coroutines_core(kotlinx.coroutines.ChildHandle):void A[MD:(kotlinx.coroutines.ChildHandle):void (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0041|RETURN\lORIG_RETURN\l|0x0041: RETURN    (LINE:157)\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0041: RETURN   A[SYNTHETIC] (LINE:157)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.JobSupport.initParentJob((r2 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.Job A[D('parent' kotlinx.coroutines.Job), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0022 \-\> B:21:?, CROSS_EDGE: B:38:0x0041 \-\> B:21:?, CROSS_EDGE: B:36:0x0035 \-\> B:38:0x0041, CROSS_EDGE: B:27:0x000f \-\> B:28:0x0010, CROSS_EDGE: B:23:0x0004 \-\> B:32:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0010: r0 '$i$a$\-assert\-JobSupport$initParentJob$1' I\l  0x002e\-0x0041: r0 'handle' Lkotlinx\/coroutines\/ChildHandle;\l  \-1 \-0x0041: r3 'parent' Lkotlinx\/coroutines\/Job;\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_32;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_32[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_21;
Node_27 -> Node_28;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_21;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_21;
Node_39 -> Node_21;
}

