digraph "CFG forkotlinx.coroutines.JobSupport.addSuppressedExceptions(Ljava\/lang\/Throwable;Ljava\/util\/List;)V" {
subgraph cluster_Region_1650834316 {
label = "R(1:(2:(1:3)|(3:5|8|(3:11|14|(1:25)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1979923991 {
label = "R(2:(1:3)|(3:5|8|(3:11|14|(1:25))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_267959843 {
label = "IF [B:39:0x0005] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0005|if (r9.size() \<= 1) goto L3\l}"];
subgraph cluster_Region_972285432 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0007|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_85212947 {
label = "R(3:5|8|(3:11|14|(1:25)))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0008|int int r0 = r9.size()\ljava.util.Set java.util.Set r0 = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap(r0))\l}"];
Node_45 [shape=record,label="{45\:\ 0x0026|PHI: r2 \l  PHI: (r2v4 java.lang.Throwable A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Throwable r1 = !kotlinx.coroutines.Debug.getRECOVER_STACK_TRACES() ? r8 : kotlinx.coroutines.internal.StackTraceRecovery.unwrapImpl(r8)\ljava.util.Iterator r2 = r9.iterator()\l\l}"];
subgraph cluster_LoopRegion_1980072081 {
label = "LOOP:0: (3:11|14|(1:25))";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x002f|java.lang.Throwable \lif (r2.hasNext() != false) goto L11\l}"];
subgraph cluster_Region_1545706578 {
label = "R(3:11|14|(1:25))";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0031|java.lang.Throwable r3 = r2.next()\l}"];
Node_52 [shape=record,label="{52\:\ 0x0044|PHI: r5 \l  PHI: (r5v2 java.lang.Throwable A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Throwable r4 = !kotlinx.coroutines.Debug.getRECOVER_STACK_TRACES() ? r3 : kotlinx.coroutines.internal.StackTraceRecovery.unwrapImpl(r3)\l}"];
subgraph cluster_IfRegion_1468814584 {
label = "IF [B:53:0x0045, B:54:0x0047, B:56:0x004b, B:58:0x0051] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x0045|if (r4 != r8) goto L16\l}"];
Node_54 [shape=record,label="{54\:\ 0x0047|ADDED_TO_REGION\l|if (r4 != r1) goto L18\l}"];
Node_56 [shape=record,label="{56\:\ 0x004b|ADDED_TO_REGION\l|if ((r4 instanceof java.util.concurrent.CancellationException) == false) goto L21\l}"];
Node_58 [shape=record,label="{58\:\ 0x0051|ADDED_TO_REGION\l|if (r0.add(r4) != false) goto L24\l}"];
subgraph cluster_Region_1423875111 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_59 [shape=record,label="{59\:\ 0x0053|kotlin.Exceptions.addSuppressed(r8, r4)\l}"];
}
}
}
}
}
}
}
Node_36 [shape=record,color=red,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0000}"];
Node_37 [shape=record,color=red,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x001e}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0020}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x002b|LOOP_START\lLOOP:0: B:46:0x002b\-\>B:66:0x002b\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x003c}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x003e}"];
Node_61 [shape=record,color=red,label="{61\:\ 0x0047|SYNTHETIC\l}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x0049|SYNTHETIC\l}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x0049}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x004d|SYNTHETIC\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x004d}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x0053|SYNTHETIC\l}"];
Node_71 [shape=record,color=red,label="{71\:\ 0x002b|SYNTHETIC\l}"];
Node_66 [shape=record,color=red,label="{66\:\ 0x002b|LOOP_END\lSYNTHETIC\lADDED_TO_REGION\lLOOP:0: B:46:0x002b\-\>B:66:0x002b\l}"];
Node_70 [shape=record,color=red,label="{70\:\ 0x002b|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_69 [shape=record,color=red,label="{69\:\ 0x002b|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_68 [shape=record,color=red,label="{68\:\ 0x002b|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x002b|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x0040}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x0059|SYNTHETIC\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x0059}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x0022}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.JobSupport.addSuppressedExceptions((r7v0 'this' kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r8v0 'rootCause' java.lang.Throwable A[D('rootCause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 java.util.List\<? extends java.lang.Throwable\> A[D('exceptions' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:53:0x0045 \-\> B:46:0x002b, BACK_EDGE: B:54:0x0047 \-\> B:46:0x002b, BACK_EDGE: B:56:0x004b \-\> B:46:0x002b, BACK_EDGE: B:58:0x0051 \-\> B:46:0x002b, BACK_EDGE: B:59:0x0053 \-\> B:46:0x002b, CROSS_EDGE: B:51:0x0040 \-\> B:52:0x0044, CROSS_EDGE: B:60:0x0059 \-\> B:37:?, CROSS_EDGE: B:44:0x0022 \-\> B:45:0x0026\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/Throwable;Ljava\/util\/List\<+Ljava\/lang\/Throwable;\>;)V\l}"];
MethodNode -> Node_36;Node_39 -> Node_40;
Node_39 -> Node_41[style=dashed];
Node_40 -> Node_37;
Node_41 -> Node_42;
Node_45 -> Node_46;
Node_47 -> Node_48;
Node_47 -> Node_62[style=dashed];
Node_48 -> Node_49;
Node_52 -> Node_53;
Node_53 -> Node_61;
Node_53 -> Node_67[style=dashed];
Node_54 -> Node_63;
Node_54 -> Node_68[style=dashed];
Node_56 -> Node_64;
Node_56 -> Node_69[style=dashed];
Node_58 -> Node_65;
Node_58 -> Node_70[style=dashed];
Node_59 -> Node_71;
Node_36 -> Node_38;
Node_38 -> Node_39;
Node_42 -> Node_43;
Node_42 -> Node_44;
Node_43 -> Node_45;
Node_46 -> Node_47;
Node_49 -> Node_50;
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_61 -> Node_54;
Node_63 -> Node_55;
Node_55 -> Node_56;
Node_64 -> Node_57;
Node_57 -> Node_58;
Node_65 -> Node_59;
Node_71 -> Node_66;
Node_66 -> Node_46;
Node_70 -> Node_66;
Node_69 -> Node_66;
Node_68 -> Node_66;
Node_67 -> Node_66;
Node_51 -> Node_52;
Node_62 -> Node_60;
Node_60 -> Node_37;
Node_44 -> Node_45;
}

