digraph "CFG forkotlinx.coroutines.JobSupport.selectAwaitCompletion$kotlinx_coroutines_core(Lkotlinx\/coroutines\/selects\/SelectInstance;Lkotlin\/jvm\/functions\/Function2;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|java.lang.Object r0 = getState$kotlinx_coroutines_core()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|if ((r0 instanceof kotlinx.coroutines.CompletedExceptionally) == false) goto L6\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|r9.resumeSelectWithException(((kotlinx.coroutines.CompletedExceptionally) r0).cause)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|kotlinx.coroutines.intrinsics.Cancellable.startCoroutineCancellable$default(r10, kotlinx.coroutines.JobSupportKt.unboxState(r0), r9.getCompletion(), null, 4, null)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.JobSupport.selectAwaitCompletion$kotlinx_coroutines_core((r8v0 'this' kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r9v0 kotlinx.coroutines.selects.SelectInstance\<? super R\> A[D('select' kotlinx.coroutines.selects.SelectInstance), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 kotlin.jvm.functions.Function2\<? super T, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\> A[D('block' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:14:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/selects\/SelectInstance\<\-TR;\>;Lkotlin\/jvm\/functions\/Function2\<\-TT;\-Lkotlin\/coroutines\/Continuation\<\-TR;\>;+Ljava\/lang\/Object;\>;)V\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

