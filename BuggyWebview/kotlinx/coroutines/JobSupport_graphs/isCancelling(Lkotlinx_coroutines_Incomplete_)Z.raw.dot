digraph "CFG forkotlinx.coroutines.JobSupport.isCancelling(Lkotlinx\/coroutines\/Incomplete;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$isCancelling' kotlinx.coroutines.Incomplete)]) kotlinx.coroutines.JobSupport$Finishing  (LINE:1145)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000f \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$isCancelling' kotlinx.coroutines.Incomplete)]) \l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.JobSupport$Finishing) = (kotlinx.coroutines.JobSupport$Finishing) (r0 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:boolean) = (r0 I:kotlinx.coroutines.JobSupport$Finishing) type: VIRTUAL call: kotlinx.coroutines.JobSupport.Finishing.isCancelling():boolean A[MD:():boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000f \l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|SYNTHETIC\lRETURN\l|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0010: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.JobSupport.isCancelling((r1 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.Incomplete A[D('$this$isCancelling' kotlinx.coroutines.Incomplete), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000f \-\> B:18:0x0010, CROSS_EDGE: B:13:0x0002 \-\> B:17:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r2 '$this$isCancelling' Lkotlinx\/coroutines\/Incomplete;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_11;
}

