digraph "CFG forkotlinx.coroutines.JobSupport.awaitSuspend(Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1933330316 {
label = "R(3:1|(1:3)|4)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0000|kotlinx.coroutines.JobSupport$AwaitContinuation kotlinx.coroutines.JobSupport.AwaitContinuation r2 = new kotlinx.coroutines.JobSupport.AwaitContinuation(kotlin.coroutines.intrinsics.IntrinsicsKt.intercepted(r7), r6)\lr2.initCancellability()\lkotlinx.coroutines.CompletionHandlerBase kotlinx.coroutines.CompletionHandlerBase r4 = new kotlinx.coroutines.ResumeAwaitOnCompletion(r2)\lkotlinx.coroutines.CancellableContinuationKt.disposeOnCancellation(r2, invokeOnCompletion(r4))\ljava.lang.Object java.lang.Object r0 = r2.getResult()\l}"];
subgraph cluster_IfRegion_1968275025 {
label = "IF [B:9:0x002d] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x002d|if (r0 == kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L3\l}"];
subgraph cluster_Region_421133248 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x002f|kotlin.coroutines.jvm.internal.DebugProbes.probeCoroutineSuspended(r7)\l}"];
}
}
Node_11 [shape=record,label="{11\:\ 0x0032|RETURN\l|return r0\l}"];
}
Node_6 [shape=record,color=red,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.JobSupport.awaitSuspend((r6v0 'this' kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r7v0 kotlin.coroutines.Continuation\<java.lang.Object\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x002d \-\> B:11:0x0032\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<Ljava\/lang\/Object;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_6;Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_7;
Node_6 -> Node_8;
}

