digraph "CFG forkotlinx.coroutines.JobSupport.cancelParent(Ljava\/lang\/Throwable;)Z" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000}"];
Node_22 [shape=record,label="{22\:\ 0x0005|if (isScopedCoroutine() == false) goto L5\l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|RETURN\l|return true\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|boolean r0 = r5 instanceof java.util.concurrent.CancellationException\lkotlinx.coroutines.ChildHandle r2 = getParentHandle$kotlinx_coroutines_core()\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|if (r2 == null) goto L15\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010}"];
Node_27 [shape=record,label="{27\:\ 0x0012|if (r2 != kotlinx.coroutines.NonDisposableHandle.INSTANCE) goto L9\l}"];
Node_29 [shape=record,label="{29\:\ 0x0015}"];
Node_30 [shape=record,label="{30\:\ 0x0019|if (r2.childCancelled(r5) != false) goto L14\l}"];
Node_31 [shape=record,label="{31\:\ 0x001b|if (r0 == false) goto L12\l}"];
Node_33 [shape=record,label="{33\:\ 0x001e|RETURN\lORIG_RETURN\l|return false\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_35 [shape=record,label="{35\:\ 0x0020|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.JobSupport.cancelParent((r4v0 'this' kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r5v0 'cause' java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x001f \-\> B:20:?, CROSS_EDGE: B:31:0x001b \-\> B:34:0x001f, CROSS_EDGE: B:30:0x0019 \-\> B:34:0x001f, CROSS_EDGE: B:35:0x0020 \-\> B:20:?, CROSS_EDGE: B:25:0x000e \-\> B:35:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_20;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_35;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_35[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_36;
Node_31 -> Node_33;
Node_31 -> Node_37[style=dashed];
Node_33 -> Node_20;
Node_37 -> Node_20;
Node_36 -> Node_20;
Node_35 -> Node_20;
}

