digraph "CFG forkotlinx.coroutines.JobSupport.addSuppressedExceptions(Ljava\/lang\/Throwable;Ljava\/util\/List;)V" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r9 I:java.util.List A[D('exceptions' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:270)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char]) \> (r1 I:??[int, byte, short, char])  \-\> B:41:0x0008 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0007|RETURN\l|0x0007: RETURN   \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r9 I:java.util.List A[D('exceptions' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:271)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: NEW_INSTANCE  (r2 I:java.util.IdentityHashMap) =  java.util.IdentityHashMap  (LINE:1489)\l0x000f: INVOKE  (r2 I:java.util.IdentityHashMap), (r0 I:int A[D('expectedSize$iv' int)]) type: DIRECT call: java.util.IdentityHashMap.\<init\>(int):void A[MD:(int):void (c)]\l0x0012: CHECK_CAST (r2 I:java.util.Map) = (java.util.Map) (r2 I:??[OBJECT, ARRAY]) \l0x0014: INVOKE  (r0 I:java.util.Set A[D('expectedSize$iv' int)]) = (r2 I:java.util.Map) type: STATIC call: java.util.Collections.newSetFromMap(java.util.Map):java.util.Set A[MD:\<E\>:(java.util.Map\<E, java.lang.Boolean\>):java.util.Set\<E\> (c)]\l0x0019: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:277)\l0x001a: INVOKE  (r2 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getRECOVER_STACK_TRACES():boolean A[MD:():boolean (m)] (LINE:1490)\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0022 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0020|0x0020: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('rootCause' java.lang.Throwable)]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0026|0x0026: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('$i$f$unwrap' int)]) = (r2 I:??[OBJECT, ARRAY])  (LINE:277)\l0x0027: INVOKE  (r2 I:java.util.Iterator) = (r9 I:java.util.List A[D('exceptions' java.util.List)]) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:278)\l}"];
Node_46 [shape=record,label="{46\:\ 0x002b|LOOP_START\lLOOP:0: B:46:0x002b\-\>B:66:0x002b\l|0x002b: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x002f|0x002f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0059 \l}"];
Node_48 [shape=record,label="{48\:\ 0x0031|0x0031: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0035: CHECK_CAST (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:??[OBJECT, ARRAY]) \l0x0037: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:279)\l0x0038: INVOKE  (r5 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getRECOVER_STACK_TRACES():boolean A[MD:():boolean (m)] (LINE:1491)\l}"];
Node_49 [shape=record,label="{49\:\ 0x003c|0x003c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0040 \l}"];
Node_50 [shape=record,label="{50\:\ 0x003e|0x003e: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Throwable)]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0044|0x0044: MOVE  (r4 I:??[OBJECT, ARRAY] A[D('$i$f$unwrap' int)]) = (r5 I:??[OBJECT, ARRAY])  (LINE:279)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0045|0x0045: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unwrapped' java.lang.Throwable)]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rootCause' java.lang.Throwable)])  \-\> B:67:0x002b  (LINE:280)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0047|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0047|0x0047: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unwrapped' java.lang.Throwable)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unwrappedCause' java.lang.Throwable)])  \-\> B:68:0x002b \l}"];
Node_63 [shape=record,label="{63\:\ 0x0049|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0049|0x0049: INSTANCE_OF  (r5 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('unwrapped' java.lang.Throwable)]) java.util.concurrent.CancellationException  (LINE:281)\l}"];
Node_56 [shape=record,label="{56\:\ 0x004b|0x004b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x002b \l}"];
Node_64 [shape=record,label="{64\:\ 0x004d|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x004d|0x004d: INVOKE  (r5 I:boolean) = \l  (r0 I:java.util.Set A[D('seenExceptions' java.util.Set)])\l  (r4 I:java.lang.Object A[D('unwrapped' java.lang.Throwable)])\l type: INTERFACE call: java.util.Set.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0051|0x0051: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x002b \l}"];
Node_65 [shape=record,label="{65\:\ 0x0053|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0053|0x0053: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('rootCause' java.lang.Throwable)])  (LINE:282)\l0x0054: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0055: INVOKE  \l  (r5 I:java.lang.Throwable A[D('$this$addSuppressedThrowable$iv' java.lang.Throwable)])\l  (r4 I:java.lang.Throwable A[D('unwrapped' java.lang.Throwable)])\l type: STATIC call: kotlin.ExceptionsKt.addSuppressed(java.lang.Throwable, java.lang.Throwable):void A[MD:(java.lang.Throwable, java.lang.Throwable):void (m)] (LINE:1492)\l}"];
Node_71 [shape=record,label="{71\:\ 0x002b|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x002b|LOOP_END\lSYNTHETIC\lLOOP:0: B:46:0x002b\-\>B:66:0x002b\l}"];
Node_70 [shape=record,label="{70\:\ 0x002b|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x002b|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x002b|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x002b|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0040|0x0040: INVOKE  (r5 I:java.lang.Throwable) = (r3 I:java.lang.Throwable A[D('exception' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.unwrapImpl(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x0059|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0059|RETURN\l|0x0059: RETURN    (LINE:285)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0022|0x0022: INVOKE  (r2 I:java.lang.Throwable) = (r8 I:java.lang.Throwable A[D('rootCause' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.unwrapImpl(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)]\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.JobSupport.addSuppressedExceptions((r7 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.Throwable A[D('rootCause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.List\<? extends java.lang.Throwable\> A[D('exceptions' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:53:0x0045 \-\> B:46:0x002b, BACK_EDGE: B:54:0x0047 \-\> B:46:0x002b, BACK_EDGE: B:56:0x004b \-\> B:46:0x002b, BACK_EDGE: B:58:0x0051 \-\> B:46:0x002b, BACK_EDGE: B:59:0x0053 \-\> B:46:0x002b, CROSS_EDGE: B:51:0x0040 \-\> B:52:0x0044, CROSS_EDGE: B:60:0x0059 \-\> B:37:?, CROSS_EDGE: B:44:0x0022 \-\> B:45:0x0026\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0018: r0 'expectedSize$iv' I\l  0x000d\-0x0018: r1 '$i$f$identitySet' I\l  0x001a\-0x0026: r1 '$i$f$unwrap' I\l  0x0038\-0x0044: r4 '$i$f$unwrap' I\l  0x0037\-0x0058: r3 'exception' Ljava\/lang\/Throwable;\l  0x0045\-0x0058: r4 'unwrapped' Ljava\/lang\/Throwable;\l  0x0054\-0x0058: r5 '$this$addSuppressedThrowable$iv' Ljava\/lang\/Throwable;\l  0x0055\-0x0058: r6 '$i$f$addSuppressedThrowable' I\l  0x0019\-0x0059: r0 'seenExceptions' Ljava\/util\/Set;\l  0x0027\-0x0059: r1 'unwrappedCause' Ljava\/lang\/Throwable;\l  \-1 \-0x0059: r8 'rootCause' Ljava\/lang\/Throwable;\l  \-1 \-0x0059: r9 'exceptions' Ljava\/util\/List;\lSIGNATURE: (Ljava\/lang\/Throwable;Ljava\/util\/List\<+Ljava\/lang\/Throwable;\>;)V\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_37;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_62;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_61[style=dashed];
Node_53 -> Node_67;
Node_61 -> Node_54;
Node_54 -> Node_63[style=dashed];
Node_54 -> Node_68;
Node_63 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_64[style=dashed];
Node_56 -> Node_69;
Node_64 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_65[style=dashed];
Node_58 -> Node_70;
Node_65 -> Node_59;
Node_59 -> Node_71;
Node_71 -> Node_66;
Node_66 -> Node_46;
Node_70 -> Node_66;
Node_69 -> Node_66;
Node_68 -> Node_66;
Node_67 -> Node_66;
Node_51 -> Node_52;
Node_62 -> Node_60;
Node_60 -> Node_37;
Node_44 -> Node_45;
}

