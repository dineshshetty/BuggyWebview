digraph "CFG forkotlinx.coroutines.JobSupport.makeCompletingOnce$kotlinx_coroutines_core(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY])  (LINE:827)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|LOOP_START\lLOOP:0: B:16:0x0002\-\>B:19:0x0017\l|0x0003: INVOKE  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.JobSupport A[D('this_$iv' kotlinx.coroutines.JobSupport)]) type: VIRTUAL call: kotlinx.coroutines.JobSupport.getState$kotlinx_coroutines_core():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:1591)\l0x0007: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r4 I:java.lang.Object) = \l  (r8 I:kotlinx.coroutines.JobSupport)\l  (r2 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r9 I:java.lang.Object A[D('proposedUpdate' java.lang.Object)])\l type: DIRECT call: kotlinx.coroutines.JobSupport.tryMakeCompleting(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(java.lang.Object, java.lang.Object):java.lang.Object (m)] (LINE:828)\l0x000d: INVOKE  (r5 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.JobSupportKt.access$getCOMPLETING_ALREADY$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:830)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|0x0011: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('finalState' java.lang.Object)]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: INVOKE  (r5 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.JobSupportKt.access$getCOMPLETING_RETRY$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:835)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|LOOP_END\lLOOP:0: B:16:0x0002\-\>B:19:0x0017\l|0x0017: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('finalState' java.lang.Object)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001a \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|RETURN\l|0x001a: RETURN  (r4 I:java.lang.Object A[D('finalState' java.lang.Object)])  (LINE:836)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001b|0x001b: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:831)\l0x001d: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:832)\l0x001f: INVOKE  (r6 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0022: CONST_STR  (r7 I:java.lang.String) =  \"Job \" \l0x0024: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0027: INVOKE  (r6 I:java.lang.StringBuilder), (r8 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x002a: CONST_STR  (r7 I:java.lang.String) =  \" is already complete or completing, but is being completed with \" \l0x002c: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0030: INVOKE  (r6 I:java.lang.StringBuilder), (r9 I:java.lang.Object A[D('proposedUpdate' java.lang.Object)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)] (LINE:832)\l0x0033: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0037: INVOKE  (r7 I:java.lang.Throwable) = (r8 I:kotlinx.coroutines.JobSupport), (r9 I:java.lang.Object A[D('proposedUpdate' java.lang.Object)]) type: DIRECT call: kotlinx.coroutines.JobSupport.getExceptionOrNull(java.lang.Object):java.lang.Throwable A[MD:(java.lang.Object):java.lang.Throwable (m)] (LINE:833)\l0x003b: INVOKE  (r5 I:java.lang.IllegalStateException), (r6 I:java.lang.String), (r7 I:java.lang.Throwable) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String, java.lang.Throwable):void A[MD:(java.lang.String, java.lang.Throwable):void (c)] (LINE:831)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003e|0x003e: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.JobSupport.makeCompletingOnce$kotlinx_coroutines_core((r8 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.Object A[D('proposedUpdate' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0017 \-\> B:16:0x0002, CROSS_EDGE: B:23:0x003e \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x003e: r0 'this_$iv' Lkotlinx\/coroutines\/JobSupport;\l  0x0002\-0x003e: r1 '$i$f$loopOnState' I\l  0x0007\-0x003e: r2 'state' Ljava\/lang\/Object;\l  0x0008\-0x003e: r3 '$i$a$\-loopOnState\-JobSupport$makeCompletingOnce$1' I\l  0x000c\-0x003e: r4 'finalState' Ljava\/lang\/Object;\l  \-1 \-0x003e: r9 'proposedUpdate' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_16[style=dashed];
Node_19 -> Node_25;
Node_25 -> Node_21;
Node_21 -> Node_14;
Node_24 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

