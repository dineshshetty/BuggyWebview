digraph "CFG forkotlinx.coroutines.JobSupport.tryMakeCancelling(Lkotlinx\/coroutines\/Incomplete;Ljava\/lang\/Throwable;)Z" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:787)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0015 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1479)\l0x0008: INSTANCE_OF  (r2 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('state' kotlinx.coroutines.Incomplete)]) kotlinx.coroutines.JobSupport$Finishing  (LINE:787)\l0x000a: ARITH  (r0 I:??[int, boolean] A[D('$i$a$\-assert\-JobSupport$tryMakeCancelling$1' int)]) = (r2 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x000f \l}"];
Node_31 [shape=record,label="{31\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0011: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|0x0015: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:788)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0029 \l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|0x001b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1479)\l0x001c: INVOKE  (r0 I:boolean A[D('$i$a$\-assert\-JobSupport$tryMakeCancelling$2' int)]) = (r6 I:kotlinx.coroutines.Incomplete A[D('state' kotlinx.coroutines.Incomplete)]) type: INTERFACE call: kotlinx.coroutines.Incomplete.isActive():boolean A[MD:():boolean (m)] (LINE:788)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-JobSupport$tryMakeCancelling$2' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0023 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0025: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0028|0x0028: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0029|0x0029: INVOKE  (r0 I:kotlinx.coroutines.NodeList) = (r5 I:kotlinx.coroutines.JobSupport), (r6 I:kotlinx.coroutines.Incomplete A[D('state' kotlinx.coroutines.Incomplete)]) type: DIRECT call: kotlinx.coroutines.JobSupport.getOrPromoteCancellingList(kotlinx.coroutines.Incomplete):kotlinx.coroutines.NodeList A[MD:(kotlinx.coroutines.Incomplete):kotlinx.coroutines.NodeList (m)] (LINE:790)\l0x002d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|0x002e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0031 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|RETURN\l|0x0030: RETURN  (r2 I:boolean) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0031|0x0031: NEW_INSTANCE  (r3 I:kotlinx.coroutines.JobSupport$Finishing) =  kotlinx.coroutines.JobSupport$Finishing  (LINE:792)\l0x0033: INVOKE  \l  (r3 I:kotlinx.coroutines.JobSupport$Finishing)\l  (r0 I:kotlinx.coroutines.NodeList A[D('list' kotlinx.coroutines.NodeList)])\l  (r2 I:boolean)\l  (r7 I:java.lang.Throwable A[D('rootCause' java.lang.Throwable)])\l type: DIRECT call: kotlinx.coroutines.JobSupport.Finishing.\<init\>(kotlinx.coroutines.NodeList, boolean, java.lang.Throwable):void A[MD:(kotlinx.coroutines.NodeList, boolean, java.lang.Throwable):void (m)]\l0x0036: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.JobSupport._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:793)\l0x0038: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r5 I:java.lang.Object)\l  (r6 I:java.lang.Object A[D('state' kotlinx.coroutines.Incomplete)])\l  (r3 I:java.lang.Object A[D('cancelling' kotlinx.coroutines.JobSupport$Finishing)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x003c|0x003c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x003f \l}"];
Node_45 [shape=record,label="{45\:\ 0x003e|RETURN\l|0x003e: RETURN  (r2 I:boolean) \l}"];
Node_46 [shape=record,label="{46\:\ 0x003f|0x003f: INVOKE  \l  (r5 I:kotlinx.coroutines.JobSupport)\l  (r0 I:kotlinx.coroutines.NodeList A[D('list' kotlinx.coroutines.NodeList)])\l  (r7 I:java.lang.Throwable A[D('rootCause' java.lang.Throwable)])\l type: DIRECT call: kotlinx.coroutines.JobSupport.notifyCancelling(kotlinx.coroutines.NodeList, java.lang.Throwable):void A[MD:(kotlinx.coroutines.NodeList, java.lang.Throwable):void (m)] (LINE:795)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0042|RETURN\l|0x0042: RETURN  (r1 I:boolean)  (LINE:796)\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.JobSupport.tryMakeCancelling((r5 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlinx.coroutines.Incomplete A[D('state' kotlinx.coroutines.Incomplete), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Throwable A[D('rootCause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x0028 \-\> B:25:?, CROSS_EDGE: B:42:0x0030 \-\> B:25:?, CROSS_EDGE: B:45:0x003e \-\> B:25:?, CROSS_EDGE: B:47:0x0042 \-\> B:25:?, CROSS_EDGE: B:34:0x0019 \-\> B:40:0x0029, CROSS_EDGE: B:27:0x0005 \-\> B:33:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x000a: r0 '$i$a$\-assert\-JobSupport$tryMakeCancelling$1' I\l  0x001c\-0x0020: r0 '$i$a$\-assert\-JobSupport$tryMakeCancelling$2' I\l  0x0031\-0x0042: r0 'list' Lkotlinx\/coroutines\/NodeList;\l  0x0036\-0x0042: r3 'cancelling' Lkotlinx\/coroutines\/JobSupport$Finishing;\l  \-1 \-0x0042: r6 'state' Lkotlinx\/coroutines\/Incomplete;\l  \-1 \-0x0042: r7 'rootCause' Ljava\/lang\/Throwable;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_33;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_33[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_25;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_35 -> Node_36;
Node_36 -> Node_38;
Node_36 -> Node_40[style=dashed];
Node_38 -> Node_39;
Node_39 -> Node_25;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_25;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_25;
Node_46 -> Node_47;
Node_47 -> Node_25;
}

