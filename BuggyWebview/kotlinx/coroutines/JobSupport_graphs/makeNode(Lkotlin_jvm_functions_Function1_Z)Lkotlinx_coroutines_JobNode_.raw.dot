digraph "CFG forkotlinx.coroutines.JobSupport.makeNode(Lkotlin\/jvm\/functions\/Function1;Z)Lkotlinx\/coroutines\/JobNode;" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:511)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0001|0x0001: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('onCancelling' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0016 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0003|0x0003: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('handler' kotlin.jvm.functions.Function1)]) kotlinx.coroutines.JobCancellingNode  (LINE:512)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x000a \l}"];
Node_35 [shape=record,label="{35\:\ 0x0007|0x0007: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('handler' kotlin.jvm.functions.Function1)]) \l0x0008: CHECK_CAST (r0 I:kotlinx.coroutines.JobCancellingNode) = (kotlinx.coroutines.JobCancellingNode) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0013 \l}"];
Node_37 [shape=record,label="{37\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:kotlinx.coroutines.InvokeOnCancelling) =  kotlinx.coroutines.InvokeOnCancelling  (LINE:513)\l0x000e: INVOKE  \l  (r0 I:kotlinx.coroutines.InvokeOnCancelling)\l  (r6 I:kotlin.jvm.functions.Function1 A[D('handler' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlinx.coroutines.InvokeOnCancelling.\<init\>(kotlin.jvm.functions.Function1):void A[MD:(kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):void (m)]\l0x0011: CHECK_CAST (r0 I:kotlinx.coroutines.JobCancellingNode) = (kotlinx.coroutines.JobCancellingNode) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0013|0x0013: CHECK_CAST (r0 I:kotlinx.coroutines.JobNode) = (kotlinx.coroutines.JobNode) (r0 I:??[OBJECT, ARRAY])  (LINE:512)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0043|0x0044: INVOKE  (r0 I:kotlinx.coroutines.JobNode A[D('node' kotlinx.coroutines.JobNode)]), (r5 I:kotlinx.coroutines.JobSupport) type: VIRTUAL call: kotlinx.coroutines.JobNode.setJob(kotlinx.coroutines.JobSupport):void A[MD:(kotlinx.coroutines.JobSupport):void (m)] (LINE:519)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0047|RETURN\l|0x0047: RETURN  (r0 I:kotlinx.coroutines.JobNode A[D('node' kotlinx.coroutines.JobNode)])  (LINE:520)\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0016|0x0016: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('handler' kotlin.jvm.functions.Function1)]) kotlinx.coroutines.JobNode  (LINE:515)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0018|0x0018: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x001e \l}"];
Node_41 [shape=record,label="{41\:\ 0x001a|0x001a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('handler' kotlin.jvm.functions.Function1)]) \l0x001b: CHECK_CAST (r1 I:kotlinx.coroutines.JobNode) = (kotlinx.coroutines.JobNode) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0020|0x0020: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0023  (LINE:515)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0023|0x0023: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0024: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1479)\l0x0025: INVOKE  (r3 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:516)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0029|0x0029: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0039 \l}"];
Node_48 [shape=record,label="{48\:\ 0x002b|0x002b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1479)\l0x002c: INSTANCE_OF  (r4 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.JobNode)]) kotlinx.coroutines.JobCancellingNode  (LINE:516)\l0x002e: ARITH  (r3 I:??[int, boolean] A[D('$i$a$\-assert\-JobSupport$makeNode$node$1$1' int)]) = (r4 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0030|0x0030: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0033 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0033|0x0033: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0035: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x0038|0x0038: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0039|0x0039: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.JobNode)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x003a|0x003a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' kotlinx.coroutines.JobNode)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x0043  (LINE:515)\l}"];
Node_55 [shape=record,label="{55\:\ 0x003c|0x003c: NEW_INSTANCE  (r0 I:kotlinx.coroutines.InvokeOnCompletion) =  kotlinx.coroutines.InvokeOnCompletion  (LINE:517)\l0x003e: INVOKE  \l  (r0 I:kotlinx.coroutines.InvokeOnCompletion)\l  (r6 I:kotlin.jvm.functions.Function1 A[D('handler' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlinx.coroutines.InvokeOnCompletion.\<init\>(kotlin.jvm.functions.Function1):void A[MD:(kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):void (m)]\l0x0041: CHECK_CAST (r0 I:kotlinx.coroutines.JobNode) = (kotlinx.coroutines.JobNode) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.JobNode kotlinx.coroutines.JobSupport.makeNode((r5 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\> A[D('handler' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('onCancelling' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:36:0x000a \-\> B:38:0x0013, CROSS_EDGE: B:34:0x0005 \-\> B:36:0x000a, CROSS_EDGE: B:52:0x0038 \-\> B:30:?, CROSS_EDGE: B:55:0x003c \-\> B:56:0x0043, CROSS_EDGE: B:54:0x003a \-\> B:56:0x0043, CROSS_EDGE: B:47:0x0029 \-\> B:53:0x0039, CROSS_EDGE: B:44:0x0020 \-\> B:54:0x003a, CROSS_EDGE: B:42:0x001e \-\> B:44:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002c\-0x002e: r3 '$i$a$\-assert\-JobSupport$makeNode$node$1$1' I\l  0x0024\-0x003a: r0 'it' Lkotlinx\/coroutines\/JobNode;\l  0x0025\-0x003a: r2 '$i$a$\-also\-JobSupport$makeNode$node$1' I\l  0x0044\-0x0047: r0 'node' Lkotlinx\/coroutines\/JobNode;\l  \-1 \-0x0047: r6 'handler' Lkotlin\/jvm\/functions\/Function1;\l  \-1 \-0x0047: r7 'onCancelling' Z\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Lkotlin\/Unit;\>;Z)Lkotlinx\/coroutines\/JobNode;\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_39;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_30;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_44;
Node_44 -> Node_46;
Node_44 -> Node_54[style=dashed];
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_53;
Node_48 -> Node_49;
Node_49 -> Node_51;
Node_49 -> Node_53[style=dashed];
Node_51 -> Node_52;
Node_52 -> Node_30;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_56;
Node_42 -> Node_44;
}

