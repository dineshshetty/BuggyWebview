digraph "CFG forkotlinx.coroutines.JobSupport.removeNode$kotlinx_coroutines_core(Lkotlinx\/coroutines\/JobNode;)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY])  (LINE:590)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|LOOP_START\lLOOP:0: B:25:0x0002\-\>B:30:0x001a\l|0x0003: INVOKE  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.JobSupport A[D('this_$iv' kotlinx.coroutines.JobSupport)]) type: VIRTUAL call: kotlinx.coroutines.JobSupport.getState$kotlinx_coroutines_core():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:1576)\l0x0007: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.JobNode  (LINE:592)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000b|0x000b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x001f \l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|0x000d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' java.lang.Object)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('node' kotlinx.coroutines.JobNode)])  \-\> B:29:0x0010  (LINE:593)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|0x0010: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.JobSupport._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:595)\l0x0012: INVOKE  (r5 I:kotlinx.coroutines.Empty) =  type: STATIC call: kotlinx.coroutines.JobSupportKt.access$getEMPTY_ACTIVE$p():kotlinx.coroutines.Empty A[MD:():kotlinx.coroutines.Empty (m)]\l0x0016: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r6 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r5 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x001a|LOOP_END\lLOOP:0: B:25:0x0002\-\>B:30:0x001a\l|0x001a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0002 \l}"];
Node_40 [shape=record,label="{40\:\ 0x001c|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|RETURN\l|0x001c: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x000f|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x000f|RETURN\l|0x000f: RETURN   \l}"];
Node_41 [shape=record,label="{41\:\ 0x001f|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|0x001f: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.Incomplete  (LINE:597)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|0x0021: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0030 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0023|0x0023: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:599)\l0x0024: CHECK_CAST (r4 I:kotlinx.coroutines.Incomplete) = (kotlinx.coroutines.Incomplete) (r4 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r4 I:kotlinx.coroutines.NodeList) = (r4 I:kotlinx.coroutines.Incomplete) type: INTERFACE call: kotlinx.coroutines.Incomplete.getList():kotlinx.coroutines.NodeList A[MD:():kotlinx.coroutines.NodeList (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|0x002a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:? \l}"];
Node_37 [shape=record,label="{37\:\ 0x002c|0x002c: INVOKE  (r7 I:kotlinx.coroutines.JobNode A[D('node' kotlinx.coroutines.JobNode)]) type: VIRTUAL call: kotlinx.coroutines.JobNode.remove():boolean A[MD:():boolean (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x002f|RETURN\lORIG_RETURN\l|0x002f: RETURN    (LINE:600)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x002f: RETURN   A[SYNTHETIC] (LINE:600)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0030|RETURN\l|0x0030: RETURN    (LINE:602)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.JobSupport.removeNode$kotlinx_coroutines_core((r6 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r7 I:kotlinx.coroutines.JobNode A[D('node' kotlinx.coroutines.JobNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x001c \-\> B:23:?, BACK_EDGE: B:30:0x001a \-\> B:25:0x0002, CROSS_EDGE: B:38:0x002f \-\> B:23:?, CROSS_EDGE: B:36:0x002a \-\> B:38:0x002f, CROSS_EDGE: B:39:0x0030 \-\> B:23:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x001e: r2 'state' Ljava\/lang\/Object;\l  0x0008\-0x001e: r3 '$i$a$\-loopOnState\-JobSupport$removeNode$1' I\l  0x0001\-0x0030: r0 'this_$iv' Lkotlinx\/coroutines\/JobSupport;\l  0x0002\-0x0030: r1 '$i$f$loopOnState' I\l  0x001f\-0x0030: r2 'state' Ljava\/lang\/Object;\l  0x001f\-0x0030: r3 '$i$a$\-loopOnState\-JobSupport$removeNode$1' I\l  \-1 \-0x0030: r7 'node' Lkotlinx\/coroutines\/JobNode;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_41;
Node_27 -> Node_29;
Node_27 -> Node_42[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_25;
Node_30 -> Node_40[style=dashed];
Node_40 -> Node_31;
Node_31 -> Node_23;
Node_42 -> Node_28;
Node_28 -> Node_23;
Node_41 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_39;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_43;
Node_37 -> Node_38;
Node_38 -> Node_23;
Node_43 -> Node_23;
Node_39 -> Node_23;
}

