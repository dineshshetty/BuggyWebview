digraph "CFG forkotlinx.coroutines.JobSupport.invokeOnCompletion(Lkotlin\/jvm\/functions\/Function1;)Lkotlinx\/coroutines\/DisposableHandle;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:449)\l0x0001: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0002: INVOKE  (r0 I:kotlinx.coroutines.DisposableHandle) = \l  (r2 I:kotlinx.coroutines.JobSupport)\l  (r0 I:boolean)\l  (r1 I:boolean)\l  (r3 I:kotlin.jvm.functions.Function1 A[D('handler' kotlin.jvm.functions.Function1)])\l type: VIRTUAL call: kotlinx.coroutines.JobSupport.invokeOnCompletion(boolean, boolean, kotlin.jvm.functions.Function1):kotlinx.coroutines.DisposableHandle A[MD:(boolean, boolean, kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):kotlinx.coroutines.DisposableHandle (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:kotlinx.coroutines.DisposableHandle) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.DisposableHandle kotlinx.coroutines.JobSupport.invokeOnCompletion((r2 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\> A[D('handler' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0006: r3 'handler' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Lkotlin\/Unit;\>;)Lkotlinx\/coroutines\/DisposableHandle;\lMETHOD_OVERRIDE: [kotlinx.coroutines.Job.invokeOnCompletion(kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):kotlinx.coroutines.DisposableHandle]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

