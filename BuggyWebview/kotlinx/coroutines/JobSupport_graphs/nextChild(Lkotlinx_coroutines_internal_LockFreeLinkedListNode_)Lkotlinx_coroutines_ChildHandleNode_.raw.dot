digraph "CFG forkotlinx.coroutines.JobSupport.nextChild(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;)Lkotlinx\/coroutines\/ChildHandleNode;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$nextChild' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:940)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0001|LOOP_START\lLOOP:0: B:27:0x0001\-\>B:29:0x0007\l|0x0001: INVOKE  (r1 I:boolean) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved():boolean A[MD:():boolean (m)] (LINE:941)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x000c \l}"];
Node_29 [shape=record,label="{29\:\ 0x0007|LOOP_END\lLOOP:0: B:27:0x0001\-\>B:29:0x0007\l|0x0007: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x000c|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x000c|LOOP_START\lLOOP:1: B:30:0x000c\-\>B:45:0x000c\l|0x000d: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getNextNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:943)\l0x0011: INVOKE  (r1 I:boolean) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved():boolean A[MD:():boolean (m)] (LINE:944)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0018 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0018|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|0x0018: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.ChildHandleNode  (LINE:945)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|0x001a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0020 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0020|0x0020: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.NodeList  (LINE:946)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0022|0x0022: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x000c \l}"];
Node_43 [shape=record,label="{43\:\ 0x0024|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0024|RETURN\l|0x0024: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: RETURN  (r1 I:kotlinx.coroutines.ChildHandleNode) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x000c|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x000c|LOOP_END\lSYNTHETIC\lLOOP:1: B:30:0x000c\-\>B:45:0x000c\l}"];
Node_44 [shape=record,label="{44\:\ 0x001c|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x001c|0x001c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('cur' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l0x001d: CHECK_CAST (r1 I:kotlinx.coroutines.ChildHandleNode) = (kotlinx.coroutines.ChildHandleNode) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:kotlinx.coroutines.ChildHandleNode) \l}"];
Node_46 [shape=record,label="{46\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.ChildHandleNode kotlinx.coroutines.JobSupport.nextChild((r2 'this' I:kotlinx.coroutines.JobSupport A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('$this$nextChild' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0007 \-\> B:27:0x0001, BACK_EDGE: B:38:0x0022 \-\> B:30:0x000c, CROSS_EDGE: B:40:0x0025 \-\> B:25:?, BACK_EDGE: B:31:0x0015 \-\> B:30:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0025: r0 'cur' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0025: r3 '$this$nextChild' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_41;
Node_29 -> Node_27;
Node_41 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_42;
Node_31 -> Node_46[style=dashed];
Node_42 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_37;
Node_34 -> Node_44[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_43[style=dashed];
Node_38 -> Node_47;
Node_43 -> Node_39;
Node_39 -> Node_25;
Node_47 -> Node_45;
Node_45 -> Node_30;
Node_44 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_25;
Node_46 -> Node_45;
}

