digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.limited(I)Lkotlinx\/coroutines\/CoroutineDispatcher;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:92)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r4 I:??[int, byte, short, char] A[D('parallelism' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:23:0x0006 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0040 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0009|0x0009: IGET  (r2 I:int) = (r3 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher) kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.corePoolSize int  (LINE:93)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000b|0x000b: IF  (r4 I:??[int, byte, short, char] A[D('parallelism' int)]) \> (r2 I:??[int, byte, short, char])  \-\> B:28:0x000e \l}"];
Node_28 [shape=record,label="{28\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x001a \l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:kotlinx.coroutines.scheduling.LimitingDispatcher) =  kotlinx.coroutines.scheduling.LimitingDispatcher  (LINE:94)\l0x0013: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: INVOKE  \l  (r0 I:kotlinx.coroutines.scheduling.LimitingDispatcher)\l  (r3 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher)\l  (r4 I:int A[D('parallelism' int)])\l  (r2 I:java.lang.String)\l  (r1 I:int)\l type: DIRECT call: kotlinx.coroutines.scheduling.LimitingDispatcher.\<init\>(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher, int, java.lang.String, int):void A[MD:(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher, int, java.lang.String, int):void (m)]\l0x0017: CHECK_CAST (r0 I:kotlinx.coroutines.CoroutineDispatcher) = (kotlinx.coroutines.CoroutineDispatcher) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0019|RETURN\l|0x0019: RETURN  (r0 I:kotlinx.coroutines.CoroutineDispatcher) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l0x001b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:93)\l0x001d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0020: CONST_STR  (r2 I:java.lang.String) =  \"Expected parallelism level lesser than core pool size (\" \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0025: IGET  (r2 I:int) = (r3 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher) kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.corePoolSize int \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x002a: CONST_STR  (r2 I:java.lang.String) =  \"), but have \" \l0x002c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002f: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('parallelism' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0032: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-ExperimentalCoroutineDispatcher$limited$2' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0036: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0038: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003c: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x003f|0x003f: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0040|0x0040: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l0x0041: INVOKE  (r1 I:java.lang.Integer) = (r4 I:int A[D('parallelism' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:92)\l0x0045: CONST_STR  (r2 I:java.lang.String) =  \"Expected positive parallelism level, but have \" \l0x0047: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-ExperimentalCoroutineDispatcher$limited$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x004b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x004d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0051: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0054|0x0054: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.CoroutineDispatcher kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.limited((r3 'this' I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('parallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x003f \-\> B:19:?, CROSS_EDGE: B:26:0x000b \-\> B:29:0x000f, CROSS_EDGE: B:35:0x0054 \-\> B:19:?, CROSS_EDGE: B:23:0x0006 \-\> B:24:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x0036: r0 '$i$a$\-require\-ExperimentalCoroutineDispatcher$limited$2' I\l  0x0041\-0x004b: r0 '$i$a$\-require\-ExperimentalCoroutineDispatcher$limited$1' I\l  \-1 \-0x0054: r4 'parallelism' I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_34;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_29[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_23 -> Node_24;
}

