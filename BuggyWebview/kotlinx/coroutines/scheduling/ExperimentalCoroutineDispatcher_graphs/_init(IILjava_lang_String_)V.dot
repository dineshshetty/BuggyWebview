digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>(IILjava\/lang\/String;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|this(r7, r8, kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS, r9)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>((r6v0 'this' kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r7v0 'corePoolSize' int A[D('corePoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'maxPoolSize' int A[D('maxPoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'schedulerName' java.lang.String A[D('schedulerName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

