digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>(IIJLjava\/lang\/String;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: ARITH  (r12 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char])  (LINE:24)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: CONST_STR  (r11 I:java.lang.String) =  \"CoroutineScheduler\"  (LINE:28)\l0x0006: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x000a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: MOVE  (r3 I:??[long, double]) = (r9 I:??[long, double]) \l0x000d: INVOKE  \l  (r0 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:long)\l  (r5 I:java.lang.String)\l type: DIRECT call: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>(int, int, long, java.lang.String):void A[MD:(int, int, long, java.lang.String):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|RETURN\l|0x0010: RETURN    (LINE:109)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|0x0008: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY])  (LINE:24)\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>((r6 'this' I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:14:0x0009\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

