digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.blocking(I)Lkotlinx\/coroutines\/CoroutineDispatcher;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:80)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|0x0001: IF  (r4 I:??[int, byte, short, char] A[D('parallelism' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:16:0x0005 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|0x0003: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0011 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: NEW_INSTANCE  (r1 I:kotlinx.coroutines.scheduling.LimitingDispatcher) =  kotlinx.coroutines.scheduling.LimitingDispatcher  (LINE:81)\l0x000a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  \l  (r1 I:kotlinx.coroutines.scheduling.LimitingDispatcher)\l  (r3 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher)\l  (r4 I:int A[D('parallelism' int)])\l  (r2 I:java.lang.String)\l  (r0 I:int)\l type: DIRECT call: kotlinx.coroutines.scheduling.LimitingDispatcher.\<init\>(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher, int, java.lang.String, int):void A[MD:(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher, int, java.lang.String, int):void (m)]\l0x000e: CHECK_CAST (r1 I:kotlinx.coroutines.CoroutineDispatcher) = (kotlinx.coroutines.CoroutineDispatcher) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|0x0010: RETURN  (r1 I:kotlinx.coroutines.CoroutineDispatcher) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l0x0012: INVOKE  (r1 I:java.lang.Integer) = (r4 I:int A[D('parallelism' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:80)\l0x0016: CONST_STR  (r2 I:java.lang.String) =  \"Expected positive parallelism level, but have \" \l0x0018: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-ExperimentalCoroutineDispatcher$blocking$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x001c: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x001e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0022: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|0x0025: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.CoroutineDispatcher kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.blocking((r3 'this' I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('parallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0025 \-\> B:12:?, CROSS_EDGE: B:16:0x0005 \-\> B:17:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x001c: r0 '$i$a$\-require\-ExperimentalCoroutineDispatcher$blocking$1' I\l  \-1 \-0x0025: r4 'parallelism' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

