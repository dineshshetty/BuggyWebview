digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core(Ljava\/lang\/Runnable;Lkotlinx\/coroutines\/scheduling\/TaskContext;Z)V" {
subgraph cluster_Region_774600285 {
label = "R(1:(1:2))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1273503196 {
label = "Try: R(1:2) catches: R(1:7)";
node [shape=record,color=blue];
subgraph cluster_Region_927570972 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{RejectedExecutionException \-\> 0x0007, blocks: (B:12:0x0001), top: B:17:0x0001 \}\lCatch: RejectedExecutionException \-\> 0x0007\l|r3.coroutineScheduler.dispatch(r4, r5, r6)     \/\/ Catch: java.util.concurrent.RejectedExecutionException \-\> L7\l}"];
}
subgraph cluster_Region_355786315 {
label = "R(1:7) | ExcHandler: RejectedExecutionException \-\> 0x0007\l";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0008|kotlinx.coroutines.DefaultExecutor.INSTANCE.enqueue(r3.coroutineScheduler.createTask(r4, r5))\l}"];
}
}
}
subgraph cluster_Region_355786315 {
label = "R(1:7) | ExcHandler: RejectedExecutionException \-\> 0x0007\l";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0008|kotlinx.coroutines.DefaultExecutor.INSTANCE.enqueue(r3.coroutineScheduler.createTask(r4, r5))\l}"];
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0007|ExcHandler: RejectedExecutionException \-\> 0x0007\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0015|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core((r3v0 'this' kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r4v0 'block' java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'context' kotlinx.coroutines.scheduling.TaskContext A[D('context' kotlinx.coroutines.scheduling.TaskContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'tailDispatch' boolean A[D('tailDispatch' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0008 \-\> B:16:0x0015, CROSS_EDGE: B:17:0x0001 \-\> B:14:0x0007\lINLINE_NOT_NEEDED\lTryCatch #0 \{RejectedExecutionException \-\> 0x0007, blocks: (B:12:0x0001), top: B:17:0x0001 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_12 -> Node_18;
Node_12 -> Node_19;
Node_15 -> Node_16;
Node_15 -> Node_16;
Node_10 -> Node_17;
Node_17 -> Node_12;
Node_17 -> Node_14;
Node_18 -> Node_14;
Node_19 -> Node_11;
Node_14 -> Node_15;
Node_16 -> Node_11;
}

