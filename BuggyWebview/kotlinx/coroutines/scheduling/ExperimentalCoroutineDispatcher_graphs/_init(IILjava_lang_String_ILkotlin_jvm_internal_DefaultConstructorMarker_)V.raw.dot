digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>(IILjava\/lang\/String;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:30)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|0x0002: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0006 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: SGET  (r1 I:int) =  kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE int  (LINE:31)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:30)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|0x0008: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000c \l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|0x000a: SGET  (r2 I:int) =  kotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE int  (LINE:32)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|0x000c: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:30)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0012 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|0x0010: CONST_STR  (r3 I:java.lang.String) =  \"DefaultDispatcher\"  (LINE:33)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|0x0012: INVOKE  (r0 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher), (r1 I:int), (r2 I:int), (r3 I:java.lang.String) type: DIRECT call: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>(int, int, java.lang.String):void A[MD:(int, int, java.lang.String):void (m)] (LINE:30)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|RETURN\l|0x0015: RETURN    (LINE:34)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>((r0 'this' I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:22:0x000e \-\> B:24:0x0012, CROSS_EDGE: B:19:0x0008 \-\> B:21:0x000c, CROSS_EDGE: B:16:0x0002 \-\> B:18:0x0006\lINLINE_NOT_NEEDED\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [30=4]\}\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

