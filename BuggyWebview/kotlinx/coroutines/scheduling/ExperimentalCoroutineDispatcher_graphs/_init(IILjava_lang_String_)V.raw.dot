digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>(IILjava\/lang\/String;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: SGET  (r3 I:long) =  kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS long  (LINE:34)\l0x0002: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0003: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('corePoolSize' int)]) \l0x0004: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxPoolSize' int)]) \l0x0005: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('schedulerName' java.lang.String)]) \l0x0006: INVOKE  \l  (r0 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher)\l  (r1 I:int)\l  (r2 I:int)\l  (r3 I:long)\l  (r5 I:java.lang.String)\l type: DIRECT call: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>(int, int, long, java.lang.String):void A[MD:(int, int, long, java.lang.String):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|0x0009: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.\<init\>((r6 'this' I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('corePoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('maxPoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[D('schedulerName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0009: r7 'corePoolSize' I\l  \-1 \-0x0009: r8 'maxPoolSize' I\l  \-1 \-0x0009: r9 'schedulerName' Ljava\/lang\/String;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

