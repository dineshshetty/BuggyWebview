digraph "CFG forkotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.getExecutor()Ljava\/util\/concurrent\/Executor;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r1 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher) kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.coroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:43)\l0x0002: CHECK_CAST (r0 I:java.util.concurrent.Executor) = (java.util.concurrent.Executor) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:java.util.concurrent.Executor) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.concurrent.Executor kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.getExecutor((r1 'this' I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlinx.coroutines.ExecutorCoroutineDispatcher.getExecutor():java.util.concurrent.Executor]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

