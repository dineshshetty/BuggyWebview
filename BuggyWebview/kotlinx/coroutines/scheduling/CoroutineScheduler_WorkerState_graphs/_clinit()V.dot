digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED = new kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState()\lkotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING = new kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState()\lkotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.PARKING = new kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState()\lkotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.DORMANT = new kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState()\lkotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED = new kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState()\lkotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.$VALUES = $values()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.\<clinit\>()  | DONT_GENERATE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

