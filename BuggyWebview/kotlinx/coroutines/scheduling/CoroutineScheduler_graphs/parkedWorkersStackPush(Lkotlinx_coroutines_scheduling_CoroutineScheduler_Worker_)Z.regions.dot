digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;)Z" {
subgraph cluster_Region_419329331 {
label = "R(1:(2:(1:3)|(2:(3:6|(1:(1:14))|16)|19))) | DECL_VAR: long top, long updVersion, int updIndex\l";
node [shape=record,color=blue];
subgraph cluster_Region_1599093838 {
label = "R(2:(1:3)|(2:(3:6|(1:(1:14))|16)|19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_675664981 {
label = "IF [B:25:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0007|if (r20.getNextParkedWorker() != kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK) goto L3\l}"];
subgraph cluster_Region_362203846 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0009|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_2125099690 {
label = "R(2:(3:6|(1:(1:14))|16)|19)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_82234122 {
label = "LOOP:0: (3:6|(1:(1:14))|16)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0055|LOOP_END\lLOOP:0: B:28:0x000d\-\>B:39:0x0055\l|if (kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack$FU.compareAndSet(r19, r9, r13 \| r15) == false) goto L6\l}"];
subgraph cluster_Region_156070266 {
label = "R(3:6|(1:(1:14))|16)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x000d|LOOP_START\lLOOP:0: B:28:0x000d\-\>B:39:0x0055\l|long r9 = r19.parkedWorkersStack\lint int r12 = (int) (2097151 & r9)\llong r13 = (kotlinx.coroutines.scheduling.CoroutineScheduler.PARKED_VERSION_INC + r9) & kotlinx.coroutines.scheduling.CoroutineScheduler.PARKED_VERSION_MASK\lint r15 = r20.getIndexInArray()\l}"];
subgraph cluster_IfRegion_541492093 {
label = "IF [B:29:0x0029] THEN: R(1:(1:14)) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0029|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L8\l}"];
subgraph cluster_Region_648485980 {
label = "R(1:(1:14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_932629589 {
label = "IF [B:34:0x0031] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0031|PHI: r3 \l  PHI: (r3v11 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r15 != 0 ? 1 : 0) == 0) goto L12\l}"];
subgraph cluster_Region_96740020 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0039|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_38 [shape=record,label="{38\:\ 0x003a|r20.setNextParkedWorker(r19.workers.get(r12))\l}"];
}
}
Node_40 [shape=record,label="{40\:\ 0x0057|RETURN\l|return true\l}"];
}
}
}
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0000}"];
Node_23 [shape=record,color=red,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x000a}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x002b}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x002c}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x002e}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x0034|SYNTHETIC\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0034}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0030}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0057|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush((r19v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r20v0 'worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0039 \-\> B:23:?, CROSS_EDGE: B:40:0x0057 \-\> B:23:?, BACK_EDGE: B:39:0x0055 \-\> B:28:0x000d, CROSS_EDGE: B:33:0x0030 \-\> B:34:0x0031, CROSS_EDGE: B:29:0x0029 \-\> B:38:0x003a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_22;Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_26 -> Node_23;
Node_39 -> Node_28;
Node_39 -> Node_43[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_38[style=dashed];
Node_34 -> Node_38[style=dashed];
Node_34 -> Node_42;
Node_37 -> Node_23;
Node_38 -> Node_39;
Node_40 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_27 -> Node_28;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_42 -> Node_36;
Node_36 -> Node_37;
Node_33 -> Node_34;
Node_43 -> Node_40;
}

