digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.tryAcquireCpuPermit()Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY])  (LINE:287)\l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0003|LOOP_START\lLOOP:0: B:17:0x0003\-\>B:22:0x0028\l|0x0004: IGET  (r9 I:long) = \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('$this$loop$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.controlState long  (LINE:993)\l0x0006: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY])  (LINE:288)\l0x0008: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: CONST  (r5 I:??[long, double]) = (9223367638808264704(0x7ffffc0000000000, double:NaN) ??[long, double])  (LINE:994)\l0x000e: ARITH  (r5 I:long) = (r5 I:long) & (r9 I:long A[D('state' long)]) \l0x000f: CONST  (r7 I:??[int, float, short, byte, char]) = (42 ??[int, float, short, byte, char]) \l0x0011: ARITH  (r5 I:long) = (r5 I:long) \>\> (r7 I:long) \l0x0012: CAST (r3 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (int) (r5 I:long) \l0x0013: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = \l  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l  (LINE:288)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('available' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0018  (LINE:289)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|0x0018: CONST  (r3 I:??[long, double]) = (4398046511104(0x40000000000, double:2.1729236899484E\-311) ??[long, double])  (LINE:290)\l0x001d: ARITH  (r13 I:long) = (r9 I:long A[D('state' long)]) \- (r3 I:long) \l0x001f: SGET  (r3 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:291)\l0x0021: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY]) \l0x0022: MOVE  (r5 I:??[long, double]) = (r9 I:??[long, double] A[D('state' long)]) \l0x0023: MOVE  (r7 I:??[long, double]) = (r13 I:??[long, double] A[D('update' long)]) \l0x0024: INVOKE  (r3 I:boolean) = (r3 I:java.util.concurrent.atomic.AtomicLongFieldUpdater), (r4 I:java.lang.Object), (r5 I:long), (r7 I:long) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(java.lang.Object, long, long):boolean A[MD:(T, long, long):boolean (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0028|LOOP_END\lLOOP:0: B:17:0x0003\-\>B:22:0x0028\l|0x0028: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0003 \l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002a|RETURN\l|0x002a: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x002b: RETURN  (r3 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|RETURN\l|0x0016: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: RETURN  (r3 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.tryAcquireCpuPermit((r15 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x002b \-\> B:15:?, BACK_EDGE: B:22:0x0028 \-\> B:17:0x0003\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0013: r3 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0009\-0x0013: r4 '$i$f$availableCpuPermits' I\l  0x0006\-0x002d: r9 'state' J\l  0x0007\-0x002d: r11 '$i$a$\-loop\-CoroutineScheduler$tryAcquireCpuPermit$1' I\l  0x0014\-0x002d: r12 'available' I\l  0x001f\-0x002d: r13 'update' J\l  0x0001\-0x002d: r0 '$i$f$tryAcquireCpuPermit' I\l  0x0002\-0x002d: r1 '$this$loop$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0003\-0x002d: r2 '$i$f$loop' I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_26[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_17;
Node_22 -> Node_27[style=dashed];
Node_27 -> Node_23;
Node_23 -> Node_15;
Node_26 -> Node_19;
Node_19 -> Node_15;
}

