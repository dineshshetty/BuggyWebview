digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.\<init\>(IIJLjava\/lang\/String;)V" {
subgraph cluster_Region_368669862 {
label = "R(2:1|(2:(2:28|29)|(1:(2:(2:25|26)|(1:(2:(2:22|23)|(1:(2:(2:20|21)|(1:17)))))))))";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0000|r5.corePoolSize = r6\lr5.maxPoolSize = r7\lr5.idleWorkerKeepAliveNs = r8\lr5.schedulerName = r10\l}"];
subgraph cluster_Region_33269251 {
label = "R(2:(2:28|29)|(1:(2:(2:25|26)|(1:(2:(2:22|23)|(1:(2:(2:20|21)|(1:17))))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_912502505 {
label = "IF [B:38:0x0013] THEN: R(2:28|29) ELSE: null";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0013|PHI: r2 \l  PHI: (r2v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r6 \>= 1) == false) goto L28\l}"];
subgraph cluster_Region_1907311028 {
label = "R(2:28|29)";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x00b7}"];
Node_63 [shape=record,label="{63\:\ 0x00d7|throw new java.lang.IllegalArgumentException((\"Core pool size \" + r6 + \" should be at least 1\").toString())\l}"];
}
}
subgraph cluster_Region_791500643 {
label = "R(1:(2:(2:25|26)|(1:(2:(2:22|23)|(1:(2:(2:20|21)|(1:17)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_1941583675 {
label = "R(2:(2:25|26)|(1:(2:(2:22|23)|(1:(2:(2:20|21)|(1:17))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1485167427 {
label = "IF [B:43:0x001c] THEN: R(2:25|26) ELSE: null";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x001c|if ((r7 \>= r6) == false) goto L25\l}"];
subgraph cluster_Region_1395426054 {
label = "R(2:25|26)";
node [shape=record,color=blue];
Node_60 [shape=record,label="{60\:\ 0x0095}"];
Node_61 [shape=record,label="{61\:\ 0x00b6|throw new java.lang.IllegalArgumentException((\"Max pool size \" + r7 + \" should be greater than or equals to core pool size \" + r6).toString())\l}"];
}
}
subgraph cluster_Region_377438287 {
label = "R(1:(2:(2:22|23)|(1:(2:(2:20|21)|(1:17)))))";
node [shape=record,color=blue];
subgraph cluster_Region_878620244 {
label = "R(2:(2:22|23)|(1:(2:(2:20|21)|(1:17))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1123497055 {
label = "IF [B:48:0x0026] THEN: R(2:22|23) ELSE: null";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0026|PHI: r2 \l  PHI: (r2v9 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r7 \<= 2097150) == false) goto L22\l}"];
subgraph cluster_Region_1970580404 {
label = "R(2:22|23)";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0076}"];
Node_59 [shape=record,label="{59\:\ 0x0094|throw new java.lang.IllegalArgumentException((\"Max pool size \" + r7 + \" should not exceed maximal supported number of threads 2097150\").toString())\l}"];
}
}
subgraph cluster_Region_434495597 {
label = "R(1:(2:(2:20|21)|(1:17)))";
node [shape=record,color=blue];
subgraph cluster_Region_1476972811 {
label = "R(2:(2:20|21)|(1:17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_589710233 {
label = "IF [B:53:0x0030] THEN: R(2:20|21) ELSE: null";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x0030|PHI: r1 \l  PHI: (r1v7 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r8 \> 0) == false) goto L20\l}"];
subgraph cluster_Region_1944020290 {
label = "R(2:20|21)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x0055}"];
Node_57 [shape=record,label="{57\:\ 0x0075|throw new java.lang.IllegalArgumentException((\"Idle worker keep alive time \" + r8 + \" must be positive\").toString())\l}"];
}
}
subgraph cluster_Region_1167005148 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x0033|r5.globalCpuQueue = new kotlinx.coroutines.scheduling.Tasks()\lr5.globalBlockingQueue = new kotlinx.coroutines.scheduling.Tasks()\lr5.parkedWorkersStack = 0L\lr5.workers = new kotlinx.coroutines.internal.ResizableAtomicArray\<\>(r6 + 1)\lr5.controlState = r6 \<\< 42\lr5._isTerminated = 0\l}"];
}
}
}
}
}
}
}
}
}
Node_32 [shape=record,color=red,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x000e}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0010}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0015}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0017}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x001a|PHI: r2 \l  PHI: (r2v5 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x001e}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0021}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0023}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x0028}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x002c}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x002f}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x0054}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x0025}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0019}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0012}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.CoroutineScheduler.\<init\>((r5v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r6v0 'corePoolSize' int A[D('corePoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'maxPoolSize' int A[D('maxPoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'idleWorkerKeepAliveNs' long A[D('idleWorkerKeepAliveNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'schedulerName' java.lang.String A[D('schedulerName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:57:0x0075 \-\> B:33:?, CROSS_EDGE: B:50:0x002c \-\> B:53:0x0030, CROSS_EDGE: B:59:0x0094 \-\> B:33:?, CROSS_EDGE: B:47:0x0025 \-\> B:48:0x0026, CROSS_EDGE: B:61:0x00b6 \-\> B:33:?, CROSS_EDGE: B:41:0x0019 \-\> B:42:0x001a, CROSS_EDGE: B:63:0x00d7 \-\> B:33:?, CROSS_EDGE: B:37:0x0012 \-\> B:38:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_32;Node_34 -> Node_35;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_33;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_33;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_33;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_33;
Node_54 -> Node_55;
Node_32 -> Node_34;
Node_35 -> Node_36;
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_39 -> Node_40;
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_43;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_49 -> Node_50;
Node_50 -> Node_52;
Node_50 -> Node_53;
Node_52 -> Node_53;
Node_55 -> Node_33;
Node_47 -> Node_48;
Node_41 -> Node_42;
Node_37 -> Node_38;
}

