digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker()Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Thread) =  type: STATIC call: java.lang.Thread.currentThread():java.lang.Thread A[MD:():java.lang.Thread (c)] (LINE:508)\l0x0004: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) kotlinx.coroutines.scheduling.CoroutineScheduler$Worker \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x000c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0010 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|0x0010: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0011: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:986)\l0x0012: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])  (LINE:508)\l0x0013: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: INVOKE  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) = \l  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l type: STATIC call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):kotlinx.coroutines.scheduling.CoroutineScheduler A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):kotlinx.coroutines.scheduling.CoroutineScheduler (m)] (LINE:1013)\l0x0018: INVOKE  (r1 I:boolean A[D('it' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) = \l  (r4 I:java.lang.Object A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r6 I:java.lang.Object)\l type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:508)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|0x001c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:? \l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|0x001e: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: RETURN  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) A[SYNTHETIC]\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) A[SYNTHETIC]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker((r6 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001c \-\> B:25:0x001f, CROSS_EDGE: B:20:0x000d \-\> B:25:0x001f, CROSS_EDGE: B:19:0x000c \-\> B:20:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0018: r4 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  0x0014\-0x0018: r5 '$i$f$getScheduler' I\l  0x0011\-0x001c: r1 'it' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  0x0012\-0x001c: r3 '$i$a$\-takeIf\-CoroutineScheduler$currentWorker$1' I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_26[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_27 -> Node_15;
Node_26 -> Node_15;
Node_19 -> Node_20;
}

