digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.shutdown(J)V" {
subgraph cluster_Region_1067978157 {
label = "R(1:(1:(8:5|14|(2:14|(2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62)))(0)|35|(2:36|(2:(1:43)|(1:57)))|(1:45)|(2:48|(1:53))|54))) | DECL_VAR: int created, int i\l";
node [shape=record,color=blue];
subgraph cluster_Region_58623536 {
label = "R(1:(8:5|14|(2:14|(2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62)))(0)|35|(2:36|(2:(1:43)|(1:57)))|(1:45)|(2:48|(1:53))|54))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1461529944 {
label = "IF [B:78:0x000a] THEN: R(8:5|14|(2:14|(2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62)))(0)|35|(2:36|(2:(1:43)|(1:57)))|(1:45)|(2:48|(1:53))|54) ELSE: null";
node [shape=record,color=blue];
Node_78 [shape=record,label="{78\:\ 0x000a|if (kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated$FU.compareAndSet(r17, 0, 1) == true) goto L5\l}"];
subgraph cluster_Region_130870408 {
label = "R(8:5|14|(2:14|(2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62)))(0)|35|(2:36|(2:(1:43)|(1:57)))|(1:45)|(2:48|(1:53))|54)";
node [shape=record,color=blue];
Node_80 [shape=record,label="{80\:\ 0x000d|kotlinx.coroutines.scheduling.CoroutineScheduler$Worker kotlinx.coroutines.scheduling.CoroutineScheduler.Worker r4 = currentWorker()\lkotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\> java.lang.Object r5 = r17.workers\l}"];
subgraph cluster_SynchronizedRegion_417197223 {
label = "Synchronized:R(2:6|(1:10))";
node [shape=record,color=blue];
Node_81 [shape=record,label="{81\:\ 0x0014}"];
subgraph cluster_Region_1633559241 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_84 [shape=record,label="{84\:\ 0x001b|int r7 = (int) (r17.controlState & 2097151)\l}"];
}
}
subgraph cluster_IfRegion_2031482401 {
label = "IF [B:87:0x0024] THEN: R(2:14|(2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62))) ELSE: R(0)";
node [shape=record,color=blue];
Node_87 [shape=record,label="{87\:\ 0x0024|if (1 \<= r7) goto L14\l}"];
subgraph cluster_Region_2084695633 {
label = "R(2:14|(2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62)))";
node [shape=record,color=blue];
Node_88 [shape=record,label="{88\:\ 0x0026|int r5 = 1\l}"];
subgraph cluster_LoopRegion_1103445011 {
label = "LOOP:0: (2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62))";
node [shape=record,color=blue];
Node_106 [shape=record,label="{106\:\ 0x006d|LOOP_END\lLOOP:0: B:89:0x0027\-\>B:106:0x006d\l|if (r6 != r7) goto L15\l}"];
subgraph cluster_Region_1229422287 {
label = "R(2:15|(5:(1:19)|21|(1:(1:29))|31|32)(1:62))";
node [shape=record,color=blue];
Node_89 [shape=record,label="{89\:\ 0x0027|LOOP_START\lLOOP:0: B:89:0x0027\-\>B:106:0x006d\lPHI: r5 \l  PHI: (r5v17 int) = (r5v16 int), (r5v18 int) binds: [B:88:0x0026, B:106:0x006d] A[DONT_GENERATE, DONT_INLINE]\l|r6 = r5\lr5++\ljava.lang.Object kotlinx.coroutines.scheduling.CoroutineScheduler.Worker r7 = r17.workers.get(r6)\lkotlin.jvm.internal.Intrinsics.checkNotNull(r7)\lkotlinx.coroutines.scheduling.CoroutineScheduler$Worker kotlinx.coroutines.scheduling.CoroutineScheduler.Worker r7 = r7\l}"];
subgraph cluster_IfRegion_1748521419 {
label = "IF [B:90:0x0034] THEN: R(5:(1:19)|21|(1:(1:29))|31|32) ELSE: R(1:62)";
node [shape=record,color=blue];
Node_90 [shape=record,label="{90\:\ 0x0034|if (r7 != r4) goto L17\l}"];
subgraph cluster_Region_1051958218 {
label = "R(5:(1:19)|21|(1:(1:29))|31|32)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_948407426 {
label = "LOOP:1: (1:19)";
node [shape=record,color=blue];
Node_92 [shape=record,label="{92\:\ 0x003a|if (r7.isAlive() != false) goto L19\l}"];
subgraph cluster_Region_1299437395 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_93 [shape=record,label="{93\:\ 0x003c|LOOP_END\lLOOP:1: B:91:0x0036\-\>B:93:0x003c\l|java.util.concurrent.locks.LockSupport.unpark(r7)\lr7.join(r18)\l}"];
}
}
Node_94 [shape=record,label="{94\:\ 0x0048|kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState r10 = r7.state\l}"];
subgraph cluster_IfRegion_1507976361 {
label = "IF [B:95:0x0050] THEN: R(1:(1:29)) ELSE: null";
node [shape=record,color=blue];
Node_95 [shape=record,label="{95\:\ 0x0050|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L23\l}"];
subgraph cluster_Region_643522397 {
label = "R(1:(1:29))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1282419669 {
label = "IF [B:100:0x005a] THEN: R(1:29) ELSE: null";
node [shape=record,color=blue];
Node_100 [shape=record,label="{100\:\ 0x005a|PHI: r11 \l  PHI: (r11v5 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r10 == kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED ? 1 : 0) == 0) goto L27\l}"];
subgraph cluster_Region_1373831840 {
label = "R(1:29)";
node [shape=record,color=blue];
Node_103 [shape=record,label="{103\:\ 0x0062|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_104 [shape=record,label="{104\:\ 0x0063|r7.localQueue.offloadAllWorkTo(r17.globalBlockingQueue)\l}"];
Node_144 [shape=record,label="{144\:\ 0x006d|SYNTHETIC\l|continue\l}"];
}
subgraph cluster_Region_1873449513 {
label = "R(1:62)";
node [shape=record,color=blue];
Node_143 [shape=record,label="{143\:\ 0x006d|SYNTHETIC\l|continue\l}"];
}
}
}
}
}
subgraph cluster_Region_968423385 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_109 [shape=record,label="{109\:\ 0x0072|r17.globalBlockingQueue.close()\lr17.globalCpuQueue.close()\l}"];
subgraph cluster_LoopRegion_1164310020 {
label = "LOOP:2: (2:36|(2:(1:43)|(1:57)))";
node [shape=record,color=blue];
subgraph cluster_Region_1548003266 {
label = "R(2:36|(2:(1:43)|(1:57)))";
node [shape=record,color=blue];
Node_111 [shape=record,label="{111\:\ 0x007d|LOOP_START\lLOOP:2: B:111:0x007d\-\>B:134:0x00d4\l|kotlinx.coroutines.scheduling.Task r5 = r4 == null ? null : r4.findTask(true)\l}"];
subgraph cluster_Region_215620106 {
label = "R(2:(1:43)|(1:57))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_915032152 {
label = "IF [B:114:0x0085, B:116:0x008f, B:118:0x0099] THEN: R(1:43) ELSE: null";
node [shape=record,color=blue];
Node_114 [shape=record,label="{114\:\ 0x0085|PHI: r5 \l  PHI: (r5v4 'task' kotlinx.coroutines.scheduling.Task) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == null) goto L39\l}"];
Node_116 [shape=record,label="{116\:\ 0x008f|ADDED_TO_REGION\l|if ((r5 = r17.globalCpuQueue.removeFirstOrNull()) == null) goto L41\l}"];
Node_118 [shape=record,label="{118\:\ 0x0099|ADDED_TO_REGION\l|if ((r5 = r17.globalBlockingQueue.removeFirstOrNull()) == null) goto L43\l}"];
subgraph cluster_Region_937093730 {
label = "R(1:43)";
node [shape=record,color=blue];
Node_146 [shape=record,label="{146\:\ 0x009c|SYNTHETIC\lEDGE_INSN: B:146:0x009c\-\>B:119:0x009c ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_651324458 {
label = "R(1:57)";
node [shape=record,color=blue];
Node_134 [shape=record,label="{134\:\ 0x00d4|LOOP_END\lADDED_TO_REGION\lLOOP:2: B:111:0x007d\-\>B:134:0x00d4\lPHI: r5 \l  PHI: (r5v5 'task' kotlinx.coroutines.scheduling.Task) = (r5v4 'task' kotlinx.coroutines.scheduling.Task), (r5v8 'task' kotlinx.coroutines.scheduling.Task), (r5v11 'task' kotlinx.coroutines.scheduling.Task) binds: [B:148:0x00d4, B:147:0x00d4, B:149:0x00d4] A[DONT_GENERATE, DONT_INLINE]\l|runSafely(r5)\l}"];
}
}
}
}
subgraph cluster_IfRegion_1384733528 {
label = "IF [B:119:0x009c] THEN: R(1:45) ELSE: null";
node [shape=record,color=blue];
Node_119 [shape=record,label="{119\:\ 0x009c|EDGE_INSN: B:146:0x009c\-\>B:119:0x009c ?: BREAK  \l|if (r4 != null) goto L45\l}"];
subgraph cluster_Region_843142445 {
label = "R(1:45)";
node [shape=record,color=blue];
Node_121 [shape=record,label="{121\:\ 0x009f|r4.tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED)\l}"];
}
}
subgraph cluster_IfRegion_1235404159 {
label = "IF [B:123:0x00a8] THEN: R(2:48|(1:53)) ELSE: null";
node [shape=record,color=blue];
Node_123 [shape=record,label="{123\:\ 0x00a8|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L48\l}"];
subgraph cluster_Region_1881158191 {
label = "R(2:48|(1:53))";
node [shape=record,color=blue];
Node_124 [shape=record,label="{124\:\ 0x00aa|long long r10 = r17.controlState\l}"];
subgraph cluster_IfRegion_418233756 {
label = "IF [B:127:0x00c3] THEN: R(1:53) ELSE: null";
node [shape=record,color=blue];
Node_127 [shape=record,label="{127\:\ 0x00c3|PHI: r2 \l  PHI: (r2v3 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((((int) ((kotlinx.coroutines.scheduling.CoroutineScheduler.CPU_PERMITS_MASK & r10) \>\> 42)) == r17.corePoolSize) == false) goto L52\l}"];
subgraph cluster_Region_597548953 {
label = "R(1:53)";
node [shape=record,color=blue];
Node_130 [shape=record,label="{130\:\ 0x00cb|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_131 [shape=record,label="{131\:\ 0x00cc|r17.parkedWorkersStack = 0L\lr17.controlState = 0L\l}"];
}
}
}
}
Node_75 [shape=record,color=red,label="{75\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_77 [shape=record,color=red,label="{77\:\ 0x0000}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x000c}"];
Node_76 [shape=record,color=red,label="{76\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_82 [shape=record,color=red,label="{82\:\ 0x0015}"];
Node_139 [shape=record,color=red,label="{139\:\ 0x0019|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_83 [shape=record,color=red,label="{83\:\ 0x0019|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:83:0x0019), top: B:139:0x0019 \}\lCatch: all \-\> 0x00d9\l}"];
Node_85 [shape=record,color=red,label="{85\:\ 0x0021|DONT_GENERATE\l|monitor\-exit()\l}"];
Node_86 [shape=record,color=red,label="{86\:\ 0x0023}"];
Node_91 [shape=record,color=red,label="{91\:\ 0x0036|LOOP_START\lLOOP:1: B:91:0x0036\-\>B:93:0x003c\l}"];
Node_145 [shape=record,color=red,label="{145\:\ 0x0048|SYNTHETIC\l}"];
Node_96 [shape=record,color=red,label="{96\:\ 0x0052}"];
Node_97 [shape=record,color=red,label="{97\:\ 0x0055}"];
Node_98 [shape=record,color=red,label="{98\:\ 0x0057}"];
Node_142 [shape=record,color=red,label="{142\:\ 0x005d|SYNTHETIC\l}"];
Node_102 [shape=record,color=red,label="{102\:\ 0x005d}"];
Node_99 [shape=record,color=red,label="{99\:\ 0x0059}"];
Node_141 [shape=record,color=red,label="{141\:\ 0x0072|SYNTHETIC\l}"];
Node_112 [shape=record,color=red,label="{112\:\ 0x007f}"];
Node_115 [shape=record,color=red,label="{115\:\ 0x0087}"];
Node_117 [shape=record,color=red,label="{117\:\ 0x0091}"];
Node_122 [shape=record,color=red,label="{122\:\ 0x00a4}"];
Node_125 [shape=record,color=red,label="{125\:\ 0x00c0}"];
Node_126 [shape=record,color=red,label="{126\:\ 0x00c2}"];
Node_129 [shape=record,color=red,label="{129\:\ 0x00c6}"];
Node_132 [shape=record,color=red,label="{132\:\ 0x00d2}"];
Node_149 [shape=record,color=red,label="{149\:\ 0x00d4|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_147 [shape=record,color=red,label="{147\:\ 0x00d4|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_148 [shape=record,color=red,label="{148\:\ 0x00d4|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_113 [shape=record,color=red,label="{113\:\ 0x0081}"];
Node_105 [shape=record,color=red,label="{105\:\ 0x006b}"];
Node_108 [shape=record,color=red,label="{108\:\ 0x0070}"];
Node_140 [shape=record,color=red,label="{140\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_135 [shape=record,color=red,label="{135\:\ 0x00d9|REMOVE\lExcHandler: all \-\> 0x00d9\l}"];
Node_136 [shape=record,color=red,label="{136\:\ 0x00da|REMOVE\l}"];
Node_138 [shape=record,color=red,label="{138\:\ 0x00de|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.CoroutineScheduler.shutdown((r17v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r18v0 'timeout' long A[D('timeout' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:93:0x003c \-\> B:91:0x0036, CROSS_EDGE: B:103:0x0062 \-\> B:76:?, BACK_EDGE: B:106:0x006d \-\> B:89:0x0027, CROSS_EDGE: B:130:0x00cb \-\> B:76:?, CROSS_EDGE: B:132:0x00d2 \-\> B:76:?, CROSS_EDGE: B:125:0x00c0 \-\> B:127:0x00c3, CROSS_EDGE: B:123:0x00a8 \-\> B:131:0x00cc, CROSS_EDGE: B:119:0x009c \-\> B:122:0x00a4, BACK_EDGE: B:134:0x00d4 \-\> B:111:0x007d, CROSS_EDGE: B:116:0x008f \-\> B:134:0x00d4, CROSS_EDGE: B:114:0x0085 \-\> B:134:0x00d4, CROSS_EDGE: B:113:0x0081 \-\> B:114:0x0085, CROSS_EDGE: B:99:0x0059 \-\> B:100:0x005a, CROSS_EDGE: B:95:0x0050 \-\> B:104:0x0063, CROSS_EDGE: B:105:0x006b \-\> B:106:0x006d, CROSS_EDGE: B:108:0x0070 \-\> B:109:0x0072, CROSS_EDGE: B:138:0x00de \-\> B:76:?, CROSS_EDGE: B:139:0x0019 \-\> B:135:0x00d9\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [337=4]\}\l}"];
MethodNode -> Node_75;Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_82;
Node_84 -> Node_85;
Node_87 -> Node_88;
Node_87 -> Node_108[style=dashed];
Node_88 -> Node_89;
Node_106 -> Node_89;
Node_106 -> Node_141[style=dashed];
Node_89 -> Node_90;
Node_90 -> Node_91;
Node_90 -> Node_105[style=dashed];
Node_92 -> Node_93;
Node_92 -> Node_145[style=dashed];
Node_93 -> Node_91;
Node_94 -> Node_95;
Node_95 -> Node_96;
Node_95 -> Node_104[style=dashed];
Node_100 -> Node_104[style=dashed];
Node_100 -> Node_142;
Node_103 -> Node_76;
Node_104 -> Node_144;
Node_144 -> Node_106;
Node_143 -> Node_106;
Node_109 -> Node_111;
Node_111 -> Node_112;
Node_111 -> Node_113;
Node_114 -> Node_115;
Node_114 -> Node_148[style=dashed];
Node_116 -> Node_117;
Node_116 -> Node_147[style=dashed];
Node_118 -> Node_146;
Node_118 -> Node_149[style=dashed];
Node_146 -> Node_119;
Node_134 -> Node_111;
Node_119 -> Node_121;
Node_119 -> Node_122[style=dashed];
Node_121 -> Node_122;
Node_123 -> Node_124;
Node_123 -> Node_131[style=dashed];
Node_124 -> Node_125;
Node_127 -> Node_129;
Node_127 -> Node_131[style=dashed];
Node_130 -> Node_76;
Node_131 -> Node_132;
Node_75 -> Node_77;
Node_77 -> Node_78;
Node_79 -> Node_76;
Node_82 -> Node_139;
Node_139 -> Node_83;
Node_139 -> Node_135;
Node_83 -> Node_84;
Node_83 -> Node_140;
Node_85 -> Node_86;
Node_86 -> Node_87;
Node_91 -> Node_92;
Node_145 -> Node_94;
Node_96 -> Node_97;
Node_97 -> Node_98;
Node_97 -> Node_99;
Node_98 -> Node_100;
Node_142 -> Node_102;
Node_102 -> Node_103;
Node_99 -> Node_100;
Node_141 -> Node_109;
Node_112 -> Node_114;
Node_115 -> Node_116;
Node_117 -> Node_118;
Node_122 -> Node_123;
Node_125 -> Node_126;
Node_125 -> Node_127;
Node_126 -> Node_127;
Node_129 -> Node_130;
Node_132 -> Node_76;
Node_149 -> Node_134;
Node_147 -> Node_134;
Node_148 -> Node_134;
Node_113 -> Node_114;
Node_105 -> Node_143;
Node_108 -> Node_109;
Node_140 -> Node_135;
Node_135 -> Node_136;
Node_136 -> Node_138;
Node_138 -> Node_76;
}

