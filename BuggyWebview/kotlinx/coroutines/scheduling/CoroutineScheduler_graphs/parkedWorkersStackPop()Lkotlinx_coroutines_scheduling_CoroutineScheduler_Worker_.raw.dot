digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop()Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY])  (LINE:204)\l0x0002: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY]) \l0x0004: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0005|LOOP_START\lLOOP:0: B:25:0x0005\-\>B:41:0x0005\l|0x0006: IGET  (r9 I:long) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('$this$loop$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack long  (LINE:988)\l0x0008: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: CONST  (r0 I:??[long, double]) = (2097151(0x1fffff, double:1.0361303E\-317) ??[long, double])  (LINE:205)\l0x000c: ARITH  (r0 I:long) = (r0 I:long) & (r9 I:long A[D('top' long)]) \l0x000d: CAST (r12 I:int) = (int) (r0 I:long) \l0x000e: IGET  (r0 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r6 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray  (LINE:206)\l0x0010: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlinx.coroutines.internal.ResizableAtomicArray), (r12 I:int A[D('index' int)]) type: VIRTUAL call: kotlinx.coroutines.internal.ResizableAtomicArray.get(int):java.lang.Object A[MD:(int):T (m)]\l0x0014: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001a \l}"];
Node_29 [shape=record,label="{29\:\ 0x001a|0x001a: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001b: CONST  (r0 I:??[long, double]) = (2097152(0x200000, double:1.036131E\-317) ??[long, double])  (LINE:207)\l0x001e: ARITH  (r0 I:long) = (r0 I:long) + (r9 I:long A[D('top' long)]) \l0x001f: CONST  (r2 I:??[long, double]) = (\-2097152(0xffffffffffe00000, double:NaN) ??[long, double]) \l0x0022: ARITH  (r14 I:long) = (r0 I:long) & (r2 I:long) \l0x0024: INVOKE  (r4 I:int) = \l  (r6 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):int A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):int (m)] (LINE:208)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0028|0x0028: IF  (r4 I:??[int, byte, short, char] A[D('updIndex' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:39:0x002b  (LINE:209)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002b|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002b|0x002b: SGET  (r0 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:215)\l0x002d: CAST (r1 I:long) = (long) (r4 I:int A[D('updIndex' int)]) \l0x002e: ARITH  (r16 I:long) = (r14 I:long A[D('updVersion' long)]) \| (r1 I:long) \l0x0030: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY]) \l0x0032: MOVE  (r2 I:??[long, double]) = (r9 I:??[long, double] A[D('top' long)]) \l0x0033: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('updIndex' int)]) \l0x0035: MOVE  (r4 I:??[long, double] A[D('updIndex' int)]) = (r16 I:??[long, double]) \l0x0037: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.atomic.AtomicLongFieldUpdater), (r1 I:java.lang.Object), (r2 I:long), (r4 I:long) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(java.lang.Object, long, long):boolean A[MD:(T, long, long):boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x003b|0x003b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0005 \l}"];
Node_40 [shape=record,label="{40\:\ 0x003d|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x003d|0x003d: SGET  (r0 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK kotlinx.coroutines.internal.Symbol  (LINE:222)\l0x003f: INVOKE  \l  (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r0 I:java.lang.Object)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.setNextParkedWorker(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0042|RETURN\l|0x0042: RETURN  \l  (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (LINE:223)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0005|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0005|LOOP_END\lSYNTHETIC\lLOOP:0: B:25:0x0005\-\>B:41:0x0005\l}"];
Node_42 [shape=record,label="{42\:\ 0x0005|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0018|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|RETURN\l|0x0018: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: RETURN  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop((r19 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0042 \-\> B:23:?, BACK_EDGE: B:33:0x003b \-\> B:25:0x0005, BACK_EDGE: B:30:0x0028 \-\> B:25:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x0035: r4 'updIndex' I\l  0x0008\-0x0044: r9 'top' J\l  0x0009\-0x0044: r11 '$i$a$\-loop\-CoroutineScheduler$parkedWorkersStackPop$1' I\l  0x000e\-0x0044: r12 'index' I\l  0x001b\-0x0044: r13 'worker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  0x0024\-0x0044: r14 'updVersion' J\l  0x0035\-0x0044: r18 'updIndex' I\l  0x0004\-0x0044: r7 '$this$loop$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0005\-0x0044: r8 '$i$f$loop' I\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_29;
Node_26 -> Node_38[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_39;
Node_30 -> Node_42[style=dashed];
Node_39 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_40[style=dashed];
Node_33 -> Node_43;
Node_40 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_23;
Node_43 -> Node_41;
Node_41 -> Node_25;
Node_42 -> Node_41;
Node_38 -> Node_27;
Node_27 -> Node_23;
}

