digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.dispatch(Ljava\/lang\/Runnable;Lkotlinx\/coroutines\/scheduling\/TaskContext;Z)V" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:383)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0007 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0007|0x0007: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.trackTask():void A[MD:():void (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x000a|0x000a: INVOKE  (r0 I:kotlinx.coroutines.scheduling.Task) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r8 I:java.lang.Runnable A[D('block' java.lang.Runnable)])\l  (r9 I:kotlinx.coroutines.scheduling.TaskContext A[D('taskContext' kotlinx.coroutines.scheduling.TaskContext)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.createTask(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext):kotlinx.coroutines.scheduling.Task A[MD:(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext):kotlinx.coroutines.scheduling.Task (m)] (LINE:384)\l0x000e: INVOKE  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker():kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[MD:():kotlinx.coroutines.scheduling.CoroutineScheduler$Worker (m)] (LINE:386)\l0x0012: INVOKE  (r2 I:kotlinx.coroutines.scheduling.Task) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('currentWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r0 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)])\l  (r10 I:boolean A[D('tailDispatch' boolean)])\l type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, kotlinx.coroutines.scheduling.Task, boolean):kotlinx.coroutines.scheduling.Task A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, kotlinx.coroutines.scheduling.Task, boolean):kotlinx.coroutines.scheduling.Task (m)] (LINE:387)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('notAdded' kotlinx.coroutines.scheduling.Task)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x002d  (LINE:388)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|0x0018: INVOKE  (r3 I:boolean) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r2 I:kotlinx.coroutines.scheduling.Task A[D('notAdded' kotlinx.coroutines.scheduling.Task)])\l type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue(kotlinx.coroutines.scheduling.Task):boolean A[MD:(kotlinx.coroutines.scheduling.Task):boolean (m)] (LINE:389)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|0x001c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x001f \l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|0x001f: NEW_INSTANCE  (r3 I:java.util.concurrent.RejectedExecutionException) =  java.util.concurrent.RejectedExecutionException  (LINE:391)\l0x0021: IGET  (r4 I:java.lang.String) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName java.lang.String \l0x0023: CONST_STR  (r5 I:java.lang.String) =  \" was terminated\" \l0x0025: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String), (r5 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0029: INVOKE  (r3 I:java.util.concurrent.RejectedExecutionException), (r4 I:java.lang.String) type: DIRECT call: java.util.concurrent.RejectedExecutionException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x002c|0x002c: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|0x002d: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tailDispatch' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0033  (LINE:394)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002f|0x002f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0033 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0031|0x0031: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|0x0034: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('task' kotlinx.coroutines.scheduling.Task)])  (LINE:396)\l0x0035: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0036: IGET  (r6 I:kotlinx.coroutines.scheduling.TaskContext) = (r4 I:kotlinx.coroutines.scheduling.Task A[D('this_$iv' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:1002)\l0x0038: INVOKE  (r4 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.Task)]) = (r6 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x003c|0x003c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('this_$iv' kotlinx.coroutines.scheduling.Task)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0045  (LINE:396)\l}"];
Node_44 [shape=record,label="{44\:\ 0x003e|0x003e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('skipUnpark' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0041  (LINE:397)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0040|RETURN\l|0x0040: RETURN   \l}"];
Node_46 [shape=record,label="{46\:\ 0x0041|0x0041: INVOKE  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork():void A[MD:():void (m)] (LINE:398)\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|0x0048: RETURN   A[SYNTHETIC] (LINE:403)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0045|0x0045: INVOKE  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler), (r3 I:boolean A[D('skipUnpark' boolean)]) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork(boolean):void A[MD:(boolean):void (m)] (LINE:401)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0048|RETURN\lORIG_RETURN\l|0x0048: RETURN    (LINE:403)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0033|0x0033: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch((r7 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlinx.coroutines.scheduling.TaskContext A[D('taskContext' kotlinx.coroutines.scheduling.TaskContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[D('tailDispatch' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:45:0x0040 \-\> B:26:?, CROSS_EDGE: B:48:0x0048 \-\> B:26:?, CROSS_EDGE: B:47:0x0045 \-\> B:48:0x0048, CROSS_EDGE: B:41:0x0033 \-\> B:42:0x0034, CROSS_EDGE: B:38:0x002d \-\> B:41:0x0033, CROSS_EDGE: B:32:0x0016 \-\> B:38:0x002d, CROSS_EDGE: B:28:0x0004 \-\> B:31:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0035\-0x003c: r4 'this_$iv' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0036\-0x003c: r5 '$i$f$getMode' I\l  0x000e\-0x0048: r0 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0012\-0x0048: r1 'currentWorker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  0x0016\-0x0048: r2 'notAdded' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0034\-0x0048: r3 'skipUnpark' Z\l  \-1 \-0x0048: r8 'block' Ljava\/lang\/Runnable;\l  \-1 \-0x0048: r9 'taskContext' Lkotlinx\/coroutines\/scheduling\/TaskContext;\l  \-1 \-0x0048: r10 'tailDispatch' Z\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_31[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_38;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_38[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_26;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_41;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_47;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_26;
Node_46 -> Node_49;
Node_49 -> Node_26;
Node_47 -> Node_48;
Node_48 -> Node_26;
Node_41 -> Node_42;
}

