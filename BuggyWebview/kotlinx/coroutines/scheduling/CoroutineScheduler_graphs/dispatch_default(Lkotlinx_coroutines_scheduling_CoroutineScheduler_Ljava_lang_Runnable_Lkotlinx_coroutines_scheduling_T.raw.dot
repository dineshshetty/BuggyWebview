digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.dispatch$default(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;Ljava\/lang\/Runnable;Lkotlinx\/coroutines\/scheduling\/TaskContext;ZILjava\/lang\/Object;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:382)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0006 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: SGET  (r2 I:kotlinx.coroutines.scheduling.TaskContext) =  kotlinx.coroutines.scheduling.TasksKt.NonBlockingContext kotlinx.coroutines.scheduling.TaskContext \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b \l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: INVOKE  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r1 I:java.lang.Runnable)\l  (r2 I:kotlinx.coroutines.scheduling.TaskContext)\l  (r3 I:boolean)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean):void A[MD:(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|RETURN\l|0x000e: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch$default((r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.Runnable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlinx.coroutines.scheduling.TaskContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:16:0x0008 \-\> B:18:0x000b, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x0006\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

