digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.dispatch(Ljava\/lang\/Runnable;Lkotlinx\/coroutines\/scheduling\/TaskContext;Z)V" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|kotlinx.coroutines.AbstractTimeSource r0 = kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource()\l}"];
Node_28 [shape=record,label="{28\:\ 0x0004|if (r0 != null) goto L3\l}"];
Node_30 [shape=record,label="{30\:\ 0x0007|r0.trackTask()\l}"];
Node_31 [shape=record,label="{31\:\ 0x000a|kotlinx.coroutines.scheduling.Task r0 = createTask(r8, r9)\lkotlinx.coroutines.scheduling.CoroutineScheduler$Worker r1 = currentWorker()\lkotlinx.coroutines.scheduling.Task r2 = submitToLocalQueue(r1, r0, r10)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0016|if (r2 == null) goto L11\l}"];
Node_33 [shape=record,label="{33\:\ 0x0018}"];
Node_34 [shape=record,label="{34\:\ 0x001c|if (addToGlobalQueue(r2) == false) goto L8\l}"];
Node_36 [shape=record,label="{36\:\ 0x001f}"];
Node_37 [shape=record,label="{37\:\ 0x002c|throw new java.util.concurrent.RejectedExecutionException(kotlin.jvm.internal.Intrinsics.stringPlus(r7.schedulerName, \" was terminated\"))\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|if (r10 == false) goto L22\l}"];
Node_39 [shape=record,label="{39\:\ 0x002f|if (r1 == null) goto L22\l}"];
Node_40 [shape=record,label="{40\:\ 0x0031|r3 = true\l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|PHI: r3 \l  PHI: (r3v1 'skipUnpark' boolean) = (r3v0 'skipUnpark' boolean), (r3v2 'skipUnpark' boolean) binds: [B:41:0x0033, B:40:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_43 [shape=record,label="{43\:\ 0x003c|if (r0.taskContext.getTaskMode() != 0) goto L20\l}"];
Node_44 [shape=record,label="{44\:\ 0x003e|if (r3 == false) goto L18\l}"];
Node_45 [shape=record,label="{45\:\ 0x0040|RETURN\l|return\l}"];
Node_46 [shape=record,label="{46\:\ 0x0041|signalCpuWork()\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_47 [shape=record,label="{47\:\ 0x0045|signalBlockingWork(r3)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0048|RETURN\lORIG_RETURN\l|return\l}"];
Node_41 [shape=record,label="{41\:\ 0x0033|r3 = false\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch((r7v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r8v0 'block' java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'taskContext' kotlinx.coroutines.scheduling.TaskContext A[D('taskContext' kotlinx.coroutines.scheduling.TaskContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'tailDispatch' boolean A[D('tailDispatch' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:45:0x0040 \-\> B:26:?, CROSS_EDGE: B:48:0x0048 \-\> B:26:?, CROSS_EDGE: B:47:0x0045 \-\> B:48:0x0048, CROSS_EDGE: B:41:0x0033 \-\> B:42:0x0034, CROSS_EDGE: B:38:0x002d \-\> B:41:0x0033, CROSS_EDGE: B:32:0x0016 \-\> B:38:0x002d, CROSS_EDGE: B:28:0x0004 \-\> B:31:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_31[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_38;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_38[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_26;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_41;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_47;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_26;
Node_46 -> Node_49;
Node_49 -> Node_26;
Node_47 -> Node_48;
Node_48 -> Node_26;
Node_41 -> Node_42;
}

