digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker()Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|java.lang.Thread r0 = java.lang.Thread.currentThread()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|if ((r0 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler.Worker) == false) goto L12\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r0 = (kotlinx.coroutines.scheduling.CoroutineScheduler.Worker) r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (r0v1 kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r0v3 kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) binds: [B:19:0x000c, B:18:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L5\l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|r1 = r0\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|if (kotlin.jvm.internal.Intrinsics.areEqual(kotlinx.coroutines.scheduling.CoroutineScheduler.this, r6) == false) goto L10\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e}"];
Node_25 [shape=record,label="{25\:\ 0x001f|RETURN\lORIG_RETURN\l|return r0\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|r0 = null\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.CoroutineScheduler$Worker kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker((r6v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001c \-\> B:25:0x001f, CROSS_EDGE: B:20:0x000d \-\> B:25:0x001f, CROSS_EDGE: B:19:0x000c \-\> B:20:0x000d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_26[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_27 -> Node_15;
Node_26 -> Node_15;
Node_19 -> Node_20;
}

