digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.toString()Ljava\/lang\/String;" {
Node_37 [shape=record,label="{37\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0000|r0 = 0\lr1 = 0\lr2 = 0\lr3 = 0\lr4 = 0\ljava.util.ArrayList r5 = new java.util.ArrayList()\lint r6 = r15.workers.currentLength()\lr7 = 1\l}"];
Node_40 [shape=record,label="{40\:\ 0x0011|LOOP_START\lLOOP:0: B:40:0x0011\-\>B:65:0x0011\lPHI: r0 r1 r2 r3 r4 r7 \l  PHI: (r0v1 'parkedWorkers' int) = (r0v0 'parkedWorkers' int), (r0v2 'parkedWorkers' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'blockingWorkers' int) = (r1v0 'blockingWorkers' int), (r1v2 'blockingWorkers' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'cpuWorkers' int) = (r2v0 'cpuWorkers' int), (r2v2 'cpuWorkers' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'dormant' int) = (r3v0 'dormant' int), (r3v2 'dormant' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'terminated' int) = (r4v0 'terminated' int), (r4v2 'terminated' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 \>= r6) goto L30\l}"];
Node_41 [shape=record,label="{41\:\ 0x0013|r8 = r7\lint r7 = r7 + 1\lkotlinx.coroutines.scheduling.CoroutineScheduler$Worker r9 = r15.workers.get(r8)\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|if (r9 != null) goto L5\l}"];
Node_58 [shape=record,label="{58\:\ 0x0021|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0021|int r10 = r9.localQueue.getSize$kotlinx_coroutines_core()\lkotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r11 = r9.state\l}"];
Node_45 [shape=record,label="{45\:\ 0x0031|switch(kotlinx.coroutines.scheduling.CoroutineScheduler.WhenMappings.$EnumSwitchMapping$0[r11.ordinal()]) \{\l    case 1: goto L25;\l    case 2: goto L22;\l    case 3: goto L19;\l    case 4: goto L12;\l    case 5: goto L8;\l    default: goto L28;\l\}\l}"];
Node_59 [shape=record,label="{59\:\ 0x0035|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0035|int r4 = r4 + 1\l}"];
Node_68 [shape=record,label="{68\:\ 0x0011|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0011|LOOP_END\lSYNTHETIC\lLOOP:0: B:40:0x0011\-\>B:65:0x0011\lPHI: r0 r1 r2 r3 r4 \l  PHI: (r0v2 'parkedWorkers' int) = (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v3 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 'blockingWorkers' int) = (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v3 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 'cpuWorkers' int) = (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v3 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'dormant' int) = (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v3 'dormant' int), (r3v3 'dormant' int), (r3v1 'dormant' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'terminated' int) = (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v3 'terminated' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_60 [shape=record,label="{60\:\ 0x0038|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0038|int r3 = r3 + 1\l}"];
Node_49 [shape=record,label="{49\:\ 0x003a|if (r10 \<= 0) goto L18\l}"];
Node_64 [shape=record,label="{64\:\ 0x003c|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x003c|java.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(r10)\lr12.append('d')\lr5.add(r12.toString())\l}"];
Node_70 [shape=record,label="{70\:\ 0x0011|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0011|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0054|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0054|int r2 = r2 + 1\ljava.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(r10)\lr12.append('c')\lr5.add(r12.toString())\l}"];
Node_71 [shape=record,label="{71\:\ 0x0011|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x006e|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x006e|int r1 = r1 + 1\ljava.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(r10)\lr12.append('b')\lr5.add(r12.toString())\l}"];
Node_72 [shape=record,label="{72\:\ 0x0011|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0088|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x0088|int r0 = r0 + 1\l}"];
Node_73 [shape=record,label="{73\:\ 0x0011|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x0011|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0011|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x008c|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x008c|long r6 = r15.controlState\ljava.lang.StringBuilder r8 = new java.lang.StringBuilder()\lr8.append(r15.schedulerName)\lr8.append('@')\lr8.append(kotlinx.coroutines.DebugStrings.getHexAddress(r15))\lr8.append(\"[Pool Size \{core = \")\lr8.append(r15.corePoolSize)\lr8.append(\", max = \")\lr8.append(r15.maxPoolSize)\lr8.append(\"\}, Worker States \{CPU = \")\lr8.append(r2)\lr8.append(\", blocking = \")\lr8.append(r1)\lr8.append(\", parked = \")\lr8.append(r0)\lr8.append(\", dormant = \")\lr8.append(r3)\lr8.append(\", terminated = \")\lr8.append(r4)\lr8.append(\"\}, running workers queues = \")\lr8.append(r5)\lr8.append(\", global CPU queue size = \")\lr8.append(r15.globalCpuQueue.getSize())\lr8.append(\", global blocking queue size = \")\lr8.append(r15.globalBlockingQueue.getSize())\lr8.append(\", Control State \{created workers= \")\lr8.append((int) (2097151 & r6))\lr8.append(\", blocking tasks = \")\lr8.append((int) ((kotlinx.coroutines.scheduling.CoroutineScheduler.BLOCKING_MASK & r6) \>\> 21))\lr8.append(\", CPUs acquired = \")\lr8.append(r15.corePoolSize \- ((int) ((kotlinx.coroutines.scheduling.CoroutineScheduler.CPU_PERMITS_MASK & r6) \>\> 42)))\lr8.append(\"\}]\")\l}"];
Node_56 [shape=record,label="{56\:\ 0x015a|RETURN\l|return r8.toString()\l}"];
Node_38 [shape=record,label="{38\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.String kotlinx.coroutines.scheduling.CoroutineScheduler.toString((r15v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | BACK_EDGE: B:47:0x0035 \-\> B:40:0x0011, BACK_EDGE: B:49:0x003a \-\> B:40:0x0011, BACK_EDGE: B:50:0x003c \-\> B:40:0x0011, BACK_EDGE: B:51:0x0054 \-\> B:40:0x0011, BACK_EDGE: B:52:0x006e \-\> B:40:0x0011, BACK_EDGE: B:53:0x0088 \-\> B:40:0x0011, BACK_EDGE: B:45:0x0031 \-\> B:40:0x0011, BACK_EDGE: B:42:0x001e \-\> B:40:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [548=27]\}\l}"];
MethodNode -> Node_37;Node_37 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_57;
Node_41 -> Node_42;
Node_42 -> Node_58;
Node_42 -> Node_66[style=dashed];
Node_58 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_59;
Node_45 -> Node_60;
Node_45 -> Node_61;
Node_45 -> Node_62;
Node_45 -> Node_63;
Node_45 -> Node_67;
Node_59 -> Node_47;
Node_47 -> Node_68;
Node_68 -> Node_65;
Node_65 -> Node_40;
Node_60 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_64[style=dashed];
Node_49 -> Node_69;
Node_64 -> Node_50;
Node_50 -> Node_70;
Node_70 -> Node_65;
Node_69 -> Node_65;
Node_61 -> Node_51;
Node_51 -> Node_71;
Node_71 -> Node_65;
Node_62 -> Node_52;
Node_52 -> Node_72;
Node_72 -> Node_65;
Node_63 -> Node_53;
Node_53 -> Node_73;
Node_73 -> Node_65;
Node_67 -> Node_65;
Node_66 -> Node_65;
Node_57 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_38;
}

