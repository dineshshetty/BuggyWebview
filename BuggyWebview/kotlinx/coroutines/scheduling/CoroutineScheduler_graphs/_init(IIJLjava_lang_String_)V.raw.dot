digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.\<init\>(IIJLjava\/lang\/String;)V" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: INVOKE  (r5 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:90)\l0x0003: IPUT  (r6 I:int A[D('corePoolSize' int)]), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize int  (LINE:92)\l0x0005: IPUT  (r7 I:int A[D('maxPoolSize' int)]), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.maxPoolSize int  (LINE:93)\l0x0007: IPUT  (r8 I:long A[D('idleWorkerKeepAliveNs' long)]), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.idleWorkerKeepAliveNs long  (LINE:94)\l0x0009: IPUT  \l  (r10 I:java.lang.String A[D('schedulerName' java.lang.String)])\l  (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l kotlinx.coroutines.scheduling.CoroutineScheduler.schedulerName java.lang.String  (LINE:95)\l0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:98)\l0x000d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x000e|0x000e: IF  (r6 I:??[int, byte, short, char] A[D('corePoolSize' int)]) \< (r1 I:??[int, byte, short, char])  \-\> B:37:0x0012 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0010|0x0010: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x00b7 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0015|0x0015: IF  (r7 I:??[int, byte, short, char] A[D('maxPoolSize' int)]) \< (r6 I:??[int, byte, short, char] A[D('corePoolSize' int)])  \-\> B:41:0x0019  (LINE:101)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0017|0x0017: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|0x001a: CONST_STR  (r3 I:java.lang.String) =  \"Max pool size \" \l}"];
Node_43 [shape=record,label="{43\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0095 \l}"];
Node_44 [shape=record,label="{44\:\ 0x001e|0x001e: CONST  (r2 I:??[int, float, short, byte, char]) = (2097150(0x1ffffe, float:2.938733E\-39) ??[int, float, short, byte, char])  (LINE:104)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0021|0x0021: IF  (r7 I:??[int, byte, short, char] A[D('maxPoolSize' int)]) \> (r2 I:??[int, byte, short, char])  \-\> B:47:0x0025 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0023|0x0023: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0026|0x0026: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0076 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0028|0x0028: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:107)\l0x002a: CMP_L  (r4 I:int) = (r8 I:long A[D('idleWorkerKeepAliveNs' long)]), (r2 I:long) \l}"];
Node_50 [shape=record,label="{50\:\ 0x002c|0x002c: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:52:0x002f \l}"];
Node_52 [shape=record,label="{52\:\ 0x002f|0x002f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0030|0x0030: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x0055 \l}"];
Node_54 [shape=record,label="{54\:\ 0x0033|0x0033: NEW_INSTANCE  (r1 I:kotlinx.coroutines.scheduling.GlobalQueue) =  kotlinx.coroutines.scheduling.GlobalQueue  (LINE:113)\l0x0035: INVOKE  (r1 I:kotlinx.coroutines.scheduling.GlobalQueue) type: DIRECT call: kotlinx.coroutines.scheduling.GlobalQueue.\<init\>():void A[MD:():void (m)]\l0x0038: IPUT  (r1 I:kotlinx.coroutines.scheduling.GlobalQueue), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue kotlinx.coroutines.scheduling.GlobalQueue \l0x003a: NEW_INSTANCE  (r1 I:kotlinx.coroutines.scheduling.GlobalQueue) =  kotlinx.coroutines.scheduling.GlobalQueue  (LINE:115)\l0x003c: INVOKE  (r1 I:kotlinx.coroutines.scheduling.GlobalQueue) type: DIRECT call: kotlinx.coroutines.scheduling.GlobalQueue.\<init\>():void A[MD:():void (m)]\l0x003f: IPUT  (r1 I:kotlinx.coroutines.scheduling.GlobalQueue), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue kotlinx.coroutines.scheduling.GlobalQueue \l0x0041: IPUT  (r2 I:long), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack long  (LINE:139)\l0x0043: NEW_INSTANCE  (r1 I:kotlinx.coroutines.internal.ResizableAtomicArray) =  kotlinx.coroutines.internal.ResizableAtomicArray  (LINE:263)\l0x0045: ARITH  (r2 I:int) = (r6 I:int A[D('corePoolSize' int)]) + (1 int) \l0x0047: INVOKE  (r1 I:kotlinx.coroutines.internal.ResizableAtomicArray), (r2 I:int) type: DIRECT call: kotlinx.coroutines.internal.ResizableAtomicArray.\<init\>(int):void A[MD:(int):void (m)]\l0x004a: IPUT  \l  (r1 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>)\l  (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray \l0x004c: CAST (r1 I:long) = (long) (r6 I:int A[D('corePoolSize' int)])  (LINE:269)\l0x004d: CONST  (r3 I:??[int, float, short, byte, char]) = (42 ??[int, float, short, byte, char]) \l0x004f: ARITH  (r1 I:long) = (r1 I:long) \<\< (r3 I:long) \l0x0050: IPUT  (r1 I:long), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.controlState long \l0x0052: IPUT  (r0 I:int), (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated int  (LINE:297)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0054|RETURN\l|0x0054: RETURN    (LINE:91)\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0055|0x0055: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:107)\l0x0056: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:108)\l0x0058: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x005b: CONST_STR  (r2 I:java.lang.String) =  \"Idle worker keep alive time \" \l0x005d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0060: INVOKE  (r1 I:java.lang.StringBuilder), (r8 I:long A[D('idleWorkerKeepAliveNs' long)]) type: VIRTUAL call: java.lang.StringBuilder.append(long):java.lang.StringBuilder A[MD:(long):java.lang.StringBuilder (c)]\l0x0063: CONST_STR  (r2 I:java.lang.String) =  \" must be positive\" \l0x0065: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0068: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-CoroutineScheduler$4' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x006c: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:107)\l0x006e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0072: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x0075|0x0075: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0076|0x0076: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:104)\l0x0077: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:105)\l0x0079: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x007c: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x007f: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:int A[D('maxPoolSize' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0082: CONST_STR  (r2 I:java.lang.String) =  \" should not exceed maximal supported number of threads 2097150\" \l0x0084: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0087: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-CoroutineScheduler$3' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x008b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:104)\l0x008d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0091: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0094|0x0094: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0025|0x0025: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0095|0x0095: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:101)\l0x0096: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:102)\l0x0098: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x009b: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x009e: INVOKE  (r1 I:java.lang.StringBuilder), (r7 I:int A[D('maxPoolSize' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00a1: CONST_STR  (r2 I:java.lang.String) =  \" should be greater than or equals to core pool size \" \l0x00a3: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00a6: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:int A[D('corePoolSize' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00a9: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-CoroutineScheduler$2' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00ad: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:101)\l0x00af: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00b3: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_61 [shape=record,label="{61\:\ 0x00b6|0x00b6: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0019|0x0019: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x00b7|0x00b7: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:98)\l0x00b8: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:99)\l0x00ba: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x00bd: CONST_STR  (r2 I:java.lang.String) =  \"Core pool size \" \l0x00bf: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00c2: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:int A[D('corePoolSize' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00c5: CONST_STR  (r2 I:java.lang.String) =  \" should be at least 1\" \l0x00c7: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00ca: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-CoroutineScheduler$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00ce: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:98)\l0x00d0: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00d4: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_63 [shape=record,label="{63\:\ 0x00d7|0x00d7: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0012|0x0012: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.CoroutineScheduler.\<init\>((r5 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('corePoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('maxPoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('idleWorkerKeepAliveNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.String A[D('schedulerName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:57:0x0075 \-\> B:33:?, CROSS_EDGE: B:50:0x002c \-\> B:53:0x0030, CROSS_EDGE: B:59:0x0094 \-\> B:33:?, CROSS_EDGE: B:47:0x0025 \-\> B:48:0x0026, CROSS_EDGE: B:61:0x00b6 \-\> B:33:?, CROSS_EDGE: B:41:0x0019 \-\> B:42:0x001a, CROSS_EDGE: B:63:0x00d7 \-\> B:33:?, CROSS_EDGE: B:37:0x0012 \-\> B:38:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0056\-0x006c: r0 '$i$a$\-require\-CoroutineScheduler$4' I\l  0x0077\-0x008b: r0 '$i$a$\-require\-CoroutineScheduler$3' I\l  0x0096\-0x00ad: r0 '$i$a$\-require\-CoroutineScheduler$2' I\l  0x00b8\-0x00ce: r0 '$i$a$\-require\-CoroutineScheduler$1' I\l  \-1 \-0x00d7: r6 'corePoolSize' I\l  \-1 \-0x00d7: r7 'maxPoolSize' I\l  \-1 \-0x00d7: r8 'idleWorkerKeepAliveNs' J\l  \-1 \-0x00d7: r10 'schedulerName' Ljava\/lang\/String;\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_62;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_60;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_58;
Node_49 -> Node_50;
Node_50 -> Node_52;
Node_50 -> Node_53[style=dashed];
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_56;
Node_54 -> Node_55;
Node_55 -> Node_33;
Node_56 -> Node_57;
Node_57 -> Node_33;
Node_58 -> Node_59;
Node_59 -> Node_33;
Node_47 -> Node_48;
Node_60 -> Node_61;
Node_61 -> Node_33;
Node_41 -> Node_42;
Node_62 -> Node_63;
Node_63 -> Node_33;
Node_37 -> Node_38;
}

