digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork(Z)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|long r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU.addAndGet(r5, kotlinx.coroutines.scheduling.CoroutineScheduler.PARKED_VERSION_INC)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|if (r6 == false) goto L5\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f}"];
Node_19 [shape=record,label="{19\:\ 0x0013|if (tryUnpark() == false) goto L8\l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016}"];
Node_22 [shape=record,label="{22\:\ 0x001a|if (tryCreateWorker(r0) == false) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|RETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ 0x001d|tryUnpark()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0020|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork((r5v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r6v0 'skipUnpark' boolean A[D('skipUnpark' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0015 \-\> B:14:?, CROSS_EDGE: B:23:0x001c \-\> B:14:?, CROSS_EDGE: B:25:0x0020 \-\> B:14:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

