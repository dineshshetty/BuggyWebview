digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork(Z)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY])  (LINE:417)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: SGET  (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:1003)\l0x0004: CONST  (r3 I:??[long, double]) = (2097152(0x200000, double:1.036131E\-317) ??[long, double]) \l0x0007: INVOKE  (r0 I:long A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = \l  (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater)\l  (r0 I:java.lang.Object A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l  (r3 I:long)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(java.lang.Object, long):long A[MD:(T, long):long (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|0x000c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('skipUnpark' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000f  (LINE:418)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|RETURN\l|0x000e: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: INVOKE  (r2 I:boolean) = (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark():boolean A[MD:():boolean (m)] (LINE:419)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0016 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|RETURN\l|0x0015: RETURN   \l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|0x0016: INVOKE  (r2 I:boolean) = (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler), (r0 I:long A[D('stateSnapshot' long)]) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.tryCreateWorker(long):boolean A[MD:(long):boolean (m)] (LINE:420)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001d \l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|RETURN\l|0x001c: RETURN   \l}"];
Node_24 [shape=record,label="{24\:\ 0x001d|0x001d: INVOKE  (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark():boolean A[MD:():boolean (m)] (LINE:421)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0020|RETURN\l|0x0020: RETURN    (LINE:422)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.signalBlockingWork((r5 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r6 I:boolean A[D('skipUnpark' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0015 \-\> B:14:?, CROSS_EDGE: B:23:0x001c \-\> B:14:?, CROSS_EDGE: B:25:0x0020 \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000b: r0 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0002\-0x000b: r1 '$i$f$incrementBlockingTasks' I\l  0x000c\-0x0020: r0 'stateSnapshot' J\l  \-1 \-0x0020: r6 'skipUnpark' Z\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

