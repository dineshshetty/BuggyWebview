digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.scheduling.CoroutineScheduler.Companion = new kotlinx.coroutines.scheduling.CoroutineScheduler.Companion(null)\lkotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK = new kotlinx.coroutines.internal.Symbol(\"NOT_IN_STACK\")\lkotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack$FU = java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(kotlinx.coroutines.scheduling.CoroutineScheduler.class, \"parkedWorkersStack\")\lkotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU = java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(kotlinx.coroutines.scheduling.CoroutineScheduler.class, \"controlState\")\lkotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated$FU = java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(kotlinx.coroutines.scheduling.CoroutineScheduler.class, \"_isTerminated\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.scheduling.CoroutineScheduler.\<clinit\>()  | DONT_GENERATE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

