digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue(Lkotlinx\/coroutines\/scheduling\/Task;)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('task' kotlinx.coroutines.scheduling.Task)])  (LINE:118)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: IGET  (r2 I:kotlinx.coroutines.scheduling.TaskContext) = (r0 I:kotlinx.coroutines.scheduling.Task A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:981)\l0x0004: INVOKE  (r2 I:int) = (r2 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l0x0008: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x000c \l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|0x000c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|0x000d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0016  (LINE:118)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: IGET  (r0 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue kotlinx.coroutines.scheduling.GlobalQueue  (LINE:119)\l0x0011: INVOKE  (r0 I:boolean) = \l  (r0 I:kotlinx.coroutines.scheduling.GlobalQueue)\l  (r5 I:java.lang.Object A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.addLast(java.lang.Object):boolean A[MD:(E):boolean (m)]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:118)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|0x0016: IGET  (r0 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue kotlinx.coroutines.scheduling.GlobalQueue  (LINE:121)\l0x0018: INVOKE  (r0 I:boolean) = \l  (r0 I:kotlinx.coroutines.scheduling.GlobalQueue)\l  (r5 I:java.lang.Object A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.addLast(java.lang.Object):boolean A[MD:(E):boolean (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: RETURN  (r0 I:boolean)  (LINE:118)\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.addToGlobalQueue((r4 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0016 \-\> B:20:0x001c, CROSS_EDGE: B:14:0x0009 \-\> B:17:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000d: r0 '$this$isBlocking$iv' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0002\-0x000d: r1 '$i$f$isBlocking' I\l  \-1 \-0x001c: r5 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
}

