digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork()V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark():boolean A[MD:():boolean (m)] (LINE:425)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0007 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|RETURN\l|0x0006: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:426)\l0x0009: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r0 I:boolean) = (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler), (r0 I:long), (r2 I:int), (r3 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.scheduling.CoroutineScheduler.tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler, long, int, java.lang.Object):boolean A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler, long, int, java.lang.Object):boolean (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0012 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|RETURN\l|0x0011: RETURN   \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: INVOKE  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark():boolean A[MD:():boolean (m)] (LINE:427)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|RETURN\l|0x0015: RETURN    (LINE:428)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork((r4 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0011 \-\> B:11:?, CROSS_EDGE: B:19:0x0015 \-\> B:11:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

