digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.shutdown(J)V" {
Node_75 [shape=record,label="{75\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_77 [shape=record,label="{77\:\ 0x0000|0x0000: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY])  (LINE:333)\l0x0002: SGET  (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler._isTerminated$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r1 I:java.lang.Object), (r2 I:int), (r3 I:int) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.lang.Object, int, int):boolean A[MD:(T, int, int):boolean (c)]\l}"];
Node_78 [shape=record,label="{78\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x000d \l}"];
Node_79 [shape=record,label="{79\:\ 0x000c|RETURN\l|0x000c: RETURN   \l}"];
Node_76 [shape=record,label="{76\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_80 [shape=record,label="{80\:\ 0x000d|0x000d: INVOKE  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (r17 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.currentWorker():kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[MD:():kotlinx.coroutines.scheduling.CoroutineScheduler$Worker (m)] (LINE:335)\l0x0011: IGET  (r5 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray  (LINE:337)\l0x0013: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x0014|0x0014: MONITOR_ENTER  (r5 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)])  (LINE:995)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0015|0x0015: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY])  (LINE:337)\l0x0018: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_139 [shape=record,label="{139\:\ 0x0019|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_83 [shape=record,label="{83\:\ 0x0019|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x00d9, blocks: (B:83:0x0019), top: B:139:0x0019 \}\lCatch: all \-\> 0x00d9\l|0x0019: IGET  (r9 I:long) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.controlState long A[Catch: all \-\> 0x00d9, TRY_ENTER, TRY_LEAVE] (LINE:996)\l}"];
Node_84 [shape=record,label="{84\:\ 0x001b|0x001b: CONST  (r11 I:??[long, double]) = (2097151(0x1fffff, double:1.0361303E\-317) ??[long, double]) \l0x001e: ARITH  (r9 I:long) = (r9 I:long) & (r11 I:long) \l0x001f: CAST (r7 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (int) (r9 I:long) \l}"];
Node_85 [shape=record,label="{85\:\ 0x0021|0x0021: MONITOR_EXIT  (r5 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)]) \l}"];
Node_86 [shape=record,label="{86\:\ 0x0023|0x0023: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:337)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0024|0x0024: IF  (r3 I:??[int, byte, short, char]) \> (r0 I:??[int, byte, short, char] A[D('created' int)])  \-\> B:108:0x0070  (LINE:339)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0026|0x0026: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_89 [shape=record,label="{89\:\ 0x0027|LOOP_START\lLOOP:0: B:89:0x0027\-\>B:106:0x006d\l|0x0027: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0028: ARITH  (r5 I:int) = (r5 I:int) + (r3 I:int) \l0x0029: IGET  (r7 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray  (LINE:340)\l0x002b: INVOKE  (r7 I:java.lang.Object) = (r7 I:kotlinx.coroutines.internal.ResizableAtomicArray), (r6 I:int A[D('i' int)]) type: VIRTUAL call: kotlinx.coroutines.internal.ResizableAtomicArray.get(int):java.lang.Object A[MD:(int):T (m)]\l0x002f: INVOKE  (r7 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0032: CHECK_CAST (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_90 [shape=record,label="{90\:\ 0x0034|0x0034: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])  \-\> B:105:0x006b  (LINE:341)\l}"];
Node_91 [shape=record,label="{91\:\ 0x0036|LOOP_START\lLOOP:1: B:91:0x0036\-\>B:93:0x003c\l|0x0036: INVOKE  (r8 I:boolean) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.isAlive():boolean A[MD:():boolean (c)] (LINE:342)\l}"];
Node_92 [shape=record,label="{92\:\ 0x003a|0x003a: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:145:0x0048 \l}"];
Node_93 [shape=record,label="{93\:\ 0x003c|LOOP_END\lLOOP:1: B:91:0x0036\-\>B:93:0x003c\l|0x003c: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])  (LINE:343)\l0x003d: CHECK_CAST (r8 I:java.lang.Thread) = (java.lang.Thread) (r8 I:??[OBJECT, ARRAY]) \l0x003f: INVOKE  (r8 I:java.lang.Thread) type: STATIC call: java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread):void A[MD:(java.lang.Thread):void (c)]\l0x0042: MOVE  (r8 I:??[long, double]) = (r18 I:??[long, double] A[D('timeout' long)])  (LINE:344)\l0x0044: INVOKE  \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r8 I:long)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.join(long):void A[MD:(long):void throws java.lang.InterruptedException (c)]\l}"];
Node_145 [shape=record,label="{145\:\ 0x0048|SYNTHETIC\l}"];
Node_94 [shape=record,label="{94\:\ 0x0048|0x0048: MOVE  (r8 I:??[long, double]) = (r18 I:??[long, double] A[D('timeout' long)])  (LINE:346)\l0x004a: IGET  (r10 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l0x004c: INVOKE  (r11 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:347)\l}"];
Node_95 [shape=record,label="{95\:\ 0x0050|0x0050: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:104:0x0063 \l}"];
Node_96 [shape=record,label="{96\:\ 0x0052|0x0052: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:986)\l0x0053: SGET  (r12 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:347)\l}"];
Node_97 [shape=record,label="{97\:\ 0x0055|0x0055: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('state' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)]) != (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:99:0x0059 \l}"];
Node_98 [shape=record,label="{98\:\ 0x0057|0x0057: CONST  (r11 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-CoroutineScheduler$shutdown$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_100 [shape=record,label="{100\:\ 0x005a|0x005a: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-CoroutineScheduler$shutdown$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:142:0x005d \l}"];
Node_142 [shape=record,label="{142\:\ 0x005d|SYNTHETIC\l}"];
Node_102 [shape=record,label="{102\:\ 0x005d|0x005d: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x005f: INVOKE  (r2 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_103 [shape=record,label="{103\:\ 0x0062|0x0062: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_99 [shape=record,label="{99\:\ 0x0059|0x0059: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-CoroutineScheduler$shutdown$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_104 [shape=record,label="{104\:\ 0x0063|0x0063: IGET  (r11 I:kotlinx.coroutines.scheduling.WorkQueue) = \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.localQueue kotlinx.coroutines.scheduling.WorkQueue  (LINE:348)\l0x0065: IGET  (r12 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue kotlinx.coroutines.scheduling.GlobalQueue \l0x0067: INVOKE  (r11 I:kotlinx.coroutines.scheduling.WorkQueue), (r12 I:kotlinx.coroutines.scheduling.GlobalQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.WorkQueue.offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue):void A[MD:(kotlinx.coroutines.scheduling.GlobalQueue):void (m)]\l}"];
Node_144 [shape=record,label="{144\:\ 0x006d|SYNTHETIC\l}"];
Node_106 [shape=record,label="{106\:\ 0x006d|LOOP_END\lLOOP:0: B:89:0x0027\-\>B:106:0x006d\l|0x006d: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('created' int)])  \-\> B:89:0x0027  (LINE:339)\l}"];
Node_141 [shape=record,label="{141\:\ 0x0072|SYNTHETIC\l}"];
Node_109 [shape=record,label="{109\:\ 0x0072|0x0072: IGET  (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue kotlinx.coroutines.scheduling.GlobalQueue  (LINE:352)\l0x0074: INVOKE  (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.close():void A[MD:():void (m)]\l0x0077: IGET  (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue kotlinx.coroutines.scheduling.GlobalQueue  (LINE:353)\l0x0079: INVOKE  (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.close():void A[MD:():void (m)]\l}"];
Node_111 [shape=record,label="{111\:\ 0x007d|LOOP_START\lLOOP:2: B:111:0x007d\-\>B:134:0x00d4\l|0x007d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:113:0x0081  (LINE:356)\l}"];
Node_112 [shape=record,label="{112\:\ 0x007f|0x007f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_114 [shape=record,label="{114\:\ 0x0085|0x0085: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:148:0x00d4 \l}"];
Node_115 [shape=record,label="{115\:\ 0x0087|0x0087: IGET  (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalCpuQueue kotlinx.coroutines.scheduling.GlobalQueue  (LINE:357)\l0x0089: INVOKE  (r5 I:java.lang.Object) = (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.removeFirstOrNull():java.lang.Object A[MD:():E (m)]\l0x008d: CHECK_CAST (r5 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_116 [shape=record,label="{116\:\ 0x008f|0x008f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:147:0x00d4 \l}"];
Node_117 [shape=record,label="{117\:\ 0x0091|0x0091: IGET  (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue kotlinx.coroutines.scheduling.GlobalQueue  (LINE:358)\l0x0093: INVOKE  (r5 I:java.lang.Object) = (r5 I:kotlinx.coroutines.scheduling.GlobalQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.removeFirstOrNull():java.lang.Object A[MD:():E (m)]\l0x0097: CHECK_CAST (r5 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_118 [shape=record,label="{118\:\ 0x0099|0x0099: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:149:0x00d4 \l}"];
Node_146 [shape=record,label="{146\:\ 0x009c|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x009c|0x009c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:121:0x009f  (LINE:363)\l}"];
Node_121 [shape=record,label="{121\:\ 0x009f|0x009f: SGET  (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l0x00a1: INVOKE  \l  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('currentWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean (m)]\l}"];
Node_122 [shape=record,label="{122\:\ 0x00a4|0x00a4: INVOKE  (r5 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:365)\l}"];
Node_123 [shape=record,label="{123\:\ 0x00a8|0x00a8: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:131:0x00cc \l}"];
Node_124 [shape=record,label="{124\:\ 0x00aa|0x00aa: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:986)\l0x00ab: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY])  (LINE:365)\l0x00ad: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00ae: IGET  (r10 I:long) = \l  (r6 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.controlState long  (LINE:997)\l0x00b0: MOVE  (r12 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) \l0x00b1: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b2: CONST  (r14 I:??[long, double]) = (9223367638808264704(0x7ffffc0000000000, double:NaN) ??[long, double])  (LINE:1001)\l0x00b7: ARITH  (r14 I:long) = (r14 I:long) & (r10 I:long A[D('state$iv$iv' long)]) \l0x00b8: CONST  (r16 I:??[int, float, short, byte, char]) = (42 ??[int, float, short, byte, char]) \l0x00ba: ARITH  (r14 I:long) = (r14 I:long) \>\> (r16 I:long) \l0x00bc: CAST (r10 I:int A[D('state$iv$iv' long)]) = (int) (r14 I:long) \l0x00be: IGET  (r6 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize int  (LINE:365)\l}"];
Node_125 [shape=record,label="{125\:\ 0x00c0|0x00c0: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:127:0x00c3 \l}"];
Node_126 [shape=record,label="{126\:\ 0x00c2|0x00c2: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_127 [shape=record,label="{127\:\ 0x00c3|0x00c3: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:129:0x00c6 \l}"];
Node_129 [shape=record,label="{129\:\ 0x00c6|0x00c6: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x00c8: INVOKE  (r2 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_130 [shape=record,label="{130\:\ 0x00cb|0x00cb: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_131 [shape=record,label="{131\:\ 0x00cc|0x00cc: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:366)\l0x00ce: IPUT  (r2 I:long), (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack long \l0x00d0: IPUT  (r2 I:long), (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.controlState long  (LINE:367)\l}"];
Node_132 [shape=record,label="{132\:\ 0x00d2|RETURN\l|0x00d2: RETURN    (LINE:368)\l}"];
Node_149 [shape=record,label="{149\:\ 0x00d4|SYNTHETIC\l}"];
Node_134 [shape=record,label="{134\:\ 0x00d4|LOOP_END\lLOOP:2: B:111:0x007d\-\>B:134:0x00d4\l|0x00d5: INVOKE  \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r5 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task):void A[MD:(kotlinx.coroutines.scheduling.Task):void (m)] (LINE:360)\l}"];
Node_147 [shape=record,label="{147\:\ 0x00d4|SYNTHETIC\l}"];
Node_148 [shape=record,label="{148\:\ 0x00d4|SYNTHETIC\l}"];
Node_113 [shape=record,label="{113\:\ 0x0081|0x0081: INVOKE  (r5 I:kotlinx.coroutines.scheduling.Task) = \l  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('currentWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r3 I:boolean)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findTask(boolean):kotlinx.coroutines.scheduling.Task A[MD:(boolean):kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_105 [shape=record,label="{105\:\ 0x006b|0x006b: MOVE  (r8 I:??[long, double]) = (r18 I:??[long, double] A[D('timeout' long)])  (LINE:341)\l}"];
Node_143 [shape=record,label="{143\:\ 0x006d|SYNTHETIC\l}"];
Node_108 [shape=record,label="{108\:\ 0x0070|0x0070: MOVE  (r8 I:??[long, double]) = (r18 I:??[long, double] A[D('timeout' long)]) \l}"];
Node_140 [shape=record,label="{140\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_135 [shape=record,label="{135\:\ 0x00d9|ExcHandler: all \-\> 0x00d9\l|0x00d9: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x00d9] (LINE:337)\l}"];
Node_136 [shape=record,label="{136\:\ 0x00da|0x00da: MOVE  (r8 I:??[long, double]) = (r18 I:??[long, double] A[D('timeout' long)]) \l0x00dc: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_138 [shape=record,label="{138\:\ 0x00de|0x00de: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.CoroutineScheduler.shutdown((r17 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r18 I:long A[D('timeout' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:93:0x003c \-\> B:91:0x0036, CROSS_EDGE: B:103:0x0062 \-\> B:76:?, BACK_EDGE: B:106:0x006d \-\> B:89:0x0027, CROSS_EDGE: B:130:0x00cb \-\> B:76:?, CROSS_EDGE: B:132:0x00d2 \-\> B:76:?, CROSS_EDGE: B:125:0x00c0 \-\> B:127:0x00c3, CROSS_EDGE: B:123:0x00a8 \-\> B:131:0x00cc, CROSS_EDGE: B:119:0x009c \-\> B:122:0x00a4, BACK_EDGE: B:134:0x00d4 \-\> B:111:0x007d, CROSS_EDGE: B:116:0x008f \-\> B:134:0x00d4, CROSS_EDGE: B:114:0x0085 \-\> B:134:0x00d4, CROSS_EDGE: B:113:0x0081 \-\> B:114:0x0085, CROSS_EDGE: B:99:0x0059 \-\> B:100:0x005a, CROSS_EDGE: B:95:0x0050 \-\> B:104:0x0063, CROSS_EDGE: B:105:0x006b \-\> B:106:0x006d, CROSS_EDGE: B:108:0x0070 \-\> B:109:0x0072, CROSS_EDGE: B:138:0x00de \-\> B:76:?, CROSS_EDGE: B:139:0x0019 \-\> B:135:0x00d9\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x0020: r7 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0019\-0x0020: r8 '$i$f$getCreatedWorkers' I\l  0x0016\-0x0021: r0 '$i$a$\-synchronized\-CoroutineScheduler$shutdown$created$1' I\l  0x0013\-0x0023: r5 'lock$iv' Ljava\/lang\/Object;\l  0x0014\-0x0023: r6 '$i$f$synchronized' I\l  0x0053\-0x005a: r11 '$i$a$\-assert\-CoroutineScheduler$shutdown$1' I\l  0x004c\-0x006b: r10 'state' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$WorkerState;\l  0x0034\-0x006d: r7 'worker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  0x0028\-0x0070: r6 'i' I\l  0x00b0\-0x00bd: r10 'state$iv$iv' J\l  0x00b1\-0x00bd: r12 'this_$iv$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x00b2\-0x00bd: r13 '$i$f$availableCpuPermits' I\l  0x00ad\-0x00be: r6 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x00ae\-0x00be: r7 '$i$f$getAvailableCpuPermits' I\l  0x00ab\-0x00c3: r5 '$i$a$\-assert\-CoroutineScheduler$shutdown$2' I\l  0x00d5\-0x00d8: r5 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0024\-0x00d9: r0 'created' I\l  0x0011\-0x00de: r4 'currentWorker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  0x00d9\-0x00de: r5 'lock$iv' Ljava\/lang\/Object;\l  0x00d9\-0x00de: r6 '$i$f$synchronized' I\l  \-1 \-0x00de: r18 'timeout' J\lTryCatch #0 \{all \-\> 0x00d9, blocks: (B:83:0x0019), top: B:139:0x0019 \}\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [337=4]\}\l}"];
MethodNode -> Node_75;Node_75 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_76;
Node_80 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_139;
Node_139 -> Node_83;
Node_139 -> Node_135;
Node_83 -> Node_84;
Node_83 -> Node_140;
Node_84 -> Node_85;
Node_85 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_108;
Node_88 -> Node_89;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_105;
Node_91 -> Node_92;
Node_92 -> Node_93[style=dashed];
Node_92 -> Node_145;
Node_93 -> Node_91;
Node_145 -> Node_94;
Node_94 -> Node_95;
Node_95 -> Node_96[style=dashed];
Node_95 -> Node_104;
Node_96 -> Node_97;
Node_97 -> Node_98[style=dashed];
Node_97 -> Node_99;
Node_98 -> Node_100;
Node_100 -> Node_104[style=dashed];
Node_100 -> Node_142;
Node_142 -> Node_102;
Node_102 -> Node_103;
Node_103 -> Node_76;
Node_99 -> Node_100;
Node_104 -> Node_144;
Node_144 -> Node_106;
Node_106 -> Node_89;
Node_106 -> Node_141[style=dashed];
Node_141 -> Node_109;
Node_109 -> Node_111;
Node_111 -> Node_112[style=dashed];
Node_111 -> Node_113;
Node_112 -> Node_114;
Node_114 -> Node_115[style=dashed];
Node_114 -> Node_148;
Node_115 -> Node_116;
Node_116 -> Node_117[style=dashed];
Node_116 -> Node_147;
Node_117 -> Node_118;
Node_118 -> Node_146[style=dashed];
Node_118 -> Node_149;
Node_146 -> Node_119;
Node_119 -> Node_121;
Node_119 -> Node_122[style=dashed];
Node_121 -> Node_122;
Node_122 -> Node_123;
Node_123 -> Node_124[style=dashed];
Node_123 -> Node_131;
Node_124 -> Node_125;
Node_125 -> Node_126[style=dashed];
Node_125 -> Node_127;
Node_126 -> Node_127;
Node_127 -> Node_129;
Node_127 -> Node_131[style=dashed];
Node_129 -> Node_130;
Node_130 -> Node_76;
Node_131 -> Node_132;
Node_132 -> Node_76;
Node_149 -> Node_134;
Node_134 -> Node_111;
Node_147 -> Node_134;
Node_148 -> Node_134;
Node_113 -> Node_114;
Node_105 -> Node_143;
Node_143 -> Node_106;
Node_108 -> Node_109;
Node_140 -> Node_135;
Node_135 -> Node_136;
Node_136 -> Node_138;
Node_138 -> Node_76;
}

