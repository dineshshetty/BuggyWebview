digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.\<init\>(IIJLjava\/lang\/String;)V" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|r5.corePoolSize = r6\lr5.maxPoolSize = r7\lr5.idleWorkerKeepAliveNs = r8\lr5.schedulerName = r10\lr1 = true\l}"];
Node_35 [shape=record,label="{35\:\ 0x000e|if (r6 \< 1) goto L30\l}"];
Node_36 [shape=record,label="{36\:\ 0x0010|r2 = true\l}"];
Node_38 [shape=record,label="{38\:\ 0x0013|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v17 boolean) binds: [B:37:0x0012, B:36:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L28\l}"];
Node_39 [shape=record,label="{39\:\ 0x0015|if (r7 \< r6) goto L27\l}"];
Node_40 [shape=record,label="{40\:\ 0x0017|r2 = true\l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|PHI: r2 \l  PHI: (r2v5 boolean) = (r2v4 boolean), (r2v16 boolean) binds: [B:41:0x0019, B:40:0x0017] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_43 [shape=record,label="{43\:\ 0x001c|if (r2 == false) goto L25\l}"];
Node_44 [shape=record,label="{44\:\ 0x001e}"];
Node_45 [shape=record,label="{45\:\ 0x0021|if (r7 \> 2097150) goto L24\l}"];
Node_46 [shape=record,label="{46\:\ 0x0023|r2 = true\l}"];
Node_48 [shape=record,label="{48\:\ 0x0026|PHI: r2 \l  PHI: (r2v9 boolean) = (r2v8 boolean), (r2v15 boolean) binds: [B:47:0x0025, B:46:0x0023] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L22\l}"];
Node_49 [shape=record,label="{49\:\ 0x0028}"];
Node_50 [shape=record,label="{50\:\ 0x002c|if ((r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1)) \<= 0) goto L15\l}"];
Node_52 [shape=record,label="{52\:\ 0x002f|r1 = false\l}"];
Node_53 [shape=record,label="{53\:\ 0x0030|PHI: r1 \l  PHI: (r1v7 boolean) = (r1v0 boolean), (r1v15 boolean) binds: [B:50:0x002c, B:52:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L20\l}"];
Node_54 [shape=record,label="{54\:\ 0x0033|r5.globalCpuQueue = new kotlinx.coroutines.scheduling.Tasks()\lr5.globalBlockingQueue = new kotlinx.coroutines.scheduling.Tasks()\lr5.parkedWorkersStack = 0\lr5.workers = new kotlinx.coroutines.internal.ResizableAtomicArray\<\>(r6 + 1)\lr5.controlState = ((long) r6) \<\< 42\lr5._isTerminated = 0\l}"];
Node_55 [shape=record,label="{55\:\ 0x0054|RETURN\l|return\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0055|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Idle worker keep alive time \")\lr1.append(r8)\lr1.append(\" must be positive\")\l}"];
Node_57 [shape=record,label="{57\:\ 0x0075|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_58 [shape=record,label="{58\:\ 0x0076|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Max pool size \")\lr1.append(r7)\lr1.append(\" should not exceed maximal supported number of threads 2097150\")\l}"];
Node_59 [shape=record,label="{59\:\ 0x0094|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_47 [shape=record,label="{47\:\ 0x0025|r2 = false\l}"];
Node_60 [shape=record,label="{60\:\ 0x0095|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Max pool size \")\lr1.append(r7)\lr1.append(\" should be greater than or equals to core pool size \")\lr1.append(r6)\l}"];
Node_61 [shape=record,label="{61\:\ 0x00b6|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_41 [shape=record,label="{41\:\ 0x0019|r2 = false\l}"];
Node_62 [shape=record,label="{62\:\ 0x00b7|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Core pool size \")\lr1.append(r6)\lr1.append(\" should be at least 1\")\l}"];
Node_63 [shape=record,label="{63\:\ 0x00d7|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_37 [shape=record,label="{37\:\ 0x0012|r2 = false\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.CoroutineScheduler.\<init\>((r5v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r6v0 'corePoolSize' int A[D('corePoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'maxPoolSize' int A[D('maxPoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'idleWorkerKeepAliveNs' long A[D('idleWorkerKeepAliveNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'schedulerName' java.lang.String A[D('schedulerName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:57:0x0075 \-\> B:33:?, CROSS_EDGE: B:50:0x002c \-\> B:53:0x0030, CROSS_EDGE: B:59:0x0094 \-\> B:33:?, CROSS_EDGE: B:47:0x0025 \-\> B:48:0x0026, CROSS_EDGE: B:61:0x00b6 \-\> B:33:?, CROSS_EDGE: B:41:0x0019 \-\> B:42:0x001a, CROSS_EDGE: B:63:0x00d7 \-\> B:33:?, CROSS_EDGE: B:37:0x0012 \-\> B:38:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_62;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_60;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_58;
Node_49 -> Node_50;
Node_50 -> Node_52;
Node_50 -> Node_53[style=dashed];
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_56;
Node_54 -> Node_55;
Node_55 -> Node_33;
Node_56 -> Node_57;
Node_57 -> Node_33;
Node_58 -> Node_59;
Node_59 -> Node_33;
Node_47 -> Node_48;
Node_60 -> Node_61;
Node_61 -> Node_33;
Node_41 -> Node_42;
Node_62 -> Node_63;
Node_63 -> Node_33;
Node_37 -> Node_38;
}

