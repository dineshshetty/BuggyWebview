digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(Lkotlinx\/coroutines\/scheduling\/Task;)V" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x000f, blocks: (B:28:0x0001), top: B:48:0x0001 \}\lCatch: all \-\> 0x000f\l|0x0001: INVOKE  (r4 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)]) type: VIRTUAL call: kotlinx.coroutines.scheduling.Task.run():void A[Catch: all \-\> 0x000f, MD:():void (c), TRY_ENTER, TRY_LEAVE] (LINE:570)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0004|0x0004: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:575)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000b \l}"];
Node_32 [shape=record,label="{32\:\ 0x000b|0x000b: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.unTrackTask():void A[MD:():void (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0022|RETURN\lORIG_RETURN\l|0x0022: RETURN    (LINE:577)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lRETURN\l|0x0022: RETURN   A[SYNTHETIC] (LINE:577)\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_34 [shape=record,label="{34\:\ 0x000f|ExcHandler: all \-\> 0x000f\l|0x000f: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x000f] (LINE:571)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0010|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0023, blocks: (B:35:0x0010), top: B:46:0x0010 \}\lCatch: all \-\> 0x0023\l|0x0010: INVOKE  (r1 I:java.lang.Thread) =  type: STATIC call: java.lang.Thread.currentThread():java.lang.Thread A[Catch: all \-\> 0x0023, MD:():java.lang.Thread (c), TRY_ENTER] (LINE:572)\l0x0014: INVOKE  (r2 I:java.lang.Thread$UncaughtExceptionHandler) = (r1 I:java.lang.Thread A[D('thread' java.lang.Thread)]) type: VIRTUAL call: java.lang.Thread.getUncaughtExceptionHandler():java.lang.Thread$UncaughtExceptionHandler A[Catch: all \-\> 0x0023, MD:():java.lang.Thread$UncaughtExceptionHandler (c)] (LINE:573)\l0x0018: INVOKE  \l  (r2 I:java.lang.Thread$UncaughtExceptionHandler)\l  (r1 I:java.lang.Thread A[D('thread' java.lang.Thread)])\l  (r0 I:java.lang.Throwable A[D('e' java.lang.Throwable)])\l type: INTERFACE call: java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Throwable):void A[Catch: all \-\> 0x0023, MD:(java.lang.Thread, java.lang.Throwable):void (c), TRY_LEAVE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x001b|0x001b: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:575)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001f|0x001f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000b \l}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|0x0022: RETURN   A[SYNTHETIC] (LINE:577)\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|ExcHandler: all \-\> 0x0023\l|0x0023: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0023] (LINE:574)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0024|0x0024: INVOKE  (r1 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:575)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0028|0x0028: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x002b \l}"];
Node_44 [shape=record,label="{44\:\ 0x002b|0x002b: INVOKE  (r1 I:kotlinx.coroutines.AbstractTimeSource) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.unTrackTask():void A[MD:():void (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely((r3 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0008 \-\> B:39:0x0022, CROSS_EDGE: B:37:0x001f \-\> B:32:0x000b, CROSS_EDGE: B:37:0x001f \-\> B:39:0x0022, CROSS_EDGE: B:45:0x002e \-\> B:27:?, CROSS_EDGE: B:42:0x0028 \-\> B:45:0x002e, CROSS_EDGE: B:46:0x0010 \-\> B:40:0x0023, CROSS_EDGE: B:48:0x0001 \-\> B:34:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x001b: r0 'e' Ljava\/lang\/Throwable;\l  0x0014\-0x001b: r1 'thread' Ljava\/lang\/Thread;\l  \-1 \-0x002e: r4 'task' Lkotlinx\/coroutines\/scheduling\/Task;\lTryCatch #0 \{all \-\> 0x0023, blocks: (B:35:0x0010), top: B:46:0x0010 \}, TryCatch #1 \{all \-\> 0x000f, blocks: (B:28:0x0001), top: B:48:0x0001 \}\l}"];
MethodNode -> Node_26;Node_26 -> Node_48;
Node_48 -> Node_28;
Node_48 -> Node_34;
Node_28 -> Node_29;
Node_28 -> Node_49;
Node_29 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_50[style=dashed];
Node_32 -> Node_39;
Node_39 -> Node_27;
Node_50 -> Node_27;
Node_49 -> Node_34;
Node_34 -> Node_46;
Node_46 -> Node_35;
Node_46 -> Node_40;
Node_35 -> Node_36;
Node_35 -> Node_47;
Node_36 -> Node_37;
Node_37 -> Node_32;
Node_37 -> Node_51[style=dashed];
Node_51 -> Node_27;
Node_47 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_45[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_27;
}

