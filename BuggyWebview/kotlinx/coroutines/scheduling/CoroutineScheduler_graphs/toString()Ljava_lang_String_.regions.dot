digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.toString()Ljava\/lang\/String;" {
subgraph cluster_Region_1649748956 {
label = "R(4:1|(2:3|(2:6|7)(0))|31|32)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0000|int r0 = 0\lint r1 = 0\lint r2 = 0\lint r3 = 0\lint r4 = 0\ljava.util.ArrayList java.util.ArrayList r5 = new java.util.ArrayList()\lint int r6 = r15.workers.currentLength()\lint r7 = 1\l}"];
subgraph cluster_LoopRegion_657524563 {
label = "LOOP:0: (2:3|(2:6|7)(0))";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0011|LOOP_START\lLOOP:0: B:40:0x0011\-\>B:65:0x0011\lPHI: r0 r1 r2 r3 r4 r7 \l  PHI: (r0v1 'parkedWorkers' int) = (r0v0 'parkedWorkers' int), (r0v2 'parkedWorkers' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'blockingWorkers' int) = (r1v0 'blockingWorkers' int), (r1v2 'blockingWorkers' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'cpuWorkers' int) = (r2v0 'cpuWorkers' int), (r2v2 'cpuWorkers' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'dormant' int) = (r3v0 'dormant' int), (r3v2 'dormant' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'terminated' int) = (r4v0 'terminated' int), (r4v2 'terminated' int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:39:0x0000, B:65:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 \< r6) goto L3\l}"];
subgraph cluster_Region_1570395133 {
label = "R(2:3|(2:6|7)(0))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0013|int r8 = r7\lr7++\lkotlinx.coroutines.scheduling.CoroutineScheduler$Worker kotlinx.coroutines.scheduling.CoroutineScheduler.Worker r9 = r15.workers.get(r8)\l}"];
subgraph cluster_IfRegion_507454199 {
label = "IF [B:42:0x001e] THEN: R(2:6|7) ELSE: R(0)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x001e|if (r9 != null) goto L5\l}"];
subgraph cluster_Region_1277925386 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x0021|int int r10 = r9.localQueue.getSize$kotlinx_coroutines_core()\l}"];
subgraph cluster_SwitchRegion_1661932867 {
label = "Switch: 5
 case 1 -> R(2:26|27)
 case 2 -> R(2:23|24)
 case 3 -> R(2:20|21)
 case 4 -> R(2:13|(2:16|1)(1:18))
 case 5 -> R(2:9|10)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x0031|switch(kotlinx.coroutines.scheduling.CoroutineScheduler.WhenMappings.$EnumSwitchMapping$0[r9.state.ordinal()]) \{\l    case 1: goto L25;\l    case 2: goto L22;\l    case 3: goto L19;\l    case 4: goto L12;\l    case 5: goto L8;\l    default: goto L28;\l\}\l}"];
subgraph cluster_Region_81743648 {
label = "R(2:26|27)";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x0088|r0++\l}"];
Node_73 [shape=record,label="{73\:\ 0x0011|SYNTHETIC\l|continue\l}"];
}
subgraph cluster_Region_712774065 {
label = "R(2:23|24)";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x006e|r1++\ljava.lang.StringBuilder java.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(r10)\lr12.append('b')\lr5.add(r12.toString())\l}"];
Node_72 [shape=record,label="{72\:\ 0x0011|SYNTHETIC\l|continue\l}"];
}
subgraph cluster_Region_1868235941 {
label = "R(2:20|21)";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ 0x0054|r2++\ljava.lang.StringBuilder java.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(r10)\lr12.append('c')\lr5.add(r12.toString())\l}"];
Node_71 [shape=record,label="{71\:\ 0x0011|SYNTHETIC\l|continue\l}"];
}
subgraph cluster_Region_614193497 {
label = "R(2:13|(2:16|1)(1:18))";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0038|r3++\l}"];
subgraph cluster_IfRegion_1820702564 {
label = "IF [B:49:0x003a] THEN: R(2:16|1) ELSE: R(1:18)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x003a|if (r10 \> 0) goto L15\l}"];
subgraph cluster_Region_276318165 {
label = "R(2:16|1)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x003c|java.lang.StringBuilder java.lang.StringBuilder r12 = new java.lang.StringBuilder()\lr12.append(r10)\lr12.append('d')\lr5.add(r12.toString())\l}"];
Node_InsnContainer_653870238 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_1147965204 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_69 [shape=record,label="{69\:\ 0x0011|SYNTHETIC\l|continue\l}"];
}
}
}
subgraph cluster_Region_1522742437 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x0035|r4++\l}"];
Node_68 [shape=record,label="{68\:\ 0x0011|SYNTHETIC\l|continue\l}"];
}
}
}
subgraph cluster_Region_143654434 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_55 [shape=record,label="{55\:\ 0x008c|long long r6 = r15.controlState\l}"];
Node_56 [shape=record,label="{56\:\ 0x015a|RETURN\l|return r15.schedulerName + '@' + kotlinx.coroutines.DebugStrings.getHexAddress(r15) + \"[Pool Size \{core = \" + r15.corePoolSize + \", max = \" + r15.maxPoolSize + \"\}, Worker States \{CPU = \" + r2 + \", blocking = \" + r1 + \", parked = \" + r0 + \", dormant = \" + r3 + \", terminated = \" + r4 + \"\}, running workers queues = \" + r5 + \", global CPU queue size = \" + r15.globalCpuQueue.getSize() + \", global blocking queue size = \" + r15.globalBlockingQueue.getSize() + \", Control State \{created workers= \" + ((int) (2097151 & r6)) + \", blocking tasks = \" + ((int) ((kotlinx.coroutines.scheduling.CoroutineScheduler.BLOCKING_MASK & r6) \>\> 21)) + \", CPUs acquired = \" + (r15.corePoolSize \- ((int) ((kotlinx.coroutines.scheduling.CoroutineScheduler.CPU_PERMITS_MASK & r6) \>\> 42))) + \"\}]\"\l}"];
}
Node_37 [shape=record,color=red,label="{37\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x0021|SYNTHETIC\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0035|SYNTHETIC\l}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x0011|LOOP_END\lSYNTHETIC\lLOOP:0: B:40:0x0011\-\>B:65:0x0011\lPHI: r0 r1 r2 r3 r4 \l  PHI: (r0v2 'parkedWorkers' int) = (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v3 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int), (r0v1 'parkedWorkers' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 'blockingWorkers' int) = (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v3 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int), (r1v1 'blockingWorkers' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 'cpuWorkers' int) = (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v3 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int), (r2v1 'cpuWorkers' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'dormant' int) = (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v1 'dormant' int), (r3v3 'dormant' int), (r3v3 'dormant' int), (r3v1 'dormant' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'terminated' int) = (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v1 'terminated' int), (r4v3 'terminated' int) binds: [B:66:0x0011, B:67:0x0011, B:73:0x0011, B:72:0x0011, B:71:0x0011, B:69:0x0011, B:70:0x0011, B:68:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x0038|SYNTHETIC\l}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x003c|SYNTHETIC\l}"];
Node_70 [shape=record,color=red,label="{70\:\ 0x0011|SYNTHETIC\l}"];
Node_61 [shape=record,color=red,label="{61\:\ 0x0054|SYNTHETIC\l}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x006e|SYNTHETIC\l}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x0088|SYNTHETIC\l}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x0011|SYNTHETIC\l}"];
Node_66 [shape=record,color=red,label="{66\:\ 0x0011|SYNTHETIC\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x008c|SYNTHETIC\l}"];
Node_38 [shape=record,color=red,label="{38\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.String kotlinx.coroutines.scheduling.CoroutineScheduler.toString((r15v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | BACK_EDGE: B:47:0x0035 \-\> B:40:0x0011, BACK_EDGE: B:49:0x003a \-\> B:40:0x0011, BACK_EDGE: B:50:0x003c \-\> B:40:0x0011, BACK_EDGE: B:51:0x0054 \-\> B:40:0x0011, BACK_EDGE: B:52:0x006e \-\> B:40:0x0011, BACK_EDGE: B:53:0x0088 \-\> B:40:0x0011, BACK_EDGE: B:45:0x0031 \-\> B:40:0x0011, BACK_EDGE: B:42:0x001e \-\> B:40:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [548=27]\l \-\> TODO: convert one arg to string using `String.valueOf()`, args: [(r10v5 'queueSize' int A[D('queueSize' int)]), ('d' char)]\l \-\> TODO: convert one arg to string using `String.valueOf()`, args: [(r10v5 'queueSize' int A[D('queueSize' int)]), ('c' char)]\l \-\> TODO: convert one arg to string using `String.valueOf()`, args: [(r10v5 'queueSize' int A[D('queueSize' int)]), ('b' char)]\}\l}"];
MethodNode -> Node_37;Node_39 -> Node_40;
Node_40 -> Node_41;
Node_40 -> Node_57[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_58;
Node_42 -> Node_66[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_59;
Node_45 -> Node_60;
Node_45 -> Node_61;
Node_45 -> Node_62;
Node_45 -> Node_63;
Node_45 -> Node_67;
Node_53 -> Node_73;
Node_73 -> Node_65;
Node_52 -> Node_72;
Node_72 -> Node_65;
Node_51 -> Node_71;
Node_71 -> Node_65;
Node_48 -> Node_49;
Node_49 -> Node_64;
Node_49 -> Node_69[style=dashed];
Node_50 -> Node_70;
Node_69 -> Node_65;
Node_47 -> Node_68;
Node_68 -> Node_65;
Node_55 -> Node_56;
Node_56 -> Node_38;
Node_37 -> Node_39;
Node_58 -> Node_44;
Node_59 -> Node_47;
Node_65 -> Node_40;
Node_60 -> Node_48;
Node_64 -> Node_50;
Node_70 -> Node_65;
Node_61 -> Node_51;
Node_62 -> Node_52;
Node_63 -> Node_53;
Node_67 -> Node_65;
Node_66 -> Node_65;
Node_57 -> Node_55;
}

