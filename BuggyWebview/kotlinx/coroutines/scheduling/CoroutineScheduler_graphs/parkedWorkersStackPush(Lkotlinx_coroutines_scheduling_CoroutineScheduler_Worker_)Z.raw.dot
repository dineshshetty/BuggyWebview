digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;)Z" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) = \l  (r20 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.getNextParkedWorker():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:177)\l0x0004: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK kotlinx.coroutines.internal.Symbol \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000a \l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|RETURN\l|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY])  (LINE:182)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x000d|LOOP_START\lLOOP:0: B:28:0x000d\-\>B:39:0x0055\l|0x000e: IGET  (r9 I:long) = \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('$this$loop$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack long  (LINE:985)\l0x0010: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: CONST  (r3 I:??[long, double]) = (2097151(0x1fffff, double:1.0361303E\-317) ??[long, double])  (LINE:183)\l0x0014: ARITH  (r3 I:long) = (r3 I:long) & (r9 I:long A[D('top' long)]) \l0x0015: CAST (r12 I:int) = (int) (r3 I:long) \l0x0016: CONST  (r3 I:??[long, double]) = (2097152(0x200000, double:1.036131E\-317) ??[long, double])  (LINE:184)\l0x0019: ARITH  (r3 I:long) = (r3 I:long) + (r9 I:long A[D('top' long)]) \l0x001a: CONST  (r5 I:??[long, double]) = (\-2097152(0xffffffffffe00000, double:NaN) ??[long, double]) \l0x001d: ARITH  (r13 I:long) = (r3 I:long) & (r5 I:long) \l0x001f: INVOKE  (r15 I:int) = \l  (r20 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.getIndexInArray():int A[MD:():int (m)] (LINE:185)\l0x0023: INVOKE  (r3 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:186)\l0x0027: CONST  (r16 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|0x0029: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x003a \l}"];
Node_30 [shape=record,label="{30\:\ 0x002b|0x002b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:986)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002c|0x002c: IF  (r15 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('updIndex' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0030  (LINE:186)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|0x002e: CONST  (r3 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-CoroutineScheduler$parkedWorkersStackPush$1$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0031|0x0031: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-CoroutineScheduler$parkedWorkersStackPush$1$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0034 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0034|0x0034: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0036: INVOKE  (r2 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0039|0x0039: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0030|0x0030: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-CoroutineScheduler$parkedWorkersStackPush$1$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x003a|0x003a: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY])  (LINE:187)\l0x003c: IGET  (r3 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray \l0x003e: INVOKE  (r3 I:java.lang.Object) = (r3 I:kotlinx.coroutines.internal.ResizableAtomicArray), (r12 I:int A[D('index' int)]) type: VIRTUAL call: kotlinx.coroutines.internal.ResizableAtomicArray.get(int):java.lang.Object A[MD:(int):T (m)]\l0x0042: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)]) \l0x0044: INVOKE  (r8 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r3 I:java.lang.Object) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.setNextParkedWorker(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0047: SGET  (r3 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:193)\l0x0049: CAST (r4 I:long) = (long) (r15 I:int A[D('updIndex' int)]) \l0x004a: ARITH  (r17 I:long) = (r13 I:long A[D('updVersion' long)]) \| (r4 I:long) \l0x004c: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY]) \l0x004e: MOVE  (r5 I:??[long, double]) = (r9 I:??[long, double] A[D('top' long)]) \l0x004f: MOVE  (r7 I:??[long, double]) = (r17 I:??[long, double]) \l0x0051: INVOKE  (r3 I:boolean) = (r3 I:java.util.concurrent.atomic.AtomicLongFieldUpdater), (r4 I:java.lang.Object), (r5 I:long), (r7 I:long) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(java.lang.Object, long, long):boolean A[MD:(T, long, long):boolean (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0055|LOOP_END\lLOOP:0: B:28:0x000d\-\>B:39:0x0055\l|0x0055: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x000d \l}"];
Node_43 [shape=record,label="{43\:\ 0x0057|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0057|RETURN\l|0x0057: RETURN  (r16 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush((r19 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r20 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0039 \-\> B:23:?, CROSS_EDGE: B:40:0x0057 \-\> B:23:?, BACK_EDGE: B:39:0x0055 \-\> B:28:0x000d, CROSS_EDGE: B:33:0x0030 \-\> B:34:0x0031, CROSS_EDGE: B:29:0x0029 \-\> B:38:0x003a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002c\-0x0031: r3 '$i$a$\-assert\-CoroutineScheduler$parkedWorkersStackPush$1$1' I\l  0x0010\-0x0059: r9 'top' J\l  0x0011\-0x0059: r11 '$i$a$\-loop\-CoroutineScheduler$parkedWorkersStackPush$1' I\l  0x0016\-0x0059: r12 'index' I\l  0x001f\-0x0059: r13 'updVersion' J\l  0x0023\-0x0059: r15 'updIndex' I\l  0x000c\-0x0059: r0 '$this$loop$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x000d\-0x0059: r1 '$i$f$loop' I\l  \-1 \-0x0059: r20 'worker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_38[style=dashed];
Node_34 -> Node_42;
Node_42 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_23;
Node_33 -> Node_34;
Node_38 -> Node_39;
Node_39 -> Node_28;
Node_39 -> Node_43[style=dashed];
Node_43 -> Node_40;
Node_40 -> Node_23;
}

