digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark()Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|LOOP_START\lLOOP:0: B:14:0x0000\-\>B:18:0x0010\l|0x0001: INVOKE  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPop():kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[MD:():kotlinx.coroutines.scheduling.CoroutineScheduler$Worker (m)] (LINE:450)\l0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0009 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: SGET  (r2 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.workerCtl$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:451)\l0x000b: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x000c: INVOKE  (r1 I:boolean) = \l  (r2 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater)\l  (r0 I:java.lang.Object A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r3 I:int)\l  (r1 I:int)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.lang.Object, int, int):boolean A[MD:(T, int, int):boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|LOOP_END\lLOOP:0: B:14:0x0000\-\>B:18:0x0010\l|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0000 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])  (LINE:452)\l0x0013: CHECK_CAST (r1 I:java.lang.Thread) = (java.lang.Thread) (r1 I:??[OBJECT, ARRAY]) \l0x0015: INVOKE  (r1 I:java.lang.Thread) type: STATIC call: java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread):void A[MD:(java.lang.Thread):void (c)]\l0x0018: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:453)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|RETURN\l|0x0008: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.tryUnpark((r4 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0019 \-\> B:13:?, BACK_EDGE: B:18:0x0010 \-\> B:14:0x0000\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x001a: r0 'worker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_23[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_14;
Node_18 -> Node_22[style=dashed];
Node_22 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_13;
Node_23 -> Node_16;
Node_16 -> Node_13;
}

