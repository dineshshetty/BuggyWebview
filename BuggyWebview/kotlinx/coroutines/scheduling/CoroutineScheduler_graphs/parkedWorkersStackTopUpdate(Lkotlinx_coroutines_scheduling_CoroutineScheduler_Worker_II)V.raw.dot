digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackTopUpdate(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;II)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY])  (LINE:149)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0003|LOOP_START\lLOOP:0: B:25:0x0003\-\>B:41:0x0003\l|0x0004: IGET  (r8 I:long) = \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('$this$loop$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack long  (LINE:983)\l0x0006: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r2 I:??[long, double]) = (2097151(0x1fffff, double:1.0361303E\-317) ??[long, double])  (LINE:150)\l0x000a: ARITH  (r2 I:long) = (r2 I:long) & (r8 I:long A[D('top' long)]) \l0x000b: CAST (r11 I:int) = (int) (r2 I:long) \l0x000c: CONST  (r2 I:??[long, double]) = (2097152(0x200000, double:1.036131E\-317) ??[long, double])  (LINE:151)\l0x000f: ARITH  (r2 I:long) = (r2 I:long) + (r8 I:long A[D('top' long)]) \l0x0010: CONST  (r4 I:??[long, double]) = (\-2097152(0xffffffffffe00000, double:NaN) ??[long, double]) \l0x0013: ARITH  (r12 I:long) = (r2 I:long) & (r4 I:long) \l0x0015: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('oldIndex' int)])  (LINE:152)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|0x0017: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0023 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0019|0x0019: IF  (r19 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newIndex' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0020  (LINE:153)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|0x001b: INVOKE  (r2 I:int) = \l  (r16 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r17 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):int A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):int (m)] (LINE:154)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|0x0024: MOVE  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:152)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|0x0025: IF  (r15 I:??[int, byte, short, char] A[D('updIndex' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:39:0x0028  (LINE:161)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0028|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0028|0x0028: SGET  (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:162)\l0x002a: CAST (r3 I:long) = (long) (r15 I:int A[D('updIndex' int)]) \l0x002b: ARITH  (r6 I:long) = (r12 I:long A[D('updVersion' long)]) \| (r3 I:long) \l0x002d: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY]) \l0x002f: MOVE  (r4 I:??[long, double]) = (r8 I:??[long, double] A[D('top' long)]) \l0x0030: INVOKE  (r2 I:boolean) = (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater), (r3 I:java.lang.Object), (r4 I:long), (r6 I:long) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(java.lang.Object, long, long):boolean A[MD:(T, long, long):boolean (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0034|0x0034: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0003 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0036|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0036|RETURN\l|0x0036: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0003|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0003|LOOP_END\lSYNTHETIC\lLOOP:0: B:25:0x0003\-\>B:41:0x0003\l}"];
Node_42 [shape=record,label="{42\:\ 0x0003|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|0x0020: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newIndex' int)])  (LINE:156)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0023|0x0023: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)])  (LINE:159)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackTopUpdate((r16 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r17 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('oldIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:int A[D('newIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0034 \-\> B:25:0x0003, BACK_EDGE: B:32:0x0025 \-\> B:25:0x0003, CROSS_EDGE: B:29:0x0020 \-\> B:31:0x0024, CROSS_EDGE: B:30:0x0023 \-\> B:31:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0038: r8 'top' J\l  0x0007\-0x0038: r10 '$i$a$\-loop\-CoroutineScheduler$parkedWorkersStackTopUpdate$1' I\l  0x000c\-0x0038: r11 'index' I\l  0x0015\-0x0038: r12 'updVersion' J\l  0x0025\-0x0038: r15 'updIndex' I\l  0x0002\-0x0038: r0 '$this$loop$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0003\-0x0038: r1 '$i$f$loop' I\l  \-1 \-0x0038: r17 'worker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  \-1 \-0x0038: r18 'oldIndex' I\l  \-1 \-0x0038: r19 'newIndex' I\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_39;
Node_32 -> Node_42[style=dashed];
Node_39 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_40[style=dashed];
Node_35 -> Node_43;
Node_40 -> Node_36;
Node_36 -> Node_23;
Node_43 -> Node_41;
Node_41 -> Node_25;
Node_42 -> Node_41;
Node_29 -> Node_31;
Node_30 -> Node_31;
}

