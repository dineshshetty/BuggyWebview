digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;)Z" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000}"];
Node_25 [shape=record,label="{25\:\ 0x0007|if (r20.getNextParkedWorker() == kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK) goto L5\l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|RETURN\l|return false\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a}"];
Node_28 [shape=record,label="{28\:\ 0x000d|LOOP_START\lLOOP:0: B:28:0x000d\-\>B:39:0x0055\l|long r9 = r19.parkedWorkersStack\lint r12 = (int) (2097151 & r9)\llong r13 = (kotlinx.coroutines.scheduling.CoroutineScheduler.PARKED_VERSION_INC + r9) & kotlinx.coroutines.scheduling.CoroutineScheduler.PARKED_VERSION_MASK\lint r15 = r20.getIndexInArray()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L16\l}"];
Node_30 [shape=record,label="{30\:\ 0x002b}"];
Node_31 [shape=record,label="{31\:\ 0x002c|if (r15 == 0) goto L15\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|r3 = 1\l}"];
Node_34 [shape=record,label="{34\:\ 0x0031|PHI: r3 \l  PHI: (r3v11 int) = (r3v10 int), (r3v12 int) binds: [B:33:0x0030, B:32:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == 0) goto L12\l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0034}"];
Node_37 [shape=record,label="{37\:\ 0x0039|throw new java.lang.AssertionError()\l}"];
Node_33 [shape=record,label="{33\:\ 0x0030|r3 = 0\l}"];
Node_38 [shape=record,label="{38\:\ 0x003a|r20.setNextParkedWorker(r19.workers.get(r12))\l}"];
Node_39 [shape=record,label="{39\:\ 0x0055|LOOP_END\lLOOP:0: B:28:0x000d\-\>B:39:0x0055\l|if (kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStack$FU.compareAndSet(r19, r9, r13 \| ((long) r15)) == false) goto L6\l}"];
Node_43 [shape=record,label="{43\:\ 0x0057|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0057|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush((r19v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r20v0 'worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('worker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0039 \-\> B:23:?, CROSS_EDGE: B:40:0x0057 \-\> B:23:?, BACK_EDGE: B:39:0x0055 \-\> B:28:0x000d, CROSS_EDGE: B:33:0x0030 \-\> B:34:0x0031, CROSS_EDGE: B:29:0x0029 \-\> B:38:0x003a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_38[style=dashed];
Node_34 -> Node_42;
Node_42 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_23;
Node_33 -> Node_34;
Node_38 -> Node_39;
Node_39 -> Node_28;
Node_39 -> Node_43[style=dashed];
Node_43 -> Node_40;
Node_40 -> Node_23;
}

