digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.tryCreateWorker(J)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:431)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: CONST  (r2 I:??[long, double]) = (2097151(0x1fffff, double:1.0361303E\-317) ??[long, double])  (LINE:1004)\l0x0005: ARITH  (r2 I:long) = (r2 I:long) & (r8 I:long A[D('state' long)]) \l0x0006: CAST (r0 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (int) (r2 I:long) \l0x0008: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:432)\l0x0009: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: CONST  (r3 I:??[long, double]) = (4398044413952(0x3ffffe00000, double:2.1729226538177E\-311) ??[long, double])  (LINE:1005)\l0x000f: ARITH  (r3 I:long) = (r3 I:long) & (r8 I:long A[D('state' long)]) \l0x0010: CONST  (r5 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l0x0012: ARITH  (r3 I:long) = (r3 I:long) \>\> (r5 I:long) \l0x0013: CAST (r1 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (int) (r3 I:long) \l0x0015: ARITH  (r2 I:int) = (r0 I:int A[D('created' int)]) \- (r1 I:int A[D('blocking' int)])  (LINE:433)\l0x0017: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: INVOKE  (r2 I:int) = (r2 I:int), (r3 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x001c: IGET  (r4 I:int) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize int  (LINE:438)\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|0x001e: IF  (r2 I:??[int, byte, short, char] A[D('cpuWorkers' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:23:0x0031 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0020|0x0020: INVOKE  (r4 I:int) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.createNewWorker():int A[MD:():int (m)] (LINE:439)\l0x0024: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:442)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|0x0025: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newCpuWorkers' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002e \l}"];
Node_18 [shape=record,label="{18\:\ 0x0027|0x0027: IGET  (r6 I:int) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0029|0x0029: IF  (r6 I:??[int, byte, short, char]) \<= (r5 I:??[int, byte, short, char])  \-\> B:21:0x002e \l}"];
Node_20 [shape=record,label="{20\:\ 0x002b|0x002b: INVOKE  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.createNewWorker():int A[MD:():int (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002e|0x002e: IF  (r4 I:??[int, byte, short, char] A[D('newCpuWorkers' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:23:0x0031  (LINE:443)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0030|RETURN\l|0x0030: RETURN  (r5 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|RETURN\l|0x0031: RETURN  (r3 I:boolean)  (LINE:445)\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.tryCreateWorker((r7 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[D('state' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0031 \-\> B:13:?, CROSS_EDGE: B:19:0x0029 \-\> B:21:0x002e, CROSS_EDGE: B:17:0x0025 \-\> B:21:0x002e, CROSS_EDGE: B:15:0x001e \-\> B:23:0x0031\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0007: r0 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0002\-0x0007: r1 '$i$f$createdWorkers' I\l  0x0009\-0x0014: r1 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x000a\-0x0014: r2 '$i$f$blockingTasks' I\l  0x0024\-0x0031: r4 'newCpuWorkers' I\l  0x0008\-0x0031: r0 'created' I\l  0x0015\-0x0031: r1 'blocking' I\l  0x001c\-0x0031: r2 'cpuWorkers' I\l  \-1 \-0x0031: r8 'state' J\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_13;
Node_23 -> Node_13;
}

