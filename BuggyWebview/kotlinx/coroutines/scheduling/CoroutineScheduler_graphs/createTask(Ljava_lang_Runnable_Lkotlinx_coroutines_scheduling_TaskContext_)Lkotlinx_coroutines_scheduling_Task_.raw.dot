digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.createTask(Ljava\/lang\/Runnable;Lkotlinx\/coroutines\/scheduling\/TaskContext;)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:kotlinx.coroutines.scheduling.SchedulerTimeSource) =  kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource kotlinx.coroutines.scheduling.SchedulerTimeSource  (LINE:406)\l0x0002: INVOKE  (r0 I:long) = (r0 I:kotlinx.coroutines.scheduling.SchedulerTimeSource) type: VIRTUAL call: kotlinx.coroutines.scheduling.SchedulerTimeSource.nanoTime():long A[MD:():long (m)]\l0x0006: INSTANCE_OF  (r2 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('block' java.lang.Runnable)]) kotlinx.coroutines.scheduling.Task  (LINE:407)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0018 \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('block' java.lang.Runnable)])  (LINE:408)\l0x000b: CHECK_CAST (r2 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r2 I:??[OBJECT, ARRAY]) \l0x000d: IPUT  (r0 I:long A[D('nanoTime' long)]), (r2 I:kotlinx.coroutines.scheduling.Task) kotlinx.coroutines.scheduling.Task.submissionTime long \l0x000f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('block' java.lang.Runnable)])  (LINE:409)\l0x0010: CHECK_CAST (r2 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r2 I:??[OBJECT, ARRAY]) \l0x0012: IPUT  \l  (r5 I:kotlinx.coroutines.scheduling.TaskContext A[D('taskContext' kotlinx.coroutines.scheduling.TaskContext)])\l  (r2 I:kotlinx.coroutines.scheduling.Task)\l kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext \l0x0014: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('block' java.lang.Runnable)])  (LINE:410)\l0x0015: CHECK_CAST (r2 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|RETURN\l|0x0017: RETURN  (r2 I:kotlinx.coroutines.scheduling.Task) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|0x0018: NEW_INSTANCE  (r2 I:kotlinx.coroutines.scheduling.TaskImpl) =  kotlinx.coroutines.scheduling.TaskImpl  (LINE:412)\l0x001a: INVOKE  \l  (r2 I:kotlinx.coroutines.scheduling.TaskImpl)\l  (r4 I:java.lang.Runnable A[D('block' java.lang.Runnable)])\l  (r0 I:long A[D('nanoTime' long)])\l  (r5 I:kotlinx.coroutines.scheduling.TaskContext A[D('taskContext' kotlinx.coroutines.scheduling.TaskContext)])\l type: DIRECT call: kotlinx.coroutines.scheduling.TaskImpl.\<init\>(java.lang.Runnable, long, kotlinx.coroutines.scheduling.TaskContext):void A[MD:(java.lang.Runnable, long, kotlinx.coroutines.scheduling.TaskContext):void (m)]\l0x001d: CHECK_CAST (r2 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|RETURN\l|0x001f: RETURN  (r2 I:kotlinx.coroutines.scheduling.Task) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler.createTask((r3 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlinx.coroutines.scheduling.TaskContext A[D('taskContext' kotlinx.coroutines.scheduling.TaskContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x001f: r0 'nanoTime' J\l  \-1 \-0x001f: r4 'block' Ljava\/lang\/Runnable;\l  \-1 \-0x001f: r5 'taskContext' Lkotlinx\/coroutines\/scheduling\/TaskContext;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

