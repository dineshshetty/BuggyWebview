digraph "CFG forkotlinx.coroutines.scheduling.TasksKt.isBlocking(Lkotlinx\/coroutines\/scheduling\/Task;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: IGET  (r1 I:kotlinx.coroutines.scheduling.TaskContext) = (r3 I:kotlinx.coroutines.scheduling.Task A[D('$this$isBlocking' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:85)\l0x0003: INVOKE  (r1 I:int) = (r1 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l0x0007: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000b \l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\lORIG_RETURN\l|0x000b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: RETURN  (r2 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000c: RETURN  (r2 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public static final boolean kotlinx.coroutines.scheduling.TasksKt.isBlocking((r3 I:kotlinx.coroutines.scheduling.Task A[D('$this$isBlocking' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0008 \-\> B:14:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000c: r0 '$i$f$isBlocking' I\l  \-1 \-0x000c: r3 '$this$isBlocking' Lkotlinx\/coroutines\/scheduling\/Task;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
}

