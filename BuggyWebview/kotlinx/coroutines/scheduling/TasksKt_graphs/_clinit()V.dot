digraph "CFG forkotlinx.coroutines.scheduling.TasksKt.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0002|long r0 = kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt.systemProp$default(\"kotlinx.coroutines.scheduler.resolution.ns\", 100000, 0, 0, 12, null)\lkotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS = r0\lint r0 = kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt.systemProp$default(\"kotlinx.coroutines.scheduler.core.pool.size\", kotlin.ranges.RangesKt.coerceAtLeast(kotlinx.coroutines.internal.SystemPropsKt.getAVAILABLE_PROCESSORS(), 2), 1, 0, 8, null)\lkotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE = r0\lint r0 = kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt.systemProp$default(\"kotlinx.coroutines.scheduler.max.pool.size\", kotlinx.coroutines.scheduling.CoroutineScheduler.MAX_SUPPORTED_POOL_SIZE, 0, kotlinx.coroutines.scheduling.CoroutineScheduler.MAX_SUPPORTED_POOL_SIZE, 4, null)\lkotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE = r0\ljava.util.concurrent.TimeUnit r0 = java.util.concurrent.TimeUnit.SECONDS\llong r1 = kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt.systemProp$default(\"kotlinx.coroutines.scheduler.keep.alive.sec\", 60, 0, 0, 12, null)\lkotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS = r0.toNanos(r1)\lkotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource = kotlinx.coroutines.scheduling.NanoTimeSource.INSTANCE\lkotlinx.coroutines.scheduling.TasksKt.NonBlockingContext = new kotlinx.coroutines.scheduling.TaskContextImpl(0)\lkotlinx.coroutines.scheduling.TasksKt.BlockingContext = new kotlinx.coroutines.scheduling.TaskContextImpl(1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0074|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.scheduling.TasksKt.\<clinit\>()  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

