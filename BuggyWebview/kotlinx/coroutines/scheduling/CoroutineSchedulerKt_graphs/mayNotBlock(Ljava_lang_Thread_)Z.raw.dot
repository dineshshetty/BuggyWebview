digraph "CFG forkotlinx.coroutines.scheduling.CoroutineSchedulerKt.mayNotBlock(Ljava\/lang\/Thread;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('thread' java.lang.Thread)]) kotlinx.coroutines.scheduling.CoroutineScheduler$Worker  (LINE:978)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('thread' java.lang.Thread)])  (LINE:979)\l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) (r0 I:??[OBJECT, ARRAY]) \l0x0007: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) = (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l0x0009: SGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|SYNTHETIC\lRETURN\l|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0010: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlinx.coroutines.scheduling.CoroutineSchedulerKt.mayNotBlock((r2 I:java.lang.Thread A[D('thread' java.lang.Thread), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000f \-\> B:8:0x0010, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x000f\lDebug Info:\l  \-1 \-0x0010: r2 'thread' Ljava\/lang\/Thread;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_1;
}

