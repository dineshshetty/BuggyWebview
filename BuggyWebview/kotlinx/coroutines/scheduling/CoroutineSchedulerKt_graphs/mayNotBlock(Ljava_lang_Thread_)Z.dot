digraph "CFG forkotlinx.coroutines.scheduling.CoroutineSchedulerKt.mayNotBlock(Ljava\/lang\/Thread;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r2 instanceof kotlinx.coroutines.scheduling.CoroutineScheduler.Worker) == false) goto L7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004}"];
Node_5 [shape=record,label="{5\:\ 0x000b|if (((kotlinx.coroutines.scheduling.CoroutineScheduler.Worker) r2).state != kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED) goto L7\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|SYNTHETIC\lRETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public static final boolean kotlinx.coroutines.scheduling.CoroutineSchedulerKt.mayNotBlock((r2v0 'thread' java.lang.Thread A[D('thread' java.lang.Thread), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000f \-\> B:8:0x0010, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x000f\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_1;
}

