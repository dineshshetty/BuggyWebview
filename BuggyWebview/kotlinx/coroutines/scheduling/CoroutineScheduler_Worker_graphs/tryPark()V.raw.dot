digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryPark()V" {
Node_35 [shape=record,label="{35\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.inStack():boolean A[MD:():boolean (m)] (LINE:717)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x000c \l}"];
Node_39 [shape=record,label="{39\:\ 0x0006|0x0006: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:718)\l0x0008: INVOKE  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler), (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):boolean A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):boolean (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x000b|RETURN\l|0x000b: RETURN    (LINE:719)\l}"];
Node_36 [shape=record,label="{36\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:721)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0027 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:991)\l0x0013: IGET  (r1 I:kotlinx.coroutines.scheduling.WorkQueue) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.localQueue kotlinx.coroutines.scheduling.WorkQueue  (LINE:721)\l0x0015: INVOKE  (r1 I:int) = (r1 I:kotlinx.coroutines.scheduling.WorkQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.WorkQueue.getSize$kotlinx_coroutines_core():int A[MD:():int (m)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0019|0x0019: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x001d \l}"];
Node_45 [shape=record,label="{45\:\ 0x001b|0x001b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x001e|0x001e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0021 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0021|0x0021: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0023: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x0026|0x0026: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_46 [shape=record,label="{46\:\ 0x001d|0x001d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0027|0x0027: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:722)\l0x0028: IPUT  (r0 I:int), (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.workerCtl int \l}"];
Node_52 [shape=record,label="{52\:\ 0x002a|LOOP_START\lLOOP:0: B:52:0x002a\-\>B:61:0x0043\l|0x002a: INVOKE  (r1 I:boolean) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.inStack():boolean A[MD:():boolean (m)] (LINE:735)\l}"];
Node_53 [shape=record,label="{53\:\ 0x002e|0x002e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x004f \l}"];
Node_54 [shape=record,label="{54\:\ 0x0030|0x0030: IGET  (r1 I:int) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.workerCtl int \l}"];
Node_55 [shape=record,label="{55\:\ 0x0032|0x0032: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x004f \l}"];
Node_56 [shape=record,label="{56\:\ 0x0034|0x0034: IGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:736)\l0x0036: INVOKE  (r1 I:boolean) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.isTerminated():boolean A[MD:():boolean (m)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x003a|0x003a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x004f \l}"];
Node_58 [shape=record,label="{58\:\ 0x003c|0x003c: IGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l0x003e: SGET  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_59 [shape=record,label="{59\:\ 0x0040|0x0040: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0043 \l}"];
Node_61 [shape=record,label="{61\:\ 0x0043|LOOP_END\lLOOP:0: B:52:0x002a\-\>B:61:0x0043\l|0x0043: SGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.PARKING kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:737)\l0x0045: INVOKE  \l  (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean (m)]\l0x0048: INVOKE   type: STATIC call: java.lang.Thread.interrupted():boolean A[MD:():boolean (c)] (LINE:738)\l0x004b: INVOKE  (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.park():void A[MD:():void (m)] (LINE:739)\l}"];
Node_63 [shape=record,label="{63\:\ 0x004f|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x004f|RETURN\lORIG_RETURN\l|0x004f: RETURN    (LINE:741)\l}"];
Node_65 [shape=record,label="{65\:\ 0x004f|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ ?|SYNTHETIC\lRETURN\l|0x004f: RETURN   A[SYNTHETIC] (LINE:741)\l}"];
Node_64 [shape=record,label="{64\:\ 0x004f|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ ?|SYNTHETIC\lRETURN\l|0x004f: RETURN   A[SYNTHETIC] (LINE:741)\l}"];
Node_66 [shape=record,label="{66\:\ 0x004f|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ ?|SYNTHETIC\lRETURN\l|0x004f: RETURN   A[SYNTHETIC] (LINE:741)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryPark((r3 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:50:0x0026 \-\> B:36:?, BACK_EDGE: B:61:0x0043 \-\> B:52:0x002a, CROSS_EDGE: B:62:0x004f \-\> B:36:?, CROSS_EDGE: B:57:0x003a \-\> B:62:0x004f, CROSS_EDGE: B:55:0x0032 \-\> B:62:0x004f, CROSS_EDGE: B:53:0x002e \-\> B:62:0x004f, CROSS_EDGE: B:46:0x001d \-\> B:47:0x001e, CROSS_EDGE: B:42:0x0010 \-\> B:51:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x001e: r0 '$i$a$\-assert\-CoroutineScheduler$Worker$tryPark$1' I\l}"];
MethodNode -> Node_35;Node_35 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_41;
Node_39 -> Node_40;
Node_40 -> Node_36;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_51;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_47;
Node_47 -> Node_49;
Node_47 -> Node_51[style=dashed];
Node_49 -> Node_50;
Node_50 -> Node_36;
Node_46 -> Node_47;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_66;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_64;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_65;
Node_58 -> Node_59;
Node_59 -> Node_61;
Node_59 -> Node_63[style=dashed];
Node_61 -> Node_52;
Node_63 -> Node_62;
Node_62 -> Node_36;
Node_65 -> Node_68;
Node_68 -> Node_36;
Node_64 -> Node_67;
Node_67 -> Node_36;
Node_66 -> Node_69;
Node_69 -> Node_36;
}

