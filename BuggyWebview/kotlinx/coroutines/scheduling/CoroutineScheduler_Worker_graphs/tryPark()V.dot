digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryPark()V" {
Node_35 [shape=record,label="{35\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0000}"];
Node_38 [shape=record,label="{38\:\ 0x0004|if (inStack() != false) goto L6\l}"];
Node_39 [shape=record,label="{39\:\ 0x0006|kotlinx.coroutines.scheduling.CoroutineScheduler.this.parkedWorkersStackPush(r3)\l}"];
Node_40 [shape=record,label="{40\:\ 0x000b|RETURN\l|return\l}"];
Node_36 [shape=record,label="{36\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x000c}"];
Node_42 [shape=record,label="{42\:\ 0x0010|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L15\l}"];
Node_43 [shape=record,label="{43\:\ 0x0012}"];
Node_44 [shape=record,label="{44\:\ 0x0019|if (r3.localQueue.getSize$kotlinx_coroutines_core() != 0) goto L14\l}"];
Node_45 [shape=record,label="{45\:\ 0x001b|r1 = true\l}"];
Node_47 [shape=record,label="{47\:\ 0x001e|PHI: r1 \l  PHI: (r1v9 boolean) = (r1v8 boolean), (r1v10 boolean) binds: [B:46:0x001d, B:45:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L12\l}"];
Node_49 [shape=record,label="{49\:\ 0x0021}"];
Node_50 [shape=record,label="{50\:\ 0x0026|throw new java.lang.AssertionError()\l}"];
Node_46 [shape=record,label="{46\:\ 0x001d|r1 = false\l}"];
Node_51 [shape=record,label="{51\:\ 0x0027|r3.workerCtl = \-1\l}"];
Node_52 [shape=record,label="{52\:\ 0x002a|LOOP_START\lLOOP:0: B:52:0x002a\-\>B:61:0x0043\l}"];
Node_53 [shape=record,label="{53\:\ 0x002e|if (inStack() == false) goto L31\l}"];
Node_54 [shape=record,label="{54\:\ 0x0030}"];
Node_55 [shape=record,label="{55\:\ 0x0032|if (r3.workerCtl != (\-1)) goto L29\l}"];
Node_56 [shape=record,label="{56\:\ 0x0034}"];
Node_57 [shape=record,label="{57\:\ 0x003a|if (kotlinx.coroutines.scheduling.CoroutineScheduler.this.isTerminated() != false) goto L27\l}"];
Node_58 [shape=record,label="{58\:\ 0x003c}"];
Node_59 [shape=record,label="{59\:\ 0x0040|if (r3.state != kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED) goto L24\l}"];
Node_61 [shape=record,label="{61\:\ 0x0043|LOOP_END\lLOOP:0: B:52:0x002a\-\>B:61:0x0043\l|tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.PARKING)\ljava.lang.Thread.interrupted()\lpark()\l}"];
Node_63 [shape=record,label="{63\:\ 0x004f|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x004f|RETURN\lORIG_RETURN\l|return\l}"];
Node_65 [shape=record,label="{65\:\ 0x004f|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_64 [shape=record,label="{64\:\ 0x004f|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_66 [shape=record,label="{66\:\ 0x004f|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryPark((r3v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:50:0x0026 \-\> B:36:?, BACK_EDGE: B:61:0x0043 \-\> B:52:0x002a, CROSS_EDGE: B:62:0x004f \-\> B:36:?, CROSS_EDGE: B:57:0x003a \-\> B:62:0x004f, CROSS_EDGE: B:55:0x0032 \-\> B:62:0x004f, CROSS_EDGE: B:53:0x002e \-\> B:62:0x004f, CROSS_EDGE: B:46:0x001d \-\> B:47:0x001e, CROSS_EDGE: B:42:0x0010 \-\> B:51:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_35;Node_35 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_41;
Node_39 -> Node_40;
Node_40 -> Node_36;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_51;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_47;
Node_47 -> Node_49;
Node_47 -> Node_51[style=dashed];
Node_49 -> Node_50;
Node_50 -> Node_36;
Node_46 -> Node_47;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_66;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_64;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_65;
Node_58 -> Node_59;
Node_59 -> Node_61;
Node_59 -> Node_63[style=dashed];
Node_61 -> Node_52;
Node_63 -> Node_62;
Node_62 -> Node_36;
Node_65 -> Node_68;
Node_68 -> Node_36;
Node_64 -> Node_67;
Node_67 -> Node_36;
Node_66 -> Node_69;
Node_69 -> Node_36;
}

