digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.afterTask(I)V" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|if (r6 != 0) goto L4\l}"];
Node_22 [shape=record,label="{22\:\ 0x0002|RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0003|kotlinx.coroutines.scheduling.CoroutineScheduler r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\lkotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU.addAndGet(r0, kotlinx.coroutines.scheduling.CoroutineScheduler.PARKED_VERSION_MASK)\lkotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r0 = r5.state\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|if (r0 == kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED) goto L17\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015}"];
Node_26 [shape=record,label="{26\:\ 0x0019|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L15\l}"];
Node_27 [shape=record,label="{27\:\ 0x001b}"];
Node_28 [shape=record,label="{28\:\ 0x001e|if (r0 != kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING) goto L14\l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|r2 = true\l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|PHI: r2 \l  PHI: (r2v3 boolean) = (r2v2 boolean), (r2v4 boolean) binds: [B:30:0x0022, B:29:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L12\l}"];
Node_33 [shape=record,label="{33\:\ 0x0026}"];
Node_34 [shape=record,label="{34\:\ 0x002b|throw new java.lang.AssertionError()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|r2 = false\l}"];
Node_35 [shape=record,label="{35\:\ 0x002c|r5.state = kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.DORMANT\l}"];
Node_36 [shape=record,label="{36\:\ 0x0030|RETURN\lORIG_RETURN\l|return\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.afterTask((r5v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r6v0 'taskMode' int A[D('taskMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x002b \-\> B:20:?, CROSS_EDGE: B:36:0x0030 \-\> B:20:?, CROSS_EDGE: B:30:0x0022 \-\> B:31:0x0023, CROSS_EDGE: B:26:0x0019 \-\> B:35:0x002c, CROSS_EDGE: B:24:0x0013 \-\> B:36:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_20;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_37;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_20;
Node_30 -> Node_31;
Node_35 -> Node_36;
Node_36 -> Node_20;
Node_37 -> Node_20;
}

