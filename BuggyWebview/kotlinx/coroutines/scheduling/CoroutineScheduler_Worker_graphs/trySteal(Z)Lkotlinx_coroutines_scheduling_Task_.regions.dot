digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.trySteal(Z)Lkotlinx\/coroutines\/scheduling\/Task;" {
subgraph cluster_Region_1641841743 {
label = "R(3:(1:(1:8))|11|(2:(1:13)|(2:14|(1:(2:(2:53|54)|(5:17|(1:19)|20|(1:47)(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))|41)))))) | DECL_VAR: int currentIndex, long null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1765123612 {
label = "IF [B:60:0x0006] THEN: R(1:(1:8)) ELSE: null";
node [shape=record,color=blue];
Node_60 [shape=record,label="{60\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L3\l}"];
subgraph cluster_Region_2052748501 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2044694186 {
label = "IF [B:65:0x0014] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_65 [shape=record,label="{65\:\ 0x0014|PHI: r1 \l  PHI: (r1v5 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r20.localQueue.getSize$kotlinx_coroutines_core() == 0 ? 1 : 0) == 0) goto L7\l}"];
subgraph cluster_Region_1330339398 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x001c|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_69 [shape=record,label="{69\:\ 0x001d|kotlinx.coroutines.scheduling.CoroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler r1 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\lint int r1 = (int) (r1.controlState & 2097151)\l}"];
subgraph cluster_Region_185206005 {
label = "R(2:(1:13)|(2:14|(1:(2:(2:53|54)|(5:17|(1:19)|20|(1:47)(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))|41)))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1587645650 {
label = "IF [B:70:0x002a] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_70 [shape=record,label="{70\:\ 0x002a|if (r1 \< 2) goto L13\l}"];
subgraph cluster_Region_585053597 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_71 [shape=record,label="{71\:\ 0x002c|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1525204362 {
label = "R(2:14|(1:(2:(2:53|54)|(5:17|(1:19)|20|(1:47)(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))|41))))";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x002d|int int r4 = nextInt(r1)\llong r6 = Long.MAX_VALUE\lkotlinx.coroutines.scheduling.CoroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler r8 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\lint r9 = 0\l}"];
subgraph cluster_LoopRegion_670062002 {
label = "LOOP:0: (1:(2:(2:53|54)|(5:17|(1:19)|20|(1:47)(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))|41)))";
node [shape=record,color=blue];
subgraph cluster_Region_853313124 {
label = "R(1:(2:(2:53|54)|(5:17|(1:19)|20|(1:47)(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))|41)))";
node [shape=record,color=blue];
subgraph cluster_Region_1764364646 {
label = "R(2:(2:53|54)|(5:17|(1:19)|20|(1:47)(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))|41))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1667553101 {
label = "IF [B:74:0x003e] THEN: R(2:53|54) ELSE: null";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x003e|if (r9 \>= r1) goto L49\l}"];
subgraph cluster_Region_1833512425 {
label = "R(2:53|54)";
node [shape=record,color=blue];
Node_106 [shape=record,label="{106\:\ 0x00ac|PHI: r10 \l  PHI: (r10v1 long A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r20.minDelayUntilStealableTaskNs = r6 != Long.MAX_VALUE ? r6 : 0L\l}"];
Node_107 [shape=record,label="{107\:\ 0x00ae|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_873078431 {
label = "R(5:17|(1:19)|20|(1:47)(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))|41)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x0040|int int r12 = r9 + 1\lint int r4 = r4 + 1\l}"];
subgraph cluster_IfRegion_1713363346 {
label = "IF [B:76:0x0045] THEN: R(1:19) ELSE: null";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x0045|if (r4 \> r1) goto L19\l}"];
subgraph cluster_Region_1971501723 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_77 [shape=record,label="{77\:\ 0x0047|r4 = 1\l}"];
}
}
Node_78 [shape=record,label="{78\:\ 0x0048|PHI: r4 \l  PHI: (r4v6 'currentIndex' int) = (r4v5 'currentIndex' int), (r4v8 'currentIndex' int) binds: [B:76:0x0045, B:77:0x0047] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.scheduling.CoroutineScheduler$Worker kotlinx.coroutines.scheduling.CoroutineScheduler.Worker r14 = r8.workers.get(r4)\l}"];
subgraph cluster_IfRegion_255468506 {
label = "IF [B:79:0x0050, B:80:0x0052] THEN: R(1:47) ELSE: R(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))";
node [shape=record,color=blue];
Node_79 [shape=record,label="{79\:\ 0x0050|if (r14 == null) goto L47\l}"];
Node_80 [shape=record,label="{80\:\ 0x0052|ADDED_TO_REGION\l|if (r14 == r20) goto L47\l}"];
subgraph cluster_Region_286829650 {
label = "R(1:47)";
node [shape=record,color=blue];
Node_101 [shape=record,label="{101\:\ 0x009d|r2 = r4\l}"];
}
subgraph cluster_Region_725120305 {
label = "R(4:(1:(1:31))|(1:34)(1:46)|35|(2:(1:45)|(1:(1:39)(0))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_839037443 {
label = "IF [B:82:0x0058] THEN: R(1:(1:31)) ELSE: null";
node [shape=record,color=blue];
Node_82 [shape=record,label="{82\:\ 0x0058|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L25\l}"];
subgraph cluster_Region_402271284 {
label = "R(1:(1:31))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1094940425 {
label = "IF [B:87:0x0066] THEN: R(1:31) ELSE: null";
node [shape=record,color=blue];
Node_87 [shape=record,label="{87\:\ 0x0066|PHI: r2 \l  PHI: (r2v9 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r20.localQueue.getSize$kotlinx_coroutines_core() == 0) == false) goto L29\l}"];
subgraph cluster_Region_2027679590 {
label = "R(1:31)";
node [shape=record,color=blue];
Node_90 [shape=record,label="{90\:\ 0x006e|throw new java.lang.AssertionError()\l}"];
}
}
}
}
subgraph cluster_IfRegion_1601095892 {
label = "IF [B:91:0x006f] THEN: R(1:34) ELSE: R(1:46)";
node [shape=record,color=blue];
Node_91 [shape=record,label="{91\:\ 0x006f|if (r21 != false) goto L34\l}"];
subgraph cluster_Region_1863059140 {
label = "R(1:34)";
node [shape=record,color=blue];
Node_92 [shape=record,label="{92\:\ 0x0071|long r16 = r20.localQueue.tryStealBlockingFrom(r14.localQueue)\l}"];
}
subgraph cluster_Region_1000496459 {
label = "R(1:46)";
node [shape=record,color=blue];
Node_93 [shape=record,label="{93\:\ 0x007a|long r16 = r20.localQueue.tryStealFrom(r14.localQueue)\l}"];
}
}
Node_94 [shape=record,label="{94\:\ 0x0082|PHI: r16 \l  PHI: (r16v1 long) = (r16v0 long), (r16v4 long) binds: [B:93:0x007a, B:92:0x0071] A[DONT_GENERATE, DONT_INLINE]\l|long r18 = r16\lr2 = r4\l}"];
subgraph cluster_Region_431211649 {
label = "R(2:(1:45)|(1:(1:39)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1398486771 {
label = "IF [B:95:0x008b] THEN: R(1:45) ELSE: null";
node [shape=record,color=blue];
Node_95 [shape=record,label="{95\:\ 0x008b|if (r18 == (\-1)) goto L43\l}"];
subgraph cluster_Region_1133646721 {
label = "R(1:45)";
node [shape=record,color=blue];
Node_97 [shape=record,label="{97\:\ 0x0093|RETURN\l|return r20.localQueue.poll()\l}"];
}
}
subgraph cluster_Region_1679123530 {
label = "R(1:(1:39)(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_220326833 {
label = "IF [B:99:0x0096] THEN: R(1:39) ELSE: R(0)";
node [shape=record,color=blue];
Node_99 [shape=record,label="{99\:\ 0x0096|if (r18 \> 0) goto L39\l}"];
subgraph cluster_Region_684869889 {
label = "R(1:39)";
node [shape=record,color=blue];
Node_100 [shape=record,label="{100\:\ 0x0098|long r6 = java.lang.Math.min(r6, r18)\l}"];
}
subgraph cluster_Region_1301555316 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
}
Node_102 [shape=record,label="{102\:\ 0x009e|LOOP_END\lLOOP:0: B:73:0x003c\-\>B:102:0x009e\lPHI: r2 r6 \l  PHI: (r2v2 'currentIndex' int) = (r2v1 'currentIndex' int), (r2v4 'currentIndex' int), (r2v4 'currentIndex' int) binds: [B:111:0x009e, B:112:0x009e, B:113:0x009e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 'minDelay' long) = (r6v2 'minDelay' long), (r6v2 'minDelay' long), (r6v4 'minDelay' long) binds: [B:111:0x009e, B:112:0x009e, B:113:0x009e] A[DONT_GENERATE, DONT_INLINE]\l|r4 = r2\lr9 = r12\l}"];
}
}
}
}
}
}
}
Node_57 [shape=record,color=red,label="{57\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0000}"];
Node_61 [shape=record,color=red,label="{61\:\ 0x0008}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x000f}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x0011}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x0017}"];
Node_58 [shape=record,color=red,label="{58\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x0013}"];
Node_73 [shape=record,color=red,label="{73\:\ 0x003c|LOOP_START\lLOOP:0: B:73:0x003c\-\>B:102:0x009e\lPHI: r4 r6 r9 \l  PHI: (r4v4 'currentIndex' int) = (r4v3 'currentIndex' int), (r4v7 'currentIndex' int) binds: [B:72:0x002d, B:102:0x009e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'minDelay' long) = (r6v1 'minDelay' long), (r6v3 'minDelay' long) binds: [B:72:0x002d, B:102:0x009e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int) binds: [B:72:0x002d, B:102:0x009e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_81 [shape=record,color=red,label="{81\:\ 0x0054}"];
Node_83 [shape=record,color=red,label="{83\:\ 0x005a}"];
Node_84 [shape=record,color=red,label="{84\:\ 0x0061}"];
Node_85 [shape=record,color=red,label="{85\:\ 0x0063}"];
Node_109 [shape=record,color=red,label="{109\:\ 0x0069|SYNTHETIC\l}"];
Node_89 [shape=record,color=red,label="{89\:\ 0x0069}"];
Node_86 [shape=record,color=red,label="{86\:\ 0x0065}"];
Node_98 [shape=record,color=red,label="{98\:\ 0x0094}"];
Node_113 [shape=record,color=red,label="{113\:\ 0x009e|SYNTHETIC\l}"];
Node_112 [shape=record,color=red,label="{112\:\ 0x009e|SYNTHETIC\l}"];
Node_108 [shape=record,color=red,label="{108\:\ 0x008d|SYNTHETIC\l}"];
Node_96 [shape=record,color=red,label="{96\:\ 0x008d}"];
Node_111 [shape=record,color=red,label="{111\:\ 0x009e|SYNTHETIC\l}"];
Node_110 [shape=record,color=red,label="{110\:\ 0x00a2|SYNTHETIC\l}"];
Node_103 [shape=record,color=red,label="{103\:\ 0x00a2}"];
Node_104 [shape=record,color=red,label="{104\:\ 0x00a9}"];
Node_105 [shape=record,color=red,label="{105\:\ 0x00ab}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.trySteal((r20v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r21v0 'blockingOnly' boolean A[D('blockingOnly' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:71:0x002c \-\> B:58:?, CROSS_EDGE: B:90:0x006e \-\> B:58:?, CROSS_EDGE: B:97:0x0093 \-\> B:58:?, BACK_EDGE: B:102:0x009e \-\> B:73:0x003c, CROSS_EDGE: B:99:0x0096 \-\> B:102:0x009e, CROSS_EDGE: B:93:0x007a \-\> B:94:0x0082, CROSS_EDGE: B:86:0x0065 \-\> B:87:0x0066, CROSS_EDGE: B:82:0x0058 \-\> B:91:0x006f, CROSS_EDGE: B:101:0x009d \-\> B:102:0x009e, CROSS_EDGE: B:79:0x0050 \-\> B:101:0x009d, CROSS_EDGE: B:76:0x0045 \-\> B:78:0x0048, CROSS_EDGE: B:107:0x00ae \-\> B:58:?, CROSS_EDGE: B:104:0x00a9 \-\> B:106:0x00ac, CROSS_EDGE: B:64:0x0013 \-\> B:65:0x0014, CROSS_EDGE: B:60:0x0006 \-\> B:69:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_57;Node_60 -> Node_61;
Node_60 -> Node_69[style=dashed];
Node_65 -> Node_67;
Node_65 -> Node_69[style=dashed];
Node_68 -> Node_58;
Node_69 -> Node_70;
Node_70 -> Node_71;
Node_70 -> Node_72[style=dashed];
Node_71 -> Node_58;
Node_72 -> Node_73;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_110;
Node_106 -> Node_107;
Node_107 -> Node_58;
Node_75 -> Node_76;
Node_76 -> Node_77;
Node_76 -> Node_78[style=dashed];
Node_77 -> Node_78;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_101;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_101;
Node_101 -> Node_111;
Node_82 -> Node_83;
Node_82 -> Node_91[style=dashed];
Node_87 -> Node_91[style=dashed];
Node_87 -> Node_109;
Node_90 -> Node_58;
Node_91 -> Node_92;
Node_91 -> Node_93[style=dashed];
Node_92 -> Node_94;
Node_93 -> Node_94;
Node_94 -> Node_95;
Node_95 -> Node_98[style=dashed];
Node_95 -> Node_108;
Node_97 -> Node_58;
Node_99 -> Node_100;
Node_99 -> Node_112[style=dashed];
Node_100 -> Node_113;
Node_102 -> Node_73;
Node_57 -> Node_59;
Node_59 -> Node_60;
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_62 -> Node_64;
Node_63 -> Node_65;
Node_67 -> Node_68;
Node_64 -> Node_65;
Node_73 -> Node_74;
Node_81 -> Node_82;
Node_83 -> Node_84;
Node_84 -> Node_85;
Node_84 -> Node_86;
Node_85 -> Node_87;
Node_109 -> Node_89;
Node_89 -> Node_90;
Node_86 -> Node_87;
Node_98 -> Node_99;
Node_113 -> Node_102;
Node_112 -> Node_102;
Node_108 -> Node_96;
Node_96 -> Node_97;
Node_111 -> Node_102;
Node_110 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_105;
Node_104 -> Node_106;
Node_105 -> Node_106;
}

