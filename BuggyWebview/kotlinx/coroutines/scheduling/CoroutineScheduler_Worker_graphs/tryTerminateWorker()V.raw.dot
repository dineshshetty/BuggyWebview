digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryTerminateWorker()V" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:807)\l0x0002: IGET  (r0 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray \l0x0004: IGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0007|0x0007: MONITOR_ENTER  (r0 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)])  (LINE:995)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0008|0x0008: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0009|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x006d, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|0x0009: INVOKE  (r4 I:boolean) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.isTerminated():boolean A[Catch: all \-\> 0x006d, MD:():boolean (m), TRY_ENTER, TRY_LEAVE] (LINE:809)\l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|0x000d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0011 \l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|0x000f: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0010|RETURN\l|0x0010: RETURN   \l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0011|0x0011: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:811)\l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0013|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x006d, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|0x0013: IGET  (r6 I:long) = \l  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l kotlinx.coroutines.scheduling.CoroutineScheduler.controlState long A[Catch: all \-\> 0x006d, TRY_ENTER] (LINE:996)\l0x0015: CONST  (r8 I:??[long, double]) = (2097151(0x1fffff, double:1.0361303E\-317) ??[long, double]) \l0x0018: ARITH  (r6 I:long) = (r6 I:long) & (r8 I:long) A[Catch: all \-\> 0x006d]\l0x0019: CAST (r4 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (int) (r6 I:long) A[Catch: all \-\> 0x006d]\l0x001a: IGET  (r5 I:int A[D('$i$f$getCreatedWorkers' int)]) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize int A[Catch: all \-\> 0x006d, TRY_LEAVE] (LINE:811)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001c|0x001c: IF  (r4 I:??[int, byte, short, char]) \> (r5 I:??[int, byte, short, char])  \-\> B:44:0x0020 \l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x001f|RETURN\l|0x001f: RETURN   \l}"];
Node_44 [shape=record,label="{44\:\ 0x0020|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x006d, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|0x0020: SGET  (r4 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.workerCtl$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater A[Catch: all \-\> 0x006d, TRY_ENTER] (LINE:816)\l0x0022: CONST  (r5 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0023: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0024: INVOKE  (r4 I:boolean) = (r4 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r13 I:java.lang.Object), (r5 I:int), (r6 I:int) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.lang.Object, int, int):boolean A[Catch: all \-\> 0x006d, MD:(T, int, int):boolean (c), TRY_LEAVE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0028|0x0028: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x002c \l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|0x002a: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x002b|RETURN\l|0x002b: RETURN   \l}"];
Node_48 [shape=record,label="{48\:\ 0x002c|TRY_ENTER\lTryCatch #0 \{all \-\> 0x006d, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|0x002c: INVOKE  (r4 I:int) = (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.getIndexInArray():int A[Catch: all \-\> 0x006d, MD:():int (m), TRY_ENTER] (LINE:823)\l0x0030: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:824)\l0x0031: INVOKE  (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r5 I:int) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.setIndexInArray(int):void A[Catch: all \-\> 0x006d, MD:(int):void (m)]\l0x0034: INVOKE  \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l  (r4 I:int A[D('oldIndex' int)])\l  (r5 I:int)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, int, int):void A[Catch: all \-\> 0x006d, MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, int, int):void (m)] (LINE:832)\l0x0037: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:837)\l0x0038: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0039: SGET  (r7 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU java.util.concurrent.atomic.AtomicLongFieldUpdater A[Catch: all \-\> 0x006d] (LINE:997)\l0x003b: INVOKE  (r10 I:long) = \l  (r7 I:java.util.concurrent.atomic.AtomicLongFieldUpdater)\l  (r5 I:java.lang.Object A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(java.lang.Object):long A[Catch: all \-\> 0x006d, MD:(T):long (c)]\l0x003f: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) \l0x0040: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0041: ARITH  (r8 I:long) = (r8 I:long) & (r10 I:long A[D('state$iv$iv' long)]) A[Catch: all \-\> 0x006d] (LINE:998)\l0x0042: CAST (r7 I:int A[D('this_$iv$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (int) (r8 I:long) A[Catch: all \-\> 0x006d]\l0x0044: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:837)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0045|0x0045: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastIndex' int)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldIndex' int)])  \-\> B:51:0x005d  (LINE:838)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0047|TryCatch #0 \{all \-\> 0x006d, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|0x0047: IGET  (r6 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray A[Catch: all \-\> 0x006d] (LINE:839)\l0x0049: INVOKE  (r6 I:java.lang.Object) = (r6 I:kotlinx.coroutines.internal.ResizableAtomicArray), (r5 I:int A[D('lastIndex' int)]) type: VIRTUAL call: kotlinx.coroutines.internal.ResizableAtomicArray.get(int):java.lang.Object A[Catch: all \-\> 0x006d, MD:(int):T (m)]\l0x004d: INVOKE  (r6 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[Catch: all \-\> 0x006d, MD:(java.lang.Object):void (m)]\l0x0050: CHECK_CAST (r6 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) = (kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) (r6 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x006d]\l0x0052: IGET  (r7 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray A[Catch: all \-\> 0x006d] (LINE:840)\l0x0054: INVOKE  \l  (r7 I:kotlinx.coroutines.internal.ResizableAtomicArray)\l  (r4 I:int A[D('oldIndex' int)])\l  (r6 I:java.lang.Object A[D('lastWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l type: VIRTUAL call: kotlinx.coroutines.internal.ResizableAtomicArray.setSynchronized(int, java.lang.Object):void A[Catch: all \-\> 0x006d, MD:(int, T):void (m)]\l0x0057: INVOKE  \l  (r6 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('lastWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r4 I:int A[D('oldIndex' int)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.setIndexInArray(int):void A[Catch: all \-\> 0x006d, MD:(int):void (m)] (LINE:841)\l0x005a: INVOKE  \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r6 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[D('lastWorker' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)])\l  (r5 I:int A[D('lastIndex' int)])\l  (r4 I:int A[D('oldIndex' int)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, int, int):void A[Catch: all \-\> 0x006d, MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker, int, int):void (m)] (LINE:849)\l}"];
Node_51 [shape=record,label="{51\:\ 0x005d|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x006d, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|0x005d: IGET  (r1 I:kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\>) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.workers kotlinx.coroutines.internal.ResizableAtomicArray A[Catch: all \-\> 0x006d] (LINE:854)\l0x005f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0060: INVOKE  (r1 I:kotlinx.coroutines.internal.ResizableAtomicArray), (r5 I:int A[D('lastIndex' int)]), (r6 I:java.lang.Object) type: VIRTUAL call: kotlinx.coroutines.internal.ResizableAtomicArray.setSynchronized(int, java.lang.Object):void A[Catch: all \-\> 0x006d, MD:(int, T):void (m)]\l0x0064: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x006d, TRY_LEAVE]\l}"];
Node_52 [shape=record,label="{52\:\ 0x0066|0x0066: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY] A[D('lock$iv' java.lang.Object)]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0068|0x0068: SGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState A[D('lock$iv' java.lang.Object)]) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:856)\l0x006a: IPUT  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l  (r13 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_54 [shape=record,label="{54\:\ 0x006c|RETURN\l|0x006c: RETURN    (LINE:857)\l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_55 [shape=record,label="{55\:\ 0x006d|ExcHandler: all \-\> 0x006d\l|0x006d: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x006d] (LINE:855)\l}"];
Node_57 [shape=record,label="{57\:\ 0x006f|0x006f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryTerminateWorker((r13 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x001f \-\> B:31:?, CROSS_EDGE: B:47:0x002b \-\> B:31:?, CROSS_EDGE: B:54:0x006c \-\> B:31:?, CROSS_EDGE: B:57:0x006f \-\> B:31:?, CROSS_EDGE: B:49:0x0045 \-\> B:51:0x005d, CROSS_EDGE: B:58:0x0009 \-\> B:55:0x006d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000f: r0 'lock$iv' Ljava\/lang\/Object;\l  0x0007\-0x000f: r2 '$i$f$synchronized' I\l  0x0009\-0x000f: r3 '$i$a$\-synchronized\-CoroutineScheduler$Worker$tryTerminateWorker$1' I\l  0x0012\-0x001a: r4 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0013\-0x001a: r5 '$i$f$getCreatedWorkers' I\l  0x0011\-0x001e: r0 'lock$iv' Ljava\/lang\/Object;\l  0x0011\-0x001e: r2 '$i$f$synchronized' I\l  0x0011\-0x001e: r3 '$i$a$\-synchronized\-CoroutineScheduler$Worker$tryTerminateWorker$1' I\l  0x0020\-0x002a: r0 'lock$iv' Ljava\/lang\/Object;\l  0x0020\-0x002a: r2 '$i$f$synchronized' I\l  0x0020\-0x002a: r3 '$i$a$\-synchronized\-CoroutineScheduler$Worker$tryTerminateWorker$1' I\l  0x0040\-0x0043: r7 'this_$iv$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x003f\-0x0043: r10 'state$iv$iv' J\l  0x0041\-0x0043: r12 '$i$f$createdWorkers' I\l  0x0038\-0x0044: r5 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0039\-0x0044: r6 '$i$f$decrementCreatedWorkers' I\l  0x0052\-0x005d: r6 'lastWorker' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$Worker;\l  0x002c\-0x0064: r3 '$i$a$\-synchronized\-CoroutineScheduler$Worker$tryTerminateWorker$1' I\l  0x0030\-0x0064: r4 'oldIndex' I\l  0x0045\-0x0064: r5 'lastIndex' I\l  0x002c\-0x0068: r0 'lock$iv' Ljava\/lang\/Object;\l  0x002c\-0x0068: r2 '$i$f$synchronized' I\l  0x006d\-0x006f: r0 'lock$iv' Ljava\/lang\/Object;\l  0x006d\-0x006f: r2 '$i$f$synchronized' I\lTryCatch #0 \{all \-\> 0x006d, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_58;
Node_58 -> Node_35;
Node_58 -> Node_55;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_31;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_42 -> Node_43;
Node_43 -> Node_31;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_48;
Node_46 -> Node_47;
Node_47 -> Node_31;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_51 -> Node_59;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_31;
Node_59 -> Node_55;
Node_55 -> Node_57;
Node_57 -> Node_31;
}

