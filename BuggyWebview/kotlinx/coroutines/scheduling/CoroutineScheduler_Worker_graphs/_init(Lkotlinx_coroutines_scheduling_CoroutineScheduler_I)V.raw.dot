digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.\<init\>(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;I)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IPUT  \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this$0' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:592)\l0x0002: INVOKE  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this$0' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.\<init\>(kotlinx.coroutines.scheduling.CoroutineScheduler):void A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler):void (m)]\l0x0005: INVOKE  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r2 I:int A[D('index' int)]) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.setIndexInArray(int):void A[MD:(int):void (m)] (LINE:593)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:594)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.\<init\>((r0 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this$0' kotlinx.coroutines.scheduling.CoroutineScheduler), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | SKIP_FIRST_ARG\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0008: r1 'this$0' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  \-1 \-0x0008: r2 'index' I\lSIGNATURE: (I)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

