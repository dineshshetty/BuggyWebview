digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.trySteal(Z)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_57 [shape=record,label="{57\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ 0x0000}"];
Node_60 [shape=record,label="{60\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_61 [shape=record,label="{61\:\ 0x0008}"];
Node_62 [shape=record,label="{62\:\ 0x000f|if (r20.localQueue.getSize$kotlinx_coroutines_core() != 0) goto L10\l}"];
Node_63 [shape=record,label="{63\:\ 0x0011|r1 = 1\l}"];
Node_65 [shape=record,label="{65\:\ 0x0014|PHI: r1 \l  PHI: (r1v5 int) = (r1v4 int), (r1v7 int) binds: [B:64:0x0013, B:63:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == 0) goto L7\l}"];
Node_67 [shape=record,label="{67\:\ 0x0017}"];
Node_68 [shape=record,label="{68\:\ 0x001c|throw new java.lang.AssertionError()\l}"];
Node_58 [shape=record,label="{58\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_64 [shape=record,label="{64\:\ 0x0013|r1 = 0\l}"];
Node_69 [shape=record,label="{69\:\ 0x001d|kotlinx.coroutines.scheduling.CoroutineScheduler r1 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\lint r1 = (int) (r1.controlState & 2097151)\l}"];
Node_70 [shape=record,label="{70\:\ 0x002a|if (r1 \>= 2) goto L14\l}"];
Node_71 [shape=record,label="{71\:\ 0x002c|RETURN\l|return null\l}"];
Node_72 [shape=record,label="{72\:\ 0x002d|int r4 = nextInt(r1)\lr6 = Long.MAX_VALUE\lkotlinx.coroutines.scheduling.CoroutineScheduler r8 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\lr9 = 0\l}"];
Node_73 [shape=record,label="{73\:\ 0x003c|LOOP_START\lLOOP:0: B:73:0x003c\-\>B:102:0x009e\lPHI: r4 r6 r9 \l  PHI: (r4v4 'currentIndex' int) = (r4v3 'currentIndex' int), (r4v7 'currentIndex' int) binds: [B:72:0x002d, B:102:0x009e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'minDelay' long) = (r6v1 'minDelay' long), (r6v3 'minDelay' long) binds: [B:72:0x002d, B:102:0x009e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int) binds: [B:72:0x002d, B:102:0x009e] A[DONT_GENERATE, DONT_INLINE]\l|r10 = 0\l}"];
Node_74 [shape=record,label="{74\:\ 0x003e|if (r9 \>= r1) goto L49\l}"];
Node_75 [shape=record,label="{75\:\ 0x0040|int r12 = r9 + 1\lint r4 = r4 + 1\l}"];
Node_76 [shape=record,label="{76\:\ 0x0045|if (r4 \<= r1) goto L20\l}"];
Node_77 [shape=record,label="{77\:\ 0x0047|r4 = 1\l}"];
Node_78 [shape=record,label="{78\:\ 0x0048|PHI: r4 \l  PHI: (r4v6 'currentIndex' int) = (r4v5 'currentIndex' int), (r4v8 'currentIndex' int) binds: [B:76:0x0045, B:77:0x0047] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.scheduling.CoroutineScheduler$Worker r14 = r8.workers.get(r4)\l}"];
Node_79 [shape=record,label="{79\:\ 0x0050|if (r14 == null) goto L47\l}"];
Node_80 [shape=record,label="{80\:\ 0x0052|if (r14 == r20) goto L47\l}"];
Node_81 [shape=record,label="{81\:\ 0x0054}"];
Node_82 [shape=record,label="{82\:\ 0x0058|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L33\l}"];
Node_83 [shape=record,label="{83\:\ 0x005a}"];
Node_84 [shape=record,label="{84\:\ 0x0061|if (r20.localQueue.getSize$kotlinx_coroutines_core() != 0) goto L32\l}"];
Node_85 [shape=record,label="{85\:\ 0x0063|r2 = true\l}"];
Node_87 [shape=record,label="{87\:\ 0x0066|PHI: r2 \l  PHI: (r2v9 boolean) = (r2v8 boolean), (r2v11 boolean) binds: [B:86:0x0065, B:85:0x0063] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L29\l}"];
Node_109 [shape=record,label="{109\:\ 0x0069|SYNTHETIC\l}"];
Node_89 [shape=record,label="{89\:\ 0x0069}"];
Node_90 [shape=record,label="{90\:\ 0x006e|throw new java.lang.AssertionError()\l}"];
Node_86 [shape=record,label="{86\:\ 0x0065|r2 = false\l}"];
Node_91 [shape=record,label="{91\:\ 0x006f|if (r21 == false) goto L46\l}"];
Node_92 [shape=record,label="{92\:\ 0x0071|long r16 = r20.localQueue.tryStealBlockingFrom(r14.localQueue)\l}"];
Node_94 [shape=record,label="{94\:\ 0x0082|PHI: r16 \l  PHI: (r16v1 long) = (r16v0 long), (r16v4 long) binds: [B:93:0x007a, B:92:0x0071] A[DONT_GENERATE, DONT_INLINE]\l|r18 = r16\lr2 = r4\l}"];
Node_95 [shape=record,label="{95\:\ 0x008b|if ((r18 \> (\-1) ? 1 : (r18 == (\-1) ? 0 : \-1)) != 0) goto L37\l}"];
Node_98 [shape=record,label="{98\:\ 0x0094}"];
Node_99 [shape=record,label="{99\:\ 0x0096|if ((r18 \> 0 ? 1 : (r18 == 0 ? 0 : \-1)) \<= 0) goto L42\l}"];
Node_100 [shape=record,label="{100\:\ 0x0098|long r6 = java.lang.Math.min(r6, r18)\l}"];
Node_113 [shape=record,label="{113\:\ 0x009e|SYNTHETIC\l}"];
Node_102 [shape=record,label="{102\:\ 0x009e|LOOP_END\lLOOP:0: B:73:0x003c\-\>B:102:0x009e\lPHI: r2 r6 \l  PHI: (r2v2 'currentIndex' int) = (r2v1 'currentIndex' int), (r2v4 'currentIndex' int), (r2v4 'currentIndex' int) binds: [B:111:0x009e, B:112:0x009e, B:113:0x009e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 'minDelay' long) = (r6v2 'minDelay' long), (r6v2 'minDelay' long), (r6v4 'minDelay' long) binds: [B:111:0x009e, B:112:0x009e, B:113:0x009e] A[DONT_GENERATE, DONT_INLINE]\l|r4 = r2\lr9 = r12\l}"];
Node_112 [shape=record,label="{112\:\ 0x009e|SYNTHETIC\l}"];
Node_108 [shape=record,label="{108\:\ 0x008d|SYNTHETIC\l}"];
Node_96 [shape=record,label="{96\:\ 0x008d}"];
Node_97 [shape=record,label="{97\:\ 0x0093|RETURN\l|return r20.localQueue.poll()\l}"];
Node_93 [shape=record,label="{93\:\ 0x007a|long r16 = r20.localQueue.tryStealFrom(r14.localQueue)\l}"];
Node_101 [shape=record,label="{101\:\ 0x009d|r2 = r4\l}"];
Node_111 [shape=record,label="{111\:\ 0x009e|SYNTHETIC\l}"];
Node_110 [shape=record,label="{110\:\ 0x00a2|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x00a2}"];
Node_104 [shape=record,label="{104\:\ 0x00a9|if ((r6 \> Long.MAX_VALUE ? 1 : (r6 == Long.MAX_VALUE ? 0 : \-1)) == 0) goto L53\l}"];
Node_105 [shape=record,label="{105\:\ 0x00ab|r10 = r6\l}"];
Node_106 [shape=record,label="{106\:\ 0x00ac|PHI: r10 \l  PHI: (r10v1 long) = (r10v0 long), (r10v2 long) binds: [B:104:0x00a9, B:105:0x00ab] A[DONT_GENERATE, DONT_INLINE]\l|r20.minDelayUntilStealableTaskNs = r10\l}"];
Node_107 [shape=record,label="{107\:\ 0x00ae|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.trySteal((r20v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r21v0 'blockingOnly' boolean A[D('blockingOnly' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:71:0x002c \-\> B:58:?, CROSS_EDGE: B:90:0x006e \-\> B:58:?, CROSS_EDGE: B:97:0x0093 \-\> B:58:?, BACK_EDGE: B:102:0x009e \-\> B:73:0x003c, CROSS_EDGE: B:99:0x0096 \-\> B:102:0x009e, CROSS_EDGE: B:93:0x007a \-\> B:94:0x0082, CROSS_EDGE: B:86:0x0065 \-\> B:87:0x0066, CROSS_EDGE: B:82:0x0058 \-\> B:91:0x006f, CROSS_EDGE: B:101:0x009d \-\> B:102:0x009e, CROSS_EDGE: B:79:0x0050 \-\> B:101:0x009d, CROSS_EDGE: B:76:0x0045 \-\> B:78:0x0048, CROSS_EDGE: B:107:0x00ae \-\> B:58:?, CROSS_EDGE: B:104:0x00a9 \-\> B:106:0x00ac, CROSS_EDGE: B:64:0x0013 \-\> B:65:0x0014, CROSS_EDGE: B:60:0x0006 \-\> B:69:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_57;Node_57 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_69;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_65;
Node_65 -> Node_67;
Node_65 -> Node_69[style=dashed];
Node_67 -> Node_68;
Node_68 -> Node_58;
Node_64 -> Node_65;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_72;
Node_71 -> Node_58;
Node_72 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_110;
Node_75 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_78;
Node_77 -> Node_78;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_101;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_101;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_91;
Node_83 -> Node_84;
Node_84 -> Node_85[style=dashed];
Node_84 -> Node_86;
Node_85 -> Node_87;
Node_87 -> Node_91[style=dashed];
Node_87 -> Node_109;
Node_109 -> Node_89;
Node_89 -> Node_90;
Node_90 -> Node_58;
Node_86 -> Node_87;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_93;
Node_92 -> Node_94;
Node_94 -> Node_95;
Node_95 -> Node_98;
Node_95 -> Node_108[style=dashed];
Node_98 -> Node_99;
Node_99 -> Node_100[style=dashed];
Node_99 -> Node_112;
Node_100 -> Node_113;
Node_113 -> Node_102;
Node_102 -> Node_73;
Node_112 -> Node_102;
Node_108 -> Node_96;
Node_96 -> Node_97;
Node_97 -> Node_58;
Node_93 -> Node_94;
Node_101 -> Node_111;
Node_111 -> Node_102;
Node_110 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_105[style=dashed];
Node_104 -> Node_106;
Node_105 -> Node_106;
Node_106 -> Node_107;
Node_107 -> Node_58;
}

