digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.nextInt(I)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.rngState int  (LINE:777)\l0x0002: ARITH  (r1 I:int) = (r0 I:int A[D('r' int)]) \<\< (13 int)  (LINE:778)\l0x0004: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char] A[D('r' int)]) ^ (r1 I:??[int, boolean, short, byte, char]) \l0x0005: ARITH  (r1 I:int) = (r0 I:int A[D('r' int)]) \>\> (17 int)  (LINE:779)\l0x0007: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char] A[D('r' int)]) ^ (r1 I:??[int, boolean, short, byte, char]) \l0x0008: ARITH  (r1 I:int) = (r0 I:int A[D('r' int)]) \<\< (5 int)  (LINE:780)\l0x000a: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char] A[D('r' int)]) ^ (r1 I:??[int, boolean, short, byte, char]) \l0x000b: IPUT  (r0 I:int A[D('r' int)]), (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.rngState int  (LINE:781)\l0x000d: ARITH  (r1 I:int) = (r4 I:int A[D('upperBound' int)]) + (\-1 int)  (LINE:782)\l0x000f: ARITH  (r2 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char] A[D('mask' int)]) & (r4 I:??[int, boolean, short, byte, char] A[D('upperBound' int)])  (LINE:784)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0016 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0013: ARITH  (r2 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char] A[D('r' int)]) & (r1 I:??[int, boolean, short, byte, char] A[D('mask' int)])  (LINE:785)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|0x0015: RETURN  (r2 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|0x0016: CONST  (r2 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char])  (LINE:787)\l0x0019: ARITH  (r2 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char]) & (r0 I:??[int, boolean, short, byte, char] A[D('r' int)]) \l0x001a: ARITH  (r2 I:int) = (r2 I:int) % (r4 I:int A[D('upperBound' int)]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001b|RETURN\l|0x001b: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public final int kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.nextInt((r3 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('upperBound' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001b \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x001b: r0 'r' I\l  0x000f\-0x001b: r1 'mask' I\l  \-1 \-0x001b: r4 'upperBound' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

