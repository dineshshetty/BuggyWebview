digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryTerminateWorker()V" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|kotlinx.coroutines.internal.ResizableAtomicArray\<kotlinx.coroutines.scheduling.CoroutineScheduler$Worker\> r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.this.workers\lkotlinx.coroutines.scheduling.CoroutineScheduler r1 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\l}"];
Node_33 [shape=record,label="{33\:\ 0x0007|monitor\-enter(r0)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0008}"];
Node_58 [shape=record,label="{58\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0009|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|if (r1.isTerminated() == false) goto L10\l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|monitor\-exit(r0)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0010|RETURN\l|return\l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0011}"];
Node_40 [shape=record,label="{40\:\ 0x0013|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|int r4 = (int) (r1.controlState & 2097151)     \/\/ Catch: java.lang.Throwable \-\> L6d\lint r5 = r1.corePoolSize     \/\/ Catch: java.lang.Throwable \-\> L6d\l}"];
Node_41 [shape=record,label="{41\:\ 0x001c|if (r4 \> r5) goto L15\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|monitor\-exit(r0)\l}"];
Node_43 [shape=record,label="{43\:\ 0x001f|RETURN\l|return\l}"];
Node_44 [shape=record,label="{44\:\ 0x0020|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l}"];
Node_45 [shape=record,label="{45\:\ 0x0028|if (kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.workerCtl$FU.compareAndSet(r13, \-1, 1) != false) goto L19\l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|monitor\-exit(r0)\l}"];
Node_47 [shape=record,label="{47\:\ 0x002b|RETURN\l|return\l}"];
Node_48 [shape=record,label="{48\:\ 0x002c|TRY_ENTER\lTryCatch #0 \{, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|int r4 = getIndexInArray()     \/\/ Catch: java.lang.Throwable \-\> L6d\lsetIndexInArray(0)     \/\/ Catch: java.lang.Throwable \-\> L6d\lr1.parkedWorkersStackTopUpdate(r13, r4, 0)     \/\/ Catch: java.lang.Throwable \-\> L6d\llong r10 = kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU.getAndDecrement(r1)     \/\/ Catch: java.lang.Throwable \-\> L6d\lint r7 = (int) (2097151 & r10)     \/\/ Catch: java.lang.Throwable \-\> L6d\l}"];
Node_49 [shape=record,label="{49\:\ 0x0045|if (r7 == r4) goto L22\l}"];
Node_50 [shape=record,label="{50\:\ 0x0047|TryCatch #0 \{, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|java.lang.Object r6 = r1.workers.get(r7)     \/\/ Catch: java.lang.Throwable \-\> L6d\lkotlin.jvm.internal.Intrinsics.checkNotNull(r6)     \/\/ Catch: java.lang.Throwable \-\> L6d\lkotlinx.coroutines.scheduling.CoroutineScheduler$Worker r6 = r6     \/\/ Catch: java.lang.Throwable \-\> L6d\lr1.workers.setSynchronized(r4, r6)     \/\/ Catch: java.lang.Throwable \-\> L6d\lr6.setIndexInArray(r4)     \/\/ Catch: java.lang.Throwable \-\> L6d\lr1.parkedWorkersStackTopUpdate(r6, r7, r4)     \/\/ Catch: java.lang.Throwable \-\> L6d\l}"];
Node_51 [shape=record,label="{51\:\ 0x005d|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:35:0x0009, B:40:0x0013, B:44:0x0020, B:48:0x002c, B:50:0x0047, B:51:0x005d), top: B:58:0x0009 \}\lCatch: all \-\> 0x006d\l|r1.workers.setSynchronized(r7, null)     \/\/ Catch: java.lang.Throwable \-\> L6d\lkotlin.Unit r1 = kotlin.Unit.INSTANCE     \/\/ Catch: java.lang.Throwable \-\> L6d\l}"];
Node_52 [shape=record,label="{52\:\ 0x0066|monitor\-exit(r0)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0068|r13.state = kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED\l}"];
Node_54 [shape=record,label="{54\:\ 0x006c|RETURN\l|return\l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_55 [shape=record,label="{55\:\ 0x006d|REMOVE\lExcHandler: all \-\> 0x006d\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_57 [shape=record,label="{57\:\ 0x006f|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryTerminateWorker((r13v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x001f \-\> B:31:?, CROSS_EDGE: B:47:0x002b \-\> B:31:?, CROSS_EDGE: B:54:0x006c \-\> B:31:?, CROSS_EDGE: B:57:0x006f \-\> B:31:?, CROSS_EDGE: B:49:0x0045 \-\> B:51:0x005d, CROSS_EDGE: B:58:0x0009 \-\> B:55:0x006d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_58;
Node_58 -> Node_35;
Node_58 -> Node_55;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_31;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_42 -> Node_43;
Node_43 -> Node_31;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_48;
Node_46 -> Node_47;
Node_47 -> Node_31;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_51 -> Node_59;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_31;
Node_59 -> Node_55;
Node_55 -> Node_57;
Node_57 -> Node_31;
}

