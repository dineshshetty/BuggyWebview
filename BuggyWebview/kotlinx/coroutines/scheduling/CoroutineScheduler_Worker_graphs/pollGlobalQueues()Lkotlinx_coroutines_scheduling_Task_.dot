digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.pollGlobalQueues()Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000}"];
Node_19 [shape=record,label="{19\:\ 0x0005|if (nextInt(2) != 0) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|kotlinx.coroutines.scheduling.Task r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.this.globalCpuQueue.removeFirstOrNull()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|if (r0 != null) goto L8\l}"];
Node_22 [shape=record,label="{22\:\ 0x0013}"];
Node_23 [shape=record,label="{23\:\ 0x001d|RETURN\l|return kotlinx.coroutines.scheduling.CoroutineScheduler.this.globalBlockingQueue.removeFirstOrNull()\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e}"];
Node_25 [shape=record,label="{25\:\ 0x001f|RETURN\l|return r0\l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|kotlinx.coroutines.scheduling.Task r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.this.globalBlockingQueue.removeFirstOrNull()\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|if (r0 != null) goto L14\l}"];
Node_28 [shape=record,label="{28\:\ 0x002c}"];
Node_29 [shape=record,label="{29\:\ 0x0036|RETURN\l|return kotlinx.coroutines.scheduling.CoroutineScheduler.this.globalCpuQueue.removeFirstOrNull()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0037}"];
Node_31 [shape=record,label="{31\:\ 0x0038|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.pollGlobalQueues((r2v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001f \-\> B:17:?, CROSS_EDGE: B:29:0x0036 \-\> B:17:?, CROSS_EDGE: B:31:0x0038 \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_30 -> Node_31;
Node_31 -> Node_17;
}

