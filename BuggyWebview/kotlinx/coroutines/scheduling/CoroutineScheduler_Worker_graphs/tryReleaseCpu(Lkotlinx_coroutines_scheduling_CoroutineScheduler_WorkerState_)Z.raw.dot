digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$WorkerState;)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:657)\l0x0002: SGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:658)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previousState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0008 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hadCpu' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0018  (LINE:659)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: IGET  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler \l0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: SGET  (r4 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:990)\l0x0010: CONST  (r5 I:??[long, double]) = (4398046511104(0x40000000000, double:2.1729236899484E\-311) ??[long, double]) \l0x0015: INVOKE  \l  (r4 I:java.util.concurrent.atomic.AtomicLongFieldUpdater)\l  (r2 I:java.lang.Object A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l  (r5 I:long)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(java.lang.Object, long):long A[MD:(T, long):long (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previousState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)])  \-\> B:21:0x001c  (LINE:660)\l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|0x001a: IPUT  \l  (r8 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState A[D('newState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)])\l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\l|0x001c: RETURN  (r1 I:boolean A[D('hadCpu' boolean)])  (LINE:661)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu((r7 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState A[D('newState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0018 \-\> B:21:0x001c, CROSS_EDGE: B:17:0x0009 \-\> B:19:0x0018, CROSS_EDGE: B:16:0x0008 \-\> B:17:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0018: r2 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x000e\-0x0018: r3 '$i$f$releaseCpuPermit' I\l  0x0002\-0x001c: r0 'previousState' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$WorkerState;\l  0x0009\-0x001c: r1 'hadCpu' Z\l  \-1 \-0x001c: r8 'newState' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$WorkerState;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

