digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.getScheduler()Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: STATIC call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.access$getThis$0$p(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):kotlinx.coroutines.scheduling.CoroutineScheduler A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker):kotlinx.coroutines.scheduling.CoroutineScheduler (m)] (LINE:596)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.scheduling.CoroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.getScheduler((r2 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0005: r0 '$i$f$getScheduler' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

