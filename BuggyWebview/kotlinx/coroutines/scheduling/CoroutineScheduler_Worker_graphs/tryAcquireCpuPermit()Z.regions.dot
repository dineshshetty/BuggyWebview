digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryAcquireCpuPermit()Z" {
subgraph cluster_Region_2051026674 {
label = "R(1:(2:(1:3)|(3:5|(2:6|(2:8|(2:11|1))(2:17|1))|(2:(2:13|14)|(1:15))))) | DECL_VAR: boolean null\l";
node [shape=record,color=blue];
subgraph cluster_Region_448999613 {
label = "R(2:(1:3)|(3:5|(2:6|(2:8|(2:11|1))(2:17|1))|(2:(2:13|14)|(1:15))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1933643157 {
label = "IF [B:24:0x0008] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0008|if (r19.state == kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED) goto L3\l}"];
subgraph cluster_Region_517328745 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x000a|RETURN\lORIG_RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_2013251585 {
label = "R(3:5|(2:6|(2:8|(2:11|1))(2:17|1))|(2:(2:13|14)|(1:15)))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x000c|kotlinx.coroutines.scheduling.CoroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler r1 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\l}"];
subgraph cluster_LoopRegion_1704543743 {
label = "LOOP:0: (2:6|(2:8|(2:11|1))(2:17|1))";
node [shape=record,color=blue];
subgraph cluster_Region_2014970231 {
label = "R(2:6|(2:8|(2:11|1))(2:17|1))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0011|LOOP_START\lLOOP:0: B:27:0x0011\-\>B:31:0x0038\l|long long r13 = r1.controlState\l}"];
subgraph cluster_IfRegion_643758106 {
label = "IF [B:28:0x0023] THEN: R(2:8|(2:11|1)) ELSE: R(2:17|1)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0023|if (((int) ((kotlinx.coroutines.scheduling.CoroutineScheduler.CPU_PERMITS_MASK & r13) \>\> 42)) != 0) goto L8\l}"];
subgraph cluster_Region_795378448 {
label = "R(2:8|(2:11|1))";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0027|long long r17 = r13 \- 4398046511104L\l}"];
subgraph cluster_IfRegion_1540622839 {
label = "IF [B:31:0x0038] THEN: R(2:11|1) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0038|LOOP_END\lLOOP:0: B:27:0x0011\-\>B:31:0x0038\l|if (kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU.compareAndSet(r1, r13, r17) != false) goto L10\l}"];
subgraph cluster_Region_2083587231 {
label = "R(2:11|1)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x003a|EDGE_INSN: B:32:0x003a\-\>B:33:0x003b ?: BREAK  \l|r1 = true\l}"];
Node_InsnContainer_1717360425 [shape=record,label="{|break\l}"];
}
}
}
subgraph cluster_Region_122764851 {
label = "R(2:17|1)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0025|EDGE_INSN: B:29:0x0025\-\>B:33:0x003b ?: BREAK  \l|r1 = false\l}"];
Node_InsnContainer_495600594 [shape=record,label="{|break\l}"];
}
}
}
}
subgraph cluster_Region_764701069 {
label = "R(2:(2:13|14)|(1:15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_42825597 {
label = "IF [B:33:0x003b] THEN: R(2:13|14) ELSE: null";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x003b|EDGE_INSN: B:29:0x0025\-\>B:33:0x003b ?: BREAK  , EDGE_INSN: B:32:0x003a\-\>B:33:0x003b ?: BREAK  \lPHI: r1 \l  PHI: (r1v3 boolean) = (r1v2 boolean), (r1v5 boolean) binds: [B:29:0x0025, B:32:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == true) goto L13\l}"];
subgraph cluster_Region_40373658 {
label = "R(2:13|14)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x003d|r19.state = kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1303595734 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
}
}
}
}
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0000}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x003a|SYNTHETIC\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0025|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryAcquireCpuPermit((r19v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x003d \-\> B:36:0x0044, CROSS_EDGE: B:33:0x003b \-\> B:36:0x0044, CROSS_EDGE: B:32:0x003a \-\> B:33:0x003b, BACK_EDGE: B:31:0x0038 \-\> B:27:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_21;Node_24 -> Node_25;
Node_24 -> Node_26[style=dashed];
Node_25 -> Node_22;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_38[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_27[style=dashed];
Node_31 -> Node_39;
Node_32 -> Node_33;
Node_29 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_41[style=dashed];
Node_34 -> Node_40;
Node_40 -> Node_22;
Node_41 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_39 -> Node_32;
Node_38 -> Node_29;
}

