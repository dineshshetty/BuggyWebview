digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.runWorker()V" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:670)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0001|LOOP_START\lLOOP:0: B:35:0x0001\-\>B:59:0x0001\l|0x0001: IGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:671)\l0x0003: INVOKE  (r1 I:boolean) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.isTerminated():boolean A[MD:():boolean (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0042 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0009|0x0009: IGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l0x000b: SGET  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_38 [shape=record,label="{38\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0042 \l}"];
Node_39 [shape=record,label="{39\:\ 0x000f|0x000f: IGET  (r1 I:boolean) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.mayHaveLocalTasks boolean  (LINE:672)\l0x0011: INVOKE  (r1 I:kotlinx.coroutines.scheduling.Task) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r1 I:boolean) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findTask(boolean):kotlinx.coroutines.scheduling.Task A[MD:(boolean):kotlinx.coroutines.scheduling.Task (m)]\l0x0015: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:674)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0017|0x0017: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('task' kotlinx.coroutines.scheduling.Task)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0020 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0020|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|0x0020: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:680)\l0x0021: IPUT  (r4 I:boolean), (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.mayHaveLocalTasks boolean \l0x0023: IGET  (r4 I:long) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.minDelayUntilStealableTaskNs long  (LINE:693)\l0x0025: CMP_L  (r6 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0027|0x0027: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x003e \l}"];
Node_54 [shape=record,label="{54\:\ 0x003e|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x003e|0x003e: INVOKE  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryPark():void A[MD:():void (m)] (LINE:710)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0001|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0001|LOOP_END\lSYNTHETIC\lLOOP:0: B:35:0x0001\-\>B:59:0x0001\l}"];
Node_58 [shape=record,label="{58\:\ 0x0029|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0029|0x0029: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rescanned' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x002d  (LINE:694)\l}"];
Node_56 [shape=record,label="{56\:\ 0x002d|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x002d|0x002d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rescanned' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:697)\l0x002e: SGET  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.PARKING kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:698)\l0x0030: INVOKE  \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l  (r4 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean (m)]\l0x0033: INVOKE   type: STATIC call: java.lang.Thread.interrupted():boolean A[MD:():boolean (c)] (LINE:699)\l0x0036: IGET  (r4 I:long) = (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.minDelayUntilStealableTaskNs long  (LINE:700)\l0x0038: INVOKE  (r4 I:long) type: STATIC call: java.util.concurrent.locks.LockSupport.parkNanos(long):void A[MD:(long):void (c)]\l0x003b: IPUT  (r2 I:long), (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.minDelayUntilStealableTaskNs long  (LINE:701)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0001|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x002b|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x002b|0x002b: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('rescanned' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:695)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0001|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0019|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0019|0x0019: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('rescanned' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:675)\l0x001a: IPUT  (r2 I:long), (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.minDelayUntilStealableTaskNs long  (LINE:676)\l0x001c: INVOKE  \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l  (r1 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.executeTask(kotlinx.coroutines.scheduling.Task):void A[MD:(kotlinx.coroutines.scheduling.Task):void (m)] (LINE:677)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0001|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x0042|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0042|0x0042: SGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:712)\l0x0044: INVOKE  \l  (r7 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean (m)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x0047|RETURN\l|0x0047: RETURN    (LINE:713)\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_52 [shape=record,label="{52\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.runWorker((r7 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:41:0x0019 \-\> B:35:0x0001, BACK_EDGE: B:45:0x002b \-\> B:35:0x0001, BACK_EDGE: B:46:0x002d \-\> B:35:0x0001, BACK_EDGE: B:48:0x003e \-\> B:35:0x0001, CROSS_EDGE: B:36:0x0007 \-\> B:49:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0041: r1 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0001\-0x0047: r0 'rescanned' Z\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_52;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_53;
Node_39 -> Node_40;
Node_40 -> Node_51;
Node_40 -> Node_55[style=dashed];
Node_51 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_54;
Node_43 -> Node_58[style=dashed];
Node_54 -> Node_48;
Node_48 -> Node_60;
Node_60 -> Node_59;
Node_59 -> Node_35;
Node_58 -> Node_44;
Node_44 -> Node_56;
Node_44 -> Node_57[style=dashed];
Node_56 -> Node_46;
Node_46 -> Node_61;
Node_61 -> Node_59;
Node_57 -> Node_45;
Node_45 -> Node_62;
Node_62 -> Node_59;
Node_55 -> Node_41;
Node_41 -> Node_63;
Node_63 -> Node_59;
Node_53 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_33;
Node_52 -> Node_49;
}

