digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.nextInt(I)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|int r0 = r3.rngState\lr0 = r0 ^ (r0 \<\< 13)\lr0 = r0 ^ (r0 \>\> 17)\lr0 = r0 ^ (r0 \<\< 5)\lr3.rngState = r0\lint r1 = r4 + (\-1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|if ((r1 & r4) != 0) goto L6\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013}"];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|return r0 & r1\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016}"];
Node_15 [shape=record,label="{15\:\ 0x001b|RETURN\l|return (Integer.MAX_VALUE & r0) % r4\l}"];
MethodNode[shape=record,label="{public final int kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.nextInt((r3v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r4v0 'upperBound' int A[D('upperBound' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001b \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

