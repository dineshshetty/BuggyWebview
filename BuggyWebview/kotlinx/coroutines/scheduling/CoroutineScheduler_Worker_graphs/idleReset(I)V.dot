digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.idleReset(I)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|r2.terminationDeadline = 0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|if (r2.state != kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.PARKING) goto L14\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a}"];
Node_22 [shape=record,label="{22\:\ 0x000e|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L12\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|r1 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|if (r3 != 1) goto L7\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|r1 = false\l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v3 boolean) binds: [B:24:0x0012, B:26:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L9\l}"];
Node_29 [shape=record,label="{29\:\ 0x0019}"];
Node_30 [shape=record,label="{30\:\ 0x001e|throw new java.lang.AssertionError()\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|r2.state = kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING\l}"];
Node_32 [shape=record,label="{32\:\ 0x0023|RETURN\lORIG_RETURN\l|return\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.idleReset((r2v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r3v0 'mode' int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0023 \-\> B:18:?, CROSS_EDGE: B:24:0x0012 \-\> B:27:0x0016, CROSS_EDGE: B:22:0x000e \-\> B:31:0x001f, CROSS_EDGE: B:20:0x0008 \-\> B:32:0x0023\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_33;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_18;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_33 -> Node_18;
}

