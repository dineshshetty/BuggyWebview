digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findTask(Z)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryAcquireCpuPermit():boolean A[MD:():boolean (m)] (LINE:869)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x000b \l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|0x0006: INVOKE  (r0 I:kotlinx.coroutines.scheduling.Task) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r3 I:boolean A[D('scanLocalQueue' boolean)]) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findAnyTask(boolean):kotlinx.coroutines.scheduling.Task A[MD:(boolean):kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|0x000b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scanLocalQueue' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0020  (LINE:871)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|0x000d: IGET  (r0 I:kotlinx.coroutines.scheduling.WorkQueue) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.localQueue kotlinx.coroutines.scheduling.WorkQueue  (LINE:872)\l0x000f: INVOKE  (r0 I:kotlinx.coroutines.scheduling.Task) = (r0 I:kotlinx.coroutines.scheduling.WorkQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.WorkQueue.poll():kotlinx.coroutines.scheduling.Task A[MD:():kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002b \l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler \l0x0017: IGET  (r0 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue kotlinx.coroutines.scheduling.GlobalQueue \l0x0019: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlinx.coroutines.scheduling.GlobalQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.removeFirstOrNull():java.lang.Object A[MD:():E (m)]\l0x001d: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('task' kotlinx.coroutines.scheduling.Task)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0033  (LINE:876)\l}"];
Node_30 [shape=record,label="{30\:\ 0x002d|0x002d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x002e: INVOKE  (r1 I:kotlinx.coroutines.scheduling.Task) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r1 I:boolean) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.trySteal(boolean):kotlinx.coroutines.scheduling.Task A[MD:(boolean):kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0034: RETURN  (r1 I:kotlinx.coroutines.scheduling.Task) A[SYNTHETIC]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0033|0x0033: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('task' kotlinx.coroutines.scheduling.Task)]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0034|RETURN\lORIG_RETURN\l|0x0034: RETURN  (r1 I:kotlinx.coroutines.scheduling.Task) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|0x0020: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:874)\l0x0022: IGET  (r0 I:kotlinx.coroutines.scheduling.GlobalQueue) = (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.globalBlockingQueue kotlinx.coroutines.scheduling.GlobalQueue \l0x0024: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlinx.coroutines.scheduling.GlobalQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.GlobalQueue.removeFirstOrNull():java.lang.Object A[MD:():E (m)]\l0x0028: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r0 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findTask((r2 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[D('scanLocalQueue' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0034 \-\> B:18:?, CROSS_EDGE: B:31:0x0033 \-\> B:32:0x0034, CROSS_EDGE: B:25:0x0013 \-\> B:29:0x002b, CROSS_EDGE: B:27:0x0020 \-\> B:29:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002b\-0x0034: r0 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l  \-1 \-0x0034: r3 'scanLocalQueue' Z\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_18;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_33;
Node_33 -> Node_18;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_27 -> Node_29;
}

