digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$WorkerState;)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState r0 = r7.state\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|if (r0 != kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|r1 = true\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|PHI: r1 \l  PHI: (r1v2 'hadCpu' boolean) = (r1v1 'hadCpu' boolean), (r1v3 'hadCpu' boolean) binds: [B:16:0x0008, B:15:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L6\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|kotlinx.coroutines.scheduling.CoroutineScheduler r2 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\lkotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU.addAndGet(r2, 4398046511104L)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|if (r0 == r8) goto L8\l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|r7.state = r8\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\l|return r1\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|r1 = false\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu((r7v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r8v0 'newState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState A[D('newState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0018 \-\> B:21:0x001c, CROSS_EDGE: B:17:0x0009 \-\> B:19:0x0018, CROSS_EDGE: B:16:0x0008 \-\> B:17:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

