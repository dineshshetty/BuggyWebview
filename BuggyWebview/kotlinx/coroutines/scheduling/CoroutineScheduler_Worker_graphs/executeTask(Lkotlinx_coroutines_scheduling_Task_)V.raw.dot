digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.executeTask(Lkotlinx\/coroutines\/scheduling\/Task;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('task' kotlinx.coroutines.scheduling.Task)])  (LINE:746)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: IGET  (r2 I:kotlinx.coroutines.scheduling.TaskContext) = (r0 I:kotlinx.coroutines.scheduling.Task A[D('this_$iv' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:992)\l0x0004: INVOKE  (r0 I:int A[D('this_$iv' kotlinx.coroutines.scheduling.Task)]) = (r2 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l0x0009: INVOKE  (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r0 I:int A[D('taskMode' int)]) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.idleReset(int):void A[MD:(int):void (m)] (LINE:747)\l0x000c: INVOKE  (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r0 I:int A[D('taskMode' int)]) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.beforeTask(int):void A[MD:(int):void (m)] (LINE:748)\l0x000f: IGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:749)\l0x0011: INVOKE  \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r4 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(kotlinx.coroutines.scheduling.Task):void A[MD:(kotlinx.coroutines.scheduling.Task):void (m)]\l0x0014: INVOKE  (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r0 I:int A[D('taskMode' int)]) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.afterTask(int):void A[MD:(int):void (m)] (LINE:750)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|0x0017: RETURN    (LINE:751)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.executeTask((r3 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0008: r0 'this_$iv' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0002\-0x0008: r1 '$i$f$getMode' I\l  0x0009\-0x0017: r0 'taskMode' I\l  \-1 \-0x0017: r4 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

