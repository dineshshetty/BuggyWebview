digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findTask(Z)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0004|if (tryAcquireCpuPermit() == false) goto L6\l}"];
Node_21 [shape=record,label="{21\:\ 0x0006}"];
Node_22 [shape=record,label="{22\:\ 0x000a|RETURN\l|return findAnyTask(r3)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|if (r3 == false) goto L15\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|kotlinx.coroutines.scheduling.Task r0 = r2.localQueue.poll()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013|if (r0 != null) goto L10\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|kotlinx.coroutines.scheduling.Task r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.this.globalBlockingQueue.removeFirstOrNull()\l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|PHI: r0 \l  PHI: (r0v5 'task' kotlinx.coroutines.scheduling.Task) = (r0v4 'task' kotlinx.coroutines.scheduling.Task), (r0v7 'task' kotlinx.coroutines.scheduling.Task), (r0v11 'task' kotlinx.coroutines.scheduling.Task) binds: [B:27:0x0020, B:25:0x0013, B:26:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L13\l}"];
Node_30 [shape=record,label="{30\:\ 0x002d}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return trySteal(true)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0033}"];
Node_32 [shape=record,label="{32\:\ 0x0034|RETURN\lORIG_RETURN\l|return r0\l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|kotlinx.coroutines.scheduling.Task r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.this.globalBlockingQueue.removeFirstOrNull()\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findTask((r2v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r3v0 'scanLocalQueue' boolean A[D('scanLocalQueue' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0034 \-\> B:18:?, CROSS_EDGE: B:31:0x0033 \-\> B:32:0x0034, CROSS_EDGE: B:25:0x0013 \-\> B:29:0x002b, CROSS_EDGE: B:27:0x0020 \-\> B:29:0x002b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_18;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_33;
Node_33 -> Node_18;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_27 -> Node_29;
}

