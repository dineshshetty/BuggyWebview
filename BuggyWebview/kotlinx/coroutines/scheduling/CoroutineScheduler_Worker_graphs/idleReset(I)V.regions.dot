digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.idleReset(I)V" {
subgraph cluster_Region_550182788 {
label = "R(2:1|(1:(2:(1:(1:10))|12)))";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0000|r2.terminationDeadline = 0L\l}"];
subgraph cluster_Region_973834515 {
label = "R(1:(2:(1:(1:10))|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_867774508 {
label = "IF [B:20:0x0008] THEN: R(2:(1:(1:10))|12) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0008|if (r2.state == kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.PARKING) goto L3\l}"];
subgraph cluster_Region_950322701 {
label = "R(2:(1:(1:10))|12)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1089194402 {
label = "IF [B:22:0x000e] THEN: R(1:(1:10)) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x000e|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L5\l}"];
subgraph cluster_Region_651072445 {
label = "R(1:(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1544355608 {
label = "IF [B:27:0x0016] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0016|PHI: r1 \l  PHI: (r1v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r3 == 1) == false) goto L9\l}"];
subgraph cluster_Region_1116134970 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x001e|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_31 [shape=record,label="{31\:\ 0x001f|r2.state = kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING\l}"];
}
}
}
}
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x000a}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0010}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0012}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0015}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0019}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0023|ORIG_RETURN\l}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.idleReset((r2v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r3v0 'mode' int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0023 \-\> B:18:?, CROSS_EDGE: B:24:0x0012 \-\> B:27:0x0016, CROSS_EDGE: B:22:0x000e \-\> B:31:0x001f, CROSS_EDGE: B:20:0x0008 \-\> B:32:0x0023\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_17;Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_33[style=dashed];
Node_22 -> Node_23;
Node_22 -> Node_31[style=dashed];
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_30 -> Node_18;
Node_31 -> Node_32;
Node_17 -> Node_19;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27;
Node_26 -> Node_27;
Node_29 -> Node_30;
Node_32 -> Node_18;
Node_33 -> Node_18;
}

