digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findAnyTask(Z)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:884)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0001|0x0001: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scanLocalQueue' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0035 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0003|0x0003: IGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:885)\l0x0005: IGET  (r1 I:int) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler) kotlinx.coroutines.scheduling.CoroutineScheduler.corePoolSize int \l0x0007: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x0009: INVOKE  (r1 I:int) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r1 I:int) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.nextInt(int):int A[MD:(int):int (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0011 \l}"];
Node_36 [shape=record,label="{36\:\ 0x000f|0x000f: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('globalFirst' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x001e  (LINE:886)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0014|0x0014: INVOKE  (r2 I:kotlinx.coroutines.scheduling.Task) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.pollGlobalQueues():kotlinx.coroutines.scheduling.Task A[MD:():kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x001b \l}"];
Node_42 [shape=record,label="{42\:\ 0x001b|0x001b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x001c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:991)\l}"];
Node_43 [shape=record,label="{43\:\ 0x001d|RETURN\l|0x001d: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task A[D('it' kotlinx.coroutines.scheduling.Task)])  (LINE:886)\l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x001e|0x001e: IGET  (r2 I:kotlinx.coroutines.scheduling.WorkQueue A[D('$i$a$\-let\-CoroutineScheduler$Worker$findAnyTask$1' int)]) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.localQueue kotlinx.coroutines.scheduling.WorkQueue  (LINE:887)\l0x0020: INVOKE  (r2 I:kotlinx.coroutines.scheduling.Task) = (r2 I:kotlinx.coroutines.scheduling.WorkQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.WorkQueue.poll():kotlinx.coroutines.scheduling.Task A[MD:():kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0032 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('globalFirst' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x003b  (LINE:888)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0028|0x0028: INVOKE  (r2 I:kotlinx.coroutines.scheduling.Task) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.pollGlobalQueues():kotlinx.coroutines.scheduling.Task A[MD:():kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x002c|0x002c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x002f \l}"];
Node_50 [shape=record,label="{50\:\ 0x002f|0x002f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0030: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:991)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0031|RETURN\l|0x0031: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task A[D('it' kotlinx.coroutines.scheduling.Task)])  (LINE:888)\l}"];
Node_56 [shape=record,label="{56\:\ 0x003b|0x003b: INVOKE  (r0 I:kotlinx.coroutines.scheduling.Task) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r0 I:boolean) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.trySteal(boolean):kotlinx.coroutines.scheduling.Task A[MD:(boolean):kotlinx.coroutines.scheduling.Task (m)] (LINE:892)\l}"];
Node_57 [shape=record,label="{57\:\ 0x003f|RETURN\l|0x003f: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0032|0x0032: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.scheduling.Task)]) = (r2 I:??[OBJECT, ARRAY] A[D('$i$a$\-let\-CoroutineScheduler$Worker$findAnyTask$3' int)])  (LINE:887)\l0x0033: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:991)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0034|RETURN\l|0x0034: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task A[D('it' kotlinx.coroutines.scheduling.Task)])  (LINE:887)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0035|0x0035: INVOKE  (r1 I:kotlinx.coroutines.scheduling.Task) = (r3 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) type: DIRECT call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.pollGlobalQueues():kotlinx.coroutines.scheduling.Task A[MD:():kotlinx.coroutines.scheduling.Task (m)] (LINE:890)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0039|0x0039: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0040 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0040|0x0040: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:890)\l0x0041: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:991)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0042|RETURN\l|0x0042: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task A[D('it' kotlinx.coroutines.scheduling.Task)])  (LINE:890)\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.findAnyTask((r3 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r4 I:boolean A[D('scanLocalQueue' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:51:0x0031 \-\> B:31:?, CROSS_EDGE: B:57:0x003f \-\> B:31:?, CROSS_EDGE: B:46:0x0026 \-\> B:56:0x003b, CROSS_EDGE: B:53:0x0034 \-\> B:31:?, CROSS_EDGE: B:38:0x0012 \-\> B:44:0x001e, CROSS_EDGE: B:37:0x0011 \-\> B:38:0x0012, CROSS_EDGE: B:55:0x0039 \-\> B:56:0x003b, CROSS_EDGE: B:59:0x0042 \-\> B:31:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x001e: r0 'it' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x001d\-0x001e: r2 '$i$a$\-let\-CoroutineScheduler$Worker$findAnyTask$1' I\l  0x0030\-0x0032: r0 'it' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0031\-0x0032: r2 '$i$a$\-let\-CoroutineScheduler$Worker$findAnyTask$3' I\l  0x0033\-0x0035: r0 'it' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0012\-0x0035: r1 'globalFirst' Z\l  0x0034\-0x0035: r2 '$i$a$\-let\-CoroutineScheduler$Worker$findAnyTask$2' I\l  0x0041\-0x0042: r0 'it' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0042\-0x0042: r1 '$i$a$\-let\-CoroutineScheduler$Worker$findAnyTask$4' I\l  \-1 \-0x0042: r4 'scanLocalQueue' Z\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [991=4]\}\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_54;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_44;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_44[style=dashed];
Node_42 -> Node_43;
Node_43 -> Node_31;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_52;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_56;
Node_47 -> Node_48;
Node_48 -> Node_50;
Node_48 -> Node_56[style=dashed];
Node_50 -> Node_51;
Node_51 -> Node_31;
Node_56 -> Node_57;
Node_57 -> Node_31;
Node_52 -> Node_53;
Node_53 -> Node_31;
Node_37 -> Node_38;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_31;
}

