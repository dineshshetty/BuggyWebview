digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.afterTask(I)V" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('taskMode' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0003  (LINE:762)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0002|RETURN\l|0x0002: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0003|0x0003: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:763)\l0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: SGET  (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:993)\l0x0008: CONST  (r3 I:??[long, double]) = (\-2097152(0xffffffffffe00000, double:NaN) ??[long, double]) \l0x000b: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater)\l  (r0 I:java.lang.Object A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l  (r3 I:long)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(java.lang.Object, long):long A[MD:(T, long):long (c)]\l0x000f: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState A[D('this_$iv' kotlinx.coroutines.scheduling.CoroutineScheduler)]) = (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:764)\l0x0011: SGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:766)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:? \l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|0x0015: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:767)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0019|0x0019: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x002c \l}"];
Node_27 [shape=record,label="{27\:\ 0x001b|0x001b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:991)\l0x001c: SGET  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:767)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|0x001e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentState' kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0022 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|0x0020: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|0x0023: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0026 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0026|0x0026: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0028: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x002b|0x002b: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|0x0022: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x002c|0x002c: SGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.DORMANT kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:768)\l0x002e: IPUT  \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l  (r5 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_36 [shape=record,label="{36\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: RETURN    (LINE:770)\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN   A[SYNTHETIC] (LINE:770)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.afterTask((r5 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('taskMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x002b \-\> B:20:?, CROSS_EDGE: B:36:0x0030 \-\> B:20:?, CROSS_EDGE: B:30:0x0022 \-\> B:31:0x0023, CROSS_EDGE: B:26:0x0019 \-\> B:35:0x002c, CROSS_EDGE: B:24:0x0013 \-\> B:36:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x000f: r0 'this_$iv' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\l  0x0006\-0x000f: r1 '$i$f$decrementBlockingTasks' I\l  0x001c\-0x0023: r1 '$i$a$\-assert\-CoroutineScheduler$Worker$afterTask$1' I\l  0x0011\-0x0030: r0 'currentState' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler$WorkerState;\l  \-1 \-0x0030: r6 'taskMode' I\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_20;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_37;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_20;
Node_30 -> Node_31;
Node_35 -> Node_36;
Node_36 -> Node_20;
Node_37 -> Node_20;
}

