digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.beforeTask(I)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('taskMode' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0003  (LINE:754)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|RETURN\l|0x0002: RETURN   \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|0x0003: SGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:756)\l0x0005: INVOKE  (r0 I:boolean) = \l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean A[MD:(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState):boolean (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:? \l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:757)\l0x000d: INVOKE  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.signalCpuWork():void A[MD:():void (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: RETURN    (LINE:759)\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x0010: RETURN   A[SYNTHETIC] (LINE:759)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.beforeTask((r1 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('taskMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0010 \-\> B:10:?, CROSS_EDGE: B:14:0x0009 \-\> B:16:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r2 'taskMode' I\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

