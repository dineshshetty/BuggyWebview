digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.idleReset(I)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:861)\l0x0002: IPUT  (r0 I:long), (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.terminationDeadline long \l0x0004: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) = (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:862)\l0x0006: SGET  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.PARKING kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:? \l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:863)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001f \l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:991)\l0x0011: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:863)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|0x0012: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mode' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0015 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0019 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0019|0x0019: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001b: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x001e|0x001e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|0x001f: SGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:864)\l0x0021: IPUT  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l}"];
Node_32 [shape=record,label="{32\:\ 0x0023|RETURN\lORIG_RETURN\l|0x0023: RETURN    (LINE:866)\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN   A[SYNTHETIC] (LINE:866)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.idleReset((r2 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0023 \-\> B:18:?, CROSS_EDGE: B:24:0x0012 \-\> B:27:0x0016, CROSS_EDGE: B:22:0x000e \-\> B:31:0x001f, CROSS_EDGE: B:20:0x0008 \-\> B:32:0x0023\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0016: r0 '$i$a$\-assert\-CoroutineScheduler$Worker$idleReset$1' I\l  \-1 \-0x0023: r3 'mode' I\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_33;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_18;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_33 -> Node_18;
}

