digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryAcquireCpuPermit()Z" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000}"];
Node_24 [shape=record,label="{24\:\ 0x0008|if (r19.state != kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED) goto L5\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|RETURN\lORIG_RETURN\l|return true\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|kotlinx.coroutines.scheduling.CoroutineScheduler r1 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|LOOP_START\lLOOP:0: B:27:0x0011\-\>B:31:0x0038\l|long r13 = r1.controlState\l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|if (((int) ((kotlinx.coroutines.scheduling.CoroutineScheduler.CPU_PERMITS_MASK & r13) \>\> 42)) != 0) goto L8\l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|long r17 = r13 \- 4398046511104L\l}"];
Node_31 [shape=record,label="{31\:\ 0x0038|LOOP_END\lLOOP:0: B:27:0x0011\-\>B:31:0x0038\l|if (kotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU.compareAndSet(r1, r13, r17) == false) goto L6\l}"];
Node_39 [shape=record,label="{39\:\ 0x003a|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x003a|r1 = true\l}"];
Node_33 [shape=record,label="{33\:\ 0x003b|PHI: r1 \l  PHI: (r1v3 boolean) = (r1v2 boolean), (r1v5 boolean) binds: [B:29:0x0025, B:32:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L15\l}"];
Node_34 [shape=record,label="{34\:\ 0x003d|r19.state = kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.CPU_ACQUIRED\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_38 [shape=record,label="{38\:\ 0x0025|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0025|r1 = false\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.tryAcquireCpuPermit((r19v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x003d \-\> B:36:0x0044, CROSS_EDGE: B:33:0x003b \-\> B:36:0x0044, CROSS_EDGE: B:32:0x003a \-\> B:33:0x003b, BACK_EDGE: B:31:0x0038 \-\> B:27:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_22;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_38[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_27;
Node_31 -> Node_39[style=dashed];
Node_39 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_40;
Node_40 -> Node_22;
Node_41 -> Node_22;
Node_38 -> Node_29;
Node_29 -> Node_33;
}

