digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.\<init\>(Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IPUT  \l  (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this$0' kotlinx.coroutines.scheduling.CoroutineScheduler)])\l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.this$0 kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:579)\l0x0002: INVOKE  (r1 I:java.lang.Thread) type: DIRECT call: java.lang.Thread.\<init\>():void A[MD:():void (c)]\l0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:581)\l0x0007: INVOKE  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker), (r0 I:boolean) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.setDaemon(boolean):void A[MD:(boolean):void (c)]\l0x000b: NEW_INSTANCE  (r0 I:kotlinx.coroutines.scheduling.WorkQueue) =  kotlinx.coroutines.scheduling.WorkQueue  (LINE:599)\l0x000d: INVOKE  (r0 I:kotlinx.coroutines.scheduling.WorkQueue) type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.\<init\>():void A[MD:():void (m)]\l0x0010: IPUT  (r0 I:kotlinx.coroutines.scheduling.WorkQueue), (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.localQueue kotlinx.coroutines.scheduling.WorkQueue \l0x0012: SGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState) =  kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.DORMANT kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState  (LINE:607)\l0x0014: IPUT  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)\l  (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)\l kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.state kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState \l0x0016: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:616)\l0x0017: IPUT  (r0 I:int), (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.workerCtl int \l0x0019: SGET  (r0 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.scheduling.CoroutineScheduler.NOT_IN_STACK kotlinx.coroutines.internal.Symbol  (LINE:630)\l0x001b: IPUT  (r0 I:java.lang.Object), (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.nextParkedWorker java.lang.Object \l0x001d: SGET  (r0 I:kotlin.random.Random$Default) =  kotlin.random.Random.Default kotlin.random.Random$Default  (LINE:637)\l0x001f: INVOKE  (r0 I:int) = (r0 I:kotlin.random.Random$Default) type: VIRTUAL call: kotlin.random.Random.Default.nextInt():int A[MD:():int (m)]\l0x0023: IPUT  (r0 I:int), (r1 I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker) kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.rngState int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:579)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.\<init\>((r1 'this' I:kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.scheduling.CoroutineScheduler A[D('this$0' kotlinx.coroutines.scheduling.CoroutineScheduler), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | SKIP_FIRST_ARG\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r2 'this$0' Lkotlinx\/coroutines\/scheduling\/CoroutineScheduler;\lSIGNATURE: ()V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

