digraph "CFG forkotlinx.coroutines.scheduling.CoroutineScheduler.Worker.afterTask(I)V" {
subgraph cluster_Region_96166021 {
label = "R(1:(2:(1:2)|(2:4|(1:(2:(1:(1:13))|15)))))";
node [shape=record,color=blue];
subgraph cluster_Region_820454990 {
label = "R(2:(1:2)|(2:4|(1:(2:(1:(1:13))|15))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_593262624 {
label = "IF [B:21:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0000|if (r6 == 0) goto L2\l}"];
subgraph cluster_Region_1315092165 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0002|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_458062936 {
label = "R(2:4|(1:(2:(1:(1:13))|15)))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0003|kotlinx.coroutines.scheduling.CoroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler r0 = kotlinx.coroutines.scheduling.CoroutineScheduler.this\lkotlinx.coroutines.scheduling.CoroutineScheduler.controlState$FU.addAndGet(r0, kotlinx.coroutines.scheduling.CoroutineScheduler.PARKED_VERSION_MASK)\lkotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState r0 = r5.state\l}"];
subgraph cluster_Region_277039300 {
label = "R(1:(2:(1:(1:13))|15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2105955970 {
label = "IF [B:24:0x0013] THEN: R(2:(1:(1:13))|15) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0013|if (r0 != kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.TERMINATED) goto L6\l}"];
subgraph cluster_Region_425707980 {
label = "R(2:(1:(1:13))|15)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1493315519 {
label = "IF [B:26:0x0019] THEN: R(1:(1:13)) ELSE: null";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0019|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L8\l}"];
subgraph cluster_Region_42827460 {
label = "R(1:(1:13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_123662804 {
label = "IF [B:31:0x0023] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0023|PHI: r2 \l  PHI: (r2v3 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r0 == kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.BLOCKING) == false) goto L12\l}"];
subgraph cluster_Region_138593081 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x002b|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_35 [shape=record,label="{35\:\ 0x002c|r5.state = kotlinx.coroutines.scheduling.CoroutineScheduler.WorkerState.DORMANT\l}"];
}
}
}
}
}
}
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0015}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x001b}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x001e}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0020}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0026}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0022}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0030|ORIG_RETURN\l}"];
Node_37 [shape=record,color=red,label="{37\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.CoroutineScheduler.Worker.afterTask((r5v0 'this' kotlinx.coroutines.scheduling.CoroutineScheduler$Worker A[IMMUTABLE_TYPE, THIS]), (r6v0 'taskMode' int A[D('taskMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x002b \-\> B:20:?, CROSS_EDGE: B:36:0x0030 \-\> B:20:?, CROSS_EDGE: B:30:0x0022 \-\> B:31:0x0023, CROSS_EDGE: B:26:0x0019 \-\> B:35:0x002c, CROSS_EDGE: B:24:0x0013 \-\> B:36:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_19;Node_21 -> Node_22;
Node_21 -> Node_23[style=dashed];
Node_22 -> Node_20;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_37[style=dashed];
Node_26 -> Node_27;
Node_26 -> Node_35[style=dashed];
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_34 -> Node_20;
Node_35 -> Node_36;
Node_19 -> Node_21;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_33 -> Node_34;
Node_30 -> Node_31;
Node_36 -> Node_20;
Node_37 -> Node_20;
}

