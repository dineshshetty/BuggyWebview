digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.pollBuffer()Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|LOOP_START\lLOOP:0: B:2:0x0000\-\>B:16:0x0000\l|0x0001: IGET  (r0 I:int) = (r5 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.consumerIndex int  (LINE:182)\l0x0003: IGET  (r1 I:int) = (r5 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.producerIndex int  (LINE:183)\l0x0005: ARITH  (r1 I:int) = (r0 I:int A[D('tailLocal' int)]) \- (r1 I:int) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: ARITH  (r1 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char] A[D('tailLocal' int)]) & (127(0x7f, float:1.78E\-43) ??[int, float, short, byte, char])  (LINE:184)\l0x000d: SGET  (r3 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.consumerIndex$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:185)\l0x000f: ARITH  (r4 I:int) = (r0 I:int A[D('tailLocal' int)]) + (1 int) \l0x0011: INVOKE  (r3 I:boolean) = \l  (r3 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater)\l  (r5 I:java.lang.Object)\l  (r0 I:int A[D('tailLocal' int)])\l  (r4 I:int)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.lang.Object, int, int):boolean A[MD:(T, int, int):boolean (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0000 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IGET  (r3 I:java.util.concurrent.atomic.AtomicReferenceArray\<kotlinx.coroutines.scheduling.Task\>) = (r5 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.buffer java.util.concurrent.atomic.AtomicReferenceArray  (LINE:187)\l0x0019: INVOKE  (r2 I:java.lang.Object) = (r3 I:java.util.concurrent.atomic.AtomicReferenceArray), (r1 I:int A[D('index' int)]), (r2 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int, java.lang.Object):java.lang.Object A[MD:(int, E):E (c)]\l0x001d: CHECK_CAST (r2 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0022 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: INVOKE  \l  (r5 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r2 I:kotlinx.coroutines.scheduling.Task A[D('value' kotlinx.coroutines.scheduling.Task)])\l type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.decrementIfBlocking(kotlinx.coroutines.scheduling.Task):void A[MD:(kotlinx.coroutines.scheduling.Task):void (m)] (LINE:188)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|RETURN\l|0x0025: RETURN  (r2 I:kotlinx.coroutines.scheduling.Task A[D('value' kotlinx.coroutines.scheduling.Task)])  (LINE:189)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|LOOP_END\lSYNTHETIC\lLOOP:0: B:2:0x0000\-\>B:16:0x0000\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|0x000a: RETURN  (r2 I:kotlinx.coroutines.scheduling.Task) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.WorkQueue.pollBuffer((r5 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0025 \-\> B:1:?, BACK_EDGE: B:8:0x001f \-\> B:2:0x0000, BACK_EDGE: B:6:0x0015 \-\> B:2:0x0000\lDebug Info:\l  0x0022\-0x0026: r2 'value' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0003\-0x0026: r0 'tailLocal' I\l  0x000d\-0x0026: r1 'index' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_14[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_13[style=dashed];
Node_6 -> Node_17;
Node_13 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_15;
Node_8 -> Node_18[style=dashed];
Node_15 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_18 -> Node_16;
Node_16 -> Node_2;
Node_17 -> Node_16;
Node_14 -> Node_4;
Node_4 -> Node_1;
}

