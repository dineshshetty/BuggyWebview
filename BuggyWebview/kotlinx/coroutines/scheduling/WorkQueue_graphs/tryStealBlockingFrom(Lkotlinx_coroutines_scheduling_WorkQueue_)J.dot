digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.tryStealBlockingFrom(Lkotlinx\/coroutines\/scheduling\/WorkQueue;)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (getBufferSize$kotlinx_coroutines_core() != 0) goto L10\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|r0 = 1\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|PHI: r0 \l  PHI: (r0v6 int) = (r0v5 int), (r0v8 int) binds: [B:7:0x0011, B:6:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == 0) goto L7\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015}"];
Node_11 [shape=record,label="{11\:\ 0x001a|throw new java.lang.AssertionError()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|r0 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|int r0 = r11.consumerIndex\lint r3 = r11.producerIndex\ljava.util.concurrent.atomic.AtomicReferenceArray\<kotlinx.coroutines.scheduling.Task\> r4 = r11.buffer\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|LOOP_START\lLOOP:0: B:13:0x0021\-\>B:28:0x0054\lPHI: r0 \l  PHI: (r0v2 'start' int) = (r0v1 'start' int), (r0v3 'start' int) binds: [B:12:0x001b, B:28:0x0054] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == r3) goto L34\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|r5 = r0 & kotlinx.coroutines.scheduling.WorkQueueKt.MASK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|if (r11.blockingTasksInBuffer != 0) goto L15\l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|kotlinx.coroutines.scheduling.Task r6 = r4.get(r5)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0030|if (r6 == null) goto L30\l}"];
Node_19 [shape=record,label="{19\:\ 0x0032}"];
Node_20 [shape=record,label="{20\:\ 0x003a|if (r6.taskContext.getTaskMode() != 1) goto L29\l}"];
Node_21 [shape=record,label="{21\:\ 0x003c|r7 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|PHI: r7 \l  PHI: (r7v2 boolean) = (r7v1 boolean), (r7v4 boolean) binds: [B:22:0x003e, B:21:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == false) goto L28\l}"];
Node_24 [shape=record,label="{24\:\ 0x0041}"];
Node_25 [shape=record,label="{25\:\ 0x0046|if (r4.compareAndSet(r5, r6, null) == false) goto L26\l}"];
Node_32 [shape=record,label="{32\:\ 0x0048|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0048|kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer$FU.decrementAndGet(r11)\ladd$default(r10, r6, false, 2, null)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|RETURN\l|return \-1\l}"];
Node_36 [shape=record,label="{36\:\ 0x0054|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|LOOP_END\lLOOP:0: B:13:0x0021\-\>B:28:0x0054\l|int r0 = r0 + 1\l}"];
Node_35 [shape=record,label="{35\:\ 0x0054|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003e|r7 = false\l}"];
Node_34 [shape=record,label="{34\:\ 0x0054|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0058|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0058}"];
Node_30 [shape=record,label="{30\:\ 0x005c|RETURN\l|return tryStealLastScheduled(r11, true)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0058|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final long kotlinx.coroutines.scheduling.WorkQueue.tryStealBlockingFrom((r10v0 'this' kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r11v0 'victim' kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0053 \-\> B:1:?, BACK_EDGE: B:28:0x0054 \-\> B:13:0x0021, CROSS_EDGE: B:23:0x003f \-\> B:28:0x0054, CROSS_EDGE: B:22:0x003e \-\> B:23:0x003f, CROSS_EDGE: B:18:0x0030 \-\> B:28:0x0054, CROSS_EDGE: B:30:0x005c \-\> B:1:?, CROSS_EDGE: B:13:0x0021 \-\> B:29:0x0058, CROSS_EDGE: B:7:0x0011 \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0006 \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_7 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_31;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_33[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_34;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_35;
Node_24 -> Node_25;
Node_25 -> Node_32[style=dashed];
Node_25 -> Node_36;
Node_32 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_1;
Node_36 -> Node_28;
Node_28 -> Node_13;
Node_35 -> Node_28;
Node_22 -> Node_23;
Node_34 -> Node_28;
Node_33 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_1;
Node_31 -> Node_29;
}

