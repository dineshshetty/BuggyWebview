digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.tryStealFrom(Lkotlinx\/coroutines\/scheduling\/WorkQueue;)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:109)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l0x0009: INVOKE  (r3 I:int) = (r5 I:kotlinx.coroutines.scheduling.WorkQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.WorkQueue.getBufferSize$kotlinx_coroutines_core():int A[MD:():int (m)] (LINE:109)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-WorkQueue$tryStealFrom$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-WorkQueue$tryStealFrom$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0015 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0017: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-WorkQueue$tryStealFrom$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: INVOKE  (r0 I:kotlinx.coroutines.scheduling.Task) = (r6 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)]) type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.pollBuffer():kotlinx.coroutines.scheduling.Task A[MD:():kotlinx.coroutines.scheduling.Task (m)] (LINE:110)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('task' kotlinx.coroutines.scheduling.Task)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x003e  (LINE:111)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|0x0021: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:112)\l0x0022: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: INVOKE  (r3 I:kotlinx.coroutines.scheduling.Task) = \l  (r5 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r0 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)])\l  (r2 I:boolean)\l  (r3 I:int)\l  (r4 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.scheduling.WorkQueue.add$default(kotlinx.coroutines.scheduling.WorkQueue, kotlinx.coroutines.scheduling.Task, boolean, int, java.lang.Object):kotlinx.coroutines.scheduling.Task A[MD:(kotlinx.coroutines.scheduling.WorkQueue, kotlinx.coroutines.scheduling.Task, boolean, int, java.lang.Object):kotlinx.coroutines.scheduling.Task (m)]\l0x0027: INVOKE  (r4 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:113)\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|0x002b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x003b \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|0x002e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('notAdded' kotlinx.coroutines.scheduling.Task)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0031  (LINE:113)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0031|0x0031: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0032|0x0032: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0035 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0035|0x0035: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0037: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|0x003a: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|0x003b: CONST  (r1 I:??[long, double]) = (\-1 ??[long, double]) A[SYNTHETIC] (LINE:114)\l0x003d: RETURN  (r1 I:long) A[SYNTHETIC]\l}"];
Node_24 [shape=record,label="{24\:\ 0x003b|RETURN\lORIG_RETURN\l|0x003b: CONST  (r1 I:??[long, double]) = (\-1 ??[long, double])  (LINE:114)\l0x003d: RETURN  (r1 I:long) \l}"];
Node_26 [shape=record,label="{26\:\ 0x003e|0x003e: INVOKE  (r1 I:long) = \l  (r5 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r6 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)])\l  (r2 I:boolean)\l type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue, boolean):long A[MD:(kotlinx.coroutines.scheduling.WorkQueue, boolean):long (m)] (LINE:116)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0042|RETURN\l|0x0042: RETURN  (r1 I:long) \l}"];
MethodNode[shape=record,label="{public final long kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom((r5 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x003a \-\> B:1:?, CROSS_EDGE: B:25:0x003d \-\> B:1:?, CROSS_EDGE: B:17:0x002e \-\> B:20:0x0032, CROSS_EDGE: B:15:0x002b \-\> B:24:0x003b, CROSS_EDGE: B:27:0x0042 \-\> B:1:?, CROSS_EDGE: B:7:0x0011 \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0006 \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0012: r0 '$i$a$\-assert\-WorkQueue$tryStealFrom$1' I\l  0x002e\-0x0032: r4 '$i$a$\-assert\-WorkQueue$tryStealFrom$2' I\l  0x0027\-0x003e: r3 'notAdded' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x001f\-0x0042: r0 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l  \-1 \-0x0042: r6 'victim' Lkotlinx\/coroutines\/scheduling\/WorkQueue;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_7 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_26;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_24;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_28[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_1;
Node_28 -> Node_1;
Node_24 -> Node_1;
Node_26 -> Node_27;
Node_27 -> Node_1;
}

