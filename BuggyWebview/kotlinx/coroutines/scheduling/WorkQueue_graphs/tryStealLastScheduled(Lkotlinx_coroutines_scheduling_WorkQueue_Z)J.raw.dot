digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled(Lkotlinx\/coroutines\/scheduling\/WorkQueue;Z)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|LOOP_START\lLOOP:0: B:2:0x0000\-\>B:18:0x0038\l|0x0001: IGET  (r0 I:java.lang.Object) = (r10 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)]) kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask java.lang.Object  (LINE:152)\l0x0003: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r0 I:??[OBJECT, ARRAY]) \l0x0005: CONST  (r1 I:??[long, double]) = (\-2 ??[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:153)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('blockingOnly' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001d \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('lastScheduled' kotlinx.coroutines.scheduling.Task)]) \l0x000e: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: IGET  (r6 I:kotlinx.coroutines.scheduling.TaskContext) = (r4 I:kotlinx.coroutines.scheduling.Task A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:205)\l0x0011: INVOKE  (r6 I:int) = (r6 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l0x0015: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|0x0016: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0019 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001d  (LINE:153)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001c|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|RETURN\l|0x001c: RETURN  (r1 I:long) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: SGET  (r1 I:kotlinx.coroutines.scheduling.SchedulerTimeSource) =  kotlinx.coroutines.scheduling.TasksKt.schedulerTimeSource kotlinx.coroutines.scheduling.SchedulerTimeSource  (LINE:156)\l0x001f: INVOKE  (r1 I:long) = (r1 I:kotlinx.coroutines.scheduling.SchedulerTimeSource) type: VIRTUAL call: kotlinx.coroutines.scheduling.SchedulerTimeSource.nanoTime():long A[MD:():long (m)]\l0x0023: IGET  (r4 I:long) = (r0 I:kotlinx.coroutines.scheduling.Task A[D('lastScheduled' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.submissionTime long  (LINE:157)\l0x0025: ARITH  (r4 I:long) = (r1 I:long A[D('time' long)]) \- (r4 I:long) \l0x0027: SGET  (r6 I:long) =  kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS long  (LINE:158)\l0x0029: CMP_L  (r8 I:int) = (r4 I:long A[D('staleness' long)]), (r6 I:long) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: IF  (r8 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:17:0x0031 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0031|0x0031: SGET  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:166)\l0x0033: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0034: INVOKE  (r6 I:boolean) = \l  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r10 I:java.lang.Object A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)])\l  (r0 I:java.lang.Object A[D('lastScheduled' kotlinx.coroutines.scheduling.Task)])\l  (r7 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|LOOP_END\lLOOP:0: B:2:0x0000\-\>B:18:0x0038\l|0x0038: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0000 \l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: CONST  (r6 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:167)\l0x003b: INVOKE  \l  (r9 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r0 I:kotlinx.coroutines.scheduling.Task A[D('lastScheduled' kotlinx.coroutines.scheduling.Task)])\l  (r3 I:boolean)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.scheduling.WorkQueue.add$default(kotlinx.coroutines.scheduling.WorkQueue, kotlinx.coroutines.scheduling.Task, boolean, int, java.lang.Object):kotlinx.coroutines.scheduling.Task A[MD:(kotlinx.coroutines.scheduling.WorkQueue, kotlinx.coroutines.scheduling.Task, boolean, int, java.lang.Object):kotlinx.coroutines.scheduling.Task (m)]\l0x003e: CONST  (r6 I:??[long, double]) = (\-1 ??[long, double])  (LINE:168)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|RETURN\l|0x0040: RETURN  (r6 I:long) \l}"];
Node_25 [shape=record,label="{25\:\ 0x002d|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: SGET  (r6 I:long) =  kotlinx.coroutines.scheduling.TasksKt.WORK_STEALING_TIME_RESOLUTION_NS long  (LINE:159)\l0x002f: ARITH  (r6 I:long) = (r6 I:long) \- (r4 I:long A[D('staleness' long)]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|RETURN\l|0x0030: RETURN  (r6 I:long) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|RETURN\l|0x0009: RETURN  (r1 I:long) \l}"];
MethodNode[shape=record,label="{private final long kotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled((r9 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r10 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('blockingOnly' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x001c \-\> B:1:?, CROSS_EDGE: B:16:0x0030 \-\> B:1:?, CROSS_EDGE: B:20:0x0040 \-\> B:1:?, BACK_EDGE: B:18:0x0038 \-\> B:2:0x0000, CROSS_EDGE: B:8:0x0016 \-\> B:11:0x001a, CROSS_EDGE: B:6:0x000b \-\> B:13:0x001d\lDebug Info:\l  0x000e\-0x001a: r4 '$this$isBlocking$iv' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x000f\-0x001a: r5 '$i$f$isBlocking' I\l  0x000a\-0x0041: r0 'lastScheduled' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0023\-0x0041: r1 'time' J\l  0x0027\-0x0041: r4 'staleness' J\l  \-1 \-0x0041: r10 'victim' Lkotlinx\/coroutines\/scheduling\/WorkQueue;\l  \-1 \-0x0041: r11 'blockingOnly' Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_22[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_24[style=dashed];
Node_24 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_17;
Node_14 -> Node_25[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_2;
Node_18 -> Node_23[style=dashed];
Node_23 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_25 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_22 -> Node_4;
Node_4 -> Node_1;
}

