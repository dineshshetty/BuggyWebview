digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.\<init\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r2 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:37)\l0x0003: NEW_INSTANCE  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray) =  java.util.concurrent.atomic.AtomicReferenceArray  (LINE:54)\l0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (128(0x80, float:1.8E\-43) ??[int, float, short, byte, char]) \l0x0007: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray), (r1 I:int) type: DIRECT call: java.util.concurrent.atomic.AtomicReferenceArray.\<init\>(int):void A[MD:(int):void (c)]\l0x000a: IPUT  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray\<kotlinx.coroutines.scheduling.Task\>)\l  (r2 I:kotlinx.coroutines.scheduling.WorkQueue)\l kotlinx.coroutines.scheduling.WorkQueue.buffer java.util.concurrent.atomic.AtomicReferenceArray \l0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:55)\l0x000d: IPUT  (r0 I:java.lang.Object), (r2 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask java.lang.Object \l0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:57)\l0x0010: IPUT  (r0 I:int), (r2 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.producerIndex int \l0x0012: IPUT  (r0 I:int), (r2 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.consumerIndex int  (LINE:58)\l0x0014: IPUT  (r0 I:int), (r2 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer int  (LINE:60)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|RETURN\l|0x0016: RETURN    (LINE:37)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.WorkQueue.\<init\>((r2 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

