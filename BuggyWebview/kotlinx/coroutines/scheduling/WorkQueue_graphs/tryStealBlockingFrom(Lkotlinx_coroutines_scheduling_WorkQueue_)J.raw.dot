digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.tryStealBlockingFrom(Lkotlinx\/coroutines\/scheduling\/WorkQueue;)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:120)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l0x0009: INVOKE  (r3 I:int) = (r10 I:kotlinx.coroutines.scheduling.WorkQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.WorkQueue.getBufferSize$kotlinx_coroutines_core():int A[MD:():int (m)] (LINE:120)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-WorkQueue$tryStealBlockingFrom$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-WorkQueue$tryStealBlockingFrom$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0015 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0017: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-WorkQueue$tryStealBlockingFrom$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: IGET  (r0 I:int) = (r11 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)]) kotlinx.coroutines.scheduling.WorkQueue.consumerIndex int  (LINE:121)\l0x001d: IGET  (r3 I:int) = (r11 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)]) kotlinx.coroutines.scheduling.WorkQueue.producerIndex int  (LINE:122)\l0x001f: IGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceArray\<kotlinx.coroutines.scheduling.Task\>) = (r11 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)]) kotlinx.coroutines.scheduling.WorkQueue.buffer java.util.concurrent.atomic.AtomicReferenceArray  (LINE:123)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|LOOP_START\lLOOP:0: B:13:0x0021\-\>B:28:0x0054\l|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('end' int)])  \-\> B:31:0x0058  (LINE:125)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|0x0023: ARITH  (r5 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char] A[D('start' int)]) & (127(0x7f, float:1.78E\-43) ??[int, float, short, byte, char])  (LINE:126)\l0x0025: IGET  (r6 I:int) = (r11 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)]) kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer int  (LINE:127)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0027|0x0027: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002a \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: INVOKE  (r6 I:java.lang.Object) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceArray A[D('buffer' java.util.concurrent.atomic.AtomicReferenceArray)])\l  (r5 I:int A[D('index' int)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:128)\l0x002e: CHECK_CAST (r6 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0030|0x0030: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' kotlinx.coroutines.scheduling.Task)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0054  (LINE:129)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0032|0x0032: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('value' kotlinx.coroutines.scheduling.Task)]) \l0x0033: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0034: IGET  (r9 I:kotlinx.coroutines.scheduling.TaskContext) = (r7 I:kotlinx.coroutines.scheduling.Task A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:204)\l0x0036: INVOKE  (r9 I:int) = (r9 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x003a|0x003a: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003e \l}"];
Node_21 [shape=record,label="{21\:\ 0x003c|0x003c: CONST  (r7 I:??[boolean, int, float, short, byte, char] A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|0x003f: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0054  (LINE:129)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0041|0x0041: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0042: INVOKE  (r8 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceArray A[D('buffer' java.util.concurrent.atomic.AtomicReferenceArray)])\l  (r5 I:int A[D('index' int)])\l  (r6 I:java.lang.Object A[D('value' kotlinx.coroutines.scheduling.Task)])\l  (r7 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int, java.lang.Object, java.lang.Object):boolean A[MD:(int, E, E):boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0046|0x0046: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0054 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0048|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0048|0x0048: SGET  (r2 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:130)\l0x004a: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater)\l  (r11 I:java.lang.Object A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(java.lang.Object):int A[MD:(T):int (c)]\l0x004d: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:131)\l0x004e: INVOKE  \l  (r10 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r6 I:kotlinx.coroutines.scheduling.Task A[D('value' kotlinx.coroutines.scheduling.Task)])\l  (r1 I:boolean)\l  (r2 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.scheduling.WorkQueue.add$default(kotlinx.coroutines.scheduling.WorkQueue, kotlinx.coroutines.scheduling.Task, boolean, int, java.lang.Object):kotlinx.coroutines.scheduling.Task A[MD:(kotlinx.coroutines.scheduling.WorkQueue, kotlinx.coroutines.scheduling.Task, boolean, int, java.lang.Object):kotlinx.coroutines.scheduling.Task (m)]\l0x0051: CONST  (r1 I:??[long, double]) = (\-1 ??[long, double])  (LINE:132)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0053|RETURN\l|0x0053: RETURN  (r1 I:long) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0054|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|LOOP_END\lLOOP:0: B:13:0x0021\-\>B:28:0x0054\l|0x0055: ARITH  (r0 I:int) = (r0 I:int A[D('start' int)]) + (1 int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0054|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003e|0x003e: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0054|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0058|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0058|0x0058: INVOKE  (r1 I:long) = \l  (r10 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r11 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue)])\l  (r2 I:boolean)\l type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue, boolean):long A[MD:(kotlinx.coroutines.scheduling.WorkQueue, boolean):long (m)] (LINE:137)\l}"];
Node_30 [shape=record,label="{30\:\ 0x005c|RETURN\l|0x005c: RETURN  (r1 I:long) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0058|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final long kotlinx.coroutines.scheduling.WorkQueue.tryStealBlockingFrom((r10 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r11 I:kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0053 \-\> B:1:?, BACK_EDGE: B:28:0x0054 \-\> B:13:0x0021, CROSS_EDGE: B:23:0x003f \-\> B:28:0x0054, CROSS_EDGE: B:22:0x003e \-\> B:23:0x003f, CROSS_EDGE: B:18:0x0030 \-\> B:28:0x0054, CROSS_EDGE: B:30:0x005c \-\> B:1:?, CROSS_EDGE: B:13:0x0021 \-\> B:29:0x0058, CROSS_EDGE: B:7:0x0011 \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0006 \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0012: r0 '$i$a$\-assert\-WorkQueue$tryStealBlockingFrom$1' I\l  0x0033\-0x003f: r7 '$this$isBlocking$iv' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0034\-0x003f: r8 '$i$f$isBlocking' I\l  0x0025\-0x0055: r5 'index' I\l  0x0030\-0x0055: r6 'value' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x001d\-0x005c: r0 'start' I\l  0x001f\-0x005c: r3 'end' I\l  0x0021\-0x005c: r4 'buffer' Ljava\/util\/concurrent\/atomic\/AtomicReferenceArray;\l  \-1 \-0x005c: r11 'victim' Lkotlinx\/coroutines\/scheduling\/WorkQueue;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_7 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_31;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_33[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_34;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_35;
Node_24 -> Node_25;
Node_25 -> Node_32[style=dashed];
Node_25 -> Node_36;
Node_32 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_1;
Node_36 -> Node_28;
Node_28 -> Node_13;
Node_35 -> Node_28;
Node_22 -> Node_23;
Node_34 -> Node_28;
Node_33 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_1;
Node_31 -> Node_29;
}

