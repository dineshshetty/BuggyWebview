digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.decrementIfBlocking(Lkotlinx\/coroutines\/scheduling\/Task;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$decrementIfBlocking' kotlinx.coroutines.scheduling.Task)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002c  (LINE:195)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$decrementIfBlocking' kotlinx.coroutines.scheduling.Task)]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: IGET  (r2 I:kotlinx.coroutines.scheduling.TaskContext) = (r0 I:kotlinx.coroutines.scheduling.Task A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:206)\l0x0006: INVOKE  (r2 I:int) = (r2 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l0x000a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:?  (LINE:195)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: SGET  (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:196)\l0x0015: INVOKE  (r0 I:int) = (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r5 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(java.lang.Object):int A[MD:(T):int (c)]\l0x0019: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:197)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:? \l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IF  (r0 I:??[int, byte, short, char] A[D('value' int)]) \< (0 ??[int, byte, short, char])  \-\> B:13:0x0023  (LINE:197)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|0x0023: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0026 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0028: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002b|0x002b: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|0x002c: RETURN   A[SYNTHETIC] (LINE:199)\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x002c: RETURN   A[SYNTHETIC] (LINE:199)\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|0x002c: RETURN   A[SYNTHETIC] (LINE:199)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|RETURN\lORIG_RETURN\l|0x002c: RETURN    (LINE:199)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.WorkQueue.decrementIfBlocking((r5 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlinx.coroutines.scheduling.Task A[D('$this$decrementIfBlocking' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x002c \-\> B:1:?, CROSS_EDGE: B:11:0x0020 \-\> B:13:0x0023, CROSS_EDGE: B:9:0x001d \-\> B:17:0x002c, CROSS_EDGE: B:7:0x0011 \-\> B:17:0x002c, CROSS_EDGE: B:6:0x0010 \-\> B:7:0x0011, CROSS_EDGE: B:2:0x0000 \-\> B:17:0x002c\lDebug Info:\l  0x0003\-0x0011: r0 '$this$isBlocking$iv' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0004\-0x0011: r1 '$i$f$isBlocking' I\l  0x0020\-0x0023: r1 '$i$a$\-assert\-WorkQueue$decrementIfBlocking$1' I\l  0x0019\-0x002c: r0 'value' I\l  \-1 \-0x002c: r6 '$this$decrementIfBlocking' Lkotlinx\/coroutines\/scheduling\/Task;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_17;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_18;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_19;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_20[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_20 -> Node_1;
Node_19 -> Node_1;
Node_18 -> Node_1;
Node_6 -> Node_7;
Node_17 -> Node_1;
}

