digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.add(Lkotlinx\/coroutines\/scheduling\/Task;Z)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fair' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007  (LINE:73)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: INVOKE  (r0 I:kotlinx.coroutines.scheduling.Task) = \l  (r2 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r3 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.addLast(kotlinx.coroutines.scheduling.Task):kotlinx.coroutines.scheduling.Task A[MD:(kotlinx.coroutines.scheduling.Task):kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:74)\l0x0009: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(T, V):V (c)]\l0x000d: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0013 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: INVOKE  (r1 I:kotlinx.coroutines.scheduling.Task) = \l  (r2 I:kotlinx.coroutines.scheduling.WorkQueue)\l  (r0 I:kotlinx.coroutines.scheduling.Task A[D('previous' kotlinx.coroutines.scheduling.Task)])\l type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.addLast(kotlinx.coroutines.scheduling.Task):kotlinx.coroutines.scheduling.Task A[MD:(kotlinx.coroutines.scheduling.Task):kotlinx.coroutines.scheduling.Task (m)] (LINE:75)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:kotlinx.coroutines.scheduling.Task) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.WorkQueue.add((r2 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('fair' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0012 \-\> B:1:?, CROSS_EDGE: B:10:0x0017 \-\> B:1:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0017: r0 'previous' Lkotlinx\/coroutines\/scheduling\/Task;\l  \-1 \-0x0017: r3 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l  \-1 \-0x0017: r4 'fair' Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

