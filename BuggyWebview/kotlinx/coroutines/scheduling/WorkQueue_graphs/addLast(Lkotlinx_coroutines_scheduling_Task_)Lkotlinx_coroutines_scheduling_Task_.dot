digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.addLast(Lkotlinx\/coroutines\/scheduling\/Task;)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r3 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r5.taskContext.getTaskMode() != 1) goto L3\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|r3 = false\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|PHI: r3 \l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:3:0x0009, B:5:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L6\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer$FU.incrementAndGet(r4)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if (getBufferSize$kotlinx_coroutines_core() != 127) goto L10\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|RETURN\l|return r5\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|r0 = r4.producerIndex & kotlinx.coroutines.scheduling.WorkQueueKt.MASK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|LOOP_START\lLOOP:0: B:12:0x0020\-\>B:14:0x0028\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|if (r4.buffer.get(r0) == null) goto L14\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|LOOP_END\lLOOP:0: B:12:0x0020\-\>B:14:0x0028\l|java.lang.Thread.yield()\l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|r4.buffer.lazySet(r0, r5)\lkotlinx.coroutines.scheduling.WorkQueue.producerIndex$FU.incrementAndGet(r4)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.WorkQueue.addLast((r4v0 'this' kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r5v0 'task' kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0028 \-\> B:12:0x0020, CROSS_EDGE: B:16:0x0037 \-\> B:1:?, CROSS_EDGE: B:6:0x000d \-\> B:8:0x0014, CROSS_EDGE: B:3:0x0009 \-\> B:6:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

