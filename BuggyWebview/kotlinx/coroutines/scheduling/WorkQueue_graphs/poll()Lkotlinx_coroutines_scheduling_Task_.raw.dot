digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.poll()Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.lastScheduledTask$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:66)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater), (r2 I:java.lang.Object), (r1 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(T, V):V (c)]\l0x0007: CHECK_CAST (r0 I:kotlinx.coroutines.scheduling.Task) = (kotlinx.coroutines.scheduling.Task) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:? \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: INVOKE  (r0 I:kotlinx.coroutines.scheduling.Task) = (r2 I:kotlinx.coroutines.scheduling.WorkQueue) type: DIRECT call: kotlinx.coroutines.scheduling.WorkQueue.pollBuffer():kotlinx.coroutines.scheduling.Task A[MD:():kotlinx.coroutines.scheduling.Task (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN  (r0 I:kotlinx.coroutines.scheduling.Task) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.WorkQueue.poll((r2 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:3:0x0009 \-\> B:5:0x000f\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

