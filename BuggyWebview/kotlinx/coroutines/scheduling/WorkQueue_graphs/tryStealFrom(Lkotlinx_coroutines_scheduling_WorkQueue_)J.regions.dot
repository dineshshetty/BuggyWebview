digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.tryStealFrom(Lkotlinx\/coroutines\/scheduling\/WorkQueue;)J" {
subgraph cluster_Region_1961741663 {
label = "R(3:(1:(1:8))|11|(2:(2:13|(2:(1:(2:(1:21)|(1:20)))|(1:22)))|(1:24)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1339869833 {
label = "IF [B:3:0x0006] THEN: R(1:(1:8)) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L3\l}"];
subgraph cluster_Region_1383116359 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1630412018 {
label = "IF [B:8:0x0012] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0012|PHI: r0 \l  PHI: (r0v4 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((getBufferSize$kotlinx_coroutines_core() == 0 ? 1 : 0) == 0) goto L7\l}"];
subgraph cluster_Region_1485414463 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001a|throw new java.lang.AssertionError()\l}"];
}
}
}
}
Node_12 [shape=record,label="{12\:\ 0x001b|kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.Task r0 = r6.pollBuffer()\l}"];
subgraph cluster_Region_1906880805 {
label = "R(2:(2:13|(2:(1:(2:(1:21)|(1:20)))|(1:22)))|(1:24))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1481447676 {
label = "IF [B:13:0x001f] THEN: R(2:13|(2:(1:(2:(1:21)|(1:20)))|(1:22))) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001f|if (r0 != null) goto L13\l}"];
subgraph cluster_Region_1017818855 {
label = "R(2:13|(2:(1:(2:(1:21)|(1:20)))|(1:22)))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0021|kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.Task r3 = add$default(r5, r0, false, 2, null)\l}"];
subgraph cluster_Region_645737409 {
label = "R(2:(1:(2:(1:21)|(1:20)))|(1:22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_933591664 {
label = "IF [B:15:0x002b] THEN: R(1:(2:(1:21)|(1:20))) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002b|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() != false) goto L15\l}"];
subgraph cluster_Region_582532323 {
label = "R(1:(2:(1:21)|(1:20)))";
node [shape=record,color=blue];
subgraph cluster_Region_380436488 {
label = "R(2:(1:21)|(1:20))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1537957026 {
label = "IF [B:20:0x0032] THEN: R(1:21) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0032|PHI: r1 \l  PHI: (r1v3 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r3 == null) == true) goto L21\l}"];
subgraph cluster_Region_1505821247 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return \-1L\l}"];
}
}
subgraph cluster_Region_1160480141 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x003a|throw new java.lang.AssertionError()\l}"];
}
}
}
}
subgraph cluster_Region_580085359 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x003b|RETURN\lORIG_RETURN\l|return \-1L\l}"];
}
}
}
}
subgraph cluster_Region_1547734901 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0042|RETURN\l|return tryStealLastScheduled(r6, false)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0015}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0011}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x002d}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x002e}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0031}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0035}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x003e}"];
MethodNode[shape=record,label="{public final long kotlinx.coroutines.scheduling.WorkQueue.tryStealFrom((r5v0 'this' kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r6v0 'victim' kotlinx.coroutines.scheduling.WorkQueue A[D('victim' kotlinx.coroutines.scheduling.WorkQueue), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x003a \-\> B:1:?, CROSS_EDGE: B:25:0x003d \-\> B:1:?, CROSS_EDGE: B:17:0x002e \-\> B:20:0x0032, CROSS_EDGE: B:15:0x002b \-\> B:24:0x003b, CROSS_EDGE: B:27:0x0042 \-\> B:1:?, CROSS_EDGE: B:7:0x0011 \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0006 \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_26[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_24[style=dashed];
Node_20 -> Node_22[style=dashed];
Node_20 -> Node_28;
Node_28 -> Node_1;
Node_23 -> Node_1;
Node_24 -> Node_1;
Node_27 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_10 -> Node_11;
Node_7 -> Node_8;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_20;
Node_19 -> Node_20;
Node_22 -> Node_23;
Node_26 -> Node_27;
}

