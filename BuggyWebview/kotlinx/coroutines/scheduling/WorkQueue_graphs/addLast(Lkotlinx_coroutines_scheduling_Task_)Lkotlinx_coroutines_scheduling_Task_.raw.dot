digraph "CFG forkotlinx.coroutines.scheduling.WorkQueue.addLast(Lkotlinx\/coroutines\/scheduling\/Task;)Lkotlinx\/coroutines\/scheduling\/Task;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('task' kotlinx.coroutines.scheduling.Task)])  (LINE:83)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: IGET  (r2 I:kotlinx.coroutines.scheduling.TaskContext) = (r0 I:kotlinx.coroutines.scheduling.Task A[D('$this$isBlocking$iv' kotlinx.coroutines.scheduling.Task)]) kotlinx.coroutines.scheduling.Task.taskContext kotlinx.coroutines.scheduling.TaskContext  (LINE:202)\l0x0004: INVOKE  (r2 I:int) = (r2 I:kotlinx.coroutines.scheduling.TaskContext) type: INTERFACE call: kotlinx.coroutines.scheduling.TaskContext.getTaskMode():int A[MD:():int (m)]\l0x0008: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0014  (LINE:83)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: SGET  (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.blockingTasksInBuffer$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater \l0x0011: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(java.lang.Object):int A[MD:(T):int (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: INVOKE  (r0 I:int) = (r4 I:kotlinx.coroutines.scheduling.WorkQueue) type: VIRTUAL call: kotlinx.coroutines.scheduling.WorkQueue.getBufferSize$kotlinx_coroutines_core():int A[MD:():int (m)] (LINE:84)\l0x0018: CONST  (r1 I:??[int, float, short, byte, char]) = (127(0x7f, float:1.78E\-43) ??[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001d \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|RETURN\l|0x001c: RETURN  (r5 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task)]) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: IGET  (r0 I:int) = (r4 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.producerIndex int  (LINE:85)\l0x001f: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) & (r1 I:??[int, boolean, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|LOOP_START\lLOOP:0: B:12:0x0020\-\>B:14:0x0028\l|0x0020: IGET  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray\<kotlinx.coroutines.scheduling.Task\>) = (r4 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.buffer java.util.concurrent.atomic.AtomicReferenceArray  (LINE:94)\l0x0022: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.concurrent.atomic.AtomicReferenceArray), (r0 I:int A[D('nextIndex' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002c \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|LOOP_END\lLOOP:0: B:12:0x0020\-\>B:14:0x0028\l|0x0028: INVOKE   type: STATIC call: java.lang.Thread.yield():void A[MD:():void (c)] (LINE:95)\l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|0x002c: IGET  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray\<kotlinx.coroutines.scheduling.Task\>) = (r4 I:kotlinx.coroutines.scheduling.WorkQueue) kotlinx.coroutines.scheduling.WorkQueue.buffer java.util.concurrent.atomic.AtomicReferenceArray  (LINE:97)\l0x002e: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r0 I:int A[D('nextIndex' int)])\l  (r5 I:java.lang.Object A[D('task' kotlinx.coroutines.scheduling.Task)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.lazySet(int, java.lang.Object):void A[MD:(int, E):void (c)]\l0x0031: SGET  (r1 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.WorkQueue.producerIndex$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:98)\l0x0033: INVOKE  (r1 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(java.lang.Object):int A[MD:(T):int (c)]\l0x0036: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:99)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0037|RETURN\l|0x0037: RETURN  (r1 I:kotlinx.coroutines.scheduling.Task) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.scheduling.Task kotlinx.coroutines.scheduling.WorkQueue.addLast((r4 'this' I:kotlinx.coroutines.scheduling.WorkQueue A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlinx.coroutines.scheduling.Task A[D('task' kotlinx.coroutines.scheduling.Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0028 \-\> B:12:0x0020, CROSS_EDGE: B:16:0x0037 \-\> B:1:?, CROSS_EDGE: B:6:0x000d \-\> B:8:0x0014, CROSS_EDGE: B:3:0x0009 \-\> B:6:0x000d\lDebug Info:\l  0x0001\-0x000d: r0 '$this$isBlocking$iv' Lkotlinx\/coroutines\/scheduling\/Task;\l  0x0002\-0x000d: r1 '$i$f$isBlocking' I\l  0x0020\-0x0037: r0 'nextIndex' I\l  \-1 \-0x0037: r5 'task' Lkotlinx\/coroutines\/scheduling\/Task;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

