digraph "CFG forkotlinx.coroutines.scheduling.DefaultIoScheduler.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlinx.coroutines.scheduling.Dispatcher.INSTANCE = new kotlinx.coroutines.scheduling.Dispatcher()\lkotlinx.coroutines.scheduling.UnlimitedIoScheduler r0 = kotlinx.coroutines.scheduling.UnlimitedIoScheduler.INSTANCE\lint r1 = kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt.systemProp$default(kotlinx.coroutines.DispatchersKt.IO_PARALLELISM_PROPERTY_NAME, kotlin.ranges.RangesKt.coerceAtLeast(64, kotlinx.coroutines.internal.SystemPropsKt.getAVAILABLE_PROCESSORS()), 0, 0, 12, null)\lkotlinx.coroutines.scheduling.Dispatcher.f228default = r0.limitedParallelism(r1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0025|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.scheduling.DefaultIoScheduler.\<clinit\>()  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

