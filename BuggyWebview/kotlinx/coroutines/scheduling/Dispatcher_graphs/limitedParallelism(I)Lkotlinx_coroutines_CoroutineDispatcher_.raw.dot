digraph "CFG forkotlinx.coroutines.scheduling.DefaultIoScheduler.limitedParallelism(I)Lkotlinx\/coroutines\/CoroutineDispatcher;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:kotlinx.coroutines.scheduling.UnlimitedIoScheduler) =  kotlinx.coroutines.scheduling.UnlimitedIoScheduler.INSTANCE kotlinx.coroutines.scheduling.UnlimitedIoScheduler  (LINE:61)\l0x0002: INVOKE  (r0 I:kotlinx.coroutines.CoroutineDispatcher) = (r0 I:kotlinx.coroutines.scheduling.UnlimitedIoScheduler), (r2 I:int A[D('parallelism' int)]) type: VIRTUAL call: kotlinx.coroutines.scheduling.UnlimitedIoScheduler.limitedParallelism(int):kotlinx.coroutines.CoroutineDispatcher A[MD:(int):kotlinx.coroutines.CoroutineDispatcher (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:kotlinx.coroutines.CoroutineDispatcher) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.CoroutineDispatcher kotlinx.coroutines.scheduling.DefaultIoScheduler.limitedParallelism((r1 'this' I:kotlinx.coroutines.scheduling.DefaultIoScheduler A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('parallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0006: r2 'parallelism' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.CoroutineDispatcher.limitedParallelism(int):kotlinx.coroutines.CoroutineDispatcher]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

