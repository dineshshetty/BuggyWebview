digraph "CFG forkotlinx.coroutines.scheduling.DefaultIoScheduler.limitedParallelism(I)Lkotlinx\/coroutines\/CoroutineDispatcher;" {
subgraph cluster_Region_1194702870 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|RETURN\l|return kotlinx.coroutines.scheduling.UnlimitedIoScheduler.INSTANCE.limitedParallelism(r2)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.CoroutineDispatcher kotlinx.coroutines.scheduling.DefaultIoScheduler.limitedParallelism((r1v0 'this' kotlinx.coroutines.scheduling.DefaultIoScheduler A[IMMUTABLE_TYPE, THIS]), (r2v0 'parallelism' int A[D('parallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlinx.coroutines.CoroutineDispatcher.limitedParallelism(int):kotlinx.coroutines.CoroutineDispatcher]\l}"];
MethodNode -> Node_0;Node_3 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
}

