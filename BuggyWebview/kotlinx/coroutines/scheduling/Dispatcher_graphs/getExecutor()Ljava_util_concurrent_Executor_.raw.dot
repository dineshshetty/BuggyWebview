digraph "CFG forkotlinx.coroutines.scheduling.DefaultIoScheduler.getExecutor()Ljava\/util\/concurrent\/Executor;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:54)\l0x0001: CHECK_CAST (r0 I:java.util.concurrent.Executor) = (java.util.concurrent.Executor) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:java.util.concurrent.Executor) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.concurrent.Executor kotlinx.coroutines.scheduling.DefaultIoScheduler.getExecutor((r1 'this' I:kotlinx.coroutines.scheduling.DefaultIoScheduler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lMETHOD_OVERRIDE: [kotlinx.coroutines.ExecutorCoroutineDispatcher.getExecutor():java.util.concurrent.Executor]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

