digraph "CFG forkotlinx.coroutines.scheduling.LimitingDispatcher.dispatch(Ljava\/lang\/Runnable;Z)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('block' java.lang.Runnable)])  (LINE:131)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|LOOP_START\lLOOP:0: B:3:0x0001\-\>B:13:0x002e\l|0x0002: SGET  (r1 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.scheduling.LimitingDispatcher.inFlightTasks$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:134)\l0x0004: INVOKE  (r2 I:int) = (r1 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(java.lang.Object):int A[MD:(T):int (c)]\l0x0008: IGET  (r3 I:int) = (r4 I:kotlinx.coroutines.scheduling.LimitingDispatcher) kotlinx.coroutines.scheduling.LimitingDispatcher.parallelism int  (LINE:137)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r2 I:??[int, byte, short, char] A[D('inFlight' int)]) \> (r3 I:??[int, byte, short, char])  \-\> B:7:0x0015 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IGET  (r3 I:java.util.concurrent.ConcurrentLinkedQueue\<java.lang.Runnable\>) = (r4 I:kotlinx.coroutines.scheduling.LimitingDispatcher) kotlinx.coroutines.scheduling.LimitingDispatcher.queue java.util.concurrent.ConcurrentLinkedQueue  (LINE:143)\l0x0017: INVOKE  (r3 I:java.util.concurrent.ConcurrentLinkedQueue), (r0 I:java.lang.Object A[D('taskToSchedule' java.lang.Runnable)]) type: VIRTUAL call: java.util.concurrent.ConcurrentLinkedQueue.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x001a: INVOKE  (r1 I:int) = (r1 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(java.lang.Object):int A[MD:(T):int (c)] (LINE:160)\l0x001e: IGET  (r3 I:int) = (r4 I:kotlinx.coroutines.scheduling.LimitingDispatcher) kotlinx.coroutines.scheduling.LimitingDispatcher.parallelism int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|0x0020: IF  (r1 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char])  \-\> B:10:0x0023 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IGET  (r1 I:java.util.concurrent.ConcurrentLinkedQueue\<java.lang.Runnable\>) = (r4 I:kotlinx.coroutines.scheduling.LimitingDispatcher) kotlinx.coroutines.scheduling.LimitingDispatcher.queue java.util.concurrent.ConcurrentLinkedQueue  (LINE:164)\l0x0025: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.concurrent.ConcurrentLinkedQueue) type: VIRTUAL call: java.util.concurrent.ConcurrentLinkedQueue.poll():java.lang.Object A[MD:():E (c)]\l0x0029: CHECK_CAST (r1 I:java.lang.Runnable) = (java.lang.Runnable) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x002e \l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|LOOP_END\lLOOP:0: B:3:0x0001\-\>B:13:0x002e\l|0x002e: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('taskToSchedule' java.lang.Runnable)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|RETURN\l|0x002d: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:161)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: IGET  (r1 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher) = (r4 I:kotlinx.coroutines.scheduling.LimitingDispatcher) kotlinx.coroutines.scheduling.LimitingDispatcher.dispatcher kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher  (LINE:138)\l0x000e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x000f: CHECK_CAST (r3 I:kotlinx.coroutines.scheduling.TaskContext) = (kotlinx.coroutines.scheduling.TaskContext) (r3 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  \l  (r1 I:kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher)\l  (r0 I:java.lang.Runnable A[D('taskToSchedule' java.lang.Runnable)])\l  (r3 I:kotlinx.coroutines.scheduling.TaskContext)\l  (r6 I:boolean A[D('tailDispatch' boolean)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean):void A[MD:(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean):void (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|RETURN\l|0x0014: RETURN    (LINE:139)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch((r4 'this' I:kotlinx.coroutines.scheduling.LimitingDispatcher A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('tailDispatch' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0022 \-\> B:1:?, CROSS_EDGE: B:12:0x002d \-\> B:1:?, BACK_EDGE: B:13:0x002e \-\> B:3:0x0001\lDebug Info:\l  0x0008\-0x002f: r2 'inFlight' I\l  0x0001\-0x002f: r0 'taskToSchedule' Ljava\/lang\/Runnable;\l  \-1 \-0x002f: r5 'block' Ljava\/lang\/Runnable;\l  \-1 \-0x002f: r6 'tailDispatch' Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_7;
Node_4 -> Node_15[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_14[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_16[style=dashed];
Node_13 -> Node_3;
Node_16 -> Node_12;
Node_12 -> Node_1;
Node_14 -> Node_9;
Node_9 -> Node_1;
Node_15 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

