digraph "CFG forkotlinx.coroutines.scheduling.LimitingDispatcher.dispatch(Ljava\/lang\/Runnable;Z)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = r5\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|LOOP_START\lLOOP:0: B:3:0x0001\-\>B:13:0x002e\lPHI: r0 \l  PHI: (r0v1 'taskToSchedule' java.lang.Runnable) = (r0v0 'taskToSchedule' java.lang.Runnable), (r0v2 'taskToSchedule' java.lang.Runnable) binds: [B:2:0x0000, B:13:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|java.util.concurrent.atomic.AtomicIntegerFieldUpdater r1 = kotlinx.coroutines.scheduling.LimitingDispatcher.inFlightTasks$FU\lint r2 = r1.incrementAndGet(r4)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if (r2 \> r4.parallelism) goto L4\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|r4.queue.add(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|if (r1.decrementAndGet(r4) \< r4.parallelism) goto L6\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|java.lang.Runnable r1 = r4.queue.poll()\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|if (r1 != null) goto L8\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|LOOP_END\lLOOP:0: B:3:0x0001\-\>B:13:0x002e\l|r0 = r1\l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|r4.dispatcher.dispatchWithContext$kotlinx_coroutines_core(r0, r4, r6)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.scheduling.LimitingDispatcher.dispatch((r4v0 'this' kotlinx.coroutines.scheduling.LimitingDispatcher A[IMMUTABLE_TYPE, THIS]), (r5v0 'block' java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'tailDispatch' boolean A[D('tailDispatch' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0022 \-\> B:1:?, CROSS_EDGE: B:12:0x002d \-\> B:1:?, BACK_EDGE: B:13:0x002e \-\> B:3:0x0001\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_7;
Node_4 -> Node_15[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_14[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_16[style=dashed];
Node_13 -> Node_3;
Node_16 -> Node_12;
Node_12 -> Node_1;
Node_14 -> Node_9;
Node_9 -> Node_1;
Node_15 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

