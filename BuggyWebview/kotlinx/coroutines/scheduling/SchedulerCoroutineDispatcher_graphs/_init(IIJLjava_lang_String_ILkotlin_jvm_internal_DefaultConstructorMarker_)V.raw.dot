digraph "CFG forkotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.\<init\>(IIJLjava\/lang\/String;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: ARITH  (r10 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:81)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0002|0x0002: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0006 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0004|0x0004: SGET  (r4 I:int) =  kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE int  (LINE:82)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|0x0006: ARITH  (r10 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:81)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|0x0008: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000e \l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|0x000a: SGET  (r5 I:int) =  kotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE int  (LINE:83)\l0x000c: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x000f|0x000f: ARITH  (r5 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0011|0x0011: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0017 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|0x0013: SGET  (r6 I:long) =  kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS long  (LINE:84)\l0x0015: MOVE  (r0 I:??[long, double]) = (r6 I:??[long, double]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|0x0018: ARITH  (r5 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|0x001a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0020 \l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|0x001c: CONST_STR  (r8 I:java.lang.String) =  \"CoroutineScheduler\"  (LINE:85)\l0x001e: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0021|0x0021: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x0022: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: MOVE  (r8 I:??[long, double]) = (r0 I:??[long, double]) \l0x0025: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  \l  (r5 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:long)\l  (r10 I:java.lang.String)\l type: DIRECT call: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.\<init\>(int, int, long, java.lang.String):void A[MD:(int, int, long, java.lang.String):void (m)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|RETURN\l|0x0029: RETURN    (LINE:125)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0020|0x0020: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY])  (LINE:81)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0017|0x0017: MOVE  (r0 I:??[long, double]) = (r6 I:??[long, double])  (LINE:81)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|0x000e: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:81)\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.\<init\>((r3 'this' I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:35:0x0020 \-\> B:36:0x0021, CROSS_EDGE: B:31:0x0017 \-\> B:32:0x0018, CROSS_EDGE: B:27:0x000e \-\> B:28:0x000f, CROSS_EDGE: B:22:0x0002 \-\> B:24:0x0006\lINLINE_NOT_NEEDED\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [81=5]\}\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_35 -> Node_36;
Node_31 -> Node_32;
Node_27 -> Node_28;
}

