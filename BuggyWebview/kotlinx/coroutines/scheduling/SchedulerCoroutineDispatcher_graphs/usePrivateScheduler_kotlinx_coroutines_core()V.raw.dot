digraph "CFG forkotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.usePrivateScheduler$kotlinx_coroutines_core()V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: MONITOR_ENTER  (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0010, blocks: (B:14:0x0001), top: B:20:0x0001 \}\lCatch: all \-\> 0x0010\l|0x0001: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r3 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher) kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.coroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler A[Catch: all \-\> 0x0010, TRY_ENTER] (LINE:113)\l0x0003: CONST  (r1 I:??[long, double]) = (1000(0x3e8, double:4.94E\-321) ??[long, double]) \l0x0005: INVOKE  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler), (r1 I:long) type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.shutdown(long):void A[Catch: all \-\> 0x0010, MD:(long):void (m)]\l0x0008: INVOKE  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r3 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher) type: DIRECT call: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.createScheduler():kotlinx.coroutines.scheduling.CoroutineScheduler A[Catch: all \-\> 0x0010, MD:():kotlinx.coroutines.scheduling.CoroutineScheduler (m)] (LINE:114)\l0x000c: IPUT  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r3 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher)\l kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.coroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler A[Catch: all \-\> 0x0010, TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|0x000e: MONITOR_EXIT  (r3 I:??[OBJECT, ARRAY])  (LINE:115)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|RETURN\l|0x000f: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|ExcHandler: all \-\> 0x0010\l|0x0010: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0010] (LINE:112)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final synchronized void kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.usePrivateScheduler$kotlinx_coroutines_core((r3 'this' I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0012 \-\> B:12:?, CROSS_EDGE: B:20:0x0001 \-\> B:17:0x0010\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0010, blocks: (B:14:0x0001), top: B:20:0x0001 \}\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_17;
Node_14 -> Node_15;
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_21 -> Node_17;
Node_17 -> Node_19;
Node_19 -> Node_12;
}

