digraph "CFG forkotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.\<init\>(IIJLjava\/lang\/String;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000}"];
Node_22 [shape=record,label="{22\:\ 0x0002|if ((r9 & 1) == 0) goto L4\l}"];
Node_23 [shape=record,label="{23\:\ 0x0004|int r4 = kotlinx.coroutines.scheduling.TasksKt.CORE_POOL_SIZE\l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|PHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:22:0x0002, B:23:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|if ((r9 & 2) == 0) goto L18\l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|r10 = kotlinx.coroutines.scheduling.TasksKt.MAX_POOL_SIZE\l}"];
Node_28 [shape=record,label="{28\:\ 0x000f|PHI: r10 \l  PHI: (r10v4 int) = (r10v3 int), (r10v6 int) binds: [B:27:0x000e, B:26:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0011|if ((r9 & 4) == 0) goto L17\l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|r0 = kotlinx.coroutines.scheduling.TasksKt.IDLE_WORKER_KEEP_ALIVE_NS\l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|PHI: r0 \l  PHI: (r0v1 long) = (r0v0 long), (r0v2 long) binds: [B:31:0x0017, B:30:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|if ((r9 & 8) == 0) goto L16\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|r2 = \"CoroutineScheduler\"\l}"];
Node_36 [shape=record,label="{36\:\ 0x0021|PHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v0 java.lang.String), (r2v2 java.lang.String) binds: [B:35:0x0020, B:34:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|this(r4, r10, r0, r2)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0020|r2 = r8\l}"];
Node_31 [shape=record,label="{31\:\ 0x0017|r0 = r6\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|r10 = r5\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.\<init\>((r3v0 'this' kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:35:0x0020 \-\> B:36:0x0021, CROSS_EDGE: B:31:0x0017 \-\> B:32:0x0018, CROSS_EDGE: B:27:0x000e \-\> B:28:0x000f, CROSS_EDGE: B:22:0x0002 \-\> B:24:0x0006\lINLINE_NOT_NEEDED\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [81=5]\}\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_35 -> Node_36;
Node_31 -> Node_32;
Node_27 -> Node_28;
}

