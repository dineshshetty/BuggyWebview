digraph "CFG forkotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core(Ljava\/lang\/Runnable;Lkotlinx\/coroutines\/scheduling\/TaskContext;Z)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r1 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher) kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.coroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler  (LINE:103)\l0x0002: INVOKE  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r2 I:java.lang.Runnable A[D('block' java.lang.Runnable)])\l  (r3 I:kotlinx.coroutines.scheduling.TaskContext A[D('context' kotlinx.coroutines.scheduling.TaskContext)])\l  (r4 I:boolean A[D('tailDispatch' boolean)])\l type: VIRTUAL call: kotlinx.coroutines.scheduling.CoroutineScheduler.dispatch(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean):void A[MD:(java.lang.Runnable, kotlinx.coroutines.scheduling.TaskContext, boolean):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:104)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.dispatchWithContext$kotlinx_coroutines_core((r1 'this' I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlinx.coroutines.scheduling.TaskContext A[D('context' kotlinx.coroutines.scheduling.TaskContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('tailDispatch' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0005: r2 'block' Ljava\/lang\/Runnable;\l  \-1 \-0x0005: r3 'context' Lkotlinx\/coroutines\/scheduling\/TaskContext;\l  \-1 \-0x0005: r4 'tailDispatch' Z\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

