digraph "CFG forkotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.\<init\>(IIJLjava\/lang\/String;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r1 I:kotlinx.coroutines.ExecutorCoroutineDispatcher) type: DIRECT call: kotlinx.coroutines.ExecutorCoroutineDispatcher.\<init\>():void A[MD:():void (m)] (LINE:86)\l0x0003: IPUT  (r2 I:int A[D('corePoolSize' int)]), (r1 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher) kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.corePoolSize int  (LINE:82)\l0x0005: IPUT  (r3 I:int A[D('maxPoolSize' int)]), (r1 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher) kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.maxPoolSize int  (LINE:83)\l0x0007: IPUT  (r4 I:long A[D('idleWorkerKeepAliveNs' long)]), (r1 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher) kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.idleWorkerKeepAliveNs long  (LINE:84)\l0x0009: IPUT  \l  (r6 I:java.lang.String A[D('schedulerName' java.lang.String)])\l  (r1 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher)\l kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.schedulerName java.lang.String  (LINE:85)\l0x000b: INVOKE  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler) = (r1 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher) type: DIRECT call: kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.createScheduler():kotlinx.coroutines.scheduling.CoroutineScheduler A[MD:():kotlinx.coroutines.scheduling.CoroutineScheduler (m)] (LINE:92)\l0x000f: IPUT  \l  (r0 I:kotlinx.coroutines.scheduling.CoroutineScheduler)\l  (r1 I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher)\l kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.coroutineScheduler kotlinx.coroutines.scheduling.CoroutineScheduler \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:81)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher.\<init\>((r1 'this' I:kotlinx.coroutines.scheduling.SchedulerCoroutineDispatcher A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('corePoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('maxPoolSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[D('idleWorkerKeepAliveNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[D('schedulerName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0011: r2 'corePoolSize' I\l  \-1 \-0x0011: r3 'maxPoolSize' I\l  \-1 \-0x0011: r4 'idleWorkerKeepAliveNs' J\l  \-1 \-0x0011: r6 'schedulerName' Ljava\/lang\/String;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

