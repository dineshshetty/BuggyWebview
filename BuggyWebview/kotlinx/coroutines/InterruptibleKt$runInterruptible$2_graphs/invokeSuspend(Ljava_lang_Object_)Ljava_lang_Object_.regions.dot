digraph "CFG forkotlinx.coroutines.InterruptibleKt$runInterruptible$2.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1440473211 {
label = "R(2:1|2) | DECL_VAR: java.lang.Object null\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
subgraph cluster_SwitchRegion_1278242074 {
label = "Switch: 2
 case 0 -> R(2:6|7)
 case default -> R(1:4)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|switch(r4.label) \{\l    case 0: goto L6;\l    default: goto L3;\l\}\l}"];
subgraph cluster_Region_676762141 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0010|kotlin.ResultKt.throwOnFailure(r5)\lkotlinx.coroutines.CoroutineScope kotlinx.coroutines.CoroutineScope r1 = (kotlinx.coroutines.CoroutineScope) r4.L$0\ljava.lang.Object r2 = kotlinx.coroutines.Interruptible.runInterruptibleInExpectedContext(r1.getCoroutineContext(), r4.$block)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|RETURN\l|return r2\l}"];
}
subgraph cluster_Region_483278594 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000f|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0008}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.InterruptibleKt$runInterruptible$2.invokeSuspend((r4v0 'this' kotlinx.coroutines.InterruptibleKt$runInterruptible$2 A[IMMUTABLE_TYPE, THIS]), (r5v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0022 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_5;
}

