digraph "CFG forkotlinx.coroutines.CoroutineExceptionHandlerImplKt.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<kotlinx.coroutines.CoroutineExceptionHandler\>) =  kotlinx.coroutines.CoroutineExceptionHandler.class  (LINE:23)\l0x0002: CONST_CLASS  (r1 I:java.lang.Class\<kotlinx.coroutines.CoroutineExceptionHandler\>) =  kotlinx.coroutines.CoroutineExceptionHandler.class \l0x0004: INVOKE  (r1 I:java.lang.ClassLoader) = (r1 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getClassLoader():java.lang.ClassLoader A[MD:():java.lang.ClassLoader (c)] (LINE:22)\l0x0008: INVOKE  (r0 I:java.util.ServiceLoader) = (r0 I:java.lang.Class), (r1 I:java.lang.ClassLoader) type: STATIC call: java.util.ServiceLoader.load(java.lang.Class, java.lang.ClassLoader):java.util.ServiceLoader A[MD:\<S\>:(java.lang.Class\<S\>, java.lang.ClassLoader):java.util.ServiceLoader\<S\> (c)] (LINE:20)\l0x000c: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.ServiceLoader) type: VIRTUAL call: java.util.ServiceLoader.iterator():java.util.Iterator A[MD:():java.util.Iterator\<S\> (c)] (LINE:23)\l0x0010: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:java.util.Iterator) type: STATIC call: kotlin.sequences.SequencesKt.asSequence(java.util.Iterator):kotlin.sequences.Sequence A[MD:\<T\>:(java.util.Iterator\<? extends T\>):kotlin.sequences.Sequence\<T\> (m)]\l0x0014: INVOKE  (r0 I:java.util.List) = (r0 I:kotlin.sequences.Sequence) type: STATIC call: kotlin.sequences.SequencesKt.toList(kotlin.sequences.Sequence):java.util.List A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):java.util.List\<T\> (m)]\l0x0018: SPUT  (r0 I:java.util.List\<kotlinx.coroutines.CoroutineExceptionHandler\>) kotlinx.coroutines.CoroutineExceptionHandlerImplKt.handlers java.util.List \l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|RETURN\l|0x001a: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.CoroutineExceptionHandlerImplKt.\<clinit\>()  | USE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

