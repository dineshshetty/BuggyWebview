digraph "CFG forkotlinx.coroutines.channels.Closed.tryResumeReceive(Ljava\/lang\/Object;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Lkotlinx\/coroutines\/internal\/Symbol;" {
subgraph cluster_Region_772098248 {
label = "R(3:1|(1:3)|4)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlinx.coroutines.internal.Symbol kotlinx.coroutines.internal.Symbol r0 = kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN\l}"];
subgraph cluster_IfRegion_1110306267 {
label = "IF [B:10:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0004|if (r5 != null) goto L3\l}"];
subgraph cluster_Region_1922654642 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0007|r5.finishPrepare()\l}"];
}
}
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|return r0\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.internal.Symbol kotlinx.coroutines.channels.Closed.tryResumeReceive((r3v0 'this' kotlinx.coroutines.channels.Closed\<E\> A[IMMUTABLE_TYPE, THIS]), (r4v0 E A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:13:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Lkotlinx\/coroutines\/internal\/Symbol;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ReceiveOrClosed.tryResumeReceive(E, kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):kotlinx.coroutines.internal.Symbol]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

