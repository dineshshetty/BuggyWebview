digraph "CFG forkotlinx.coroutines.channels.ArrayChannel.\<init\>(ILkotlinx\/coroutines\/channels\/BufferOverflow;Lkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_1543830853 {
label = "R(2:1|(2:(2:8|9)|(1:5)))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|super(r12)\lr9.capacity = r10\lr9.onBufferOverflow = r11\l}"];
subgraph cluster_Region_1767154719 {
label = "R(2:(2:8|9)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_84613775 {
label = "IF [B:17:0x000e] THEN: R(2:8|9) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000e|PHI: r1 \l  PHI: (r1v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r10 \>= 1) == false) goto L8\l}"];
subgraph cluster_Region_1789461315 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0030}"];
Node_21 [shape=record,label="{21\:\ 0x0050|throw new java.lang.IllegalArgumentException((\"ArrayChannel capacity must be at least 1, but \" + r10 + \" was specified\").toString())\l}"];
}
}
subgraph cluster_Region_173656484 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0011|r9.lock = new java.util.concurrent.locks.ReentrantLock()\ljava.lang.Object[] java.lang.Object[] r1 = new java.lang.Object[java.lang.Math.min(r10, 8)]\lkotlin.collections.ArraysKt.fill$default(r1, kotlinx.coroutines.channels.AbstractChannelKt.EMPTY, 0, 0, 6, (java.lang.Object) null)\lr9.buffer = r1\lr9.size = 0\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000a}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000d}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x002f}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.ArrayChannel.\<init\>((r9v0 'this' kotlinx.coroutines.channels.ArrayChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r10v0 'capacity' int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow A[D('onBufferOverflow' kotlinx.coroutines.channels.BufferOverflow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 kotlin.jvm.functions.Function1\<? super E, kotlin.Unit\> A[D('onUndeliveredElement' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0050 \-\> B:12:?, CROSS_EDGE: B:14:0x000a \-\> B:17:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (ILkotlinx\/coroutines\/channels\/BufferOverflow;Lkotlin\/jvm\/functions\/Function1\<\-TE;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_11;Node_13 -> Node_14;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_18 -> Node_19;
Node_11 -> Node_13;
Node_14 -> Node_16;
Node_14 -> Node_17;
Node_16 -> Node_17;
Node_19 -> Node_12;
}

