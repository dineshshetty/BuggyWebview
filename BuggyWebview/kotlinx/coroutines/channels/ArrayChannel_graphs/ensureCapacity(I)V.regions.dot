digraph "CFG forkotlinx.coroutines.channels.ArrayChannel.ensureCapacity(I)V" {
subgraph cluster_Region_2030639175 {
label = "R(2:1|(1:(3:3|(1:5)|7)))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|java.lang.Object[] java.lang.Object[] r0 = r8.buffer\l}"];
subgraph cluster_Region_873354 {
label = "R(1:(3:3|(1:5)|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1250053777 {
label = "IF [B:14:0x0003] THEN: R(3:3|(1:5)|7) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0003|if (r9 \>= r0.length) goto L3\l}"];
subgraph cluster_Region_1543193066 {
label = "R(3:3|(1:5)|7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0005|int int r0 = java.lang.Math.min(r0.length * 2, r8.capacity)\ljava.lang.Object[] java.lang.Object[] r1 = new java.lang.Object[r0]\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_489011650 {
label = "LOOP:0: (1:5)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0012|LOOP_START\lLOOP:0: B:16:0x0012\-\>B:17:0x0014\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v3 int) binds: [B:15:0x0005, B:17:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \< r9) goto L5\l}"];
subgraph cluster_Region_752830270 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0014|LOOP_END\lLOOP:0: B:16:0x0012\-\>B:17:0x0014\l|int r4 = r3\lr3++\ljava.lang.Object[] java.lang.Object[] r5 = r8.buffer\lr1[r4] = r5[(r8.head + r4) % r5.length]\l}"];
}
}
Node_18 [shape=record,label="{18\:\ 0x0023|kotlin.collections.ArraysKt.fill((kotlinx.coroutines.internal.Symbol[]) r1, kotlinx.coroutines.channels.AbstractChannelKt.EMPTY, r9, r0)\lr8.buffer = r1\lr8.head = 0\l}"];
}
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0023|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x002c|ORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.channels.ArrayChannel.ensureCapacity((r8v0 'this' kotlinx.coroutines.channels.ArrayChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r9v0 'currentSize' int A[D('currentSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:17:0x0014 \-\> B:16:0x0012, CROSS_EDGE: B:14:0x0003 \-\> B:19:0x002c\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_11;Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_21[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_20[style=dashed];
Node_17 -> Node_16;
Node_18 -> Node_19;
Node_11 -> Node_13;
Node_20 -> Node_18;
Node_19 -> Node_12;
Node_21 -> Node_12;
}

