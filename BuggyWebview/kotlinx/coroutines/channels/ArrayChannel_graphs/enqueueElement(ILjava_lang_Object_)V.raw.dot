digraph "CFG forkotlinx.coroutines.channels.ArrayChannel.enqueueElement(ILjava\/lang\/Object;)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r5 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.capacity int  (LINE:150)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r6 I:??[int, byte, short, char] A[D('currentSize' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:23:0x0011 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: INVOKE  (r5 I:kotlinx.coroutines.channels.ArrayChannel), (r6 I:int A[D('currentSize' int)]) type: DIRECT call: kotlinx.coroutines.channels.ArrayChannel.ensureCapacity(int):void A[MD:(int):void (m)] (LINE:151)\l0x0007: IGET  (r0 I:java.lang.Object[]) = (r5 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.buffer java.lang.Object[]  (LINE:152)\l0x0009: IGET  (r1 I:int) = (r5 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.head int \l0x000b: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int A[D('currentSize' int)]) \l0x000c: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[]) \l0x000d: ARITH  (r1 I:int) = (r1 I:int) % (r2 I:int) \l0x000e: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r1 I:??[int, short, byte, char])\l  (r7 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)])\l \l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0040: RETURN   A[SYNTHETIC] (LINE:160)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:155)\l0x0015: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002b \l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|0x0018: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:309)\l0x0019: IGET  (r2 I:kotlinx.coroutines.channels.BufferOverflow) = (r5 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow  (LINE:155)\l0x001b: SGET  (r3 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST kotlinx.coroutines.channels.BufferOverflow \l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0021 \l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|0x001f: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0022|0x0022: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0025 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0025|0x0025: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0027: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x002a|0x002a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0021|0x0021: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x002b|0x002b: IGET  (r0 I:java.lang.Object[]) = (r5 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.buffer java.lang.Object[]  (LINE:156)\l0x002d: IGET  (r2 I:int) = (r5 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.head int \l0x002f: ARRAY_LENGTH  (r3 I:int) = (r0 I:??[]) \l0x0030: ARITH  (r3 I:int) = (r2 I:int) % (r3 I:int) \l0x0032: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0033: APUT  (r0 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r4 I:??[OBJECT, ARRAY]) \l0x0035: ARITH  (r3 I:int) = (r2 I:int) + (r6 I:int A[D('currentSize' int)])  (LINE:157)\l0x0037: ARRAY_LENGTH  (r4 I:int) = (r0 I:??[]) \l0x0038: ARITH  (r3 I:int) = (r3 I:int) % (r4 I:int) \l0x0039: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r3 I:??[int, short, byte, char])\l  (r7 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)])\l \l0x003b: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int)  (LINE:158)\l0x003c: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x003d: ARITH  (r2 I:int) = (r2 I:int) % (r0 I:int) \l0x003e: IPUT  (r2 I:int), (r5 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.head int \l}"];
Node_34 [shape=record,label="{34\:\ 0x0040|RETURN\lORIG_RETURN\l|0x0040: RETURN    (LINE:160)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.channels.ArrayChannel.enqueueElement((r5 'this' I:kotlinx.coroutines.channels.ArrayChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('currentSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x002a \-\> B:19:?, CROSS_EDGE: B:33:0x002b \-\> B:34:0x0040, CROSS_EDGE: B:28:0x0021 \-\> B:29:0x0022, CROSS_EDGE: B:24:0x0016 \-\> B:33:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0022: r0 '$i$a$\-assert\-ArrayChannel$enqueueElement$1' I\l  \-1 \-0x0040: r6 'currentSize' I\l  \-1 \-0x0040: r7 'element' Ljava\/lang\/Object;\lTYPE_VARS: [E]\lSIGNATURE: (ITE;)V\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_35;
Node_35 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_33;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_33[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_19;
Node_28 -> Node_29;
Node_33 -> Node_34;
Node_34 -> Node_19;
}

