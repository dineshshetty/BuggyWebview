digraph "CFG forkotlinx.coroutines.channels.ArrayChannel.updateBufferSize(I)Lkotlinx\/coroutines\/internal\/Symbol;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.capacity int  (LINE:136)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|0x0003: IF  (r4 I:??[int, byte, short, char] A[D('currentSize' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:22:0x000a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|0x0005: ARITH  (r0 I:int) = (r4 I:int A[D('currentSize' int)]) + (1 int)  (LINE:137)\l0x0007: IPUT  (r0 I:int), (r3 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.size int \l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|RETURN\l|0x0009: RETURN  (r1 I:kotlinx.coroutines.internal.Symbol)  (LINE:138)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: IGET  (r0 I:kotlinx.coroutines.channels.BufferOverflow) = (r3 I:kotlinx.coroutines.channels.ArrayChannel) kotlinx.coroutines.channels.ArrayChannel.onBufferOverflow kotlinx.coroutines.channels.BufferOverflow  (LINE:141)\l0x000c: SGET  (r2 I:int[]) =  kotlinx.coroutines.channels.ArrayChannel.WhenMappings.$EnumSwitchMapping$0 int[] \l0x000e: INVOKE  (r0 I:int) = (r0 I:kotlinx.coroutines.channels.BufferOverflow) type: VIRTUAL call: kotlinx.coroutines.channels.BufferOverflow.ordinal():int A[MD:():int (c)]\l0x0012: AGET  (r0 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: SWITCH  (r0 I:??)\l case 1: goto B:28:0x0021\l case 2: goto B:27:0x001e\l case 3: goto B:31:?\l default: goto B:24:0x0017 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|0x0017: NEW_INSTANCE  (r0 I:kotlin.NoWhenBranchMatchedException) =  kotlin.NoWhenBranchMatchedException  (LINE:144)\l0x0019: INVOKE  (r0 I:kotlin.NoWhenBranchMatchedException) type: DIRECT call: kotlin.NoWhenBranchMatchedException.\<init\>():void A[MD:():void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|0x001e: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.OFFER_SUCCESS kotlinx.coroutines.internal.Symbol  (LINE:143)\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN  (r1 I:kotlinx.coroutines.internal.Symbol) A[SYNTHETIC] (LINE:141)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0021|0x0021: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.OFFER_FAILED kotlinx.coroutines.internal.Symbol  (LINE:142)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|RETURN\lORIG_RETURN\l|0x0023: RETURN  (r1 I:kotlinx.coroutines.internal.Symbol)  (LINE:141)\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN  (r1 I:kotlinx.coroutines.internal.Symbol) A[SYNTHETIC] (LINE:141)\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.internal.Symbol kotlinx.coroutines.channels.ArrayChannel.updateBufferSize((r3 'this' I:kotlinx.coroutines.channels.ArrayChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('currentSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001c \-\> B:17:?, CROSS_EDGE: B:29:0x0023 \-\> B:17:?, CROSS_EDGE: B:28:0x0021 \-\> B:29:0x0023, CROSS_EDGE: B:23:0x0014 \-\> B:29:0x0023\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002d: r4 'currentSize' I\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_27;
Node_23 -> Node_28;
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_17;
Node_27 -> Node_30;
Node_30 -> Node_17;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_31 -> Node_17;
}

