digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.Itr.hasNextResult(Ljava\/lang\/Object;)Z" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)]) kotlinx.coroutines.channels.Closed  (LINE:846)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0019 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)])  (LINE:847)\l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.channels.Closed) = (kotlinx.coroutines.channels.Closed) (r0 I:??[OBJECT, ARRAY]) \l0x0007: IGET  (r0 I:java.lang.Throwable) = (r0 I:kotlinx.coroutines.channels.Closed) kotlinx.coroutines.channels.Closed.closeCause java.lang.Throwable \l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000d \l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|RETURN\l|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:848)\l0x000c: RETURN  (r0 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000d|0x000d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)])  (LINE:847)\l0x000e: CHECK_CAST (r0 I:kotlinx.coroutines.channels.Closed) = (kotlinx.coroutines.channels.Closed) (r0 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:java.lang.Throwable) = (r0 I:kotlinx.coroutines.channels.Closed) type: VIRTUAL call: kotlinx.coroutines.channels.Closed.getReceiveException():java.lang.Throwable A[MD:():java.lang.Throwable (m)]\l0x0014: INVOKE  (r0 I:java.lang.Throwable) = (r0 I:java.lang.Throwable) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.recoverStackTrace(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|RETURN\l|0x0019: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:850)\l0x001a: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.channels.AbstractChannel.Itr.hasNextResult((r1 'this' I:kotlinx.coroutines.channels.AbstractChannel$Itr\<E\> A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[D('result' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0018 \-\> B:25:?, CROSS_EDGE: B:35:0x001a \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001a: r2 'result' Ljava\/lang\/Object;\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_25;
}

