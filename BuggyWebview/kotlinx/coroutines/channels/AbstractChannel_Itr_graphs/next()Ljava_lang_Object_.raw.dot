digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.Itr.next()Ljava\/lang\/Object;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r3 I:kotlinx.coroutines.channels.AbstractChannel$Itr) kotlinx.coroutines.channels.AbstractChannel.Itr.result java.lang.Object  (LINE:880)\l0x0002: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)]) kotlinx.coroutines.channels.Closed  (LINE:881)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|0x0004: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0017 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED kotlinx.coroutines.internal.Symbol  (LINE:882)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' java.lang.Object)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000f \l}"];
Node_30 [shape=record,label="{30\:\ 0x000a|0x000a: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED kotlinx.coroutines.internal.Symbol  (LINE:883)\l0x000c: IPUT  (r1 I:java.lang.Object), (r3 I:kotlinx.coroutines.channels.AbstractChannel$Itr) kotlinx.coroutines.channels.AbstractChannel.Itr.result java.lang.Object \l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:E A[D('result' java.lang.Object)])  (LINE:884)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000f|0x000f: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:887)\l0x0011: CONST_STR  (r2 I:java.lang.String) =  \"'hasNext' should be called prior to 'next' invocation\" \l0x0013: INVOKE  (r1 I:java.lang.IllegalStateException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0016|0x0016: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0017|0x0017: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)])  (LINE:881)\l0x0018: CHECK_CAST (r1 I:kotlinx.coroutines.channels.Closed) = (kotlinx.coroutines.channels.Closed) (r1 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:java.lang.Throwable) = (r1 I:kotlinx.coroutines.channels.Closed) type: VIRTUAL call: kotlinx.coroutines.channels.Closed.getReceiveException():java.lang.Throwable A[MD:():java.lang.Throwable (m)]\l0x001e: INVOKE  (r1 I:java.lang.Throwable) = (r1 I:java.lang.Throwable) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.recoverStackTrace(java.lang.Throwable):java.lang.Throwable A[MD:\<E extends java.lang.Throwable\>:(E extends java.lang.Throwable):E extends java.lang.Throwable (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0022: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public E kotlinx.coroutines.channels.AbstractChannel.Itr.next((r3 'this' I:kotlinx.coroutines.channels.AbstractChannel$Itr\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0016 \-\> B:25:?, CROSS_EDGE: B:35:0x0022 \-\> B:25:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: ()TE;\lDebug Info:\l  0x0002\-0x0022: r0 'result' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ChannelIterator.next():E]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_35 -> Node_25;
}

