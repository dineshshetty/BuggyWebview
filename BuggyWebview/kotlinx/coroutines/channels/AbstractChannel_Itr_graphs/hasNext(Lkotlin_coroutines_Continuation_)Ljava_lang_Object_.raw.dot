digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.Itr.hasNext(Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.Itr.getResult():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:837)\l0x0004: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED kotlinx.coroutines.internal.Symbol \l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0015 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|0x0008: INVOKE  (r0 I:java.lang.Object) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.Itr.getResult():java.lang.Object A[MD:():java.lang.Object (m)]\l0x000c: INVOKE  (r0 I:boolean) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr), (r0 I:java.lang.Object) type: DIRECT call: kotlinx.coroutines.channels.AbstractChannel.Itr.hasNextResult(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l0x0010: INVOKE  (r0 I:java.lang.Boolean) = (r0 I:boolean) type: STATIC call: kotlin.coroutines.jvm.internal.Boxing.boxBoolean(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:java.lang.Object) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0015|0x0015: IGET  (r0 I:kotlinx.coroutines.channels.AbstractChannel\<E\>) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr) kotlinx.coroutines.channels.AbstractChannel.Itr.channel kotlinx.coroutines.channels.AbstractChannel  (LINE:839)\l0x0017: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.pollInternal():java.lang.Object A[MD:():java.lang.Object (m)]\l0x001b: INVOKE  (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr), (r0 I:java.lang.Object) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.Itr.setResult(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x001e: INVOKE  (r0 I:java.lang.Object) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.Itr.getResult():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:840)\l0x0022: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED kotlinx.coroutines.internal.Symbol \l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|0x0024: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0033 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0026|0x0026: INVOKE  (r0 I:java.lang.Object) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.Itr.getResult():java.lang.Object A[MD:():java.lang.Object (m)]\l0x002a: INVOKE  (r0 I:boolean) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr), (r0 I:java.lang.Object) type: DIRECT call: kotlinx.coroutines.channels.AbstractChannel.Itr.hasNextResult(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l0x002e: INVOKE  (r0 I:java.lang.Boolean) = (r0 I:boolean) type: STATIC call: kotlin.coroutines.jvm.internal.Boxing.boxBoolean(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0032|RETURN\l|0x0032: RETURN  (r0 I:java.lang.Object) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0033|0x0033: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:kotlinx.coroutines.channels.AbstractChannel$Itr)\l  (r3 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: DIRECT call: kotlinx.coroutines.channels.AbstractChannel.Itr.hasNextSuspend(kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlin.coroutines.Continuation\<? super java.lang.Boolean\>):java.lang.Object (m)] (LINE:842)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0037|RETURN\l|0x0037: RETURN  (r0 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.channels.AbstractChannel.Itr.hasNext((r2 'this' I:kotlinx.coroutines.channels.AbstractChannel$Itr\<E\> A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlin.coroutines.Continuation\<? super java.lang.Boolean\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0032 \-\> B:25:?, CROSS_EDGE: B:35:0x0037 \-\> B:25:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<\-Ljava\/lang\/Boolean;\>;)Ljava\/lang\/Object;\lDebug Info:\l  \-1 \-0x0037: r3 '$completion' Lkotlin\/coroutines\/Continuation;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ChannelIterator.hasNext(kotlin.coroutines.Continuation\<? super java.lang.Boolean\>):java.lang.Object]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_25;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_35 -> Node_25;
}

