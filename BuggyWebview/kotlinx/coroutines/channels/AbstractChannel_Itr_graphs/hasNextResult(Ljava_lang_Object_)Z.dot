digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.Itr.hasNextResult(Ljava\/lang\/Object;)Z" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000}"];
Node_27 [shape=record,label="{27\:\ 0x0002|if ((r2 instanceof kotlinx.coroutines.channels.Closed) == false) goto L9\l}"];
Node_28 [shape=record,label="{28\:\ 0x0004}"];
Node_29 [shape=record,label="{29\:\ 0x0009|if (((kotlinx.coroutines.channels.Closed) r2).closeCause != null) goto L7\l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|RETURN\l|return false\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x000d}"];
Node_33 [shape=record,label="{33\:\ 0x0018|throw kotlinx.coroutines.internal.StackTraceRecovery.recoverStackTrace(((kotlinx.coroutines.channels.Closed) r2).getReceiveException())\l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.channels.AbstractChannel.Itr.hasNextResult((r1v0 'this' kotlinx.coroutines.channels.AbstractChannel$Itr\<E\> A[IMMUTABLE_TYPE, THIS]), (r2v0 'result' java.lang.Object A[D('result' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0018 \-\> B:25:?, CROSS_EDGE: B:35:0x001a \-\> B:25:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_25;
}

