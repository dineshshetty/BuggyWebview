digraph "CFG forkotlinx.coroutines.channels.BroadcastChannelKt.BroadcastChannel(I)Lkotlinx\/coroutines\/channels\/BroadcastChannel;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|switch(r2) \{\l    case \-2: goto L11;\l    case \-1: goto L9;\l    case 0: goto L7;\l    case 2147483647: goto L5;\l    default: goto L2;\l\}\l}"];
Node_16 [shape=record,label="{16\:\ 0x0003}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return new kotlinx.coroutines.channels.ArrayBroadcastChannel(r2)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b}"];
Node_18 [shape=record,label="{18\:\ 0x0012|throw new java.lang.IllegalArgumentException(\"Unsupported UNLIMITED capacity for BroadcastChannel\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013}"];
Node_20 [shape=record,label="{20\:\ 0x001a|throw new java.lang.IllegalArgumentException(\"Unsupported 0 capacity for BroadcastChannel\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return new kotlinx.coroutines.channels.ConflatedBroadcastChannel()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0023}"];
Node_23 [shape=record,label="{23\:\ 0x0030|RETURN\lORIG_RETURN\l|return new kotlinx.coroutines.channels.ArrayBroadcastChannel(kotlinx.coroutines.channels.Channel.Factory.getCHANNEL_DEFAULT_CAPACITY$kotlinx_coroutines_core())\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.channels.BroadcastChannel\<E\> kotlinx.coroutines.channels.BroadcastChannelKt.BroadcastChannel((r2v0 'capacity' int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0012 \-\> B:14:?, CROSS_EDGE: B:20:0x001a \-\> B:14:?, CROSS_EDGE: B:21:0x001b \-\> B:23:0x0030, CROSS_EDGE: B:22:0x0023 \-\> B:23:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: \<E:Ljava\/lang\/Object;\>(I)Lkotlinx\/coroutines\/channels\/BroadcastChannel\<TE;\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17;
Node_15 -> Node_19;
Node_15 -> Node_21;
Node_15 -> Node_22;
Node_16 -> Node_24;
Node_24 -> Node_14;
Node_17 -> Node_18;
Node_18 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_21 -> Node_25;
Node_25 -> Node_14;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

