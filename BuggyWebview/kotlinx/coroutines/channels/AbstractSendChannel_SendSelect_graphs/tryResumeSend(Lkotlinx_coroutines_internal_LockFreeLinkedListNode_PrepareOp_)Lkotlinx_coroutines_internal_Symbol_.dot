digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel.SendSelect.tryResumeSend(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Lkotlinx\/coroutines\/internal\/Symbol;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|return (kotlinx.coroutines.internal.Symbol) r1.select.trySelectOther(r2)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.internal.Symbol kotlinx.coroutines.channels.AbstractSendChannel.SendSelect.tryResumeSend((r1v0 'this' kotlinx.coroutines.channels.AbstractSendChannel$SendSelect\<E, R\> A[IMMUTABLE_TYPE, THIS]), (r2v0 'otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.Send.tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):kotlinx.coroutines.internal.Symbol]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

