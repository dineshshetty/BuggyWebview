digraph "CFG forkotlinx.coroutines.channels.ChannelsKt.sendBlocking(Lkotlinx\/coroutines\/channels\/SendChannel;Ljava\/lang\/Object;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.channels.Channels.sendBlocking(r0, r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0003|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.channels.ChannelsKt.sendBlocking((r0v0 kotlinx.coroutines.channels.SendChannel\<? super E\> A[D('$this$sendBlocking' kotlinx.coroutines.channels.SendChannel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Deprecated in the favour of 'trySendBlocking'. Consider handling the result of 'trySendBlocking' explicitly and rethrow exception if necessary, replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=trySendBlocking(element), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: \<E:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/channels\/SendChannel\<\-TE;\>;TE;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

