digraph "CFG forkotlinx.coroutines.channels.ChannelResult.exceptionOrNull\-impl(Ljava\/lang\/Object;)Ljava\/lang\/Throwable;" {
subgraph cluster_Region_843183631 {
label = "R(2:2|(2:(1:8)|(1:6)))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0003|kotlinx.coroutines.channels.ChannelResult.Closed r0 = r2 instanceof kotlinx.coroutines.channels.ChannelResult.Closed ? (kotlinx.coroutines.channels.ChannelResult.Closed) r2 : null\l}"];
subgraph cluster_Region_647729178 {
label = "R(2:(1:8)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1245782706 {
label = "IF [B:17:0x000a] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.channels.ChannelResult$Closed) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L8\l}"];
subgraph cluster_Region_227014646 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1697301119 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x000f|RETURN\lORIG_RETURN\l|return r0.cause\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0005}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000d}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0009}"];
MethodNode[shape=record,label="{public static final java.lang.Throwable kotlinx.coroutines.channels.ChannelResult.exceptionOrNull\-impl((r2v0 'arg0' java.lang.Object A[D('arg0' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000a \-\> B:20:0x000f, CROSS_EDGE: B:16:0x0009 \-\> B:17:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_14 -> Node_15;
Node_14 -> Node_16;
Node_17 -> Node_19[style=dashed];
Node_17 -> Node_21;
Node_21 -> Node_12;
Node_20 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_17;
Node_19 -> Node_20;
Node_16 -> Node_17;
}

