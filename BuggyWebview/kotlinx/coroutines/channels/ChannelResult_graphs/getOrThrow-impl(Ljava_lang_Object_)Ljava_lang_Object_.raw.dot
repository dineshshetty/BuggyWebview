digraph "CFG forkotlinx.coroutines.channels.ChannelResult.getOrThrow\-impl(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('arg0' java.lang.Object)]) kotlinx.coroutines.channels.ChannelResult$Failed  (LINE:441)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0005 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|RETURN\l|0x0004: RETURN  (r2 I:T A[D('arg0' java.lang.Object)]) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|0x0005: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('arg0' java.lang.Object)]) kotlinx.coroutines.channels.ChannelResult$Closed  (LINE:442)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0016 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('arg0' java.lang.Object)]) \l0x000a: CHECK_CAST (r0 I:kotlinx.coroutines.channels.ChannelResult$Closed) = (kotlinx.coroutines.channels.ChannelResult$Closed) (r0 I:??[OBJECT, ARRAY]) \l0x000c: IGET  (r0 I:java.lang.Throwable) = (r0 I:kotlinx.coroutines.channels.ChannelResult$Closed) kotlinx.coroutines.channels.ChannelResult.Closed.cause java.lang.Throwable \l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0016 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|0x0010: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('arg0' java.lang.Object)]) \l0x0011: CHECK_CAST (r0 I:kotlinx.coroutines.channels.ChannelResult$Closed) = (kotlinx.coroutines.channels.ChannelResult$Closed) (r0 I:??[OBJECT, ARRAY]) \l0x0013: IGET  (r0 I:java.lang.Throwable) = (r0 I:kotlinx.coroutines.channels.ChannelResult$Closed) kotlinx.coroutines.channels.ChannelResult.Closed.cause java.lang.Throwable \l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|0x0015: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"Trying to call 'getOrThrow' on a failed channel result: \"  (LINE:443)\l0x001a: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:java.lang.Object A[D('arg0' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x001e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0022: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|0x0025: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T kotlinx.coroutines.channels.ChannelResult.getOrThrow\-impl((r2 I:java.lang.Object A[D('arg0' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0015 \-\> B:14:?, CROSS_EDGE: B:25:0x0025 \-\> B:14:?, CROSS_EDGE: B:19:0x0007 \-\> B:24:0x0016\lINLINE_NOT_NEEDED\lSIGNATURE: (Ljava\/lang\/Object;)TT;\lDebug Info:\l  \-1 \-0x0025: r2 'arg0' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

