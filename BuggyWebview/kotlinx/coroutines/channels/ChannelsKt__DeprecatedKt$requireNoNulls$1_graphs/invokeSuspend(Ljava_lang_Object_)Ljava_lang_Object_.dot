digraph "CFG forkotlinx.coroutines.channels.ChannelsKt__DeprecatedKt$requireNoNulls$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|switch(r5.label) \{\l    case 0: goto L6;\l    default: goto L3;\l\}\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008}"];
Node_16 [shape=record,label="{16\:\ 0x000f|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|kotlin.ResultKt.throwOnFailure(r6)\ljava.lang.Object r1 = r5.L$0\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|if (r1 == null) goto L9\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|RETURN\l|return r1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"null element found in \")\lr3.append(r5.$this_requireNoNulls)\lr3.append('.')\l}"];
Node_21 [shape=record,label="{21\:\ 0x0036|throw new java.lang.IllegalArgumentException(r3.toString())\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.channels.ChannelsKt__DeprecatedKt$requireNoNulls$1.invokeSuspend((r5v0 'this' kotlinx.coroutines.channels.ChannelsKt__DeprecatedKt$requireNoNulls$1 A[IMMUTABLE_TYPE, THIS]), (r6v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0018 \-\> B:12:?, CROSS_EDGE: B:21:0x0036 \-\> B:12:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

