digraph "CFG forkotlinx.coroutines.channels.ChannelCoroutine.receiveOrNull(Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.channels.Channel\<E\>) = (r1 I:kotlinx.coroutines.channels.ChannelCoroutine) kotlinx.coroutines.channels.ChannelCoroutine._channel kotlinx.coroutines.channels.Channel \l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlinx.coroutines.channels.Channel), (r2 I:kotlin.coroutines.Continuation) type: INTERFACE call: kotlinx.coroutines.channels.Channel.receiveOrNull(kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlin.coroutines.Continuation\<? super E\>):java.lang.Object (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:java.lang.Object) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.channels.ChannelCoroutine.receiveOrNull((r1 'this' I:kotlinx.coroutines.channels.ChannelCoroutine\<E\> A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.coroutines.Continuation\<? super E\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | \{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Deprecated in favor of 'receiveCatching'. Please note that the provided replacement does not rethrow channel's close cause as 'receiveOrNull' did, for the detailed replacement please refer to the 'receiveOrNull' documentation, replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=receiveCatching().getOrNull(), imports=[[]]\}\}\}\}\}\}\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<\-TE;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ReceiveChannel.receiveOrNull(kotlin.coroutines.Continuation\<? super E\>):java.lang.Object]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

