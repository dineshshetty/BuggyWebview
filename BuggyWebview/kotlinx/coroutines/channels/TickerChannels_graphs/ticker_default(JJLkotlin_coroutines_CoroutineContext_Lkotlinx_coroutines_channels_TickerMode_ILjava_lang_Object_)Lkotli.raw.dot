digraph "CFG forkotlinx.coroutines.channels.TickerChannelsKt.ticker$default(JJLkotlin\/coroutines\/CoroutineContext;Lkotlinx\/coroutines\/channels\/TickerMode;ILjava\/lang\/Object;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: ARITH  (r7 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:62)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|0x0002: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0005 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: MOVE  (r2 I:??[long, double]) = (r0 I:??[long, double]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|0x0005: ARITH  (r7 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|0x0007: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|0x0009: SGET  (r4 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:65)\l0x000b: CHECK_CAST (r4 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char])  (LINE:62)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0013 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: SGET  (r5 I:kotlinx.coroutines.channels.TickerMode) =  kotlinx.coroutines.channels.TickerMode.FIXED_PERIOD kotlinx.coroutines.channels.TickerMode  (LINE:66)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: INVOKE  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) = (r0 I:long), (r2 I:long), (r4 I:kotlin.coroutines.CoroutineContext), (r5 I:kotlinx.coroutines.channels.TickerMode) type: STATIC call: kotlinx.coroutines.channels.TickerChannelsKt.ticker(long, long, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.TickerMode):kotlinx.coroutines.channels.ReceiveChannel A[MD:(long, long, kotlin.coroutines.CoroutineContext, kotlinx.coroutines.channels.TickerMode):kotlinx.coroutines.channels.ReceiveChannel\<kotlin.Unit\> (m)] (LINE:62)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|RETURN\l|0x0017: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlinx.coroutines.channels.ReceiveChannel kotlinx.coroutines.channels.TickerChannelsKt.ticker$default((r0 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:long A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.CoroutineContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlinx.coroutines.channels.TickerMode A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:22:0x000f \-\> B:24:0x0013, CROSS_EDGE: B:19:0x0007 \-\> B:21:0x000d, CROSS_EDGE: B:16:0x0002 \-\> B:18:0x0005\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

