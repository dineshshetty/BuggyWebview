digraph "CFG forkotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.close(Ljava\/lang\/Throwable;)Z" {
subgraph cluster_Region_2104452020 {
label = "R(3:1|(2:3|(1:5))|12)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0000|boolean boolean r0 = super.close(r8)\l}"];
subgraph cluster_IfRegion_991454811 {
label = "IF [B:16:0x0004] THEN: R(2:3|(1:5)) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0004|if (r0 != false) goto L3\l}"];
subgraph cluster_Region_1775365620 {
label = "R(2:3|(1:5))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0006|kotlinx.coroutines.channels.ArrayBroadcastChannel.updateHead$default(r7.broadcastChannel, null, r7, 1, null)\ljava.util.concurrent.locks.ReentrantLock java.util.concurrent.locks.ReentrantLock r1 = r7.subLock\ljava.util.concurrent.locks.Lock java.util.concurrent.locks.ReentrantLock r3 = r1\lr3.lock()\l}"];
subgraph cluster_TryCatchRegion_27731140 {
label = "Try: R(1:5) finally: R(3:8|9|10)";
node [shape=record,color=blue];
subgraph cluster_Region_992292629 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0017|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0027, blocks: (B:18:0x0017), top: B:24:0x0017 \}\lCatch: all \-\> 0x0027\l|setSubHead(r7.broadcastChannel.getTail())     \/\/ Catch: java.lang.Throwable \-\> L27\lkotlin.Unit kotlin.Unit r4 = kotlin.Unit.INSTANCE     \/\/ Catch: java.lang.Throwable \-\> L27\l}"];
}
subgraph cluster_Region_1037146584 {
label = "R(3:8|9|10) | ExcHandler: all \-\> 0x0027\l";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0027|ExcHandler: all \-\> 0x0027\l}"];
Node_21 [shape=record,label="{21\:\ 0x0028|FINALLY_INSNS\l|r3.unlock()\l}"];
Node_22 [shape=record,label="{22\:\ 0x002b|throw r4\l}"];
}
}
}
}
Node_23 [shape=record,label="{23\:\ 0x002c|RETURN\l|return r0\l}"];
}
subgraph cluster_Region_1037146584 {
label = "R(3:8|9|10) | ExcHandler: all \-\> 0x0027\l";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0027|ExcHandler: all \-\> 0x0027\l}"];
Node_21 [shape=record,label="{21\:\ 0x0028|FINALLY_INSNS\l|r3.unlock()\l}"];
Node_22 [shape=record,label="{22\:\ 0x002b|throw r4\l}"];
}
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0017|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0023|DONT_GENERATE\l|r3.unlock()\l}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.close((r7v0 'this' kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber\<E\> A[IMMUTABLE_TYPE, THIS]), (r8v0 'cause' java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x002b \-\> B:14:?, CROSS_EDGE: B:24:0x0017 \-\> B:20:0x0027, CROSS_EDGE: B:16:0x0004 \-\> B:23:0x002c\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0027, blocks: (B:18:0x0017), top: B:24:0x0017 \}\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.SendChannel.close(java.lang.Throwable):boolean]\l}"];
MethodNode -> Node_13;Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_23[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_14;
Node_23 -> Node_14;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_14;
Node_13 -> Node_15;
Node_24 -> Node_18;
Node_24 -> Node_20;
Node_19 -> Node_23;
Node_25 -> Node_20;
}

