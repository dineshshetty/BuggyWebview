digraph "CFG forkotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.peekUnderLock()Ljava\/lang\/Object;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:long) = (r7 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.getSubHead():long A[MD:():long (m)] (LINE:359)\l0x0004: IGET  (r2 I:kotlinx.coroutines.channels.ArrayBroadcastChannel\<E\>) = (r7 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.broadcastChannel kotlinx.coroutines.channels.ArrayBroadcastChannel  (LINE:362)\l0x0006: INVOKE  (r2 I:kotlinx.coroutines.channels.Closed) = (r2 I:kotlinx.coroutines.channels.ArrayBroadcastChannel) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.getClosedForReceive():kotlinx.coroutines.channels.Closed A[MD:():kotlinx.coroutines.channels.Closed\<?\> (m)]\l0x000a: IGET  (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel\<E\>) = (r7 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.broadcastChannel kotlinx.coroutines.channels.ArrayBroadcastChannel  (LINE:363)\l0x000c: INVOKE  (r3 I:long) = (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel) type: STATIC call: kotlinx.coroutines.channels.ArrayBroadcastChannel.access$getTail(kotlinx.coroutines.channels.ArrayBroadcastChannel):long A[MD:(kotlinx.coroutines.channels.ArrayBroadcastChannel):long (m)]\l0x0010: CMP_L  (r5 I:int) = (r0 I:long A[D('subHead' long)]), (r3 I:long A[D('tail' long)])  (LINE:364)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: IF  (r5 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:25:0x0021 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('closedBroadcast' kotlinx.coroutines.channels.Closed)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001b  (LINE:367)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|0x0016: INVOKE  (r5 I:kotlinx.coroutines.channels.Closed) = (r7 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.getClosedForReceive():kotlinx.coroutines.channels.Closed A[MD:():kotlinx.coroutines.channels.Closed\<?\> (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|0x001c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:? \l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|0x001e: SGET  (r5 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED kotlinx.coroutines.internal.Symbol \l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN  (r5 I:java.lang.Object) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN  (r5 I:java.lang.Object) A[SYNTHETIC]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|0x001b: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('closedBroadcast' kotlinx.coroutines.channels.Closed)]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|0x0021: IGET  (r5 I:kotlinx.coroutines.channels.ArrayBroadcastChannel\<E\>) = (r7 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.broadcastChannel kotlinx.coroutines.channels.ArrayBroadcastChannel  (LINE:371)\l0x0023: INVOKE  (r5 I:java.lang.Object) = (r5 I:kotlinx.coroutines.channels.ArrayBroadcastChannel), (r0 I:long A[D('subHead' long)]) type: STATIC call: kotlinx.coroutines.channels.ArrayBroadcastChannel.access$elementAt(kotlinx.coroutines.channels.ArrayBroadcastChannel, long):java.lang.Object A[MD:(kotlinx.coroutines.channels.ArrayBroadcastChannel, long):java.lang.Object (m)]\l0x0027: INVOKE  (r6 I:kotlinx.coroutines.channels.Closed) = (r7 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.getClosedForReceive():kotlinx.coroutines.channels.Closed A[MD:():kotlinx.coroutines.channels.Closed\<?\> (m)] (LINE:373)\l}"];
Node_26 [shape=record,label="{26\:\ 0x002b|0x002b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('closedSub' kotlinx.coroutines.channels.Closed)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x002e  (LINE:374)\l}"];
Node_27 [shape=record,label="{27\:\ 0x002d|RETURN\l|0x002d: RETURN  (r6 I:java.lang.Object A[D('closedSub' kotlinx.coroutines.channels.Closed)]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x002e|RETURN\l|0x002e: RETURN  (r5 I:java.lang.Object A[D('result' java.lang.Object)])  (LINE:376)\l}"];
MethodNode[shape=record,label="{private final java.lang.Object kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.peekUnderLock((r7 'this' I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x001c \-\> B:24:0x0020, CROSS_EDGE: B:21:0x001b \-\> B:22:0x001c, CROSS_EDGE: B:27:0x002d \-\> B:16:?, CROSS_EDGE: B:28:0x002e \-\> B:16:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x002e: r0 'subHead' J\l  0x000a\-0x002e: r2 'closedBroadcast' Lkotlinx\/coroutines\/channels\/Closed;\l  0x0010\-0x002e: r3 'tail' J\l  0x0027\-0x002e: r5 'result' Ljava\/lang\/Object;\l  0x002b\-0x002e: r6 'closedSub' Lkotlinx\/coroutines\/channels\/Closed;\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_16;
Node_29 -> Node_16;
Node_21 -> Node_22;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_16;
Node_28 -> Node_16;
}

