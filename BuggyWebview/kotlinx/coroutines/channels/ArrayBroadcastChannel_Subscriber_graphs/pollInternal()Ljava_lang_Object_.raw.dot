digraph "CFG forkotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.pollInternal()Ljava\/lang\/Object;" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:282)\l0x0001: IGET  (r1 I:java.util.concurrent.locks.ReentrantLock) = (r10 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.subLock java.util.concurrent.locks.ReentrantLock  (LINE:283)\l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$withLock$iv' java.util.concurrent.locks.ReentrantLock)])  (LINE:388)\l0x0005: CHECK_CAST (r3 I:java.util.concurrent.locks.Lock) = (java.util.concurrent.locks.Lock) (r3 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  (r3 I:java.util.concurrent.locks.Lock) type: INTERFACE call: java.util.concurrent.locks.Lock.lock():void A[MD:():void (c)]\l0x000a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x000b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_32 [shape=record,label="{32\:\ 0x000b|TRY_ENTER\lTryCatch #0 \{all \-\> 0x004e, blocks: (B:32:0x000b, B:35:0x0015, B:38:0x001a), top: B:56:0x000b \}\lCatch: all \-\> 0x004e\l|0x000b: INVOKE  (r5 I:java.lang.Object) = (r10 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: DIRECT call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.peekUnderLock():java.lang.Object A[Catch: all \-\> 0x004e, MD:():java.lang.Object (m), TRY_ENTER] (LINE:284)\l0x0010: INSTANCE_OF  (r6 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)]) kotlinx.coroutines.channels.Closed A[Catch: all \-\> 0x004e] (LINE:286)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0012|0x0012: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0015 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0014|0x0014: GOTO  \-\> 0x0025 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|0x0026: INVOKE  (r3 I:java.util.concurrent.locks.Lock) type: INTERFACE call: java.util.concurrent.locks.Lock.unlock():void A[MD:():void (c)]\l0x002a: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('$this$withLock$iv' java.util.concurrent.locks.ReentrantLock)]) = (r5 I:??[OBJECT, ARRAY])  (LINE:283)\l0x002b: INSTANCE_OF  (r2 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)]) kotlinx.coroutines.channels.Closed  (LINE:298)\l0x002d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|0x002e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0034 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|0x0030: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('result' java.lang.Object)]) \l0x0031: CHECK_CAST (r2 I:kotlinx.coroutines.channels.Closed) = (kotlinx.coroutines.channels.Closed) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0035|0x0035: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0038 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0038|0x0038: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:387)\l0x0039: IGET  (r5 I:java.lang.Throwable) = (r2 I:kotlinx.coroutines.channels.Closed A[D('it' kotlinx.coroutines.channels.Closed)]) kotlinx.coroutines.channels.Closed.closeCause java.lang.Throwable  (LINE:298)\l0x003b: INVOKE  (r10 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber), (r5 I:java.lang.Throwable) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.close(java.lang.Throwable):boolean A[MD:(java.lang.Throwable):boolean (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x003e|0x003e: INVOKE  (r2 I:boolean) = (r10 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.checkOffer():boolean A[MD:():boolean (m)] (LINE:301)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0042|0x0042: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0045 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0044|0x0044: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('updated' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:302)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0045|0x0045: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('updated' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x004d  (LINE:304)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0047|0x0047: IGET  (r2 I:kotlinx.coroutines.channels.ArrayBroadcastChannel\<E\>) = (r10 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.broadcastChannel kotlinx.coroutines.channels.ArrayBroadcastChannel  (LINE:305)\l0x0049: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x004a: INVOKE  \l  (r2 I:kotlinx.coroutines.channels.ArrayBroadcastChannel)\l  (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber)\l  (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber)\l  (r4 I:int)\l  (r3 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.channels.ArrayBroadcastChannel.updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, int, java.lang.Object):void A[MD:(kotlinx.coroutines.channels.ArrayBroadcastChannel, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, int, java.lang.Object):void (m)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x004d|RETURN\l|0x004d: RETURN  (r1 I:java.lang.Object A[D('result' java.lang.Object)])  (LINE:306)\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0034|0x0034: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0015|TryCatch #0 \{all \-\> 0x004e, blocks: (B:32:0x000b, B:35:0x0015, B:38:0x001a), top: B:56:0x000b \}\lCatch: all \-\> 0x004e\l|0x0015: SGET  (r6 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED kotlinx.coroutines.internal.Symbol A[Catch: all \-\> 0x004e] (LINE:287)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0017|0x0017: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' java.lang.Object)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x001a \l}"];
Node_37 [shape=record,label="{37\:\ 0x0019|0x0019: GOTO  \-\> 0x0025 \l}"];
Node_38 [shape=record,label="{38\:\ 0x001a|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x004e, blocks: (B:32:0x000b, B:35:0x0015, B:38:0x001a), top: B:56:0x000b \}\lCatch: all \-\> 0x004e\l|0x001a: INVOKE  (r6 I:long) = (r10 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.getSubHead():long A[Catch: all \-\> 0x004e, MD:():long (m)] (LINE:290)\l0x001e: CONST  (r8 I:??[long, double]) = (1 ??[long, double])  (LINE:291)\l0x0020: ARITH  (r8 I:long) = (r8 I:long) + (r6 I:long A[D('subHead' long)]) A[Catch: all \-\> 0x004e]\l0x0021: INVOKE  (r10 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber), (r8 I:long) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.setSubHead(long):void A[Catch: all \-\> 0x004e, MD:(long):void (m), TRY_LEAVE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0024|0x0024: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('updated' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:292)\l}"];
Node_57 [shape=record,label="{57\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_53 [shape=record,label="{53\:\ 0x004e|ExcHandler: all \-\> 0x004e\l|0x004e: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x004e] (LINE:295)\l}"];
Node_54 [shape=record,label="{54\:\ 0x004f|0x004f: INVOKE  (r3 I:java.util.concurrent.locks.Lock) type: INTERFACE call: java.util.concurrent.locks.Lock.unlock():void A[MD:():void (c)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x0052|0x0052: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected java.lang.Object kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.pollInternal((r10 'this' I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:50:0x0045 \-\> B:52:0x004d, CROSS_EDGE: B:48:0x0042 \-\> B:50:0x0045, CROSS_EDGE: B:44:0x0035 \-\> B:47:0x003e, CROSS_EDGE: B:43:0x0034 \-\> B:44:0x0035, CROSS_EDGE: B:37:0x0019 \-\> B:40:0x0025, CROSS_EDGE: B:39:0x0024 \-\> B:40:0x0025, CROSS_EDGE: B:55:0x0052 \-\> B:30:?, CROSS_EDGE: B:56:0x000b \-\> B:53:0x004e\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x004e, blocks: (B:32:0x000b, B:35:0x0015, B:38:0x001a), top: B:56:0x000b \}\lTYPE_VARS: [E]\lDebug Info:\l  0x001e\-0x0025: r6 'subHead' J\l  0x000b\-0x0026: r4 '$i$a$\-withLock\-ArrayBroadcastChannel$Subscriber$pollInternal$result$1' I\l  0x000f\-0x0026: r5 'result' Ljava\/lang\/Object;\l  0x0003\-0x002a: r1 '$this$withLock$iv' Ljava\/util\/concurrent\/locks\/ReentrantLock;\l  0x0004\-0x002a: r2 '$i$f$withLock' I\l  0x0038\-0x003e: r2 'it' Lkotlinx\/coroutines\/channels\/Closed;\l  0x0039\-0x003e: r4 '$i$a$\-also\-ArrayBroadcastChannel$Subscriber$pollInternal$1' I\l  0x002b\-0x004e: r1 'result' Ljava\/lang\/Object;\l  0x0001\-0x0052: r0 'updated' Z\l  0x004e\-0x0052: r1 '$this$withLock$iv' Ljava\/util\/concurrent\/locks\/ReentrantLock;\l  0x004e\-0x0052: r2 '$i$f$withLock' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractChannel.pollInternal():java.lang.Object]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_56;
Node_56 -> Node_32;
Node_56 -> Node_53;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_44;
Node_44 -> Node_46;
Node_44 -> Node_47[style=dashed];
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_30;
Node_43 -> Node_44;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_40;
Node_38 -> Node_39;
Node_38 -> Node_57;
Node_39 -> Node_40;
Node_57 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_30;
}

