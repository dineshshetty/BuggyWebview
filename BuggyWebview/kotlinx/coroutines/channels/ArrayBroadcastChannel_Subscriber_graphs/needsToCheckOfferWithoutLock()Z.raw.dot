digraph "CFG forkotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.needsToCheckOfferWithoutLock()Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.channels.Closed) = (r2 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.getClosedForReceive():kotlinx.coroutines.channels.Closed A[MD:():kotlinx.coroutines.channels.Closed\<?\> (m)] (LINE:347)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0008 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:boolean)  (LINE:348)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: INVOKE  (r0 I:boolean) = (r2 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.isBufferEmpty():boolean A[MD:():boolean (m)] (LINE:349)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0017 \l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: IGET  (r0 I:kotlinx.coroutines.channels.ArrayBroadcastChannel\<E\>) = (r2 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.broadcastChannel kotlinx.coroutines.channels.ArrayBroadcastChannel \l0x0010: INVOKE  (r0 I:kotlinx.coroutines.channels.Closed) = (r0 I:kotlinx.coroutines.channels.ArrayBroadcastChannel) type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.getClosedForReceive():kotlinx.coroutines.channels.Closed A[MD:():kotlinx.coroutines.channels.Closed\<?\> (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:? \l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|RETURN\l|0x0016: RETURN  (r1 I:boolean)  (LINE:350)\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x0017: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) A[SYNTHETIC] (LINE:351)\l0x0018: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:351)\l0x0018: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.needsToCheckOfferWithoutLock((r2 'this' I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0016 \-\> B:14:?, CROSS_EDGE: B:24:0x0018 \-\> B:14:?, CROSS_EDGE: B:19:0x000c \-\> B:23:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_14;
Node_25 -> Node_14;
Node_23 -> Node_14;
}

