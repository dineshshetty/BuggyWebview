digraph "CFG forkotlinx.coroutines.channels.ArrayBroadcastChannel.checkSubOffers()V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:137)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:138)\l0x0002: IGET  (r2 I:java.util.List\<kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber\<E\>\>) = (r5 I:kotlinx.coroutines.channels.ArrayBroadcastChannel) kotlinx.coroutines.channels.ArrayBroadcastChannel.subscribers java.util.List  (LINE:140)\l0x0004: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.List) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|LOOP_START\lLOOP:0: B:21:0x0008\-\>B:32:0x0008\l|0x0008: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|0x000c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001d \l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0012: CHECK_CAST (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) = (kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber) (r3 I:??[OBJECT, ARRAY]) \l0x0014: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('hasSubs' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:141)\l0x0015: INVOKE  (r4 I:boolean) = \l  (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber A[D('sub' kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber)])\l type: VIRTUAL call: kotlinx.coroutines.channels.ArrayBroadcastChannel.Subscriber.checkOffer():boolean A[MD:():boolean (m)] (LINE:142)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0008 \l}"];
Node_30 [shape=record,label="{30\:\ 0x001b|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|0x001b: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('updated' boolean)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0008|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0008|LOOP_END\lSYNTHETIC\lLOOP:0: B:21:0x0008\-\>B:32:0x0008\l}"];
Node_33 [shape=record,label="{33\:\ 0x0008|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001d|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('updated' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0021  (LINE:144)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|0x001f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasSubs' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:? \l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0026: RETURN   A[SYNTHETIC] (LINE:146)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0021|0x0021: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:145)\l0x0022: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: INVOKE  \l  (r5 I:kotlinx.coroutines.channels.ArrayBroadcastChannel)\l  (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber)\l  (r3 I:kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber)\l  (r2 I:int)\l  (r3 I:java.lang.Object)\l type: STATIC call: kotlinx.coroutines.channels.ArrayBroadcastChannel.updateHead$default(kotlinx.coroutines.channels.ArrayBroadcastChannel, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, int, java.lang.Object):void A[MD:(kotlinx.coroutines.channels.ArrayBroadcastChannel, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, kotlinx.coroutines.channels.ArrayBroadcastChannel$Subscriber, int, java.lang.Object):void (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0026|RETURN\lORIG_RETURN\l|0x0026: RETURN    (LINE:146)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.channels.ArrayBroadcastChannel.checkSubOffers((r5 'this' I:kotlinx.coroutines.channels.ArrayBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0019 \-\> B:21:0x0008, BACK_EDGE: B:25:0x001b \-\> B:21:0x0008, CROSS_EDGE: B:27:0x001f \-\> B:29:0x0026, CROSS_EDGE: B:26:0x001d \-\> B:28:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x001c: r3 'sub' Lkotlinx\/coroutines\/channels\/ArrayBroadcastChannel$Subscriber;\l  0x0001\-0x0026: r0 'updated' Z\l  0x0002\-0x0026: r1 'hasSubs' Z\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_30[style=dashed];
Node_24 -> Node_33;
Node_30 -> Node_25;
Node_25 -> Node_34;
Node_34 -> Node_32;
Node_32 -> Node_21;
Node_33 -> Node_32;
Node_31 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_35 -> Node_19;
Node_28 -> Node_29;
Node_29 -> Node_19;
}

