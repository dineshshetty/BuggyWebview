digraph "CFG forkotlinx.coroutines.channels.BroadcastCoroutine.onCompleted(Lkotlin\/Unit;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.channels.BroadcastChannel\<E\>) = (r3 I:kotlinx.coroutines.channels.BroadcastCoroutine) kotlinx.coroutines.channels.BroadcastCoroutine._channel kotlinx.coroutines.channels.BroadcastChannel  (LINE:164)\l0x0002: CHECK_CAST (r0 I:kotlinx.coroutines.channels.SendChannel) = (kotlinx.coroutines.channels.SendChannel) (r0 I:??[OBJECT, ARRAY]) \l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0006: INVOKE  (r0 I:kotlinx.coroutines.channels.SendChannel), (r1 I:java.lang.Throwable), (r2 I:int), (r1 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.channels.SendChannel.DefaultImpls.close$default(kotlinx.coroutines.channels.SendChannel, java.lang.Throwable, int, java.lang.Object):boolean A[MD:(kotlinx.coroutines.channels.SendChannel, java.lang.Throwable, int, java.lang.Object):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|0x0009: RETURN    (LINE:165)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.BroadcastCoroutine.onCompleted((r3 'this' I:kotlinx.coroutines.channels.BroadcastCoroutine\<E\> A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlin.Unit A[D('value' kotlin.Unit), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lDebug Info:\l  \-1 \-0x0009: r4 'value' Lkotlin\/Unit;\lREPLACED_BY: kotlinx.coroutines.channels.BroadcastCoroutine.onCompleted(kotlin.Unit):void\lBRIDGED_BY: kotlinx.coroutines.channels.BroadcastCoroutine.onCompleted(kotlin.Unit):void\lMETHOD_OVERRIDE: [kotlinx.coroutines.AbstractCoroutine.onCompleted(T):void]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

