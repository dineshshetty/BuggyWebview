digraph "CFG forkotlinx.coroutines.channels.BroadcastCoroutine.cancel(Ljava\/lang\/Throwable;)Z" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cause' java.lang.Throwable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0019  (LINE:149)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:200)\l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: NEW_INSTANCE  (r3 I:kotlinx.coroutines.JobCancellationException) =  kotlinx.coroutines.JobCancellationException  (LINE:201)\l0x0007: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x0008: CHECK_CAST (r4 I:kotlinx.coroutines.JobSupport) = (kotlinx.coroutines.JobSupport) (r4 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r4 I:java.lang.String) = (r4 I:kotlinx.coroutines.JobSupport) type: STATIC call: kotlinx.coroutines.JobSupport.access$cancellationExceptionMessage(kotlinx.coroutines.JobSupport):java.lang.String A[MD:(kotlinx.coroutines.JobSupport):java.lang.String (m)]\l0x000e: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x000f: CHECK_CAST (r5 I:kotlinx.coroutines.JobSupport) = (kotlinx.coroutines.JobSupport) (r5 I:??[OBJECT, ARRAY]) \l0x0011: CHECK_CAST (r5 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r5 I:??[OBJECT, ARRAY]) \l0x0013: INVOKE  \l  (r3 I:kotlinx.coroutines.JobCancellationException)\l  (r4 I:java.lang.String)\l  (r1 I:java.lang.Throwable A[D('cause$iv' java.lang.Throwable)])\l  (r5 I:kotlinx.coroutines.Job)\l type: DIRECT call: kotlinx.coroutines.JobCancellationException.\<init\>(java.lang.String, java.lang.Throwable, kotlinx.coroutines.Job):void A[MD:(java.lang.String, java.lang.Throwable, kotlinx.coroutines.Job):void (m)]\l0x0016: CHECK_CAST (r3 I:java.lang.Throwable) = (java.lang.Throwable) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: INVOKE  (r6 I:kotlinx.coroutines.channels.BroadcastCoroutine), (r3 I:java.lang.Throwable) type: VIRTUAL call: kotlinx.coroutines.channels.BroadcastCoroutine.cancelInternal(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (m)]\l0x001d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:150)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|RETURN\l|0x001e: RETURN  (r0 I:boolean) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|0x0019: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('cause' java.lang.Throwable)])  (LINE:149)\l}"];
MethodNode[shape=record,label="{public final \/* synthetic *\/ boolean kotlinx.coroutines.channels.BroadcastCoroutine.cancel((r6 'this' I:kotlinx.coroutines.channels.BroadcastCoroutine\<E\> A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>HIDDEN:Lkotlin\/DeprecationLevel;\}, message=Since 1.2.0, binary compatibility with versions \<= 1.1.x\}\}\}\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:11:0x0019 \-\> B:12:0x001a\lTYPE_VARS: [E]\lDebug Info:\l  0x0003\-0x0016: r0 'message$iv' Ljava\/lang\/String;\l  0x0004\-0x0016: r1 'cause$iv' Ljava\/lang\/Throwable;\l  0x0005\-0x0016: r2 '$i$f$defaultCancellationException$kotlinx_coroutines_core' I\l  \-1 \-0x001e: r7 'cause' Ljava\/lang\/Throwable;\lMETHOD_OVERRIDE: [kotlinx.coroutines.Job.cancel(java.lang.Throwable):boolean]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
}

