digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.onCancelIdempotent(Z)V" {
Node_58 [shape=record,label="{58\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_60 [shape=record,label="{60\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.channels.Closed) = (r4 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.getClosedForSend():kotlinx.coroutines.channels.Closed A[MD:():kotlinx.coroutines.channels.Closed\<?\> (m)] (LINE:674)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x003e \l}"];
Node_62 [shape=record,label="{62\:\ 0x0006|0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:675)\l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.lang.Object), (r1 I:int), (r2 I:kotlin.jvm.internal.DefaultConstructorMarker) type: STATIC call: kotlinx.coroutines.internal.InlineList.constructor\-impl$default(java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker):java.lang.Object A[MD:(java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker):java.lang.Object (m)]\l}"];
Node_63 [shape=record,label="{63\:\ 0x000c|LOOP_START\lLOOP:0: B:63:0x000c\-\>B:84:0x000c\l|0x000d: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r0 I:kotlinx.coroutines.channels.Closed A[D('closed' kotlinx.coroutines.channels.Closed)]) type: VIRTUAL call: kotlinx.coroutines.channels.Closed.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:677)\l0x0011: INSTANCE_OF  (r3 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('previous' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.internal.LockFreeLinkedListHead  (LINE:678)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0013|0x0013: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x001a \l}"];
Node_67 [shape=record,label="{67\:\ 0x001a|0x001a: INVOKE  (r3 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:681)\l}"];
Node_68 [shape=record,label="{68\:\ 0x001e|0x001e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x002c \l}"];
Node_69 [shape=record,label="{69\:\ 0x0020|0x0020: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1133)\l0x0021: INSTANCE_OF  (r3 I:boolean A[D('$i$a$\-assert\-AbstractChannel$onCancelIdempotent$1' int)]) = (r2 I:??[OBJECT, ARRAY] A[D('previous' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.channels.Send  (LINE:681)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0023|0x0023: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-AbstractChannel$onCancelIdempotent$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0026 \l}"];
Node_82 [shape=record,label="{82\:\ 0x0026|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0026|0x0026: NEW_INSTANCE  (r3 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0028: INVOKE  (r3 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_73 [shape=record,label="{73\:\ 0x002b|0x002b: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_59 [shape=record,label="{59\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_74 [shape=record,label="{74\:\ 0x002c|0x002c: INVOKE  (r3 I:boolean) = \l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('previous' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.remove():boolean A[MD:():boolean (m)] (LINE:682)\l}"];
Node_75 [shape=record,label="{75\:\ 0x0030|0x0030: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:80:0x0036 \l}"];
Node_80 [shape=record,label="{80\:\ 0x0036|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0036|0x0036: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('previous' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:687)\l0x0037: CHECK_CAST (r3 I:kotlinx.coroutines.channels.Send) = (kotlinx.coroutines.channels.Send) (r3 I:??[OBJECT, ARRAY]) \l0x0039: INVOKE  (r1 I:java.lang.Object A[D('list' java.lang.Object)]) = (r1 I:java.lang.Object A[D('list' java.lang.Object)]), (r3 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.internal.InlineList.plus\-FjFbRPM(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(java.lang.Object, E):java.lang.Object (m)]\l}"];
Node_85 [shape=record,label="{85\:\ 0x000c|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x000c|LOOP_END\lSYNTHETIC\lLOOP:0: B:63:0x000c\-\>B:84:0x000c\l}"];
Node_83 [shape=record,label="{83\:\ 0x0032|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0032|0x0032: INVOKE  \l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('previous' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.helpRemove():void A[MD:():void (m)] (LINE:683)\l}"];
Node_86 [shape=record,label="{86\:\ 0x000c|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0016|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0016|0x0016: INVOKE  \l  (r4 I:kotlinx.coroutines.channels.AbstractChannel)\l  (r1 I:java.lang.Object A[D('list' java.lang.Object)])\l  (r0 I:kotlinx.coroutines.channels.Closed A[D('closed' kotlinx.coroutines.channels.Closed)])\l type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.onCancelIdempotentList\-w\-w6eGU(java.lang.Object, kotlinx.coroutines.channels.Closed):void A[MD:(java.lang.Object, kotlinx.coroutines.channels.Closed\<?\>):void (m)] (LINE:689)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0019|RETURN\l|0x0019: RETURN    (LINE:690)\l}"];
Node_78 [shape=record,label="{78\:\ 0x003e|0x003e: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('closed' kotlinx.coroutines.channels.Closed)]) =  java.lang.IllegalStateException  (LINE:674)\l0x0040: CONST_STR  (r1 I:java.lang.String) =  \"Cannot happen\" \l0x0042: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0046: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_79 [shape=record,label="{79\:\ 0x0049|0x0049: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.AbstractChannel.onCancelIdempotent((r4 'this' I:kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[D('wasClosed' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:73:0x002b \-\> B:59:?, BACK_EDGE: B:76:0x0032 \-\> B:63:0x000c, BACK_EDGE: B:77:0x0036 \-\> B:63:0x000c, CROSS_EDGE: B:68:0x001e \-\> B:74:0x002c, CROSS_EDGE: B:79:0x0049 \-\> B:59:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0016: r2 'previous' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0021\-0x0023: r3 '$i$a$\-assert\-AbstractChannel$onCancelIdempotent$1' I\l  0x001a\-0x003d: r2 'previous' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0006\-0x003e: r0 'closed' Lkotlinx\/coroutines\/channels\/Closed;\l  0x000c\-0x003e: r1 'list' Ljava\/lang\/Object;\l  \-1 \-0x0049: r5 'wasClosed' Z\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractChannel.onCancelIdempotent(boolean):void]\l}"];
MethodNode -> Node_58;Node_58 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_78;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_67;
Node_64 -> Node_81[style=dashed];
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_74;
Node_69 -> Node_70;
Node_70 -> Node_74[style=dashed];
Node_70 -> Node_82;
Node_82 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_59;
Node_74 -> Node_75;
Node_75 -> Node_80;
Node_75 -> Node_83[style=dashed];
Node_80 -> Node_77;
Node_77 -> Node_85;
Node_85 -> Node_84;
Node_84 -> Node_63;
Node_83 -> Node_76;
Node_76 -> Node_86;
Node_86 -> Node_84;
Node_81 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_59;
Node_78 -> Node_79;
Node_79 -> Node_59;
}

