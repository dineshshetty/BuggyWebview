digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.enqueueReceiveInternal(Lkotlinx\/coroutines\/channels\/Receive;)Z" {
Node_60 [shape=record,label="{60\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_62 [shape=record,label="{62\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r9 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.isBufferAlwaysEmpty():boolean A[MD:():boolean (m)] (LINE:619)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x0028 \l}"];
Node_64 [shape=record,label="{64\:\ 0x0008|0x0008: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (r9 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.getQueue():kotlinx.coroutines.internal.LockFreeLinkedListHead A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListHead (m)] (LINE:620)\l0x000c: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x000e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_65 [shape=record,label="{65\:\ 0x000f|LOOP_START\lLOOP:0: B:65:0x000f\-\>B:69:0x0024\l|0x0010: INVOKE  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:1140)\l0x0014: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1141)\l0x0015: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: INSTANCE_OF  (r7 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.channels.Send  (LINE:620)\l0x0018: ARITH  (r5 I:??[int, boolean] A[D('it' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r7 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x001a|0x001a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x001d \l}"];
Node_68 [shape=record,label="{68\:\ 0x001d|0x001d: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('receive' kotlinx.coroutines.channels.Receive)])  (LINE:1142)\l0x001e: CHECK_CAST (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r5 I:??[OBJECT, ARRAY]) \l0x0020: INVOKE  (r5 I:boolean) = \l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):boolean A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):boolean (m)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x0024|LOOP_END\lLOOP:0: B:65:0x000f\-\>B:69:0x0024\l|0x0024: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x000f \l}"];
Node_81 [shape=record,label="{81\:\ 0x0026|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x0026|SYNTHETIC\lRETURN\l|0x0026: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0058: RETURN  (r1 I:boolean) A[SYNTHETIC] (LINE:621)\l}"];
Node_61 [shape=record,label="{61\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_82 [shape=record,label="{82\:\ 0x0058|SYNTHETIC\l}"];
Node_87 [shape=record,label="{87\:\ ?|SYNTHETIC\lRETURN\l|0x0058: RETURN  (r1 I:boolean) A[SYNTHETIC] (LINE:621)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0028|0x0028: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (r9 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.getQueue():kotlinx.coroutines.internal.LockFreeLinkedListHead A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListHead (m)] (LINE:621)\l0x002c: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x002e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1143)\l0x0030: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0031: NEW_INSTANCE  (r6 I:kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1) =  kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1  (LINE:1144)\l0x0033: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('receive' kotlinx.coroutines.channels.Receive)]) \l0x0034: CHECK_CAST (r7 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r7 I:??[OBJECT, ARRAY]) \l0x0036: INVOKE  \l  (r6 I:kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1)\l  (r7 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r9 I:kotlinx.coroutines.channels.AbstractChannel)\l type: DIRECT call: kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1.\<init\>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.channels.AbstractChannel):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.channels.AbstractChannel):void (m)]\l0x0039: CHECK_CAST (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) (r6 I:??[OBJECT, ARRAY]) \l0x003c: MOVE  (r4 I:??[OBJECT, ARRAY] A[D('this_$iv$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r6 I:??[OBJECT, ARRAY])  (LINE:1143)\l}"];
Node_72 [shape=record,label="{72\:\ 0x003d|LOOP_START\lLOOP:1: B:72:0x003d\-\>B:76:0x0052\l|0x003e: INVOKE  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:1148)\l0x0042: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1149)\l0x0043: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0044: INSTANCE_OF  (r8 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.channels.Send  (LINE:621)\l0x0046: ARITH  (r6 I:??[int, boolean] A[D('it' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r8 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x0048|0x0048: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x004b \l}"];
Node_75 [shape=record,label="{75\:\ 0x004b|0x004b: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('receive' kotlinx.coroutines.channels.Receive)])  (LINE:1150)\l0x004c: CHECK_CAST (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r6 I:??[OBJECT, ARRAY]) \l0x004e: INVOKE  (r6 I:int) = \l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r6 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int (m)]\l}"];
Node_76 [shape=record,label="{76\:\ 0x0052|LOOP_END\lLOOP:1: B:72:0x003d\-\>B:76:0x0052\l|0x0052: SWITCH  (r6 I:??)\l case 1: goto B:83:0x0057\l case 2: goto B:84:0x0058\l default: goto B:72:0x003d \l}"];
Node_83 [shape=record,label="{83\:\ 0x0057|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x0057|RETURN\lORIG_RETURN\l|0x0057: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1151)\l0x0058: RETURN  (r1 I:boolean)  (LINE:621)\l}"];
Node_84 [shape=record,label="{84\:\ 0x0058|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ ?|SYNTHETIC\lRETURN\l|0x0058: RETURN  (r1 I:boolean) A[SYNTHETIC] (LINE:621)\l}"];
Node_85 [shape=record,label="{85\:\ 0x0058|SYNTHETIC\l}"];
Node_89 [shape=record,label="{89\:\ ?|SYNTHETIC\lRETURN\l|0x0058: RETURN  (r1 I:boolean) A[SYNTHETIC] (LINE:621)\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.channels.AbstractChannel.enqueueReceiveInternal((r9 'this' I:kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r10 I:kotlinx.coroutines.channels.Receive\<? super E\> A[D('receive' kotlinx.coroutines.channels.Receive), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:69:0x0024 \-\> B:65:0x000f, CROSS_EDGE: B:66:0x001a \-\> B:80:0x0058, CROSS_EDGE: B:79:0x0057 \-\> B:80:0x0058, BACK_EDGE: B:76:0x0052 \-\> B:72:0x003d, CROSS_EDGE: B:76:0x0052 \-\> B:80:0x0058, CROSS_EDGE: B:73:0x0048 \-\> B:80:0x0058\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/Receive\<\-TE;\>;)Z\lDebug Info:\l  0x0015\-0x0018: r5 'it' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0016\-0x0018: r6 '$i$a$\-addLastIfPrev\-AbstractChannel$enqueueReceiveInternal$1' I\l  0x000e\-0x0028: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x000f\-0x0028: r3 '$i$f$addLastIfPrev' I\l  0x0014\-0x0028: r4 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0030\-0x003c: r4 'this_$iv$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0031\-0x003c: r5 '$i$f$makeCondAddOp' I\l  0x0043\-0x0046: r6 'it' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0044\-0x0046: r7 '$i$a$\-addLastIfPrevAndIf\-AbstractChannel$enqueueReceiveInternal$2' I\l  0x0042\-0x0055: r5 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x002e\-0x0058: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x002f\-0x0058: r3 '$i$f$addLastIfPrevAndIf' I\l  0x003d\-0x0058: r4 'condAdd$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;\l  0x0056\-0x0058: r5 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x0061: r10 'receive' Lkotlinx\/coroutines\/channels\/Receive;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractChannel.enqueueReceiveInternal(kotlinx.coroutines.channels.Receive\<? super E\>):boolean]\l}"];
MethodNode -> Node_60;Node_60 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_71;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_82[style=dashed];
Node_68 -> Node_69;
Node_69 -> Node_65;
Node_69 -> Node_81[style=dashed];
Node_81 -> Node_70;
Node_70 -> Node_61;
Node_82 -> Node_87;
Node_87 -> Node_61;
Node_71 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_75;
Node_73 -> Node_85[style=dashed];
Node_75 -> Node_76;
Node_76 -> Node_72;
Node_76 -> Node_83;
Node_76 -> Node_84;
Node_83 -> Node_79;
Node_79 -> Node_61;
Node_84 -> Node_88;
Node_88 -> Node_61;
Node_85 -> Node_89;
Node_89 -> Node_61;
}

