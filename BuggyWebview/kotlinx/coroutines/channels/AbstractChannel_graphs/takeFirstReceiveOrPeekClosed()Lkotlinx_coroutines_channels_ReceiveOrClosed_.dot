digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.takeFirstReceiveOrPeekClosed()Lkotlinx\/coroutines\/channels\/ReceiveOrClosed;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|kotlinx.coroutines.channels.ReceiveOrClosed r0 = super.takeFirstReceiveOrPeekClosed()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|if (r0 == null) goto L6\l}"];
Node_22 [shape=record,label="{22\:\ 0x0008}"];
Node_23 [shape=record,label="{23\:\ 0x000a|if ((r0 instanceof kotlinx.coroutines.channels.Closed) != false) goto L6\l}"];
Node_24 [shape=record,label="{24\:\ 0x000c|onReceiveDequeued()\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|RETURN\l|return r0\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveOrClosed\<E\> kotlinx.coroutines.channels.AbstractChannel.takeFirstReceiveOrPeekClosed((r4v0 'this' kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x000a \-\> B:26:0x0011, CROSS_EDGE: B:21:0x0006 \-\> B:26:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: ()Lkotlinx\/coroutines\/channels\/ReceiveOrClosed\<TE;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractSendChannel.takeFirstReceiveOrPeekClosed():kotlinx.coroutines.channels.ReceiveOrClosed\<E\>]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_26;
Node_26 -> Node_19;
}

