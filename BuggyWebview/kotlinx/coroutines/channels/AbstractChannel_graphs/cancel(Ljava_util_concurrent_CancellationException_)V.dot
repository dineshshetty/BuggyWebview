digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.cancel(Ljava\/util\/concurrent\/CancellationException;)V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000}"];
Node_23 [shape=record,label="{23\:\ 0x0004|if (isClosedForReceive() == false) goto L5\l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0007|if (r4 != null) goto L9\l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|java.util.concurrent.CancellationException r0 = new java.util.concurrent.CancellationException(kotlin.jvm.internal.Intrinsics.stringPlus(kotlinx.coroutines.DebugStrings.getClassSimpleName(r3), \" was cancelled\"))\l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|PHI: r0 \l  PHI: (r0v2 java.util.concurrent.CancellationException) = (r0v1 java.util.concurrent.CancellationException), (r0v4 java.util.concurrent.CancellationException) binds: [B:27:0x0019, B:26:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|cancel(r0)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|RETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ 0x0019|r0 = r4\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.channels.AbstractChannel.cancel((r3v0 'this' kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'cause' java.util.concurrent.CancellationException A[D('cause' java.util.concurrent.CancellationException), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x001f \-\> B:21:?, CROSS_EDGE: B:27:0x0019 \-\> B:28:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ReceiveChannel.cancel(java.util.concurrent.CancellationException):void]\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_21;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_21;
Node_27 -> Node_28;
}

