digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.takeFirstReceiveOrPeekClosed()Lkotlinx\/coroutines\/channels\/ReceiveOrClosed;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.channels.ReceiveOrClosed) = (r4 I:kotlinx.coroutines.channels.AbstractSendChannel) type: SUPER call: kotlinx.coroutines.channels.AbstractSendChannel.takeFirstReceiveOrPeekClosed():kotlinx.coroutines.channels.ReceiveOrClosed A[MD:():kotlinx.coroutines.channels.ReceiveOrClosed\<E\> (m)] (LINE:803)\l0x0004: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' kotlinx.coroutines.channels.ReceiveOrClosed)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0011  (LINE:804)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|0x0008: INSTANCE_OF  (r3 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.channels.ReceiveOrClosed)]) kotlinx.coroutines.channels.Closed \l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|0x000a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0011 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000c|0x000c: INVOKE  (r4 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.onReceiveDequeued():void A[MD:():void (m)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveOrClosed\<E\>)  (LINE:805)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.channels.ReceiveOrClosed\<E\> kotlinx.coroutines.channels.AbstractChannel.takeFirstReceiveOrPeekClosed((r4 'this' I:kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x000a \-\> B:26:0x0011, CROSS_EDGE: B:21:0x0006 \-\> B:26:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: ()Lkotlinx\/coroutines\/channels\/ReceiveOrClosed\<TE;\>;\lDebug Info:\l  0x0005\-0x0010: r1 'it' Lkotlinx\/coroutines\/channels\/ReceiveOrClosed;\l  0x0006\-0x0010: r2 '$i$a$\-also\-AbstractChannel$takeFirstReceiveOrPeekClosed$1' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractSendChannel.takeFirstReceiveOrPeekClosed():kotlinx.coroutines.channels.ReceiveOrClosed\<E\>]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_26;
Node_26 -> Node_19;
}

