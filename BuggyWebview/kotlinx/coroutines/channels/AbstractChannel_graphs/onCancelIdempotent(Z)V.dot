digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.onCancelIdempotent(Z)V" {
Node_58 [shape=record,label="{58\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_60 [shape=record,label="{60\:\ 0x0000|kotlinx.coroutines.channels.Closed r0 = getClosedForSend()\l}"];
Node_61 [shape=record,label="{61\:\ 0x0004|if (r0 == null) goto L26\l}"];
Node_62 [shape=record,label="{62\:\ 0x0006|java.lang.Object r1 = kotlinx.coroutines.internal.InlineList.m1670constructorimpl$default(null, 1, null)\l}"];
Node_63 [shape=record,label="{63\:\ 0x000c|LOOP_START\lLOOP:0: B:63:0x000c\-\>B:84:0x000c\lPHI: r1 \l  PHI: (r1v4 'list' java.lang.Object) = (r1v3 'list' java.lang.Object), (r1v5 'list' java.lang.Object) binds: [B:62:0x0006, B:84:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.internal.LockFreeLinkedListNode r2 = r0.getPrevNode()\l}"];
Node_64 [shape=record,label="{64\:\ 0x0013|if ((r2 instanceof kotlinx.coroutines.internal.LockFreeLinkedListHead) == false) goto L6\l}"];
Node_67 [shape=record,label="{67\:\ 0x001a}"];
Node_68 [shape=record,label="{68\:\ 0x001e|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L14\l}"];
Node_69 [shape=record,label="{69\:\ 0x0020}"];
Node_70 [shape=record,label="{70\:\ 0x0023|if ((r2 instanceof kotlinx.coroutines.channels.Send) == false) goto L10\l}"];
Node_82 [shape=record,label="{82\:\ 0x0026|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0026}"];
Node_73 [shape=record,label="{73\:\ 0x002b|throw new java.lang.AssertionError()\l}"];
Node_59 [shape=record,label="{59\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_74 [shape=record,label="{74\:\ 0x002c}"];
Node_75 [shape=record,label="{75\:\ 0x0030|if (r2.remove() != false) goto L16\l}"];
Node_80 [shape=record,label="{80\:\ 0x0036|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0036|java.lang.Object r1 = kotlinx.coroutines.internal.InlineList.m1675plusFjFbRPM(r1, (kotlinx.coroutines.channels.Send) r2)\l}"];
Node_85 [shape=record,label="{85\:\ 0x000c|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x000c|LOOP_END\lSYNTHETIC\lLOOP:0: B:63:0x000c\-\>B:84:0x000c\lPHI: r1 \l  PHI: (r1v5 'list' java.lang.Object) = (r1v4 'list' java.lang.Object), (r1v6 'list' java.lang.Object) binds: [B:86:0x000c, B:85:0x000c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_83 [shape=record,label="{83\:\ 0x0032|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0032|r2.helpRemove()\l}"];
Node_86 [shape=record,label="{86\:\ 0x000c|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0016|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0016|mo1630onCancelIdempotentListww6eGU(r1, r0)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0019|RETURN\l|return\l}"];
Node_78 [shape=record,label="{78\:\ 0x003e}"];
Node_79 [shape=record,label="{79\:\ 0x0049|throw new java.lang.IllegalStateException(\"Cannot happen\".toString())\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.AbstractChannel.onCancelIdempotent((r4v0 'this' kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r5v0 'wasClosed' boolean A[D('wasClosed' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:73:0x002b \-\> B:59:?, BACK_EDGE: B:76:0x0032 \-\> B:63:0x000c, BACK_EDGE: B:77:0x0036 \-\> B:63:0x000c, CROSS_EDGE: B:68:0x001e \-\> B:74:0x002c, CROSS_EDGE: B:79:0x0049 \-\> B:59:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractChannel.onCancelIdempotent(boolean):void]\l}"];
MethodNode -> Node_58;Node_58 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_78;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_67;
Node_64 -> Node_81[style=dashed];
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_74;
Node_69 -> Node_70;
Node_70 -> Node_74[style=dashed];
Node_70 -> Node_82;
Node_82 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_59;
Node_74 -> Node_75;
Node_75 -> Node_80;
Node_75 -> Node_83[style=dashed];
Node_80 -> Node_77;
Node_77 -> Node_85;
Node_85 -> Node_84;
Node_84 -> Node_63;
Node_83 -> Node_76;
Node_76 -> Node_86;
Node_86 -> Node_84;
Node_81 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_59;
Node_78 -> Node_79;
Node_79 -> Node_59;
}

