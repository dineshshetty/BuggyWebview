digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.getHasReceiveOrClosed()Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (r1 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.getQueue():kotlinx.coroutines.internal.LockFreeLinkedListHead A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListHead (m)] (LINE:574)\l0x0004: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListHead.getNextNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)]\l0x0008: INSTANCE_OF  (r0 I:boolean) = (r0 I:??[OBJECT, ARRAY]) kotlinx.coroutines.channels.ReceiveOrClosed \l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.channels.AbstractChannel.getHasReceiveOrClosed((r1 'this' I:kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

