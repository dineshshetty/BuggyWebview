digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.pollInternal()Ljava\/lang\/Object;" {
Node_46 [shape=record,label="{46\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x0000|LOOP_START\lLOOP:0: B:48:0x0000\-\>B:66:0x0030\l|0x0001: INVOKE  (r0 I:kotlinx.coroutines.channels.Send) = (r4 I:kotlinx.coroutines.channels.AbstractChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.takeFirstSendOrPeekClosed():kotlinx.coroutines.channels.Send A[MD:():kotlinx.coroutines.channels.Send (m)] (LINE:542)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x000a \l}"];
Node_52 [shape=record,label="{52\:\ 0x000a|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:543)\l0x000b: INVOKE  (r1 I:kotlinx.coroutines.internal.Symbol) = \l  (r0 I:kotlinx.coroutines.channels.Send A[D('send' kotlinx.coroutines.channels.Send)])\l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)\l type: VIRTUAL call: kotlinx.coroutines.channels.Send.tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):kotlinx.coroutines.internal.Symbol A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):kotlinx.coroutines.internal.Symbol (m)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('token' kotlinx.coroutines.internal.Symbol)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0030  (LINE:544)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0030|LOOP_END\lLOOP:0: B:48:0x0000\-\>B:66:0x0030\l|0x0030: INVOKE  (r0 I:kotlinx.coroutines.channels.Send A[D('send' kotlinx.coroutines.channels.Send)]) type: VIRTUAL call: kotlinx.coroutines.channels.Send.undeliveredElement():void A[MD:():void (m)] (LINE:550)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0011|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0011|0x0011: INVOKE  (r2 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:545)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0015|0x0015: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x0028 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0017|0x0017: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1133)\l0x0018: SGET  (r3 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN kotlinx.coroutines.internal.Symbol  (LINE:545)\l}"];
Node_57 [shape=record,label="{57\:\ 0x001a|0x001a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('token' kotlinx.coroutines.internal.Symbol)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x001e \l}"];
Node_58 [shape=record,label="{58\:\ 0x001c|0x001c: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x001f|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0022 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0022|0x0022: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0024: INVOKE  (r2 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_63 [shape=record,label="{63\:\ 0x0027|0x0027: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_47 [shape=record,label="{47\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ 0x001e|0x001e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_64 [shape=record,label="{64\:\ 0x0028|0x0028: INVOKE  (r0 I:kotlinx.coroutines.channels.Send A[D('send' kotlinx.coroutines.channels.Send)]) type: VIRTUAL call: kotlinx.coroutines.channels.Send.completeResumeSend():void A[MD:():void (m)] (LINE:546)\l0x002b: INVOKE  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.channels.Send A[D('send' kotlinx.coroutines.channels.Send)]) type: VIRTUAL call: kotlinx.coroutines.channels.Send.getPollResult():java.lang.Object A[MD:():java.lang.Object (m)] (LINE:547)\l}"];
Node_65 [shape=record,label="{65\:\ 0x002f|RETURN\l|0x002f: RETURN  (r2 I:java.lang.Object) \l}"];
Node_67 [shape=record,label="{67\:\ 0x0007|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0007|0x0007: SGET  (r0 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.POLL_FAILED kotlinx.coroutines.internal.Symbol \l}"];
Node_51 [shape=record,label="{51\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{protected java.lang.Object kotlinx.coroutines.channels.AbstractChannel.pollInternal((r4 'this' I:kotlinx.coroutines.channels.AbstractChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:63:0x0027 \-\> B:47:?, CROSS_EDGE: B:65:0x002f \-\> B:47:?, CROSS_EDGE: B:59:0x001e \-\> B:60:0x001f, CROSS_EDGE: B:55:0x0015 \-\> B:64:0x0028, BACK_EDGE: B:66:0x0030 \-\> B:48:0x0000\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x001f: r2 '$i$a$\-assert\-AbstractChannel$pollInternal$1' I\l  0x000a\-0x0033: r0 'send' Lkotlinx\/coroutines\/channels\/Send;\l  0x000f\-0x0033: r1 'token' Lkotlinx\/coroutines\/internal\/Symbol;\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractChannel.pollInternal():java.lang.Object]\l}"];
MethodNode -> Node_46;Node_46 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_52;
Node_49 -> Node_67[style=dashed];
Node_52 -> Node_53;
Node_53 -> Node_66;
Node_53 -> Node_68[style=dashed];
Node_66 -> Node_48;
Node_68 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_64;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_60;
Node_60 -> Node_62;
Node_60 -> Node_64[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_47;
Node_59 -> Node_60;
Node_64 -> Node_65;
Node_65 -> Node_47;
Node_67 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_47;
}

