digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel.close(Ljava\/lang\/Throwable;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.channels.Closed) =  kotlinx.coroutines.channels.Closed  (LINE:262)\l0x0002: INVOKE  (r0 I:kotlinx.coroutines.channels.Closed), (r8 I:java.lang.Throwable A[D('cause' java.lang.Throwable)]) type: DIRECT call: kotlinx.coroutines.channels.Closed.\<init\>(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (m)]\l0x0005: IGET  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (r7 I:kotlinx.coroutines.channels.AbstractSendChannel) kotlinx.coroutines.channels.AbstractSendChannel.queue kotlinx.coroutines.internal.LockFreeLinkedListHead  (LINE:269)\l0x0007: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r1 I:??[OBJECT, ARRAY]) \l0x0009: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|LOOP_START\lLOOP:0: B:21:0x000a\-\>B:25:0x0021\l|0x000b: INVOKE  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:1170)\l0x000f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1171)\l0x0010: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: INSTANCE_OF  (r6 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('it' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.channels.Closed  (LINE:269)\l0x0013: CONST  (r4 I:??[boolean, int, float, short, byte, char] A[D('it' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0014: ARITH  (r5 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001a \l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|0x001a: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('closed' kotlinx.coroutines.channels.Closed)])  (LINE:1172)\l0x001b: CHECK_CAST (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r5 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  (r5 I:boolean) = \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):boolean A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):boolean (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|LOOP_END\lLOOP:0: B:21:0x000a\-\>B:25:0x0021\l|0x0021: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000a \l}"];
Node_34 [shape=record,label="{34\:\ 0x0023|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0023|0x0023: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:269)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0024|0x0024: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('closeAdded' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0028  (LINE:270)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0026|0x0026: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('closed' kotlinx.coroutines.channels.Closed)]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0030|0x0030: INVOKE  \l  (r7 I:kotlinx.coroutines.channels.AbstractSendChannel)\l  (r2 I:kotlinx.coroutines.channels.Closed A[D('actuallyClosed' kotlinx.coroutines.channels.Closed)])\l type: DIRECT call: kotlinx.coroutines.channels.AbstractSendChannel.helpClose(kotlinx.coroutines.channels.Closed):void A[MD:(kotlinx.coroutines.channels.Closed\<?\>):void (m)] (LINE:271)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0033|0x0033: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('closeAdded' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0038  (LINE:272)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0035|0x0035: INVOKE  (r7 I:kotlinx.coroutines.channels.AbstractSendChannel), (r8 I:java.lang.Throwable A[D('cause' java.lang.Throwable)]) type: DIRECT call: kotlinx.coroutines.channels.AbstractSendChannel.invokeOnCloseHandler(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:boolean A[D('closeAdded' boolean)])  (LINE:273)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0028|0x0028: IGET  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (r7 I:kotlinx.coroutines.channels.AbstractSendChannel) kotlinx.coroutines.channels.AbstractSendChannel.queue kotlinx.coroutines.internal.LockFreeLinkedListHead \l0x002a: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListHead.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)]\l0x002e: CHECK_CAST (r2 I:kotlinx.coroutines.channels.Closed) = (kotlinx.coroutines.channels.Closed) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0018|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|0x0018: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.channels.AbstractSendChannel.close((r7 'this' I:kotlinx.coroutines.channels.AbstractSendChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0033 \-\> B:33:0x0038, CROSS_EDGE: B:29:0x0028 \-\> B:30:0x0030, BACK_EDGE: B:25:0x0021 \-\> B:21:0x000a, CROSS_EDGE: B:25:0x0021 \-\> B:26:0x0023\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0013: r4 'it' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0011\-0x0013: r5 '$i$a$\-addLastIfPrev\-AbstractSendChannel$close$closeAdded$1' I\l  0x0009\-0x0023: r1 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x000a\-0x0023: r2 '$i$f$addLastIfPrev' I\l  0x000f\-0x0023: r3 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0005\-0x0038: r0 'closed' Lkotlinx\/coroutines\/channels\/Closed;\l  0x0024\-0x0038: r1 'closeAdded' Z\l  0x0030\-0x0038: r2 'actuallyClosed' Lkotlinx\/coroutines\/channels\/Closed;\l  \-1 \-0x0038: r8 'cause' Ljava\/lang\/Throwable;\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.SendChannel.close(java.lang.Throwable):boolean]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_35[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_21;
Node_25 -> Node_34[style=dashed];
Node_34 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_29 -> Node_30;
Node_35 -> Node_23;
Node_23 -> Node_26;
}

