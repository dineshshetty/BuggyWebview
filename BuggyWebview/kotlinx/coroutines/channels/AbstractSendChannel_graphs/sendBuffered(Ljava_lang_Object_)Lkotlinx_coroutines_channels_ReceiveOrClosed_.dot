digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel.sendBuffered(Ljava\/lang\/Object;)Lkotlinx\/coroutines\/channels\/ReceiveOrClosed;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlinx.coroutines.internal.LockFreeLinkedListNode r0 = r7.queue\lkotlinx.coroutines.internal.LockFreeLinkedListNode r1 = new kotlinx.coroutines.channels.AbstractSendChannel.SendBuffered(r8)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|LOOP_START\lLOOP:0: B:16:0x000c\-\>B:21:0x0020\l|kotlinx.coroutines.internal.LockFreeLinkedListNode r3 = r0.getPrevNode()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|if ((r3 instanceof kotlinx.coroutines.channels.ReceiveOrClosed) == false) goto L4\l}"];
Node_20 [shape=record,label="{20\:\ 0x001b}"];
Node_21 [shape=record,label="{21\:\ 0x0020|LOOP_END\lLOOP:0: B:16:0x000c\-\>B:21:0x0020\l|if (r3.addNext(r1, r0) == false) goto L2\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0022|RETURN\l|return null\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0017}"];
Node_19 [shape=record,label="{19\:\ 0x001a|RETURN\l|return (kotlinx.coroutines.channels.ReceiveOrClosed) r3\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.channels.ReceiveOrClosed\<?\> kotlinx.coroutines.channels.AbstractSendChannel.sendBuffered((r7v0 'this' kotlinx.coroutines.channels.AbstractSendChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r8v0 E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0020 \-\> B:16:0x000c, CROSS_EDGE: B:23:0x0023 \-\> B:14:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;)Lkotlinx\/coroutines\/channels\/ReceiveOrClosed\<*\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_20;
Node_17 -> Node_25[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_16;
Node_21 -> Node_24[style=dashed];
Node_24 -> Node_22;
Node_22 -> Node_14;
Node_25 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_14;
}

