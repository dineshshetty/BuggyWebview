digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel.countQueueSize()I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|r0 = 0\lkotlinx.coroutines.internal.LockFreeLinkedListHead r1 = r6.queue\lkotlinx.coroutines.internal.LockFreeLinkedListNode r3 = (kotlinx.coroutines.internal.LockFreeLinkedListNode) r1.getNext()\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|LOOP_START\lLOOP:0: B:17:0x000a\-\>B:22:0x0018\lPHI: r0 r3 \l  PHI: (r0v1 'size' int) = (r0v0 'size' int), (r0v2 'size' int) binds: [B:16:0x0000, B:22:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r3v1 'cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode), (r3v3 'cur$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode) binds: [B:16:0x0000, B:22:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|if (kotlin.jvm.internal.Intrinsics.areEqual(r3, r1) != false) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010}"];
Node_20 [shape=record,label="{20\:\ 0x0012|if ((r3 instanceof kotlinx.coroutines.internal.LockFreeLinkedListNode) == false) goto L9\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|int r0 = r0 + 1\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|LOOP_END\lLOOP:0: B:17:0x000a\-\>B:22:0x0018\lPHI: r0 \l  PHI: (r0v2 'size' int) = (r0v1 'size' int), (r0v3 'size' int) binds: [B:27:0x0018, B:26:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.internal.LockFreeLinkedListNode r3 = r3.getNextNode()\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|RETURN\l|return r0\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final int kotlinx.coroutines.channels.AbstractSendChannel.countQueueSize((r6v0 'this' kotlinx.coroutines.channels.AbstractSendChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x0018 \-\> B:17:0x000a, CROSS_EDGE: B:20:0x0012 \-\> B:22:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_26;
Node_26 -> Node_22;
Node_22 -> Node_17;
Node_27 -> Node_22;
Node_25 -> Node_24;
Node_24 -> Node_15;
}

