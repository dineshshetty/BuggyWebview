digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel.enqueueSend(Lkotlinx\/coroutines\/channels\/Send;)Ljava\/lang\/Object;" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r7 I:kotlinx.coroutines.channels.AbstractSendChannel) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractSendChannel.isBufferAlwaysFull():boolean A[MD:():boolean (m)] (LINE:246)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0022 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0006|0x0006: IGET  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (r7 I:kotlinx.coroutines.channels.AbstractSendChannel) kotlinx.coroutines.channels.AbstractSendChannel.queue kotlinx.coroutines.internal.LockFreeLinkedListHead  (LINE:247)\l0x0008: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x000b|LOOP_START\lLOOP:0: B:36:0x000b\-\>B:40:0x001f\l|0x000c: INVOKE  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:1156)\l0x0010: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1157)\l0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: INSTANCE_OF  (r5 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.channels.ReceiveOrClosed  (LINE:248)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0014|0x0014: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0017 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0017|0x0018: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r8 I:??[OBJECT, ARRAY] A[D('send' kotlinx.coroutines.channels.Send)])  (LINE:1158)\l0x0019: CHECK_CAST (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r3 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r3 I:boolean) = \l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):boolean A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode):boolean (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x001f|LOOP_END\lLOOP:0: B:36:0x000b\-\>B:40:0x001f\l|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x000b \l}"];
Node_57 [shape=record,label="{57\:\ 0x0055|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ ?|SYNTHETIC\lRETURN\l|0x0055: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:258)\l0x0056: RETURN  (r0 I:java.lang.Object) A[SYNTHETIC]\l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0016|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0016|RETURN\l|0x0016: RETURN  (r3 I:java.lang.Object A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0022|0x0022: IGET  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r7 I:kotlinx.coroutines.channels.AbstractSendChannel) kotlinx.coroutines.channels.AbstractSendChannel.queue kotlinx.coroutines.internal.LockFreeLinkedListHead  (LINE:252)\l0x0024: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x0026: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1159)\l0x0028: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0029: NEW_INSTANCE  (r4 I:kotlinx.coroutines.channels.AbstractSendChannel$enqueueSend$$inlined$addLastIfPrevAndIf$1) =  kotlinx.coroutines.channels.AbstractSendChannel$enqueueSend$$inlined$addLastIfPrevAndIf$1  (LINE:1160)\l0x002b: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('send' kotlinx.coroutines.channels.Send)]) \l0x002c: CHECK_CAST (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r5 I:??[OBJECT, ARRAY]) \l0x002e: INVOKE  \l  (r4 I:kotlinx.coroutines.channels.AbstractSendChannel$enqueueSend$$inlined$addLastIfPrevAndIf$1)\l  (r5 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r7 I:kotlinx.coroutines.channels.AbstractSendChannel)\l type: DIRECT call: kotlinx.coroutines.channels.AbstractSendChannel$enqueueSend$$inlined$addLastIfPrevAndIf$1.\<init\>(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.channels.AbstractSendChannel):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.channels.AbstractSendChannel):void (m)]\l0x0031: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) = (kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp) (r4 I:??[OBJECT, ARRAY]) \l0x0034: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('this_$iv$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r4 I:??[OBJECT, ARRAY])  (LINE:1159)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0035|LOOP_START\lLOOP:1: B:43:0x0035\-\>B:47:0x0049\l|0x0036: INVOKE  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = \l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.getPrevNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)] (LINE:1164)\l0x003a: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])  (LINE:1165)\l0x003b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003c: INSTANCE_OF  (r6 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) kotlinx.coroutines.channels.ReceiveOrClosed  (LINE:253)\l}"];
Node_44 [shape=record,label="{44\:\ 0x003e|0x003e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0041 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0041|0x0042: MOVE  (r4 I:??[OBJECT, ARRAY] A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) = (r8 I:??[OBJECT, ARRAY] A[D('send' kotlinx.coroutines.channels.Send)])  (LINE:1166)\l0x0043: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r4 I:??[OBJECT, ARRAY]) \l0x0045: INVOKE  (r4 I:int) = \l  (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('prev$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('this_$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode)])\l  (r2 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp A[D('condAdd$iv' kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode, kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp):int (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0049|LOOP_END\lLOOP:1: B:43:0x0035\-\>B:47:0x0049\l|0x0049: SWITCH  (r4 I:??)\l case 1: goto B:59:0x004f\l case 2: goto B:58:0x004d\l default: goto B:43:0x0035 \l}"];
Node_58 [shape=record,label="{58\:\ 0x004d|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x004d|0x004d: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0050|0x0050: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0055  (LINE:252)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0052|0x0052: SGET  (r0 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.AbstractChannelKt.ENQUEUE_FAILED kotlinx.coroutines.internal.Symbol  (LINE:256)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0054|RETURN\l|0x0054: RETURN  (r0 I:java.lang.Object) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0055|RETURN\lORIG_RETURN\l|0x0055: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:258)\l0x0056: RETURN  (r0 I:java.lang.Object) \l}"];
Node_59 [shape=record,label="{59\:\ 0x004f|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x004f|0x004f: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1167)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0040|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0040|RETURN\l|0x0040: RETURN  (r4 I:java.lang.Object A[D('prev' kotlinx.coroutines.internal.LockFreeLinkedListNode)]) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.channels.AbstractSendChannel.enqueueSend((r7 'this' I:kotlinx.coroutines.channels.AbstractSendChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r8 I:kotlinx.coroutines.channels.Send A[D('send' kotlinx.coroutines.channels.Send), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lBACK_EDGE: B:40:0x001f \-\> B:36:0x000b, CROSS_EDGE: B:55:0x0056 \-\> B:32:?, CROSS_EDGE: B:45:0x0040 \-\> B:32:?, CROSS_EDGE: B:53:0x0054 \-\> B:32:?, CROSS_EDGE: B:51:0x0050 \-\> B:54:0x0055, CROSS_EDGE: B:50:0x004f \-\> B:51:0x0050, BACK_EDGE: B:47:0x0049 \-\> B:43:0x0035\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0018: r3 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0012\-0x0018: r4 '$i$a$\-addLastIfPrev\-AbstractSendChannel$enqueueSend$1' I\l  0x000a\-0x0022: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x000b\-0x0022: r1 '$i$f$addLastIfPrev' I\l  0x0010\-0x0022: r2 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0028\-0x0034: r2 'this_$iv$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0029\-0x0034: r3 '$i$f$makeCondAddOp' I\l  0x003b\-0x0042: r4 'prev' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x003c\-0x0042: r5 '$i$a$\-addLastIfPrevAndIf\-AbstractSendChannel$enqueueSend$2' I\l  0x003a\-0x004c: r3 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0026\-0x0050: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  0x0027\-0x0050: r1 '$i$f$addLastIfPrevAndIf' I\l  0x0035\-0x0050: r2 'condAdd$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$CondAddOp;\l  0x004d\-0x0050: r3 'prev$iv' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;\l  \-1 \-0x005f: r8 'send' Lkotlinx\/coroutines\/channels\/Send;\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractSendChannel.enqueueSend(kotlinx.coroutines.channels.Send):java.lang.Object]\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_42;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_56[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_36;
Node_40 -> Node_57[style=dashed];
Node_57 -> Node_61;
Node_61 -> Node_32;
Node_56 -> Node_38;
Node_38 -> Node_32;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_46;
Node_44 -> Node_60[style=dashed];
Node_46 -> Node_47;
Node_47 -> Node_43;
Node_47 -> Node_58;
Node_47 -> Node_59;
Node_58 -> Node_49;
Node_49 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_54;
Node_52 -> Node_53;
Node_53 -> Node_32;
Node_54 -> Node_32;
Node_59 -> Node_50;
Node_50 -> Node_51;
Node_60 -> Node_45;
Node_45 -> Node_32;
}

