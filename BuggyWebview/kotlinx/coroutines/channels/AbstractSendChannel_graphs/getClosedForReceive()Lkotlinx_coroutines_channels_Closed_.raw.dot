digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel.getClosedForReceive()Lkotlinx\/coroutines\/channels\/Closed;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) = (r3 I:kotlinx.coroutines.channels.AbstractSendChannel) kotlinx.coroutines.channels.AbstractSendChannel.queue kotlinx.coroutines.internal.LockFreeLinkedListHead  (LINE:89)\l0x0002: INVOKE  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListHead) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListHead.getNextNode():kotlinx.coroutines.internal.LockFreeLinkedListNode A[MD:():kotlinx.coroutines.internal.LockFreeLinkedListNode (m)]\l0x0006: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) kotlinx.coroutines.channels.Closed \l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x000e \l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: CHECK_CAST (r0 I:kotlinx.coroutines.channels.Closed) = (kotlinx.coroutines.channels.Closed) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0012 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0013: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1133)\l0x0014: INVOKE  \l  (r3 I:kotlinx.coroutines.channels.AbstractSendChannel)\l  (r1 I:kotlinx.coroutines.channels.Closed A[D('it' kotlinx.coroutines.channels.Closed)])\l type: DIRECT call: kotlinx.coroutines.channels.AbstractSendChannel.helpClose(kotlinx.coroutines.channels.Closed):void A[MD:(kotlinx.coroutines.channels.Closed\<?\>):void (m)] (LINE:89)\l0x0017: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('$i$a$\-also\-AbstractSendChannel$closedForReceive$1' int)]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|RETURN\lORIG_RETURN\l|0x0018: RETURN  (r2 I:kotlinx.coroutines.channels.Closed\<?\> A[D('$i$a$\-also\-AbstractSendChannel$closedForReceive$1' int)]) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0018: RETURN  (r2 I:kotlinx.coroutines.channels.Closed\<?\> A[D('$i$a$\-also\-AbstractSendChannel$closedForReceive$1' int)]) A[SYNTHETIC]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|0x000e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.channels.Closed\<?\> kotlinx.coroutines.channels.AbstractSendChannel.getClosedForReceive((r3 'this' I:kotlinx.coroutines.channels.AbstractSendChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000f \-\> B:20:0x0018, CROSS_EDGE: B:16:0x000e \-\> B:17:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0018: r1 'it' Lkotlinx\/coroutines\/channels\/Closed;\l  0x0014\-0x0018: r2 '$i$a$\-also\-AbstractSendChannel$closedForReceive$1' I\lTYPE_VARS: [E]\lSIGNATURE: ()Lkotlinx\/coroutines\/channels\/Closed\<*\>;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

