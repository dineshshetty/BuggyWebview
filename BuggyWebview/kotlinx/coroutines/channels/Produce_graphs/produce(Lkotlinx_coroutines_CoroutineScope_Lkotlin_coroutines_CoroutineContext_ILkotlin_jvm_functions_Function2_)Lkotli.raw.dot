digraph "CFG forkotlinx.coroutines.channels.ProduceKt.produce(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;ILkotlin\/jvm\/functions\/Function2;)Lkotlinx\/coroutines\/channels\/ReceiveChannel;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r3 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow  (LINE:95)\l0x0002: SGET  (r4 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart.DEFAULT kotlinx.coroutines.CoroutineStart \l0x0004: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$produce' kotlinx.coroutines.CoroutineScope)]) \l0x0006: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('context' kotlin.coroutines.CoroutineContext)]) \l0x0007: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) \l0x0008: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('block' kotlin.jvm.functions.Function2)]) \l0x0009: INVOKE  (r0 I:kotlinx.coroutines.channels.ReceiveChannel) = \l  (r0 I:kotlinx.coroutines.CoroutineScope)\l  (r1 I:kotlin.coroutines.CoroutineContext)\l  (r2 I:int)\l  (r3 I:kotlinx.coroutines.channels.BufferOverflow)\l  (r4 I:kotlinx.coroutines.CoroutineStart)\l  (r5 I:kotlin.jvm.functions.Function1)\l  (r6 I:kotlin.jvm.functions.Function2)\l type: STATIC call: kotlinx.coroutines.channels.ProduceKt.produce(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2):kotlinx.coroutines.channels.ReceiveChannel A[MD:\<E\>:(kotlinx.coroutines.CoroutineScope, kotlin.coroutines.CoroutineContext, int, kotlinx.coroutines.channels.BufferOverflow, kotlinx.coroutines.CoroutineStart, kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>, kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.channels.ProducerScope\<? super E\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlinx.coroutines.channels.ReceiveChannel\<E\> (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<E\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.channels.ReceiveChannel\<E\> kotlinx.coroutines.channels.ProduceKt.produce((r7 I:kotlinx.coroutines.CoroutineScope A[D('$this$produce' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.channels.ProducerScope\<? super E\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[D('block' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r7 '$this$produce' Lkotlinx\/coroutines\/CoroutineScope;\l  \-1 \-0x000d: r8 'context' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x000d: r9 'capacity' I\l  \-1 \-0x000d: r10 'block' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [E]\lSIGNATURE: \<E:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;ILkotlin\/jvm\/functions\/Function2\<\-Lkotlinx\/coroutines\/channels\/ProducerScope\<\-TE;\>;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/channels\/ReceiveChannel\<TE;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

