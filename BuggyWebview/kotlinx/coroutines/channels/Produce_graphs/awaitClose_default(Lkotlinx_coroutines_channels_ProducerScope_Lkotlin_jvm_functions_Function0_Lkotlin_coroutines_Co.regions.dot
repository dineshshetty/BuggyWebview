digraph "CFG forkotlinx.coroutines.channels.ProduceKt.awaitClose$default(Lkotlinx\/coroutines\/channels\/ProducerScope;Lkotlin\/jvm\/functions\/Function0;Lkotlin\/coroutines\/Continuation;ILjava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1039184999 {
label = "R(2:(1:3)|5)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1390922974 {
label = "IF [B:17:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0002|if ((r3 & 1) != 0) goto L3\l}"];
subgraph cluster_Region_893777768 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0004|kotlin.jvm.functions.Function0 r1 = kotlinx.coroutines.channels.ProduceKt$awaitClose$2.INSTANCE\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x000c|RETURN\l|return awaitClose(r0, r1, r2)\l}"];
}
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0000}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0008|PHI: r1 \l  PHI: (r1v1 kotlin.jvm.functions.Function0) = (r1v0 kotlin.jvm.functions.Function0), (r1v3 kotlinx.coroutines.channels.ProduceKt$awaitClose$2) binds: [B:17:0x0002, B:18:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ java.lang.Object kotlinx.coroutines.channels.ProduceKt.awaitClose$default((r0v0 kotlinx.coroutines.channels.ProducerScope A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 kotlin.jvm.functions.Function0 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.coroutines.Continuation A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0002 \-\> B:19:0x0008\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_14;Node_17 -> Node_18;
Node_17 -> Node_19[style=dashed];
Node_18 -> Node_19;
Node_20 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17;
Node_19 -> Node_20;
}

