digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel.TryOfferDesc.\<init\>(Ljava\/lang\/Object;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListHead;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('queue' kotlinx.coroutines.internal.LockFreeLinkedListHead)])  (LINE:373)\l0x0001: CHECK_CAST (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode) = (kotlinx.coroutines.internal.LockFreeLinkedListNode) (r0 I:??[OBJECT, ARRAY]) \l0x0003: INVOKE  \l  (r1 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$RemoveFirstDesc)\l  (r0 I:kotlinx.coroutines.internal.LockFreeLinkedListNode)\l type: DIRECT call: kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.\<init\>(kotlinx.coroutines.internal.LockFreeLinkedListNode):void A[MD:(kotlinx.coroutines.internal.LockFreeLinkedListNode):void (m)]\l0x0006: IPUT  (r2 I:E A[D('element' java.lang.Object)]), (r1 I:kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc) kotlinx.coroutines.channels.AbstractSendChannel.TryOfferDesc.element java.lang.Object  (LINE:371)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:370)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.AbstractSendChannel.TryOfferDesc.\<init\>((r1 'this' I:kotlinx.coroutines.channels.AbstractSendChannel$TryOfferDesc\<E\> A[IMMUTABLE_TYPE, THIS]), (r2 I:E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlinx.coroutines.internal.LockFreeLinkedListHead A[D('queue' kotlinx.coroutines.internal.LockFreeLinkedListHead), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0008: r2 'element' Ljava\/lang\/Object;\l  \-1 \-0x0008: r3 'queue' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListHead;\lTYPE_VARS: [E]\lSIGNATURE: (TE;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListHead;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

