digraph "CFG forkotlinx.coroutines.channels.AbstractSendChannel$enqueueSend$$inlined$addLastIfPrevAndIf$1.\<init\>(Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode;Lkotlinx\/coroutines\/channels\/AbstractSendChannel;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0.$node = r1\lr0.this$0 = r2\lsuper(r1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.AbstractSendChannel$enqueueSend$$inlined$addLastIfPrevAndIf$1.\<init\>((r0v0 'this' kotlinx.coroutines.channels.AbstractSendChannel$enqueueSend$$inlined$addLastIfPrevAndIf$1 A[IMMUTABLE_TYPE, THIS]), (r1v0 '$node' kotlinx.coroutines.internal.LockFreeLinkedListNode A[D('$node' kotlinx.coroutines.internal.LockFreeLinkedListNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlinx.coroutines.channels.AbstractSendChannel A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | NO_SKIP_ARGS\lANONYMOUS_CONSTRUCTOR\lUSE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

