digraph "CFG forkotlinx.coroutines.channels.ActorKt.actor(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/CoroutineStart;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function2;)Lkotlinx\/coroutines\/channels\/SendChannel;" {
subgraph cluster_Region_970351150 {
label = "R(5:1|(1:3)(1:9)|(1:5)|6|7) | DECL_VAR: kotlinx.coroutines.channels.LazyActorCoroutine coroutine\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.coroutines.CoroutineContext kotlin.coroutines.CoroutineContext r0 = kotlinx.coroutines.CoroutineContext.newCoroutineContext(r4, r5)\lkotlinx.coroutines.channels.Channel kotlinx.coroutines.channels.Channel r1 = kotlinx.coroutines.channels.ChannelKt.Channel$default(r6, null, null, 6, null)\l}"];
subgraph cluster_IfRegion_1274917390 {
label = "IF [B:3:0x000e] THEN: R(1:3) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r7.isLazy() != false) goto L3\l}"];
subgraph cluster_Region_540507559 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|kotlinx.coroutines.channels.ActorCoroutine r2 = new kotlinx.coroutines.channels.LazyActorCoroutine(r0, r1, r9)\l}"];
}
subgraph cluster_Region_1230053656 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0018|kotlinx.coroutines.channels.ActorCoroutine r2 = new kotlinx.coroutines.channels.Actor(r0, r1, true)\l}"];
}
}
subgraph cluster_IfRegion_111112277 {
label = "IF [B:7:0x001f] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001f|PHI: r2 \l  PHI: (r2v3 'coroutine' kotlinx.coroutines.channels.ActorCoroutine) = (r2v2 'coroutine' kotlinx.coroutines.channels.ActorCoroutine), (r2v5 'coroutine' kotlinx.coroutines.channels.LazyActorCoroutine) binds: [B:5:0x0018, B:4:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r8 != null) goto L5\l}"];
subgraph cluster_Region_1456161540 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0021|r2.invokeOnCompletion(r8)\l}"];
}
}
Node_9 [shape=record,label="{9\:\ 0x0024|r2.start(r7, r2, r9)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|RETURN\l|return r2\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.channels.SendChannel\<E\> kotlinx.coroutines.channels.ActorKt.actor((r4v0 '$this$actor' kotlinx.coroutines.CoroutineScope A[D('$this$actor' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'capacity' int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'start' kotlinx.coroutines.CoroutineStart A[D('start' kotlinx.coroutines.CoroutineStart), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\> A[D('onCompletion' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.channels.ActorScope\<E\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\> A[D('block' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x001f \-\> B:9:0x0024, CROSS_EDGE: B:5:0x0018 \-\> B:7:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: \<E:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;ILkotlinx\/coroutines\/CoroutineStart;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Lkotlin\/Unit;\>;Lkotlin\/jvm\/functions\/Function2\<\-Lkotlinx\/coroutines\/channels\/ActorScope\<TE;\>;\-Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;+Ljava\/lang\/Object;\>;)Lkotlinx\/coroutines\/channels\/SendChannel\<TE;\>;\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_0 -> Node_2;
}

