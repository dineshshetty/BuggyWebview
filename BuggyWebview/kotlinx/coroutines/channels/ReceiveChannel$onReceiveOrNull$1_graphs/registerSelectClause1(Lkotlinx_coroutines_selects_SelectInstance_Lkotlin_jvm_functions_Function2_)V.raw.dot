digraph "CFG forkotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1.registerSelectClause1(Lkotlinx\/coroutines\/selects\/SelectInstance;Lkotlin\/jvm\/functions\/Function2;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.channels.ReceiveChannel\<E\>) = (r3 I:kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1) kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1.this$0 kotlinx.coroutines.channels.ReceiveChannel  (LINE:373)\l0x0002: INVOKE  (r0 I:kotlinx.coroutines.selects.SelectClause1) = (r0 I:kotlinx.coroutines.channels.ReceiveChannel) type: INTERFACE call: kotlinx.coroutines.channels.ReceiveChannel.getOnReceiveCatching():kotlinx.coroutines.selects.SelectClause1 A[MD:():kotlinx.coroutines.selects.SelectClause1\<kotlinx.coroutines.channels.ChannelResult\<E\>\> (m)]\l0x0006: NEW_INSTANCE  (r1 I:kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1$registerSelectClause1$1) =  kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1$registerSelectClause1$1 \l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INVOKE  \l  (r1 I:kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1$registerSelectClause1$1)\l  (r5 I:kotlin.jvm.functions.Function2 A[D('block' kotlin.jvm.functions.Function2)])\l  (r2 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1$registerSelectClause1$1.\<init\>(kotlin.jvm.functions.Function2, kotlin.coroutines.Continuation):void A[MD:(kotlin.jvm.functions.Function2\<? super E, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1$registerSelectClause1$1\>):void (m)]\l0x000c: CHECK_CAST (r1 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r1 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  \l  (r0 I:kotlinx.coroutines.selects.SelectClause1)\l  (r4 I:kotlinx.coroutines.selects.SelectInstance A[D('select' kotlinx.coroutines.selects.SelectInstance)])\l  (r1 I:kotlin.jvm.functions.Function2)\l type: INTERFACE call: kotlinx.coroutines.selects.SelectClause1.registerSelectClause1(kotlinx.coroutines.selects.SelectInstance, kotlin.jvm.functions.Function2):void A[MD:\<R\>:(kotlinx.coroutines.selects.SelectInstance\<? super R\>, kotlin.jvm.functions.Function2\<? super Q, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:377)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1.registerSelectClause1((r3 'this' I:kotlinx.coroutines.channels.ReceiveChannel$onReceiveOrNull$1 A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.selects.SelectInstance\<? super R\> A[D('select' kotlinx.coroutines.selects.SelectInstance), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function2\<? super E, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\> A[D('block' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0011: r4 'select' Lkotlinx\/coroutines\/selects\/SelectInstance;\l  \-1 \-0x0011: r5 'block' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/selects\/SelectInstance\<\-TR;\>;Lkotlin\/jvm\/functions\/Function2\<\-TE;\-Lkotlin\/coroutines\/Continuation\<\-TR;\>;+Ljava\/lang\/Object;\>;)V\lMETHOD_OVERRIDE: [kotlinx.coroutines.selects.SelectClause1.registerSelectClause1(kotlinx.coroutines.selects.SelectInstance\<? super R\>, kotlin.jvm.functions.Function2\<? super Q, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

