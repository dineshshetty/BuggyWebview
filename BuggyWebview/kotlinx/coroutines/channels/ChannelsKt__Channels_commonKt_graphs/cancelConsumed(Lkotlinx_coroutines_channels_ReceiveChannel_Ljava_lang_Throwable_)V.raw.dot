digraph "CFG forkotlinx.coroutines.channels.ChannelsKt__Channels_commonKt.cancelConsumed(Lkotlinx\/coroutines\/channels\/ReceiveChannel;Ljava\/lang\/Throwable;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:135)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0001|0x0001: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cause' java.lang.Throwable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0004 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('cause' java.lang.Throwable)]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: INSTANCE_OF  (r3 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('it' java.lang.Throwable)]) java.util.concurrent.CancellationException  (LINE:136)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x000d \l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('it' java.lang.Throwable)]) \l0x000b: CHECK_CAST (r0 I:java.util.concurrent.CancellationException) = (java.util.concurrent.CancellationException) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0016 \l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|0x000f: CONST_STR  (r0 I:java.lang.String) =  \"Channel was consumed, consumer had failed\" \l0x0011: INVOKE  (r0 I:java.util.concurrent.CancellationException) = (r0 I:java.lang.String), (r1 I:java.lang.Throwable A[D('it' java.lang.Throwable)]) type: STATIC call: kotlinx.coroutines.ExceptionsKt.CancellationException(java.lang.String, java.lang.Throwable):java.util.concurrent.CancellationException A[MD:(java.lang.String, java.lang.Throwable):java.util.concurrent.CancellationException (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: INVOKE  \l  (r4 I:kotlinx.coroutines.channels.ReceiveChannel A[D('$this$cancelConsumed' kotlinx.coroutines.channels.ReceiveChannel)])\l  (r0 I:java.util.concurrent.CancellationException)\l type: INTERFACE call: kotlinx.coroutines.channels.ReceiveChannel.cancel(java.util.concurrent.CancellationException):void A[MD:(java.util.concurrent.CancellationException):void (m)] (LINE:135)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|RETURN\l|0x0019: RETURN    (LINE:138)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.channels.ChannelsKt__Channels_commonKt.cancelConsumed((r4 I:kotlinx.coroutines.channels.ReceiveChannel\<?\> A[D('$this$cancelConsumed' kotlinx.coroutines.channels.ReceiveChannel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x000d \-\> B:22:0x0016, CROSS_EDGE: B:18:0x0008 \-\> B:20:0x000d, CROSS_EDGE: B:15:0x0001 \-\> B:22:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0016: r1 'it' Ljava\/lang\/Throwable;\l  0x0006\-0x0016: r2 '$i$a$\-let\-ChannelsKt__Channels_commonKt$cancelConsumed$1' I\l  \-1 \-0x0019: r4 '$this$cancelConsumed' Lkotlinx\/coroutines\/channels\/ReceiveChannel;\l  \-1 \-0x0019: r5 'cause' Ljava\/lang\/Throwable;\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/ReceiveChannel\<*\>;Ljava\/lang\/Throwable;)V\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_22[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

