digraph "CFG forkotlinx.coroutines.channels.ChannelsKt__ChannelsKt.sendBlocking(Lkotlinx\/coroutines\/channels\/SendChannel;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (kotlinx.coroutines.channels.ChannelResult.m1648isSuccessimpl(r3.mo1633trySendJP2dKIU(r4)) == false) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|kotlinx.coroutines.BuildersKt.runBlocking$default(null, new kotlinx.coroutines.channels.ChannelsKt__ChannelsKt$sendBlocking$1(r3, r4, null), 1, null)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.channels.ChannelsKt__ChannelsKt.sendBlocking((r3v0 kotlinx.coroutines.channels.SendChannel\<? super E\> A[D('$this$sendBlocking' kotlinx.coroutines.channels.SendChannel), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=Deprecated in the favour of 'trySendBlocking'. Consider handling the result of 'trySendBlocking' explicitly and rethrow exception if necessary, replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=trySendBlocking(element), imports=[[]]\}\}\}\}\}\}\lCROSS_EDGE: B:6:0x0017 \-\> B:1:?\lTYPE_VARS: [E]\lSIGNATURE: \<E:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/channels\/SendChannel\<\-TE;\>;TE;)V\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r4v0, resolved type: E\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

