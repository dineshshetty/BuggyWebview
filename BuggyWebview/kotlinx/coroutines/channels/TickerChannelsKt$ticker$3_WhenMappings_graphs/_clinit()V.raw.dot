digraph "CFG forkotlinx.coroutines.channels.TickerChannelsKt$ticker$3.WhenMappings.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.channels.TickerMode[]) =  type: STATIC call: kotlinx.coroutines.channels.TickerMode.values():kotlinx.coroutines.channels.TickerMode[] A[MD:():kotlinx.coroutines.channels.TickerMode[] (m)]\l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x0005: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0007: SGET  (r1 I:kotlinx.coroutines.channels.TickerMode) =  kotlinx.coroutines.channels.TickerMode.FIXED_PERIOD kotlinx.coroutines.channels.TickerMode \l0x0009: INVOKE  (r1 I:int) = (r1 I:kotlinx.coroutines.channels.TickerMode) type: VIRTUAL call: kotlinx.coroutines.channels.TickerMode.ordinal():int A[MD:():int (c)]\l0x000d: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000e: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0010: SGET  (r1 I:kotlinx.coroutines.channels.TickerMode) =  kotlinx.coroutines.channels.TickerMode.FIXED_DELAY kotlinx.coroutines.channels.TickerMode \l0x0012: INVOKE  (r1 I:int) = (r1 I:kotlinx.coroutines.channels.TickerMode) type: VIRTUAL call: kotlinx.coroutines.channels.TickerMode.ordinal():int A[MD:():int (c)]\l0x0016: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0017: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0019: SPUT  (r0 I:int[]) kotlinx.coroutines.channels.TickerChannelsKt$ticker$3.WhenMappings.$EnumSwitchMapping$0 int[] \l}"];
Node_3 [shape=record,label="{3\:\ 0x001b|RETURN\l|0x001b: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.channels.TickerChannelsKt$ticker$3.WhenMappings.\<clinit\>() }"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

