digraph "CFG forkotlinx.coroutines.channels.ChannelKt.Channel$default(ILkotlinx\/coroutines\/channels\/BufferOverflow;Lkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Lkotlinx\/coroutines\/channels\/Channel;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:768)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0005 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:769)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0005|0x0005: ARITH  (r4 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:768)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0007|0x0007: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x000b \l}"];
Node_33 [shape=record,label="{33\:\ 0x0009|0x0009: SGET  (r1 I:kotlinx.coroutines.channels.BufferOverflow) =  kotlinx.coroutines.channels.BufferOverflow.SUSPEND kotlinx.coroutines.channels.BufferOverflow  (LINE:770)\l}"];
Node_34 [shape=record,label="{34\:\ 0x000b|0x000b: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:768)\l}"];
Node_35 [shape=record,label="{35\:\ 0x000d|0x000d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0010 \l}"];
Node_36 [shape=record,label="{36\:\ 0x000f|0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:771)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0010|0x0010: INVOKE  (r0 I:kotlinx.coroutines.channels.Channel) = (r0 I:int), (r1 I:kotlinx.coroutines.channels.BufferOverflow), (r2 I:kotlin.jvm.functions.Function1) type: STATIC call: kotlinx.coroutines.channels.ChannelKt.Channel(int, kotlinx.coroutines.channels.BufferOverflow, kotlin.jvm.functions.Function1):kotlinx.coroutines.channels.Channel A[MD:\<E\>:(int, kotlinx.coroutines.channels.BufferOverflow, kotlin.jvm.functions.Function1\<? super E, kotlin.Unit\>):kotlinx.coroutines.channels.Channel\<E\> (m)] (LINE:768)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:kotlinx.coroutines.channels.Channel) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlinx.coroutines.channels.Channel kotlinx.coroutines.channels.ChannelKt.Channel$default((r0 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:kotlinx.coroutines.channels.BufferOverflow A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:35:0x000d \-\> B:37:0x0010, CROSS_EDGE: B:32:0x0007 \-\> B:34:0x000b, CROSS_EDGE: B:29:0x0002 \-\> B:31:0x0005\lINLINE_NOT_NEEDED\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [768=4]\}\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_27;
}

