digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.resumeReceiveClosed(Lkotlinx\/coroutines\/channels\/Closed;)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000}"];
Node_25 [shape=record,label="{25\:\ 0x0002|if (r5.closeCause != null) goto L9\l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|java.lang.Object r0 = kotlinx.coroutines.CancellableContinuation.DefaultImpls.tryResume$default(r4.cont, false, null, 2, null)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|PHI: r0 \l  PHI: (r0v3 'token' java.lang.Object) = (r0v2 'token' java.lang.Object), (r0v5 'token' java.lang.Object) binds: [B:27:0x0012, B:26:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L8\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|r4.iterator.setResult(r5)\lr4.cont.completeResume(r0)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0029|RETURN\lORIG_RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_27 [shape=record,label="{27\:\ 0x0012|java.lang.Object r0 = r4.cont.tryResumeWithException(r5.getReceiveException())\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.resumeReceiveClosed((r4v0 'this' kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext\<E\> A[IMMUTABLE_TYPE, THIS]), (r5v0 kotlinx.coroutines.channels.Closed\<?\> A[D('closed' kotlinx.coroutines.channels.Closed), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x001d \-\> B:31:0x0029, CROSS_EDGE: B:27:0x0012 \-\> B:29:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/Closed\<*\>;)V\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.Receive.resumeReceiveClosed(kotlinx.coroutines.channels.Closed\<?\>):void]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_32 -> Node_23;
Node_27 -> Node_29;
}

