digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.completeResumeReceive(Ljava\/lang\/Object;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.channels.AbstractChannel$Itr\<E\>) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext) kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.iterator kotlinx.coroutines.channels.AbstractChannel$Itr  (LINE:946)\l0x0002: INVOKE  (r0 I:kotlinx.coroutines.channels.AbstractChannel$Itr), (r3 I:java.lang.Object A[D('value' java.lang.Object)]) type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.Itr.setResult(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0005: IGET  (r0 I:kotlinx.coroutines.CancellableContinuation\<java.lang.Boolean\>) = (r2 I:kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext) kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.cont kotlinx.coroutines.CancellableContinuation  (LINE:947)\l0x0007: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN kotlinx.coroutines.internal.Symbol \l0x0009: INVOKE  (r0 I:kotlinx.coroutines.CancellableContinuation), (r1 I:java.lang.Object) type: INTERFACE call: kotlinx.coroutines.CancellableContinuation.completeResume(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000c|RETURN\l|0x000c: RETURN    (LINE:948)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.completeResumeReceive((r2 'this' I:kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext\<E\> A[IMMUTABLE_TYPE, THIS]), (r3 I:E A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r3 'value' Ljava\/lang\/Object;\lTYPE_VARS: [E]\lSIGNATURE: (TE;)V\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ReceiveOrClosed.completeResumeReceive(E):void]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

