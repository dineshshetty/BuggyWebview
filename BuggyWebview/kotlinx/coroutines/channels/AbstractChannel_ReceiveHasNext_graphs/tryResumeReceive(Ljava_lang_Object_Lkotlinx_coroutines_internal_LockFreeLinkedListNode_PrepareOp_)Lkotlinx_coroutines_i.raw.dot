digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.tryResumeReceive(Ljava\/lang\/Object;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Lkotlinx\/coroutines\/internal\/Symbol;" {
Node_48 [shape=record,label="{48\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.CancellableContinuation\<java.lang.Boolean\>) = (r6 I:kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext) kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.cont kotlinx.coroutines.CancellableContinuation  (LINE:933)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r2 I:java.lang.Boolean) = (r1 I:boolean) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (c)]\l0x0007: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0008|0x0008: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x000c \l}"];
Node_52 [shape=record,label="{52\:\ 0x000a|0x000a: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x000e|0x000e: INVOKE  (r5 I:kotlin.jvm.functions.Function1) = \l  (r6 I:kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext)\l  (r7 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.resumeOnCancellationFun(java.lang.Object):kotlin.jvm.functions.Function1 A[MD:(E):kotlin.jvm.functions.Function1\<java.lang.Throwable, kotlin.Unit\> (m)]\l0x0012: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.CancellableContinuation)\l  (r2 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l  (r5 I:kotlin.jvm.functions.Function1)\l type: INTERFACE call: kotlinx.coroutines.CancellableContinuation.tryResume(java.lang.Object, java.lang.Object, kotlin.jvm.functions.Function1):java.lang.Object A[MD:(T, java.lang.Object, kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0019 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0018|RETURN\l|0x0018: RETURN  (r3 I:kotlinx.coroutines.internal.Symbol)  (LINE:934)\l}"];
Node_49 [shape=record,label="{49\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_57 [shape=record,label="{57\:\ 0x0019|0x0019: INVOKE  (r2 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:935)\l}"];
Node_58 [shape=record,label="{58\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x002f \l}"];
Node_59 [shape=record,label="{59\:\ 0x001f|0x001f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1133)\l0x0020: SGET  (r3 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN kotlinx.coroutines.internal.Symbol  (LINE:935)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('token' java.lang.Object)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0025 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0025|0x0025: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x0029 \l}"];
Node_65 [shape=record,label="{65\:\ 0x0029|0x0029: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x002b: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_66 [shape=record,label="{66\:\ 0x002e|0x002e: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_67 [shape=record,label="{67\:\ 0x002f|0x002f: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x0032  (LINE:937)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0032|0x0032: INVOKE  \l  (r8 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.finishPrepare():void A[MD:():void (m)]\l}"];
Node_70 [shape=record,label="{70\:\ 0x0035|0x0035: SGET  (r1 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN kotlinx.coroutines.internal.Symbol  (LINE:938)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0037|RETURN\l|0x0037: RETURN  (r1 I:kotlinx.coroutines.internal.Symbol) \l}"];
Node_53 [shape=record,label="{53\:\ 0x000c|0x000c: IGET  (r4 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = \l  (r8 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)])\l kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc \l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.internal.Symbol kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.tryResumeReceive((r6 'this' I:kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext\<E\> A[IMMUTABLE_TYPE, THIS]), (r7 I:E A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:66:0x002e \-\> B:49:?, CROSS_EDGE: B:71:0x0037 \-\> B:49:?, CROSS_EDGE: B:67:0x002f \-\> B:70:0x0035, CROSS_EDGE: B:60:0x0022 \-\> B:63:0x0026, CROSS_EDGE: B:58:0x001d \-\> B:67:0x002f, CROSS_EDGE: B:53:0x000c \-\> B:54:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Lkotlinx\/coroutines\/internal\/Symbol;\lDebug Info:\l  0x0020\-0x0026: r2 '$i$a$\-assert\-AbstractChannel$ReceiveHasNext$tryResumeReceive$1' I\l  0x0019\-0x0037: r0 'token' Ljava\/lang\/Object;\l  \-1 \-0x0037: r7 'value' Ljava\/lang\/Object;\l  \-1 \-0x0037: r8 'otherOp' Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ReceiveOrClosed.tryResumeReceive(E, kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):kotlinx.coroutines.internal.Symbol]\l}"];
MethodNode -> Node_48;Node_48 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_49;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_67;
Node_59 -> Node_60;
Node_60 -> Node_62;
Node_60 -> Node_63[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_65;
Node_63 -> Node_67[style=dashed];
Node_65 -> Node_66;
Node_66 -> Node_49;
Node_67 -> Node_69;
Node_67 -> Node_70[style=dashed];
Node_69 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_49;
Node_53 -> Node_54;
}

