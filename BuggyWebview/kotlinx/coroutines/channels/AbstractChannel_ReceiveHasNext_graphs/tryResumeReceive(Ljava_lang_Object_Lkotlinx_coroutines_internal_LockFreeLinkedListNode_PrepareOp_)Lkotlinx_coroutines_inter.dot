digraph "CFG forkotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.tryResumeReceive(Ljava\/lang\/Object;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Lkotlinx\/coroutines\/internal\/Symbol;" {
Node_48 [shape=record,label="{48\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x0000|kotlinx.coroutines.CancellableContinuation\<java.lang.Boolean\> r0 = r6.cont\lr1 = true\l}"];
Node_51 [shape=record,label="{51\:\ 0x0008|if (r8 != null) goto L20\l}"];
Node_52 [shape=record,label="{52\:\ 0x000a|r4 = null\l}"];
Node_54 [shape=record,label="{54\:\ 0x000e|PHI: r4 \l  PHI: (r4v1 kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) = (r4v0 kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc), (r4v2 kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc) binds: [B:53:0x000c, B:52:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Object r0 = r0.tryResume(true, r4, resumeOnCancellationFun(r7))\l}"];
Node_55 [shape=record,label="{55\:\ 0x0016|if (r0 != null) goto L8\l}"];
Node_56 [shape=record,label="{56\:\ 0x0018|RETURN\l|return null\l}"];
Node_49 [shape=record,label="{49\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_57 [shape=record,label="{57\:\ 0x0019}"];
Node_58 [shape=record,label="{58\:\ 0x001d|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L16\l}"];
Node_59 [shape=record,label="{59\:\ 0x001f}"];
Node_60 [shape=record,label="{60\:\ 0x0022|if (r0 != kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN) goto L12\l}"];
Node_62 [shape=record,label="{62\:\ 0x0025|r1 = false\l}"];
Node_63 [shape=record,label="{63\:\ 0x0026|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v0 boolean), (r1v4 boolean) binds: [B:60:0x0022, B:62:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L14\l}"];
Node_65 [shape=record,label="{65\:\ 0x0029}"];
Node_66 [shape=record,label="{66\:\ 0x002e|throw new java.lang.AssertionError()\l}"];
Node_67 [shape=record,label="{67\:\ 0x002f|if (r8 != null) goto L17\l}"];
Node_69 [shape=record,label="{69\:\ 0x0032|r8.finishPrepare()\l}"];
Node_70 [shape=record,label="{70\:\ 0x0035}"];
Node_71 [shape=record,label="{71\:\ 0x0037|RETURN\l|return kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN\l}"];
Node_53 [shape=record,label="{53\:\ 0x000c|kotlinx.coroutines.internal.LockFreeLinkedListNode$AbstractAtomicDesc r4 = r8.desc\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.internal.Symbol kotlinx.coroutines.channels.AbstractChannel.ReceiveHasNext.tryResumeReceive((r6v0 'this' kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext\<E\> A[IMMUTABLE_TYPE, THIS]), (r7v0 E A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp A[D('otherOp' kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:66:0x002e \-\> B:49:?, CROSS_EDGE: B:71:0x0037 \-\> B:49:?, CROSS_EDGE: B:67:0x002f \-\> B:70:0x0035, CROSS_EDGE: B:60:0x0022 \-\> B:63:0x0026, CROSS_EDGE: B:58:0x001d \-\> B:67:0x002f, CROSS_EDGE: B:53:0x000c \-\> B:54:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;Lkotlinx\/coroutines\/internal\/LockFreeLinkedListNode$PrepareOp;)Lkotlinx\/coroutines\/internal\/Symbol;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ReceiveOrClosed.tryResumeReceive(E, kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp):kotlinx.coroutines.internal.Symbol]\l}"];
MethodNode -> Node_48;Node_48 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_49;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_67;
Node_59 -> Node_60;
Node_60 -> Node_62;
Node_60 -> Node_63[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_65;
Node_63 -> Node_67[style=dashed];
Node_65 -> Node_66;
Node_66 -> Node_49;
Node_67 -> Node_69;
Node_67 -> Node_70[style=dashed];
Node_69 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_49;
Node_53 -> Node_54;
}

