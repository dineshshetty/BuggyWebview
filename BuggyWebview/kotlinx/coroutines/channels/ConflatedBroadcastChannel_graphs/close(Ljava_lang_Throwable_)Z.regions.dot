digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.close(Ljava\/lang\/Throwable;)Z" {
subgraph cluster_Region_553164496 {
label = "R(5:(2:2|(2:(1:25)|(1:(1:6)(1:23))))|11|(2:13|(1:15))|17|18) | DECL_VAR: java.lang.Object state, int null, kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed update\l";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_213817425 {
label = "LOOP:0: (2:2|(2:(1:25)|(1:(1:6)(1:23))))";
node [shape=record,color=blue];
Node_70 [shape=record,label="{70\:\ 0x0021|LOOP_END\lLOOP:0: B:61:0x0002\-\>B:70:0x0021\l|if (androidx.concurrent.futures.C0125xc40028dd.m112m(kotlinx.coroutines.channels.ConflatedBroadcastChannel._state$FU, r12, r2, r4) == false) goto L2\l}"];
subgraph cluster_Region_1808465473 {
label = "R(2:2|(2:(1:25)|(1:(1:6)(1:23))))";
node [shape=record,color=blue];
Node_61 [shape=record,label="{61\:\ 0x0002|LOOP_START\lLOOP:0: B:61:0x0002\-\>B:70:0x0021\l|java.lang.Object r2 = r12._state\lr5 = 0\l}"];
subgraph cluster_Region_1120032906 {
label = "R(2:(1:25)|(1:(1:6)(1:23)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_847863604 {
label = "IF [B:62:0x000a] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x000a|if ((r2 instanceof kotlinx.coroutines.channels.ConflatedBroadcastChannel.Closed) == true) goto L24\l}"];
subgraph cluster_Region_2084674768 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x000c|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1613686872 {
label = "R(1:(1:6)(1:23))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1685597110 {
label = "IF [B:65:0x000f] THEN: R(1:6) ELSE: R(1:23)";
node [shape=record,color=blue];
Node_65 [shape=record,label="{65\:\ 0x000f|if ((r2 instanceof kotlinx.coroutines.channels.ConflatedBroadcastChannel.State) != false) goto L6\l}"];
subgraph cluster_Region_2104537127 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x0011|r4 = r13 == null ? kotlinx.coroutines.channels.ConflatedBroadcastChannel.CLOSED : new kotlinx.coroutines.channels.ConflatedBroadcastChannel.Closed(r13)\l}"];
}
subgraph cluster_Region_1492973966 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_82 [shape=record,label="{82\:\ 0x0050|throw new java.lang.IllegalStateException(kotlin.jvm.internal.Intrinsics.stringPlus(\"Invalid state \", r2).toString())\l}"];
}
}
}
}
}
}
Node_71 [shape=record,label="{71\:\ 0x0023|kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] kotlinx.coroutines.channels.ConflatedBroadcastChannel.Subscriber\<E\>[] r6 = ((kotlinx.coroutines.channels.ConflatedBroadcastChannel.State) r2).subscribers\l}"];
subgraph cluster_IfRegion_1124013710 {
label = "IF [B:72:0x0028] THEN: R(2:13|(1:15)) ELSE: null";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x0028|if (r6 != null) goto L13\l}"];
subgraph cluster_Region_638914079 {
label = "R(2:13|(1:15))";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x002b|int int r8 = r6.length\l}"];
subgraph cluster_LoopRegion_2123757548 {
label = "LOOP:1: (1:15)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x002d|LOOP_START\lLOOP:1: B:75:0x002d\-\>B:76:0x002f\lPHI: r5 \l  PHI: (r5v5 int) = (r5v0 int), (r5v6 int) binds: [B:74:0x002b, B:76:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 \< r8) goto L15\l}"];
subgraph cluster_Region_1483740420 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x002f|LOOP_END\lLOOP:1: B:75:0x002d\-\>B:76:0x002f\l|kotlinx.coroutines.channels.ConflatedBroadcastChannel.Subscriber\<E\> r9 = r6[r5]\lr5++\lr9.close(r13)\l}"];
}
}
}
}
Node_78 [shape=record,label="{78\:\ 0x003a|invokeOnCloseHandler(r13)\l}"];
Node_79 [shape=record,label="{79\:\ 0x003e|RETURN\l|return true\l}"];
}
Node_58 [shape=record,color=red,label="{58\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x0000}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x000d}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x0013}"];
Node_69 [shape=record,color=red,label="{69\:\ 0x001b|PHI: r4 \l  PHI: (r4v4 'update' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_83 [shape=record,color=red,label="{83\:\ 0x0023|SYNTHETIC\l}"];
Node_86 [shape=record,color=red,label="{86\:\ 0x003a|SYNTHETIC\l}"];
Node_59 [shape=record,color=red,label="{59\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_68 [shape=record,color=red,label="{68\:\ 0x0016}"];
Node_85 [shape=record,color=red,label="{85\:\ 0x0041|SYNTHETIC\l}"];
Node_81 [shape=record,color=red,label="{81\:\ 0x0041}"];
Node_84 [shape=record,color=red,label="{84\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.channels.ConflatedBroadcastChannel.close((r12v0 'this' kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r13v0 'cause' java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:76:0x002f \-\> B:75:0x002d, CROSS_EDGE: B:79:0x003e \-\> B:59:?, CROSS_EDGE: B:72:0x0028 \-\> B:78:0x003a, BACK_EDGE: B:70:0x0021 \-\> B:61:0x0002, CROSS_EDGE: B:68:0x0016 \-\> B:69:0x001b, CROSS_EDGE: B:82:0x0050 \-\> B:59:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lREPLACED_BY: kotlinx.coroutines.channels.ConflatedBroadcastChannel.cancel(java.lang.Throwable):boolean\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.BroadcastChannel.cancel(java.lang.Throwable):boolean]\l}"];
MethodNode -> Node_58;Node_70 -> Node_61;
Node_70 -> Node_83[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_64[style=dashed];
Node_62 -> Node_84;
Node_63 -> Node_59;
Node_65 -> Node_66;
Node_65 -> Node_85[style=dashed];
Node_66 -> Node_67;
Node_66 -> Node_68;
Node_82 -> Node_59;
Node_71 -> Node_72;
Node_72 -> Node_74;
Node_72 -> Node_78[style=dashed];
Node_74 -> Node_75;
Node_75 -> Node_76;
Node_75 -> Node_86[style=dashed];
Node_76 -> Node_75;
Node_78 -> Node_79;
Node_79 -> Node_59;
Node_58 -> Node_60;
Node_60 -> Node_61;
Node_64 -> Node_65;
Node_67 -> Node_69;
Node_69 -> Node_70;
Node_83 -> Node_71;
Node_86 -> Node_78;
Node_68 -> Node_69;
Node_85 -> Node_81;
Node_81 -> Node_82;
Node_84 -> Node_63;
}

