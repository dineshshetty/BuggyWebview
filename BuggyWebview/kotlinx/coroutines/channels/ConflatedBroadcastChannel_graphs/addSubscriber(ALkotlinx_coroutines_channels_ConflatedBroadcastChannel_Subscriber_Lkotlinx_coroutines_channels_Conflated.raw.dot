digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.addSubscriber([Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;)[Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000e  (LINE:135)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0004: NEW_ARRAY  (r2 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[] \l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|LOOP_START\lLOOP:0: B:24:0x0006\-\>B:25:0x0008\l|0x0006: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:29:0x000d \l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|LOOP_END\lLOOP:0: B:24:0x0006\-\>B:25:0x0008\l|0x0008: APUT  \l  (r2 I:??[OBJECT, ARRAY][])\l  (r0 I:??[int, short, byte, char])\l  (r5 I:??[OBJECT, ARRAY] A[D('subscriber' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber)])\l \l0x000a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000d|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x000d|RETURN\l|0x000d: RETURN  (r2 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[]) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|0x000e: INVOKE  (r0 I:java.lang.Object[]) = \l  (r4 I:java.lang.Object[] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])])\l  (r5 I:java.lang.Object A[D('subscriber' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber)])\l type: STATIC call: kotlin.collections.ArraysKt.plus(java.lang.Object[], java.lang.Object):java.lang.Object[] A[MD:\<T\>:(T[], T):T[] (m)] (LINE:136)\l0x0012: CHECK_CAST (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[]) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] kotlinx.coroutines.channels.ConflatedBroadcastChannel.addSubscriber((r3 'this' I:kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\> A[D('subscriber' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x0008 \-\> B:24:0x0006, CROSS_EDGE: B:28:0x0014 \-\> B:21:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0014: r4 'list' [Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;\l  \-1 \-0x0014: r5 'subscriber' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;\lTYPE_VARS: [E]\lSIGNATURE: ([Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;)[Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_24;
Node_29 -> Node_26;
Node_26 -> Node_21;
Node_27 -> Node_28;
Node_28 -> Node_21;
}

