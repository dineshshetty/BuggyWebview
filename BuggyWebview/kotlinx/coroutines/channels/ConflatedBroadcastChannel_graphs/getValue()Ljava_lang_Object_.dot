digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.getValue()Ljava\/lang\/Object;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|java.lang.Object r2 = r6._state\l}"];
Node_35 [shape=record,label="{35\:\ 0x0009|if ((r2 instanceof kotlinx.coroutines.channels.ConflatedBroadcastChannel.Closed) != false) goto L14\l}"];
Node_36 [shape=record,label="{36\:\ 0x000b}"];
Node_37 [shape=record,label="{37\:\ 0x000d|if ((r2 instanceof kotlinx.coroutines.channels.ConflatedBroadcastChannel.State) == false) goto L12\l}"];
Node_38 [shape=record,label="{38\:\ 0x000f}"];
Node_39 [shape=record,label="{39\:\ 0x0016|if (((kotlinx.coroutines.channels.ConflatedBroadcastChannel.State) r2).value == kotlinx.coroutines.channels.ConflatedBroadcastChannel.UNDEFINED) goto L10\l}"];
Node_40 [shape=record,label="{40\:\ 0x0018}"];
Node_41 [shape=record,label="{41\:\ 0x001d|RETURN\l|return (E) ((kotlinx.coroutines.channels.ConflatedBroadcastChannel.State) r2).value\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e}"];
Node_43 [shape=record,label="{43\:\ 0x0025|throw new java.lang.IllegalStateException(\"No value\")\l}"];
Node_44 [shape=record,label="{44\:\ 0x0026}"];
Node_45 [shape=record,label="{45\:\ 0x0035|throw new java.lang.IllegalStateException(kotlin.jvm.internal.Intrinsics.stringPlus(\"Invalid state \", r2).toString())\l}"];
Node_46 [shape=record,label="{46\:\ 0x0036}"];
Node_47 [shape=record,label="{47\:\ 0x003d|throw ((kotlinx.coroutines.channels.ConflatedBroadcastChannel.Closed) r2).getValueException()\l}"];
MethodNode[shape=record,label="{public final E kotlinx.coroutines.channels.ConflatedBroadcastChannel.getValue((r6v0 'this' kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x0025 \-\> B:33:?, CROSS_EDGE: B:45:0x0035 \-\> B:33:?, CROSS_EDGE: B:47:0x003d \-\> B:33:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: ()TE;\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_46;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_44;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_41 -> Node_33;
Node_42 -> Node_43;
Node_43 -> Node_33;
Node_44 -> Node_45;
Node_45 -> Node_33;
Node_46 -> Node_47;
Node_47 -> Node_33;
}

