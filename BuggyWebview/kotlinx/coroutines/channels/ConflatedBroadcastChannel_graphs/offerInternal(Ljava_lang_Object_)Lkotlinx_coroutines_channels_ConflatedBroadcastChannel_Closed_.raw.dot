digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.offerInternal(Ljava\/lang\/Object;)Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Closed;" {
Node_70 [shape=record,label="{70\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_72 [shape=record,label="{72\:\ 0x0000|0x0000: SGET  (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater) =  kotlinx.coroutines.channels.ConflatedBroadcastChannel._updating$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:243)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater), (r13 I:java.lang.Object), (r1 I:int), (r2 I:int) type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.lang.Object, int, int):boolean A[MD:(T, int, int):boolean (c)]\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x000c \l}"];
Node_74 [shape=record,label="{74\:\ 0x000b|RETURN\l|0x000b: RETURN  (r2 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) \l}"];
Node_71 [shape=record,label="{71\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_75 [shape=record,label="{75\:\ 0x000c|0x000d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY])  (LINE:245)\l0x000e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_76 [shape=record,label="{76\:\ 0x000f|LOOP_START\lLOOP:0: B:76:0x000f\-\>B:94:0x004e\l}"];
Node_100 [shape=record,label="{100\:\ 0x0010|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_77 [shape=record,label="{77\:\ 0x0010|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x0010: IGET  (r4 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel A[D('$this$loop$iv' kotlinx.coroutines.channels.ConflatedBroadcastChannel)])\l kotlinx.coroutines.channels.ConflatedBroadcastChannel._state java.lang.Object A[Catch: all \-\> 0x0061, TRY_ENTER] (LINE:309)\l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: INSTANCE_OF  (r6 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed A[Catch: all \-\> 0x0061] (LINE:247)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0016|0x0016: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x001e \l}"];
Node_82 [shape=record,label="{82\:\ 0x001e|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x001e: INSTANCE_OF  (r6 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.channels.ConflatedBroadcastChannel$State A[Catch: all \-\> 0x0061, TRY_ENTER] (LINE:248)\l}"];
Node_83 [shape=record,label="{83\:\ 0x0020|0x0020: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:101:0x0051 \l}"];
Node_84 [shape=record,label="{84\:\ 0x0022|TryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x0022: NEW_INSTANCE  (r6 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) =  kotlinx.coroutines.channels.ConflatedBroadcastChannel$State A[Catch: all \-\> 0x0061] (LINE:249)\l0x0024: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) \l0x0025: CHECK_CAST (r7 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) (r7 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0061]\l0x0027: IGET  (r7 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[]) = (r7 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) kotlinx.coroutines.channels.ConflatedBroadcastChannel.State.subscribers kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[] A[Catch: all \-\> 0x0061]\l0x0029: INVOKE  \l  (r6 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State)\l  (r14 I:java.lang.Object A[D('element' java.lang.Object)])\l  (r7 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])\l type: DIRECT call: kotlinx.coroutines.channels.ConflatedBroadcastChannel.State.\<init\>(java.lang.Object, kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]):void A[Catch: all \-\> 0x0061, MD:(java.lang.Object, kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[]):void (m)]\l0x002c: SGET  (r7 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.channels.ConflatedBroadcastChannel._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater A[Catch: all \-\> 0x0061] (LINE:250)\l0x002e: INVOKE  (r7 I:boolean) = \l  (r7 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r13 I:java.lang.Object)\l  (r4 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r6 I:java.lang.Object A[D('update' kotlinx.coroutines.channels.ConflatedBroadcastChannel$State)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[Catch: all \-\> 0x0061, MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_85 [shape=record,label="{85\:\ 0x0032|0x0032: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x004e \l}"];
Node_94 [shape=record,label="{94\:\ 0x004e|LOOP_END\lLOOP:0: B:76:0x000f\-\>B:94:0x004e\l|0x0050: GOTO  \-\> 0x000f \l}"];
Node_102 [shape=record,label="{102\:\ 0x0034|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0034|TryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x0034: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:254)\l0x0035: CHECK_CAST (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0061]\l0x0037: IGET  (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[]) = (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) kotlinx.coroutines.channels.ConflatedBroadcastChannel.State.subscribers kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[] A[Catch: all \-\> 0x0061]\l}"];
Node_87 [shape=record,label="{87\:\ 0x0039|0x0039: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:0x003c \l}"];
Node_88 [shape=record,label="{88\:\ 0x003b|0x003b: GOTO  \-\> 0x004c \l}"];
Node_93 [shape=record,label="{93\:\ 0x004c|0x004d: GOTO  \-\> 0x001b \l}"];
Node_80 [shape=record,label="{80\:\ 0x001b|0x001b: IPUT  (r1 I:int), (r13 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel) kotlinx.coroutines.channels.ConflatedBroadcastChannel._updating int  (LINE:262)\l}"];
Node_81 [shape=record,label="{81\:\ 0x001d|RETURN\l|0x001d: RETURN  (r2 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) \l}"];
Node_89 [shape=record,label="{89\:\ 0x003c|TryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x003c: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003d: ARRAY_LENGTH  (r8 I:int) = (r0 I:??[] A[D('$this$forEach$iv' java.lang.Object[])]) A[Catch: all \-\> 0x0061] (LINE:310)\l0x003e: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_90 [shape=record,label="{90\:\ 0x003f|LOOP_START\lLOOP:1: B:90:0x003f\-\>B:91:0x0041\l|0x003f: IF  (r9 I:??[int, byte, short, char]) \>= (r8 I:??[int, byte, short, char])  \-\> B:104:0x004c \l}"];
Node_91 [shape=record,label="{91\:\ 0x0041|LOOP_END\lTryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lLOOP:1: B:90:0x003f\-\>B:91:0x0041\lCatch: all \-\> 0x0061\l|0x0041: AGET  (r10 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('$this$forEach$iv' java.lang.Object[])]), (r9 I:??[int, short, byte, char]) A[Catch: all \-\> 0x0061]\l0x0043: ARITH  (r9 I:int) = (r9 I:int) + (1 int) A[Catch: all \-\> 0x0061]\l0x0045: MOVE  (r11 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0046: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0047: INVOKE  \l  (r11 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber A[D('it' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber)])\l  (r14 I:java.lang.Object A[D('element' java.lang.Object)])\l type: VIRTUAL call: kotlinx.coroutines.channels.ConflatedBroadcastChannel.Subscriber.offerInternal(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0061, MD:(E):java.lang.Object (m)] (LINE:254)\l0x004a: GOTO  \-\> 0x003f \l}"];
Node_104 [shape=record,label="{104\:\ 0x004c|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x0051|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0051|TryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x0051: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('$this$loop$iv' kotlinx.coroutines.channels.ConflatedBroadcastChannel)]) =  java.lang.IllegalStateException A[Catch: all \-\> 0x0061] (LINE:262)\l0x0053: CONST_STR  (r2 I:java.lang.String) =  \"Invalid state \"  (LINE:258)\l0x0055: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String), (r4 I:java.lang.Object A[D('state' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[Catch: all \-\> 0x0061, MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0059: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[Catch: all \-\> 0x0061, MD:():java.lang.String (c)]\l0x005d: INVOKE  (r0 I:java.lang.IllegalStateException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[Catch: all \-\> 0x0061, MD:(java.lang.String):void (c)]\l}"];
Node_96 [shape=record,label="{96\:\ 0x0060|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x0060: THROW  (r0 I:java.lang.Throwable) A[Catch: all \-\> 0x0061, TRY_LEAVE]\l}"];
Node_103 [shape=record,label="{103\:\ 0x0018|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x0018|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lCatch: all \-\> 0x0061\l|0x0018: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) \l0x0019: CHECK_CAST (r2 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) (r2 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0061, TRY_LEAVE]\l}"];
Node_97 [shape=record,label="{97\:\ 0x0061|ExcHandler: all \-\> 0x0061\l|0x0061: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0061] (LINE:261)\l}"];
Node_98 [shape=record,label="{98\:\ 0x0062|0x0062: IPUT  (r1 I:int), (r13 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel) kotlinx.coroutines.channels.ConflatedBroadcastChannel._updating int  (LINE:262)\l}"];
Node_99 [shape=record,label="{99\:\ 0x0064|0x0064: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed kotlinx.coroutines.channels.ConflatedBroadcastChannel.offerInternal((r13 'this' I:kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r14 I:E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:81:0x001d \-\> B:71:?, CROSS_EDGE: B:93:0x004c \-\> B:80:0x001b, BACK_EDGE: B:91:0x0041 \-\> B:90:0x003f, CROSS_EDGE: B:90:0x003f \-\> B:93:0x004c, BACK_EDGE: B:94:0x004e \-\> B:76:0x000f, CROSS_EDGE: B:96:0x0060 \-\> B:71:?, CROSS_EDGE: B:99:0x0064 \-\> B:71:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0061, blocks: (B:77:0x0010, B:79:0x0018, B:82:0x001e, B:84:0x0022, B:86:0x0034, B:89:0x003c, B:91:0x0041, B:95:0x0051, B:96:0x0060), top: B:100:0x0010 \}\lTYPE_VARS: [E]\lSIGNATURE: (TE;)Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Closed;\lDebug Info:\l  0x000e\-0x001b: r0 '$this$loop$iv' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel;\l  0x000f\-0x001b: r3 '$i$f$loop' I\l  0x0012\-0x001b: r4 'state' Ljava\/lang\/Object;\l  0x0013\-0x001b: r5 '$i$a$\-loop\-ConflatedBroadcastChannel$offerInternal$1' I\l  0x0043\-0x004b: r10 'element$iv' Ljava\/lang\/Object;\l  0x0046\-0x004b: r11 'it' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;\l  0x0047\-0x004b: r12 '$i$a$\-forEach\-ConflatedBroadcastChannel$offerInternal$1$1' I\l  0x003c\-0x004c: r0 '$this$forEach$iv' [Ljava\/lang\/Object;\l  0x003d\-0x004c: r7 '$i$f$forEach' I\l  0x001e\-0x004d: r3 '$i$f$loop' I\l  0x001e\-0x004d: r4 'state' Ljava\/lang\/Object;\l  0x001e\-0x004d: r5 '$i$a$\-loop\-ConflatedBroadcastChannel$offerInternal$1' I\l  0x002c\-0x004d: r6 'update' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$State;\l  0x004e\-0x004f: r4 'state' Ljava\/lang\/Object;\l  0x004e\-0x004f: r5 '$i$a$\-loop\-ConflatedBroadcastChannel$offerInternal$1' I\l  0x0050\-0x0051: r0 '$this$loop$iv' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel;\l  \-1 \-0x0060: r14 'element' Ljava\/lang\/Object;\l  0x004e\-0x0061: r3 '$i$f$loop' I\l  0x0051\-0x0061: r4 'state' Ljava\/lang\/Object;\l  0x0051\-0x0061: r5 '$i$a$\-loop\-ConflatedBroadcastChannel$offerInternal$1' I\l  0x0061\-0x0064: r14 'element' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_70;Node_70 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_75;
Node_74 -> Node_71;
Node_75 -> Node_76;
Node_76 -> Node_100;
Node_100 -> Node_77;
Node_100 -> Node_97;
Node_77 -> Node_78;
Node_78 -> Node_82;
Node_78 -> Node_103[style=dashed];
Node_82 -> Node_83;
Node_83 -> Node_84[style=dashed];
Node_83 -> Node_101;
Node_84 -> Node_85;
Node_85 -> Node_94;
Node_85 -> Node_102[style=dashed];
Node_94 -> Node_76;
Node_102 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_89;
Node_88 -> Node_93;
Node_93 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_71;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_104;
Node_91 -> Node_90;
Node_104 -> Node_93;
Node_101 -> Node_95;
Node_95 -> Node_96;
Node_96 -> Node_71;
Node_103 -> Node_79;
Node_79 -> Node_80;
Node_97 -> Node_98;
Node_98 -> Node_99;
Node_99 -> Node_71;
}

