digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.removeSubscriber([Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;)[Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;" {
Node_34 [shape=record,label="{34\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0000|0x0000: ARRAY_LENGTH  (r0 I:int) = (r11 I:??[] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])])  (LINE:141)\l0x0001: INVOKE  (r8 I:int) = \l  (r11 I:java.lang.Object[] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])])\l  (r12 I:java.lang.Object A[D('subscriber' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber)])\l type: STATIC call: kotlin.collections.ArraysKt.indexOf(java.lang.Object[], java.lang.Object):int A[MD:\<T\>:(T[], T):int (m)] (LINE:142)\l0x0005: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:143)\l0x0009: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x001b \l}"];
Node_38 [shape=record,label="{38\:\ 0x000c|0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:303)\l}"];
Node_39 [shape=record,label="{39\:\ 0x000d|0x000d: IF  (r8 I:??[int, byte, short, char] A[D('i' int)]) \< (0 ??[int, byte, short, char])  \-\> B:41:0x0011  (LINE:143)\l}"];
Node_40 [shape=record,label="{40\:\ 0x000f|0x000f: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0012|0x0012: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0015 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0015|0x0015: NEW_INSTANCE  (r1 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0017: INVOKE  (r1 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x001a|0x001a: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_35 [shape=record,label="{35\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0011|0x0011: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x001f  (LINE:144)\l}"];
Node_47 [shape=record,label="{47\:\ 0x001d|RETURN\l|0x001d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: RETURN  (r1 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x001f|0x001f: ARITH  (r1 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:145)\l0x0021: NEW_ARRAY  (r9 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[] \l0x0025: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:146)\l0x0026: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0028: CONST  (r6 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char])  (LINE:146)\l0x0029: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])]) \l0x002b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('update' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])]) \l0x002c: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) \l0x002d: INVOKE  \l  (r1 I:java.lang.Object[])\l  (r2 I:java.lang.Object[])\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlin.collections.ArraysKt.copyInto$default(java.lang.Object[], java.lang.Object[], int, int, int, int, java.lang.Object):java.lang.Object[] A[MD:(java.lang.Object[], java.lang.Object[], int, int, int, int, java.lang.Object):java.lang.Object[] (m)]\l0x0033: ARITH  (r4 I:int) = (r8 I:int A[D('i' int)]) + (1 int)  (LINE:153)\l0x0035: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:150)\l0x0036: CONST  (r6 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l0x0038: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) \l0x0039: INVOKE  \l  (r1 I:java.lang.Object[])\l  (r2 I:java.lang.Object[])\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlin.collections.ArraysKt.copyInto$default(java.lang.Object[], java.lang.Object[], int, int, int, int, java.lang.Object):java.lang.Object[] A[MD:(java.lang.Object[], java.lang.Object[], int, int, int, int, java.lang.Object):java.lang.Object[] (m)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x003c|RETURN\l|0x003c: RETURN  \l  (r9 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] A[D('update' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[])])\l  (LINE:155)\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] kotlinx.coroutines.channels.ConflatedBroadcastChannel.removeSubscriber((r10 'this' I:kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r11 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\> A[D('subscriber' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:48:0x001e \-\> B:35:?, CROSS_EDGE: B:50:0x003c \-\> B:35:?, CROSS_EDGE: B:41:0x0011 \-\> B:42:0x0012, CROSS_EDGE: B:37:0x000a \-\> B:46:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0012: r1 '$i$a$\-assert\-ConflatedBroadcastChannel$removeSubscriber$1' I\l  0x0001\-0x003c: r0 'n' I\l  0x0005\-0x003c: r8 'i' I\l  0x0023\-0x003c: r9 'update' [Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;\l  \-1 \-0x003c: r11 'list' [Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;\l  \-1 \-0x003c: r12 'subscriber' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;\lTYPE_VARS: [E]\lSIGNATURE: ([Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;)[Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;\l}"];
MethodNode -> Node_34;Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_46[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_35;
Node_41 -> Node_42;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_49;
Node_47 -> Node_35;
Node_49 -> Node_50;
Node_50 -> Node_35;
}

