digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.close(Ljava\/lang\/Throwable;)Z" {
Node_58 [shape=record,label="{58\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_60 [shape=record,label="{60\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY])  (LINE:160)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0002|LOOP_START\lLOOP:0: B:61:0x0002\-\>B:70:0x0021\l|0x0003: IGET  (r2 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel A[D('$this$loop$iv' kotlinx.coroutines.channels.ConflatedBroadcastChannel)])\l kotlinx.coroutines.channels.ConflatedBroadcastChannel._state java.lang.Object  (LINE:305)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed  (LINE:162)\l0x0009: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x000a|0x000a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x000d \l}"];
Node_64 [shape=record,label="{64\:\ 0x000d|0x000d: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.channels.ConflatedBroadcastChannel$State  (LINE:163)\l}"];
Node_65 [shape=record,label="{65\:\ 0x000f|0x000f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x0041 \l}"];
Node_66 [shape=record,label="{66\:\ 0x0011|0x0011: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cause' java.lang.Throwable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0016  (LINE:164)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0013|0x0013: SGET  (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) =  kotlinx.coroutines.channels.ConflatedBroadcastChannel.CLOSED kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed \l}"];
Node_69 [shape=record,label="{69\:\ 0x001b|0x001b: SGET  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.channels.ConflatedBroadcastChannel._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:165)\l0x001d: INVOKE  (r6 I:boolean) = \l  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r12 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r4 I:java.lang.Object A[D('update' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_70 [shape=record,label="{70\:\ 0x0021|LOOP_END\lLOOP:0: B:61:0x0002\-\>B:70:0x0021\l|0x0021: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0002 \l}"];
Node_83 [shape=record,label="{83\:\ 0x0023|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0023|0x0023: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:166)\l0x0024: CHECK_CAST (r6 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) (r6 I:??[OBJECT, ARRAY]) \l0x0026: IGET  (r6 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[]) = (r6 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) kotlinx.coroutines.channels.ConflatedBroadcastChannel.State.subscribers kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[] \l}"];
Node_72 [shape=record,label="{72\:\ 0x0028|0x0028: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x002b \l}"];
Node_74 [shape=record,label="{74\:\ 0x002b|0x002b: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002c: ARRAY_LENGTH  (r8 I:int) = (r6 I:??[] A[D('$this$forEach$iv' java.lang.Object[])])  (LINE:306)\l}"];
Node_75 [shape=record,label="{75\:\ 0x002d|LOOP_START\lLOOP:1: B:75:0x002d\-\>B:76:0x002f\l|0x002d: IF  (r5 I:??[int, byte, short, char]) \>= (r8 I:??[int, byte, short, char])  \-\> B:86:0x003a \l}"];
Node_76 [shape=record,label="{76\:\ 0x002f|LOOP_END\lLOOP:1: B:75:0x002d\-\>B:76:0x002f\l|0x002f: AGET  (r9 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][] A[D('$this$forEach$iv' java.lang.Object[])]), (r5 I:??[int, short, byte, char]) \l0x0031: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0033: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0034: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0035: INVOKE  \l  (r10 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber A[D('it' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber)])\l  (r13 I:java.lang.Throwable A[D('cause' java.lang.Throwable)])\l type: VIRTUAL call: kotlinx.coroutines.channels.ConflatedBroadcastChannel.Subscriber.close(java.lang.Throwable):boolean A[MD:(java.lang.Throwable):boolean (m)] (LINE:166)\l}"];
Node_86 [shape=record,label="{86\:\ 0x003a|SYNTHETIC\l}"];
Node_78 [shape=record,label="{78\:\ 0x003a|0x003a: INVOKE  \l  (r12 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel)\l  (r13 I:java.lang.Throwable A[D('cause' java.lang.Throwable)])\l type: DIRECT call: kotlinx.coroutines.channels.ConflatedBroadcastChannel.invokeOnCloseHandler(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (m)] (LINE:167)\l0x003d: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:168)\l}"];
Node_79 [shape=record,label="{79\:\ 0x003e|RETURN\l|0x003e: RETURN  (r5 I:boolean) \l}"];
Node_59 [shape=record,label="{59\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_68 [shape=record,label="{68\:\ 0x0016|0x0016: NEW_INSTANCE  (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) =  kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed \l0x0018: INVOKE  \l  (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed)\l  (r13 I:java.lang.Throwable A[D('cause' java.lang.Throwable)])\l type: DIRECT call: kotlinx.coroutines.channels.ConflatedBroadcastChannel.Closed.\<init\>(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (m)]\l}"];
Node_85 [shape=record,label="{85\:\ 0x0041|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0041|0x0041: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:168)\l0x0043: CONST_STR  (r5 I:java.lang.String) =  \"Invalid state \"  (LINE:171)\l0x0045: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r2 I:java.lang.Object A[D('state' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0049: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004d: INVOKE  (r4 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_82 [shape=record,label="{82\:\ 0x0050|0x0050: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_84 [shape=record,label="{84\:\ 0x000c|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x000c|RETURN\l|0x000c: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.channels.ConflatedBroadcastChannel.close((r12 'this' I:kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r13 I:java.lang.Throwable A[D('cause' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:76:0x002f \-\> B:75:0x002d, CROSS_EDGE: B:79:0x003e \-\> B:59:?, CROSS_EDGE: B:72:0x0028 \-\> B:78:0x003a, BACK_EDGE: B:70:0x0021 \-\> B:61:0x0002, CROSS_EDGE: B:68:0x0016 \-\> B:69:0x001b, CROSS_EDGE: B:82:0x0050 \-\> B:59:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lDebug Info:\l  0x0031\-0x0039: r9 'element$iv' Ljava\/lang\/Object;\l  0x0034\-0x0039: r10 'it' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;\l  0x0035\-0x0039: r11 '$i$a$\-forEach\-ConflatedBroadcastChannel$close$1$1' I\l  0x002b\-0x003a: r6 '$this$forEach$iv' [Ljava\/lang\/Object;\l  0x002c\-0x003a: r7 '$i$f$forEach' I\l  0x001b\-0x003f: r4 'update' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Closed;\l  0x0005\-0x0040: r2 'state' Ljava\/lang\/Object;\l  0x0006\-0x0040: r3 '$i$a$\-loop\-ConflatedBroadcastChannel$close$1' I\l  0x0001\-0x0050: r0 '$this$loop$iv' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel;\l  0x0002\-0x0050: r1 '$i$f$loop' I\l  0x0041\-0x0050: r2 'state' Ljava\/lang\/Object;\l  0x0041\-0x0050: r3 '$i$a$\-loop\-ConflatedBroadcastChannel$close$1' I\l  \-1 \-0x0050: r13 'cause' Ljava\/lang\/Throwable;\lREPLACED_BY: kotlinx.coroutines.channels.ConflatedBroadcastChannel.cancel(java.lang.Throwable):boolean\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.BroadcastChannel.cancel(java.lang.Throwable):boolean]\l}"];
MethodNode -> Node_58;Node_58 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_64;
Node_62 -> Node_84[style=dashed];
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_85;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_61;
Node_70 -> Node_83[style=dashed];
Node_83 -> Node_71;
Node_71 -> Node_72;
Node_72 -> Node_74;
Node_72 -> Node_78[style=dashed];
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_86;
Node_76 -> Node_75;
Node_86 -> Node_78;
Node_78 -> Node_79;
Node_79 -> Node_59;
Node_68 -> Node_69;
Node_85 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_59;
Node_84 -> Node_63;
Node_63 -> Node_59;
}

