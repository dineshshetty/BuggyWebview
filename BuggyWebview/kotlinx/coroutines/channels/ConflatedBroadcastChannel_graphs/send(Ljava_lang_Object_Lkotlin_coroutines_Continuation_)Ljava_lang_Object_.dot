digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.send(Ljava\/lang\/Object;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed r0 = offerInternal(r4)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0004|if (r0 != null) goto L9\l}"];
Node_26 [shape=record,label="{26\:\ 0x0006}"];
Node_27 [shape=record,label="{27\:\ 0x000b|if (kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED() != null) goto L7\l}"];
Node_28 [shape=record,label="{28\:\ 0x000d|RETURN\l|return null\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x000e}"];
Node_30 [shape=record,label="{30\:\ 0x0010|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_31 [shape=record,label="{31\:\ 0x0011}"];
Node_32 [shape=record,label="{32\:\ 0x0016|throw r0.getSendException()\l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.channels.ConflatedBroadcastChannel.send((r3v0 'this' kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r4v0 E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0010 \-\> B:23:?, CROSS_EDGE: B:32:0x0016 \-\> B:23:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.SendChannel.send(E, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_23;
Node_29 -> Node_30;
Node_30 -> Node_23;
Node_31 -> Node_32;
Node_32 -> Node_23;
}

