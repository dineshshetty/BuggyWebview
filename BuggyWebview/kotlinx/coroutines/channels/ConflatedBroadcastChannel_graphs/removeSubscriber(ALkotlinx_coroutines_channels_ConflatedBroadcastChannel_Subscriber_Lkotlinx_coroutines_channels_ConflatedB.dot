digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.removeSubscriber([Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;)[Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber;" {
Node_34 [shape=record,label="{34\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0000|int r0 = r11.length\lint r8 = kotlin.collections.ArraysKt.indexOf(r11, r12)\l}"];
Node_37 [shape=record,label="{37\:\ 0x000a|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_38 [shape=record,label="{38\:\ 0x000c}"];
Node_39 [shape=record,label="{39\:\ 0x000d|if (r8 \< 0) goto L10\l}"];
Node_40 [shape=record,label="{40\:\ 0x000f|r3 = true\l}"];
Node_42 [shape=record,label="{42\:\ 0x0012|PHI: r3 \l  PHI: (r3v3 boolean) = (r3v2 boolean), (r3v4 boolean) binds: [B:41:0x0011, B:40:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L7\l}"];
Node_44 [shape=record,label="{44\:\ 0x0015}"];
Node_45 [shape=record,label="{45\:\ 0x001a|throw new java.lang.AssertionError()\l}"];
Node_35 [shape=record,label="{35\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0011|r3 = false\l}"];
Node_46 [shape=record,label="{46\:\ 0x001b|if (r0 != 1) goto L13\l}"];
Node_47 [shape=record,label="{47\:\ 0x001d|RETURN\l|return null\l}"];
Node_49 [shape=record,label="{49\:\ 0x001f|kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[] r9 = new kotlinx.coroutines.channels.ConflatedBroadcastChannel.Subscriber[r0 + (\-1)]\lkotlin.collections.ArraysKt.copyInto$default(r11, r9, 0, 0, r8, 6, null)\lkotlin.collections.ArraysKt.copyInto$default(r11, r9, r8, r8 + 1, 0, 8, null)\l}"];
Node_50 [shape=record,label="{50\:\ 0x003c|RETURN\l|return r9\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] kotlinx.coroutines.channels.ConflatedBroadcastChannel.removeSubscriber((r10v0 'this' kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r11v0 kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\>[] A[D('list' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber\<E\> A[D('subscriber' kotlinx.coroutines.channels.ConflatedBroadcastChannel$Subscriber), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:48:0x001e \-\> B:35:?, CROSS_EDGE: B:50:0x003c \-\> B:35:?, CROSS_EDGE: B:41:0x0011 \-\> B:42:0x0012, CROSS_EDGE: B:37:0x000a \-\> B:46:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: ([Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;)[Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel$Subscriber\<TE;\>;\l}"];
MethodNode -> Node_34;Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_46[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_35;
Node_41 -> Node_42;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_49;
Node_47 -> Node_35;
Node_49 -> Node_50;
Node_50 -> Node_35;
}

