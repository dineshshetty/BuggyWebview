digraph "CFG forkotlinx.coroutines.channels.ConflatedBroadcastChannel.getValue()Ljava\/lang\/Object;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY])  (LINE:74)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: IGET  (r2 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel A[D('$this$loop$iv' kotlinx.coroutines.channels.ConflatedBroadcastChannel)])\l kotlinx.coroutines.channels.ConflatedBroadcastChannel._state java.lang.Object  (LINE:297)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed  (LINE:76)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0009|0x0009: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0036 \l}"];
Node_36 [shape=record,label="{36\:\ 0x000b|0x000b: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.channels.ConflatedBroadcastChannel$State  (LINE:77)\l}"];
Node_37 [shape=record,label="{37\:\ 0x000d|0x000d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0026 \l}"];
Node_38 [shape=record,label="{38\:\ 0x000f|0x000f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:78)\l0x0010: CHECK_CAST (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) (r4 I:??[OBJECT, ARRAY]) \l0x0012: IGET  (r4 I:java.lang.Object) = (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) kotlinx.coroutines.channels.ConflatedBroadcastChannel.State.value java.lang.Object \l0x0014: SGET  (r5 I:kotlinx.coroutines.internal.Symbol) =  kotlinx.coroutines.channels.ConflatedBroadcastChannel.UNDEFINED kotlinx.coroutines.internal.Symbol \l}"];
Node_39 [shape=record,label="{39\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x001e \l}"];
Node_40 [shape=record,label="{40\:\ 0x0018|0x0018: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:79)\l0x0019: CHECK_CAST (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) (r4 I:??[OBJECT, ARRAY]) \l0x001b: IGET  (r4 I:java.lang.Object) = (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$State) kotlinx.coroutines.channels.ConflatedBroadcastChannel.State.value java.lang.Object \l}"];
Node_41 [shape=record,label="{41\:\ 0x001d|RETURN\l|0x001d: RETURN  (r4 I:E) \l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:78)\l0x0020: CONST_STR  (r5 I:java.lang.String) =  \"No value\" \l0x0022: INVOKE  (r4 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0025|0x0025: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0026|0x0026: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:79)\l0x0028: CONST_STR  (r5 I:java.lang.String) =  \"Invalid state \"  (LINE:81)\l0x002a: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r2 I:java.lang.Object A[D('state' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x002e: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0032: INVOKE  (r4 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0035|0x0035: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0036|0x0036: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:76)\l0x0037: CHECK_CAST (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) = (kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) (r4 I:??[OBJECT, ARRAY]) \l0x0039: INVOKE  (r4 I:java.lang.Throwable) = (r4 I:kotlinx.coroutines.channels.ConflatedBroadcastChannel$Closed) type: VIRTUAL call: kotlinx.coroutines.channels.ConflatedBroadcastChannel.Closed.getValueException():java.lang.Throwable A[MD:():java.lang.Throwable (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x003d|0x003d: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final E kotlinx.coroutines.channels.ConflatedBroadcastChannel.getValue((r6 'this' I:kotlinx.coroutines.channels.ConflatedBroadcastChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x0025 \-\> B:33:?, CROSS_EDGE: B:45:0x0035 \-\> B:33:?, CROSS_EDGE: B:47:0x003d \-\> B:33:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x003d: r0 '$this$loop$iv' Lkotlinx\/coroutines\/channels\/ConflatedBroadcastChannel;\l  0x0002\-0x003d: r1 '$i$f$loop' I\l  0x0005\-0x003d: r2 'state' Ljava\/lang\/Object;\l  0x0006\-0x003d: r3 '$i$a$\-loop\-ConflatedBroadcastChannel$value$1' I\lTYPE_VARS: [E]\lSIGNATURE: ()TE;\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_46;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_44;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_41 -> Node_33;
Node_42 -> Node_43;
Node_43 -> Node_33;
Node_44 -> Node_45;
Node_45 -> Node_33;
Node_46 -> Node_47;
Node_47 -> Node_33;
}

