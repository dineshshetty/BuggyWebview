digraph "CFG forkotlinx.coroutines.channels.ConflatedChannel.isEmpty()Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:java.util.concurrent.locks.ReentrantLock) = (r5 I:kotlinx.coroutines.channels.ConflatedChannel) kotlinx.coroutines.channels.ConflatedChannel.lock java.util.concurrent.locks.ReentrantLock  (LINE:26)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$withLock$iv' java.util.concurrent.locks.ReentrantLock)])  (LINE:145)\l0x0004: CHECK_CAST (r2 I:java.util.concurrent.locks.Lock) = (java.util.concurrent.locks.Lock) (r2 I:??[OBJECT, ARRAY]) \l0x0006: INVOKE  (r2 I:java.util.concurrent.locks.Lock) type: INTERFACE call: java.util.concurrent.locks.Lock.lock():void A[MD:():void (c)]\l0x0009: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:14:0x000a), top: B:20:0x000a \}\lCatch: all \-\> 0x0013\l|0x000a: INVOKE  (r4 I:boolean) = (r5 I:kotlinx.coroutines.channels.ConflatedChannel) type: VIRTUAL call: kotlinx.coroutines.channels.ConflatedChannel.isEmptyImpl():boolean A[Catch: all \-\> 0x0013, MD:():boolean (m), TRY_ENTER, TRY_LEAVE] (LINE:26)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|0x000e: INVOKE  (r2 I:java.util.concurrent.locks.Lock) type: INTERFACE call: java.util.concurrent.locks.Lock.unlock():void A[MD:():void (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|RETURN\l|0x0012: RETURN  (r4 I:boolean)  (LINE:26)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|ExcHandler: all \-\> 0x0013\l|0x0013: MOVE_EXCEPTION  (r3 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0013]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: INVOKE  (r2 I:java.util.concurrent.locks.Lock) type: INTERFACE call: java.util.concurrent.locks.Lock.unlock():void A[MD:():void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|0x0017: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.channels.ConflatedChannel.isEmpty((r5 'this' I:kotlinx.coroutines.channels.ConflatedChannel\<E\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0017 \-\> B:12:?, CROSS_EDGE: B:20:0x000a \-\> B:17:0x0013\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:14:0x000a), top: B:20:0x000a \}\lTYPE_VARS: [E]\lDebug Info:\l  0x000a\-0x000e: r3 '$i$a$\-withLock\-ConflatedChannel$isEmpty$1' I\l  0x0002\-0x0012: r0 '$this$withLock$iv' Ljava\/util\/concurrent\/locks\/ReentrantLock;\l  0x0003\-0x0012: r1 '$i$f$withLock' I\l  0x0013\-0x0017: r0 '$this$withLock$iv' Ljava\/util\/concurrent\/locks\/ReentrantLock;\l  0x0013\-0x0017: r1 '$i$f$withLock' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.ReceiveChannel.isEmpty():boolean]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_17;
Node_14 -> Node_15;
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_21 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
}

