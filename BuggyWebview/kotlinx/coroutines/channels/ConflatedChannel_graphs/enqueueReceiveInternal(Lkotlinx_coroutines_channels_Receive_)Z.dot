digraph "CFG forkotlinx.coroutines.channels.ConflatedChannel.enqueueReceiveInternal(Lkotlinx\/coroutines\/channels\/Receive;)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|java.util.concurrent.locks.ReentrantLock r0 = r5.lock\ljava.util.concurrent.locks.Lock r2 = r0\lr2.lock()\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:14:0x000a), top: B:20:0x000a \}\lCatch: all \-\> 0x0013\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|DONT_GENERATE\l|r2.unlock()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|RETURN\l|return super.enqueueReceiveInternal(r6)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|ExcHandler: all \-\> 0x0013\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|FINALLY_INSNS\l|r2.unlock()\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|throw r3\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.channels.ConflatedChannel.enqueueReceiveInternal((r5v0 'this' kotlinx.coroutines.channels.ConflatedChannel\<E\> A[IMMUTABLE_TYPE, THIS]), (r6v0 kotlinx.coroutines.channels.Receive\<? super E\> A[D('receive' kotlinx.coroutines.channels.Receive), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0017 \-\> B:12:?, CROSS_EDGE: B:20:0x000a \-\> B:17:0x0013\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0013, blocks: (B:14:0x000a), top: B:20:0x000a \}\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlinx\/coroutines\/channels\/Receive\<\-TE;\>;)Z\lMETHOD_OVERRIDE: [kotlinx.coroutines.channels.AbstractChannel.enqueueReceiveInternal(kotlinx.coroutines.channels.Receive\<? super E\>):boolean]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_17;
Node_14 -> Node_15;
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_21 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
}

