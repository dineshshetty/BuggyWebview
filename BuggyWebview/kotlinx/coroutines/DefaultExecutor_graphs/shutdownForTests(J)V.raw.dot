digraph "CFG forkotlinx.coroutines.DefaultExecutor.shutdownForTests(J)V" {
Node_35 [shape=record,label="{35\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0000|0x0000: MONITOR_ENTER  (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_64 [shape=record,label="{64\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_38 [shape=record,label="{38\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x0001: INVOKE  (r0 I:long) =  type: STATIC call: java.lang.System.currentTimeMillis():long A[Catch: all \-\> 0x0049, MD:():long (c), TRY_ENTER] (LINE:162)\l0x0005: ARITH  (r0 I:long) = (r0 I:long) + (r8 I:long A[D('timeout' long)]) A[Catch: all \-\> 0x0049]\l0x0006: INVOKE  (r2 I:boolean) = (r7 I:kotlinx.coroutines.DefaultExecutor) type: DIRECT call: kotlinx.coroutines.DefaultExecutor.isShutdownRequested():boolean A[Catch: all \-\> 0x0049, MD:():boolean (m)] (LINE:163)\l}"];
Node_39 [shape=record,label="{39\:\ 0x000a|0x000a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x000f \l}"];
Node_40 [shape=record,label="{40\:\ 0x000c|TryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x000c: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x000d: SPUT  (r2 I:int) kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0049]\l}"];
Node_69 [shape=record,label="{69\:\ 0x000f|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x000f|LOOP_START\lTryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lLOOP:0: B:41:0x000f\-\>B:57:0x003d\lCatch: all \-\> 0x0049\l|0x000f: SGET  (r2 I:int) =  kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0049] (LINE:165)\l0x0011: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0012|0x0012: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0044 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0014|TryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x0014: SGET  (r2 I:java.lang.Thread) =  kotlinx.coroutines.DefaultExecutor._thread java.lang.Thread A[Catch: all \-\> 0x0049]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x0044 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0018|TryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x0018: SGET  (r2 I:java.lang.Thread) =  kotlinx.coroutines.DefaultExecutor._thread java.lang.Thread A[Catch: all \-\> 0x0049] (LINE:166)\l}"];
Node_46 [shape=record,label="{46\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x001d \l}"];
Node_47 [shape=record,label="{47\:\ 0x001c|0x001c: GOTO  \-\> 0x0030 \l}"];
Node_54 [shape=record,label="{54\:\ 0x0030|TryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x0030: INVOKE  (r2 I:long) =  type: STATIC call: java.lang.System.currentTimeMillis():long A[Catch: all \-\> 0x0049, MD:():long (c)] (LINE:167)\l0x0034: ARITH  (r2 I:long) = (r0 I:long A[D('deadline' long)]) \- (r2 I:long) A[Catch: all \-\> 0x0049]\l0x0036: CONST  (r4 I:??[long, double]) = (0 ??[long, double])  (LINE:168)\l0x0038: CMP_L  (r6 I:int) = (r2 I:long A[D('remaining' long)]), (r4 I:long) \l}"];
Node_55 [shape=record,label="{55\:\ 0x003a|0x003a: IF  (r6 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:57:0x003d \l}"];
Node_57 [shape=record,label="{57\:\ 0x003d|LOOP_END\lTryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lLOOP:0: B:41:0x000f\-\>B:57:0x003d\lCatch: all \-\> 0x0049\l|0x003d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:169)\l0x003e: CHECK_CAST (r4 I:java.lang.Object) = (java.lang.Object) (r4 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0049]\l0x0040: INVOKE  (r4 I:java.lang.Object), (r8 I:long A[D('timeout' long)]) type: VIRTUAL call: java.lang.Object.wait(long):void A[Catch: all \-\> 0x0049, MD:(long):void throws java.lang.InterruptedException (c)]\l0x0043: GOTO  \-\> 0x000f \l}"];
Node_68 [shape=record,label="{68\:\ 0x003c|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x003c|0x003c: GOTO  \-\> 0x0044 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0044|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x0044: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:172)\l0x0045: SPUT  (r2 I:int) kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0049, TRY_LEAVE]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0047|0x0047: MONITOR_EXIT  (r7 I:??[OBJECT, ARRAY])  (LINE:173)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0048|RETURN\l|0x0048: RETURN   \l}"];
Node_36 [shape=record,label="{36\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_65 [shape=record,label="{65\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_48 [shape=record,label="{48\:\ 0x001d|TryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x001d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:187)\l0x001e: INVOKE  (r4 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[Catch: all \-\> 0x0049, MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:166)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0022|0x0022: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0026 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0024|0x0024: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: GOTO  \-\> 0x002b \l}"];
Node_52 [shape=record,label="{52\:\ 0x002b|0x002b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0030 \l}"];
Node_53 [shape=record,label="{53\:\ 0x002d|TryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x002d: INVOKE  (r2 I:java.lang.Thread A[D('it' java.lang.Thread)]) type: STATIC call: java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread):void A[Catch: all \-\> 0x0049, MD:(java.lang.Thread):void (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x0026|TryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\lCatch: all \-\> 0x0049\l|0x0026: INVOKE  (r4 I:kotlinx.coroutines.AbstractTimeSource), (r2 I:java.lang.Thread A[D('it' java.lang.Thread)]) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.unpark(java.lang.Thread):void A[Catch: all \-\> 0x0049, MD:(java.lang.Thread):void (m)]\l0x0029: SGET  (r4 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x0049]\l}"];
Node_67 [shape=record,label="{67\:\ 0x0044|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0044|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0049|ExcHandler: all \-\> 0x0049\l|0x0049: MOVE_EXCEPTION  (r8 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0049] (LINE:161)\l}"];
Node_63 [shape=record,label="{63\:\ 0x004b|0x004b: THROW  (r8 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final synchronized void kotlinx.coroutines.DefaultExecutor.shutdownForTests((r7 'this' I:kotlinx.coroutines.DefaultExecutor A[IMMUTABLE_TYPE, THIS]), (r8 I:long A[D('timeout' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:63:0x004b \-\> B:36:?, BACK_EDGE: B:57:0x003d \-\> B:41:0x000f, CROSS_EDGE: B:53:0x002d \-\> B:54:0x0030, CROSS_EDGE: B:52:0x002b \-\> B:54:0x0030, CROSS_EDGE: B:51:0x0026 \-\> B:52:0x002b, CROSS_EDGE: B:44:0x0016 \-\> B:58:0x0044, CROSS_EDGE: B:42:0x0012 \-\> B:58:0x0044, CROSS_EDGE: B:39:0x000a \-\> B:41:0x000f, CROSS_EDGE: B:64:0x0001 \-\> B:61:0x0049\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0030: r2 'it' Ljava\/lang\/Thread;\l  0x001e\-0x0030: r3 '$i$a$\-let\-DefaultExecutor$shutdownForTests$1' I\l  0x0036\-0x0043: r2 'remaining' J\l  0x0006\-0x0049: r0 'deadline' J\l  \-1 \-0x0049: r8 'timeout' J\lTryCatch #0 \{all \-\> 0x0049, blocks: (B:38:0x0001, B:40:0x000c, B:41:0x000f, B:43:0x0014, B:45:0x0018, B:54:0x0030, B:57:0x003d, B:48:0x001d, B:53:0x002d, B:51:0x0026, B:58:0x0044), top: B:64:0x0001 \}\l}"];
MethodNode -> Node_35;Node_35 -> Node_37;
Node_37 -> Node_64;
Node_64 -> Node_38;
Node_64 -> Node_61;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_69;
Node_40 -> Node_69;
Node_69 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_66;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_67;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_57;
Node_55 -> Node_68[style=dashed];
Node_57 -> Node_41;
Node_68 -> Node_56;
Node_56 -> Node_58;
Node_58 -> Node_59;
Node_58 -> Node_65;
Node_59 -> Node_60;
Node_60 -> Node_36;
Node_65 -> Node_61;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_54;
Node_51 -> Node_52;
Node_67 -> Node_58;
Node_66 -> Node_58;
Node_61 -> Node_63;
Node_63 -> Node_36;
}

