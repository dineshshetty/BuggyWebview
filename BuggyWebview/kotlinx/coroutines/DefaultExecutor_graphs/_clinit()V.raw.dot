digraph "CFG forkotlinx.coroutines.DefaultExecutor.\<clinit\>()V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.DefaultExecutor) =  kotlinx.coroutines.DefaultExecutor \l0x0002: INVOKE  (r0 I:kotlinx.coroutines.DefaultExecutor) type: DIRECT call: kotlinx.coroutines.DefaultExecutor.\<init\>():void A[MD:():void (m)]\l0x0005: SPUT  (r0 I:kotlinx.coroutines.DefaultExecutor) kotlinx.coroutines.DefaultExecutor.INSTANCE kotlinx.coroutines.DefaultExecutor \l0x0008: CHECK_CAST (r0 I:kotlinx.coroutines.EventLoop) = (kotlinx.coroutines.EventLoop) (r0 I:??[OBJECT, ARRAY])  (LINE:32)\l0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:kotlinx.coroutines.EventLoop), (r1 I:boolean), (r2 I:int), (r3 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.EventLoop.incrementUseCount$default(kotlinx.coroutines.EventLoop, boolean, int, java.lang.Object):void A[MD:(kotlinx.coroutines.EventLoop, boolean, int, java.lang.Object):void (m)]\l0x0011: SGET  (r0 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit  (LINE:37)\l0x0014: CONST  (r1 I:??[long, double]) = (1000(0x3e8, double:4.94E\-321) ??[long, double])  (LINE:39)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{SecurityException \-\> 0x001d, blocks: (B:14:0x0016), top: B:20:0x0016 \}\lCatch: SecurityException \-\> 0x001d\l|0x0016: CONST_STR  (r3 I:java.lang.String) =  \"kotlinx.coroutines.DefaultExecutor.keepAlive\" A[TRY_ENTER]\l0x0018: INVOKE  (r1 I:java.lang.Long) = (r3 I:java.lang.String), (r1 I:long) type: STATIC call: java.lang.Long.getLong(java.lang.String, long):java.lang.Long A[Catch: SecurityException \-\> 0x001d, MD:(java.lang.String, long):java.lang.Long (c), TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0022|0x0022: INVOKE  (r1 I:long) = (r1 I:java.lang.Long) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)]\l0x0026: INVOKE  (r0 I:long) = (r0 I:java.util.concurrent.TimeUnit), (r1 I:long) type: VIRTUAL call: java.util.concurrent.TimeUnit.toNanos(long):long A[MD:(long):long (c)] (LINE:37)\l0x002a: SPUT  (r0 I:long) kotlinx.coroutines.DefaultExecutor.KEEP_ALIVE_NANOS long \l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|RETURN\l|0x002c: RETURN   \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|ExcHandler: SecurityException \-\> 0x001d\l|0x001d: MOVE_EXCEPTION  (r3 I:java.lang.SecurityException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: SecurityException \-\> 0x001d] (LINE:40)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001e|0x001e: INVOKE  (r1 I:java.lang.Long) = (r1 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)] (LINE:41)\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.DefaultExecutor.\<clinit\>()  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001e \-\> B:18:0x0022, CROSS_EDGE: B:20:0x0016 \-\> B:16:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001e\-0x0022: r3 'e' Ljava\/lang\/SecurityException;\lTryCatch #0 \{SecurityException \-\> 0x001d, blocks: (B:14:0x0016), top: B:20:0x0016 \}\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_16;
Node_14 -> Node_18;
Node_14 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_21 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

