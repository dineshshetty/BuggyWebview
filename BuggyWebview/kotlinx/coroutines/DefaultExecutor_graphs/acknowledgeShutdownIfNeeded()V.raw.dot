digraph "CFG forkotlinx.coroutines.DefaultExecutor.acknowledgeShutdownIfNeeded()V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: MONITOR_ENTER  (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:19:0x0001, B:24:0x000a), top: B:30:0x0001 \}\lCatch: all \-\> 0x0017\l|0x0001: INVOKE  (r0 I:boolean) = (r1 I:kotlinx.coroutines.DefaultExecutor) type: DIRECT call: kotlinx.coroutines.DefaultExecutor.isShutdownRequested():boolean A[Catch: all \-\> 0x0017, MD:():boolean (m), TRY_ENTER, TRY_LEAVE] (LINE:177)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0009 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|0x0007: MONITOR_EXIT  (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|RETURN\l|0x0008: RETURN   \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|0x0009: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:178)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:19:0x0001, B:24:0x000a), top: B:30:0x0001 \}\lCatch: all \-\> 0x0017\l|0x000a: SPUT  (r0 I:int) kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0017, TRY_ENTER]\l0x000c: INVOKE  (r1 I:kotlinx.coroutines.DefaultExecutor) type: VIRTUAL call: kotlinx.coroutines.DefaultExecutor.resetAll():void A[Catch: all \-\> 0x0017, MD:():void (m)] (LINE:179)\l0x000f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:180)\l0x0010: CHECK_CAST (r0 I:java.lang.Object) = (java.lang.Object) (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0017]\l0x0012: INVOKE  (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.notifyAll():void A[Catch: all \-\> 0x0017, MD:():void (c), TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|0x0015: MONITOR_EXIT  (r1 I:??[OBJECT, ARRAY])  (LINE:181)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|RETURN\l|0x0016: RETURN   \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|ExcHandler: all \-\> 0x0017\l|0x0017: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0017] (LINE:176)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0019|0x0019: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final synchronized void kotlinx.coroutines.DefaultExecutor.acknowledgeShutdownIfNeeded((r1 'this' I:kotlinx.coroutines.DefaultExecutor A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0016 \-\> B:17:?, CROSS_EDGE: B:29:0x0019 \-\> B:17:?, CROSS_EDGE: B:30:0x0001 \-\> B:27:0x0017\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:19:0x0001, B:24:0x000a), top: B:30:0x0001 \}\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_30;
Node_30 -> Node_19;
Node_30 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_17;
Node_31 -> Node_27;
Node_27 -> Node_29;
Node_29 -> Node_17;
}

