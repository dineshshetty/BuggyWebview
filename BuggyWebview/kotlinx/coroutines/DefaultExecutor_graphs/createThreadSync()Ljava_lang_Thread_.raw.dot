digraph "CFG forkotlinx.coroutines.DefaultExecutor.createThreadSync()Ljava\/lang\/Thread;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: MONITOR_ENTER  (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:16:0x0001, B:18:0x0005), top: B:24:0x0001 \}\lCatch: all \-\> 0x001d\l|0x0001: SGET  (r0 I:java.lang.Thread) =  kotlinx.coroutines.DefaultExecutor._thread java.lang.Thread A[Catch: all \-\> 0x001d, TRY_ENTER] (LINE:135)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x001b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:16:0x0001, B:18:0x0005), top: B:24:0x0001 \}\lCatch: all \-\> 0x001d\l|0x0005: NEW_INSTANCE  (r0 I:java.lang.Thread) =  java.lang.Thread A[Catch: all \-\> 0x001d]\l0x0007: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x0008: CHECK_CAST (r1 I:java.lang.Runnable) = (java.lang.Runnable) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x001d]\l0x000a: CONST_STR  (r2 I:java.lang.String) =  \"kotlinx.coroutines.DefaultExecutor\" \l0x000c: INVOKE  (r0 I:java.lang.Thread), (r1 I:java.lang.Runnable), (r2 I:java.lang.String) type: DIRECT call: java.lang.Thread.\<init\>(java.lang.Runnable, java.lang.String):void A[Catch: all \-\> 0x001d, MD:(java.lang.Runnable, java.lang.String):void (c)]\l0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0010: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: SPUT  (r1 I:java.lang.Thread A[D('$this$createThreadSync_u24lambda_u2d0' java.lang.Thread)]) kotlinx.coroutines.DefaultExecutor._thread java.lang.Thread A[Catch: all \-\> 0x001d] (LINE:136)\l0x0013: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:137)\l0x0014: INVOKE  (r1 I:java.lang.Thread A[D('$this$createThreadSync_u24lambda_u2d0' java.lang.Thread)]), (r3 I:boolean) type: VIRTUAL call: java.lang.Thread.setDaemon(boolean):void A[Catch: all \-\> 0x001d, MD:(boolean):void (c)]\l0x0017: INVOKE  (r1 I:java.lang.Thread A[D('$this$createThreadSync_u24lambda_u2d0' java.lang.Thread)]) type: VIRTUAL call: java.lang.Thread.start():void A[Catch: all \-\> 0x001d, MD:():void (c), TRY_LEAVE] (LINE:138)\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x001b|0x001b: MONITOR_EXIT  (r4 I:??[OBJECT, ARRAY])  (LINE:135)\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:java.lang.Thread) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|ExcHandler: all \-\> 0x001d\l|0x001d: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x001d] (LINE:134)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final synchronized java.lang.Thread kotlinx.coroutines.DefaultExecutor.createThreadSync((r4 'this' I:kotlinx.coroutines.DefaultExecutor A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001f \-\> B:14:?, CROSS_EDGE: B:17:0x0003 \-\> B:19:0x001b, CROSS_EDGE: B:24:0x0001 \-\> B:21:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x001b: r1 '$this$createThreadSync_u24lambda_u2d0' Ljava\/lang\/Thread;\l  0x0011\-0x001b: r2 '$i$a$\-apply\-DefaultExecutor$createThreadSync$1' I\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:16:0x0001, B:18:0x0005), top: B:24:0x0001 \}\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_24;
Node_24 -> Node_16;
Node_24 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_25 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_21 -> Node_23;
Node_23 -> Node_14;
}

