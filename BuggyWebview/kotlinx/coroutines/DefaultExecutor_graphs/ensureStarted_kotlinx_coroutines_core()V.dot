digraph "CFG forkotlinx.coroutines.DefaultExecutor.ensureStarted$kotlinx_coroutines_core()V" {
Node_37 [shape=record,label="{37\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0000|monitor\-enter(r5)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_40 [shape=record,label="{40\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|r1 = true\l}"];
Node_41 [shape=record,label="{41\:\ 0x0007|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L14\l}"];
Node_42 [shape=record,label="{42\:\ 0x0009|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l}"];
Node_43 [shape=record,label="{43\:\ 0x000c|if (kotlinx.coroutines.DefaultExecutor._thread != null) goto L13\l}"];
Node_44 [shape=record,label="{44\:\ 0x000e|r0 = 1\l}"];
Node_46 [shape=record,label="{46\:\ 0x0011|PHI: r0 \l  PHI: (r0v10 int) = (r0v9 int), (r0v12 int) binds: [B:45:0x0010, B:44:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == 0) goto L10\l}"];
Node_47 [shape=record,label="{47\:\ 0x0013}"];
Node_48 [shape=record,label="{48\:\ 0x0014|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l}"];
Node_49 [shape=record,label="{49\:\ 0x0019|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|throw new java.lang.AssertionError()     \/\/ Catch: java.lang.Throwable \-\> L47\l}"];
Node_38 [shape=record,label="{38\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0010|r0 = 0\l}"];
Node_50 [shape=record,label="{50\:\ 0x001a|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l}"];
Node_51 [shape=record,label="{51\:\ 0x001e|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L26\l}"];
Node_52 [shape=record,label="{52\:\ 0x0020|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l}"];
Node_53 [shape=record,label="{53\:\ 0x0023|if (kotlinx.coroutines.DefaultExecutor.debugStatus == 0) goto L22\l}"];
Node_54 [shape=record,label="{54\:\ 0x0025|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l}"];
Node_55 [shape=record,label="{55\:\ 0x0028|if (kotlinx.coroutines.DefaultExecutor.debugStatus != 3) goto L21\l}"];
Node_56 [shape=record,label="{56\:\ 0x002a}"];
Node_57 [shape=record,label="{57\:\ 0x002b|r1 = false\l}"];
Node_58 [shape=record,label="{58\:\ 0x002c|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v2 boolean), (r1v0 boolean) binds: [B:53:0x0023, B:57:0x002b, B:56:0x002a] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L24\l}"];
Node_59 [shape=record,label="{59\:\ 0x002e}"];
Node_60 [shape=record,label="{60\:\ 0x002f|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l}"];
Node_61 [shape=record,label="{61\:\ 0x0034|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|throw new java.lang.AssertionError()     \/\/ Catch: java.lang.Throwable \-\> L47\l}"];
Node_62 [shape=record,label="{62\:\ 0x0035|TryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|kotlinx.coroutines.DefaultExecutor.debugStatus = 0     \/\/ Catch: java.lang.Throwable \-\> L47\lcreateThreadSync()     \/\/ Catch: java.lang.Throwable \-\> L47\l}"];
Node_63 [shape=record,label="{63\:\ 0x003a|LOOP_START\lTryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lLOOP:0: B:63:0x003a\-\>B:65:0x003e\lCatch: all \-\> 0x0047\l}"];
Node_64 [shape=record,label="{64\:\ 0x003c|if (kotlinx.coroutines.DefaultExecutor.debugStatus != 0) goto L30\l}"];
Node_65 [shape=record,label="{65\:\ 0x003e|TRY_LEAVE\lLOOP_END\lTryCatch #0 \{, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lLOOP:0: B:63:0x003a\-\>B:65:0x003e\lCatch: all \-\> 0x0047\l|wait()     \/\/ Catch: java.lang.Throwable \-\> L47\l}"];
Node_73 [shape=record,label="{73\:\ 0x0045|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x0045|monitor\-exit(r5)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0046|RETURN\l|return\l}"];
Node_69 [shape=record,label="{69\:\ 0x0047|REMOVE\lExcHandler: all \-\> 0x0047\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_71 [shape=record,label="{71\:\ 0x0049|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public final synchronized void kotlinx.coroutines.DefaultExecutor.ensureStarted$kotlinx_coroutines_core((r5v0 'this' kotlinx.coroutines.DefaultExecutor A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:65:0x003e \-\> B:63:0x003a, CROSS_EDGE: B:61:0x0034 \-\> B:38:?, CROSS_EDGE: B:57:0x002b \-\> B:58:0x002c, CROSS_EDGE: B:53:0x0023 \-\> B:58:0x002c, CROSS_EDGE: B:51:0x001e \-\> B:62:0x0035, CROSS_EDGE: B:49:0x0019 \-\> B:38:?, CROSS_EDGE: B:45:0x0010 \-\> B:46:0x0011, CROSS_EDGE: B:41:0x0007 \-\> B:50:0x001a, CROSS_EDGE: B:71:0x0049 \-\> B:38:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_37;Node_37 -> Node_39;
Node_39 -> Node_72;
Node_72 -> Node_40;
Node_72 -> Node_69;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_50;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_38;
Node_45 -> Node_46;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_62;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_58;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_58;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_62;
Node_60 -> Node_61;
Node_61 -> Node_38;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_73;
Node_65 -> Node_63;
Node_73 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_38;
Node_69 -> Node_71;
Node_71 -> Node_38;
}

