digraph "CFG forkotlinx.coroutines.DefaultExecutor.\<clinit\>()V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlinx.coroutines.DefaultExecutor r0 = new kotlinx.coroutines.DefaultExecutor()\lkotlinx.coroutines.DefaultExecutor.INSTANCE = r0\lkotlinx.coroutines.EventLoop.incrementUseCount$default(r0, false, 1, null)\ljava.util.concurrent.TimeUnit r0 = java.util.concurrent.TimeUnit.MILLISECONDS\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{SecurityException \-\> 0x001d, blocks: (B:14:0x0016), top: B:20:0x0016 \}\lCatch: SecurityException \-\> 0x001d\l|java.lang.Long r1 = java.lang.Long.getLong(\"kotlinx.coroutines.DefaultExecutor.keepAlive\", kotlinx.coroutines.DefaultExecutor.DEFAULT_KEEP_ALIVE_MS)     \/\/ Catch: java.lang.SecurityException \-\> L1d\l}"];
Node_18 [shape=record,label="{18\:\ 0x0022|PHI: r1 \l  PHI: (r1v4 java.lang.Long) = (r1v3 java.lang.Long), (r1v6 java.lang.Long) binds: [B:17:0x001e, B:14:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.DefaultExecutor.KEEP_ALIVE_NANOS = r0.toNanos(r1.longValue())\l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|ExcHandler: SecurityException \-\> 0x001d\l}"];
Node_17 [shape=record,label="{17\:\ 0x001e|java.lang.Long r1 = java.lang.Long.valueOf(kotlinx.coroutines.DefaultExecutor.DEFAULT_KEEP_ALIVE_MS)\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.DefaultExecutor.\<clinit\>()  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001e \-\> B:18:0x0022, CROSS_EDGE: B:20:0x0016 \-\> B:16:0x001d\lINLINE_NOT_NEEDED\lTryCatch #0 \{SecurityException \-\> 0x001d, blocks: (B:14:0x0016), top: B:20:0x0016 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_16;
Node_14 -> Node_18;
Node_14 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_21 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
}

