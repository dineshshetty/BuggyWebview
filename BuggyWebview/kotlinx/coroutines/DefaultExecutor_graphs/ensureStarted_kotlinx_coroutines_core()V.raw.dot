digraph "CFG forkotlinx.coroutines.DefaultExecutor.ensureStarted$kotlinx_coroutines_core()V" {
Node_37 [shape=record,label="{37\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0000|0x0000: MONITOR_ENTER  (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_72 [shape=record,label="{72\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_40 [shape=record,label="{40\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0001: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[Catch: all \-\> 0x0047, MD:():boolean (m), TRY_ENTER] (LINE:145)\l0x0005: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x001a \l}"];
Node_42 [shape=record,label="{42\:\ 0x0009|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:187)\l0x000a: SGET  (r3 I:java.lang.Thread) =  kotlinx.coroutines.DefaultExecutor._thread java.lang.Thread A[Catch: all \-\> 0x0047] (LINE:145)\l}"];
Node_43 [shape=record,label="{43\:\ 0x000c|0x000c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0010 \l}"];
Node_44 [shape=record,label="{44\:\ 0x000e|0x000e: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$i$a$\-assert\-DefaultExecutor$ensureStarted$1' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: GOTO  \-\> 0x0011 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-DefaultExecutor$ensureStarted$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0014 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0013|0x0013: GOTO  \-\> 0x001a \l}"];
Node_48 [shape=record,label="{48\:\ 0x0014|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0014: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError A[Catch: all \-\> 0x0047]\l0x0016: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[Catch: all \-\> 0x0047, MD:():void (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0019|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0019: THROW  (r0 I:java.lang.Throwable) A[Catch: all \-\> 0x0047]\l}"];
Node_38 [shape=record,label="{38\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$a$\-assert\-DefaultExecutor$ensureStarted$1' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x001a|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x001a: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[Catch: all \-\> 0x0047, MD:():boolean (m)] (LINE:146)\l}"];
Node_51 [shape=record,label="{51\:\ 0x001e|0x001e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0035 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0020|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0020: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:187)\l0x0021: SGET  (r3 I:int) =  kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0047] (LINE:146)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0023|0x0023: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x002c \l}"];
Node_54 [shape=record,label="{54\:\ 0x0025|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0025: SGET  (r3 I:int) =  kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0047]\l0x0027: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0028|0x0028: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x002b \l}"];
Node_56 [shape=record,label="{56\:\ 0x002a|0x002a: GOTO  \-\> 0x002c \l}"];
Node_57 [shape=record,label="{57\:\ 0x002b|0x002b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x002c|0x002c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x002f \l}"];
Node_59 [shape=record,label="{59\:\ 0x002e|0x002e: GOTO  \-\> 0x0035 \l}"];
Node_60 [shape=record,label="{60\:\ 0x002f|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x002f: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError A[Catch: all \-\> 0x0047]\l0x0031: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[Catch: all \-\> 0x0047, MD:():void (c)]\l}"];
Node_61 [shape=record,label="{61\:\ 0x0034|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0034: THROW  (r0 I:java.lang.Throwable) A[Catch: all \-\> 0x0047]\l}"];
Node_62 [shape=record,label="{62\:\ 0x0035|TryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lCatch: all \-\> 0x0047\l|0x0035: SPUT  (r2 I:int) kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0047] (LINE:147)\l0x0037: INVOKE  (r5 I:kotlinx.coroutines.DefaultExecutor) type: DIRECT call: kotlinx.coroutines.DefaultExecutor.createThreadSync():java.lang.Thread A[Catch: all \-\> 0x0047, MD:():java.lang.Thread (m)] (LINE:148)\l}"];
Node_63 [shape=record,label="{63\:\ 0x003a|LOOP_START\lTryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lLOOP:0: B:63:0x003a\-\>B:65:0x003e\lCatch: all \-\> 0x0047\l|0x003a: SGET  (r0 I:int) =  kotlinx.coroutines.DefaultExecutor.debugStatus int A[Catch: all \-\> 0x0047] (LINE:149)\l}"];
Node_64 [shape=record,label="{64\:\ 0x003c|0x003c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0045 \l}"];
Node_65 [shape=record,label="{65\:\ 0x003e|TRY_LEAVE\lLOOP_END\lTryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\lLOOP:0: B:63:0x003a\-\>B:65:0x003e\lCatch: all \-\> 0x0047\l|0x003e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY]) \l0x003f: CHECK_CAST (r0 I:java.lang.Object) = (java.lang.Object) (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0047]\l0x0041: INVOKE  (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.wait():void A[Catch: all \-\> 0x0047, MD:():void throws java.lang.InterruptedException (c), TRY_LEAVE]\l}"];
Node_73 [shape=record,label="{73\:\ 0x0045|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x0045|0x0045: MONITOR_EXIT  (r5 I:??[OBJECT, ARRAY])  (LINE:150)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0046|RETURN\l|0x0046: RETURN   \l}"];
Node_69 [shape=record,label="{69\:\ 0x0047|ExcHandler: all \-\> 0x0047\l|0x0047: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0047] (LINE:144)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0049|0x0049: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final synchronized void kotlinx.coroutines.DefaultExecutor.ensureStarted$kotlinx_coroutines_core((r5 'this' I:kotlinx.coroutines.DefaultExecutor A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:65:0x003e \-\> B:63:0x003a, CROSS_EDGE: B:61:0x0034 \-\> B:38:?, CROSS_EDGE: B:57:0x002b \-\> B:58:0x002c, CROSS_EDGE: B:53:0x0023 \-\> B:58:0x002c, CROSS_EDGE: B:51:0x001e \-\> B:62:0x0035, CROSS_EDGE: B:49:0x0019 \-\> B:38:?, CROSS_EDGE: B:45:0x0010 \-\> B:46:0x0011, CROSS_EDGE: B:41:0x0007 \-\> B:50:0x001a, CROSS_EDGE: B:71:0x0049 \-\> B:38:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0011: r0 '$i$a$\-assert\-DefaultExecutor$ensureStarted$1' I\l  0x0021\-0x002c: r0 '$i$a$\-assert\-DefaultExecutor$ensureStarted$2' I\lTryCatch #0 \{all \-\> 0x0047, blocks: (B:40:0x0001, B:42:0x0009, B:48:0x0014, B:49:0x0019, B:50:0x001a, B:52:0x0020, B:54:0x0025, B:60:0x002f, B:61:0x0034, B:62:0x0035, B:63:0x003a, B:65:0x003e), top: B:72:0x0001 \}\l}"];
MethodNode -> Node_37;Node_37 -> Node_39;
Node_39 -> Node_72;
Node_72 -> Node_40;
Node_72 -> Node_69;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_50;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_38;
Node_45 -> Node_46;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_62;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_58;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_58;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_62;
Node_60 -> Node_61;
Node_61 -> Node_38;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_73;
Node_65 -> Node_63;
Node_73 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_38;
Node_69 -> Node_71;
Node_71 -> Node_38;
}

