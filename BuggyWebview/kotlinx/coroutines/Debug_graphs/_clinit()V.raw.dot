digraph "CFG forkotlinx.coroutines.DebugKt.\<clinit\>()V" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<kotlinx.coroutines.CoroutineId\>) =  kotlinx.coroutines.CoroutineId.class  (LINE:67)\l0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: SPUT  (r0 I:boolean) kotlinx.coroutines.DebugKt.ASSERTIONS_ENABLED boolean \l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"kotlinx.coroutines.debug\"  (LINE:70)\l0x0007: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.SystemPropsKt.systemProp(java.lang.String):java.lang.String A[MD:(java.lang.String):java.lang.String (m)]\l0x000b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:71)\l}"];
Node_32 [shape=record,label="{32\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x005d \l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|0x000f: INVOKE  (r4 I:int) = (r1 I:java.lang.String A[D('value' java.lang.String)]) type: VIRTUAL call: java.lang.String.hashCode():int A[MD:():int (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0013|0x0013: SWITCH  (r4 I:??)\l case 0: goto B:45:0x0033\l case 3551: goto B:42:0x002a\l case 109935: goto B:39:0x0020\l case 3005871: goto B:36:0x0017\l default: goto B:48:0x003d \l}"];
Node_36 [shape=record,label="{36\:\ 0x0017|0x0017: CONST_STR  (r4 I:java.lang.String) =  \"auto\" \l0x0019: INVOKE  (r4 I:boolean) = (r1 I:java.lang.String A[D('value' java.lang.String)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x001d|0x001d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x003d \l}"];
Node_39 [shape=record,label="{39\:\ 0x0020|0x0020: CONST_STR  (r4 I:java.lang.String) =  \"off\" \l0x0022: INVOKE  (r4 I:boolean) = (r1 I:java.lang.String A[D('value' java.lang.String)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0026|0x0026: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x003d \l}"];
Node_41 [shape=record,label="{41\:\ 0x0028|0x0028: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:74)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0061|0x0062: SPUT  (r4 I:boolean) kotlinx.coroutines.DebugKt.DEBUG boolean  (LINE:70)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0064|0x0064: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x006f  (LINE:82)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0066|0x0066: CONST_STR  (r1 I:java.lang.String) =  \"kotlinx.coroutines.stacktrace.recovery\" \l0x0068: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r3 I:boolean) type: STATIC call: kotlinx.coroutines.internal.SystemPropsKt.systemProp(java.lang.String, boolean):boolean A[MD:(java.lang.String, boolean):boolean (m)]\l}"];
Node_54 [shape=record,label="{54\:\ 0x006c|0x006c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x006f \l}"];
Node_55 [shape=record,label="{55\:\ 0x006e|0x006e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x006f|0x006f: SPUT  (r0 I:boolean) kotlinx.coroutines.DebugKt.RECOVER_STACK_TRACES boolean \l0x0071: NEW_INSTANCE  (r0 I:java.util.concurrent.atomic.AtomicLong) =  java.util.concurrent.atomic.AtomicLong  (LINE:85)\l0x0073: CONST  (r1 I:??[long, double]) = (0 ??[long, double]) \l0x0075: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicLong), (r1 I:long) type: DIRECT call: java.util.concurrent.atomic.AtomicLong.\<init\>(long):void A[MD:(long):void (c)]\l0x0078: SPUT  (r0 I:java.util.concurrent.atomic.AtomicLong) kotlinx.coroutines.DebugKt.COROUTINE_ID java.util.concurrent.atomic.AtomicLong \l}"];
Node_57 [shape=record,label="{57\:\ 0x007a|RETURN\l|0x007a: RETURN   \l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x002a|0x002a: CONST_STR  (r4 I:java.lang.String) =  \"on\"  (LINE:71)\l0x002c: INVOKE  (r4 I:boolean) = (r1 I:java.lang.String A[D('value' java.lang.String)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0030|0x0030: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x003d \l}"];
Node_47 [shape=record,label="{47\:\ 0x003b|0x003b: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:73)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0033|0x0033: CONST_STR  (r4 I:java.lang.String) =  \"\" \l0x0035: INVOKE  (r4 I:boolean) = (r1 I:java.lang.String A[D('value' java.lang.String)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0039|0x0039: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x003d \l}"];
Node_48 [shape=record,label="{48\:\ 0x003d|0x003d: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:74)\l0x003f: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:75)\l0x0041: INVOKE  (r3 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0044: CONST_STR  (r4 I:java.lang.String) =  \"System property 'kotlinx.coroutines.debug' has unrecognized value '\" \l0x0046: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0049: INVOKE  (r3 I:java.lang.StringBuilder), (r1 I:java.lang.Object A[D('value' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x004c: CONST  (r4 I:??[int, float, short, byte, char]) = (39 ??[int, float, short, byte, char]) \l0x004e: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0051: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0055: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0059: INVOKE  (r0 I:java.lang.IllegalStateException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x005c|0x005c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_50 [shape=record,label="{50\:\ 0x005d|0x005d: INVOKE  (r4 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:72)\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.DebugKt.\<clinit\>()  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:57:0x007a \-\> B:30:?, CROSS_EDGE: B:54:0x006c \-\> B:56:0x006f, CROSS_EDGE: B:52:0x0064 \-\> B:56:0x006f, CROSS_EDGE: B:41:0x0028 \-\> B:51:0x0061, CROSS_EDGE: B:40:0x0026 \-\> B:48:0x003d, CROSS_EDGE: B:43:0x0030 \-\> B:48:0x003d, CROSS_EDGE: B:47:0x003b \-\> B:51:0x0061, CROSS_EDGE: B:46:0x0039 \-\> B:47:0x003b, CROSS_EDGE: B:46:0x0039 \-\> B:48:0x003d, CROSS_EDGE: B:34:0x0013 \-\> B:48:0x003d, CROSS_EDGE: B:32:0x000d \-\> B:50:0x005d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x0062: r1 'value' Ljava\/lang\/String;\l  0x000c\-0x0062: r2 '$i$a$\-let\-DebugKt$DEBUG$1' I\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_50;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_39;
Node_34 -> Node_42;
Node_34 -> Node_45;
Node_34 -> Node_48;
Node_36 -> Node_37;
Node_37 -> Node_48;
Node_37 -> Node_50[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_48;
Node_41 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_56;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_30;
Node_42 -> Node_43;
Node_43 -> Node_48;
Node_43 -> Node_47[style=dashed];
Node_47 -> Node_51;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_30;
Node_50 -> Node_51;
}

