digraph "CFG forkotlinx.coroutines.DebugKt.assert(Lkotlin\/jvm\/functions\/Function0;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:94)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0019 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.Object) = (r1 I:kotlin.jvm.functions.Function0 A[D('value' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[MD:():R (m)]\l0x000a: CHECK_CAST (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0013 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0015: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0019: RETURN   A[SYNTHETIC] (LINE:95)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|RETURN\lORIG_RETURN\l|0x0019: RETURN    (LINE:95)\l}"];
MethodNode[shape=record,label="{private static final void kotlinx.coroutines.DebugKt.assert((r1 I:kotlin.jvm.functions.Function0\<java.lang.Boolean\> A[D('value' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0019 \-\> B:12:?, CROSS_EDGE: B:14:0x0004 \-\> B:20:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0019: r1 'value' Lkotlin\/jvm\/functions\/Function0;\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function0\<Ljava\/lang\/Boolean;\>;)V\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_21[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_21 -> Node_12;
Node_20 -> Node_12;
}

