digraph "CFG forkotlinx.coroutines.EventLoopImplBase.getNextTime()J" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: INVOKE  (r0 I:long) = (r8 I:kotlinx.coroutines.EventLoopImplPlatform) type: SUPER call: kotlinx.coroutines.EventLoopImplPlatform.getNextTime():long A[MD:():long (m)] (LINE:209)\l0x0004: CONST  (r2 I:??[long, double]) = (0 ??[long, double]) \l0x0006: CMP_L  (r4 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0008|0x0008: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x000b \l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|RETURN\l|0x000a: RETURN  (r2 I:long) \l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x000b|0x000b: IGET  (r0 I:java.lang.Object) = (r8 I:kotlinx.coroutines.EventLoopImplBase) kotlinx.coroutines.EventLoopImplBase._queue java.lang.Object  (LINE:210)\l0x000e: CONST  (r4 I:??[long, double]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double])  (LINE:212)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0016 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|0x0016: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) kotlinx.coroutines.internal.LockFreeTaskQueueCore  (LINE:213)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0018|0x0018: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0058 \l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|0x001a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) \l0x001b: CHECK_CAST (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) (r1 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  (r1 I:boolean) = (r1 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.isEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0021|0x0021: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0024 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0023|RETURN\l|0x0023: RETURN  (r2 I:long) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0058|0x0058: INVOKE  (r1 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.EventLoop_commonKt.access$getCLOSED_EMPTY$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:214)\l}"];
Node_61 [shape=record,label="{61\:\ 0x005c|0x005c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x005f \l}"];
Node_62 [shape=record,label="{62\:\ 0x005e|RETURN\l|0x005e: RETURN  (r4 I:long) \l}"];
Node_63 [shape=record,label="{63\:\ 0x005f|RETURN\l|0x005f: RETURN  (r2 I:long)  (LINE:215)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0024|0x0024: IGET  (r1 I:java.lang.Object) = (r8 I:kotlinx.coroutines.EventLoopImplBase) kotlinx.coroutines.EventLoopImplBase._delayed java.lang.Object  (LINE:217)\l0x0026: CHECK_CAST (r1 I:kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) = (kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) (r1 I:??[OBJECT, ARRAY]) \l0x0028: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0029|0x0029: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x002d \l}"];
Node_47 [shape=record,label="{47\:\ 0x002b|0x002b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0033|0x0033: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0036 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0035|RETURN\l|0x0035: RETURN  (r4 I:long) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0036|0x0036: IGET  (r4 I:long) = \l  (r1 I:kotlinx.coroutines.EventLoopImplBase$DelayedTask A[D('nextDelayedTask' kotlinx.coroutines.EventLoopImplBase$DelayedTask)])\l kotlinx.coroutines.EventLoopImplBase.DelayedTask.nanoTime long  (LINE:218)\l0x0038: INVOKE  (r7 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x003c|0x003c: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x003f \l}"];
Node_54 [shape=record,label="{54\:\ 0x003f|0x003f: INVOKE  (r6 I:long) = (r7 I:kotlinx.coroutines.AbstractTimeSource) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.nanoTime():long A[MD:():long (m)]\l0x0043: INVOKE  (r6 I:java.lang.Long) = (r6 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x0047|0x0047: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x004e \l}"];
Node_56 [shape=record,label="{56\:\ 0x0049|0x0049: INVOKE  (r6 I:long) =  type: STATIC call: java.lang.System.nanoTime():long A[MD:():long (c)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0052|0x0052: ARITH  (r4 I:long) = (r4 I:long) \- (r6 I:long) \l0x0053: INVOKE  (r2 I:long) = (r4 I:long), (r2 I:long) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(long, long):long A[MD:(long, long):long (m)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0057|RETURN\l|0x0057: RETURN  (r2 I:long) \l}"];
Node_57 [shape=record,label="{57\:\ 0x004e|0x004e: INVOKE  (r6 I:long) = (r6 I:java.lang.Long) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x002d|0x002d: INVOKE  (r1 I:kotlinx.coroutines.internal.ThreadSafeHeapNode) = (r1 I:kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue) type: VIRTUAL call: kotlinx.coroutines.EventLoopImplBase.DelayedTaskQueue.peek():kotlinx.coroutines.internal.ThreadSafeHeapNode A[MD:():T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> (m)]\l0x0031: CHECK_CAST (r1 I:kotlinx.coroutines.EventLoopImplBase$DelayedTask) = (kotlinx.coroutines.EventLoopImplBase$DelayedTask) (r1 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public long kotlinx.coroutines.EventLoopImplBase.getNextTime((r8 'this' I:kotlinx.coroutines.EventLoopImplBase A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:44:0x0023 \-\> B:33:?, CROSS_EDGE: B:50:0x0035 \-\> B:33:?, CROSS_EDGE: B:59:0x0057 \-\> B:33:?, CROSS_EDGE: B:57:0x004e \-\> B:58:0x0052, CROSS_EDGE: B:52:0x003c \-\> B:55:0x0047, CROSS_EDGE: B:48:0x002d \-\> B:49:0x0033, CROSS_EDGE: B:62:0x005e \-\> B:33:?, CROSS_EDGE: B:63:0x005f \-\> B:33:?, CROSS_EDGE: B:38:0x0013 \-\> B:45:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0036\-0x0058: r1 'nextDelayedTask' Lkotlinx\/coroutines\/EventLoopImplBase$DelayedTask;\l  0x000d\-0x005f: r0 'queue' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.EventLoop.getNextTime():long]\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_33;
Node_37 -> Node_38;
Node_38 -> Node_40;
Node_38 -> Node_45[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_60;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_33;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_63;
Node_62 -> Node_33;
Node_63 -> Node_33;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_33;
Node_51 -> Node_52;
Node_52 -> Node_54;
Node_52 -> Node_55[style=dashed];
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_58;
Node_58 -> Node_59;
Node_59 -> Node_33;
Node_57 -> Node_58;
Node_48 -> Node_49;
}

