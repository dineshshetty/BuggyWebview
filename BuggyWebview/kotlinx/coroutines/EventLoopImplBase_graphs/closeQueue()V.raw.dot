digraph "CFG forkotlinx.coroutines.EventLoopImplBase.closeQueue()V" {
Node_40 [shape=record,label="{40\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:342)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0014 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:559)\l0x0007: INVOKE  (r0 I:boolean A[D('$i$a$\-assert\-EventLoopImplBase$closeQueue$1' int)]) = (r7 I:kotlinx.coroutines.EventLoopImplBase) type: DIRECT call: kotlinx.coroutines.EventLoopImplBase.isCompleted():boolean A[MD:():boolean (m)] (LINE:342)\l}"];
Node_45 [shape=record,label="{45\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$a$\-assert\-EventLoopImplBase$closeQueue$1' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x000e \l}"];
Node_47 [shape=record,label="{47\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0010: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x0013|0x0013: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_41 [shape=record,label="{41\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ 0x0014|0x0014: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:343)\l0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0016|LOOP_START\lLOOP:0: B:50:0x0016\-\>B:77:0x0016\l|0x0017: IGET  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.EventLoopImplBase A[D('$this$loop$iv' kotlinx.coroutines.EventLoopImplBase)]) kotlinx.coroutines.EventLoopImplBase._queue java.lang.Object  (LINE:561)\l0x0019: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x001b|0x001b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x002b  (LINE:345)\l}"];
Node_71 [shape=record,label="{71\:\ 0x002b|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x002b|0x002b: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) kotlinx.coroutines.internal.LockFreeTaskQueueCore  (LINE:346)\l}"];
Node_56 [shape=record,label="{56\:\ 0x002d|0x002d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0036 \l}"];
Node_59 [shape=record,label="{59\:\ 0x0036|0x0037: INVOKE  (r4 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.EventLoop_commonKt.access$getCLOSED_EMPTY$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:351)\l}"];
Node_60 [shape=record,label="{60\:\ 0x003b|0x003b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x003e \l}"];
Node_62 [shape=record,label="{62\:\ 0x003e|0x003e: NEW_INSTANCE  (r4 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore  (LINE:354)\l0x0040: CONST  (r5 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l0x0042: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0043: INVOKE  (r4 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore), (r5 I:int), (r6 I:boolean) type: DIRECT call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.\<init\>(int, boolean):void A[MD:(int, boolean):void (m)]\l}"];
Node_63 [shape=record,label="{63\:\ 0x0046|0x0046: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0059  (LINE:355)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0048|0x0048: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) \l0x0049: CHECK_CAST (r5 I:java.lang.Runnable) = (java.lang.Runnable) (r5 I:??[OBJECT, ARRAY]) \l0x004b: INVOKE  \l  (r4 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('newQueue' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l  (r5 I:java.lang.Object)\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast(java.lang.Object):int A[MD:(E):int (m)]\l0x004e: SGET  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.EventLoopImplBase._queue$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:356)\l0x0050: INVOKE  (r5 I:boolean) = \l  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('queue' java.lang.Object)])\l  (r4 I:java.lang.Object A[D('newQueue' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_65 [shape=record,label="{65\:\ 0x0054|0x0054: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0016 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0056|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0056|RETURN\l|0x0056: RETURN   \l}"];
Node_78 [shape=record,label="{78\:\ 0x0016|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0016|LOOP_END\lSYNTHETIC\lLOOP:0: B:50:0x0016\-\>B:77:0x0016\l}"];
Node_73 [shape=record,label="{73\:\ 0x0059|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x0059|0x0059: NEW_INSTANCE  (r5 I:java.lang.NullPointerException) =  java.lang.NullPointerException  (LINE:355)\l0x005b: CONST_STR  (r6 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.Runnable\{ kotlinx.coroutines.RunnableKt.Runnable \}\" \l0x005d: INVOKE  (r5 I:java.lang.NullPointerException), (r6 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x0060|0x0060: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_74 [shape=record,label="{74\:\ 0x003d|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x003d|RETURN\l|0x003d: RETURN   \l}"];
Node_76 [shape=record,label="{76\:\ 0x002f|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x002f|0x002f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)])  (LINE:347)\l0x0030: CHECK_CAST (r4 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) (r4 I:??[OBJECT, ARRAY]) \l0x0032: INVOKE  (r4 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.close():boolean A[MD:():boolean (m)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0035|RETURN\l|0x0035: RETURN    (LINE:348)\l}"];
Node_75 [shape=record,label="{75\:\ 0x001d|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x001d|0x001d: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.EventLoopImplBase._queue$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x001f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: INVOKE  (r6 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.EventLoop_commonKt.access$getCLOSED_EMPTY$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l0x0024: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r5 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x0028|0x0028: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x0016 \l}"];
Node_70 [shape=record,label="{70\:\ 0x002a|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x002a|RETURN\l|0x002a: RETURN   \l}"];
Node_79 [shape=record,label="{79\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.EventLoopImplBase.closeQueue((r7 'this' I:kotlinx.coroutines.EventLoopImplBase A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:54:0x002a \-\> B:41:?, BACK_EDGE: B:53:0x0028 \-\> B:50:0x0016, CROSS_EDGE: B:58:0x0035 \-\> B:41:?, CROSS_EDGE: B:61:0x003d \-\> B:41:?, CROSS_EDGE: B:66:0x0056 \-\> B:41:?, BACK_EDGE: B:65:0x0054 \-\> B:50:0x0016, CROSS_EDGE: B:69:0x0060 \-\> B:41:?, CROSS_EDGE: B:43:0x0004 \-\> B:49:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x000b: r0 '$i$a$\-assert\-EventLoopImplBase$closeQueue$1' I\l  0x0046\-0x0057: r4 'newQueue' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  0x0019\-0x0058: r2 'queue' Ljava\/lang\/Object;\l  0x001a\-0x0058: r3 '$i$a$\-loop\-EventLoopImplBase$closeQueue$2' I\l  0x0015\-0x0060: r0 '$this$loop$iv' Lkotlinx\/coroutines\/EventLoopImplBase;\l  0x0016\-0x0060: r1 '$i$f$loop' I\l  0x0059\-0x0060: r2 'queue' Ljava\/lang\/Object;\l  0x0059\-0x0060: r3 '$i$a$\-loop\-EventLoopImplBase$closeQueue$2' I\l  0x0059\-0x0060: r4 'newQueue' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l}"];
MethodNode -> Node_40;Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_49;
Node_44 -> Node_45;
Node_45 -> Node_47;
Node_45 -> Node_49[style=dashed];
Node_47 -> Node_48;
Node_48 -> Node_41;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_71;
Node_51 -> Node_75[style=dashed];
Node_71 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_59;
Node_56 -> Node_76[style=dashed];
Node_59 -> Node_60;
Node_60 -> Node_62;
Node_60 -> Node_74[style=dashed];
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_73;
Node_64 -> Node_65;
Node_65 -> Node_72[style=dashed];
Node_65 -> Node_78;
Node_72 -> Node_66;
Node_66 -> Node_41;
Node_78 -> Node_77;
Node_77 -> Node_50;
Node_73 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_41;
Node_74 -> Node_61;
Node_61 -> Node_41;
Node_76 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_41;
Node_75 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_70[style=dashed];
Node_53 -> Node_79;
Node_70 -> Node_54;
Node_54 -> Node_41;
Node_79 -> Node_77;
}

