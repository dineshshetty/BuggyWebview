digraph "CFG forkotlinx.coroutines.EventLoopImplBase.getNextTime()J" {
subgraph cluster_Region_1727077669 {
label = "R(1:(2:(1:3)|(5:5|(1:(2:12|13)(1:(1:11)))|16|17|(2:(1:20)|(3:21|22|27))))) | DECL_VAR: kotlinx.coroutines.internal.Symbol null\l";
node [shape=record,color=blue];
subgraph cluster_Region_1757869882 {
label = "R(2:(1:3)|(5:5|(1:(2:12|13)(1:(1:11)))|16|17|(2:(1:20)|(3:21|22|27))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_310416595 {
label = "IF [B:35:0x0008] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0008|if (super.getNextTime() == 0) goto L3\l}"];
subgraph cluster_Region_1957449103 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x000a|RETURN\l|return 0L\l}"];
}
}
subgraph cluster_Region_1983933256 {
label = "R(5:5|(1:(2:12|13)(1:(1:11)))|16|17|(2:(1:20)|(3:21|22|27)))";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x000b|java.lang.Object java.lang.Object r0 = r8._queue\l}"];
subgraph cluster_IfRegion_490600781 {
label = "IF [B:38:0x0013] THEN: R(1:(2:12|13)(1:(1:11))) ELSE: null";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0013|if (r0 != null) goto L7\l}"];
subgraph cluster_Region_450526730 {
label = "R(1:(2:12|13)(1:(1:11)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_40880837 {
label = "IF [B:41:0x0018] THEN: R(2:12|13) ELSE: R(1:(1:11))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0018|if ((r0 instanceof kotlinx.coroutines.internal.LockFreeTaskQueueCore) != true) goto L12\l}"];
subgraph cluster_Region_1208979196 {
label = "R(2:12|13)";
node [shape=record,color=blue];
Node_60 [shape=record,label="{60\:\ 0x0058|kotlinx.coroutines.internal.Symbol r1 = kotlinx.coroutines.EventLoop_commonKt.CLOSED_EMPTY\l}"];
Node_61 [shape=record,label="{61\:\ 0x005c|RETURN\l|return r0 == r1 ? Long.MAX_VALUE : 0L\l}"];
}
subgraph cluster_Region_1174025548 {
label = "R(1:(1:11)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1029748382 {
label = "IF [B:43:0x0021] THEN: R(1:11) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0021|if (((kotlinx.coroutines.internal.LockFreeTaskQueueCore) r0).isEmpty() == false) goto L11\l}"];
subgraph cluster_Region_1405749036 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x0023|RETURN\l|return 0L\l}"];
}
}
}
}
}
}
Node_45 [shape=record,label="{45\:\ 0x0024|kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue kotlinx.coroutines.EventLoopImplBase.DelayedTaskQueue r1 = (kotlinx.coroutines.EventLoopImplBase.DelayedTaskQueue) r8._delayed\l}"];
Node_46 [shape=record,label="{46\:\ 0x0029|kotlinx.coroutines.EventLoopImplBase.DelayedTask r1 = r1 == null ? null : r1.peek()\l}"];
subgraph cluster_Region_1167911151 {
label = "R(2:(1:20)|(3:21|22|27))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1332074478 {
label = "IF [B:49:0x0033] THEN: R(1:20) ELSE: null";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x0033|PHI: r1 \l  PHI: (r1v4 'nextDelayedTask' kotlinx.coroutines.EventLoopImplBase$DelayedTask) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == null) goto L20\l}"];
subgraph cluster_Region_218096760 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x0035|RETURN\l|return Long.MAX_VALUE\l}"];
}
}
subgraph cluster_Region_866129189 {
label = "R(3:21|22|27)";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ 0x0036|long long r4 = r1.nanoTime\lkotlinx.coroutines.AbstractTimeSource kotlinx.coroutines.AbstractTimeSource r7 = kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource()\l}"];
Node_52 [shape=record,label="{52\:\ 0x003c|java.lang.Long r6 = r7 != null ? java.lang.Long.valueOf(r7.nanoTime()) : null\l}"];
Node_59 [shape=record,label="{59\:\ 0x0057|RETURN\l|return kotlin.ranges.RangesKt.coerceAtLeast(r4 \- (r6 == null ? java.lang.System.nanoTime() : r6.longValue()), 0L)\l}"];
}
}
}
}
}
Node_32 [shape=record,color=red,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0000}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0016}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x001a}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x005e}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x005f}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x002b}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x003f}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x0047|PHI: r6 \l  PHI: (r6v1 java.lang.Long) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x0049}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x0052|PHI: r6 \l  PHI: (r6v3 long A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x004e}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x002d}"];
MethodNode[shape=record,label="{public long kotlinx.coroutines.EventLoopImplBase.getNextTime((r8v0 'this' kotlinx.coroutines.EventLoopImplBase A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:44:0x0023 \-\> B:33:?, CROSS_EDGE: B:50:0x0035 \-\> B:33:?, CROSS_EDGE: B:59:0x0057 \-\> B:33:?, CROSS_EDGE: B:57:0x004e \-\> B:58:0x0052, CROSS_EDGE: B:52:0x003c \-\> B:55:0x0047, CROSS_EDGE: B:48:0x002d \-\> B:49:0x0033, CROSS_EDGE: B:62:0x005e \-\> B:33:?, CROSS_EDGE: B:63:0x005f \-\> B:33:?, CROSS_EDGE: B:38:0x0013 \-\> B:45:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlinx.coroutines.EventLoop.getNextTime():long]\l}"];
MethodNode -> Node_32;Node_35 -> Node_36;
Node_35 -> Node_37[style=dashed];
Node_36 -> Node_33;
Node_37 -> Node_38;
Node_38 -> Node_40;
Node_38 -> Node_45[style=dashed];
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_61 -> Node_63;
Node_43 -> Node_44;
Node_43 -> Node_45[style=dashed];
Node_44 -> Node_33;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_46 -> Node_48;
Node_49 -> Node_50;
Node_49 -> Node_51[style=dashed];
Node_50 -> Node_33;
Node_51 -> Node_52;
Node_52 -> Node_54;
Node_52 -> Node_55;
Node_59 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_35;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_62 -> Node_33;
Node_63 -> Node_33;
Node_47 -> Node_49;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_55 -> Node_57;
Node_56 -> Node_58;
Node_58 -> Node_59;
Node_57 -> Node_58;
Node_48 -> Node_49;
}

