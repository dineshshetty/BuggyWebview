digraph "CFG forkotlinx.coroutines.EventLoopImplBase.enqueueImpl(Ljava\/lang\/Runnable;)Z" {
Node_52 [shape=record,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:298)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0002|LOOP_START\lLOOP:0: B:55:0x0002\-\>B:99:0x0002\l|0x0003: IGET  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.EventLoopImplBase A[D('$this$loop$iv' kotlinx.coroutines.EventLoopImplBase)]) kotlinx.coroutines.EventLoopImplBase._queue java.lang.Object  (LINE:556)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: INVOKE  (r4 I:boolean) = (r7 I:kotlinx.coroutines.EventLoopImplBase) type: DIRECT call: kotlinx.coroutines.EventLoopImplBase.isCompleted():boolean A[MD:():boolean (m)] (LINE:299)\l0x000a: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x000b|0x000b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x000e \l}"];
Node_58 [shape=record,label="{58\:\ 0x000e|0x000f: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:301)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x001c \l}"];
Node_86 [shape=record,label="{86\:\ 0x001c|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x001c|0x001c: INSTANCE_OF  (r6 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) kotlinx.coroutines.internal.LockFreeTaskQueueCore  (LINE:302)\l}"];
Node_64 [shape=record,label="{64\:\ 0x001e|0x001e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x0045 \l}"];
Node_94 [shape=record,label="{94\:\ 0x0045|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x0045|0x0046: INVOKE  (r6 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.EventLoop_commonKt.access$getCLOSED_EMPTY$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:310)\l}"];
Node_76 [shape=record,label="{76\:\ 0x004a|0x004a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x004d \l}"];
Node_78 [shape=record,label="{78\:\ 0x004d|0x004d: NEW_INSTANCE  (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) =  kotlinx.coroutines.internal.LockFreeTaskQueueCore  (LINE:313)\l0x004f: CONST  (r6 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l0x0051: INVOKE  (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore), (r6 I:int), (r4 I:boolean) type: DIRECT call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.\<init\>(int, boolean):void A[MD:(int, boolean):void (m)]\l}"];
Node_79 [shape=record,label="{79\:\ 0x0054|0x0054: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:97:0x006a  (LINE:314)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0056|0x0056: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) \l0x0057: CHECK_CAST (r6 I:java.lang.Runnable) = (java.lang.Runnable) (r6 I:??[OBJECT, ARRAY]) \l0x0059: INVOKE  \l  (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('newQueue' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l  (r6 I:java.lang.Object)\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast(java.lang.Object):int A[MD:(E):int (m)]\l0x005c: INVOKE  \l  (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore A[D('newQueue' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l  (r8 I:java.lang.Object A[D('task' java.lang.Runnable)])\l type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast(java.lang.Object):int A[MD:(E):int (m)] (LINE:315)\l0x005f: SGET  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.EventLoopImplBase._queue$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:316)\l0x0061: INVOKE  (r6 I:boolean) = \l  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('queue' java.lang.Object)])\l  (r5 I:java.lang.Object A[D('newQueue' kotlinx.coroutines.internal.LockFreeTaskQueueCore)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_81 [shape=record,label="{81\:\ 0x0065|0x0065: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:100:0x0002 \l}"];
Node_95 [shape=record,label="{95\:\ 0x0067|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0067|RETURN\l|0x0067: RETURN  (r4 I:boolean) \l}"];
Node_53 [shape=record,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_100 [shape=record,label="{100\:\ 0x0002|SYNTHETIC\l}"];
Node_99 [shape=record,label="{99\:\ 0x0002|LOOP_END\lSYNTHETIC\lLOOP:0: B:55:0x0002\-\>B:99:0x0002\l}"];
Node_97 [shape=record,label="{97\:\ 0x006a|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x006a|0x006a: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException  (LINE:314)\l0x006c: CONST_STR  (r6 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.Runnable\{ kotlinx.coroutines.RunnableKt.Runnable \}\" \l0x006e: INVOKE  (r4 I:java.lang.NullPointerException), (r6 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_85 [shape=record,label="{85\:\ 0x0071|0x0071: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_96 [shape=record,label="{96\:\ 0x004c|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x004c|RETURN\l|0x004c: RETURN  (r5 I:boolean) \l}"];
Node_98 [shape=record,label="{98\:\ 0x0020|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0020|0x0020: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('queue' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:0x003d  (LINE:303)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0022|0x0022: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) \l0x0023: CHECK_CAST (r6 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) (r6 I:??[OBJECT, ARRAY]) \l0x0025: INVOKE  (r6 I:int) = (r6 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore), (r8 I:java.lang.Object A[D('task' java.lang.Runnable)]) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.addLast(java.lang.Object):int A[MD:(E):int (m)]\l}"];
Node_67 [shape=record,label="{67\:\ 0x0029|0x0029: SWITCH  (r6 I:??)\l case 0: goto B:93:0x003b\l case 1: goto B:92:0x002e\l case 2: goto B:91:0x002d\l default: goto B:101:0x0002 \l}"];
Node_91 [shape=record,label="{91\:\ 0x002d|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x002d|RETURN\l|0x002d: RETURN  (r5 I:boolean)  (LINE:305)\l}"];
Node_92 [shape=record,label="{92\:\ 0x002e|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x002e|0x002e: SGET  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.EventLoopImplBase._queue$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:306)\l0x0030: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('queue' java.lang.Object)]) \l0x0031: CHECK_CAST (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) = (kotlinx.coroutines.internal.LockFreeTaskQueueCore) (r5 I:??[OBJECT, ARRAY]) \l0x0033: INVOKE  (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) = (r5 I:kotlinx.coroutines.internal.LockFreeTaskQueueCore) type: VIRTUAL call: kotlinx.coroutines.internal.LockFreeTaskQueueCore.next():kotlinx.coroutines.internal.LockFreeTaskQueueCore A[MD:():kotlinx.coroutines.internal.LockFreeTaskQueueCore\<E\> (m)]\l0x0037: INVOKE  \l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('queue' java.lang.Object)])\l  (r5 I:java.lang.Object)\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_102 [shape=record,label="{102\:\ 0x0002|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x003b|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x003b|RETURN\l|0x003b: RETURN  (r4 I:boolean)  (LINE:304)\l}"];
Node_101 [shape=record,label="{101\:\ 0x0002|SYNTHETIC\l}"];
Node_89 [shape=record,label="{89\:\ 0x003d|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x003d|0x003d: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException  (LINE:303)\l0x003f: CONST_STR  (r5 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlinx.coroutines.internal.LockFreeTaskQueueCore\<java.lang.Runnable\{ kotlinx.coroutines.RunnableKt.Runnable \}\>\{ kotlinx.coroutines.EventLoop_commonKt.Queue\<java.lang.Runnable\{ kotlinx.coroutines.RunnableKt.Runnable \}\> \}\" \l0x0041: INVOKE  (r4 I:java.lang.NullPointerException), (r5 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_74 [shape=record,label="{74\:\ 0x0044|0x0044: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_90 [shape=record,label="{90\:\ 0x0012|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0012|0x0012: SGET  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.EventLoopImplBase._queue$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x0014: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  (r5 I:boolean) = \l  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.lang.Object)\l  (r6 I:java.lang.Object)\l  (r8 I:java.lang.Object A[D('task' java.lang.Runnable)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_61 [shape=record,label="{61\:\ 0x0019|0x0019: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:103:0x0002 \l}"];
Node_87 [shape=record,label="{87\:\ 0x001b|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x001b|RETURN\l|0x001b: RETURN  (r4 I:boolean) \l}"];
Node_103 [shape=record,label="{103\:\ 0x0002|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x000d|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x000d|RETURN\l|0x000d: RETURN  (r5 I:boolean) \l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.EventLoopImplBase.enqueueImpl((r7 'this' I:kotlinx.coroutines.EventLoopImplBase A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.Runnable A[D('task' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:62:0x001b \-\> B:53:?, BACK_EDGE: B:61:0x0019 \-\> B:55:0x0002, CROSS_EDGE: B:69:0x002d \-\> B:53:?, BACK_EDGE: B:70:0x002e \-\> B:55:0x0002, CROSS_EDGE: B:71:0x003b \-\> B:53:?, BACK_EDGE: B:67:0x0029 \-\> B:55:0x0002, CROSS_EDGE: B:74:0x0044 \-\> B:53:?, CROSS_EDGE: B:77:0x004c \-\> B:53:?, CROSS_EDGE: B:82:0x0067 \-\> B:53:?, BACK_EDGE: B:81:0x0065 \-\> B:55:0x0002, CROSS_EDGE: B:85:0x0071 \-\> B:53:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0054\-0x0068: r5 'newQueue' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  0x0005\-0x0069: r2 'queue' Ljava\/lang\/Object;\l  0x0006\-0x0069: r3 '$i$a$\-loop\-EventLoopImplBase$enqueueImpl$1' I\l  0x0001\-0x007b: r0 '$this$loop$iv' Lkotlinx\/coroutines\/EventLoopImplBase;\l  0x0002\-0x007b: r1 '$i$f$loop' I\l  0x006a\-0x007b: r2 'queue' Ljava\/lang\/Object;\l  0x006a\-0x007b: r3 '$i$a$\-loop\-EventLoopImplBase$enqueueImpl$1' I\l  0x006a\-0x007b: r5 'newQueue' Lkotlinx\/coroutines\/internal\/LockFreeTaskQueueCore;\l  \-1 \-0x007b: r8 'task' Ljava\/lang\/Runnable;\l}"];
MethodNode -> Node_52;Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_58;
Node_56 -> Node_88[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_86;
Node_59 -> Node_90[style=dashed];
Node_86 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_94;
Node_64 -> Node_98[style=dashed];
Node_94 -> Node_75;
Node_75 -> Node_76;
Node_76 -> Node_78;
Node_76 -> Node_96[style=dashed];
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_97;
Node_80 -> Node_81;
Node_81 -> Node_95[style=dashed];
Node_81 -> Node_100;
Node_95 -> Node_82;
Node_82 -> Node_53;
Node_100 -> Node_99;
Node_99 -> Node_55;
Node_97 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_53;
Node_96 -> Node_77;
Node_77 -> Node_53;
Node_98 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_89;
Node_66 -> Node_67;
Node_67 -> Node_91;
Node_67 -> Node_92;
Node_67 -> Node_93;
Node_67 -> Node_101;
Node_91 -> Node_69;
Node_69 -> Node_53;
Node_92 -> Node_70;
Node_70 -> Node_102;
Node_102 -> Node_99;
Node_93 -> Node_71;
Node_71 -> Node_53;
Node_101 -> Node_99;
Node_89 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_53;
Node_90 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_87[style=dashed];
Node_61 -> Node_103;
Node_87 -> Node_62;
Node_62 -> Node_53;
Node_103 -> Node_99;
Node_88 -> Node_57;
Node_57 -> Node_53;
}

