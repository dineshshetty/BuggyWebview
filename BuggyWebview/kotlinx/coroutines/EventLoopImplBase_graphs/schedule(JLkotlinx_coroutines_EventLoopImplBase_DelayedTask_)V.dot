digraph "CFG forkotlinx.coroutines.EventLoopImplBase.schedule(JLkotlinx\/coroutines\/EventLoopImplBase$DelayedTask;)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0001}"];
Node_18 [shape=record,label="{18\:\ 0x0005|switch(scheduleImpl(r3, r5)) \{\l    case 0: goto L8;\l    case 1: goto L6;\l    case 2: goto L13;\l    default: goto L3;\l\}\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008}"];
Node_20 [shape=record,label="{20\:\ 0x0013|throw new java.lang.IllegalStateException(\"unexpected result\".toString())\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|reschedule(r3, r5)\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019}"];
Node_24 [shape=record,label="{24\:\ 0x001d|if (shouldUnpark(r5) == false) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|unpark()\l}"];
Node_26 [shape=record,label="{26\:\ 0x0022|RETURN\lORIG_RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.EventLoopImplBase.schedule((r2v0 'this' kotlinx.coroutines.EventLoopImplBase A[IMMUTABLE_TYPE, THIS]), (r3v0 'now' long A[D('now' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'delayedTask' kotlinx.coroutines.EventLoopImplBase$DelayedTask A[D('delayedTask' kotlinx.coroutines.EventLoopImplBase$DelayedTask), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0022 \-\> B:16:?, CROSS_EDGE: B:25:0x001f \-\> B:26:0x0022, CROSS_EDGE: B:24:0x001d \-\> B:26:0x0022, CROSS_EDGE: B:18:0x0005 \-\> B:26:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_22;
Node_18 -> Node_23;
Node_18 -> Node_29;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_22 -> Node_27;
Node_27 -> Node_16;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_28 -> Node_16;
Node_29 -> Node_16;
}

