digraph "CFG forkotlinx.coroutines.ThreadContextElementKt.asContextElement$default(Ljava\/lang\/ThreadLocal;Ljava\/lang\/Object;ILjava\/lang\/Object;)Lkotlinx\/coroutines\/ThreadContextElement;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r2 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:219)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.lang.ThreadLocal) type: VIRTUAL call: java.lang.ThreadLocal.get():java.lang.Object A[MD:():T (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: INVOKE  (r0 I:kotlinx.coroutines.ThreadContextElement) = (r0 I:java.lang.ThreadLocal), (r1 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.ThreadContextElementKt.asContextElement(java.lang.ThreadLocal, java.lang.Object):kotlinx.coroutines.ThreadContextElement A[MD:\<T\>:(java.lang.ThreadLocal\<T\>, T):kotlinx.coroutines.ThreadContextElement\<T\> (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlinx.coroutines.ThreadContextElement) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlinx.coroutines.ThreadContextElement kotlinx.coroutines.ThreadContextElementKt.asContextElement$default((r0 I:java.lang.ThreadLocal A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:3:0x0002 \-\> B:5:0x0008\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

