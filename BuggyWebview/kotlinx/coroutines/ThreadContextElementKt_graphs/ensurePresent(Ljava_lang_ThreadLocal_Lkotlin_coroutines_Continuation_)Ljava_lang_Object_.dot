digraph "CFG forkotlinx.coroutines.ThreadContextElementKt.ensurePresent(Ljava\/lang\/ThreadLocal;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0012|if (r6.getContext().get(new kotlinx.coroutines.internal.ThreadLocalKey(r5)) == null) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x0014|r3 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|PHI: r3 \l  PHI: (r3v3 boolean) = (r3v2 boolean), (r3v7 boolean) binds: [B:5:0x0016, B:4:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0019}"];
Node_8 [shape=record,label="{8\:\ 0x001b|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"ThreadLocal \")\lr2.append(r5)\lr2.append(\" is missing from context \")\lr2.append(r6.getContext())\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|throw new java.lang.IllegalStateException(r2.toString().toString())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|r3 = false\l}"];
MethodNode[shape=record,label="{public static final java.lang.Object kotlinx.coroutines.ThreadContextElementKt.ensurePresent((r5v0 java.lang.ThreadLocal\<?\> A[D('$this$ensurePresent' java.lang.ThreadLocal), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0043 \-\> B:1:?, CROSS_EDGE: B:5:0x0016 \-\> B:6:0x0017\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/ThreadLocal\<*\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_5 -> Node_6;
}

