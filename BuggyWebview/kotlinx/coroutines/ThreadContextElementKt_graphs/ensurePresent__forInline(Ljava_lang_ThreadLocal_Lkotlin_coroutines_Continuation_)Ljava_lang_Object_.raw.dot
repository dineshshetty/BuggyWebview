digraph "CFG forkotlinx.coroutines.ThreadContextElementKt.ensurePresent$$forInline(Ljava\/lang\/ThreadLocal;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$ensurePresent' java.lang.ThreadLocal)])  (LINE:257)\l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:259)\l0x0004: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[MD:(int):void (m)]\l0x0007: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r5 I:kotlin.coroutines.CoroutineContext) = (r4 I:kotlin.coroutines.Continuation) type: INTERFACE call: kotlin.coroutines.Continuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)]\l0x000c: NEW_INSTANCE  (r6 I:kotlinx.coroutines.internal.ThreadLocalKey) =  kotlinx.coroutines.internal.ThreadLocalKey \l0x000e: INVOKE  \l  (r6 I:kotlinx.coroutines.internal.ThreadLocalKey)\l  (r1 I:java.lang.ThreadLocal A[D('$this$isPresent$iv' java.lang.ThreadLocal)])\l type: DIRECT call: kotlinx.coroutines.internal.ThreadLocalKey.\<init\>(java.lang.ThreadLocal):void A[MD:(java.lang.ThreadLocal\<?\>):void (m)]\l0x0011: CHECK_CAST (r6 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r6 I:??[OBJECT, ARRAY]) \l0x0013: INVOKE  (r5 I:kotlin.coroutines.CoroutineContext$Element) = (r5 I:kotlin.coroutines.CoroutineContext), (r6 I:kotlin.coroutines.CoroutineContext$Key) type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|0x0017: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0019|0x0019: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0021  (LINE:257)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|0x001e: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_8 [shape=record,label="{8\:\ 0x0020|RETURN\l|0x0020: RETURN  (r1 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|0x0021: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:260)\l0x0022: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:257)\l0x0024: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0027: CONST_STR  (r5 I:java.lang.String) =  \"ThreadLocal \" \l0x0029: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002c: INVOKE  (r2 I:java.lang.StringBuilder), (r7 I:java.lang.Object A[D('$this$ensurePresent' java.lang.ThreadLocal)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x002f: CONST_STR  (r5 I:java.lang.String) =  \" is missing from context \" \l0x0031: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0034: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.mark(int):void A[MD:(int):void (m)]\l0x0037: INVOKE  (r3 I:kotlin.coroutines.CoroutineContext) = (r4 I:kotlin.coroutines.Continuation) type: INTERFACE call: kotlin.coroutines.Continuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)]\l0x003b: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x003e: INVOKE  (r1 I:java.lang.String A[D('$i$a$\-check\-ThreadContextElementKt$ensurePresent$2' int)]) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0042: NEW_INSTANCE  (r2 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0044: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0048: INVOKE  (r2 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x004b|0x004b: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static final java.lang.Object kotlinx.coroutines.ThreadContextElementKt.ensurePresent$$forInline((r7 I:java.lang.ThreadLocal\<?\> A[D('$this$ensurePresent' java.lang.ThreadLocal), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x004b \-\> B:1:?, CROSS_EDGE: B:5:0x001b \-\> B:6:0x001c\lDebug Info:\l  0x0002\-0x001c: r1 '$this$isPresent$iv' Ljava\/lang\/ThreadLocal;\l  0x0003\-0x001c: r2 '$i$f$isPresent' I\l  0x0022\-0x0042: r1 '$i$a$\-check\-ThreadContextElementKt$ensurePresent$2' I\l  0x0001\-0x004b: r0 '$i$f$ensurePresent' I\l  \-1 \-0x004b: r7 '$this$ensurePresent' Ljava\/lang\/ThreadLocal;\l  \-1 \-0x004b: r8 '$completion' Lkotlin\/coroutines\/Continuation;\lSIGNATURE: (Ljava\/lang\/ThreadLocal\<*\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_5 -> Node_6;
}

