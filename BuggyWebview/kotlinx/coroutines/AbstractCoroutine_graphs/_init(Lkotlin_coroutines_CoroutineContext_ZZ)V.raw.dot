digraph "CFG forkotlinx.coroutines.AbstractCoroutine.\<init\>(Lkotlin\/coroutines\/CoroutineContext;ZZ)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r1 I:kotlinx.coroutines.JobSupport), (r4 I:boolean A[D('active' boolean)]) type: DIRECT call: kotlinx.coroutines.JobSupport.\<init\>(boolean):void A[MD:(boolean):void (m)] (LINE:41)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|0x0004: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('initParentJob' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0013  (LINE:51)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: SGET  (r0 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key \l0x0008: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r0 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Element) = \l  (r2 I:kotlin.coroutines.CoroutineContext A[D('parentContext' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.coroutines.CoroutineContext$Key)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x000e: CHECK_CAST (r0 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r0 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r1 I:kotlinx.coroutines.AbstractCoroutine), (r0 I:kotlinx.coroutines.Job) type: VIRTUAL call: kotlinx.coroutines.AbstractCoroutine.initParentJob(kotlinx.coroutines.Job):void A[MD:(kotlinx.coroutines.Job):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0014: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:58)\l0x0015: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r0 I:??[OBJECT, ARRAY]) \l0x0017: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r2 I:kotlin.coroutines.CoroutineContext A[D('parentContext' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l0x001b: IPUT  (r0 I:kotlin.coroutines.CoroutineContext), (r1 I:kotlinx.coroutines.AbstractCoroutine) kotlinx.coroutines.AbstractCoroutine.context kotlin.coroutines.CoroutineContext \l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|RETURN\l|0x001d: RETURN    (LINE:37)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.AbstractCoroutine.\<init\>((r1 'this' I:kotlinx.coroutines.AbstractCoroutine\<T\> A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.coroutines.CoroutineContext A[D('parentContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[D('initParentJob' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('active' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:12:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001d: r2 'parentContext' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x001d: r3 'initParentJob' Z\l  \-1 \-0x001d: r4 'active' Z\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

