digraph "CFG forkotlinx.coroutines.EventLoop.limitedParallelism(I)Lkotlinx\/coroutines\/CoroutineDispatcher;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r2 I:int A[D('parallelism' int)]) type: STATIC call: kotlinx.coroutines.internal.LimitedDispatcherKt.checkParallelism(int):void A[MD:(int):void (m)] (LINE:119)\l0x0003: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:120)\l0x0004: CHECK_CAST (r0 I:kotlinx.coroutines.CoroutineDispatcher) = (kotlinx.coroutines.CoroutineDispatcher) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:kotlinx.coroutines.CoroutineDispatcher) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.CoroutineDispatcher kotlinx.coroutines.EventLoop.limitedParallelism((r1 'this' I:kotlinx.coroutines.EventLoop A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('parallelism' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0006: r2 'parallelism' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.CoroutineDispatcher.limitedParallelism(int):kotlinx.coroutines.CoroutineDispatcher]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

