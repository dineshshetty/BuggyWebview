digraph "CFG forkotlinx.coroutines.EventLoop.decrementUseCount(Z)V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: IGET  (r0 I:long) = (r6 I:kotlinx.coroutines.EventLoop) kotlinx.coroutines.EventLoop.useCount long  (LINE:109)\l0x0002: INVOKE  (r2 I:long) = (r6 I:kotlinx.coroutines.EventLoop), (r7 I:boolean A[D('unconfined' boolean)]) type: DIRECT call: kotlinx.coroutines.EventLoop.delta(boolean):long A[MD:(boolean):long (m)]\l0x0006: ARITH  (r0 I:long) = (r0 I:long) \- (r2 I:long) \l0x0007: IPUT  (r0 I:long), (r6 I:kotlinx.coroutines.EventLoop) kotlinx.coroutines.EventLoop.useCount long \l0x0009: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:110)\l0x000b: CMP_L  (r4 I:int) = (r0 I:long), (r2 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:25:0x0010 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|RETURN\l|0x000f: RETURN   \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|0x0010: INVOKE  (r0 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)] (LINE:111)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0029 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|0x0016: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:545)\l0x0017: IGET  (r4 I:long) = (r6 I:kotlinx.coroutines.EventLoop) kotlinx.coroutines.EventLoop.useCount long  (LINE:111)\l0x0019: CMP_L  (r1 I:int) = (r4 I:long), (r2 I:long) \l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|0x001b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x001f \l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|0x001d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0020|0x0020: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0023 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0025: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0028|0x0028: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|0x001f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0029|0x0029: IGET  (r0 I:boolean) = (r6 I:kotlinx.coroutines.EventLoop) kotlinx.coroutines.EventLoop.shared boolean  (LINE:112)\l}"];
Node_36 [shape=record,label="{36\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:? \l}"];
Node_37 [shape=record,label="{37\:\ 0x002d|0x002d: INVOKE  (r6 I:kotlinx.coroutines.EventLoop) type: VIRTUAL call: kotlinx.coroutines.EventLoop.shutdown():void A[MD:():void (m)] (LINE:114)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: RETURN    (LINE:116)\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN   A[SYNTHETIC] (LINE:116)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.EventLoop.decrementUseCount((r6 'this' I:kotlinx.coroutines.EventLoop A[IMMUTABLE_TYPE, THIS]), (r7 I:boolean A[D('unconfined' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0028 \-\> B:21:?, CROSS_EDGE: B:38:0x0030 \-\> B:21:?, CROSS_EDGE: B:36:0x002b \-\> B:38:0x0030, CROSS_EDGE: B:30:0x001f \-\> B:31:0x0020, CROSS_EDGE: B:26:0x0014 \-\> B:35:0x0029\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x0020: r0 '$i$a$\-assert\-EventLoop$decrementUseCount$1' I\l  \-1 \-0x0030: r7 'unconfined' Z\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_21;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_35[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_21;
Node_30 -> Node_31;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_21;
Node_39 -> Node_21;
}

