digraph "CFG forkotlinx.coroutines.EventLoop.processUnconfinedEvent()Z" {
subgraph cluster_Region_1680246015 {
label = "R(2:1|(2:(1:7)|(2:8|9))) | DECL_VAR: kotlinx.coroutines.DispatchedTask\<?\> task\l";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|kotlinx.coroutines.internal.ArrayQueue\<kotlinx.coroutines.DispatchedTask\<?\>\> kotlinx.coroutines.internal.ArrayQueue r0 = r3.unconfinedQueue\l}"];
subgraph cluster_Region_1359281472 {
label = "R(2:(1:7)|(2:8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1844994456 {
label = "IF [B:13:0x0003, B:16:0x000c] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0003|if (r0 == null) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|ADDED_TO_REGION\l|if ((r2 = r0.removeFirstOrNull()) == null) goto L7\l}"];
subgraph cluster_Region_807201265 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000e|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1574687488 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000f|r2.run()\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|RETURN\l|return true\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0005|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0006}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.EventLoop.processUnconfinedEvent((r3v0 'this' kotlinx.coroutines.EventLoop A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000e \-\> B:11:?, CROSS_EDGE: B:19:0x0014 \-\> B:11:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_18[style=dashed];
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_14 -> Node_11;
Node_15 -> Node_16;
}

