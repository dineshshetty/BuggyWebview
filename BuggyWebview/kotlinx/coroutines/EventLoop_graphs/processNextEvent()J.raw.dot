digraph "CFG forkotlinx.coroutines.EventLoop.processNextEvent()J" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:kotlinx.coroutines.EventLoop) type: VIRTUAL call: kotlinx.coroutines.EventLoop.processUnconfinedEvent():boolean A[MD:():boolean (m)] (LINE:54)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|RETURN\l|0x0006: CONST  (r0 I:??[long, double]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double]) \l0x000b: RETURN  (r0 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|RETURN\l|0x000c: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:55)\l0x000e: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public long kotlinx.coroutines.EventLoop.processNextEvent((r2 'this' I:kotlinx.coroutines.EventLoop A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:9:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlinx.coroutines.EventLoop.processNextEvent():long]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_9;
}

