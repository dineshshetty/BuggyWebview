digraph "CFG forkotlinx.coroutines.EventLoop.getNextTime()J" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.internal.ArrayQueue\<kotlinx.coroutines.DispatchedTask\<?\>\>) = (r4 I:kotlinx.coroutines.EventLoop) kotlinx.coroutines.EventLoop.unconfinedQueue kotlinx.coroutines.internal.ArrayQueue  (LINE:62)\l0x0002: CONST  (r1 I:??[long, double]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x000a \l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|RETURN\l|0x0009: RETURN  (r1 I:long) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: INVOKE  (r3 I:boolean) = (r0 I:kotlinx.coroutines.internal.ArrayQueue A[D('queue' kotlinx.coroutines.internal.ArrayQueue)]) type: VIRTUAL call: kotlinx.coroutines.internal.ArrayQueue.isEmpty():boolean A[MD:():boolean (m)] (LINE:63)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0011 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: CONST  (r1 I:??[long, double]) = (0 ??[long, double]) \l0x0013: RETURN  (r1 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0013: RETURN  (r1 I:long) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public long kotlinx.coroutines.EventLoop.getNextTime((r4 'this' I:kotlinx.coroutines.EventLoop A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0013 \-\> B:12:?, CROSS_EDGE: B:17:0x000e \-\> B:20:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0013: r0 'queue' Lkotlinx\/coroutines\/internal\/ArrayQueue;\lMETHOD_OVERRIDE: [kotlinx.coroutines.EventLoop.getNextTime():long]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_12;
Node_21 -> Node_12;
}

