digraph "CFG forkotlinx.coroutines.CancellableContinuationKt.getOrCreateCancellableContinuation(Lkotlin\/coroutines\/Continuation;)Lkotlinx\/coroutines\/CancellableContinuationImpl;" {
subgraph cluster_Region_547311629 {
label = "R(1:(2:(1:4)|(3:6|(1:8)|(2:(1:12)|(1:11)))))";
node [shape=record,color=blue];
subgraph cluster_Region_418017683 {
label = "R(2:(1:4)|(3:6|(1:8)|(2:(1:12)|(1:11))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1058767756 {
label = "IF [B:18:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0002|if ((r4 instanceof kotlinx.coroutines.internal.DispatchedContinuation) == false) goto L3\l}"];
subgraph cluster_Region_1616349413 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x000a|RETURN\l|return new kotlinx.coroutines.CancellableContinuationImpl\<\>(r4, 1)\l}"];
}
}
subgraph cluster_Region_1343682322 {
label = "R(3:6|(1:8)|(2:(1:12)|(1:11)))";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x000b|kotlinx.coroutines.CancellableContinuationImpl kotlinx.coroutines.CancellableContinuationImpl r0 = ((kotlinx.coroutines.internal.DispatchedContinuation) r4).claimReusableCancellableContinuation()\l}"];
subgraph cluster_IfRegion_730357114 {
label = "IF [B:22:0x0013, B:25:0x001d] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0013|if (r0 == null) goto L8\l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|ADDED_TO_REGION\l|if (r0.resetStateReusable() == false) goto L8\l}"];
subgraph cluster_Region_855723957 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0015|r0 = null\l}"];
}
}
subgraph cluster_Region_974300122 {
label = "R(2:(1:12)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2086208349 {
label = "IF [B:26:0x001f] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x001f|PHI: r0 \l  PHI: (r0v4 'it' kotlinx.coroutines.CancellableContinuationImpl) = (r0v3 'it' kotlinx.coroutines.CancellableContinuationImpl), (r0v6 'it' kotlinx.coroutines.CancellableContinuationImpl) binds: [B:25:0x001d, B:23:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L12\l}"];
subgraph cluster_Region_462472611 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0028|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1908354018 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0027|RETURN\l|return new kotlinx.coroutines.CancellableContinuationImpl\<\>(r4, 2)\l}"];
}
}
}
}
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0000}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0004}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0021}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0017}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.CancellableContinuationImpl\<T\> kotlinx.coroutines.CancellableContinuationKt.getOrCreateCancellableContinuation((r4v0 kotlin.coroutines.Continuation\<? super T\> A[D('delegate' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0027 \-\> B:16:?, CROSS_EDGE: B:29:0x0028 \-\> B:16:?, CROSS_EDGE: B:25:0x001d \-\> B:23:0x0015, CROSS_EDGE: B:25:0x001d \-\> B:26:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/coroutines\/Continuation\<\-TT;\>;)Lkotlinx\/coroutines\/CancellableContinuationImpl\<TT;\>;\l}"];
MethodNode -> Node_15;Node_18 -> Node_19;
Node_18 -> Node_21[style=dashed];
Node_20 -> Node_16;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_24[style=dashed];
Node_25 -> Node_23;
Node_25 -> Node_26[style=dashed];
Node_23 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_29 -> Node_16;
Node_28 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_27 -> Node_28;
Node_24 -> Node_25;
}

