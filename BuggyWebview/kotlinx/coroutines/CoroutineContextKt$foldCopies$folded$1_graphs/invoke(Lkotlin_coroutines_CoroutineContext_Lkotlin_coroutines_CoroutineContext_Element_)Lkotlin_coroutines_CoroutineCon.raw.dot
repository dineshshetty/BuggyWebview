digraph "CFG forkotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.invoke(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext$Element;)Lkotlin\/coroutines\/CoroutineContext;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) kotlinx.coroutines.CopyableThreadContextElement  (LINE:64)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000c \l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) \l0x0005: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r0 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r5 I:kotlin.coroutines.CoroutineContext A[D('result' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:kotlin.coroutines.CoroutineContext) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|0x000c: IGET  (r0 I:kotlin.jvm.internal.Ref$ObjectRef\<kotlin.coroutines.CoroutineContext\>) = (r4 I:kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1) kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.$leftoverContext kotlin.jvm.internal.Ref$ObjectRef  (LINE:66)\l0x000e: IGET  (r0 I:T) = (r0 I:kotlin.jvm.internal.Ref$ObjectRef) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object \l0x0010: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r0 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext$Key) = (r6 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element)]) type: INTERFACE call: kotlin.coroutines.CoroutineContext.Element.getKey():kotlin.coroutines.CoroutineContext$Key A[MD:():kotlin.coroutines.CoroutineContext$Key\<?\> (m)]\l0x0016: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Element) = (r0 I:kotlin.coroutines.CoroutineContext), (r1 I:kotlin.coroutines.CoroutineContext$Key) type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newElement' kotlin.coroutines.CoroutineContext$Element)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0032  (LINE:68)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001c|0x001c: IGET  (r1 I:boolean) = (r4 I:kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1) kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.$isNewCoroutine boolean  (LINE:70)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|0x001e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0028 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|0x0020: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) \l0x0021: CHECK_CAST (r1 I:kotlinx.coroutines.CopyableThreadContextElement) = (kotlinx.coroutines.CopyableThreadContextElement) (r1 I:??[OBJECT, ARRAY]) \l0x0023: INVOKE  (r1 I:kotlinx.coroutines.CopyableThreadContextElement) = (r1 I:kotlinx.coroutines.CopyableThreadContextElement) type: INTERFACE call: kotlinx.coroutines.CopyableThreadContextElement.copyForChild():kotlinx.coroutines.CopyableThreadContextElement A[MD:():kotlinx.coroutines.CopyableThreadContextElement\<S\> (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x002b|0x002b: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r1 I:??[OBJECT, ARRAY]) \l0x002d: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext) = \l  (r5 I:kotlin.coroutines.CoroutineContext A[D('result' kotlin.coroutines.CoroutineContext)])\l  (r1 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0031|RETURN\l|0x0031: RETURN  (r1 I:kotlin.coroutines.CoroutineContext) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0028|0x0028: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) \l0x0029: CHECK_CAST (r1 I:kotlinx.coroutines.CopyableThreadContextElement) = (kotlinx.coroutines.CopyableThreadContextElement) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0032|0x0032: IGET  (r1 I:kotlin.jvm.internal.Ref$ObjectRef\<kotlin.coroutines.CoroutineContext\>) = (r4 I:kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1) kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.$leftoverContext kotlin.jvm.internal.Ref$ObjectRef  (LINE:73)\l0x0034: IGET  (r2 I:T) = (r1 I:kotlin.jvm.internal.Ref$ObjectRef) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object \l0x0036: CHECK_CAST (r2 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r2 I:??[OBJECT, ARRAY]) \l0x0038: INVOKE  (r3 I:kotlin.coroutines.CoroutineContext$Key) = (r6 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element)]) type: INTERFACE call: kotlin.coroutines.CoroutineContext.Element.getKey():kotlin.coroutines.CoroutineContext$Key A[MD:():kotlin.coroutines.CoroutineContext$Key\<?\> (m)]\l0x003c: INVOKE  (r2 I:kotlin.coroutines.CoroutineContext) = (r2 I:kotlin.coroutines.CoroutineContext), (r3 I:kotlin.coroutines.CoroutineContext$Key) type: INTERFACE call: kotlin.coroutines.CoroutineContext.minusKey(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext$Key\<?\>):kotlin.coroutines.CoroutineContext (m)]\l0x0040: IPUT  (r2 I:T), (r1 I:kotlin.jvm.internal.Ref$ObjectRef) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object \l0x0042: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)])  (LINE:76)\l0x0043: CHECK_CAST (r1 I:kotlinx.coroutines.CopyableThreadContextElement) = (kotlinx.coroutines.CopyableThreadContextElement) (r1 I:??[OBJECT, ARRAY]) \l0x0045: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext) = \l  (r1 I:kotlinx.coroutines.CopyableThreadContextElement)\l  (r0 I:kotlin.coroutines.CoroutineContext$Element A[D('newElement' kotlin.coroutines.CoroutineContext$Element)])\l type: INTERFACE call: kotlinx.coroutines.CopyableThreadContextElement.mergeForChild(kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext (m)]\l0x0049: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext) = \l  (r5 I:kotlin.coroutines.CoroutineContext A[D('result' kotlin.coroutines.CoroutineContext)])\l  (r1 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x004d|RETURN\l|0x004d: RETURN  (r1 I:kotlin.coroutines.CoroutineContext) \l}"];
MethodNode[shape=record,label="{public final kotlin.coroutines.CoroutineContext kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.invoke((r4 'this' I:kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1 A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlin.coroutines.CoroutineContext A[D('result' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0031 \-\> B:17:?, CROSS_EDGE: B:27:0x0028 \-\> B:28:0x002b, CROSS_EDGE: B:31:0x004d \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x004d: r0 'newElement' Lkotlin\/coroutines\/CoroutineContext$Element;\l  \-1 \-0x004d: r5 'result' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x004d: r6 'element' Lkotlin\/coroutines\/CoroutineContext$Element;\lREPLACED_BY: kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext\lBRIDGED_BY: kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function2.invoke(P1, P2):R]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_30;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_27 -> Node_28;
Node_30 -> Node_31;
Node_31 -> Node_17;
}

