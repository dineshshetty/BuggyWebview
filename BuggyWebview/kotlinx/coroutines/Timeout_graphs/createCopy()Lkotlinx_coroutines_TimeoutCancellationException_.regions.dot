digraph "CFG forkotlinx.coroutines.TimeoutCancellationException.createCopy()Lkotlinx\/coroutines\/TimeoutCancellationException;" {
subgraph cluster_Region_1244876053 {
label = "R(4:1|(1:3)|4|5)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|java.lang.String java.lang.String r1 = getMessage()\l}"];
subgraph cluster_IfRegion_1797272301 {
label = "IF [B:10:0x0006] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0006|if (r1 == null) goto L3\l}"];
subgraph cluster_Region_2118690402 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0008|java.lang.String r1 = \"\"\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x000a|PHI: r1 \l  PHI: (r1v1 java.lang.String) = (r1v0 java.lang.String), (r1v3 java.lang.String) binds: [B:10:0x0006, B:11:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|kotlinx.coroutines.TimeoutCancellationException kotlinx.coroutines.Timeout r0 = new kotlinx.coroutines.Timeout(r1, r4.coroutine)\lr0.initCause(r4)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|RETURN\l|return r0\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.TimeoutCancellationException kotlinx.coroutines.TimeoutCancellationException.createCopy((r4v0 'this' kotlinx.coroutines.TimeoutCancellationException A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0006 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lREPLACED_BY: kotlinx.coroutines.TimeoutCancellationException.createCopy():kotlinx.coroutines.TimeoutCancellationException\lBRIDGED_BY: kotlinx.coroutines.TimeoutCancellationException.createCopy():kotlinx.coroutines.TimeoutCancellationException\lMETHOD_OVERRIDE: [kotlinx.coroutines.CopyableThrowable.createCopy():T extends java.lang.Throwable & kotlinx.coroutines.CopyableThrowable\<T\>]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

