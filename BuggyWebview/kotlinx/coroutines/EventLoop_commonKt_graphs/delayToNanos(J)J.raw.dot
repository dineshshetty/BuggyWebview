digraph "CFG forkotlinx.coroutines.EventLoop_commonKt.delayToNanos(J)J" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|0x0001: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:163)\l0x0003: CMP_L  (r2 I:int) = (r3 I:long A[D('timeMillis' long)]), (r0 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:17:0x0008 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: CONST  (r0 I:??[long, double]) = (9223372036854(0x8637bd05af6, double:4.5569512622224E\-311) ??[long, double])  (LINE:164)\l0x000d: CMP_L  (r2 I:int) = (r3 I:long A[D('timeMillis' long)]), (r0 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:20:0x0017 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|SYNTHETIC\lRETURN\l|0x0011: CONST  (r0 I:??[long, double]) = (9223372036854775807(0x7fffffffffffffff, double:NaN) ??[long, double]) \l0x001c: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:166)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0017|0x0017: CONST  (r0 I:??[long, double]) = (1000000(0xf4240, double:4.940656E\-318) ??[long, double])  (LINE:165)\l0x001a: ARITH  (r0 I:long) = (r0 I:long) * (r3 I:long A[D('timeMillis' long)]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: RETURN  (r0 I:long)  (LINE:166)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN  (r0 I:long) A[SYNTHETIC] (LINE:166)\l}"];
MethodNode[shape=record,label="{public static final long kotlinx.coroutines.EventLoop_commonKt.delayToNanos((r3 I:long A[D('timeMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0017 \-\> B:21:0x001c, CROSS_EDGE: B:15:0x0005 \-\> B:21:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001c: r3 'timeMillis' J\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_23[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_23 -> Node_13;
}

