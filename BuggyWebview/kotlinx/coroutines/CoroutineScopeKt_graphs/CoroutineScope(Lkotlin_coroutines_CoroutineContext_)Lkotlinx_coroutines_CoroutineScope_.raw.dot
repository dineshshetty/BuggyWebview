digraph "CFG forkotlinx.coroutines.CoroutineScopeKt.CoroutineScope(Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/CoroutineScope;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.internal.ContextScope) =  kotlinx.coroutines.internal.ContextScope  (LINE:277)\l0x0002: SGET  (r1 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key \l0x0004: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r1 I:??[OBJECT, ARRAY]) \l0x0006: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext$Element) = \l  (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r1 I:kotlin.coroutines.CoroutineContext$Key)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000e \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|0x000c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('context' kotlin.coroutines.CoroutineContext)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001a|0x001a: INVOKE  (r0 I:kotlinx.coroutines.internal.ContextScope), (r1 I:kotlin.coroutines.CoroutineContext) type: DIRECT call: kotlinx.coroutines.internal.ContextScope.\<init\>(kotlin.coroutines.CoroutineContext):void A[MD:(kotlin.coroutines.CoroutineContext):void (m)]\l0x001d: CHECK_CAST (r0 I:kotlinx.coroutines.CoroutineScope) = (kotlinx.coroutines.CoroutineScope) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|RETURN\l|0x001f: RETURN  (r0 I:kotlinx.coroutines.CoroutineScope) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: INVOKE  (r1 I:kotlinx.coroutines.CompletableJob) = (r2 I:kotlinx.coroutines.Job), (r1 I:int), (r2 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.JobKt.Job$default(kotlinx.coroutines.Job, int, java.lang.Object):kotlinx.coroutines.CompletableJob A[MD:(kotlinx.coroutines.Job, int, java.lang.Object):kotlinx.coroutines.CompletableJob (m)]\l0x0014: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r1 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext) = \l  (r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r1 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.CoroutineScope kotlinx.coroutines.CoroutineScopeKt.CoroutineScope((r3 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000e \-\> B:14:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001f: r3 'context' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

