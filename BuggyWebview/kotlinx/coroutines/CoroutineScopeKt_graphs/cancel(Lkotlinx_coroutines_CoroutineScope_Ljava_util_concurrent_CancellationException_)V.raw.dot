digraph "CFG forkotlinx.coroutines.CoroutineScopeKt.cancel(Lkotlinx\/coroutines\/CoroutineScope;Ljava\/util\/concurrent\/CancellationException;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = (r2 I:kotlinx.coroutines.CoroutineScope A[D('$this$cancel' kotlinx.coroutines.CoroutineScope)]) type: INTERFACE call: kotlinx.coroutines.CoroutineScope.getCoroutineContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:286)\l0x0004: SGET  (r1 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key \l0x0006: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r1 I:??[OBJECT, ARRAY]) \l0x0008: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Element) = (r0 I:kotlin.coroutines.CoroutineContext), (r1 I:kotlin.coroutines.CoroutineContext$Key) type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x000c: CHECK_CAST (r0 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0014 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|0x0010: INVOKE  \l  (r0 I:kotlinx.coroutines.Job A[D('job' kotlinx.coroutines.Job)])\l  (r3 I:java.util.concurrent.CancellationException A[D('cause' java.util.concurrent.CancellationException)])\l type: INTERFACE call: kotlinx.coroutines.Job.cancel(java.util.concurrent.CancellationException):void A[MD:(java.util.concurrent.CancellationException):void (m)] (LINE:287)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0013|RETURN\l|0x0013: RETURN    (LINE:288)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('job' kotlinx.coroutines.Job)]) =  java.lang.IllegalStateException  (LINE:286)\l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"Scope cannot be cancelled because it does not have a job: \" \l0x0018: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:java.lang.Object A[D('$this$cancel' kotlinx.coroutines.CoroutineScope)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x001c: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0020: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|0x0023: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.CoroutineScopeKt.cancel((r2 I:kotlinx.coroutines.CoroutineScope A[D('$this$cancel' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.concurrent.CancellationException A[D('cause' java.util.concurrent.CancellationException), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0023 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0014: r0 'job' Lkotlinx\/coroutines\/Job;\l  \-1 \-0x0023: r2 '$this$cancel' Lkotlinx\/coroutines\/CoroutineScope;\l  \-1 \-0x0023: r3 'cause' Ljava\/util\/concurrent\/CancellationException;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

