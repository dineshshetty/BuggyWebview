digraph "CFG forkotlinx.coroutines.CoroutineScopeKt.CoroutineScope(Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/CoroutineScope;" {
subgraph cluster_Region_1001451238 {
label = "R(2:(1:3)(1:7)|5) | DECL_VAR: kotlinx.coroutines.CompletableJob null, kotlin.coroutines.CoroutineContext null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_890726351 {
label = "IF [B:11:0x000a] THEN: R(1:3) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000a|if (r3.get(kotlinx.coroutines.Job.Key) != null) goto L3\l}"];
subgraph cluster_Region_955120058 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000c|r1 = r3\l}"];
}
subgraph cluster_Region_49688118 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000e|kotlinx.coroutines.CompletableJob r1 = kotlinx.coroutines.JobKt__JobKt.Job$default((kotlinx.coroutines.Job) null, 1, (java.lang.Object) null)\lkotlin.coroutines.CoroutineContext r1 = r3.plus(r1)\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x001f|RETURN\l|return new kotlinx.coroutines.internal.Scopes(r1)\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001a|PHI: r1 \l  PHI: (r1v7 kotlin.coroutines.CoroutineContext) = (r1v6 kotlin.coroutines.CoroutineContext), (r1v8 kotlin.coroutines.CoroutineContext) binds: [B:13:0x000e, B:12:0x000c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.CoroutineScope kotlinx.coroutines.CoroutineScopeKt.CoroutineScope((r3v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000e \-\> B:14:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_14 -> Node_15;
}

