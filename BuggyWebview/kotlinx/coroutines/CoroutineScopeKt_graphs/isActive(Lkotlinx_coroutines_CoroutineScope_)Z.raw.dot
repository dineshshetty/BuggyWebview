digraph "CFG forkotlinx.coroutines.CoroutineScopeKt.isActive(Lkotlinx\/coroutines\/CoroutineScope;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = (r2 I:kotlinx.coroutines.CoroutineScope A[D('$this$isActive' kotlinx.coroutines.CoroutineScope)]) type: INTERFACE call: kotlinx.coroutines.CoroutineScope.getCoroutineContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:137)\l0x0004: SGET  (r1 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key \l0x0006: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r1 I:??[OBJECT, ARRAY]) \l0x0008: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Element) = (r0 I:kotlin.coroutines.CoroutineContext), (r1 I:kotlin.coroutines.CoroutineContext$Key) type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x000c: CHECK_CAST (r0 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0012 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|SYNTHETIC\lRETURN\l|0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0016: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0012|0x0012: INVOKE  (r0 I:boolean) = (r0 I:kotlinx.coroutines.Job) type: INTERFACE call: kotlinx.coroutines.Job.isActive():boolean A[MD:():boolean (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlinx.coroutines.CoroutineScopeKt.isActive((r2 I:kotlinx.coroutines.CoroutineScope A[D('$this$isActive' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0012 \-\> B:14:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0016: r2 '$this$isActive' Lkotlinx\/coroutines\/CoroutineScope;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

