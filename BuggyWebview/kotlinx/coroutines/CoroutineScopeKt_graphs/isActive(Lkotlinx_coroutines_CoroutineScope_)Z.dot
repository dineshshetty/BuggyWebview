digraph "CFG forkotlinx.coroutines.CoroutineScopeKt.isActive(Lkotlinx\/coroutines\/CoroutineScope;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlinx.coroutines.Job r0 = (kotlinx.coroutines.Job) r2.getCoroutineContext().get(kotlinx.coroutines.Job.Key)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|if (r0 != null) goto L5\l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|SYNTHETIC\lRETURN\l|return true\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0012}"];
Node_14 [shape=record,label="{14\:\ 0x0016|RETURN\lORIG_RETURN\l|return r0.isActive()\l}"];
MethodNode[shape=record,label="{public static final boolean kotlinx.coroutines.CoroutineScopeKt.isActive((r2v0 '$this$isActive' kotlinx.coroutines.CoroutineScope A[D('$this$isActive' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0012 \-\> B:14:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

