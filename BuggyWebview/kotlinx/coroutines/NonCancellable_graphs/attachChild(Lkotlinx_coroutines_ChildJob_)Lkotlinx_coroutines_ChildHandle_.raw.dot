digraph "CFG forkotlinx.coroutines.NonCancellable.attachChild(Lkotlinx\/coroutines\/ChildJob;)Lkotlinx\/coroutines\/ChildHandle;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:kotlinx.coroutines.NonDisposableHandle) =  kotlinx.coroutines.NonDisposableHandle.INSTANCE kotlinx.coroutines.NonDisposableHandle  (LINE:127)\l0x0002: CHECK_CAST (r0 I:kotlinx.coroutines.ChildHandle) = (kotlinx.coroutines.ChildHandle) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:kotlinx.coroutines.ChildHandle) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.ChildHandle kotlinx.coroutines.NonCancellable.attachChild((r1 'this' I:kotlinx.coroutines.NonCancellable A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.ChildJob A[D('child' kotlinx.coroutines.ChildJob), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>WARNING:Lkotlin\/DeprecationLevel;\}, message=NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited\}\}\}\lDebug Info:\l  \-1 \-0x0004: r2 'child' Lkotlinx\/coroutines\/ChildJob;\lMETHOD_OVERRIDE: [kotlinx.coroutines.Job.attachChild(kotlinx.coroutines.ChildJob):kotlinx.coroutines.ChildHandle]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

