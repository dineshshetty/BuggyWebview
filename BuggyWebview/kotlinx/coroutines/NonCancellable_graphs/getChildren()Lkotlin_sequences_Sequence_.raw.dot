digraph "CFG forkotlinx.coroutines.NonCancellable.getChildren()Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.sequences.Sequence) =  type: STATIC call: kotlin.sequences.SequencesKt.emptySequence():kotlin.sequences.Sequence A[MD:\<T\>:():kotlin.sequences.Sequence\<T\> (m)] (LINE:120)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:kotlin.sequences.Sequence\<kotlinx.coroutines.Job\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<kotlinx.coroutines.Job\> kotlinx.coroutines.NonCancellable.getChildren((r1 'this' I:kotlinx.coroutines.NonCancellable A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lSIGNATURE: ()Lkotlin\/sequences\/Sequence\<Lkotlinx\/coroutines\/Job;\>;\lMETHOD_OVERRIDE: [kotlinx.coroutines.Job.getChildren():kotlin.sequences.Sequence\<kotlinx.coroutines.Job\>]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

