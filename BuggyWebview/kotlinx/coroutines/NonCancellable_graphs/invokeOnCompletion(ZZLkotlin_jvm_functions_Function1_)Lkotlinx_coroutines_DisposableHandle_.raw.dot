digraph "CFG forkotlinx.coroutines.NonCancellable.invokeOnCompletion(ZZLkotlin\/jvm\/functions\/Function1;)Lkotlinx\/coroutines\/DisposableHandle;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:kotlinx.coroutines.NonDisposableHandle) =  kotlinx.coroutines.NonDisposableHandle.INSTANCE kotlinx.coroutines.NonDisposableHandle  (LINE:98)\l0x0002: CHECK_CAST (r0 I:kotlinx.coroutines.DisposableHandle) = (kotlinx.coroutines.DisposableHandle) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:kotlinx.coroutines.DisposableHandle) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.DisposableHandle kotlinx.coroutines.NonCancellable.invokeOnCompletion((r1 'this' I:kotlinx.coroutines.NonCancellable A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[D('onCancelling' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[D('invokeImmediately' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\> A[D('handler' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>WARNING:Lkotlin\/DeprecationLevel;\}, message=NonCancellable can be used only as an argument for 'withContext', direct usages of its API are prohibited\}\}\}\lDebug Info:\l  \-1 \-0x0004: r2 'onCancelling' Z\l  \-1 \-0x0004: r3 'invokeImmediately' Z\l  \-1 \-0x0004: r4 'handler' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (ZZLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Lkotlin\/Unit;\>;)Lkotlinx\/coroutines\/DisposableHandle;\lMETHOD_OVERRIDE: [kotlinx.coroutines.Job.invokeOnCompletion(boolean, boolean, kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):kotlinx.coroutines.DisposableHandle]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

