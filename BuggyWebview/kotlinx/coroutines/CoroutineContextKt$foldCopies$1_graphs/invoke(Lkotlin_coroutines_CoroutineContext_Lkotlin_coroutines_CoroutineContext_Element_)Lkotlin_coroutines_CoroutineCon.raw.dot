digraph "CFG forkotlinx.coroutines.CoroutineContextKt$foldCopies$1.invoke(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext$Element;)Lkotlin\/coroutines\/CoroutineContext;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)]) kotlinx.coroutines.CopyableThreadContextElement  (LINE:82)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0012 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)])  (LINE:83)\l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.CopyableThreadContextElement) = (kotlinx.coroutines.CopyableThreadContextElement) (r0 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:kotlinx.coroutines.CopyableThreadContextElement) = (r0 I:kotlinx.coroutines.CopyableThreadContextElement) type: INTERFACE call: kotlinx.coroutines.CopyableThreadContextElement.copyForChild():kotlinx.coroutines.CopyableThreadContextElement A[MD:():kotlinx.coroutines.CopyableThreadContextElement\<S\> (m)]\l0x000b: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r0 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r2 I:kotlin.coroutines.CoroutineContext A[D('result' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:kotlin.coroutines.CoroutineContext) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|0x0012: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('element' kotlin.coroutines.CoroutineContext$Element)])  (LINE:85)\l0x0013: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r0 I:??[OBJECT, ARRAY]) \l0x0015: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r2 I:kotlin.coroutines.CoroutineContext A[D('result' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|RETURN\l|0x0019: RETURN  (r0 I:kotlin.coroutines.CoroutineContext) \l}"];
MethodNode[shape=record,label="{public final kotlin.coroutines.CoroutineContext kotlinx.coroutines.CoroutineContextKt$foldCopies$1.invoke((r1 'this' I:kotlinx.coroutines.CoroutineContextKt$foldCopies$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.coroutines.CoroutineContext A[D('result' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.coroutines.CoroutineContext$Element A[D('element' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0019 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0019: r2 'result' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0019: r3 'element' Lkotlin\/coroutines\/CoroutineContext$Element;\lREPLACED_BY: kotlinx.coroutines.CoroutineContextKt$foldCopies$1.invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext\lBRIDGED_BY: kotlinx.coroutines.CoroutineContextKt$foldCopies$1.invoke(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext$Element):kotlin.coroutines.CoroutineContext\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function2.invoke(P1, P2):R]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

