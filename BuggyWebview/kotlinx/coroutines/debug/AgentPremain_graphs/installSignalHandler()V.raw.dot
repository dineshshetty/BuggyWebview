digraph "CFG forkotlinx.coroutines.debug.AgentPremain.installSignalHandler()V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x000e, blocks: (B:11:0x0001), top: B:15:0x0001 \}\lCatch: all \-\> 0x000e\l|0x0001: NEW_INSTANCE  (r0 I:sun.misc.Signal) =  sun.misc.Signal A[Catch: all \-\> 0x000e, TRY_ENTER] (LINE:62)\l0x0003: CONST_STR  (r1 I:java.lang.String) =  \"TRAP\" \l0x0005: INVOKE  (r0 I:sun.misc.Signal), (r1 I:java.lang.String) type: DIRECT call: sun.misc.Signal.\<init\>(java.lang.String):void A[Catch: all \-\> 0x000e]\l0x0008: SGET  (r1 I:kotlinx.coroutines.debug.AgentPremain$$ExternalSyntheticLambda0) =  kotlinx.coroutines.debug.AgentPremain$$ExternalSyntheticLambda0.INSTANCE kotlinx.coroutines.debug.AgentPremain$$ExternalSyntheticLambda0 A[Catch: all \-\> 0x000e]\l0x000a: INVOKE  (r0 I:sun.misc.Signal), (r1 I:sun.misc.SignalHandler) type: STATIC call: sun.misc.Signal.handle(sun.misc.Signal, sun.misc.SignalHandler):sun.misc.SignalHandler A[Catch: all \-\> 0x000e, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN   A[SYNTHETIC] (LINE:74)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|ExcHandler: all \-\> 0x000e\l|0x000e: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x000e] (LINE:71)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN    (LINE:74)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.debug.AgentPremain.installSignalHandler((r2 'this' I:kotlinx.coroutines.debug.AgentPremain A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000e \-\> B:14:0x000f, CROSS_EDGE: B:15:0x0001 \-\> B:13:0x000e\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x000e, blocks: (B:11:0x0001), top: B:15:0x0001 \}\l}"];
MethodNode -> Node_9;Node_9 -> Node_15;
Node_15 -> Node_11;
Node_15 -> Node_13;
Node_11 -> Node_16;
Node_11 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_10;
Node_13 -> Node_14;
Node_14 -> Node_10;
}

