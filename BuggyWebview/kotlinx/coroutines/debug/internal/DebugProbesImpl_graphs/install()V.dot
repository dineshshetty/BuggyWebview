digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.install()V" {
Node_43 [shape=record,label="{43\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0000|java.util.concurrent.locks.ReentrantReadWriteLock r0 = kotlinx.coroutines.debug.internal.DebugProbesImpl.coroutineStateLock\ljava.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r1 = r0.readLock()\lr3 = 0\l}"];
Node_46 [shape=record,label="{46\:\ 0x000b|if (r0.getWriteHoldCount() != 0) goto L42\l}"];
Node_47 [shape=record,label="{47\:\ 0x000d|int r2 = r0.getReadHoldCount()\l}"];
Node_49 [shape=record,label="{49\:\ 0x0013|PHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:48:0x0012, B:47:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|r4 = 0\l}"];
Node_50 [shape=record,label="{50\:\ 0x0014|LOOP_START\lLOOP:0: B:50:0x0014\-\>B:51:0x0016\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v5 int) binds: [B:49:0x0013, B:51:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r2) goto L7\l}"];
Node_51 [shape=record,label="{51\:\ 0x0016|LOOP_END\lLOOP:0: B:50:0x0014\-\>B:51:0x0016\l|int r4 = r4 + 1\lr1.unlock()\l}"];
Node_81 [shape=record,label="{81\:\ 0x001c|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x001c|java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0 = r0.writeLock()\lr0.lock()\l}"];
Node_79 [shape=record,label="{79\:\ 0x0024|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_53 [shape=record,label="{53\:\ 0x0024|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0070, blocks: (B:53:0x0024, B:59:0x003c, B:65:0x0053, B:69:0x0060, B:68:0x0058), top: B:79:0x0024 \}\lCatch: all \-\> 0x0070\l|kotlinx.coroutines.debug.internal.DebugProbesImpl r5 = kotlinx.coroutines.debug.internal.DebugProbesImpl.INSTANCE     \/\/ Catch: java.lang.Throwable \-\> L70\lkotlinx.coroutines.debug.internal.DebugProbesImpl.installations = kotlinx.coroutines.debug.internal.DebugProbesImpl.installations + 1     \/\/ Catch: java.lang.Throwable \-\> L70\l}"];
Node_54 [shape=record,label="{54\:\ 0x002e|if (kotlinx.coroutines.debug.internal.DebugProbesImpl.installations \<= 1) goto L18\l}"];
Node_55 [shape=record,label="{55\:\ 0x0030|LOOP_START\lDONT_GENERATE\lLOOP:1: B:55:0x0030\-\>B:56:0x0032\lPHI: r3 \l  PHI: (r3v7 int) = (r3v0 int), (r3v8 int) binds: [B:54:0x002e, B:56:0x0032] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L14\l}"];
Node_56 [shape=record,label="{56\:\ 0x0032|LOOP_END\lDONT_GENERATE\lLOOP:1: B:55:0x0030\-\>B:56:0x0032\l|int r3 = r3 + 1\lr1.lock()\l}"];
Node_82 [shape=record,label="{82\:\ 0x0038|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x0038|DONT_GENERATE\l|r0.unlock()\l}"];
Node_58 [shape=record,label="{58\:\ 0x003b|RETURN\l|return\l}"];
Node_44 [shape=record,label="{44\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ 0x003c|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0070, blocks: (B:53:0x0024, B:59:0x003c, B:65:0x0053, B:69:0x0060, B:68:0x0058), top: B:79:0x0024 \}\lCatch: all \-\> 0x0070\l|r5.startWeakRefCleanerThread()     \/\/ Catch: java.lang.Throwable \-\> L70\l}"];
Node_60 [shape=record,label="{60\:\ 0x0045|if (kotlinx.coroutines.debug.internal.AgentInstallationType.INSTANCE.isInstalledStatically$kotlinx_coroutines_core() == false) goto L25\l}"];
Node_61 [shape=record,label="{61\:\ 0x0047|LOOP_START\lLOOP:2: B:61:0x0047\-\>B:62:0x0049\lPHI: r3 \l  PHI: (r3v5 int) = (r3v0 int), (r3v6 int) binds: [B:60:0x0045, B:62:0x0049] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L22\l}"];
Node_62 [shape=record,label="{62\:\ 0x0049|LOOP_END\lLOOP:2: B:61:0x0047\-\>B:62:0x0049\l|int r3 = r3 + 1\lr1.lock()\l}"];
Node_83 [shape=record,label="{83\:\ 0x004f|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x004f|r0.unlock()\l}"];
Node_64 [shape=record,label="{64\:\ 0x0052|RETURN\l|return\l}"];
Node_65 [shape=record,label="{65\:\ 0x0053|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0070, blocks: (B:53:0x0024, B:59:0x003c, B:65:0x0053, B:69:0x0060, B:68:0x0058), top: B:79:0x0024 \}\lCatch: all \-\> 0x0070\l|kotlin.jvm.functions.Function1\<java.lang.Boolean, kotlin.Unit\> r5 = kotlinx.coroutines.debug.internal.DebugProbesImpl.dynamicAttach     \/\/ Catch: java.lang.Throwable \-\> L70\l}"];
Node_66 [shape=record,label="{66\:\ 0x0055|if (r5 != null) goto L35\l}"];
Node_67 [shape=record,label="{67\:\ 0x0057}"];
Node_69 [shape=record,label="{69\:\ 0x0060|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0070, blocks: (B:53:0x0024, B:59:0x003c, B:65:0x0053, B:69:0x0060, B:68:0x0058), top: B:79:0x0024 \}\lCatch: all \-\> 0x0070\l|kotlin.Unit r4 = kotlin.Unit.INSTANCE     \/\/ Catch: java.lang.Throwable \-\> L70\l}"];
Node_70 [shape=record,label="{70\:\ 0x0064|LOOP_START\lLOOP:3: B:70:0x0064\-\>B:71:0x0066\lPHI: r3 \l  PHI: (r3v3 int) = (r3v0 int), (r3v4 int) binds: [B:69:0x0060, B:71:0x0066] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L31\l}"];
Node_71 [shape=record,label="{71\:\ 0x0066|LOOP_END\lLOOP:3: B:70:0x0064\-\>B:71:0x0066\l|int r3 = r3 + 1\lr1.lock()\l}"];
Node_84 [shape=record,label="{84\:\ 0x006c|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x006c|r0.unlock()\l}"];
Node_73 [shape=record,label="{73\:\ 0x006f|RETURN\l|return\l}"];
Node_80 [shape=record,label="{80\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_68 [shape=record,label="{68\:\ 0x0058|TryCatch #0 \{all \-\> 0x0070, blocks: (B:53:0x0024, B:59:0x003c, B:65:0x0053, B:69:0x0060, B:68:0x0058), top: B:79:0x0024 \}\lCatch: all \-\> 0x0070\l|r5.invoke(true)     \/\/ Catch: java.lang.Throwable \-\> L70\l}"];
Node_74 [shape=record,label="{74\:\ 0x0070|ExcHandler: all \-\> 0x0070\l|java.lang.Throwable r4 = move\-exception\l}"];
Node_75 [shape=record,label="{75\:\ 0x0071|LOOP_START\lFINALLY_INSNS\lLOOP:4: B:75:0x0071\-\>B:76:0x0073\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:74:0x0070, B:76:0x0073] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L39\l}"];
Node_76 [shape=record,label="{76\:\ 0x0073|LOOP_END\lFINALLY_INSNS\lLOOP:4: B:75:0x0071\-\>B:76:0x0073\l|int r3 = r3 + 1\lr1.lock()\l}"];
Node_85 [shape=record,label="{85\:\ 0x0079|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0079|FINALLY_INSNS\l|r0.unlock()\l}"];
Node_78 [shape=record,label="{78\:\ 0x007c|throw r4\l}"];
Node_48 [shape=record,label="{48\:\ 0x0012|r2 = 0\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.DebugProbesImpl.install((r8v0 'this' kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:51:0x0016 \-\> B:50:0x0014, BACK_EDGE: B:56:0x0032 \-\> B:55:0x0030, BACK_EDGE: B:62:0x0049 \-\> B:61:0x0047, CROSS_EDGE: B:64:0x0052 \-\> B:44:?, BACK_EDGE: B:71:0x0066 \-\> B:70:0x0064, CROSS_EDGE: B:73:0x006f \-\> B:44:?, BACK_EDGE: B:76:0x0073 \-\> B:75:0x0071, CROSS_EDGE: B:78:0x007c \-\> B:44:?, CROSS_EDGE: B:68:0x0058 \-\> B:67:0x0057, CROSS_EDGE: B:79:0x0024 \-\> B:74:0x0070, CROSS_EDGE: B:48:0x0012 \-\> B:49:0x0013\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0070, blocks: (B:53:0x0024, B:59:0x003c, B:65:0x0053, B:69:0x0060, B:68:0x0058), top: B:79:0x0024 \}\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Another duplicated slice has different insns count: \{[IF]\}, finally: \{[IF, ARITH, INVOKE, INVOKE] complete\}\l \-\> Another duplicated slice has different insns count: \{[IF]\}, finally: \{[IF, ARITH, INVOKE, INVOKE] complete\}\}\l}"];
MethodNode -> Node_43;Node_43 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_81;
Node_51 -> Node_50;
Node_81 -> Node_52;
Node_52 -> Node_79;
Node_79 -> Node_53;
Node_79 -> Node_74;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_59;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_82;
Node_56 -> Node_55;
Node_82 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_44;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_65;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_83;
Node_62 -> Node_61;
Node_83 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_44;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_69;
Node_69 -> Node_70;
Node_69 -> Node_80;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_84;
Node_71 -> Node_70;
Node_84 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_44;
Node_80 -> Node_74;
Node_68 -> Node_67;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_85;
Node_76 -> Node_75;
Node_85 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_44;
Node_48 -> Node_49;
}

