digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.enhanceStackTraceWithThreadDumpAsJson(Lkotlinx\/coroutines\/debug\/internal\/DebugCoroutineInfo;)Ljava\/lang\/String;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.List) = \l  (r14 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfo A[D('info' kotlinx.coroutines.debug.internal.DebugCoroutineInfo)])\l type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfo.lastObservedStackTrace():java.util.List A[MD:():java.util.List\<java.lang.StackTraceElement\> (m)] (LINE:225)\l0x0004: INVOKE  (r0 I:java.util.List) = \l  (r13 I:kotlinx.coroutines.debug.internal.DebugProbesImpl)\l  (r14 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfo A[D('info' kotlinx.coroutines.debug.internal.DebugCoroutineInfo)])\l  (r0 I:java.util.List)\l type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugProbesImpl.enhanceStackTraceWithThreadDump(kotlinx.coroutines.debug.internal.DebugCoroutineInfo, java.util.List):java.util.List A[MD:(kotlinx.coroutines.debug.internal.DebugCoroutineInfo, java.util.List\<java.lang.StackTraceElement\>):java.util.List\<java.lang.StackTraceElement\> (m)]\l0x0008: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:226)\l0x000a: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x000d: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r2 I:java.util.Iterator) = (r0 I:java.util.List A[D('stackTraceElements' java.util.List)]) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:227)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|LOOP_START\lLOOP:0: B:18:0x0013\-\>B:24:0x0050\l|0x0013: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0072 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|0x0019: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001d: CHECK_CAST (r3 I:java.lang.StackTraceElement) = (java.lang.StackTraceElement) (r3 I:??[OBJECT, ARRAY]) \l0x0020: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:229)\l0x0022: INVOKE  (r4 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0025: CONST_STR  (r5 I:java.lang.String) =  \"n                \{n                    \"declaringClass\": \"\" \l0x0027: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002a: INVOKE  (r5 I:java.lang.String) = (r3 I:java.lang.StackTraceElement A[D('element' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getClassName():java.lang.String A[MD:():java.lang.String (c)] (LINE:231)\l0x002e: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)] (LINE:229)\l0x0032: CONST_STR  (r5 I:java.lang.String) =  \"\",n                    \"methodName\": \"\"  (LINE:229)\l0x0034: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0037: INVOKE  (r5 I:java.lang.String) = (r3 I:java.lang.StackTraceElement A[D('element' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getMethodName():java.lang.String A[MD:():java.lang.String (c)] (LINE:232)\l0x003b: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)] (LINE:229)\l0x003f: CONST_STR  (r5 I:java.lang.String) =  \"\",n                    \"fileName\": \"  (LINE:229)\l0x0041: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0044: INVOKE  (r5 I:java.lang.String) = (r3 I:java.lang.StackTraceElement A[D('element' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getFileName():java.lang.String A[MD:():java.lang.String (c)] (LINE:233)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x004c \l}"];
Node_22 [shape=record,label="{22\:\ 0x004a|0x004a: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0050|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0050|LOOP_END\lLOOP:0: B:18:0x0013\-\>B:24:0x0050\l|0x0050: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)] (LINE:229)\l0x0054: CONST_STR  (r5 I:java.lang.String) =  \",n                    \"lineNumber\": \"  (LINE:229)\l0x0056: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0059: INVOKE  (r5 I:int) = (r3 I:java.lang.StackTraceElement A[D('element' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getLineNumber():int A[MD:():int (c)] (LINE:234)\l0x005d: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)] (LINE:229)\l0x0061: CONST_STR  (r5 I:java.lang.String) =  \"n                \}n                \"  (LINE:229)\l0x0063: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0066: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x006a: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.String) type: STATIC call: kotlin.text.StringsKt.trimIndent(java.lang.String):java.lang.String A[MD:(java.lang.String):java.lang.String (m)] (LINE:236)\l0x006e: INVOKE  (r1 I:java.util.List A[D('stackTraceElementsInfoAsJson' java.util.List)]), (r4 I:java.lang.Object) type: INTERFACE call: java.util.List.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:228)\l}"];
Node_23 [shape=record,label="{23\:\ 0x004c|0x004c: INVOKE  (r5 I:java.lang.String) = (r13 I:kotlinx.coroutines.debug.internal.DebugProbesImpl), (r5 I:java.lang.Object) type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.toStringWithQuotes(java.lang.Object):java.lang.String A[MD:(java.lang.Object):java.lang.String (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0050|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0072|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0072|0x0072: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:240)\l0x0074: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0077: CONST  (r3 I:??[int, float, short, byte, char]) = (91 ??[int, float, short, byte, char]) \l0x0079: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x007c: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('stackTraceElementsInfoAsJson' java.util.List)]) \l0x007d: CHECK_CAST (r4 I:java.lang.Iterable) = (java.lang.Iterable) (r4 I:??[OBJECT, ARRAY]) \l0x007f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0080: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0081: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0082: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0083: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0084: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0085: CONST  (r11 I:??[int, float, short, byte, char]) = (63 ??[int, float, short, byte, char]) \l0x0087: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0088: INVOKE  (r3 I:java.lang.String) = \l  (r4 I:java.lang.Iterable)\l  (r5 I:java.lang.CharSequence)\l  (r6 I:java.lang.CharSequence)\l  (r7 I:java.lang.CharSequence)\l  (r8 I:int)\l  (r9 I:java.lang.CharSequence)\l  (r10 I:kotlin.jvm.functions.Function1)\l  (r11 I:int)\l  (r12 I:java.lang.Object)\l type: STATIC call: kotlin.collections.CollectionsKt.joinToString$default(java.lang.Iterable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String A[MD:(java.lang.Iterable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String (m)]\l0x008c: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x008f: CONST  (r3 I:??[int, float, short, byte, char]) = (93 ??[int, float, short, byte, char]) \l0x0091: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0094: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0098|RETURN\l|0x0098: RETURN  (r2 I:java.lang.String) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlinx.coroutines.debug.internal.DebugProbesImpl.enhanceStackTraceWithThreadDumpAsJson((r13 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r14 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfo A[D('info' kotlinx.coroutines.debug.internal.DebugCoroutineInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:24:0x0050 \-\> B:18:0x0013, CROSS_EDGE: B:23:0x004c \-\> B:24:0x0050\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0072: r3 'element' Ljava\/lang\/StackTraceElement;\l  0x0008\-0x0098: r0 'stackTraceElements' Ljava\/util\/List;\l  0x000f\-0x0098: r1 'stackTraceElementsInfoAsJson' Ljava\/util\/List;\l  \-1 \-0x0098: r14 'info' Lkotlinx\/coroutines\/debug\/internal\/DebugCoroutineInfo;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [229=9]\}\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_27;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_29;
Node_29 -> Node_24;
Node_24 -> Node_18;
Node_23 -> Node_28;
Node_28 -> Node_24;
Node_27 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_16;
}

