digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.build(Lkotlinx\/coroutines\/Job;Ljava\/util\/Map;Ljava\/lang\/StringBuilder;Ljava\/lang\/String;)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) = (r10 I:java.util.Map A[D('map' java.util.Map)]), (r9 I:java.lang.Object A[D('$this$build' kotlinx.coroutines.Job)]) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)] (LINE:122)\l0x0004: CHECK_CAST (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) = (kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) (r0 I:??[OBJECT, ARRAY]) \l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST_STR  (r2 I:java.lang.String) =  \"t\"  (LINE:124)\l0x0009: CONST  (r3 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('info' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0031 \l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|0x000d: INSTANCE_OF  (r4 I:boolean) = (r9 I:??[OBJECT, ARRAY] A[D('$this$build' kotlinx.coroutines.Job)]) kotlinx.coroutines.internal.ScopeCoroutine  (LINE:127)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|0x000f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x002f \l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|0x0011: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:128)\l0x0013: INVOKE  (r4 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0016: INVOKE  (r4 I:java.lang.StringBuilder), (r12 I:java.lang.String A[D('indent' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0019: INVOKE  (r5 I:java.lang.String) = \l  (r8 I:kotlinx.coroutines.debug.internal.DebugProbesImpl)\l  (r9 I:kotlinx.coroutines.Job A[D('$this$build' kotlinx.coroutines.Job)])\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.getDebugString(kotlinx.coroutines.Job):java.lang.String A[MD:(kotlinx.coroutines.Job):java.lang.String (m)]\l0x001d: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0020: INVOKE  (r4 I:java.lang.StringBuilder), (r3 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0023: INVOKE  (r3 I:java.lang.String) = (r4 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0027: INVOKE  (r11 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)]), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002a: INVOKE  (r1 I:java.lang.String A[D('newIndent' java.lang.String)]) = (r12 I:java.lang.String A[D('indent' java.lang.String)]), (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)] (LINE:129)\l}"];
Node_24 [shape=record,label="{24\:\ 0x006c|0x006c: INVOKE  (r2 I:kotlin.sequences.Sequence) = (r9 I:kotlinx.coroutines.Job A[D('$this$build' kotlinx.coroutines.Job)]) type: INTERFACE call: kotlinx.coroutines.Job.getChildren():kotlin.sequences.Sequence A[MD:():kotlin.sequences.Sequence\<kotlinx.coroutines.Job\> (m)] (LINE:141)\l0x0070: INVOKE  (r2 I:java.util.Iterator) = (r2 I:kotlin.sequences.Sequence) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0074|LOOP_START\lLOOP:0: B:25:0x0074\-\>B:27:0x007a\l|0x0074: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0078|0x0078: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0084 \l}"];
Node_27 [shape=record,label="{27\:\ 0x007a|LOOP_END\lLOOP:0: B:25:0x0074\-\>B:27:0x007a\l|0x007a: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x007e: CHECK_CAST (r3 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r3 I:??[OBJECT, ARRAY]) \l0x0080: INVOKE  \l  (r8 I:kotlinx.coroutines.debug.internal.DebugProbesImpl)\l  (r3 I:kotlinx.coroutines.Job A[D('child' kotlinx.coroutines.Job)])\l  (r10 I:java.util.Map A[D('map' java.util.Map)])\l  (r11 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)])\l  (r1 I:java.lang.String A[D('newIndent' java.lang.String)])\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.build(kotlinx.coroutines.Job, java.util.Map, java.lang.StringBuilder, java.lang.String):void A[MD:(kotlinx.coroutines.Job, java.util.Map\<kotlinx.coroutines.Job, kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl\>, java.lang.StringBuilder, java.lang.String):void (m)] (LINE:142)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0084|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0084|RETURN\l|0x0084: RETURN    (LINE:144)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x002f|0x002f: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('newIndent' java.lang.String)]) = (r12 I:??[OBJECT, ARRAY] A[D('indent' java.lang.String)])  (LINE:131)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|0x0031: INVOKE  (r4 I:java.util.List) = \l  (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[D('info' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)])\l type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedStackTrace():java.util.List A[MD:():java.util.List\<java.lang.StackTraceElement\> (m)] (LINE:135)\l0x0035: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.List) type: STATIC call: kotlin.collections.CollectionsKt.firstOrNull(java.util.List):java.lang.Object A[MD:\<T\>:(java.util.List\<? extends T\>):T (m)]\l0x0039: CHECK_CAST (r4 I:java.lang.StackTraceElement) = (java.lang.StackTraceElement) (r4 I:??[OBJECT, ARRAY]) \l0x003b: INVOKE  (r5 I:java.lang.String) = \l  (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[D('info' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)])\l type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.getState():java.lang.String A[MD:():java.lang.String (m)] (LINE:136)\l0x003f: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:137)\l0x0041: INVOKE  (r6 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0044: INVOKE  (r6 I:java.lang.StringBuilder), (r12 I:java.lang.String A[D('indent' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0047: INVOKE  (r7 I:java.lang.String) = \l  (r8 I:kotlinx.coroutines.debug.internal.DebugProbesImpl)\l  (r9 I:kotlinx.coroutines.Job A[D('$this$build' kotlinx.coroutines.Job)])\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.getDebugString(kotlinx.coroutines.Job):java.lang.String A[MD:(kotlinx.coroutines.Job):java.lang.String (m)]\l0x004b: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x004e: CONST_STR  (r7 I:java.lang.String) =  \", continuation is \" \l0x0050: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0053: INVOKE  (r6 I:java.lang.StringBuilder), (r5 I:java.lang.String A[D('state' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0056: CONST_STR  (r7 I:java.lang.String) =  \" at line \" \l0x0058: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005b: INVOKE  (r6 I:java.lang.StringBuilder), (r4 I:java.lang.Object A[D('element' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x005e: INVOKE  (r6 I:java.lang.StringBuilder), (r3 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0061: INVOKE  (r3 I:java.lang.String) = (r6 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0065: INVOKE  (r11 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)]), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0068: INVOKE  (r1 I:java.lang.String A[D('newIndent' java.lang.String)]) = (r12 I:java.lang.String A[D('indent' java.lang.String)]), (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)] (LINE:138)\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.debug.internal.DebugProbesImpl.build((r8 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r9 I:kotlinx.coroutines.Job A[D('$this$build' kotlinx.coroutines.Job), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.Map\<kotlinx.coroutines.Job, kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl\> A[D('map' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String A[D('indent' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x007a \-\> B:25:0x0074, CROSS_EDGE: B:22:0x002f \-\> B:24:0x006c, CROSS_EDGE: B:23:0x0031 \-\> B:24:0x006c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003b\-0x006c: r4 'element' Ljava\/lang\/StackTraceElement;\l  0x003f\-0x006c: r5 'state' Ljava\/lang\/String;\l  0x0080\-0x0083: r3 'child' Lkotlinx\/coroutines\/Job;\l  0x0006\-0x0084: r0 'info' Lkotlinx\/coroutines\/debug\/internal\/DebugCoroutineInfoImpl;\l  0x0007\-0x0084: r1 'newIndent' Ljava\/lang\/String;\l  \-1 \-0x0084: r9 '$this$build' Lkotlinx\/coroutines\/Job;\l  \-1 \-0x0084: r10 'map' Ljava\/util\/Map;\l  \-1 \-0x0084: r11 'builder' Ljava\/lang\/StringBuilder;\l  \-1 \-0x0084: r12 'indent' Ljava\/lang\/String;\lSIGNATURE: (Lkotlinx\/coroutines\/Job;Ljava\/util\/Map\<Lkotlinx\/coroutines\/Job;Lkotlinx\/coroutines\/debug\/internal\/DebugCoroutineInfoImpl;\>;Ljava\/lang\/StringBuilder;Ljava\/lang\/String;)V\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_25;
Node_29 -> Node_28;
Node_28 -> Node_16;
Node_22 -> Node_24;
Node_23 -> Node_24;
}

