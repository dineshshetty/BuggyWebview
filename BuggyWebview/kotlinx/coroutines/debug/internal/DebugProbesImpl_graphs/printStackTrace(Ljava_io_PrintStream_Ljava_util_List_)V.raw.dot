digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.printStackTrace(Ljava\/io\/PrintStream;Ljava\/util\/List;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('frames' java.util.List)])  (LINE:310)\l0x0001: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: INVOKE  (r2 I:java.util.Iterator) = (r0 I:java.lang.Iterable A[D('$this$forEach$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:658)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|LOOP_START\lLOOP:0: B:12:0x0008\-\>B:14:0x000e\l|0x0008: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|0x000c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0022 \l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|LOOP_END\lLOOP:0: B:12:0x0008\-\>B:14:0x000e\l|0x000e: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0012: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0013: CHECK_CAST (r4 I:java.lang.StackTraceElement) = (java.lang.StackTraceElement) (r4 I:??[OBJECT, ARRAY]) \l0x0015: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: CONST_STR  (r6 I:java.lang.String) =  \"ntat \"  (LINE:311)\l0x0018: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.String), (r4 I:java.lang.Object A[D('frame' java.lang.StackTraceElement)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x001c: INVOKE  (r8 I:java.io.PrintStream A[D('out' java.io.PrintStream)]), (r6 I:java.lang.String) type: VIRTUAL call: java.io.PrintStream.print(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0022|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:313)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.debug.internal.DebugProbesImpl.printStackTrace((r7 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r8 I:java.io.PrintStream A[D('out' java.io.PrintStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.util.List\<java.lang.StackTraceElement\> A[D('frames' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x000e \-\> B:12:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0020: r3 'element$iv' Ljava\/lang\/Object;\l  0x0015\-0x0020: r4 'frame' Ljava\/lang\/StackTraceElement;\l  0x0016\-0x0020: r5 '$i$a$\-forEach\-DebugProbesImpl$printStackTrace$1' I\l  0x0003\-0x0022: r0 '$this$forEach$iv' Ljava\/lang\/Iterable;\l  0x0004\-0x0022: r1 '$i$f$forEach' I\l  \-1 \-0x0022: r8 'out' Ljava\/io\/PrintStream;\l  \-1 \-0x0022: r9 'frames' Ljava\/util\/List;\lSIGNATURE: (Ljava\/io\/PrintStream;Ljava\/util\/List\<Ljava\/lang\/StackTraceElement;\>;)V\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_16;
Node_16 -> Node_10;
}

