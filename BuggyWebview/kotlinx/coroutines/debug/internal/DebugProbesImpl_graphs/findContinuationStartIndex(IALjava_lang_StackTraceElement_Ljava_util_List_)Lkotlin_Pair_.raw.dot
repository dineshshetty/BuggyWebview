digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.findContinuationStartIndex(I[Ljava\/lang\/StackTraceElement;Ljava\/util\/List;)Lkotlin\/Pair;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:404)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|LOOP_START\lLOOP:0: B:17:0x0002\-\>B:23:0x0021\l|0x0002: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0003: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: IF  (r1 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:27:0x0024 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: ARITH  (r3 I:int) = (r1 I:int) + (1 int) \l0x0008: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: SGET  (r5 I:kotlinx.coroutines.debug.internal.DebugProbesImpl) =  kotlinx.coroutines.debug.internal.DebugProbesImpl.INSTANCE kotlinx.coroutines.debug.internal.DebugProbesImpl  (LINE:405)\l0x000b: ARITH  (r6 I:int) = (r8 I:int A[D('indexOfResumeWith' int)]) + (\-1 int) \l0x000d: ARITH  (r6 I:int) = (r6 I:int) \- (r1 I:int A[D('it' int)]) \l0x000e: INVOKE  (r5 I:int) = \l  (r5 I:kotlinx.coroutines.debug.internal.DebugProbesImpl)\l  (r6 I:int)\l  (r9 I:java.lang.StackTraceElement[] A[D('actualTrace' java.lang.StackTraceElement[])])\l  (r10 I:java.util.List A[D('coroutineTrace' java.util.List)])\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.findIndexOfFrame(int, java.lang.StackTraceElement[], java.util.List):int A[MD:(int, java.lang.StackTraceElement[], java.util.List\<java.lang.StackTraceElement\>):int (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0012|0x0012: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0021  (LINE:406)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|LOOP_END\lLOOP:0: B:17:0x0002\-\>B:23:0x0021\l|0x0022: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' int)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:404)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: INVOKE  (r0 I:java.lang.Integer) = (r5 I:int A[D('result' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0018: INVOKE  (r2 I:java.lang.Integer) = (r1 I:int A[D('it' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x001c: INVOKE  (r0 I:kotlin.Pair) = (r0 I:java.lang.Object), (r2 I:java.lang.Object) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|RETURN\l|0x0020: RETURN  (r0 I:kotlin.Pair\<java.lang.Integer, java.lang.Integer\>) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0024|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|0x0024: INVOKE  (r1 I:java.lang.Integer) = (r2 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:408)\l0x0028: INVOKE  (r0 I:java.lang.Integer) = (r0 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x002c: INVOKE  (r0 I:kotlin.Pair) = (r1 I:java.lang.Object), (r0 I:java.lang.Object) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0030|RETURN\l|0x0030: RETURN  (r0 I:kotlin.Pair\<java.lang.Integer, java.lang.Integer\>) \l}"];
MethodNode[shape=record,label="{private final kotlin.Pair\<java.lang.Integer, java.lang.Integer\> kotlinx.coroutines.debug.internal.DebugProbesImpl.findContinuationStartIndex((r7 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('indexOfResumeWith' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.StackTraceElement[] A[D('actualTrace' java.lang.StackTraceElement[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.List\<java.lang.StackTraceElement\> A[D('coroutineTrace' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0021 \-\> B:17:0x0002, CROSS_EDGE: B:25:0x0030 \-\> B:15:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0022: r1 'it' I\l  0x0009\-0x0022: r4 '$i$a$\-repeat\-DebugProbesImpl$findContinuationStartIndex$1' I\l  0x0012\-0x0022: r5 'result' I\l  \-1 \-0x0030: r8 'indexOfResumeWith' I\l  \-1 \-0x0030: r9 'actualTrace' [Ljava\/lang\/StackTraceElement;\l  \-1 \-0x0030: r10 'coroutineTrace' Ljava\/util\/List;\lSIGNATURE: (I[Ljava\/lang\/StackTraceElement;Ljava\/util\/List\<Ljava\/lang\/StackTraceElement;\>;)Lkotlin\/Pair\<Ljava\/lang\/Integer;Ljava\/lang\/Integer;\>;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_23;
Node_20 -> Node_26[style=dashed];
Node_23 -> Node_17;
Node_26 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_15;
Node_27 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_15;
}

