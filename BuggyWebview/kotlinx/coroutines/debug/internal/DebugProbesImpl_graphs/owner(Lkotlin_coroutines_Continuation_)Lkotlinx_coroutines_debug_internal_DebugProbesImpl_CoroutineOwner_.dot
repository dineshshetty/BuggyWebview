digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.owner(Lkotlin\/coroutines\/Continuation;)Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0003|if ((r3 instanceof kotlin.coroutines.jvm.internal.CoroutineStackFrame) == false) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|kotlin.coroutines.jvm.internal.CoroutineStackFrame r0 = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) r3\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r0v1 kotlin.coroutines.jvm.internal.CoroutineStackFrame), (r0v4 kotlin.coroutines.jvm.internal.CoroutineStackFrame) binds: [B:16:0x0009, B:15:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L5\l}"];
Node_19 [shape=record,label="{19\:\ 0x000d}"];
Node_20 [shape=record,label="{20\:\ 0x0011|RETURN\lORIG_RETURN\l|return owner(r0)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|r0 = null\l}"];
MethodNode[shape=record,label="{private final kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\> kotlinx.coroutines.debug.internal.DebugProbesImpl.owner((r2v0 'this' kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r3v0 kotlin.coroutines.Continuation\<?\> A[D('$this$owner' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000a \-\> B:20:0x0011, CROSS_EDGE: B:16:0x0009 \-\> B:17:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/coroutines\/Continuation\<*\>;)Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner\<*\>;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

