digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.probeCoroutineCompleted(Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|kotlinx.coroutines.debug.internal.DebugProbesImpl.capturedCoroutinesMap.remove(r3)\lkotlin.coroutines.jvm.internal.CoroutineStackFrame r0 = r3.info.getLastObservedFrame$kotlinx_coroutines_core()\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|if (r0 != null) goto L9\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|r0 = null\l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|PHI: r0 \l  PHI: (r0v4 'caller' kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r0v3 'caller' kotlin.coroutines.jvm.internal.CoroutineStackFrame), (r0v5 'caller' kotlin.coroutines.jvm.internal.CoroutineStackFrame) binds: [B:15:0x000f, B:14:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|kotlinx.coroutines.debug.internal.DebugProbesImpl.callerInfoCache.remove(r0)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001b|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|kotlin.coroutines.jvm.internal.CoroutineStackFrame r0 = realCaller(r0)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.DebugProbesImpl.probeCoroutineCompleted((r2v0 'this' kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r3v0 kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\> A[D('owner' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001b \-\> B:11:?, CROSS_EDGE: B:15:0x000f \-\> B:16:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner\<*\>;)V\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

