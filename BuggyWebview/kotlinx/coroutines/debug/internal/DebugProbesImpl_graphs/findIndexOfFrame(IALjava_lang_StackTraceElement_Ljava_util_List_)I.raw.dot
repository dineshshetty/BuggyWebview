digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.findIndexOfFrame(I[Ljava\/lang\/StackTraceElement;Ljava\/util\/List;)I" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) = (r13 I:java.lang.Object[] A[D('actualTrace' java.lang.StackTraceElement[])]), (r12 I:int A[D('frameIndex' int)]) type: STATIC call: kotlin.collections.ArraysKt.getOrNull(java.lang.Object[], int):java.lang.Object A[MD:\<T\>:(T[], int):T (m)] (LINE:416)\l0x0004: CHECK_CAST (r0 I:java.lang.StackTraceElement) = (java.lang.StackTraceElement) (r0 I:??[OBJECT, ARRAY]) \l0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x000a \l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|RETURN\l|0x0009: RETURN  (r1 I:int)  (LINE:417)\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x000a|0x000a: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('coroutineTrace' java.util.List)])  (LINE:419)\l0x000b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:666)\l0x000d: INVOKE  (r5 I:java.util.Iterator) = (r2 I:java.util.List A[D('$this$indexOfFirst$iv' java.util.List)]) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:667)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0011|LOOP_START\lLOOP:0: B:31:0x0011\-\>B:44:0x0051\l|0x0011: INVOKE  (r6 I:boolean) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0015|0x0015: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0055 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|0x0017: INVOKE  (r6 I:java.lang.Object) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001b: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('item$iv' java.lang.Object)])  (LINE:668)\l0x001c: CHECK_CAST (r7 I:java.lang.StackTraceElement) = (java.lang.StackTraceElement) (r7 I:??[OBJECT, ARRAY]) \l0x001e: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: INVOKE  (r9 I:java.lang.String) = (r7 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getFileName():java.lang.String A[MD:():java.lang.String (c)] (LINE:420)\l0x0023: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StackTraceElement A[D('continuationFrame' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getFileName():java.lang.String A[MD:():java.lang.String (c)]\l0x0027: INVOKE  (r9 I:boolean) = (r9 I:java.lang.Object), (r10 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x002b|0x002b: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x004b \l}"];
Node_35 [shape=record,label="{35\:\ 0x002d|0x002d: INVOKE  (r9 I:java.lang.String) = (r7 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getClassName():java.lang.String A[MD:():java.lang.String (c)] (LINE:421)\l0x0031: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StackTraceElement A[D('continuationFrame' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getClassName():java.lang.String A[MD:():java.lang.String (c)]\l0x0035: INVOKE  (r9 I:boolean) = (r9 I:java.lang.Object), (r10 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0039|0x0039: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x004b \l}"];
Node_37 [shape=record,label="{37\:\ 0x003b|0x003b: INVOKE  (r9 I:java.lang.String) = (r7 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getMethodName():java.lang.String A[MD:():java.lang.String (c)] (LINE:422)\l0x003f: INVOKE  (r10 I:java.lang.String) = (r0 I:java.lang.StackTraceElement A[D('continuationFrame' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getMethodName():java.lang.String A[MD:():java.lang.String (c)]\l0x0043: INVOKE  (r9 I:boolean) = (r9 I:java.lang.Object), (r10 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0047|0x0047: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x004b \l}"];
Node_39 [shape=record,label="{39\:\ 0x0049|0x0049: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x004d|0x004d: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0051 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0051|LOOP_END\lLOOP:0: B:31:0x0011\-\>B:44:0x0051\l|0x0051: ARITH  (r4 I:int) = (r4 I:int A[D('index$iv' int)]) + (1 int)  (LINE:670)\l}"];
Node_48 [shape=record,label="{48\:\ 0x004f|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x004f|0x004f: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)])  (LINE:669)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0055|RETURN\lORIG_RETURN\l|0x0055: RETURN  (r1 I:int)  (LINE:419)\l}"];
Node_40 [shape=record,label="{40\:\ 0x004b|0x004b: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0055|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|0x0055: RETURN  (r1 I:int) A[SYNTHETIC] (LINE:419)\l}"];
MethodNode[shape=record,label="{private final int kotlinx.coroutines.debug.internal.DebugProbesImpl.findIndexOfFrame((r11 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r12 I:int A[D('frameIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.lang.StackTraceElement[] A[D('actualTrace' java.lang.StackTraceElement[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.util.List\<java.lang.StackTraceElement\> A[D('coroutineTrace' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:46:0x0055 \-\> B:26:?, BACK_EDGE: B:44:0x0051 \-\> B:31:0x0011, CROSS_EDGE: B:40:0x004b \-\> B:42:0x004d, CROSS_EDGE: B:36:0x0039 \-\> B:40:0x004b, CROSS_EDGE: B:34:0x002b \-\> B:40:0x004b, CROSS_EDGE: B:32:0x0015 \-\> B:46:0x0055\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001e\-0x004d: r7 'it' Ljava\/lang\/StackTraceElement;\l  0x001f\-0x004d: r8 '$i$a$\-indexOfFirst\-DebugProbesImpl$findIndexOfFrame$1' I\l  0x001b\-0x0053: r6 'item$iv' Ljava\/lang\/Object;\l  0x000b\-0x0055: r2 '$this$indexOfFirst$iv' Ljava\/util\/List;\l  0x000c\-0x0055: r3 '$i$f$indexOfFirst' I\l  0x000d\-0x0055: r4 'index$iv' I\l  0x000a\-0x0055: r0 'continuationFrame' Ljava\/lang\/StackTraceElement;\l  \-1 \-0x0055: r12 'frameIndex' I\l  \-1 \-0x0055: r13 'actualTrace' [Ljava\/lang\/StackTraceElement;\l  \-1 \-0x0055: r14 'coroutineTrace' Ljava\/util\/List;\lSIGNATURE: (I[Ljava\/lang\/StackTraceElement;Ljava\/util\/List\<Ljava\/lang\/StackTraceElement;\>;)I\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_26;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_47;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_40;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_48[style=dashed];
Node_44 -> Node_31;
Node_48 -> Node_43;
Node_43 -> Node_46;
Node_46 -> Node_26;
Node_40 -> Node_42;
Node_47 -> Node_49;
Node_49 -> Node_26;
}

