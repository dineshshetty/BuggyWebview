digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.createOwner(Lkotlin\/coroutines\/Continuation;Lkotlinx\/coroutines\/debug\/internal\/StackTraceFrame;)Lkotlin\/coroutines\/Continuation;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r5 I:kotlinx.coroutines.debug.internal.DebugProbesImpl) type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugProbesImpl.isInstalled$kotlinx_coroutines_core():boolean A[MD:():boolean (m)] (LINE:509)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0007 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|RETURN\l|0x0006: RETURN  (r6 I:kotlin.coroutines.Continuation\<T\> A[D('completion' kotlin.coroutines.Continuation)]) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) =  kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl  (LINE:510)\l0x0009: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext) = (r6 I:kotlin.coroutines.Continuation A[D('completion' kotlin.coroutines.Continuation)]) type: INTERFACE call: kotlin.coroutines.Continuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)]\l0x000d: SGET  (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.debug.internal.DebugProbesImpl.sequenceNumber$FU java.util.concurrent.atomic.AtomicLongFieldUpdater \l0x000f: SGET  (r3 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumberRefVolatile) =  kotlinx.coroutines.debug.internal.DebugProbesImpl.debugProbesImpl$SequenceNumberRefVolatile kotlinx.coroutines.debug.internal.DebugProbesImpl$SequenceNumberRefVolatile \l0x0011: INVOKE  (r2 I:long) = (r2 I:java.util.concurrent.atomic.AtomicLongFieldUpdater), (r3 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(java.lang.Object):long A[MD:(T):long (c)]\l0x0015: INVOKE  \l  (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)\l  (r1 I:kotlin.coroutines.CoroutineContext)\l  (r7 I:kotlinx.coroutines.debug.internal.StackTraceFrame A[D('frame' kotlinx.coroutines.debug.internal.StackTraceFrame)])\l  (r2 I:long)\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.\<init\>(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.debug.internal.StackTraceFrame, long):void A[MD:(kotlin.coroutines.CoroutineContext, kotlinx.coroutines.debug.internal.StackTraceFrame, long):void (m)]\l0x0018: NEW_INSTANCE  (r1 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner) =  kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner  (LINE:511)\l0x001a: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('frame' kotlinx.coroutines.debug.internal.StackTraceFrame)]) \l0x001b: CHECK_CAST (r2 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) (r2 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  \l  (r1 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)\l  (r6 I:kotlin.coroutines.Continuation A[D('completion' kotlin.coroutines.Continuation)])\l  (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[D('info' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)])\l  (r2 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame)\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.CoroutineOwner.\<init\>(kotlin.coroutines.Continuation, kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl, kotlin.coroutines.jvm.internal.CoroutineStackFrame):void A[MD:(kotlin.coroutines.Continuation\<? super T\>, kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl, kotlin.coroutines.jvm.internal.CoroutineStackFrame):void (m)]\l0x0020: SGET  (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\>, java.lang.Boolean\>) =  kotlinx.coroutines.debug.internal.DebugProbesImpl.capturedCoroutinesMap kotlinx.coroutines.debug.internal.ConcurrentWeakMap  (LINE:512)\l0x0022: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0023: CHECK_CAST (r3 I:java.util.Map) = (java.util.Map) (r3 I:??[OBJECT, ARRAY]) \l0x0025: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0026: INVOKE  (r4 I:java.lang.Boolean) = (r4 I:boolean) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (c)]\l0x002a: INVOKE  \l  (r3 I:java.util.Map)\l  (r1 I:java.lang.Object A[D('owner' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)])\l  (r4 I:java.lang.Object)\l type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l0x002d: INVOKE  (r3 I:boolean) = (r5 I:kotlinx.coroutines.debug.internal.DebugProbesImpl) type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugProbesImpl.isInstalled$kotlinx_coroutines_core():boolean A[MD:():boolean (m)] (LINE:513)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|0x0031: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0036 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: INVOKE  (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) type: VIRTUAL call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.clear():void A[MD:():void (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0036|0x0036: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('owner' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)])  (LINE:514)\l0x0037: CHECK_CAST (r2 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|RETURN\l|0x0039: RETURN  (r2 I:kotlin.coroutines.Continuation\<T\>) \l}"];
MethodNode[shape=record,label="{private final kotlin.coroutines.Continuation\<T\> kotlinx.coroutines.debug.internal.DebugProbesImpl.createOwner((r5 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r6 I:kotlin.coroutines.Continuation\<? super T\> A[D('completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlinx.coroutines.debug.internal.StackTraceFrame A[D('frame' kotlinx.coroutines.debug.internal.StackTraceFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0039 \-\> B:11:?, CROSS_EDGE: B:16:0x0031 \-\> B:18:0x0036\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x0039: r0 'info' Lkotlinx\/coroutines\/debug\/internal\/DebugCoroutineInfoImpl;\l  0x0020\-0x0039: r1 'owner' Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner;\l  \-1 \-0x0039: r6 'completion' Lkotlin\/coroutines\/Continuation;\l  \-1 \-0x0039: r7 'frame' Lkotlinx\/coroutines\/debug\/internal\/StackTraceFrame;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/coroutines\/Continuation\<\-TT;\>;Lkotlinx\/coroutines\/debug\/internal\/StackTraceFrame;)Lkotlin\/coroutines\/Continuation\<TT;\>;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

