digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.isFinished(Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) = \l  (r4 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner A[D('$this$isFinished' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)])\l kotlinx.coroutines.debug.internal.DebugProbesImpl.CoroutineOwner.info kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl  (LINE:278)\l0x0002: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x000a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0018 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|0x0018: INVOKE  (r2 I:boolean) = (r0 I:kotlinx.coroutines.Job A[D('job' kotlinx.coroutines.Job)]) type: INTERFACE call: kotlinx.coroutines.Job.isCompleted():boolean A[MD:():boolean (m)] (LINE:279)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x001f \l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|RETURN\l|0x001e: RETURN  (r1 I:boolean) \l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|0x001f: SGET  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\>, java.lang.Boolean\>) =  kotlinx.coroutines.debug.internal.DebugProbesImpl.capturedCoroutinesMap kotlinx.coroutines.debug.internal.ConcurrentWeakMap  (LINE:280)\l0x0021: INVOKE  \l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap)\l  (r4 I:java.lang.Object A[D('$this$isFinished' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)])\l type: VIRTUAL call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.remove(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (m)]\l0x0024: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:281)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0025|RETURN\l|0x0025: RETURN  (r1 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: SGET  (r1 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key \l0x000c: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r1 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Element) = (r0 I:kotlin.coroutines.CoroutineContext), (r1 I:kotlin.coroutines.CoroutineContext$Key) type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x0012: CHECK_CAST (r0 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r0 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.debug.internal.DebugProbesImpl.isFinished((r3 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\> A[D('$this$isFinished' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001e \-\> B:15:?, CROSS_EDGE: B:27:0x0025 \-\> B:15:?, CROSS_EDGE: B:19:0x000a \-\> B:20:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x0025: r0 'job' Lkotlinx\/coroutines\/Job;\l  \-1 \-0x0025: r4 '$this$isFinished' Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner;\lSIGNATURE: (Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner\<*\>;)Z\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_15;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
Node_19 -> Node_20;
}

