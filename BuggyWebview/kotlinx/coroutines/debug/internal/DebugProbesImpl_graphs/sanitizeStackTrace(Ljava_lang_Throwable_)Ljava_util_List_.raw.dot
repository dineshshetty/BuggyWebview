digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl.sanitizeStackTrace(Ljava\/lang\/Throwable;)Ljava\/util\/List;" {
Node_57 [shape=record,label="{57\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.StackTraceElement[]) = (r12 I:java.lang.Throwable A[D('throwable' java.lang.Throwable)]) type: VIRTUAL call: java.lang.Throwable.getStackTrace():java.lang.StackTraceElement[] A[MD:():java.lang.StackTraceElement[] (c)] (LINE:552)\l0x0004: ARRAY_LENGTH  (r1 I:int) = (r0 I:??[] A[D('stackTrace' java.lang.StackTraceElement[])])  (LINE:553)\l0x0005: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('stackTrace' java.lang.StackTraceElement[])])  (LINE:554)\l0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: ARRAY_LENGTH  (r4 I:int) = (r2 I:??[] A[D('$this$indexOfLast$iv' java.lang.Object[])])  (LINE:681)\l0x0008: CONST  (r5 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0009: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l}"];
Node_60 [shape=record,label="{60\:\ 0x000a|0x000a: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:66:0x0022 \l}"];
Node_61 [shape=record,label="{61\:\ 0x000c|LOOP_START\lLOOP:0: B:61:0x000c\-\>B:64:0x001f\l|0x000c: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x000e: AGET  (r7 I:??[OBJECT, ARRAY]) = \l  (r2 I:??[OBJECT, ARRAY][] A[D('$this$indexOfLast$iv' java.lang.Object[])])\l  (r6 I:??[int, short, byte, char] A[D('index$iv' int)])\l  (LINE:682)\l0x0010: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: INVOKE  (r9 I:java.lang.String) = (r7 I:java.lang.StackTraceElement A[D('it' java.lang.StackTraceElement)]) type: VIRTUAL call: java.lang.StackTraceElement.getClassName():java.lang.String A[MD:():java.lang.String (c)] (LINE:554)\l0x0015: CONST_STR  (r10 I:java.lang.String) =  \"kotlin.coroutines.jvm.internal.DebugProbesKt\" \l0x0017: INVOKE  (r7 I:boolean A[D('it' java.lang.StackTraceElement)]) = (r9 I:java.lang.Object), (r10 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x001b|0x001b: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.StackTraceElement)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:64:0x001f \l}"];
Node_64 [shape=record,label="{64\:\ 0x001f|LOOP_END\lLOOP:0: B:61:0x000c\-\>B:64:0x001f\l|0x001f: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:61:0x000c  (LINE:681)\l}"];
Node_100 [shape=record,label="{100\:\ 0x0022|SYNTHETIC\l}"];
Node_99 [shape=record,label="{99\:\ 0x001d|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x001d|0x001d: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)])  (LINE:683)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0022|0x0022: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$indexOfLast$iv' java.lang.Object[])]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:554)\l0x0023: SGET  (r3 I:boolean) =  kotlinx.coroutines.debug.internal.DebugProbesImpl.sanitizeStackTraces boolean  (LINE:556)\l0x0025: CONST_STR  (r4 I:java.lang.String) =  \"Coroutine creation stacktrace\" \l}"];
Node_67 [shape=record,label="{67\:\ 0x0027|0x0027: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x0049 \l}"];
Node_68 [shape=record,label="{68\:\ 0x0029|0x0029: ARITH  (r3 I:int) = (r1 I:int A[D('size' int)]) \- (r2 I:int A[D('probeIndex' int)])  (LINE:557)\l0x002b: NEW_INSTANCE  (r5 I:java.util.ArrayList) =  java.util.ArrayList \l0x002d: INVOKE  (r5 I:java.util.ArrayList), (r3 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0030: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_69 [shape=record,label="{69\:\ 0x0031|LOOP_START\lLOOP:1: B:69:0x0031\-\>B:74:0x0041\l|0x0031: IF  (r6 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:101:0x0046 \l}"];
Node_70 [shape=record,label="{70\:\ 0x0033|0x0033: ARITH  (r7 I:int) = (r6 I:int) + (1 int) \l0x0035: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x0036|0x0036: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x003d  (LINE:558)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0038|0x0038: INVOKE  (r9 I:java.lang.StackTraceElement) = (r4 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.artificialFrame(java.lang.String):java.lang.StackTraceElement A[MD:(java.lang.String):java.lang.StackTraceElement (m)]\l}"];
Node_103 [shape=record,label="{103\:\ 0x0041|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0041|LOOP_END\lLOOP:1: B:69:0x0031\-\>B:74:0x0041\l|0x0041: INVOKE  (r5 I:java.util.ArrayList), (r9 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:557)\l0x0044: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x003d|0x003d: ARITH  (r9 I:int) = (r6 I:int A[D('it' int)]) + (r2 I:int A[D('probeIndex' int)]) \l0x003f: AGET  (r9 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])]), (r9 I:??[int, short, byte, char]) \l}"];
Node_102 [shape=record,label="{102\:\ 0x0041|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x0046|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x0046|0x0046: CHECK_CAST (r5 I:java.util.List) = (java.util.List) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_76 [shape=record,label="{76\:\ 0x0048|RETURN\l|0x0048: RETURN  (r5 I:java.util.List\<java.lang.StackTraceElement\>) \l}"];
Node_58 [shape=record,label="{58\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_77 [shape=record,label="{77\:\ 0x0049|0x0049: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:570)\l0x004b: ARITH  (r5 I:int) = (r1 I:int A[D('size' int)]) \- (r2 I:int A[D('probeIndex' int)]) \l0x004d: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x004f: INVOKE  (r3 I:java.util.ArrayList), (r5 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0052: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:571)\l0x0053: CHECK_CAST (r5 I:java.util.Collection) = (java.util.Collection) (r5 I:??[OBJECT, ARRAY]) \l0x0055: INVOKE  (r4 I:java.lang.StackTraceElement) = (r4 I:java.lang.String) type: STATIC call: kotlinx.coroutines.internal.StackTraceRecoveryKt.artificialFrame(java.lang.String):java.lang.StackTraceElement A[MD:(java.lang.String):java.lang.StackTraceElement (m)]\l0x0059: INVOKE  (r5 I:java.util.Collection), (r4 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x005c: ARITH  (r4 I:int) = (r2 I:int A[D('probeIndex' int)]) + (1 int)  (LINE:572)\l}"];
Node_78 [shape=record,label="{78\:\ 0x005e|LOOP_START\lLOOP:2: B:78:0x005e\-\>B:107:0x005e\l|0x005e: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:105:0x00b3  (LINE:573)\l}"];
Node_79 [shape=record,label="{79\:\ 0x0060|0x0060: AGET  (r5 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:574)\l0x0062: INVOKE  (r5 I:boolean) = (r11 I:kotlinx.coroutines.debug.internal.DebugProbesImpl), (r5 I:java.lang.StackTraceElement) type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.isInternalMethod(java.lang.StackTraceElement):boolean A[MD:(java.lang.StackTraceElement):boolean (m)]\l}"];
Node_80 [shape=record,label="{80\:\ 0x0066|0x0066: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:104:0x00a8 \l}"];
Node_104 [shape=record,label="{104\:\ 0x00a8|SYNTHETIC\l}"];
Node_96 [shape=record,label="{96\:\ 0x00a8|0x00a8: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:594)\l0x00a9: CHECK_CAST (r5 I:java.util.Collection) = (java.util.Collection) (r5 I:??[OBJECT, ARRAY]) \l0x00ab: AGET  (r6 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l \l0x00ad: INVOKE  (r5 I:java.util.Collection), (r6 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x00b0: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:595)\l}"];
Node_108 [shape=record,label="{108\:\ 0x005e|SYNTHETIC\l}"];
Node_107 [shape=record,label="{107\:\ 0x005e|LOOP_END\lSYNTHETIC\lLOOP:2: B:78:0x005e\-\>B:107:0x005e\l}"];
Node_106 [shape=record,label="{106\:\ 0x0068|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0068|0x0068: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:575)\l0x0069: CHECK_CAST (r5 I:java.util.Collection) = (java.util.Collection) (r5 I:??[OBJECT, ARRAY]) \l0x006b: AGET  (r6 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l \l0x006d: INVOKE  (r5 I:java.util.Collection), (r6 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0070: ARITH  (r5 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:577)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0072|LOOP_START\lLOOP:3: B:82:0x0072\-\>B:85:0x007c\l|0x0072: IF  (r5 I:??[int, byte, short, char] A[D('j' int)]) \>= (r1 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:110:0x007f  (LINE:578)\l}"];
Node_83 [shape=record,label="{83\:\ 0x0074|0x0074: AGET  (r6 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])])\l  (r5 I:??[int, short, byte, char] A[D('j' int)])\l \l0x0076: INVOKE  (r6 I:boolean) = (r11 I:kotlinx.coroutines.debug.internal.DebugProbesImpl), (r6 I:java.lang.StackTraceElement) type: DIRECT call: kotlinx.coroutines.debug.internal.DebugProbesImpl.isInternalMethod(java.lang.StackTraceElement):boolean A[MD:(java.lang.StackTraceElement):boolean (m)]\l}"];
Node_84 [shape=record,label="{84\:\ 0x007a|0x007a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:111:0x007f \l}"];
Node_85 [shape=record,label="{85\:\ 0x007c|LOOP_END\lLOOP:3: B:82:0x0072\-\>B:85:0x007c\l|0x007c: ARITH  (r5 I:int) = (r5 I:int A[D('j' int)]) + (1 int)  (LINE:579)\l}"];
Node_111 [shape=record,label="{111\:\ 0x007f|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x007f|0x007f: ARITH  (r6 I:int) = (r5 I:int A[D('j' int)]) + (\-1 int)  (LINE:582)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0081|LOOP_START\lLOOP:4: B:87:0x0081\-\>B:90:0x008b\l|0x0081: IF  (r6 I:??[int, byte, short, char] A[D('k' int)]) \<= (r4 I:??[int, byte, short, char] A[D('i' int)])  \-\> B:112:0x008e  (LINE:583)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0083|0x0083: AGET  (r7 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])])\l  (r6 I:??[int, short, byte, char] A[D('k' int)])\l \l0x0085: INVOKE  (r7 I:java.lang.String) = (r7 I:java.lang.StackTraceElement) type: VIRTUAL call: java.lang.StackTraceElement.getFileName():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_89 [shape=record,label="{89\:\ 0x0089|0x0089: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:113:0x008e \l}"];
Node_90 [shape=record,label="{90\:\ 0x008b|LOOP_END\lLOOP:4: B:87:0x0081\-\>B:90:0x008b\l|0x008b: ARITH  (r6 I:int) = (r6 I:int A[D('k' int)]) + (\-1 int)  (LINE:584)\l}"];
Node_113 [shape=record,label="{113\:\ 0x008e|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x008e|0x008e: IF  (r6 I:??[int, byte, short, char] A[D('k' int)]) \<= (r4 I:??[int, byte, short, char] A[D('i' int)])  \-\> B:95:0x009c  (LINE:586)\l}"];
Node_92 [shape=record,label="{92\:\ 0x0090|0x0090: ARITH  (r7 I:int) = (r5 I:int A[D('j' int)]) + (\-1 int) \l}"];
Node_93 [shape=record,label="{93\:\ 0x0092|0x0092: IF  (r6 I:??[int, byte, short, char] A[D('k' int)]) \>= (r7 I:??[int, byte, short, char])  \-\> B:95:0x009c \l}"];
Node_94 [shape=record,label="{94\:\ 0x0094|0x0094: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:589)\l0x0095: CHECK_CAST (r7 I:java.util.Collection) = (java.util.Collection) (r7 I:??[OBJECT, ARRAY]) \l0x0097: AGET  (r8 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])])\l  (r6 I:??[int, short, byte, char] A[D('k' int)])\l \l0x0099: INVOKE  (r7 I:java.util.Collection), (r8 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_95 [shape=record,label="{95\:\ 0x009c|0x009c: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:591)\l0x009d: CHECK_CAST (r7 I:java.util.Collection) = (java.util.Collection) (r7 I:??[OBJECT, ARRAY]) \l0x009f: ARITH  (r8 I:int) = (r5 I:int A[D('j' int)]) + (\-1 int) \l0x00a1: AGET  (r8 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('stackTrace' java.lang.StackTraceElement[])]), (r8 I:??[int, short, byte, char]) \l0x00a3: INVOKE  (r7 I:java.util.Collection), (r8 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x00a6: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)])  (LINE:592)\l}"];
Node_109 [shape=record,label="{109\:\ 0x005e|SYNTHETIC\l}"];
Node_112 [shape=record,label="{112\:\ 0x008e|SYNTHETIC\l}"];
Node_110 [shape=record,label="{110\:\ 0x007f|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x00b3|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x00b3|0x00b3: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:598)\l0x00b4: CHECK_CAST (r5 I:java.util.List) = (java.util.List) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_98 [shape=record,label="{98\:\ 0x00b6|RETURN\l|0x00b6: RETURN  (r5 I:java.util.List\<java.lang.StackTraceElement\>) \l}"];
MethodNode[shape=record,label="{private final java.util.List\<java.lang.StackTraceElement\> kotlinx.coroutines.debug.internal.DebugProbesImpl.sanitizeStackTrace((r11 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl A[IMMUTABLE_TYPE, THIS]), (r12 I:T extends java.lang.Throwable A[D('throwable' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:74:0x0041 \-\> B:69:0x0031, CROSS_EDGE: B:73:0x003d \-\> B:74:0x0041, BACK_EDGE: B:85:0x007c \-\> B:82:0x0072, BACK_EDGE: B:90:0x008b \-\> B:87:0x0081, BACK_EDGE: B:95:0x009c \-\> B:78:0x005e, CROSS_EDGE: B:93:0x0092 \-\> B:95:0x009c, CROSS_EDGE: B:91:0x008e \-\> B:95:0x009c, CROSS_EDGE: B:87:0x0081 \-\> B:91:0x008e, CROSS_EDGE: B:82:0x0072 \-\> B:86:0x007f, BACK_EDGE: B:96:0x00a8 \-\> B:78:0x005e, CROSS_EDGE: B:98:0x00b6 \-\> B:58:?, BACK_EDGE: B:64:0x001f \-\> B:61:0x000c, CROSS_EDGE: B:64:0x001f \-\> B:66:0x0022, CROSS_EDGE: B:60:0x000a \-\> B:66:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x001b: r7 'it' Ljava\/lang\/StackTraceElement;\l  0x0011\-0x001b: r8 '$i$a$\-indexOfLast\-DebugProbesImpl$sanitizeStackTrace$probeIndex$1' I\l  0x000d\-0x0021: r6 'index$iv' I\l  0x0006\-0x0022: r2 '$this$indexOfLast$iv' [Ljava\/lang\/Object;\l  0x0007\-0x0022: r3 '$i$f$indexOfLast' I\l  0x0035\-0x0041: r6 'it' I\l  0x0036\-0x0041: r8 '$i$a$\-List\-DebugProbesImpl$sanitizeStackTrace$1' I\l  0x0072\-0x00a7: r5 'j' I\l  0x0081\-0x00a7: r6 'k' I\l  0x0004\-0x00b6: r0 'stackTrace' [Ljava\/lang\/StackTraceElement;\l  0x0005\-0x00b6: r1 'size' I\l  0x0023\-0x00b6: r2 'probeIndex' I\l  0x0052\-0x00b6: r3 'result' Ljava\/util\/ArrayList;\l  0x005e\-0x00b6: r4 'i' I\l  \-1 \-0x00b6: r12 'throwable' Ljava\/lang\/Throwable;\lTYPE_VARS: [T extends java.lang.Throwable]\lSIGNATURE: \<T:Ljava\/lang\/Throwable;\>(TT;)Ljava\/util\/List\<Ljava\/lang\/StackTraceElement;\>;\l}"];
MethodNode -> Node_57;Node_57 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_66;
Node_61 -> Node_62;
Node_62 -> Node_64;
Node_62 -> Node_99[style=dashed];
Node_64 -> Node_61;
Node_64 -> Node_100[style=dashed];
Node_100 -> Node_66;
Node_99 -> Node_63;
Node_63 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_77;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_101;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_73;
Node_72 -> Node_103;
Node_103 -> Node_74;
Node_74 -> Node_69;
Node_73 -> Node_102;
Node_102 -> Node_74;
Node_101 -> Node_75;
Node_75 -> Node_76;
Node_76 -> Node_58;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_105;
Node_79 -> Node_80;
Node_80 -> Node_104;
Node_80 -> Node_106[style=dashed];
Node_104 -> Node_96;
Node_96 -> Node_108;
Node_108 -> Node_107;
Node_107 -> Node_78;
Node_106 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_110;
Node_83 -> Node_84;
Node_84 -> Node_85[style=dashed];
Node_84 -> Node_111;
Node_85 -> Node_82;
Node_111 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_112;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_113;
Node_90 -> Node_87;
Node_113 -> Node_91;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_95;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_95;
Node_94 -> Node_95;
Node_95 -> Node_109;
Node_109 -> Node_107;
Node_112 -> Node_91;
Node_110 -> Node_86;
Node_105 -> Node_97;
Node_97 -> Node_98;
Node_98 -> Node_58;
}

