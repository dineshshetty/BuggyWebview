digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.runWeakRefQueueCleaningLoopUntilInterrupted()V" {
subgraph cluster_Region_445166570 {
label = "R(1:(2:(1:6)|(2:(1:(2:9|(2:(1:12)|(1:11))))|14)))";
node [shape=record,color=blue];
subgraph cluster_Region_454567138 {
label = "R(2:(1:6)|(2:(1:(2:9|(2:(1:12)|(1:11))))|14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_236403399 {
label = "IF [B:27:0x0007] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0007|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r2.weakRefQueue != null) != true) goto L5\l}"];
subgraph cluster_Region_923458608 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0037|throw new java.lang.IllegalStateException(\"Must be created with weakRefQueue = true\".toString())\l}"];
}
}
subgraph cluster_Region_1749167832 {
label = "R(2:(1:(2:9|(2:(1:12)|(1:11))))|14)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_849815558 {
label = "LOOP:0: (1:(2:9|(2:(1:12)|(1:11))))";
node [shape=record,color=blue];
subgraph cluster_Region_89259415 {
label = "R(1:(2:9|(2:(1:12)|(1:11))))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1692097105 {
label = "Try: R(2:9|(2:(1:12)|(1:11))) catches: R(2:17|18)";
node [shape=record,color=blue];
subgraph cluster_Region_405659953 {
label = "R(2:9|(2:(1:12)|(1:11)))";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x000b|TRY_ENTER\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lCatch: InterruptedException \-\> 0x0021\l|java.lang.ref.Reference java.lang.ref.Reference\<? extends K\> r0 = r2.weakRefQueue.remove()     \/\/ Catch: java.lang.InterruptedException \-\> L21\l}"];
subgraph cluster_Region_496409852 {
label = "R(2:(1:12)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1493046039 {
label = "IF [B:30:0x0011] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0011|if (r0 == null) goto L12\l}"];
subgraph cluster_Region_385511504 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0019|SYNTHETIC\lEDGE_INSN: B:41:0x0019\-\>B:32:0x0019 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_1245931451 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0013|LOOP_END\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lLOOP:0: B:39:0x000b\-\>B:31:0x0013\lCatch: InterruptedException \-\> 0x0021\l|cleanWeakRef((kotlinx.coroutines.debug.internal.HashedWeakRef) r0)     \/\/ Catch: java.lang.InterruptedException \-\> L21\l}"];
}
}
}
subgraph cluster_Region_474843741 {
label = "R(2:17|18) | ExcHandler: InterruptedException \-\> 0x0021\l";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0022|java.lang.Thread.currentThread().interrupt()\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|RETURN\l|return\l}"];
}
}
}
}
Node_33 [shape=record,label="{33\:\ 0x0020|TRY_LEAVE\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lCatch: InterruptedException \-\> 0x0021\l|throw new java.lang.NullPointerException(\"null cannot be cast to non\-null type kotlinx.coroutines.debug.internal.HashedWeakRef\<*\>\")     \/\/ Catch: java.lang.InterruptedException \-\> L21\l}"];
}
}
}
subgraph cluster_Region_474843741 {
label = "R(2:17|18) | ExcHandler: InterruptedException \-\> 0x0021\l";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0022|java.lang.Thread.currentThread().interrupt()\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|RETURN\l|return\l}"];
}
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0000}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0002}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0004}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x002a}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x000b|LOOP_START\lSYNTHETIC\lEXC_TOP_SPLITTER\lLOOP:0: B:39:0x000b\-\>B:31:0x0013\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0019|EDGE_INSN: B:41:0x0019\-\>B:32:0x0019 ?: BREAK  \lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lCatch: InterruptedException \-\> 0x0021\l}"];
Node_40 [shape=record,color=red,label="{40\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0021|ExcHandler: InterruptedException \-\> 0x0021\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0006}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.ConcurrentWeakMap.runWeakRefQueueCleaningLoopUntilInterrupted((r2v0 'this' kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:31:0x0013 \-\> B:39:0x000b, CROSS_EDGE: B:33:0x0020 \-\> B:22:?, CROSS_EDGE: B:36:0x0029 \-\> B:22:?, CROSS_EDGE: B:39:0x000b \-\> B:34:0x0021, CROSS_EDGE: B:26:0x0006 \-\> B:27:0x0007\lINLINE_NOT_NEEDED\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_21;Node_27 -> Node_37;
Node_27 -> Node_39[style=dashed];
Node_38 -> Node_22;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_41;
Node_41 -> Node_32;
Node_31 -> Node_39;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_33 -> Node_22;
Node_33 -> Node_40;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_37 -> Node_38;
Node_39 -> Node_29;
Node_39 -> Node_34;
Node_32 -> Node_33;
Node_40 -> Node_34;
Node_34 -> Node_35;
Node_26 -> Node_27;
}

