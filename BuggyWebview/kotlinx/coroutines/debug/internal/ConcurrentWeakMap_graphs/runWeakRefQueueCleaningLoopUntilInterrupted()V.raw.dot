digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.runWeakRefQueueCleaningLoopUntilInterrupted()V" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.ref.ReferenceQueue\<K\>) = (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.weakRefQueue java.lang.ref.ReferenceQueue  (LINE:71)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0006 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0004|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x002a \l}"];
Node_37 [shape=record,label="{37\:\ 0x002a|0x002a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:286)\l0x002c: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('$i$a$\-check\-ConcurrentWeakMap$runWeakRefQueueCleaningLoopUntilInterrupted$1' int)]) =  java.lang.IllegalStateException \l0x002e: CONST_STR  (r1 I:java.lang.String) =  \"Must be created with weakRefQueue = true\" \l0x0030: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0034: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0037|0x0037: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x000b|LOOP_START\lSYNTHETIC\lEXC_TOP_SPLITTER\lLOOP:0: B:39:0x000b\-\>B:31:0x0013\l}"];
Node_29 [shape=record,label="{29\:\ 0x000b|TRY_ENTER\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lCatch: InterruptedException \-\> 0x0021\l|0x000b: IGET  (r0 I:java.lang.ref.ReferenceQueue\<K\>) = (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.weakRefQueue java.lang.ref.ReferenceQueue A[Catch: InterruptedException \-\> 0x0021, TRY_ENTER] (LINE:74)\l0x000d: INVOKE  (r0 I:java.lang.ref.Reference) = (r0 I:java.lang.ref.ReferenceQueue) type: VIRTUAL call: java.lang.ref.ReferenceQueue.remove():java.lang.ref.Reference A[Catch: InterruptedException \-\> 0x0021, MD:():java.lang.ref.Reference\<? extends T\> throws java.lang.InterruptedException (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0019 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0013|LOOP_END\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lLOOP:0: B:39:0x000b\-\>B:31:0x0013\lCatch: InterruptedException \-\> 0x0021\l|0x0013: CHECK_CAST (r0 I:kotlinx.coroutines.debug.internal.HashedWeakRef) = (kotlinx.coroutines.debug.internal.HashedWeakRef) (r0 I:??[OBJECT, ARRAY]) A[Catch: InterruptedException \-\> 0x0021]\l0x0015: INVOKE  (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap), (r0 I:kotlinx.coroutines.debug.internal.HashedWeakRef) type: DIRECT call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.cleanWeakRef(kotlinx.coroutines.debug.internal.HashedWeakRef):void A[Catch: InterruptedException \-\> 0x0021, MD:(kotlinx.coroutines.debug.internal.HashedWeakRef\<?\>):void (m)]\l0x0018: GOTO  \-\> 0x000a \l}"];
Node_41 [shape=record,label="{41\:\ 0x0019|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|TryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lCatch: InterruptedException \-\> 0x0021\l|0x0019: NEW_INSTANCE  (r0 I:java.lang.NullPointerException) =  java.lang.NullPointerException A[Catch: InterruptedException \-\> 0x0021]\l0x001b: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlinx.coroutines.debug.internal.HashedWeakRef\<*\>\" \l0x001d: INVOKE  (r0 I:java.lang.NullPointerException), (r1 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[Catch: InterruptedException \-\> 0x0021, MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0020|TRY_LEAVE\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\lCatch: InterruptedException \-\> 0x0021\l|0x0020: THROW  (r0 I:java.lang.Throwable) A[Catch: InterruptedException \-\> 0x0021, TRY_LEAVE]\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|ExcHandler: InterruptedException \-\> 0x0021\l|0x0021: MOVE_EXCEPTION  (r0 I:java.lang.InterruptedException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: InterruptedException \-\> 0x0021] (LINE:76)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0022: INVOKE  (r1 I:java.lang.Thread) =  type: STATIC call: java.lang.Thread.currentThread():java.lang.Thread A[MD:():java.lang.Thread (c)] (LINE:77)\l0x0026: INVOKE  (r1 I:java.lang.Thread) type: VIRTUAL call: java.lang.Thread.interrupt():void A[MD:():void (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|RETURN\l|0x0029: RETURN    (LINE:79)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.ConcurrentWeakMap.runWeakRefQueueCleaningLoopUntilInterrupted((r2 'this' I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:31:0x0013 \-\> B:39:0x000b, CROSS_EDGE: B:33:0x0020 \-\> B:22:?, CROSS_EDGE: B:36:0x0029 \-\> B:22:?, CROSS_EDGE: B:39:0x000b \-\> B:34:0x0021, CROSS_EDGE: B:26:0x0006 \-\> B:27:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0022\-0x0029: r0 'e' Ljava\/lang\/InterruptedException;\l  0x002b\-0x002c: r0 '$i$a$\-check\-ConcurrentWeakMap$runWeakRefQueueCleaningLoopUntilInterrupted$1' I\lTYPE_VARS: [V, K]\lTryCatch #0 \{InterruptedException \-\> 0x0021, blocks: (B:29:0x000b, B:31:0x0013, B:32:0x0019, B:33:0x0020), top: B:39:0x000b \}\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_37;
Node_27 -> Node_39[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_22;
Node_39 -> Node_29;
Node_39 -> Node_34;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_41;
Node_31 -> Node_39;
Node_41 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_22;
Node_33 -> Node_40;
Node_40 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_26 -> Node_27;
}

