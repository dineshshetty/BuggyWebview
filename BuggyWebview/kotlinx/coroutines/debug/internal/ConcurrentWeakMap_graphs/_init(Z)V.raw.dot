digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.\<init\>(Z)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r2 I:kotlin.collections.AbstractMutableMap) type: DIRECT call: kotlin.collections.AbstractMutableMap.\<init\>():void A[MD:():void (m)] (LINE:21)\l0x0003: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:22)\l0x0004: IPUT  (r0 I:int), (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) kotlinx.coroutines.debug.internal.ConcurrentWeakMap._size int \l0x0006: NEW_INSTANCE  (r0 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) =  kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core  (LINE:23)\l0x0008: CONST  (r1 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l0x000a: INVOKE  \l  (r0 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)\l  (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap)\l  (r1 I:int)\l type: DIRECT call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.\<init\>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap, int):void A[MD:(kotlinx.coroutines.debug.internal.ConcurrentWeakMap, int):void (m)]\l0x000d: IPUT  (r0 I:java.lang.Object), (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.core java.lang.Object \l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|0x000f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('weakRefQueue' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0017  (LINE:24)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:java.lang.ref.ReferenceQueue) =  java.lang.ref.ReferenceQueue \l0x0013: INVOKE  (r0 I:java.lang.ref.ReferenceQueue) type: DIRECT call: java.lang.ref.ReferenceQueue.\<init\>():void A[MD:():void (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|0x0018: IPUT  (r0 I:java.lang.ref.ReferenceQueue\<K\>), (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.weakRefQueue java.lang.ref.ReferenceQueue \l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|RETURN\l|0x001a: RETURN    (LINE:15)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.debug.internal.ConcurrentWeakMap.\<init\>((r2 'this' I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[D('weakRefQueue' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0017 \-\> B:14:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001a: r3 'weakRefQueue' Z\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

