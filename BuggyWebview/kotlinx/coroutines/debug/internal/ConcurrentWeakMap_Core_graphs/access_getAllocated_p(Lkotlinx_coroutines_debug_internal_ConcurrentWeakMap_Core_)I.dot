digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.access$getAllocated$p(Lkotlinx\/coroutines\/debug\/internal\/ConcurrentWeakMap$Core;)I" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x0002|RETURN\l|return r1.allocated\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ int kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.access$getAllocated$p((r1v0 '$this' kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core A[D('$this' kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: IGET  \l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core A[D('$this' kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)])\l kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.allocated int\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

