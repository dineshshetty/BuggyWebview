digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.removeCleanedAt(I)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|LOOP_START\lLOOP:0: B:18:0x0000\-\>B:25:0x0016\l|0x0001: IGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r3 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.values java.util.concurrent.atomic.AtomicReferenceArray  (LINE:113)\l0x0003: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.concurrent.atomic.AtomicReferenceArray), (r4 I:int A[D('index' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000a \l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('oldValue' java.lang.Object)]) kotlinx.coroutines.debug.internal.Marked  (LINE:114)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000f \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: IGET  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r3 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.values java.util.concurrent.atomic.AtomicReferenceArray  (LINE:115)\l0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: INVOKE  (r1 I:boolean) = \l  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r4 I:int A[D('index' int)])\l  (r0 I:java.lang.Object A[D('oldValue' java.lang.Object)])\l  (r2 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int, java.lang.Object, java.lang.Object):boolean A[MD:(int, E, E):boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|LOOP_END\lLOOP:0: B:18:0x0000\-\>B:25:0x0016\l|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0000 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|0x0018: IGET  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\>) = (r3 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.this$0 kotlinx.coroutines.debug.internal.ConcurrentWeakMap  (LINE:116)\l0x001a: INVOKE  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) type: STATIC call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.access$decrementSize(kotlinx.coroutines.debug.internal.ConcurrentWeakMap):void A[MD:(kotlinx.coroutines.debug.internal.ConcurrentWeakMap):void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|RETURN\l|0x001d: RETURN    (LINE:117)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|RETURN\l|0x000e: RETURN   \l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|RETURN\l|0x0009: RETURN   \l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.removeCleanedAt((r3 'this' I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x000e \-\> B:17:?, CROSS_EDGE: B:27:0x001d \-\> B:17:?, BACK_EDGE: B:25:0x0016 \-\> B:18:0x0000\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x001e: r0 'oldValue' Ljava\/lang\/Object;\l  \-1 \-0x001e: r4 'index' I\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_30[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_31[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_18;
Node_25 -> Node_29[style=dashed];
Node_29 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_31 -> Node_23;
Node_23 -> Node_17;
Node_30 -> Node_20;
Node_20 -> Node_17;
}

