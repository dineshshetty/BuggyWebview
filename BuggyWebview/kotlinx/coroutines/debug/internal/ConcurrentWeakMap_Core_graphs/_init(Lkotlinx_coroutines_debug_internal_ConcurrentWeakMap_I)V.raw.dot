digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.\<init\>(Lkotlinx\/coroutines\/debug\/internal\/ConcurrentWeakMap;I)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IPUT  \l  (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\> A[D('this$0' kotlinx.coroutines.debug.internal.ConcurrentWeakMap)])\l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)\l kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.this$0 kotlinx.coroutines.debug.internal.ConcurrentWeakMap  (LINE:86)\l0x0002: INVOKE  (r1 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:85)\l0x0005: IPUT  (r3 I:int A[D('allocated' int)]), (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.allocated int  (LINE:86)\l0x0007: INVOKE  (r0 I:int) = (r3 I:int A[D('allocated' int)]) type: STATIC call: java.lang.Integer.numberOfLeadingZeros(int):int A[MD:(int):int (c)] (LINE:87)\l0x000b: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x000d: IPUT  (r0 I:int), (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.shift int \l0x000f: ARITH  (r0 I:int) = (r3 I:int A[D('allocated' int)]) * (2 int)  (LINE:88)\l0x0011: ARITH  (r0 I:int) = (r0 I:int) \/ (3 int) \l0x0013: IPUT  (r0 I:int), (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.threshold int \l0x0015: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:89)\l0x0016: IPUT  (r0 I:int), (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.load int \l0x0018: NEW_INSTANCE  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray) =  java.util.concurrent.atomic.AtomicReferenceArray  (LINE:90)\l0x001a: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray), (r3 I:int A[D('allocated' int)]) type: DIRECT call: java.util.concurrent.atomic.AtomicReferenceArray.\<init\>(int):void A[MD:(int):void (c)]\l0x001d: IPUT  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)\l kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.keys java.util.concurrent.atomic.AtomicReferenceArray \l0x001f: NEW_INSTANCE  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray) =  java.util.concurrent.atomic.AtomicReferenceArray  (LINE:91)\l0x0021: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray), (r3 I:int A[D('allocated' int)]) type: DIRECT call: java.util.concurrent.atomic.AtomicReferenceArray.\<init\>(int):void A[MD:(int):void (c)]\l0x0024: IPUT  \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)\l kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.values java.util.concurrent.atomic.AtomicReferenceArray \l}"];
Node_7 [shape=record,label="{7\:\ 0x0026|RETURN\l|0x0026: RETURN    (LINE:86)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.\<init\>((r1 'this' I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap A[D('this$0' kotlinx.coroutines.debug.internal.ConcurrentWeakMap), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('allocated' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | SKIP_FIRST_ARG\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0026: r2 'this$0' Lkotlinx\/coroutines\/debug\/internal\/ConcurrentWeakMap;\l  \-1 \-0x0026: r3 'allocated' I\lSIGNATURE: (I)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

