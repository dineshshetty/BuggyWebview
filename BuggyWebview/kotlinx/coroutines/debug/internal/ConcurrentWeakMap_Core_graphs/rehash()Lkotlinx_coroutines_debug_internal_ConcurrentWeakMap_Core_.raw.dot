digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.rehash()Lkotlinx\/coroutines\/debug\/internal\/ConcurrentWeakMap$Core;" {
Node_41 [shape=record,label="{41\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0000|LOOP_START\lLOOP:0: B:43:0x0000\-\>B:75:0x0000\l|0x0001: IGET  (r0 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\>) = (r11 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.this$0 kotlinx.coroutines.debug.internal.ConcurrentWeakMap  (LINE:167)\l0x0003: INVOKE  (r0 I:int) = (r0 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) type: VIRTUAL call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.size():int A[MD:():int (m)]\l0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0008: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x000c: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: java.lang.Integer.highestOneBit(int):int A[MD:(int):int (c)]\l0x0010: ARITH  (r0 I:int) = (r0 I:int) * (4 int) \l0x0012: NEW_INSTANCE  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) =  kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core  (LINE:168)\l0x0014: IGET  (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\>) = (r11 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.this$0 kotlinx.coroutines.debug.internal.ConcurrentWeakMap \l0x0016: INVOKE  \l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)\l  (r2 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap)\l  (r0 I:int A[D('newCapacity' int)])\l type: DIRECT call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.\<init\>(kotlinx.coroutines.debug.internal.ConcurrentWeakMap, int):void A[MD:(kotlinx.coroutines.debug.internal.ConcurrentWeakMap, int):void (m)]\l0x0019: IGET  (r2 I:int) = (r11 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.allocated int  (LINE:169)\l0x001b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x001d|LOOP_START\lLOOP:1: B:44:0x001d\-\>B:76:0x001d\l|0x001d: IF  (r4 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:72:0x0076 \l}"];
Node_45 [shape=record,label="{45\:\ 0x001f|0x001f: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: ARITH  (r4 I:int) = (r4 I:int) + (1 int) \l0x0022: IGET  (r6 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r11 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.keys java.util.concurrent.atomic.AtomicReferenceArray  (LINE:171)\l0x0024: INVOKE  (r6 I:java.lang.Object) = (r6 I:java.util.concurrent.atomic.AtomicReferenceArray), (r5 I:int A[D('index' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0028: CHECK_CAST (r6 I:kotlinx.coroutines.debug.internal.HashedWeakRef) = (kotlinx.coroutines.debug.internal.HashedWeakRef) (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|0x002a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('w' kotlinx.coroutines.debug.internal.HashedWeakRef)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x002e  (LINE:172)\l}"];
Node_47 [shape=record,label="{47\:\ 0x002c|0x002c: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0032|0x0032: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('w' kotlinx.coroutines.debug.internal.HashedWeakRef)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0039  (LINE:173)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0034|0x0034: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('k' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x0039 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0036|0x0036: INVOKE  (r11 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core), (r5 I:int A[D('index' int)]) type: DIRECT call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.removeCleanedAt(int):void A[MD:(int):void (m)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x0039|0x0039: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x003a|LOOP_START\lLOOP:2: B:53:0x003a\-\>B:57:0x0055\l|0x003b: IGET  (r9 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r11 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.values java.util.concurrent.atomic.AtomicReferenceArray  (LINE:177)\l0x003d: INVOKE  (r8 I:java.lang.Object A[D('value' java.lang.Object)]) = (r9 I:java.util.concurrent.atomic.AtomicReferenceArray), (r5 I:int A[D('index' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0041: INSTANCE_OF  (r9 I:boolean) = (r8 I:??[OBJECT, ARRAY] A[D('value' java.lang.Object)]) kotlinx.coroutines.debug.internal.Marked  (LINE:178)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0043|0x0043: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x004b \l}"];
Node_56 [shape=record,label="{56\:\ 0x004b|0x004b: IGET  (r9 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r11 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.values java.util.concurrent.atomic.AtomicReferenceArray  (LINE:183)\l0x004d: INVOKE  (r10 I:kotlinx.coroutines.debug.internal.Marked) = (r8 I:java.lang.Object A[D('value' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt.access$mark(java.lang.Object):kotlinx.coroutines.debug.internal.Marked A[MD:(java.lang.Object):kotlinx.coroutines.debug.internal.Marked (m)]\l0x0051: INVOKE  (r9 I:boolean) = \l  (r9 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r5 I:int A[D('index' int)])\l  (r8 I:java.lang.Object A[D('value' java.lang.Object)])\l  (r10 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int, java.lang.Object, java.lang.Object):boolean A[MD:(int, E, E):boolean (c)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x0055|LOOP_END\lLOOP:2: B:53:0x003a\-\>B:57:0x0055\l|0x0055: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x003a \l}"];
Node_81 [shape=record,label="{81\:\ 0x0057|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x0057|0x0057: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('k' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x001d  (LINE:185)\l}"];
Node_73 [shape=record,label="{73\:\ 0x0059|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0059|0x0059: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x001d \l}"];
Node_74 [shape=record,label="{74\:\ 0x005b|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x005b|0x005b: INVOKE  (r9 I:java.lang.Object) = \l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core A[D('newCore' kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)])\l  (r7 I:java.lang.Object A[D('k' java.lang.Object)])\l  (r8 I:java.lang.Object A[D('value' java.lang.Object)])\l  (r6 I:kotlinx.coroutines.debug.internal.HashedWeakRef A[D('w' kotlinx.coroutines.debug.internal.HashedWeakRef)])\l type: VIRTUAL call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.putImpl(java.lang.Object, java.lang.Object, kotlinx.coroutines.debug.internal.HashedWeakRef):java.lang.Object A[MD:(K, V, kotlinx.coroutines.debug.internal.HashedWeakRef\<K\>):java.lang.Object (m)] (LINE:186)\l0x005f: INVOKE  (r10 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.debug.internal.ConcurrentWeakMapKt.access$getREHASH$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:187)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0063|0x0063: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldValue' java.lang.Object)]) != (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0066 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0066|0x0066: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldValue' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x006a  (LINE:188)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0068|0x0068: CONST  (r10 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x006b|0x006b: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x006e \l}"];
Node_71 [shape=record,label="{71\:\ 0x006e|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x006e|0x006e: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0070: CONST_STR  (r3 I:java.lang.String) =  \"Assertion failed\" \l0x0072: INVOKE  (r2 I:java.lang.AssertionError), (r3 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x0075|0x0075: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_42 [shape=record,label="{42\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_79 [shape=record,label="{79\:\ 0x001d|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x001d|LOOP_END\lSYNTHETIC\lLOOP:1: B:44:0x001d\-\>B:76:0x001d\l}"];
Node_65 [shape=record,label="{65\:\ 0x006a|0x006a: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_75 [shape=record,label="{75\:\ 0x0000|LOOP_END\lSYNTHETIC\lLOOP:0: B:43:0x0000\-\>B:75:0x0000\l}"];
Node_78 [shape=record,label="{78\:\ 0x001d|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x001d|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x0045|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0045|0x0045: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('value' java.lang.Object)])  (LINE:179)\l0x0046: CHECK_CAST (r9 I:kotlinx.coroutines.debug.internal.Marked) = (kotlinx.coroutines.debug.internal.Marked) (r9 I:??[OBJECT, ARRAY]) \l0x0048: IGET  (r8 I:java.lang.Object A[D('value' java.lang.Object)]) = (r9 I:kotlinx.coroutines.debug.internal.Marked) kotlinx.coroutines.debug.internal.Marked.ref java.lang.Object \l}"];
Node_48 [shape=record,label="{48\:\ 0x002e|0x002e: INVOKE  (r7 I:java.lang.Object) = (r6 I:kotlinx.coroutines.debug.internal.HashedWeakRef A[D('w' kotlinx.coroutines.debug.internal.HashedWeakRef)]) type: VIRTUAL call: kotlinx.coroutines.debug.internal.HashedWeakRef.get():java.lang.Object A[MD:():java.lang.Object (s)]\l}"];
Node_72 [shape=record,label="{72\:\ 0x0076|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x0076|RETURN\l|0x0076: RETURN  \l  (r1 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\>$Core A[D('newCore' kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core)])\l  (LINE:191)\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.debug.internal.ConcurrentWeakMap\<K, V\>$Core kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.rehash((r11 'this' I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:58:0x0057 \-\> B:44:0x001d, BACK_EDGE: B:59:0x0059 \-\> B:44:0x001d, BACK_EDGE: B:66:0x006b \-\> B:44:0x001d, CROSS_EDGE: B:65:0x006a \-\> B:66:0x006b, BACK_EDGE: B:61:0x0063 \-\> B:43:0x0000, BACK_EDGE: B:57:0x0055 \-\> B:53:0x003a, CROSS_EDGE: B:57:0x0055 \-\> B:58:0x0057, CROSS_EDGE: B:50:0x0034 \-\> B:52:0x0039, CROSS_EDGE: B:49:0x0032 \-\> B:52:0x0039, CROSS_EDGE: B:48:0x002e \-\> B:49:0x0032, CROSS_EDGE: B:70:0x0076 \-\> B:42:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0020\-0x0076: r5 'index' I\l  0x002a\-0x0076: r6 'w' Lkotlinx\/coroutines\/debug\/internal\/HashedWeakRef;\l  0x0032\-0x0076: r7 'k' Ljava\/lang\/Object;\l  0x003a\-0x0076: r8 'value' Ljava\/lang\/Object;\l  0x005f\-0x0076: r9 'oldValue' Ljava\/lang\/Object;\l  0x0012\-0x0076: r0 'newCapacity' I\l  0x0019\-0x0076: r1 'newCore' Lkotlinx\/coroutines\/debug\/internal\/ConcurrentWeakMap$Core;\lSIGNATURE: ()Lkotlinx\/coroutines\/debug\/internal\/ConcurrentWeakMap\<TK;TV;\>.Core;\l}"];
MethodNode -> Node_41;Node_41 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_72;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_52;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_56;
Node_54 -> Node_80[style=dashed];
Node_56 -> Node_57;
Node_57 -> Node_53;
Node_57 -> Node_81[style=dashed];
Node_81 -> Node_58;
Node_58 -> Node_73[style=dashed];
Node_58 -> Node_77;
Node_73 -> Node_59;
Node_59 -> Node_74[style=dashed];
Node_59 -> Node_78;
Node_74 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_63;
Node_61 -> Node_75[style=dashed];
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_66;
Node_66 -> Node_71;
Node_66 -> Node_79[style=dashed];
Node_71 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_42;
Node_79 -> Node_76;
Node_76 -> Node_44;
Node_65 -> Node_66;
Node_75 -> Node_43;
Node_78 -> Node_76;
Node_77 -> Node_76;
Node_80 -> Node_55;
Node_55 -> Node_58;
Node_48 -> Node_49;
Node_72 -> Node_70;
Node_70 -> Node_42;
}

