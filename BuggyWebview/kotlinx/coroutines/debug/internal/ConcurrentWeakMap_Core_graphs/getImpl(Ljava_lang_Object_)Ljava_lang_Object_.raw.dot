digraph "CFG forkotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.getImpl(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r6 I:java.lang.Object A[D('key' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.hashCode():int A[MD:():int (c)] (LINE:97)\l0x0004: INVOKE  (r0 I:int) = (r5 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core), (r0 I:int) type: DIRECT call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.index(int):int A[MD:(int):int (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0008|LOOP_START\lLOOP:0: B:27:0x0008\-\>B:42:0x003a\l|0x0009: IGET  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r5 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.keys java.util.concurrent.atomic.AtomicReferenceArray  (LINE:99)\l0x000b: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.concurrent.atomic.AtomicReferenceArray), (r0 I:int A[D('index' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l0x000f: CHECK_CAST (r1 I:kotlinx.coroutines.debug.internal.HashedWeakRef) = (kotlinx.coroutines.debug.internal.HashedWeakRef) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0015 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|0x0015: INVOKE  (r2 I:java.lang.Object) = (r1 I:kotlinx.coroutines.debug.internal.HashedWeakRef A[D('w' kotlinx.coroutines.debug.internal.HashedWeakRef)]) type: VIRTUAL call: kotlinx.coroutines.debug.internal.HashedWeakRef.get():java.lang.Object A[MD:():java.lang.Object (s)] (LINE:100)\l0x0019: INVOKE  (r3 I:boolean) = (r6 I:java.lang.Object A[D('key' java.lang.Object)]), (r2 I:java.lang.Object A[D('k' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:101)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|0x001d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0031 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0031|0x0031: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('k' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0036  (LINE:105)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0033|0x0033: INVOKE  (r5 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core), (r0 I:int A[D('index' int)]) type: DIRECT call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.removeCleanedAt(int):void A[MD:(int):void (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0036|0x0036: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x003a  (LINE:106)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0038|0x0038: IGET  (r0 I:int A[D('index' int)]) = (r5 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.allocated int \l}"];
Node_45 [shape=record,label="{45\:\ 0x003a|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x003a|LOOP_END\lLOOP:0: B:27:0x0008\-\>B:42:0x003a\l|0x003a: ARITH  (r0 I:int) = (r0 I:int A[D('index' int)]) + (\-1 int)  (LINE:107)\l}"];
Node_46 [shape=record,label="{46\:\ 0x003a|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x001f|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|0x001f: IGET  (r3 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r5 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core) kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.values java.util.concurrent.atomic.AtomicReferenceArray  (LINE:102)\l0x0021: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.concurrent.atomic.AtomicReferenceArray), (r0 I:int A[D('index' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0025: INSTANCE_OF  (r4 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('value' java.lang.Object)]) kotlinx.coroutines.debug.internal.Marked  (LINE:103)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0027|0x0027: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x002f \l}"];
Node_35 [shape=record,label="{35\:\ 0x0029|0x0029: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('value' java.lang.Object)]) \l0x002a: CHECK_CAST (r4 I:kotlinx.coroutines.debug.internal.Marked) = (kotlinx.coroutines.debug.internal.Marked) (r4 I:??[OBJECT, ARRAY]) \l0x002c: IGET  (r4 I:java.lang.Object) = (r4 I:kotlinx.coroutines.debug.internal.Marked) kotlinx.coroutines.debug.internal.Marked.ref java.lang.Object \l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r4 I:V) A[SYNTHETIC]\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x002f|0x002f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('value' java.lang.Object)]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: RETURN  (r4 I:V) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0013|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0013|RETURN\l|0x0013: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: RETURN  (r1 I:V) \l}"];
MethodNode[shape=record,label="{public final V kotlinx.coroutines.debug.internal.ConcurrentWeakMap.Core.getImpl((r5 'this' I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap$Core A[IMMUTABLE_TYPE, THIS]), (r6 I:K A[D('key' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0030 \-\> B:25:?, CROSS_EDGE: B:36:0x002f \-\> B:37:0x0030, BACK_EDGE: B:42:0x003a \-\> B:27:0x0008, CROSS_EDGE: B:40:0x0036 \-\> B:42:0x003a, CROSS_EDGE: B:38:0x0031 \-\> B:40:0x0036\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0025\-0x0031: r3 'value' Ljava\/lang\/Object;\l  0x0015\-0x003c: r1 'w' Lkotlinx\/coroutines\/debug\/internal\/HashedWeakRef;\l  0x0019\-0x003c: r2 'k' Ljava\/lang\/Object;\l  0x0008\-0x003c: r0 'index' I\l  \-1 \-0x003c: r6 'key' Ljava\/lang\/Object;\lTYPE_VARS: [V, K]\lSIGNATURE: (TK;)TV;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_31;
Node_28 -> Node_43[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_38;
Node_32 -> Node_44[style=dashed];
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_46;
Node_41 -> Node_45;
Node_45 -> Node_42;
Node_42 -> Node_27;
Node_46 -> Node_42;
Node_44 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_47;
Node_47 -> Node_25;
Node_36 -> Node_37;
Node_37 -> Node_25;
Node_43 -> Node_29;
Node_29 -> Node_25;
}

