digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$1$3.invoke(Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:kotlinx.coroutines.debug.internal.DebugProbesImpl) =  kotlinx.coroutines.debug.internal.DebugProbesImpl.INSTANCE kotlinx.coroutines.debug.internal.DebugProbesImpl  (LINE:163)\l0x0002: INVOKE  (r0 I:boolean) = \l  (r0 I:kotlinx.coroutines.debug.internal.DebugProbesImpl)\l  (r4 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner A[D('owner' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)])\l type: STATIC call: kotlinx.coroutines.debug.internal.DebugProbesImpl.access$isFinished(kotlinx.coroutines.debug.internal.DebugProbesImpl, kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner):boolean A[MD:(kotlinx.coroutines.debug.internal.DebugProbesImpl, kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner):boolean (m)]\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IGET  (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) = \l  (r4 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner A[D('owner' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)])\l kotlinx.coroutines.debug.internal.DebugProbesImpl.CoroutineOwner.info kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl  (LINE:164)\l0x000c: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = (r0 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0013 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: IGET  (r1 I:kotlin.jvm.functions.Function2\<kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\>, kotlin.coroutines.CoroutineContext, R\>) = (r3 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$1$3) kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$1$3.$create kotlin.jvm.functions.Function2 \l0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:604)\l0x0016: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:kotlin.jvm.functions.Function2)\l  (r4 I:java.lang.Object A[D('owner' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner)])\l  (r0 I:java.lang.Object A[D('context' kotlin.coroutines.CoroutineContext)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)] (LINE:164)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: RETURN  (r1 I:R)  (LINE:163)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN  (r1 I:R) A[SYNTHETIC] (LINE:163)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN  (r1 I:R) A[SYNTHETIC] (LINE:163)\l}"];
MethodNode[shape=record,label="{public final R kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$1$3.invoke((r3 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$1$3 A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\> A[D('owner' kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0010 \-\> B:9:0x001a, CROSS_EDGE: B:3:0x0007 \-\> B:9:0x001a\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner\<*\>;)TR;\lRENAME_REASON:avoid collision after fix types in other method\lDebug Info:\l  0x0015\-0x001a: r0 'context' Lkotlin\/coroutines\/CoroutineContext;\l  0x0016\-0x001a: r2 '$i$a$\-let\-DebugProbesImpl$dumpCoroutinesInfoImpl$1$3$1' I\l  \-1 \-0x001a: r4 'owner' Lkotlinx\/coroutines\/debug\/internal\/DebugProbesImpl$CoroutineOwner;\lBRIDGED_BY: kotlinx.coroutines.debug.internal.DebugProbesImpl$dumpCoroutinesInfoImpl$1$3.invoke(kotlinx.coroutines.debug.internal.DebugProbesImpl$CoroutineOwner\<?\>):java.lang.Object\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_10[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_11[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_11 -> Node_1;
Node_10 -> Node_1;
}

