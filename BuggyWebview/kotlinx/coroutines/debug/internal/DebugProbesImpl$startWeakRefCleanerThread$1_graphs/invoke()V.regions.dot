digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.invoke()V" {
subgraph cluster_Region_637759948 {
label = "R(1:1) | DECL_VAR: kotlinx.coroutines.debug.internal.ConcurrentWeakMap null\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlinx.coroutines.debug.internal.ConcurrentWeakMap r0 = kotlinx.coroutines.debug.internal.DebugProbesImpl.callerInfoCache\lr0.runWeakRefQueueCleaningLoopUntilInterrupted()\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0007}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.invoke((r1v0 'this' kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function0.invoke():R]\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lBRIDGED_BY: kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.invoke():kotlin.Unit\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_0 -> Node_2;
Node_3 -> Node_1;
}

