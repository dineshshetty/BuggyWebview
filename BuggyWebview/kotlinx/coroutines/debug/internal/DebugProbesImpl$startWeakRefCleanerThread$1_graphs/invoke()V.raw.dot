digraph "CFG forkotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.invoke()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) =  type: STATIC call: kotlinx.coroutines.debug.internal.DebugProbesImpl.access$getCallerInfoCache$p():kotlinx.coroutines.debug.internal.ConcurrentWeakMap A[MD:():kotlinx.coroutines.debug.internal.ConcurrentWeakMap (m)] (LINE:100)\l0x0004: INVOKE  (r0 I:kotlinx.coroutines.debug.internal.ConcurrentWeakMap) type: VIRTUAL call: kotlinx.coroutines.debug.internal.ConcurrentWeakMap.runWeakRefQueueCleaningLoopUntilInterrupted():void A[MD:():void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:101)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.invoke((r1 'this' I:kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function0.invoke():R]\lBRIDGED_BY: kotlinx.coroutines.debug.internal.DebugProbesImpl$startWeakRefCleanerThread$1.invoke():kotlin.Unit\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

