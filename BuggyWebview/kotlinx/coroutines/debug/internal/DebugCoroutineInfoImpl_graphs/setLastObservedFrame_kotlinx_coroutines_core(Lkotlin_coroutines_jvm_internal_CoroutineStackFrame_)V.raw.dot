digraph "CFG forkotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.setLastObservedFrame$kotlinx_coroutines_core(Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0004  (LINE:55)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|0x000c: IPUT  \l  (r0 I:java.lang.ref.WeakReference\<kotlin.coroutines.jvm.internal.CoroutineStackFrame\> A[D('it' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l  (r3 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)\l kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl._lastObservedFrame java.lang.ref.WeakReference \l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|0x000e: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('value' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])  (LINE:102)\l0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: NEW_INSTANCE  (r2 I:java.lang.ref.WeakReference) =  java.lang.ref.WeakReference  (LINE:55)\l0x0008: INVOKE  \l  (r2 I:java.lang.ref.WeakReference)\l  (r0 I:java.lang.Object A[D('it' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l type: DIRECT call: java.lang.ref.WeakReference.\<init\>(java.lang.Object):void A[MD:(T):void (c)]\l0x000b: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('it' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.setLastObservedFrame$kotlinx_coroutines_core((r3 'this' I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('value' kotlin.coroutines.jvm.internal.CoroutineStackFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0004 \-\> B:12:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x000c: r0 'it' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\l  0x0006\-0x000c: r1 '$i$a$\-let\-DebugCoroutineInfoImpl$lastObservedFrame$1' I\l  \-1 \-0x000e: r4 'value' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
}

