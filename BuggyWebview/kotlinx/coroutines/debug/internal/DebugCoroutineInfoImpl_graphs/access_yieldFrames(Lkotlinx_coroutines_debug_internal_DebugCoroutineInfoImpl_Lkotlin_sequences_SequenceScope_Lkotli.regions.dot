digraph "CFG forkotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.access$yieldFrames(Lkotlinx\/coroutines\/debug\/internal\/DebugCoroutineInfoImpl;Lkotlin\/sequences\/SequenceScope;Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_131832771 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|return r1.yieldFrames(r2, r3, r4)\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0000}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ java.lang.Object kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.access$yieldFrames((r1v0 '$this' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[D('$this' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 '$receiver' kotlin.sequences.SequenceScope A[D('$receiver' kotlin.sequences.SequenceScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'frame' kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('frame' kotlin.coroutines.jvm.internal.CoroutineStackFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 '$completion' kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: INVOKE  \l  (r1 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[D('$this' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)])\l  (r2 I:kotlin.sequences.SequenceScope A[D('$receiver' kotlin.sequences.SequenceScope)])\l  (r3 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('frame' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l  (r4 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.yieldFrames(kotlin.sequences.SequenceScope, kotlin.coroutines.jvm.internal.CoroutineStackFrame, kotlin.coroutines.Continuation):java.lang.Object\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_4;Node_7 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
}

