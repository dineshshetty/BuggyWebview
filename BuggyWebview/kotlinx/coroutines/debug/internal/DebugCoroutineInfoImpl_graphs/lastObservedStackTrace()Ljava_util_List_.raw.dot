digraph "CFG forkotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedStackTrace()Ljava\/util\/List;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r4 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.getLastObservedFrame$kotlinx_coroutines_core():kotlin.coroutines.jvm.internal.CoroutineStackFrame A[MD:():kotlin.coroutines.jvm.internal.CoroutineStackFrame (m)] (LINE:63)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000b \l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|0x0006: INVOKE  (r0 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:java.util.List\<java.lang.StackTraceElement\>) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000b|0x000b: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:64)\l0x000d: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|LOOP_START\lLOOP:0: B:25:0x0010\-\>B:30:0x001d\l|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('frame' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0022  (LINE:65)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0012|0x0012: INVOKE  (r2 I:java.lang.StackTraceElement) = \l  (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('frame' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l type: INTERFACE call: kotlin.coroutines.jvm.internal.CoroutineStackFrame.getStackTraceElement():java.lang.StackTraceElement A[MD:():java.lang.StackTraceElement (m)] (LINE:66)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0019 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0019|0x0019: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:102)\l0x001a: INVOKE  \l  (r1 I:java.util.ArrayList A[D('result' java.util.ArrayList)])\l  (r2 I:java.lang.Object A[D('it' java.lang.StackTraceElement)])\l type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:66)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|LOOP_END\lLOOP:0: B:25:0x0010\-\>B:30:0x001d\l|0x001d: INVOKE  (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('frame' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) = \l  (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('frame' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])\l type: INTERFACE call: kotlin.coroutines.jvm.internal.CoroutineStackFrame.getCallerFrame():kotlin.coroutines.jvm.internal.CoroutineStackFrame A[MD:():kotlin.coroutines.jvm.internal.CoroutineStackFrame (m)] (LINE:67)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0022|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0022|0x0022: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:69)\l0x0023: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|RETURN\l|0x0025: RETURN  (r2 I:java.util.List\<java.lang.StackTraceElement\>) \l}"];
MethodNode[shape=record,label="{public final java.util.List\<java.lang.StackTraceElement\> kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedStackTrace((r4 'this' I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x001d \-\> B:25:0x0010, CROSS_EDGE: B:27:0x0016 \-\> B:30:0x001d, CROSS_EDGE: B:32:0x0025 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x001d: r2 'it' Ljava\/lang\/StackTraceElement;\l  0x001a\-0x001d: r3 '$i$a$\-let\-DebugCoroutineInfoImpl$lastObservedStackTrace$1' I\l  0x000b\-0x0025: r0 'frame' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\l  0x0010\-0x0025: r1 'result' Ljava\/util\/ArrayList;\lSIGNATURE: ()Ljava\/util\/List\<Ljava\/lang\/StackTraceElement;\>;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_35[style=dashed];
Node_29 -> Node_34;
Node_34 -> Node_30;
Node_30 -> Node_25;
Node_35 -> Node_30;
Node_33 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_19;
}

