digraph "CFG forkotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.creationStackTrace()Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.debug.internal.StackTraceFrame) = (r3 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.creationStackBottom kotlinx.coroutines.debug.internal.StackTraceFrame  (LINE:73)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0009 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: INVOKE  (r0 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:java.util.List\<java.lang.StackTraceElement\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: NEW_INSTANCE  (r1 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1) =  kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1  (LINE:75)\l0x000b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INVOKE  \l  (r1 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1)\l  (r3 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)\l  (r0 I:kotlinx.coroutines.debug.internal.StackTraceFrame A[D('bottom' kotlinx.coroutines.debug.internal.StackTraceFrame)])\l  (r2 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1.\<init\>(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl, kotlinx.coroutines.debug.internal.StackTraceFrame, kotlin.coroutines.Continuation):void A[MD:(kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl, kotlinx.coroutines.debug.internal.StackTraceFrame, kotlin.coroutines.Continuation\<? super kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1\>):void (m)]\l0x000f: CHECK_CAST (r1 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r1 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:kotlin.sequences.Sequence) = (r1 I:kotlin.jvm.functions.Function2) type: STATIC call: kotlin.sequences.SequencesKt.sequence(kotlin.jvm.functions.Function2):kotlin.sequences.Sequence A[MD:\<T\>:(kotlin.jvm.functions.Function2\<? super kotlin.sequences.SequenceScope\<? super T\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):kotlin.sequences.Sequence\<T\> (m)]\l0x0015: INVOKE  (r1 I:java.util.List) = (r1 I:kotlin.sequences.Sequence) type: STATIC call: kotlin.sequences.SequencesKt.toList(kotlin.sequences.Sequence):java.util.List A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):java.util.List\<T\> (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:java.util.List\<java.lang.StackTraceElement\>) \l}"];
MethodNode[shape=record,label="{private final java.util.List\<java.lang.StackTraceElement\> kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.creationStackTrace((r3 'this' I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0019 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0019: r0 'bottom' Lkotlinx\/coroutines\/debug\/internal\/StackTraceFrame;\lSIGNATURE: ()Ljava\/util\/List\<Ljava\/lang\/StackTraceElement;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

