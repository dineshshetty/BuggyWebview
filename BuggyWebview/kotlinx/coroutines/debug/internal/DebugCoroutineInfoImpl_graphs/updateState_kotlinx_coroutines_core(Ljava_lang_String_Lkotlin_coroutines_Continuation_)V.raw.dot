digraph "CFG forkotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.updateState$kotlinx_coroutines_core(Ljava\/lang\/String;Lkotlin\/coroutines\/Continuation;)V" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.String) = (r2 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl._state java.lang.String  (LINE:89)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r3 I:java.lang.Object A[D('state' java.lang.String)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0017 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|0x0008: CONST_STR  (r0 I:java.lang.String) =  \"SUSPENDED\" \l0x000a: INVOKE  (r0 I:boolean) = (r3 I:java.lang.Object A[D('state' java.lang.String)]), (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0017 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|0x0010: INVOKE  (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r2 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.getLastObservedFrame$kotlinx_coroutines_core():kotlin.coroutines.jvm.internal.CoroutineStackFrame A[MD:():kotlin.coroutines.jvm.internal.CoroutineStackFrame (m)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0017 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|RETURN\l|0x0016: RETURN   \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|0x0017: IPUT  (r3 I:java.lang.String A[D('state' java.lang.String)]), (r2 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl._state java.lang.String  (LINE:90)\l0x0019: INSTANCE_OF  (r0 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('frame' kotlin.coroutines.Continuation)]) kotlin.coroutines.jvm.internal.CoroutineStackFrame  (LINE:91)\l0x001b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|0x001c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0022 \l}"];
Node_30 [shape=record,label="{30\:\ 0x001e|0x001e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('frame' kotlin.coroutines.Continuation)]) \l0x001f: CHECK_CAST (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (kotlin.coroutines.jvm.internal.CoroutineStackFrame) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0023|0x0023: INVOKE  \l  (r2 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl)\l  (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame)\l type: VIRTUAL call: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.setLastObservedFrame$kotlinx_coroutines_core(kotlin.coroutines.jvm.internal.CoroutineStackFrame):void A[MD:(kotlin.coroutines.jvm.internal.CoroutineStackFrame):void (m)]\l0x0026: CONST_STR  (r0 I:java.lang.String) =  \"RUNNING\"  (LINE:92)\l0x0028: INVOKE  (r0 I:boolean) = (r3 I:java.lang.Object A[D('state' java.lang.String)]), (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x002c|0x002c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0033 \l}"];
Node_34 [shape=record,label="{34\:\ 0x002e|0x002e: INVOKE  (r1 I:java.lang.Thread) =  type: STATIC call: java.lang.Thread.currentThread():java.lang.Thread A[MD:():java.lang.Thread (c)] (LINE:93)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0036|0x0036: IPUT  (r1 I:java.lang.Thread), (r2 I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl) kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.lastObservedThread java.lang.Thread  (LINE:92)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0038|RETURN\l|0x0038: RETURN    (LINE:97)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0033|0x0033: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:95)\l0x0034: CHECK_CAST (r0 I:java.lang.Thread) = (java.lang.Thread) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0022|0x0022: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl.updateState$kotlinx_coroutines_core((r2 'this' I:kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[D('state' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.Continuation\<?\> A[D('frame' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0038 \-\> B:20:?, CROSS_EDGE: B:35:0x0033 \-\> B:36:0x0036, CROSS_EDGE: B:31:0x0022 \-\> B:32:0x0023, CROSS_EDGE: B:24:0x000e \-\> B:28:0x0017, CROSS_EDGE: B:22:0x0006 \-\> B:28:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0038: r3 'state' Ljava\/lang\/String;\l  \-1 \-0x0038: r4 'frame' Lkotlin\/coroutines\/Continuation;\lSIGNATURE: (Ljava\/lang\/String;Lkotlin\/coroutines\/Continuation\<*\>;)V\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_20;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_35 -> Node_36;
Node_31 -> Node_32;
}

