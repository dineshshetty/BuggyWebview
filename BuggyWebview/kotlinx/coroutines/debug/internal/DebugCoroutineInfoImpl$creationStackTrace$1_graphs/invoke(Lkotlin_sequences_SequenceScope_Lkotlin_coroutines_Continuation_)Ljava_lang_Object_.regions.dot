digraph "CFG forkotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1.invoke(Lkotlin\/sequences\/SequenceScope;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1628215261 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return ((kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1) create(r3, r4)).invokeSuspend(kotlin.Unit.INSTANCE)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1.invoke((r2v0 'this' kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 kotlin.sequences.SequenceScope\<? super java.lang.StackTraceElement\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/sequences\/SequenceScope\<\-Ljava\/lang\/StackTraceElement;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\lRENAME_REASON:avoid collision after fix types in other method\lREPLACED_BY: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1.invoke(kotlin.sequences.SequenceScope\<? super java.lang.StackTraceElement\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object\lBRIDGED_BY: kotlinx.coroutines.debug.internal.DebugCoroutineInfoImpl$creationStackTrace$1.invoke(kotlin.sequences.SequenceScope\<? super java.lang.StackTraceElement\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object\lJadxCommentsAttr\{\l DEBUG: \l \-\> Method merged with bridge method\}\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function2.invoke(P1, P2):R]\l}"];
MethodNode -> Node_0;Node_3 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
}

