digraph "CFG forkotlinx.coroutines.AbstractTimeSourceKt.wrapTask(Ljava\/lang\/Runnable;)Ljava\/lang\/Runnable;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:39)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0007 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: INVOKE  (r0 I:java.lang.Runnable) = (r0 I:kotlinx.coroutines.AbstractTimeSource), (r1 I:java.lang.Runnable A[D('block' java.lang.Runnable)]) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.wrapTask(java.lang.Runnable):java.lang.Runnable A[MD:(java.lang.Runnable):java.lang.Runnable (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:? \l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN  (r0 I:java.lang.Runnable) A[SYNTHETIC]\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|0x000e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('block' java.lang.Runnable)]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN  (r0 I:java.lang.Runnable) \l}"];
MethodNode[shape=record,label="{private static final java.lang.Runnable kotlinx.coroutines.AbstractTimeSourceKt.wrapTask((r1 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x000e \-\> B:20:0x000f, CROSS_EDGE: B:14:0x0004 \-\> B:19:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r1 'block' Ljava\/lang\/Runnable;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_19[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_19[style=dashed];
Node_17 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
}

