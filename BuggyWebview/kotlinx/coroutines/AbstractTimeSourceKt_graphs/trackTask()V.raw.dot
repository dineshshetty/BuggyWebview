digraph "CFG forkotlinx.coroutines.AbstractTimeSourceKt.trackTask()V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:43)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0007 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|0x0007: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.trackTask():void A[MD:():void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|RETURN\lORIG_RETURN\l|0x000a: RETURN    (LINE:44)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000a: RETURN   A[SYNTHETIC] (LINE:44)\l}"];
MethodNode[shape=record,label="{private static final void kotlinx.coroutines.AbstractTimeSourceKt.trackTask()  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0004 \-\> B:14:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_9;
Node_15 -> Node_9;
}

