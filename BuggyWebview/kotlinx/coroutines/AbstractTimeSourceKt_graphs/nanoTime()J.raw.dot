digraph "CFG forkotlinx.coroutines.AbstractTimeSourceKt.nanoTime()J" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)] (LINE:35)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0008 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0017 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: INVOKE  (r0 I:long) =  type: STATIC call: java.lang.System.nanoTime():long A[MD:():long (c)]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:long) A[SYNTHETIC]\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|0x0017: INVOKE  (r0 I:long) = (r0 I:java.lang.Long) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001b|RETURN\lORIG_RETURN\l|0x001b: RETURN  (r0 I:long) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: INVOKE  (r0 I:long) = (r0 I:kotlinx.coroutines.AbstractTimeSource) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.nanoTime():long A[MD:():long (m)]\l0x000c: INVOKE  (r0 I:java.lang.Long) = (r0 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l}"];
MethodNode[shape=record,label="{private static final long kotlinx.coroutines.AbstractTimeSourceKt.nanoTime()  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0017 \-\> B:20:0x001b, CROSS_EDGE: B:16:0x0008 \-\> B:17:0x0010\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_16 -> Node_17;
}

