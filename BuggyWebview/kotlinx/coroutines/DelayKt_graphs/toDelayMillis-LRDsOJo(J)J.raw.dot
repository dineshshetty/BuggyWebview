digraph "CFG forkotlinx.coroutines.DelayKt.toDelayMillis\-LRDsOJo(J)J" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:kotlin.time.Duration$Companion) =  kotlin.time.Duration.Companion kotlin.time.Duration$Companion  (LINE:146)\l0x0002: INVOKE  (r0 I:long) = (r0 I:kotlin.time.Duration$Companion) type: VIRTUAL call: kotlin.time.Duration.Companion.getZERO\-UwyO8pc():long A[MD:():long (m)]\l0x0006: INVOKE  (r0 I:int) = (r4 I:long A[D('$this$toDelayMillis' long)]), (r0 I:long) type: STATIC call: kotlin.time.Duration.compareTo\-LRDsOJo(long, long):int A[MD:(long, long):int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:13:0x0017 \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|0x000c: INVOKE  (r0 I:long) = (r4 I:long A[D('$this$toDelayMillis' long)]) type: STATIC call: kotlin.time.Duration.getInWholeMilliseconds\-impl(long):long A[MD:(long):long (m)]\l0x0010: CONST  (r2 I:??[long, double]) = (1 ??[long, double]) \l0x0012: INVOKE  (r0 I:long) = (r0 I:long), (r2 I:long) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(long, long):long A[MD:(long, long):long (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0019: RETURN  (r0 I:long) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: CONST  (r0 I:??[long, double]) = (0 ??[long, double]) \l0x0019: RETURN  (r0 I:long) \l}"];
MethodNode[shape=record,label="{public static final long kotlinx.coroutines.DelayKt.toDelayMillis\-LRDsOJo((r4 I:long A[D('$this$toDelayMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0017 \-\> B:14:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0019: r4 '$this$toDelayMillis' J\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_9;
}

