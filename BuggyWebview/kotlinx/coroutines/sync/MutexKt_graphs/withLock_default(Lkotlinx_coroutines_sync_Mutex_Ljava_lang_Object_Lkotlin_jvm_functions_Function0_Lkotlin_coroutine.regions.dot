digraph "CFG forkotlinx.coroutines.sync.MutexKt.withLock$default(Lkotlinx\/coroutines\/sync\/Mutex;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function0;Lkotlin\/coroutines\/Continuation;ILjava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1139443969 {
label = "R(4:1|(1:3)|4|(1:8))";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0000|int r6 = 1\l}"];
subgraph cluster_IfRegion_1692823135 {
label = "IF [B:17:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0002|if ((r5 & 1) != 0) goto L3\l}"];
subgraph cluster_Region_1501249844 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0004|r2 = null\l}"];
}
}
Node_19 [shape=record,label="{19\:\ 0x0005|PHI: r2 \l  PHI: (r2v1 'owner' java.lang.Object) = (r2v0 'owner' java.lang.Object), (r2v2 'owner' java.lang.Object) binds: [B:17:0x0002, B:18:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.InlineMarker.mark(0)\lr1.lock(r2, r4)\lkotlin.jvm.internal.InlineMarker.mark(1)\l}"];
subgraph cluster_TryCatchRegion_296748281 {
label = "Try: R(1:8) finally: R(3:11|12|13)";
node [shape=record,color=blue];
subgraph cluster_Region_688370947 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x001f|RETURN\l|return r3.invoke()\l}"];
}
subgraph cluster_Region_2126815978 {
label = "R(3:11|12|13) | ExcHandler: all \-\> 0x0020\l";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0020|ExcHandler: all \-\> 0x0020\l}"];
Node_24 [shape=record,label="{24\:\ 0x0021|FINALLY_INSNS\l|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lr1.unlock(r2)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_25 [shape=record,label="{25\:\ 0x002a|throw r0\l}"];
}
}
}
subgraph cluster_Region_2126815978 {
label = "R(3:11|12|13) | ExcHandler: all \-\> 0x0020\l";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0020|ExcHandler: all \-\> 0x0020\l}"];
Node_24 [shape=record,label="{24\:\ 0x0021|FINALLY_INSNS\l|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lr1.unlock(r2)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_25 [shape=record,label="{25\:\ 0x002a|throw r0\l}"];
}
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0012|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0012|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0020, blocks: (B:20:0x0012), top: B:26:0x0012 \}\lCatch: all \-\> 0x0020\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0016|DONT_GENERATE\l|kotlin.jvm.internal.InlineMarker.finallyStart(r6)\lr1.unlock(r2)\lkotlin.jvm.internal.InlineMarker.finallyEnd(r6)\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ java.lang.Object kotlinx.coroutines.sync.MutexKt.withLock$default((r1v0 '$this$withLock_u24default' kotlinx.coroutines.sync.Mutex A[D('$this$withLock_u24default' kotlinx.coroutines.sync.Mutex), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'owner' java.lang.Object A[D('owner' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'action' kotlin.jvm.functions.Function0 A[D('action' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 '$completion' kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:25:0x002a \-\> B:15:?, CROSS_EDGE: B:26:0x0012 \-\> B:23:0x0020, CROSS_EDGE: B:17:0x0002 \-\> B:19:0x0005\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0020, blocks: (B:20:0x0012), top: B:26:0x0012 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_19[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_26;
Node_22 -> Node_15;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_14 -> Node_16;
Node_26 -> Node_20;
Node_26 -> Node_23;
Node_20 -> Node_21;
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_27 -> Node_23;
}

