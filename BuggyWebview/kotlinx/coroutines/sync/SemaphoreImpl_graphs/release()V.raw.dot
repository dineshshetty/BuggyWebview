digraph "CFG forkotlinx.coroutines.sync.SemaphoreImpl.release()V" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|LOOP_START\lLOOP:0: B:25:0x0000\-\>B:37:0x0023\l|0x0001: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY])  (LINE:183)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0003|LOOP_START\lLOOP:1: B:26:0x0003\-\>B:32:0x0019\l|0x0004: IGET  (r2 I:int) = (r0 I:kotlinx.coroutines.sync.SemaphoreImpl A[D('$this$getAndUpdate$iv' kotlinx.coroutines.sync.SemaphoreImpl)]) kotlinx.coroutines.sync.SemaphoreImpl._availablePermits int  (LINE:314)\l0x0006: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('cur$iv' int)])  (LINE:315)\l0x0007: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: IGET  (r5 I:int) = (r8 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl.permits int  (LINE:184)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|0x000a: IF  (r3 I:??[int, byte, short, char] A[D('cur' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:29:0x000e \l}"];
Node_28 [shape=record,label="{28\:\ 0x000c|0x000c: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x000f|0x000f: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0027 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0011|0x0011: ARITH  (r3 I:int) = (r3 I:int A[D('cur' int)]) + (1 int)  (LINE:185)\l0x0013: SGET  (r4 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater A[D('$i$a$\-getAndUpdate\-SemaphoreImpl$release$p$1' int)]) =  kotlinx.coroutines.sync.SemaphoreImpl._availablePermits$FU java.util.concurrent.atomic.AtomicIntegerFieldUpdater  (LINE:316)\l0x0015: INVOKE  (r4 I:boolean) = \l  (r4 I:java.util.concurrent.atomic.AtomicIntegerFieldUpdater)\l  (r0 I:java.lang.Object A[D('$this$getAndUpdate$iv' kotlinx.coroutines.sync.SemaphoreImpl)])\l  (r2 I:int A[D('cur$iv' int)])\l  (r3 I:int A[D('upd$iv' int)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(java.lang.Object, int, int):boolean A[MD:(T, int, int):boolean (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|LOOP_END\lLOOP:1: B:26:0x0003\-\>B:32:0x0019\l|0x0019: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0003 \l}"];
Node_45 [shape=record,label="{45\:\ 0x001b|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|0x001b: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$getAndUpdate$iv' kotlinx.coroutines.sync.SemaphoreImpl)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('cur$iv' int)])  (LINE:183)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|0x001c: IF  (r0 I:??[int, byte, short, char] A[D('p' int)]) \< (0 ??[int, byte, short, char])  \-\> B:36:0x001f  (LINE:187)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|0x001f: INVOKE  (r1 I:boolean) = (r8 I:kotlinx.coroutines.sync.SemaphoreImpl) type: DIRECT call: kotlinx.coroutines.sync.SemaphoreImpl.tryResumeNextFromQueue():boolean A[MD:():boolean (m)] (LINE:188)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|LOOP_END\lLOOP:0: B:25:0x0000\-\>B:37:0x0023\l|0x0023: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0000 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0025|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0025|RETURN\l|0x0025: RETURN   \l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x001e|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x001e|RETURN\l|0x001e: RETURN   \l}"];
Node_44 [shape=record,label="{44\:\ 0x0027|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0027|0x0027: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:305)\l0x0028: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:184)\l0x002c: CONST_STR  (r7 I:java.lang.String) =  \"The number of released permits cannot be greater than \" \l0x002e: INVOKE  (r5 I:java.lang.String) = (r7 I:java.lang.String), (r5 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0032: NEW_INSTANCE  (r6 I:java.lang.IllegalStateException A[D('$i$a$\-check\-SemaphoreImpl$release$p$1$1' int)]) =  java.lang.IllegalStateException \l0x0034: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0038: INVOKE  (r6 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x003b|0x003b: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000e|0x000e: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.sync.SemaphoreImpl.release((r8 'this' I:kotlinx.coroutines.sync.SemaphoreImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:37:0x0023 \-\> B:25:0x0000, CROSS_EDGE: B:38:0x0025 \-\> B:24:?, BACK_EDGE: B:32:0x0019 \-\> B:26:0x0003, CROSS_EDGE: B:41:0x003b \-\> B:24:?, CROSS_EDGE: B:29:0x000e \-\> B:30:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0013: r4 '$i$a$\-getAndUpdate\-SemaphoreImpl$release$p$1' I\l  0x0007\-0x0013: r3 'cur' I\l  0x0002\-0x001b: r0 '$this$getAndUpdate$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x0003\-0x001b: r1 '$i$f$getAndUpdate' I\l  0x0006\-0x001b: r2 'cur$iv' I\l  0x0013\-0x001b: r3 'upd$iv' I\l  0x001c\-0x0026: r0 'p' I\l  0x0028\-0x0032: r6 '$i$a$\-check\-SemaphoreImpl$release$p$1$1' I\l  0x0026\-0x003b: r0 '$this$getAndUpdate$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x0026\-0x003b: r1 '$i$f$getAndUpdate' I\l  0x0027\-0x003b: r2 'cur$iv' I\l  0x0027\-0x003b: r3 'cur' I\l  0x0027\-0x003b: r4 '$i$a$\-getAndUpdate\-SemaphoreImpl$release$p$1' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.sync.Semaphore.release():void]\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_44;
Node_31 -> Node_32;
Node_32 -> Node_26;
Node_32 -> Node_45[style=dashed];
Node_45 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_43[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_25;
Node_37 -> Node_42[style=dashed];
Node_42 -> Node_38;
Node_38 -> Node_24;
Node_43 -> Node_35;
Node_35 -> Node_24;
Node_44 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_24;
Node_29 -> Node_30;
}

