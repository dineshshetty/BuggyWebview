digraph "CFG forkotlinx.coroutines.sync.SemaphoreImpl.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlinx.coroutines.sync.SemaphoreImpl.head$FU = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(kotlinx.coroutines.sync.SemaphoreImpl.class, java.lang.Object.class, \"head\")\lkotlinx.coroutines.sync.SemaphoreImpl.deqIdx$FU = java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(kotlinx.coroutines.sync.SemaphoreImpl.class, \"deqIdx\")\lkotlinx.coroutines.sync.SemaphoreImpl.tail$FU = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(kotlinx.coroutines.sync.SemaphoreImpl.class, java.lang.Object.class, \"tail\")\lkotlinx.coroutines.sync.SemaphoreImpl.enqIdx$FU = java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(kotlinx.coroutines.sync.SemaphoreImpl.class, \"enqIdx\")\lkotlinx.coroutines.sync.SemaphoreImpl._availablePermits$FU = java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(kotlinx.coroutines.sync.SemaphoreImpl.class, \"_availablePermits\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|RETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.sync.SemaphoreImpl.\<clinit\>()  | DONT_GENERATE\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

