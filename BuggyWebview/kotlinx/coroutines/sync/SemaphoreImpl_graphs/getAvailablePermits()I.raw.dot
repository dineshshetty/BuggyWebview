digraph "CFG forkotlinx.coroutines.sync.SemaphoreImpl.getAvailablePermits()I" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl._availablePermits int  (LINE:150)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:int) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int kotlinx.coroutines.sync.SemaphoreImpl.getAvailablePermits((r2 'this' I:kotlinx.coroutines.sync.SemaphoreImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlinx.coroutines.sync.Semaphore.getAvailablePermits():int]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

