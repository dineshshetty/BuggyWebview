digraph "CFG forkotlinx.coroutines.sync.SemaphoreImpl.addAcquireToQueue(Lkotlinx\/coroutines\/CancellableContinuation;)Z" {
Node_85 [shape=record,label="{85\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_87 [shape=record,label="{87\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r24 I:??[OBJECT, ARRAY])  (LINE:196)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r25 I:??[OBJECT, ARRAY] A[D('cont' kotlinx.coroutines.CancellableContinuation)]) \l0x0004: IGET  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl.tail java.lang.Object \l0x0006: CHECK_CAST (r2 I:kotlinx.coroutines.sync.SemaphoreSegment) = (kotlinx.coroutines.sync.SemaphoreSegment) (r2 I:??[OBJECT, ARRAY]) \l0x0008: SGET  (r3 I:java.util.concurrent.atomic.AtomicLongFieldUpdater) =  kotlinx.coroutines.sync.SemaphoreImpl.enqIdx$FU java.util.concurrent.atomic.AtomicLongFieldUpdater  (LINE:197)\l0x000a: INVOKE  (r3 I:long) = (r3 I:java.util.concurrent.atomic.AtomicLongFieldUpdater), (r0 I:java.lang.Object) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(java.lang.Object):long A[MD:(T):long (c)]\l0x000e: INVOKE  (r5 I:int) =  type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.access$getSEGMENT_SIZE$p():int A[MD:():int (m)] (LINE:198)\l0x0012: CAST (r5 I:long) = (long) (r5 I:int) \l0x0013: ARITH  (r5 I:long) = (r3 I:long A[D('enqIdx' long)]) \/ (r5 I:long) \l0x0015: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r24 I:??[OBJECT, ARRAY]) \l0x0017: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_88 [shape=record,label="{88\:\ 0x0018|LOOP_START\lLOOP:0: B:88:0x0018\-\>B:115:0x0091\l|0x0019: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('curTail' kotlinx.coroutines.sync.SemaphoreSegment)])  (LINE:318)\l0x001a: CHECK_CAST (r9 I:kotlinx.coroutines.internal.Segment) = (kotlinx.coroutines.internal.Segment) (r9 I:??[OBJECT, ARRAY]) \l0x001c: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: MOVE  (r11 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$findSegmentInternal$iv$iv' kotlinx.coroutines.internal.Segment)])  (LINE:319)\l}"];
Node_89 [shape=record,label="{89\:\ 0x001e|LOOP_START\lLOOP:1: B:89:0x001e\-\>B:158:0x001e\l|0x001e: INVOKE  (r12 I:long) = (r11 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getId():long A[MD:():long (m)] (LINE:320)\l0x0022: CMP_L  (r14 I:int) = (r12 I:long), (r5 I:long A[D('id$iv' long)]) \l}"];
Node_90 [shape=record,label="{90\:\ 0x0024|0x0024: IF  (r14 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:95:0x0034 \l}"];
Node_91 [shape=record,label="{91\:\ 0x0026|0x0026: INVOKE  (r12 I:boolean) = (r11 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getRemoved():boolean A[MD:():boolean (m)]\l}"];
Node_92 [shape=record,label="{92\:\ 0x002a|0x002a: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:153:0x002d \l}"];
Node_153 [shape=record,label="{153\:\ 0x002d|SYNTHETIC\l}"];
Node_94 [shape=record,label="{94\:\ 0x002d|0x002d: INVOKE  (r12 I:java.lang.Object) = (r11 I:java.lang.Object A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: STATIC call: kotlinx.coroutines.internal.SegmentOrClosed.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<S extends kotlinx.coroutines.internal.Segment\<S\>\>:(java.lang.Object):java.lang.Object (m)] (LINE:339)\l0x0031: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('curTail' kotlinx.coroutines.sync.SemaphoreSegment)]) \l}"];
Node_98 [shape=record,label="{98\:\ 0x0050|0x0050: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('$i$a$\-nextOrIfClosed\-ConcurrentLinkedListKt$findSegmentInternal$next$1$iv$iv' int)]) = (r12 I:??[OBJECT, ARRAY] A[D('this_$iv$iv$iv' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])  (LINE:318)\l0x0051: INVOKE  (r9 I:boolean) = (r2 I:java.lang.Object A[D('s$iv' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.internal.SegmentOrClosed.isClosed\-impl(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)] (LINE:340)\l}"];
Node_99 [shape=record,label="{99\:\ 0x0055|0x0055: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:151:0x009f \l}"];
Node_100 [shape=record,label="{100\:\ 0x0057|0x0057: INVOKE  (r9 I:kotlinx.coroutines.internal.Segment) = (r2 I:java.lang.Object A[D('s$iv' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.internal.SegmentOrClosed.getSegment\-impl(java.lang.Object):kotlinx.coroutines.internal.Segment A[MD:(java.lang.Object):S extends kotlinx.coroutines.internal.Segment\<S\> (m)]\l0x005b: MOVE  (r12 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$findSegmentAndMoveForward$iv' kotlinx.coroutines.sync.SemaphoreImpl)]) \l0x005c: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x005d: MOVE  (r14 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('$this$moveForward$iv$iv' kotlinx.coroutines.sync.SemaphoreImpl)])  (LINE:341)\l0x005e: CONST  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_101 [shape=record,label="{101\:\ 0x005f|LOOP_START\lLOOP:2: B:101:0x005f\-\>B:166:0x005f\l|0x0060: IGET  (r10 I:java.lang.Object) = (r14 I:kotlinx.coroutines.sync.SemaphoreImpl A[D('$this$loop$iv$iv$iv' kotlinx.coroutines.sync.SemaphoreImpl)]) kotlinx.coroutines.sync.SemaphoreImpl.tail java.lang.Object  (LINE:343)\l0x0062: CHECK_CAST (r10 I:kotlinx.coroutines.internal.Segment) = (kotlinx.coroutines.internal.Segment) (r10 I:??[OBJECT, ARRAY]) \l0x0064: CONST  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0066: INVOKE  (r19 I:long) = (r10 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getId():long A[MD:():long (m)] (LINE:344)\l0x006a: INVOKE  (r21 I:long) = (r9 I:kotlinx.coroutines.internal.Segment A[D('to$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getId():long A[MD:():long (m)]\l0x006e: CMP_L  (r23 I:int) = (r19 I:long), (r21 I:long) \l}"];
Node_102 [shape=record,label="{102\:\ 0x0070|0x0070: IF  (r23 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:104:0x0074 \l}"];
Node_104 [shape=record,label="{104\:\ 0x0074|0x0074: INVOKE  (r19 I:boolean) = (r9 I:kotlinx.coroutines.internal.Segment A[D('to$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.tryIncPointers$kotlinx_coroutines_core():boolean A[MD:():boolean (m)] (LINE:345)\l}"];
Node_105 [shape=record,label="{105\:\ 0x0078|0x0078: IF  (r19 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:107:0x007c \l}"];
Node_107 [shape=record,label="{107\:\ 0x007c|0x007c: SGET  (r11 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.sync.SemaphoreImpl.tail$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:346)\l0x007e: INVOKE  (r11 I:boolean) = \l  (r11 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r12 I:java.lang.Object A[D('$this$moveForward$iv$iv' kotlinx.coroutines.sync.SemaphoreImpl)])\l  (r10 I:java.lang.Object A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)])\l  (r9 I:java.lang.Object A[D('to$iv$iv' kotlinx.coroutines.internal.Segment)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_108 [shape=record,label="{108\:\ 0x0082|0x0082: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:116:0x0094 \l}"];
Node_116 [shape=record,label="{116\:\ 0x0094|0x0094: INVOKE  (r11 I:boolean) = (r9 I:kotlinx.coroutines.internal.Segment A[D('to$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.decPointers$kotlinx_coroutines_core():boolean A[MD:():boolean (m)] (LINE:350)\l}"];
Node_117 [shape=record,label="{117\:\ 0x0098|0x0098: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:167:0x005f \l}"];
Node_164 [shape=record,label="{164\:\ 0x009a|SYNTHETIC\l}"];
Node_118 [shape=record,label="{118\:\ 0x009a|0x009a: INVOKE  (r9 I:kotlinx.coroutines.internal.Segment A[D('to$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.remove():void A[MD:():void (m)]\l}"];
Node_168 [shape=record,label="{168\:\ 0x005f|SYNTHETIC\l}"];
Node_166 [shape=record,label="{166\:\ 0x005f|LOOP_END\lSYNTHETIC\lLOOP:2: B:101:0x005f\-\>B:166:0x005f\l}"];
Node_167 [shape=record,label="{167\:\ 0x005f|SYNTHETIC\l}"];
Node_163 [shape=record,label="{163\:\ 0x0084|SYNTHETIC\l}"];
Node_109 [shape=record,label="{109\:\ 0x0084|0x0084: INVOKE  (r11 I:boolean) = (r10 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.decPointers$kotlinx_coroutines_core():boolean A[MD:():boolean (m)] (LINE:347)\l}"];
Node_110 [shape=record,label="{110\:\ 0x0088|0x0088: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:112:0x008d \l}"];
Node_111 [shape=record,label="{111\:\ 0x008a|0x008a: INVOKE  (r10 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.remove():void A[MD:():void (m)]\l}"];
Node_112 [shape=record,label="{112\:\ 0x008d|0x008d: CONST  (r11 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:348)\l}"];
Node_113 [shape=record,label="{113\:\ 0x008e|0x008e: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:115:0x0091  (LINE:340)\l}"];
Node_115 [shape=record,label="{115\:\ 0x0091|LOOP_END\lLOOP:0: B:88:0x0018\-\>B:115:0x0091\l|0x0091: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('s$iv' java.lang.Object)]) = (r16 I:??[OBJECT, ARRAY] A[D('curTail' kotlinx.coroutines.sync.SemaphoreSegment)]) \l}"];
Node_150 [shape=record,label="{150\:\ 0x009f|SYNTHETIC\l}"];
Node_120 [shape=record,label="{120\:\ 0x009f|0x009f: INVOKE  (r2 I:kotlinx.coroutines.internal.Segment) = (r2 I:java.lang.Object A[D('s$iv' java.lang.Object)]) type: STATIC call: kotlinx.coroutines.internal.SegmentOrClosed.getSegment\-impl(java.lang.Object):kotlinx.coroutines.internal.Segment A[MD:(java.lang.Object):S extends kotlinx.coroutines.internal.Segment\<S\> (m)] (LINE:199)\l0x00a3: CHECK_CAST (r2 I:kotlinx.coroutines.sync.SemaphoreSegment) = (kotlinx.coroutines.sync.SemaphoreSegment) (r2 I:??[OBJECT, ARRAY]) \l0x00a6: INVOKE  (r5 I:int) =  type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.access$getSEGMENT_SIZE$p():int A[MD:():int (m)] (LINE:200)\l0x00aa: CAST (r5 I:long) = (long) (r5 I:int) \l0x00ab: ARITH  (r5 I:long) = (r3 I:long A[D('enqIdx' long)]) % (r5 I:long) \l0x00ad: CAST (r6 I:int) = (int) (r5 I:long) \l0x00ae: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:202)\l0x00af: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('segment' kotlinx.coroutines.sync.SemaphoreSegment)]) \l0x00b0: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b1: IGET  (r9 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r7 I:kotlinx.coroutines.sync.SemaphoreSegment A[D('this_$iv' kotlinx.coroutines.sync.SemaphoreSegment)]) kotlinx.coroutines.sync.SemaphoreSegment.acquirers java.util.concurrent.atomic.AtomicReferenceArray  (LINE:352)\l0x00b3: INVOKE  (r5 I:boolean A[D('expected$iv' java.lang.Object)]) = \l  (r9 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r6 I:int A[D('i' int)])\l  (r5 I:java.lang.Object A[D('expected$iv' java.lang.Object)])\l  (r1 I:java.lang.Object)\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int, java.lang.Object, java.lang.Object):boolean A[MD:(int, E, E):boolean (c)]\l}"];
Node_121 [shape=record,label="{121\:\ 0x00b7|0x00b7: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('expected$iv' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:124:0x00c8  (LINE:202)\l}"];
Node_122 [shape=record,label="{122\:\ 0x00b9|0x00b9: NEW_INSTANCE  (r5 I:kotlinx.coroutines.sync.CancelSemaphoreAcquisitionHandler) =  kotlinx.coroutines.sync.CancelSemaphoreAcquisitionHandler  (LINE:203)\l0x00bb: INVOKE  \l  (r5 I:kotlinx.coroutines.sync.CancelSemaphoreAcquisitionHandler)\l  (r2 I:kotlinx.coroutines.sync.SemaphoreSegment A[D('segment' kotlinx.coroutines.sync.SemaphoreSegment)])\l  (r6 I:int A[D('i' int)])\l type: DIRECT call: kotlinx.coroutines.sync.CancelSemaphoreAcquisitionHandler.\<init\>(kotlinx.coroutines.sync.SemaphoreSegment, int):void A[MD:(kotlinx.coroutines.sync.SemaphoreSegment, int):void (m)]\l0x00be: CHECK_CAST (r5 I:kotlinx.coroutines.CancelHandlerBase) = (kotlinx.coroutines.CancelHandlerBase) (r5 I:??[OBJECT, ARRAY]) \l0x00c0: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00c1: CHECK_CAST (r5 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r5 I:??[OBJECT, ARRAY] A[D('$this$asHandler$iv' kotlinx.coroutines.CancelHandlerBase)])  (LINE:353)\l0x00c3: INVOKE  \l  (r1 I:kotlinx.coroutines.CancellableContinuation)\l  (r5 I:kotlin.jvm.functions.Function1 A[D('$this$asHandler$iv' kotlinx.coroutines.CancelHandlerBase)])\l type: INTERFACE call: kotlinx.coroutines.CancellableContinuation.invokeOnCancellation(kotlin.jvm.functions.Function1):void A[MD:(kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):void (m)] (LINE:203)\l0x00c6: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:204)\l}"];
Node_123 [shape=record,label="{123\:\ 0x00c7|RETURN\l|0x00c7: RETURN  (r5 I:boolean) \l}"];
Node_86 [shape=record,label="{86\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_124 [shape=record,label="{124\:\ 0x00c8|0x00c8: INVOKE  (r5 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.access$getPERMIT$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:208)\l0x00cc: INVOKE  (r7 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.access$getTAKEN$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l0x00d0: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('segment' kotlinx.coroutines.sync.SemaphoreSegment)]) \l0x00d1: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00d2: IGET  (r10 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r8 I:kotlinx.coroutines.sync.SemaphoreSegment A[D('this_$iv' kotlinx.coroutines.sync.SemaphoreSegment)]) kotlinx.coroutines.sync.SemaphoreSegment.acquirers java.util.concurrent.atomic.AtomicReferenceArray  (LINE:354)\l0x00d4: INVOKE  (r5 I:boolean A[D('expected$iv' java.lang.Object)]) = \l  (r10 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r6 I:int A[D('i' int)])\l  (r5 I:java.lang.Object A[D('expected$iv' java.lang.Object)])\l  (r7 I:java.lang.Object A[D('value$iv' java.lang.Object)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(int, java.lang.Object, java.lang.Object):boolean A[MD:(int, E, E):boolean (c)]\l}"];
Node_125 [shape=record,label="{125\:\ 0x00d8|0x00d8: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('expected$iv' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:128:0x00e3  (LINE:208)\l}"];
Node_126 [shape=record,label="{126\:\ 0x00da|0x00da: SGET  (r5 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:210)\l0x00dc: IGET  (r7 I:kotlin.jvm.functions.Function1\<java.lang.Throwable, kotlin.Unit\>) = (r0 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl.onCancellationRelease kotlin.jvm.functions.Function1 \l0x00de: INVOKE  (r1 I:kotlinx.coroutines.CancellableContinuation), (r5 I:java.lang.Object), (r7 I:kotlin.jvm.functions.Function1) type: INTERFACE call: kotlinx.coroutines.CancellableContinuation.resume(java.lang.Object, kotlin.jvm.functions.Function1):void A[MD:(T, kotlin.jvm.functions.Function1\<? super java.lang.Throwable, kotlin.Unit\>):void (m)]\l0x00e1: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:211)\l}"];
Node_127 [shape=record,label="{127\:\ 0x00e2|RETURN\l|0x00e2: RETURN  (r5 I:boolean) \l}"];
Node_128 [shape=record,label="{128\:\ 0x00e3|0x00e3: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:213)\l0x00e4: INVOKE  (r7 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getASSERTIONS_ENABLED():boolean A[MD:():boolean (m)]\l}"];
Node_129 [shape=record,label="{129\:\ 0x00e8|0x00e8: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:138:0x0105 \l}"];
Node_130 [shape=record,label="{130\:\ 0x00ea|0x00ea: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:305)\l0x00eb: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('segment' kotlinx.coroutines.sync.SemaphoreSegment)])  (LINE:213)\l0x00ec: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00ed: IGET  (r10 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r8 I:kotlinx.coroutines.sync.SemaphoreSegment A[D('this_$iv' kotlinx.coroutines.sync.SemaphoreSegment)]) kotlinx.coroutines.sync.SemaphoreSegment.acquirers java.util.concurrent.atomic.AtomicReferenceArray  (LINE:355)\l0x00ef: INVOKE  (r8 I:java.lang.Object A[D('this_$iv' kotlinx.coroutines.sync.SemaphoreSegment)]) = (r10 I:java.util.concurrent.atomic.AtomicReferenceArray), (r6 I:int A[D('i' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.get(int):java.lang.Object A[MD:(int):E (c)]\l0x00f3: INVOKE  (r9 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.access$getBROKEN$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:213)\l}"];
Node_131 [shape=record,label="{131\:\ 0x00f7|0x00f7: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:133:0x00fb \l}"];
Node_132 [shape=record,label="{132\:\ 0x00f9|0x00f9: CONST  (r11 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_134 [shape=record,label="{134\:\ 0x00fc|0x00fc: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:136:0x00ff \l}"];
Node_136 [shape=record,label="{136\:\ 0x00ff|0x00ff: NEW_INSTANCE  (r5 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0101: INVOKE  (r5 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_137 [shape=record,label="{137\:\ 0x0104|0x0104: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_169 [shape=record,label="{169\:\ ?|SYNTHETIC\lRETURN\l|0x0105: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:214)\l0x0106: RETURN  (r5 I:boolean) A[SYNTHETIC]\l}"];
Node_133 [shape=record,label="{133\:\ 0x00fb|0x00fb: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_138 [shape=record,label="{138\:\ 0x0105|RETURN\lORIG_RETURN\l|0x0105: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l0x0106: RETURN  (r5 I:boolean) \l}"];
Node_165 [shape=record,label="{165\:\ 0x007a|SYNTHETIC\l}"];
Node_106 [shape=record,label="{106\:\ 0x007a|0x007a: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_162 [shape=record,label="{162\:\ 0x0072|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x0072|0x0072: CONST  (r11 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_151 [shape=record,label="{151\:\ 0x009f|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0034|0x0034: MOVE  (r12 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)])  (LINE:321)\l0x0035: CHECK_CAST (r12 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r12 I:??[OBJECT, ARRAY]) \l0x0037: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0038: INVOKE  (r14 I:java.lang.Object) = \l  (r12 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode A[D('this_$iv$iv$iv' kotlinx.coroutines.internal.ConcurrentLinkedListNode)])\l type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListNode.access$getNextOrClosed(kotlinx.coroutines.internal.ConcurrentLinkedListNode):java.lang.Object A[MD:(kotlinx.coroutines.internal.ConcurrentLinkedListNode):java.lang.Object (m)] (LINE:322)\l0x003c: CONST  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003d: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('curTail' kotlinx.coroutines.sync.SemaphoreSegment)])  (LINE:323)\l0x003f: INVOKE  (r2 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListKt.access$getCLOSED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l}"];
Node_96 [shape=record,label="{96\:\ 0x0043|0x0043: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it$iv$iv$iv' java.lang.Object)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:140:0x0107 \l}"];
Node_140 [shape=record,label="{140\:\ 0x0107|0x0107: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('segment' kotlinx.coroutines.sync.SemaphoreSegment)]) = (r14 I:??[OBJECT, ARRAY] A[D('it$iv$iv$iv' java.lang.Object)])  (LINE:326)\l0x0108: CHECK_CAST (r2 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r2 I:??[OBJECT, ARRAY]) \l0x010d: CHECK_CAST (r2 I:kotlinx.coroutines.internal.Segment) = (kotlinx.coroutines.internal.Segment) (r2 I:??[OBJECT, ARRAY])  (LINE:321)\l}"];
Node_141 [shape=record,label="{141\:\ 0x010f|0x010f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next$iv$iv' kotlinx.coroutines.internal.Segment)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:154:0x0116  (LINE:329)\l}"];
Node_154 [shape=record,label="{154\:\ 0x0116|SYNTHETIC\l}"];
Node_143 [shape=record,label="{143\:\ 0x0116|0x0116: INVOKE  (r12 I:long) = (r11 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getId():long A[MD:():long (m)] (LINE:333)\l0x011a: CONST  (r14 I:??[long, double]) = (1 ??[long, double]) \l0x011c: ARITH  (r12 I:long) = (r12 I:long) + (r14 I:long) \l0x011d: MOVE  (r14 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) \l0x011e: CHECK_CAST (r14 I:kotlinx.coroutines.sync.SemaphoreSegment) = (kotlinx.coroutines.sync.SemaphoreSegment) (r14 I:??[OBJECT, ARRAY]) \l0x0120: CONST  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0121: INVOKE  (r12 I:kotlinx.coroutines.sync.SemaphoreSegment A[D('p0' long)]) = \l  (r12 I:long A[D('p0' long)])\l  (r14 I:kotlinx.coroutines.sync.SemaphoreSegment A[D('p1' kotlinx.coroutines.sync.SemaphoreSegment)])\l type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.access$createSegment(long, kotlinx.coroutines.sync.SemaphoreSegment):kotlinx.coroutines.sync.SemaphoreSegment A[MD:(long, kotlinx.coroutines.sync.SemaphoreSegment):kotlinx.coroutines.sync.SemaphoreSegment (m)] (LINE:199)\l0x0125: CHECK_CAST (r12 I:kotlinx.coroutines.internal.Segment) = (kotlinx.coroutines.internal.Segment) (r12 I:??[OBJECT, ARRAY] A[D('p0' long)]) \l0x0127: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('newTail$iv$iv' kotlinx.coroutines.internal.Segment)])  (LINE:334)\l0x0128: CHECK_CAST (r13 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode) = (kotlinx.coroutines.internal.ConcurrentLinkedListNode) (r13 I:??[OBJECT, ARRAY]) \l0x012a: INVOKE  (r13 I:boolean) = \l  (r11 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)])\l  (r13 I:kotlinx.coroutines.internal.ConcurrentLinkedListNode)\l type: VIRTUAL call: kotlinx.coroutines.internal.Segment.trySetNext(kotlinx.coroutines.internal.ConcurrentLinkedListNode):boolean A[MD:(N extends kotlinx.coroutines.internal.ConcurrentLinkedListNode\<N\>):boolean (m)]\l}"];
Node_144 [shape=record,label="{144\:\ 0x012e|0x012e: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:155:0x013e \l}"];
Node_155 [shape=record,label="{155\:\ 0x013e|SYNTHETIC\l}"];
Node_149 [shape=record,label="{149\:\ 0x013e|0x013e: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('next$iv$iv' kotlinx.coroutines.internal.Segment)]) = (r16 I:??[OBJECT, ARRAY] A[D('curTail' kotlinx.coroutines.sync.SemaphoreSegment)])  (LINE:334)\l}"];
Node_159 [shape=record,label="{159\:\ 0x001e|SYNTHETIC\l}"];
Node_158 [shape=record,label="{158\:\ 0x001e|LOOP_END\lSYNTHETIC\lLOOP:1: B:89:0x001e\-\>B:158:0x001e\l}"];
Node_157 [shape=record,label="{157\:\ 0x0130|SYNTHETIC\l}"];
Node_145 [shape=record,label="{145\:\ 0x0130|0x0130: INVOKE  (r13 I:boolean) = (r11 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.getRemoved():boolean A[MD:():boolean (m)] (LINE:335)\l}"];
Node_146 [shape=record,label="{146\:\ 0x0134|0x0134: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:148:0x0139 \l}"];
Node_147 [shape=record,label="{147\:\ 0x0136|0x0136: INVOKE  (r11 I:kotlinx.coroutines.internal.Segment A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) type: VIRTUAL call: kotlinx.coroutines.internal.Segment.remove():void A[MD:():void (m)]\l}"];
Node_148 [shape=record,label="{148\:\ 0x0139|0x0139: MOVE  (r11 I:??[OBJECT, ARRAY] A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) = (r12 I:??[OBJECT, ARRAY] A[D('newTail$iv$iv' kotlinx.coroutines.internal.Segment)])  (LINE:336)\l0x013a: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('next$iv$iv' kotlinx.coroutines.internal.Segment)]) = (r16 I:??[OBJECT, ARRAY] A[D('curTail' kotlinx.coroutines.sync.SemaphoreSegment)]) \l}"];
Node_160 [shape=record,label="{160\:\ 0x001e|SYNTHETIC\l}"];
Node_156 [shape=record,label="{156\:\ 0x0111|SYNTHETIC\l}"];
Node_142 [shape=record,label="{142\:\ 0x0111|0x0111: MOVE  (r11 I:??[OBJECT, ARRAY] A[D('cur$iv$iv' kotlinx.coroutines.internal.Segment)]) = (r2 I:??[OBJECT, ARRAY] A[D('next$iv$iv' kotlinx.coroutines.internal.Segment)])  (LINE:330)\l0x0112: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('next$iv$iv' kotlinx.coroutines.internal.Segment)]) = (r16 I:??[OBJECT, ARRAY] A[D('curTail' kotlinx.coroutines.sync.SemaphoreSegment)])  (LINE:331)\l}"];
Node_161 [shape=record,label="{161\:\ 0x001e|SYNTHETIC\l}"];
Node_152 [shape=record,label="{152\:\ 0x0045|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x0045|0x0045: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:324)\l0x0046: INVOKE  (r17 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.internal.ConcurrentLinkedListKt.access$getCLOSED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:321)\l0x004a: INVOKE  (r17 I:java.lang.Object) = (r17 I:java.lang.Object) type: STATIC call: kotlinx.coroutines.internal.SegmentOrClosed.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<S extends kotlinx.coroutines.internal.Segment\<S\>\>:(java.lang.Object):java.lang.Object (m)]\l0x004e: MOVE  (r12 I:??[OBJECT, ARRAY] A[D('this_$iv$iv$iv' kotlinx.coroutines.internal.ConcurrentLinkedListNode)]) = (r17 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final boolean kotlinx.coroutines.sync.SemaphoreImpl.addAcquireToQueue((r24 'this' I:kotlinx.coroutines.sync.SemaphoreImpl A[IMMUTABLE_TYPE, THIS]), (r25 I:kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\> A[D('cont' kotlinx.coroutines.CancellableContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:115:0x0091 \-\> B:88:0x0018, CROSS_EDGE: B:127:0x00e2 \-\> B:86:?, CROSS_EDGE: B:137:0x0104 \-\> B:86:?, CROSS_EDGE: B:139:0x0106 \-\> B:86:?, CROSS_EDGE: B:133:0x00fb \-\> B:134:0x00fc, CROSS_EDGE: B:129:0x00e8 \-\> B:138:0x0105, CROSS_EDGE: B:106:0x007a \-\> B:113:0x008e, CROSS_EDGE: B:112:0x008d \-\> B:113:0x008e, CROSS_EDGE: B:110:0x0088 \-\> B:112:0x008d, BACK_EDGE: B:118:0x009a \-\> B:101:0x005f, BACK_EDGE: B:117:0x0098 \-\> B:101:0x005f, CROSS_EDGE: B:99:0x0055 \-\> B:120:0x009f, CROSS_EDGE: B:97:0x0045 \-\> B:98:0x0050, BACK_EDGE: B:142:0x0111 \-\> B:89:0x001e, BACK_EDGE: B:148:0x0139 \-\> B:89:0x001e, CROSS_EDGE: B:146:0x0134 \-\> B:148:0x0139, BACK_EDGE: B:149:0x013e \-\> B:89:0x001e, CROSS_EDGE: B:90:0x0024 \-\> B:95:0x0034\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x003f: r2 'curTail' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x0046\-0x0050: r2 '$i$a$\-nextOrIfClosed\-ConcurrentLinkedListKt$findSegmentInternal$next$1$iv$iv' I\l  0x001c\-0x0050: r9 '$this$findSegmentInternal$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x001d\-0x0050: r10 '$i$f$findSegmentInternal' I\l  0x001e\-0x0050: r11 'cur$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0037\-0x0050: r12 'this_$iv$iv$iv' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\l  0x0038\-0x0050: r13 '$i$f$nextOrIfClosed' I\l  0x003c\-0x0050: r14 'it$iv$iv$iv' Ljava\/lang\/Object;\l  0x003d\-0x0050: r15 '$i$a$\-let\-ConcurrentLinkedListNode$nextOrIfClosed$1$iv$iv$iv' I\l  0x005b\-0x008e: r9 'to$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0064\-0x008e: r10 'cur$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x005c\-0x008e: r12 '$this$moveForward$iv$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x005d\-0x008e: r13 '$i$f$moveForward' I\l  0x005e\-0x008e: r14 '$this$loop$iv$iv$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x005f\-0x008e: r15 '$i$f$loop' I\l  0x0066\-0x008e: r18 '$i$a$\-loop\-ConcurrentLinkedListKt$moveForward$1$iv$iv' I\l  0x0094\-0x009e: r10 'cur$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0094\-0x009e: r18 '$i$a$\-loop\-ConcurrentLinkedListKt$moveForward$1$iv$iv' I\l  0x0051\-0x009f: r2 's$iv' Ljava\/lang\/Object;\l  0x0015\-0x009f: r5 'id$iv' J\l  0x0017\-0x009f: r7 '$this$findSegmentAndMoveForward$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x0018\-0x009f: r8 '$i$f$findSegmentAndMoveForward' I\l  0x0094\-0x009f: r9 'to$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0094\-0x009f: r12 '$this$moveForward$iv$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x0094\-0x009f: r13 '$i$f$moveForward' I\l  0x0094\-0x009f: r14 '$this$loop$iv$iv$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x0094\-0x009f: r15 '$i$f$loop' I\l  0x00af\-0x00b7: r5 'expected$iv' Ljava\/lang\/Object;\l  0x00b0\-0x00b7: r7 'this_$iv' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x00b1\-0x00b7: r8 '$i$f$cas' I\l  0x00c0\-0x00c3: r5 '$this$asHandler$iv' Lkotlinx\/coroutines\/CancelHandlerBase;\l  0x00c1\-0x00c3: r7 '$i$f$getAsHandler' I\l  0x00cc\-0x00d8: r5 'expected$iv' Ljava\/lang\/Object;\l  0x00d0\-0x00d8: r7 'value$iv' Ljava\/lang\/Object;\l  0x00d1\-0x00d8: r8 'this_$iv' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x00d2\-0x00d8: r9 '$i$f$cas' I\l  0x00ec\-0x00f3: r8 'this_$iv' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x00ed\-0x00f3: r9 '$i$f$get' I\l  0x00eb\-0x00fc: r7 '$i$a$\-assert\-SemaphoreImpl$addAcquireToQueue$1' I\l  0x00a6\-0x0107: r2 'segment' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x00ae\-0x0107: r6 'i' I\l  0x0107\-0x010b: r14 'it$iv$iv$iv' Ljava\/lang\/Object;\l  0x0107\-0x010b: r15 '$i$a$\-let\-ConcurrentLinkedListNode$nextOrIfClosed$1$iv$iv$iv' I\l  0x0107\-0x010d: r12 'this_$iv$iv$iv' Lkotlinx\/coroutines\/internal\/ConcurrentLinkedListNode;\l  0x0107\-0x010d: r13 '$i$f$nextOrIfClosed' I\l  0x011d\-0x0125: r12 'p0' J\l  0x0120\-0x0125: r14 'p1' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x0121\-0x0125: r15 '$i$a$\-findSegmentAndMoveForward\-SemaphoreImpl$addAcquireToQueue$segment$1' I\l  0x010f\-0x013c: r2 'next$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0127\-0x013c: r12 'newTail$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x013e\-0x0141: r2 'next$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x000e\-0x0141: r3 'enqIdx' J\l  0x0107\-0x0141: r5 'id$iv' J\l  0x0107\-0x0141: r7 '$this$findSegmentAndMoveForward$iv' Lkotlinx\/coroutines\/sync\/SemaphoreImpl;\l  0x0107\-0x0141: r8 '$i$f$findSegmentAndMoveForward' I\l  0x0107\-0x0141: r9 '$this$findSegmentInternal$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x0107\-0x0141: r10 '$i$f$findSegmentInternal' I\l  0x0107\-0x0141: r11 'cur$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x013e\-0x0141: r12 'newTail$iv$iv' Lkotlinx\/coroutines\/internal\/Segment;\l  0x003f\-0x0141: r16 'curTail' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  \-1 \-0x0141: r25 'cont' Lkotlinx\/coroutines\/CancellableContinuation;\lSIGNATURE: (Lkotlinx\/coroutines\/CancellableContinuation\<\-Lkotlin\/Unit;\>;)Z\l}"];
MethodNode -> Node_85;Node_85 -> Node_87;
Node_87 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_95;
Node_91 -> Node_92;
Node_92 -> Node_95[style=dashed];
Node_92 -> Node_153;
Node_153 -> Node_94;
Node_94 -> Node_98;
Node_98 -> Node_99;
Node_99 -> Node_100[style=dashed];
Node_99 -> Node_151;
Node_100 -> Node_101;
Node_101 -> Node_102;
Node_102 -> Node_104;
Node_102 -> Node_162[style=dashed];
Node_104 -> Node_105;
Node_105 -> Node_107;
Node_105 -> Node_165[style=dashed];
Node_107 -> Node_108;
Node_108 -> Node_116;
Node_108 -> Node_163[style=dashed];
Node_116 -> Node_117;
Node_117 -> Node_164[style=dashed];
Node_117 -> Node_167;
Node_164 -> Node_118;
Node_118 -> Node_168;
Node_168 -> Node_166;
Node_166 -> Node_101;
Node_167 -> Node_166;
Node_163 -> Node_109;
Node_109 -> Node_110;
Node_110 -> Node_111[style=dashed];
Node_110 -> Node_112;
Node_111 -> Node_112;
Node_112 -> Node_113;
Node_113 -> Node_115;
Node_113 -> Node_150[style=dashed];
Node_115 -> Node_88;
Node_150 -> Node_120;
Node_120 -> Node_121;
Node_121 -> Node_122[style=dashed];
Node_121 -> Node_124;
Node_122 -> Node_123;
Node_123 -> Node_86;
Node_124 -> Node_125;
Node_125 -> Node_126[style=dashed];
Node_125 -> Node_128;
Node_126 -> Node_127;
Node_127 -> Node_86;
Node_128 -> Node_129;
Node_129 -> Node_130[style=dashed];
Node_129 -> Node_138;
Node_130 -> Node_131;
Node_131 -> Node_132[style=dashed];
Node_131 -> Node_133;
Node_132 -> Node_134;
Node_134 -> Node_136;
Node_134 -> Node_169[style=dashed];
Node_136 -> Node_137;
Node_137 -> Node_86;
Node_169 -> Node_86;
Node_133 -> Node_134;
Node_138 -> Node_86;
Node_165 -> Node_106;
Node_106 -> Node_113;
Node_162 -> Node_103;
Node_103 -> Node_113;
Node_151 -> Node_120;
Node_95 -> Node_96;
Node_96 -> Node_140;
Node_96 -> Node_152[style=dashed];
Node_140 -> Node_141;
Node_141 -> Node_154;
Node_141 -> Node_156[style=dashed];
Node_154 -> Node_143;
Node_143 -> Node_144;
Node_144 -> Node_155;
Node_144 -> Node_157[style=dashed];
Node_155 -> Node_149;
Node_149 -> Node_159;
Node_159 -> Node_158;
Node_158 -> Node_89;
Node_157 -> Node_145;
Node_145 -> Node_146;
Node_146 -> Node_147[style=dashed];
Node_146 -> Node_148;
Node_147 -> Node_148;
Node_148 -> Node_160;
Node_160 -> Node_158;
Node_156 -> Node_142;
Node_142 -> Node_161;
Node_161 -> Node_158;
Node_152 -> Node_97;
Node_97 -> Node_98;
}

