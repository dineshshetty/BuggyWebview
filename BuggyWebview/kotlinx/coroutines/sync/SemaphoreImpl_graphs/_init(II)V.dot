digraph "CFG forkotlinx.coroutines.sync.SemaphoreImpl.\<init\>(II)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|r5.permits = r6\lr5.deqIdx = 0\lr5.enqIdx = 0\lr2 = true\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|if (r6 \<= 0) goto L16\l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|r4 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|PHI: r4 \l  PHI: (r4v1 boolean) = (r4v0 boolean), (r4v3 boolean) binds: [B:23:0x0012, B:22:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == false) goto L14\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|if (r7 \< 0) goto L13\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|if (r7 \> r6) goto L13\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|PHI: r2 \l  PHI: (r2v3 boolean) = (r2v2 boolean), (r2v0 boolean) binds: [B:28:0x001a, B:26:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L11\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|kotlinx.coroutines.sync.SemaphoreSegment r2 = new kotlinx.coroutines.sync.SemaphoreSegment(0, null, 2)\lr5.head = r2\lr5.tail = r2\lr5._availablePermits = r6 \- r7\lr5.onCancellationRelease = new kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1(r5)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0037|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0038}"];
Node_33 [shape=record,label="{33\:\ 0x004c|throw new java.lang.IllegalArgumentException(kotlin.jvm.internal.Intrinsics.stringPlus(\"The number of acquired permits should be in 0..\", java.lang.Integer.valueOf(r6)).toString())\l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|r2 = false\l}"];
Node_34 [shape=record,label="{34\:\ 0x004d}"];
Node_35 [shape=record,label="{35\:\ 0x0061|throw new java.lang.IllegalArgumentException(kotlin.jvm.internal.Intrinsics.stringPlus(\"Semaphore should have at least 1 permit, but had \", java.lang.Integer.valueOf(r6)).toString())\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|r4 = false\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.sync.SemaphoreImpl.\<init\>((r5v0 'this' kotlinx.coroutines.sync.SemaphoreImpl A[IMMUTABLE_TYPE, THIS]), (r6v0 'permits' int A[D('permits' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'acquiredPermits' int A[D('acquiredPermits' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x004c \-\> B:19:?, CROSS_EDGE: B:26:0x0017 \-\> B:29:0x001b, CROSS_EDGE: B:25:0x0015 \-\> B:28:0x001a, CROSS_EDGE: B:35:0x0061 \-\> B:19:?, CROSS_EDGE: B:23:0x0012 \-\> B:24:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_34;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_28;
Node_26 -> Node_29[style=dashed];
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_28 -> Node_29;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_23 -> Node_24;
}

