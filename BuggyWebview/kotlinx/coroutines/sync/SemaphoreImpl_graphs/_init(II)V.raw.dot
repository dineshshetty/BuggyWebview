digraph "CFG forkotlinx.coroutines.sync.SemaphoreImpl.\<init\>(II)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r5 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:93)\l0x0003: IPUT  (r6 I:int A[D('permits' int)]), (r5 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl.permits int \l0x0005: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:130)\l0x0007: IPUT  (r0 I:long), (r5 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl.deqIdx long \l0x0009: IPUT  (r0 I:long), (r5 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl.enqIdx long  (LINE:132)\l0x000c: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:135)\l0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|0x000e: IF  (r6 I:??[int, byte, short, char] A[D('permits' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:23:0x0012 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|0x0010: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x004d \l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|0x0015: IF  (r7 I:??[int, byte, short, char] A[D('acquiredPermits' int)]) \< (0 ??[int, byte, short, char])  \-\> B:28:0x001a  (LINE:136)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|0x0017: IF  (r7 I:??[int, byte, short, char] A[D('acquiredPermits' int)]) \> (r6 I:??[int, byte, short, char] A[D('permits' int)])  \-\> B:28:0x001a \l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|0x001b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0038 \l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|0x001d: NEW_INSTANCE  (r2 I:kotlinx.coroutines.sync.SemaphoreSegment) =  kotlinx.coroutines.sync.SemaphoreSegment  (LINE:137)\l0x001f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0021: INVOKE  \l  (r2 I:kotlinx.coroutines.sync.SemaphoreSegment)\l  (r0 I:long)\l  (r3 I:kotlinx.coroutines.sync.SemaphoreSegment)\l  (r4 I:int)\l type: DIRECT call: kotlinx.coroutines.sync.SemaphoreSegment.\<init\>(long, kotlinx.coroutines.sync.SemaphoreSegment, int):void A[MD:(long, kotlinx.coroutines.sync.SemaphoreSegment, int):void (m)]\l0x0024: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0025: IPUT  \l  (r0 I:java.lang.Object A[D('s' kotlinx.coroutines.sync.SemaphoreSegment)])\l  (r5 I:kotlinx.coroutines.sync.SemaphoreImpl)\l kotlinx.coroutines.sync.SemaphoreImpl.head java.lang.Object  (LINE:138)\l0x0027: IPUT  \l  (r0 I:java.lang.Object A[D('s' kotlinx.coroutines.sync.SemaphoreSegment)])\l  (r5 I:kotlinx.coroutines.sync.SemaphoreImpl)\l kotlinx.coroutines.sync.SemaphoreImpl.tail java.lang.Object  (LINE:139)\l0x002a: ARITH  (r0 I:int) = (r6 I:int A[D('permits' int)]) \- (r7 I:int A[D('acquiredPermits' int)])  (LINE:149)\l0x002c: IPUT  (r0 I:int), (r5 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl._availablePermits int \l0x002e: NEW_INSTANCE  (r0 I:kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1) =  kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1  (LINE:152)\l0x0030: INVOKE  (r0 I:kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1), (r5 I:kotlinx.coroutines.sync.SemaphoreImpl) type: DIRECT call: kotlinx.coroutines.sync.SemaphoreImpl$onCancellationRelease$1.\<init\>(kotlinx.coroutines.sync.SemaphoreImpl):void A[MD:(kotlinx.coroutines.sync.SemaphoreImpl):void (m)]\l0x0033: CHECK_CAST (r0 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r0 I:??[OBJECT, ARRAY]) \l0x0035: IPUT  (r0 I:kotlin.jvm.functions.Function1\<java.lang.Throwable, kotlin.Unit\>), (r5 I:kotlinx.coroutines.sync.SemaphoreImpl) kotlinx.coroutines.sync.SemaphoreImpl.onCancellationRelease kotlin.jvm.functions.Function1 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0037|RETURN\l|0x0037: RETURN    (LINE:93)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0038|0x0038: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:305)\l0x0039: INVOKE  (r1 I:java.lang.Integer) = (r6 I:int A[D('permits' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:136)\l0x003d: CONST_STR  (r2 I:java.lang.String) =  \"The number of acquired permits should be in 0..\" \l0x003f: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SemaphoreImpl$2' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0043: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0045: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0049: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x004c|0x004c: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|0x001a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x004d|0x004d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:305)\l0x004e: INVOKE  (r1 I:java.lang.Integer) = (r6 I:int A[D('permits' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:135)\l0x0052: CONST_STR  (r2 I:java.lang.String) =  \"Semaphore should have at least 1 permit, but had \" \l0x0054: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SemaphoreImpl$1' int)]) = (r2 I:java.lang.String), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0058: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005a: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005e: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0061|0x0061: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.sync.SemaphoreImpl.\<init\>((r5 'this' I:kotlinx.coroutines.sync.SemaphoreImpl A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('permits' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('acquiredPermits' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x004c \-\> B:19:?, CROSS_EDGE: B:26:0x0017 \-\> B:29:0x001b, CROSS_EDGE: B:25:0x0015 \-\> B:28:0x001a, CROSS_EDGE: B:35:0x0061 \-\> B:19:?, CROSS_EDGE: B:23:0x0012 \-\> B:24:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0025\-0x0029: r0 's' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x0039\-0x0043: r0 '$i$a$\-require\-SemaphoreImpl$2' I\l  0x004e\-0x0058: r0 '$i$a$\-require\-SemaphoreImpl$1' I\l  \-1 \-0x0061: r6 'permits' I\l  \-1 \-0x0061: r7 'acquiredPermits' I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_34;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_28;
Node_26 -> Node_29[style=dashed];
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_28 -> Node_29;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_23 -> Node_24;
}

