digraph "CFG forkotlinx.coroutines.sync.MutexImpl.UnlockOp.complete(Lkotlinx\/coroutines\/sync\/MutexImpl;Ljava\/lang\/Object;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('failure' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0007  (LINE:419)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: INVOKE  (r0 I:kotlinx.coroutines.sync.Empty) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getEMPTY_UNLOCKED$p():kotlinx.coroutines.sync.Empty A[MD:():kotlinx.coroutines.sync.Empty (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|0x0009: SGET  (r1 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.sync.MutexImpl._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:420)\l0x000b: INVOKE  \l  (r1 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r3 I:java.lang.Object A[D('affected' kotlinx.coroutines.sync.MutexImpl)])\l  (r2 I:java.lang.Object)\l  (r0 I:java.lang.Object A[D('update' java.lang.Object)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|0x000e: RETURN    (LINE:421)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: IGET  (r0 I:kotlinx.coroutines.sync.MutexImpl$LockedQueue) = (r2 I:kotlinx.coroutines.sync.MutexImpl$UnlockOp) kotlinx.coroutines.sync.MutexImpl.UnlockOp.queue kotlinx.coroutines.sync.MutexImpl$LockedQueue \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.sync.MutexImpl.UnlockOp.complete((r2 'this' I:kotlinx.coroutines.sync.MutexImpl$UnlockOp A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlinx.coroutines.sync.MutexImpl A[D('affected' kotlinx.coroutines.sync.MutexImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[D('failure' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0007 \-\> B:12:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x000e: r0 'update' Ljava\/lang\/Object;\l  \-1 \-0x000e: r3 'affected' Lkotlinx\/coroutines\/sync\/MutexImpl;\l  \-1 \-0x000e: r4 'failure' Ljava\/lang\/Object;\lREPLACED_BY: kotlinx.coroutines.sync.MutexImpl.UnlockOp.complete(kotlinx.coroutines.sync.MutexImpl, java.lang.Object):void\lBRIDGED_BY: kotlinx.coroutines.sync.MutexImpl.UnlockOp.complete(kotlinx.coroutines.sync.MutexImpl, java.lang.Object):void\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicOp.complete(T, java.lang.Object):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
}

