digraph "CFG forkotlinx.coroutines.sync.MutexImpl.UnlockOp.prepare(Lkotlinx\/coroutines\/sync\/MutexImpl;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.sync.MutexImpl$LockedQueue) = (r1 I:kotlinx.coroutines.sync.MutexImpl$UnlockOp) kotlinx.coroutines.sync.MutexImpl.UnlockOp.queue kotlinx.coroutines.sync.MutexImpl$LockedQueue  (LINE:416)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:kotlinx.coroutines.sync.MutexImpl$LockedQueue) type: VIRTUAL call: kotlinx.coroutines.sync.MutexImpl.LockedQueue.isEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|SYNTHETIC\lRETURN\l|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: RETURN  (r0 I:java.lang.Object) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|0x000a: INVOKE  (r0 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getUNLOCK_FAIL$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|RETURN\lORIG_RETURN\l|0x000e: RETURN  (r0 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.sync.MutexImpl.UnlockOp.prepare((r1 'this' I:kotlinx.coroutines.sync.MutexImpl$UnlockOp A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlinx.coroutines.sync.MutexImpl A[D('affected' kotlinx.coroutines.sync.MutexImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000a \-\> B:14:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r2 'affected' Lkotlinx\/coroutines\/sync\/MutexImpl;\lREPLACED_BY: kotlinx.coroutines.sync.MutexImpl.UnlockOp.prepare(kotlinx.coroutines.sync.MutexImpl):java.lang.Object\lBRIDGED_BY: kotlinx.coroutines.sync.MutexImpl.UnlockOp.prepare(kotlinx.coroutines.sync.MutexImpl):java.lang.Object\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicOp.prepare(T):java.lang.Object]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

