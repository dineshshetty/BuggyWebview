digraph "CFG forkotlinx.coroutines.sync.SemaphoreSegment.cancel(I)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.SemaphoreKt.access$getCANCELLED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)] (LINE:285)\l0x0004: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: IGET  (r3 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r1 I:kotlinx.coroutines.sync.SemaphoreSegment A[D('this_$iv' kotlinx.coroutines.sync.SemaphoreSegment)]) kotlinx.coroutines.sync.SemaphoreSegment.acquirers java.util.concurrent.atomic.AtomicReferenceArray  (LINE:305)\l0x0008: INVOKE  \l  (r3 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r5 I:int A[D('index' int)])\l  (r0 I:java.lang.Object A[D('value$iv' java.lang.Object)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.set(int, java.lang.Object):void A[MD:(int, E):void (c)]\l0x000c: INVOKE  (r4 I:kotlinx.coroutines.sync.SemaphoreSegment) type: VIRTUAL call: kotlinx.coroutines.sync.SemaphoreSegment.onSlotCleaned():void A[MD:():void (m)] (LINE:287)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN    (LINE:288)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.sync.SemaphoreSegment.cancel((r4 'this' I:kotlinx.coroutines.sync.SemaphoreSegment A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000c: r0 'value$iv' Ljava\/lang\/Object;\l  0x0005\-0x000c: r1 'this_$iv' Lkotlinx\/coroutines\/sync\/SemaphoreSegment;\l  0x0006\-0x000c: r2 '$i$f$set' I\l  \-1 \-0x000f: r5 'index' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

