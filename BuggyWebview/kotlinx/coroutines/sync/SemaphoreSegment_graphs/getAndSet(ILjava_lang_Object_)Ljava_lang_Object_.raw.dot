digraph "CFG forkotlinx.coroutines.sync.SemaphoreSegment.getAndSet(ILjava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: IGET  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray) = (r2 I:kotlinx.coroutines.sync.SemaphoreSegment) kotlinx.coroutines.sync.SemaphoreSegment.acquirers java.util.concurrent.atomic.AtomicReferenceArray  (LINE:279)\l0x0003: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:java.util.concurrent.atomic.AtomicReferenceArray)\l  (r3 I:int A[D('index' int)])\l  (r4 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(int, java.lang.Object):java.lang.Object A[MD:(int, E):E (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:java.lang.Object) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlinx.coroutines.sync.SemaphoreSegment.getAndSet((r2 'this' I:kotlinx.coroutines.sync.SemaphoreSegment A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0007: r0 '$i$f$getAndSet' I\l  \-1 \-0x0007: r3 'index' I\l  \-1 \-0x0007: r4 'value' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

