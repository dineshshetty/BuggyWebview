digraph "CFG forkotlinx.coroutines.sync.MutexImpl.tryLock(Ljava\/lang\/Object;)Z" {
Node_39 [shape=record,label="{39\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY])  (LINE:163)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0002|LOOP_START\lLOOP:0: B:42:0x0002\-\>B:75:0x0002\l|0x0003: IGET  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.sync.MutexImpl A[D('$this$loop$iv' kotlinx.coroutines.sync.MutexImpl)]) kotlinx.coroutines.sync.MutexImpl._state java.lang.Object  (LINE:428)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.sync.Empty  (LINE:165)\l0x0009: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000a: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x000b|0x000b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x002f \l}"];
Node_70 [shape=record,label="{70\:\ 0x002f|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x002f|0x002f: INSTANCE_OF  (r4 I:boolean A[D('update' kotlinx.coroutines.sync.Empty)]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.sync.MutexImpl$LockedQueue  (LINE:172)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0031|0x0031: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0050 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0050|0x0050: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.internal.OpDescriptor  (LINE:176)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0052|0x0052: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x005c \l}"];
Node_65 [shape=record,label="{65\:\ 0x0054|0x0054: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) \l0x0055: CHECK_CAST (r4 I:kotlinx.coroutines.internal.OpDescriptor) = (kotlinx.coroutines.internal.OpDescriptor) (r4 I:??[OBJECT, ARRAY]) \l0x0057: INVOKE  (r4 I:kotlinx.coroutines.internal.OpDescriptor), (r8 I:java.lang.Object) type: VIRTUAL call: kotlinx.coroutines.internal.OpDescriptor.perform(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_76 [shape=record,label="{76\:\ 0x0002|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x0002|LOOP_END\lSYNTHETIC\lLOOP:0: B:42:0x0002\-\>B:75:0x0002\l}"];
Node_73 [shape=record,label="{73\:\ 0x005c|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x005c|0x005c: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:176)\l0x005e: CONST_STR  (r5 I:java.lang.String) =  \"Illegal state \"  (LINE:177)\l0x0060: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r2 I:java.lang.Object A[D('state' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0064: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0068: INVOKE  (r4 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_68 [shape=record,label="{68\:\ 0x006b|0x006b: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_40 [shape=record,label="{40\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_72 [shape=record,label="{72\:\ 0x0033|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0033|0x0033: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:173)\l0x0034: CHECK_CAST (r4 I:kotlinx.coroutines.sync.MutexImpl$LockedQueue) = (kotlinx.coroutines.sync.MutexImpl$LockedQueue) (r4 I:??[OBJECT, ARRAY]) \l0x0036: IGET  (r4 I:java.lang.Object) = (r4 I:kotlinx.coroutines.sync.MutexImpl$LockedQueue) kotlinx.coroutines.sync.MutexImpl.LockedQueue.owner java.lang.Object \l}"];
Node_56 [shape=record,label="{56\:\ 0x0038|0x0038: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('owner' java.lang.Object)])  \-\> B:58:0x003b \l}"];
Node_58 [shape=record,label="{58\:\ 0x003b|0x003b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x003c|0x003c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x003f \l}"];
Node_60 [shape=record,label="{60\:\ 0x003e|RETURN\l|0x003e: RETURN  (r6 I:boolean)  (LINE:174)\l}"];
Node_61 [shape=record,label="{61\:\ 0x003f|0x003f: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:429)\l0x0040: CONST_STR  (r5 I:java.lang.String) =  \"Already locked by \"  (LINE:173)\l0x0042: INVOKE  (r4 I:java.lang.String A[D('$i$a$\-check\-MutexImpl$tryLock$1$1' int)]) = (r5 I:java.lang.String), (r9 I:java.lang.Object A[D('owner' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0046: NEW_INSTANCE  (r5 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x0048: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004c: INVOKE  (r5 I:java.lang.IllegalStateException), (r4 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x004f|0x004f: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_74 [shape=record,label="{74\:\ 0x000d|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x000d|0x000d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)])  (LINE:166)\l0x000e: CHECK_CAST (r4 I:kotlinx.coroutines.sync.Empty) = (kotlinx.coroutines.sync.Empty) (r4 I:??[OBJECT, ARRAY]) \l0x0010: IGET  (r4 I:java.lang.Object) = (r4 I:kotlinx.coroutines.sync.Empty) kotlinx.coroutines.sync.Empty.locked java.lang.Object \l0x0012: INVOKE  (r7 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getUNLOCKED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0019 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0019|0x0019: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('owner' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0020  (LINE:167)\l}"];
Node_48 [shape=record,label="{48\:\ 0x001b|0x001b: INVOKE  (r4 I:kotlinx.coroutines.sync.Empty) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getEMPTY_LOCKED$p():kotlinx.coroutines.sync.Empty A[MD:():kotlinx.coroutines.sync.Empty (m)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x0026|0x0026: SGET  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.sync.MutexImpl._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:170)\l0x0028: INVOKE  (r6 I:boolean) = \l  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r8 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('state' java.lang.Object)])\l  (r4 I:java.lang.Object A[D('update' kotlinx.coroutines.sync.Empty)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x002c|0x002c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x0002 \l}"];
Node_71 [shape=record,label="{71\:\ 0x002e|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x002e|RETURN\l|0x002e: RETURN  (r5 I:boolean) \l}"];
Node_77 [shape=record,label="{77\:\ 0x0002|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0020|0x0020: NEW_INSTANCE  (r4 I:kotlinx.coroutines.sync.Empty) =  kotlinx.coroutines.sync.Empty \l0x0023: INVOKE  (r4 I:kotlinx.coroutines.sync.Empty), (r9 I:java.lang.Object A[D('owner' java.lang.Object)]) type: DIRECT call: kotlinx.coroutines.sync.Empty.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:167)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0018|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0018|RETURN\l|0x0018: RETURN  (r6 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.sync.MutexImpl.tryLock((r8 'this' I:kotlinx.coroutines.sync.MutexImpl A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.Object A[D('owner' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:52:0x002e \-\> B:40:?, BACK_EDGE: B:51:0x002c \-\> B:42:0x0002, CROSS_EDGE: B:49:0x0020 \-\> B:50:0x0026, CROSS_EDGE: B:60:0x003e \-\> B:40:?, CROSS_EDGE: B:62:0x004f \-\> B:40:?, CROSS_EDGE: B:56:0x0038 \-\> B:59:0x003c, BACK_EDGE: B:65:0x0054 \-\> B:42:0x0002, CROSS_EDGE: B:68:0x006b \-\> B:40:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x002f: r4 'update' Lkotlinx\/coroutines\/sync\/Empty;\l  0x0040\-0x0046: r4 '$i$a$\-check\-MutexImpl$tryLock$1$1' I\l  0x0005\-0x005b: r2 'state' Ljava\/lang\/Object;\l  0x0006\-0x005b: r3 '$i$a$\-loop\-MutexImpl$tryLock$1' I\l  0x0001\-0x006b: r0 '$this$loop$iv' Lkotlinx\/coroutines\/sync\/MutexImpl;\l  0x0002\-0x006b: r1 '$i$f$loop' I\l  0x005c\-0x006b: r2 'state' Ljava\/lang\/Object;\l  0x005c\-0x006b: r3 '$i$a$\-loop\-MutexImpl$tryLock$1' I\l  \-1 \-0x006b: r9 'owner' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.sync.Mutex.tryLock(java.lang.Object):boolean]\l}"];
MethodNode -> Node_39;Node_39 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_70;
Node_43 -> Node_74[style=dashed];
Node_70 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_63;
Node_54 -> Node_72[style=dashed];
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_73;
Node_65 -> Node_76;
Node_76 -> Node_75;
Node_75 -> Node_42;
Node_73 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_40;
Node_72 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_58;
Node_56 -> Node_59[style=dashed];
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_40;
Node_61 -> Node_62;
Node_62 -> Node_40;
Node_74 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_47;
Node_45 -> Node_69[style=dashed];
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_49;
Node_48 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_71[style=dashed];
Node_51 -> Node_77;
Node_71 -> Node_52;
Node_52 -> Node_40;
Node_77 -> Node_75;
Node_49 -> Node_50;
Node_69 -> Node_46;
Node_46 -> Node_40;
}

