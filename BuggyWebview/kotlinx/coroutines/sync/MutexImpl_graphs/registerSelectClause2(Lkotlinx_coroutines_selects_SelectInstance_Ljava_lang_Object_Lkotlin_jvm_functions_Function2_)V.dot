digraph "CFG forkotlinx.coroutines.sync.MutexImpl.registerSelectClause2(Lkotlinx\/coroutines\/selects\/SelectInstance;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2;)V" {
Node_66 [shape=record,label="{66\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_68 [shape=record,label="{68\:\ 0x0000|LOOP_START\lLOOP:0: B:68:0x0000\-\>B:126:0x0000\l}"];
Node_69 [shape=record,label="{69\:\ 0x0005|if (r5.isSelected() == false) goto L3\l}"];
Node_71 [shape=record,label="{71\:\ 0x0008|java.lang.Object r0 = r4._state\l}"];
Node_72 [shape=record,label="{72\:\ 0x000c|if ((r0 instanceof kotlinx.coroutines.sync.Empty) == false) goto L5\l}"];
Node_113 [shape=record,label="{113\:\ 0x0062|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x0062}"];
Node_92 [shape=record,label="{92\:\ 0x0064|if ((r0 instanceof kotlinx.coroutines.sync.MutexImpl.LockedQueue) == false) goto L8\l}"];
Node_120 [shape=record,label="{120\:\ 0x00a2|SYNTHETIC\l}"];
Node_106 [shape=record,label="{106\:\ 0x00a2}"];
Node_107 [shape=record,label="{107\:\ 0x00a4|if ((r0 instanceof kotlinx.coroutines.internal.OpDescriptor) == false) goto L14\l}"];
Node_108 [shape=record,label="{108\:\ 0x00a6|((kotlinx.coroutines.internal.OpDescriptor) r0).perform(r4)\l}"];
Node_127 [shape=record,label="{127\:\ 0x0000|SYNTHETIC\l}"];
Node_126 [shape=record,label="{126\:\ 0x0000|LOOP_END\lSYNTHETIC\lLOOP:0: B:68:0x0000\-\>B:126:0x0000\l}"];
Node_124 [shape=record,label="{124\:\ 0x00ae|SYNTHETIC\l}"];
Node_109 [shape=record,label="{109\:\ 0x00ae}"];
Node_110 [shape=record,label="{110\:\ 0x00bd|throw new java.lang.IllegalStateException(kotlin.jvm.internal.Intrinsics.stringPlus(\"Illegal state \", r0).toString())\l}"];
Node_67 [shape=record,label="{67\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_125 [shape=record,label="{125\:\ 0x0066|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x0066}"];
Node_94 [shape=record,label="{94\:\ 0x006b|if (((kotlinx.coroutines.sync.MutexImpl.LockedQueue) r0).owner == r6) goto L35\l}"];
Node_95 [shape=record,label="{95\:\ 0x006d|r1 = true\l}"];
Node_97 [shape=record,label="{97\:\ 0x0070|PHI: r1 \l  PHI: (r1v13 boolean) = (r1v12 boolean), (r1v18 boolean) binds: [B:96:0x006f, B:95:0x006d] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L32\l}"];
Node_98 [shape=record,label="{98\:\ 0x0072|kotlinx.coroutines.sync.MutexImpl$LockSelect r1 = new kotlinx.coroutines.sync.MutexImpl.LockSelect(r6, r5, r7)\l((kotlinx.coroutines.sync.MutexImpl.LockedQueue) r0).addLast(r1)\l}"];
Node_99 [shape=record,label="{99\:\ 0x0082|if (r4._state == r0) goto L31\l}"];
Node_100 [shape=record,label="{100\:\ 0x0084}"];
Node_101 [shape=record,label="{101\:\ 0x0088|if (r1.take() != false) goto L30\l}"];
Node_121 [shape=record,label="{121\:\ 0x008a|SYNTHETIC\l}"];
Node_102 [shape=record,label="{102\:\ 0x008a|r5.disposeOnSelect(r1)\l}"];
Node_103 [shape=record,label="{103\:\ 0x0090|RETURN\l|return\l}"];
Node_128 [shape=record,label="{128\:\ 0x0000|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x008a|SYNTHETIC\l}"];
Node_123 [shape=record,label="{123\:\ 0x0091|SYNTHETIC\l}"];
Node_104 [shape=record,label="{104\:\ 0x0091}"];
Node_105 [shape=record,label="{105\:\ 0x00a1|throw new java.lang.IllegalStateException(kotlin.jvm.internal.Intrinsics.stringPlus(\"Already locked by \", r6).toString())\l}"];
Node_96 [shape=record,label="{96\:\ 0x006f|r1 = false\l}"];
Node_122 [shape=record,label="{122\:\ 0x000e|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x000e|java.lang.Object r1 = ((kotlinx.coroutines.sync.Empty) r0).locked\lkotlinx.coroutines.internal.Symbol r2 = kotlinx.coroutines.sync.MutexKt.UNLOCKED\l}"];
Node_74 [shape=record,label="{74\:\ 0x0017|if (r1 == r2) goto L39\l}"];
Node_112 [shape=record,label="{112\:\ 0x0029|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0029|java.lang.Object r1 = r5.performAtomicTrySelect(new kotlinx.coroutines.sync.MutexImpl.TryLockDesc(r4, r6))\l}"];
Node_77 [shape=record,label="{77\:\ 0x0035|if (r1 != null) goto L42\l}"];
Node_80 [shape=record,label="{80\:\ 0x003f}"];
Node_81 [shape=record,label="{81\:\ 0x0043|if (r1 != kotlinx.coroutines.selects.SelectKt.getALREADY_SELECTED()) goto L44\l}"];
Node_83 [shape=record,label="{83\:\ 0x0046|kotlinx.coroutines.internal.Symbol r2 = kotlinx.coroutines.sync.MutexKt.LOCK_FAIL\l}"];
Node_84 [shape=record,label="{84\:\ 0x004a|if (r1 != r2) goto L46\l}"];
Node_115 [shape=record,label="{115\:\ 0x004d|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x004d}"];
Node_87 [shape=record,label="{87\:\ 0x004f|if (r1 != kotlinx.coroutines.internal.AtomicKt.RETRY_ATOMIC) goto L49\l}"];
Node_118 [shape=record,label="{118\:\ 0x0052|SYNTHETIC\l}"];
Node_89 [shape=record,label="{89\:\ 0x0052}"];
Node_90 [shape=record,label="{90\:\ 0x0061|throw new java.lang.IllegalStateException(kotlin.jvm.internal.Intrinsics.stringPlus(\"performAtomicTrySelect(TryLockDesc) returned \", r1).toString())\l}"];
Node_130 [shape=record,label="{130\:\ 0x0000|SYNTHETIC\l}"];
Node_129 [shape=record,label="{129\:\ 0x0000|SYNTHETIC\l}"];
Node_114 [shape=record,label="{114\:\ 0x0045|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0045|RETURN\l|return\l}"];
Node_116 [shape=record,label="{116\:\ 0x0037|SYNTHETIC\l}"];
Node_78 [shape=record,label="{78\:\ 0x0037|kotlinx.coroutines.intrinsics.Undispatched.startCoroutineUnintercepted(r7, r4, r5.getCompletion())\l}"];
Node_79 [shape=record,label="{79\:\ 0x003e|RETURN\l|return\l}"];
Node_117 [shape=record,label="{117\:\ 0x0019|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x0019|androidx.concurrent.futures.C0125xc40028dd.m112m(kotlinx.coroutines.sync.MutexImpl._state$FU, r4, r0, new kotlinx.coroutines.sync.MutexImpl.LockedQueue(((kotlinx.coroutines.sync.Empty) r0).locked))\l}"];
Node_131 [shape=record,label="{131\:\ 0x0000|SYNTHETIC\l}"];
Node_111 [shape=record,label="{111\:\ 0x0007|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x0007|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.sync.MutexImpl.registerSelectClause2((r4v0 'this' kotlinx.coroutines.sync.MutexImpl A[IMMUTABLE_TYPE, THIS]), (r5v0 kotlinx.coroutines.selects.SelectInstance\<? super R\> A[D('select' kotlinx.coroutines.selects.SelectInstance), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'owner' java.lang.Object A[D('owner' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.jvm.functions.Function2\<? super kotlinx.coroutines.sync.Mutex, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\> A[D('block' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:75:0x0019 \-\> B:68:0x0000, CROSS_EDGE: B:79:0x003e \-\> B:67:?, CROSS_EDGE: B:82:0x0045 \-\> B:67:?, CROSS_EDGE: B:90:0x0061 \-\> B:67:?, BACK_EDGE: B:87:0x004f \-\> B:68:0x0000, BACK_EDGE: B:84:0x004a \-\> B:68:0x0000, BACK_EDGE: B:101:0x0088 \-\> B:68:0x0000, CROSS_EDGE: B:103:0x0090 \-\> B:67:?, CROSS_EDGE: B:99:0x0082 \-\> B:102:0x008a, CROSS_EDGE: B:105:0x00a1 \-\> B:67:?, CROSS_EDGE: B:96:0x006f \-\> B:97:0x0070, BACK_EDGE: B:108:0x00a6 \-\> B:68:0x0000, CROSS_EDGE: B:110:0x00bd \-\> B:67:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Lkotlinx\/coroutines\/selects\/SelectInstance\<\-TR;\>;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2\<\-Lkotlinx\/coroutines\/sync\/Mutex;\-Lkotlin\/coroutines\/Continuation\<\-TR;\>;+Ljava\/lang\/Object;\>;)V\lMETHOD_OVERRIDE: [kotlinx.coroutines.selects.SelectClause2.registerSelectClause2(kotlinx.coroutines.selects.SelectInstance\<? super R\>, P, kotlin.jvm.functions.Function2\<? super Q, ? super kotlin.coroutines.Continuation\<? super R\>, ? extends java.lang.Object\>):void]\l}"];
MethodNode -> Node_66;Node_66 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_71;
Node_69 -> Node_111[style=dashed];
Node_71 -> Node_72;
Node_72 -> Node_113;
Node_72 -> Node_122[style=dashed];
Node_113 -> Node_91;
Node_91 -> Node_92;
Node_92 -> Node_120;
Node_92 -> Node_125[style=dashed];
Node_120 -> Node_106;
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_124;
Node_108 -> Node_127;
Node_127 -> Node_126;
Node_126 -> Node_68;
Node_124 -> Node_109;
Node_109 -> Node_110;
Node_110 -> Node_67;
Node_125 -> Node_93;
Node_93 -> Node_94;
Node_94 -> Node_95[style=dashed];
Node_94 -> Node_96;
Node_95 -> Node_97;
Node_97 -> Node_98[style=dashed];
Node_97 -> Node_123;
Node_98 -> Node_99;
Node_99 -> Node_100[style=dashed];
Node_99 -> Node_119;
Node_100 -> Node_101;
Node_101 -> Node_121[style=dashed];
Node_101 -> Node_128;
Node_121 -> Node_102;
Node_102 -> Node_103;
Node_103 -> Node_67;
Node_128 -> Node_126;
Node_119 -> Node_102;
Node_123 -> Node_104;
Node_104 -> Node_105;
Node_105 -> Node_67;
Node_96 -> Node_97;
Node_122 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_112;
Node_74 -> Node_117[style=dashed];
Node_112 -> Node_76;
Node_76 -> Node_77;
Node_77 -> Node_80;
Node_77 -> Node_116[style=dashed];
Node_80 -> Node_81;
Node_81 -> Node_83;
Node_81 -> Node_114[style=dashed];
Node_83 -> Node_84;
Node_84 -> Node_115;
Node_84 -> Node_129[style=dashed];
Node_115 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_118;
Node_87 -> Node_130[style=dashed];
Node_118 -> Node_89;
Node_89 -> Node_90;
Node_90 -> Node_67;
Node_130 -> Node_126;
Node_129 -> Node_126;
Node_114 -> Node_82;
Node_82 -> Node_67;
Node_116 -> Node_78;
Node_78 -> Node_79;
Node_79 -> Node_67;
Node_117 -> Node_75;
Node_75 -> Node_131;
Node_131 -> Node_126;
Node_111 -> Node_70;
Node_70 -> Node_67;
}

