digraph "CFG forkotlinx.coroutines.sync.MutexImpl.isLocked()Z" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:146)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|LOOP_START\lLOOP:0: B:25:0x0002\-\>B:37:0x0023\l|0x0003: IGET  (r2 I:java.lang.Object) = (r0 I:kotlinx.coroutines.sync.MutexImpl A[D('$this$loop$iv' kotlinx.coroutines.sync.MutexImpl)]) kotlinx.coroutines.sync.MutexImpl._state java.lang.Object  (LINE:426)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.sync.Empty  (LINE:148)\l0x0009: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|0x000a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x001a \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.sync.MutexImpl$LockedQueue  (LINE:149)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001f \l}"];
Node_35 [shape=record,label="{35\:\ 0x001f|0x001f: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) kotlinx.coroutines.internal.OpDescriptor  (LINE:150)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0021|0x0021: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x002b \l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|LOOP_END\lLOOP:0: B:25:0x0002\-\>B:37:0x0023\l|0x0023: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) \l0x0024: CHECK_CAST (r4 I:kotlinx.coroutines.internal.OpDescriptor) = (kotlinx.coroutines.internal.OpDescriptor) (r4 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r4 I:kotlinx.coroutines.internal.OpDescriptor), (r7 I:java.lang.Object) type: VIRTUAL call: kotlinx.coroutines.internal.OpDescriptor.perform(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x002b|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x002b|0x002b: NEW_INSTANCE  (r4 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:150)\l0x002d: CONST_STR  (r5 I:java.lang.String) =  \"Illegal state \"  (LINE:151)\l0x002f: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.String), (r2 I:java.lang.Object A[D('state' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0033: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0037: INVOKE  (r4 I:java.lang.IllegalStateException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x003a|0x003a: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x001e|RETURN\l|0x001e: RETURN  (r5 I:boolean) \l}"];
Node_41 [shape=record,label="{41\:\ 0x000c|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|0x000c: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('state' java.lang.Object)]) \l0x000d: CHECK_CAST (r4 I:kotlinx.coroutines.sync.Empty) = (kotlinx.coroutines.sync.Empty) (r4 I:??[OBJECT, ARRAY]) \l0x000f: IGET  (r4 I:java.lang.Object) = (r4 I:kotlinx.coroutines.sync.Empty) kotlinx.coroutines.sync.Empty.locked java.lang.Object \l0x0011: INVOKE  (r6 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getUNLOCKED$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|0x0015: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0018 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0018|RETURN\lORIG_RETURN\l|0x0018: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: RETURN  (r5 I:boolean) \l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x0019: RETURN  (r5 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.sync.MutexImpl.isLocked((r7 'this' I:kotlinx.coroutines.sync.MutexImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0015 \-\> B:31:0x0019, CROSS_EDGE: B:34:0x001e \-\> B:23:?, BACK_EDGE: B:37:0x0023 \-\> B:25:0x0002, CROSS_EDGE: B:39:0x003a \-\> B:23:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x002a: r2 'state' Ljava\/lang\/Object;\l  0x0006\-0x002a: r3 '$i$a$\-loop\-MutexImpl$isLocked$1' I\l  0x0001\-0x003a: r0 '$this$loop$iv' Lkotlinx\/coroutines\/sync\/MutexImpl;\l  0x0002\-0x003a: r1 '$i$f$loop' I\l  0x002b\-0x003a: r2 'state' Ljava\/lang\/Object;\l  0x002b\-0x003a: r3 '$i$a$\-loop\-MutexImpl$isLocked$1' I\lMETHOD_OVERRIDE: [kotlinx.coroutines.sync.Mutex.isLocked():boolean]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_32;
Node_26 -> Node_41[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_42[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_25;
Node_40 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_42 -> Node_34;
Node_34 -> Node_23;
Node_41 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_43[style=dashed];
Node_30 -> Node_23;
Node_43 -> Node_23;
}

