digraph "CFG forkotlinx.coroutines.sync.MutexImpl.TryLockDesc.complete(Lkotlinx\/coroutines\/internal\/AtomicOp;Ljava\/lang\/Object;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('failure' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0007  (LINE:305)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: INVOKE  (r0 I:kotlinx.coroutines.sync.Empty) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getEMPTY_UNLOCKED$p():kotlinx.coroutines.sync.Empty A[MD:():kotlinx.coroutines.sync.Empty (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|0x0017: IGET  (r1 I:kotlinx.coroutines.sync.MutexImpl) = (r3 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc) kotlinx.coroutines.sync.MutexImpl.TryLockDesc.mutex kotlinx.coroutines.sync.MutexImpl  (LINE:308)\l0x0019: SGET  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.sync.MutexImpl._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x001b: INVOKE  \l  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r1 I:java.lang.Object)\l  (r4 I:java.lang.Object A[D('op' kotlinx.coroutines.internal.AtomicOp)])\l  (r0 I:java.lang.Object A[D('update' kotlinx.coroutines.sync.Empty)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|RETURN\l|0x001e: RETURN    (LINE:309)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: IGET  (r0 I:java.lang.Object) = (r3 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc) kotlinx.coroutines.sync.MutexImpl.TryLockDesc.owner java.lang.Object  (LINE:306)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0010 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|0x000b: INVOKE  (r0 I:kotlinx.coroutines.sync.Empty) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getEMPTY_LOCKED$p():kotlinx.coroutines.sync.Empty A[MD:():kotlinx.coroutines.sync.Empty (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: NEW_INSTANCE  (r1 I:kotlinx.coroutines.sync.Empty) =  kotlinx.coroutines.sync.Empty \l0x0012: INVOKE  (r1 I:kotlinx.coroutines.sync.Empty), (r0 I:java.lang.Object) type: DIRECT call: kotlinx.coroutines.sync.Empty.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0015: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.sync.MutexImpl.TryLockDesc.complete((r3 'this' I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlinx.coroutines.internal.AtomicOp\<?\> A[D('op' kotlinx.coroutines.internal.AtomicOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[D('failure' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x000b \-\> B:18:0x0016, CROSS_EDGE: B:17:0x0010 \-\> B:18:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x001e: r0 'update' Lkotlinx\/coroutines\/sync\/Empty;\l  \-1 \-0x001e: r4 'op' Lkotlinx\/coroutines\/internal\/AtomicOp;\l  \-1 \-0x001e: r5 'failure' Ljava\/lang\/Object;\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/AtomicOp\<*\>;Ljava\/lang\/Object;)V\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicDesc.complete(kotlinx.coroutines.internal.AtomicOp\<?\>, java.lang.Object):void]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_18;
}

