digraph "CFG forkotlinx.coroutines.sync.MutexImpl.TryLockDesc.prepare(Lkotlinx\/coroutines\/internal\/AtomicOp;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp) =  kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp  (LINE:299)\l0x0002: INVOKE  \l  (r0 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp)\l  (r4 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc)\l  (r5 I:kotlinx.coroutines.internal.AtomicOp A[D('op' kotlinx.coroutines.internal.AtomicOp)])\l type: DIRECT call: kotlinx.coroutines.sync.MutexImpl.TryLockDesc.PrepareOp.\<init\>(kotlinx.coroutines.sync.MutexImpl$TryLockDesc, kotlinx.coroutines.internal.AtomicOp):void A[MD:(kotlinx.coroutines.sync.MutexImpl$TryLockDesc, kotlinx.coroutines.internal.AtomicOp\<?\>):void (m)]\l0x0005: IGET  (r1 I:kotlinx.coroutines.sync.MutexImpl) = (r4 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc) kotlinx.coroutines.sync.MutexImpl.TryLockDesc.mutex kotlinx.coroutines.sync.MutexImpl  (LINE:300)\l0x0007: SGET  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) =  kotlinx.coroutines.sync.MutexImpl._state$FU java.util.concurrent.atomic.AtomicReferenceFieldUpdater \l0x0009: INVOKE  (r3 I:kotlinx.coroutines.sync.Empty) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getEMPTY_UNLOCKED$p():kotlinx.coroutines.sync.Empty A[MD:():kotlinx.coroutines.sync.Empty (m)]\l0x000d: INVOKE  (r1 I:boolean) = \l  (r2 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r1 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l  (r0 I:java.lang.Object A[D('prepare' kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0018 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0013: INVOKE  (r1 I:kotlinx.coroutines.internal.Symbol) =  type: STATIC call: kotlinx.coroutines.sync.MutexKt.access$getLOCK_FAIL$p():kotlinx.coroutines.internal.Symbol A[MD:():kotlinx.coroutines.internal.Symbol (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:java.lang.Object) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|0x0018: IGET  (r1 I:kotlinx.coroutines.sync.MutexImpl) = (r4 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc) kotlinx.coroutines.sync.MutexImpl.TryLockDesc.mutex kotlinx.coroutines.sync.MutexImpl  (LINE:301)\l0x001a: INVOKE  (r1 I:java.lang.Object) = \l  (r0 I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp A[D('prepare' kotlinx.coroutines.sync.MutexImpl$TryLockDesc$PrepareOp)])\l  (r1 I:java.lang.Object)\l type: VIRTUAL call: kotlinx.coroutines.sync.MutexImpl.TryLockDesc.PrepareOp.perform(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|RETURN\l|0x001e: RETURN  (r1 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public java.lang.Object kotlinx.coroutines.sync.MutexImpl.TryLockDesc.prepare((r4 'this' I:kotlinx.coroutines.sync.MutexImpl$TryLockDesc A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlinx.coroutines.internal.AtomicOp\<?\> A[D('op' kotlinx.coroutines.internal.AtomicOp), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001e \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x001e: r0 'prepare' Lkotlinx\/coroutines\/sync\/MutexImpl$TryLockDesc$PrepareOp;\l  \-1 \-0x001e: r5 'op' Lkotlinx\/coroutines\/internal\/AtomicOp;\lSIGNATURE: (Lkotlinx\/coroutines\/internal\/AtomicOp\<*\>;)Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlinx.coroutines.internal.AtomicDesc.prepare(kotlinx.coroutines.internal.AtomicOp\<?\>):java.lang.Object]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

