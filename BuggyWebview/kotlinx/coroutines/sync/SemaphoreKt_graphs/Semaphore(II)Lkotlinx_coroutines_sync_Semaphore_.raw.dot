digraph "CFG forkotlinx.coroutines.sync.SemaphoreKt.Semaphore(II)Lkotlinx\/coroutines\/sync\/Semaphore;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.sync.SemaphoreImpl) =  kotlinx.coroutines.sync.SemaphoreImpl  (LINE:71)\l0x0002: INVOKE  (r0 I:kotlinx.coroutines.sync.SemaphoreImpl), (r1 I:int A[D('permits' int)]), (r2 I:int A[D('acquiredPermits' int)]) type: DIRECT call: kotlinx.coroutines.sync.SemaphoreImpl.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.sync.Semaphore) = (kotlinx.coroutines.sync.Semaphore) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:kotlinx.coroutines.sync.Semaphore) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.sync.Semaphore kotlinx.coroutines.sync.SemaphoreKt.Semaphore((r1 I:int A[D('permits' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('acquiredPermits' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r1 'permits' I\l  \-1 \-0x0007: r2 'acquiredPermits' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

