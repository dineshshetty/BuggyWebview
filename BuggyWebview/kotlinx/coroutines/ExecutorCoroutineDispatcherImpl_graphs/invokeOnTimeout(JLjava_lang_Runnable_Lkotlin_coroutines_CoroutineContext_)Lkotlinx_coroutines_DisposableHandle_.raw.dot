digraph "CFG forkotlinx.coroutines.ExecutorCoroutineDispatcherImpl.invokeOnTimeout(JLjava\/lang\/Runnable;Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/DisposableHandle;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.concurrent.Executor) = (r9 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) type: VIRTUAL call: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.getExecutor():java.util.concurrent.Executor A[MD:():java.util.concurrent.Executor (m)] (LINE:152)\l0x0004: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.util.concurrent.ScheduledExecutorService \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CHECK_CAST (r0 I:java.util.concurrent.ScheduledExecutorService) = (java.util.concurrent.ScheduledExecutorService) (r0 I:??[OBJECT, ARRAY]) \l0x000b: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0012: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('block' java.lang.Runnable)]) \l0x0013: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('context' kotlin.coroutines.CoroutineContext)]) \l0x0014: MOVE  (r7 I:??[long, double]) = (r10 I:??[long, double] A[D('timeMillis' long)]) \l0x0015: INVOKE  (r2 I:java.util.concurrent.ScheduledFuture) = \l  (r3 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl)\l  (r4 I:java.util.concurrent.ScheduledExecutorService)\l  (r5 I:java.lang.Runnable)\l  (r6 I:kotlin.coroutines.CoroutineContext)\l  (r7 I:long)\l type: DIRECT call: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.scheduleBlock(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, kotlin.coroutines.CoroutineContext, long):java.util.concurrent.ScheduledFuture A[MD:(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, kotlin.coroutines.CoroutineContext, long):java.util.concurrent.ScheduledFuture\<?\> (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('future' java.util.concurrent.ScheduledFuture)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0028  (LINE:154)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: NEW_INSTANCE  (r1 I:kotlinx.coroutines.DisposableFutureHandle) =  kotlinx.coroutines.DisposableFutureHandle \l0x001f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('future' java.util.concurrent.ScheduledFuture)]) \l0x0020: CHECK_CAST (r2 I:java.util.concurrent.Future) = (java.util.concurrent.Future) (r2 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r1 I:kotlinx.coroutines.DisposableFutureHandle), (r2 I:java.util.concurrent.Future) type: DIRECT call: kotlinx.coroutines.DisposableFutureHandle.\<init\>(java.util.concurrent.Future):void A[MD:(java.util.concurrent.Future\<?\>):void (m)]\l0x0025: CHECK_CAST (r1 I:kotlinx.coroutines.DisposableHandle) = (kotlinx.coroutines.DisposableHandle) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x002e: RETURN  (r1 I:kotlinx.coroutines.DisposableHandle) A[SYNTHETIC] (LINE:153)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: SGET  (r1 I:kotlinx.coroutines.DefaultExecutor) =  kotlinx.coroutines.DefaultExecutor.INSTANCE kotlinx.coroutines.DefaultExecutor  (LINE:155)\l0x002a: INVOKE  (r1 I:kotlinx.coroutines.DisposableHandle) = \l  (r1 I:kotlinx.coroutines.DefaultExecutor)\l  (r10 I:long A[D('timeMillis' long)])\l  (r12 I:java.lang.Runnable A[D('block' java.lang.Runnable)])\l  (r13 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l type: VIRTUAL call: kotlinx.coroutines.DefaultExecutor.invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext):kotlinx.coroutines.DisposableHandle A[MD:(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext):kotlinx.coroutines.DisposableHandle (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|RETURN\lORIG_RETURN\l|0x002e: RETURN  (r1 I:kotlinx.coroutines.DisposableHandle)  (LINE:153)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public kotlinx.coroutines.DisposableHandle kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.invokeOnTimeout((r9 'this' I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl A[IMMUTABLE_TYPE, THIS]), (r10 I:long A[D('timeMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.Runnable A[D('block' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0028 \-\> B:13:0x002e, CROSS_EDGE: B:6:0x000e \-\> B:9:0x0019, CROSS_EDGE: B:5:0x000d \-\> B:6:0x000e\lDebug Info:\l  0x001a\-0x002e: r0 'future' Ljava\/util\/concurrent\/ScheduledFuture;\l  \-1 \-0x002e: r10 'timeMillis' J\l  \-1 \-0x002e: r12 'block' Ljava\/lang\/Runnable;\l  \-1 \-0x002e: r13 'context' Lkotlin\/coroutines\/CoroutineContext;\lMETHOD_OVERRIDE: [kotlinx.coroutines.Delay.invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext):kotlinx.coroutines.DisposableHandle, kotlinx.coroutines.EventLoopImplBase.invokeOnTimeout(long, java.lang.Runnable, kotlin.coroutines.CoroutineContext):kotlinx.coroutines.DisposableHandle]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_14;
Node_14 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_5 -> Node_6;
}

