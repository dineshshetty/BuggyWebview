digraph "CFG forkotlinx.coroutines.ExecutorCoroutineDispatcherImpl.scheduleResumeAfterDelay(JLkotlinx\/coroutines\/CancellableContinuation;)V" {
subgraph cluster_Region_1840688807 {
label = "R(4:1|2|6|(1:8)(1:11))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.concurrent.Executor java.util.concurrent.Executor r0 = getExecutor()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|java.util.concurrent.ScheduledExecutorService r4 = r0 instanceof java.util.concurrent.ScheduledExecutorService ? (java.util.concurrent.ScheduledExecutorService) r0 : null\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|PHI: r2 \l  PHI: (r2v1 java.util.concurrent.ScheduledFuture A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|java.util.concurrent.ScheduledFuture r0 = r4 != null ? scheduleBlock(r4, new kotlinx.coroutines.ResumeUndispatchedRunnable(r9, r12), r12.getContext(), r10) : null\l}"];
subgraph cluster_IfRegion_546663848 {
label = "IF [B:10:0x0028] THEN: R(1:8) ELSE: R(1:11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0028|if (r0 != null) goto L8\l}"];
subgraph cluster_Region_103655180 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x002a|kotlinx.coroutines.JobKt.cancelFutureOnCancellation(r12, r0)\l}"];
}
subgraph cluster_Region_555374100 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0031|kotlinx.coroutines.DefaultExecutor.INSTANCE.scheduleResumeAfterDelay(r10, r12)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0009}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000e|PHI: r4 \l  PHI: (r4v1 java.util.concurrent.ScheduledExecutorService) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0011}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0030}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0036}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.scheduleResumeAfterDelay((r9v0 'this' kotlinx.coroutines.ExecutorCoroutineDispatcherImpl A[IMMUTABLE_TYPE, THIS]), (r10v0 'timeMillis' long A[D('timeMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\> A[D('continuation' kotlinx.coroutines.CancellableContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0036 \-\> B:1:?, CROSS_EDGE: B:6:0x000e \-\> B:9:0x0027, CROSS_EDGE: B:5:0x000d \-\> B:6:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (JLkotlinx\/coroutines\/CancellableContinuation\<\-Lkotlin\/Unit;\>;)V\lMETHOD_OVERRIDE: [kotlinx.coroutines.Delay.scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\>):void]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_0 -> Node_2;
Node_4 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9;
Node_8 -> Node_9;
Node_12 -> Node_1;
Node_14 -> Node_1;
Node_5 -> Node_6;
}

