digraph "CFG forkotlinx.coroutines.ExecutorCoroutineDispatcherImpl.scheduleResumeAfterDelay(JLkotlinx\/coroutines\/CancellableContinuation;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.concurrent.Executor) = (r9 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) type: VIRTUAL call: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.getExecutor():java.util.concurrent.Executor A[MD:():java.util.concurrent.Executor (m)] (LINE:137)\l0x0004: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.util.concurrent.ScheduledExecutorService \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: CHECK_CAST (r0 I:java.util.concurrent.ScheduledExecutorService) = (java.util.concurrent.ScheduledExecutorService) (r0 I:??[OBJECT, ARRAY]) \l0x000b: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:kotlinx.coroutines.ResumeUndispatchedRunnable) =  kotlinx.coroutines.ResumeUndispatchedRunnable  (LINE:138)\l0x0013: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0014: CHECK_CAST (r1 I:kotlinx.coroutines.CoroutineDispatcher) = (kotlinx.coroutines.CoroutineDispatcher) (r1 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  \l  (r0 I:kotlinx.coroutines.ResumeUndispatchedRunnable)\l  (r1 I:kotlinx.coroutines.CoroutineDispatcher)\l  (r12 I:kotlinx.coroutines.CancellableContinuation A[D('continuation' kotlinx.coroutines.CancellableContinuation)])\l type: DIRECT call: kotlinx.coroutines.ResumeUndispatchedRunnable.\<init\>(kotlinx.coroutines.CoroutineDispatcher, kotlinx.coroutines.CancellableContinuation):void A[MD:(kotlinx.coroutines.CoroutineDispatcher, kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\>):void (m)]\l0x0019: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001a: CHECK_CAST (r5 I:java.lang.Runnable) = (java.lang.Runnable) (r5 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r6 I:kotlin.coroutines.CoroutineContext) = (r12 I:kotlinx.coroutines.CancellableContinuation A[D('continuation' kotlinx.coroutines.CancellableContinuation)]) type: INTERFACE call: kotlinx.coroutines.CancellableContinuation.getContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:139)\l0x0021: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY])  (LINE:137)\l0x0022: MOVE  (r7 I:??[long, double]) = (r10 I:??[long, double] A[D('timeMillis' long)]) \l0x0023: INVOKE  (r2 I:java.util.concurrent.ScheduledFuture) = \l  (r3 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl)\l  (r4 I:java.util.concurrent.ScheduledExecutorService)\l  (r5 I:java.lang.Runnable)\l  (r6 I:kotlin.coroutines.CoroutineContext)\l  (r7 I:long)\l type: DIRECT call: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.scheduleBlock(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, kotlin.coroutines.CoroutineContext, long):java.util.concurrent.ScheduledFuture A[MD:(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, kotlin.coroutines.CoroutineContext, long):java.util.concurrent.ScheduledFuture\<?\> (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|0x0028: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('future' java.util.concurrent.ScheduledFuture)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0031  (LINE:143)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('future' java.util.concurrent.ScheduledFuture)])  (LINE:144)\l0x002b: CHECK_CAST (r1 I:java.util.concurrent.Future) = (java.util.concurrent.Future) (r1 I:??[OBJECT, ARRAY]) \l0x002d: INVOKE  \l  (r12 I:kotlinx.coroutines.CancellableContinuation A[D('continuation' kotlinx.coroutines.CancellableContinuation)])\l  (r1 I:java.util.concurrent.Future)\l type: STATIC call: kotlinx.coroutines.JobKt.cancelFutureOnCancellation(kotlinx.coroutines.CancellableContinuation, java.util.concurrent.Future):void A[MD:(kotlinx.coroutines.CancellableContinuation\<?\>, java.util.concurrent.Future\<?\>):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|RETURN\l|0x0030: RETURN    (LINE:145)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|0x0031: SGET  (r1 I:kotlinx.coroutines.DefaultExecutor) =  kotlinx.coroutines.DefaultExecutor.INSTANCE kotlinx.coroutines.DefaultExecutor  (LINE:148)\l0x0033: INVOKE  \l  (r1 I:kotlinx.coroutines.DefaultExecutor)\l  (r10 I:long A[D('timeMillis' long)])\l  (r12 I:kotlinx.coroutines.CancellableContinuation A[D('continuation' kotlinx.coroutines.CancellableContinuation)])\l type: VIRTUAL call: kotlinx.coroutines.DefaultExecutor.scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation):void A[MD:(long, kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\>):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0036|RETURN\l|0x0036: RETURN    (LINE:149)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.scheduleResumeAfterDelay((r9 'this' I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl A[IMMUTABLE_TYPE, THIS]), (r10 I:long A[D('timeMillis' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\> A[D('continuation' kotlinx.coroutines.CancellableContinuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0036 \-\> B:1:?, CROSS_EDGE: B:6:0x000e \-\> B:9:0x0027, CROSS_EDGE: B:5:0x000d \-\> B:6:0x000e\lDebug Info:\l  0x0028\-0x0036: r0 'future' Ljava\/util\/concurrent\/ScheduledFuture;\l  \-1 \-0x0036: r10 'timeMillis' J\l  \-1 \-0x0036: r12 'continuation' Lkotlinx\/coroutines\/CancellableContinuation;\lSIGNATURE: (JLkotlinx\/coroutines\/CancellableContinuation\<\-Lkotlin\/Unit;\>;)V\lMETHOD_OVERRIDE: [kotlinx.coroutines.Delay.scheduleResumeAfterDelay(long, kotlinx.coroutines.CancellableContinuation\<? super kotlin.Unit\>):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_5 -> Node_6;
}

