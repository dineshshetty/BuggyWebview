digraph "CFG forkotlinx.coroutines.ExecutorCoroutineDispatcherImpl.cancelJobOnRejection(Lkotlin\/coroutines\/CoroutineContext;Ljava\/util\/concurrent\/RejectedExecutionException;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlinx.coroutines.JobKt.cancel(r3, kotlinx.coroutines.ExceptionsKt.CancellationException(\"The task was rejected\", r4))\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.cancelJobOnRejection((r2v0 'this' kotlinx.coroutines.ExecutorCoroutineDispatcherImpl A[IMMUTABLE_TYPE, THIS]), (r3v0 'context' kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'exception' java.util.concurrent.RejectedExecutionException A[D('exception' java.util.concurrent.RejectedExecutionException), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

