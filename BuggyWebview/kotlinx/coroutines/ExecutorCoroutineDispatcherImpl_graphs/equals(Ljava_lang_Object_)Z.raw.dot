digraph "CFG forkotlinx.coroutines.ExecutorCoroutineDispatcherImpl.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) kotlinx.coroutines.ExecutorCoroutineDispatcherImpl  (LINE:177)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0005: CHECK_CAST (r0 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) = (kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) (r0 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:java.util.concurrent.Executor) = (r0 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) type: VIRTUAL call: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.getExecutor():java.util.concurrent.Executor A[MD:():java.util.concurrent.Executor (m)]\l0x000b: INVOKE  (r1 I:java.util.concurrent.Executor) = (r2 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) type: VIRTUAL call: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.getExecutor():java.util.concurrent.Executor A[MD:():java.util.concurrent.Executor (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0013 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|SYNTHETIC\lRETURN\l|0x0011: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0014: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.equals((r2 'this' I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0013 \-\> B:8:0x0014, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x0013\lDebug Info:\l  \-1 \-0x0014: r3 'other' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_1;
}

