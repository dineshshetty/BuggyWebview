digraph "CFG forkotlinx.coroutines.ExecutorCoroutineDispatcherImpl.close()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.concurrent.Executor) = (r2 I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl) type: VIRTUAL call: kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.getExecutor():java.util.concurrent.Executor A[MD:():java.util.concurrent.Executor (m)] (LINE:173)\l0x0004: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.util.concurrent.ExecutorService \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: CHECK_CAST (r0 I:java.util.concurrent.ExecutorService) = (java.util.concurrent.ExecutorService) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000f \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: INVOKE  (r0 I:java.util.concurrent.ExecutorService) type: INTERFACE call: java.util.concurrent.ExecutorService.shutdown():void A[MD:():void (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: RETURN    (LINE:174)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|0x0012: RETURN   A[SYNTHETIC] (LINE:174)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.ExecutorCoroutineDispatcherImpl.close((r2 'this' I:kotlinx.coroutines.ExecutorCoroutineDispatcherImpl A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:6:0x000c \-\> B:9:0x0012, CROSS_EDGE: B:5:0x000b \-\> B:6:0x000c\lMETHOD_OVERRIDE: [ClspMth\{java.lang.AutoCloseable.close():void throws java.lang.Exception\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_1;
Node_5 -> Node_6;
}

