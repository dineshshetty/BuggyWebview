digraph "CFG forkotlinx.coroutines.CoroutineDispatcher.Key.1.invoke(Lkotlin\/coroutines\/CoroutineContext$Element;)Lkotlinx\/coroutines\/CoroutineDispatcher;" {
subgraph cluster_Region_1180927791 {
label = "R(1:(2:(1:4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_835650097 {
label = "R(2:(1:4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1808396314 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if ((r2 instanceof kotlinx.coroutines.CoroutineDispatcher) == true) goto L3\l}"];
subgraph cluster_Region_859801711 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return (kotlinx.coroutines.CoroutineDispatcher) r2\l}"];
}
}
subgraph cluster_Region_1774140376 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\lORIG_RETURN\l|return null\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.CoroutineDispatcher kotlinx.coroutines.CoroutineDispatcher.Key.1.invoke((r1v0 'this' kotlinx.coroutines.CoroutineDispatcher$Key$1 A[IMMUTABLE_TYPE, THIS]), (r2v0 'it' kotlin.coroutines.CoroutineContext$Element A[D('it' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:14:0x0009\lINLINE_NOT_NEEDED\lREPLACED_BY: kotlinx.coroutines.CoroutineDispatcher.Key.1.invoke(kotlin.coroutines.CoroutineContext$Element):kotlinx.coroutines.CoroutineDispatcher\lBRIDGED_BY: kotlinx.coroutines.CoroutineDispatcher.Key.1.invoke(kotlin.coroutines.CoroutineContext$Element):kotlinx.coroutines.CoroutineDispatcher\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function1.invoke(P1):R]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_15 -> Node_9;
Node_13 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_15;
}

