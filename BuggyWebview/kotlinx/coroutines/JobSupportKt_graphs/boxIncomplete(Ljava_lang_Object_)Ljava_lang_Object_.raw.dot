digraph "CFG forkotlinx.coroutines.JobSupportKt.boxIncomplete(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$boxIncomplete' java.lang.Object)]) kotlinx.coroutines.Incomplete  (LINE:1284)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:kotlinx.coroutines.IncompleteStateBox) =  kotlinx.coroutines.IncompleteStateBox \l0x0006: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$boxIncomplete' java.lang.Object)]) \l0x0007: CHECK_CAST (r1 I:kotlinx.coroutines.Incomplete) = (kotlinx.coroutines.Incomplete) (r1 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:kotlinx.coroutines.IncompleteStateBox), (r1 I:kotlinx.coroutines.Incomplete) type: DIRECT call: kotlinx.coroutines.IncompleteStateBox.\<init\>(kotlinx.coroutines.Incomplete):void A[MD:(kotlinx.coroutines.Incomplete):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000e: RETURN  (r0 I:java.lang.Object) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|0x000d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$boxIncomplete' java.lang.Object)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|RETURN\lORIG_RETURN\l|0x000e: RETURN  (r0 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Object kotlinx.coroutines.JobSupportKt.boxIncomplete((r2 I:java.lang.Object A[D('$this$boxIncomplete' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000d \-\> B:14:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r2 '$this$boxIncomplete' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

