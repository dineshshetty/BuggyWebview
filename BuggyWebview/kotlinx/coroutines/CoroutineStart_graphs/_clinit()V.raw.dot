digraph "CFG forkotlinx.coroutines.CoroutineStart.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart  (LINE:37)\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"DEFAULT\" \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:kotlinx.coroutines.CoroutineStart), (r1 I:java.lang.String), (r2 I:int) type: DIRECT call: kotlinx.coroutines.CoroutineStart.\<init\>(java.lang.String, int):void A[MD:(java.lang.String, int):void (m)]\l0x0008: SPUT  (r0 I:kotlinx.coroutines.CoroutineStart) kotlinx.coroutines.CoroutineStart.DEFAULT kotlinx.coroutines.CoroutineStart \l0x000a: NEW_INSTANCE  (r0 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart  (LINE:48)\l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"LAZY\" \l0x000e: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: INVOKE  (r0 I:kotlinx.coroutines.CoroutineStart), (r1 I:java.lang.String), (r2 I:int) type: DIRECT call: kotlinx.coroutines.CoroutineStart.\<init\>(java.lang.String, int):void A[MD:(java.lang.String, int):void (m)]\l0x0012: SPUT  (r0 I:kotlinx.coroutines.CoroutineStart) kotlinx.coroutines.CoroutineStart.LAZY kotlinx.coroutines.CoroutineStart \l0x0014: NEW_INSTANCE  (r0 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart  (LINE:57)\l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"ATOMIC\" \l0x0018: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0019: INVOKE  (r0 I:kotlinx.coroutines.CoroutineStart), (r1 I:java.lang.String), (r2 I:int) type: DIRECT call: kotlinx.coroutines.CoroutineStart.\<init\>(java.lang.String, int):void A[MD:(java.lang.String, int):void (m)]\l0x001c: SPUT  (r0 I:kotlinx.coroutines.CoroutineStart) kotlinx.coroutines.CoroutineStart.ATOMIC kotlinx.coroutines.CoroutineStart \l0x001e: NEW_INSTANCE  (r0 I:kotlinx.coroutines.CoroutineStart) =  kotlinx.coroutines.CoroutineStart  (LINE:76)\l0x0020: CONST_STR  (r1 I:java.lang.String) =  \"UNDISPATCHED\" \l0x0022: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0023: INVOKE  (r0 I:kotlinx.coroutines.CoroutineStart), (r1 I:java.lang.String), (r2 I:int) type: DIRECT call: kotlinx.coroutines.CoroutineStart.\<init\>(java.lang.String, int):void A[MD:(java.lang.String, int):void (m)]\l0x0026: SPUT  (r0 I:kotlinx.coroutines.CoroutineStart) kotlinx.coroutines.CoroutineStart.UNDISPATCHED kotlinx.coroutines.CoroutineStart \l0x0028: INVOKE  (r0 I:kotlinx.coroutines.CoroutineStart[]) =  type: STATIC call: kotlinx.coroutines.CoroutineStart.$values():kotlinx.coroutines.CoroutineStart[] A[MD:():kotlinx.coroutines.CoroutineStart[] (m)]\l0x002c: SPUT  (r0 I:kotlinx.coroutines.CoroutineStart[]) kotlinx.coroutines.CoroutineStart.$VALUES kotlinx.coroutines.CoroutineStart[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|RETURN\l|0x002e: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlinx.coroutines.CoroutineStart.\<clinit\>()  | DONT_GENERATE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

