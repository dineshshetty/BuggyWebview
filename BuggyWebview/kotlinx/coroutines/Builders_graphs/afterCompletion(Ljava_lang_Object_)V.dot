digraph "CFG forkotlinx.coroutines.BlockingCoroutine.afterCompletion(Ljava\/lang\/Object;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x000a|if (kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Thread.currentThread(), r2.blockedThread) != false) goto L12\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|java.lang.Thread r0 = r2.blockedThread\lkotlinx.coroutines.AbstractTimeSource r1 = kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|if (r1 != null) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|r1 = null\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|PHI: r1 \l  PHI: (r1v3 kotlin.Unit) = (r1v2 kotlin.Unit), (r1v4 kotlin.Unit) binds: [B:20:0x0016, B:19:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 != null) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|java.util.concurrent.locks.LockSupport.unpark(r0)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|RETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|r1.unpark(r0)\lkotlin.Unit r1 = kotlin.Unit.INSTANCE\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.BlockingCoroutine.afterCompletion((r2v0 'this' kotlinx.coroutines.BlockingCoroutine\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'state' java.lang.Object A[D('state' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001b \-\> B:23:0x0020, CROSS_EDGE: B:20:0x0016 \-\> B:21:0x001b, CROSS_EDGE: B:16:0x000a \-\> B:23:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [kotlinx.coroutines.JobSupport.afterCompletion(java.lang.Object):void]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_25 -> Node_14;
Node_20 -> Node_21;
Node_24 -> Node_14;
}

