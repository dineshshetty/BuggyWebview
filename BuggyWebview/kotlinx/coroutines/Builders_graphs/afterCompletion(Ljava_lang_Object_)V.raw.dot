digraph "CFG forkotlinx.coroutines.BlockingCoroutine.afterCompletion(Ljava\/lang\/Object;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Thread) =  type: STATIC call: java.lang.Thread.currentThread():java.lang.Thread A[MD:():java.lang.Thread (c)] (LINE:72)\l0x0004: IGET  (r1 I:java.lang.Thread) = (r2 I:kotlinx.coroutines.BlockingCoroutine) kotlinx.coroutines.BlockingCoroutine.blockedThread java.lang.Thread \l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: IGET  (r0 I:java.lang.Thread) = (r2 I:kotlinx.coroutines.BlockingCoroutine) kotlinx.coroutines.BlockingCoroutine.blockedThread java.lang.Thread  (LINE:73)\l0x000e: INVOKE  (r1 I:kotlinx.coroutines.AbstractTimeSource) =  type: STATIC call: kotlinx.coroutines.AbstractTimeSourceKt.getTimeSource():kotlinx.coroutines.AbstractTimeSource A[MD:():kotlinx.coroutines.AbstractTimeSource (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0016 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|0x001b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:? \l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|0x001d: INVOKE  (r0 I:java.lang.Thread) type: STATIC call: java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread):void A[MD:(java.lang.Thread):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN    (LINE:74)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN   A[SYNTHETIC] (LINE:74)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|0x0016: INVOKE  (r1 I:kotlinx.coroutines.AbstractTimeSource), (r0 I:java.lang.Thread) type: VIRTUAL call: kotlinx.coroutines.AbstractTimeSource.unpark(java.lang.Thread):void A[MD:(java.lang.Thread):void (m)]\l0x0019: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN   A[SYNTHETIC] (LINE:74)\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.BlockingCoroutine.afterCompletion((r2 'this' I:kotlinx.coroutines.BlockingCoroutine\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('state' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001b \-\> B:23:0x0020, CROSS_EDGE: B:20:0x0016 \-\> B:21:0x001b, CROSS_EDGE: B:16:0x000a \-\> B:23:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r3 'state' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [kotlinx.coroutines.JobSupport.afterCompletion(java.lang.Object):void]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_25 -> Node_14;
Node_20 -> Node_21;
Node_24 -> Node_14;
}

