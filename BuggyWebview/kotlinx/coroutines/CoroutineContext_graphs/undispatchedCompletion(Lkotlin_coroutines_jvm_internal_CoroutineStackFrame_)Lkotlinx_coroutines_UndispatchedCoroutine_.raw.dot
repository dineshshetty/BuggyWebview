digraph "CFG forkotlinx.coroutines.CoroutineContextKt.undispatchedCompletion(Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Lkotlinx\/coroutines\/UndispatchedCoroutine;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$undispatchedCompletion' kotlin.coroutines.jvm.internal.CoroutineStackFrame)])  (LINE:145)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|LOOP_START\lLOOP:0: B:20:0x0001\-\>B:27:0x0012\l|0x0002: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) kotlinx.coroutines.DispatchedCoroutine  (LINE:148)\l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0008 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|0x0008: INVOKE  (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) = (r0 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame) type: INTERFACE call: kotlin.coroutines.jvm.internal.CoroutineStackFrame.getCallerFrame():kotlin.coroutines.jvm.internal.CoroutineStackFrame A[MD:():kotlin.coroutines.jvm.internal.CoroutineStackFrame (m)] (LINE:149)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000f \l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x0010: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('completion' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) kotlinx.coroutines.UndispatchedCoroutine  (LINE:151)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0012|LOOP_END\lLOOP:0: B:20:0x0001\-\>B:27:0x0012\l|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0001 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0014|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0014|0x0014: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('completion' kotlin.coroutines.jvm.internal.CoroutineStackFrame)]) \l0x0015: CHECK_CAST (r1 I:kotlinx.coroutines.UndispatchedCoroutine) = (kotlinx.coroutines.UndispatchedCoroutine) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:kotlinx.coroutines.UndispatchedCoroutine\<?\>) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x000e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|RETURN\l|0x000e: RETURN  (r2 I:kotlinx.coroutines.UndispatchedCoroutine\<?\>) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0007|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|RETURN\l|0x0007: RETURN  (r2 I:kotlinx.coroutines.UndispatchedCoroutine\<?\>) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.UndispatchedCoroutine\<?\> kotlinx.coroutines.CoroutineContextKt.undispatchedCompletion((r3 I:kotlin.coroutines.jvm.internal.CoroutineStackFrame A[D('$this$undispatchedCompletion' kotlin.coroutines.jvm.internal.CoroutineStackFrame), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x000e \-\> B:18:?, CROSS_EDGE: B:29:0x0017 \-\> B:18:?, BACK_EDGE: B:27:0x0012 \-\> B:20:0x0001\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0018: r0 'completion' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\l  \-1 \-0x0018: r3 '$this$undispatchedCompletion' Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;\lSIGNATURE: (Lkotlin\/coroutines\/jvm\/internal\/CoroutineStackFrame;)Lkotlinx\/coroutines\/UndispatchedCoroutine\<*\>;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_32[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_33[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_20;
Node_27 -> Node_31[style=dashed];
Node_31 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_18;
Node_33 -> Node_25;
Node_25 -> Node_18;
Node_32 -> Node_22;
Node_22 -> Node_18;
}

