digraph "CFG forkotlinx.coroutines.CoroutineContextKt.foldCopies(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;Z)Lkotlin\/coroutines\/CoroutineContext;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r7 I:kotlin.coroutines.CoroutineContext A[D('originalContext' kotlin.coroutines.CoroutineContext)]) type: STATIC call: kotlinx.coroutines.CoroutineContextKt.hasCopyableElements(kotlin.coroutines.CoroutineContext):boolean A[MD:(kotlin.coroutines.CoroutineContext):boolean (m)] (LINE:54)\l0x0004: INVOKE  (r1 I:boolean) = (r8 I:kotlin.coroutines.CoroutineContext A[D('appendContext' kotlin.coroutines.CoroutineContext)]) type: STATIC call: kotlinx.coroutines.CoroutineContextKt.hasCopyableElements(kotlin.coroutines.CoroutineContext):boolean A[MD:(kotlin.coroutines.CoroutineContext):boolean (m)] (LINE:55)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasElementsLeft' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0011  (LINE:58)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasElementsRight' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0011 \l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: INVOKE  (r2 I:kotlin.coroutines.CoroutineContext) = \l  (r7 I:kotlin.coroutines.CoroutineContext A[D('originalContext' kotlin.coroutines.CoroutineContext)])\l  (r8 I:kotlin.coroutines.CoroutineContext A[D('appendContext' kotlin.coroutines.CoroutineContext)])\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)] (LINE:59)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|RETURN\l|0x0010: RETURN  (r2 I:kotlin.coroutines.CoroutineContext) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: NEW_INSTANCE  (r2 I:kotlin.jvm.internal.Ref$ObjectRef) =  kotlin.jvm.internal.Ref$ObjectRef  (LINE:62)\l0x0013: INVOKE  (r2 I:kotlin.jvm.internal.Ref$ObjectRef) type: DIRECT call: kotlin.jvm.internal.Ref.ObjectRef.\<init\>():void A[MD:():void (m)]\l0x0016: IPUT  \l  (r8 I:T A[D('appendContext' kotlin.coroutines.CoroutineContext)])\l  (r2 I:kotlin.jvm.internal.Ref$ObjectRef A[D('leftoverContext' kotlin.jvm.internal.Ref$ObjectRef)])\l kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object \l0x0018: SGET  (r3 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext  (LINE:63)\l0x001a: NEW_INSTANCE  (r4 I:kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1) =  kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1 \l0x001c: INVOKE  \l  (r4 I:kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1)\l  (r2 I:kotlin.jvm.internal.Ref$ObjectRef A[D('leftoverContext' kotlin.jvm.internal.Ref$ObjectRef)])\l  (r9 I:boolean A[D('isNewCoroutine' boolean)])\l type: DIRECT call: kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1.\<init\>(kotlin.jvm.internal.Ref$ObjectRef, boolean):void A[MD:(kotlin.jvm.internal.Ref$ObjectRef\<kotlin.coroutines.CoroutineContext\>, boolean):void (m)]\l0x001f: CHECK_CAST (r4 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r4 I:??[OBJECT, ARRAY]) \l0x0021: INVOKE  (r3 I:java.lang.Object) = \l  (r7 I:kotlin.coroutines.CoroutineContext A[D('originalContext' kotlin.coroutines.CoroutineContext)])\l  (r3 I:java.lang.Object)\l  (r4 I:kotlin.jvm.functions.Function2)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.fold(java.lang.Object, kotlin.jvm.functions.Function2):java.lang.Object A[MD:\<R\>:(R, kotlin.jvm.functions.Function2\<? super R, ? super kotlin.coroutines.CoroutineContext$Element, ? extends R\>):R (m)]\l0x0025: CHECK_CAST (r3 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|0x0027: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasElementsRight' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0039  (LINE:79)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0029|0x0029: IGET  (r4 I:T) = (r2 I:kotlin.jvm.internal.Ref$ObjectRef A[D('leftoverContext' kotlin.jvm.internal.Ref$ObjectRef)]) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object  (LINE:80)\l0x002b: CHECK_CAST (r4 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r4 I:??[OBJECT, ARRAY]) \l0x002d: SGET  (r5 I:kotlin.coroutines.EmptyCoroutineContext) =  kotlin.coroutines.EmptyCoroutineContext.INSTANCE kotlin.coroutines.EmptyCoroutineContext \l0x002f: SGET  (r6 I:kotlinx.coroutines.CoroutineContextKt$foldCopies$1) =  kotlinx.coroutines.CoroutineContextKt$foldCopies$1.INSTANCE kotlinx.coroutines.CoroutineContextKt$foldCopies$1 \l0x0031: CHECK_CAST (r6 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r6 I:??[OBJECT, ARRAY]) \l0x0033: INVOKE  (r4 I:java.lang.Object) = (r4 I:kotlin.coroutines.CoroutineContext), (r5 I:java.lang.Object), (r6 I:kotlin.jvm.functions.Function2) type: INTERFACE call: kotlin.coroutines.CoroutineContext.fold(java.lang.Object, kotlin.jvm.functions.Function2):java.lang.Object A[MD:\<R\>:(R, kotlin.jvm.functions.Function2\<? super R, ? super kotlin.coroutines.CoroutineContext$Element, ? extends R\>):R (m)]\l0x0037: IPUT  (r4 I:T), (r2 I:kotlin.jvm.internal.Ref$ObjectRef A[D('leftoverContext' kotlin.jvm.internal.Ref$ObjectRef)]) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object \l}"];
Node_22 [shape=record,label="{22\:\ 0x0039|0x0039: IGET  (r4 I:T) = (r2 I:kotlin.jvm.internal.Ref$ObjectRef A[D('leftoverContext' kotlin.jvm.internal.Ref$ObjectRef)]) kotlin.jvm.internal.Ref.ObjectRef.element java.lang.Object  (LINE:88)\l0x003b: CHECK_CAST (r4 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r4 I:??[OBJECT, ARRAY]) \l0x003d: INVOKE  (r4 I:kotlin.coroutines.CoroutineContext) = \l  (r3 I:kotlin.coroutines.CoroutineContext A[D('folded' kotlin.coroutines.CoroutineContext)])\l  (r4 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0041|RETURN\l|0x0041: RETURN  (r4 I:kotlin.coroutines.CoroutineContext) \l}"];
MethodNode[shape=record,label="{private static final kotlin.coroutines.CoroutineContext kotlinx.coroutines.CoroutineContextKt.foldCopies((r7 I:kotlin.coroutines.CoroutineContext A[D('originalContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.coroutines.CoroutineContext A[D('appendContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('isNewCoroutine' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0041 \-\> B:13:?, CROSS_EDGE: B:20:0x0027 \-\> B:22:0x0039, CROSS_EDGE: B:15:0x0008 \-\> B:19:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0041: r0 'hasElementsLeft' Z\l  0x0008\-0x0041: r1 'hasElementsRight' Z\l  0x0016\-0x0041: r2 'leftoverContext' Lkotlin\/jvm\/internal\/Ref$ObjectRef;\l  0x0027\-0x0041: r3 'folded' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0041: r7 'originalContext' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0041: r8 'appendContext' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0041: r9 'isNewCoroutine' Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_13;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

