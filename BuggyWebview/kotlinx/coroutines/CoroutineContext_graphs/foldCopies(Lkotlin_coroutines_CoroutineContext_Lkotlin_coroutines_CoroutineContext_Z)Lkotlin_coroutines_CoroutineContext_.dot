digraph "CFG forkotlinx.coroutines.CoroutineContextKt.foldCopies(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;Z)Lkotlin\/coroutines\/CoroutineContext;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|boolean r0 = hasCopyableElements(r7)\lboolean r1 = hasCopyableElements(r8)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|if (r0 != false) goto L7\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|if (r1 != false) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c}"];
Node_18 [shape=record,label="{18\:\ 0x0010|RETURN\l|return r7.plus(r8)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|kotlin.jvm.internal.Ref$ObjectRef r2 = new kotlin.jvm.internal.Ref.ObjectRef()\lr2.element = r8\lkotlin.coroutines.CoroutineContext r3 = (kotlin.coroutines.CoroutineContext) r7.fold(kotlin.coroutines.EmptyCoroutineContext.INSTANCE, new kotlinx.coroutines.CoroutineContextKt$foldCopies$folded$1(r2, r9))\l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|if (r1 == false) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x0029|r2.element = ((kotlin.coroutines.CoroutineContext) r2.element).fold(kotlin.coroutines.EmptyCoroutineContext.INSTANCE, kotlinx.coroutines.CoroutineContextKt$foldCopies$1.INSTANCE)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0039}"];
Node_23 [shape=record,label="{23\:\ 0x0041|RETURN\l|return r3.plus((kotlin.coroutines.CoroutineContext) r2.element)\l}"];
MethodNode[shape=record,label="{private static final kotlin.coroutines.CoroutineContext kotlinx.coroutines.CoroutineContextKt.foldCopies((r7v0 'originalContext' kotlin.coroutines.CoroutineContext A[D('originalContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'appendContext' kotlin.coroutines.CoroutineContext A[D('appendContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'isNewCoroutine' boolean A[D('isNewCoroutine' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0041 \-\> B:13:?, CROSS_EDGE: B:20:0x0027 \-\> B:22:0x0039, CROSS_EDGE: B:15:0x0008 \-\> B:19:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l \-\> Type inference failed for: r4v7, types: [T, java.lang.Object]\l DEBUG: \l \-\> Multi\-variable search result rejected for r8v0, resolved type: kotlin.coroutines.CoroutineContext\}\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_13;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

