digraph "CFG forkotlinx.coroutines.CoroutineContextKt.newCoroutineContext(Lkotlinx\/coroutines\/CoroutineScope;Lkotlin\/coroutines\/CoroutineContext;)Lkotlin\/coroutines\/CoroutineContext;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = (r4 I:kotlinx.coroutines.CoroutineScope A[D('$this$newCoroutineContext' kotlinx.coroutines.CoroutineScope)]) type: INTERFACE call: kotlinx.coroutines.CoroutineScope.getCoroutineContext():kotlin.coroutines.CoroutineContext A[MD:():kotlin.coroutines.CoroutineContext (m)] (LINE:19)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r0 I:kotlin.coroutines.CoroutineContext)\l  (r5 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext)])\l  (r1 I:boolean)\l type: STATIC call: kotlinx.coroutines.CoroutineContextKt.foldCopies(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext, boolean):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext, boolean):kotlin.coroutines.CoroutineContext (m)]\l0x0009: INVOKE  (r1 I:boolean) =  type: STATIC call: kotlinx.coroutines.DebugKt.getDEBUG():boolean A[MD:():boolean (m)] (LINE:20)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0023 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: NEW_INSTANCE  (r1 I:kotlinx.coroutines.CoroutineId) =  kotlinx.coroutines.CoroutineId \l0x0011: INVOKE  (r2 I:java.util.concurrent.atomic.AtomicLong) =  type: STATIC call: kotlinx.coroutines.DebugKt.getCOROUTINE_ID():java.util.concurrent.atomic.AtomicLong A[MD:():java.util.concurrent.atomic.AtomicLong (m)]\l0x0015: INVOKE  (r2 I:long) = (r2 I:java.util.concurrent.atomic.AtomicLong) type: VIRTUAL call: java.util.concurrent.atomic.AtomicLong.incrementAndGet():long A[MD:():long (c)]\l0x0019: INVOKE  (r1 I:kotlinx.coroutines.CoroutineId), (r2 I:long) type: DIRECT call: kotlinx.coroutines.CoroutineId.\<init\>(long):void A[MD:(long):void (m)]\l0x001c: CHECK_CAST (r1 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r1 I:??[OBJECT, ARRAY]) \l0x001e: INVOKE  (r1 I:kotlin.coroutines.CoroutineContext) = \l  (r0 I:kotlin.coroutines.CoroutineContext A[D('combined' kotlin.coroutines.CoroutineContext)])\l  (r1 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|0x0024: INVOKE  (r2 I:kotlinx.coroutines.CoroutineDispatcher) =  type: STATIC call: kotlinx.coroutines.Dispatchers.getDefault():kotlinx.coroutines.CoroutineDispatcher A[MD:():kotlinx.coroutines.CoroutineDispatcher (m)] (LINE:21)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0028|0x0028: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('combined' kotlin.coroutines.CoroutineContext)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x003f \l}"];
Node_22 [shape=record,label="{22\:\ 0x002a|0x002a: SGET  (r2 I:kotlin.coroutines.ContinuationInterceptor$Key) =  kotlin.coroutines.ContinuationInterceptor.Key kotlin.coroutines.ContinuationInterceptor$Key \l0x002c: CHECK_CAST (r2 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r2 I:??[OBJECT, ARRAY]) \l0x002e: INVOKE  (r2 I:kotlin.coroutines.CoroutineContext$Element) = \l  (r0 I:kotlin.coroutines.CoroutineContext A[D('combined' kotlin.coroutines.CoroutineContext)])\l  (r2 I:kotlin.coroutines.CoroutineContext$Key)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0032|0x0032: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x003f \l}"];
Node_24 [shape=record,label="{24\:\ 0x0034|0x0034: INVOKE  (r2 I:kotlinx.coroutines.CoroutineDispatcher) =  type: STATIC call: kotlinx.coroutines.Dispatchers.getDefault():kotlinx.coroutines.CoroutineDispatcher A[MD:():kotlinx.coroutines.CoroutineDispatcher (m)] (LINE:22)\l0x0038: CHECK_CAST (r2 I:kotlin.coroutines.CoroutineContext) = (kotlin.coroutines.CoroutineContext) (r2 I:??[OBJECT, ARRAY]) \l0x003a: INVOKE  (r2 I:kotlin.coroutines.CoroutineContext) = \l  (r1 I:kotlin.coroutines.CoroutineContext A[D('debug' kotlin.coroutines.CoroutineContext)])\l  (r2 I:kotlin.coroutines.CoroutineContext)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0040: RETURN  (r2 I:kotlin.coroutines.CoroutineContext) A[SYNTHETIC] (LINE:21)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x003f|0x003f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('debug' kotlin.coroutines.CoroutineContext)]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0040|RETURN\lORIG_RETURN\l|0x0040: RETURN  (r2 I:kotlin.coroutines.CoroutineContext)  (LINE:21)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0023|0x0023: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('combined' kotlin.coroutines.CoroutineContext)]) \l}"];
MethodNode[shape=record,label="{public static final kotlin.coroutines.CoroutineContext kotlinx.coroutines.CoroutineContextKt.newCoroutineContext((r4 I:kotlinx.coroutines.CoroutineScope A[D('$this$newCoroutineContext' kotlinx.coroutines.CoroutineScope), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.coroutines.CoroutineContext A[D('context' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x003f \-\> B:26:0x0040, CROSS_EDGE: B:21:0x0028 \-\> B:25:0x003f, CROSS_EDGE: B:19:0x0023 \-\> B:20:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0040: r0 'combined' Lkotlin\/coroutines\/CoroutineContext;\l  0x0024\-0x0040: r1 'debug' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0040: r4 '$this$newCoroutineContext' Lkotlinx\/coroutines\/CoroutineScope;\l  \-1 \-0x0040: r5 'context' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_27;
Node_27 -> Node_15;
Node_25 -> Node_26;
Node_26 -> Node_15;
Node_19 -> Node_20;
}

