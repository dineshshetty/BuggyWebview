digraph "CFG forkotlinx.coroutines.CoroutineContextKt.newCoroutineContext(Lkotlin\/coroutines\/CoroutineContext;Lkotlin\/coroutines\/CoroutineContext;)Lkotlin\/coroutines\/CoroutineContext;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:kotlin.coroutines.CoroutineContext A[D('addedContext' kotlin.coroutines.CoroutineContext)]) type: STATIC call: kotlinx.coroutines.CoroutineContextKt.hasCopyableElements(kotlin.coroutines.CoroutineContext):boolean A[MD:(kotlin.coroutines.CoroutineContext):boolean (m)] (LINE:35)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r1 I:kotlin.coroutines.CoroutineContext A[D('$this$newCoroutineContext' kotlin.coroutines.CoroutineContext)])\l  (r2 I:kotlin.coroutines.CoroutineContext A[D('addedContext' kotlin.coroutines.CoroutineContext)])\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.plus(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:kotlin.coroutines.CoroutineContext) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:36)\l0x000c: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext) = \l  (r1 I:kotlin.coroutines.CoroutineContext A[D('$this$newCoroutineContext' kotlin.coroutines.CoroutineContext)])\l  (r2 I:kotlin.coroutines.CoroutineContext A[D('addedContext' kotlin.coroutines.CoroutineContext)])\l  (r0 I:boolean)\l type: STATIC call: kotlinx.coroutines.CoroutineContextKt.foldCopies(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext, boolean):kotlin.coroutines.CoroutineContext A[MD:(kotlin.coroutines.CoroutineContext, kotlin.coroutines.CoroutineContext, boolean):kotlin.coroutines.CoroutineContext (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:kotlin.coroutines.CoroutineContext) \l}"];
MethodNode[shape=record,label="{public static final kotlin.coroutines.CoroutineContext kotlinx.coroutines.CoroutineContextKt.newCoroutineContext((r1 I:kotlin.coroutines.CoroutineContext A[D('$this$newCoroutineContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.coroutines.CoroutineContext A[D('addedContext' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0010 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r1 '$this$newCoroutineContext' Lkotlin\/coroutines\/CoroutineContext;\l  \-1 \-0x0010: r2 'addedContext' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

