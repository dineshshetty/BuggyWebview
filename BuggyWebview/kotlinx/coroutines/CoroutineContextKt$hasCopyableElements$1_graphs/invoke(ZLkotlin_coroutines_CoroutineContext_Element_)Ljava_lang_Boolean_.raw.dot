digraph "CFG forkotlinx.coroutines.CoroutineContextKt$hasCopyableElements$1.invoke(ZLkotlin\/coroutines\/CoroutineContext$Element;)Ljava\/lang\/Boolean;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0009  (LINE:40)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('it' kotlin.coroutines.CoroutineContext$Element)]) kotlinx.coroutines.CopyableThreadContextElement \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0007 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: INVOKE  (r0 I:java.lang.Boolean) = (r0 I:boolean) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.lang.Boolean) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{public final java.lang.Boolean kotlinx.coroutines.CoroutineContextKt$hasCopyableElements$1.invoke((r1 'this' I:kotlinx.coroutines.CoroutineContextKt$hasCopyableElements$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[D('result' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.coroutines.CoroutineContext$Element A[D('it' kotlin.coroutines.CoroutineContext$Element), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0009 \-\> B:18:0x000a, CROSS_EDGE: B:12:0x0000 \-\> B:17:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r2 'result' Z\l  \-1 \-0x000e: r3 'it' Lkotlin\/coroutines\/CoroutineContext$Element;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_17 -> Node_18;
}

