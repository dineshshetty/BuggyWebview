digraph "CFG forkotlinx.coroutines.AwaitKt.awaitAll(Ljava\/util\/Collection;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0004|if (r5.isEmpty() == false) goto L6\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|java.lang.Object[] r4 = r5.toArray(new kotlinx.coroutines.Deferred[0])\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|if (r4 == null) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x001a}"];
Node_21 [shape=record,label="{21\:\ 0x0023|RETURN\l|return new kotlinx.coroutines.Await((kotlinx.coroutines.Deferred[]) r4).await(r6)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024}"];
Node_23 [shape=record,label="{23\:\ 0x002b|throw new java.lang.NullPointerException(\"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray\>\")\l}"];
MethodNode[shape=record,label="{public static final java.lang.Object kotlinx.coroutines.AwaitKt.awaitAll((r5v0 java.util.Collection\<? extends kotlinx.coroutines.Deferred\<? extends T\>\> A[D('$this$awaitAll' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.coroutines.Continuation\<? super java.util.List\<? extends T\>\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0023 \-\> B:13:?, CROSS_EDGE: B:23:0x002b \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<+Lkotlinx\/coroutines\/Deferred\<+TT;\>;\>;Lkotlin\/coroutines\/Continuation\<\-Ljava\/util\/List\<+TT;\>;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

