digraph "CFG forkotlinx.coroutines.ExecutorsKt.from(Ljava\/util\/concurrent\/Executor;)Lkotlinx\/coroutines\/CoroutineDispatcher;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|r1 = null\l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|if ((r2 instanceof kotlinx.coroutines.Executors) == false) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|kotlinx.coroutines.DispatcherExecutor r0 = (kotlinx.coroutines.Executors) r2\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 kotlinx.coroutines.DispatcherExecutor) = (r0v1 kotlinx.coroutines.DispatcherExecutor), (r0v5 kotlinx.coroutines.DispatcherExecutor) binds: [B:18:0x0009, B:17:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|kotlinx.coroutines.CoroutineDispatcher r1 = r0.dispatcher\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|PHI: r1 \l  PHI: (r1v1 kotlinx.coroutines.CoroutineDispatcher) = (r1v0 kotlinx.coroutines.CoroutineDispatcher), (r1v4 kotlinx.coroutines.CoroutineDispatcher) binds: [B:19:0x000a, B:21:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 != null) goto L10\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011}"];
Node_24 [shape=record,label="{24\:\ 0x0019|RETURN\lORIG_RETURN\l|return new kotlinx.coroutines.ExecutorCoroutineDispatcherImpl(r2)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|r0 = null\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.CoroutineDispatcher kotlinx.coroutines.ExecutorsKt.from((r2v0 '$this$asCoroutineDispatcher' java.util.concurrent.Executor A[D('$this$asCoroutineDispatcher' java.util.concurrent.Executor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x000f \-\> B:24:0x0019, CROSS_EDGE: B:19:0x000a \-\> B:22:0x000f, CROSS_EDGE: B:18:0x0009 \-\> B:19:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_22[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_14;
Node_25 -> Node_14;
Node_18 -> Node_19;
}

