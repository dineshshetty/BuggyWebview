digraph "CFG forkotlinx.coroutines.ExecutorsKt.asExecutor(Lkotlinx\/coroutines\/CoroutineDispatcher;)Ljava\/util\/concurrent\/Executor;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$asExecutor' kotlinx.coroutines.CoroutineDispatcher)]) kotlinx.coroutines.ExecutorCoroutineDispatcher  (LINE:108)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0009 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$asExecutor' kotlinx.coroutines.CoroutineDispatcher)]) \l0x0006: CHECK_CAST (r0 I:kotlinx.coroutines.ExecutorCoroutineDispatcher) = (kotlinx.coroutines.ExecutorCoroutineDispatcher) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000d \l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: INVOKE  (r1 I:java.util.concurrent.Executor) = (r0 I:kotlinx.coroutines.ExecutorCoroutineDispatcher) type: VIRTUAL call: kotlinx.coroutines.ExecutorCoroutineDispatcher.getExecutor():java.util.concurrent.Executor A[MD:():java.util.concurrent.Executor (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:? \l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:kotlinx.coroutines.DispatcherExecutor) =  kotlinx.coroutines.DispatcherExecutor \l0x0015: INVOKE  \l  (r0 I:kotlinx.coroutines.DispatcherExecutor)\l  (r2 I:kotlinx.coroutines.CoroutineDispatcher A[D('$this$asExecutor' kotlinx.coroutines.CoroutineDispatcher)])\l type: DIRECT call: kotlinx.coroutines.DispatcherExecutor.\<init\>(kotlinx.coroutines.CoroutineDispatcher):void A[MD:(kotlinx.coroutines.CoroutineDispatcher):void (m)]\l0x0018: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0019: CHECK_CAST (r1 I:java.util.concurrent.Executor) = (java.util.concurrent.Executor) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|RETURN\lORIG_RETURN\l|0x001b: RETURN  (r1 I:java.util.concurrent.Executor) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r1 I:java.util.concurrent.Executor) A[SYNTHETIC]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.util.concurrent.Executor kotlinx.coroutines.ExecutorsKt.asExecutor((r2 I:kotlinx.coroutines.CoroutineDispatcher A[D('$this$asExecutor' kotlinx.coroutines.CoroutineDispatcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0011 \-\> B:24:0x001b, CROSS_EDGE: B:19:0x000a \-\> B:22:0x0011, CROSS_EDGE: B:18:0x0009 \-\> B:19:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001b: r2 '$this$asExecutor' Lkotlinx\/coroutines\/CoroutineDispatcher;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_22[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_14;
Node_25 -> Node_14;
Node_18 -> Node_19;
}

