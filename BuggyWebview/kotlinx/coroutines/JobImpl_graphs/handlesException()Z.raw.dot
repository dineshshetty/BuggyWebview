digraph "CFG forkotlinx.coroutines.JobImpl.handlesException()Z" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlinx.coroutines.ChildHandle) = (r5 I:kotlinx.coroutines.JobImpl) type: VIRTUAL call: kotlinx.coroutines.JobImpl.getParentHandle$kotlinx_coroutines_core():kotlinx.coroutines.ChildHandle A[MD:():kotlinx.coroutines.ChildHandle (m)] (LINE:1335)\l0x0004: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) kotlinx.coroutines.ChildHandleNode \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x000c \l}"];
Node_32 [shape=record,label="{32\:\ 0x0009|0x0009: CHECK_CAST (r0 I:kotlinx.coroutines.ChildHandleNode) = (kotlinx.coroutines.ChildHandleNode) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0011 \l}"];
Node_35 [shape=record,label="{35\:\ 0x000f|0x000f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0015|0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0019 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0018|RETURN\l|0x0018: RETURN  (r1 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0019|LOOP_START\lLOOP:0: B:40:0x0019\-\>B:53:0x0039\l|0x001a: INVOKE  (r3 I:boolean) = (r0 I:kotlinx.coroutines.JobSupport A[D('parentJob' kotlinx.coroutines.JobSupport)]) type: VIRTUAL call: kotlinx.coroutines.JobSupport.getHandlesException$kotlinx_coroutines_core():boolean A[MD:():boolean (m)] (LINE:1337)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001e|0x001e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0022 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0022|0x0022: INVOKE  (r3 I:kotlinx.coroutines.ChildHandle) = (r0 I:kotlinx.coroutines.JobSupport A[D('parentJob' kotlinx.coroutines.JobSupport)]) type: VIRTUAL call: kotlinx.coroutines.JobSupport.getParentHandle$kotlinx_coroutines_core():kotlinx.coroutines.ChildHandle A[MD:():kotlinx.coroutines.ChildHandle (m)] (LINE:1338)\l0x0026: INSTANCE_OF  (r4 I:boolean) = (r3 I:??[OBJECT, ARRAY]) kotlinx.coroutines.ChildHandleNode \l}"];
Node_45 [shape=record,label="{45\:\ 0x0028|0x0028: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x002d \l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|0x002a: CHECK_CAST (r3 I:kotlinx.coroutines.ChildHandleNode) = (kotlinx.coroutines.ChildHandleNode) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x002e|0x002e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0032 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0030|0x0030: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0036|0x0036: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0039 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0039|LOOP_END\lLOOP:0: B:40:0x0019\-\>B:53:0x0039\l|0x0039: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('parentJob' kotlinx.coroutines.JobSupport)]) = (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0038|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:boolean) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0032|0x0032: INVOKE  (r3 I:kotlinx.coroutines.JobSupport) = (r3 I:kotlinx.coroutines.ChildHandleNode) type: VIRTUAL call: kotlinx.coroutines.ChildHandleNode.getJob():kotlinx.coroutines.JobSupport A[MD:():kotlinx.coroutines.JobSupport (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x002d|0x002d: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0020|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|RETURN\l|0x0020: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0021: RETURN  (r1 I:boolean) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0011|0x0011: INVOKE  (r0 I:kotlinx.coroutines.JobSupport) = (r0 I:kotlinx.coroutines.ChildHandleNode) type: VIRTUAL call: kotlinx.coroutines.ChildHandleNode.getJob():kotlinx.coroutines.JobSupport A[MD:():kotlinx.coroutines.JobSupport (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x000c|0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final boolean kotlinx.coroutines.JobImpl.handlesException((r5 'this' I:kotlinx.coroutines.JobImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x0021 \-\> B:29:?, CROSS_EDGE: B:52:0x0038 \-\> B:29:?, BACK_EDGE: B:53:0x0039 \-\> B:40:0x0019, CROSS_EDGE: B:50:0x0032 \-\> B:51:0x0036, CROSS_EDGE: B:47:0x002d \-\> B:48:0x002e, CROSS_EDGE: B:36:0x0011 \-\> B:37:0x0015, CROSS_EDGE: B:33:0x000c \-\> B:34:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x003a: r0 'parentJob' Lkotlinx\/coroutines\/JobSupport;\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_29;
Node_40 -> Node_41;
Node_41 -> Node_44;
Node_41 -> Node_55[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_51;
Node_51 -> Node_53;
Node_51 -> Node_54[style=dashed];
Node_53 -> Node_40;
Node_54 -> Node_52;
Node_52 -> Node_29;
Node_50 -> Node_51;
Node_47 -> Node_48;
Node_55 -> Node_42;
Node_42 -> Node_29;
Node_36 -> Node_37;
Node_33 -> Node_34;
}

