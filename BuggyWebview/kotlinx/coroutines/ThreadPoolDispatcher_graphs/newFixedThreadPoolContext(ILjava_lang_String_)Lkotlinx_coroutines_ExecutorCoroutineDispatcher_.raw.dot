digraph "CFG forkotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext(ILjava\/lang\/String;)Lkotlinx\/coroutines\/ExecutorCoroutineDispatcher;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:63)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|0x0001: IF  (r3 I:??[int, byte, short, char] A[D('nThreads' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:16:0x0004 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x001d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.util.concurrent.atomic.AtomicInteger) =  java.util.concurrent.atomic.AtomicInteger  (LINE:64)\l0x0009: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicInteger) type: DIRECT call: java.util.concurrent.atomic.AtomicInteger.\<init\>():void A[MD:():void (c)]\l0x000c: NEW_INSTANCE  (r1 I:kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0) =  kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0  (LINE:65)\l0x000e: INVOKE  \l  (r1 I:kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0)\l  (r3 I:int A[D('nThreads' int)])\l  (r4 I:java.lang.String A[D('name' java.lang.String)])\l  (r0 I:java.util.concurrent.atomic.AtomicInteger A[D('threadNo' java.util.concurrent.atomic.AtomicInteger)])\l type: DIRECT call: kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0.\<init\>(int, java.lang.String, java.util.concurrent.atomic.AtomicInteger):void A[MD:(int, java.lang.String, java.util.concurrent.atomic.AtomicInteger):void (m)]\l0x0011: INVOKE  (r1 I:java.util.concurrent.ScheduledExecutorService) = (r3 I:int A[D('nThreads' int)]), (r1 I:java.util.concurrent.ThreadFactory) type: STATIC call: java.util.concurrent.Executors.newScheduledThreadPool(int, java.util.concurrent.ThreadFactory):java.util.concurrent.ScheduledExecutorService A[MD:(int, java.util.concurrent.ThreadFactory):java.util.concurrent.ScheduledExecutorService (c)]\l0x0015: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('executor' java.util.concurrent.ScheduledExecutorService)])  (LINE:70)\l0x0016: CHECK_CAST (r2 I:java.util.concurrent.ExecutorService) = (java.util.concurrent.ExecutorService) (r2 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r2 I:kotlinx.coroutines.ExecutorCoroutineDispatcher) = (r2 I:java.util.concurrent.ExecutorService) type: STATIC call: kotlinx.coroutines.ExecutorsKt.from(java.util.concurrent.ExecutorService):kotlinx.coroutines.ExecutorCoroutineDispatcher A[MD:(java.util.concurrent.ExecutorService):kotlinx.coroutines.ExecutorCoroutineDispatcher (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|RETURN\l|0x001c: RETURN  (r2 I:kotlinx.coroutines.ExecutorCoroutineDispatcher) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('threadNo' java.util.concurrent.atomic.AtomicInteger)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:73)\l0x001e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:63)\l0x0020: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0023: CONST_STR  (r2 I:java.lang.String) =  \"Expected at least one thread, but \" \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0028: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:int A[D('nThreads' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x002b: CONST_STR  (r2 I:java.lang.String) =  \" specified\" \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0030: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-ThreadPoolDispatcherKt$newFixedThreadPoolContext$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0034: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0036: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003a: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|0x003d: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.ExecutorCoroutineDispatcher kotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext((r3 I:int A[D('nThreads' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x003d \-\> B:12:?, CROSS_EDGE: B:14:0x0001 \-\> B:17:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x001d: r0 'threadNo' Ljava\/util\/concurrent\/atomic\/AtomicInteger;\l  0x0015\-0x001d: r1 'executor' Ljava\/util\/concurrent\/ScheduledExecutorService;\l  0x001e\-0x0034: r0 '$i$a$\-require\-ThreadPoolDispatcherKt$newFixedThreadPoolContext$1' I\l  \-1 \-0x003d: r3 'nThreads' I\l  \-1 \-0x003d: r4 'name' Ljava\/lang\/String;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

