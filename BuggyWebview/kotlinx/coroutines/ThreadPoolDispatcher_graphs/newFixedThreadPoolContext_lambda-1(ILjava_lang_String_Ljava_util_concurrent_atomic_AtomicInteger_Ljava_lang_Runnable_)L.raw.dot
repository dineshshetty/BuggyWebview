digraph "CFG forkotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext$lambda\-1(ILjava\/lang\/String;Ljava\/util\/concurrent\/atomic\/AtomicInteger;Ljava\/lang\/Runnable;)Ljava\/lang\/Thread;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.lang.Thread) =  java.lang.Thread  (LINE:66)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0003|0x0003: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$nThreads' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0007 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$name' java.lang.String)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|0x001f: INVOKE  (r0 I:java.lang.Thread), (r7 I:java.lang.Runnable A[D('runnable' java.lang.Runnable)]), (r2 I:java.lang.String) type: DIRECT call: java.lang.Thread.\<init\>(java.lang.Runnable, java.lang.String):void A[MD:(java.lang.Runnable, java.lang.String):void (c)]\l0x0022: INVOKE  (r0 I:java.lang.Thread A[D('t' java.lang.Thread)]), (r1 I:boolean) type: VIRTUAL call: java.lang.Thread.setDaemon(boolean):void A[MD:(boolean):void (c)] (LINE:67)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|RETURN\l|0x0025: RETURN  (r0 I:java.lang.Thread A[D('t' java.lang.Thread)])  (LINE:68)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|0x0007: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0009: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x000c: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.String A[D('$name' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x000f: CONST  (r3 I:??[int, float, short, byte, char]) = (45 ??[int, float, short, byte, char]) \l0x0011: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0014: INVOKE  (r3 I:int) = (r6 I:java.util.concurrent.atomic.AtomicInteger A[D('$threadNo' java.util.concurrent.atomic.AtomicInteger)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicInteger.incrementAndGet():int A[MD:():int (c)]\l0x0018: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x001b: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
MethodNode[shape=record,label="{public static final java.lang.Thread kotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext$lambda\-1((r4 I:int A[D('$nThreads' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('$name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.util.concurrent.atomic.AtomicInteger A[D('$threadNo' java.util.concurrent.atomic.AtomicInteger), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Runnable A[D('runnable' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x0007 \-\> B:14:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0022\-0x0025: r0 't' Ljava\/lang\/Thread;\l  \-1 \-0x0025: r4 '$nThreads' I\l  \-1 \-0x0025: r5 '$name' Ljava\/lang\/String;\l  \-1 \-0x0025: r6 '$threadNo' Ljava\/util\/concurrent\/atomic\/AtomicInteger;\l  \-1 \-0x0025: r7 'runnable' Ljava\/lang\/Runnable;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

