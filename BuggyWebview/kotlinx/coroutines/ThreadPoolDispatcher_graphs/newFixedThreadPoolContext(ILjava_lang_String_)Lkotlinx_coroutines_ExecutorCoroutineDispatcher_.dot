digraph "CFG forkotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext(ILjava\/lang\/String;)Lkotlinx\/coroutines\/ExecutorCoroutineDispatcher;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|r0 = true\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|if (r3 \< 1) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|r0 = false\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v6 boolean) binds: [B:14:0x0001, B:16:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|java.util.concurrent.atomic.AtomicInteger r0 = new java.util.concurrent.atomic.AtomicInteger()\ljava.util.concurrent.ScheduledExecutorService r1 = java.util.concurrent.Executors.newScheduledThreadPool(r3, new kotlinx.coroutines.ThreadPoolDispatcherKt$$ExternalSyntheticLambda0())\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|RETURN\l|return kotlinx.coroutines.ExecutorsKt.from(r1)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Expected at least one thread, but \")\lr1.append(r3)\lr1.append(\" specified\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x003d|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.ExecutorCoroutineDispatcher kotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext((r3v0 'nThreads' int A[D('nThreads' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'name' java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x003d \-\> B:12:?, CROSS_EDGE: B:14:0x0001 \-\> B:17:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

