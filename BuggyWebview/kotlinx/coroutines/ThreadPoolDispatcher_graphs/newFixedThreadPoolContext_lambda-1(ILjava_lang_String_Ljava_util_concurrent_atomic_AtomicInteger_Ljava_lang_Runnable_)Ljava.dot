digraph "CFG forkotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext$lambda\-1(ILjava\/lang\/String;Ljava\/util\/concurrent\/atomic\/AtomicInteger;Ljava\/lang\/Runnable;)Ljava\/lang\/Thread;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000}"];
Node_11 [shape=record,label="{11\:\ 0x0003|if (r4 != 1) goto L7\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|r2 = r5\l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|PHI: r2 \l  PHI: (r2v2 java.lang.String) = (r2v1 java.lang.String), (r2v3 java.lang.String) binds: [B:13:0x0007, B:12:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Thread r0 = new java.lang.Thread(r7, r2)\lr0.setDaemon(true)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(r5)\lr2.append('\-')\lr2.append(r6.incrementAndGet())\ljava.lang.String r2 = r2.toString()\l}"];
MethodNode[shape=record,label="{public static final java.lang.Thread kotlinx.coroutines.ThreadPoolDispatcherKt.newFixedThreadPoolContext$lambda\-1((r4v0 '$nThreads' int A[D('$nThreads' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 '$name' java.lang.String A[D('$name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 '$threadNo' java.util.concurrent.atomic.AtomicInteger A[D('$threadNo' java.util.concurrent.atomic.AtomicInteger), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'runnable' java.lang.Runnable A[D('runnable' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x0007 \-\> B:14:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

