digraph "CFG forkotlinx.coroutines.CancellableContinuationImpl.detachChild$kotlinx_coroutines_core()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.DisposableHandle) = (r2 I:kotlinx.coroutines.CancellableContinuationImpl) kotlinx.coroutines.CancellableContinuationImpl.parentHandle kotlinx.coroutines.DisposableHandle  (LINE:495)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN   \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r0 I:kotlinx.coroutines.DisposableHandle A[D('handle' kotlinx.coroutines.DisposableHandle)]) type: INTERFACE call: kotlinx.coroutines.DisposableHandle.dispose():void A[MD:():void (m)] (LINE:496)\l0x0008: SGET  (r1 I:kotlinx.coroutines.NonDisposableHandle) =  kotlinx.coroutines.NonDisposableHandle.INSTANCE kotlinx.coroutines.NonDisposableHandle  (LINE:497)\l0x000a: CHECK_CAST (r1 I:kotlinx.coroutines.DisposableHandle) = (kotlinx.coroutines.DisposableHandle) (r1 I:??[OBJECT, ARRAY]) \l0x000c: IPUT  (r1 I:kotlinx.coroutines.DisposableHandle), (r2 I:kotlinx.coroutines.CancellableContinuationImpl) kotlinx.coroutines.CancellableContinuationImpl.parentHandle kotlinx.coroutines.DisposableHandle \l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|0x000e: RETURN    (LINE:498)\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.CancellableContinuationImpl.detachChild$kotlinx_coroutines_core((r2 'this' I:kotlinx.coroutines.CancellableContinuationImpl\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000e \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x000e: r0 'handle' Lkotlinx\/coroutines\/DisposableHandle;\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

