digraph "CFG forkotlinx.coroutines.CancellableContinuationImpl.completeResume(Ljava\/lang\/Object;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0004|if (kotlinx.coroutines.Debug.getASSERTIONS_ENABLED() == false) goto L11\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006}"];
Node_19 [shape=record,label="{19\:\ 0x0009|if (r3 != kotlinx.coroutines.CancellableContinuationImplKt.RESUME_TOKEN) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|r1 = true\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v3 boolean) binds: [B:21:0x000d, B:20:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L7\l}"];
Node_24 [shape=record,label="{24\:\ 0x0011}"];
Node_25 [shape=record,label="{25\:\ 0x0016|throw new java.lang.AssertionError()\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|r1 = false\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|dispatchResume(r2.resumeMode)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001c|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.CancellableContinuationImpl.completeResume((r2v0 'this' kotlinx.coroutines.CancellableContinuationImpl\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'token' java.lang.Object A[D('token' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001c \-\> B:15:?, CROSS_EDGE: B:21:0x000d \-\> B:22:0x000e, CROSS_EDGE: B:17:0x0004 \-\> B:26:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [kotlinx.coroutines.CancellableContinuation.completeResume(java.lang.Object):void]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_26[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_21 -> Node_22;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

