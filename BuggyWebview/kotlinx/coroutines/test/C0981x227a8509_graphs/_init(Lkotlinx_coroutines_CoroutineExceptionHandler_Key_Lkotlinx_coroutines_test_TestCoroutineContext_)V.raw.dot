digraph "CFG forkotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1.\<init\>(Lkotlinx\/coroutines\/CoroutineExceptionHandler$Key;Lkotlinx\/coroutines\/test\/TestCoroutineContext;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IPUT  \l  (r2 I:kotlinx.coroutines.test.TestCoroutineContext)\l  (r0 I:kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1)\l kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1.this$0 kotlinx.coroutines.test.TestCoroutineContext \l0x0002: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$super_call_param$1' kotlinx.coroutines.CoroutineExceptionHandler$Key)])  (LINE:49)\l0x0003: CHECK_CAST (r2 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r2 I:??[OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:kotlin.coroutines.AbstractCoroutineContextElement), (r2 I:kotlin.coroutines.CoroutineContext$Key) type: DIRECT call: kotlin.coroutines.AbstractCoroutineContextElement.\<init\>(kotlin.coroutines.CoroutineContext$Key):void A[MD:(kotlin.coroutines.CoroutineContext$Key\<?\>):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|0x0008: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1.\<init\>((r0 'this' I:kotlinx.coroutines.test.TestCoroutineContext$special$$inlined$CoroutineExceptionHandler$1 A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlinx.coroutines.CoroutineExceptionHandler$Key A[D('$super_call_param$1' kotlinx.coroutines.CoroutineExceptionHandler$Key), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlinx.coroutines.test.TestCoroutineContext A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0008: r1 '$super_call_param$1' Lkotlinx\/coroutines\/CoroutineExceptionHandler$Key;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

