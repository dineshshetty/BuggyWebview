digraph "CFG forkotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1.\<init\>(Lkotlinx\/coroutines\/test\/TestCoroutineContext;Lkotlinx\/coroutines\/test\/TimedRunnableObsolete;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IPUT  \l  (r1 I:kotlinx.coroutines.test.TestCoroutineContext A[D('$receiver' kotlinx.coroutines.test.TestCoroutineContext)])\l  (r0 I:kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1)\l kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1.this$0 kotlinx.coroutines.test.TestCoroutineContext \l0x0002: IPUT  \l  (r2 I:kotlinx.coroutines.test.TimedRunnableObsolete A[D('$node' kotlinx.coroutines.test.TimedRunnableObsolete)])\l  (r0 I:kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1)\l kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1.$node kotlinx.coroutines.test.TimedRunnableObsolete \l0x0004: INVOKE  (r0 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:216)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|0x0007: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1.\<init\>((r0 'this' I:kotlinx.coroutines.test.TestCoroutineContext$Dispatcher$invokeOnTimeout$1 A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlinx.coroutines.test.TestCoroutineContext A[D('$receiver' kotlinx.coroutines.test.TestCoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlinx.coroutines.test.TimedRunnableObsolete A[D('$node' kotlinx.coroutines.test.TimedRunnableObsolete), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | ANONYMOUS_CONSTRUCTOR\lUSE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0007: r1 '$receiver' Lkotlinx\/coroutines\/test\/TestCoroutineContext;\l  \-1 \-0x0007: r2 '$node' Lkotlinx\/coroutines\/test\/TimedRunnableObsolete;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

