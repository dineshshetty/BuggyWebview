digraph "CFG forkotlinx.coroutines.test.TestCoroutineContext.Dispatcher.processNextEvent()J" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:kotlinx.coroutines.test.TestCoroutineContext) = (r2 I:kotlinx.coroutines.test.TestCoroutineContext$Dispatcher) kotlinx.coroutines.test.TestCoroutineContext.Dispatcher.this$0 kotlinx.coroutines.test.TestCoroutineContext  (LINE:223)\l0x0002: INVOKE  (r0 I:long) = (r0 I:kotlinx.coroutines.test.TestCoroutineContext) type: STATIC call: kotlinx.coroutines.test.TestCoroutineContext.access$processNextEvent(kotlinx.coroutines.test.TestCoroutineContext):long A[MD:(kotlinx.coroutines.test.TestCoroutineContext):long (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public long kotlinx.coroutines.test.TestCoroutineContext.Dispatcher.processNextEvent((r2 'this' I:kotlinx.coroutines.test.TestCoroutineContext$Dispatcher A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlinx.coroutines.EventLoop.processNextEvent():long]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

