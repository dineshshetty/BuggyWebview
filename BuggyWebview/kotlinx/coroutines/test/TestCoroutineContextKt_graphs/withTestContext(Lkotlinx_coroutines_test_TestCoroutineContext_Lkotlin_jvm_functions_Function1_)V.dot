digraph "CFG forkotlinx.coroutines.test.TestCoroutineContextKt.withTestContext(Lkotlinx\/coroutines\/test\/TestCoroutineContext;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r10.invoke(r9)\ljava.lang.Iterable r2 = r9.getExceptions()\lr5 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if ((r2 instanceof java.util.Collection) == false) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x0018|if (((java.util.Collection) r2).isEmpty() == false) goto L10\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|PHI: r5 \l  PHI: (r5v2 boolean) = (r5v0 boolean), (r5v1 boolean), (r5v0 boolean) binds: [B:18:0x0034, B:12:0x0031, B:5:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 == false) goto L8\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0039}"];
Node_17 [shape=record,label="{17\:\ 0x0048|throw new java.lang.AssertionError(kotlin.jvm.internal.Intrinsics.stringPlus(\"Coroutine encountered unhandled exceptions:n\", r9.getExceptions()))\l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|java.util.Iterator r4 = r2.iterator()\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|LOOP_START\lLOOP:0: B:8:0x001f\-\>B:11:0x002f\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|if (r4.hasNext() == false) goto L17\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|java.lang.Object r6 = r4.next()\ljava.lang.Throwable r7 = (java.lang.Throwable) r6\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|LOOP_END\lLOOP:0: B:8:0x001f\-\>B:11:0x002f\l|if ((r7 instanceof java.util.concurrent.CancellationException) != false) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x0031|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|r5 = false\l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.test.TestCoroutineContextKt.withTestContext((r9v0 'testContext' kotlinx.coroutines.test.TestCoroutineContext A[D('testContext' kotlinx.coroutines.test.TestCoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 kotlin.jvm.functions.Function1\<? super kotlinx.coroutines.test.TestCoroutineContext, kotlin.Unit\> A[D('testBody' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=This API has been deprecated to integrate with Structured Concurrency., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=testContext.runBlockingTest(testBody), imports=[[kotlin.coroutines.test]]\}\}\}\}\}\}\lBACK_EDGE: B:11:0x002f \-\> B:8:0x001f, CROSS_EDGE: B:17:0x0048 \-\> B:1:?, CROSS_EDGE: B:9:0x0023 \-\> B:14:0x0034, CROSS_EDGE: B:5:0x0018 \-\> B:14:0x0034, CROSS_EDGE: B:3:0x000f \-\> B:7:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlinx\/coroutines\/test\/TestCoroutineContext;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlinx\/coroutines\/test\/TestCoroutineContext;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_14[style=dashed];
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_1;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_11 -> Node_19[style=dashed];
Node_19 -> Node_12;
Node_12 -> Node_14;
Node_18 -> Node_14;
}

