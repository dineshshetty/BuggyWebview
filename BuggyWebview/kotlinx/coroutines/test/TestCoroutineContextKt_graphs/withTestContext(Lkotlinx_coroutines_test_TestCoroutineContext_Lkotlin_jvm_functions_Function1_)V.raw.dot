digraph "CFG forkotlinx.coroutines.test.TestCoroutineContextKt.withTestContext(Lkotlinx\/coroutines\/test\/TestCoroutineContext;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('testContext' kotlinx.coroutines.test.TestCoroutineContext)])  (LINE:254)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: INVOKE  \l  (r10 I:kotlin.jvm.functions.Function1 A[D('testBody' kotlin.jvm.functions.Function1)])\l  (r0 I:java.lang.Object A[D('$this$withTestContext_u24lambda_u2d1' kotlinx.coroutines.test.TestCoroutineContext)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:255)\l0x0005: INVOKE  (r2 I:java.util.List) = \l  (r0 I:kotlinx.coroutines.test.TestCoroutineContext A[D('$this$withTestContext_u24lambda_u2d1' kotlinx.coroutines.test.TestCoroutineContext)])\l type: VIRTUAL call: kotlinx.coroutines.test.TestCoroutineContext.getExceptions():java.util.List A[MD:():java.util.List\<java.lang.Throwable\> (m)] (LINE:256)\l0x0009: CHECK_CAST (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:??[OBJECT, ARRAY]) \l0x000b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INSTANCE_OF  (r4 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) java.util.Collection  (LINE:262)\l0x000e: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|0x000f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0011|0x0011: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) \l0x0012: CHECK_CAST (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:??[OBJECT, ARRAY]) \l0x0014: INVOKE  (r4 I:boolean) = (r4 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|0x0018: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x001b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|0x0034: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0039  (LINE:256)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0038|RETURN\l|0x0038: RETURN    (LINE:260)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: NEW_INSTANCE  (r2 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:257)\l0x003b: INVOKE  (r3 I:java.util.List) = \l  (r0 I:kotlinx.coroutines.test.TestCoroutineContext A[D('$this$withTestContext_u24lambda_u2d1' kotlinx.coroutines.test.TestCoroutineContext)])\l type: VIRTUAL call: kotlinx.coroutines.test.TestCoroutineContext.getExceptions():java.util.List A[MD:():java.util.List\<java.lang.Throwable\> (m)]\l0x003f: CONST_STR  (r4 I:java.lang.String) =  \"Coroutine encountered unhandled exceptions:n\" \l0x0041: INVOKE  (r3 I:java.lang.String) = (r4 I:java.lang.String), (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0045: INVOKE  (r2 I:java.lang.AssertionError), (r3 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0048|0x0048: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_7 [shape=record,label="{7\:\ 0x001b|0x001b: INVOKE  (r4 I:java.util.Iterator) = (r2 I:java.lang.Iterable A[D('$this$all$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:263)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|LOOP_START\lLOOP:0: B:8:0x001f\-\>B:11:0x002f\l|0x001f: INVOKE  (r6 I:boolean) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0034 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: INVOKE  (r6 I:java.lang.Object) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0029: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x002a: CHECK_CAST (r7 I:java.lang.Throwable) = (java.lang.Throwable) (r7 I:??[OBJECT, ARRAY]) \l0x002c: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002d: INSTANCE_OF  (r7 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('it' java.lang.Throwable)]) java.util.concurrent.CancellationException  (LINE:256)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002f|LOOP_END\lLOOP:0: B:8:0x001f\-\>B:11:0x002f\l|0x002f: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.Throwable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0031|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|0x0031: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.test.TestCoroutineContextKt.withTestContext((r9 I:kotlinx.coroutines.test.TestCoroutineContext A[D('testContext' kotlinx.coroutines.test.TestCoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.functions.Function1\<? super kotlinx.coroutines.test.TestCoroutineContext, kotlin.Unit\> A[D('testBody' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{level=\{ENCODED_FIELD: Lkotlin\/DeprecationLevel;\-\>ERROR:Lkotlin\/DeprecationLevel;\}, message=This API has been deprecated to integrate with Structured Concurrency., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=testContext.runBlockingTest(testBody), imports=[[kotlin.coroutines.test]]\}\}\}\}\}\}\lBACK_EDGE: B:11:0x002f \-\> B:8:0x001f, CROSS_EDGE: B:17:0x0048 \-\> B:1:?, CROSS_EDGE: B:9:0x0023 \-\> B:14:0x0034, CROSS_EDGE: B:5:0x0018 \-\> B:14:0x0034, CROSS_EDGE: B:3:0x000f \-\> B:7:0x001b\lDebug Info:\l  0x002c\-0x002f: r7 'it' Ljava\/lang\/Throwable;\l  0x002d\-0x002f: r8 '$i$a$\-all\-TestCoroutineContextKt$withTestContext$1$1' I\l  0x0029\-0x0033: r6 'element$iv' Ljava\/lang\/Object;\l  0x000b\-0x0034: r2 '$this$all$iv' Ljava\/lang\/Iterable;\l  0x000c\-0x0034: r3 '$i$f$all' I\l  0x0001\-0x0037: r0 '$this$withTestContext_u24lambda_u2d1' Lkotlinx\/coroutines\/test\/TestCoroutineContext;\l  0x0002\-0x0037: r1 '$i$a$\-with\-TestCoroutineContextKt$withTestContext$1' I\l  0x0039\-0x0048: r0 '$this$withTestContext_u24lambda_u2d1' Lkotlinx\/coroutines\/test\/TestCoroutineContext;\l  0x0039\-0x0048: r1 '$i$a$\-with\-TestCoroutineContextKt$withTestContext$1' I\l  \-1 \-0x0048: r9 'testContext' Lkotlinx\/coroutines\/test\/TestCoroutineContext;\l  \-1 \-0x0048: r10 'testBody' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Lkotlinx\/coroutines\/test\/TestCoroutineContext;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlinx\/coroutines\/test\/TestCoroutineContext;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_14[style=dashed];
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_1;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_18;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_11 -> Node_19[style=dashed];
Node_19 -> Node_12;
Node_12 -> Node_14;
Node_18 -> Node_14;
}

