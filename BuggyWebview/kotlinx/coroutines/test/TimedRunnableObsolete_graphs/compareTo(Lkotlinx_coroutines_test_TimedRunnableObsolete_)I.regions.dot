digraph "CFG forkotlinx.coroutines.test.TimedRunnableObsolete.compareTo(Lkotlinx\/coroutines\/test\/TimedRunnableObsolete;)I" {
subgraph cluster_Region_1835695259 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|long long r0 = r5.time\llong long r2 = r6.time\l}"];
subgraph cluster_Region_717992412 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1682574894 {
label = "IF [B:11:0x0006] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0006|if (r0 == r2) goto L3\l}"];
subgraph cluster_Region_373024541 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.jvm.internal.Intrinsics.compare(r5.count, r6.count)\l}"];
}
}
subgraph cluster_Region_1952804252 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0015|RETURN\lORIG_RETURN\l|return kotlin.jvm.internal.Intrinsics.compare(r0, r2)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0008}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0011}"];
MethodNode[shape=record,label="{public int kotlinx.coroutines.test.TimedRunnableObsolete.compareTo((r5v0 'this' kotlinx.coroutines.test.TimedRunnableObsolete A[IMMUTABLE_TYPE, THIS]), (r6v0 'other' kotlinx.coroutines.test.TimedRunnableObsolete A[D('other' kotlinx.coroutines.test.TimedRunnableObsolete), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:14:0x0015\lINLINE_NOT_NEEDED\lREPLACED_BY: kotlinx.coroutines.test.TimedRunnableObsolete.compareTo(kotlinx.coroutines.test.TimedRunnableObsolete):int\lBRIDGED_BY: kotlinx.coroutines.test.TimedRunnableObsolete.compareTo(kotlinx.coroutines.test.TimedRunnableObsolete):int\lMETHOD_OVERRIDE: [ClspMth\{java.lang.Comparable.compareTo(T):int\}]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_15 -> Node_9;
Node_14 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_15;
Node_13 -> Node_14;
}

