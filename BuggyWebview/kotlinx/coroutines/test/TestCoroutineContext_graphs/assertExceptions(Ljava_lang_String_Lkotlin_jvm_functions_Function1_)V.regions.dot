digraph "CFG forkotlinx.coroutines.test.TestCoroutineContext.assertExceptions(Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_734494408 {
label = "R(1:(2:(1:7)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_1431224250 {
label = "R(2:(1:7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1326683052 {
label = "IF [B:19:0x000c] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000c|if (r3.invoke(r1.uncaughtExceptions).booleanValue() == false) goto L6\l}"];
subgraph cluster_Region_201984516 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0019|throw new java.lang.AssertionError(r2)\l}"];
}
}
subgraph cluster_Region_480973939 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x000e|r1.uncaughtExceptions.clear()\l}"];
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0000}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0013}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0014}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.test.TestCoroutineContext.assertExceptions((r1v0 'this' kotlinx.coroutines.test.TestCoroutineContext A[IMMUTABLE_TYPE, THIS]), (r2v0 'message' java.lang.String A[D('message' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function1\<? super java.util.List\<? extends java.lang.Throwable\>, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0019 \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/List\<+Ljava\/lang\/Throwable;\>;Ljava\/lang\/Boolean;\>;)V\l}"];
MethodNode -> Node_16;Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_23 -> Node_17;
Node_20 -> Node_21;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_21 -> Node_17;
Node_22 -> Node_23;
}

