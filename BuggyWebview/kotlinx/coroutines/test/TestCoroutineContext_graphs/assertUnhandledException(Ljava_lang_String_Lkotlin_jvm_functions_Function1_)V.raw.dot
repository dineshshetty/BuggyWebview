digraph "CFG forkotlinx.coroutines.test.TestCoroutineContext.assertUnhandledException(Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: IGET  (r0 I:java.util.List\<java.lang.Throwable\>) = (r2 I:kotlinx.coroutines.test.TestCoroutineContext) kotlinx.coroutines.test.TestCoroutineContext.uncaughtExceptions java.util.List  (LINE:121)\l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.List) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0022 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|0x0009: IGET  (r0 I:java.util.List\<java.lang.Throwable\>) = (r2 I:kotlinx.coroutines.test.TestCoroutineContext) kotlinx.coroutines.test.TestCoroutineContext.uncaughtExceptions java.util.List \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0010: INVOKE  (r0 I:java.lang.Object) = (r4 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0014: CHECK_CAST (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0022 \l}"];
Node_26 [shape=record,label="{26\:\ 0x001c|0x001c: IGET  (r0 I:java.util.List\<java.lang.Throwable\>) = (r2 I:kotlinx.coroutines.test.TestCoroutineContext) kotlinx.coroutines.test.TestCoroutineContext.uncaughtExceptions java.util.List  (LINE:122)\l0x001e: INVOKE  (r0 I:java.util.List) type: INTERFACE call: java.util.List.clear():void A[MD:():void (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|RETURN\l|0x0021: RETURN    (LINE:123)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:121)\l0x0024: INVOKE  (r0 I:java.lang.AssertionError), (r3 I:java.lang.Object A[D('message' java.lang.String)]) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0027|0x0027: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.test.TestCoroutineContext.assertUnhandledException((r2 'this' I:kotlinx.coroutines.test.TestCoroutineContext A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.String A[D('message' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0027 \-\> B:21:?, CROSS_EDGE: B:23:0x0007 \-\> B:28:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0027: r3 'message' Ljava\/lang\/String;\l  \-1 \-0x0027: r4 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Ljava\/lang\/Boolean;\>;)V\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_21;
}

