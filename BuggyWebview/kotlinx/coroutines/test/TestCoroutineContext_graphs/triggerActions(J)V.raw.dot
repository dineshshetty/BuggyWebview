digraph "CFG forkotlinx.coroutines.test.TestCoroutineContext.triggerActions(J)V" {
Node_68 [shape=record,label="{68\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_70 [shape=record,label="{70\:\ 0x0000|LOOP_START\lLOOP:0: B:70:0x0000\-\>B:93:0x003e\l|0x0001: IGET  (r0 I:kotlinx.coroutines.internal.ThreadSafeHeap\<kotlinx.coroutines.test.TimedRunnableObsolete\>) = (r12 I:kotlinx.coroutines.test.TestCoroutineContext) kotlinx.coroutines.test.TestCoroutineContext.queue kotlinx.coroutines.internal.ThreadSafeHeap  (LINE:187)\l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:272)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0005|0x0005: MONITOR_ENTER  (r0 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.ThreadSafeHeap)])  (LINE:273)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0006|0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_97 [shape=record,label="{97\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_73 [shape=record,label="{73\:\ 0x0007|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0042, blocks: (B:73:0x0007, B:78:0x0010, B:83:0x0020, B:84:0x0025), top: B:97:0x0007 \}\lCatch: all \-\> 0x0042\l|0x0007: INVOKE  (r4 I:kotlinx.coroutines.internal.ThreadSafeHeapNode) = (r0 I:kotlinx.coroutines.internal.ThreadSafeHeap A[D('this_$iv' kotlinx.coroutines.internal.ThreadSafeHeap)]) type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.firstImpl():kotlinx.coroutines.internal.ThreadSafeHeapNode A[Catch: all \-\> 0x0042, MD:():T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> (m), TRY_ENTER, TRY_LEAVE] (LINE:274)\l}"];
Node_74 [shape=record,label="{74\:\ 0x000b|0x000b: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_75 [shape=record,label="{75\:\ 0x000c|0x000c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0010 \l}"];
Node_76 [shape=record,label="{76\:\ 0x000e|0x000e: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.ThreadSafeHeap)]) \l}"];
Node_87 [shape=record,label="{87\:\ 0x002c|0x002c: CHECK_CAST (r5 I:kotlinx.coroutines.test.TimedRunnableObsolete) = (kotlinx.coroutines.test.TimedRunnableObsolete) (r5 I:??[OBJECT, ARRAY])  (LINE:187)\l}"];
Node_88 [shape=record,label="{88\:\ 0x002e|0x002e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:90:0x0031 \l}"];
Node_90 [shape=record,label="{90\:\ 0x0031|0x0031: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY])  (LINE:187)\l0x0032: IGET  (r1 I:long) = (r0 I:kotlinx.coroutines.test.TimedRunnableObsolete A[D('current' kotlinx.coroutines.test.TimedRunnableObsolete)]) kotlinx.coroutines.test.TimedRunnableObsolete.time long  (LINE:189)\l0x0034: CONST  (r3 I:??[long, double]) = (0 ??[long, double]) \l0x0036: CMP_L  (r5 I:int) = (r1 I:long), (r3 I:long) \l}"];
Node_91 [shape=record,label="{91\:\ 0x0038|0x0038: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:101:0x003e \l}"];
Node_92 [shape=record,label="{92\:\ 0x003a|0x003a: IGET  (r1 I:long) = (r0 I:kotlinx.coroutines.test.TimedRunnableObsolete A[D('current' kotlinx.coroutines.test.TimedRunnableObsolete)]) kotlinx.coroutines.test.TimedRunnableObsolete.time long \l0x003c: IPUT  (r1 I:long), (r12 I:kotlinx.coroutines.test.TestCoroutineContext) kotlinx.coroutines.test.TestCoroutineContext.time long \l}"];
Node_100 [shape=record,label="{100\:\ 0x003e|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x003e|LOOP_END\lLOOP:0: B:70:0x0000\-\>B:93:0x003e\l|0x003e: INVOKE  (r0 I:kotlinx.coroutines.test.TimedRunnableObsolete A[D('current' kotlinx.coroutines.test.TimedRunnableObsolete)]) type: VIRTUAL call: kotlinx.coroutines.test.TimedRunnableObsolete.run():void A[MD:():void (m)] (LINE:190)\l}"];
Node_101 [shape=record,label="{101\:\ 0x003e|SYNTHETIC\l}"];
Node_99 [shape=record,label="{99\:\ 0x0030|SYNTHETIC\l}"];
Node_89 [shape=record,label="{89\:\ 0x0030|RETURN\l|0x0030: RETURN    (LINE:192)\l}"];
Node_69 [shape=record,label="{69\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_78 [shape=record,label="{78\:\ 0x0010|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0042, blocks: (B:73:0x0007, B:78:0x0010, B:83:0x0020, B:84:0x0025), top: B:97:0x0007 \}\lCatch: all \-\> 0x0042\l|0x0010: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('first$iv' kotlinx.coroutines.internal.ThreadSafeHeapNode)]) A[TRY_ENTER] (LINE:275)\l0x0011: CHECK_CAST (r6 I:kotlinx.coroutines.test.TimedRunnableObsolete) = (kotlinx.coroutines.test.TimedRunnableObsolete) (r6 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0042]\l0x0013: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: IGET  (r8 I:long) = (r6 I:kotlinx.coroutines.test.TimedRunnableObsolete A[D('it' kotlinx.coroutines.test.TimedRunnableObsolete)]) kotlinx.coroutines.test.TimedRunnableObsolete.time long A[Catch: all \-\> 0x0042] (LINE:187)\l0x0016: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: CMP_L  (r11 I:int) = (r8 I:long), (r13 I:long A[D('targetTime' long)]) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0019|0x0019: IF  (r11 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:81:0x001d \l}"];
Node_80 [shape=record,label="{80\:\ 0x001b|0x001b: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001c: GOTO  \-\> 0x001e \l}"];
Node_82 [shape=record,label="{82\:\ 0x001e|0x001e: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:84:0x0025 \l}"];
Node_83 [shape=record,label="{83\:\ 0x0020|TryCatch #0 \{all \-\> 0x0042, blocks: (B:73:0x0007, B:78:0x0010, B:83:0x0020, B:84:0x0025), top: B:97:0x0007 \}\lCatch: all \-\> 0x0042\l|0x0020: INVOKE  (r5 I:kotlinx.coroutines.internal.ThreadSafeHeapNode) = \l  (r0 I:kotlinx.coroutines.internal.ThreadSafeHeap A[D('this_$iv' kotlinx.coroutines.internal.ThreadSafeHeap)])\l  (r10 I:int)\l type: VIRTUAL call: kotlinx.coroutines.internal.ThreadSafeHeap.removeAtImpl(int):kotlinx.coroutines.internal.ThreadSafeHeapNode A[Catch: all \-\> 0x0042, MD:(int):T extends kotlinx.coroutines.internal.ThreadSafeHeapNode & java.lang.Comparable\<? super T\> (m)] (LINE:276)\l0x0024: GOTO  \-\> 0x0028 \l}"];
Node_86 [shape=record,label="{86\:\ 0x0029|0x0029: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY] A[D('this_$iv' kotlinx.coroutines.internal.ThreadSafeHeap)]) \l}"];
Node_84 [shape=record,label="{84\:\ 0x0025|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0042, blocks: (B:73:0x0007, B:78:0x0010, B:83:0x0020, B:84:0x0025), top: B:97:0x0007 \}\lCatch: all \-\> 0x0042\l|0x0025: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY])  (LINE:278)\l0x0026: CHECK_CAST (r6 I:kotlinx.coroutines.internal.ThreadSafeHeapNode) = (kotlinx.coroutines.internal.ThreadSafeHeapNode) (r6 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0042, TRY_LEAVE]\l}"];
Node_81 [shape=record,label="{81\:\ 0x001d|0x001d: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_98 [shape=record,label="{98\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_94 [shape=record,label="{94\:\ 0x0042|ExcHandler: all \-\> 0x0042\l|0x0042: MOVE_EXCEPTION  (r3 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0042] (LINE:275)\l}"];
Node_96 [shape=record,label="{96\:\ 0x0044|0x0044: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final void kotlinx.coroutines.test.TestCoroutineContext.triggerActions((r12 'this' I:kotlinx.coroutines.test.TestCoroutineContext A[IMMUTABLE_TYPE, THIS]), (r13 I:long A[D('targetTime' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:93:0x003e \-\> B:70:0x0000, CROSS_EDGE: B:91:0x0038 \-\> B:93:0x003e, CROSS_EDGE: B:86:0x0029 \-\> B:87:0x002c, CROSS_EDGE: B:84:0x0025 \-\> B:86:0x0029, CROSS_EDGE: B:81:0x001d \-\> B:82:0x001e, CROSS_EDGE: B:96:0x0044 \-\> B:69:?, CROSS_EDGE: B:97:0x0007 \-\> B:94:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x000e: r2 '$i$f$synchronized' I\l  0x0007\-0x000e: r3 '$i$a$\-synchronized\-ThreadSafeHeap$removeFirstIf$1$iv' I\l  0x0013\-0x001e: r6 'it' Lkotlinx\/coroutines\/test\/TimedRunnableObsolete;\l  0x0014\-0x001e: r7 '$i$a$\-removeFirstIf\-TestCoroutineContext$triggerActions$current$1' I\l  0x0010\-0x0029: r3 '$i$a$\-synchronized\-ThreadSafeHeap$removeFirstIf$1$iv' I\l  0x0010\-0x0029: r4 'first$iv' Lkotlinx\/coroutines\/internal\/ThreadSafeHeapNode;\l  0x0010\-0x002b: r2 '$i$f$synchronized' I\l  0x0003\-0x002c: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/ThreadSafeHeap;\l  0x0004\-0x002c: r1 '$i$f$removeFirstIf' I\l  0x0032\-0x0041: r0 'current' Lkotlinx\/coroutines\/test\/TimedRunnableObsolete;\l  0x0042\-0x0044: r0 'this_$iv' Lkotlinx\/coroutines\/internal\/ThreadSafeHeap;\l  0x0042\-0x0044: r1 '$i$f$removeFirstIf' I\l  0x0042\-0x0044: r2 '$i$f$synchronized' I\l  \-1 \-0x0044: r13 'targetTime' J\lTryCatch #0 \{all \-\> 0x0042, blocks: (B:73:0x0007, B:78:0x0010, B:83:0x0020, B:84:0x0025), top: B:97:0x0007 \}\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [187=4]\}\l}"];
MethodNode -> Node_68;Node_68 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_72;
Node_72 -> Node_97;
Node_97 -> Node_73;
Node_97 -> Node_94;
Node_73 -> Node_74;
Node_73 -> Node_98;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_78;
Node_76 -> Node_87;
Node_87 -> Node_88;
Node_88 -> Node_90;
Node_88 -> Node_99[style=dashed];
Node_90 -> Node_91;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_101;
Node_92 -> Node_100;
Node_100 -> Node_93;
Node_93 -> Node_70;
Node_101 -> Node_93;
Node_99 -> Node_89;
Node_89 -> Node_69;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_81;
Node_80 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_84;
Node_83 -> Node_86;
Node_86 -> Node_87;
Node_84 -> Node_86;
Node_81 -> Node_82;
Node_98 -> Node_94;
Node_94 -> Node_96;
Node_96 -> Node_69;
}

