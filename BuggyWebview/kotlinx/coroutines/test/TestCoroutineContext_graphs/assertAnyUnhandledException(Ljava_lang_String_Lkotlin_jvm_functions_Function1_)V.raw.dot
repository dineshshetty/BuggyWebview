digraph "CFG forkotlinx.coroutines.test.TestCoroutineContext.assertAnyUnhandledException(Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_42 [shape=record,label="{42\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x0000|0x0000: IGET  (r0 I:java.util.List\<java.lang.Throwable\>) = (r6 I:kotlinx.coroutines.test.TestCoroutineContext) kotlinx.coroutines.test.TestCoroutineContext.uncaughtExceptions java.util.List  (LINE:149)\l0x0002: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('$this$any$iv' java.lang.Iterable)]) java.util.Collection  (LINE:269)\l0x0007: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0014 \l}"];
Node_46 [shape=record,label="{46\:\ 0x000a|0x000a: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$any$iv' java.lang.Iterable)]) \l0x000b: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r2 I:boolean) = (r2 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0014 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0031|0x0031: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0039  (LINE:149)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0033|0x0033: IGET  (r0 I:java.util.List\<java.lang.Throwable\>) = (r6 I:kotlinx.coroutines.test.TestCoroutineContext) kotlinx.coroutines.test.TestCoroutineContext.uncaughtExceptions java.util.List  (LINE:150)\l0x0035: INVOKE  (r0 I:java.util.List) type: INTERFACE call: java.util.List.clear():void A[MD:():void (c)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0038|RETURN\l|0x0038: RETURN    (LINE:151)\l}"];
Node_43 [shape=record,label="{43\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ 0x0039|0x0039: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:149)\l0x003b: INVOKE  (r0 I:java.lang.AssertionError), (r7 I:java.lang.Object A[D('message' java.lang.String)]) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x003e|0x003e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0014|0x0014: INVOKE  (r2 I:java.util.Iterator) = (r0 I:java.lang.Iterable A[D('$this$any$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:270)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0018|LOOP_START\lLOOP:0: B:50:0x0018\-\>B:53:0x002c\l|0x0018: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x001c|0x001c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0031 \l}"];
Node_52 [shape=record,label="{52\:\ 0x001e|0x001e: INVOKE  (r4 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0022: INVOKE  (r5 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('element$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0026: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x002c|LOOP_END\lLOOP:0: B:50:0x0018\-\>B:53:0x002c\l|0x002c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0018 \l}"];
Node_61 [shape=record,label="{61\:\ 0x002e|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x002e|0x002e: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.test.TestCoroutineContext.assertAnyUnhandledException((r6 'this' I:kotlinx.coroutines.test.TestCoroutineContext A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[D('message' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super java.lang.Throwable, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:53:0x002c \-\> B:50:0x0018, CROSS_EDGE: B:60:0x003e \-\> B:43:?, CROSS_EDGE: B:51:0x001c \-\> B:56:0x0031, CROSS_EDGE: B:47:0x0011 \-\> B:56:0x0031, CROSS_EDGE: B:45:0x0008 \-\> B:49:0x0014\lINLINE_NOT_NEEDED\lSIGNATURE: (Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Throwable;Ljava\/lang\/Boolean;\>;)V\lDebug Info:\l  0x0022\-0x0030: r4 'element$iv' Ljava\/lang\/Object;\l  0x0004\-0x0031: r0 '$this$any$iv' Ljava\/lang\/Iterable;\l  0x0005\-0x0031: r1 '$i$f$any' I\l  \-1 \-0x003e: r7 'message' Ljava\/lang\/String;\l  \-1 \-0x003e: r8 'predicate' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_42;Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_49;
Node_46 -> Node_47;
Node_47 -> Node_49;
Node_47 -> Node_56[style=dashed];
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_59;
Node_57 -> Node_58;
Node_58 -> Node_43;
Node_59 -> Node_60;
Node_60 -> Node_43;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_62;
Node_52 -> Node_53;
Node_53 -> Node_50;
Node_53 -> Node_61[style=dashed];
Node_61 -> Node_54;
Node_54 -> Node_56;
Node_62 -> Node_56;
}

