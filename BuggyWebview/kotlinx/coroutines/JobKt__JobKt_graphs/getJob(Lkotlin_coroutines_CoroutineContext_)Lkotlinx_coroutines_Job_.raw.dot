digraph "CFG forkotlinx.coroutines.JobKt__JobKt.getJob(Lkotlin\/coroutines\/CoroutineContext;)Lkotlinx\/coroutines\/Job;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:kotlinx.coroutines.Job$Key) =  kotlinx.coroutines.Job.Key kotlinx.coroutines.Job$Key  (LINE:630)\l0x0002: CHECK_CAST (r0 I:kotlin.coroutines.CoroutineContext$Key) = (kotlin.coroutines.CoroutineContext$Key) (r0 I:??[OBJECT, ARRAY]) \l0x0004: INVOKE  (r0 I:kotlin.coroutines.CoroutineContext$Element) = \l  (r2 I:kotlin.coroutines.CoroutineContext A[D('$this$job' kotlin.coroutines.CoroutineContext)])\l  (r0 I:kotlin.coroutines.CoroutineContext$Key)\l type: INTERFACE call: kotlin.coroutines.CoroutineContext.get(kotlin.coroutines.CoroutineContext$Key):kotlin.coroutines.CoroutineContext$Element A[MD:\<E extends kotlin.coroutines.CoroutineContext$Element\>:(kotlin.coroutines.CoroutineContext$Key\<E extends kotlin.coroutines.CoroutineContext$Element\>):E extends kotlin.coroutines.CoroutineContext$Element (m)]\l0x0008: CHECK_CAST (r0 I:kotlinx.coroutines.Job) = (kotlinx.coroutines.Job) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000d \l}"];
Node_11 [shape=record,label="{11\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlinx.coroutines.Job) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000f: CONST_STR  (r1 I:java.lang.String) =  \"Current context doesn't contain Job in it: \" \l0x0011: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:java.lang.Object A[D('$this$job' kotlin.coroutines.CoroutineContext)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.stringPlus(java.lang.String, java.lang.Object):java.lang.String A[MD:(java.lang.String, java.lang.Object):java.lang.String (m)]\l0x0015: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0019: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final kotlinx.coroutines.Job kotlinx.coroutines.JobKt__JobKt.getJob((r2 I:kotlin.coroutines.CoroutineContext A[D('$this$job' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001c \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001c: r2 '$this$job' Lkotlin\/coroutines\/CoroutineContext;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

