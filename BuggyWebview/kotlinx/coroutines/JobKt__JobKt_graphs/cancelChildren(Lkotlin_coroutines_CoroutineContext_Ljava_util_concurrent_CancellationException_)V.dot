digraph "CFG forkotlinx.coroutines.JobKt__JobKt.cancelChildren(Lkotlin\/coroutines\/CoroutineContext;Ljava\/util\/concurrent\/CancellationException;)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|kotlinx.coroutines.Job r0 = (kotlinx.coroutines.Job) r6.get(kotlinx.coroutines.Job.Key)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|if (r0 != null) goto L3\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|kotlin.sequences.Sequence r0 = r0.getChildren()\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|if (r0 != null) goto L5\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|java.util.Iterator r2 = r0.iterator()\l}"];
Node_26 [shape=record,label="{26\:\ 0x0019|LOOP_START\lLOOP:0: B:26:0x0019\-\>B:28:0x001f\l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|if (r2.hasNext() == false) goto L9\l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|LOOP_END\lLOOP:0: B:26:0x0019\-\>B:28:0x001f\l|java.lang.Object r3 = r2.next()\lkotlinx.coroutines.Job r4 = (kotlinx.coroutines.Job) r3\lr4.cancel(r7)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002c|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_30 [shape=record,label="{30\:\ 0x002c|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public static final void kotlinx.coroutines.JobKt__JobKt.cancelChildren((r6v0 '$this$cancelChildren' kotlin.coroutines.CoroutineContext A[D('$this$cancelChildren' kotlin.coroutines.CoroutineContext), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'cause' java.util.concurrent.CancellationException A[D('cause' java.util.concurrent.CancellationException), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x001f \-\> B:26:0x0019, CROSS_EDGE: B:23:0x0011 \-\> B:30:0x002c, CROSS_EDGE: B:20:0x000a \-\> B:30:0x002c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_30[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_32[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_26;
Node_31 -> Node_33;
Node_33 -> Node_18;
Node_32 -> Node_18;
Node_30 -> Node_18;
}

