digraph "CFG forkotlinx.coroutines.JobSupport.Finishing.addExceptionLocked(Ljava\/lang\/Throwable;)V" {
subgraph cluster_Region_1261287893 {
label = "R(2:1|(1:3)(1:(0)(2:8|(2:(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21)))|(1:10)))))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0000|java.lang.Throwable java.lang.Throwable r0 = getRootCause()\l}"];
subgraph cluster_IfRegion_1561532660 {
label = "IF [B:27:0x0004] THEN: R(1:3) ELSE: R(1:(0)(2:8|(2:(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21)))|(1:10))))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0004|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_1306245365 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0006|setRootCause(r6)\l}"];
}
subgraph cluster_Region_1628388603 {
label = "R(1:(0)(2:8|(2:(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21)))|(1:10)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_422948851 {
label = "IF [B:30:0x000a] THEN: R(0) ELSE: R(2:8|(2:(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21)))|(1:10))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x000a|if (r6 == r0) goto L7\l}"];
subgraph cluster_Region_139030732 {
label = "R(0)";
node [shape=record,color=blue];
}
subgraph cluster_Region_1242265188 {
label = "R(2:8|(2:(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21)))|(1:10)))";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x000d|java.lang.Object java.lang.Object r1 = getExceptionsHolder()\l}"];
subgraph cluster_Region_1110640107 {
label = "R(2:(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21)))|(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1817091553 {
label = "IF [B:33:0x0011] THEN: R(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21))) ELSE: null";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0011|if (r1 != null) goto L12\l}"];
subgraph cluster_Region_1388253512 {
label = "R(1:(1:(2:(1:15)|(2:16|17)))(1:(1:23)(2:20|21)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_694156324 {
label = "IF [B:36:0x0019] THEN: R(1:(2:(1:15)|(2:16|17))) ELSE: R(1:(1:23)(2:20|21))";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0019|if ((r1 instanceof java.lang.Throwable) != false) goto L14\l}"];
subgraph cluster_Region_1246697216 {
label = "R(1:(2:(1:15)|(2:16|17)))";
node [shape=record,color=blue];
subgraph cluster_Region_163824021 {
label = "R(2:(1:15)|(2:16|17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_488740043 {
label = "IF [B:37:0x001b] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x001b|if (r6 == r1) goto L15\l}"];
subgraph cluster_Region_1401258267 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x001d|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_201877853 {
label = "R(2:16|17)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x001e|java.util.ArrayList java.util.ArrayList r2 = allocateList()\lr2.add(r1)\lr2.add(r6)\lsetExceptionsHolder(r2)\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
}
subgraph cluster_Region_2031808370 {
label = "R(1:(1:23)(2:20|21)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_347167912 {
label = "IF [B:41:0x0031] THEN: R(1:23) ELSE: R(2:20|21) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0031|if ((r1 instanceof java.util.ArrayList) == false) goto L22\l}"];
subgraph cluster_Region_1113144518 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x0049|throw new java.lang.IllegalStateException(kotlin.jvm.internal.Intrinsics.stringPlus(\"State is \", r1).toString())\l}"];
}
subgraph cluster_Region_1397718922 {
label = "R(2:20|21)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0033|((java.util.ArrayList) r1).add(r6)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0039|RETURN\lORIG_RETURN\l|return\l}"];
}
}
}
}
}
}
subgraph cluster_Region_1272909894 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0013|setExceptionsHolder(r6)\l}"];
}
}
}
}
}
}
}
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0009}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x000c}"];
Node_46 [shape=record,color=red,label="{46\:\ ?|SYNTHETIC\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0017}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x002f}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x003a}"];
MethodNode[shape=record,label="{public final void kotlinx.coroutines.JobSupport.Finishing.addExceptionLocked((r5v0 'this' kotlinx.coroutines.JobSupport$Finishing A[IMMUTABLE_TYPE, THIS]), (r6v0 'exception' java.lang.Throwable A[D('exception' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x000c \-\> B:25:?, CROSS_EDGE: B:43:0x0039 \-\> B:25:?, CROSS_EDGE: B:38:0x001d \-\> B:25:?, CROSS_EDGE: B:39:0x001e \-\> B:43:0x0039, CROSS_EDGE: B:42:0x0033 \-\> B:43:0x0039, CROSS_EDGE: B:45:0x0049 \-\> B:25:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r2v5, resolved type: java.util.ArrayList\<java.lang.Throwable\>\}\l}"];
MethodNode -> Node_24;Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_30[style=dashed];
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_30 -> Node_32[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_36 -> Node_37;
Node_36 -> Node_40[style=dashed];
Node_37 -> Node_38;
Node_37 -> Node_39[style=dashed];
Node_38 -> Node_25;
Node_39 -> Node_47;
Node_47 -> Node_25;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_45 -> Node_25;
Node_42 -> Node_43;
Node_43 -> Node_25;
Node_34 -> Node_46;
Node_24 -> Node_26;
Node_29 -> Node_25;
Node_31 -> Node_25;
Node_46 -> Node_25;
Node_35 -> Node_36;
Node_40 -> Node_41;
Node_44 -> Node_45;
}

