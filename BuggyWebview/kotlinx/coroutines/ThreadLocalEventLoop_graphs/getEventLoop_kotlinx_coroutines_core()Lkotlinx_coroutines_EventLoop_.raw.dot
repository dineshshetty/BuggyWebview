digraph "CFG forkotlinx.coroutines.ThreadLocalEventLoop.getEventLoop$kotlinx_coroutines_core()Lkotlinx\/coroutines\/EventLoop;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:java.lang.ThreadLocal\<kotlinx.coroutines.EventLoop\>) =  kotlinx.coroutines.ThreadLocalEventLoop.ref java.lang.ThreadLocal  (LINE:131)\l0x0002: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.lang.ThreadLocal) type: VIRTUAL call: java.lang.ThreadLocal.get():java.lang.Object A[MD:():T (c)]\l0x0006: CHECK_CAST (r1 I:kotlinx.coroutines.EventLoop) = (kotlinx.coroutines.EventLoop) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: INVOKE  (r1 I:kotlinx.coroutines.EventLoop) =  type: STATIC call: kotlinx.coroutines.EventLoopKt.createEventLoop():kotlinx.coroutines.EventLoop A[MD:():kotlinx.coroutines.EventLoop (m)]\l0x000e: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x000f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:545)\l0x0010: INVOKE  (r0 I:java.lang.ThreadLocal), (r2 I:java.lang.Object A[D('it' kotlinx.coroutines.EventLoop)]) type: VIRTUAL call: java.lang.ThreadLocal.set(java.lang.Object):void A[MD:(T):void (c)] (LINE:131)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: RETURN  (r1 I:kotlinx.coroutines.EventLoop) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0013: RETURN  (r1 I:kotlinx.coroutines.EventLoop) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public final kotlinx.coroutines.EventLoop kotlinx.coroutines.ThreadLocalEventLoop.getEventLoop$kotlinx_coroutines_core((r4 'this' I:kotlinx.coroutines.ThreadLocalEventLoop A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0008 \-\> B:12:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x0013: r2 'it' Lkotlinx\/coroutines\/EventLoop;\l  0x0010\-0x0013: r3 '$i$a$\-also\-ThreadLocalEventLoop$eventLoop$1' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

