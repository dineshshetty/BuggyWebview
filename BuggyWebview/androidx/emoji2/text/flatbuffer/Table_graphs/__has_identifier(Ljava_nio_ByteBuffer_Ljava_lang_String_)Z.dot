digraph "CFG forandroidx.emoji2.text.flatbuffer.Table.__has_identifier(Ljava\/nio\/ByteBuffer;Ljava\/lang\/String;)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0005|if (r5.length() != 4) goto L13\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|r0 = 0\l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|LOOP_START\lLOOP:0: B:22:0x0008\-\>B:27:0x001d\lPHI: r0 \l  PHI: (r0v3 'i' int) = (r0v2 'i' int), (r0v5 'i' int) binds: [B:21:0x0007, B:27:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= 4) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x000a}"];
Node_24 [shape=record,label="{24\:\ 0x0019|if (r5.charAt(r0) == ((char) r4.get((r4.position() + 4) + r0))) goto L7\l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|LOOP_END\lLOOP:0: B:22:0x0008\-\>B:27:0x001d\l|int r0 = r0 + 1\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|RETURN\l|return false\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|RETURN\l|return true\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022}"];
Node_31 [shape=record,label="{31\:\ 0x0029|throw new java.lang.AssertionError(\"FlatBuffers: file identifier must be length 4\")\l}"];
MethodNode[shape=record,label="{protected static boolean androidx.emoji2.text.flatbuffer.Table.__has_identifier((r4v0 'bb' java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'ident' java.lang.String A[D('ident' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x001d \-\> B:22:0x0008, CROSS_EDGE: B:29:0x0021 \-\> B:18:?, CROSS_EDGE: B:31:0x0029 \-\> B:18:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_30;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_27;
Node_24 -> Node_33[style=dashed];
Node_27 -> Node_22;
Node_33 -> Node_25;
Node_25 -> Node_18;
Node_32 -> Node_28;
Node_28 -> Node_18;
Node_30 -> Node_31;
Node_31 -> Node_18;
}

