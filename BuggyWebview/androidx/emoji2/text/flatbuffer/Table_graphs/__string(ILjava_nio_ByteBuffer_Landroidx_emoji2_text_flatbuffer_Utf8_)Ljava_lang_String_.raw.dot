digraph "CFG forandroidx.emoji2.text.flatbuffer.Table.__string(ILjava\/nio\/ByteBuffer;Landroidx\/emoji2\/text\/flatbuffer\/Utf8;)Ljava\/lang\/String;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r3 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r2 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:111)\l0x0004: ARITH  (r2 I:int) = (r2 I:int A[D('offset' int)]) + (r0 I:int) \l0x0005: INVOKE  (r0 I:int) = (r3 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r2 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:112)\l0x0009: ARITH  (r1 I:int) = (r2 I:int A[D('offset' int)]) + (4 int)  (LINE:113)\l0x000b: INVOKE  (r1 I:java.lang.String) = \l  (r4 I:androidx.emoji2.text.flatbuffer.Utf8 A[D('utf8' androidx.emoji2.text.flatbuffer.Utf8)])\l  (r3 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)])\l  (r1 I:int)\l  (r0 I:int A[D('length' int)])\l type: VIRTUAL call: androidx.emoji2.text.flatbuffer.Utf8.decodeUtf8(java.nio.ByteBuffer, int, int):java.lang.String A[MD:(java.nio.ByteBuffer, int, int):java.lang.String (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:java.lang.String) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.emoji2.text.flatbuffer.Table.__string((r2 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.emoji2.text.flatbuffer.Utf8 A[D('utf8' androidx.emoji2.text.flatbuffer.Utf8), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x000f: r0 'length' I\l  \-1 \-0x000f: r2 'offset' I\l  \-1 \-0x000f: r3 'bb' Ljava\/nio\/ByteBuffer;\l  \-1 \-0x000f: r4 'utf8' Landroidx\/emoji2\/text\/flatbuffer\/Utf8;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

