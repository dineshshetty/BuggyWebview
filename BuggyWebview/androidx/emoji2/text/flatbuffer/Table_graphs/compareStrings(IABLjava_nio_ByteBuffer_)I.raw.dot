digraph "CFG forandroidx.emoji2.text.flatbuffer.Table.compareStrings(I[BLjava\/nio\/ByteBuffer;)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r9 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r7 I:int A[D('offset_1' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:279)\l0x0004: ARITH  (r7 I:int) = (r7 I:int A[D('offset_1' int)]) + (r0 I:int) \l0x0005: INVOKE  (r0 I:int) = (r9 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r7 I:int A[D('offset_1' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:280)\l0x0009: ARRAY_LENGTH  (r1 I:int) = (r8 I:??[] A[D('key' byte[])])  (LINE:281)\l0x000a: ARITH  (r2 I:int) = (r7 I:int A[D('offset_1' int)]) + (4 int)  (LINE:282)\l0x000c: INVOKE  (r3 I:int) = (r0 I:int A[D('len_1' int)]), (r1 I:int A[D('len_2' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:283)\l0x0010: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:284)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|LOOP_START\lLOOP:0: B:16:0x0011\-\>B:21:0x0027\l|0x0011: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char] A[D('len' int)])  \-\> B:24:0x002a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|0x0013: ARITH  (r5 I:int) = (r4 I:int A[D('i' int)]) + (r2 I:int A[D('startPos_1' int)])  (LINE:285)\l0x0015: INVOKE  (r5 I:byte) = (r9 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r5 I:int) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l0x0019: AGET  (r6 I:??[int, short, byte, char]) = (r8 I:byte[] A[D('key' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char] A[D('i' int)]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x001b|0x001b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0027 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|LOOP_END\lLOOP:0: B:16:0x0011\-\>B:21:0x0027\l|0x0027: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:284)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|0x001d: ARITH  (r5 I:int) = (r4 I:int A[D('i' int)]) + (r2 I:int A[D('startPos_1' int)])  (LINE:286)\l0x001f: INVOKE  (r5 I:byte) = (r9 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r5 I:int) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l0x0023: AGET  (r6 I:??[int, short, byte, char]) = (r8 I:byte[] A[D('key' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char] A[D('i' int)]) \l0x0025: ARITH  (r5 I:int) = (r5 I:int) \- (r6 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|RETURN\l|0x0026: RETURN  (r5 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x002a|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002a|0x002a: ARITH  (r4 I:int A[D('i' int)]) = (r0 I:int A[D('len_1' int)]) \- (r1 I:int A[D('len_2' int)])  (LINE:288)\l}"];
Node_23 [shape=record,label="{23\:\ 0x002c|RETURN\l|0x002c: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{protected static int androidx.emoji2.text.flatbuffer.Table.compareStrings((r7 I:int A[D('offset_1' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:byte[] A[D('key' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0027 \-\> B:16:0x0011, CROSS_EDGE: B:23:0x002c \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x002a: r4 'i' I\l  0x0009\-0x002c: r0 'len_1' I\l  0x000a\-0x002c: r1 'len_2' I\l  0x000c\-0x002c: r2 'startPos_1' I\l  0x0010\-0x002c: r3 'len' I\l  \-1 \-0x002c: r7 'offset_1' I\l  \-1 \-0x002c: r8 'key' [B\l  \-1 \-0x002c: r9 'bb' Ljava\/nio\/ByteBuffer;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_25[style=dashed];
Node_21 -> Node_16;
Node_25 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_24 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

