digraph "CFG forandroidx.emoji2.text.flatbuffer.Table.__has_identifier(Ljava\/nio\/ByteBuffer;Ljava\/lang\/String;)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:java.lang.String A[D('ident' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:214)\l0x0004: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0022 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:217)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|LOOP_START\lLOOP:0: B:22:0x0008\-\>B:27:0x001d\l|0x0008: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:32:0x0020 \l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|0x000a: INVOKE  (r2 I:char) = (r5 I:java.lang.String A[D('ident' java.lang.String)]), (r0 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:218)\l0x000e: INVOKE  (r3 I:int) = (r4 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.position():int A[MD:():int (c)]\l0x0012: ARITH  (r3 I:int) = (r3 I:int) + (r1 I:int) \l0x0013: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int A[D('i' int)]) \l0x0014: INVOKE  (r3 I:byte) = (r4 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r3 I:int) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l0x0018: CAST (r3 I:char) = (char) (r3 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x001d \l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|LOOP_END\lLOOP:0: B:22:0x0008\-\>B:27:0x001d\l|0x001d: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:217)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|RETURN\l|0x001b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: RETURN  (r1 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|RETURN\l|0x0020: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('i' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:220)\l0x0021: RETURN  (r0 I:boolean) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:215)\l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"FlatBuffers: file identifier must be length 4\" \l0x0026: INVOKE  (r0 I:java.lang.AssertionError), (r1 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0029|0x0029: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected static boolean androidx.emoji2.text.flatbuffer.Table.__has_identifier((r4 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('ident' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x001d \-\> B:22:0x0008, CROSS_EDGE: B:29:0x0021 \-\> B:18:?, CROSS_EDGE: B:31:0x0029 \-\> B:18:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0020: r0 'i' I\l  \-1 \-0x0029: r4 'bb' Ljava\/nio\/ByteBuffer;\l  \-1 \-0x0029: r5 'ident' Ljava\/lang\/String;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_30;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_27;
Node_24 -> Node_33[style=dashed];
Node_27 -> Node_22;
Node_33 -> Node_25;
Node_25 -> Node_18;
Node_32 -> Node_28;
Node_28 -> Node_18;
Node_30 -> Node_31;
Node_31 -> Node_18;
}

