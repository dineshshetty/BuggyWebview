digraph "CFG forandroidx.emoji2.text.flatbuffer.Table.compareStrings(IILjava\/nio\/ByteBuffer;)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r8 I:int A[D('offset_1' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:257)\l0x0004: ARITH  (r8 I:int) = (r8 I:int A[D('offset_1' int)]) + (r0 I:int) \l0x0005: INVOKE  (r0 I:int) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r9 I:int A[D('offset_2' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:258)\l0x0009: ARITH  (r9 I:int) = (r9 I:int A[D('offset_2' int)]) + (r0 I:int) \l0x000a: INVOKE  (r0 I:int) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r8 I:int A[D('offset_1' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:259)\l0x000e: INVOKE  (r1 I:int) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r9 I:int A[D('offset_2' int)]) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)] (LINE:260)\l0x0012: ARITH  (r2 I:int) = (r8 I:int A[D('offset_1' int)]) + (4 int)  (LINE:261)\l0x0014: ARITH  (r3 I:int) = (r9 I:int A[D('offset_2' int)]) + (4 int)  (LINE:262)\l0x0016: INVOKE  (r4 I:int) = (r0 I:int A[D('len_1' int)]), (r1 I:int A[D('len_2' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:263)\l0x001a: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:264)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001b|LOOP_START\lLOOP:0: B:16:0x001b\-\>B:21:0x0039\l|0x001b: IF  (r5 I:??[int, byte, short, char] A[D('i' int)]) \>= (r4 I:??[int, byte, short, char] A[D('len' int)])  \-\> B:25:0x003c \l}"];
Node_17 [shape=record,label="{17\:\ 0x001d|0x001d: ARITH  (r6 I:int) = (r5 I:int A[D('i' int)]) + (r2 I:int A[D('startPos_1' int)])  (LINE:265)\l0x001f: INVOKE  (r6 I:byte) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r6 I:int) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l0x0023: ARITH  (r7 I:int) = (r5 I:int A[D('i' int)]) + (r3 I:int A[D('startPos_2' int)]) \l0x0025: INVOKE  (r7 I:byte) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r7 I:int) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|0x0029: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0039 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0039|LOOP_END\lLOOP:0: B:16:0x001b\-\>B:21:0x0039\l|0x0039: ARITH  (r5 I:int) = (r5 I:int A[D('i' int)]) + (1 int)  (LINE:264)\l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x002b|0x002b: ARITH  (r6 I:int) = (r5 I:int A[D('i' int)]) + (r2 I:int A[D('startPos_1' int)])  (LINE:266)\l0x002d: INVOKE  (r6 I:byte) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r6 I:int) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l0x0031: ARITH  (r7 I:int) = (r5 I:int A[D('i' int)]) + (r3 I:int A[D('startPos_2' int)]) \l0x0033: INVOKE  (r7 I:byte) = (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer)]), (r7 I:int) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l0x0037: ARITH  (r6 I:int) = (r6 I:int) \- (r7 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|RETURN\l|0x0038: RETURN  (r6 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x003c|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003c|0x003c: ARITH  (r5 I:int A[D('i' int)]) = (r0 I:int A[D('len_1' int)]) \- (r1 I:int A[D('len_2' int)])  (LINE:268)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003e|RETURN\l|0x003e: RETURN  (r5 I:int) \l}"];
MethodNode[shape=record,label="{protected static int androidx.emoji2.text.flatbuffer.Table.compareStrings((r8 I:int A[D('offset_1' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('offset_2' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0039 \-\> B:16:0x001b, CROSS_EDGE: B:23:0x003e \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x003c: r5 'i' I\l  0x000e\-0x003e: r0 'len_1' I\l  0x0012\-0x003e: r1 'len_2' I\l  0x0014\-0x003e: r2 'startPos_1' I\l  0x0016\-0x003e: r3 'startPos_2' I\l  0x001a\-0x003e: r4 'len' I\l  \-1 \-0x003e: r8 'offset_1' I\l  \-1 \-0x003e: r9 'offset_2' I\l  \-1 \-0x003e: r10 'bb' Ljava\/nio\/ByteBuffer;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_24[style=dashed];
Node_21 -> Node_16;
Node_24 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_25 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

