digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.createVector(IIIZZLandroidx\/emoji2\/text\/flatbuffer\/FlexBuffersBuilder$Value;)Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffersBuilder$Value;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY])  (LINE:494)\l0x0002: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)]) \l0x0004: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r23 I:??[OBJECT, ARRAY] A[D('keys' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value)]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fixed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r21 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('typed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: NEW_INSTANCE  (r3 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x000d: INVOKE  (r3 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: CAST (r3 I:long) = (long) (r1 I:int)  (LINE:496)\l0x0012: INVOKE  (r3 I:int) = (r3 I:long) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.widthUInBits(long):int A[MD:(long):int (m)]\l0x0016: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: INVOKE  (r3 I:int) = (r4 I:int), (r3 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x001b: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:497)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x002e  (LINE:498)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IGET  (r6 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:501)\l0x0020: INVOKE  (r6 I:int) = (r6 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.writePosition():int A[MD:():int (m)]\l0x0024: INVOKE  (r6 I:int) = (r2 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), (r6 I:int), (r4 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.access$200(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int, int):int A[MD:(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int, int):int (m)]\l0x0028: INVOKE  (r3 I:int A[D('bitWidth' int)]) = (r3 I:int A[D('bitWidth' int)]), (r6 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x002c: ARITH  (r5 I:int) = (r5 I:int A[D('prefixElems' int)]) + (2 int)  (LINE:502)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|0x002e: CONST  (r6 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:504)\l0x002f: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:506)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|LOOP_START\lLOOP:0: B:12:0x0031\-\>B:29:0x0085\l|0x0031: IGET  (r8 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList \l0x0033: INVOKE  (r8 I:int) = (r8 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: IF  (r7 I:??[int, byte, short, char] A[D('i' int)]) \>= (r8 I:??[int, byte, short, char])  \-\> B:62:0x0088 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0039|0x0039: IGET  (r8 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList  (LINE:507)\l0x003b: INVOKE  (r8 I:java.lang.Object) = (r8 I:java.util.ArrayList), (r7 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x003f: CHECK_CAST (r8 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = (androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) (r8 I:??[OBJECT, ARRAY]) \l0x0041: IGET  (r9 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf \l0x0043: INVOKE  (r9 I:int) = (r9 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.writePosition():int A[MD:():int (m)]\l0x0047: ARITH  (r10 I:int) = (r7 I:int A[D('i' int)]) + (r5 I:int A[D('prefixElems' int)]) \l0x0049: INVOKE  (r8 I:int) = (r8 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), (r9 I:int), (r10 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.access$200(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int, int):int A[MD:(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int, int):int (m)]\l0x004d: INVOKE  (r3 I:int A[D('bitWidth' int)]) = (r3 I:int A[D('bitWidth' int)]), (r8 I:int A[D('elemWidth' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)] (LINE:508)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: IF  (r21 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('typed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0083  (LINE:509)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|0x0053: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:510)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0055|0x0055: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0070 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0057|0x0057: IGET  (r9 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList  (LINE:511)\l0x0059: INVOKE  (r9 I:java.lang.Object) = (r9 I:java.util.ArrayList), (r7 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x005d: CHECK_CAST (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = (androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) (r9 I:??[OBJECT, ARRAY]) \l0x005f: IGET  (r6 I:int A[D('vectorType' int)]) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.type int \l0x0061: INVOKE  (r9 I:boolean) = (r6 I:int A[D('vectorType' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.isTypedVectorElementType(int):boolean A[MD:(int):boolean (m)] (LINE:512)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0065|0x0065: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0068 \l}"];
Node_61 [shape=record,label="{61\:\ 0x0068|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0068|0x0068: NEW_INSTANCE  (r4 I:androidx.emoji2.text.flatbuffer.FlexBuffers$FlexBufferException) =  androidx.emoji2.text.flatbuffer.FlexBuffers$FlexBufferException  (LINE:513)\l0x006a: CONST_STR  (r9 I:java.lang.String) =  \"TypedVector does not support this element type\" \l0x006c: INVOKE  (r4 I:androidx.emoji2.text.flatbuffer.FlexBuffers$FlexBufferException), (r9 I:java.lang.String) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffers.FlexBufferException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x006f|0x006f: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_65 [shape=record,label="{65\:\ 0x0085|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0085|LOOP_END\lLOOP:0: B:12:0x0031\-\>B:29:0x0085\l|0x0085: ARITH  (r7 I:int) = (r7 I:int A[D('i' int)]) + (1 int)  (LINE:506)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0070|0x0070: IGET  (r9 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList  (LINE:518)\l0x0072: INVOKE  (r9 I:java.lang.Object) = (r9 I:java.util.ArrayList), (r7 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0076: CHECK_CAST (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = (androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) (r9 I:??[OBJECT, ARRAY]) \l0x0078: IGET  (r9 I:int) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.type int \l}"];
Node_24 [shape=record,label="{24\:\ 0x007a|0x007a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('vectorType' int)]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x007d \l}"];
Node_63 [shape=record,label="{63\:\ 0x007d|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x007d|0x007d: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x007f: INVOKE  (r4 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0082|0x0082: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_66 [shape=record,label="{66\:\ 0x0085|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0083|0x0083: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:509)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0085|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x0088|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0088|0x0088: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x008a|0x008a: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fixed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0099  (LINE:524)\l}"];
Node_32 [shape=record,label="{32\:\ 0x008c|0x008c: INVOKE  (r7 I:boolean) = (r6 I:int A[D('vectorType' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.isTypedVectorElementType(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0090|0x0090: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0093 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0093|0x0093: NEW_INSTANCE  (r4 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x0095: INVOKE  (r4 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0098|0x0098: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0099|0x0099: INVOKE  (r7 I:int) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder), (r3 I:int A[D('bitWidth' int)]) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.align(int):int A[MD:(int):int (m)] (LINE:526)\l}"];
Node_38 [shape=record,label="{38\:\ 0x009d|0x009d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x00ac  (LINE:528)\l}"];
Node_39 [shape=record,label="{39\:\ 0x009f|0x009f: IGET  (r8 I:long) = (r2 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.iValue long  (LINE:529)\l0x00a1: INVOKE  (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder), (r8 I:long), (r7 I:int A[D('byteWidth' int)]) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeOffset(long, int):void A[MD:(long, int):void (m)]\l0x00a4: CONST  (r8 I:??[long, double]) = (1 ??[long, double])  (LINE:530)\l0x00a6: IGET  (r10 I:int) = (r2 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.minBitWidth int \l0x00a8: ARITH  (r8 I:long) = (r8 I:long) \<\< (r10 I:long) \l0x00a9: INVOKE  (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder), (r8 I:long), (r7 I:int A[D('byteWidth' int)]) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeInt(long, int):void A[MD:(long, int):void (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x00ac|0x00ac: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fixed' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x00b2  (LINE:532)\l}"];
Node_41 [shape=record,label="{41\:\ 0x00ae|0x00ae: CAST (r8 I:long) = (long) (r1 I:int)  (LINE:533)\l0x00af: INVOKE  (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder), (r8 I:long), (r7 I:int A[D('byteWidth' int)]) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeInt(long, int):void A[MD:(long, int):void (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x00b2|0x00b2: IGET  (r8 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:536)\l0x00b4: INVOKE  (r15 I:int) = (r8 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.writePosition():int A[MD:():int (m)]\l0x00b8: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:537)\l}"];
Node_43 [shape=record,label="{43\:\ 0x00ba|LOOP_START\lLOOP:1: B:43:0x00ba\-\>B:45:0x00c2\l|0x00ba: IGET  (r9 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList \l0x00bc: INVOKE  (r9 I:int) = (r9 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x00c0|0x00c0: IF  (r8 I:??[int, byte, short, char] A[D('i' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:67:0x00d0 \l}"];
Node_45 [shape=record,label="{45\:\ 0x00c2|LOOP_END\lLOOP:1: B:43:0x00ba\-\>B:45:0x00c2\l|0x00c2: IGET  (r9 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList  (LINE:538)\l0x00c4: INVOKE  (r9 I:java.lang.Object) = (r9 I:java.util.ArrayList), (r8 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x00c8: CHECK_CAST (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = (androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) (r9 I:??[OBJECT, ARRAY]) \l0x00ca: INVOKE  \l  (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder)\l  (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value)\l  (r7 I:int A[D('byteWidth' int)])\l type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeAny(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int):void A[MD:(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int):void (m)]\l0x00cd: ARITH  (r8 I:int) = (r8 I:int A[D('i' int)]) + (1 int)  (LINE:537)\l}"];
Node_67 [shape=record,label="{67\:\ 0x00d0|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x00d0|0x00d0: IF  (r21 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('typed' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x00f0  (LINE:541)\l}"];
Node_47 [shape=record,label="{47\:\ 0x00d2|0x00d2: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:542)\l}"];
Node_48 [shape=record,label="{48\:\ 0x00d4|LOOP_START\lLOOP:2: B:48:0x00d4\-\>B:50:0x00dc\l|0x00d4: IGET  (r9 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList \l0x00d6: INVOKE  (r9 I:int) = (r9 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x00da|0x00da: IF  (r8 I:??[int, byte, short, char] A[D('i' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:68:0x00f0 \l}"];
Node_50 [shape=record,label="{50\:\ 0x00dc|LOOP_END\lLOOP:2: B:48:0x00d4\-\>B:50:0x00dc\l|0x00dc: IGET  (r9 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:543)\l0x00de: IGET  (r10 I:java.util.ArrayList\<androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value\>) = (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.stack java.util.ArrayList \l0x00e0: INVOKE  (r10 I:java.lang.Object) = (r10 I:java.util.ArrayList), (r8 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x00e4: CHECK_CAST (r10 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = (androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) (r10 I:??[OBJECT, ARRAY]) \l0x00e6: INVOKE  (r10 I:byte) = (r10 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), (r3 I:int A[D('bitWidth' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.access$400(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int):byte A[MD:(androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value, int):byte (m)]\l0x00ea: INVOKE  (r9 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf), (r10 I:byte) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.put(byte):void A[MD:(byte):void (m)]\l0x00ed: ARITH  (r8 I:int) = (r8 I:int A[D('i' int)]) + (1 int)  (LINE:542)\l}"];
Node_68 [shape=record,label="{68\:\ 0x00f0|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x00f0|0x00f0: NEW_INSTANCE  (r16 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) =  androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value  (LINE:546)\l}"];
Node_52 [shape=record,label="{52\:\ 0x00f2|0x00f2: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x00f9 \l}"];
Node_53 [shape=record,label="{53\:\ 0x00f4|0x00f4: CONST  (r4 I:??[int, float, short, byte, char]) = (9 ??[int, float, short, byte, char]) \l0x00f6: CONST  (r10 I:??[int, float, short, byte, char]) = (9 ??[int, float, short, byte, char]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x0108|0x0108: CAST (r12 I:long) = (long) (r15 I:int A[D('vloc' int)]) \l0x0109: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY]) \l0x010b: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('key' int)]) \l0x010d: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bitWidth' int)]) \l0x010e: INVOKE  (r8 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), (r9 I:int), (r10 I:int), (r11 I:int), (r12 I:long) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.\<init\>(int, int, int, long):void A[MD:(int, int, int, long):void (m)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x0111|RETURN\l|0x0111: RETURN  (r16 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value)  (LINE:546)\l}"];
Node_54 [shape=record,label="{54\:\ 0x00f9|0x00f9: IF  (r21 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('typed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:0x0104 \l}"];
Node_55 [shape=record,label="{55\:\ 0x00fb|0x00fb: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fixed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x00fe \l}"];
Node_56 [shape=record,label="{56\:\ 0x00fd|0x00fd: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x00fe|0x00fe: INVOKE  (r4 I:int) = (r6 I:int A[D('vectorType' int)]), (r4 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.toTypedVector(int, int):int A[MD:(int, int):int (m)] (LINE:547)\l0x0102: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_58 [shape=record,label="{58\:\ 0x0104|0x0104: CONST  (r4 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l0x0106: CONST  (r10 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.createVector((r17 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r18 I:int A[D('key' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:boolean A[D('typed' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:boolean A[D('fixed' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value A[D('keys' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x006f \-\> B:1:?, BACK_EDGE: B:29:0x0085 \-\> B:12:0x0031, CROSS_EDGE: B:27:0x0082 \-\> B:1:?, CROSS_EDGE: B:24:0x007a \-\> B:29:0x0085, CROSS_EDGE: B:28:0x0083 \-\> B:29:0x0085, CROSS_EDGE: B:36:0x0098 \-\> B:1:?, BACK_EDGE: B:45:0x00c2 \-\> B:43:0x00ba, BACK_EDGE: B:50:0x00dc \-\> B:48:0x00d4, CROSS_EDGE: B:60:0x0111 \-\> B:1:?, CROSS_EDGE: B:57:0x00fe \-\> B:59:0x0108, CROSS_EDGE: B:55:0x00fb \-\> B:57:0x00fe, CROSS_EDGE: B:58:0x0104 \-\> B:59:0x0108, CROSS_EDGE: B:46:0x00d0 \-\> B:51:0x00f0, CROSS_EDGE: B:40:0x00ac \-\> B:42:0x00b2, CROSS_EDGE: B:38:0x009d \-\> B:40:0x00ac, CROSS_EDGE: B:31:0x008a \-\> B:37:0x0099, CROSS_EDGE: B:9:0x001c \-\> B:11:0x002e, CROSS_EDGE: B:3:0x0006 \-\> B:8:0x0011\lDebug Info:\l  0x004d\-0x0085: r8 'elemWidth' I\l  0x0031\-0x008a: r7 'i' I\l  0x00ba\-0x00d0: r8 'i' I\l  0x00d4\-0x00f0: r8 'i' I\l  0x001b\-0x0111: r3 'bitWidth' I\l  0x001c\-0x0111: r5 'prefixElems' I\l  0x002f\-0x0111: r6 'vectorType' I\l  0x009d\-0x0111: r7 'byteWidth' I\l  0x00b8\-0x0111: r15 'vloc' I\l  \-1 \-0x0111: r18 'key' I\l  \-1 \-0x0111: r19 'start' I\l  \-1 \-0x0111: r20 'length' I\l  \-1 \-0x0111: r21 'typed' Z\l  \-1 \-0x0111: r22 'fixed' Z\l  \-1 \-0x0111: r23 'keys' Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffersBuilder$Value;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_6;
Node_4 -> Node_8[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_62;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_28;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_61;
Node_19 -> Node_65[style=dashed];
Node_61 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_1;
Node_65 -> Node_29;
Node_29 -> Node_12;
Node_23 -> Node_24;
Node_24 -> Node_63;
Node_24 -> Node_66[style=dashed];
Node_63 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_1;
Node_66 -> Node_29;
Node_28 -> Node_64;
Node_64 -> Node_29;
Node_62 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_37[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_1;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_67;
Node_45 -> Node_43;
Node_67 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_51;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_68;
Node_50 -> Node_48;
Node_68 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_1;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_58;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_57;
Node_57 -> Node_59;
Node_58 -> Node_59;
}

