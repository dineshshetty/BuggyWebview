digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.putKey(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('key' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0004  (LINE:183)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|RETURN\l|0x0002: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:184)\l0x0003: RETURN  (r0 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004|0x0004: IGET  (r0 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:186)\l0x0006: INVOKE  (r0 I:int) = (r0 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.writePosition():int A[MD:():int (m)]\l0x000a: IGET  (r1 I:int) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.flags int  (LINE:187)\l0x000c: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char]) \l0x000e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x003b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IGET  (r1 I:java.util.HashMap\<java.lang.String, java.lang.Integer\>) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.keyPool java.util.HashMap  (LINE:188)\l0x0013: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.HashMap), (r7 I:java.lang.Object A[D('key' java.lang.String)]) type: VIRTUAL call: java.util.HashMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0017: CHECK_CAST (r1 I:java.lang.Integer) = (java.lang.Integer) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('keyFromPool' java.lang.Integer)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0036  (LINE:189)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: SGET  (r3 I:java.nio.charset.Charset) =  java.nio.charset.StandardCharsets.UTF_8 java.nio.charset.Charset  (LINE:190)\l0x001d: INVOKE  (r3 I:byte[]) = (r7 I:java.lang.String A[D('key' java.lang.String)]), (r3 I:java.nio.charset.Charset) type: VIRTUAL call: java.lang.String.getBytes(java.nio.charset.Charset):byte[] A[MD:(java.nio.charset.Charset):byte[] (c)]\l0x0021: IGET  (r4 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:191)\l0x0023: ARRAY_LENGTH  (r5 I:int) = (r3 I:??[] A[D('keyBytes' byte[])]) \l0x0024: INVOKE  (r4 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf), (r3 I:byte[] A[D('keyBytes' byte[])]), (r2 I:int), (r5 I:int) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.put(byte[], int, int):void A[MD:(byte[], int, int):void (m)]\l0x0027: IGET  (r4 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:192)\l0x0029: INVOKE  (r4 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf), (r2 I:byte) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.put(byte):void A[MD:(byte):void (m)]\l0x002c: IGET  (r2 I:java.util.HashMap\<java.lang.String, java.lang.Integer\>) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.keyPool java.util.HashMap  (LINE:193)\l0x002e: INVOKE  (r4 I:java.lang.Integer) = (r0 I:int A[D('pos' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0032: INVOKE  (r2 I:java.util.HashMap), (r7 I:java.lang.Object A[D('key' java.lang.String)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0055: RETURN  (r0 I:int A[D('pos' int)]) A[SYNTHETIC] (LINE:203)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|0x0036: INVOKE  (r0 I:int A[D('pos' int)]) = (r1 I:java.lang.Integer A[D('keyFromPool' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:195)\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x0055: RETURN  (r0 I:int A[D('pos' int)]) A[SYNTHETIC] (LINE:203)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: SGET  (r1 I:java.nio.charset.Charset) =  java.nio.charset.StandardCharsets.UTF_8 java.nio.charset.Charset  (LINE:198)\l0x003d: INVOKE  (r1 I:byte[]) = (r7 I:java.lang.String A[D('key' java.lang.String)]), (r1 I:java.nio.charset.Charset) type: VIRTUAL call: java.lang.String.getBytes(java.nio.charset.Charset):byte[] A[MD:(java.nio.charset.Charset):byte[] (c)]\l0x0041: IGET  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:199)\l0x0043: ARRAY_LENGTH  (r4 I:int) = (r1 I:??[] A[D('keyBytes' byte[])]) \l0x0044: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf), (r1 I:byte[] A[D('keyBytes' byte[])]), (r2 I:int), (r4 I:int) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.put(byte[], int, int):void A[MD:(byte[], int, int):void (m)]\l0x0047: IGET  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:200)\l0x0049: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf), (r2 I:byte) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.put(byte):void A[MD:(byte):void (m)]\l0x004c: IGET  (r2 I:java.util.HashMap\<java.lang.String, java.lang.Integer\>) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.keyPool java.util.HashMap  (LINE:201)\l0x004e: INVOKE  (r3 I:java.lang.Integer) = (r0 I:int A[D('pos' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0052: INVOKE  (r2 I:java.util.HashMap), (r7 I:java.lang.Object A[D('key' java.lang.String)]), (r3 I:java.lang.Object) type: VIRTUAL call: java.util.HashMap.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|RETURN\lORIG_RETURN\l|0x0055: RETURN  (r0 I:int A[D('pos' int)])  (LINE:203)\l}"];
MethodNode[shape=record,label="{private int androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.putKey((r6 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0055 \-\> B:1:?, CROSS_EDGE: B:10:0x0036 \-\> B:13:0x0055, CROSS_EDGE: B:12:0x003b \-\> B:13:0x0055\lDebug Info:\l  0x0021\-0x0035: r3 'keyBytes' [B\l  0x0019\-0x003a: r1 'keyFromPool' Ljava\/lang\/Integer;\l  0x0041\-0x0055: r1 'keyBytes' [B\l  0x000a\-0x0055: r0 'pos' I\l  \-1 \-0x0055: r7 'key' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_15 -> Node_1;
Node_10 -> Node_14;
Node_14 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

