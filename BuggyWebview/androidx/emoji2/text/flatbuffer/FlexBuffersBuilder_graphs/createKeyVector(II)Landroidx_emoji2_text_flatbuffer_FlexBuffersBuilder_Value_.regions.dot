digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.createKeyVector(II)Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffersBuilder$Value;" {
subgraph cluster_Region_1737460761 {
label = "R(6:1|(1:4)|6|(2:9|(2:(1:14)|(1:11)))|17|18)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|int int r0 = java.lang.Math.max(0, widthUInBits(r14))\lint r3 = r13\l}"];
subgraph cluster_LoopRegion_729340097 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r3 \< r12.stack.size()) goto L4\l}"];
subgraph cluster_Region_973619535 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x000c\-\>B:5:0x0014\l|int int r4 = androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.elemWidth(4, 0, r12.stack.get(r3).key, r12.f86bb.writePosition(), r3 + 1)\lint r0 = java.lang.Math.max(r0, r4)\lr3++\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0034|int int r3 = align(r0)\lwriteInt(r14, r3)\lint int r10 = r12.f86bb.writePosition()\lint r4 = r13\l}"];
subgraph cluster_LoopRegion_874532411 {
label = "LOOP:1: (2:9|(2:(1:14)|(1:11)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0049|if (r4 \< r12.stack.size()) goto L9\l}"];
subgraph cluster_Region_1280996297 {
label = "R(2:9|(2:(1:14)|(1:11)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x004b|int int r5 = r12.stack.get(r4).key\l}"];
subgraph cluster_Region_1901301360 {
label = "R(2:(1:14)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_562631763 {
label = "IF [B:10:0x0056] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0056|if (r5 == (\-1)) goto L12\l}"];
subgraph cluster_Region_333723711 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x006e|throw new java.lang.AssertionError()\l}"];
}
}
subgraph cluster_Region_794095756 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0058|LOOP_END\lLOOP:1: B:7:0x0043\-\>B:11:0x0058\l|writeOffset(r12.stack.get(r4).key, r3)\lr4++\l}"];
}
}
}
}
Node_14 [shape=record,label="{14\:\ 0x006f}"];
Node_15 [shape=record,label="{15\:\ 0x007d|RETURN\l|return new androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value(\-1, androidx.emoji2.text.flatbuffer.FlexBuffers.toTypedVector(4, 0), r0, r10)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000c|LOOP_START\lLOOP:0: B:3:0x000c\-\>B:5:0x0014\lPHI: r0 r3 \l  PHI: (r0v3 'bitWidth' int) = (r0v2 'bitWidth' int), (r0v4 'bitWidth' int) binds: [B:2:0x0000, B:5:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'i' int) = (r3v0 'i' int), (r3v3 'i' int) binds: [B:2:0x0000, B:5:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0034|SYNTHETIC\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0043|LOOP_START\lLOOP:1: B:7:0x0043\-\>B:11:0x0058\lPHI: r4 \l  PHI: (r4v5 'i' int) = (r4v4 'i' int), (r4v8 'i' int) binds: [B:6:0x0034, B:11:0x0058] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0069|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0069}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x006f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.createKeyVector((r12v0 'this' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r13v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:5:0x0014 \-\> B:3:0x000c, BACK_EDGE: B:11:0x0058 \-\> B:7:0x0043, CROSS_EDGE: B:15:0x007d \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_16[style=dashed];
Node_5 -> Node_3;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_18[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_17;
Node_13 -> Node_1;
Node_11 -> Node_7;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_0 -> Node_2;
Node_3 -> Node_4;
Node_16 -> Node_6;
Node_7 -> Node_8;
Node_17 -> Node_12;
Node_12 -> Node_13;
Node_18 -> Node_14;
}

