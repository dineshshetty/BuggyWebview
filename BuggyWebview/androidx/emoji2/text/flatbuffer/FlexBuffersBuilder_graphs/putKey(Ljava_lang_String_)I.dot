digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.putKey(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|if (r7 != null) goto L4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|RETURN\l|return \-1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004|int r0 = r6.f86bb.writePosition()\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|if ((r6.flags & 1) == 0) goto L12\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|java.lang.Integer r1 = r6.keyPool.get(r7)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|if (r1 != null) goto L10\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|byte[] r3 = r7.getBytes(java.nio.charset.StandardCharsets.UTF_8)\lr6.f86bb.put(r3, 0, r3.length)\lr6.f86bb.put((byte) 0)\lr6.keyPool.put(r7, java.lang.Integer.valueOf(r0))\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return r1.intValue()\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|byte[] r1 = r7.getBytes(java.nio.charset.StandardCharsets.UTF_8)\lr6.f86bb.put(r1, 0, r1.length)\lr6.f86bb.put((byte) 0)\lr6.keyPool.put(r7, java.lang.Integer.valueOf(r0))\l}"];
Node_13 [shape=record,label="{13\:\ 0x0055|RETURN\lORIG_RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private int androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.putKey((r6v0 'this' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r7v0 'key' java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0055 \-\> B:1:?, CROSS_EDGE: B:10:0x0036 \-\> B:13:0x0055, CROSS_EDGE: B:12:0x003b \-\> B:13:0x0055\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_15;
Node_15 -> Node_1;
Node_10 -> Node_14;
Node_14 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

