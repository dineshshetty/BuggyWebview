digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.putUInt(Ljava\/lang\/String;J)V" {
subgraph cluster_Region_747558564 {
label = "R(3:1|(1:3)(1:(1:9)(1:(1:12)(1:13)))|4) | DECL_VAR: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value vVal\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|int int r0 = putKey(r5)\lint int r1 = widthUInBits(r6)\l}"];
subgraph cluster_IfRegion_2108084370 {
label = "IF [B:3:0x0008] THEN: R(1:3) ELSE: R(1:(1:9)(1:(1:12)(1:13)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r1 == 0) goto L3\l}"];
subgraph cluster_Region_1760058145 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value r2 = androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.uInt8(r0, (int) r6)\l}"];
}
subgraph cluster_Region_1975460727 {
label = "R(1:(1:9)(1:(1:12)(1:13))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_252952288 {
label = "IF [B:6:0x0011] THEN: R(1:9) ELSE: R(1:(1:12)(1:13)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0011|if (r1 == 1) goto L9\l}"];
subgraph cluster_Region_1475651168 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0013|androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value r2 = androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.uInt16(r0, (int) r6)\l}"];
}
subgraph cluster_Region_1673285954 {
label = "R(1:(1:12)(1:13)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1627803896 {
label = "IF [B:9:0x001a] THEN: R(1:12) ELSE: R(1:13) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x001a|if (r1 == 2) goto L12\l}"];
subgraph cluster_Region_232547566 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001c|androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value r2 = androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.uInt32(r0, (int) r6)\l}"];
}
subgraph cluster_Region_1463658503 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0022|androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value r2 = androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.uInt64(r0, r6)\l}"];
}
}
}
}
}
}
Node_12 [shape=record,label="{12\:\ 0x0026|PHI: r2 \l  PHI: (r2v7 'vVal' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = (r2v2 'vVal' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), (r2v4 'vVal' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), (r2v6 'vVal' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value), (r2v9 'vVal' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) binds: [B:11:0x0022, B:10:0x001c, B:7:0x0013, B:4:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|r4.stack.add(r2)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x002b}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0010}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0019}"];
MethodNode[shape=record,label="{private void androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.putUInt((r4v0 'this' androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r5v0 'key' java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'value' long A[D('value' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0013 \-\> B:12:0x0026, CROSS_EDGE: B:10:0x001c \-\> B:12:0x0026, CROSS_EDGE: B:11:0x0022 \-\> B:12:0x0026\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_12;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_0 -> Node_2;
Node_13 -> Node_1;
Node_5 -> Node_6;
Node_8 -> Node_9;
}

