digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeBlob(I[BIZ)Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffersBuilder$Value;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARRAY_LENGTH  (r0 I:int) = (r8 I:??[] A[D('blob' byte[])])  (LINE:379)\l0x0001: CAST (r0 I:long) = (long) (r0 I:int) \l0x0002: INVOKE  (r0 I:int) = (r0 I:long) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.widthUInBits(long):int A[MD:(long):int (m)]\l0x0006: INVOKE  (r1 I:int) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder), (r0 I:int A[D('bitWidth' int)]) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.align(int):int A[MD:(int):int (m)] (LINE:380)\l0x000a: ARRAY_LENGTH  (r2 I:int) = (r8 I:??[] A[D('blob' byte[])])  (LINE:381)\l0x000b: CAST (r2 I:long) = (long) (r2 I:int) \l0x000c: INVOKE  (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder), (r2 I:long), (r1 I:int A[D('byteWidth' int)]) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeInt(long, int):void A[MD:(long, int):void (m)]\l0x000f: IGET  (r2 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:382)\l0x0011: INVOKE  (r2 I:int) = (r2 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.writePosition():int A[MD:():int (m)]\l0x0015: IGET  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:383)\l0x0017: ARRAY_LENGTH  (r4 I:int) = (r8 I:??[] A[D('blob' byte[])]) \l0x0018: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf), (r8 I:byte[] A[D('blob' byte[])]), (r5 I:int), (r4 I:int) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.put(byte[], int, int):void A[MD:(byte[], int, int):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|0x001c: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('trailing' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0023  (LINE:384)\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IGET  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:385)\l0x0020: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf), (r5 I:byte) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.put(byte):void A[MD:(byte):void (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0023|0x0023: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = (r7 I:int A[D('key' int)]), (r2 I:int A[D('sloc' int)]), (r9 I:int A[D('type' int)]), (r0 I:int A[D('bitWidth' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.blob(int, int, int, int):androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value A[MD:(int, int, int, int):androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value (m)] (LINE:387)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|RETURN\l|0x0027: RETURN  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeBlob((r6 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('key' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:byte[] A[D('blob' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[D('trailing' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:3:0x001c \-\> B:5:0x0023\lDebug Info:\l  0x0006\-0x0027: r0 'bitWidth' I\l  0x000a\-0x0027: r1 'byteWidth' I\l  0x0015\-0x0027: r2 'sloc' I\l  \-1 \-0x0027: r7 'key' I\l  \-1 \-0x0027: r8 'blob' [B\l  \-1 \-0x0027: r9 'type' I\l  \-1 \-0x0027: r10 'trailing' Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

