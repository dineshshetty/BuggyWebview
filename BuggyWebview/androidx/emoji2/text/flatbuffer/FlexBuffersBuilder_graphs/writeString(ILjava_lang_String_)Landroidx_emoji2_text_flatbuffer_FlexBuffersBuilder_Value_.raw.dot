digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeString(ILjava\/lang\/String;)Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffersBuilder$Value;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:java.nio.charset.Charset) =  java.nio.charset.StandardCharsets.UTF_8 java.nio.charset.Charset  (LINE:367)\l0x0002: INVOKE  (r0 I:byte[]) = (r5 I:java.lang.String A[D('s' java.lang.String)]), (r0 I:java.nio.charset.Charset) type: VIRTUAL call: java.lang.String.getBytes(java.nio.charset.Charset):byte[] A[MD:(java.nio.charset.Charset):byte[] (c)]\l0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char]) \l0x0007: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0008: INVOKE  (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) = \l  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder)\l  (r4 I:int A[D('key' int)])\l  (r0 I:byte[])\l  (r1 I:int)\l  (r2 I:boolean)\l type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeBlob(int, byte[], int, boolean):androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value A[MD:(int, byte[], int, boolean):androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeString((r3 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('key' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('s' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000c: r4 'key' I\l  \-1 \-0x000c: r5 's' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

