digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeOffset(JI)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) = (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.bb androidx.emoji2.text.flatbuffer.ReadWriteBuf  (LINE:552)\l0x0002: INVOKE  (r0 I:int) = (r0 I:androidx.emoji2.text.flatbuffer.ReadWriteBuf) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadWriteBuf.writePosition():int A[MD:():int (m)]\l0x0006: CAST (r0 I:long) = (long) (r0 I:int) \l0x0007: ARITH  (r0 I:long) = (r0 I:long) \- (r7 I:long A[D('val' long)]) \l0x0008: CAST (r1 I:int) = (int) (r0 I:long) \l0x0009: CONST  (r0 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char])  (LINE:553)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('byteWidth' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: CAST (r2 I:long) = (long) (r1 I:int A[D('reloff' int)]) \l0x000e: CONST  (r4 I:??[long, double]) = (1 ??[long, double]) \l0x0010: ARITH  (r0 I:int) = (r9 I:int A[D('byteWidth' int)]) * (8 int) \l0x0012: ARITH  (r4 I:long) = (r4 I:long) \<\< (r0 I:long) \l0x0013: CMP_L  (r0 I:int) = (r2 I:long), (r4 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IF  (r0 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:7:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError \l0x001a: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|0x001d: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: CAST (r2 I:long) = (long) (r1 I:int A[D('reloff' int)])  (LINE:554)\l0x001f: INVOKE  (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder), (r2 I:long), (r9 I:int A[D('byteWidth' int)]) type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeInt(long, int):void A[MD:(long, int):void (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:555)\l}"];
MethodNode[shape=record,label="{private void androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.writeOffset((r6 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder A[IMMUTABLE_TYPE, THIS]), (r7 I:long A[D('val' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('byteWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0022 \-\> B:1:?, CROSS_EDGE: B:3:0x000b \-\> B:9:0x001e\lDebug Info:\l  0x0009\-0x0022: r1 'reloff' I\l  \-1 \-0x0022: r7 'val' J\l  \-1 \-0x0022: r9 'byteWidth' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

