digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.Map.binarySearch(Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffers$KeyVector;[B)I" {
subgraph cluster_Region_1063952970 {
label = "R(3:1|(2:3|(1:14)(1:(1:7)(1:11)))|18)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0000|int r0 = 0\lint int r1 = r6.size() \- 1\l}"];
subgraph cluster_LoopRegion_447891820 {
label = "LOOP:0: (2:3|(1:14)(1:(1:7)(1:11)))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0007|LOOP_START\lLOOP:0: B:23:0x0007\-\>B:37:0x0007\lPHI: r0 r1 \l  PHI: (r0v1 'low' int) = (r0v0 'low' int), (r0v3 'low' int) binds: [B:22:0x0000, B:37:0x0007] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 'high' int) = (r1v1 'high' int), (r1v3 'high' int) binds: [B:22:0x0000, B:37:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \<= r1) goto L3\l}"];
subgraph cluster_Region_1399677001 {
label = "R(2:3|(1:14)(1:(1:7)(1:11)))";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0009|int int r2 = (r0 + r1) \>\>\> 1\landroidx.emoji2.text.flatbuffer.FlexBuffers$Key androidx.emoji2.text.flatbuffer.FlexBuffers.Key r3 = r6.get(r2)\lint int r4 = r3.compareTo(r7)\l}"];
subgraph cluster_IfRegion_774572336 {
label = "IF [B:25:0x0015] THEN: R(1:14) ELSE: R(1:(1:7)(1:11))";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0015|if (r4 \< 0) goto L13\l}"];
subgraph cluster_Region_1753151629 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0017|int r0 = r2 + 1\l}"];
}
subgraph cluster_Region_2027825548 {
label = "R(1:(1:7)(1:11)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_385637268 {
label = "IF [B:27:0x001a] THEN: R(1:7) ELSE: R(1:11) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x001a|if (r4 \> 0) goto L7\l}"];
subgraph cluster_Region_973074588 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x001c|int r1 = r2 \- 1\l}"];
}
subgraph cluster_Region_643489214 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x001f|RETURN\l|return r2\l}"];
}
}
}
}
}
}
Node_32 [shape=record,label="{32\:\ 0x0023|RETURN\l|return \-(r0 + 1)\l}"];
}
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x001a|SYNTHETIC\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0007|SYNTHETIC\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0007|LOOP_END\lSYNTHETIC\lLOOP:0: B:23:0x0007\-\>B:37:0x0007\lPHI: r0 r1 \l  PHI: (r0v3 'low' int) = (r0v2 'low' int), (r0v1 'low' int) binds: [B:39:0x0007, B:38:0x0007] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v3 'high' int) = (r1v2 'high' int), (r1v4 'high' int) binds: [B:39:0x0007, B:38:0x0007] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x001f|SYNTHETIC\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0017|SYNTHETIC\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0007|SYNTHETIC\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0020|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0020}"];
MethodNode[shape=record,label="{private int androidx.emoji2.text.flatbuffer.FlexBuffers.Map.binarySearch((r5v0 'this' androidx.emoji2.text.flatbuffer.FlexBuffers$Map A[IMMUTABLE_TYPE, THIS]), (r6v0 'keys' androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector A[D('keys' androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'searchedKey' byte[] A[D('searchedKey' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x0017 \-\> B:23:0x0007, BACK_EDGE: B:28:0x001c \-\> B:23:0x0007, CROSS_EDGE: B:32:0x0023 \-\> B:21:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_20;Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_34[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_33[style=dashed];
Node_25 -> Node_35;
Node_26 -> Node_39;
Node_27 -> Node_28;
Node_27 -> Node_36[style=dashed];
Node_28 -> Node_38;
Node_30 -> Node_21;
Node_32 -> Node_21;
Node_20 -> Node_22;
Node_33 -> Node_27;
Node_38 -> Node_37;
Node_37 -> Node_23;
Node_36 -> Node_30;
Node_35 -> Node_26;
Node_39 -> Node_37;
Node_34 -> Node_31;
Node_31 -> Node_32;
}

