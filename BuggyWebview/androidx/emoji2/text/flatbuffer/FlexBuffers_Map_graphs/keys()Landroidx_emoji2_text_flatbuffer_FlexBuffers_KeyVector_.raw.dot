digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.Map.keys()Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffers$KeyVector;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:862)\l0x0001: IGET  (r1 I:int) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.end int  (LINE:863)\l0x0003: IGET  (r2 I:int) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.byteWidth int \l0x0005: ARITH  (r2 I:int) = (r2 I:int) * (3 int) \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l0x0008: NEW_INSTANCE  (r2 I:androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector) =  androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector  (LINE:864)\l0x000a: NEW_INSTANCE  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffers$TypedVector) =  androidx.emoji2.text.flatbuffer.FlexBuffers$TypedVector \l0x000c: IGET  (r4 I:androidx.emoji2.text.flatbuffer.ReadBuf) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.bb androidx.emoji2.text.flatbuffer.ReadBuf \l0x000e: IGET  (r5 I:androidx.emoji2.text.flatbuffer.ReadBuf) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.bb androidx.emoji2.text.flatbuffer.ReadBuf \l0x0010: IGET  (r6 I:int) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.byteWidth int \l0x0012: INVOKE  (r5 I:int) = (r5 I:androidx.emoji2.text.flatbuffer.ReadBuf), (r1 I:int A[D('keysOffset' int)]), (r6 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.access$200(androidx.emoji2.text.flatbuffer.ReadBuf, int, int):int A[MD:(androidx.emoji2.text.flatbuffer.ReadBuf, int, int):int (m)] (LINE:865)\l0x0016: IGET  (r6 I:androidx.emoji2.text.flatbuffer.ReadBuf) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.bb androidx.emoji2.text.flatbuffer.ReadBuf \l0x0018: IGET  (r7 I:int) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.byteWidth int \l0x001a: ARITH  (r7 I:int) = (r7 I:int) + (r1 I:int A[D('keysOffset' int)]) \l0x001b: IGET  (r8 I:int) = (r9 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map) androidx.emoji2.text.flatbuffer.FlexBuffers.Map.byteWidth int \l0x001d: INVOKE  (r6 I:int) = (r6 I:androidx.emoji2.text.flatbuffer.ReadBuf), (r7 I:int), (r8 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.access$100(androidx.emoji2.text.flatbuffer.ReadBuf, int, int):int A[MD:(androidx.emoji2.text.flatbuffer.ReadBuf, int, int):int (m)] (LINE:866)\l0x0021: CONST  (r7 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0022: INVOKE  \l  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffers$TypedVector)\l  (r4 I:androidx.emoji2.text.flatbuffer.ReadBuf)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffers.TypedVector.\<init\>(androidx.emoji2.text.flatbuffer.ReadBuf, int, int, int):void A[MD:(androidx.emoji2.text.flatbuffer.ReadBuf, int, int, int):void (m)]\l0x0025: INVOKE  \l  (r2 I:androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector)\l  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffers$TypedVector)\l type: DIRECT call: androidx.emoji2.text.flatbuffer.FlexBuffers.KeyVector.\<init\>(androidx.emoji2.text.flatbuffer.FlexBuffers$TypedVector):void A[MD:(androidx.emoji2.text.flatbuffer.FlexBuffers$TypedVector):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|RETURN\l|0x0028: RETURN  (r2 I:androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector)  (LINE:864)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector androidx.emoji2.text.flatbuffer.FlexBuffers.Map.keys((r9 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0028: r0 'num_prefixed_fields' I\l  0x0008\-0x0028: r1 'keysOffset' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

