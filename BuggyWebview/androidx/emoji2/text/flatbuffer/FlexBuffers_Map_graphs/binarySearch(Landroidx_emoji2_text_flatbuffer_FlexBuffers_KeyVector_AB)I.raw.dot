digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.Map.binarySearch(Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffers$KeyVector;[B)I" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:902)\l0x0001: INVOKE  (r1 I:int) = \l  (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector A[D('keys' androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector)])\l type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlexBuffers.KeyVector.size():int A[MD:():int (m)] (LINE:903)\l0x0005: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|LOOP_START\lLOOP:0: B:23:0x0007\-\>B:37:0x0007\l|0x0007: IF  (r0 I:??[int, byte, short, char] A[D('low' int)]) \> (r1 I:??[int, byte, short, char] A[D('high' int)])  \-\> B:34:0x0020  (LINE:905)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|0x0009: ARITH  (r2 I:int) = (r0 I:int A[D('low' int)]) + (r1 I:int A[D('high' int)])  (LINE:906)\l0x000b: ARITH  (r2 I:int) = (r2 I:int) \>\>\> (1 int) \l0x000d: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Key) = \l  (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector A[D('keys' androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector)])\l  (r2 I:int A[D('mid' int)])\l type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlexBuffers.KeyVector.get(int):androidx.emoji2.text.flatbuffer.FlexBuffers$Key A[MD:(int):androidx.emoji2.text.flatbuffer.FlexBuffers$Key (m)] (LINE:907)\l0x0011: INVOKE  (r4 I:int) = \l  (r3 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Key A[D('k' androidx.emoji2.text.flatbuffer.FlexBuffers$Key)])\l  (r7 I:byte[] A[D('searchedKey' byte[])])\l type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlexBuffers.Key.compareTo(byte[]):int A[MD:(byte[]):int (m)] (LINE:908)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|0x0015: IF  (r4 I:??[int, byte, short, char] A[D('cmp' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:33:0x001a  (LINE:909)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: IF  (r4 I:??[int, byte, short, char] A[D('cmp' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:36:0x001f  (LINE:911)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001c|0x001c: ARITH  (r1 I:int A[D('high' int)]) = (r2 I:int A[D('mid' int)]) + (\-1 int)  (LINE:912)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0007|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0007|LOOP_END\lSYNTHETIC\lLOOP:0: B:23:0x0007\-\>B:37:0x0007\l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|RETURN\l|0x001f: RETURN  (r2 I:int A[D('mid' int)])  (LINE:914)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0017|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|0x0017: ARITH  (r0 I:int A[D('low' int)]) = (r2 I:int A[D('mid' int)]) + (1 int)  (LINE:910)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0007|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0020|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0020|0x0020: ARITH  (r2 I:int A[D('mid' int)]) = (r0 I:int A[D('low' int)]) + (1 int)  (LINE:916)\l0x0022: NEG  (r2 I:int) = (r2 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0023|RETURN\l|0x0023: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{private int androidx.emoji2.text.flatbuffer.FlexBuffers.Map.binarySearch((r5 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffers$Map A[IMMUTABLE_TYPE, THIS]), (r6 I:androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector A[D('keys' androidx.emoji2.text.flatbuffer.FlexBuffers$KeyVector), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:byte[] A[D('searchedKey' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x0017 \-\> B:23:0x0007, BACK_EDGE: B:28:0x001c \-\> B:23:0x0007, CROSS_EDGE: B:32:0x0023 \-\> B:21:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x001e: r2 'mid' I\l  0x0011\-0x001e: r3 'k' Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffers$Key;\l  0x0015\-0x001e: r4 'cmp' I\l  0x001f\-0x0020: r2 'mid' I\l  0x001f\-0x0020: r3 'k' Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffers$Key;\l  0x001f\-0x0020: r4 'cmp' I\l  0x0001\-0x0023: r0 'low' I\l  0x0007\-0x0023: r1 'high' I\l  \-1 \-0x0023: r6 'keys' Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffers$KeyVector;\l  \-1 \-0x0023: r7 'searchedKey' [B\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_34;
Node_24 -> Node_25;
Node_25 -> Node_33;
Node_25 -> Node_35[style=dashed];
Node_33 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_36;
Node_28 -> Node_38;
Node_38 -> Node_37;
Node_37 -> Node_23;
Node_36 -> Node_30;
Node_30 -> Node_21;
Node_35 -> Node_26;
Node_26 -> Node_39;
Node_39 -> Node_37;
Node_34 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_21;
}

