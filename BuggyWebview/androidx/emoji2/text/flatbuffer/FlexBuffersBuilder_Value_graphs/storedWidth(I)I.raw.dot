digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.storedWidth(I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r1 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.type int  (LINE:726)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.isTypeInline(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r1 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.minBitWidth int  (LINE:727)\l0x000a: INVOKE  (r0 I:int) = (r0 I:int), (r2 I:int A[D('parentBitWidth' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: IGET  (r0 I:int) = (r1 I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value) androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.minBitWidth int  (LINE:729)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private int androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.storedWidth((r1 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffersBuilder$Value A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('parentBitWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0011 \-\> B:1:?\lDebug Info:\l  \-1 \-0x0011: r2 'parentBitWidth' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

