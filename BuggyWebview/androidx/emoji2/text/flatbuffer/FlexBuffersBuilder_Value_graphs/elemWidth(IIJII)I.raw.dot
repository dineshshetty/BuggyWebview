digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.elemWidth(IIJII)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r10 I:int A[D('type' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.isTypeInline(int):boolean A[MD:(int):boolean (m)] (LINE:738)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|0x0006: RETURN  (r11 I:int A[D('minBitWidth' int)])  (LINE:739)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:749)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|LOOP_START\lLOOP:0: B:6:0x0008\-\>B:11:0x0025\l|0x0008: CONST  (r1 I:??[int, float, short, byte, char]) = (32 ??[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: IF  (r0 I:??[int, byte, short, char] A[D('byteWidth' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:15:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|0x000c: INVOKE  (r1 I:int) = (r14 I:int A[D('bufSize' int)]), (r0 I:int A[D('byteWidth' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.paddingBytes(int, int):int A[MD:(int, int):int (m)] (LINE:751)\l0x0010: ARITH  (r1 I:int) = (r1 I:int) + (r14 I:int A[D('bufSize' int)]) \l0x0011: ARITH  (r2 I:int) = (r15 I:int A[D('elemIndex' int)]) * (r0 I:int A[D('byteWidth' int)]) \l0x0013: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0014: CAST (r2 I:long) = (long) (r1 I:int A[D('offsetLoc' int)])  (LINE:753)\l0x0015: ARITH  (r2 I:long) = (r2 I:long) \- (r12 I:long A[D('iValue' long)]) \l0x0016: CAST (r4 I:int) = (int) (r2 I:long A[D('offset' long)])  (LINE:755)\l0x0017: CAST (r4 I:long) = (long) (r4 I:int) \l0x0018: INVOKE  (r4 I:int) = (r4 I:long) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.widthUInBits(long):int A[MD:(long):int (m)]\l0x001c: CONST  (r5 I:??[long, double]) = (1 ??[long, double])  (LINE:756)\l0x001e: ARITH  (r5 I:long) = (r5 I:long) \<\< (r4 I:long A[D('bitWidth' int)]) \l0x001f: CAST (r7 I:long) = (long) (r0 I:int A[D('byteWidth' int)]) \l0x0020: CMP_L  (r9 I:int) = (r5 I:long), (r7 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0022|0x0022: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0025 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|LOOP_END\lLOOP:0: B:6:0x0008\-\>B:11:0x0025\l|0x0025: ARITH  (r0 I:int) = (r0 I:int A[D('byteWidth' int)]) * (2 int)  (LINE:749)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|RETURN\l|0x0024: RETURN  (r4 I:int A[D('bitWidth' int)])  (LINE:757)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: NEW_INSTANCE  (r0 I:java.lang.AssertionError A[D('byteWidth' int)]) =  java.lang.AssertionError  (LINE:759)\l0x002a: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static int androidx.emoji2.text.flatbuffer.FlexBuffersBuilder.Value.elemWidth((r10 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('minBitWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('iValue' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('bufSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('elemIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0024 \-\> B:1:?, BACK_EDGE: B:11:0x0025 \-\> B:6:0x0008, CROSS_EDGE: B:13:0x002d \-\> B:1:?\lDebug Info:\l  0x0014\-0x0025: r1 'offsetLoc' I\l  0x0016\-0x0025: r2 'offset' J\l  0x001c\-0x0025: r4 'bitWidth' I\l  0x0008\-0x0028: r0 'byteWidth' I\l  \-1 \-0x002d: r10 'type' I\l  \-1 \-0x002d: r11 'minBitWidth' I\l  \-1 \-0x002d: r12 'iValue' J\l  \-1 \-0x002d: r14 'bufSize' I\l  \-1 \-0x002d: r15 'elemIndex' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_14[style=dashed];
Node_11 -> Node_6;
Node_14 -> Node_10;
Node_10 -> Node_1;
Node_15 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

