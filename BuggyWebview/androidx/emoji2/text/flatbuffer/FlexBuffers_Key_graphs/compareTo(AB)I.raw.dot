digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.Key.compareTo([B)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r5 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Key) androidx.emoji2.text.flatbuffer.FlexBuffers.Key.end int  (LINE:778)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:779)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|LOOP_START\lLOOP:0: B:21:0x0003\-\>B:29:0x001a\l|0x0003: IGET  (r2 I:androidx.emoji2.text.flatbuffer.ReadBuf) = (r5 I:androidx.emoji2.text.flatbuffer.FlexBuffers$Key) androidx.emoji2.text.flatbuffer.FlexBuffers.Key.bb androidx.emoji2.text.flatbuffer.ReadBuf  (LINE:782)\l0x0005: INVOKE  (r2 I:byte) = (r2 I:androidx.emoji2.text.flatbuffer.ReadBuf), (r0 I:int A[D('ia' int)]) type: INTERFACE call: androidx.emoji2.text.flatbuffer.ReadBuf.get(int):byte A[MD:(int):byte (m)]\l0x0009: AGET  (r3 I:??[int, short, byte, char]) = (r6 I:byte[] A[D('other' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char] A[D('io' int)])  (LINE:783)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c1' byte)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0010  (LINE:784)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|0x0010: ARITH  (r0 I:int) = (r0 I:int A[D('ia' int)]) + (1 int)  (LINE:786)\l0x0012: ARITH  (r1 I:int) = (r1 I:int A[D('io' int)]) + (1 int)  (LINE:787)\l0x0014: ARRAY_LENGTH  (r4 I:int) = (r6 I:??[] A[D('other' byte[])])  (LINE:788)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('io' int)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001a \l}"];
Node_29 [shape=record,label="{29\:\ 0x001a|LOOP_END\lLOOP:0: B:21:0x0003\-\>B:29:0x001a\l|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c1' byte)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c2' byte)])  \-\> B:21:0x0003  (LINE:794)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|0x001c: ARITH  (r4 I:int) = (r2 I:int A[D('c1' byte)]) \- (r3 I:int A[D('c2' byte)])  (LINE:795)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|RETURN\l|0x001e: RETURN  (r4 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|0x0017: ARITH  (r4 I:int) = (r2 I:int A[D('c1' byte)]) \- (r3 I:int A[D('c2' byte)])  (LINE:791)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0019|RETURN\l|0x0019: RETURN  (r4 I:int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x000d|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: ARITH  (r4 I:int) = (r2 I:int A[D('c1' byte)]) \- (r3 I:int A[D('c2' byte)])  (LINE:785)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|RETURN\l|0x000f: RETURN  (r4 I:int) \l}"];
MethodNode[shape=record,label="{int androidx.emoji2.text.flatbuffer.FlexBuffers.Key.compareTo((r5 'this' I:androidx.emoji2.text.flatbuffer.FlexBuffers$Key A[IMMUTABLE_TYPE, THIS]), (r6 I:byte[] A[D('other' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0019 \-\> B:19:?, CROSS_EDGE: B:31:0x001e \-\> B:19:?, BACK_EDGE: B:29:0x001a \-\> B:21:0x0003\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x001f: r0 'ia' I\l  0x0003\-0x001f: r1 'io' I\l  0x0009\-0x001f: r2 'c1' B\l  0x000b\-0x001f: r3 'c2' B\l  \-1 \-0x001f: r6 'other' [B\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_25;
Node_22 -> Node_35[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_29;
Node_26 -> Node_33[style=dashed];
Node_29 -> Node_21;
Node_29 -> Node_34[style=dashed];
Node_34 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_33 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_19;
Node_35 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_19;
}

