digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.encodeUtf8(Ljava\/lang\/CharSequence;Ljava\/nio\/ByteBuffer;)V" {
subgraph cluster_Region_1967064991 {
label = "R(1:(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1927840382 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_620583577 {
label = "IF [B:11:0x0004] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (r6.hasArray() != false) goto L3\l}"];
subgraph cluster_Region_314394764 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0006|int int r0 = r6.arrayOffset()\lint int r1 = encodeUtf8Array(r5, r6.array(), r6.position() + r0, r6.remaining())\lr6.position(r1 \- r0)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_2039273134 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0021|encodeUtf8Buffer(r5, r6)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0024|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.flatbuffer.Utf8Safe.encodeUtf8((r4v0 'this' androidx.emoji2.text.flatbuffer.Utf8Safe A[IMMUTABLE_TYPE, THIS]), (r5v0 'in' java.lang.CharSequence A[D('in' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'out' java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0021 \-\> B:14:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.emoji2.text.flatbuffer.Utf8.encodeUtf8(java.lang.CharSequence, java.nio.ByteBuffer):void]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_14 -> Node_9;
}

