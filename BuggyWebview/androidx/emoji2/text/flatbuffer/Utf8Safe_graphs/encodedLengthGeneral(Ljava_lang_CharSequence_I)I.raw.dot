digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.encodedLengthGeneral(Ljava\/lang\/CharSequence;I)I" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r6 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:104)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:105)\l0x0005: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:106)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|LOOP_START\lLOOP:0: B:27:0x0006\-\>B:40:0x0033\l|0x0006: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('utf16Length' int)])  \-\> B:42:0x0036 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|0x0008: INVOKE  (r3 I:char) = (r6 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:107)\l0x000c: CONST  (r4 I:??[int, float, short, byte, char]) = (2048(0x800, float:2.87E\-42) ??[int, float, short, byte, char])  (LINE:108)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000e|0x000e: IF  (r3 I:??[int, byte, short, char] A[D('c' char)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:31:0x0016 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|0x0010: ARITH  (r4 I:int) = (127 int) \- (r3 I:int A[D('c' char)])  (LINE:109)\l0x0012: ARITH  (r4 I:int) = (r4 I:int) \>\>\> (31 int) \l0x0014: ARITH  (r1 I:int) = (r1 I:int A[D('utf8Length' int)]) + (r4 I:int) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0033|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0033|LOOP_END\lLOOP:0: B:27:0x0006\-\>B:40:0x0033\l|0x0033: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:106)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0016|0x0016: ARITH  (r1 I:int) = (r1 I:int A[D('utf8Length' int)]) + (2 int)  (LINE:111)\l0x0018: CONST  (r4 I:??[int, float, short, byte, char]) = (55296(0xd800, float:7.7486E\-41) ??[int, float, short, byte, char])  (LINE:113)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001b|0x001b: IF  (r4 I:??[int, byte, short, char]) \> (r3 I:??[int, byte, short, char] A[D('c' char)])  \-\> B:45:0x0033 \l}"];
Node_33 [shape=record,label="{33\:\ 0x001d|0x001d: CONST  (r4 I:??[int, float, short, byte, char]) = (57343(0xdfff, float:8.0355E\-41) ??[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0020|0x0020: IF  (r3 I:??[int, byte, short, char] A[D('c' char)]) \> (r4 I:??[int, byte, short, char])  \-\> B:46:0x0033 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0022: INVOKE  (r4 I:int) = (r6 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: STATIC call: java.lang.Character.codePointAt(java.lang.CharSequence, int):int A[MD:(java.lang.CharSequence, int):int (c)] (LINE:115)\l0x0026: CONST  (r5 I:??[int, float, short, byte, char]) = (65536(0x10000, float:9.1835E\-41) ??[int, float, short, byte, char])  (LINE:116)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0028|0x0028: IF  (r4 I:??[int, byte, short, char] A[D('cp' int)]) \< (r5 I:??[int, byte, short, char])  \-\> B:43:0x002d \l}"];
Node_37 [shape=record,label="{37\:\ 0x002a|0x002a: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:119)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0033|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x002d|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|0x002d: NEW_INSTANCE  (r5 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException) =  androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException  (LINE:117)\l0x002f: INVOKE  \l  (r5 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException)\l  (r2 I:int A[D('i' int)])\l  (r0 I:int A[D('utf16Length' int)])\l type: DIRECT call: androidx.emoji2.text.flatbuffer.Utf8Safe.UnpairedSurrogateException.\<init\>(int, int):void A[MD:(int, int):void (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0032|0x0032: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_46 [shape=record,label="{46\:\ 0x0033|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0033|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0036|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:int A[D('utf8Length' int)])  (LINE:123)\l}"];
MethodNode[shape=record,label="{private static int androidx.emoji2.text.flatbuffer.Utf8Safe.encodedLengthGeneral((r6 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:40:0x0033 \-\> B:27:0x0006, CROSS_EDGE: B:37:0x002a \-\> B:40:0x0033, CROSS_EDGE: B:34:0x0020 \-\> B:40:0x0033, CROSS_EDGE: B:32:0x001b \-\> B:40:0x0033, CROSS_EDGE: B:41:0x0036 \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0033: r3 'c' C\l  0x0026\-0x0033: r4 'cp' I\l  0x0006\-0x0036: r2 'i' I\l  0x0004\-0x0036: r0 'utf16Length' I\l  0x0005\-0x0036: r1 'utf8Length' I\l  \-1 \-0x0036: r6 'sequence' Ljava\/lang\/CharSequence;\l  \-1 \-0x0036: r7 'start' I\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_42;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_44;
Node_44 -> Node_40;
Node_40 -> Node_27;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_45;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_46;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_43;
Node_37 -> Node_47;
Node_47 -> Node_40;
Node_43 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_25;
Node_46 -> Node_40;
Node_45 -> Node_40;
Node_42 -> Node_41;
Node_41 -> Node_25;
}

