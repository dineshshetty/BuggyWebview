digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Array([BII)Ljava\/lang\/String;" {
Node_63 [shape=record,label="{63\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_65 [shape=record,label="{65\:\ 0x0000}"];
Node_66 [shape=record,label="{66\:\ 0x0008|if (((r14 \| r15) \| ((r13.length \- r14) \- r15)) \< 0) goto L58\l}"];
Node_67 [shape=record,label="{67\:\ 0x000a|r0 = r14\lint r3 = r0 + r15\lchar[] r10 = new char[r15]\lr4 = 0\l}"];
Node_68 [shape=record,label="{68\:\ 0x0010|LOOP_START\lLOOP:0: B:68:0x0010\-\>B:72:0x001b\lPHI: r0 r4 \l  PHI: (r0v4 'offset' int) = (r0v3 'offset' int), (r0v12 'offset' int) binds: [B:67:0x000a, B:72:0x001b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v3 'resultPos' int) = (r4v2 'resultPos' int), (r4v11 'resultPos' int) binds: [B:67:0x000a, B:72:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= r3) goto L57\l}"];
Node_69 [shape=record,label="{69\:\ 0x0012|r5 = r13[r0]\l}"];
Node_70 [shape=record,label="{70\:\ 0x0018|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r5) != false) goto L7\l}"];
Node_72 [shape=record,label="{72\:\ 0x001b|LOOP_END\lLOOP:0: B:68:0x0010\-\>B:72:0x001b\l|int r0 = r0 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r5, r10, r4)\lr4 = r4 + 1\l}"];
Node_108 [shape=record,label="{108\:\ 0x0024|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0024|r9 = r4\l}"];
Node_74 [shape=record,label="{74\:\ 0x0025|LOOP_START\lLOOP:1: B:74:0x0025\-\>B:119:0x0025\lPHI: r0 r9 \l  PHI: (r0v5 'offset' int) = (r0v4 'offset' int), (r0v8 'offset' int) binds: [B:73:0x0024, B:119:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 'resultPos' int) = (r9v0 'resultPos' int), (r9v3 'resultPos' int) binds: [B:73:0x0024, B:119:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= r3) goto L54\l}"];
Node_75 [shape=record,label="{75\:\ 0x0027|int r4 = r0 + 1\lr0 = r13[r0]\l}"];
Node_76 [shape=record,label="{76\:\ 0x002f|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r0) == false) goto L13\l}"];
Node_110 [shape=record,label="{110\:\ 0x004d|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x004d}"];
Node_85 [shape=record,label="{85\:\ 0x0053|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isTwoBytes(r0) == false) goto L16\l}"];
Node_111 [shape=record,label="{111\:\ 0x0069|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0069}"];
Node_91 [shape=record,label="{91\:\ 0x006d|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isThreeBytes(r0) == false) goto L19\l}"];
Node_116 [shape=record,label="{116\:\ 0x0089|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x0089}"];
Node_98 [shape=record,label="{98\:\ 0x008b|if (r4 \>= (r3 + (\-2))) goto L25\l}"];
Node_99 [shape=record,label="{99\:\ 0x008d|int r5 = r4 + 1\lr6 = r13[r4]\lint r4 = r5 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleFourBytes(r0, r6, r13[r5], r13[r4], r10, r9)\lr0 = r4 + 1\lr9 = (r9 + 1) + 1\l}"];
Node_120 [shape=record,label="{120\:\ 0x0025|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x0025|LOOP_END\lSYNTHETIC\lLOOP:1: B:74:0x0025\-\>B:119:0x0025\lPHI: r0 r9 \l  PHI: (r0v8 'offset' int) = (r0v7 'offset' int), (r0v9 'offset' int), (r0v10 'offset' int), (r0v11 'offset' int) binds: [B:123:0x0025, B:122:0x0025, B:121:0x0025, B:120:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v3 'resultPos' int) = (r9v2 'resultPos' int), (r9v4 'resultPos' int), (r9v5 'resultPos' int), (r9v6 'resultPos' int) binds: [B:123:0x0025, B:122:0x0025, B:121:0x0025, B:120:0x0025] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_117 [shape=record,label="{117\:\ 0x00a8|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x00a8}"];
Node_102 [shape=record,label="{102\:\ 0x00ad|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
Node_64 [shape=record,label="{64\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_118 [shape=record,label="{118\:\ 0x006f|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x006f}"];
Node_93 [shape=record,label="{93\:\ 0x0071|if (r4 \>= (r3 + (\-1))) goto L34\l}"];
Node_94 [shape=record,label="{94\:\ 0x0073|int r5 = r4 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleThreeBytes(r0, r13[r4], r13[r5], r10, r9)\lr0 = r5 + 1\lr9 = r9 + 1\l}"];
Node_121 [shape=record,label="{121\:\ 0x0025|SYNTHETIC\l}"];
Node_114 [shape=record,label="{114\:\ 0x0083|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0083}"];
Node_96 [shape=record,label="{96\:\ 0x0088|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
Node_115 [shape=record,label="{115\:\ 0x0055|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0055|if (r4 \>= r3) goto L41\l}"];
Node_87 [shape=record,label="{87\:\ 0x0057|androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleTwoBytes(r0, r13[r4], r10, r9)\lr0 = r4 + 1\lr9 = r9 + 1\l}"];
Node_122 [shape=record,label="{122\:\ 0x0025|SYNTHETIC\l}"];
Node_112 [shape=record,label="{112\:\ 0x0063|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x0063}"];
Node_89 [shape=record,label="{89\:\ 0x0068|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
Node_113 [shape=record,label="{113\:\ 0x0031|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0031|int r5 = r9 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r0, r10, r9)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0036|LOOP_START\lLOOP:2: B:78:0x0036\-\>B:82:0x0041\lPHI: r4 r5 \l  PHI: (r4v5 'offset' int) = (r4v4 'offset' int), (r4v6 'offset' int) binds: [B:77:0x0031, B:82:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v2 'resultPos' int) = (r5v1 'resultPos' int), (r5v3 'resultPos' int) binds: [B:77:0x0031, B:82:0x0041] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r3) goto L53\l}"];
Node_79 [shape=record,label="{79\:\ 0x0038|r6 = r13[r4]\l}"];
Node_80 [shape=record,label="{80\:\ 0x003e|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r6) != false) goto L49\l}"];
Node_82 [shape=record,label="{82\:\ 0x0041|LOOP_END\lLOOP:2: B:78:0x0036\-\>B:82:0x0041\l|int r4 = r4 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r6, r10, r5)\lr5 = r5 + 1\l}"];
Node_125 [shape=record,label="{125\:\ 0x004a|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x004a|r0 = r4\lr9 = r5\l}"];
Node_123 [shape=record,label="{123\:\ 0x0025|SYNTHETIC\l}"];
Node_124 [shape=record,label="{124\:\ 0x004a|SYNTHETIC\l}"];
Node_109 [shape=record,label="{109\:\ 0x00ae|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x00ae}"];
Node_104 [shape=record,label="{104\:\ 0x00b3|RETURN\l|return new java.lang.String(r10, 0, r9)\l}"];
Node_107 [shape=record,label="{107\:\ 0x0024|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x00b4}"];
Node_106 [shape=record,label="{106\:\ 0x00d6|throw new java.lang.ArrayIndexOutOfBoundsException(java.lang.String.format(\"buffer length=%d, index=%d, size=%d\", new java.lang.Object[]\{java.lang.Integer.valueOf(r13.length), java.lang.Integer.valueOf(r14), java.lang.Integer.valueOf(r15)\}))\l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Array((r13v0 'bytes' byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'size' int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:72:0x001b \-\> B:68:0x0010, BACK_EDGE: B:82:0x0041 \-\> B:78:0x0036, BACK_EDGE: B:83:0x004a \-\> B:74:0x0025, CROSS_EDGE: B:78:0x0036 \-\> B:83:0x004a, BACK_EDGE: B:87:0x0057 \-\> B:74:0x0025, BACK_EDGE: B:94:0x0073 \-\> B:74:0x0025, CROSS_EDGE: B:96:0x0088 \-\> B:64:?, BACK_EDGE: B:99:0x008d \-\> B:74:0x0025, CROSS_EDGE: B:102:0x00ad \-\> B:64:?, CROSS_EDGE: B:104:0x00b3 \-\> B:64:?, CROSS_EDGE: B:68:0x0010 \-\> B:73:0x0024, CROSS_EDGE: B:106:0x00d6 \-\> B:64:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_63;Node_63 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_105;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_107;
Node_69 -> Node_70;
Node_70 -> Node_72;
Node_70 -> Node_108[style=dashed];
Node_72 -> Node_68;
Node_108 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_109;
Node_75 -> Node_76;
Node_76 -> Node_110;
Node_76 -> Node_113[style=dashed];
Node_110 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_111;
Node_85 -> Node_115[style=dashed];
Node_111 -> Node_90;
Node_90 -> Node_91;
Node_91 -> Node_116;
Node_91 -> Node_118[style=dashed];
Node_116 -> Node_97;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_117;
Node_99 -> Node_120;
Node_120 -> Node_119;
Node_119 -> Node_74;
Node_117 -> Node_101;
Node_101 -> Node_102;
Node_102 -> Node_64;
Node_118 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_114;
Node_94 -> Node_121;
Node_121 -> Node_119;
Node_114 -> Node_95;
Node_95 -> Node_96;
Node_96 -> Node_64;
Node_115 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_112;
Node_87 -> Node_122;
Node_122 -> Node_119;
Node_112 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_64;
Node_113 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_124;
Node_79 -> Node_80;
Node_80 -> Node_82;
Node_80 -> Node_125[style=dashed];
Node_82 -> Node_78;
Node_125 -> Node_83;
Node_83 -> Node_123;
Node_123 -> Node_119;
Node_124 -> Node_83;
Node_109 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_64;
Node_107 -> Node_73;
Node_105 -> Node_106;
Node_106 -> Node_64;
}

