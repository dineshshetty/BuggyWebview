digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.computeEncodedLength(Ljava\/lang\/CharSequence;)I" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r9 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:75)\l0x0004: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('utf16Length' int)])  (LINE:76)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:77)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|LOOP_START\lLOOP:0: B:24:0x0006\-\>B:27:0x0010\l|0x0006: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('utf16Length' int)])  \-\> B:37:0x0013  (LINE:80)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|0x0008: INVOKE  (r3 I:char) = (r9 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x000c: CONST  (r4 I:??[int, float, short, byte, char]) = (128(0x80, float:1.8E\-43) ??[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|0x000e: IF  (r3 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:38:0x0013 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0010|LOOP_END\lLOOP:0: B:24:0x0006\-\>B:27:0x0010\l|0x0010: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:81)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0013|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0013|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0013|LOOP_START\lLOOP:1: B:28:0x0013\-\>B:31:0x001d\l|0x0013: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('utf16Length' int)])  \-\> B:39:0x002a  (LINE:85)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0015|0x0015: INVOKE  (r3 I:char) = (r9 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:86)\l0x0019: CONST  (r4 I:??[int, float, short, byte, char]) = (2048(0x800, float:2.87E\-42) ??[int, float, short, byte, char])  (LINE:87)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001b|0x001b: IF  (r3 I:??[int, byte, short, char] A[D('c' char)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:40:0x0025 \l}"];
Node_31 [shape=record,label="{31\:\ 0x001d|LOOP_END\lLOOP:1: B:28:0x0013\-\>B:31:0x001d\l|0x001d: ARITH  (r4 I:int) = (127 int) \- (r3 I:int A[D('c' char)])  (LINE:88)\l0x001f: ARITH  (r4 I:int) = (r4 I:int) \>\>\> (31 int) \l0x0021: ARITH  (r1 I:int) = (r1 I:int A[D('utf8Length' int)]) + (r4 I:int) \l0x0022: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:85)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|0x0025: INVOKE  (r4 I:int) = (r9 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8Safe.encodedLengthGeneral(java.lang.CharSequence, int):int A[MD:(java.lang.CharSequence, int):int (m)] (LINE:90)\l0x0029: ARITH  (r1 I:int) = (r1 I:int A[D('utf8Length' int)]) + (r4 I:int) \l}"];
Node_33 [shape=record,label="{33\:\ 0x002a|0x002a: IF  (r1 I:??[int, byte, short, char] A[D('utf8Length' int)]) \< (r0 I:??[int, byte, short, char] A[D('utf16Length' int)])  \-\> B:35:0x002d  (LINE:95)\l}"];
Node_34 [shape=record,label="{34\:\ 0x002c|RETURN\l|0x002c: RETURN  (r1 I:int A[D('utf8Length' int)])  (LINE:100)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x002d|0x002d: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:97)\l0x002f: NEW_INSTANCE  (r4 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0031: INVOKE  (r4 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0034: CONST_STR  (r5 I:java.lang.String) =  \"UTF\-8 length does not fit in int: \" \l0x0036: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0039: CAST (r5 I:long) = (long) (r1 I:int A[D('utf8Length' int)]) \l0x003a: CONST  (r7 I:??[long, double]) = (4294967296(0x100000000, double:2.121995791E\-314) ??[long, double]) \l0x003f: ARITH  (r5 I:long) = (r5 I:long) + (r7 I:long) \l0x0040: INVOKE  (r4 I:java.lang.StringBuilder), (r5 I:long) type: VIRTUAL call: java.lang.StringBuilder.append(long):java.lang.StringBuilder A[MD:(long):java.lang.StringBuilder (c)]\l0x0043: INVOKE  (r4 I:java.lang.String) = (r4 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0047: INVOKE  (r3 I:java.lang.IllegalArgumentException), (r4 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x004a|0x004a: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x002a|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0013|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int androidx.emoji2.text.flatbuffer.Utf8Safe.computeEncodedLength((r9 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0010 \-\> B:24:0x0006, BACK_EDGE: B:31:0x001d \-\> B:28:0x0013, CROSS_EDGE: B:36:0x004a \-\> B:22:?, CROSS_EDGE: B:28:0x0013 \-\> B:33:0x002a, CROSS_EDGE: B:24:0x0006 \-\> B:28:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0022: r3 'c' C\l  0x0025\-0x002a: r3 'c' C\l  0x0004\-0x004a: r0 'utf16Length' I\l  0x0005\-0x004a: r1 'utf8Length' I\l  0x0006\-0x004a: r2 'i' I\l  \-1 \-0x004a: r9 'sequence' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_37;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_38;
Node_27 -> Node_24;
Node_38 -> Node_41;
Node_41 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_40;
Node_31 -> Node_28;
Node_40 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_22;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_39 -> Node_33;
Node_37 -> Node_41;
}

