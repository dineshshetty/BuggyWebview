digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.encodeUtf8Buffer(Ljava\/lang\/CharSequence;Ljava\/nio\/ByteBuffer;)V" {
Node_71 [shape=record,label="{71\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_73 [shape=record,label="{73\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r9 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:298)\l0x0004: INVOKE  (r1 I:int) = (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.position():int A[MD:():int (c)] (LINE:299)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:300)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0009|LOOP_START\lLOOP:0: B:74:0x0009\-\>B:78:0x0014\l|0x0009: CONST  (r3 I:??[int, float, short, byte, char]) = (128(0x80, float:1.8E\-43) ??[int, float, short, byte, char])  (LINE:308)\l}"];
Node_75 [shape=record,label="{75\:\ 0x000b|0x000b: IF  (r2 I:??[int, byte, short, char] A[D('inIx' int)]) \>= (r0 I:??[int, byte, short, char] A[D('inLength' int)])  \-\> B:134:0x0020 \l}"];
Node_132 [shape=record,label="{132\:\ 0x000d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_76 [shape=record,label="{76\:\ 0x000d|TRY_ENTER\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x000d: INVOKE  (r4 I:char) = (r9 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r2 I:int A[D('inIx' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int):char (c), TRY_ENTER]\l0x0011: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_77 [shape=record,label="{77\:\ 0x0012|0x0012: IF  (r4 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:133:0x0020 \l}"];
Node_78 [shape=record,label="{78\:\ 0x0014|LOOP_END\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lLOOP:0: B:74:0x0009\-\>B:78:0x0014\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x0014: ARITH  (r3 I:int) = (r1 I:int A[D('outIx' int)]) + (r2 I:int A[D('inIx' int)]) A[Catch: IndexOutOfBoundsException \-\> 0x001d] (LINE:309)\l0x0016: CAST (r4 I:byte) = (byte) (r5 I:int A[D('c' char)]) A[Catch: IndexOutOfBoundsException \-\> 0x001d]\l0x0017: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r3 I:int), (r4 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int, byte):java.nio.ByteBuffer (c)]\l0x001a: ARITH  (r2 I:int) = (r2 I:int A[D('inIx' int)]) + (1 int) A[Catch: IndexOutOfBoundsException \-\> 0x001d] (LINE:308)\l0x001c: GOTO  \-\> 0x0009 \l}"];
Node_133 [shape=record,label="{133\:\ 0x0020|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0020|0x0020: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('inIx' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('inLength' int)])  \-\> B:84:0x0028  (LINE:311)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0022|TryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x0022: ARITH  (r3 I:int) = (r1 I:int A[D('outIx' int)]) + (r2 I:int A[D('inIx' int)]) A[Catch: IndexOutOfBoundsException \-\> 0x001d] (LINE:313)\l0x0024: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r3 I:int) type: VIRTUAL call: java.nio.ByteBuffer.position(int):java.nio.Buffer A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int):java.nio.Buffer (c)]\l}"];
Node_83 [shape=record,label="{83\:\ 0x0027|RETURN\l|0x0027: RETURN    (LINE:314)\l}"];
Node_72 [shape=record,label="{72\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_84 [shape=record,label="{84\:\ 0x0028|TryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x0028: ARITH  (r1 I:int) = (r1 I:int A[D('outIx' int)]) + (r2 I:int A[D('inIx' int)]) A[Catch: IndexOutOfBoundsException \-\> 0x001d] (LINE:317)\l}"];
Node_85 [shape=record,label="{85\:\ 0x0029|LOOP_START\lLOOP:1: B:85:0x0029\-\>B:123:0x00c1\l|0x0029: IF  (r2 I:??[int, byte, short, char] A[D('inIx' int)]) \>= (r0 I:??[int, byte, short, char] A[D('inLength' int)])  \-\> B:136:0x00c7  (LINE:318)\l}"];
Node_86 [shape=record,label="{86\:\ 0x002b|TryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x002b: INVOKE  (r4 I:char) = (r9 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r2 I:int A[D('inIx' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int):char (c)] (LINE:319)\l}"];
Node_87 [shape=record,label="{87\:\ 0x002f|0x002f: IF  (r4 I:??[int, byte, short, char] A[D('c' char)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:90:0x0037  (LINE:320)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0031|TRY_LEAVE\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x0031: CAST (r5 I:byte) = (byte) (r4 I:int A[D('c' char)]) A[Catch: IndexOutOfBoundsException \-\> 0x001d] (LINE:322)\l0x0032: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r1 I:int A[D('outIx' int)]), (r5 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int, byte):java.nio.ByteBuffer (c), TRY_LEAVE]\l}"];
Node_141 [shape=record,label="{141\:\ 0x00c1|SYNTHETIC\l}"];
Node_123 [shape=record,label="{123\:\ 0x00c1|LOOP_END\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lLOOP:1: B:85:0x0029\-\>B:123:0x00c1\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x00c1: ARITH  (r2 I:int) = (r2 I:int A[D('inIx' int)]) + (1 int) A[Catch: IndexOutOfBoundsException \-\> 0x001d] (LINE:318)\l0x00c3: ARITH  (r1 I:int) = (r1 I:int A[D('outIx' int)]) + (1 int) A[Catch: IndexOutOfBoundsException \-\> 0x001d]\l0x00c5: GOTO  \-\> 0x0029 \l}"];
Node_90 [shape=record,label="{90\:\ 0x0037|0x0037: CONST  (r5 I:??[int, float, short, byte, char]) = (2048(0x800, float:2.87E\-42) ??[int, float, short, byte, char])  (LINE:323)\l}"];
Node_91 [shape=record,label="{91\:\ 0x0039|0x0039: IF  (r4 I:??[int, byte, short, char] A[D('c' char)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:97:0x0053 \l}"];
Node_92 [shape=record,label="{92\:\ 0x003b|0x003b: ARITH  (r5 I:int) = (r1 I:int A[D('outIx' int)]) + (1 int)  (LINE:327)\l0x003d: ARITH  (r6 I:int) = (r4 I:int A[D('c' char)]) \>\>\> (6 int) \l0x003f: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) \| (192(0xc0, float:2.69E\-43) ??[int, float, short, byte, char]) \l0x0041: CAST (r6 I:byte) = (byte) (r6 I:int) \l}"];
Node_130 [shape=record,label="{130\:\ 0x0042|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_93 [shape=record,label="{93\:\ 0x0042|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{IndexOutOfBoundsException \-\> 0x004f, blocks: (B:93:0x0042, B:120:0x00ac), top: B:130:0x0042 \}\lCatch: IndexOutOfBoundsException \-\> 0x004f\l|0x0042: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r1 I:int), (r6 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x004f, MD:(int, byte):java.nio.ByteBuffer (c), TRY_ENTER]\l0x0045: ARITH  (r1 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('c' char)]) & (63 ??[int, float, short, byte, char]) A[Catch: IndexOutOfBoundsException \-\> 0x004f] (LINE:328)\l0x0047: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) \| (r3 I:??[int, boolean, short, byte, char]) A[Catch: IndexOutOfBoundsException \-\> 0x004f]\l0x0048: CAST (r1 I:byte) = (byte) (r1 I:int) A[Catch: IndexOutOfBoundsException \-\> 0x004f]\l0x0049: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r5 I:int A[D('outIx' int)]), (r1 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x004f, MD:(int, byte):java.nio.ByteBuffer (c), TRY_LEAVE]\l}"];
Node_94 [shape=record,label="{94\:\ 0x004c|0x004c: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outIx' int)]) \l}"];
Node_139 [shape=record,label="{139\:\ 0x00c1|SYNTHETIC\l}"];
Node_131 [shape=record,label="{131\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_95 [shape=record,label="{95\:\ 0x004f|ExcHandler: IndexOutOfBoundsException \-\> 0x004f\l|0x004f: MOVE_EXCEPTION  (r3 I:java.lang.IndexOutOfBoundsException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IndexOutOfBoundsException \-\> 0x004f] (LINE:357)\l}"];
Node_96 [shape=record,label="{96\:\ 0x0050|0x0050: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outIx' int)]) \l}"];
Node_126 [shape=record,label="{126\:\ 0x00cc|0x00cc: INVOKE  (r4 I:int) = (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.position():int A[MD:():int (c)] (LINE:362)\l0x00d0: INVOKE  (r5 I:int) = (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.position():int A[MD:():int (c)]\l0x00d4: ARITH  (r5 I:int) = (r1 I:int A[D('outIx' int)]) \- (r5 I:int) \l0x00d6: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x00d8: INVOKE  (r5 I:int) = (r2 I:int A[D('inIx' int)]), (r5 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x00dc: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x00dd: NEW_INSTANCE  (r5 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException  (LINE:363)\l0x00df: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00e1: INVOKE  (r6 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x00e4: CONST_STR  (r7 I:java.lang.String) =  \"Failed writing \" \l0x00e6: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00e9: INVOKE  (r7 I:char) = (r9 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r2 I:int A[D('inIx' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:364)\l0x00ed: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x00f0: CONST_STR  (r7 I:java.lang.String) =  \" at index \" \l0x00f2: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00f5: INVOKE  (r6 I:java.lang.StringBuilder), (r4 I:int A[D('badWriteIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00f8: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00fc: INVOKE  (r5 I:java.lang.ArrayIndexOutOfBoundsException), (r6 I:java.lang.String) type: DIRECT call: java.lang.ArrayIndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_127 [shape=record,label="{127\:\ 0x00ff|0x00ff: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_97 [shape=record,label="{97\:\ 0x0053|0x0053: CONST  (r5 I:??[int, float, short, byte, char] A[D('outIx' int)]) = (55296(0xd800, float:7.7486E\-41) ??[int, float, short, byte, char])  (LINE:329)\l}"];
Node_98 [shape=record,label="{98\:\ 0x0056|0x0056: IF  (r4 I:??[int, byte, short, char] A[D('c' char)]) \< (r5 I:??[int, byte, short, char])  \-\> B:119:0x00a5 \l}"];
Node_99 [shape=record,label="{99\:\ 0x0058|0x0058: CONST  (r5 I:??[int, float, short, byte, char]) = (57343(0xdfff, float:8.0355E\-41) ??[int, float, short, byte, char]) \l}"];
Node_100 [shape=record,label="{100\:\ 0x005b|0x005b: IF  (r5 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char] A[D('c' char)])  \-\> B:102:0x005e \l}"];
Node_102 [shape=record,label="{102\:\ 0x005e|0x005e: ARITH  (r5 I:int) = (r2 I:int A[D('inIx' int)]) + (1 int)  (LINE:343)\l}"];
Node_103 [shape=record,label="{103\:\ 0x0060|0x0060: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('inLength' int)])  \-\> B:135:0x009f \l}"];
Node_104 [shape=record,label="{104\:\ 0x0062|0x0062: ARITH  (r2 I:int) = (r2 I:int A[D('inIx' int)]) + (1 int) \l}"];
Node_105 [shape=record,label="{105\:\ 0x0064|TRY_ENTER\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x0064: INVOKE  (r5 I:char) = (r9 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r2 I:int A[D('inIx' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int):char (c), TRY_ENTER]\l0x0068: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0069: INVOKE  (r5 I:boolean) = (r4 I:char A[D('c' char)]), (r5 I:char) type: STATIC call: java.lang.Character.isSurrogatePair(char, char):boolean A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(char, char):boolean (c)]\l}"];
Node_106 [shape=record,label="{106\:\ 0x006d|0x006d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:137:0x009f \l}"];
Node_107 [shape=record,label="{107\:\ 0x006f|TRY_LEAVE\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x006f: INVOKE  (r5 I:int) = (r4 I:char A[D('c' char)]), (r6 I:char A[D('low' char)]) type: STATIC call: java.lang.Character.toCodePoint(char, char):int A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(char, char):int (c), TRY_LEAVE] (LINE:347)\l}"];
Node_108 [shape=record,label="{108\:\ 0x0073|0x0073: ARITH  (r7 I:int) = (r1 I:int A[D('outIx' int)]) + (1 int)  (LINE:348)\l0x0075: ARITH  (r8 I:int) = (r5 I:int A[D('codePoint' int)]) \>\>\> (18 int) \l0x0077: ARITH  (r8 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) \| (240(0xf0, float:3.36E\-43) ??[int, float, short, byte, char]) \l0x0079: CAST (r8 I:byte) = (byte) (r8 I:int) \l}"];
Node_128 [shape=record,label="{128\:\ 0x007a|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_109 [shape=record,label="{109\:\ 0x007a|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IndexOutOfBoundsException \-\> 0x009c, blocks: (B:109:0x007a, B:113:0x0090), top: B:128:0x007a \}\lCatch: IndexOutOfBoundsException \-\> 0x009c\l|0x007a: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r1 I:int), (r8 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x009c, MD:(int, byte):java.nio.ByteBuffer (c), TRY_ENTER, TRY_LEAVE]\l}"];
Node_110 [shape=record,label="{110\:\ 0x007d|0x007d: ARITH  (r1 I:int) = (r7 I:int A[D('outIx' int)]) + (1 int)  (LINE:349)\l0x007f: ARITH  (r8 I:int) = (r5 I:int A[D('codePoint' int)]) \>\>\> (12 int) \l0x0081: ARITH  (r8 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) & (63 ??[int, float, short, byte, char]) \l0x0083: ARITH  (r8 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) \| (r3 I:??[int, boolean, short, byte, char]) \l0x0084: CAST (r8 I:byte) = (byte) (r8 I:int) \l}"];
Node_111 [shape=record,label="{111\:\ 0x0085|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x0085: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r7 I:int), (r8 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int, byte):java.nio.ByteBuffer (c), TRY_ENTER, TRY_LEAVE]\l}"];
Node_112 [shape=record,label="{112\:\ 0x0088|0x0088: ARITH  (r7 I:int) = (r1 I:int A[D('outIx' int)]) + (1 int)  (LINE:350)\l0x008a: ARITH  (r8 I:int) = (r5 I:int A[D('codePoint' int)]) \>\>\> (6 int) \l0x008c: ARITH  (r8 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) & (63 ??[int, float, short, byte, char]) \l0x008e: ARITH  (r8 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) \| (r3 I:??[int, boolean, short, byte, char]) \l0x008f: CAST (r8 I:byte) = (byte) (r8 I:int) \l}"];
Node_113 [shape=record,label="{113\:\ 0x0090|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IndexOutOfBoundsException \-\> 0x009c, blocks: (B:109:0x007a, B:113:0x0090), top: B:128:0x007a \}\lCatch: IndexOutOfBoundsException \-\> 0x009c\l|0x0090: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r1 I:int), (r8 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x009c, MD:(int, byte):java.nio.ByteBuffer (c), TRY_ENTER]\l0x0093: ARITH  (r1 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('codePoint' int)]) & (63 ??[int, float, short, byte, char]) A[Catch: IndexOutOfBoundsException \-\> 0x009c] (LINE:351)\l0x0095: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) \| (r3 I:??[int, boolean, short, byte, char]) A[Catch: IndexOutOfBoundsException \-\> 0x009c]\l0x0096: CAST (r1 I:byte) = (byte) (r1 I:int) A[Catch: IndexOutOfBoundsException \-\> 0x009c]\l0x0097: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r7 I:int A[D('outIx' int)]), (r1 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x009c, MD:(int, byte):java.nio.ByteBuffer (c), TRY_LEAVE]\l}"];
Node_114 [shape=record,label="{114\:\ 0x009a|0x009a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outIx' int)]) \l}"];
Node_140 [shape=record,label="{140\:\ 0x00c1|SYNTHETIC\l}"];
Node_129 [shape=record,label="{129\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_115 [shape=record,label="{115\:\ 0x009c|ExcHandler: IndexOutOfBoundsException \-\> 0x009c\l|0x009c: MOVE_EXCEPTION  (r3 I:java.lang.IndexOutOfBoundsException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IndexOutOfBoundsException \-\> 0x009c] (LINE:357)\l}"];
Node_116 [shape=record,label="{116\:\ 0x009d|0x009d: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('outIx' int)]) \l}"];
Node_137 [shape=record,label="{137\:\ 0x009f|SYNTHETIC\l}"];
Node_117 [shape=record,label="{117\:\ 0x009f|TRY_ENTER\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x009f: NEW_INSTANCE  (r3 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException) =  androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException A[Catch: IndexOutOfBoundsException \-\> 0x001d, TRY_ENTER] (LINE:344)\l0x00a1: INVOKE  \l  (r3 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException)\l  (r2 I:int A[D('inIx' int)])\l  (r0 I:int A[D('inLength' int)])\l type: DIRECT call: androidx.emoji2.text.flatbuffer.Utf8Safe.UnpairedSurrogateException.\<init\>(int, int):void A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int, int):void (m)]\l}"];
Node_118 [shape=record,label="{118\:\ 0x00a4|TRY_LEAVE\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x00a4: THROW  (r3 I:java.lang.Throwable) A[Catch: IndexOutOfBoundsException \-\> 0x001d, TRY_LEAVE]\l}"];
Node_135 [shape=record,label="{135\:\ 0x009f|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x00a5|0x00a5: ARITH  (r5 I:int) = (r1 I:int A[D('outIx' int)]) + (1 int)  (LINE:334)\l0x00a7: ARITH  (r6 I:int) = (r4 I:int A[D('c' char)]) \>\>\> (12 int) \l0x00a9: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) \| (224(0xe0, float:3.14E\-43) ??[int, float, short, byte, char]) \l0x00ab: CAST (r6 I:byte) = (byte) (r6 I:int) \l}"];
Node_120 [shape=record,label="{120\:\ 0x00ac|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{IndexOutOfBoundsException \-\> 0x004f, blocks: (B:93:0x0042, B:120:0x00ac), top: B:130:0x0042 \}\lCatch: IndexOutOfBoundsException \-\> 0x004f\l|0x00ac: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r1 I:int), (r6 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x004f, MD:(int, byte):java.nio.ByteBuffer (c), TRY_ENTER, TRY_LEAVE]\l}"];
Node_121 [shape=record,label="{121\:\ 0x00af|0x00af: ARITH  (r1 I:int) = (r5 I:int A[D('outIx' int)]) + (1 int)  (LINE:335)\l0x00b1: ARITH  (r6 I:int) = (r4 I:int A[D('c' char)]) \>\>\> (6 int) \l0x00b3: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) & (63 ??[int, float, short, byte, char]) \l0x00b5: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) \| (r3 I:??[int, boolean, short, byte, char]) \l0x00b6: CAST (r6 I:byte) = (byte) (r6 I:int) \l}"];
Node_122 [shape=record,label="{122\:\ 0x00b7|TRY_ENTER\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x00b7: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r5 I:int), (r6 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int, byte):java.nio.ByteBuffer (c), TRY_ENTER]\l0x00ba: ARITH  (r5 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('c' char)]) & (63 ??[int, float, short, byte, char]) A[Catch: IndexOutOfBoundsException \-\> 0x001d] (LINE:336)\l0x00bc: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) \| (r3 I:??[int, boolean, short, byte, char]) A[Catch: IndexOutOfBoundsException \-\> 0x001d]\l0x00bd: CAST (r5 I:byte) = (byte) (r5 I:int) A[Catch: IndexOutOfBoundsException \-\> 0x001d]\l0x00be: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r1 I:int A[D('outIx' int)]), (r5 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(int, byte):java.nio.ByteBuffer A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int, byte):java.nio.ByteBuffer (c)]\l}"];
Node_138 [shape=record,label="{138\:\ 0x00c1|SYNTHETIC\l}"];
Node_136 [shape=record,label="{136\:\ 0x00c7|SYNTHETIC\l}"];
Node_124 [shape=record,label="{124\:\ 0x00c7|TRY_LEAVE\lTryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\lCatch: IndexOutOfBoundsException \-\> 0x001d\l|0x00c7: INVOKE  (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer)]), (r1 I:int A[D('outIx' int)]) type: VIRTUAL call: java.nio.ByteBuffer.position(int):java.nio.Buffer A[Catch: IndexOutOfBoundsException \-\> 0x001d, MD:(int):java.nio.Buffer (c), TRY_LEAVE] (LINE:356)\l}"];
Node_125 [shape=record,label="{125\:\ 0x00cb|RETURN\l|0x00cb: RETURN    (LINE:366)\l}"];
Node_79 [shape=record,label="{79\:\ 0x001d|ExcHandler: IndexOutOfBoundsException \-\> 0x001d\l|0x001d: MOVE_EXCEPTION  (r3 I:java.lang.IndexOutOfBoundsException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IndexOutOfBoundsException \-\> 0x001d] (LINE:357)\l}"];
Node_80 [shape=record,label="{80\:\ 0x001e|0x001e: GOTO  \-\> 0x00cc \l}"];
Node_134 [shape=record,label="{134\:\ 0x0020|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void androidx.emoji2.text.flatbuffer.Utf8Safe.encodeUtf8Buffer((r9 I:java.lang.CharSequence A[D('in' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.nio.ByteBuffer A[D('out' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:123:0x00c1 \-\> B:85:0x0029, CROSS_EDGE: B:94:0x004c \-\> B:123:0x00c1, CROSS_EDGE: B:127:0x00ff \-\> B:72:?, CROSS_EDGE: B:130:0x0042 \-\> B:95:0x004f, CROSS_EDGE: B:114:0x009a \-\> B:123:0x00c1, CROSS_EDGE: B:116:0x009d \-\> B:126:0x00cc, CROSS_EDGE: B:128:0x007a \-\> B:115:0x009c, CROSS_EDGE: B:118:0x00a4 \-\> B:72:?, CROSS_EDGE: B:103:0x0060 \-\> B:117:0x009f, CROSS_EDGE: B:122:0x00b7 \-\> B:123:0x00c1, CROSS_EDGE: B:98:0x0056 \-\> B:119:0x00a5, CROSS_EDGE: B:125:0x00cb \-\> B:72:?, BACK_EDGE: B:78:0x0014 \-\> B:74:0x0009, CROSS_EDGE: B:77:0x0012 \-\> B:81:0x0020, CROSS_EDGE: B:80:0x001e \-\> B:126:0x00cc\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x001d: r5 'c' C\l  0x0008\-0x003d: r1 'outIx' I\l  0x002f\-0x004f: r4 'c' C\l  0x003d\-0x0053: r5 'outIx' I\l  0x0053\-0x0075: r1 'outIx' I\l  0x0075\-0x007f: r7 'outIx' I\l  0x007f\-0x008a: r1 'outIx' I\l  0x0053\-0x009c: r4 'c' C\l  0x0073\-0x009c: r5 'codePoint' I\l  0x0069\-0x009c: r6 'low' C\l  0x008a\-0x009f: r7 'outIx' I\l  0x0004\-0x00a4: r0 'inLength' I\l  0x009f\-0x00a4: r1 'outIx' I\l  0x0009\-0x00a4: r2 'inIx' I\l  \-1 \-0x00a4: r9 'in' Ljava\/lang\/CharSequence;\l  \-1 \-0x00a4: r10 'out' Ljava\/nio\/ByteBuffer;\l  0x00a5\-0x00a7: r1 'outIx' I\l  0x00a7\-0x00b1: r5 'outIx' I\l  0x009f\-0x00c7: r4 'c' C\l  0x00a5\-0x00ff: r0 'inLength' I\l  0x00b1\-0x00ff: r1 'outIx' I\l  0x00a5\-0x00ff: r2 'inIx' I\l  0x00cc\-0x00ff: r3 'e' Ljava\/lang\/IndexOutOfBoundsException;\l  0x00dd\-0x00ff: r4 'badWriteIndex' I\l  0x00a5\-0x00ff: r9 'in' Ljava\/lang\/CharSequence;\l  0x00a5\-0x00ff: r10 'out' Ljava\/nio\/ByteBuffer;\lTryCatch #0 \{IndexOutOfBoundsException \-\> 0x009c, blocks: (B:109:0x007a, B:113:0x0090), top: B:128:0x007a \}, TryCatch #1 \{IndexOutOfBoundsException \-\> 0x004f, blocks: (B:93:0x0042, B:120:0x00ac), top: B:130:0x0042 \}, TryCatch #2 \{IndexOutOfBoundsException \-\> 0x001d, blocks: (B:76:0x000d, B:78:0x0014, B:82:0x0022, B:84:0x0028, B:86:0x002b, B:88:0x0031, B:123:0x00c1, B:105:0x0064, B:107:0x006f, B:111:0x0085, B:117:0x009f, B:118:0x00a4, B:122:0x00b7, B:124:0x00c7), top: B:132:0x000d \}\l}"];
MethodNode -> Node_71;Node_71 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_132[style=dashed];
Node_75 -> Node_134;
Node_132 -> Node_76;
Node_132 -> Node_79;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_133;
Node_78 -> Node_74;
Node_133 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_84;
Node_82 -> Node_83;
Node_83 -> Node_72;
Node_84 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_136;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_90;
Node_88 -> Node_141;
Node_141 -> Node_123;
Node_123 -> Node_85;
Node_90 -> Node_91;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_97;
Node_92 -> Node_130;
Node_130 -> Node_93;
Node_130 -> Node_95;
Node_93 -> Node_94;
Node_93 -> Node_131;
Node_94 -> Node_139;
Node_139 -> Node_123;
Node_131 -> Node_95;
Node_95 -> Node_96;
Node_96 -> Node_126;
Node_126 -> Node_127;
Node_127 -> Node_72;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_119;
Node_99 -> Node_100;
Node_100 -> Node_102;
Node_100 -> Node_119[style=dashed];
Node_102 -> Node_103;
Node_103 -> Node_104[style=dashed];
Node_103 -> Node_135;
Node_104 -> Node_105;
Node_105 -> Node_106;
Node_106 -> Node_107[style=dashed];
Node_106 -> Node_137;
Node_107 -> Node_108;
Node_108 -> Node_128;
Node_128 -> Node_109;
Node_128 -> Node_115;
Node_109 -> Node_110;
Node_109 -> Node_129;
Node_110 -> Node_111;
Node_111 -> Node_112;
Node_112 -> Node_113;
Node_113 -> Node_114;
Node_114 -> Node_140;
Node_140 -> Node_123;
Node_129 -> Node_115;
Node_115 -> Node_116;
Node_116 -> Node_126;
Node_137 -> Node_117;
Node_117 -> Node_118;
Node_118 -> Node_72;
Node_135 -> Node_117;
Node_119 -> Node_120;
Node_120 -> Node_121;
Node_121 -> Node_122;
Node_122 -> Node_138;
Node_138 -> Node_123;
Node_136 -> Node_124;
Node_124 -> Node_125;
Node_125 -> Node_72;
Node_79 -> Node_80;
Node_80 -> Node_126;
Node_134 -> Node_81;
}

