digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Buffer(Ljava\/nio\/ByteBuffer;II)Ljava\/lang\/String;" {
subgraph cluster_Region_1920881727 {
label = "R(1:(2:(1:59)|(5:3|(2:5|(2:(1:8)|(1:7)))|9|(2:11|(3:45|(2:47|(2:(1:50)|(1:49)))|51)(1:(1:(2:(1:43)|(1:39)))(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22)))))|56)))";
node [shape=record,color=blue];
subgraph cluster_Region_106818821 {
label = "R(2:(1:59)|(5:3|(2:5|(2:(1:8)|(1:7)))|9|(2:11|(3:45|(2:47|(2:(1:50)|(1:49)))|51)(1:(1:(2:(1:43)|(1:39)))(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22)))))|56))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1785688194 {
label = "IF [B:66:0x000b] THEN: R(1:59) ELSE: null";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x000b|if ((r13 \| r14 \| ((r12.limit() \- r13) \- r14)) \< 0) goto L58\l}"];
subgraph cluster_Region_2074513504 {
label = "R(1:59)";
node [shape=record,color=blue];
Node_106 [shape=record,label="{106\:\ 0x00ee|throw new java.lang.ArrayIndexOutOfBoundsException(java.lang.String.format(\"buffer limit=%d, index=%d, limit=%d\", java.lang.Integer.valueOf(r12.limit()), java.lang.Integer.valueOf(r13), java.lang.Integer.valueOf(r14)))\l}"];
}
}
subgraph cluster_Region_521468333 {
label = "R(5:3|(2:5|(2:(1:8)|(1:7)))|9|(2:11|(3:45|(2:47|(2:(1:50)|(1:49)))|51)(1:(1:(2:(1:43)|(1:39)))(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22)))))|56)";
node [shape=record,color=blue];
Node_67 [shape=record,label="{67\:\ 0x000d|int int r0 = r13 + r14\lchar[] char[] r9 = new char[r14]\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_1358138821 {
label = "LOOP:0: (2:5|(2:(1:8)|(1:7)))";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x0012|LOOP_START\lLOOP:0: B:68:0x0012\-\>B:72:0x001f\lPHI: r3 r13 \l  PHI: (r3v3 'resultPos' int) = (r3v2 'resultPos' int), (r3v11 'resultPos' int) binds: [B:67:0x000d, B:72:0x001f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 'offset' int) = (r13v0 'offset' int), (r13v9 'offset' int) binds: [B:67:0x000d, B:72:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|if (r13 \< r0) goto L5\l}"];
subgraph cluster_Region_1181557146 {
label = "R(2:5|(2:(1:8)|(1:7)))";
node [shape=record,color=blue];
Node_69 [shape=record,label="{69\:\ 0x0014|byte byte r4 = r12.get(r13)\l}"];
subgraph cluster_Region_2071592071 {
label = "R(2:(1:8)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1295557828 {
label = "IF [B:70:0x001c] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_70 [shape=record,label="{70\:\ 0x001c|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r4) != true) goto L8\l}"];
subgraph cluster_Region_312808232 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_108 [shape=record,label="{108\:\ 0x0028|SYNTHETIC\lEDGE_INSN: B:108:0x0028\-\>B:73:0x0028 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_640644112 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x001f|LOOP_END\lLOOP:0: B:68:0x0012\-\>B:72:0x001f\l|r13++\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r4, r9, r3)\lr3++\l}"];
}
}
}
}
Node_73 [shape=record,label="{73\:\ 0x0028|EDGE_INSN: B:108:0x0028\-\>B:73:0x0028 ?: BREAK  \l|int r8 = r3\l}"];
subgraph cluster_LoopRegion_1185955411 {
label = "LOOP:1: (2:11|(3:45|(2:47|(2:(1:50)|(1:49)))|51)(1:(1:(2:(1:43)|(1:39)))(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22)))))";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x0029|LOOP_START\lLOOP:1: B:74:0x0029\-\>B:119:0x0029\lPHI: r8 r13 \l  PHI: (r8v1 'resultPos' int) = (r8v0 'resultPos' int), (r8v3 'resultPos' int) binds: [B:73:0x0028, B:119:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v2 'offset' int) = (r13v1 'offset' int), (r13v5 'offset' int) binds: [B:73:0x0028, B:119:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|if (r13 \< r0) goto L11\l}"];
subgraph cluster_Region_2078065832 {
label = "R(2:11|(3:45|(2:47|(2:(1:50)|(1:49)))|51)(1:(1:(2:(1:43)|(1:39)))(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22)))))";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x002b|int int r3 = r13 + 1\lbyte byte r13 = r12.get(r13)\l}"];
subgraph cluster_IfRegion_903150250 {
label = "IF [B:76:0x0035] THEN: R(3:45|(2:47|(2:(1:50)|(1:49)))|51) ELSE: R(1:(1:(2:(1:43)|(1:39)))(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22))))";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x0035|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r13) != false) goto L44\l}"];
subgraph cluster_Region_598189274 {
label = "R(3:45|(2:47|(2:(1:50)|(1:49)))|51)";
node [shape=record,color=blue];
Node_77 [shape=record,label="{77\:\ 0x0037|int int r4 = r8 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r13, r9, r8)\l}"];
subgraph cluster_LoopRegion_572695998 {
label = "LOOP:2: (2:47|(2:(1:50)|(1:49)))";
node [shape=record,color=blue];
Node_78 [shape=record,label="{78\:\ 0x003c|LOOP_START\lLOOP:2: B:78:0x003c\-\>B:82:0x0049\lPHI: r3 r4 \l  PHI: (r3v5 'offset' int) = (r3v4 'offset' int), (r3v6 'offset' int) binds: [B:77:0x0037, B:82:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'resultPos' int) = (r4v3 'resultPos' int), (r4v5 'resultPos' int) binds: [B:77:0x0037, B:82:0x0049] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \< r0) goto L47\l}"];
subgraph cluster_Region_1812267878 {
label = "R(2:47|(2:(1:50)|(1:49)))";
node [shape=record,color=blue];
Node_79 [shape=record,label="{79\:\ 0x003e|byte byte r5 = r12.get(r3)\l}"];
subgraph cluster_Region_64985758 {
label = "R(2:(1:50)|(1:49))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1425965061 {
label = "IF [B:80:0x0046] THEN: R(1:50) ELSE: null";
node [shape=record,color=blue];
Node_80 [shape=record,label="{80\:\ 0x0046|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r5) != true) goto L50\l}"];
subgraph cluster_Region_1278557973 {
label = "R(1:50)";
node [shape=record,color=blue];
Node_124 [shape=record,label="{124\:\ 0x0052|SYNTHETIC\lEDGE_INSN: B:124:0x0052\-\>B:83:0x0052 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_1667368818 {
label = "R(1:49)";
node [shape=record,color=blue];
Node_82 [shape=record,label="{82\:\ 0x0049|LOOP_END\lLOOP:2: B:78:0x003c\-\>B:82:0x0049\l|r3++\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r5, r9, r4)\lr4++\l}"];
}
}
}
}
Node_83 [shape=record,label="{83\:\ 0x0052|EDGE_INSN: B:124:0x0052\-\>B:83:0x0052 ?: BREAK  \l|r13 = r3\lr8 = r4\l}"];
}
subgraph cluster_Region_2023518160 {
label = "R(1:(1:(2:(1:43)|(1:39)))(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22)))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_230736848 {
label = "IF [B:85:0x005c] THEN: R(1:(2:(1:43)|(1:39))) ELSE: R(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_85 [shape=record,label="{85\:\ 0x005c|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isTwoBytes(r13) != false) goto L37\l}"];
subgraph cluster_Region_1117392824 {
label = "R(1:(2:(1:43)|(1:39)))";
node [shape=record,color=blue];
subgraph cluster_Region_1039033887 {
label = "R(2:(1:43)|(1:39))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_449051078 {
label = "IF [B:86:0x005e] THEN: R(1:43) ELSE: null";
node [shape=record,color=blue];
Node_86 [shape=record,label="{86\:\ 0x005e|if (r3 \>= r0) goto L41\l}"];
subgraph cluster_Region_1489386272 {
label = "R(1:43)";
node [shape=record,color=blue];
Node_89 [shape=record,label="{89\:\ 0x0073|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
}
}
subgraph cluster_Region_1262198451 {
label = "R(1:39)";
node [shape=record,color=blue];
Node_87 [shape=record,label="{87\:\ 0x0060|androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleTwoBytes(r13, r12.get(r3), r9, r8)\lr13 = r3 + 1\lr8++\l}"];
}
}
}
subgraph cluster_Region_1136602375 {
label = "R(1:(1:(2:(1:36)|(1:32)))(1:(1:27)(1:22))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_279228228 {
label = "IF [B:91:0x0078] THEN: R(1:(2:(1:36)|(1:32))) ELSE: R(1:(1:27)(1:22)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_91 [shape=record,label="{91\:\ 0x0078|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isThreeBytes(r13) != false) goto L29\l}"];
subgraph cluster_Region_1372196103 {
label = "R(1:(2:(1:36)|(1:32)))";
node [shape=record,color=blue];
subgraph cluster_Region_526014399 {
label = "R(2:(1:36)|(1:32))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1444074238 {
label = "IF [B:93:0x007c] THEN: R(1:36) ELSE: null";
node [shape=record,color=blue];
Node_93 [shape=record,label="{93\:\ 0x007c|if (r3 \>= (r0 \- 1)) goto L34\l}"];
subgraph cluster_Region_1991008335 {
label = "R(1:36)";
node [shape=record,color=blue];
Node_96 [shape=record,label="{96\:\ 0x0097|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
}
}
subgraph cluster_Region_376044592 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_94 [shape=record,label="{94\:\ 0x007e|int int r4 = r3 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleThreeBytes(r13, r12.get(r3), r12.get(r4), r9, r8)\lr13 = r4 + 1\lr8++\l}"];
}
}
}
subgraph cluster_Region_1287761032 {
label = "R(1:(1:27)(1:22)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_295120073 {
label = "IF [B:98:0x009a] THEN: R(1:27) ELSE: R(1:22) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_98 [shape=record,label="{98\:\ 0x009a|if (r3 \>= (r0 \- 2)) goto L25\l}"];
subgraph cluster_Region_1306665506 {
label = "R(1:27)";
node [shape=record,color=blue];
Node_102 [shape=record,label="{102\:\ 0x00c2|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
}
subgraph cluster_Region_150342483 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_99 [shape=record,label="{99\:\ 0x009c|int int r4 = r3 + 1\lbyte byte r5 = r12.get(r3)\lint int r3 = r4 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleFourBytes(r13, r5, r12.get(r4), r12.get(r3), r9, r8)\lr13 = r3 + 1\lr8 = r8 + 1 + 1\l}"];
}
}
}
}
}
}
}
}
}
}
Node_104 [shape=record,label="{104\:\ 0x00c8|RETURN\l|return new java.lang.String(r9, 0, r8)\l}"];
}
}
}
Node_63 [shape=record,color=red,label="{63\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x0000}"];
Node_109 [shape=record,color=red,label="{109\:\ 0x0056|SYNTHETIC\l}"];
Node_84 [shape=record,color=red,label="{84\:\ 0x0056}"];
Node_112 [shape=record,color=red,label="{112\:\ 0x0074|SYNTHETIC\l}"];
Node_90 [shape=record,color=red,label="{90\:\ 0x0074}"];
Node_114 [shape=record,color=red,label="{114\:\ 0x0098|SYNTHETIC\l}"];
Node_97 [shape=record,color=red,label="{97\:\ 0x0098}"];
Node_120 [shape=record,color=red,label="{120\:\ 0x0029|SYNTHETIC\l}"];
Node_119 [shape=record,color=red,label="{119\:\ 0x0029|LOOP_END\lSYNTHETIC\lLOOP:1: B:74:0x0029\-\>B:119:0x0029\lPHI: r8 r13 \l  PHI: (r8v3 'resultPos' int) = (r8v2 'resultPos' int), (r8v4 'resultPos' int), (r8v5 'resultPos' int), (r8v6 'resultPos' int) binds: [B:123:0x0029, B:122:0x0029, B:121:0x0029, B:120:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v5 'offset' int) = (r13v4 'offset' int), (r13v6 'offset' int), (r13v7 'offset' int), (r13v8 'offset' int) binds: [B:123:0x0029, B:122:0x0029, B:121:0x0029, B:120:0x0029] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_118 [shape=record,color=red,label="{118\:\ 0x00bd|SYNTHETIC\l}"];
Node_101 [shape=record,color=red,label="{101\:\ 0x00bd}"];
Node_64 [shape=record,color=red,label="{64\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_117 [shape=record,color=red,label="{117\:\ 0x007a|SYNTHETIC\l}"];
Node_92 [shape=record,color=red,label="{92\:\ 0x007a}"];
Node_121 [shape=record,color=red,label="{121\:\ 0x0029|SYNTHETIC\l}"];
Node_115 [shape=record,color=red,label="{115\:\ 0x0092|SYNTHETIC\l}"];
Node_95 [shape=record,color=red,label="{95\:\ 0x0092}"];
Node_116 [shape=record,color=red,label="{116\:\ 0x005e|SYNTHETIC\l}"];
Node_122 [shape=record,color=red,label="{122\:\ 0x0029|SYNTHETIC\l}"];
Node_113 [shape=record,color=red,label="{113\:\ 0x006e|SYNTHETIC\l}"];
Node_88 [shape=record,color=red,label="{88\:\ 0x006e}"];
Node_111 [shape=record,color=red,label="{111\:\ 0x0037|SYNTHETIC\l}"];
Node_123 [shape=record,color=red,label="{123\:\ 0x0029|SYNTHETIC\l}"];
Node_125 [shape=record,color=red,label="{125\:\ 0x0052|SYNTHETIC\l}"];
Node_110 [shape=record,color=red,label="{110\:\ 0x00c3|SYNTHETIC\l}"];
Node_103 [shape=record,color=red,label="{103\:\ 0x00c3}"];
Node_107 [shape=record,color=red,label="{107\:\ 0x0028|SYNTHETIC\l}"];
Node_105 [shape=record,color=red,label="{105\:\ 0x00c9}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Buffer((r12v0 'buffer' java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'offset' int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:72:0x001f \-\> B:68:0x0012, BACK_EDGE: B:82:0x0049 \-\> B:78:0x003c, BACK_EDGE: B:83:0x0052 \-\> B:74:0x0029, CROSS_EDGE: B:78:0x003c \-\> B:83:0x0052, BACK_EDGE: B:87:0x0060 \-\> B:74:0x0029, BACK_EDGE: B:94:0x007e \-\> B:74:0x0029, CROSS_EDGE: B:96:0x0097 \-\> B:64:?, BACK_EDGE: B:99:0x009c \-\> B:74:0x0029, CROSS_EDGE: B:102:0x00c2 \-\> B:64:?, CROSS_EDGE: B:104:0x00c8 \-\> B:64:?, CROSS_EDGE: B:68:0x0012 \-\> B:73:0x0028, CROSS_EDGE: B:106:0x00ee \-\> B:64:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_63;Node_66 -> Node_67[style=dashed];
Node_66 -> Node_105;
Node_106 -> Node_64;
Node_67 -> Node_68;
Node_68 -> Node_69;
Node_68 -> Node_107[style=dashed];
Node_69 -> Node_70;
Node_70 -> Node_72[style=dashed];
Node_70 -> Node_108;
Node_108 -> Node_73;
Node_72 -> Node_68;
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_74 -> Node_110[style=dashed];
Node_75 -> Node_76;
Node_76 -> Node_109[style=dashed];
Node_76 -> Node_111;
Node_77 -> Node_78;
Node_78 -> Node_79;
Node_78 -> Node_125[style=dashed];
Node_79 -> Node_80;
Node_80 -> Node_82[style=dashed];
Node_80 -> Node_124;
Node_124 -> Node_83;
Node_82 -> Node_78;
Node_83 -> Node_123;
Node_85 -> Node_112[style=dashed];
Node_85 -> Node_116;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_113;
Node_89 -> Node_64;
Node_87 -> Node_122;
Node_91 -> Node_114[style=dashed];
Node_91 -> Node_117;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_115;
Node_96 -> Node_64;
Node_94 -> Node_121;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_118;
Node_102 -> Node_64;
Node_99 -> Node_120;
Node_104 -> Node_64;
Node_63 -> Node_65;
Node_65 -> Node_66;
Node_109 -> Node_84;
Node_84 -> Node_85;
Node_112 -> Node_90;
Node_90 -> Node_91;
Node_114 -> Node_97;
Node_97 -> Node_98;
Node_120 -> Node_119;
Node_119 -> Node_74;
Node_118 -> Node_101;
Node_101 -> Node_102;
Node_117 -> Node_92;
Node_92 -> Node_93;
Node_121 -> Node_119;
Node_115 -> Node_95;
Node_95 -> Node_96;
Node_116 -> Node_86;
Node_122 -> Node_119;
Node_113 -> Node_88;
Node_88 -> Node_89;
Node_111 -> Node_77;
Node_123 -> Node_119;
Node_125 -> Node_83;
Node_110 -> Node_103;
Node_103 -> Node_104;
Node_107 -> Node_73;
Node_105 -> Node_106;
}

