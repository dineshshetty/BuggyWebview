digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Buffer(Ljava\/nio\/ByteBuffer;II)Ljava\/lang\/String;" {
Node_63 [shape=record,label="{63\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_65 [shape=record,label="{65\:\ 0x0000|0x0000: ARITH  (r0 I:??[int, boolean]) = (r13 I:??[int, boolean, short, byte, char] A[D('offset' int)]) \| (r14 I:??[int, boolean, short, byte, char] A[D('length' int)])  (LINE:203)\l0x0002: INVOKE  (r1 I:int) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.limit():int A[MD:():int (c)]\l0x0006: ARITH  (r1 I:int) = (r1 I:int) \- (r13 I:int A[D('offset' int)]) \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \- (r14 I:int A[D('length' int)]) \l0x0008: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x000b|0x000b: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:105:0x00c9 \l}"];
Node_67 [shape=record,label="{67\:\ 0x000d|0x000d: ARITH  (r0 I:int) = (r13 I:int A[D('offset' int)]) + (r14 I:int A[D('length' int)])  (LINE:209)\l0x000f: NEW_ARRAY  (r9 I:char[]) = (r14 I:int A[D('length' int), IMMUTABLE_TYPE]) type: char[]  (LINE:213)\l0x0011: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0012|LOOP_START\lLOOP:0: B:68:0x0012\-\>B:72:0x001f\l|0x0012: IF  (r13 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r0 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:107:0x0028  (LINE:218)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0014|0x0014: INVOKE  (r4 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r13 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:219)\l0x0018: INVOKE  (r5 I:boolean) = (r4 I:byte A[D('b' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:220)\l}"];
Node_70 [shape=record,label="{70\:\ 0x001c|0x001c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x001f \l}"];
Node_72 [shape=record,label="{72\:\ 0x001f|LOOP_END\lLOOP:0: B:68:0x0012\-\>B:72:0x001f\l|0x001f: ARITH  (r13 I:int) = (r13 I:int A[D('offset' int)]) + (1 int)  (LINE:223)\l0x0021: ARITH  (r5 I:int) = (r3 I:int A[D('resultPos' int)]) + (1 int)  (LINE:224)\l0x0023: INVOKE  (r4 I:byte A[D('b' byte)]), (r9 I:char[] A[D('resultArr' char[])]), (r3 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(byte, char[], int):void A[MD:(byte, char[], int):void (m)]\l0x0026: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)])  (LINE:225)\l}"];
Node_108 [shape=record,label="{108\:\ 0x0028|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0028|0x0028: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)])  (LINE:227)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0029|LOOP_START\lLOOP:1: B:74:0x0029\-\>B:119:0x0029\l|0x0029: IF  (r13 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r0 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:110:0x00c3 \l}"];
Node_75 [shape=record,label="{75\:\ 0x002b|0x002b: ARITH  (r3 I:int) = (r13 I:int A[D('offset' int)]) + (1 int)  (LINE:228)\l0x002d: INVOKE  (r13 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r13 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)]\l0x0031: INVOKE  (r4 I:boolean) = (r13 I:byte A[D('byte1' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:229)\l}"];
Node_76 [shape=record,label="{76\:\ 0x0035|0x0035: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:109:0x0056 \l}"];
Node_109 [shape=record,label="{109\:\ 0x0056|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x0056|0x0056: INVOKE  (r4 I:boolean) = (r13 I:byte A[D('byte1' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isTwoBytes(byte):boolean A[MD:(byte):boolean (m)] (LINE:241)\l0x005a: CONST_STR  (r5 I:java.lang.String) =  \"Invalid UTF\-8\" \l}"];
Node_85 [shape=record,label="{85\:\ 0x005c|0x005c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:112:0x0074 \l}"];
Node_112 [shape=record,label="{112\:\ 0x0074|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0074|0x0074: INVOKE  (r4 I:boolean) = (r13 I:byte A[D('byte1' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isThreeBytes(byte):boolean A[MD:(byte):boolean (m)] (LINE:247)\l}"];
Node_91 [shape=record,label="{91\:\ 0x0078|0x0078: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:114:0x0098 \l}"];
Node_114 [shape=record,label="{114\:\ 0x0098|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x0098|0x0098: ARITH  (r4 I:int) = (r0 I:int A[D('limit' int)]) + (\-2 int)  (LINE:258)\l}"];
Node_98 [shape=record,label="{98\:\ 0x009a|0x009a: IF  (r3 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:118:0x00bd \l}"];
Node_99 [shape=record,label="{99\:\ 0x009c|0x009c: ARITH  (r4 I:int) = (r3 I:int A[D('offset' int)]) + (1 int)  (LINE:261)\l0x009e: INVOKE  (r5 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r3 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:263)\l0x00a2: ARITH  (r3 I:int) = (r4 I:int A[D('offset' int)]) + (1 int) \l0x00a4: INVOKE  (r6 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r4 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:264)\l0x00a8: ARITH  (r10 I:int) = (r3 I:int A[D('offset' int)]) + (1 int) \l0x00aa: INVOKE  (r7 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r3 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:265)\l0x00ae: ARITH  (r11 I:int) = (r8 I:int A[D('resultPos' int)]) + (1 int) \l0x00b0: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)])  (LINE:261)\l0x00b1: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b2: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b3: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b4: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('resultArr' char[])]) \l0x00b5: INVOKE  (r3 I:byte), (r4 I:byte), (r5 I:byte), (r6 I:byte), (r7 I:char[]), (r8 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleFourBytes(byte, byte, byte, byte, char[], int):void A[MD:(byte, byte, byte, byte, char[], int):void throws java.lang.IllegalArgumentException (m)]\l0x00b8: ARITH  (r11 I:int) = (r11 I:int A[D('resultPos' int)]) + (r2 I:int)  (LINE:269)\l0x00b9: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)]) \l0x00ba: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_120 [shape=record,label="{120\:\ 0x0029|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x0029|LOOP_END\lSYNTHETIC\lLOOP:1: B:74:0x0029\-\>B:119:0x0029\l}"];
Node_118 [shape=record,label="{118\:\ 0x00bd|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x00bd|0x00bd: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:259)\l0x00bf: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_102 [shape=record,label="{102\:\ 0x00c2|0x00c2: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_64 [shape=record,label="{64\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_117 [shape=record,label="{117\:\ 0x007a|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x007a|0x007a: ARITH  (r4 I:int) = (r0 I:int A[D('limit' int)]) + (\-1 int)  (LINE:248)\l}"];
Node_93 [shape=record,label="{93\:\ 0x007c|0x007c: IF  (r3 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:115:0x0092 \l}"];
Node_94 [shape=record,label="{94\:\ 0x007e|0x007e: ARITH  (r4 I:int) = (r3 I:int A[D('offset' int)]) + (1 int)  (LINE:251)\l0x0080: INVOKE  (r3 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r3 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:253)\l0x0084: ARITH  (r5 I:int) = (r4 I:int A[D('offset' int)]) + (1 int) \l0x0086: INVOKE  (r4 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r4 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:254)\l0x008a: ARITH  (r6 I:int) = (r8 I:int A[D('resultPos' int)]) + (1 int) \l0x008c: INVOKE  \l  (r13 I:byte A[D('byte1' byte)])\l  (r3 I:byte)\l  (r4 I:byte)\l  (r9 I:char[] A[D('resultArr' char[])])\l  (r8 I:int A[D('resultPos' int)])\l type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleThreeBytes(byte, byte, byte, char[], int):void A[MD:(byte, byte, byte, char[], int):void throws java.lang.IllegalArgumentException (m)] (LINE:251)\l0x008f: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)]) \l0x0090: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_121 [shape=record,label="{121\:\ 0x0029|SYNTHETIC\l}"];
Node_115 [shape=record,label="{115\:\ 0x0092|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0092|0x0092: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:249)\l0x0094: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_96 [shape=record,label="{96\:\ 0x0097|0x0097: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_116 [shape=record,label="{116\:\ 0x005e|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x005e|0x005e: IF  (r3 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r0 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:113:0x006e  (LINE:242)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0060|0x0060: ARITH  (r4 I:int) = (r3 I:int A[D('offset' int)]) + (1 int)  (LINE:245)\l0x0062: INVOKE  (r3 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r3 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:246)\l0x0066: ARITH  (r5 I:int) = (r8 I:int A[D('resultPos' int)]) + (1 int) \l0x0068: INVOKE  (r13 I:byte A[D('byte1' byte)]), (r3 I:byte), (r9 I:char[] A[D('resultArr' char[])]), (r8 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleTwoBytes(byte, byte, char[], int):void A[MD:(byte, byte, char[], int):void throws java.lang.IllegalArgumentException (m)] (LINE:245)\l0x006b: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)]) \l0x006c: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_122 [shape=record,label="{122\:\ 0x0029|SYNTHETIC\l}"];
Node_113 [shape=record,label="{113\:\ 0x006e|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x006e|0x006e: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:243)\l0x0070: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_89 [shape=record,label="{89\:\ 0x0073|0x0073: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_111 [shape=record,label="{111\:\ 0x0037|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0037|0x0037: ARITH  (r4 I:int) = (r8 I:int A[D('resultPos' int)]) + (1 int)  (LINE:230)\l0x0039: INVOKE  (r13 I:byte A[D('byte1' byte)]), (r9 I:char[] A[D('resultArr' char[])]), (r8 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(byte, char[], int):void A[MD:(byte, char[], int):void (m)]\l}"];
Node_78 [shape=record,label="{78\:\ 0x003c|LOOP_START\lLOOP:2: B:78:0x003c\-\>B:82:0x0049\l|0x003c: IF  (r3 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r0 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:125:0x0052  (LINE:233)\l}"];
Node_79 [shape=record,label="{79\:\ 0x003e|0x003e: INVOKE  (r5 I:byte) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r3 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.get(int):byte A[MD:(int):byte (c)] (LINE:234)\l0x0042: INVOKE  (r6 I:boolean) = (r5 I:byte A[D('b' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:235)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0046|0x0046: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0049 \l}"];
Node_82 [shape=record,label="{82\:\ 0x0049|LOOP_END\lLOOP:2: B:78:0x003c\-\>B:82:0x0049\l|0x0049: ARITH  (r3 I:int) = (r3 I:int A[D('offset' int)]) + (1 int)  (LINE:238)\l0x004b: ARITH  (r6 I:int) = (r4 I:int A[D('resultPos' int)]) + (1 int)  (LINE:239)\l0x004d: INVOKE  (r5 I:byte A[D('b' byte)]), (r9 I:char[] A[D('resultArr' char[])]), (r4 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(byte, char[], int):void A[MD:(byte, char[], int):void (m)]\l0x0050: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)])  (LINE:240)\l}"];
Node_124 [shape=record,label="{124\:\ 0x0052|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x0052|0x0052: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])  (LINE:271)\l0x0053: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_123 [shape=record,label="{123\:\ 0x0029|SYNTHETIC\l}"];
Node_125 [shape=record,label="{125\:\ 0x0052|SYNTHETIC\l}"];
Node_110 [shape=record,label="{110\:\ 0x00c3|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x00c3|0x00c3: NEW_INSTANCE  (r2 I:java.lang.String) =  java.lang.String  (LINE:273)\l0x00c5: INVOKE  (r2 I:java.lang.String), (r9 I:char[] A[D('resultArr' char[])]), (r1 I:int), (r8 I:int A[D('resultPos' int)]) type: DIRECT call: java.lang.String.\<init\>(char[], int, int):void A[MD:(char[], int, int):void (c)]\l}"];
Node_104 [shape=record,label="{104\:\ 0x00c8|RETURN\l|0x00c8: RETURN  (r2 I:java.lang.String) \l}"];
Node_107 [shape=record,label="{107\:\ 0x0028|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x00c9|0x00c9: NEW_INSTANCE  (r0 I:java.lang.ArrayIndexOutOfBoundsException A[D('limit' int)]) =  java.lang.ArrayIndexOutOfBoundsException  (LINE:204)\l0x00cb: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x00cc: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x00ce: INVOKE  (r4 I:int) = (r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.limit():int A[MD:():int (c)] (LINE:205)\l0x00d2: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x00d6: APUT  (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r4 I:??[OBJECT, ARRAY]) \l0x00d8: INVOKE  (r1 I:java.lang.Integer) = (r13 I:int A[D('offset' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:206)\l0x00dc: APUT  (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x00de: INVOKE  (r1 I:java.lang.Integer) = (r14 I:int A[D('length' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x00e2: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x00e3: APUT  (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x00e5: CONST_STR  (r1 I:java.lang.String) =  \"buffer limit=%d, index=%d, limit=%d\"  (LINE:205)\l0x00e7: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r3 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x00eb: INVOKE  (r0 I:java.lang.ArrayIndexOutOfBoundsException), (r1 I:java.lang.String) type: DIRECT call: java.lang.ArrayIndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_106 [shape=record,label="{106\:\ 0x00ee|0x00ee: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Buffer((r12 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:72:0x001f \-\> B:68:0x0012, BACK_EDGE: B:82:0x0049 \-\> B:78:0x003c, BACK_EDGE: B:83:0x0052 \-\> B:74:0x0029, CROSS_EDGE: B:78:0x003c \-\> B:83:0x0052, BACK_EDGE: B:87:0x0060 \-\> B:74:0x0029, BACK_EDGE: B:94:0x007e \-\> B:74:0x0029, CROSS_EDGE: B:96:0x0097 \-\> B:64:?, BACK_EDGE: B:99:0x009c \-\> B:74:0x0029, CROSS_EDGE: B:102:0x00c2 \-\> B:64:?, CROSS_EDGE: B:104:0x00c8 \-\> B:64:?, CROSS_EDGE: B:68:0x0012 \-\> B:73:0x0028, CROSS_EDGE: B:106:0x00ee \-\> B:64:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0023: r3 'resultPos' I\l  0x0018\-0x0026: r4 'b' B\l  0x0023\-0x0028: r5 'resultPos' I\l  0x0028\-0x0029: r3 'resultPos' I\l  \-1 \-0x002d: r13 'offset' I\l  0x0029\-0x0039: r8 'resultPos' I\l  0x0039\-0x004d: r4 'resultPos' I\l  0x0042\-0x0050: r5 'b' B\l  0x004d\-0x0052: r6 'resultPos' I\l  0x0031\-0x0052: r13 'byte1' B\l  0x0052\-0x0056: r4 'resultPos' I\l  0x002d\-0x0062: r3 'offset' I\l  0x0056\-0x0068: r8 'resultPos' I\l  0x0062\-0x006e: r4 'offset' I\l  0x0068\-0x006e: r5 'resultPos' I\l  0x006e\-0x0080: r3 'offset' I\l  0x0080\-0x0086: r4 'offset' I\l  0x006e\-0x008c: r8 'resultPos' I\l  0x0086\-0x0092: r5 'offset' I\l  0x008c\-0x0092: r6 'resultPos' I\l  0x0092\-0x009e: r3 'offset' I\l  0x009e\-0x00a4: r4 'offset' I\l  0x00a4\-0x00aa: r3 'offset' I\l  0x0092\-0x00b0: r8 'resultPos' I\l  0x00aa\-0x00bb: r10 'offset' I\l  0x00b0\-0x00bb: r11 'resultPos' I\l  0x0056\-0x00bb: r13 'byte1' B\l  0x00bb\-0x00bd: r13 'offset' I\l  0x00bd\-0x00c3: r3 'offset' I\l  0x00bd\-0x00c3: r13 'byte1' B\l  0x000f\-0x00c9: r0 'limit' I\l  0x00bb\-0x00c9: r8 'resultPos' I\l  0x0011\-0x00c9: r9 'resultArr' [C\l  \-1 \-0x00ee: r12 'buffer' Ljava\/nio\/ByteBuffer;\l  0x00c3\-0x00ee: r13 'offset' I\l  \-1 \-0x00ee: r14 'length' I\l}"];
MethodNode -> Node_63;Node_63 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_105;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_107;
Node_69 -> Node_70;
Node_70 -> Node_72;
Node_70 -> Node_108[style=dashed];
Node_72 -> Node_68;
Node_108 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_110;
Node_75 -> Node_76;
Node_76 -> Node_109;
Node_76 -> Node_111[style=dashed];
Node_109 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_112;
Node_85 -> Node_116[style=dashed];
Node_112 -> Node_90;
Node_90 -> Node_91;
Node_91 -> Node_114;
Node_91 -> Node_117[style=dashed];
Node_114 -> Node_97;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_118;
Node_99 -> Node_120;
Node_120 -> Node_119;
Node_119 -> Node_74;
Node_118 -> Node_101;
Node_101 -> Node_102;
Node_102 -> Node_64;
Node_117 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_115;
Node_94 -> Node_121;
Node_121 -> Node_119;
Node_115 -> Node_95;
Node_95 -> Node_96;
Node_96 -> Node_64;
Node_116 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_113;
Node_87 -> Node_122;
Node_122 -> Node_119;
Node_113 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_64;
Node_111 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_125;
Node_79 -> Node_80;
Node_80 -> Node_82;
Node_80 -> Node_124[style=dashed];
Node_82 -> Node_78;
Node_124 -> Node_83;
Node_83 -> Node_123;
Node_123 -> Node_119;
Node_125 -> Node_83;
Node_110 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_64;
Node_107 -> Node_73;
Node_105 -> Node_106;
Node_106 -> Node_64;
}

