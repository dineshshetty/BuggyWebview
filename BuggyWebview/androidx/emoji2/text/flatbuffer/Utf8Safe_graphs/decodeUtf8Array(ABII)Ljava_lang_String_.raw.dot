digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Array([BII)Ljava\/lang\/String;" {
Node_63 [shape=record,label="{63\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_65 [shape=record,label="{65\:\ 0x0000|0x0000: ARITH  (r0 I:??[int, boolean]) = (r14 I:??[int, boolean, short, byte, char] A[D('index' int)]) \| (r15 I:??[int, boolean, short, byte, char] A[D('size' int)])  (LINE:128)\l0x0002: ARRAY_LENGTH  (r1 I:int) = (r13 I:??[] A[D('bytes' byte[])]) \l0x0003: ARITH  (r1 I:int) = (r1 I:int) \- (r14 I:int A[D('index' int)]) \l0x0004: ARITH  (r1 I:int) = (r1 I:int) \- (r15 I:int A[D('size' int)]) \l0x0005: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:105:0x00b4 \l}"];
Node_67 [shape=record,label="{67\:\ 0x000a|0x000a: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)])  (LINE:133)\l0x000b: ARITH  (r3 I:int) = (r0 I:int A[D('offset' int)]) + (r15 I:int A[D('size' int)])  (LINE:134)\l0x000d: NEW_ARRAY  (r10 I:char[]) = (r15 I:int A[D('size' int), IMMUTABLE_TYPE]) type: char[]  (LINE:138)\l0x000f: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:139)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0010|LOOP_START\lLOOP:0: B:68:0x0010\-\>B:72:0x001b\l|0x0010: IF  (r0 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r3 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:107:0x0024  (LINE:143)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0012|0x0012: AGET  (r5 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char] A[D('offset' int)])  (LINE:144)\l0x0014: INVOKE  (r6 I:boolean) = (r5 I:byte A[D('b' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:145)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0018|0x0018: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x001b \l}"];
Node_72 [shape=record,label="{72\:\ 0x001b|LOOP_END\lLOOP:0: B:68:0x0010\-\>B:72:0x001b\l|0x001b: ARITH  (r0 I:int) = (r0 I:int A[D('offset' int)]) + (1 int)  (LINE:148)\l0x001d: ARITH  (r6 I:int) = (r4 I:int A[D('resultPos' int)]) + (1 int)  (LINE:149)\l0x001f: INVOKE  (r5 I:byte A[D('b' byte)]), (r10 I:char[] A[D('resultArr' char[])]), (r4 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(byte, char[], int):void A[MD:(byte, char[], int):void (m)]\l0x0022: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)])  (LINE:150)\l}"];
Node_108 [shape=record,label="{108\:\ 0x0024|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0024|0x0024: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)])  (LINE:152)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0025|LOOP_START\lLOOP:1: B:74:0x0025\-\>B:119:0x0025\l|0x0025: IF  (r0 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r3 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:109:0x00ae \l}"];
Node_75 [shape=record,label="{75\:\ 0x0027|0x0027: ARITH  (r4 I:int) = (r0 I:int A[D('offset' int)]) + (1 int)  (LINE:153)\l0x0029: AGET  (r0 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char] A[D('offset' int)]) \l0x002b: INVOKE  (r5 I:boolean) = (r0 I:byte A[D('byte1' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:154)\l}"];
Node_76 [shape=record,label="{76\:\ 0x002f|0x002f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:110:0x004d \l}"];
Node_110 [shape=record,label="{110\:\ 0x004d|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x004d|0x004d: INVOKE  (r5 I:boolean) = (r0 I:byte A[D('byte1' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isTwoBytes(byte):boolean A[MD:(byte):boolean (m)] (LINE:166)\l0x0051: CONST_STR  (r6 I:java.lang.String) =  \"Invalid UTF\-8\" \l}"];
Node_85 [shape=record,label="{85\:\ 0x0053|0x0053: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:111:0x0069 \l}"];
Node_111 [shape=record,label="{111\:\ 0x0069|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0069|0x0069: INVOKE  (r5 I:boolean) = (r0 I:byte A[D('byte1' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isThreeBytes(byte):boolean A[MD:(byte):boolean (m)] (LINE:171)\l}"];
Node_91 [shape=record,label="{91\:\ 0x006d|0x006d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:116:0x0089 \l}"];
Node_116 [shape=record,label="{116\:\ 0x0089|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x0089|0x0089: ARITH  (r5 I:int) = (r3 I:int A[D('limit' int)]) + (\-2 int)  (LINE:182)\l}"];
Node_98 [shape=record,label="{98\:\ 0x008b|0x008b: IF  (r4 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:117:0x00a8 \l}"];
Node_99 [shape=record,label="{99\:\ 0x008d|0x008d: ARITH  (r5 I:int) = (r4 I:int A[D('offset' int)]) + (1 int)  (LINE:185)\l0x008f: AGET  (r6 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char] A[D('offset' int)]) \l0x0091: ARITH  (r4 I:int) = (r5 I:int A[D('offset' int)]) + (1 int) \l0x0093: AGET  (r7 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r5 I:??[int, short, byte, char] A[D('offset' int)]) \l0x0095: ARITH  (r11 I:int) = (r4 I:int A[D('offset' int)]) + (1 int) \l0x0097: AGET  (r8 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char] A[D('offset' int)]) \l0x0099: ARITH  (r12 I:int) = (r9 I:int A[D('resultPos' int)]) + (1 int) \l0x009b: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) \l0x009c: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x009d: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x009e: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x009f: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('resultArr' char[])]) \l0x00a0: INVOKE  (r4 I:byte), (r5 I:byte), (r6 I:byte), (r7 I:byte), (r8 I:char[]), (r9 I:int) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleFourBytes(byte, byte, byte, byte, char[], int):void A[MD:(byte, byte, byte, byte, char[], int):void throws java.lang.IllegalArgumentException (m)]\l0x00a3: ARITH  (r12 I:int) = (r12 I:int A[D('resultPos' int)]) + (r2 I:int)  (LINE:193)\l0x00a4: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)]) \l0x00a5: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_120 [shape=record,label="{120\:\ 0x0025|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x0025|LOOP_END\lSYNTHETIC\lLOOP:1: B:74:0x0025\-\>B:119:0x0025\l}"];
Node_117 [shape=record,label="{117\:\ 0x00a8|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x00a8|0x00a8: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:183)\l0x00aa: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r6 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_102 [shape=record,label="{102\:\ 0x00ad|0x00ad: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_64 [shape=record,label="{64\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_118 [shape=record,label="{118\:\ 0x006f|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x006f|0x006f: ARITH  (r5 I:int) = (r3 I:int A[D('limit' int)]) + (\-1 int)  (LINE:172)\l}"];
Node_93 [shape=record,label="{93\:\ 0x0071|0x0071: IF  (r4 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:114:0x0083 \l}"];
Node_94 [shape=record,label="{94\:\ 0x0073|0x0073: ARITH  (r5 I:int) = (r4 I:int A[D('offset' int)]) + (1 int)  (LINE:175)\l0x0075: AGET  (r4 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char] A[D('offset' int)]) \l0x0077: ARITH  (r6 I:int) = (r5 I:int A[D('offset' int)]) + (1 int) \l0x0079: AGET  (r5 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r5 I:??[int, short, byte, char] A[D('offset' int)]) \l0x007b: ARITH  (r7 I:int) = (r9 I:int A[D('resultPos' int)]) + (1 int) \l0x007d: INVOKE  \l  (r0 I:byte A[D('byte1' byte)])\l  (r4 I:byte)\l  (r5 I:byte)\l  (r10 I:char[] A[D('resultArr' char[])])\l  (r9 I:int A[D('resultPos' int)])\l type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleThreeBytes(byte, byte, byte, char[], int):void A[MD:(byte, byte, byte, char[], int):void throws java.lang.IllegalArgumentException (m)]\l0x0080: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)]) \l0x0081: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_121 [shape=record,label="{121\:\ 0x0025|SYNTHETIC\l}"];
Node_114 [shape=record,label="{114\:\ 0x0083|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0083|0x0083: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:173)\l0x0085: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r6 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_96 [shape=record,label="{96\:\ 0x0088|0x0088: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_115 [shape=record,label="{115\:\ 0x0055|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0055|0x0055: IF  (r4 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r3 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:112:0x0063  (LINE:167)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0057|0x0057: ARITH  (r5 I:int) = (r4 I:int A[D('offset' int)]) + (1 int)  (LINE:170)\l0x0059: AGET  (r4 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char] A[D('offset' int)]) \l0x005b: ARITH  (r6 I:int) = (r9 I:int A[D('resultPos' int)]) + (1 int) \l0x005d: INVOKE  (r0 I:byte A[D('byte1' byte)]), (r4 I:byte), (r10 I:char[] A[D('resultArr' char[])]), (r9 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleTwoBytes(byte, byte, char[], int):void A[MD:(byte, byte, char[], int):void throws java.lang.IllegalArgumentException (m)]\l0x0060: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)]) \l0x0061: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_122 [shape=record,label="{122\:\ 0x0025|SYNTHETIC\l}"];
Node_112 [shape=record,label="{112\:\ 0x0063|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x0063|0x0063: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:168)\l0x0065: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r6 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_89 [shape=record,label="{89\:\ 0x0068|0x0068: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_113 [shape=record,label="{113\:\ 0x0031|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0031|0x0031: ARITH  (r5 I:int) = (r9 I:int A[D('resultPos' int)]) + (1 int)  (LINE:155)\l0x0033: INVOKE  (r0 I:byte A[D('byte1' byte)]), (r10 I:char[] A[D('resultArr' char[])]), (r9 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(byte, char[], int):void A[MD:(byte, char[], int):void (m)]\l}"];
Node_78 [shape=record,label="{78\:\ 0x0036|LOOP_START\lLOOP:2: B:78:0x0036\-\>B:82:0x0041\l|0x0036: IF  (r4 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r3 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:124:0x004a  (LINE:158)\l}"];
Node_79 [shape=record,label="{79\:\ 0x0038|0x0038: AGET  (r6 I:??[int, short, byte, char]) = (r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char] A[D('offset' int)])  (LINE:159)\l0x003a: INVOKE  (r7 I:boolean) = (r6 I:byte A[D('b' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:160)\l}"];
Node_80 [shape=record,label="{80\:\ 0x003e|0x003e: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0041 \l}"];
Node_82 [shape=record,label="{82\:\ 0x0041|LOOP_END\lLOOP:2: B:78:0x0036\-\>B:82:0x0041\l|0x0041: ARITH  (r4 I:int) = (r4 I:int A[D('offset' int)]) + (1 int)  (LINE:163)\l0x0043: ARITH  (r7 I:int) = (r5 I:int A[D('resultPos' int)]) + (1 int)  (LINE:164)\l0x0045: INVOKE  (r6 I:byte A[D('b' byte)]), (r10 I:char[] A[D('resultArr' char[])]), (r5 I:int A[D('resultPos' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(byte, char[], int):void A[MD:(byte, char[], int):void (m)]\l0x0048: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)])  (LINE:165)\l}"];
Node_125 [shape=record,label="{125\:\ 0x004a|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x004a|0x004a: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('byte1' byte)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])  (LINE:195)\l0x004b: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultPos' int)]) \l}"];
Node_123 [shape=record,label="{123\:\ 0x0025|SYNTHETIC\l}"];
Node_124 [shape=record,label="{124\:\ 0x004a|SYNTHETIC\l}"];
Node_109 [shape=record,label="{109\:\ 0x00ae|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x00ae|0x00ae: NEW_INSTANCE  (r2 I:java.lang.String) =  java.lang.String  (LINE:197)\l0x00b0: INVOKE  (r2 I:java.lang.String), (r10 I:char[] A[D('resultArr' char[])]), (r1 I:int), (r9 I:int A[D('resultPos' int)]) type: DIRECT call: java.lang.String.\<init\>(char[], int, int):void A[MD:(char[], int, int):void (c)]\l}"];
Node_104 [shape=record,label="{104\:\ 0x00b3|RETURN\l|0x00b3: RETURN  (r2 I:java.lang.String) \l}"];
Node_107 [shape=record,label="{107\:\ 0x0024|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x00b4|0x00b4: NEW_INSTANCE  (r0 I:java.lang.ArrayIndexOutOfBoundsException A[D('offset' int)]) =  java.lang.ArrayIndexOutOfBoundsException  (LINE:129)\l0x00b6: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x00b7: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x00b9: ARRAY_LENGTH  (r4 I:int) = (r13 I:??[] A[D('bytes' byte[])]) \l0x00ba: INVOKE  (r4 I:java.lang.Integer) = (r4 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:130)\l0x00be: APUT  (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r4 I:??[OBJECT, ARRAY]) \l0x00c0: INVOKE  (r1 I:java.lang.Integer) = (r14 I:int A[D('index' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x00c4: APUT  (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x00c6: INVOKE  (r1 I:java.lang.Integer) = (r15 I:int A[D('size' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x00ca: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x00cb: APUT  (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x00cd: CONST_STR  (r1 I:java.lang.String) =  \"buffer length=%d, index=%d, size=%d\" \l0x00cf: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r3 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x00d3: INVOKE  (r0 I:java.lang.ArrayIndexOutOfBoundsException), (r1 I:java.lang.String) type: DIRECT call: java.lang.ArrayIndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_106 [shape=record,label="{106\:\ 0x00d6|0x00d6: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Array((r13 I:byte[] A[D('bytes' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:72:0x001b \-\> B:68:0x0010, BACK_EDGE: B:82:0x0041 \-\> B:78:0x0036, BACK_EDGE: B:83:0x004a \-\> B:74:0x0025, CROSS_EDGE: B:78:0x0036 \-\> B:83:0x004a, BACK_EDGE: B:87:0x0057 \-\> B:74:0x0025, BACK_EDGE: B:94:0x0073 \-\> B:74:0x0025, CROSS_EDGE: B:96:0x0088 \-\> B:64:?, BACK_EDGE: B:99:0x008d \-\> B:74:0x0025, CROSS_EDGE: B:102:0x00ad \-\> B:64:?, CROSS_EDGE: B:104:0x00b3 \-\> B:64:?, CROSS_EDGE: B:68:0x0010 \-\> B:73:0x0024, CROSS_EDGE: B:106:0x00d6 \-\> B:64:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x001f: r4 'resultPos' I\l  0x0014\-0x0022: r5 'b' B\l  0x001f\-0x0024: r6 'resultPos' I\l  0x0024\-0x0025: r4 'resultPos' I\l  0x000b\-0x0029: r0 'offset' I\l  0x0025\-0x0033: r9 'resultPos' I\l  0x0033\-0x0045: r5 'resultPos' I\l  0x003a\-0x0048: r6 'b' B\l  0x002b\-0x004a: r0 'byte1' B\l  0x0045\-0x004a: r7 'resultPos' I\l  0x004a\-0x004d: r5 'resultPos' I\l  0x0029\-0x0059: r4 'offset' I\l  0x004d\-0x005d: r9 'resultPos' I\l  0x0059\-0x0063: r5 'offset' I\l  0x005d\-0x0063: r6 'resultPos' I\l  0x0063\-0x0075: r4 'offset' I\l  0x0075\-0x0079: r5 'offset' I\l  0x0063\-0x007d: r9 'resultPos' I\l  0x0079\-0x0083: r6 'offset' I\l  0x007d\-0x0083: r7 'resultPos' I\l  0x0083\-0x008f: r4 'offset' I\l  0x008f\-0x0093: r5 'offset' I\l  0x0093\-0x0097: r4 'offset' I\l  0x0083\-0x009b: r9 'resultPos' I\l  0x0097\-0x00a6: r11 'offset' I\l  0x009b\-0x00a6: r12 'resultPos' I\l  0x004d\-0x00a6: r0 'byte1' B\l  0x00a6\-0x00a8: r0 'offset' I\l  0x00a8\-0x00ae: r4 'offset' I\l  0x00a8\-0x00ae: r0 'byte1' B\l  0x00ae\-0x00b4: r0 'offset' I\l  0x000d\-0x00b4: r3 'limit' I\l  0x00a6\-0x00b4: r9 'resultPos' I\l  0x000f\-0x00b4: r10 'resultArr' [C\l  \-1 \-0x00d6: r13 'bytes' [B\l  \-1 \-0x00d6: r14 'index' I\l  \-1 \-0x00d6: r15 'size' I\l}"];
MethodNode -> Node_63;Node_63 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_105;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_107;
Node_69 -> Node_70;
Node_70 -> Node_72;
Node_70 -> Node_108[style=dashed];
Node_72 -> Node_68;
Node_108 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_109;
Node_75 -> Node_76;
Node_76 -> Node_110;
Node_76 -> Node_113[style=dashed];
Node_110 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_111;
Node_85 -> Node_115[style=dashed];
Node_111 -> Node_90;
Node_90 -> Node_91;
Node_91 -> Node_116;
Node_91 -> Node_118[style=dashed];
Node_116 -> Node_97;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_117;
Node_99 -> Node_120;
Node_120 -> Node_119;
Node_119 -> Node_74;
Node_117 -> Node_101;
Node_101 -> Node_102;
Node_102 -> Node_64;
Node_118 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_114;
Node_94 -> Node_121;
Node_121 -> Node_119;
Node_114 -> Node_95;
Node_95 -> Node_96;
Node_96 -> Node_64;
Node_115 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_112;
Node_87 -> Node_122;
Node_122 -> Node_119;
Node_112 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_64;
Node_113 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_124;
Node_79 -> Node_80;
Node_80 -> Node_82;
Node_80 -> Node_125[style=dashed];
Node_82 -> Node_78;
Node_125 -> Node_83;
Node_83 -> Node_123;
Node_123 -> Node_119;
Node_124 -> Node_83;
Node_109 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_64;
Node_107 -> Node_73;
Node_105 -> Node_106;
Node_106 -> Node_64;
}

