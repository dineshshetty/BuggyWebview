digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.encodeUtf8Array(Ljava\/lang\/CharSequence;[BII)I" {
Node_62 [shape=record,label="{62\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_64 [shape=record,label="{64\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:370)\l0x0004: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)])  (LINE:371)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:372)\l0x0006: ARITH  (r3 I:int) = (r12 I:int A[D('offset' int)]) + (r13 I:int A[D('length' int)])  (LINE:373)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0008|LOOP_START\lLOOP:0: B:65:0x0008\-\>B:71:0x0017\l|0x0008: CONST  (r4 I:??[int, float, short, byte, char]) = (128(0x80, float:1.8E\-43) ??[int, float, short, byte, char])  (LINE:376)\l}"];
Node_66 [shape=record,label="{66\:\ 0x000a|0x000a: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('utf16Length' int)])  \-\> B:114:0x001f \l}"];
Node_67 [shape=record,label="{67\:\ 0x000c|0x000c: ARITH  (r5 I:int) = (r2 I:int A[D('i' int)]) + (r1 I:int A[D('j' int)]) \l}"];
Node_68 [shape=record,label="{68\:\ 0x000e|0x000e: IF  (r5 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:115:0x001f \l}"];
Node_69 [shape=record,label="{69\:\ 0x0010|0x0010: INVOKE  (r5 I:char) = (r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0014: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0015|0x0015: IF  (r5 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:113:0x001f \l}"];
Node_71 [shape=record,label="{71\:\ 0x0017|LOOP_END\lLOOP:0: B:65:0x0008\-\>B:71:0x0017\l|0x0017: ARITH  (r4 I:int) = (r1 I:int A[D('j' int)]) + (r2 I:int A[D('i' int)])  (LINE:377)\l0x0019: CAST (r5 I:byte) = (byte) (r6 I:int A[D('c' char)]) \l0x001a: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char]), (r5 I:byte A[IMMUTABLE_TYPE]) \l0x001c: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:376)\l}"];
Node_113 [shape=record,label="{113\:\ 0x001f|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x001f|0x001f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('i' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('utf16Length' int)])  \-\> B:75:0x0024  (LINE:379)\l}"];
Node_73 [shape=record,label="{73\:\ 0x0021|0x0021: ARITH  (r4 I:int) = (r1 I:int A[D('j' int)]) + (r0 I:int A[D('utf16Length' int)])  (LINE:380)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0023|RETURN\l|0x0023: RETURN  (r4 I:int) \l}"];
Node_63 [shape=record,label="{63\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_75 [shape=record,label="{75\:\ 0x0024|0x0024: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (r2 I:int A[D('i' int)])  (LINE:382)\l}"];
Node_76 [shape=record,label="{76\:\ 0x0025|LOOP_START\lLOOP:1: B:76:0x0025\-\>B:99:0x00bf\l|0x0025: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('utf16Length' int)])  \-\> B:116:0x0108  (LINE:383)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0027|0x0027: INVOKE  (r5 I:char) = (r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:384)\l}"];
Node_78 [shape=record,label="{78\:\ 0x002b|0x002b: IF  (r5 I:??[int, byte, short, char] A[D('c' char)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:81:0x0037  (LINE:385)\l}"];
Node_79 [shape=record,label="{79\:\ 0x002d|0x002d: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \>= (r3 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:81:0x0037 \l}"];
Node_80 [shape=record,label="{80\:\ 0x002f|0x002f: ARITH  (r6 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:386)\l0x0031: CAST (r7 I:byte) = (byte) (r5 I:int A[D('c' char)]) \l0x0032: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x0034: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)]) \l}"];
Node_121 [shape=record,label="{121\:\ 0x00bf|SYNTHETIC\l}"];
Node_99 [shape=record,label="{99\:\ 0x00bf|LOOP_END\lLOOP:1: B:76:0x0025\-\>B:99:0x00bf\l|0x00bf: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:383)\l}"];
Node_81 [shape=record,label="{81\:\ 0x0037|0x0037: CONST  (r6 I:??[int, float, short, byte, char] A[D('j' int)]) = (2048(0x800, float:2.87E\-42) ??[int, float, short, byte, char])  (LINE:387)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0039|0x0039: IF  (r5 I:??[int, byte, short, char] A[D('c' char)]) \>= (r6 I:??[int, byte, short, char])  \-\> B:86:0x0051 \l}"];
Node_83 [shape=record,label="{83\:\ 0x003b|0x003b: ARITH  (r6 I:int) = (r3 I:int A[D('limit' int)]) + (\-2 int) \l}"];
Node_84 [shape=record,label="{84\:\ 0x003d|0x003d: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \> (r6 I:??[int, byte, short, char])  \-\> B:86:0x0051 \l}"];
Node_85 [shape=record,label="{85\:\ 0x003f|0x003f: ARITH  (r6 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:388)\l0x0041: ARITH  (r7 I:int) = (r5 I:int A[D('c' char)]) \>\>\> (6 int) \l0x0043: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) \| (960(0x3c0, float:1.345E\-42) ??[int, float, short, byte, char]) \l0x0045: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x0046: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x0048: ARITH  (r1 I:int) = (r6 I:int A[D('j' int)]) + (1 int)  (LINE:389)\l0x004a: ARITH  (r7 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('c' char)]) & (63 ??[int, float, short, byte, char]) \l0x004c: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) \| (r4 I:??[int, boolean, short, byte, char]) \l0x004d: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x004e: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r6 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l}"];
Node_122 [shape=record,label="{122\:\ 0x00bf|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0051|0x0051: CONST  (r6 I:??[int, float, short, byte, char]) = (57343(0xdfff, float:8.0355E\-41) ??[int, float, short, byte, char])  (LINE:390)\l0x0054: CONST  (r7 I:??[int, float, short, byte, char]) = (55296(0xd800, float:7.7486E\-41) ??[int, float, short, byte, char]) \l}"];
Node_87 [shape=record,label="{87\:\ 0x0057|0x0057: IF  (r5 I:??[int, byte, short, char] A[D('c' char)]) \< (r7 I:??[int, byte, short, char])  \-\> B:89:0x005b \l}"];
Node_88 [shape=record,label="{88\:\ 0x0059|0x0059: IF  (r6 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char] A[D('c' char)])  \-\> B:92:0x007c \l}"];
Node_92 [shape=record,label="{92\:\ 0x007c|0x007c: ARITH  (r8 I:int) = (r3 I:int A[D('limit' int)]) + (\-4 int)  (LINE:395)\l}"];
Node_93 [shape=record,label="{93\:\ 0x007e|0x007e: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \> (r8 I:??[int, byte, short, char])  \-\> B:119:0x00cb \l}"];
Node_94 [shape=record,label="{94\:\ 0x0080|0x0080: ARITH  (r6 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:399)\l0x0082: INVOKE  (r7 I:int) = (r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_95 [shape=record,label="{95\:\ 0x0086|0x0086: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:117:0x00c3 \l}"];
Node_96 [shape=record,label="{96\:\ 0x0088|0x0088: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int) \l0x008a: INVOKE  (r6 I:char) = (r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r2 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:400)\l0x008e: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x008f: INVOKE  (r6 I:boolean) = (r5 I:char A[D('c' char)]), (r6 I:char) type: STATIC call: java.lang.Character.isSurrogatePair(char, char):boolean A[MD:(char, char):boolean (c)]\l}"];
Node_97 [shape=record,label="{97\:\ 0x0093|0x0093: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:118:0x00c3 \l}"];
Node_98 [shape=record,label="{98\:\ 0x0095|0x0095: INVOKE  (r6 I:int) = (r5 I:char A[D('c' char)]), (r7 I:char A[D('low' char)]) type: STATIC call: java.lang.Character.toCodePoint(char, char):int A[MD:(char, char):int (c)] (LINE:403)\l0x0099: ARITH  (r8 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:404)\l0x009b: ARITH  (r9 I:int) = (r6 I:int A[D('codePoint' int)]) \>\>\> (18 int) \l0x009d: ARITH  (r9 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) \| (240(0xf0, float:3.36E\-43) ??[int, float, short, byte, char]) \l0x009f: CAST (r9 I:byte) = (byte) (r9 I:int) \l0x00a0: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r9 I:byte A[IMMUTABLE_TYPE]) \l0x00a2: ARITH  (r1 I:int) = (r8 I:int A[D('j' int)]) + (1 int)  (LINE:405)\l0x00a4: ARITH  (r9 I:int) = (r6 I:int A[D('codePoint' int)]) \>\>\> (12 int) \l0x00a6: ARITH  (r9 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) & (63 ??[int, float, short, byte, char]) \l0x00a8: ARITH  (r9 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) \| (r4 I:??[int, boolean, short, byte, char]) \l0x00a9: CAST (r9 I:byte) = (byte) (r9 I:int) \l0x00aa: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r8 I:??[int, short, byte, char]), (r9 I:byte A[IMMUTABLE_TYPE]) \l0x00ac: ARITH  (r8 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:406)\l0x00ae: ARITH  (r9 I:int) = (r6 I:int A[D('codePoint' int)]) \>\>\> (6 int) \l0x00b0: ARITH  (r9 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) & (63 ??[int, float, short, byte, char]) \l0x00b2: ARITH  (r9 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) \| (r4 I:??[int, boolean, short, byte, char]) \l0x00b3: CAST (r9 I:byte) = (byte) (r9 I:int) \l0x00b4: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r9 I:byte A[IMMUTABLE_TYPE]) \l0x00b6: ARITH  (r1 I:int) = (r8 I:int A[D('j' int)]) + (1 int)  (LINE:407)\l0x00b8: ARITH  (r9 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char] A[D('codePoint' int)]) & (63 ??[int, float, short, byte, char]) \l0x00ba: ARITH  (r9 I:??[int, boolean]) = (r9 I:??[int, boolean, short, byte, char]) \| (r4 I:??[int, boolean, short, byte, char]) \l0x00bb: CAST (r9 I:byte) = (byte) (r9 I:int) \l0x00bc: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r8 I:??[int, short, byte, char]), (r9 I:byte A[IMMUTABLE_TYPE]) \l}"];
Node_120 [shape=record,label="{120\:\ 0x00bf|SYNTHETIC\l}"];
Node_118 [shape=record,label="{118\:\ 0x00c3|SYNTHETIC\l}"];
Node_100 [shape=record,label="{100\:\ 0x00c3|0x00c3: NEW_INSTANCE  (r4 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException) =  androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException  (LINE:401)\l0x00c5: ARITH  (r6 I:int) = (r2 I:int A[D('i' int)]) + (\-1 int) \l0x00c7: INVOKE  \l  (r4 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException)\l  (r6 I:int)\l  (r0 I:int A[D('utf16Length' int)])\l type: DIRECT call: androidx.emoji2.text.flatbuffer.Utf8Safe.UnpairedSurrogateException.\<init\>(int, int):void A[MD:(int, int):void (m)]\l}"];
Node_101 [shape=record,label="{101\:\ 0x00ca|0x00ca: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_117 [shape=record,label="{117\:\ 0x00c3|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x00cb|SYNTHETIC\l}"];
Node_102 [shape=record,label="{102\:\ 0x00cb|0x00cb: IF  (r7 I:??[int, byte, short, char]) \> (r5 I:??[int, byte, short, char] A[D('c' char)])  \-\> B:110:0x00e9  (LINE:411)\l}"];
Node_103 [shape=record,label="{103\:\ 0x00cd|0x00cd: IF  (r5 I:??[int, byte, short, char] A[D('c' char)]) \> (r6 I:??[int, byte, short, char])  \-\> B:110:0x00e9 \l}"];
Node_104 [shape=record,label="{104\:\ 0x00cf|0x00cf: ARITH  (r4 I:int) = (r2 I:int A[D('i' int)]) + (1 int) \l0x00d1: INVOKE  (r6 I:int) = (r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:412)\l}"];
Node_105 [shape=record,label="{105\:\ 0x00d5|0x00d5: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:108:0x00e3 \l}"];
Node_106 [shape=record,label="{106\:\ 0x00d7|0x00d7: ARITH  (r4 I:int) = (r2 I:int A[D('i' int)]) + (1 int) \l0x00d9: INVOKE  (r4 I:char) = (r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]), (r4 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:413)\l0x00dd: INVOKE  (r4 I:boolean) = (r5 I:char A[D('c' char)]), (r4 I:char) type: STATIC call: java.lang.Character.isSurrogatePair(char, char):boolean A[MD:(char, char):boolean (c)]\l}"];
Node_107 [shape=record,label="{107\:\ 0x00e1|0x00e1: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:110:0x00e9 \l}"];
Node_108 [shape=record,label="{108\:\ 0x00e3|0x00e3: NEW_INSTANCE  (r4 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException) =  androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException  (LINE:414)\l0x00e5: INVOKE  \l  (r4 I:androidx.emoji2.text.flatbuffer.Utf8Safe$UnpairedSurrogateException)\l  (r2 I:int A[D('i' int)])\l  (r0 I:int A[D('utf16Length' int)])\l type: DIRECT call: androidx.emoji2.text.flatbuffer.Utf8Safe.UnpairedSurrogateException.\<init\>(int, int):void A[MD:(int, int):void (m)]\l}"];
Node_109 [shape=record,label="{109\:\ 0x00e8|0x00e8: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_110 [shape=record,label="{110\:\ 0x00e9|0x00e9: NEW_INSTANCE  (r4 I:java.lang.ArrayIndexOutOfBoundsException) =  java.lang.ArrayIndexOutOfBoundsException  (LINE:416)\l0x00eb: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x00ed: INVOKE  (r6 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x00f0: CONST_STR  (r7 I:java.lang.String) =  \"Failed writing \" \l0x00f2: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00f5: INVOKE  (r6 I:java.lang.StringBuilder), (r5 I:char A[D('c' char)]) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x00f8: CONST_STR  (r7 I:java.lang.String) =  \" at index \" \l0x00fa: INVOKE  (r6 I:java.lang.StringBuilder), (r7 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00fd: INVOKE  (r6 I:java.lang.StringBuilder), (r1 I:int A[D('j' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0100: INVOKE  (r6 I:java.lang.String) = (r6 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0104: INVOKE  (r4 I:java.lang.ArrayIndexOutOfBoundsException), (r6 I:java.lang.String) type: DIRECT call: java.lang.ArrayIndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_111 [shape=record,label="{111\:\ 0x0107|0x0107: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_89 [shape=record,label="{89\:\ 0x005b|0x005b: ARITH  (r8 I:int) = (r3 I:int A[D('limit' int)]) + (\-3 int) \l}"];
Node_90 [shape=record,label="{90\:\ 0x005d|0x005d: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \> (r8 I:??[int, byte, short, char])  \-\> B:92:0x007c \l}"];
Node_91 [shape=record,label="{91\:\ 0x005f|0x005f: ARITH  (r6 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:392)\l0x0061: ARITH  (r7 I:int) = (r5 I:int A[D('c' char)]) \>\>\> (12 int) \l0x0063: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) \| (480(0x1e0, float:6.73E\-43) ??[int, float, short, byte, char]) \l0x0065: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x0066: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x0068: ARITH  (r1 I:int) = (r6 I:int A[D('j' int)]) + (1 int)  (LINE:393)\l0x006a: ARITH  (r7 I:int) = (r5 I:int A[D('c' char)]) \>\>\> (6 int) \l0x006c: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) & (63 ??[int, float, short, byte, char]) \l0x006e: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) \| (r4 I:??[int, boolean, short, byte, char]) \l0x006f: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x0070: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r6 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x0072: ARITH  (r6 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:394)\l0x0074: ARITH  (r7 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('c' char)]) & (63 ??[int, float, short, byte, char]) \l0x0076: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) \| (r4 I:??[int, boolean, short, byte, char]) \l0x0077: CAST (r7 I:byte) = (byte) (r7 I:int) \l0x0078: APUT  (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r7 I:byte A[IMMUTABLE_TYPE]) \l0x007a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)]) \l}"];
Node_123 [shape=record,label="{123\:\ 0x00bf|SYNTHETIC\l}"];
Node_116 [shape=record,label="{116\:\ 0x0108|SYNTHETIC\l}"];
Node_112 [shape=record,label="{112\:\ 0x0108|RETURN\l|0x0108: RETURN  (r1 I:int A[D('j' int)])  (LINE:419)\l}"];
Node_115 [shape=record,label="{115\:\ 0x001f|SYNTHETIC\l}"];
Node_114 [shape=record,label="{114\:\ 0x001f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int androidx.emoji2.text.flatbuffer.Utf8Safe.encodeUtf8Array((r10 I:java.lang.CharSequence A[D('in' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:byte[] A[D('out' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lBACK_EDGE: B:71:0x0017 \-\> B:65:0x0008, BACK_EDGE: B:99:0x00bf \-\> B:76:0x0025, CROSS_EDGE: B:85:0x003f \-\> B:99:0x00bf, CROSS_EDGE: B:91:0x005f \-\> B:99:0x00bf, CROSS_EDGE: B:98:0x0095 \-\> B:99:0x00bf, CROSS_EDGE: B:101:0x00ca \-\> B:63:?, CROSS_EDGE: B:95:0x0086 \-\> B:100:0x00c3, CROSS_EDGE: B:109:0x00e8 \-\> B:63:?, CROSS_EDGE: B:111:0x0107 \-\> B:63:?, CROSS_EDGE: B:105:0x00d5 \-\> B:108:0x00e3, CROSS_EDGE: B:103:0x00cd \-\> B:110:0x00e9, CROSS_EDGE: B:102:0x00cb \-\> B:110:0x00e9, CROSS_EDGE: B:88:0x0059 \-\> B:92:0x007c, CROSS_EDGE: B:87:0x0057 \-\> B:89:0x005b, CROSS_EDGE: B:82:0x0039 \-\> B:86:0x0051, CROSS_EDGE: B:78:0x002b \-\> B:81:0x0037, CROSS_EDGE: B:112:0x0108 \-\> B:63:?, CROSS_EDGE: B:68:0x000e \-\> B:72:0x001f, CROSS_EDGE: B:66:0x000a \-\> B:72:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x001f: r6 'c' C\l  0x0005\-0x0031: r1 'j' I\l  0x0031\-0x0037: r6 'j' I\l  0x0037\-0x0041: r1 'j' I\l  0x0041\-0x004a: r6 'j' I\l  0x004a\-0x0061: r1 'j' I\l  0x0061\-0x006a: r6 'j' I\l  0x006a\-0x0074: r1 'j' I\l  0x0074\-0x007c: r6 'j' I\l  0x007c\-0x009b: r1 'j' I\l  0x009b\-0x00a4: r8 'j' I\l  0x00a4\-0x00ae: r1 'j' I\l  0x00ae\-0x00b8: r8 'j' I\l  0x0099\-0x00be: r6 'codePoint' I\l  0x008f\-0x00be: r7 'low' C\l  0x002b\-0x0108: r5 'c' C\l  0x0004\-0x0108: r0 'utf16Length' I\l  0x00b8\-0x0108: r1 'j' I\l  0x0006\-0x0108: r2 'i' I\l  0x0008\-0x0108: r3 'limit' I\l  \-1 \-0x0108: r10 'in' Ljava\/lang\/CharSequence;\l  \-1 \-0x0108: r11 'out' [B\l  \-1 \-0x0108: r12 'offset' I\l  \-1 \-0x0108: r13 'length' I\l}"];
MethodNode -> Node_62;Node_62 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_114;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_115;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_113;
Node_71 -> Node_65;
Node_113 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_75;
Node_73 -> Node_74;
Node_74 -> Node_63;
Node_75 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_116;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_81;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_81;
Node_80 -> Node_121;
Node_121 -> Node_99;
Node_99 -> Node_76;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_86;
Node_83 -> Node_84;
Node_84 -> Node_85[style=dashed];
Node_84 -> Node_86;
Node_85 -> Node_122;
Node_122 -> Node_99;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_89;
Node_88 -> Node_89[style=dashed];
Node_88 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_119;
Node_94 -> Node_95;
Node_95 -> Node_96[style=dashed];
Node_95 -> Node_117;
Node_96 -> Node_97;
Node_97 -> Node_98[style=dashed];
Node_97 -> Node_118;
Node_98 -> Node_120;
Node_120 -> Node_99;
Node_118 -> Node_100;
Node_100 -> Node_101;
Node_101 -> Node_63;
Node_117 -> Node_100;
Node_119 -> Node_102;
Node_102 -> Node_103[style=dashed];
Node_102 -> Node_110;
Node_103 -> Node_104[style=dashed];
Node_103 -> Node_110;
Node_104 -> Node_105;
Node_105 -> Node_106[style=dashed];
Node_105 -> Node_108;
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_110;
Node_108 -> Node_109;
Node_109 -> Node_63;
Node_110 -> Node_111;
Node_111 -> Node_63;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_92;
Node_91 -> Node_123;
Node_123 -> Node_99;
Node_116 -> Node_112;
Node_112 -> Node_63;
Node_115 -> Node_72;
Node_114 -> Node_72;
}

