digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8(Ljava\/nio\/ByteBuffer;II)Ljava\/lang\/String;" {
subgraph cluster_Region_393588019 {
label = "R(1:(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1903681867 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1112060701 {
label = "IF [B:11:0x0004] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (r3.hasArray() != false) goto L3\l}"];
subgraph cluster_Region_19590447 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0013|RETURN\l|return decodeUtf8Array(r3.array(), r3.arrayOffset() + r4, r5)\l}"];
}
}
subgraph cluster_Region_990692364 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0018|RETURN\l|return decodeUtf8Buffer(r3, r4, r5)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0006}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0014}"];
MethodNode[shape=record,label="{public java.lang.String androidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8((r2v0 'this' androidx.emoji2.text.flatbuffer.Utf8Safe A[IMMUTABLE_TYPE, THIS]), (r3v0 'buffer' java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'offset' int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0018 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/lang\/IllegalArgumentException;]\lMETHOD_OVERRIDE: [androidx.emoji2.text.flatbuffer.Utf8.decodeUtf8(java.nio.ByteBuffer, int, int):java.lang.String]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

