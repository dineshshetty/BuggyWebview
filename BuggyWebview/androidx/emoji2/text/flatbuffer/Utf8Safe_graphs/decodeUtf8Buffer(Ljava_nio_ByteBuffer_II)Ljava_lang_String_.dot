digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Buffer(Ljava\/nio\/ByteBuffer;II)Ljava\/lang\/String;" {
Node_63 [shape=record,label="{63\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_65 [shape=record,label="{65\:\ 0x0000}"];
Node_66 [shape=record,label="{66\:\ 0x000b|if (((r13 \| r14) \| ((r12.limit() \- r13) \- r14)) \< 0) goto L58\l}"];
Node_67 [shape=record,label="{67\:\ 0x000d|int r0 = r13 + r14\lchar[] r9 = new char[r14]\lr3 = 0\l}"];
Node_68 [shape=record,label="{68\:\ 0x0012|LOOP_START\lLOOP:0: B:68:0x0012\-\>B:72:0x001f\lPHI: r3 r13 \l  PHI: (r3v3 'resultPos' int) = (r3v2 'resultPos' int), (r3v11 'resultPos' int) binds: [B:67:0x000d, B:72:0x001f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v1 'offset' int) = (r13v0 'offset' int), (r13v9 'offset' int) binds: [B:67:0x000d, B:72:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|if (r13 \>= r0) goto L57\l}"];
Node_69 [shape=record,label="{69\:\ 0x0014|byte r4 = r12.get(r13)\l}"];
Node_70 [shape=record,label="{70\:\ 0x001c|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r4) != false) goto L7\l}"];
Node_72 [shape=record,label="{72\:\ 0x001f|LOOP_END\lLOOP:0: B:68:0x0012\-\>B:72:0x001f\l|int r13 = r13 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r4, r9, r3)\lr3 = r3 + 1\l}"];
Node_108 [shape=record,label="{108\:\ 0x0028|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0028|r8 = r3\l}"];
Node_74 [shape=record,label="{74\:\ 0x0029|LOOP_START\lLOOP:1: B:74:0x0029\-\>B:119:0x0029\lPHI: r8 r13 \l  PHI: (r8v1 'resultPos' int) = (r8v0 'resultPos' int), (r8v3 'resultPos' int) binds: [B:73:0x0028, B:119:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v2 'offset' int) = (r13v1 'offset' int), (r13v5 'offset' int) binds: [B:73:0x0028, B:119:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|if (r13 \>= r0) goto L54\l}"];
Node_75 [shape=record,label="{75\:\ 0x002b|int r3 = r13 + 1\lbyte r13 = r12.get(r13)\l}"];
Node_76 [shape=record,label="{76\:\ 0x0035|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r13) == false) goto L13\l}"];
Node_109 [shape=record,label="{109\:\ 0x0056|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x0056}"];
Node_85 [shape=record,label="{85\:\ 0x005c|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isTwoBytes(r13) == false) goto L16\l}"];
Node_112 [shape=record,label="{112\:\ 0x0074|SYNTHETIC\l}"];
Node_90 [shape=record,label="{90\:\ 0x0074}"];
Node_91 [shape=record,label="{91\:\ 0x0078|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isThreeBytes(r13) == false) goto L19\l}"];
Node_114 [shape=record,label="{114\:\ 0x0098|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x0098}"];
Node_98 [shape=record,label="{98\:\ 0x009a|if (r3 \>= (r0 + (\-2))) goto L25\l}"];
Node_99 [shape=record,label="{99\:\ 0x009c|int r4 = r3 + 1\lbyte r5 = r12.get(r3)\lint r3 = r4 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleFourBytes(r13, r5, r12.get(r4), r12.get(r3), r9, r8)\lr13 = r3 + 1\lr8 = (r8 + 1) + 1\l}"];
Node_120 [shape=record,label="{120\:\ 0x0029|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x0029|LOOP_END\lSYNTHETIC\lLOOP:1: B:74:0x0029\-\>B:119:0x0029\lPHI: r8 r13 \l  PHI: (r8v3 'resultPos' int) = (r8v2 'resultPos' int), (r8v4 'resultPos' int), (r8v5 'resultPos' int), (r8v6 'resultPos' int) binds: [B:123:0x0029, B:122:0x0029, B:121:0x0029, B:120:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r13v5 'offset' int) = (r13v4 'offset' int), (r13v6 'offset' int), (r13v7 'offset' int), (r13v8 'offset' int) binds: [B:123:0x0029, B:122:0x0029, B:121:0x0029, B:120:0x0029] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_118 [shape=record,label="{118\:\ 0x00bd|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x00bd}"];
Node_102 [shape=record,label="{102\:\ 0x00c2|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
Node_64 [shape=record,label="{64\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_117 [shape=record,label="{117\:\ 0x007a|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x007a}"];
Node_93 [shape=record,label="{93\:\ 0x007c|if (r3 \>= (r0 + (\-1))) goto L34\l}"];
Node_94 [shape=record,label="{94\:\ 0x007e|int r4 = r3 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleThreeBytes(r13, r12.get(r3), r12.get(r4), r9, r8)\lr13 = r4 + 1\lr8 = r8 + 1\l}"];
Node_121 [shape=record,label="{121\:\ 0x0029|SYNTHETIC\l}"];
Node_115 [shape=record,label="{115\:\ 0x0092|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0092}"];
Node_96 [shape=record,label="{96\:\ 0x0097|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
Node_116 [shape=record,label="{116\:\ 0x005e|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x005e|if (r3 \>= r0) goto L41\l}"];
Node_87 [shape=record,label="{87\:\ 0x0060|androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleTwoBytes(r13, r12.get(r3), r9, r8)\lr13 = r3 + 1\lr8 = r8 + 1\l}"];
Node_122 [shape=record,label="{122\:\ 0x0029|SYNTHETIC\l}"];
Node_113 [shape=record,label="{113\:\ 0x006e|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x006e}"];
Node_89 [shape=record,label="{89\:\ 0x0073|throw new java.lang.IllegalArgumentException(\"Invalid UTF\-8\")\l}"];
Node_111 [shape=record,label="{111\:\ 0x0037|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0037|int r4 = r8 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r13, r9, r8)\l}"];
Node_78 [shape=record,label="{78\:\ 0x003c|LOOP_START\lLOOP:2: B:78:0x003c\-\>B:82:0x0049\lPHI: r3 r4 \l  PHI: (r3v5 'offset' int) = (r3v4 'offset' int), (r3v6 'offset' int) binds: [B:77:0x0037, B:82:0x0049] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'resultPos' int) = (r4v3 'resultPos' int), (r4v5 'resultPos' int) binds: [B:77:0x0037, B:82:0x0049] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r0) goto L53\l}"];
Node_79 [shape=record,label="{79\:\ 0x003e|byte r5 = r12.get(r3)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0046|if (androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isOneByte(r5) != false) goto L49\l}"];
Node_82 [shape=record,label="{82\:\ 0x0049|LOOP_END\lLOOP:2: B:78:0x003c\-\>B:82:0x0049\l|int r3 = r3 + 1\landroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleOneByte(r5, r9, r4)\lr4 = r4 + 1\l}"];
Node_124 [shape=record,label="{124\:\ 0x0052|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x0052|r13 = r3\lr8 = r4\l}"];
Node_123 [shape=record,label="{123\:\ 0x0029|SYNTHETIC\l}"];
Node_125 [shape=record,label="{125\:\ 0x0052|SYNTHETIC\l}"];
Node_110 [shape=record,label="{110\:\ 0x00c3|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x00c3}"];
Node_104 [shape=record,label="{104\:\ 0x00c8|RETURN\l|return new java.lang.String(r9, 0, r8)\l}"];
Node_107 [shape=record,label="{107\:\ 0x0028|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x00c9}"];
Node_106 [shape=record,label="{106\:\ 0x00ee|throw new java.lang.ArrayIndexOutOfBoundsException(java.lang.String.format(\"buffer limit=%d, index=%d, limit=%d\", new java.lang.Object[]\{java.lang.Integer.valueOf(r12.limit()), java.lang.Integer.valueOf(r13), java.lang.Integer.valueOf(r14)\}))\l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.emoji2.text.flatbuffer.Utf8Safe.decodeUtf8Buffer((r12v0 'buffer' java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'offset' int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:72:0x001f \-\> B:68:0x0012, BACK_EDGE: B:82:0x0049 \-\> B:78:0x003c, BACK_EDGE: B:83:0x0052 \-\> B:74:0x0029, CROSS_EDGE: B:78:0x003c \-\> B:83:0x0052, BACK_EDGE: B:87:0x0060 \-\> B:74:0x0029, BACK_EDGE: B:94:0x007e \-\> B:74:0x0029, CROSS_EDGE: B:96:0x0097 \-\> B:64:?, BACK_EDGE: B:99:0x009c \-\> B:74:0x0029, CROSS_EDGE: B:102:0x00c2 \-\> B:64:?, CROSS_EDGE: B:104:0x00c8 \-\> B:64:?, CROSS_EDGE: B:68:0x0012 \-\> B:73:0x0028, CROSS_EDGE: B:106:0x00ee \-\> B:64:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_63;Node_63 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_105;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_107;
Node_69 -> Node_70;
Node_70 -> Node_72;
Node_70 -> Node_108[style=dashed];
Node_72 -> Node_68;
Node_108 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_110;
Node_75 -> Node_76;
Node_76 -> Node_109;
Node_76 -> Node_111[style=dashed];
Node_109 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_112;
Node_85 -> Node_116[style=dashed];
Node_112 -> Node_90;
Node_90 -> Node_91;
Node_91 -> Node_114;
Node_91 -> Node_117[style=dashed];
Node_114 -> Node_97;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_118;
Node_99 -> Node_120;
Node_120 -> Node_119;
Node_119 -> Node_74;
Node_118 -> Node_101;
Node_101 -> Node_102;
Node_102 -> Node_64;
Node_117 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_115;
Node_94 -> Node_121;
Node_121 -> Node_119;
Node_115 -> Node_95;
Node_95 -> Node_96;
Node_96 -> Node_64;
Node_116 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_113;
Node_87 -> Node_122;
Node_122 -> Node_119;
Node_113 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_64;
Node_111 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_125;
Node_79 -> Node_80;
Node_80 -> Node_82;
Node_80 -> Node_124[style=dashed];
Node_82 -> Node_78;
Node_124 -> Node_83;
Node_83 -> Node_123;
Node_123 -> Node_119;
Node_125 -> Node_83;
Node_110 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_64;
Node_107 -> Node_73;
Node_105 -> Node_106;
Node_106 -> Node_64;
}

