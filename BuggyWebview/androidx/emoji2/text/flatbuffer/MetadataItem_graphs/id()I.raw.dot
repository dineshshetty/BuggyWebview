digraph "CFG forandroidx.emoji2.text.flatbuffer.MetadataItem.id()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:35)\l0x0001: INVOKE  (r0 I:int) = (r3 I:androidx.emoji2.text.flatbuffer.MetadataItem), (r0 I:int) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.MetadataItem.__offset(int):int A[MD:(int):int (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('o' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r1 I:java.nio.ByteBuffer) = (r3 I:androidx.emoji2.text.flatbuffer.MetadataItem) androidx.emoji2.text.flatbuffer.MetadataItem.bb java.nio.ByteBuffer \l0x0009: IGET  (r2 I:int) = (r3 I:androidx.emoji2.text.flatbuffer.MetadataItem) androidx.emoji2.text.flatbuffer.MetadataItem.bb_pos int \l0x000b: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('o' int)]) \l0x000c: INVOKE  (r1 I:int) = (r1 I:java.nio.ByteBuffer), (r2 I:int) type: VIRTUAL call: java.nio.ByteBuffer.getInt(int):int A[MD:(int):int (c)]\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x0012: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int androidx.emoji2.text.flatbuffer.MetadataItem.id((r3 'this' I:androidx.emoji2.text.flatbuffer.MetadataItem A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0011 \-\> B:6:0x0012\lDebug Info:\l  0x0005\-0x0012: r0 'o' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_1;
}

