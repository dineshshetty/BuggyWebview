digraph "CFG forandroidx.emoji2.text.flatbuffer.MetadataList.sourceSha()Ljava\/lang\/String;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char])  (LINE:41)\l0x0002: INVOKE  (r0 I:int) = (r2 I:androidx.emoji2.text.flatbuffer.MetadataList), (r0 I:int) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.MetadataList.__offset(int):int A[MD:(int):int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('o' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0010 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: IGET  (r1 I:int) = (r2 I:androidx.emoji2.text.flatbuffer.MetadataList) androidx.emoji2.text.flatbuffer.MetadataList.bb_pos int \l0x000a: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('o' int)]) \l0x000b: INVOKE  (r1 I:java.lang.String) = (r2 I:androidx.emoji2.text.flatbuffer.MetadataList), (r1 I:int) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.MetadataList.__string(int):java.lang.String A[MD:(int):java.lang.String (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN  (r1 I:java.lang.String) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.emoji2.text.flatbuffer.MetadataList.sourceSha((r2 'this' I:androidx.emoji2.text.flatbuffer.MetadataList A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0010 \-\> B:14:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0011: r0 'o' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_9;
}

