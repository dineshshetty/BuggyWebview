digraph "CFG forandroidx.emoji2.text.flatbuffer.FlatBufferBuilder.growByteBuffer(Ljava\/nio\/ByteBuffer;Landroidx\/emoji2\/text\/flatbuffer\/FlatBufferBuilder$ByteBufferFactory;)Ljava\/nio\/ByteBuffer;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|int r0 = r4.capacity()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|if (((\-1073741824) & r0) != 0) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|if (r0 != 0) goto L8\l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|r1 = 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|PHI: r1 \l  PHI: (r1v4 'new_buf_size' int) = (r1v3 'new_buf_size' int), (r1v6 'new_buf_size' int) binds: [B:17:0x000d, B:16:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|r4.position(0)\ljava.nio.ByteBuffer r2 = r5.newByteBuffer(r1)\lint r1 = r2.clear().capacity()\lr2.position(r1 \- r0)\lr2.put(r4)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|RETURN\l|return r2\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|int r1 = r0 \<\< 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0028}"];
Node_21 [shape=record,label="{21\:\ 0x002f|throw new java.lang.AssertionError(\"FlatBuffers: cannot grow buffer beyond 2 gigabytes.\")\l}"];
MethodNode[shape=record,label="{static java.nio.ByteBuffer androidx.emoji2.text.flatbuffer.FlatBufferBuilder.growByteBuffer((r4v0 'bb' java.nio.ByteBuffer A[D('bb' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'bb_factory' androidx.emoji2.text.flatbuffer.FlatBufferBuilder$ByteBufferFactory A[D('bb_factory' androidx.emoji2.text.flatbuffer.FlatBufferBuilder$ByteBufferFactory), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000d \-\> B:18:0x000f, CROSS_EDGE: B:21:0x002f \-\> B:12:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_17 -> Node_18;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

