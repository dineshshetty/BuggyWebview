digraph "CFG forandroidx.emoji2.text.flatbuffer.FlatBufferBuilder.finish(IZ)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.minalign int  (LINE:887)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0003|0x0003: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size_prefix' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0007 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: CONST  (r2 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x0009: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder), (r0 I:int), (r2 I:int) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.prep(int, int):void A[MD:(int, int):void (m)]\l0x000c: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder), (r4 I:int A[D('root_table' int)]) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.addOffset(int):void A[MD:(int):void (m)] (LINE:888)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size_prefix' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x001d  (LINE:889)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: IGET  (r0 I:java.nio.ByteBuffer) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.bb java.nio.ByteBuffer  (LINE:890)\l0x0013: INVOKE  (r0 I:int) = (r0 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.capacity():int A[MD:():int (c)]\l0x0017: IGET  (r1 I:int) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.space int \l0x0019: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x001a: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder), (r0 I:int) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.addInt(int):void A[MD:(int):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|0x001d: IGET  (r0 I:java.nio.ByteBuffer) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.bb java.nio.ByteBuffer  (LINE:892)\l0x001f: IGET  (r1 I:int) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.space int \l0x0021: INVOKE  (r0 I:java.nio.ByteBuffer), (r1 I:int) type: VIRTUAL call: java.nio.ByteBuffer.position(int):java.nio.Buffer A[MD:(int):java.nio.Buffer (c)]\l0x0024: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:893)\l0x0025: IPUT  (r0 I:boolean), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.finished boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|RETURN\l|0x0027: RETURN    (LINE:894)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{protected void androidx.emoji2.text.flatbuffer.FlatBufferBuilder.finish((r3 'this' I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('root_table' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('size_prefix' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000f \-\> B:20:0x001d, CROSS_EDGE: B:16:0x0007 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0027: r4 'root_table' I\l  \-1 \-0x0027: r5 'size_prefix' Z\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

