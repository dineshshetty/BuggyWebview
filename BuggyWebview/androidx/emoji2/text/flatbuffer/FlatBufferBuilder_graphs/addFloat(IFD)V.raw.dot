digraph "CFG forandroidx.emoji2.text.flatbuffer.FlatBufferBuilder.addFloat(IFD)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.force_defaults boolean  (LINE:752)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0009 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: CAST (r0 I:double) = (double) (r5 I:float A[D('x' float)]) \l0x0005: CMP_L  (r2 I:int) = (r0 I:double), (r6 I:double A[D('d' double)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:? \l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN   A[SYNTHETIC]\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|0x0009: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder), (r5 I:float A[D('x' float)]) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.addFloat(float):void A[MD:(float):void (m)]\l0x000c: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder), (r4 I:int A[D('o' int)]) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.slot(int):void A[MD:(int):void (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN   \l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.flatbuffer.FlatBufferBuilder.addFloat((r3 'this' I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('o' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[D('x' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:double A[D('d' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0007 \-\> B:16:0x000f, CROSS_EDGE: B:12:0x0002 \-\> B:15:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r4 'o' I\l  \-1 \-0x000f: r5 'x' F\l  \-1 \-0x000f: r6 'd' D\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

