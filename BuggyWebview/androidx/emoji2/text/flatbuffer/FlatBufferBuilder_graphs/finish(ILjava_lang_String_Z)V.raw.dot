digraph "CFG forandroidx.emoji2.text.flatbuffer.FlatBufferBuilder.finish(ILjava\/lang\/String;Z)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.minalign int  (LINE:923)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|0x0003: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size_prefix' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0007 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|0x0005: CONST  (r2 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|0x0008: ARITH  (r2 I:int) = (r2 I:int) + (8 int) \l0x000a: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder), (r0 I:int), (r2 I:int) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.prep(int, int):void A[MD:(int, int):void (m)]\l0x000d: INVOKE  (r0 I:int) = (r5 I:java.lang.String A[D('file_identifier' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:924)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0025 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:927)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|LOOP_START\lLOOP:0: B:25:0x0014\-\>B:26:0x0016\l|0x0014: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \< (0 ??[int, byte, short, char])  \-\> B:31:0x0021 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|LOOP_END\lLOOP:0: B:25:0x0014\-\>B:26:0x0016\l|0x0016: INVOKE  (r1 I:char) = (r5 I:java.lang.String A[D('file_identifier' java.lang.String)]), (r0 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:928)\l0x001a: CAST (r1 I:byte) = (byte) (r1 I:int) \l0x001b: INVOKE  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder), (r1 I:byte) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.addByte(byte):void A[MD:(byte):void (m)]\l0x001e: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (\-1 int)  (LINE:927)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0021|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: INVOKE  \l  (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder)\l  (r4 I:int A[D('root_table' int)])\l  (r6 I:boolean A[D('size_prefix' boolean)])\l type: VIRTUAL call: androidx.emoji2.text.flatbuffer.FlatBufferBuilder.finish(int, boolean):void A[MD:(int, boolean):void (m)] (LINE:930)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|RETURN\l|0x0024: RETURN    (LINE:931)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0025|0x0025: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:925)\l0x0027: CONST_STR  (r1 I:java.lang.String) =  \"FlatBuffers: file identifier must be length 4\" \l0x0029: INVOKE  (r0 I:java.lang.AssertionError), (r1 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{protected void androidx.emoji2.text.flatbuffer.FlatBufferBuilder.finish((r3 'this' I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('root_table' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('file_identifier' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('size_prefix' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x0016 \-\> B:25:0x0014, CROSS_EDGE: B:30:0x002c \-\> B:17:?, CROSS_EDGE: B:21:0x0007 \-\> B:22:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x0021: r0 'i' I\l  \-1 \-0x002c: r4 'root_table' I\l  \-1 \-0x002c: r5 'file_identifier' Ljava\/lang\/String;\l  \-1 \-0x002c: r6 'size_prefix' Z\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_25;
Node_31 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_17;
Node_29 -> Node_30;
Node_30 -> Node_17;
Node_21 -> Node_22;
}

