digraph "CFG forandroidx.emoji2.text.flatbuffer.FlatBufferBuilder.prep(II)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0002|if (r6 \<= r5.minalign) goto L4\l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|r5.minalign = r6\l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|r0 = ((~((r5.f83bb.capacity() \- r5.space) + r7)) + 1) & (r6 + (\-1))\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|LOOP_START\lLOOP:0: B:23:0x0016\-\>B:28:0x0034\l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|if (r5.space \>= ((r0 + r6) + r7)) goto L13\l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|int r1 = r5.f83bb.capacity()\ljava.nio.ByteBuffer r2 = r5.f83bb\ljava.nio.ByteBuffer r3 = growByteBuffer(r2, r5.bb_factory)\lr5.f83bb = r3\l}"];
Node_26 [shape=record,label="{26\:\ 0x002d|if (r2 == r3) goto L12\l}"];
Node_27 [shape=record,label="{27\:\ 0x002f|r5.bb_factory.releaseByteBuffer(r2)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0034|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0034|LOOP_END\lLOOP:0: B:23:0x0016\-\>B:28:0x0034\l|r5.space = r5.space + (r5.f83bb.capacity() \- r1)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0041|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0041|pad(r0)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0044|RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.flatbuffer.FlatBufferBuilder.prep((r5v0 'this' androidx.emoji2.text.flatbuffer.FlatBufferBuilder A[IMMUTABLE_TYPE, THIS]), (r6v0 'size' int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'additional_bytes' int A[D('additional_bytes' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x0034 \-\> B:23:0x0016, CROSS_EDGE: B:26:0x002d \-\> B:28:0x0034, CROSS_EDGE: B:20:0x0002 \-\> B:22:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_33;
Node_27 -> Node_32;
Node_32 -> Node_28;
Node_28 -> Node_23;
Node_33 -> Node_28;
Node_31 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_18;
}

