digraph "CFG forandroidx.emoji2.text.flatbuffer.FlatBufferBuilder.clear()V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IGET  (r0 I:java.nio.ByteBuffer) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.bb java.nio.ByteBuffer  (LINE:217)\l0x0002: INVOKE  (r0 I:int) = (r0 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.capacity():int A[MD:():int (c)]\l0x0006: IPUT  (r0 I:int), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.space int \l0x0008: IGET  (r0 I:java.nio.ByteBuffer) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.bb java.nio.ByteBuffer  (LINE:218)\l0x000a: INVOKE  (r0 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.clear():java.nio.Buffer A[MD:():java.nio.Buffer (c)]\l0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:219)\l0x000e: IPUT  (r0 I:int), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.minalign int \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|LOOP_START\lLOOP:0: B:12:0x0010\-\>B:14:0x0015\l|0x0010: IGET  (r0 I:int) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.vtable_in_use int  (LINE:220)\l0x0012: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0013|0x0013: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:17:0x001e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|LOOP_END\lLOOP:0: B:12:0x0010\-\>B:14:0x0015\l|0x0015: IGET  (r2 I:int[]) = (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.vtable int[] \l0x0017: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0019: IPUT  (r0 I:int), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.vtable_in_use int \l0x001b: APUT  (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char]), (r1 I:??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x001e|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|0x001e: IPUT  (r1 I:int), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.vtable_in_use int  (LINE:221)\l0x0020: IPUT  (r1 I:boolean), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.nested boolean  (LINE:222)\l0x0022: IPUT  (r1 I:boolean), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.finished boolean  (LINE:223)\l0x0024: IPUT  (r1 I:int), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.object_start int  (LINE:224)\l0x0026: IPUT  (r1 I:int), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.num_vtables int  (LINE:225)\l0x0028: IPUT  (r1 I:int), (r3 I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder) androidx.emoji2.text.flatbuffer.FlatBufferBuilder.vector_num_elems int  (LINE:226)\l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|RETURN\l|0x002a: RETURN    (LINE:227)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.flatbuffer.FlatBufferBuilder.clear((r3 'this' I:androidx.emoji2.text.flatbuffer.FlatBufferBuilder A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0015 \-\> B:12:0x0010\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

