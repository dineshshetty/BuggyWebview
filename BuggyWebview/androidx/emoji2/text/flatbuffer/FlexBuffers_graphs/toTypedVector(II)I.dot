digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.toTypedVector(II)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000}"];
Node_21 [shape=record,label="{21\:\ 0x0004|if (isTypedVectorElementType(r1) == false) goto L15\l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|switch(r2) \{\l    case 0: goto L11;\l    case 1: goto L13;\l    case 2: goto L9;\l    case 3: goto L7;\l    case 4: goto L4;\l    default: goto L13;\l\}\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a}"];
Node_25 [shape=record,label="{25\:\ 0x000e|RETURN\l|return (r1 + (\-1)) + 22\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f}"];
Node_27 [shape=record,label="{27\:\ 0x0013|RETURN\l|return (r1 + (\-1)) + 19\l}"];
Node_28 [shape=record,label="{28\:\ 0x0014}"];
Node_29 [shape=record,label="{29\:\ 0x0018|RETURN\l|return (r1 + (\-1)) + 16\l}"];
Node_30 [shape=record,label="{30\:\ 0x0019}"];
Node_31 [shape=record,label="{31\:\ 0x001d|RETURN\l|return (r1 + (\-1)) + 11\l}"];
Node_32 [shape=record,label="{32\:\ 0x001e}"];
Node_33 [shape=record,label="{33\:\ 0x0023|throw new java.lang.AssertionError()\l}"];
Node_34 [shape=record,label="{34\:\ 0x0024}"];
Node_35 [shape=record,label="{35\:\ 0x0029|throw new java.lang.AssertionError()\l}"];
MethodNode[shape=record,label="{public static int androidx.emoji2.text.flatbuffer.FlexBuffers.toTypedVector((r1v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'fixedLength' int A[D('fixedLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0013 \-\> B:19:?, CROSS_EDGE: B:29:0x0018 \-\> B:19:?, CROSS_EDGE: B:31:0x001d \-\> B:19:?, CROSS_EDGE: B:33:0x0023 \-\> B:19:?, CROSS_EDGE: B:35:0x0029 \-\> B:19:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_34;
Node_22 -> Node_24;
Node_22 -> Node_26;
Node_22 -> Node_28;
Node_22 -> Node_30;
Node_22 -> Node_32;
Node_24 -> Node_25;
Node_25 -> Node_19;
Node_26 -> Node_27;
Node_27 -> Node_19;
Node_28 -> Node_29;
Node_29 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_34 -> Node_35;
Node_35 -> Node_19;
}

