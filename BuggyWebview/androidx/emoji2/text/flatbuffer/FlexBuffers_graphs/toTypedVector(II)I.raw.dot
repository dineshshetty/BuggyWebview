digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.toTypedVector(II)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r1 I:int A[D('type' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.FlexBuffers.isTypedVectorElementType(int):boolean A[MD:(int):boolean (m)] (LINE:137)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0024 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|0x0006: SWITCH  (r2 I:?? A[D('fixedLength' int)])\l case 0: goto B:30:0x0019\l case 1: goto B:32:0x001e\l case 2: goto B:28:0x0014\l case 3: goto B:26:0x000f\l case 4: goto B:24:0x000a\l default: goto B:32:0x001e  (LINE:138)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: ARITH  (r0 I:int) = (r1 I:int A[D('type' int)]) + (\-1 int)  (LINE:142)\l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (22 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: ARITH  (r0 I:int) = (r1 I:int A[D('type' int)]) + (\-1 int)  (LINE:141)\l0x0011: ARITH  (r0 I:int) = (r0 I:int) + (19 int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0014|0x0014: ARITH  (r0 I:int) = (r1 I:int A[D('type' int)]) + (\-1 int)  (LINE:140)\l0x0016: ARITH  (r0 I:int) = (r0 I:int) + (16 int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0019|0x0019: ARITH  (r0 I:int) = (r1 I:int A[D('type' int)]) + (\-1 int)  (LINE:139)\l0x001b: ARITH  (r0 I:int) = (r0 I:int) + (11 int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x001d|RETURN\l|0x001d: RETURN  (r0 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:144)\l0x0020: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|0x0024: NEW_INSTANCE  (r0 I:java.lang.AssertionError) =  java.lang.AssertionError  (LINE:137)\l0x0026: INVOKE  (r0 I:java.lang.AssertionError) type: DIRECT call: java.lang.AssertionError.\<init\>():void A[MD:():void (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0029|0x0029: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int androidx.emoji2.text.flatbuffer.FlexBuffers.toTypedVector((r1 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('fixedLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0013 \-\> B:19:?, CROSS_EDGE: B:29:0x0018 \-\> B:19:?, CROSS_EDGE: B:31:0x001d \-\> B:19:?, CROSS_EDGE: B:33:0x0023 \-\> B:19:?, CROSS_EDGE: B:35:0x0029 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0037: r1 'type' I\l  \-1 \-0x0037: r2 'fixedLength' I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_34;
Node_22 -> Node_24;
Node_22 -> Node_26;
Node_22 -> Node_28;
Node_22 -> Node_30;
Node_22 -> Node_32;
Node_24 -> Node_25;
Node_25 -> Node_19;
Node_26 -> Node_27;
Node_27 -> Node_19;
Node_28 -> Node_29;
Node_29 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_34 -> Node_35;
Node_35 -> Node_19;
}

