digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.isTypedVector(I)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (11 ??[int, float, short, byte, char])  (LINE:112)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r1 I:??[int, byte, short, char] A[D('type' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:18:0x0008 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, short, byte, char]) = (15 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|0x0006: IF  (r1 I:??[int, byte, short, char] A[D('type' int)]) \<= (r0 I:??[int, byte, short, char])  \-\> B:20:0x000c \l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|SYNTHETIC\lRETURN\l|0x000c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, short, byte, char]) = (36 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000e \l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|RETURN\lORIG_RETURN\l|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{static boolean androidx.emoji2.text.flatbuffer.FlexBuffers.isTypedVector((r1 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x000e \-\> B:22:0x000f, CROSS_EDGE: B:17:0x0006 \-\> B:20:0x000c, CROSS_EDGE: B:15:0x0002 \-\> B:18:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r1 'type' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_20 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_21 -> Node_13;
}

