digraph "CFG forandroidx.emoji2.text.flatbuffer.FlexBuffers.Vector.get(I)Landroidx\/emoji2\/text\/flatbuffer\/FlexBuffers$Reference;" {
subgraph cluster_Region_1035982837 {
label = "R(2:1|(2:(1:4)|(2:6|7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|long long r0 = size()\l}"];
subgraph cluster_Region_1234273440 {
label = "R(2:(1:4)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_636430575 {
label = "IF [B:11:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0008|if (r8 \>= r0) goto L3\l}"];
subgraph cluster_Region_367244437 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|return androidx.emoji2.text.flatbuffer.FlexBuffers.Reference.NULL_REFERENCE\l}"];
}
}
subgraph cluster_Region_387226622 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000f|int int r2 = androidx.emoji2.text.flatbuffer.FlexBuffers.Unsigned.byteToUnsignedInt(r7.f84bb.get((int) (r7.end + (r7.byteWidth * r0) + r8)))\lint int r3 = r7.end + (r7.byteWidth * r8)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0035|RETURN\l|return new androidx.emoji2.text.flatbuffer.FlexBuffers.Reference(r7.f84bb, r3, r7.byteWidth, r2)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000a}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.emoji2.text.flatbuffer.FlexBuffers$Reference androidx.emoji2.text.flatbuffer.FlexBuffers.Vector.get((r7v0 'this' androidx.emoji2.text.flatbuffer.FlexBuffers$Vector A[IMMUTABLE_TYPE, THIS]), (r8v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0035 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.emoji2.text.flatbuffer.FlexBuffers.Vector.get(int):androidx.emoji2.text.flatbuffer.FlexBuffers$Reference]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
}

