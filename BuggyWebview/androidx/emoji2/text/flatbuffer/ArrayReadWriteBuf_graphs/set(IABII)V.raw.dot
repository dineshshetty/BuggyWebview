digraph "CFG forandroidx.emoji2.text.flatbuffer.ArrayReadWriteBuf.set(I[BII)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: ARITH  (r0 I:int) = (r5 I:int A[D('length' int)]) \- (r4 I:int A[D('start' int)])  (LINE:154)\l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int A[D('index' int)]) \l0x0003: INVOKE  (r1 I:androidx.emoji2.text.flatbuffer.ArrayReadWriteBuf), (r0 I:int) type: VIRTUAL call: androidx.emoji2.text.flatbuffer.ArrayReadWriteBuf.requestCapacity(int):boolean A[MD:(int):boolean (m)]\l0x0006: IGET  (r0 I:byte[]) = (r1 I:androidx.emoji2.text.flatbuffer.ArrayReadWriteBuf) androidx.emoji2.text.flatbuffer.ArrayReadWriteBuf.buffer byte[]  (LINE:155)\l0x0008: INVOKE  \l  (r3 I:java.lang.Object A[D('toCopy' byte[])])\l  (r4 I:int A[D('start' int)])\l  (r0 I:java.lang.Object)\l  (r2 I:int A[D('index' int)])\l  (r5 I:int A[D('length' int)])\l type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|RETURN\l|0x000b: RETURN    (LINE:156)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.flatbuffer.ArrayReadWriteBuf.set((r1 'this' I:androidx.emoji2.text.flatbuffer.ArrayReadWriteBuf A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte[] A[D('toCopy' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r2 'index' I\l  \-1 \-0x000b: r3 'toCopy' [B\l  \-1 \-0x000b: r4 'start' I\l  \-1 \-0x000b: r5 'length' I\lMETHOD_OVERRIDE: [androidx.emoji2.text.flatbuffer.ReadWriteBuf.set(int, byte[], int, int):void]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

