digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleThreeBytes(BBB[CI)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r3 I:byte A[D('byte2' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isNotTrailingByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:125)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x002e \l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, short, byte, char]) = (\-32 ??[int, float, short, byte, char]) \l0x0008: CONST  (r1 I:??[int, float, short, byte, char]) = (\-96 ??[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('byte1' byte)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x000e \l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|0x000c: IF  (r3 I:??[int, byte, short, char] A[D('byte2' byte)]) \< (r1 I:??[int, byte, short, char])  \-\> B:30:0x002e \l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, short, byte, char]) = (\-19 ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('byte1' byte)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0014 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|0x0012: IF  (r3 I:??[int, byte, short, char] A[D('byte2' byte)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:30:0x002e \l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) = (r4 I:byte A[D('byte3' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isNotTrailingByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:130)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x002e \l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|0x001a: ARITH  (r0 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('byte1' byte)]) & (15 ??[int, float, short, byte, char])  (LINE:133)\l0x001c: ARITH  (r0 I:int) = (r0 I:int) \<\< (12 int) \l0x001e: INVOKE  (r1 I:int) = (r3 I:byte A[D('byte2' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.trailingByteValue(byte):int A[MD:(byte):int (m)] (LINE:134)\l0x0022: ARITH  (r1 I:int) = (r1 I:int) \<\< (6 int) \l0x0024: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x0025: INVOKE  (r1 I:int) = (r4 I:byte A[D('byte3' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.trailingByteValue(byte):int A[MD:(byte):int (m)]\l0x0029: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x002a: CAST (r0 I:char) = (char) (r0 I:int) \l0x002b: APUT  \l  (r5 I:char[] A[D('resultArr' char[]), IMMUTABLE_TYPE])\l  (r6 I:??[int, short, byte, char] A[D('resultPos' int)])\l  (r0 I:char A[IMMUTABLE_TYPE])\l \l}"];
Node_29 [shape=record,label="{29\:\ 0x002d|RETURN\l|0x002d: RETURN    (LINE:135)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|0x002e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:131)\l0x0030: CONST_STR  (r1 I:java.lang.String) =  \"Invalid UTF\-8\" \l0x0032: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0035|0x0035: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleThreeBytes((r2 I:byte A[D('byte1' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte A[D('byte2' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte A[D('byte3' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:char[] A[D('resultArr' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('resultPos' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0035 \-\> B:17:?, CROSS_EDGE: B:25:0x0012 \-\> B:30:0x002e, CROSS_EDGE: B:24:0x0010 \-\> B:26:0x0014, CROSS_EDGE: B:22:0x000c \-\> B:30:0x002e, CROSS_EDGE: B:21:0x000a \-\> B:23:0x000e, CROSS_EDGE: B:19:0x0004 \-\> B:30:0x002e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0035: r2 'byte1' B\l  \-1 \-0x0035: r3 'byte2' B\l  \-1 \-0x0035: r4 'byte3' B\l  \-1 \-0x0035: r5 'resultArr' [C\l  \-1 \-0x0035: r6 'resultPos' I\lEXCEPTIONS:[Ljava\/lang\/IllegalArgumentException;]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_30;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_30 -> Node_31;
Node_31 -> Node_17;
}

