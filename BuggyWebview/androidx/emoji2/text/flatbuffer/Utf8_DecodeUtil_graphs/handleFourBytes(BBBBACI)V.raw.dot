digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleFourBytes(BBBB[CI)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r4 I:byte A[D('byte2' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isNotTrailingByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:140)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0041 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: ARITH  (r0 I:int) = (r3 I:int A[D('byte1' byte)]) \<\< (28 int) \l0x0008: ARITH  (r1 I:int) = (r4 I:int A[D('byte2' byte)]) + (112 int) \l0x000a: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000b: ARITH  (r0 I:int) = (r0 I:int) \>\> (30 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0041 \l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|0x000f: INVOKE  (r0 I:boolean) = (r5 I:byte A[D('byte3' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isNotTrailingByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:149)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0041 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: INVOKE  (r0 I:boolean) = (r6 I:byte A[D('byte4' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.isNotTrailingByte(byte):boolean A[MD:(byte):boolean (m)] (LINE:150)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0041 \l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|0x001b: ARITH  (r0 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char] A[D('byte1' byte)]) & (7 ??[int, float, short, byte, char])  (LINE:153)\l0x001d: ARITH  (r0 I:int) = (r0 I:int) \<\< (18 int) \l0x001f: INVOKE  (r1 I:int) = (r4 I:byte A[D('byte2' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.trailingByteValue(byte):int A[MD:(byte):int (m)] (LINE:154)\l0x0023: ARITH  (r1 I:int) = (r1 I:int) \<\< (12 int) \l0x0025: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x0026: INVOKE  (r1 I:int) = (r5 I:byte A[D('byte3' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.trailingByteValue(byte):int A[MD:(byte):int (m)] (LINE:155)\l0x002a: ARITH  (r1 I:int) = (r1 I:int) \<\< (6 int) \l0x002c: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x002d: INVOKE  (r1 I:int) = (r6 I:byte A[D('byte4' byte)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.trailingByteValue(byte):int A[MD:(byte):int (m)] (LINE:156)\l0x0031: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x0032: INVOKE  (r1 I:char) = (r0 I:int A[D('codepoint' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.highSurrogate(int):char A[MD:(int):char (m)] (LINE:157)\l0x0036: APUT  \l  (r7 I:char[] A[D('resultArr' char[]), IMMUTABLE_TYPE])\l  (r8 I:??[int, short, byte, char] A[D('resultPos' int)])\l  (r1 I:char A[IMMUTABLE_TYPE])\l \l0x0038: ARITH  (r1 I:int) = (r8 I:int A[D('resultPos' int)]) + (1 int)  (LINE:158)\l0x003a: INVOKE  (r2 I:char) = (r0 I:int A[D('codepoint' int)]) type: STATIC call: androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.lowSurrogate(int):char A[MD:(int):char (m)]\l0x003e: APUT  \l  (r7 I:char[] A[D('resultArr' char[]), IMMUTABLE_TYPE])\l  (r1 I:??[int, short, byte, char])\l  (r2 I:char A[IMMUTABLE_TYPE])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x0040|RETURN\l|0x0040: RETURN    (LINE:159)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0041|0x0041: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('codepoint' int)]) =  java.lang.IllegalArgumentException  (LINE:151)\l0x0043: CONST_STR  (r1 I:java.lang.String) =  \"Invalid UTF\-8\" \l0x0045: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0048|0x0048: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void androidx.emoji2.text.flatbuffer.Utf8.DecodeUtil.handleFourBytes((r3 I:byte A[D('byte1' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte A[D('byte2' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte A[D('byte3' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:byte A[D('byte4' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:char[] A[D('resultArr' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('resultPos' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0048 \-\> B:15:?, CROSS_EDGE: B:21:0x0013 \-\> B:26:0x0041, CROSS_EDGE: B:19:0x000d \-\> B:26:0x0041, CROSS_EDGE: B:17:0x0004 \-\> B:26:0x0041\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0032\-0x0041: r0 'codepoint' I\l  \-1 \-0x0048: r3 'byte1' B\l  \-1 \-0x0048: r4 'byte2' B\l  \-1 \-0x0048: r5 'byte3' B\l  \-1 \-0x0048: r6 'byte4' B\l  \-1 \-0x0048: r7 'resultArr' [C\l  \-1 \-0x0048: r8 'resultPos' I\lEXCEPTIONS:[Ljava\/lang\/IllegalArgumentException;]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

