digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Old.encodedLength(Ljava\/lang\/CharSequence;)I" {
subgraph cluster_Region_1501410090 {
label = "R(8:1|(1:20)|5|6|8|(1:(1:14))|10|11)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0000|androidx.emoji2.text.flatbuffer.Utf8Old$Cache androidx.emoji2.text.flatbuffer.Utf8Old.Cache r0 = androidx.emoji2.text.flatbuffer.Utf8Old.CACHE.get()\lint int r1 = (int) (r8.length() * r0.encoder.maxBytesPerChar())\l}"];
subgraph cluster_IfRegion_2103063420 {
label = "IF [B:25:0x0018, B:27:0x0020] THEN: R(1:20) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0018|if (r0.lastOutput == null) goto L20\l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|ADDED_TO_REGION\l|if (r0.lastOutput.capacity() \< r1) goto L20\l}"];
subgraph cluster_Region_247497432 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0022|r0.lastOutput = java.nio.ByteBuffer.allocate(java.lang.Math.max(128, r1))\l}"];
}
}
Node_29 [shape=record,label="{29\:\ 0x002e|r0.lastOutput.clear()\lr0.lastInput = r8\l}"];
Node_30 [shape=record,label="{30\:\ 0x0037|java.nio.CharBuffer r2 = r8 instanceof java.nio.CharBuffer ? (java.nio.CharBuffer) r8 : java.nio.CharBuffer.wrap(r8)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0041|PHI: r2 \l  PHI: (r2v9 'wrap' java.nio.CharBuffer) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|java.nio.charset.CoderResult java.nio.charset.CoderResult r3 = r0.encoder.encode(r2, r0.lastOutput, true)\l}"];
subgraph cluster_IfRegion_1781103103 {
label = "IF [B:34:0x004f] THEN: R(1:(1:14)) ELSE: null";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x004f|if (r3.isError() != false) goto L13\l}"];
subgraph cluster_Region_198704379 {
label = "R(1:(1:14))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_2137084423 {
label = "Try: R(1:14) catches: R(2:16|18)";
node [shape=record,color=blue];
subgraph cluster_Region_1593406323 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0051|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{CharacterCodingException \-\> 0x0055, blocks: (B:35:0x0051), top: B:42:0x0051 \}\lCatch: CharacterCodingException \-\> 0x0055\l|r3.throwException()     \/\/ Catch: java.nio.charset.CharacterCodingException \-\> L55\l}"];
}
subgraph cluster_Region_1060650150 {
label = "R(2:16|18) | ExcHandler: CharacterCodingException \-\> 0x0055\l";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0055|ExcHandler: CharacterCodingException \-\> 0x0055\l}"];
Node_39 [shape=record,label="{39\:\ 0x005d|throw new java.lang.IllegalArgumentException(\"bad character encoding\", r4)\l}"];
}
}
}
}
Node_40 [shape=record,label="{40\:\ 0x005e|r0.lastOutput.flip()\l}"];
Node_41 [shape=record,label="{41\:\ 0x0069|RETURN\l|return r0.lastOutput.remaining()\l}"];
}
subgraph cluster_Region_1060650150 {
label = "R(2:16|18) | ExcHandler: CharacterCodingException \-\> 0x0055\l";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0055|ExcHandler: CharacterCodingException \-\> 0x0055\l}"];
Node_39 [shape=record,label="{39\:\ 0x005d|throw new java.lang.IllegalArgumentException(\"bad character encoding\", r4)\l}"];
}
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x001a}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0039}"];
Node_23 [shape=record,color=red,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x0051|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_43 [shape=record,color=red,label="{43\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0056}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x003d}"];
MethodNode[shape=record,label="{public int androidx.emoji2.text.flatbuffer.Utf8Old.encodedLength((r7v0 'this' androidx.emoji2.text.flatbuffer.Utf8Old A[IMMUTABLE_TYPE, THIS]), (r8v0 'in' java.lang.CharSequence A[D('in' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0051 \-\> B:40:0x005e, CROSS_EDGE: B:39:0x005d \-\> B:23:?, CROSS_EDGE: B:42:0x0051 \-\> B:37:0x0055, CROSS_EDGE: B:32:0x003d \-\> B:33:0x0041, CROSS_EDGE: B:27:0x0020 \-\> B:29:0x002e, CROSS_EDGE: B:25:0x0018 \-\> B:28:0x0022\lINLINE_NOT_NEEDED\lTryCatch #0 \{CharacterCodingException \-\> 0x0055, blocks: (B:35:0x0051), top: B:42:0x0051 \}\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.emoji2.text.flatbuffer.Utf8.encodedLength(java.lang.CharSequence):int]\l}"];
MethodNode -> Node_22;Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_27 -> Node_28;
Node_27 -> Node_29[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_30 -> Node_32;
Node_33 -> Node_34;
Node_34 -> Node_40[style=dashed];
Node_34 -> Node_42;
Node_35 -> Node_40;
Node_35 -> Node_43;
Node_37 -> Node_38;
Node_39 -> Node_23;
Node_40 -> Node_41;
Node_41 -> Node_23;
Node_37 -> Node_38;
Node_39 -> Node_23;
Node_22 -> Node_24;
Node_26 -> Node_27;
Node_31 -> Node_33;
Node_42 -> Node_35;
Node_42 -> Node_37;
Node_43 -> Node_37;
Node_38 -> Node_39;
Node_32 -> Node_33;
}

