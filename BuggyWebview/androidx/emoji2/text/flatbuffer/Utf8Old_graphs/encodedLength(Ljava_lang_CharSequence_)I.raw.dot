digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Old.encodedLength(Ljava\/lang\/CharSequence;)I" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: SGET  (r0 I:java.lang.ThreadLocal\<androidx.emoji2.text.flatbuffer.Utf8Old$Cache\>) =  androidx.emoji2.text.flatbuffer.Utf8Old.CACHE java.lang.ThreadLocal  (LINE:53)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ThreadLocal) type: VIRTUAL call: java.lang.ThreadLocal.get():java.lang.Object A[MD:():T (c)]\l0x0006: CHECK_CAST (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache) = (androidx.emoji2.text.flatbuffer.Utf8Old$Cache) (r0 I:??[OBJECT, ARRAY]) \l0x0008: INVOKE  (r1 I:int) = (r8 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:54)\l0x000c: CAST (r1 I:float) = (float) (r1 I:int) \l0x000d: IGET  (r2 I:java.nio.charset.CharsetEncoder) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.encoder java.nio.charset.CharsetEncoder \l0x000f: INVOKE  (r2 I:float) = (r2 I:java.nio.charset.CharsetEncoder) type: VIRTUAL call: java.nio.charset.CharsetEncoder.maxBytesPerChar():float A[MD:():float (c)]\l0x0013: ARITH  (r1 I:float) = (r1 I:float) * (r2 I:float) \l0x0015: CAST (r1 I:int) = (int) (r1 I:float) \l0x0016: IGET  (r2 I:java.nio.ByteBuffer) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastOutput java.nio.ByteBuffer  (LINE:55)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0022 \l}"];
Node_26 [shape=record,label="{26\:\ 0x001a|0x001a: IGET  (r2 I:java.nio.ByteBuffer) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastOutput java.nio.ByteBuffer \l0x001c: INVOKE  (r2 I:int) = (r2 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.capacity():int A[MD:():int (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|0x0020: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('estimated' int)])  \-\> B:29:0x002e \l}"];
Node_29 [shape=record,label="{29\:\ 0x002e|0x002e: IGET  (r2 I:java.nio.ByteBuffer) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastOutput java.nio.ByteBuffer  (LINE:58)\l0x0030: INVOKE  (r2 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.clear():java.nio.Buffer A[MD:():java.nio.Buffer (c)]\l0x0033: IPUT  \l  (r8 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)])\l  (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)])\l androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastInput java.lang.CharSequence  (LINE:59)\l0x0035: INSTANCE_OF  (r2 I:boolean) = (r8 I:??[OBJECT, ARRAY] A[D('in' java.lang.CharSequence)]) java.nio.CharBuffer  (LINE:60)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0037|0x0037: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x003d \l}"];
Node_31 [shape=record,label="{31\:\ 0x0039|0x0039: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('in' java.lang.CharSequence)]) \l0x003a: CHECK_CAST (r2 I:java.nio.CharBuffer) = (java.nio.CharBuffer) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0041|0x0042: IGET  (r3 I:java.nio.charset.CharsetEncoder) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.encoder java.nio.charset.CharsetEncoder  (LINE:62)\l0x0044: IGET  (r4 I:java.nio.ByteBuffer) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastOutput java.nio.ByteBuffer \l0x0046: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0047: INVOKE  (r3 I:java.nio.charset.CoderResult) = \l  (r3 I:java.nio.charset.CharsetEncoder)\l  (r2 I:java.nio.CharBuffer A[D('wrap' java.nio.CharBuffer)])\l  (r4 I:java.nio.ByteBuffer)\l  (r5 I:boolean)\l type: VIRTUAL call: java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer, java.nio.ByteBuffer, boolean):java.nio.charset.CoderResult A[MD:(java.nio.CharBuffer, java.nio.ByteBuffer, boolean):java.nio.charset.CoderResult (c)]\l0x004b: INVOKE  (r4 I:boolean) = (r3 I:java.nio.charset.CoderResult A[D('result' java.nio.charset.CoderResult)]) type: VIRTUAL call: java.nio.charset.CoderResult.isError():boolean A[MD:():boolean (c)] (LINE:63)\l}"];
Node_34 [shape=record,label="{34\:\ 0x004f|0x004f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x005e \l}"];
Node_40 [shape=record,label="{40\:\ 0x005e|0x005e: IGET  (r4 I:java.nio.ByteBuffer A[D('e' java.nio.charset.CharacterCodingException)]) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastOutput java.nio.ByteBuffer  (LINE:70)\l0x0060: INVOKE  (r4 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.flip():java.nio.Buffer A[MD:():java.nio.Buffer (c)]\l0x0063: IGET  (r4 I:java.nio.ByteBuffer) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)]) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastOutput java.nio.ByteBuffer  (LINE:71)\l0x0065: INVOKE  (r4 I:int) = (r4 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.remaining():int A[MD:():int (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0069|RETURN\l|0x0069: RETURN  (r4 I:int) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0051|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0051|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{CharacterCodingException \-\> 0x0055, blocks: (B:35:0x0051), top: B:42:0x0051 \}\lCatch: CharacterCodingException \-\> 0x0055\l|0x0051: INVOKE  (r3 I:java.nio.charset.CoderResult A[D('result' java.nio.charset.CoderResult)]) type: VIRTUAL call: java.nio.charset.CoderResult.throwException():void A[Catch: CharacterCodingException \-\> 0x0055, MD:():void throws java.nio.charset.CharacterCodingException (c), TRY_ENTER, TRY_LEAVE] (LINE:65)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_37 [shape=record,label="{37\:\ 0x0055|ExcHandler: CharacterCodingException \-\> 0x0055\l|0x0055: MOVE_EXCEPTION  (r4 I:java.nio.charset.CharacterCodingException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: CharacterCodingException \-\> 0x0055] (LINE:66)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0056|0x0056: NEW_INSTANCE  (r5 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:67)\l0x0058: CONST_STR  (r6 I:java.lang.String) =  \"bad character encoding\" \l0x005a: INVOKE  \l  (r5 I:java.lang.IllegalArgumentException)\l  (r6 I:java.lang.String)\l  (r4 I:java.lang.Throwable A[D('e' java.nio.charset.CharacterCodingException)])\l type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String, java.lang.Throwable):void A[MD:(java.lang.String, java.lang.Throwable):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x005d|0x005d: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x003d|0x003d: INVOKE  (r2 I:java.nio.CharBuffer) = (r8 I:java.lang.CharSequence A[D('in' java.lang.CharSequence)]) type: STATIC call: java.nio.CharBuffer.wrap(java.lang.CharSequence):java.nio.CharBuffer A[MD:(java.lang.CharSequence):java.nio.CharBuffer (c)] (LINE:61)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0022|0x0022: CONST  (r2 I:??[int, float, short, byte, char]) = (128(0x80, float:1.8E\-43) ??[int, float, short, byte, char])  (LINE:56)\l0x0024: INVOKE  (r2 I:int) = (r2 I:int), (r1 I:int A[D('estimated' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0028: INVOKE  (r2 I:java.nio.ByteBuffer) = (r2 I:int) type: STATIC call: java.nio.ByteBuffer.allocate(int):java.nio.ByteBuffer A[MD:(int):java.nio.ByteBuffer (c)]\l0x002c: IPUT  \l  (r2 I:java.nio.ByteBuffer)\l  (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache A[D('cache' androidx.emoji2.text.flatbuffer.Utf8Old$Cache)])\l androidx.emoji2.text.flatbuffer.Utf8Old.Cache.lastOutput java.nio.ByteBuffer \l}"];
MethodNode[shape=record,label="{public int androidx.emoji2.text.flatbuffer.Utf8Old.encodedLength((r7 'this' I:androidx.emoji2.text.flatbuffer.Utf8Old A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.CharSequence A[D('in' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0051 \-\> B:40:0x005e, CROSS_EDGE: B:39:0x005d \-\> B:23:?, CROSS_EDGE: B:42:0x0051 \-\> B:37:0x0055, CROSS_EDGE: B:32:0x003d \-\> B:33:0x0041, CROSS_EDGE: B:27:0x0020 \-\> B:29:0x002e, CROSS_EDGE: B:25:0x0018 \-\> B:28:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0056\-0x005e: r4 'e' Ljava\/nio\/charset\/CharacterCodingException;\l  0x0008\-0x0069: r0 'cache' Landroidx\/emoji2\/text\/flatbuffer\/Utf8Old$Cache;\l  0x0016\-0x0069: r1 'estimated' I\l  0x0042\-0x0069: r2 'wrap' Ljava\/nio\/CharBuffer;\l  0x004b\-0x0069: r3 'result' Ljava\/nio\/charset\/CoderResult;\l  \-1 \-0x0069: r8 'in' Ljava\/lang\/CharSequence;\lTryCatch #0 \{CharacterCodingException \-\> 0x0055, blocks: (B:35:0x0051), top: B:42:0x0051 \}\lMETHOD_OVERRIDE: [androidx.emoji2.text.flatbuffer.Utf8.encodedLength(java.lang.CharSequence):int]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_40;
Node_34 -> Node_42[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_23;
Node_42 -> Node_35;
Node_42 -> Node_37;
Node_35 -> Node_40;
Node_35 -> Node_43;
Node_43 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_32 -> Node_33;
Node_28 -> Node_29;
}

