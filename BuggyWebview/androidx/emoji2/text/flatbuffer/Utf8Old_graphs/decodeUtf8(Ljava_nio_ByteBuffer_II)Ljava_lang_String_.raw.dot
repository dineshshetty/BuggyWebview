digraph "CFG forandroidx.emoji2.text.flatbuffer.Utf8Old.decodeUtf8(Ljava\/nio\/ByteBuffer;II)Ljava\/lang\/String;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: SGET  (r0 I:java.lang.ThreadLocal\<androidx.emoji2.text.flatbuffer.Utf8Old$Cache\>) =  androidx.emoji2.text.flatbuffer.Utf8Old.CACHE java.lang.ThreadLocal  (LINE:87)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ThreadLocal) type: VIRTUAL call: java.lang.ThreadLocal.get():java.lang.Object A[MD:():T (c)]\l0x0006: CHECK_CAST (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache) = (androidx.emoji2.text.flatbuffer.Utf8Old$Cache) (r0 I:??[OBJECT, ARRAY]) \l0x0008: IGET  (r0 I:java.nio.charset.CharsetDecoder) = (r0 I:androidx.emoji2.text.flatbuffer.Utf8Old$Cache) androidx.emoji2.text.flatbuffer.Utf8Old.Cache.decoder java.nio.charset.CharsetDecoder \l0x000a: INVOKE  (r0 I:java.nio.charset.CharsetDecoder A[D('decoder' java.nio.charset.CharsetDecoder)]) type: VIRTUAL call: java.nio.charset.CharsetDecoder.reset():java.nio.charset.CharsetDecoder A[MD:():java.nio.charset.CharsetDecoder (c)] (LINE:88)\l0x000d: INVOKE  (r5 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]) = (r5 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.duplicate():java.nio.ByteBuffer A[MD:():java.nio.ByteBuffer (c)] (LINE:89)\l0x0011: INVOKE  (r5 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r6 I:int A[D('offset' int)]) type: VIRTUAL call: java.nio.ByteBuffer.position(int):java.nio.Buffer A[MD:(int):java.nio.Buffer (c)] (LINE:90)\l0x0014: ARITH  (r1 I:int) = (r6 I:int A[D('offset' int)]) + (r7 I:int A[D('length' int)])  (LINE:91)\l0x0016: INVOKE  (r5 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)]), (r1 I:int) type: VIRTUAL call: java.nio.ByteBuffer.limit(int):java.nio.Buffer A[MD:(int):java.nio.Buffer (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0019|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{CharacterCodingException \-\> 0x0022, blocks: (B:13:0x0019), top: B:18:0x0019 \}\lCatch: CharacterCodingException \-\> 0x0022\l|0x0019: INVOKE  (r1 I:java.nio.CharBuffer) = \l  (r0 I:java.nio.charset.CharsetDecoder A[D('decoder' java.nio.charset.CharsetDecoder)])\l  (r5 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer)])\l type: VIRTUAL call: java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer):java.nio.CharBuffer A[Catch: CharacterCodingException \-\> 0x0022, MD:(java.nio.ByteBuffer):java.nio.CharBuffer throws java.nio.charset.CharacterCodingException (c), TRY_ENTER] (LINE:93)\l0x001d: INVOKE  (r2 I:java.lang.String) = (r1 I:java.nio.CharBuffer A[D('result' java.nio.CharBuffer)]) type: VIRTUAL call: java.nio.CharBuffer.toString():java.lang.String A[Catch: CharacterCodingException \-\> 0x0022, MD:():java.lang.String (c), TRY_LEAVE] (LINE:94)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|RETURN\l|0x0021: RETURN  (r2 I:java.lang.String) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|ExcHandler: CharacterCodingException \-\> 0x0022\l|0x0022: MOVE_EXCEPTION  (r1 I:java.nio.charset.CharacterCodingException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: CharacterCodingException \-\> 0x0022] (LINE:95)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|0x0023: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:96)\l0x0025: CONST_STR  (r3 I:java.lang.String) =  \"Bad encoding\" \l0x0027: INVOKE  \l  (r2 I:java.lang.IllegalArgumentException)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.Throwable A[D('e' java.nio.charset.CharacterCodingException)])\l type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String, java.lang.Throwable):void A[MD:(java.lang.String, java.lang.Throwable):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.emoji2.text.flatbuffer.Utf8Old.decodeUtf8((r4 'this' I:androidx.emoji2.text.flatbuffer.Utf8Old A[IMMUTABLE_TYPE, THIS]), (r5 I:java.nio.ByteBuffer A[D('buffer' java.nio.ByteBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x002a \-\> B:11:?, CROSS_EDGE: B:18:0x0019 \-\> B:15:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0022: r1 'result' Ljava\/nio\/CharBuffer;\l  0x000a\-0x002a: r0 'decoder' Ljava\/nio\/charset\/CharsetDecoder;\l  0x0023\-0x002a: r1 'e' Ljava\/nio\/charset\/CharacterCodingException;\l  \-1 \-0x002a: r5 'buffer' Ljava\/nio\/ByteBuffer;\l  \-1 \-0x002a: r6 'offset' I\l  \-1 \-0x002a: r7 'length' I\lTryCatch #0 \{CharacterCodingException \-\> 0x0022, blocks: (B:13:0x0019), top: B:18:0x0019 \}\lMETHOD_OVERRIDE: [androidx.emoji2.text.flatbuffer.Utf8.decodeUtf8(java.nio.ByteBuffer, int, int):java.lang.String]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_18;
Node_18 -> Node_13;
Node_18 -> Node_15;
Node_13 -> Node_14;
Node_13 -> Node_19;
Node_14 -> Node_11;
Node_19 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_11;
}

