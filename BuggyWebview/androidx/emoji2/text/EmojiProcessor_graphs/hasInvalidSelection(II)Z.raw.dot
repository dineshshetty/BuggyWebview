digraph "CFG forandroidx.emoji2.text.EmojiProcessor.hasInvalidSelection(II)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:481)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|0x0001: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|0x0003: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('end' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('end' int)])  \-\> B:7:0x0008 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|SYNTHETIC\lRETURN\l|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|RETURN\lORIG_RETURN\l|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000b: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean androidx.emoji2.text.EmojiProcessor.hasInvalidSelection((r1 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x000a \-\> B:9:0x000b, CROSS_EDGE: B:4:0x0003 \-\> B:8:0x000a, CROSS_EDGE: B:3:0x0001 \-\> B:8:0x000a\lDebug Info:\l  \-1 \-0x000b: r1 'start' I\l  \-1 \-0x000b: r2 'end' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_7 -> Node_1;
Node_8 -> Node_1;
}

