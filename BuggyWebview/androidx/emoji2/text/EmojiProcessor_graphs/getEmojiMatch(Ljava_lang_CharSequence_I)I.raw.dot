digraph "CFG forandroidx.emoji2.text.EmojiProcessor.getEmojiMatch(Ljava\/lang\/CharSequence;I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:androidx.emoji2.text.EmojiProcessor$ProcessorSm) =  androidx.emoji2.text.EmojiProcessor$ProcessorSm  (LINE:128)\l0x0002: IGET  (r1 I:androidx.emoji2.text.MetadataRepo) = (r9 I:androidx.emoji2.text.EmojiProcessor) androidx.emoji2.text.EmojiProcessor.mMetadataRepo androidx.emoji2.text.MetadataRepo \l0x0004: INVOKE  (r1 I:androidx.emoji2.text.MetadataRepo$Node) = (r1 I:androidx.emoji2.text.MetadataRepo) type: VIRTUAL call: androidx.emoji2.text.MetadataRepo.getRootNode():androidx.emoji2.text.MetadataRepo$Node A[MD:():androidx.emoji2.text.MetadataRepo$Node (m)]\l0x0008: IGET  (r2 I:boolean) = (r9 I:androidx.emoji2.text.EmojiProcessor) androidx.emoji2.text.EmojiProcessor.mUseEmojiAsDefaultStyle boolean \l0x000a: IGET  (r3 I:int[]) = (r9 I:androidx.emoji2.text.EmojiProcessor) androidx.emoji2.text.EmojiProcessor.mEmojiAsDefaultStyleExceptions int[] \l0x000c: INVOKE  \l  (r0 I:androidx.emoji2.text.EmojiProcessor$ProcessorSm)\l  (r1 I:androidx.emoji2.text.MetadataRepo$Node)\l  (r2 I:boolean)\l  (r3 I:int[])\l type: DIRECT call: androidx.emoji2.text.EmojiProcessor.ProcessorSm.\<init\>(androidx.emoji2.text.MetadataRepo$Node, boolean, int[]):void A[MD:(androidx.emoji2.text.MetadataRepo$Node, boolean, int[]):void (m)]\l0x000f: INVOKE  (r1 I:int) = (r10 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:130)\l0x0013: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:131)\l0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:132)\l0x0015: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:133)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|LOOP_START\lLOOP:0: B:3:0x0016\-\>B:33:0x0016\l|0x0016: IF  (r2 I:??[int, byte, short, char] A[D('currentOffset' int)]) \>= (r1 I:??[int, byte, short, char] A[D('end' int)])  \-\> B:31:0x004d  (LINE:135)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: INVOKE  (r5 I:int) = (r10 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)]), (r2 I:int A[D('currentOffset' int)]) type: STATIC call: java.lang.Character.codePointAt(java.lang.CharSequence, int):int A[MD:(java.lang.CharSequence, int):int (c)] (LINE:136)\l0x001c: INVOKE  (r6 I:int) = \l  (r0 I:androidx.emoji2.text.EmojiProcessor$ProcessorSm A[D('sm' androidx.emoji2.text.EmojiProcessor$ProcessorSm)])\l  (r5 I:int A[D('codePoint' int)])\l type: VIRTUAL call: androidx.emoji2.text.EmojiProcessor.ProcessorSm.check(int):int A[MD:(int):int (m)] (LINE:137)\l0x0020: INVOKE  (r7 I:androidx.emoji2.text.EmojiMetadata) = (r0 I:androidx.emoji2.text.EmojiProcessor$ProcessorSm A[D('sm' androidx.emoji2.text.EmojiProcessor$ProcessorSm)]) type: VIRTUAL call: androidx.emoji2.text.EmojiProcessor.ProcessorSm.getCurrentMetadata():androidx.emoji2.text.EmojiMetadata A[MD:():androidx.emoji2.text.EmojiMetadata (m)] (LINE:138)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0024|0x0024: SWITCH  (r6 I:?? A[D('action' int)])\l case 1: goto B:11:0x003b\l case 2: goto B:10:0x0035\l case 3: goto B:7:0x0028\l default: goto B:12:0x0042  (LINE:139)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: INVOKE  (r7 I:androidx.emoji2.text.EmojiMetadata A[D('currentNode' androidx.emoji2.text.EmojiMetadata)]) = (r0 I:androidx.emoji2.text.EmojiProcessor$ProcessorSm A[D('sm' androidx.emoji2.text.EmojiProcessor$ProcessorSm)]) type: VIRTUAL call: androidx.emoji2.text.EmojiProcessor.ProcessorSm.getFlushMetadata():androidx.emoji2.text.EmojiMetadata A[MD:():androidx.emoji2.text.EmojiMetadata (m)] (LINE:143)\l0x002c: INVOKE  (r8 I:short) = (r7 I:androidx.emoji2.text.EmojiMetadata A[D('currentNode' androidx.emoji2.text.EmojiMetadata)]) type: VIRTUAL call: androidx.emoji2.text.EmojiMetadata.getCompatAdded():short A[MD:():short (m)] (LINE:144)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: IF  (r8 I:??[int, byte, short, char]) \> (r11 I:??[int, byte, short, char] A[D('metadataVersion' int)])  \-\> B:12:0x0042 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0032|0x0032: ARITH  (r4 I:int) = (r4 I:int A[D('subsequenceMatch' int)]) + (1 int)  (LINE:145)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0035|0x0035: INVOKE  (r8 I:int) = (r5 I:int A[D('codePoint' int)]) type: STATIC call: java.lang.Character.charCount(int):int A[MD:(int):int (c)] (LINE:155)\l0x0039: ARITH  (r2 I:int) = (r2 I:int A[D('currentOffset' int)]) + (r8 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: INVOKE  (r8 I:int) = (r5 I:int A[D('codePoint' int)]) type: STATIC call: java.lang.Character.charCount(int):int A[MD:(int):int (c)] (LINE:150)\l0x003f: ARITH  (r2 I:int) = (r2 I:int A[D('currentOffset' int)]) + (r8 I:int) \l0x0040: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('potentialSubsequenceMatch' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:152)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|0x0042: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentNode' androidx.emoji2.text.EmojiMetadata)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0016  (LINE:159)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0044|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0044|0x0044: INVOKE  (r8 I:short) = (r7 I:androidx.emoji2.text.EmojiMetadata A[D('currentNode' androidx.emoji2.text.EmojiMetadata)]) type: VIRTUAL call: androidx.emoji2.text.EmojiMetadata.getCompatAdded():short A[MD:():short (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|0x0048: IF  (r8 I:??[int, byte, short, char]) \> (r11 I:??[int, byte, short, char] A[D('metadataVersion' int)])  \-\> B:35:0x0016 \l}"];
Node_32 [shape=record,label="{32\:\ 0x004a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x004a|0x004a: ARITH  (r3 I:int) = (r3 I:int A[D('potentialSubsequenceMatch' int)]) + (1 int)  (LINE:160)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0016|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0016|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x0016\-\>B:33:0x0016\l}"];
Node_35 [shape=record,label="{35\:\ 0x0016|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0016|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x004d|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:164)\l}"];
Node_18 [shape=record,label="{18\:\ 0x004e|0x004e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('subsequenceMatch' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0051 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0050|RETURN\l|0x0050: RETURN  (r5 I:int)  (LINE:167)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0051|0x0051: INVOKE  (r6 I:boolean) = (r0 I:androidx.emoji2.text.EmojiProcessor$ProcessorSm A[D('sm' androidx.emoji2.text.EmojiProcessor$ProcessorSm)]) type: VIRTUAL call: androidx.emoji2.text.EmojiProcessor.ProcessorSm.isInFlushableState():boolean A[MD:():boolean (m)] (LINE:170)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0055|0x0055: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0063 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0057|0x0057: INVOKE  (r6 I:androidx.emoji2.text.EmojiMetadata) = (r0 I:androidx.emoji2.text.EmojiProcessor$ProcessorSm A[D('sm' androidx.emoji2.text.EmojiProcessor$ProcessorSm)]) type: VIRTUAL call: androidx.emoji2.text.EmojiProcessor.ProcessorSm.getCurrentMetadata():androidx.emoji2.text.EmojiMetadata A[MD:():androidx.emoji2.text.EmojiMetadata (m)] (LINE:173)\l0x005b: INVOKE  (r7 I:short) = (r6 I:androidx.emoji2.text.EmojiMetadata A[D('exactMatch' androidx.emoji2.text.EmojiMetadata)]) type: VIRTUAL call: androidx.emoji2.text.EmojiMetadata.getCompatAdded():short A[MD:():short (m)] (LINE:174)\l}"];
Node_23 [shape=record,label="{23\:\ 0x005f|0x005f: IF  (r7 I:??[int, byte, short, char]) \> (r11 I:??[int, byte, short, char] A[D('metadataVersion' int)])  \-\> B:26:0x0063 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0061|RETURN\l|0x0061: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:175)\l0x0062: RETURN  (r5 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0063|0x0063: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('potentialSubsequenceMatch' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0067  (LINE:179)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0065|RETURN\l|0x0065: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:180)\l0x0066: RETURN  (r5 I:int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0067|RETURN\l|0x0067: RETURN  (r5 I:int)  (LINE:182)\l}"];
MethodNode[shape=record,label="{int androidx.emoji2.text.EmojiProcessor.getEmojiMatch((r9 'this' I:androidx.emoji2.text.EmojiProcessor A[IMMUTABLE_TYPE, THIS]), (r10 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('metadataVersion' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:15:0x004a \-\> B:3:0x0016, BACK_EDGE: B:14:0x0048 \-\> B:3:0x0016, BACK_EDGE: B:12:0x0042 \-\> B:3:0x0016, CROSS_EDGE: B:8:0x0030 \-\> B:12:0x0042, CROSS_EDGE: B:10:0x0035 \-\> B:12:0x0042, CROSS_EDGE: B:11:0x003b \-\> B:12:0x0042, CROSS_EDGE: B:5:0x0024 \-\> B:12:0x0042, CROSS_EDGE: B:25:0x0062 \-\> B:1:?, CROSS_EDGE: B:28:0x0066 \-\> B:1:?, CROSS_EDGE: B:29:0x0067 \-\> B:1:?, CROSS_EDGE: B:21:0x0055 \-\> B:26:0x0063\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x004c: r5 'codePoint' I\l  0x0020\-0x004c: r6 'action' I\l  0x0024\-0x004c: r7 'currentNode' Landroidx\/emoji2\/text\/EmojiMetadata;\l  0x005b\-0x0063: r6 'exactMatch' Landroidx\/emoji2\/text\/EmojiMetadata;\l  0x000f\-0x0071: r0 'sm' Landroidx\/emoji2\/text\/EmojiProcessor$ProcessorSm;\l  0x0013\-0x0071: r1 'end' I\l  0x0014\-0x0071: r2 'currentOffset' I\l  0x0015\-0x0071: r3 'potentialSubsequenceMatch' I\l  0x0016\-0x0071: r4 'subsequenceMatch' I\l  \-1 \-0x0071: r10 'charSequence' Ljava\/lang\/CharSequence;\l  \-1 \-0x0071: r11 'metadataVersion' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_31;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_10;
Node_5 -> Node_11;
Node_5 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_12;
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_30[style=dashed];
Node_12 -> Node_34;
Node_30 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_32[style=dashed];
Node_14 -> Node_35;
Node_32 -> Node_15;
Node_15 -> Node_36;
Node_36 -> Node_33;
Node_33 -> Node_3;
Node_35 -> Node_33;
Node_34 -> Node_33;
Node_31 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_1;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_1;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_1;
Node_29 -> Node_1;
}

