digraph "CFG forandroidx.emoji2.text.EmojiProcessor.hasGlyph(Ljava\/lang\/CharSequence;IILandroidx\/emoji2\/text\/EmojiMetadata;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r6 I:androidx.emoji2.text.EmojiMetadata A[D('metadata' androidx.emoji2.text.EmojiMetadata)]) type: VIRTUAL call: androidx.emoji2.text.EmojiMetadata.getHasGlyph():int A[MD:():int (m)] (LINE:509)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0013 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:androidx.emoji2.text.EmojiCompat$GlyphChecker) = (r2 I:androidx.emoji2.text.EmojiProcessor) androidx.emoji2.text.EmojiProcessor.mGlyphChecker androidx.emoji2.text.EmojiCompat$GlyphChecker  (LINE:510)\l0x0008: INVOKE  (r1 I:short) = (r6 I:androidx.emoji2.text.EmojiMetadata A[D('metadata' androidx.emoji2.text.EmojiMetadata)]) type: VIRTUAL call: androidx.emoji2.text.EmojiMetadata.getSdkAdded():short A[MD:():short (m)] (LINE:511)\l0x000c: INVOKE  (r0 I:boolean) = \l  (r0 I:androidx.emoji2.text.EmojiCompat$GlyphChecker)\l  (r3 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)])\l  (r4 I:int A[D('start' int)])\l  (r5 I:int A[D('end' int)])\l  (r1 I:int)\l type: INTERFACE call: androidx.emoji2.text.EmojiCompat.GlyphChecker.hasGlyph(java.lang.CharSequence, int, int, int):boolean A[MD:(java.lang.CharSequence, int, int, int):boolean (m)] (LINE:510)\l0x0010: INVOKE  \l  (r6 I:androidx.emoji2.text.EmojiMetadata A[D('metadata' androidx.emoji2.text.EmojiMetadata)])\l  (r0 I:boolean A[D('hasGlyph' boolean)])\l type: VIRTUAL call: androidx.emoji2.text.EmojiMetadata.setHasGlyph(boolean):void A[MD:(boolean):void (m)] (LINE:512)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: INVOKE  (r0 I:int) = (r6 I:androidx.emoji2.text.EmojiMetadata A[D('metadata' androidx.emoji2.text.EmojiMetadata)]) type: VIRTUAL call: androidx.emoji2.text.EmojiMetadata.getHasGlyph():int A[MD:():int (m)] (LINE:515)\l0x0017: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|SYNTHETIC\lRETURN\l|0x001a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001d: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean androidx.emoji2.text.EmojiProcessor.hasGlyph((r2 'this' I:androidx.emoji2.text.EmojiProcessor A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:androidx.emoji2.text.EmojiMetadata A[D('metadata' androidx.emoji2.text.EmojiMetadata), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x001c \-\> B:9:0x001d, CROSS_EDGE: B:3:0x0004 \-\> B:5:0x0013\lDebug Info:\l  0x0010\-0x0013: r0 'hasGlyph' Z\l  \-1 \-0x001d: r3 'charSequence' Ljava\/lang\/CharSequence;\l  \-1 \-0x001d: r4 'start' I\l  \-1 \-0x001d: r5 'end' I\l  \-1 \-0x001d: r6 'metadata' Landroidx\/emoji2\/text\/EmojiMetadata;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_1;
}

