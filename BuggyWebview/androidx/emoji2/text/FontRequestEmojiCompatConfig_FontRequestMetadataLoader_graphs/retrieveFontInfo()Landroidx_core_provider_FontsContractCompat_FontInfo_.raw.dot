digraph "CFG forandroidx.emoji2.text.FontRequestEmojiCompatConfig.FontRequestMetadataLoader.retrieveFontInfo()Landroidx\/core\/provider\/FontsContractCompat$FontInfo;" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NameNotFoundException \-\> 0x0046, blocks: (B:22:0x0000), top: B:38:0x0000 \}\lCatch: NameNotFoundException \-\> 0x0046\l|0x0000: IGET  (r0 I:androidx.emoji2.text.FontRequestEmojiCompatConfig$FontProviderHelper) = (r4 I:androidx.emoji2.text.FontRequestEmojiCompatConfig$FontRequestMetadataLoader) androidx.emoji2.text.FontRequestEmojiCompatConfig.FontRequestMetadataLoader.mFontProviderHelper androidx.emoji2.text.FontRequestEmojiCompatConfig$FontProviderHelper A[Catch: NameNotFoundException \-\> 0x0046, TRY_ENTER] (LINE:285)\l0x0002: IGET  (r1 I:android.content.Context) = (r4 I:androidx.emoji2.text.FontRequestEmojiCompatConfig$FontRequestMetadataLoader) androidx.emoji2.text.FontRequestEmojiCompatConfig.FontRequestMetadataLoader.mContext android.content.Context A[Catch: NameNotFoundException \-\> 0x0046]\l0x0004: IGET  (r2 I:androidx.core.provider.FontRequest) = (r4 I:androidx.emoji2.text.FontRequestEmojiCompatConfig$FontRequestMetadataLoader) androidx.emoji2.text.FontRequestEmojiCompatConfig.FontRequestMetadataLoader.mRequest androidx.core.provider.FontRequest A[Catch: NameNotFoundException \-\> 0x0046]\l0x0006: INVOKE  (r0 I:androidx.core.provider.FontsContractCompat$FontFamilyResult) = \l  (r0 I:androidx.emoji2.text.FontRequestEmojiCompatConfig$FontProviderHelper)\l  (r1 I:android.content.Context)\l  (r2 I:androidx.core.provider.FontRequest)\l type: VIRTUAL call: androidx.emoji2.text.FontRequestEmojiCompatConfig.FontProviderHelper.fetchFonts(android.content.Context, androidx.core.provider.FontRequest):androidx.core.provider.FontsContractCompat$FontFamilyResult A[Catch: NameNotFoundException \-\> 0x0046, MD:(android.content.Context, androidx.core.provider.FontRequest):androidx.core.provider.FontsContractCompat$FontFamilyResult throws android.content.pm.PackageManager$NameNotFoundException (m), TRY_LEAVE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|0x000b: INVOKE  (r1 I:int) = \l  (r0 I:androidx.core.provider.FontsContractCompat$FontFamilyResult A[D('result' androidx.core.provider.FontsContractCompat$FontFamilyResult)])\l type: VIRTUAL call: androidx.core.provider.FontsContractCompat.FontFamilyResult.getStatusCode():int A[MD:():int (m)] (LINE:289)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0026 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|0x0011: INVOKE  (r1 I:androidx.core.provider.FontsContractCompat$FontInfo[]) = \l  (r0 I:androidx.core.provider.FontsContractCompat$FontFamilyResult A[D('result' androidx.core.provider.FontsContractCompat$FontFamilyResult)])\l type: VIRTUAL call: androidx.core.provider.FontsContractCompat.FontFamilyResult.getFonts():androidx.core.provider.FontsContractCompat$FontInfo[] A[MD:():androidx.core.provider.FontsContractCompat$FontInfo[] (m)] (LINE:292)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fonts' androidx.core.provider.FontsContractCompat$FontInfo[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001e  (LINE:293)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|0x0017: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[] A[D('fonts' androidx.core.provider.FontsContractCompat$FontInfo[])]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001e \l}"];
Node_29 [shape=record,label="{29\:\ 0x001a|0x001a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:296)\l0x001b: AGET  (r2 I:??[OBJECT, ARRAY]) = \l  (r1 I:??[OBJECT, ARRAY][] A[D('fonts' androidx.core.provider.FontsContractCompat$FontInfo[])])\l  (r2 I:??[int, short, byte, char])\l \l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|RETURN\l|0x001d: RETURN  (r2 I:androidx.core.provider.FontsContractCompat$FontInfo) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|0x001e: NEW_INSTANCE  (r2 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:294)\l0x0020: CONST_STR  (r3 I:java.lang.String) =  \"fetchFonts failed (empty result)\" \l0x0022: INVOKE  (r2 I:java.lang.RuntimeException), (r3 I:java.lang.String) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|0x0025: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0026|0x0026: NEW_INSTANCE  (r1 I:java.lang.RuntimeException A[D('fonts' androidx.core.provider.FontsContractCompat$FontInfo[])]) =  java.lang.RuntimeException  (LINE:290)\l0x0028: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002a: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x002d: CONST_STR  (r3 I:java.lang.String) =  \"fetchFonts failed (\" \l0x002f: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0032: INVOKE  (r3 I:int) = \l  (r0 I:androidx.core.provider.FontsContractCompat$FontFamilyResult A[D('result' androidx.core.provider.FontsContractCompat$FontFamilyResult)])\l type: VIRTUAL call: androidx.core.provider.FontsContractCompat.FontFamilyResult.getStatusCode():int A[MD:():int (m)]\l0x0036: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0039: CONST_STR  (r3 I:java.lang.String) =  \")\" \l0x003b: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003e: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0042: INVOKE  (r1 I:java.lang.RuntimeException), (r2 I:java.lang.String) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0045|0x0045: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0046|ExcHandler: NameNotFoundException \-\> 0x0046\l|0x0046: MOVE_EXCEPTION  (r0 I:android.content.pm.PackageManager$NameNotFoundException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NameNotFoundException \-\> 0x0046] (LINE:286)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0047|0x0047: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:287)\l0x0049: CONST_STR  (r2 I:java.lang.String) =  \"provider not found\" \l0x004b: INVOKE  \l  (r1 I:java.lang.RuntimeException)\l  (r2 I:java.lang.String)\l  (r0 I:java.lang.Throwable A[D('e' android.content.pm.PackageManager$NameNotFoundException)])\l type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.String, java.lang.Throwable):void A[MD:(java.lang.String, java.lang.Throwable):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x004e|0x004e: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private androidx.core.provider.FontsContractCompat$FontInfo androidx.emoji2.text.FontRequestEmojiCompatConfig.FontRequestMetadataLoader.retrieveFontInfo((r4 'this' I:androidx.emoji2.text.FontRequestEmojiCompatConfig$FontRequestMetadataLoader A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0025 \-\> B:21:?, CROSS_EDGE: B:26:0x0015 \-\> B:31:0x001e, CROSS_EDGE: B:34:0x0045 \-\> B:21:?, CROSS_EDGE: B:37:0x004e \-\> B:21:?, CROSS_EDGE: B:38:0x0000 \-\> B:35:0x0046\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0026: r1 'fonts' [Landroidx\/core\/provider\/FontsContractCompat$FontInfo;\l  0x000a\-0x0046: r0 'result' Landroidx\/core\/provider\/FontsContractCompat$FontFamilyResult;\l  0x0047\-0x004e: r0 'e' Landroid\/content\/pm\/PackageManager$NameNotFoundException;\lTryCatch #0 \{NameNotFoundException \-\> 0x0046, blocks: (B:22:0x0000), top: B:38:0x0000 \}\l}"];
MethodNode -> Node_20;Node_20 -> Node_38;
Node_38 -> Node_22;
Node_38 -> Node_35;
Node_22 -> Node_23;
Node_22 -> Node_39;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_33;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_30 -> Node_21;
Node_31 -> Node_32;
Node_32 -> Node_21;
Node_33 -> Node_34;
Node_34 -> Node_21;
Node_39 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_21;
}

