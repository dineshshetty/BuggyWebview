digraph "CFG forandroidx.emoji2.text.SpannableBuilder.WatcherWrapper.onSpanAdded(Landroid\/text\/Spannable;Ljava\/lang\/Object;II)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IGET  (r0 I:java.util.concurrent.atomic.AtomicInteger) = (r1 I:androidx.emoji2.text.SpannableBuilder$WatcherWrapper) androidx.emoji2.text.SpannableBuilder.WatcherWrapper.mBlockCalls java.util.concurrent.atomic.AtomicInteger  (LINE:404)\l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.concurrent.atomic.AtomicInteger) type: VIRTUAL call: java.util.concurrent.atomic.AtomicInteger.get():int A[MD:():int (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:16:0x000f \l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|0x0008: INVOKE  (r0 I:boolean) = (r1 I:androidx.emoji2.text.SpannableBuilder$WatcherWrapper), (r3 I:java.lang.Object A[D('what' java.lang.Object)]) type: DIRECT call: androidx.emoji2.text.SpannableBuilder.WatcherWrapper.isEmojiSpan(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x000f \l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|RETURN\l|0x000e: RETURN    (LINE:405)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: IGET  (r0 I:java.lang.Object) = (r1 I:androidx.emoji2.text.SpannableBuilder$WatcherWrapper) androidx.emoji2.text.SpannableBuilder.WatcherWrapper.mObject java.lang.Object  (LINE:407)\l0x0011: CHECK_CAST (r0 I:android.text.SpanWatcher) = (android.text.SpanWatcher) (r0 I:??[OBJECT, ARRAY]) \l0x0013: INVOKE  \l  (r0 I:android.text.SpanWatcher)\l  (r2 I:android.text.Spannable A[D('text' android.text.Spannable)])\l  (r3 I:java.lang.Object A[D('what' java.lang.Object)])\l  (r4 I:int A[D('start' int)])\l  (r5 I:int A[D('end' int)])\l type: INTERFACE call: android.text.SpanWatcher.onSpanAdded(android.text.Spannable, java.lang.Object, int, int):void A[MD:(android.text.Spannable, java.lang.Object, int, int):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0016|RETURN\l|0x0016: RETURN    (LINE:408)\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.SpannableBuilder.WatcherWrapper.onSpanAdded((r1 'this' I:androidx.emoji2.text.SpannableBuilder$WatcherWrapper A[IMMUTABLE_TYPE, THIS]), (r2 I:android.text.Spannable A[D('text' android.text.Spannable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[D('what' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0016 \-\> B:10:?, CROSS_EDGE: B:12:0x0006 \-\> B:16:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0016: r2 'text' Landroid\/text\/Spannable;\l  \-1 \-0x0016: r3 'what' Ljava\/lang\/Object;\l  \-1 \-0x0016: r4 'start' I\l  \-1 \-0x0016: r5 'end' I\lMETHOD_OVERRIDE: [ClspMth\{android.text.SpanWatcher.onSpanAdded(android.text.Spannable, java.lang.Object, int, int):void\}]\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

