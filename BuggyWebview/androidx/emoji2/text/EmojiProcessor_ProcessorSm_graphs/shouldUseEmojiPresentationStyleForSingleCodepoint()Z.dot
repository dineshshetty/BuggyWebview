digraph "CFG forandroidx.emoji2.text.EmojiProcessor.ProcessorSm.shouldUseEmojiPresentationStyleForSingleCodepoint()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x000b|if (r4.mCurrentNode.getData().isDefaultEmoji() == false) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e}"];
Node_6 [shape=record,label="{6\:\ 0x0014|if (isEmojiStyle(r4.mLastCodepoint) == false) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|RETURN\l|return true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if (r4.mUseEmojiAsDefaultStyle == false) goto L16\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c}"];
Node_11 [shape=record,label="{11\:\ 0x001e|if (r4.mEmojiAsDefaultStyleExceptions != null) goto L13\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|RETURN\l|return true\l}"];
Node_13 [shape=record,label="{13\:\ 0x0021|int r0 = r4.mCurrentNode.getData().getCodepointAt(0)\lint r3 = java.util.Arrays.binarySearch(r4.mEmojiAsDefaultStyleExceptions, r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|if (r3 \>= 0) goto L16\l}"];
Node_15 [shape=record,label="{15\:\ 0x0033|RETURN\l|return true\l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private boolean androidx.emoji2.text.EmojiProcessor.ProcessorSm.shouldUseEmojiPresentationStyleForSingleCodepoint((r4v0 'this' androidx.emoji2.text.EmojiProcessor$ProcessorSm A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0016 \-\> B:1:?, CROSS_EDGE: B:12:0x0020 \-\> B:1:?, CROSS_EDGE: B:15:0x0033 \-\> B:1:?, CROSS_EDGE: B:16:0x0034 \-\> B:1:?, CROSS_EDGE: B:9:0x001a \-\> B:16:0x0034\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_1;
Node_16 -> Node_1;
}

