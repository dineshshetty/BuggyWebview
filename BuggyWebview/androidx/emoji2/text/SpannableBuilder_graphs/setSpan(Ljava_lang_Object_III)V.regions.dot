digraph "CFG forandroidx.emoji2.text.SpannableBuilder.setSpan(Ljava\/lang\/Object;III)V" {
subgraph cluster_Region_734346027 {
label = "R(2:(1:3)|4)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_181601704 {
label = "IF [B:10:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0004|if (isWatcher(r3) != false) goto L3\l}"];
subgraph cluster_Region_402411943 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0006|androidx.emoji2.text.SpannableBuilder$WatcherWrapper androidx.emoji2.text.SpannableBuilder.WatcherWrapper r0 = new androidx.emoji2.text.SpannableBuilder.WatcherWrapper(r3)\lr2.mWatchers.add(r0)\lr3 = r0\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0011|PHI: r3 \l  PHI: (r3v1 'what' java.lang.Object) = (r3v0 'what' java.lang.Object), (r3v2 'what' java.lang.Object) binds: [B:10:0x0004, B:11:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|super.setSpan(r3, r4, r5, r6)\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0014}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.SpannableBuilder.setSpan((r2v0 'this' androidx.emoji2.text.SpannableBuilder A[IMMUTABLE_TYPE, THIS]), (r3v0 'what' java.lang.Object A[D('what' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'end' int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'flags' int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:12:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.text.SpannableStringBuilder.setSpan(java.lang.Object, int, int, int):void\}, ClspMth\{android.text.Spannable.setSpan(java.lang.Object, int, int, int):void\}]\l}"];
MethodNode -> Node_7;Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_13 -> Node_8;
}

