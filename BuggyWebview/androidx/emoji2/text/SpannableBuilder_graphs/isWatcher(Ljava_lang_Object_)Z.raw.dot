digraph "CFG forandroidx.emoji2.text.SpannableBuilder.isWatcher(Ljava\/lang\/Object;)Z" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('object' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000e  (LINE:108)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: INVOKE  (r0 I:java.lang.Class) = (r2 I:java.lang.Object A[D('object' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x0006: INVOKE  (r0 I:boolean) = (r1 I:androidx.emoji2.text.SpannableBuilder), (r0 I:java.lang.Class) type: DIRECT call: androidx.emoji2.text.SpannableBuilder.isWatcher(java.lang.Class):boolean A[MD:(java.lang.Class\<?\>):boolean (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000e \l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|SYNTHETIC\lRETURN\l|0x000c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|RETURN\lORIG_RETURN\l|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean androidx.emoji2.text.SpannableBuilder.isWatcher((r1 'this' I:androidx.emoji2.text.SpannableBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[D('object' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:16:0x000f, CROSS_EDGE: B:11:0x0000 \-\> B:15:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r2 'object' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_10;
Node_15 -> Node_10;
}

