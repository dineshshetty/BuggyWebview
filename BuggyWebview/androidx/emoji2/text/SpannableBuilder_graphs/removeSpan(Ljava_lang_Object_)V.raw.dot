digraph "CFG forandroidx.emoji2.text.SpannableBuilder.removeSpan(Ljava\/lang\/Object;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:androidx.emoji2.text.SpannableBuilder), (r3 I:java.lang.Object A[D('what' java.lang.Object)]) type: DIRECT call: androidx.emoji2.text.SpannableBuilder.isWatcher(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)] (LINE:170)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x000e \l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|0x0006: INVOKE  (r0 I:androidx.emoji2.text.SpannableBuilder$WatcherWrapper) = (r2 I:androidx.emoji2.text.SpannableBuilder), (r3 I:java.lang.Object A[D('what' java.lang.Object)]) type: DIRECT call: androidx.emoji2.text.SpannableBuilder.getWatcherFor(java.lang.Object):androidx.emoji2.text.SpannableBuilder$WatcherWrapper A[MD:(java.lang.Object):androidx.emoji2.text.SpannableBuilder$WatcherWrapper (m)] (LINE:171)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('watcher' androidx.emoji2.text.SpannableBuilder$WatcherWrapper)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000f  (LINE:172)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('what' java.lang.Object)]) = (r0 I:??[OBJECT, ARRAY] A[D('watcher' androidx.emoji2.text.SpannableBuilder$WatcherWrapper)])  (LINE:173)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|0x000f: INVOKE  (r2 I:android.text.SpannableStringBuilder), (r3 I:java.lang.Object A[D('what' java.lang.Object)]) type: SUPER call: android.text.SpannableStringBuilder.removeSpan(java.lang.Object):void A[MD:(java.lang.Object):void (c)] (LINE:179)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('watcher' androidx.emoji2.text.SpannableBuilder$WatcherWrapper)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:?  (LINE:181)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: IGET  (r1 I:java.util.List\<androidx.emoji2.text.SpannableBuilder$WatcherWrapper\>) = (r2 I:androidx.emoji2.text.SpannableBuilder) androidx.emoji2.text.SpannableBuilder.mWatchers java.util.List  (LINE:182)\l0x0016: INVOKE  (r1 I:java.util.List), (r0 I:java.lang.Object A[D('watcher' androidx.emoji2.text.SpannableBuilder$WatcherWrapper)]) type: INTERFACE call: java.util.List.remove(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|RETURN\lORIG_RETURN\l|0x0019: RETURN    (LINE:184)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x0019: RETURN   A[SYNTHETIC] (LINE:184)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('watcher' androidx.emoji2.text.SpannableBuilder$WatcherWrapper)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:176)\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.SpannableBuilder.removeSpan((r2 'this' I:androidx.emoji2.text.SpannableBuilder A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('what' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:22:0x0012 \-\> B:24:0x0019, CROSS_EDGE: B:18:0x000a \-\> B:21:0x000f, CROSS_EDGE: B:20:0x000e \-\> B:21:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x000e: r0 'watcher' Landroidx\/emoji2\/text\/SpannableBuilder$WatcherWrapper;\l  0x000f\-0x0019: r0 'watcher' Landroidx\/emoji2\/text\/SpannableBuilder$WatcherWrapper;\l  \-1 \-0x0019: r3 'what' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [ClspMth\{android.text.SpannableStringBuilder.removeSpan(java.lang.Object):void\}, ClspMth\{android.text.Spannable.removeSpan(java.lang.Object):void\}]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_14;
Node_25 -> Node_14;
Node_20 -> Node_21;
}

