digraph "CFG forandroidx.emoji2.text.EmojiProcessor.CodepointIndexFinder.findIndexForward(Ljava\/lang\/CharSequence;II)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('from' int)])  (LINE:779)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:780)\l0x0002: INVOKE  (r2 I:int) = (r7 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:781)\l0x0006: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:782)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char] A[D('currentIndex' int)]) \< (0 ??[int, byte, short, char])  \-\> B:28:0x0043 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r2 I:??[int, byte, short, char] A[D('length' int)]) \>= (r0 I:??[int, byte, short, char] A[D('currentIndex' int)])  \-\> B:6:0x000c \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r9 I:??[int, byte, short, char] A[D('numCodePoints' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:8:0x000f  (LINE:785)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|RETURN\l|0x000e: RETURN  (r3 I:int)  (LINE:786)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('numCodePoints' int)])  (LINE:788)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|LOOP_START\lLOOP:0: B:9:0x0010\-\>B:37:0x0010\l|0x0010: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('remainingCodePoints' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0013  (LINE:791)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: IF  (r0 I:??[int, byte, short, char] A[D('currentIndex' int)]) \< (r2 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:15:0x0019  (LINE:795)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|0x0019: INVOKE  (r5 I:char) = (r7 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)]), (r0 I:int A[D('currentIndex' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:802)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001d|0x001d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('waitingLowSurrogate' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x002c  (LINE:803)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002c|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x002c|0x002c: INVOKE  (r6 I:boolean) = (r5 I:char A[D('c' char)]) type: STATIC call: java.lang.Character.isSurrogate(char):boolean A[MD:(char):boolean (c)] (LINE:812)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0030|0x0030: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0037 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0037|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0037|0x0037: INVOKE  (r6 I:boolean) = (r5 I:char A[D('c' char)]) type: STATIC call: java.lang.Character.isLowSurrogate(char):boolean A[MD:(char):boolean (c)] (LINE:817)\l}"];
Node_25 [shape=record,label="{25\:\ 0x003b|0x003b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x003e \l}"];
Node_27 [shape=record,label="{27\:\ 0x003e|0x003e: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('waitingLowSurrogate' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:820)\l0x0040: ARITH  (r0 I:int) = (r0 I:int A[D('currentIndex' int)]) + (1 int) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0010|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0010|LOOP_END\lSYNTHETIC\lLOOP:0: B:9:0x0010\-\>B:37:0x0010\l}"];
Node_36 [shape=record,label="{36\:\ 0x003d|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x003d|RETURN\l|0x003d: RETURN  (r3 I:int)  (LINE:818)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0032|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0032|0x0032: ARITH  (r4 I:int) = (r4 I:int A[D('remainingCodePoints' int)]) + (\-1 int)  (LINE:813)\l0x0034: ARITH  (r0 I:int) = (r0 I:int A[D('currentIndex' int)]) + (1 int)  (LINE:814)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0010|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x001f|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|0x001f: INVOKE  (r6 I:boolean) = (r5 I:char A[D('c' char)]) type: STATIC call: java.lang.Character.isLowSurrogate(char):boolean A[MD:(char):boolean (c)] (LINE:804)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0023|0x0023: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0026 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|0x0026: ARITH  (r4 I:int) = (r4 I:int A[D('remainingCodePoints' int)]) + (\-1 int)  (LINE:807)\l0x0028: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('waitingLowSurrogate' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:808)\l0x0029: ARITH  (r0 I:int) = (r0 I:int A[D('currentIndex' int)]) + (1 int)  (LINE:809)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0010|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0025|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|RETURN\l|0x0025: RETURN  (r3 I:int)  (LINE:805)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('waitingLowSurrogate' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0018  (LINE:796)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|RETURN\l|0x0017: RETURN  (r3 I:int)  (LINE:797)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|RETURN\l|0x0018: RETURN  (r2 I:int A[D('length' int)])  (LINE:799)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0012|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:int A[D('currentIndex' int)])  (LINE:792)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0043|RETURN\l|0x0043: RETURN  (r3 I:int)  (LINE:783)\l}"];
MethodNode[shape=record,label="{static int androidx.emoji2.text.EmojiProcessor.CodepointIndexFinder.findIndexForward((r7 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('numCodePoints' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0012 \-\> B:1:?, CROSS_EDGE: B:13:0x0017 \-\> B:1:?, CROSS_EDGE: B:14:0x0018 \-\> B:1:?, CROSS_EDGE: B:19:0x0025 \-\> B:1:?, BACK_EDGE: B:20:0x0026 \-\> B:9:0x0010, BACK_EDGE: B:23:0x0032 \-\> B:9:0x0010, CROSS_EDGE: B:26:0x003d \-\> B:1:?, BACK_EDGE: B:27:0x003e \-\> B:9:0x0010, CROSS_EDGE: B:28:0x0043 \-\> B:1:?, CROSS_EDGE: B:3:0x0007 \-\> B:28:0x0043\lDebug Info:\l  0x001d\-0x0040: r5 'c' C\l  0x0010\-0x0043: r4 'remainingCodePoints' I\l  0x0001\-0x0043: r0 'currentIndex' I\l  0x0002\-0x0043: r1 'waitingLowSurrogate' Z\l  0x0006\-0x0043: r2 'length' I\l  \-1 \-0x0043: r7 'cs' Ljava\/lang\/CharSequence;\l  \-1 \-0x0043: r8 'from' I\l  \-1 \-0x0043: r9 'numCodePoints' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_28;
Node_4 -> Node_6;
Node_4 -> Node_28[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_29[style=dashed];
Node_11 -> Node_15;
Node_11 -> Node_31[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_32;
Node_16 -> Node_34[style=dashed];
Node_32 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_33;
Node_22 -> Node_35[style=dashed];
Node_33 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_36[style=dashed];
Node_27 -> Node_38;
Node_38 -> Node_37;
Node_37 -> Node_9;
Node_36 -> Node_26;
Node_26 -> Node_1;
Node_35 -> Node_23;
Node_23 -> Node_39;
Node_39 -> Node_37;
Node_34 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_30[style=dashed];
Node_20 -> Node_40;
Node_40 -> Node_37;
Node_30 -> Node_19;
Node_19 -> Node_1;
Node_31 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_1;
Node_14 -> Node_1;
Node_29 -> Node_10;
Node_10 -> Node_1;
Node_28 -> Node_1;
}

