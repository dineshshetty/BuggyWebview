digraph "CFG forandroidx.emoji2.text.EmojiProcessor.CodepointIndexFinder.findIndexBackward(Ljava\/lang\/CharSequence;II)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('from' int)])  (LINE:723)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:724)\l0x0002: INVOKE  (r2 I:int) = (r7 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:725)\l0x0006: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:726)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char] A[D('currentIndex' int)]) \< (0 ??[int, byte, short, char])  \-\> B:30:0x003f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: IF  (r2 I:??[int, byte, short, char] A[D('length' int)]) \>= (r0 I:??[int, byte, short, char] A[D('currentIndex' int)])  \-\> B:6:0x000c \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r9 I:??[int, byte, short, char] A[D('numCodePoints' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:8:0x000f  (LINE:729)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|RETURN\l|0x000e: RETURN  (r3 I:int)  (LINE:730)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('numCodePoints' int)])  (LINE:732)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|LOOP_START\lLOOP:0: B:9:0x0010\-\>B:39:0x0010\l|0x0010: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('remainingCodePoints' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0013  (LINE:734)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|0x0013: ARITH  (r0 I:int) = (r0 I:int A[D('currentIndex' int)]) + (\-1 int)  (LINE:738)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0015|0x0015: IF  (r0 I:??[int, byte, short, char] A[D('currentIndex' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:17:0x001c  (LINE:739)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|0x001c: INVOKE  (r5 I:char) = (r7 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)]), (r0 I:int A[D('currentIndex' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:746)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0020|0x0020: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('waitingHighSurrogate' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x002d  (LINE:747)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002d|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002d|0x002d: INVOKE  (r6 I:boolean) = (r5 I:char A[D('c' char)]) type: STATIC call: java.lang.Character.isSurrogate(char):boolean A[MD:(char):boolean (c)] (LINE:755)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0031|0x0031: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0036 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0036|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0036|0x0036: INVOKE  (r6 I:boolean) = (r5 I:char A[D('c' char)]) type: STATIC call: java.lang.Character.isHighSurrogate(char):boolean A[MD:(char):boolean (c)] (LINE:759)\l}"];
Node_27 [shape=record,label="{27\:\ 0x003a|0x003a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003d \l}"];
Node_29 [shape=record,label="{29\:\ 0x003d|0x003d: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('waitingHighSurrogate' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:762)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0010|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0010|LOOP_END\lSYNTHETIC\lLOOP:0: B:9:0x0010\-\>B:39:0x0010\l}"];
Node_38 [shape=record,label="{38\:\ 0x003c|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x003c|RETURN\l|0x003c: RETURN  (r3 I:int)  (LINE:760)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0033|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0033|0x0033: ARITH  (r4 I:int) = (r4 I:int A[D('remainingCodePoints' int)]) + (\-1 int)  (LINE:756)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0010|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|0x0022: INVOKE  (r6 I:boolean) = (r5 I:char A[D('c' char)]) type: STATIC call: java.lang.Character.isHighSurrogate(char):boolean A[MD:(char):boolean (c)] (LINE:748)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|0x0026: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0029 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|0x0029: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('waitingHighSurrogate' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:751)\l0x002a: ARITH  (r4 I:int) = (r4 I:int A[D('remainingCodePoints' int)]) + (\-1 int)  (LINE:752)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0010|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0028|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0028|RETURN\l|0x0028: RETURN  (r3 I:int)  (LINE:749)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|0x0017: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('waitingHighSurrogate' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001a  (LINE:740)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|RETURN\l|0x0019: RETURN  (r3 I:int)  (LINE:741)\l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|RETURN\l|0x001a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:743)\l0x001b: RETURN  (r3 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:int A[D('currentIndex' int)])  (LINE:735)\l}"];
Node_30 [shape=record,label="{30\:\ 0x003f|RETURN\l|0x003f: RETURN  (r3 I:int)  (LINE:727)\l}"];
MethodNode[shape=record,label="{static int androidx.emoji2.text.EmojiProcessor.CodepointIndexFinder.findIndexBackward((r7 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('numCodePoints' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0012 \-\> B:1:?, CROSS_EDGE: B:14:0x0019 \-\> B:1:?, CROSS_EDGE: B:16:0x001b \-\> B:1:?, CROSS_EDGE: B:21:0x0028 \-\> B:1:?, BACK_EDGE: B:22:0x0029 \-\> B:9:0x0010, BACK_EDGE: B:25:0x0033 \-\> B:9:0x0010, CROSS_EDGE: B:28:0x003c \-\> B:1:?, BACK_EDGE: B:29:0x003d \-\> B:9:0x0010, CROSS_EDGE: B:30:0x003f \-\> B:1:?, CROSS_EDGE: B:3:0x0007 \-\> B:30:0x003f\lDebug Info:\l  0x0020\-0x003e: r5 'c' C\l  0x0010\-0x003f: r4 'remainingCodePoints' I\l  0x0001\-0x003f: r0 'currentIndex' I\l  0x0002\-0x003f: r1 'waitingHighSurrogate' Z\l  0x0006\-0x003f: r2 'length' I\l  \-1 \-0x003f: r7 'cs' Ljava\/lang\/CharSequence;\l  \-1 \-0x003f: r8 'from' I\l  \-1 \-0x003f: r9 'numCodePoints' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_30;
Node_4 -> Node_6;
Node_4 -> Node_30[style=dashed];
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_11;
Node_9 -> Node_31[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_17;
Node_12 -> Node_33[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_32;
Node_18 -> Node_35[style=dashed];
Node_32 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_36;
Node_24 -> Node_37[style=dashed];
Node_36 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_38[style=dashed];
Node_29 -> Node_40;
Node_40 -> Node_39;
Node_39 -> Node_9;
Node_38 -> Node_28;
Node_28 -> Node_1;
Node_37 -> Node_25;
Node_25 -> Node_41;
Node_41 -> Node_39;
Node_35 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_34[style=dashed];
Node_22 -> Node_42;
Node_42 -> Node_39;
Node_34 -> Node_21;
Node_21 -> Node_1;
Node_33 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_1;
Node_15 -> Node_1;
Node_31 -> Node_10;
Node_10 -> Node_1;
Node_30 -> Node_1;
}

