digraph "CFG forandroidx.emoji2.text.MetadataRepo.create(Landroid\/graphics\/Typeface;Ljava\/io\/InputStream;)Landroidx\/emoji2\/text\/MetadataRepo;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0012, blocks: (B:12:0x0000), top: B:18:0x0000 \}\lCatch: all \-\> 0x0012\l|androidx.core.p003os.TraceCompat.beginSection(androidx.emoji2.text.MetadataRepo.S_TRACE_CREATE_REPO)     \/\/ Catch: java.lang.Throwable \-\> L12\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|DONT_GENERATE\l|androidx.core.p003os.TraceCompat.endSection()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|RETURN\l|return new androidx.emoji2.text.MetadataRepo(r2, androidx.emoji2.text.MetadataListReader.read(r3))\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|ExcHandler: all \-\> 0x0012\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|FINALLY_INSNS\l|androidx.core.p003os.TraceCompat.endSection()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0016|throw r0\l}"];
MethodNode[shape=record,label="{public static androidx.emoji2.text.MetadataRepo androidx.emoji2.text.MetadataRepo.create((r2v0 'typeface' android.graphics.Typeface A[D('typeface' android.graphics.Typeface), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'inputStream' java.io.InputStream A[D('inputStream' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0016 \-\> B:11:?, CROSS_EDGE: B:18:0x0000 \-\> B:15:0x0012\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0012, blocks: (B:12:0x0000), top: B:18:0x0000 \}\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_10;Node_10 -> Node_18;
Node_18 -> Node_12;
Node_18 -> Node_15;
Node_12 -> Node_13;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_14 -> Node_11;
Node_19 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_11;
}

