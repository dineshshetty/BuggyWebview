digraph "CFG forandroidx.emoji2.text.EmojiCompat.CompatInternal19.onMetadataLoadSuccess(Landroidx\/emoji2\/text\/MetadataRepo;)V" {
subgraph cluster_Region_50550826 {
label = "R(1:(2:(2:2|3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1117476717 {
label = "R(2:(2:2|3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_648848209 {
label = "IF [B:9:0x0000] THEN: R(2:2|3) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|if (r10 == null) goto L2\l}"];
subgraph cluster_Region_802811808 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|r9.mEmojiCompat.onMetadataLoadFailed(new java.lang.IllegalArgumentException(\"metadataRepo cannot be null\"))\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_914497657 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000f|r9.mMetadataRepo = r10\lr9.mProcessor = new androidx.emoji2.text.EmojiProcessor(r9.mMetadataRepo, new androidx.emoji2.text.EmojiCompat.SpanFactory(), r9.mEmojiCompat.mGlyphChecker, r9.mEmojiCompat.mUseEmojiAsDefaultStyle, r9.mEmojiCompat.mEmojiAsDefaultStyleExceptions)\lr9.mEmojiCompat.onMetadataLoadSuccess()\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0033}"];
MethodNode[shape=record,label="{void androidx.emoji2.text.EmojiCompat.CompatInternal19.onMetadataLoadSuccess((r9v0 'this' androidx.emoji2.text.EmojiCompat$CompatInternal19 A[IMMUTABLE_TYPE, THIS]), (r10v0 'metadataRepo' androidx.emoji2.text.MetadataRepo A[D('metadataRepo' androidx.emoji2.text.MetadataRepo), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0033 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_7 -> Node_9;
Node_13 -> Node_8;
}

