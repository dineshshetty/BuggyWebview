digraph "CFG forandroidx.emoji2.text.EmojiCompat.CompatInternal19.hasEmojiGlyph(Ljava\/lang\/CharSequence;I)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:androidx.emoji2.text.EmojiProcessor) = (r2 I:androidx.emoji2.text.EmojiCompat$CompatInternal19) androidx.emoji2.text.EmojiCompat.CompatInternal19.mProcessor androidx.emoji2.text.EmojiProcessor  (LINE:1671)\l0x0002: INVOKE  (r0 I:int) = \l  (r0 I:androidx.emoji2.text.EmojiProcessor)\l  (r3 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence)])\l  (r4 I:int A[D('metadataVersion' int)])\l type: VIRTUAL call: androidx.emoji2.text.EmojiProcessor.getEmojiMatch(java.lang.CharSequence, int):int A[MD:(java.lang.CharSequence, int):int (m)]\l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1672)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('emojiMatch' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000a \l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\lORIG_RETURN\l|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: RETURN  (r1 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000b: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{boolean androidx.emoji2.text.EmojiCompat.CompatInternal19.hasEmojiGlyph((r2 'this' I:androidx.emoji2.text.EmojiCompat$CompatInternal19 A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('sequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('metadataVersion' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0007 \-\> B:14:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x000b: r0 'emojiMatch' I\l  \-1 \-0x000b: r3 'sequence' Ljava\/lang\/CharSequence;\l  \-1 \-0x000b: r4 'metadataVersion' I\lMETHOD_OVERRIDE: [androidx.emoji2.text.EmojiCompat.CompatInternal.hasEmojiGlyph(java.lang.CharSequence, int):boolean]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
}

