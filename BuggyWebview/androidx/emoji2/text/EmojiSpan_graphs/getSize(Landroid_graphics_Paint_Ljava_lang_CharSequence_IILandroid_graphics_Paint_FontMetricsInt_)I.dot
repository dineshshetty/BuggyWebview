digraph "CFG forandroidx.emoji2.text.EmojiSpan.getSize(Landroid\/graphics\/Paint;Ljava\/lang\/CharSequence;IILandroid\/graphics\/Paint$FontMetricsInt;)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|r4.getFontMetricsInt(r3.mTmpFontMetrics)\lint r0 = java.lang.Math.abs(r3.mTmpFontMetrics.descent \- r3.mTmpFontMetrics.ascent)\lr3.mRatio = (((float) r0) * 1.0f) \/ ((float) r3.mMetadata.getHeight())\lr3.mHeight = (short) ((int) (((float) r3.mMetadata.getHeight()) * r3.mRatio))\lr3.mWidth = (short) ((int) (((float) r3.mMetadata.getWidth()) * r3.mRatio))\l}"];
Node_10 [shape=record,label="{10\:\ 0x003f|if (r8 == null) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|r8.ascent = r3.mTmpFontMetrics.ascent\lr8.descent = r3.mTmpFontMetrics.descent\lr8.top = r3.mTmpFontMetrics.top\lr8.bottom = r3.mTmpFontMetrics.bottom\l}"];
Node_12 [shape=record,label="{12\:\ 0x0059}"];
Node_13 [shape=record,label="{13\:\ 0x005b|RETURN\l|return r3.mWidth\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int androidx.emoji2.text.EmojiSpan.getSize((r3v0 'this' androidx.emoji2.text.EmojiSpan A[IMMUTABLE_TYPE, THIS]), (r4v0 'paint' android.graphics.Paint A[D('paint' android.graphics.Paint), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'text' java.lang.CharSequence A[D('text' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'end' int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'fm' android.graphics.Paint$FontMetricsInt A[D('fm' android.graphics.Paint$FontMetricsInt), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x003f \-\> B:12:0x0059\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.text.style.ReplacementSpan.getSize(android.graphics.Paint, java.lang.CharSequence, int, int, android.graphics.Paint$FontMetricsInt):int\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

