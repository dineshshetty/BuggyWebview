digraph "CFG forandroidx.emoji2.text.EmojiCompatInitializer.LoadEmojiCompatRunnable.run()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:2:0x0000, B:4:0x000b), top: B:10:0x0000 \}\lCatch: all \-\> 0x0017\l|androidx.core.p003os.TraceCompat.beginSection(\"EmojiCompat.EmojiCompatInitializer.run\")     \/\/ Catch: java.lang.Throwable \-\> L17\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (androidx.emoji2.text.EmojiCompat.isConfigured() == false) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:2:0x0000, B:4:0x000b), top: B:10:0x0000 \}\lCatch: all \-\> 0x0017\l|androidx.emoji2.text.EmojiCompat.get().load()     \/\/ Catch: java.lang.Throwable \-\> L17\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|DONT_GENERATE\l|androidx.core.p003os.TraceCompat.endSection()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|ExcHandler: all \-\> 0x0017\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|FINALLY_INSNS\l|androidx.core.p003os.TraceCompat.endSection()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|throw r0\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.EmojiCompatInitializer.LoadEmojiCompatRunnable.run((r1v0 'this' androidx.emoji2.text.EmojiCompatInitializer$LoadEmojiCompatRunnable A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:9:0x001b \-\> B:1:?, CROSS_EDGE: B:3:0x0009 \-\> B:5:0x0012, CROSS_EDGE: B:10:0x0000 \-\> B:7:0x0017\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:2:0x0000, B:4:0x000b), top: B:10:0x0000 \}\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{java.lang.Runnable.run():void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_10;
Node_10 -> Node_2;
Node_10 -> Node_7;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_4 -> Node_11;
Node_11 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

