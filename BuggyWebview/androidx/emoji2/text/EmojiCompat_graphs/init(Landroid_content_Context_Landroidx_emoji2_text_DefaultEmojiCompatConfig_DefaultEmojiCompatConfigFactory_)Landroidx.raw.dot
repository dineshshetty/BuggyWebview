digraph "CFG forandroidx.emoji2.text.EmojiCompat.init(Landroid\/content\/Context;Landroidx\/emoji2\/text\/DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;)Landroidx\/emoji2\/text\/EmojiCompat;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: SGET  (r0 I:boolean) =  androidx.emoji2.text.EmojiCompat.sHasDoneDefaultConfigLookup boolean  (LINE:509)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0007 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0004|0x0004: SGET  (r0 I:androidx.emoji2.text.EmojiCompat) =  androidx.emoji2.text.EmojiCompat.sInstance androidx.emoji2.text.EmojiCompat  (LINE:514)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:androidx.emoji2.text.EmojiCompat) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0007|0x0007: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('defaultFactory' androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000b  (LINE:517)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = \l  (r4 I:??[OBJECT, ARRAY] A[D('defaultFactory' androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory)])\l \l}"];
Node_33 [shape=record,label="{33\:\ 0x0011|0x0012: INVOKE  (r0 I:androidx.emoji2.text.EmojiCompat$Config A[D('factory' androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory)]) = \l  (r0 I:androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory A[D('factory' androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory)])\l  (r3 I:android.content.Context A[D('context' android.content.Context)])\l type: VIRTUAL call: androidx.emoji2.text.DefaultEmojiCompatConfig.DefaultEmojiCompatConfigFactory.create(android.content.Context):androidx.emoji2.text.EmojiCompat$Config A[MD:(android.content.Context):androidx.emoji2.text.EmojiCompat$Config (m)] (LINE:519)\l0x0016: SGET  (r1 I:java.lang.Object) =  androidx.emoji2.text.EmojiCompat.CONFIG_LOCK java.lang.Object  (LINE:521)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0018|0x0018: MONITOR_ENTER  (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0019|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0019|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0029, blocks: (B:35:0x0019, B:38:0x001f, B:39:0x0022, B:40:0x0025, B:41:0x0027), top: B:46:0x0019 \}\lCatch: all \-\> 0x0029\l|0x0019: SGET  (r2 I:boolean) =  androidx.emoji2.text.EmojiCompat.sHasDoneDefaultConfigLookup boolean A[Catch: all \-\> 0x0029, TRY_ENTER] (LINE:522)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001b|0x001b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0025 \l}"];
Node_37 [shape=record,label="{37\:\ 0x001d|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('config' androidx.emoji2.text.EmojiCompat$Config)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0022  (LINE:525)\l}"];
Node_38 [shape=record,label="{38\:\ 0x001f|TryCatch #0 \{all \-\> 0x0029, blocks: (B:35:0x0019, B:38:0x001f, B:39:0x0022, B:40:0x0025, B:41:0x0027), top: B:46:0x0019 \}\lCatch: all \-\> 0x0029\l|0x001f: INVOKE  (r0 I:androidx.emoji2.text.EmojiCompat$Config A[D('config' androidx.emoji2.text.EmojiCompat$Config)]) type: STATIC call: androidx.emoji2.text.EmojiCompat.init(androidx.emoji2.text.EmojiCompat$Config):androidx.emoji2.text.EmojiCompat A[Catch: all \-\> 0x0029, MD:(androidx.emoji2.text.EmojiCompat$Config):androidx.emoji2.text.EmojiCompat (m)] (LINE:526)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0022|TryCatch #0 \{all \-\> 0x0029, blocks: (B:35:0x0019, B:38:0x001f, B:39:0x0022, B:40:0x0025, B:41:0x0027), top: B:46:0x0019 \}\lCatch: all \-\> 0x0029\l|0x0022: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:529)\l0x0023: SPUT  (r2 I:boolean) androidx.emoji2.text.EmojiCompat.sHasDoneDefaultConfigLookup boolean A[Catch: all \-\> 0x0029]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|TryCatch #0 \{all \-\> 0x0029, blocks: (B:35:0x0019, B:38:0x001f, B:39:0x0022, B:40:0x0025, B:41:0x0027), top: B:46:0x0019 \}\lCatch: all \-\> 0x0029\l|0x0025: SGET  (r2 I:androidx.emoji2.text.EmojiCompat) =  androidx.emoji2.text.EmojiCompat.sInstance androidx.emoji2.text.EmojiCompat A[Catch: all \-\> 0x0029] (LINE:532)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0027|TryCatch #0 \{all \-\> 0x0029, blocks: (B:35:0x0019, B:38:0x001f, B:39:0x0022, B:40:0x0025, B:41:0x0027), top: B:46:0x0019 \}\lCatch: all \-\> 0x0029\l|0x0027: MONITOR_EXIT  (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0029]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0028|RETURN\l|0x0028: RETURN  (r2 I:androidx.emoji2.text.EmojiCompat) \l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_43 [shape=record,label="{43\:\ 0x0029|ExcHandler: all \-\> 0x0029\l|0x0029: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0029] (LINE:533)\l}"];
Node_44 [shape=record,label="{44\:\ 0x002a|TRY_LEAVE\lCatch: all \-\> 0x0029\l}"];
Node_45 [shape=record,label="{45\:\ 0x002b|0x002b: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory) =  androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory  (LINE:518)\l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  \l  (r0 I:androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory)\l  (r1 I:androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper)\l type: DIRECT call: androidx.emoji2.text.DefaultEmojiCompatConfig.DefaultEmojiCompatConfigFactory.\<init\>(androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper):void A[MD:(androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigHelper):void (m)]\l}"];
MethodNode[shape=record,label="{public static androidx.emoji2.text.EmojiCompat androidx.emoji2.text.EmojiCompat.init((r3 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory A[D('defaultFactory' androidx.emoji2.text.DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:42:0x0028 \-\> B:25:?, CROSS_EDGE: B:45:0x002b \-\> B:25:?, CROSS_EDGE: B:37:0x001d \-\> B:39:0x0022, CROSS_EDGE: B:36:0x001b \-\> B:40:0x0025, CROSS_EDGE: B:46:0x0019 \-\> B:43:0x0029, CROSS_EDGE: B:32:0x000b \-\> B:33:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0016: r0 'factory' Landroidx\/emoji2\/text\/DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;\l  0x0016\-0x002b: r0 'config' Landroidx\/emoji2\/text\/EmojiCompat$Config;\l  \-1 \-0x002b: r3 'context' Landroid\/content\/Context;\l  \-1 \-0x002b: r4 'defaultFactory' Landroidx\/emoji2\/text\/DefaultEmojiCompatConfig$DefaultEmojiCompatConfigFactory;\lTryCatch #0 \{all \-\> 0x0029, blocks: (B:35:0x0019, B:38:0x001f, B:39:0x0022, B:40:0x0025, B:41:0x0027), top: B:46:0x0019 \}\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_25;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_46;
Node_46 -> Node_35;
Node_46 -> Node_43;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_47;
Node_42 -> Node_25;
Node_47 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_25;
Node_32 -> Node_33;
}

