digraph "CFG forandroidx.emoji2.text.EmojiCompat.process(Ljava\/lang\/CharSequence;IIII)Ljava\/lang\/CharSequence;" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|androidx.core.util.Preconditions.checkState(isInitialized(), \"Not initialized yet\")\landroidx.core.util.Preconditions.checkArgumentNonnegative(r9, \"start cannot be negative\")\landroidx.core.util.Preconditions.checkArgumentNonnegative(r10, \"end cannot be negative\")\landroidx.core.util.Preconditions.checkArgumentNonnegative(r11, \"maxEmojiCount cannot be negative\")\lr0 = true\l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|if (r9 \> r10) goto L25\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|r2 = true\l}"];
Node_35 [shape=record,label="{35\:\ 0x001f|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v8 boolean) binds: [B:34:0x001e, B:33:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|androidx.core.util.Preconditions.checkArgument(r2, \"start should be \<= than end\")\l}"];
Node_36 [shape=record,label="{36\:\ 0x0024|if (r8 != null) goto L8\l}"];
Node_37 [shape=record,label="{37\:\ 0x0026|RETURN\l|return null\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0028}"];
Node_40 [shape=record,label="{40\:\ 0x002c|if (r9 \> r8.length()) goto L24\l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|r2 = true\l}"];
Node_43 [shape=record,label="{43\:\ 0x0031|PHI: r2 \l  PHI: (r2v4 boolean) = (r2v3 boolean), (r2v7 boolean) binds: [B:42:0x0030, B:41:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|androidx.core.util.Preconditions.checkArgument(r2, \"start should be \< than charSequence length\")\l}"];
Node_44 [shape=record,label="{44\:\ 0x003a|if (r10 \> r8.length()) goto L13\l}"];
Node_46 [shape=record,label="{46\:\ 0x003d|r0 = false\l}"];
Node_47 [shape=record,label="{47\:\ 0x003e|PHI: r0 \l  PHI: (r0v5 boolean) = (r0v4 boolean), (r0v11 boolean) binds: [B:44:0x003a, B:46:0x003d] A[DONT_GENERATE, DONT_INLINE]\l|androidx.core.util.Preconditions.checkArgument(r0, \"end should be \< than charSequence length\")\l}"];
Node_48 [shape=record,label="{48\:\ 0x0047|if (r8.length() == 0) goto L23\l}"];
Node_49 [shape=record,label="{49\:\ 0x0049|if (r9 != r10) goto L17\l}"];
Node_51 [shape=record,label="{51\:\ 0x004c|switch(r12) \{\l    case 1: goto L22;\l    case 2: goto L21;\l    default: goto L18;\l\}\l}"];
Node_52 [shape=record,label="{52\:\ 0x004f|boolean r0 = r7.mReplaceAll\l}"];
Node_55 [shape=record,label="{55\:\ 0x0056|PHI: r0 \l  PHI: (r0v9 'replaceAll' boolean) = (r0v7 'replaceAll' boolean), (r0v8 'replaceAll' boolean), (r0v10 'replaceAll' boolean) binds: [B:54:0x0054, B:53:0x0052, B:52:0x004f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_56 [shape=record,label="{56\:\ 0x0061|RETURN\l|return r7.mHelper.process(r8, r9, r10, r11, r0)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0052|r0 = false\l}"];
Node_54 [shape=record,label="{54\:\ 0x0054|r0 = true\l}"];
Node_57 [shape=record,label="{57\:\ 0x0062|RETURN\l|return r8\l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|r2 = false\l}"];
Node_34 [shape=record,label="{34\:\ 0x001e|r2 = false\l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence androidx.emoji2.text.EmojiCompat.process((r7v0 'this' androidx.emoji2.text.EmojiCompat A[IMMUTABLE_TYPE, THIS]), (r8v0 'charSequence' java.lang.CharSequence A[D('charSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'end' int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'maxEmojiCount' int A[D('maxEmojiCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'replaceStrategy' int A[D('replaceStrategy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:56:0x0061 \-\> B:30:?, CROSS_EDGE: B:53:0x0052 \-\> B:55:0x0056, CROSS_EDGE: B:54:0x0054 \-\> B:55:0x0056, CROSS_EDGE: B:57:0x0062 \-\> B:30:?, CROSS_EDGE: B:48:0x0047 \-\> B:57:0x0062, CROSS_EDGE: B:44:0x003a \-\> B:47:0x003e, CROSS_EDGE: B:42:0x0030 \-\> B:43:0x0031, CROSS_EDGE: B:34:0x001e \-\> B:35:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_30;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_46;
Node_44 -> Node_47[style=dashed];
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_57;
Node_49 -> Node_51;
Node_49 -> Node_57[style=dashed];
Node_51 -> Node_52;
Node_51 -> Node_53;
Node_51 -> Node_54;
Node_52 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_30;
Node_53 -> Node_55;
Node_54 -> Node_55;
Node_57 -> Node_30;
Node_42 -> Node_43;
Node_34 -> Node_35;
}

