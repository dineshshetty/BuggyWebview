digraph "CFG forandroidx.emoji2.text.EmojiCompat.handleDeleteSurroundingText(Landroid\/view\/inputmethod\/InputConnection;Landroid\/text\/Editable;IIZ)Z" {
subgraph cluster_Region_115548007 {
label = "R(1:(2:(1:4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_270093496 {
label = "R(2:(1:4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_133356771 {
label = "IF [B:11:0x0004] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \>= 19) goto L3\l}"];
subgraph cluster_Region_1867096558 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|return androidx.emoji2.text.EmojiProcessor.handleDeleteSurroundingText(r2, r3, r4, r5, r6)\l}"];
}
}
subgraph cluster_Region_1909424967 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000b|RETURN\l|return false\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0006}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static boolean androidx.emoji2.text.EmojiCompat.handleDeleteSurroundingText((r2v0 'inputConnection' android.view.inputmethod.InputConnection A[D('inputConnection' android.view.inputmethod.InputConnection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'editable' android.text.Editable A[D('editable' android.text.Editable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'beforeLength' int A[D('beforeLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'afterLength' int A[D('afterLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'inCodePoints' boolean A[D('inCodePoints' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000c \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_14 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

