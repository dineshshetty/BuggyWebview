digraph "CFG forandroidx.emoji2.text.EmojiCompat.registerInitCallback(Landroidx\/emoji2\/text\/EmojiCompat$InitCallback;)V" {
subgraph cluster_Region_445574018 {
label = "R(2:1|(2:(1:8)|12))";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|androidx.core.util.Preconditions.checkNotNull(r4, \"initCallback cannot be null\")\lr3.mInitLock.writeLock().lock()\l}"];
subgraph cluster_TryCatchRegion_142250925 {
label = "Try: R(2:(1:8)|12) finally: R(3:13|14|15)";
node [shape=record,color=blue];
subgraph cluster_Region_1026303046 {
label = "R(2:(1:8)|12)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1796825292 {
label = "IF [B:20:0x0011, B:22:0x0016] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0011|if (r3.mLoadState != 1) goto L5\l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|ADDED_TO_REGION\l|if (r3.mLoadState != 2) goto L8\l}"];
subgraph cluster_Region_103175382 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0019|TryCatch #0 \{all \-\> 0x0036, blocks: (B:19:0x000e, B:21:0x0013, B:24:0x0019, B:25:0x001f), top: B:31:0x000e \}\lCatch: all \-\> 0x0036\l|r3.mInitCallbacks.add(r4)     \/\/ Catch: java.lang.Throwable \-\> L36\l}"];
}
}
Node_25 [shape=record,label="{25\:\ 0x001f|TRY_LEAVE\lADDED_TO_REGION\lTryCatch #0 \{all \-\> 0x0036, blocks: (B:19:0x000e, B:21:0x0013, B:24:0x0019, B:25:0x001f), top: B:31:0x000e \}\lCatch: all \-\> 0x0036\l|r3.mMainHandler.post(new androidx.emoji2.text.EmojiCompat.ListenerDispatcher(r4, r3.mLoadState))     \/\/ Catch: java.lang.Throwable \-\> L36\l}"];
}
subgraph cluster_Region_1520257092 {
label = "R(3:13|14|15) | ExcHandler: all \-\> 0x0036\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0036|ExcHandler: all \-\> 0x0036\l}"];
Node_29 [shape=record,label="{29\:\ 0x0037|FINALLY_INSNS\l|r3.mInitLock.writeLock().unlock()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0040|throw r0\l}"];
}
}
}
subgraph cluster_Region_1520257092 {
label = "R(3:13|14|15) | ExcHandler: all \-\> 0x0036\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0036|ExcHandler: all \-\> 0x0036\l}"];
Node_29 [shape=record,label="{29\:\ 0x0037|FINALLY_INSNS\l|r3.mInitLock.writeLock().unlock()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0040|throw r0\l}"];
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x000e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000e|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0036, blocks: (B:19:0x000e, B:21:0x0013, B:24:0x0019, B:25:0x001f), top: B:31:0x000e \}\lCatch: all \-\> 0x0036\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0013|TryCatch #0 \{all \-\> 0x0036, blocks: (B:19:0x000e, B:21:0x0013, B:24:0x0019, B:25:0x001f), top: B:31:0x000e \}\lCatch: all \-\> 0x0036\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0018|ADDED_TO_REGION\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x002b|DONT_GENERATE\l|java.util.concurrent.locks.ReadWriteLock r0 = r3.mInitLock\ljava.util.concurrent.locks.Lock r0 = r0.writeLock()\lr0.unlock()\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0035}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.emoji2.text.EmojiCompat.registerInitCallback((r3v0 'this' androidx.emoji2.text.EmojiCompat A[IMMUTABLE_TYPE, THIS]), (r4v0 'initCallback' androidx.emoji2.text.EmojiCompat$InitCallback A[D('initCallback' androidx.emoji2.text.EmojiCompat$InitCallback), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0019 \-\> B:26:0x002b, CROSS_EDGE: B:20:0x0011 \-\> B:25:0x001f, CROSS_EDGE: B:30:0x0040 \-\> B:17:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0036, blocks: (B:19:0x000e, B:21:0x0013, B:24:0x0019, B:25:0x001f), top: B:31:0x000e \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_18 -> Node_31;
Node_20 -> Node_21;
Node_20 -> Node_25[style=dashed];
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_17;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_17;
Node_16 -> Node_18;
Node_31 -> Node_19;
Node_31 -> Node_28;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_23 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_17;
}

