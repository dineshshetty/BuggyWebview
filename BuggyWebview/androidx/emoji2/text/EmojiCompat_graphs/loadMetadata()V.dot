digraph "CFG forandroidx.emoji2.text.EmojiCompat.loadMetadata()V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|r2.mInitLock.writeLock().lock()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0026, blocks: (B:19:0x0009, B:21:0x000d), top: B:29:0x0009 \}\lCatch: all \-\> 0x0026\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|if (r2.mMetadataLoadStrategy != 0) goto L7\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0026, blocks: (B:19:0x0009, B:21:0x000d), top: B:29:0x0009 \}\lCatch: all \-\> 0x0026\l|r2.mLoadState = 0     \/\/ Catch: java.lang.Throwable \-\> L26\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|r2.mInitLock.writeLock().unlock()\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|if (getLoadState() != 0) goto L12\l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|r2.mHelper.loadMetadata()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|RETURN\lORIG_RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ 0x0026|ExcHandler: all \-\> 0x0026\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|r2.mInitLock.writeLock().unlock()\l}"];
Node_28 [shape=record,label="{28\:\ 0x0030|throw r0\l}"];
MethodNode[shape=record,label="{private void androidx.emoji2.text.EmojiCompat.loadMetadata((r2v0 'this' androidx.emoji2.text.EmojiCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001e \-\> B:25:0x0025, CROSS_EDGE: B:28:0x0030 \-\> B:17:?, CROSS_EDGE: B:20:0x000b \-\> B:22:0x0010, CROSS_EDGE: B:29:0x0009 \-\> B:26:0x0026\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0026, blocks: (B:19:0x0009, B:21:0x000d), top: B:29:0x0009 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_29;
Node_29 -> Node_19;
Node_29 -> Node_26;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_21 -> Node_30;
Node_30 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_17;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_17;
}

