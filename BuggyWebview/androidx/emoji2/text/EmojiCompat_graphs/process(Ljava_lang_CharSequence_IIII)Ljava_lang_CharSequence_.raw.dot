digraph "CFG forandroidx.emoji2.text.EmojiCompat.process(Ljava\/lang\/CharSequence;IIII)Ljava\/lang\/CharSequence;" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r7 I:androidx.emoji2.text.EmojiCompat) type: DIRECT call: androidx.emoji2.text.EmojiCompat.isInitialized():boolean A[MD:():boolean (m)] (LINE:1071)\l0x0004: CONST_STR  (r1 I:java.lang.String) =  \"Not initialized yet\" \l0x0006: INVOKE  (r0 I:boolean), (r1 I:java.lang.String) type: STATIC call: androidx.core.util.Preconditions.checkState(boolean, java.lang.String):void A[MD:(boolean, java.lang.String):void (m)]\l0x0009: CONST_STR  (r0 I:java.lang.String) =  \"start cannot be negative\"  (LINE:1072)\l0x000b: INVOKE  (r9 I:int A[D('start' int)]), (r0 I:java.lang.String) type: STATIC call: androidx.core.util.Preconditions.checkArgumentNonnegative(int, java.lang.String):int A[MD:(int, java.lang.String):int (m)]\l0x000e: CONST_STR  (r0 I:java.lang.String) =  \"end cannot be negative\"  (LINE:1073)\l0x0010: INVOKE  (r10 I:int A[D('end' int)]), (r0 I:java.lang.String) type: STATIC call: androidx.core.util.Preconditions.checkArgumentNonnegative(int, java.lang.String):int A[MD:(int, java.lang.String):int (m)]\l0x0013: CONST_STR  (r0 I:java.lang.String) =  \"maxEmojiCount cannot be negative\"  (LINE:1074)\l0x0015: INVOKE  (r11 I:int A[D('maxEmojiCount' int)]), (r0 I:java.lang.String) type: STATIC call: androidx.core.util.Preconditions.checkArgumentNonnegative(int, java.lang.String):int A[MD:(int, java.lang.String):int (m)]\l0x0018: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1075)\l0x0019: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: IF  (r9 I:??[int, byte, short, char] A[D('start' int)]) \> (r10 I:??[int, byte, short, char] A[D('end' int)])  \-\> B:34:0x001e \l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001f|0x001f: CONST_STR  (r3 I:java.lang.String) =  \"start should be \<= than end\" \l0x0021: INVOKE  (r2 I:boolean), (r3 I:java.lang.Object) type: STATIC call: androidx.core.util.Preconditions.checkArgument(boolean, java.lang.Object):void A[MD:(boolean, java.lang.Object):void (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0024|0x0024: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('charSequence' java.lang.CharSequence)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0028  (LINE:1078)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0026|RETURN\l|0x0026: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1079)\l0x0027: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0028|0x0028: INVOKE  (r2 I:int) = (r8 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1082)\l}"];
Node_40 [shape=record,label="{40\:\ 0x002c|0x002c: IF  (r9 I:??[int, byte, short, char] A[D('start' int)]) \> (r2 I:??[int, byte, short, char])  \-\> B:42:0x0030 \l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|0x002e: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0031|0x0031: CONST_STR  (r3 I:java.lang.String) =  \"start should be \< than charSequence length\" \l0x0033: INVOKE  (r2 I:boolean), (r3 I:java.lang.Object) type: STATIC call: androidx.core.util.Preconditions.checkArgument(boolean, java.lang.Object):void A[MD:(boolean, java.lang.Object):void (m)]\l0x0036: INVOKE  (r2 I:int) = (r8 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1084)\l}"];
Node_44 [shape=record,label="{44\:\ 0x003a|0x003a: IF  (r10 I:??[int, byte, short, char] A[D('end' int)]) \> (r2 I:??[int, byte, short, char])  \-\> B:46:0x003d \l}"];
Node_46 [shape=record,label="{46\:\ 0x003d|0x003d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x003e|0x003e: CONST_STR  (r1 I:java.lang.String) =  \"end should be \< than charSequence length\" \l0x0040: INVOKE  (r0 I:boolean), (r1 I:java.lang.Object) type: STATIC call: androidx.core.util.Preconditions.checkArgument(boolean, java.lang.Object):void A[MD:(boolean, java.lang.Object):void (m)]\l0x0043: INVOKE  (r0 I:int) = (r8 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1088)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0047|0x0047: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0062 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0049|0x0049: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)]) != (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('end' int)])  \-\> B:51:0x004c \l}"];
Node_51 [shape=record,label="{51\:\ 0x004c|0x004c: SWITCH  (r12 I:?? A[D('replaceStrategy' int)])\l case 1: goto B:54:0x0054\l case 2: goto B:53:0x0052\l default: goto B:52:0x004f  (LINE:1093)\l}"];
Node_52 [shape=record,label="{52\:\ 0x004f|0x004f: IGET  (r0 I:boolean) = (r7 I:androidx.emoji2.text.EmojiCompat) androidx.emoji2.text.EmojiCompat.mReplaceAll boolean  (LINE:1102)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0056|0x0056: IGET  (r1 I:androidx.emoji2.text.EmojiCompat$CompatInternal) = (r7 I:androidx.emoji2.text.EmojiCompat) androidx.emoji2.text.EmojiCompat.mHelper androidx.emoji2.text.EmojiCompat$CompatInternal  (LINE:1106)\l0x0058: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('charSequence' java.lang.CharSequence)]) \l0x0059: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l0x005a: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('end' int)]) \l0x005b: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxEmojiCount' int)]) \l0x005c: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('replaceAll' boolean)]) \l0x005d: INVOKE  (r1 I:java.lang.CharSequence) = \l  (r1 I:androidx.emoji2.text.EmojiCompat$CompatInternal)\l  (r2 I:java.lang.CharSequence)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:boolean)\l type: VIRTUAL call: androidx.emoji2.text.EmojiCompat.CompatInternal.process(java.lang.CharSequence, int, int, int, boolean):java.lang.CharSequence A[MD:(java.lang.CharSequence, int, int, int, boolean):java.lang.CharSequence (m)]\l}"];
Node_56 [shape=record,label="{56\:\ 0x0061|RETURN\l|0x0061: RETURN  (r1 I:java.lang.CharSequence) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0052|0x0052: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('replaceAll' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1098)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0054|0x0054: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('replaceAll' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1095)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0062|RETURN\l|0x0062: RETURN  (r8 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)])  (LINE:1089)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|0x0030: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x001e|0x001e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence androidx.emoji2.text.EmojiCompat.process((r7 'this' I:androidx.emoji2.text.EmojiCompat A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('maxEmojiCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('replaceStrategy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:56:0x0061 \-\> B:30:?, CROSS_EDGE: B:53:0x0052 \-\> B:55:0x0056, CROSS_EDGE: B:54:0x0054 \-\> B:55:0x0056, CROSS_EDGE: B:57:0x0062 \-\> B:30:?, CROSS_EDGE: B:48:0x0047 \-\> B:57:0x0062, CROSS_EDGE: B:44:0x003a \-\> B:47:0x003e, CROSS_EDGE: B:42:0x0030 \-\> B:43:0x0031, CROSS_EDGE: B:34:0x001e \-\> B:35:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0051\-0x0052: r0 'replaceAll' Z\l  0x0053\-0x0054: r0 'replaceAll' Z\l  0x0055\-0x0062: r0 'replaceAll' Z\l  \-1 \-0x006b: r8 'charSequence' Ljava\/lang\/CharSequence;\l  \-1 \-0x006b: r9 'start' I\l  \-1 \-0x006b: r10 'end' I\l  \-1 \-0x006b: r11 'maxEmojiCount' I\l  \-1 \-0x006b: r12 'replaceStrategy' I\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_30;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_46;
Node_44 -> Node_47[style=dashed];
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_57;
Node_49 -> Node_51;
Node_49 -> Node_57[style=dashed];
Node_51 -> Node_52;
Node_51 -> Node_53;
Node_51 -> Node_54;
Node_52 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_30;
Node_53 -> Node_55;
Node_54 -> Node_55;
Node_57 -> Node_30;
Node_42 -> Node_43;
Node_34 -> Node_35;
}

