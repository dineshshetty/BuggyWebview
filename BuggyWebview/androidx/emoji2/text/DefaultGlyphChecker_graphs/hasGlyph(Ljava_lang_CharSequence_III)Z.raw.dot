digraph "CFG forandroidx.emoji2.text.DefaultGlyphChecker.hasGlyph(Ljava\/lang\/CharSequence;III)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:68)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (23 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:7:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r7 I:??[int, byte, short, char] A[D('sdkAdded' int)]) \<= (r0 I:??[int, byte, short, char])  \-\> B:7:0x000c \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|RETURN\l|0x000b: RETURN  (r1 I:boolean)  (LINE:69)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: INVOKE  (r0 I:java.lang.StringBuilder) =  type: STATIC call: androidx.emoji2.text.DefaultGlyphChecker.getStringBuilder():java.lang.StringBuilder A[MD:():java.lang.StringBuilder (m)] (LINE:72)\l0x0010: INVOKE  (r0 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)]), (r1 I:int) type: VIRTUAL call: java.lang.StringBuilder.setLength(int):void A[MD:(int):void (c)] (LINE:73)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|LOOP_START\lLOOP:0: B:8:0x0013\-\>B:9:0x0015\l|0x0013: IF  (r5 I:??[int, byte, short, char] A[D('start' int)]) \>= (r6 I:??[int, byte, short, char] A[D('end' int)])  \-\> B:12:0x001f  (LINE:75)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|LOOP_END\lLOOP:0: B:8:0x0013\-\>B:9:0x0015\l|0x0015: INVOKE  (r1 I:char) = (r4 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence)]), (r5 I:int A[D('start' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:76)\l0x0019: INVOKE  (r0 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)]), (r1 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x001c: ARITH  (r5 I:int) = (r5 I:int A[D('start' int)]) + (1 int)  (LINE:77)\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IGET  (r1 I:android.text.TextPaint) = (r3 I:androidx.emoji2.text.DefaultGlyphChecker) androidx.emoji2.text.DefaultGlyphChecker.mTextPaint android.text.TextPaint  (LINE:80)\l0x0021: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)]) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0025: INVOKE  (r1 I:boolean) = (r1 I:android.graphics.Paint), (r2 I:java.lang.String) type: STATIC call: androidx.core.graphics.PaintCompat.hasGlyph(android.graphics.Paint, java.lang.String):boolean A[MD:(android.graphics.Paint, java.lang.String):boolean (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0029|RETURN\l|0x0029: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.emoji2.text.DefaultGlyphChecker.hasGlyph((r3 'this' I:androidx.emoji2.text.DefaultGlyphChecker A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.CharSequence A[D('charSequence' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('sdkAdded' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0015 \-\> B:8:0x0013, CROSS_EDGE: B:11:0x0029 \-\> B:1:?, CROSS_EDGE: B:3:0x0005 \-\> B:7:0x000c\lDebug Info:\l  0x0010\-0x0029: r0 'builder' Ljava\/lang\/StringBuilder;\l  \-1 \-0x0029: r4 'charSequence' Ljava\/lang\/CharSequence;\l  \-1 \-0x0029: r5 'start' I\l  \-1 \-0x0029: r6 'end' I\l  \-1 \-0x0029: r7 'sdkAdded' I\lMETHOD_OVERRIDE: [androidx.emoji2.text.EmojiCompat.GlyphChecker.hasGlyph(java.lang.CharSequence, int, int, int):boolean]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_8;
Node_12 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

