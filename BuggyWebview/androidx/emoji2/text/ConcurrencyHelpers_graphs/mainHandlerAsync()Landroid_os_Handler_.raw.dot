digraph "CFG forandroidx.emoji2.text.ConcurrencyHelpers.mainHandlerAsync()Landroid\/os\/Handler;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:77)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (28 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:14:0x000f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r0 I:android.os.Looper) =  type: STATIC call: android.os.Looper.getMainLooper():android.os.Looper A[MD:():android.os.Looper (c)] (LINE:78)\l0x000a: INVOKE  (r0 I:android.os.Handler) = (r0 I:android.os.Looper) type: STATIC call: androidx.emoji2.text.ConcurrencyHelpers.Handler28Impl.createAsync(android.os.Looper):android.os.Handler A[MD:(android.os.Looper):android.os.Handler (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:android.os.Handler) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:android.os.Handler) =  android.os.Handler  (LINE:80)\l0x0011: INVOKE  (r1 I:android.os.Looper) =  type: STATIC call: android.os.Looper.getMainLooper():android.os.Looper A[MD:():android.os.Looper (c)]\l0x0015: INVOKE  (r0 I:android.os.Handler), (r1 I:android.os.Looper) type: DIRECT call: android.os.Handler.\<init\>(android.os.Looper):void A[MD:(android.os.Looper):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:android.os.Handler) \l}"];
MethodNode[shape=record,label="{public static android.os.Handler androidx.emoji2.text.ConcurrencyHelpers.mainHandlerAsync()  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0018 \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

