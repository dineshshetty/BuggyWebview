digraph "CFG forandroidx.emoji2.viewsintegration.EmojiEditableFactory.newEditable(Ljava\/lang\/CharSequence;)Landroid\/text\/Editable;" {
subgraph cluster_Region_1145862088 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|java.lang.Class\<?\> java.lang.Class\<?\> r0 = androidx.emoji2.viewsintegration.EmojiEditableFactory.sWatcherClass\l}"];
subgraph cluster_Region_1788107952 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_405043604 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1470253143 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|return androidx.emoji2.text.SpannableBuilder.create(r0, r2)\l}"];
}
}
subgraph cluster_Region_1581587978 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|return super.newEditable(r2)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0009}"];
MethodNode[shape=record,label="{public android.text.Editable androidx.emoji2.viewsintegration.EmojiEditableFactory.newEditable((r1v0 'this' androidx.emoji2.viewsintegration.EmojiEditableFactory A[IMMUTABLE_TYPE, THIS]), (r2v0 'source' java.lang.CharSequence A[D('source' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x000d \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.text.Editable.Factory.newEditable(java.lang.CharSequence):android.text.Editable\}]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

