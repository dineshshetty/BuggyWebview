digraph "CFG forandroidx.recyclerview.widget.GapWorker.1.compare(Landroidx\/recyclerview\/widget\/GapWorker$Task;Landroidx\/recyclerview\/widget\/GapWorker$Task;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r6.view != null) goto L28\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|r0 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v8 boolean) binds: [B:5:0x0008, B:4:0x0006] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|if (r7.view != null) goto L27\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|r3 = true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|PHI: r3 \l  PHI: (r3v2 boolean) = (r3v1 boolean), (r3v5 boolean) binds: [B:9:0x000f, B:8:0x000d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|if (r0 == r3) goto L14\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013}"];
Node_13 [shape=record,label="{13\:\ 0x0015|if (r6.view != null) goto L11\l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|RETURN\lORIG_RETURN\l|return \-1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_17 [shape=record,label="{17\:\ 0x001a}"];
Node_18 [shape=record,label="{18\:\ 0x001e|if (r6.immediate == r7.immediate) goto L20\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020}"];
Node_20 [shape=record,label="{20\:\ 0x0022|if (r6.immediate == false) goto L19\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|RETURN\lORIG_RETURN\l|return \-1\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|int r0 = r7.viewVelocity \- r6.viewVelocity\l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|if (r0 == 0) goto L23\l}"];
Node_25 [shape=record,label="{25\:\ 0x002d|RETURN\l|return r0\l}"];
Node_26 [shape=record,label="{26\:\ 0x002e|int r2 = r6.distanceToItem \- r7.distanceToItem\l}"];
Node_27 [shape=record,label="{27\:\ 0x0033|if (r2 == 0) goto L26\l}"];
Node_28 [shape=record,label="{28\:\ 0x0035|RETURN\l|return r2\l}"];
Node_29 [shape=record,label="{29\:\ 0x0036|RETURN\l|return 0\l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|r3 = false\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|r0 = false\l}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.GapWorker.1.compare((r5v0 'this' androidx.recyclerview.widget.GapWorker$1 A[IMMUTABLE_TYPE, THIS]), (r6v0 'lhs' androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'rhs' androidx.recyclerview.widget.GapWorker$Task A[D('rhs' androidx.recyclerview.widget.GapWorker$Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:16:0x0019, CROSS_EDGE: B:22:0x0025 \-\> B:1:?, CROSS_EDGE: B:20:0x0022 \-\> B:22:0x0025, CROSS_EDGE: B:25:0x002d \-\> B:1:?, CROSS_EDGE: B:28:0x0035 \-\> B:1:?, CROSS_EDGE: B:29:0x0036 \-\> B:1:?, CROSS_EDGE: B:9:0x000f \-\> B:10:0x0010, CROSS_EDGE: B:5:0x0008 \-\> B:6:0x0009\lINLINE_NOT_NEEDED\lBRIDGED_BY: androidx.recyclerview.widget.GapWorker.1.compare(androidx.recyclerview.widget.GapWorker$Task, androidx.recyclerview.widget.GapWorker$Task):int\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_30[style=dashed];
Node_15 -> Node_1;
Node_30 -> Node_1;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_1;
Node_31 -> Node_1;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_1;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_1;
Node_29 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

