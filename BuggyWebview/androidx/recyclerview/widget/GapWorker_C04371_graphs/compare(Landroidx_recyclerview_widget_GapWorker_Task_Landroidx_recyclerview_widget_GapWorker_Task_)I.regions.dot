digraph "CFG forandroidx.recyclerview.widget.GapWorker.1.compare(Landroidx\/recyclerview\/widget\/GapWorker$Task;Landroidx\/recyclerview\/widget\/GapWorker$Task;)I" {
subgraph cluster_Region_260159484 {
label = "R(1:(1:10)(1:(1:17)(2:20|(2:(1:22)|(2:23|(2:(1:25)|(1:26)))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_551650004 {
label = "IF [B:11:0x0011] THEN: R(1:10) ELSE: R(1:(1:17)(2:20|(2:(1:22)|(2:23|(2:(1:25)|(1:26))))))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0011|if ((r6.view == null) != (r7.view == null)) goto L9\l}"];
subgraph cluster_Region_1414749836 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|return r6.view == null ? 1 : \-1\l}"];
}
subgraph cluster_Region_850996216 {
label = "R(1:(1:17)(2:20|(2:(1:22)|(2:23|(2:(1:25)|(1:26)))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_814040068 {
label = "IF [B:18:0x001e] THEN: R(1:17) ELSE: R(2:20|(2:(1:22)|(2:23|(2:(1:25)|(1:26))))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x001e|if (r6.immediate != r7.immediate) goto L16\l}"];
subgraph cluster_Region_475961314 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0022|RETURN\l|return r6.immediate ? \-1 : 1\l}"];
}
subgraph cluster_Region_1132090590 {
label = "R(2:20|(2:(1:22)|(2:23|(2:(1:25)|(1:26)))))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0026|int int r0 = r7.viewVelocity \- r6.viewVelocity\l}"];
subgraph cluster_Region_1387728347 {
label = "R(2:(1:22)|(2:23|(2:(1:25)|(1:26))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2058918733 {
label = "IF [B:24:0x002b] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x002b|if (r0 != 0) goto L22\l}"];
subgraph cluster_Region_1670391869 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x002d|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1279853778 {
label = "R(2:23|(2:(1:25)|(1:26)))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x002e|int int r2 = r6.distanceToItem \- r7.distanceToItem\l}"];
subgraph cluster_Region_699009694 {
label = "R(2:(1:25)|(1:26))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1568961825 {
label = "IF [B:27:0x0033] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0033|if (r2 != 0) goto L25\l}"];
subgraph cluster_Region_1675161391 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0035|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_857071307 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0036|RETURN\l|return 0\l}"];
}
}
}
}
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0004}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0006}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0009|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000b}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000d}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0010|PHI: r3 \l  PHI: (r3v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0013}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0018|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,color=red,label="{30\:\ ?|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x001a}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0020}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0024|ORIG_RETURN\l}"];
Node_31 [shape=record,color=red,label="{31\:\ ?|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000f}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0008}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.GapWorker.1.compare((r5v0 'this' androidx.recyclerview.widget.GapWorker$1 A[IMMUTABLE_TYPE, THIS]), (r6v0 'lhs' androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'rhs' androidx.recyclerview.widget.GapWorker$Task A[D('rhs' androidx.recyclerview.widget.GapWorker$Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:16:0x0019, CROSS_EDGE: B:22:0x0025 \-\> B:1:?, CROSS_EDGE: B:20:0x0022 \-\> B:22:0x0025, CROSS_EDGE: B:25:0x002d \-\> B:1:?, CROSS_EDGE: B:28:0x0035 \-\> B:1:?, CROSS_EDGE: B:29:0x0036 \-\> B:1:?, CROSS_EDGE: B:9:0x000f \-\> B:10:0x0010, CROSS_EDGE: B:5:0x0008 \-\> B:6:0x0009\lINLINE_NOT_NEEDED\lRENAME_REASON:avoid collision after fix types in other method\lREPLACED_BY: androidx.recyclerview.widget.GapWorker.1.compare(androidx.recyclerview.widget.GapWorker$Task, androidx.recyclerview.widget.GapWorker$Task):int\lBRIDGED_BY: androidx.recyclerview.widget.GapWorker.1.compare(androidx.recyclerview.widget.GapWorker$Task, androidx.recyclerview.widget.GapWorker$Task):int\lJadxCommentsAttr\{\l DEBUG: \l \-\> Method merged with bridge method\}\lMETHOD_OVERRIDE: [ClspMth\{java.util.Comparator.compare(T, T):int\}]\l}"];
MethodNode -> Node_0;Node_11 -> Node_12;
Node_11 -> Node_17[style=dashed];
Node_13 -> Node_15;
Node_13 -> Node_30;
Node_18 -> Node_19;
Node_18 -> Node_23[style=dashed];
Node_20 -> Node_21;
Node_20 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_26[style=dashed];
Node_25 -> Node_1;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_29[style=dashed];
Node_28 -> Node_1;
Node_29 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_15 -> Node_1;
Node_30 -> Node_1;
Node_17 -> Node_18;
Node_19 -> Node_20;
Node_21 -> Node_1;
Node_31 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

