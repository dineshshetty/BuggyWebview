digraph "CFG forandroidx.recyclerview.widget.GapWorker.1.compare(Landroidx\/recyclerview\/widget\/GapWorker$Task;Landroidx\/recyclerview\/widget\/GapWorker$Task;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.recyclerview.widget.RecyclerView) = (r6 I:androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.view androidx.recyclerview.widget.RecyclerView  (LINE:194)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IGET  (r3 I:androidx.recyclerview.widget.RecyclerView) = (r7 I:androidx.recyclerview.widget.GapWorker$Task A[D('rhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.view androidx.recyclerview.widget.RecyclerView \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|0x000b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x000f \l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|0x0010: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x001a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0013: IGET  (r0 I:androidx.recyclerview.widget.RecyclerView) = (r6 I:androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.view androidx.recyclerview.widget.RecyclerView  (LINE:195)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0018 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|RETURN\lORIG_RETURN\l|0x0018: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0019: RETURN  (r2 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x0019: RETURN  (r2 I:int) A[SYNTHETIC]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001a|0x001a: IGET  (r0 I:boolean) = (r6 I:androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.immediate boolean  (LINE:199)\l0x001c: IGET  (r3 I:boolean) = (r7 I:androidx.recyclerview.widget.GapWorker$Task A[D('rhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.immediate boolean \l}"];
Node_18 [shape=record,label="{18\:\ 0x001e|0x001e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0026 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|0x0020: IGET  (r0 I:boolean) = (r6 I:androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.immediate boolean  (LINE:200)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:? \l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0025: RETURN  (r2 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN  (r2 I:int) A[SYNTHETIC]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|0x0026: IGET  (r0 I:int) = (r7 I:androidx.recyclerview.widget.GapWorker$Task A[D('rhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.viewVelocity int  (LINE:204)\l0x0028: IGET  (r2 I:int) = (r6 I:androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.viewVelocity int \l0x002a: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('deltaViewVelocity' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x002e  (LINE:205)\l}"];
Node_25 [shape=record,label="{25\:\ 0x002d|RETURN\l|0x002d: RETURN  (r0 I:int A[D('deltaViewVelocity' int)]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x002e|0x002e: IGET  (r2 I:int) = (r6 I:androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.distanceToItem int  (LINE:208)\l0x0030: IGET  (r3 I:int) = (r7 I:androidx.recyclerview.widget.GapWorker$Task A[D('rhs' androidx.recyclerview.widget.GapWorker$Task)]) androidx.recyclerview.widget.GapWorker.Task.distanceToItem int \l0x0032: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0033|0x0033: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('deltaDistanceToItem' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0036  (LINE:209)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0035|RETURN\l|0x0035: RETURN  (r2 I:int A[D('deltaDistanceToItem' int)]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:int)  (LINE:211)\l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|0x000f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.GapWorker.1.compare((r5 'this' I:androidx.recyclerview.widget.GapWorker$1 A[IMMUTABLE_TYPE, THIS]), (r6 I:androidx.recyclerview.widget.GapWorker$Task A[D('lhs' androidx.recyclerview.widget.GapWorker$Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:androidx.recyclerview.widget.GapWorker$Task A[D('rhs' androidx.recyclerview.widget.GapWorker$Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:16:0x0019, CROSS_EDGE: B:22:0x0025 \-\> B:1:?, CROSS_EDGE: B:20:0x0022 \-\> B:22:0x0025, CROSS_EDGE: B:25:0x002d \-\> B:1:?, CROSS_EDGE: B:28:0x0035 \-\> B:1:?, CROSS_EDGE: B:29:0x0036 \-\> B:1:?, CROSS_EDGE: B:9:0x000f \-\> B:10:0x0010, CROSS_EDGE: B:5:0x0008 \-\> B:6:0x0009\lDebug Info:\l  0x002b\-0x0036: r0 'deltaViewVelocity' I\l  0x0033\-0x0036: r2 'deltaDistanceToItem' I\l  \-1 \-0x0036: r6 'lhs' Landroidx\/recyclerview\/widget\/GapWorker$Task;\l  \-1 \-0x0036: r7 'rhs' Landroidx\/recyclerview\/widget\/GapWorker$Task;\lBRIDGED_BY: androidx.recyclerview.widget.GapWorker.1.compare(androidx.recyclerview.widget.GapWorker$Task, androidx.recyclerview.widget.GapWorker$Task):int\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_30[style=dashed];
Node_15 -> Node_1;
Node_30 -> Node_1;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_1;
Node_31 -> Node_1;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_1;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_1;
Node_29 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

