digraph "CFG forandroidx.recyclerview.widget.SortedList.BatchedCallback.areContentsTheSame(Ljava\/lang\/Object;Ljava\/lang\/Object;)Z" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:androidx.recyclerview.widget.SortedList$Callback\<T2\>) = \l  (r1 I:androidx.recyclerview.widget.SortedList$BatchedCallback A[D('this' androidx.recyclerview.widget.SortedList$BatchedCallback\<T2\>)])\l androidx.recyclerview.widget.SortedList.BatchedCallback.mWrappedCallback androidx.recyclerview.widget.SortedList$Callback  (LINE:988)\l0x0002: INVOKE  (r0 I:boolean) = \l  (r0 I:androidx.recyclerview.widget.SortedList$Callback)\l  (r2 I:java.lang.Object A[D('oldItem' T2)])\l  (r3 I:java.lang.Object A[D('newItem' T2)])\l type: VIRTUAL call: androidx.recyclerview.widget.SortedList.Callback.areContentsTheSame(java.lang.Object, java.lang.Object):boolean A[MD:(T2, T2):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean androidx.recyclerview.widget.SortedList.BatchedCallback.areContentsTheSame((r1 'this' I:androidx.recyclerview.widget.SortedList$BatchedCallback\<T2\> A[D('this' androidx.recyclerview.widget.SortedList$BatchedCallback\<T2\>), IMMUTABLE_TYPE, THIS]), (r2 I:T2 A[D('oldItem' T2), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:T2 A[D('newItem' T2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x0006: r1 'this' Landroidx\/recyclerview\/widget\/SortedList$BatchedCallback;, signature: Landroidx\/recyclerview\/widget\/SortedList$BatchedCallback\<TT2;\>;\l  0x0000\-0x0006: r2 'oldItem' Ljava\/lang\/Object;, signature: TT2;\l  0x0000\-0x0006: r3 'newItem' Ljava\/lang\/Object;, signature: TT2;\lTYPE_VARS: [T, T2]\lSIGNATURE: (TT2;TT2;)Z\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.SortedList.Callback.areContentsTheSame(T2, T2):boolean]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

