digraph "CFG forandroidx.recyclerview.widget.RecyclerView.setScrollingTouchSlop(I)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: INVOKE  (r0 I:android.content.Context) = (r3 I:androidx.recyclerview.widget.RecyclerView) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.getContext():android.content.Context A[MD:():android.content.Context (s)] (LINE:1112)\l0x0004: INVOKE  (r0 I:android.view.ViewConfiguration) = (r0 I:android.content.Context) type: STATIC call: android.view.ViewConfiguration.get(android.content.Context):android.view.ViewConfiguration A[MD:(android.content.Context):android.view.ViewConfiguration (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: SWITCH  (r4 I:?? A[D('slopConstant' int)])\l case 0: goto B:15:0x002e\l case 1: goto B:14:0x0027\l default: goto B:13:0x000b  (LINE:1113)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|0x000b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:1115)\l0x000d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"setScrollingTouchSlop(): bad argument constant \" \l0x0012: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0015: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('slopConstant' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0018: CONST_STR  (r2 I:java.lang.String) =  \"; using default value\" \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001d: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0021: CONST_STR  (r2 I:java.lang.String) =  \"RecyclerView\" \l0x0023: INVOKE  (r2 I:java.lang.String), (r1 I:java.lang.String) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|0x0027: INVOKE  (r1 I:int) = (r0 I:android.view.ViewConfiguration A[D('vc' android.view.ViewConfiguration)]) type: VIRTUAL call: android.view.ViewConfiguration.getScaledPagingTouchSlop():int A[MD:():int (c)] (LINE:1123)\l0x002b: IPUT  (r1 I:int), (r3 I:androidx.recyclerview.widget.RecyclerView) androidx.recyclerview.widget.RecyclerView.mTouchSlop int \l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x0035: RETURN   A[SYNTHETIC] (LINE:1126)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: INVOKE  (r1 I:int) = (r0 I:android.view.ViewConfiguration A[D('vc' android.view.ViewConfiguration)]) type: VIRTUAL call: android.view.ViewConfiguration.getScaledTouchSlop():int A[MD:():int (c)] (LINE:1119)\l0x0032: IPUT  (r1 I:int), (r3 I:androidx.recyclerview.widget.RecyclerView) androidx.recyclerview.widget.RecyclerView.mTouchSlop int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|RETURN\lORIG_RETURN\l|0x0035: RETURN    (LINE:1126)\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.RecyclerView.setScrollingTouchSlop((r3 'this' I:androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('slopConstant' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0027 \-\> B:16:0x0035, CROSS_EDGE: B:12:0x0008 \-\> B:15:0x002e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x003d: r0 'vc' Landroid\/view\/ViewConfiguration;\l  \-1 \-0x003d: r4 'slopConstant' I\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14;
Node_12 -> Node_15;
Node_13 -> Node_15;
Node_14 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

