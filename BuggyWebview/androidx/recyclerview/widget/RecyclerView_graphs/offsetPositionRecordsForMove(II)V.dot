digraph "CFG forandroidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForMove(II)V" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|int r0 = r8.mChildHelper.getUnfilteredChildCount()\l}"];
Node_31 [shape=record,label="{31\:\ 0x0006|if (r9 \>= r10) goto L26\l}"];
Node_32 [shape=record,label="{32\:\ 0x0008|r1 = r9\lr2 = r10\lr3 = \-1\l}"];
Node_34 [shape=record,label="{34\:\ 0x000f|PHI: r1 r2 r3 \l  PHI: (r1v1 'start' int) = (r1v0 'start' int), (r1v2 'start' int) binds: [B:33:0x000c, B:32:0x0008] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'end' int) = (r2v0 'end' int), (r2v2 'end' int) binds: [B:33:0x000c, B:32:0x0008] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'inBetweenOffset' int) = (r3v0 'inBetweenOffset' int), (r3v2 'inBetweenOffset' int) binds: [B:33:0x000c, B:32:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|r4 = 0\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|LOOP_START\lLOOP:0: B:35:0x0010\-\>B:48:0x003a\lPHI: r4 \l  PHI: (r4v1 'i' int) = (r4v0 'i' int), (r4v3 'i' int) binds: [B:34:0x000f, B:48:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r0) goto L22\l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|androidx.recyclerview.widget.RecyclerView$ViewHolder r5 = getChildViewHolderInt(r8.mChildHelper.getUnfilteredChildAt(r4))\l}"];
Node_37 [shape=record,label="{37\:\ 0x001c|if (r5 == null) goto L21\l}"];
Node_38 [shape=record,label="{38\:\ 0x001e}"];
Node_39 [shape=record,label="{39\:\ 0x0020|if (r5.mPosition \< r1) goto L20\l}"];
Node_40 [shape=record,label="{40\:\ 0x0022}"];
Node_41 [shape=record,label="{41\:\ 0x0024|if (r5.mPosition \<= r2) goto L12\l}"];
Node_43 [shape=record,label="{43\:\ 0x0027}"];
Node_44 [shape=record,label="{44\:\ 0x002a|if (r5.mPosition != r9) goto L18\l}"];
Node_45 [shape=record,label="{45\:\ 0x002c|r5.offsetPosition(r10 \- r9, false)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0035|r8.mState.mStructureChanged = true\l}"];
Node_52 [shape=record,label="{52\:\ 0x003a|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x003a|LOOP_END\lLOOP:0: B:35:0x0010\-\>B:48:0x003a\l|int r4 = r4 + 1\l}"];
Node_46 [shape=record,label="{46\:\ 0x0032|r5.offsetPosition(r3, false)\l}"];
Node_55 [shape=record,label="{55\:\ 0x003a|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x003a|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x003a|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x003d|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x003d|r8.mRecycler.offsetPositionRecordsForMove(r9, r10)\lrequestLayout()\l}"];
Node_50 [shape=record,label="{50\:\ 0x0045|RETURN\l|return\l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x000c|r1 = r10\lr2 = r9\lr3 = 1\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.RecyclerView.offsetPositionRecordsForMove((r8v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r9v0 'from' int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'to' int A[D('to' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:48:0x003a \-\> B:35:0x0010, CROSS_EDGE: B:46:0x0032 \-\> B:47:0x0035, CROSS_EDGE: B:41:0x0024 \-\> B:48:0x003a, CROSS_EDGE: B:39:0x0020 \-\> B:48:0x003a, CROSS_EDGE: B:37:0x001c \-\> B:48:0x003a, CROSS_EDGE: B:33:0x000c \-\> B:34:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_51;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_53;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_54;
Node_40 -> Node_41;
Node_41 -> Node_43;
Node_41 -> Node_55[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_47;
Node_47 -> Node_52;
Node_52 -> Node_48;
Node_48 -> Node_35;
Node_46 -> Node_47;
Node_55 -> Node_48;
Node_54 -> Node_48;
Node_53 -> Node_48;
Node_51 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_29;
Node_33 -> Node_34;
}

