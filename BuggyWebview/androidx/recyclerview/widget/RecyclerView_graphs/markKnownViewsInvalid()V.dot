digraph "CFG forandroidx.recyclerview.widget.RecyclerView.markKnownViewsInvalid()V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|int r0 = r4.mChildHelper.getUnfilteredChildCount()\lr1 = 0\l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|LOOP_START\lLOOP:0: B:19:0x0007\-\>B:25:0x001f\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v3 'i' int) binds: [B:18:0x0000, B:25:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L12\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|androidx.recyclerview.widget.RecyclerView$ViewHolder r2 = getChildViewHolderInt(r4.mChildHelper.getUnfilteredChildAt(r1))\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|if (r2 == null) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015}"];
Node_23 [shape=record,label="{23\:\ 0x0019|if (r2.shouldIgnore() != false) goto L10\l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|r2.addFlags(6)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|LOOP_END\lLOOP:0: B:19:0x0007\-\>B:25:0x001f\l|int r1 = r1 + 1\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0022|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0022|markItemDecorInsetsDirty()\lr4.mRecycler.markKnownViewsInvalid()\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|RETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.RecyclerView.markKnownViewsInvalid((r4v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x001f \-\> B:19:0x0007, CROSS_EDGE: B:23:0x0019 \-\> B:25:0x001f, CROSS_EDGE: B:21:0x0013 \-\> B:25:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_30;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_29;
Node_29 -> Node_25;
Node_25 -> Node_19;
Node_31 -> Node_25;
Node_30 -> Node_25;
Node_28 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_17;
}

