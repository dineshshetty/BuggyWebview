digraph "CFG forandroidx.recyclerview.widget.RecyclerView.getChildViewHolder(Landroid\/view\/View;)Landroidx\/recyclerview\/widget\/RecyclerView$ViewHolder;" {
subgraph cluster_Region_1628627639 {
label = "R(2:1|(2:(2:4|5)|(1:8)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|android.view.ViewParent android.view.ViewParent r0 = r5.getParent()\l}"];
subgraph cluster_Region_304174347 {
label = "R(2:(2:4|5)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1227663581 {
label = "IF [B:13:0x0004, B:14:0x0006] THEN: R(2:4|5) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0004|if (r0 != null) goto L3\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|ADDED_TO_REGION\l|if (r0 != r4) goto L4\l}"];
subgraph cluster_Region_2088987645 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0009}"];
Node_17 [shape=record,label="{17\:\ 0x0027|throw new java.lang.IllegalArgumentException(\"View \" + r5 + \" is not a direct child of \" + r4)\l}"];
}
}
subgraph cluster_Region_1168762020 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x002c|RETURN\l|return getChildViewHolderInt(r5)\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0028}"];
MethodNode[shape=record,label="{public androidx.recyclerview.widget.RecyclerView$ViewHolder androidx.recyclerview.widget.RecyclerView.getChildViewHolder((r4v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r5v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x002c \-\> B:11:?, CROSS_EDGE: B:13:0x0004 \-\> B:18:0x0028\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_14 -> Node_16;
Node_14 -> Node_18[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_18 -> Node_19;
}

