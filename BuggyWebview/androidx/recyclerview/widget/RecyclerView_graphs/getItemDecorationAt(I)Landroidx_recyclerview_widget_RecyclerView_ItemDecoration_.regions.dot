digraph "CFG forandroidx.recyclerview.widget.RecyclerView.getItemDecorationAt(I)Landroidx\/recyclerview\/widget\/RecyclerView$ItemDecoration;" {
subgraph cluster_Region_1208485268 {
label = "R(2:1|(2:(2:7|8)|(1:5)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|int int r0 = getItemDecorationCount()\l}"];
subgraph cluster_Region_1704835441 {
label = "R(2:(2:7|8)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_961324826 {
label = "IF [B:12:0x0004, B:13:0x0006] THEN: R(2:7|8) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|if (r5 \< 0) goto L7\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|ADDED_TO_REGION\l|if (r5 \>= r0) goto L7\l}"];
subgraph cluster_Region_1887157449 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0011}"];
Node_17 [shape=record,label="{17\:\ 0x002a|throw new java.lang.IndexOutOfBoundsException(r5 + \" is an invalid index for size \" + r0)\l}"];
}
}
subgraph cluster_Region_1695633269 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0010|RETURN\l|return r4.mItemDecorations.get(r5)\l}"];
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0008}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.recyclerview.widget.RecyclerView$ItemDecoration androidx.recyclerview.widget.RecyclerView.getItemDecorationAt((r4v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r5v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x002a \-\> B:10:?, CROSS_EDGE: B:12:0x0004 \-\> B:16:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_10;
Node_9 -> Node_11;
Node_14 -> Node_15;
}

