digraph "CFG forandroidx.recyclerview.widget.RecyclerView.fillRemainingScrollValues(Landroidx\/recyclerview\/widget\/RecyclerView$State;)V" {
subgraph cluster_Region_1462083625 {
label = "R(1:(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_415564468 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1411391697 {
label = "IF [B:11:0x0005] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0005|if (getScrollState() == 2) goto L3\l}"];
subgraph cluster_Region_1976082059 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0007|android.widget.OverScroller android.widget.OverScroller r0 = r3.mViewFlinger.mOverScroller\lr4.mRemainingScrollHorizontal = r0.getFinalX() \- r0.getCurrX()\lr4.mRemainingScrollVertical = r0.getFinalY() \- r0.getCurrY()\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
}
subgraph cluster_Region_433581046 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0022|r4.mRemainingScrollHorizontal = 0\lr4.mRemainingScrollVertical = 0\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0027|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{final void androidx.recyclerview.widget.RecyclerView.fillRemainingScrollValues((r3v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r4v0 'state' androidx.recyclerview.widget.RecyclerView$State A[D('state' androidx.recyclerview.widget.RecyclerView$State), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0022 \-\> B:14:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_14 -> Node_9;
}

