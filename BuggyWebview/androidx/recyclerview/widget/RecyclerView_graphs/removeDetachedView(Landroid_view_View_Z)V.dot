digraph "CFG forandroidx.recyclerview.widget.RecyclerView.removeDetachedView(Landroid\/view\/View;Z)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|androidx.recyclerview.widget.RecyclerView$ViewHolder r0 = getChildViewHolderInt(r5)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|if (r0 == null) goto L11\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006}"];
Node_19 [shape=record,label="{19\:\ 0x000a|if (r0.isTmpDetached() == false) goto L6\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|r0.clearTmpDetachFlag()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0010}"];
Node_22 [shape=record,label="{22\:\ 0x0014|if (r0.shouldIgnore() == false) goto L8\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Called removeDetachedView with a view which is not flagged as tmp detached.\")\lr2.append(r0)\lr2.append(exceptionLabel())\l}"];
Node_25 [shape=record,label="{25\:\ 0x0034|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0035|r5.clearAnimation()\ldispatchChildDetached(r5)\lsuper.removeDetachedView(r5, r6)\l}"];
Node_27 [shape=record,label="{27\:\ 0x003e|RETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void androidx.recyclerview.widget.RecyclerView.removeDetachedView((r4v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r5v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'animate' boolean A[D('animate' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:25:0x0034 \-\> B:15:?, CROSS_EDGE: B:22:0x0014 \-\> B:26:0x0035, CROSS_EDGE: B:17:0x0004 \-\> B:26:0x0035\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewGroup.removeDetachedView(android.view.View, boolean):void\}]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_26;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_26[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

