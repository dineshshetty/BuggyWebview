digraph "CFG forandroidx.recyclerview.widget.RecyclerView.addAnimatingView(Landroidx\/recyclerview\/widget\/RecyclerView$ViewHolder;)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|android.view.View r0 = r7.itemView\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|if (r0.getParent() != r6) goto L14\l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|r1 = true\l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|PHI: r1 \l  PHI: (r1v2 'alreadyParented' boolean) = (r1v1 'alreadyParented' boolean), (r1v3 'alreadyParented' boolean) binds: [B:20:0x000b, B:19:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|r6.mRecycler.unscrapView(getChildViewHolder(r0))\l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|if (r7.isTmpDetached() == false) goto L9\l}"];
Node_23 [shape=record,label="{23\:\ 0x001b|r6.mChildHelper.attachViewToParent(r0, \-1, r0.getLayoutParams(), true)\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0026|if (r1 != false) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x0028|r6.mChildHelper.addView(r0, true)\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ 0x002e|r6.mChildHelper.hide(r0)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0033|RETURN\lORIG_RETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|r1 = false\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.RecyclerView.addAnimatingView((r6v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r7v0 'viewHolder' androidx.recyclerview.widget.RecyclerView$ViewHolder A[D('viewHolder' androidx.recyclerview.widget.RecyclerView$ViewHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0028 \-\> B:27:0x0033, CROSS_EDGE: B:26:0x002e \-\> B:27:0x0033, CROSS_EDGE: B:20:0x000b \-\> B:21:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_28;
Node_28 -> Node_16;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_29;
Node_29 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_20 -> Node_21;
}

