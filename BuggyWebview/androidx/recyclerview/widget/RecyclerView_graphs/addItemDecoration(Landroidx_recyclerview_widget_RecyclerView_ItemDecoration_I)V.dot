digraph "CFG forandroidx.recyclerview.widget.RecyclerView.addItemDecoration(Landroidx\/recyclerview\/widget\/RecyclerView$ItemDecoration;I)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|androidx.recyclerview.widget.RecyclerView$LayoutManager r0 = r2.mLayout\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|if (r0 == null) goto L4\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|r0.assertNotInLayoutOrScroll(\"Cannot add item decoration during a scroll  or layout\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009}"];
Node_19 [shape=record,label="{19\:\ 0x000f|if (r2.mItemDecorations.isEmpty() == false) goto L7\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|setWillNotDraw(false)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0015|if (r4 \>= 0) goto L12\l}"];
Node_22 [shape=record,label="{22\:\ 0x0017|r2.mItemDecorations.add(r3)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|markItemDecorInsetsDirty()\lrequestLayout()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0028|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x001d|r2.mItemDecorations.add(r4, r3)\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.RecyclerView.addItemDecoration((r2v0 'this' androidx.recyclerview.widget.RecyclerView A[IMMUTABLE_TYPE, THIS]), (r3v0 'decor' androidx.recyclerview.widget.RecyclerView$ItemDecoration A[D('decor' androidx.recyclerview.widget.RecyclerView$ItemDecoration), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001d \-\> B:24:0x0022, CROSS_EDGE: B:19:0x000f \-\> B:21:0x0015, CROSS_EDGE: B:16:0x0002 \-\> B:18:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
Node_23 -> Node_24;
}

