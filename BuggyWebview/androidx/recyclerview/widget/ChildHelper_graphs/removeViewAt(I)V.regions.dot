digraph "CFG forandroidx.recyclerview.widget.ChildHelper.removeViewAt(I)V" {
subgraph cluster_Region_1925118307 {
label = "R(2:1|(2:(1:3)|(2:(1:7)|8)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|int int r0 = getOffset(r4)\landroid.view.View android.view.View r1 = r3.mCallback.getChildAt(r0)\l}"];
subgraph cluster_Region_923674276 {
label = "R(2:(1:3)|(2:(1:7)|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1488160949 {
label = "IF [B:13:0x000a] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000a|if (r1 == null) goto L3\l}"];
subgraph cluster_Region_1153239260 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000c|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1051073401 {
label = "R(2:(1:7)|8)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1359301725 {
label = "IF [B:16:0x0013] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0013|if (r3.mBucket.remove(r0) != false) goto L7\l}"];
subgraph cluster_Region_1573066529 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0015|unhideViewInternal(r1)\l}"];
}
}
Node_18 [shape=record,label="{18\:\ 0x0018|r3.mCallback.removeViewAt(r0)\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000d}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x001d}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.ChildHelper.removeViewAt((r3v0 'this' androidx.recyclerview.widget.ChildHelper A[IMMUTABLE_TYPE, THIS]), (r4v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001d \-\> B:11:?, CROSS_EDGE: B:16:0x0013 \-\> B:18:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_11;
Node_16 -> Node_17;
Node_16 -> Node_18[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_10 -> Node_12;
Node_15 -> Node_16;
Node_19 -> Node_11;
}

