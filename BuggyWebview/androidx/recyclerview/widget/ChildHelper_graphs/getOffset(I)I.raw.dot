digraph "CFG forandroidx.recyclerview.widget.ChildHelper.getOffset(I)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:114)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0001|0x0001: IF  (r6 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:23:0x0004 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:int)  (LINE:115)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0004|0x0004: IGET  (r1 I:androidx.recyclerview.widget.ChildHelper$Callback) = (r5 I:androidx.recyclerview.widget.ChildHelper) androidx.recyclerview.widget.ChildHelper.mCallback androidx.recyclerview.widget.ChildHelper$Callback  (LINE:117)\l0x0006: INVOKE  (r1 I:int) = (r1 I:androidx.recyclerview.widget.ChildHelper$Callback) type: INTERFACE call: androidx.recyclerview.widget.ChildHelper.Callback.getChildCount():int A[MD:():int (m)]\l0x000a: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)])  (LINE:118)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000b|LOOP_START\lLOOP:0: B:24:0x000b\-\>B:31:0x0025\l|0x000b: IF  (r2 I:??[int, byte, short, char] A[D('offset' int)]) \>= (r1 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:34:0x0027  (LINE:119)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000d|0x000d: IGET  (r3 I:androidx.recyclerview.widget.ChildHelper$Bucket) = (r5 I:androidx.recyclerview.widget.ChildHelper) androidx.recyclerview.widget.ChildHelper.mBucket androidx.recyclerview.widget.ChildHelper$Bucket  (LINE:120)\l0x000f: INVOKE  (r3 I:int) = (r3 I:androidx.recyclerview.widget.ChildHelper$Bucket), (r2 I:int A[D('offset' int)]) type: VIRTUAL call: androidx.recyclerview.widget.ChildHelper.Bucket.countOnesBefore(int):int A[MD:(int):int (m)]\l0x0013: ARITH  (r4 I:int) = (r2 I:int A[D('offset' int)]) \- (r3 I:int A[D('removedBefore' int)])  (LINE:121)\l0x0015: ARITH  (r4 I:int) = (r6 I:int A[D('index' int)]) \- (r4 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|0x0017: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('diff' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0025  (LINE:122)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0025|LOOP_END\lLOOP:0: B:24:0x000b\-\>B:31:0x0025\l|0x0025: ARITH  (r2 I:int) = (r2 I:int A[D('offset' int)]) + (r4 I:int A[D('diff' int)])  (LINE:128)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0019|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0019|LOOP_START\lLOOP:1: B:27:0x0019\-\>B:29:0x0021\l|0x0019: IGET  (r0 I:androidx.recyclerview.widget.ChildHelper$Bucket) = (r5 I:androidx.recyclerview.widget.ChildHelper) androidx.recyclerview.widget.ChildHelper.mBucket androidx.recyclerview.widget.ChildHelper$Bucket  (LINE:123)\l0x001b: INVOKE  (r0 I:boolean) = (r0 I:androidx.recyclerview.widget.ChildHelper$Bucket), (r2 I:int A[D('offset' int)]) type: VIRTUAL call: androidx.recyclerview.widget.ChildHelper.Bucket.get(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|0x001f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0024 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0021|LOOP_END\lLOOP:1: B:27:0x0019\-\>B:29:0x0021\l|0x0021: ARITH  (r2 I:int) = (r2 I:int A[D('offset' int)]) + (1 int)  (LINE:124)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0024|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0024|RETURN\l|0x0024: RETURN  (r2 I:int A[D('offset' int)])  (LINE:126)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0027|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0027|RETURN\l|0x0027: RETURN  (r0 I:int)  (LINE:131)\l}"];
MethodNode[shape=record,label="{private int androidx.recyclerview.widget.ChildHelper.getOffset((r5 'this' I:androidx.recyclerview.widget.ChildHelper A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0021 \-\> B:27:0x0019, CROSS_EDGE: B:30:0x0024 \-\> B:19:?, BACK_EDGE: B:31:0x0025 \-\> B:24:0x000b, CROSS_EDGE: B:32:0x0027 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0026: r3 'removedBefore' I\l  0x0017\-0x0026: r4 'diff' I\l  0x000a\-0x0027: r1 'limit' I\l  0x000b\-0x0027: r2 'offset' I\l  \-1 \-0x0027: r6 'index' I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_34;
Node_25 -> Node_26;
Node_26 -> Node_31;
Node_26 -> Node_33[style=dashed];
Node_31 -> Node_24;
Node_33 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_35;
Node_29 -> Node_27;
Node_35 -> Node_30;
Node_30 -> Node_19;
Node_34 -> Node_32;
Node_32 -> Node_19;
}

