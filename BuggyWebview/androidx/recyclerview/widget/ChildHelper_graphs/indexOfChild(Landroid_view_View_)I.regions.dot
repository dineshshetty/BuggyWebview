digraph "CFG forandroidx.recyclerview.widget.ChildHelper.indexOfChild(Landroid\/view\/View;)I" {
subgraph cluster_Region_738323168 {
label = "R(2:1|(2:(1:7)|(1:9)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|int int r0 = r3.mCallback.indexOfChild(r4)\l}"];
subgraph cluster_Region_1633328944 {
label = "R(2:(1:7)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_571331676 {
label = "IF [B:13:0x0007, B:16:0x0010] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0007|if (r0 == (\-1)) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|ADDED_TO_REGION\l|if (r3.mBucket.get(r0) != false) goto L7\l}"];
subgraph cluster_Region_1535167170 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0012|RETURN\l|return \-1\l}"];
}
}
subgraph cluster_Region_1625008851 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x001b|RETURN\l|return r0 \- r3.mBucket.countOnesBefore(r0)\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0009|RETURN\lADDED_TO_REGION\l|return \-1\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000a}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0013}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.ChildHelper.indexOfChild((r3v0 'this' androidx.recyclerview.widget.ChildHelper A[IMMUTABLE_TYPE, THIS]), (r4v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0012 \-\> B:11:?, CROSS_EDGE: B:19:0x001b \-\> B:11:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_18[style=dashed];
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_18 -> Node_19;
}

