digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.calculateScrollDirectionForPosition(I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:androidx.recyclerview.widget.StaggeredGridLayoutManager) type: VIRTUAL call: androidx.recyclerview.widget.StaggeredGridLayoutManager.getChildCount():int A[MD:():int (m)] (LINE:2043)\l0x0004: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0005: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:boolean) = (r5 I:androidx.recyclerview.widget.StaggeredGridLayoutManager) androidx.recyclerview.widget.StaggeredGridLayoutManager.mShouldReverseLayout boolean  (LINE:2044)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:? \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: RETURN  (r1 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x000d: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: INVOKE  (r0 I:int) = (r5 I:androidx.recyclerview.widget.StaggeredGridLayoutManager) type: VIRTUAL call: androidx.recyclerview.widget.StaggeredGridLayoutManager.getFirstChildPosition():int A[MD:():int (m)] (LINE:2046)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IF  (r6 I:??[int, byte, short, char] A[D('position' int)]) \>= (r0 I:??[int, byte, short, char] A[D('firstChildPos' int)])  \-\> B:11:0x0016  (LINE:2047)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|0x0014: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: IGET  (r4 I:boolean) = (r5 I:androidx.recyclerview.widget.StaggeredGridLayoutManager) androidx.recyclerview.widget.StaggeredGridLayoutManager.mShouldReverseLayout boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|0x0019: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001c \l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001d: RETURN  (r1 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|0x001d: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private int androidx.recyclerview.widget.StaggeredGridLayoutManager.calculateScrollDirectionForPosition((r5 'this' I:androidx.recyclerview.widget.StaggeredGridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000a \-\> B:7:0x000d, CROSS_EDGE: B:16:0x001d \-\> B:1:?, CROSS_EDGE: B:13:0x0019 \-\> B:16:0x001d, CROSS_EDGE: B:11:0x0016 \-\> B:12:0x0017\lDebug Info:\l  0x0012\-0x001d: r0 'firstChildPos' I\l  \-1 \-0x001d: r6 'position' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_1;
Node_17 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_18[style=dashed];
Node_15 -> Node_1;
Node_18 -> Node_1;
Node_11 -> Node_12;
}

