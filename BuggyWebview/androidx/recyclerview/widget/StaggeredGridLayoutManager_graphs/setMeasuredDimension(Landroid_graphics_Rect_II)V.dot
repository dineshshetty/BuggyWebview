digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.setMeasuredDimension(Landroid\/graphics\/Rect;II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = getPaddingLeft() + getPaddingRight()\lint r1 = getPaddingTop() + getPaddingBottom()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|if (r6.mOrientation != 1) goto L7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0017|int r2 = r7.height() + r1\lint r3 = chooseSize(r9, r2, getMinimumHeight())\lint r2 = chooseSize(r8, (r6.mSizePerSpan * r6.mSpanCount) + r0, getMinimumWidth())\l}"];
Node_6 [shape=record,label="{6\:\ 0x0052|PHI: r2 r3 \l  PHI: (r2v5 'usedHeight' int) = (r2v4 'usedHeight' int), (r2v8 'usedHeight' int) binds: [B:5:0x0034, B:4:0x0017] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 'width' int) = (r3v3 'width' int), (r3v6 'width' int) binds: [B:5:0x0034, B:4:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|setMeasuredDimension(r2, r3)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0055|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|int r2 = r7.width()\lint r2 = r2 + r0\lint r3 = chooseSize(r8, r2, getMinimumWidth())\lr2 = r3\lr3 = chooseSize(r9, (r6.mSizePerSpan * r6.mSpanCount) + r1, getMinimumHeight())\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.StaggeredGridLayoutManager.setMeasuredDimension((r6v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r7v0 'childrenBounds' android.graphics.Rect A[D('childrenBounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'wSpec' int A[D('wSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'hSpec' int A[D('hSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0034 \-\> B:6:0x0052\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.LayoutManager.setMeasuredDimension(android.graphics.Rect, int, int):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
}

