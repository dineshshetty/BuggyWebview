digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.findLastReferenceChildPosition(I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = getChildCount() + (\-1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|LOOP_START\lLOOP:0: B:3:0x0006\-\>B:8:0x0015\lPHI: r0 \l  PHI: (r0v2 'i' int) = (r0v1 'i' int), (r0v4 'i' int) binds: [B:2:0x0000, B:8:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \< 0) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|android.view.View r1 = getChildAt(r0)\lint r2 = getPosition(r1)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|if (r2 \< 0) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|if (r2 \>= r4) goto L9\l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|RETURN\l|return r2\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|LOOP_END\lLOOP:0: B:3:0x0006\-\>B:8:0x0015\l|int r0 = r0 + (\-1)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|RETURN\l|return 0\l}"];
MethodNode[shape=record,label="{private int androidx.recyclerview.widget.StaggeredGridLayoutManager.findLastReferenceChildPosition((r3v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4v0 'itemCount' int A[D('itemCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x0015 \-\> B:3:0x0006, CROSS_EDGE: B:5:0x0010 \-\> B:8:0x0015, CROSS_EDGE: B:10:0x0019 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_11[style=dashed];
Node_6 -> Node_14;
Node_11 -> Node_7;
Node_7 -> Node_1;
Node_14 -> Node_8;
Node_8 -> Node_3;
Node_13 -> Node_8;
Node_12 -> Node_9;
Node_9 -> Node_1;
}

