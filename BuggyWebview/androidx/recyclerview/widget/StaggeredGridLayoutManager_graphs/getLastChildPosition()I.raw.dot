digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.getLastChildPosition()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager) type: VIRTUAL call: androidx.recyclerview.widget.StaggeredGridLayoutManager.getChildCount():int A[MD:():int (m)] (LINE:2203)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childCount' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008  (LINE:2204)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|SYNTHETIC\lRETURN\l|0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: ARITH  (r1 I:int) = (r0 I:int A[D('childCount' int)]) + (\-1 int) \l0x000a: INVOKE  (r1 I:android.view.View) = (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager), (r1 I:int) type: VIRTUAL call: androidx.recyclerview.widget.StaggeredGridLayoutManager.getChildAt(int):android.view.View A[MD:(int):android.view.View (m)]\l0x000e: INVOKE  (r1 I:int) = (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager), (r1 I:android.view.View) type: VIRTUAL call: androidx.recyclerview.widget.StaggeredGridLayoutManager.getPosition(android.view.View):int A[MD:(android.view.View):int (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{int androidx.recyclerview.widget.StaggeredGridLayoutManager.getLastChildPosition((r2 'this' I:androidx.recyclerview.widget.StaggeredGridLayoutManager A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0008 \-\> B:6:0x0012\lDebug Info:\l  0x0004\-0x0012: r0 'childCount' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

