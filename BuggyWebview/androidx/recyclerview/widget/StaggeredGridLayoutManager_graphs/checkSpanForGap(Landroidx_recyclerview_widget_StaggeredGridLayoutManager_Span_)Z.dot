digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.checkSpanForGap(Landroidx\/recyclerview\/widget\/StaggeredGridLayoutManager$Span;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r3.mShouldReverseLayout == false) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005}"];
Node_5 [shape=record,label="{5\:\ 0x000f|if (r4.getEndLine() \>= r3.mPrimaryOrientation.getEndAfterPadding()) goto L8\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|android.view.View r0 = r4.mViews.get(r4.mViews.size() + (\-1))\landroidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams r1 = r4.getLayoutParams(r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|RETURN\l|return r1.mFullSpan ^ true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0047|RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ 0x002a}"];
Node_9 [shape=record,label="{9\:\ 0x0034|if (r4.getStartLine() \<= r3.mPrimaryOrientation.getStartAfterPadding()) goto L8\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|android.view.View r0 = r4.mViews.get(0)\landroidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams r1 = r4.getLayoutParams(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|RETURN\l|return r1.mFullSpan ^ true\l}"];
MethodNode[shape=record,label="{private boolean androidx.recyclerview.widget.StaggeredGridLayoutManager.checkSpanForGap((r3v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4v0 'span' androidx.recyclerview.widget.StaggeredGridLayoutManager$Span A[D('span' androidx.recyclerview.widget.StaggeredGridLayoutManager$Span), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0047 \-\> B:1:?, CROSS_EDGE: B:11:0x0046 \-\> B:1:?, CROSS_EDGE: B:9:0x0034 \-\> B:12:0x0047\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_12 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

