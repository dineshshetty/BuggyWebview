digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.setSpanCount(I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|assertNotInLayoutOrScroll(null)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r4 == r3.mSpanCount) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|invalidateSpanAssignments()\lr3.mSpanCount = r4\lr3.mRemainingSpans = new java.util.BitSet(r3.mSpanCount)\lr3.mSpans = new androidx.recyclerview.widget.StaggeredGridLayoutManager.Span[r3.mSpanCount]\lr0 = 0\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|LOOP_START\lLOOP:0: B:5:0x001d\-\>B:7:0x0021\lPHI: r0 \l  PHI: (r0v6 'i' int) = (r0v5 'i' int), (r0v7 'i' int) binds: [B:4:0x0008, B:7:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|if (r0 \>= r3.mSpanCount) goto L7\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|LOOP_END\lLOOP:0: B:5:0x001d\-\>B:7:0x0021\l|r3.mSpans[r0] = new androidx.recyclerview.widget.StaggeredGridLayoutManager.Span(r3, r0)\lint r0 = r0 + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x002d|requestLayout()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0030|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.StaggeredGridLayoutManager.setSpanCount((r3v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4v0 'spanCount' int A[D('spanCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x0021 \-\> B:5:0x001d, CROSS_EDGE: B:3:0x0006 \-\> B:9:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_5;
Node_10 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_11 -> Node_1;
}

