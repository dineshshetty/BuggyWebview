digraph "CFG forandroidx.recyclerview.widget.OpReorderer.getLastMoveOutOfOrder(Ljava\/util\/List;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:213)\l0x0001: INVOKE  (r1 I:int) = (r6 I:java.util.List A[D('list' java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:214)\l0x0005: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|LOOP_START\lLOOP:0: B:3:0x0007\-\>B:9:0x0019\l|0x0007: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \< (0 ??[int, byte, short, char])  \-\> B:13:0x001c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: INVOKE  (r2 I:java.lang.Object) = \l  (r6 I:java.util.List A[D('list' java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\>)])\l  (r1 I:int A[D('i' int)])\l type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:215)\l0x000d: CHECK_CAST (r2 I:androidx.recyclerview.widget.AdapterHelper$UpdateOp) = (androidx.recyclerview.widget.AdapterHelper$UpdateOp) (r2 I:??[OBJECT, ARRAY]) \l0x000f: IGET  (r3 I:int) = \l  (r2 I:androidx.recyclerview.widget.AdapterHelper$UpdateOp A[D('op1' androidx.recyclerview.widget.AdapterHelper$UpdateOp)])\l androidx.recyclerview.widget.AdapterHelper.UpdateOp.cmd int  (LINE:216)\l0x0011: CONST  (r4 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('foundNonMove' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0019  (LINE:217)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:int A[D('i' int)])  (LINE:218)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|LOOP_END\lLOOP:0: B:3:0x0007\-\>B:9:0x0019\l|0x0019: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int)  (LINE:214)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('foundNonMove' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:221)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|RETURN\l|0x001c: CONST  (r1 I:??[int, float, short, byte, char] A[D('i' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:224)\l0x001d: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{private int androidx.recyclerview.widget.OpReorderer.getLastMoveOutOfOrder((r5 'this' I:androidx.recyclerview.widget.OpReorderer A[IMMUTABLE_TYPE, THIS]), (r6 I:java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\> A[D('list' java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0019 \-\> B:3:0x0007, CROSS_EDGE: B:8:0x0018 \-\> B:9:0x0019, CROSS_EDGE: B:11:0x001d \-\> B:1:?\lDebug Info:\l  0x000f\-0x0019: r2 'op1' Landroidx\/recyclerview\/widget\/AdapterHelper$UpdateOp;\l  0x0007\-0x001c: r1 'i' I\l  0x0001\-0x001d: r0 'foundNonMove' Z\l  0x0000\-0x001d: r6 'list' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroidx\/recyclerview\/widget\/AdapterHelper$UpdateOp;\>;\lSIGNATURE: (Ljava\/util\/List\<Landroidx\/recyclerview\/widget\/AdapterHelper$UpdateOp;\>;)I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_8;
Node_6 -> Node_12[style=dashed];
Node_6 -> Node_15;
Node_12 -> Node_7;
Node_7 -> Node_1;
Node_15 -> Node_9;
Node_9 -> Node_3;
Node_8 -> Node_14;
Node_14 -> Node_9;
Node_13 -> Node_10;
Node_10 -> Node_1;
}

