digraph "CFG forandroidx.recyclerview.widget.OpReorderer.swapMoveOp(Ljava\/util\/List;II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.recyclerview.widget.AdapterHelper$UpdateOp r0 = r9.get(r10)\landroidx.recyclerview.widget.AdapterHelper$UpdateOp r7 = r9.get(r11)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|switch(r7.cmd) \{\l    case 1: goto L8;\l    case 2: goto L6;\l    case 3: goto L10;\l    case 4: goto L3;\l    default: goto L10;\l\}\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|swapMoveUpdate(r9, r10, r0, r11, r7)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|swapMoveRemove(r9, r10, r0, r11, r7)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|swapMoveAdd(r9, r10, r0, r11, r7)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|RETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.OpReorderer.swapMoveOp((r8v0 'this' androidx.recyclerview.widget.OpReorderer A[IMMUTABLE_TYPE, THIS]), (r9v0 'list' java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\> A[D('list' java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'badMove' int A[D('badMove' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'next' int A[D('next' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x001d \-\> B:8:0x0031, CROSS_EDGE: B:7:0x0027 \-\> B:8:0x0031, CROSS_EDGE: B:3:0x000f \-\> B:8:0x0031\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/util\/List\<Landroidx\/recyclerview\/widget\/AdapterHelper$UpdateOp;\>;II)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_3 -> Node_11;
Node_5 -> Node_9;
Node_9 -> Node_1;
Node_6 -> Node_10;
Node_10 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_11 -> Node_1;
}

