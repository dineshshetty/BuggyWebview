digraph "CFG forandroidx.recyclerview.widget.OpReorderer.reorderOps(Ljava\/util\/List;)V" {
subgraph cluster_Region_796584520 {
label = "R(1:(2:1|(1:3)(1:5)))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_1981725431 {
label = "LOOP:0: (2:1|(1:3)(1:5))";
node [shape=record,color=blue];
subgraph cluster_Region_1408441556 {
label = "R(2:1|(1:3)(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|LOOP_START\lLOOP:0: B:2:0x0000\-\>B:4:0x0008\l|int int r0 = getLastMoveOutOfOrder(r4)\l}"];
subgraph cluster_IfRegion_1710129256 {
label = "IF [B:3:0x0006] THEN: R(1:3) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r0 != (\-1)) goto L3\l}"];
subgraph cluster_Region_1465575143 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0008|LOOP_END\lLOOP:0: B:2:0x0000\-\>B:4:0x0008\l|swapMoveOp(r4, r0, r0 + 1)\l}"];
}
subgraph cluster_Region_1016383609 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|return\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000e|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.OpReorderer.reorderOps((r3v0 'this' androidx.recyclerview.widget.OpReorderer A[IMMUTABLE_TYPE, THIS]), (r4v0 'ops' java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\> A[D('ops' java.util.List\<androidx.recyclerview.widget.AdapterHelper$UpdateOp\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x0008 \-\> B:2:0x0000\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l INFO: \l \-\> Access modifiers changed from: package\-private\}\lSIGNATURE: (Ljava\/util\/List\<Landroidx\/recyclerview\/widget\/AdapterHelper$UpdateOp;\>;)V\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_2;
Node_5 -> Node_1;
Node_0 -> Node_2;
Node_6 -> Node_5;
}

