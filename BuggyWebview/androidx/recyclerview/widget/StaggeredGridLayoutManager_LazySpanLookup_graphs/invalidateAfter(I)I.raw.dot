digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.invalidateAfter(I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int[]) = (r4 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup) androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.mData int[]  (LINE:2864)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:int)  (LINE:2865)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[])  (LINE:2867)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: IF  (r5 I:??[int, byte, short, char] A[D('position' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|0x0009: RETURN  (r1 I:int)  (LINE:2868)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r4 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup), (r5 I:int A[D('position' int)]) type: DIRECT call: androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.invalidateFullSpansAfter(int):int A[MD:(int):int (m)] (LINE:2870)\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endPosition' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001a  (LINE:2871)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|0x0010: IGET  (r2 I:int[]) = (r4 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup) androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.mData int[]  (LINE:2872)\l0x0012: ARRAY_LENGTH  (r3 I:int) = (r2 I:??[]) \l0x0013: INVOKE  (r2 I:int[]), (r5 I:int A[D('position' int)]), (r3 I:int), (r1 I:int) type: STATIC call: java.util.Arrays.fill(int[], int, int, int):void A[MD:(int[], int, int, int):void (c)]\l0x0016: IGET  (r1 I:int[]) = (r4 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup) androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.mData int[]  (LINE:2873)\l0x0018: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: IGET  (r2 I:int[]) = (r4 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup) androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.mData int[]  (LINE:2876)\l0x001c: ARITH  (r3 I:int) = (r0 I:int A[D('endPosition' int)]) + (1 int) \l0x001e: INVOKE  (r2 I:int[]), (r5 I:int A[D('position' int)]), (r3 I:int), (r1 I:int) type: STATIC call: java.util.Arrays.fill(int[], int, int, int):void A[MD:(int[], int, int, int):void (c)]\l0x0021: ARITH  (r1 I:int) = (r0 I:int A[D('endPosition' int)]) + (1 int)  (LINE:2877)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|RETURN\l|0x0023: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{int androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.invalidateAfter((r4 'this' I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0009 \-\> B:1:?, CROSS_EDGE: B:11:0x0019 \-\> B:1:?, CROSS_EDGE: B:13:0x0023 \-\> B:1:?\lDebug Info:\l  0x000e\-0x0023: r0 'endPosition' I\l  \-1 \-0x0023: r5 'position' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

