digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.offsetForAddition(II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int[]) = (r3 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup) androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.mData int[]  (LINE:2952)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: IF  (r4 I:??[int, byte, short, char] A[D('positionStart' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:7:0x0008 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|0x0008: ARITH  (r0 I:int) = (r4 I:int A[D('positionStart' int)]) + (r5 I:int A[D('itemCount' int)])  (LINE:2955)\l0x000a: INVOKE  (r3 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup), (r0 I:int) type: VIRTUAL call: androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.ensureSize(int):void A[MD:(int):void (m)]\l0x000d: IGET  (r0 I:int[]) = (r3 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup) androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.mData int[]  (LINE:2956)\l0x000f: ARITH  (r1 I:int) = (r4 I:int A[D('positionStart' int)]) + (r5 I:int A[D('itemCount' int)]) \l0x0011: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[]) \l0x0012: ARITH  (r2 I:int) = (r2 I:int) \- (r4 I:int A[D('positionStart' int)]) \l0x0013: ARITH  (r2 I:int) = (r2 I:int) \- (r5 I:int A[D('itemCount' int)]) \l0x0014: INVOKE  (r0 I:java.lang.Object), (r4 I:int A[D('positionStart' int)]), (r0 I:java.lang.Object), (r1 I:int), (r2 I:int) type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l0x0017: IGET  (r0 I:int[]) = (r3 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup) androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.mData int[]  (LINE:2958)\l0x0019: ARITH  (r1 I:int) = (r4 I:int A[D('positionStart' int)]) + (r5 I:int A[D('itemCount' int)]) \l0x001b: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x001c: INVOKE  (r0 I:int[]), (r4 I:int A[D('positionStart' int)]), (r1 I:int), (r2 I:int) type: STATIC call: java.util.Arrays.fill(int[], int, int, int):void A[MD:(int[], int, int, int):void (c)]\l0x001f: INVOKE  \l  (r3 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup)\l  (r4 I:int A[D('positionStart' int)])\l  (r5 I:int A[D('itemCount' int)])\l type: DIRECT call: androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.offsetFullSpansForAddition(int, int):void A[MD:(int, int):void (m)] (LINE:2960)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:2961)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN   A[SYNTHETIC] (LINE:2953)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|RETURN\lORIG_RETURN\l|0x0023: RETURN    (LINE:2953)\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.offsetForAddition((r3 'this' I:androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('positionStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('itemCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0023 \-\> B:1:?, CROSS_EDGE: B:3:0x0002 \-\> B:9:0x0023\lDebug Info:\l  \-1 \-0x0023: r4 'positionStart' I\l  \-1 \-0x0023: r5 'itemCount' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_10[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_10 -> Node_1;
Node_9 -> Node_1;
}

