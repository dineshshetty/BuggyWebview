digraph "CFG forandroidx.recyclerview.widget.RecyclerView.Adapter.setHasStableIds(Z)V" {
subgraph cluster_Region_671400621 {
label = "R(1:(2:(1:7)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_926320623 {
label = "R(2:(1:7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1734429165 {
label = "IF [B:11:0x0004] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (hasObservers() != false) goto L6\l}"];
subgraph cluster_Region_245059490 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0010|throw new java.lang.IllegalStateException(\"Cannot change whether this adapter has stable IDs while the adapter has registered observers.\")\l}"];
}
}
subgraph cluster_Region_8713590 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0006|r2.mHasStableIds = r3\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0008}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0009}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.RecyclerView.Adapter.setHasStableIds((r2v0 'this' androidx.recyclerview.widget.RecyclerView$Adapter\<VH extends androidx.recyclerview.widget.RecyclerView$ViewHolder\> A[D('this' androidx.recyclerview.widget.RecyclerView$Adapter\<VH extends androidx.recyclerview.widget.RecyclerView$ViewHolder\>), IMMUTABLE_TYPE, THIS]), (r3v0 'hasStableIds' boolean A[D('hasStableIds' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0010 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [VH extends androidx.recyclerview.widget.RecyclerView$ViewHolder]\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.Adapter.setHasStableIds(boolean):void]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

