digraph "CFG forandroidx.recyclerview.widget.DefaultItemAnimator.endChangeAnimationIfNecessary(Landroidx\/recyclerview\/widget\/DefaultItemAnimator$ChangeInfo;Landroidx\/recyclerview\/widget\/RecyclerView$ViewHolder;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = false\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r4.newHolder != r5) goto L7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|r4.newHolder = null\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|PHI: r0 \l  PHI: (r0v2 'oldItem' boolean) = (r0v1 'oldItem' boolean), (r0v0 'oldItem' boolean) binds: [B:7:0x000d, B:4:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|r5.itemView.setAlpha(1.0f)\lr5.itemView.setTranslationX(0.0f)\lr5.itemView.setTranslationY(0.0f)\ldispatchChangeFinished(r5, r0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009}"];
Node_6 [shape=record,label="{6\:\ 0x000b|if (r4.oldHolder != r5) goto L10\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|r4.oldHolder = null\lr0 = true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private boolean androidx.recyclerview.widget.DefaultItemAnimator.endChangeAnimationIfNecessary((r3v0 'this' androidx.recyclerview.widget.DefaultItemAnimator A[IMMUTABLE_TYPE, THIS]), (r4v0 'changeInfo' androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo A[D('changeInfo' androidx.recyclerview.widget.DefaultItemAnimator$ChangeInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'item' androidx.recyclerview.widget.RecyclerView$ViewHolder A[D('item' androidx.recyclerview.widget.RecyclerView$ViewHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000d \-\> B:8:0x0010, CROSS_EDGE: B:11:0x0028 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_10 -> Node_1;
}

