digraph "CFG forandroidx.recyclerview.widget.DefaultItemAnimator.animateRemove(Landroidx\/recyclerview\/widget\/RecyclerView$ViewHolder;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  \l  (r1 I:androidx.recyclerview.widget.DefaultItemAnimator)\l  (r2 I:androidx.recyclerview.widget.RecyclerView$ViewHolder A[D('holder' androidx.recyclerview.widget.RecyclerView$ViewHolder)])\l type: DIRECT call: androidx.recyclerview.widget.DefaultItemAnimator.resetAnimation(androidx.recyclerview.widget.RecyclerView$ViewHolder):void A[MD:(androidx.recyclerview.widget.RecyclerView$ViewHolder):void (m)] (LINE:193)\l0x0003: IGET  (r0 I:java.util.ArrayList\<androidx.recyclerview.widget.RecyclerView$ViewHolder\>) = (r1 I:androidx.recyclerview.widget.DefaultItemAnimator) androidx.recyclerview.widget.DefaultItemAnimator.mPendingRemovals java.util.ArrayList  (LINE:194)\l0x0005: INVOKE  (r0 I:java.util.ArrayList), (r2 I:java.lang.Object A[D('holder' androidx.recyclerview.widget.RecyclerView$ViewHolder)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0008: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:195)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean androidx.recyclerview.widget.DefaultItemAnimator.animateRemove((r1 'this' I:androidx.recyclerview.widget.DefaultItemAnimator A[IMMUTABLE_TYPE, THIS]), (r2 I:androidx.recyclerview.widget.RecyclerView$ViewHolder A[D('holder' androidx.recyclerview.widget.RecyclerView$ViewHolder), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0009: r2 'holder' Landroidx\/recyclerview\/widget\/RecyclerView$ViewHolder;\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.SimpleItemAnimator.animateRemove(androidx.recyclerview.widget.RecyclerView$ViewHolder):boolean]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

