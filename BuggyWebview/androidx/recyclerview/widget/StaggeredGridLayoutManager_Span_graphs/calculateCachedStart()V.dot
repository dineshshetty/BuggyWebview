digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.Span.calculateCachedStart()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|android.view.View r0 = r5.mViews.get(0)\landroidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams r1 = getLayoutParams(r0)\lr5.mCachedStart = r5.this$0.mPrimaryOrientation.getDecoratedStart(r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|if (r1.mFullSpan == false) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem r2 = r5.this$0.mLazySpanLookup.getFullSpanItem(r1.getViewLayoutPosition())\l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|if (r2 == null) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029}"];
Node_7 [shape=record,label="{7\:\ 0x002c|if (r2.mGapDir != (\-1)) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x002e|r5.mCachedStart = r5.mCachedStart \- r2.getGapForSpan(r5.mIndex)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0039|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.StaggeredGridLayoutManager.Span.calculateCachedStart((r5v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager$Span A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x002c \-\> B:9:0x0039, CROSS_EDGE: B:5:0x0027 \-\> B:9:0x0039, CROSS_EDGE: B:3:0x0019 \-\> B:9:0x0039\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_12 -> Node_1;
Node_11 -> Node_1;
Node_10 -> Node_1;
}

