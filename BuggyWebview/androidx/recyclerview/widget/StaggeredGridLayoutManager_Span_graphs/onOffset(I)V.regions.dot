digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.Span.onOffset(I)V" {
subgraph cluster_Region_2083495028 {
label = "R(4:1|(1:3)|4|(1:(1:6)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|int int r0 = r2.mCachedStart\l}"];
subgraph cluster_IfRegion_1471007092 {
label = "IF [B:3:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r0 != Integer.MIN_VALUE) goto L3\l}"];
subgraph cluster_Region_1873109635 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|r2.mCachedStart = r0 + r3\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0009|int int r0 = r2.mCachedEnd\l}"];
subgraph cluster_Region_589004750 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_427819222 {
label = "IF [B:6:0x000b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000b|if (r0 != Integer.MIN_VALUE) goto L6\l}"];
subgraph cluster_Region_432862126 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x000d|r2.mCachedEnd = r0 + r3\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0010|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.StaggeredGridLayoutManager.Span.onOffset((r2v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager$Span A[IMMUTABLE_TYPE, THIS]), (r3v0 'dt' int A[D('dt' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000b \-\> B:8:0x0010, CROSS_EDGE: B:3:0x0004 \-\> B:5:0x0009\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_0 -> Node_2;
Node_8 -> Node_1;
Node_9 -> Node_1;
}

