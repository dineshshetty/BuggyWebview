digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.Span.calculateCachedEnd()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.ArrayList\<android.view.View\> r0 = r5.mViews\landroid.view.View r0 = r0.get(r0.size() \- 1)\landroidx.recyclerview.widget.StaggeredGridLayoutManager$LayoutParams r1 = getLayoutParams(r0)\lr5.mCachedEnd = r5.this$0.mPrimaryOrientation.getDecoratedEnd(r0)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|if (r1.mFullSpan == false) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem r3 = r5.this$0.mLazySpanLookup.getFullSpanItem(r1.getViewLayoutPosition())\l}"];
Node_5 [shape=record,label="{5\:\ 0x002c|if (r3 == null) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x002e}"];
Node_7 [shape=record,label="{7\:\ 0x0030|if (r3.mGapDir != 1) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|r5.mCachedEnd = r5.mCachedEnd + r3.getGapForSpan(r5.mIndex)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003d|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.StaggeredGridLayoutManager.Span.calculateCachedEnd((r5v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager$Span A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0030 \-\> B:9:0x003d, CROSS_EDGE: B:5:0x002c \-\> B:9:0x003d, CROSS_EDGE: B:3:0x001e \-\> B:9:0x003d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_12 -> Node_1;
Node_11 -> Node_1;
Node_10 -> Node_1;
}

