digraph "CFG forandroidx.recyclerview.widget.AsyncListDiffer.onCurrentListChanged(Ljava\/util\/List;Ljava\/lang\/Runnable;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|java.util.Iterator r0 = r3.mListeners.iterator()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|LOOP_START\lLOOP:0: B:14:0x0006\-\>B:16:0x000c\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|if (r0.hasNext() == false) goto L5\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|LOOP_END\lLOOP:0: B:14:0x0006\-\>B:16:0x000c\l|androidx.recyclerview.widget.AsyncListDiffer$ListListener r1 = r0.next()\lr1.onCurrentListChanged(r4, r3.mReadOnlyList)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|if (r5 == null) goto L10\l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|r5.run()\l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|RETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.AsyncListDiffer.onCurrentListChanged((r3v0 'this' androidx.recyclerview.widget.AsyncListDiffer\<T\> A[D('this' androidx.recyclerview.widget.AsyncListDiffer\<T\>), IMMUTABLE_TYPE, THIS]), (r4v0 'previousList' java.util.List\<T\> A[D('previousList' java.util.List\<T\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'commitCallback' java.lang.Runnable A[D('commitCallback' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:16:0x000c \-\> B:14:0x0006, CROSS_EDGE: B:17:0x0018 \-\> B:19:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Ljava\/util\/List\<TT;\>;Ljava\/lang\/Runnable;)V\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_14;
Node_20 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_21 -> Node_12;
}

