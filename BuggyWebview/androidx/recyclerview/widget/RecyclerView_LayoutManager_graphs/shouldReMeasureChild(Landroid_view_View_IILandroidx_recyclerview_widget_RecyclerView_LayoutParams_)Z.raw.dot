digraph "CFG forandroidx.recyclerview.widget.RecyclerView.LayoutManager.shouldReMeasureChild(Landroid\/view\/View;IILandroidx\/recyclerview\/widget\/RecyclerView$LayoutParams;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r2 I:androidx.recyclerview.widget.RecyclerView$LayoutManager) androidx.recyclerview.widget.RecyclerView.LayoutManager.mMeasurementCacheEnabled boolean  (LINE:9293)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001f \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r3 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredWidth():int A[MD:():int (c)] (LINE:9294)\l0x0008: IGET  (r1 I:int) = \l  (r6 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams)])\l androidx.recyclerview.widget.RecyclerView.LayoutParams.width int \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:int), (r4 I:int A[D('widthSpec' int)]), (r1 I:int) type: STATIC call: androidx.recyclerview.widget.RecyclerView.LayoutManager.isMeasurementUpToDate(int, int, int):boolean A[MD:(int, int, int):boolean (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001f \l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|0x0010: INVOKE  (r0 I:int) = (r3 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getMeasuredHeight():int A[MD:():int (c)] (LINE:9295)\l0x0014: IGET  (r1 I:int) = \l  (r6 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams)])\l androidx.recyclerview.widget.RecyclerView.LayoutParams.height int \l0x0016: INVOKE  (r0 I:boolean) = (r0 I:int), (r5 I:int A[D('heightSpec' int)]), (r1 I:int) type: STATIC call: androidx.recyclerview.widget.RecyclerView.LayoutManager.isMeasurementUpToDate(int, int, int):boolean A[MD:(int, int, int):boolean (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001d \l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|SYNTHETIC\lRETURN\l|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:9293)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0020: RETURN  (r0 I:boolean)  (LINE:9293)\l}"];
MethodNode[shape=record,label="{public boolean androidx.recyclerview.widget.RecyclerView.LayoutManager.shouldReMeasureChild((r2 'this' I:androidx.recyclerview.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('widthSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('heightSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001f \-\> B:24:0x0020, CROSS_EDGE: B:18:0x000e \-\> B:23:0x001f, CROSS_EDGE: B:16:0x0002 \-\> B:23:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r3 'child' Landroid\/view\/View;\l  \-1 \-0x0020: r4 'widthSpec' I\l  \-1 \-0x0020: r5 'heightSpec' I\l  \-1 \-0x0020: r6 'lp' Landroidx\/recyclerview\/widget\/RecyclerView$LayoutParams;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_23[style=dashed];
Node_22 -> Node_14;
Node_23 -> Node_14;
}

