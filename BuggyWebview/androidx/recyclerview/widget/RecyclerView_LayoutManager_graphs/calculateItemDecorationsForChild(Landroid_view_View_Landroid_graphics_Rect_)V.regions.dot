digraph "CFG forandroidx.recyclerview.widget.RecyclerView.LayoutManager.calculateItemDecorationsForChild(Landroid\/view\/View;Landroid\/graphics\/Rect;)V" {
subgraph cluster_Region_975274910 {
label = "R(2:1|(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|androidx.recyclerview.widget.RecyclerView androidx.recyclerview.widget.RecyclerView r0 = r1.mRecyclerView\l}"];
subgraph cluster_Region_250807091 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1751283932 {
label = "IF [B:11:0x0002] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_1297826096 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|r3.set(0, 0, 0, 0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_2105193930 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0009|android.graphics.Rect android.graphics.Rect r0 = r0.getItemDecorInsetsForChild(r2)\lr3.set(r0)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0010}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.RecyclerView.LayoutManager.calculateItemDecorationsForChild((r1v0 'this' androidx.recyclerview.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r2v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'outRect' android.graphics.Rect A[D('outRect' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0010 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_8 -> Node_10;
Node_15 -> Node_9;
}

