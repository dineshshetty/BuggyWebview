digraph "CFG forandroidx.recyclerview.widget.RecyclerView.LayoutManager.isMeasurementUpToDate(III)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:int A[D('spec' int)]) type: STATIC call: android.view.View.MeasureSpec.getMode(int):int A[MD:(int):int (c)] (LINE:9340)\l0x0004: INVOKE  (r1 I:int) = (r5 I:int A[D('spec' int)]) type: STATIC call: android.view.View.MeasureSpec.getSize(int):int A[MD:(int):int (c)] (LINE:9341)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:9342)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|0x0009: IF  (r6 I:??[int, byte, short, char] A[D('dimension' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:24:0x000e \l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childSize' int)]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dimension' int)])  \-\> B:24:0x000e \l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|RETURN\l|0x000d: RETURN  (r2 I:boolean)  (LINE:9343)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:9345)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|0x000f: SWITCH  (r0 I:?? A[D('specMode' int)])\l case \-2147483648: goto B:31:0x0018\l case 0: goto B:30:0x0017\l case 1073741824: goto B:27:0x0013\l default: goto B:26:0x0012 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0012|RETURN\l|0x0012: RETURN  (r2 I:boolean)  (LINE:9353)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|0x0013: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('specSize' int)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childSize' int)])  \-\> B:34:?  (LINE:9351)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|RETURN\lORIG_RETURN\l|0x0015: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0016: RETURN  (r2 I:boolean) \l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x0016: RETURN  (r2 I:boolean) A[SYNTHETIC]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0017|RETURN\l|0x0017: RETURN  (r3 I:boolean)  (LINE:9347)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|0x0018: IF  (r1 I:??[int, byte, short, char] A[D('specSize' int)]) \< (r4 I:??[int, byte, short, char] A[D('childSize' int)])  \-\> B:35:?  (LINE:9349)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001b: RETURN  (r2 I:boolean) \l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r2 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{private static boolean androidx.recyclerview.widget.RecyclerView.LayoutManager.isMeasurementUpToDate((r4 I:int A[D('childSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('spec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('dimension' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0012 \-\> B:19:?, CROSS_EDGE: B:29:0x0016 \-\> B:19:?, CROSS_EDGE: B:27:0x0013 \-\> B:29:0x0016, CROSS_EDGE: B:30:0x0017 \-\> B:19:?, CROSS_EDGE: B:33:0x001b \-\> B:19:?, CROSS_EDGE: B:31:0x0018 \-\> B:33:0x001b, CROSS_EDGE: B:21:0x0009 \-\> B:24:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0029: r0 'specMode' I\l  0x0008\-0x0029: r1 'specSize' I\l  \-1 \-0x0029: r4 'childSize' I\l  \-1 \-0x0029: r5 'spec' I\l  \-1 \-0x0029: r6 'dimension' I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_27;
Node_25 -> Node_30;
Node_25 -> Node_31;
Node_26 -> Node_19;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_19;
Node_34 -> Node_19;
Node_30 -> Node_19;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_19;
Node_35 -> Node_19;
}

