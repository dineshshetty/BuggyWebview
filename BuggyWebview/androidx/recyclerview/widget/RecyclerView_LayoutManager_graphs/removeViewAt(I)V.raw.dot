digraph "CFG forandroidx.recyclerview.widget.RecyclerView.LayoutManager.removeViewAt(I)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:android.view.View) = (r2 I:androidx.recyclerview.widget.RecyclerView$LayoutManager), (r3 I:int A[D('index' int)]) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.LayoutManager.getChildAt(int):android.view.View A[MD:(int):android.view.View (m)] (LINE:8637)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('child' android.view.View)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:8638)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IGET  (r1 I:androidx.recyclerview.widget.ChildHelper) = (r2 I:androidx.recyclerview.widget.RecyclerView$LayoutManager) androidx.recyclerview.widget.RecyclerView.LayoutManager.mChildHelper androidx.recyclerview.widget.ChildHelper  (LINE:8639)\l0x0008: INVOKE  (r1 I:androidx.recyclerview.widget.ChildHelper), (r3 I:int A[D('index' int)]) type: VIRTUAL call: androidx.recyclerview.widget.ChildHelper.removeViewAt(int):void A[MD:(int):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\lORIG_RETURN\l|0x000b: RETURN    (LINE:8641)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000b: RETURN   A[SYNTHETIC] (LINE:8641)\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.RecyclerView.LayoutManager.removeViewAt((r2 'this' I:androidx.recyclerview.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:12:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000b: r0 'child' Landroid\/view\/View;\l  \-1 \-0x000b: r3 'index' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

