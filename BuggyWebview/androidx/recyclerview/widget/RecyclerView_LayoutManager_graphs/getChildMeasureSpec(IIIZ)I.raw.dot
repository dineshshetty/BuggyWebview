digraph "CFG forandroidx.recyclerview.widget.RecyclerView.LayoutManager.getChildMeasureSpec(IIIZ)I" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: ARITH  (r0 I:int) = (r4 I:int A[D('parentSize' int)]) \- (r5 I:int A[D('padding' int)])  (LINE:9403)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:int) = (r1 I:int), (r0 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:9404)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:9405)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|0x0009: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('canScroll' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0014  (LINE:9406)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|0x000b: IF  (r6 I:??[int, byte, short, char] A[D('childDimension' int)]) \< (0 ??[int, byte, short, char])  \-\> B:23:0x0011  (LINE:9407)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|0x000d: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultSize' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('childDimension' int)])  (LINE:9408)\l0x000e: CONST  (r2 I:??[int, float, short, byte, char] A[D('resultMode' int)]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:9409)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0027|0x0027: INVOKE  (r3 I:int) = (r1 I:int A[D('resultSize' int)]), (r2 I:int A[D('resultMode' int)]) type: STATIC call: android.view.View.MeasureSpec.makeMeasureSpec(int, int):int A[MD:(int, int):int (c)] (LINE:9429)\l}"];
Node_33 [shape=record,label="{33\:\ 0x002b|RETURN\l|0x002b: RETURN  (r3 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultSize' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:9413)\l0x0012: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultMode' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:9414)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|0x0014: IF  (r6 I:??[int, byte, short, char] A[D('childDimension' int)]) \< (0 ??[int, byte, short, char])  \-\> B:26:0x001a  (LINE:9417)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|0x0016: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultSize' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('childDimension' int)])  (LINE:9418)\l0x0017: CONST  (r2 I:??[int, float, short, byte, char] A[D('resultMode' int)]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:9419)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001a|0x001a: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:9420)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001b|0x001b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childDimension' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0021 \l}"];
Node_28 [shape=record,label="{28\:\ 0x001d|0x001d: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultSize' int)]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('size' int)])  (LINE:9421)\l0x001e: CONST  (r2 I:??[int, float, short, byte, char] A[D('resultMode' int)]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:9423)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0021|0x0021: CONST  (r3 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char])  (LINE:9424)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|0x0022: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('childDimension' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0027 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|0x0024: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultSize' int)]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('size' int)])  (LINE:9425)\l0x0025: CONST  (r2 I:??[int, float, short, byte, char] A[D('resultMode' int)]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char])  (LINE:9426)\l}"];
MethodNode[shape=record,label="{public static int androidx.recyclerview.widget.RecyclerView.LayoutManager.getChildMeasureSpec((r4 I:int A[D('parentSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('padding' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('childDimension' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('canScroll' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Ljava\/lang\/Deprecated;=Annotation\{RUNTIME, type=Ljava\/lang\/Deprecated;, values=\{\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x002b: r0 'size' I\l  0x0008\-0x002b: r1 'resultSize' I\l  0x0009\-0x002b: r2 'resultMode' I\l  \-1 \-0x002b: r4 'parentSize' I\l  \-1 \-0x002b: r5 'padding' I\l  \-1 \-0x002b: r6 'childDimension' I\l  \-1 \-0x002b: r7 'canScroll' Z\lCROSS_EDGE: B:23:0x0011 \-\> B:32:0x0027, CROSS_EDGE: B:25:0x0016 \-\> B:32:0x0027, CROSS_EDGE: B:28:0x001d \-\> B:32:0x0027, CROSS_EDGE: B:31:0x0024 \-\> B:32:0x0027, CROSS_EDGE: B:30:0x0022 \-\> B:32:0x0027\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_18;
Node_23 -> Node_32;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
}

