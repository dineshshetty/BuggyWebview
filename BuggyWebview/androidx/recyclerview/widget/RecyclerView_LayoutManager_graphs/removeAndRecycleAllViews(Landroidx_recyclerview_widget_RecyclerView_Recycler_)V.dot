digraph "CFG forandroidx.recyclerview.widget.RecyclerView.LayoutManager.removeAndRecycleAllViews(Landroidx\/recyclerview\/widget\/RecyclerView$Recycler;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|int r0 = getChildCount() + (\-1)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|LOOP_START\lLOOP:0: B:15:0x0006\-\>B:19:0x0019\lPHI: r0 \l  PHI: (r0v2 'i' int) = (r0v1 'i' int), (r0v3 'i' int) binds: [B:14:0x0000, B:19:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \< 0) goto L9\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|android.view.View r1 = getChildAt(r0)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|if (androidx.recyclerview.widget.RecyclerView.getChildViewHolderInt(r1).shouldIgnore() != false) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|removeAndRecycleViewAt(r0, r4)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0019|LOOP_END\lLOOP:0: B:15:0x0006\-\>B:19:0x0019\l|int r0 = r0 + (\-1)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.RecyclerView.LayoutManager.removeAndRecycleAllViews((r3v0 'this' androidx.recyclerview.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r4v0 'recycler' androidx.recyclerview.widget.RecyclerView$Recycler A[D('recycler' androidx.recyclerview.widget.RecyclerView$Recycler), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0019 \-\> B:15:0x0006, CROSS_EDGE: B:17:0x0014 \-\> B:19:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_22;
Node_22 -> Node_19;
Node_19 -> Node_15;
Node_23 -> Node_19;
Node_21 -> Node_20;
Node_20 -> Node_13;
}

