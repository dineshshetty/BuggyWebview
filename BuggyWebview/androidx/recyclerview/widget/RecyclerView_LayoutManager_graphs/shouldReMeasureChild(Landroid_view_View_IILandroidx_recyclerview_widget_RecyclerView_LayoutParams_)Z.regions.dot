digraph "CFG forandroidx.recyclerview.widget.RecyclerView.LayoutManager.shouldReMeasureChild(Landroid\/view\/View;IILandroidx\/recyclerview\/widget\/RecyclerView$LayoutParams;)Z" {
subgraph cluster_Region_1190292362 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0002|RETURN\l|return (r2.mMeasurementCacheEnabled && isMeasurementUpToDate(r3.getMeasuredWidth(), r4, r6.width) && isMeasurementUpToDate(r3.getMeasuredHeight(), r5, r6.height)) ? false : true\l}"];
}
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0000}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0004}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000e|REMOVE\lADDED_TO_REGION\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0010}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x001a|REMOVE\lADDED_TO_REGION\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x001d|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x001f|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public boolean androidx.recyclerview.widget.RecyclerView.LayoutManager.shouldReMeasureChild((r2v0 'this' androidx.recyclerview.widget.RecyclerView$LayoutManager A[IMMUTABLE_TYPE, THIS]), (r3v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'widthSpec' int A[D('widthSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'heightSpec' int A[D('heightSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'lp' androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001f \-\> B:24:0x0020, CROSS_EDGE: B:18:0x000e \-\> B:23:0x001f, CROSS_EDGE: B:16:0x0002 \-\> B:23:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_16 -> Node_17;
Node_16 -> Node_23;
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_23;
Node_22 -> Node_14;
Node_23 -> Node_14;
}

