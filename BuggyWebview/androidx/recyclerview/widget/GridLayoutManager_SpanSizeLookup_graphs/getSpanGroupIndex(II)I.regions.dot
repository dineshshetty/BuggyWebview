digraph "CFG forandroidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup.getSpanGroupIndex(II)I" {
subgraph cluster_Region_779867239 {
label = "R(6:1|(2:5|(1:7))|8|(3:10|(1:12)(1:(1:16)(0))|14)|20|(2:(1:23)|(1:25))) | DECL_VAR: int prevKey\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0000|int r0 = 0\lint r1 = 0\lint r2 = 0\l}"];
subgraph cluster_IfRegion_23505464 {
label = "IF [B:29:0x0005, B:31:0x000e] THEN: R(2:5|(1:7)) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0005|if (r6.mCacheSpanGroupIndices != false) goto L3\l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|ADDED_TO_REGION\l|if ((r3 = findFirstKeyLessThan(r6.mSpanGroupIndexCache, r7)) != (\-1)) goto L5\l}"];
subgraph cluster_Region_849502399 {
label = "R(2:5|(1:7))";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0010|int r1 = r6.mSpanGroupIndexCache.get(r3)\lint r2 = r3 + 1\lint r0 = getCachedSpanIndex(r3, r8) + getSpanSize(r3)\l}"];
subgraph cluster_IfRegion_83048981 {
label = "IF [B:33:0x0022] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0022|if (r0 == r8) goto L7\l}"];
subgraph cluster_Region_732369563 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0024|r0 = 0\lr1++\l}"];
}
}
}
}
Node_35 [shape=record,label="{35\:\ 0x0027|PHI: r0 r1 r2 \l  PHI: (r0v1 'span' int) = (r0v0 'span' int), (r0v0 'span' int), (r0v7 'span' int), (r0v8 'span' int) binds: [B:29:0x0005, B:31:0x000e, B:33:0x0022, B:34:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'group' int) = (r1v0 'group' int), (r1v0 'group' int), (r1v7 'group' int), (r1v8 'group' int) binds: [B:29:0x0005, B:31:0x000e, B:33:0x0022, B:34:0x0024] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'start' int) = (r2v0 'start' int), (r2v0 'start' int), (r2v2 'start' int), (r2v2 'start' int) binds: [B:29:0x0005, B:31:0x000e, B:33:0x0022, B:34:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|int int r3 = getSpanSize(r7)\lint r4 = r2\l}"];
subgraph cluster_LoopRegion_1261168320 {
label = "LOOP:0: (3:10|(1:12)(1:(1:16)(0))|14)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x002c|LOOP_START\lLOOP:0: B:36:0x002c\-\>B:42:0x003e\lPHI: r0 r1 r4 \l  PHI: (r0v2 'span' int) = (r0v1 'span' int), (r0v5 'span' int) binds: [B:35:0x0027, B:42:0x003e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 'group' int) = (r1v1 'group' int), (r1v5 'group' int) binds: [B:35:0x0027, B:42:0x003e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'i' int) = (r4v0 'i' int), (r4v3 'i' int) binds: [B:35:0x0027, B:42:0x003e] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \< r7) goto L10\l}"];
subgraph cluster_Region_2086447128 {
label = "R(3:10|(1:12)(1:(1:16)(0))|14)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x002e|int int r5 = getSpanSize(r4)\lr0 += r5\l}"];
subgraph cluster_IfRegion_890018364 {
label = "IF [B:38:0x0033] THEN: R(1:12) ELSE: R(1:(1:16)(0))";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0033|if (r0 == r8) goto L12\l}"];
subgraph cluster_Region_1116359781 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0035|r0 = 0\lr1++\l}"];
}
subgraph cluster_Region_680537083 {
label = "R(1:(1:16)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_628425116 {
label = "IF [B:40:0x0039] THEN: R(1:16) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0039|if (r0 \> r8) goto L16\l}"];
subgraph cluster_Region_691462251 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x003b|r0 = r5\lr1++\l}"];
}
subgraph cluster_Region_1606420765 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_42 [shape=record,label="{42\:\ 0x003e|LOOP_END\lLOOP:0: B:36:0x002c\-\>B:42:0x003e\lPHI: r0 r1 \l  PHI: (r0v5 'span' int) = (r0v3 'span' int), (r0v4 'span' int), (r0v6 'span' int) binds: [B:50:0x003e, B:48:0x003e, B:49:0x003e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v5 'group' int) = (r1v2 'group' int), (r1v4 'group' int), (r1v6 'group' int) binds: [B:50:0x003e, B:48:0x003e, B:49:0x003e] A[DONT_GENERATE, DONT_INLINE]\l|r4++\l}"];
}
}
Node_43 [shape=record,label="{43\:\ 0x0041|int int r4 = r0 + r3\l}"];
subgraph cluster_Region_2008182647 {
label = "R(2:(1:23)|(1:25))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1452629538 {
label = "IF [B:44:0x0043] THEN: R(1:23) ELSE: null";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x0043|if (r4 \> r8) goto L22\l}"];
subgraph cluster_Region_399754202 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_46 [shape=record,label="{46\:\ 0x0047|RETURN\lORIG_RETURN\l|return r1 + 1\l}"];
}
}
subgraph cluster_Region_1189045862 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
}
}
}
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0007}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x003e|SYNTHETIC\l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x003e|SYNTHETIC\l}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x003e|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x0041|SYNTHETIC\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0045}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup.getSpanGroupIndex((r6v0 'this' androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup A[IMMUTABLE_TYPE, THIS]), (r7v0 'adapterPosition' int A[D('adapterPosition' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'spanCount' int A[D('spanCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:42:0x003e \-\> B:36:0x002c, CROSS_EDGE: B:41:0x003b \-\> B:42:0x003e, CROSS_EDGE: B:40:0x0039 \-\> B:42:0x003e, CROSS_EDGE: B:44:0x0043 \-\> B:46:0x0047, CROSS_EDGE: B:33:0x0022 \-\> B:35:0x0027, CROSS_EDGE: B:31:0x000e \-\> B:35:0x0027, CROSS_EDGE: B:29:0x0005 \-\> B:35:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_26;Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_35[style=dashed];
Node_31 -> Node_32;
Node_31 -> Node_35[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_35[style=dashed];
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_36 -> Node_47[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_38 -> Node_40[style=dashed];
Node_39 -> Node_49;
Node_40 -> Node_41;
Node_40 -> Node_50[style=dashed];
Node_41 -> Node_48;
Node_42 -> Node_36;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_44 -> Node_51[style=dashed];
Node_46 -> Node_27;
Node_51 -> Node_27;
Node_26 -> Node_28;
Node_30 -> Node_31;
Node_49 -> Node_42;
Node_48 -> Node_42;
Node_50 -> Node_42;
Node_47 -> Node_43;
Node_45 -> Node_46;
}

