digraph "CFG forandroidx.recyclerview.widget.PagerSnapHelper.1.onTargetFound(Landroid\/view\/View;Landroidx\/recyclerview\/widget\/RecyclerView$State;Landroidx\/recyclerview\/widget\/RecyclerView$SmoothScroller$Action;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|androidx.recyclerview.widget.PagerSnapHelper r0 = androidx.recyclerview.widget.PagerSnapHelper.this\lint[] r0 = r0.calculateDistanceToFinalSnap(r0.mRecyclerView.getLayoutManager(), r6)\lr1 = r0[0]\lr2 = r0[1]\lint r3 = calculateTimeForDeceleration(java.lang.Math.max(java.lang.Math.abs(r1), java.lang.Math.abs(r2)))\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|if (r3 \<= 0) goto L6\l}"];
Node_11 [shape=record,label="{11\:\ 0x0024|r8.update(r1, r2, r3, r5.mDecelerateInterpolator)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|RETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void androidx.recyclerview.widget.PagerSnapHelper.1.onTargetFound((r5v0 'this' androidx.recyclerview.widget.PagerSnapHelper$1 A[IMMUTABLE_TYPE, THIS]), (r6v0 'targetView' android.view.View A[D('targetView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'state' androidx.recyclerview.widget.RecyclerView$State A[D('state' androidx.recyclerview.widget.RecyclerView$State), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'action' androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action A[D('action' androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0022 \-\> B:12:0x0029\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.SmoothScroller.onTargetFound(android.view.View, androidx.recyclerview.widget.RecyclerView$State, androidx.recyclerview.widget.RecyclerView$SmoothScroller$Action):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

