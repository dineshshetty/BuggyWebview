digraph "CFG forandroidx.recyclerview.widget.AsyncDifferConfig.Builder.build()Landroidx\/recyclerview\/widget\/AsyncDifferConfig;" {
subgraph cluster_Region_660838069 {
label = "R(2:(3:3|6|10)|17)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_931873771 {
label = "IF [B:21:0x0002] THEN: R(3:3|6|10) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0002|if (r4.mBackgroundThreadExecutor == null) goto L3\l}"];
subgraph cluster_Region_641069565 {
label = "R(3:3|6|10)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0004}"];
subgraph cluster_SynchronizedRegion_1545570630 {
label = "Synchronized:R(2:4|(1:(1:8)))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0006}"];
subgraph cluster_Region_1743944270 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_168552768 {
label = "IF [B:25:0x0009] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0009|if (androidx.recyclerview.widget.AsyncDifferConfig.Builder.sDiffExecutor == null) goto L8\l}"];
subgraph cluster_Region_62413797 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x000b|TryCatch #0 \{, blocks: (B:24:0x0007, B:26:0x000b, B:27:0x0012), top: B:34:0x0007 \}\lCatch: all \-\> 0x0018\l|androidx.recyclerview.widget.AsyncDifferConfig.Builder.sDiffExecutor = java.util.concurrent.Executors.newFixedThreadPool(2)     \/\/ Catch: java.lang.Throwable \-\> L18\l}"];
}
}
}
}
Node_28 [shape=record,label="{28\:\ 0x0013|r4.mBackgroundThreadExecutor = androidx.recyclerview.widget.AsyncDifferConfig.Builder.sDiffExecutor\l}"];
}
}
Node_33 [shape=record,label="{33\:\ 0x0026|RETURN\l|return new androidx.recyclerview.widget.AsyncDifferConfig\<\>(r4.mMainThreadExecutor, r4.mBackgroundThreadExecutor, r4.mDiffCallback)\l}"];
}
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0000}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0007|TRY_ENTER\lTryCatch #0 \{, blocks: (B:24:0x0007, B:26:0x000b, B:27:0x0012), top: B:34:0x0007 \}\lCatch: all \-\> 0x0018\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0012|TRY_LEAVE\lDONT_GENERATE\lTryCatch #0 \{, blocks: (B:24:0x0007, B:26:0x000b, B:27:0x0012), top: B:34:0x0007 \}\lCatch: all \-\> 0x0018\l|monitor\-exit()     \/\/ Catch: java.lang.Throwable \-\> L18\l}"];
Node_35 [shape=record,color=red,label="{35\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0018|REMOVE\lExcHandler: all \-\> 0x0018\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0019|TRY_ENTER\lTRY_LEAVE\lREMOVE\lCatch: all \-\> 0x0018\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x001a|REMOVE\l|throw r1\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x001b}"];
MethodNode[shape=record,label="{public androidx.recyclerview.widget.AsyncDifferConfig\<T\> androidx.recyclerview.widget.AsyncDifferConfig.Builder.build((r4v0 'this' androidx.recyclerview.widget.AsyncDifferConfig$Builder\<T\> A[D('this' androidx.recyclerview.widget.AsyncDifferConfig$Builder\<T\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x001a \-\> B:19:?, CROSS_EDGE: B:25:0x0009 \-\> B:27:0x0012, CROSS_EDGE: B:34:0x0007 \-\> B:29:0x0018, CROSS_EDGE: B:21:0x0002 \-\> B:32:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: ()Landroidx\/recyclerview\/widget\/AsyncDifferConfig\<TT;\>;\l}"];
MethodNode -> Node_18;Node_21 -> Node_22;
Node_21 -> Node_32[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_34;
Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_28 -> Node_32;
Node_33 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_34 -> Node_24;
Node_34 -> Node_29;
Node_24 -> Node_25;
Node_27 -> Node_28;
Node_27 -> Node_35;
Node_35 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
}

