digraph "CFG forandroidx.recyclerview.widget.LinearLayoutManager.AnchorInfo.isViewValidAsAnchor(Landroid\/view\/View;Landroidx\/recyclerview\/widget\/RecyclerView$State;)Z" {
subgraph cluster_Region_2102739488 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|androidx.recyclerview.widget.RecyclerView$LayoutParams androidx.recyclerview.widget.RecyclerView.LayoutParams r0 = (androidx.recyclerview.widget.RecyclerView.LayoutParams) r4.getLayoutParams()\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|RETURN\l|return !r0.isItemRemoved() && r0.getViewLayoutPosition() \>= 0 && r0.getViewLayoutPosition() \< r5.getItemCount()\l}"];
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000c}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0010|REMOVE\lADDED_TO_REGION\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0012}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x001a|REMOVE\lADDED_TO_REGION\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x001c|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x001e|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{boolean androidx.recyclerview.widget.LinearLayoutManager.AnchorInfo.isViewValidAsAnchor((r3v0 'this' androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo A[IMMUTABLE_TYPE, THIS]), (r4v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'state' androidx.recyclerview.widget.RecyclerView$State A[D('state' androidx.recyclerview.widget.RecyclerView$State), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001e \-\> B:22:0x001f, CROSS_EDGE: B:17:0x0010 \-\> B:21:0x001e, CROSS_EDGE: B:15:0x000a \-\> B:21:0x001e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_21;
Node_12 -> Node_14;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_13;
Node_21 -> Node_13;
}

