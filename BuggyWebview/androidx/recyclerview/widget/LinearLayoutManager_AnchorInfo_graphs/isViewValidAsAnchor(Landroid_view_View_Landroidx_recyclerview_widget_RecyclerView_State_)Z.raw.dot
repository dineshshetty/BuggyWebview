digraph "CFG forandroidx.recyclerview.widget.LinearLayoutManager.AnchorInfo.isViewValidAsAnchor(Landroid\/view\/View;Landroidx\/recyclerview\/widget\/RecyclerView$State;)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:android.view.ViewGroup$LayoutParams) = (r4 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams A[MD:():android.view.ViewGroup$LayoutParams (c)] (LINE:2485)\l0x0004: CHECK_CAST (r0 I:androidx.recyclerview.widget.RecyclerView$LayoutParams) = (androidx.recyclerview.widget.RecyclerView$LayoutParams) (r0 I:??[OBJECT, ARRAY]) \l0x0006: INVOKE  (r1 I:boolean) = \l  (r0 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams)])\l type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.LayoutParams.isItemRemoved():boolean A[MD:():boolean (m)] (LINE:2486)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001e \l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|0x000c: INVOKE  (r1 I:int) = \l  (r0 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams)])\l type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.LayoutParams.getViewLayoutPosition():int A[MD:():int (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: IF  (r1 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:21:0x001e \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: INVOKE  (r1 I:int) = \l  (r0 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams)])\l type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.LayoutParams.getViewLayoutPosition():int A[MD:():int (m)] (LINE:2487)\l0x0016: INVOKE  (r2 I:int) = (r5 I:androidx.recyclerview.widget.RecyclerView$State A[D('state' androidx.recyclerview.widget.RecyclerView$State)]) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.State.getItemCount():int A[MD:():int (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|0x001a: IF  (r1 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:21:0x001e \l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|SYNTHETIC\lRETURN\l|0x001c: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001f: RETURN  (r1 I:boolean) A[SYNTHETIC] (LINE:2486)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: RETURN  (r1 I:boolean)  (LINE:2486)\l}"];
MethodNode[shape=record,label="{boolean androidx.recyclerview.widget.LinearLayoutManager.AnchorInfo.isViewValidAsAnchor((r3 'this' I:androidx.recyclerview.widget.LinearLayoutManager$AnchorInfo A[IMMUTABLE_TYPE, THIS]), (r4 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:androidx.recyclerview.widget.RecyclerView$State A[D('state' androidx.recyclerview.widget.RecyclerView$State), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001e \-\> B:22:0x001f, CROSS_EDGE: B:17:0x0010 \-\> B:21:0x001e, CROSS_EDGE: B:15:0x000a \-\> B:21:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x001f: r0 'lp' Landroidx\/recyclerview\/widget\/RecyclerView$LayoutParams;\l  \-1 \-0x001f: r4 'child' Landroid\/view\/View;\l  \-1 \-0x001f: r5 'state' Landroidx\/recyclerview\/widget\/RecyclerView$State;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_13;
Node_21 -> Node_13;
}

