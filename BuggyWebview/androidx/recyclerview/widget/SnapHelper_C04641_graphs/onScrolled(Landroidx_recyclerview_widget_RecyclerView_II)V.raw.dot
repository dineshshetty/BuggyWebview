digraph "CFG forandroidx.recyclerview.widget.SnapHelper.1.onScrolled(Landroidx\/recyclerview\/widget\/RecyclerView;II)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dx' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0004  (LINE:57)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dy' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0007: RETURN   A[SYNTHETIC] (LINE:60)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:58)\l0x0005: IPUT  (r0 I:boolean), (r1 I:androidx.recyclerview.widget.SnapHelper$1) androidx.recyclerview.widget.SnapHelper.1.mScrolled boolean \l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|RETURN\lORIG_RETURN\l|0x0007: RETURN    (LINE:60)\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.SnapHelper.1.onScrolled((r1 'this' I:androidx.recyclerview.widget.SnapHelper$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:androidx.recyclerview.widget.RecyclerView A[D('recyclerView' androidx.recyclerview.widget.RecyclerView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('dx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('dy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0007, CROSS_EDGE: B:9:0x0000 \-\> B:11:0x0004\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r2 'recyclerView' Landroidx\/recyclerview\/widget\/RecyclerView;\l  \-1 \-0x0007: r3 'dx' I\l  \-1 \-0x0007: r4 'dy' I\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.OnScrollListener.onScrolled(androidx.recyclerview.widget.RecyclerView, int, int):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_8;
}

