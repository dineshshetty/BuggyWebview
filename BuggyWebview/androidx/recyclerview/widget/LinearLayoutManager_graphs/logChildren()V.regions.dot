digraph "CFG forandroidx.recyclerview.widget.LinearLayoutManager.logChildren()V" {
subgraph cluster_Region_536612233 {
label = "R(3:1|(1:4)|6)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|android.util.Log.d(androidx.recyclerview.widget.LinearLayoutManager.TAG, \"internal representation of views on the screen\")\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1366368255 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000c|if (r1 \< getChildCount()) goto L4\l}"];
subgraph cluster_Region_1788103496 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000e|LOOP_END\lLOOP:0: B:12:0x0008\-\>B:14:0x000e\l|android.view.View android.view.View r2 = getChildAt(r1)\landroid.util.Log.d(androidx.recyclerview.widget.LinearLayoutManager.TAG, \"item \" + getPosition(r2) + \", coord:\" + r5.mOrientationHelper.getDecoratedStart(r2))\lr1++\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x003b|android.util.Log.d(androidx.recyclerview.widget.LinearLayoutManager.TAG, \"==============\")\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0008|LOOP_START\lLOOP:0: B:12:0x0008\-\>B:14:0x000e\lPHI: r1 \l  PHI: (r1v2 'i' int) = (r1v1 'i' int), (r1v4 'i' int) binds: [B:11:0x0000, B:14:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x003b|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0040}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.LinearLayoutManager.logChildren((r5v0 'this' androidx.recyclerview.widget.LinearLayoutManager A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x000e \-\> B:12:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_17[style=dashed];
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_9 -> Node_11;
Node_12 -> Node_13;
Node_17 -> Node_15;
Node_16 -> Node_10;
}

