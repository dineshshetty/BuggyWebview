digraph "CFG forandroidx.recyclerview.widget.LinearLayoutManager.updateLayoutState(IIZLandroidx\/recyclerview\/widget\/RecyclerView$State;)V" {
subgraph cluster_Region_1319695912 {
label = "R(8:1|2|7|10|(2:12|15)(2:22|25)|16|(1:18)|19) | DECL_VAR: int scrollingOffset\l";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0000|r9.mLayoutState.mInfinite = resolveIsInfinite()\lr9.mLayoutState.mLayoutDirection = r10\lint[] int[] r0 = r9.mReusableIntPair\lr0[0] = 0\lr0[1] = 0\lcalculateExtraLayoutSpace(r13, r0)\lint int r0 = java.lang.Math.max(0, r9.mReusableIntPair[0])\lint int r3 = java.lang.Math.max(0, r9.mReusableIntPair[1])\l}"];
Node_32 [shape=record,label="{32\:\ 0x0027|boolean r1 = r10 == 1\l}"];
Node_38 [shape=record,label="{38\:\ 0x0031|PHI: r5 \l  PHI: (r5v1 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r9.mLayoutState.mExtraFillSpace = r1 ? r3 : r0\l}"];
Node_42 [shape=record,label="{42\:\ 0x003a|PHI: r5 \l  PHI: (r5v3 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r9.mLayoutState.mNoRecycleSpace = r1 ? r0 : r3\l}"];
subgraph cluster_IfRegion_1533236454 {
label = "IF [B:43:0x003d] THEN: R(2:12|15) ELSE: R(2:22|25)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x003d|if (r1 != false) goto L12\l}"];
subgraph cluster_Region_1429118170 {
label = "R(2:12|15)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x003f|r9.mLayoutState.mExtraFillSpace += r9.mOrientationHelper.getEndPadding()\landroid.view.View android.view.View r5 = getChildClosestToEnd()\l}"];
Node_47 [shape=record,label="{47\:\ 0x0057|PHI: r2 \l  PHI: (r2v10 int A[REMOVE]) = (r2v0 int) binds: [B:45:0x0054] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r9.mLayoutState.mItemDirection = r9.mShouldReverseLayout ? \-1 : 1\lr9.mLayoutState.mCurrentPosition = getPosition(r5) + r9.mLayoutState.mItemDirection\lr9.mLayoutState.mOffset = r9.mOrientationHelper.getDecoratedEnd(r5)\lint r2 = r9.mOrientationHelper.getDecoratedEnd(r5) \- r9.mOrientationHelper.getEndAfterPadding()\l}"];
}
subgraph cluster_Region_1831236870 {
label = "R(2:22|25)";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x007e|android.view.View android.view.View r5 = getChildClosestToStart()\lr9.mLayoutState.mExtraFillSpace += r9.mOrientationHelper.getStartAfterPadding()\l}"];
Node_52 [shape=record,label="{52\:\ 0x0097|PHI: r2 \l  PHI: (r2v1 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r9.mLayoutState.mItemDirection = r9.mShouldReverseLayout ? 1 : \-1\lr9.mLayoutState.mCurrentPosition = getPosition(r5) + r9.mLayoutState.mItemDirection\lr9.mLayoutState.mOffset = r9.mOrientationHelper.getDecoratedStart(r5)\lint r2 = (\-r9.mOrientationHelper.getDecoratedStart(r5)) + r9.mOrientationHelper.getStartAfterPadding()\l}"];
}
}
Node_53 [shape=record,label="{53\:\ 0x00be|PHI: r2 \l  PHI: (r2v9 'scrollingOffset' int) = (r2v7 'scrollingOffset' int), (r2v15 'scrollingOffset' int) binds: [B:52:0x0097, B:47:0x0057] A[DONT_GENERATE, DONT_INLINE]\l|r9.mLayoutState.mAvailable = r11\l}"];
subgraph cluster_IfRegion_148041685 {
label = "IF [B:54:0x00c2] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x00c2|if (r12 != false) goto L18\l}"];
subgraph cluster_Region_682846464 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_55 [shape=record,label="{55\:\ 0x00c4|r9.mLayoutState.mAvailable \-= r2\l}"];
}
}
Node_56 [shape=record,label="{56\:\ 0x00cb|r9.mLayoutState.mScrollingOffset = r2\l}"];
}
Node_29 [shape=record,color=red,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0029}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x002a|PHI: r1 \l  PHI: (r1v2 'layoutToEnd' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x002c}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x002e}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0035}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0037}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0054}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0056}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x00cf}"];
Node_30 [shape=record,color=red,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x0093}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x0096}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0039}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0030}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.LinearLayoutManager.updateLayoutState((r9v0 'this' androidx.recyclerview.widget.LinearLayoutManager A[IMMUTABLE_TYPE, THIS]), (r10v0 'layoutDirection' int A[D('layoutDirection' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'requiredSpace' int A[D('requiredSpace' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'canUseExistingSpace' boolean A[D('canUseExistingSpace' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'state' androidx.recyclerview.widget.RecyclerView$State A[D('state' androidx.recyclerview.widget.RecyclerView$State), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:54:0x00c2 \-\> B:56:0x00cb, CROSS_EDGE: B:45:0x0054 \-\> B:47:0x0057, CROSS_EDGE: B:52:0x0097 \-\> B:53:0x00be, CROSS_EDGE: B:49:0x0093 \-\> B:52:0x0097, CROSS_EDGE: B:41:0x0039 \-\> B:42:0x003a, CROSS_EDGE: B:37:0x0030 \-\> B:38:0x0031, CROSS_EDGE: B:32:0x0027 \-\> B:34:0x002a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_29;Node_31 -> Node_32;
Node_32 -> Node_33;
Node_32 -> Node_34;
Node_38 -> Node_39;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_43 -> Node_48[style=dashed];
Node_44 -> Node_45;
Node_47 -> Node_53;
Node_48 -> Node_49;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_54 -> Node_56[style=dashed];
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_29 -> Node_31;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_39 -> Node_40;
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_45 -> Node_46;
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_57 -> Node_30;
Node_49 -> Node_51;
Node_49 -> Node_52;
Node_51 -> Node_52;
Node_41 -> Node_42;
Node_37 -> Node_38;
}

