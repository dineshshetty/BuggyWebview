digraph "CFG forandroidx.recyclerview.widget.RecyclerView.RecyclerViewDataObserver.onItemRangeChanged(IILjava\/lang\/Object;)V" {
subgraph cluster_Region_313385441 {
label = "R(2:1|(1:(1:3)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|androidx.recyclerview.widget.RecyclerView.this.assertNotInLayoutOrScroll(null)\l}"];
subgraph cluster_Region_22341281 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_210657939 {
label = "IF [B:10:0x000e] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000e|if (androidx.recyclerview.widget.RecyclerView.this.mAdapterHelper.onItemRangeChanged(r3, r4, r5) != false) goto L3\l}"];
subgraph cluster_Region_1521374580 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0010|triggerUpdateProcessor()\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0013|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.RecyclerView.RecyclerViewDataObserver.onItemRangeChanged((r2v0 'this' androidx.recyclerview.widget.RecyclerView$RecyclerViewDataObserver A[IMMUTABLE_TYPE, THIS]), (r3v0 'positionStart' int A[D('positionStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'itemCount' int A[D('itemCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'payload' java.lang.Object A[D('payload' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000e \-\> B:12:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.AdapterDataObserver.onItemRangeChanged(int, int, java.lang.Object):void]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

