digraph "CFG forandroidx.recyclerview.widget.RecyclerView.RecyclerViewDataObserver.triggerUpdateProcessor()V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0002|if (androidx.recyclerview.widget.RecyclerView.POST_UPDATES_ON_ANIMATION == false) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004}"];
Node_17 [shape=record,label="{17\:\ 0x0008|if (androidx.recyclerview.widget.RecyclerView.this.mHasFixedSize == false) goto L10\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a}"];
Node_19 [shape=record,label="{19\:\ 0x000e|if (androidx.recyclerview.widget.RecyclerView.this.mIsAttached == false) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|androidx.recyclerview.widget.RecyclerView r0 = androidx.recyclerview.widget.RecyclerView.this\landroidx.core.view.ViewCompat.postOnAnimation(r0, r0.mUpdateChildViewsRunnable)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|androidx.recyclerview.widget.RecyclerView.this.mAdapterUpdateDuringMeasure = true\landroidx.recyclerview.widget.RecyclerView.this.requestLayout()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0022|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.RecyclerView.RecyclerViewDataObserver.triggerUpdateProcessor((r2v0 'this' androidx.recyclerview.widget.RecyclerView$RecyclerViewDataObserver A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0018 \-\> B:22:0x0022, CROSS_EDGE: B:17:0x0008 \-\> B:21:0x0018, CROSS_EDGE: B:15:0x0002 \-\> B:21:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

