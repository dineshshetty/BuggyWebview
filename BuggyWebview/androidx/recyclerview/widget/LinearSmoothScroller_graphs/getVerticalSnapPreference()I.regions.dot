digraph "CFG forandroidx.recyclerview.widget.LinearSmoothScroller.getVerticalSnapPreference()I" {
subgraph cluster_Region_182037175 {
label = "R(2:1|(2:(1:10)|(1:6)))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0000|android.graphics.PointF android.graphics.PointF r0 = r2.mTargetVector\l}"];
subgraph cluster_Region_1202314535 {
label = "R(2:(1:10)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_534095254 {
label = "IF [B:18:0x0002, B:20:0x0009] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0002|if (r0 == null) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|ADDED_TO_REGION\l|if (r0.y == 0.0f) goto L10\l}"];
subgraph cluster_Region_50871107 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0018|RETURN\lORIG_RETURN\l|return 0\l}"];
}
}
subgraph cluster_Region_1223931975 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0012|RETURN\l|return r2.mTargetVector.y \> 0.0f ? 1 : \-1\l}"];
}
}
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0004}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x000c}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0014|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected int androidx.recyclerview.widget.LinearSmoothScroller.getVerticalSnapPreference((r2v0 'this' androidx.recyclerview.widget.LinearSmoothScroller A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0016 \-\> B:27:0x0019, CROSS_EDGE: B:26:0x0018 \-\> B:27:0x0019, CROSS_EDGE: B:18:0x0002 \-\> B:26:0x0018\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_15;Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_26;
Node_20 -> Node_22[style=dashed];
Node_20 -> Node_26;
Node_26 -> Node_16;
Node_23 -> Node_24;
Node_23 -> Node_25;
Node_15 -> Node_17;
Node_19 -> Node_20;
Node_22 -> Node_23;
Node_24 -> Node_16;
Node_25 -> Node_16;
}

