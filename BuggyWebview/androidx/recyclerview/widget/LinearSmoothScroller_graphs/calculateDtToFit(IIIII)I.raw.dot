digraph "CFG forandroidx.recyclerview.widget.LinearSmoothScroller.calculateDtToFit(IIIII)I" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: SWITCH  (r7 I:?? A[D('snapPreference' int)])\l case \-1: goto B:32:0x001a\l case 0: goto B:24:0x000e\l case 1: goto B:22:0x000b\l default: goto B:20:0x0003  (LINE:280)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|0x0003: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:296)\l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"snap preference should be one of the constants defined in SmoothScroller, starting with SNAP_\" \l0x0007: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: ARITH  (r0 I:int) = (r6 I:int A[D('boxEnd' int)]) \- (r4 I:int A[D('viewEnd' int)])  (LINE:284)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: ARITH  (r0 I:int) = (r5 I:int A[D('boxStart' int)]) \- (r3 I:int A[D('viewStart' int)])  (LINE:286)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|0x0010: IF  (r0 I:??[int, byte, short, char] A[D('dtStart' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:27:0x0013  (LINE:287)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:int A[D('dtStart' int)])  (LINE:288)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|0x0013: ARITH  (r1 I:int) = (r6 I:int A[D('boxEnd' int)]) \- (r4 I:int A[D('viewEnd' int)])  (LINE:290)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|0x0015: IF  (r1 I:??[int, byte, short, char] A[D('dtEnd' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:30:0x0018  (LINE:291)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:int A[D('dtEnd' int)])  (LINE:292)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0018|RETURN\l|0x0018: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dtStart' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:299)\l0x0019: RETURN  (r0 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: ARITH  (r0 I:int) = (r5 I:int A[D('boxStart' int)]) \- (r3 I:int A[D('viewStart' int)])  (LINE:282)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.LinearSmoothScroller.calculateDtToFit((r2 'this' I:androidx.recyclerview.widget.LinearSmoothScroller A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('viewStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('viewEnd' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('boxStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('boxEnd' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('snapPreference' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x000d \-\> B:18:?, CROSS_EDGE: B:26:0x0012 \-\> B:18:?, CROSS_EDGE: B:29:0x0017 \-\> B:18:?, CROSS_EDGE: B:31:0x0019 \-\> B:18:?, CROSS_EDGE: B:33:0x001c \-\> B:18:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0018: r0 'dtStart' I\l  0x0015\-0x0018: r1 'dtEnd' I\l  \-1 \-0x0027: r3 'viewStart' I\l  \-1 \-0x0027: r4 'viewEnd' I\l  \-1 \-0x0027: r5 'boxStart' I\l  \-1 \-0x0027: r6 'boxEnd' I\l  \-1 \-0x0027: r7 'snapPreference' I\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_22;
Node_19 -> Node_24;
Node_19 -> Node_32;
Node_20 -> Node_21;
Node_21 -> Node_18;
Node_22 -> Node_23;
Node_23 -> Node_18;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_18;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_18;
Node_30 -> Node_18;
Node_32 -> Node_33;
Node_33 -> Node_18;
}

