digraph "CFG forandroidx.recyclerview.widget.AsyncListUtil.ViewCallback.extendRangeInto([I[II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:577)\l0x0001: AGET  (r1 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][] A[D('range' int[])]), (r0 I:??[int, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: AGET  (r3 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][] A[D('range' int[])]), (r2 I:??[int, short, byte, char]) \l0x0006: ARITH  (r1 I:int) = (r1 I:int) \- (r3 I:int) \l0x0007: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x0008: ARITH  (r3 I:int) = (r1 I:int A[D('fullRange' int)]) \/ (2 int)  (LINE:578)\l0x000a: AGET  (r4 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][] A[D('range' int[])]), (r2 I:??[int, short, byte, char])  (LINE:579)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scrollHint' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fullRange' int)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|0x0011: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x0012: APUT  \l  (r8 I:??[int, float][] A[D('outRange' int[])])\l  (r2 I:??[int, short, byte, char])\l  (r4 I:??[int, float, short, byte, char])\l \l0x0014: AGET  (r2 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][] A[D('range' int[])]), (r0 I:??[int, short, byte, char])  (LINE:580)\l0x0016: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scrollHint' int)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fullRange' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|0x001c: ARITH  (r2 I:int) = (r2 I:int) + (r4 I:int) \l0x001d: APUT  \l  (r8 I:??[int, float][] A[D('outRange' int[])])\l  (r0 I:??[int, short, byte, char])\l  (r2 I:??[int, float, short, byte, char])\l \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|RETURN\l|0x001f: RETURN    (LINE:581)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('halfRange' int)]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('halfRange' int)]) \l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.AsyncListUtil.ViewCallback.extendRangeInto((r6 'this' I:androidx.recyclerview.widget.AsyncListUtil$ViewCallback A[IMMUTABLE_TYPE, THIS]), (r7 I:int[] A[D('range' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int[] A[D('outRange' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('scrollHint' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x001b \-\> B:10:0x001c, CROSS_EDGE: B:5:0x0010 \-\> B:6:0x0011\lDebug Info:\l  0x0008\-0x001f: r1 'fullRange' I\l  0x000a\-0x001f: r3 'halfRange' I\l  \-1 \-0x001f: r7 'range' [I\l  \-1 \-0x001f: r8 'outRange' [I\l  \-1 \-0x001f: r9 'scrollHint' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

