digraph "CFG forandroidx.recyclerview.widget.AsyncListUtil.2.requestTiles(IIIZ)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstTileStart' int)])  (LINE:355)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|LOOP_START\lLOOP:0: B:3:0x0001\-\>B:7:0x000a\l|0x0001: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \> (r5 I:??[int, byte, short, char] A[D('lastTileStart' int)])  \-\> B:9:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|0x0003: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('backwards' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0009  (LINE:356)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: ARITH  (r1 I:int) = (r5 I:int A[D('lastTileStart' int)]) + (r4 I:int A[D('firstTileStart' int)]) \l0x0007: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int A[D('i' int)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|LOOP_END\lLOOP:0: B:3:0x0001\-\>B:7:0x000a\l|0x000a: IGET  (r2 I:androidx.recyclerview.widget.AsyncListUtil) = (r3 I:androidx.recyclerview.widget.AsyncListUtil$2 A[D('this' androidx.recyclerview.widget.AsyncListUtil$2)]) androidx.recyclerview.widget.AsyncListUtil.2.this$0 androidx.recyclerview.widget.AsyncListUtil  (LINE:360)\l0x000c: IGET  (r2 I:androidx.recyclerview.widget.ThreadUtil$BackgroundCallback\<T\>) = (r2 I:androidx.recyclerview.widget.AsyncListUtil) androidx.recyclerview.widget.AsyncListUtil.mBackgroundProxy androidx.recyclerview.widget.ThreadUtil$BackgroundCallback \l0x000e: INVOKE  \l  (r2 I:androidx.recyclerview.widget.ThreadUtil$BackgroundCallback)\l  (r1 I:int A[D('tileStart' int)])\l  (r6 I:int A[D('scrollHint' int)])\l type: INTERFACE call: androidx.recyclerview.widget.ThreadUtil.BackgroundCallback.loadTile(int, int):void A[MD:(int, int):void (m)]\l0x0011: IGET  (r1 I:androidx.recyclerview.widget.AsyncListUtil A[D('tileStart' int)]) = (r3 I:androidx.recyclerview.widget.AsyncListUtil$2 A[D('this' androidx.recyclerview.widget.AsyncListUtil$2)]) androidx.recyclerview.widget.AsyncListUtil.2.this$0 androidx.recyclerview.widget.AsyncListUtil  (LINE:355)\l0x0013: IGET  (r1 I:int) = (r1 I:androidx.recyclerview.widget.AsyncListUtil) androidx.recyclerview.widget.AsyncListUtil.mTileSize int \l0x0015: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (r1 I:int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000a|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|RETURN\l|0x0017: RETURN    (LINE:362)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.AsyncListUtil.2.requestTiles((r3 'this' I:androidx.recyclerview.widget.AsyncListUtil$2 A[D('this' androidx.recyclerview.widget.AsyncListUtil$2), IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('firstTileStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('lastTileStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('scrollHint' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('backwards' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x000a \-\> B:3:0x0001, CROSS_EDGE: B:6:0x0009 \-\> B:7:0x000a\lDebug Info:\l  0x000a\-0x0011: r1 'tileStart' I\l  0x0001\-0x0017: r0 'i' I\l  0x0000\-0x0017: r3 'this' Landroidx\/recyclerview\/widget\/AsyncListUtil$2;, signature: Landroidx\/recyclerview\/widget\/AsyncListUtil$2;\l  \-1 \-0x0017: r4 'firstTileStart' I\l  \-1 \-0x0017: r5 'lastTileStart' I\l  \-1 \-0x0017: r6 'scrollHint' I\l  \-1 \-0x0017: r7 'backwards' Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_11;
Node_11 -> Node_7;
Node_7 -> Node_3;
Node_6 -> Node_10;
Node_10 -> Node_7;
Node_9 -> Node_8;
Node_8 -> Node_1;
}

