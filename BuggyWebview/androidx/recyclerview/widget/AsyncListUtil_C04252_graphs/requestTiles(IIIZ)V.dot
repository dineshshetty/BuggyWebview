digraph "CFG forandroidx.recyclerview.widget.AsyncListUtil.2.requestTiles(IIIZ)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = r4\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|LOOP_START\lLOOP:0: B:3:0x0001\-\>B:7:0x000a\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v2 'i' int) binds: [B:2:0x0000, B:7:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \> r5) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|if (r7 == false) goto L7\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|int r1 = (r5 + r4) \- r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|LOOP_END\lLOOP:0: B:3:0x0001\-\>B:7:0x000a\lPHI: r1 \l  PHI: (r1v1 'tileStart' int) = (r1v0 'tileStart' int), (r1v5 'tileStart' int) binds: [B:10:0x000a, B:11:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|r3.this$0.mBackgroundProxy.loadTile(r1, r6)\lint r0 = r0 + r3.this$0.mTileSize\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|r1 = r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x000a|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.AsyncListUtil.2.requestTiles((r3v0 'this' androidx.recyclerview.widget.AsyncListUtil$2 A[D('this' androidx.recyclerview.widget.AsyncListUtil$2), IMMUTABLE_TYPE, THIS]), (r4v0 'firstTileStart' int A[D('firstTileStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'lastTileStart' int A[D('lastTileStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'scrollHint' int A[D('scrollHint' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'backwards' boolean A[D('backwards' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x000a \-\> B:3:0x0001, CROSS_EDGE: B:6:0x0009 \-\> B:7:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_11;
Node_11 -> Node_7;
Node_7 -> Node_3;
Node_6 -> Node_10;
Node_10 -> Node_7;
Node_9 -> Node_8;
Node_8 -> Node_1;
}

