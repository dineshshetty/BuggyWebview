digraph "CFG forandroidx.recyclerview.widget.BatchingListUpdateCallback.onInserted(II)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventType int  (LINE:76)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0019 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: IGET  (r0 I:int) = (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventPosition int \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|0x0007: IF  (r5 I:??[int, byte, short, char] A[D('position' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:22:0x0019 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: IGET  (r2 I:int) = (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventCount int \l0x000b: ARITH  (r3 I:int) = (r0 I:int) + (r2 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|0x000d: IF  (r5 I:??[int, byte, short, char] A[D('position' int)]) \> (r3 I:??[int, byte, short, char])  \-\> B:22:0x0019 \l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|0x000f: ARITH  (r2 I:int) = (r2 I:int) + (r6 I:int A[D('count' int)])  (LINE:78)\l0x0010: IPUT  (r2 I:int), (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventCount int \l0x0012: INVOKE  (r0 I:int) = (r5 I:int A[D('position' int)]), (r0 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:79)\l0x0016: IPUT  (r0 I:int), (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventPosition int \l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|RETURN\l|0x0018: RETURN    (LINE:80)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|0x0019: INVOKE  (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) type: VIRTUAL call: androidx.recyclerview.widget.BatchingListUpdateCallback.dispatchLastEvent():void A[MD:():void (m)] (LINE:82)\l0x001c: IPUT  (r5 I:int A[D('position' int)]), (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventPosition int  (LINE:83)\l0x001e: IPUT  (r6 I:int A[D('count' int)]), (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventCount int  (LINE:84)\l0x0020: IPUT  (r1 I:int), (r4 I:androidx.recyclerview.widget.BatchingListUpdateCallback) androidx.recyclerview.widget.BatchingListUpdateCallback.mLastEventType int  (LINE:85)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:86)\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.BatchingListUpdateCallback.onInserted((r4 'this' I:androidx.recyclerview.widget.BatchingListUpdateCallback A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0022 \-\> B:13:?, CROSS_EDGE: B:17:0x0007 \-\> B:22:0x0019, CROSS_EDGE: B:15:0x0003 \-\> B:22:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0022: r5 'position' I\l  \-1 \-0x0022: r6 'count' I\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.ListUpdateCallback.onInserted(int, int):void]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

