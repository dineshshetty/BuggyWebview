digraph "CFG forandroidx.recyclerview.widget.RecyclerView.SmoothScroller.onChildAttachedToWindow(Landroid\/view\/View;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = \l  (r2 I:androidx.recyclerview.widget.RecyclerView$SmoothScroller)\l  (r3 I:android.view.View A[D('child' android.view.View)])\l type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.SmoothScroller.getChildPosition(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:11985)\l0x0004: INVOKE  (r1 I:int) = (r2 I:androidx.recyclerview.widget.RecyclerView$SmoothScroller) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.SmoothScroller.getTargetPosition():int A[MD:():int (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: IPUT  \l  (r3 I:android.view.View A[D('child' android.view.View)])\l  (r2 I:androidx.recyclerview.widget.RecyclerView$SmoothScroller)\l androidx.recyclerview.widget.RecyclerView.SmoothScroller.mTargetView android.view.View  (LINE:11986)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: RETURN    (LINE:11991)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000c: RETURN   A[SYNTHETIC] (LINE:11991)\l}"];
MethodNode[shape=record,label="{protected void androidx.recyclerview.widget.RecyclerView.SmoothScroller.onChildAttachedToWindow((r2 'this' I:androidx.recyclerview.widget.RecyclerView$SmoothScroller A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0008 \-\> B:12:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r3 'child' Landroid\/view\/View;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

