digraph "CFG forandroidx.recyclerview.widget.FastScroller.isPointInsideVerticalThumb(FF)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r3 I:androidx.recyclerview.widget.FastScroller) type: DIRECT call: androidx.recyclerview.widget.FastScroller.isLayoutRTL():boolean A[MD:():boolean (m)] (LINE:496)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:int) = (r3 I:androidx.recyclerview.widget.FastScroller) androidx.recyclerview.widget.FastScroller.mVerticalThumbWidth int \l0x0008: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l0x000a: CAST (r0 I:float) = (float) (r0 I:int) \l0x000b: CMP_G  (r0 I:int) = (r4 I:float A[D('x' float)]), (r0 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r0 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|RETURN\lORIG_RETURN\l|0x0031: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0032: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: IGET  (r0 I:int) = (r3 I:androidx.recyclerview.widget.FastScroller) androidx.recyclerview.widget.FastScroller.mVerticalThumbCenterY int \l0x001c: IGET  (r1 I:int) = (r3 I:androidx.recyclerview.widget.FastScroller) androidx.recyclerview.widget.FastScroller.mVerticalThumbHeight int \l0x001e: ARITH  (r2 I:int) = (r1 I:int) \/ (2 int) \l0x0020: ARITH  (r2 I:int) = (r0 I:int) \- (r2 I:int) \l0x0022: CAST (r2 I:float) = (float) (r2 I:int) \l0x0023: CMP_L  (r2 I:int) = (r5 I:float A[D('y' float)]), (r2 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|0x0027: ARITH  (r1 I:int) = (r1 I:int) \/ (2 int) \l0x0029: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x002a: CAST (r0 I:float) = (float) (r0 I:int) \l0x002b: CMP_G  (r0 I:int) = (r5 I:float A[D('y' float)]), (r0 I:float) \l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|0x002d: IF  (r0 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:14:0x0031 \l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|SYNTHETIC\lRETURN\l|0x002f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0032: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: IGET  (r0 I:int) = (r3 I:androidx.recyclerview.widget.FastScroller) androidx.recyclerview.widget.FastScroller.mRecyclerViewWidth int \l0x0012: IGET  (r1 I:int) = (r3 I:androidx.recyclerview.widget.FastScroller) androidx.recyclerview.widget.FastScroller.mVerticalThumbWidth int \l0x0014: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0015: CAST (r0 I:float) = (float) (r0 I:int) \l0x0016: CMP_L  (r0 I:int) = (r4 I:float A[D('x' float)]), (r0 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:14:0x0031 \l}"];
MethodNode[shape=record,label="{boolean androidx.recyclerview.widget.FastScroller.isPointInsideVerticalThumb((r3 'this' I:androidx.recyclerview.widget.FastScroller A[IMMUTABLE_TYPE, THIS]), (r4 I:float A[D('x' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[D('y' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002f \-\> B:15:0x0032, CROSS_EDGE: B:12:0x002d \-\> B:14:0x0031, CROSS_EDGE: B:10:0x0025 \-\> B:14:0x0031, CROSS_EDGE: B:8:0x0018 \-\> B:9:0x001a, CROSS_EDGE: B:8:0x0018 \-\> B:14:0x0031\lDebug Info:\l  \-1 \-0x0032: r4 'x' F\l  \-1 \-0x0032: r5 'y' F\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_14;
Node_5 -> Node_9[style=dashed];
Node_14 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_14;
}

