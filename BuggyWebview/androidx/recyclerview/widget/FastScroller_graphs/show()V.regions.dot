digraph "CFG forandroidx.recyclerview.widget.FastScroller.show()V" {
subgraph cluster_Region_513377719 {
label = "R(2:2|4)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_2062127161 {
label = "Switch: 3
 case 0 -> R(1:1)
 case default -> R(1:7)
 case 3 -> R(2:3|1)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|switch(r5.mAnimationState) \{\l    case 0: goto L4;\l    case 3: goto L3;\l    default: goto L7;\l\}\l}"];
subgraph cluster_Region_577204851 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_InsnContainer_1387290421 [shape=record,label="{|break\l}"];
}
subgraph cluster_Region_1653209447 {
label = "R(1:7) | FALL_THROUGH\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
}
subgraph cluster_Region_1415042391 {
label = "R(2:3|1)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0006|FALL_THROUGH\l|r5.mShowHideAnimator.cancel()\l}"];
Node_InsnContainer_1304084804 [shape=record,label="{|break\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x000b|r5.mAnimationState = 1\landroid.animation.ValueAnimator android.animation.ValueAnimator r1 = r5.mShowHideAnimator\lr1.setFloatValues(((java.lang.Float) r1.getAnimatedValue()).floatValue(), 1.0f)\lr5.mShowHideAnimator.setDuration(500L)\lr5.mShowHideAnimator.setStartDelay(0L)\lr5.mShowHideAnimator.start()\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x003a|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.FastScroller.show((r5v0 'this' androidx.recyclerview.widget.FastScroller A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:3:0x0002 \-\> B:6:0x000b, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x003a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_5;
Node_3 -> Node_6;
Node_3 -> Node_8;
Node_8 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_7 -> Node_1;
}

