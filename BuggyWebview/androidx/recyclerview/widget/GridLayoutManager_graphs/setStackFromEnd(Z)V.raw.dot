digraph "CFG forandroidx.recyclerview.widget.GridLayoutManager.setStackFromEnd(Z)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stackFromEnd' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0007  (LINE:108)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:113)\l0x0003: INVOKE  (r2 I:androidx.recyclerview.widget.LinearLayoutManager), (r0 I:boolean) type: SUPER call: androidx.recyclerview.widget.LinearLayoutManager.setStackFromEnd(boolean):void A[MD:(boolean):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|RETURN\l|0x0006: RETURN    (LINE:114)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException  (LINE:109)\l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"GridLayoutManager does not support stack from end. Consider using reverse layout\" \l0x000b: INVOKE  (r0 I:java.lang.UnsupportedOperationException), (r1 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|0x000e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.GridLayoutManager.setStackFromEnd((r2 'this' I:androidx.recyclerview.widget.GridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[D('stackFromEnd' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000e \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r3 'stackFromEnd' Z\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.LinearLayoutManager.setStackFromEnd(boolean):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

