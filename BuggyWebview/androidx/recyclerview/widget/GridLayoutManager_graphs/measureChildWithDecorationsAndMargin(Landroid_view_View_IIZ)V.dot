digraph "CFG forandroidx.recyclerview.widget.GridLayoutManager.measureChildWithDecorationsAndMargin(Landroid\/view\/View;IIZ)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|androidx.recyclerview.widget.RecyclerView$LayoutParams r0 = (androidx.recyclerview.widget.RecyclerView.LayoutParams) r3.getLayoutParams()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|if (r6 == false) goto L9\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|boolean r1 = shouldReMeasureChild(r3, r4, r5, r0)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|PHI: r1 \l  PHI: (r1v1 'measure' boolean) = (r1v0 'measure' boolean), (r1v2 'measure' boolean) binds: [B:15:0x000d, B:14:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|r3.measure(r4, r5)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|boolean r1 = shouldMeasureChild(r3, r4, r5, r0)\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.GridLayoutManager.measureChildWithDecorationsAndMargin((r2v0 'this' androidx.recyclerview.widget.GridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r3v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'widthSpec' int A[D('widthSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'heightSpec' int A[D('heightSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'alreadyMeasured' boolean A[D('alreadyMeasured' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0011 \-\> B:18:0x0016, CROSS_EDGE: B:15:0x000d \-\> B:16:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

