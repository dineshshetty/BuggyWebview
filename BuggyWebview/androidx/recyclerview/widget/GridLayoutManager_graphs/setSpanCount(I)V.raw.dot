digraph "CFG forandroidx.recyclerview.widget.GridLayoutManager.setSpanCount(I)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:androidx.recyclerview.widget.GridLayoutManager) androidx.recyclerview.widget.GridLayoutManager.mSpanCount int  (LINE:814)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('spanCount' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0005 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:815)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:817)\l0x0006: IPUT  (r0 I:boolean), (r3 I:androidx.recyclerview.widget.GridLayoutManager) androidx.recyclerview.widget.GridLayoutManager.mPendingSpanCountChange boolean \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IF  (r4 I:??[int, byte, short, char] A[D('spanCount' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:20:0x0015  (LINE:818)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: IPUT  (r4 I:int A[D('spanCount' int)]), (r3 I:androidx.recyclerview.widget.GridLayoutManager) androidx.recyclerview.widget.GridLayoutManager.mSpanCount int  (LINE:822)\l0x000c: IGET  (r0 I:androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup) = (r3 I:androidx.recyclerview.widget.GridLayoutManager) androidx.recyclerview.widget.GridLayoutManager.mSpanSizeLookup androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup  (LINE:823)\l0x000e: INVOKE  (r0 I:androidx.recyclerview.widget.GridLayoutManager$SpanSizeLookup) type: VIRTUAL call: androidx.recyclerview.widget.GridLayoutManager.SpanSizeLookup.invalidateSpanIndexCache():void A[MD:():void (m)]\l0x0011: INVOKE  (r3 I:androidx.recyclerview.widget.GridLayoutManager) type: VIRTUAL call: androidx.recyclerview.widget.GridLayoutManager.requestLayout():void A[MD:():void (m)] (LINE:824)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|RETURN\l|0x0014: RETURN    (LINE:825)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:819)\l0x0017: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0019: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x001c: CONST_STR  (r2 I:java.lang.String) =  \"Span count should be at least 1. Provided \" \l0x001e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0021: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('spanCount' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0024: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0028: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|0x002b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.GridLayoutManager.setSpanCount((r3 'this' I:androidx.recyclerview.widget.GridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('spanCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0014 \-\> B:12:?, CROSS_EDGE: B:21:0x002b \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002b: r4 'spanCount' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

