digraph "CFG forandroidx.recyclerview.widget.GridLayoutManager.measureChildWithDecorationsAndMargin(Landroid\/view\/View;IIZ)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:android.view.ViewGroup$LayoutParams) = (r3 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: android.view.View.getLayoutParams():android.view.ViewGroup$LayoutParams A[MD:():android.view.ViewGroup$LayoutParams (c)] (LINE:757)\l0x0004: CHECK_CAST (r0 I:androidx.recyclerview.widget.RecyclerView$LayoutParams) = (androidx.recyclerview.widget.RecyclerView$LayoutParams) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|0x0006: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('alreadyMeasured' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000d  (LINE:759)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: INVOKE  (r1 I:boolean) = \l  (r2 I:androidx.recyclerview.widget.GridLayoutManager)\l  (r3 I:android.view.View A[D('child' android.view.View)])\l  (r4 I:int A[D('widthSpec' int)])\l  (r5 I:int A[D('heightSpec' int)])\l  (r0 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams)])\l type: VIRTUAL call: androidx.recyclerview.widget.GridLayoutManager.shouldReMeasureChild(android.view.View, int, int, androidx.recyclerview.widget.RecyclerView$LayoutParams):boolean A[MD:(android.view.View, int, int, androidx.recyclerview.widget.RecyclerView$LayoutParams):boolean (m)] (LINE:760)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('measure' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:?  (LINE:764)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|0x0013: INVOKE  \l  (r3 I:android.view.View A[D('child' android.view.View)])\l  (r4 I:int A[D('widthSpec' int)])\l  (r5 I:int A[D('heightSpec' int)])\l type: VIRTUAL call: android.view.View.measure(int, int):void A[MD:(int, int):void (c)] (LINE:765)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: RETURN    (LINE:767)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0016: RETURN   A[SYNTHETIC] (LINE:767)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|0x000d: INVOKE  (r1 I:boolean) = \l  (r2 I:androidx.recyclerview.widget.GridLayoutManager)\l  (r3 I:android.view.View A[D('child' android.view.View)])\l  (r4 I:int A[D('widthSpec' int)])\l  (r5 I:int A[D('heightSpec' int)])\l  (r0 I:androidx.recyclerview.widget.RecyclerView$LayoutParams A[D('lp' androidx.recyclerview.widget.RecyclerView$LayoutParams)])\l type: VIRTUAL call: androidx.recyclerview.widget.GridLayoutManager.shouldMeasureChild(android.view.View, int, int, androidx.recyclerview.widget.RecyclerView$LayoutParams):boolean A[MD:(android.view.View, int, int, androidx.recyclerview.widget.RecyclerView$LayoutParams):boolean (m)] (LINE:762)\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.GridLayoutManager.measureChildWithDecorationsAndMargin((r2 'this' I:androidx.recyclerview.widget.GridLayoutManager A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('widthSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('heightSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('alreadyMeasured' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0011 \-\> B:18:0x0016, CROSS_EDGE: B:15:0x000d \-\> B:16:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x000d: r1 'measure' Z\l  0x0006\-0x0016: r0 'lp' Landroidx\/recyclerview\/widget\/RecyclerView$LayoutParams;\l  0x0011\-0x0016: r1 'measure' Z\l  \-1 \-0x0016: r3 'child' Landroid\/view\/View;\l  \-1 \-0x0016: r4 'widthSpec' I\l  \-1 \-0x0016: r5 'heightSpec' I\l  \-1 \-0x0016: r6 'alreadyMeasured' Z\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

