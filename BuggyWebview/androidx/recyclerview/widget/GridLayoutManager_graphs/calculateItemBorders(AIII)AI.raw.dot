digraph "CFG forandroidx.recyclerview.widget.GridLayoutManager.calculateItemBorders([III)[I" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cachedBorders' int[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x000e  (LINE:325)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r7 I:??[] A[D('cachedBorders' int[])]) \l0x0003: ARITH  (r1 I:int) = (r8 I:int A[D('spanCount' int)]) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x000e \l}"];
Node_26 [shape=record,label="{26\:\ 0x0007|0x0007: ARRAY_LENGTH  (r0 I:int) = (r7 I:??[] A[D('cachedBorders' int[])]) \l0x0008: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x000a: AGET  (r0 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][] A[D('cachedBorders' int[])]), (r0 I:??[int, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('totalSpace' int)])  \-\> B:29:0x0012 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:329)\l0x0013: APUT  \l  (r7 I:??[int, float][] A[D('cachedBorders' int[])])\l  (r0 I:??[int, short, byte, char])\l  (r0 I:??[int, float, short, byte, char])\l \l0x0015: ARITH  (r0 I:int) = (r9 I:int A[D('totalSpace' int)]) \/ (r8 I:int A[D('spanCount' int)])  (LINE:330)\l0x0017: ARITH  (r1 I:int) = (r9 I:int A[D('totalSpace' int)]) % (r8 I:int A[D('spanCount' int)])  (LINE:331)\l0x0019: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:332)\l0x001a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:333)\l0x001b: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:334)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|LOOP_START\lLOOP:0: B:30:0x001c\-\>B:36:0x0029\l|0x001c: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \> (r8 I:??[int, byte, short, char] A[D('spanCount' int)])  \-\> B:38:0x002f \l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|0x001e: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sizePerSpan' int)])  (LINE:335)\l0x001f: ARITH  (r3 I:int) = (r3 I:int A[D('additionalSize' int)]) + (r1 I:int A[D('sizePerSpanRemainder' int)])  (LINE:336)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|0x0020: IF  (r3 I:??[int, byte, short, char] A[D('additionalSize' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:40:0x0029  (LINE:337)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0022|0x0022: ARITH  (r6 I:int) = (r8 I:int A[D('spanCount' int)]) \- (r3 I:int A[D('additionalSize' int)]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|0x0024: IF  (r6 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('sizePerSpanRemainder' int)])  \-\> B:41:0x0029 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0026|0x0026: ARITH  (r5 I:int) = (r5 I:int A[D('itemSize' int)]) + (1 int)  (LINE:338)\l0x0028: ARITH  (r3 I:int) = (r3 I:int A[D('additionalSize' int)]) \- (r8 I:int A[D('spanCount' int)])  (LINE:339)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0029|LOOP_END\lLOOP:0: B:30:0x001c\-\>B:36:0x0029\l|0x0029: ARITH  (r2 I:int) = (r2 I:int A[D('consumedPixels' int)]) + (r5 I:int A[D('itemSize' int)])  (LINE:341)\l0x002a: APUT  \l  (r7 I:??[int, float][] A[D('cachedBorders' int[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l  (r2 I:??[int, float, short, byte, char] A[D('consumedPixels' int)])\l  (LINE:342)\l0x002c: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:334)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0029|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0029|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x002f|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x002f|RETURN\l|0x002f: RETURN  (r7 I:int[] A[D('cachedBorders' int[])])  (LINE:344)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x000e|0x000e: ARITH  (r0 I:int) = (r8 I:int A[D('spanCount' int)]) + (1 int)  (LINE:327)\l0x0010: NEW_ARRAY  (r7 I:int[] A[D('cachedBorders' int[])]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l}"];
MethodNode[shape=record,label="{static int[] androidx.recyclerview.widget.GridLayoutManager.calculateItemBorders((r7 I:int[] A[D('cachedBorders' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('spanCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('totalSpace' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:36:0x0029 \-\> B:30:0x001c, CROSS_EDGE: B:34:0x0024 \-\> B:36:0x0029, CROSS_EDGE: B:32:0x0020 \-\> B:36:0x0029, CROSS_EDGE: B:27:0x000c \-\> B:29:0x0012, CROSS_EDGE: B:25:0x0005 \-\> B:28:0x000e, CROSS_EDGE: B:23:0x0000 \-\> B:28:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x002c: r5 'itemSize' I\l  0x001c\-0x002f: r4 'i' I\l  0x0017\-0x002f: r0 'sizePerSpan' I\l  0x0019\-0x002f: r1 'sizePerSpanRemainder' I\l  0x001a\-0x002f: r2 'consumedPixels' I\l  0x001b\-0x002f: r3 'additionalSize' I\l  \-1 \-0x002f: r7 'cachedBorders' [I\l  \-1 \-0x002f: r8 'spanCount' I\l  \-1 \-0x002f: r9 'totalSpace' I\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_38;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_41;
Node_35 -> Node_39;
Node_39 -> Node_36;
Node_36 -> Node_30;
Node_41 -> Node_36;
Node_40 -> Node_36;
Node_38 -> Node_37;
Node_37 -> Node_22;
Node_28 -> Node_29;
}

