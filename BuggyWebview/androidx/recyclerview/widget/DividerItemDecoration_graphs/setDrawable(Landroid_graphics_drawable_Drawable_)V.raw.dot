digraph "CFG forandroidx.recyclerview.widget.DividerItemDecoration.setDrawable(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drawable' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0005  (LINE:97)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IPUT  \l  (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r2 I:androidx.recyclerview.widget.DividerItemDecoration)\l androidx.recyclerview.widget.DividerItemDecoration.mDivider android.graphics.drawable.Drawable  (LINE:100)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:101)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:98)\l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"Drawable cannot be null.\" \l0x0009: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.DividerItemDecoration.setDrawable((r2 'this' I:androidx.recyclerview.widget.DividerItemDecoration A[IMMUTABLE_TYPE, THIS]), (r3 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000c \-\> B:1:?\lDebug Info:\l  \-1 \-0x000c: r3 'drawable' Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_5;
Node_3 -> Node_4;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

