digraph "CFG forandroidx.recyclerview.widget.ViewBoundsCheck.BoundFlags.compare(II)I" {
subgraph cluster_Region_1975932965 {
label = "R(1:(2:(1:2)|(1:(2:(1:5)|(1:6)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1526169157 {
label = "R(2:(1:2)|(1:(2:(1:5)|(1:6))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1656641316 {
label = "IF [B:12:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|if (r2 \> r3) goto L2\l}"];
subgraph cluster_Region_1908355604 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0002|RETURN\l|return 1\l}"];
}
}
subgraph cluster_Region_922704758 {
label = "R(1:(2:(1:5)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1469783738 {
label = "R(2:(1:5)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1200387098 {
label = "IF [B:15:0x0004] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0004|if (r2 == r3) goto L5\l}"];
subgraph cluster_Region_1336660333 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0006|RETURN\l|return 2\l}"];
}
}
subgraph cluster_Region_63112965 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0008|RETURN\l|return 4\l}"];
}
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{int androidx.recyclerview.widget.ViewBoundsCheck.BoundFlags.compare((r1v0 'this' androidx.recyclerview.widget.ViewBoundsCheck$BoundFlags A[IMMUTABLE_TYPE, THIS]), (r2v0 'x' int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'y' int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0007 \-\> B:11:?, CROSS_EDGE: B:19:0x0009 \-\> B:11:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_12 -> Node_15[style=dashed];
Node_13 -> Node_11;
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_16 -> Node_11;
Node_18 -> Node_11;
Node_10 -> Node_12;
}

