digraph "CFG forandroidx.recyclerview.widget.ItemTouchHelper.hitTest(Landroid\/view\/View;FFFF)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r2 \> r4 ? 1 : (r2 == r4 ? 0 : \-1)) \< 0) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if ((r2 \> (((float) r1.getWidth()) + r4) ? 1 : (r2 == (((float) r1.getWidth()) + r4) ? 0 : \-1)) \> 0) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if ((r3 \> r5 ? 1 : (r3 == r5 ? 0 : \-1)) \< 0) goto L11\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if ((r3 \> (((float) r1.getHeight()) + r5) ? 1 : (r3 == (((float) r1.getHeight()) + r5) ? 0 : \-1)) \> 0) goto L11\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|SYNTHETIC\lRETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private static boolean androidx.recyclerview.widget.ItemTouchHelper.hitTest((r1v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'x' float A[D('x' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'y' float A[D('y' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'left' float A[D('left' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'top' float A[D('top' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x001e \-\> B:12:0x001f, CROSS_EDGE: B:7:0x0010 \-\> B:11:0x001e, CROSS_EDGE: B:5:0x000c \-\> B:11:0x001e, CROSS_EDGE: B:3:0x0002 \-\> B:11:0x001e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_1;
}

