digraph "CFG forandroidx.recyclerview.widget.ItemTouchHelper.findAnimation(Landroid\/view\/MotionEvent;)Landroidx\/recyclerview\/widget\/ItemTouchHelper$RecoverAnimation;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r5.mRecoverAnimations.isEmpty() == false) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|RETURN\l|return null\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|android.view.View r0 = findChildView(r6)\lint r2 = r5.mRecoverAnimations.size() + (\-1)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_START\lLOOP:0: B:6:0x0016\-\>B:10:0x0027\lPHI: r2 \l  PHI: (r2v3 'i' int) = (r2v2 'i' int), (r2v4 'i' int) binds: [B:5:0x000a, B:10:0x0027] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \< 0) goto L12\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation r3 = r5.mRecoverAnimations.get(r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0024|if (r3.mViewHolder.itemView != r0) goto L9\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|LOOP_END\lLOOP:0: B:6:0x0016\-\>B:10:0x0027\l|int r2 = r2 + (\-1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0026|RETURN\l|return r3\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{androidx.recyclerview.widget.ItemTouchHelper$RecoverAnimation androidx.recyclerview.widget.ItemTouchHelper.findAnimation((r5v0 'this' androidx.recyclerview.widget.ItemTouchHelper A[IMMUTABLE_TYPE, THIS]), (r6v0 'event' android.view.MotionEvent A[D('event' android.view.MotionEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0026 \-\> B:1:?, BACK_EDGE: B:10:0x0027 \-\> B:6:0x0016, CROSS_EDGE: B:11:0x002a \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_6;
Node_12 -> Node_9;
Node_9 -> Node_1;
Node_13 -> Node_11;
Node_11 -> Node_1;
}

