digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.SavedState.invalidateSpanInfo()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3202)\l0x0001: IPUT  (r0 I:int[]), (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState) androidx.recyclerview.widget.StaggeredGridLayoutManager.SavedState.mSpanOffsets int[] \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3203)\l0x0004: IPUT  (r1 I:int), (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState) androidx.recyclerview.widget.StaggeredGridLayoutManager.SavedState.mSpanOffsetsSize int \l0x0006: IPUT  (r1 I:int), (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState) androidx.recyclerview.widget.StaggeredGridLayoutManager.SavedState.mSpanLookupSize int  (LINE:3204)\l0x0008: IPUT  (r0 I:int[]), (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState) androidx.recyclerview.widget.StaggeredGridLayoutManager.SavedState.mSpanLookup int[]  (LINE:3205)\l0x000a: IPUT  \l  (r0 I:java.util.List\<androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem\>)\l  (r2 I:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState)\l androidx.recyclerview.widget.StaggeredGridLayoutManager.SavedState.mFullSpanItems java.util.List  (LINE:3206)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|0x000c: RETURN    (LINE:3207)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.StaggeredGridLayoutManager.SavedState.invalidateSpanInfo((r2 'this' I:androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

