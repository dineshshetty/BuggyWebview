digraph "CFG forandroidx.recyclerview.widget.ItemTouchHelper.5.onGetChildDrawingOrder(II)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r3.this$0.mOverdrawChild != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|return r5\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|int r0 = r3.this$0.mOverdrawChildPosition\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|if (r0 != (\-1)) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|int r0 = r3.this$0.mRecyclerView.indexOfChild(r3.this$0.mOverdrawChild)\lr3.this$0.mOverdrawChildPosition = r0\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|PHI: r0 \l  PHI: (r0v4 'childPosition' int) = (r0v3 'childPosition' int), (r0v5 'childPosition' int) binds: [B:6:0x000c, B:7:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|if (r5 != (r4 + (\-1))) goto L11\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|RETURN\l|return r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|if (r5 \>= r0) goto L14\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return r5\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027}"];
Node_14 [shape=record,label="{14\:\ 0x0029|RETURN\lORIG_RETURN\l|return r5 + 1\l}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.ItemTouchHelper.5.onGetChildDrawingOrder((r3v0 'this' androidx.recyclerview.widget.ItemTouchHelper$5 A[IMMUTABLE_TYPE, THIS]), (r4v0 'childCount' int A[D('childCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'i' int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0022 \-\> B:1:?, CROSS_EDGE: B:14:0x0029 \-\> B:1:?, CROSS_EDGE: B:13:0x0027 \-\> B:14:0x0029, CROSS_EDGE: B:6:0x000c \-\> B:8:0x001e\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.ChildDrawingOrderCallback.onGetChildDrawingOrder(int, int):int]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

