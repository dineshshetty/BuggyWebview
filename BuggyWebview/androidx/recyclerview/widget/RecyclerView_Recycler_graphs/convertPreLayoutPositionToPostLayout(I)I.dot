digraph "CFG forandroidx.recyclerview.widget.RecyclerView.Recycler.convertPreLayoutPositionToPostLayout(I)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|if (r4 \< 0) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002}"];
Node_16 [shape=record,label="{16\:\ 0x000a|if (r4 \>= androidx.recyclerview.widget.RecyclerView.this.mState.getItemCount()) goto L10\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c}"];
Node_18 [shape=record,label="{18\:\ 0x0014|if (androidx.recyclerview.widget.RecyclerView.this.mState.isPreLayout() != false) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|RETURN\l|return r4\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0017}"];
Node_21 [shape=record,label="{21\:\ 0x001f|RETURN\l|return androidx.recyclerview.widget.RecyclerView.this.mAdapterHelper.findPositionOffset(r4)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"invalid position \")\lr1.append(r4)\lr1.append(\". State item count is \")\lr1.append(androidx.recyclerview.widget.RecyclerView.this.mState.getItemCount())\lr1.append(androidx.recyclerview.widget.RecyclerView.this.exceptionLabel())\l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|throw new java.lang.IndexOutOfBoundsException(r1.toString())\l}"];
MethodNode[shape=record,label="{public int androidx.recyclerview.widget.RecyclerView.Recycler.convertPreLayoutPositionToPostLayout((r3v0 'this' androidx.recyclerview.widget.RecyclerView$Recycler A[IMMUTABLE_TYPE, THIS]), (r4v0 'position' int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001f \-\> B:13:?, CROSS_EDGE: B:23:0x004f \-\> B:13:?, CROSS_EDGE: B:14:0x0000 \-\> B:22:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

