digraph "CFG forandroidx.recyclerview.widget.RecyclerView.RecycledViewPool.size()I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:5722)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:5723)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|LOOP_START\lLOOP:0: B:16:0x0002\-\>B:21:0x001b\l|0x0002: IGET  (r2 I:android.util.SparseArray\<androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData\>) = (r4 I:androidx.recyclerview.widget.RecyclerView$RecycledViewPool) androidx.recyclerview.widget.RecyclerView.RecycledViewPool.mScrap android.util.SparseArray \l0x0004: INVOKE  (r2 I:int) = (r2 I:android.util.SparseArray) type: VIRTUAL call: android.util.SparseArray.size():int A[MD:():int (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:23:0x001e \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: IGET  (r2 I:android.util.SparseArray\<androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData\>) = (r4 I:androidx.recyclerview.widget.RecyclerView$RecycledViewPool) androidx.recyclerview.widget.RecyclerView.RecycledViewPool.mScrap android.util.SparseArray  (LINE:5724)\l0x000c: INVOKE  (r2 I:java.lang.Object) = (r2 I:android.util.SparseArray), (r1 I:int A[D('i' int)]) type: VIRTUAL call: android.util.SparseArray.valueAt(int):java.lang.Object A[MD:(int):E (c)]\l0x0010: CHECK_CAST (r2 I:androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData) = (androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData) (r2 I:??[OBJECT, ARRAY]) \l0x0012: IGET  (r2 I:java.util.ArrayList\<androidx.recyclerview.widget.RecyclerView$ViewHolder\>) = (r2 I:androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData) androidx.recyclerview.widget.RecyclerView.RecycledViewPool.ScrapData.mScrapHeap java.util.ArrayList \l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('viewHolders' java.util.ArrayList\<androidx.recyclerview.widget.RecyclerView$ViewHolder\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001b  (LINE:5725)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|0x0016: INVOKE  (r3 I:int) = \l  (r2 I:java.util.ArrayList A[D('viewHolders' java.util.ArrayList\<androidx.recyclerview.widget.RecyclerView$ViewHolder\>)])\l type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)] (LINE:5726)\l0x001a: ARITH  (r0 I:int) = (r0 I:int A[D('count' int)]) + (r3 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|LOOP_END\lLOOP:0: B:16:0x0002\-\>B:21:0x001b\l|0x001b: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:5723)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\l|0x001e: RETURN  (r0 I:int A[D('count' int)])  (LINE:5729)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{int androidx.recyclerview.widget.RecyclerView.RecycledViewPool.size((r4 'this' I:androidx.recyclerview.widget.RecyclerView$RecycledViewPool A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x001b \-\> B:16:0x0002, CROSS_EDGE: B:19:0x0014 \-\> B:21:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x001b: r2 'viewHolders' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Landroidx\/recyclerview\/widget\/RecyclerView$ViewHolder;\>;\l  0x0002\-0x001e: r1 'i' I\l  0x0001\-0x001e: r0 'count' I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_21 -> Node_16;
Node_25 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

