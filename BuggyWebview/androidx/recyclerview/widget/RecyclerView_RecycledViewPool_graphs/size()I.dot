digraph "CFG forandroidx.recyclerview.widget.RecyclerView.RecycledViewPool.size()I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|r0 = 0\lr1 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|LOOP_START\lLOOP:0: B:16:0x0002\-\>B:21:0x001b\lPHI: r0 r1 \l  PHI: (r0v1 'count' int) = (r0v0 'count' int), (r0v2 'count' int) binds: [B:15:0x0000, B:21:0x001b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:15:0x0000, B:21:0x001b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|if (r1 \>= r4.mScrap.size()) goto L10\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|java.util.ArrayList\<androidx.recyclerview.widget.RecyclerView$ViewHolder\> r2 = r4.mScrap.valueAt(r1).mScrapHeap\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|if (r2 == null) goto L9\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|int r0 = r0 + r2.size()\l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|LOOP_END\lLOOP:0: B:16:0x0002\-\>B:21:0x001b\lPHI: r0 \l  PHI: (r0v2 'count' int) = (r0v1 'count' int), (r0v3 'count' int) binds: [B:25:0x001b, B:24:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r1 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\l|return r0\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{int androidx.recyclerview.widget.RecyclerView.RecycledViewPool.size((r4v0 'this' androidx.recyclerview.widget.RecyclerView$RecycledViewPool A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x001b \-\> B:16:0x0002, CROSS_EDGE: B:19:0x0014 \-\> B:21:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_21 -> Node_16;
Node_25 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

