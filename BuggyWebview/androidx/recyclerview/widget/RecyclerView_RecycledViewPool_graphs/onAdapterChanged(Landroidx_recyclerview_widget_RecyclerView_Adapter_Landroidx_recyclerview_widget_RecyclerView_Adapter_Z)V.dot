digraph "CFG forandroidx.recyclerview.widget.RecyclerView.RecycledViewPool.onAdapterChanged(Landroidx\/recyclerview\/widget\/RecyclerView$Adapter;Landroidx\/recyclerview\/widget\/RecyclerView$Adapter;Z)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|if (r2 == null) goto L3\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|detach()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|if (r4 != false) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007}"];
Node_18 [shape=record,label="{18\:\ 0x0009|if (r1.mAttachCount != 0) goto L7\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|clear()\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|if (r3 == null) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|attach()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0013|RETURN\lORIG_RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.RecyclerView.RecycledViewPool.onAdapterChanged((r1v0 'this' androidx.recyclerview.widget.RecyclerView$RecycledViewPool A[IMMUTABLE_TYPE, THIS]), (r2v0 'oldAdapter' androidx.recyclerview.widget.RecyclerView$Adapter A[D('oldAdapter' androidx.recyclerview.widget.RecyclerView$Adapter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'newAdapter' androidx.recyclerview.widget.RecyclerView$Adapter A[D('newAdapter' androidx.recyclerview.widget.RecyclerView$Adapter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'compatibleWithPrevious' boolean A[D('compatibleWithPrevious' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x000e \-\> B:22:0x0013, CROSS_EDGE: B:18:0x0009 \-\> B:20:0x000e, CROSS_EDGE: B:16:0x0005 \-\> B:20:0x000e, CROSS_EDGE: B:14:0x0000 \-\> B:16:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_13;
Node_23 -> Node_13;
}

