digraph "CFG forandroidx.recyclerview.widget.RecyclerView.RecycledViewPool.getScrapDataForType(I)Landroidx\/recyclerview\/widget\/RecyclerView$RecycledViewPool$ScrapData;" {
subgraph cluster_Region_1971579727 {
label = "R(2:1|(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData androidx.recyclerview.widget.RecyclerView.RecycledViewPool.ScrapData r0 = r2.mScrap.get(r3)\l}"];
subgraph cluster_Region_203228188 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2009541593 {
label = "IF [B:10:0x0008] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0008|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_1739145708 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000a|androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData androidx.recyclerview.widget.RecyclerView.RecycledViewPool.ScrapData r1 = new androidx.recyclerview.widget.RecyclerView.RecycledViewPool.ScrapData()\lr2.mScrap.put(r3, r1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0015|RETURN\lORIG_RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_160541475 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private androidx.recyclerview.widget.RecyclerView$RecycledViewPool$ScrapData androidx.recyclerview.widget.RecyclerView.RecycledViewPool.getScrapDataForType((r2v0 'this' androidx.recyclerview.widget.RecyclerView$RecycledViewPool A[IMMUTABLE_TYPE, THIS]), (r3v0 'viewType' int A[D('viewType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0008 \-\> B:12:0x0015\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

