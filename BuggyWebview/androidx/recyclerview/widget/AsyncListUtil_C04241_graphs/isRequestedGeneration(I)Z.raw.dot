digraph "CFG forandroidx.recyclerview.widget.AsyncListUtil.1.isRequestedGeneration(I)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.recyclerview.widget.AsyncListUtil) = (r1 I:androidx.recyclerview.widget.AsyncListUtil$1 A[D('this' androidx.recyclerview.widget.AsyncListUtil$1)]) androidx.recyclerview.widget.AsyncListUtil.1.this$0 androidx.recyclerview.widget.AsyncListUtil  (LINE:289)\l0x0002: IGET  (r0 I:int) = (r0 I:androidx.recyclerview.widget.AsyncListUtil) androidx.recyclerview.widget.AsyncListUtil.mRequestedGeneration int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('generation' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|SYNTHETIC\lRETURN\l|0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0009: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|RETURN\lORIG_RETURN\l|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean androidx.recyclerview.widget.AsyncListUtil.1.isRequestedGeneration((r1 'this' I:androidx.recyclerview.widget.AsyncListUtil$1 A[D('this' androidx.recyclerview.widget.AsyncListUtil$1), IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('generation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0008 \-\> B:6:0x0009\lDebug Info:\l  0x0000\-0x0009: r1 'this' Landroidx\/recyclerview\/widget\/AsyncListUtil$1;, signature: Landroidx\/recyclerview\/widget\/AsyncListUtil$1;\l  \-1 \-0x0009: r2 'generation' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_1;
}

