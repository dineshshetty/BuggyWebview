digraph "CFG forandroidx.recyclerview.widget.PagerSnapHelper.calculateDistanceToFinalSnap(Landroidx\/recyclerview\/widget\/RecyclerView$LayoutManager;Landroid\/view\/View;)[I" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|int[] r0 = new int[2]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|if (r5.canScrollHorizontally() == false) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|r0[0] = distanceToCenter(r5, r6, getHorizontalHelper(r5))\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018}"];
Node_18 [shape=record,label="{18\:\ 0x001d|if (r5.canScrollVertically() == false) goto L9\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|r0[1] = distanceToCenter(r5, r6, getVerticalHelper(r5))\l}"];
Node_21 [shape=record,label="{21\:\ 0x002d|RETURN\l|return r0\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x002b|r0[1] = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|r0[0] = 0\l}"];
MethodNode[shape=record,label="{public int[] androidx.recyclerview.widget.PagerSnapHelper.calculateDistanceToFinalSnap((r4v0 'this' androidx.recyclerview.widget.PagerSnapHelper A[IMMUTABLE_TYPE, THIS]), (r5v0 'layoutManager' androidx.recyclerview.widget.RecyclerView$LayoutManager A[D('layoutManager' androidx.recyclerview.widget.RecyclerView$LayoutManager), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'targetView' android.view.View A[D('targetView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x002b \-\> B:21:0x002d, CROSS_EDGE: B:16:0x0016 \-\> B:17:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.SnapHelper.calculateDistanceToFinalSnap(androidx.recyclerview.widget.RecyclerView$LayoutManager, android.view.View):int[]]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_12;
Node_20 -> Node_21;
Node_16 -> Node_17;
}

