digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.FullSpanItem.\<init\>(Landroid\/os\/Parcel;)V" {
subgraph cluster_Region_1601973499 {
label = "R(3:1|4|(1:(1:6)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|r2.mPosition = r3.readInt()\lr2.mGapDir = r3.readInt()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|PHI: r1 \l  PHI: (r1v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r2.mHasUnwantedGapAfter = r3.readInt() == 1\lint int r0 = r3.readInt()\l}"];
subgraph cluster_Region_1256083443 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_28786343 {
label = "IF [B:7:0x001e] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x001e|if (r0 \> 0) goto L6\l}"];
subgraph cluster_Region_1714043062 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0020|int[] int[] r1 = new int[r0]\lr2.mGapPerSpan = r1\lr3.readIntArray(r1)\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0014}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0017}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0027|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.StaggeredGridLayoutManager.LazySpanLookup.FullSpanItem.\<init\>((r2v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem A[IMMUTABLE_TYPE, THIS]), (r3v0 'in' android.os.Parcel A[D('in' android.os.Parcel), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x001e \-\> B:9:0x0027, CROSS_EDGE: B:3:0x0014 \-\> B:6:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_0 -> Node_2;
Node_3 -> Node_5;
Node_3 -> Node_6;
Node_5 -> Node_6;
Node_9 -> Node_1;
Node_10 -> Node_1;
}

