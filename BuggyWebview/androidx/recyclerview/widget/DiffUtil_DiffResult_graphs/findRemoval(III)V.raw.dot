digraph "CFG forandroidx.recyclerview.widget.DiffUtil.DiffResult.findRemoval(III)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:int[]) = (r2 I:androidx.recyclerview.widget.DiffUtil$DiffResult) androidx.recyclerview.widget.DiffUtil.DiffResult.mNewItemStatuses int[]  (LINE:653)\l0x0002: ARITH  (r1 I:int) = (r4 I:int A[D('y' int)]) + (\-1 int) \l0x0004: AGET  (r0 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0009 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:654)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|0x0009: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:656)\l0x000a: INVOKE  \l  (r2 I:androidx.recyclerview.widget.DiffUtil$DiffResult)\l  (r3 I:int A[D('x' int)])\l  (r4 I:int A[D('y' int)])\l  (r5 I:int A[D('snakeIndex' int)])\l  (r0 I:boolean)\l type: DIRECT call: androidx.recyclerview.widget.DiffUtil.DiffResult.findMatchingItem(int, int, int, boolean):boolean A[MD:(int, int, int, boolean):boolean (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|RETURN\l|0x000d: RETURN    (LINE:657)\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.DiffUtil.DiffResult.findRemoval((r2 'this' I:androidx.recyclerview.widget.DiffUtil$DiffResult A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('snakeIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000d \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r3 'x' I\l  \-1 \-0x000d: r4 'y' I\l  \-1 \-0x000d: r5 'snakeIndex' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

