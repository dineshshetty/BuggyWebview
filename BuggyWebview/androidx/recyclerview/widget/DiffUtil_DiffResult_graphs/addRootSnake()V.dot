digraph "CFG forandroidx.recyclerview.widget.DiffUtil.DiffResult.addRootSnake()V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0007|if (r4.mSnakes.isEmpty() == false) goto L13\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|r0 = null\l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|PHI: r0 \l  PHI: (r0v5 'firstSnake' androidx.recyclerview.widget.DiffUtil$Snake) = (r0v4 'firstSnake' androidx.recyclerview.widget.DiffUtil$Snake), (r0v6 'firstSnake' androidx.recyclerview.widget.DiffUtil$Snake) binds: [B:19:0x000b, B:18:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x0015}"];
Node_22 [shape=record,label="{22\:\ 0x0017|if (r0.f92x != 0) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019}"];
Node_24 [shape=record,label="{24\:\ 0x001b|if (r0.f93y == 0) goto L9\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|androidx.recyclerview.widget.DiffUtil$Snake r2 = new androidx.recyclerview.widget.DiffUtil.Snake()\lr2.f92x = 0\lr2.f93y = 0\lr2.removal = false\lr2.size = 0\lr2.reverse = false\lr4.mSnakes.add(0, r2)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0031|RETURN\lORIG_RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|androidx.recyclerview.widget.DiffUtil$Snake r0 = r4.mSnakes.get(0)\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.DiffUtil.DiffResult.addRootSnake((r4v0 'this' androidx.recyclerview.widget.DiffUtil$DiffResult A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x001b \-\> B:26:0x0031, CROSS_EDGE: B:22:0x0017 \-\> B:25:0x001d, CROSS_EDGE: B:20:0x0013 \-\> B:25:0x001d, CROSS_EDGE: B:19:0x000b \-\> B:20:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_27 -> Node_15;
Node_25 -> Node_26;
Node_26 -> Node_15;
Node_19 -> Node_20;
}

