digraph "CFG forandroidx.recyclerview.widget.GapWorker.postFromTraversal(Landroidx\/recyclerview\/widget\/RecyclerView;II)V" {
subgraph cluster_Region_1462516393 {
label = "R(2:(1:5)|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_944561499 {
label = "IF [B:3:0x0004, B:5:0x000c] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r6.isAttachedToWindow() != false) goto L3\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|ADDED_TO_REGION\l|if (r5.mPostTimeNs == 0) goto L5\l}"];
subgraph cluster_Region_1775107338 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000e|r5.mPostTimeNs = r6.getNanoTime()\lr6.post(r5)\l}"];
}
}
Node_7 [shape=record,label="{7\:\ 0x0017|r6.mPrefetchRegistry.setPrefetchVector(r7, r8)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0006}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001c}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.recyclerview.widget.GapWorker.postFromTraversal((r5v0 'this' androidx.recyclerview.widget.GapWorker A[IMMUTABLE_TYPE, THIS]), (r6v0 'recyclerView' androidx.recyclerview.widget.RecyclerView A[D('recyclerView' androidx.recyclerview.widget.RecyclerView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'prefetchDx' int A[D('prefetchDx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'prefetchDy' int A[D('prefetchDy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000c \-\> B:7:0x0017, CROSS_EDGE: B:3:0x0004 \-\> B:7:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l INFO: \l \-\> Access modifiers changed from: package\-private\}\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_8 -> Node_1;
}

