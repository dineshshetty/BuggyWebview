digraph "CFG forandroidx.recyclerview.widget.GapWorker.prefetchInnerRecyclerViewWithDeadline(Landroidx\/recyclerview\/widget\/RecyclerView;J)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('innerView' androidx.recyclerview.widget.RecyclerView)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:4:0x0003  (LINE:312)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|RETURN\l|0x0002: RETURN    (LINE:313)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|0x0003: IGET  (r0 I:boolean) = (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)]) androidx.recyclerview.widget.RecyclerView.mDataSetHasChangedAfterLayout boolean  (LINE:316)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: IGET  (r0 I:androidx.recyclerview.widget.ChildHelper) = (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)]) androidx.recyclerview.widget.RecyclerView.mChildHelper androidx.recyclerview.widget.ChildHelper \l0x0009: INVOKE  (r0 I:int) = (r0 I:androidx.recyclerview.widget.ChildHelper) type: VIRTUAL call: androidx.recyclerview.widget.ChildHelper.getUnfilteredChildCount():int A[MD:():int (m)] (LINE:317)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0012 \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: INVOKE  (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)]) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.removeAndRecycleViews():void A[MD:():void (m)] (LINE:320)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|0x0012: IGET  (r0 I:androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl) = (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)]) androidx.recyclerview.widget.RecyclerView.mPrefetchRegistry androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl  (LINE:324)\l0x0014: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:325)\l0x0015: INVOKE  \l  (r0 I:androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl A[D('innerPrefetchRegistry' androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl)])\l  (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)])\l  (r1 I:boolean)\l type: VIRTUAL call: androidx.recyclerview.widget.GapWorker.LayoutPrefetchRegistryImpl.collectPrefetchPositionsFromView(androidx.recyclerview.widget.RecyclerView, boolean):void A[MD:(androidx.recyclerview.widget.RecyclerView, boolean):void (m)]\l0x0018: IGET  (r1 I:int) = \l  (r0 I:androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl A[D('innerPrefetchRegistry' androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl)])\l androidx.recyclerview.widget.GapWorker.LayoutPrefetchRegistryImpl.mCount int  (LINE:327)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0043 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|RETURN\lORIG_RETURN\l|0x0043: RETURN    (LINE:341)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|TRY_ENTER\lTryCatch #0 \{all \-\> 0x003e, blocks: (B:11:0x001c, B:12:0x0029, B:14:0x002f), top: B:21:0x001c \}\lCatch: all \-\> 0x003e\l|0x001c: CONST_STR  (r1 I:java.lang.String) =  \"RV Nested Prefetch\" A[TRY_ENTER] (LINE:329)\l0x001e: INVOKE  (r1 I:java.lang.String) type: STATIC call: androidx.core.os.TraceCompat.beginSection(java.lang.String):void A[Catch: all \-\> 0x003e, MD:(java.lang.String):void (m)]\l0x0021: IGET  (r1 I:androidx.recyclerview.widget.RecyclerView$State) = (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)]) androidx.recyclerview.widget.RecyclerView.mState androidx.recyclerview.widget.RecyclerView$State A[Catch: all \-\> 0x003e] (LINE:330)\l0x0023: IGET  (r2 I:androidx.recyclerview.widget.RecyclerView$Adapter) = (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)]) androidx.recyclerview.widget.RecyclerView.mAdapter androidx.recyclerview.widget.RecyclerView$Adapter A[Catch: all \-\> 0x003e]\l0x0025: INVOKE  (r1 I:androidx.recyclerview.widget.RecyclerView$State), (r2 I:androidx.recyclerview.widget.RecyclerView$Adapter) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.State.prepareForNestedPrefetch(androidx.recyclerview.widget.RecyclerView$Adapter):void A[Catch: all \-\> 0x003e, MD:(androidx.recyclerview.widget.RecyclerView$Adapter):void (m)]\l0x0028: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:331)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0029|LOOP_START\lTryCatch #0 \{all \-\> 0x003e, blocks: (B:11:0x001c, B:12:0x0029, B:14:0x002f), top: B:21:0x001c \}\lLOOP:0: B:12:0x0029\-\>B:15:0x0037\lCatch: all \-\> 0x003e\l|0x0029: IGET  (r2 I:int) = \l  (r0 I:androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl A[D('innerPrefetchRegistry' androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl)])\l androidx.recyclerview.widget.GapWorker.LayoutPrefetchRegistryImpl.mCount int A[Catch: all \-\> 0x003e]\l0x002b: ARITH  (r2 I:int) = (r2 I:int) * (2 int) A[Catch: all \-\> 0x003e]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|0x002d: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:23:0x003a \l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x003e, blocks: (B:11:0x001c, B:12:0x0029, B:14:0x002f), top: B:21:0x001c \}\lCatch: all \-\> 0x003e\l|0x002f: IGET  (r2 I:int[]) = \l  (r0 I:androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl A[D('innerPrefetchRegistry' androidx.recyclerview.widget.GapWorker$LayoutPrefetchRegistryImpl)])\l androidx.recyclerview.widget.GapWorker.LayoutPrefetchRegistryImpl.mPrefetchArray int[] A[Catch: all \-\> 0x003e] (LINE:334)\l0x0031: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) A[Catch: all \-\> 0x003e]\l0x0033: INVOKE  \l  (r3 I:androidx.recyclerview.widget.GapWorker)\l  (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView)])\l  (r2 I:int A[D('innerPosition' int)])\l  (r5 I:long A[D('deadlineNs' long)])\l type: DIRECT call: androidx.recyclerview.widget.GapWorker.prefetchPositionWithDeadline(androidx.recyclerview.widget.RecyclerView, int, long):androidx.recyclerview.widget.RecyclerView$ViewHolder A[Catch: all \-\> 0x003e, MD:(androidx.recyclerview.widget.RecyclerView, int, long):androidx.recyclerview.widget.RecyclerView$ViewHolder (m), TRY_LEAVE] (LINE:335)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0037|LOOP_END\lLOOP:0: B:12:0x0029\-\>B:15:0x0037\l|0x0037: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (2 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|0x003a: INVOKE   type: STATIC call: androidx.core.os.TraceCompat.endSection():void A[MD:():void (m)] (LINE:338)\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|0x0043: RETURN   A[SYNTHETIC] (LINE:341)\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_17 [shape=record,label="{17\:\ 0x003e|ExcHandler: all \-\> 0x003e\l|0x003e: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x003e] (LINE:338)\l}"];
Node_18 [shape=record,label="{18\:\ 0x003f|0x003f: INVOKE   type: STATIC call: androidx.core.os.TraceCompat.endSection():void A[MD:():void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0042|0x0042: THROW  (r1 I:java.lang.Throwable)  (LINE:339)\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.GapWorker.prefetchInnerRecyclerViewWithDeadline((r3 'this' I:androidx.recyclerview.widget.GapWorker A[IMMUTABLE_TYPE, THIS]), (r4 I:androidx.recyclerview.widget.RecyclerView A[D('innerView' androidx.recyclerview.widget.RecyclerView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[D('deadlineNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0043 \-\> B:1:?, BACK_EDGE: B:15:0x0037 \-\> B:12:0x0029, CROSS_EDGE: B:16:0x003a \-\> B:20:0x0043, CROSS_EDGE: B:19:0x0042 \-\> B:1:?, CROSS_EDGE: B:21:0x001c \-\> B:17:0x003e, CROSS_EDGE: B:7:0x000d \-\> B:9:0x0012, CROSS_EDGE: B:5:0x0005 \-\> B:9:0x0012\lDebug Info:\l  0x0033\-0x0037: r2 'innerPosition' I\l  0x0029\-0x003a: r1 'i' I\l  0x0014\-0x0043: r0 'innerPrefetchRegistry' Landroidx\/recyclerview\/widget\/GapWorker$LayoutPrefetchRegistryImpl;\l  \-1 \-0x0043: r4 'innerView' Landroidx\/recyclerview\/widget\/RecyclerView;\l  \-1 \-0x0043: r5 'deadlineNs' J\lTryCatch #0 \{all \-\> 0x003e, blocks: (B:11:0x001c, B:12:0x0029, B:14:0x002f), top: B:21:0x001c \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_4;
Node_3 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_20;
Node_10 -> Node_21[style=dashed];
Node_20 -> Node_1;
Node_21 -> Node_11;
Node_21 -> Node_17;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_22;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_23;
Node_14 -> Node_15;
Node_15 -> Node_12;
Node_23 -> Node_16;
Node_16 -> Node_24;
Node_24 -> Node_1;
Node_22 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_1;
}

