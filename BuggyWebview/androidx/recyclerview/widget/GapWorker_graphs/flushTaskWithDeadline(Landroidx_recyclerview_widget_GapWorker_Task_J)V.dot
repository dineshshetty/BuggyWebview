digraph "CFG forandroidx.recyclerview.widget.GapWorker.flushTaskWithDeadline(Landroidx\/recyclerview\/widget\/GapWorker$Task;J)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r5.immediate == false) goto L19\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|r0 = Long.MAX_VALUE\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 'taskDeadlineNs' long) = (r0v1 'taskDeadlineNs' long), (r0v3 'taskDeadlineNs' long) binds: [B:5:0x000a, B:4:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|androidx.recyclerview.widget.RecyclerView$ViewHolder r2 = prefetchPositionWithDeadline(r5.view, r5.position, r0)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|if (r2 == null) goto L18\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015}"];
Node_9 [shape=record,label="{9\:\ 0x0017|if (r2.mNestedRecyclerView == null) goto L17\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019}"];
Node_11 [shape=record,label="{11\:\ 0x001d|if (r2.isBound() == false) goto L16\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f}"];
Node_13 [shape=record,label="{13\:\ 0x0023|if (r2.isInvalid() != false) goto L15\l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|prefetchInnerRecyclerViewWithDeadline(r2.mNestedRecyclerView.get(), r6)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|r0 = r6\l}"];
MethodNode[shape=record,label="{private void androidx.recyclerview.widget.GapWorker.flushTaskWithDeadline((r4v0 'this' androidx.recyclerview.widget.GapWorker A[IMMUTABLE_TYPE, THIS]), (r5v0 'task' androidx.recyclerview.widget.GapWorker$Task A[D('task' androidx.recyclerview.widget.GapWorker$Task), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'deadlineNs' long A[D('deadlineNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0023 \-\> B:15:0x0030, CROSS_EDGE: B:11:0x001d \-\> B:15:0x0030, CROSS_EDGE: B:9:0x0017 \-\> B:15:0x0030, CROSS_EDGE: B:7:0x0013 \-\> B:15:0x0030, CROSS_EDGE: B:5:0x000a \-\> B:6:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_17;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_18;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_19 -> Node_1;
Node_18 -> Node_1;
Node_17 -> Node_1;
Node_16 -> Node_1;
Node_5 -> Node_6;
}

