digraph "CFG forandroidx.recyclerview.widget.GapWorker.prefetchPositionWithDeadline(Landroidx\/recyclerview\/widget\/RecyclerView;IJ)Landroidx\/recyclerview\/widget\/RecyclerView$ViewHolder;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (isPrefetchPositionAttached(r5, r6) == false) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|return null\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|androidx.recyclerview.widget.RecyclerView$Recycler r0 = r5.mRecycler\lr1 = false\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002e, blocks: (B:7:0x000b, B:9:0x0014, B:11:0x001a, B:13:0x0020, B:14:0x0026), top: B:20:0x000b \}\lCatch: all \-\> 0x002e\l|r5.onEnterLayoutOrScroll()     \/\/ Catch: java.lang.Throwable \-\> L2e\landroidx.recyclerview.widget.RecyclerView$ViewHolder r2 = r0.tryGetViewHolderForPositionByDeadline(r6, false, r7)     \/\/ Catch: java.lang.Throwable \-\> L2e\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|if (r2 == null) goto L15\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|TryCatch #0 \{all \-\> 0x002e, blocks: (B:7:0x000b, B:9:0x0014, B:11:0x001a, B:13:0x0020, B:14:0x0026), top: B:20:0x000b \}\lCatch: all \-\> 0x002e\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|if (r2.isBound() == false) goto L14\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|TryCatch #0 \{all \-\> 0x002e, blocks: (B:7:0x000b, B:9:0x0014, B:11:0x001a, B:13:0x0020, B:14:0x0026), top: B:20:0x000b \}\lCatch: all \-\> 0x002e\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|if (r2.isInvalid() != false) goto L14\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|TryCatch #0 \{all \-\> 0x002e, blocks: (B:7:0x000b, B:9:0x0014, B:11:0x001a, B:13:0x0020, B:14:0x0026), top: B:20:0x000b \}\lCatch: all \-\> 0x002e\l|r0.recycleView(r2.itemView)     \/\/ Catch: java.lang.Throwable \-\> L2e\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x002e, blocks: (B:7:0x000b, B:9:0x0014, B:11:0x001a, B:13:0x0020, B:14:0x0026), top: B:20:0x000b \}\lCatch: all \-\> 0x002e\l|r0.addViewHolderToRecycledViewPool(r2, false)     \/\/ Catch: java.lang.Throwable \-\> L2e\l}"];
Node_15 [shape=record,label="{15\:\ 0x0029|DONT_GENERATE\l|r5.onExitLayoutOrScroll(r1)\l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|RETURN\l|return r2\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|ExcHandler: all \-\> 0x002e\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|FINALLY_INSNS\l|r5.onExitLayoutOrScroll(false)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0032|throw r2\l}"];
MethodNode[shape=record,label="{private androidx.recyclerview.widget.RecyclerView$ViewHolder androidx.recyclerview.widget.GapWorker.prefetchPositionWithDeadline((r4v0 'this' androidx.recyclerview.widget.GapWorker A[IMMUTABLE_TYPE, THIS]), (r5v0 'view' androidx.recyclerview.widget.RecyclerView A[D('view' androidx.recyclerview.widget.RecyclerView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'position' int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'deadlineNs' long A[D('deadlineNs' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x002d \-\> B:1:?, CROSS_EDGE: B:14:0x0026 \-\> B:15:0x0029, CROSS_EDGE: B:10:0x0018 \-\> B:14:0x0026, CROSS_EDGE: B:8:0x0012 \-\> B:15:0x0029, CROSS_EDGE: B:19:0x0032 \-\> B:1:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x002e, blocks: (B:7:0x000b, B:9:0x0014, B:11:0x001a, B:13:0x0020, B:14:0x0026), top: B:20:0x000b \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_20;
Node_20 -> Node_7;
Node_20 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_1;
}

