digraph "CFG forandroidx.recyclerview.widget.GapWorker.isPrefetchPositionAttached(Landroidx\/recyclerview\/widget\/RecyclerView;I)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = r5.mChildHelper.getUnfilteredChildCount()\lr1 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|LOOP_START\lLOOP:0: B:3:0x0007\-\>B:10:0x001f\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v3 'i' int) binds: [B:2:0x0000, B:10:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L13\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|android.view.View r2 = r5.mChildHelper.getUnfilteredChildAt(r1)\landroidx.recyclerview.widget.RecyclerView$ViewHolder r3 = androidx.recyclerview.widget.RecyclerView.getChildViewHolderInt(r2)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (r3.mPosition != r6) goto L12\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017}"];
Node_7 [shape=record,label="{7\:\ 0x001b|if (r3.isInvalid() != false) goto L10\l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x001f|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|LOOP_END\lLOOP:0: B:3:0x0007\-\>B:10:0x001f\l|int r1 = r1 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{static boolean androidx.recyclerview.widget.GapWorker.isPrefetchPositionAttached((r5v0 'view' androidx.recyclerview.widget.RecyclerView A[D('view' androidx.recyclerview.widget.RecyclerView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'position' int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:10:0x001f \-\> B:3:0x0007, CROSS_EDGE: B:5:0x0015 \-\> B:10:0x001f, CROSS_EDGE: B:12:0x0023 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_14[style=dashed];
Node_7 -> Node_16;
Node_14 -> Node_8;
Node_8 -> Node_1;
Node_16 -> Node_10;
Node_10 -> Node_3;
Node_15 -> Node_10;
Node_13 -> Node_11;
Node_11 -> Node_1;
}

