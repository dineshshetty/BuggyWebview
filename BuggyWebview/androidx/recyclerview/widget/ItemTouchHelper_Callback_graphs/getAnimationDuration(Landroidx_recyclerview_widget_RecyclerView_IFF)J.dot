digraph "CFG forandroidx.recyclerview.widget.ItemTouchHelper.Callback.getAnimationDuration(Landroidx\/recyclerview\/widget\/RecyclerView;IFF)J" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.recyclerview.widget.RecyclerView$ItemAnimator r0 = r4.getItemAnimator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r0 != null) goto L7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r5 != 8) goto L6\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|SYNTHETIC\lRETURN\l|return 200\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|RETURN\lORIG_RETURN\l|return 250\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|if (r5 != 8) goto L10\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0.getMoveDuration()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017}"];
Node_11 [shape=record,label="{11\:\ 0x001b|RETURN\lORIG_RETURN\l|return r0.getRemoveDuration()\l}"];
MethodNode[shape=record,label="{public long androidx.recyclerview.widget.ItemTouchHelper.Callback.getAnimationDuration((r3v0 'this' androidx.recyclerview.widget.ItemTouchHelper$Callback A[IMMUTABLE_TYPE, THIS]), (r4v0 'recyclerView' androidx.recyclerview.widget.RecyclerView A[D('recyclerView' androidx.recyclerview.widget.RecyclerView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'animationType' int A[D('animationType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'animateDx' float A[D('animateDx' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'animateDy' float A[D('animateDy' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000d \-\> B:7:0x000f, CROSS_EDGE: B:11:0x001b \-\> B:1:?, CROSS_EDGE: B:10:0x0017 \-\> B:11:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_1;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_13;
Node_13 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

