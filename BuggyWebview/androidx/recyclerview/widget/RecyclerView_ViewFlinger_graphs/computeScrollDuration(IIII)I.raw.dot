digraph "CFG forandroidx.recyclerview.widget.RecyclerView.ViewFlinger.computeScrollDuration(IIII)I" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY])  (LINE:5483)\l0x0001: INVOKE  (r1 I:int) = (r14 I:int A[D('dx' int)]) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)]\l0x0005: INVOKE  (r2 I:int) = (r15 I:int A[D('dy' int)]) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:5484)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|0x0009: IF  (r1 I:??[int, byte, short, char] A[D('absDx' int)]) \<= (r2 I:??[int, byte, short, char] A[D('absDy' int)])  \-\> B:24:0x000d  (LINE:5485)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|0x000b: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|0x000e: ARITH  (r4 I:int) = (r16 I:int A[D('vx' int)]) * (r16 I:int A[D('vx' int)])  (LINE:5486)\l0x0010: ARITH  (r5 I:int) = (r17 I:int A[D('vy' int)]) * (r17 I:int A[D('vy' int)]) \l0x0012: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0013: CAST (r4 I:double) = (double) (r4 I:int) \l0x0014: INVOKE  (r4 I:double) = (r4 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x0018: CAST (r4 I:int) = (int) (r4 I:double) \l0x0019: ARITH  (r5 I:int) = (r14 I:int A[D('dx' int)]) * (r14 I:int A[D('dx' int)])  (LINE:5487)\l0x001b: ARITH  (r6 I:int) = (r15 I:int A[D('dy' int)]) * (r15 I:int A[D('dy' int)]) \l0x001d: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l0x001e: CAST (r5 I:double) = (double) (r5 I:int) \l0x001f: INVOKE  (r5 I:double) = (r5 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x0023: CAST (r5 I:int) = (int) (r5 I:double) \l0x0024: IGET  (r6 I:androidx.recyclerview.widget.RecyclerView) = (r0 I:androidx.recyclerview.widget.RecyclerView$ViewFlinger) androidx.recyclerview.widget.RecyclerView.ViewFlinger.this$0 androidx.recyclerview.widget.RecyclerView  (LINE:5488)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0026|0x0026: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('horizontal' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x002d \l}"];
Node_27 [shape=record,label="{27\:\ 0x0028|0x0028: INVOKE  (r6 I:int) = (r6 I:androidx.recyclerview.widget.RecyclerView) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.getWidth():int A[MD:():int (s)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0031|0x0031: ARITH  (r7 I:int) = (r6 I:int A[D('containerSize' int)]) \/ (2 int)  (LINE:5489)\l0x0033: CAST (r8 I:float) = (float) (r5 I:int A[D('delta' int)])  (LINE:5490)\l0x0034: CONST  (r9 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x0036: ARITH  (r8 I:float) = (r8 I:float) * (r9 I:float) \l0x0038: CAST (r10 I:float) = (float) (r6 I:int A[D('containerSize' int)]) \l0x0039: ARITH  (r8 I:float) = (r8 I:float) \/ (r10 I:float) \l0x003a: INVOKE  (r8 I:float) = (r9 I:float), (r8 I:float) type: STATIC call: java.lang.Math.min(float, float):float A[MD:(float, float):float (c)]\l0x003e: CAST (r10 I:float) = (float) (r7 I:int A[D('halfContainerSize' int)])  (LINE:5491)\l0x003f: CAST (r11 I:float) = (float) (r7 I:int A[D('halfContainerSize' int)]) \l0x0040: INVOKE  (r12 I:float) = (r13 I:androidx.recyclerview.widget.RecyclerView$ViewFlinger), (r8 I:float A[D('distanceRatio' float)]) type: DIRECT call: androidx.recyclerview.widget.RecyclerView.ViewFlinger.distanceInfluenceForSnapDuration(float):float A[MD:(float):float (m)] (LINE:5492)\l0x0044: ARITH  (r11 I:float) = (r11 I:float) * (r12 I:float) \l0x0046: ARITH  (r10 I:float) = (r10 I:float) + (r11 I:float) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0047|0x0047: IF  (r4 I:??[int, byte, short, char] A[D('velocity' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:32:0x005b  (LINE:5495)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0049|0x0049: CONST  (r9 I:??[int, float, short, byte, char]) = (1148846080(0x447a0000, float:1000.0) ??[int, float, short, byte, char])  (LINE:5496)\l0x004b: CAST (r11 I:float) = (float) (r4 I:int A[D('velocity' int)]) \l0x004c: ARITH  (r11 I:float) = (r10 I:float A[D('distance' float)]) \/ (r11 I:float) \l0x004e: INVOKE  (r11 I:float) = (r11 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x0052: ARITH  (r11 I:float) = (r11 I:float) * (r9 I:float) \l0x0054: INVOKE  (r9 I:int) = (r11 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x0058: ARITH  (r9 I:int) = (r9 I:int) * (4 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x006a|0x006a: CONST  (r11 I:??[int, float, short, byte, char] A[D('absDelta' float)]) = (2000(0x7d0, float:2.803E\-42) ??[int, float, short, byte, char])  (LINE:5501)\l0x006c: INVOKE  (r11 I:int) = (r9 I:int A[D('duration' int)]), (r11 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0070|RETURN\l|0x0070: RETURN  (r11 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x005b|0x005b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('horizontal' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x005f  (LINE:5498)\l}"];
Node_33 [shape=record,label="{33\:\ 0x005d|0x005d: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('absDx' int)]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0060|0x0060: CAST (r11 I:float) = (float) (r11 I:int) \l0x0061: CAST (r12 I:float) = (float) (r6 I:int A[D('containerSize' int)])  (LINE:5499)\l0x0062: ARITH  (r12 I:float) = (r11 I:float A[D('absDelta' float)]) \/ (r12 I:float) \l0x0064: ARITH  (r12 I:float) = (r12 I:float) + (r9 I:float) \l0x0065: CONST  (r9 I:??[int, float, short, byte, char]) = (1133903872(0x43960000, float:300.0) ??[int, float, short, byte, char]) \l0x0067: ARITH  (r12 I:float) = (r12 I:float) * (r9 I:float) \l0x0069: CAST (r9 I:int) = (int) (r12 I:float) \l}"];
Node_34 [shape=record,label="{34\:\ 0x005f|0x005f: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('absDy' int)]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x002d|0x002d: INVOKE  (r6 I:int) = (r6 I:androidx.recyclerview.widget.RecyclerView) type: VIRTUAL call: androidx.recyclerview.widget.RecyclerView.getHeight():int A[MD:():int (s)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private int androidx.recyclerview.widget.RecyclerView.ViewFlinger.computeScrollDuration((r13 'this' I:androidx.recyclerview.widget.RecyclerView$ViewFlinger A[IMMUTABLE_TYPE, THIS]), (r14 I:int A[D('dx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('dy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:int A[D('vx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('vy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0060 \-\> B:36:0x006a, CROSS_EDGE: B:34:0x005f \-\> B:35:0x0060, CROSS_EDGE: B:28:0x002d \-\> B:29:0x0031, CROSS_EDGE: B:24:0x000d \-\> B:25:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x005a\-0x005b: r9 'duration' I\l  0x0061\-0x006a: r11 'absDelta' F\l  0x0005\-0x0070: r1 'absDx' I\l  0x0009\-0x0070: r2 'absDy' I\l  0x000e\-0x0070: r3 'horizontal' Z\l  0x0019\-0x0070: r4 'velocity' I\l  0x0024\-0x0070: r5 'delta' I\l  0x0031\-0x0070: r6 'containerSize' I\l  0x0033\-0x0070: r7 'halfContainerSize' I\l  0x003e\-0x0070: r8 'distanceRatio' F\l  0x006a\-0x0070: r9 'duration' I\l  0x0047\-0x0070: r10 'distance' F\l  \-1 \-0x0070: r14 'dx' I\l  \-1 \-0x0070: r15 'dy' I\l  \-1 \-0x0070: r16 'vx' I\l  \-1 \-0x0070: r17 'vy' I\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_35 -> Node_36;
Node_34 -> Node_35;
Node_28 -> Node_29;
Node_24 -> Node_25;
}

