digraph "CFG forandroidx.recyclerview.widget.StaggeredGridLayoutManager.AnchorInfo.saveSpanReferenceLines([Landroidx\/recyclerview\/widget\/StaggeredGridLayoutManager$Span;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = r6.length\lint[] r1 = r5.mSpanReferenceLines\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r1 == null) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005}"];
Node_5 [shape=record,label="{5\:\ 0x0006|if (r1.length \>= r0) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|r1 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|LOOP_START\lLOOP:0: B:8:0x0012\-\>B:9:0x0014\lPHI: r1 \l  PHI: (r1v6 'i' int) = (r1v5 'i' int), (r1v7 'i' int) binds: [B:7:0x0011, B:9:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L8\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|LOOP_END\lLOOP:0: B:8:0x0012\-\>B:9:0x0014\l|r5.mSpanReferenceLines[r1] = r6[r1].getStartLine(Integer.MIN_VALUE)\lint r1 = r1 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|r5.mSpanReferenceLines = new int[r5.this$0.mSpans.length]\l}"];
MethodNode[shape=record,label="{void androidx.recyclerview.widget.StaggeredGridLayoutManager.AnchorInfo.saveSpanReferenceLines((r5v0 'this' androidx.recyclerview.widget.StaggeredGridLayoutManager$AnchorInfo A[IMMUTABLE_TYPE, THIS]), (r6v0 'spans' androidx.recyclerview.widget.StaggeredGridLayoutManager$Span[] A[D('spans' androidx.recyclerview.widget.StaggeredGridLayoutManager$Span[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0014 \-\> B:8:0x0012, CROSS_EDGE: B:5:0x0006 \-\> B:7:0x0011, CROSS_EDGE: B:3:0x0003 \-\> B:6:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_8;
Node_11 -> Node_10;
Node_10 -> Node_1;
Node_6 -> Node_7;
}

