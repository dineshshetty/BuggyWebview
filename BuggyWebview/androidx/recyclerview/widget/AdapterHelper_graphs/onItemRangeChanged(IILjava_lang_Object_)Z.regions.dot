digraph "CFG forandroidx.recyclerview.widget.AdapterHelper.onItemRangeChanged(IILjava\/lang\/Object;)Z" {
subgraph cluster_Region_430504424 {
label = "R(1:(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_629346571 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1944928407 {
label = "IF [B:13:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0002|if (r7 \< 1) goto L3\l}"];
subgraph cluster_Region_1254681300 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0004|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_342961628 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0005|r5.mPendingUpdates.add(obtainUpdateOp(4, r6, r7, r8))\lr5.mExistingUpdateTypes \|= 4\l}"];
Node_16 [shape=record,label="{16\:\ 0x001a|RETURN\l|return r5.mPendingUpdates.size() == 1\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x001c|ORIG_RETURN\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean androidx.recyclerview.widget.AdapterHelper.onItemRangeChanged((r5v0 'this' androidx.recyclerview.widget.AdapterHelper A[IMMUTABLE_TYPE, THIS]), (r6v0 'positionStart' int A[D('positionStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'itemCount' int A[D('itemCount' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'payload' java.lang.Object A[D('payload' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x001d \-\> B:11:?, CROSS_EDGE: B:16:0x001a \-\> B:18:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_17 -> Node_11;
Node_19 -> Node_11;
}

