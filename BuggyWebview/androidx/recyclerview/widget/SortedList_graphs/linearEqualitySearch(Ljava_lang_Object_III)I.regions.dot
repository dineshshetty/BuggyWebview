digraph "CFG forandroidx.recyclerview.widget.SortedList.linearEqualitySearch(Ljava\/lang\/Object;III)I" {
subgraph cluster_Region_117638759 {
label = "R(5:1|(2:3|(1:11)(1:(1:9)(1:7)))|12|(2:14|(1:(2:(1:20)|(1:18)))(1:22))|24)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0000|int int r0 = r6 \- 1\l}"];
subgraph cluster_LoopRegion_1177206595 {
label = "LOOP:0: (2:3|(1:11)(1:(1:9)(1:7)))";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0002|LOOP_START\lLOOP:0: B:32:0x0002\-\>B:39:0x001a\lPHI: r0 \l  PHI: (r0v1 'next' int) = (r0v0 'next' int), (r0v7 'next' int) binds: [B:31:0x0000, B:39:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= r7) goto L3\l}"];
subgraph cluster_Region_1465269433 {
label = "R(2:3|(1:11)(1:(1:9)(1:7)))";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0004|T r1 = r4.mData[r0]\lint int r2 = r4.mCallback.compare(r1, r5)\l}"];
subgraph cluster_IfRegion_1193962070 {
label = "IF [B:34:0x000e] THEN: R(1:11) ELSE: R(1:(1:9)(1:7))";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x000e|if (r2 != 0) goto L11\l}"];
subgraph cluster_Region_1637166092 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x001d|SYNTHETIC\lEDGE_INSN: B:53:0x001d\-\>B:40:0x001d ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_868500013 {
label = "R(1:(1:9)(1:7)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1720945524 {
label = "IF [B:37:0x0017] THEN: R(1:9) ELSE: R(1:7) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0017|if (r4.mCallback.areItemsTheSame(r1, r5) != false) goto L8\l}"];
subgraph cluster_Region_1215899658 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0019|RETURN\l|return r0\l}"];
}
subgraph cluster_Region_1806598852 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x001a|LOOP_END\lLOOP:0: B:32:0x0002\-\>B:39:0x001a\l|r0\-\-\l}"];
}
}
}
}
}
}
Node_40 [shape=record,label="{40\:\ 0x001d|EDGE_INSN: B:53:0x001d\-\>B:40:0x001d ?: BREAK  \l|int int r0 = r6 + 1\l}"];
subgraph cluster_LoopRegion_1538934497 {
label = "LOOP:1: (2:14|(1:(2:(1:20)|(1:18)))(1:22))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x001f|LOOP_START\lLOOP:1: B:41:0x001f\-\>B:48:0x0037\lPHI: r0 \l  PHI: (r0v3 'next' int) = (r0v2 'next' int), (r0v6 'next' int) binds: [B:40:0x001d, B:48:0x0037] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \< r8) goto L14\l}"];
subgraph cluster_Region_575146030 {
label = "R(2:14|(1:(2:(1:20)|(1:18)))(1:22))";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0021|T r1 = r4.mData[r0]\lint int r2 = r4.mCallback.compare(r1, r5)\l}"];
subgraph cluster_IfRegion_83421885 {
label = "IF [B:43:0x002b] THEN: R(1:(2:(1:20)|(1:18))) ELSE: R(1:22)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x002b|if (r2 == 0) goto L16\l}"];
subgraph cluster_Region_999983878 {
label = "R(1:(2:(1:20)|(1:18)))";
node [shape=record,color=blue];
subgraph cluster_Region_36233778 {
label = "R(2:(1:20)|(1:18))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_720669396 {
label = "IF [B:46:0x0034] THEN: R(1:20) ELSE: null";
node [shape=record,color=blue];
Node_46 [shape=record,label="{46\:\ 0x0034|if (r4.mCallback.areItemsTheSame(r1, r5) != false) goto L19\l}"];
subgraph cluster_Region_594562325 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x0036|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1151158256 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0037|LOOP_END\lLOOP:1: B:41:0x001f\-\>B:48:0x0037\l|r0++\l}"];
}
}
}
subgraph cluster_Region_1242909495 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x003a|RETURN\lORIG_RETURN\l|return \-1\l}"];
}
}
}
}
Node_57 [shape=record,label="{57\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
}
Node_29 [shape=record,color=red,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0011}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x0019|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x002e}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x0036|SYNTHETIC\l}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x003a|SYNTHETIC\l}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x003a|SYNTHETIC\l}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private int androidx.recyclerview.widget.SortedList.linearEqualitySearch((r4v0 'this' androidx.recyclerview.widget.SortedList\<T\> A[D('this' androidx.recyclerview.widget.SortedList\<T\>), IMMUTABLE_TYPE, THIS]), (r5v0 'item' T A[D('item' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'middle' int A[D('middle' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'left' int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'right' int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:39:0x001a \-\> B:32:0x0002, CROSS_EDGE: B:47:0x0036 \-\> B:30:?, BACK_EDGE: B:48:0x0037 \-\> B:41:0x001f, CROSS_EDGE: B:50:0x003b \-\> B:30:?, CROSS_EDGE: B:41:0x001f \-\> B:49:0x003a, CROSS_EDGE: B:32:0x0002 \-\> B:40:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;III)I\l}"];
MethodNode -> Node_29;Node_31 -> Node_32;
Node_32 -> Node_33;
Node_32 -> Node_51[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_36[style=dashed];
Node_34 -> Node_53;
Node_53 -> Node_40;
Node_37 -> Node_39[style=dashed];
Node_37 -> Node_52;
Node_38 -> Node_30;
Node_39 -> Node_32;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_41 -> Node_56[style=dashed];
Node_42 -> Node_43;
Node_43 -> Node_45;
Node_43 -> Node_55[style=dashed];
Node_46 -> Node_48[style=dashed];
Node_46 -> Node_54;
Node_47 -> Node_30;
Node_48 -> Node_41;
Node_49 -> Node_30;
Node_57 -> Node_30;
Node_29 -> Node_31;
Node_36 -> Node_37;
Node_52 -> Node_38;
Node_45 -> Node_46;
Node_54 -> Node_47;
Node_55 -> Node_49;
Node_56 -> Node_57;
Node_51 -> Node_40;
}

