digraph "CFG forandroidx.recyclerview.widget.SortedList.get(I)Ljava\/lang\/Object;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000}"];
Node_18 [shape=record,label="{18\:\ 0x0002|if (r4 \>= r3.mSize) goto L13\l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|if (r4 \< 0) goto L13\l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|T[] r0 = r3.mOldData\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|if (r0 == null) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|int r1 = r3.mNewDataStart\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|if (r4 \< r1) goto L11\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e}"];
Node_25 [shape=record,label="{25\:\ 0x0015|RETURN\l|return r0[(r4 \- r1) + r3.mOldDataStart]\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016}"];
Node_27 [shape=record,label="{27\:\ 0x001a|RETURN\l|return r3.mData[r4]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Asked to get item at \")\lr1.append(r4)\lr1.append(\" but size is \")\lr1.append(r3.mSize)\l}"];
Node_29 [shape=record,label="{29\:\ 0x003b|throw new java.lang.IndexOutOfBoundsException(r1.toString())\l}"];
MethodNode[shape=record,label="{public T androidx.recyclerview.widget.SortedList.get((r3v0 'this' androidx.recyclerview.widget.SortedList\<T\> A[D('this' androidx.recyclerview.widget.SortedList\<T\>), IMMUTABLE_TYPE, THIS]), (r4v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:16:?, CROSS_EDGE: B:21:0x0008 \-\> B:26:0x0016, CROSS_EDGE: B:29:0x003b \-\> B:16:?, CROSS_EDGE: B:18:0x0002 \-\> B:28:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)TT;\lEXCEPTIONS:[Ljava\/lang\/IndexOutOfBoundsException;]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_28 -> Node_29;
Node_29 -> Node_16;
}

