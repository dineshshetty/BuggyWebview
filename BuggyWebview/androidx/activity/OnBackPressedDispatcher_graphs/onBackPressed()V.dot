digraph "CFG forandroidx.activity.OnBackPressedDispatcher.onBackPressed()V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|java.util.Iterator r0 = r3.mOnBackPressedCallbacks.descendingIterator()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|LOOP_START\lLOOP:0: B:20:0x0006\-\>B:23:0x0016\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|if (r0.hasNext() == false) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|androidx.activity.OnBackPressedCallback r1 = r0.next()\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|LOOP_END\lLOOP:0: B:20:0x0006\-\>B:23:0x0016\l|if (r1.isEnabled() == false) goto L2\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|r1.handleOnBackPressed()\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|java.lang.Runnable r1 = r3.mFallbackOnBackPressed\l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|if (r1 == null) goto L15\l}"];
Node_29 [shape=record,label="{29\:\ 0x0021|r1.run()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0024|RETURN\lORIG_RETURN\l|return\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.activity.OnBackPressedDispatcher.onBackPressed((r3v0 'this' androidx.activity.OnBackPressedDispatcher A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0016 \-\> B:20:0x0006, CROSS_EDGE: B:30:0x0024 \-\> B:18:?, CROSS_EDGE: B:28:0x001f \-\> B:30:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_32;
Node_22 -> Node_23;
Node_23 -> Node_20;
Node_23 -> Node_31[style=dashed];
Node_31 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_18;
Node_32 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_33;
Node_29 -> Node_30;
Node_30 -> Node_18;
Node_33 -> Node_18;
}

