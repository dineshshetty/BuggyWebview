digraph "CFG forandroidx.activity.result.contract.ActivityResultContracts.CaptureVideo.parseResult(ILandroid\/content\/Intent;)Ljava\/lang\/Boolean;" {
subgraph cluster_Region_383681394 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x000a|RETURN\l|return java.lang.Boolean.valueOf(r2 == \-1)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0001}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0003}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0006|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0005}"];
MethodNode[shape=record,label="{public final java.lang.Boolean androidx.activity.result.contract.ActivityResultContracts.CaptureVideo.parseResult((r1v0 'this' androidx.activity.result.contract.ActivityResultContracts$CaptureVideo A[IMMUTABLE_TYPE, THIS]), (r2v0 'resultCode' int A[D('resultCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'intent' android.content.Intent A[D('intent' android.content.Intent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0005 \-\> B:6:0x0006\lINLINE_NOT_NEEDED\lREPLACED_BY: androidx.activity.result.contract.ActivityResultContracts.CaptureVideo.parseResult(int, android.content.Intent):java.lang.Boolean\lBRIDGED_BY: androidx.activity.result.contract.ActivityResultContracts.CaptureVideo.parseResult(int, android.content.Intent):java.lang.Boolean\lJadxCommentsAttr\{\l WARN: \l \-\> Can't rename method to resolve collision\l DEBUG: \l \-\> Method merged with bridge method\}\lMETHOD_OVERRIDE: [androidx.activity.result.contract.ActivityResultContract.parseResult(int, android.content.Intent):O]\l}"];
MethodNode -> Node_0;Node_7 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_5 -> Node_6;
}

