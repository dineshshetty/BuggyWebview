digraph "CFG forandroidx.activity.result.contract.ActivityResultContracts.StartActivityForResult.createIntent(Landroid\/content\/Context;Landroid\/content\/Intent;)Landroid\/content\/Intent;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"context\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('context' android.content.Context)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"input\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('input' android.content.Intent)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|0x000a: RETURN  (r3 I:android.content.Intent A[D('input' android.content.Intent)])  (LINE:64)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public android.content.Intent androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult.createIntent((r1 'this' I:androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult A[IMMUTABLE_TYPE, THIS]), (r2 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.content.Intent A[D('input' android.content.Intent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000a: r2 'context' Landroid\/content\/Context;\l  \-1 \-0x000a: r3 'input' Landroid\/content\/Intent;\lBRIDGED_BY: androidx.activity.result.contract.ActivityResultContracts.StartActivityForResult.createIntent(android.content.Context, android.content.Intent):android.content.Intent\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

