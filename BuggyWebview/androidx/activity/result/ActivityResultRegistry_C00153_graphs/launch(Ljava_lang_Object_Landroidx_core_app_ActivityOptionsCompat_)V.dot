digraph "CFG forandroidx.activity.result.ActivityResultRegistry.3.launch(Ljava\/lang\/Object;Landroidx\/core\/app\/ActivityOptionsCompat;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|java.lang.Integer r0 = androidx.activity.result.ActivityResultRegistry.this.mKeyToRc.get(r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000c|if (r0 == null) goto L6\l}"];
Node_12 [shape=record,label="{12\:\ 0x000e|androidx.activity.result.ActivityResultRegistry.this.mLaunchedKeys.add(r2)\landroidx.activity.result.ActivityResultRegistry.this.onLaunch(r0.intValue(), r3, r5, r6)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0023|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Attempting to launch an unregistered ActivityResultLauncher with contract \")\lr2.append(r3)\lr2.append(\" and input \")\lr2.append(r5)\lr2.append(\". You must ensure the ActivityResultLauncher is registered before calling launch().\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|throw new java.lang.IllegalStateException(r2.toString())\l}"];
MethodNode[shape=record,label="{public void androidx.activity.result.ActivityResultRegistry.3.launch((r4v0 'this' androidx.activity.result.ActivityResultRegistry$3 A[IMMUTABLE_TYPE, THIS]), (r5v0 'input' I A[D('input' I), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'options' androidx.core.app.ActivityOptionsCompat A[D('options' androidx.core.app.ActivityOptionsCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0048 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (TI;Landroidx\/core\/app\/ActivityOptionsCompat;)V\lMETHOD_OVERRIDE: [androidx.activity.result.ActivityResultLauncher.launch(I, androidx.core.app.ActivityOptionsCompat):void]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

