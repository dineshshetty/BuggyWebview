digraph "CFG forandroidx.collection.MapCollections.KeySet.hashCode()I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|r0 = 0\lint r1 = androidx.collection.MapCollections.this.colGetSize() + (\-1)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|LOOP_START\lLOOP:0: B:16:0x0009\-\>B:21:0x0019\lPHI: r0 r1 \l  PHI: (r0v1 'result' int) = (r0v0 'result' int), (r0v2 'result' int) binds: [B:15:0x0000, B:21:0x0019] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v3 'i' int) = (r1v2 'i' int), (r1v4 'i' int) binds: [B:15:0x0000, B:21:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< 0) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|r3 = 0\ljava.lang.Object r2 = androidx.collection.MapCollections.this.colGetEntry(r1, 0)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|if (r2 != null) goto L5\l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|int r3 = r2.hashCode()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0019|LOOP_END\lLOOP:0: B:16:0x0009\-\>B:21:0x0019\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:25:0x0019, B:24:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = r0 + r3\lint r1 = r1 + (\-1)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001d|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|RETURN\l|return r0\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int androidx.collection.MapCollections.KeySet.hashCode((r4v0 'this' androidx.collection.MapCollections$KeySet A[D('this' androidx.collection.MapCollections\<K, V\>$KeySet), IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:21:0x0019 \-\> B:16:0x0009, CROSS_EDGE: B:18:0x0012 \-\> B:21:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.hashCode():int\}]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_25[style=dashed];
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_21 -> Node_16;
Node_25 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

