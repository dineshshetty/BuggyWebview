digraph "CFG forandroidx.collection.ContainerHelpers.idealByteArraySize(I)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:33)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0001|LOOP_START\lLOOP:0: B:16:0x0001\-\>B:22:0x0010\l|0x0001: CONST  (r1 I:??[int, float, short, byte, char]) = (32 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0003|0x0003: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:24:0x0013 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|0x0005: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:34)\l0x0006: ARITH  (r2 I:int) = (r1 I:int) \<\< (r0 I:int A[D('i' int)]) \l0x0008: ARITH  (r2 I:int) = (r2 I:int) + (\-12 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r3 I:??[int, byte, short, char] A[D('need' int)]) \> (r2 I:??[int, byte, short, char])  \-\> B:22:0x0010 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|LOOP_END\lLOOP:0: B:16:0x0001\-\>B:22:0x0010\l|0x0010: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:33)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|0x000c: ARITH  (r1 I:int) = (r1 I:int) \<\< (r0 I:int A[D('i' int)])  (LINE:35)\l0x000d: ARITH  (r1 I:int) = (r1 I:int) + (\-12 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|RETURN\l|0x0013: RETURN  (r3 I:int A[D('need' int)])  (LINE:37)\l}"];
MethodNode[shape=record,label="{public static int androidx.collection.ContainerHelpers.idealByteArraySize((r3 I:int A[D('need' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x0010 \-\> B:16:0x0001, CROSS_EDGE: B:23:0x0013 \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0013: r0 'i' I\l  \-1 \-0x0013: r3 'need' I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_22;
Node_19 -> Node_25[style=dashed];
Node_22 -> Node_16;
Node_25 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_14;
Node_24 -> Node_23;
Node_23 -> Node_14;
}

