digraph "CFG forandroidx.collection.LongSparseArray.indexOfValue(Ljava\/lang\/Object;)I" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000}"];
Node_19 [shape=record,label="{19\:\ 0x0002|if (r2.mGarbage == false) goto L4\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|m114gc()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|r0 = 0\l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|LOOP_START\lLOOP:0: B:22:0x0008\-\>B:27:0x0013\lPHI: r0 \l  PHI: (r0v2 'i' int) = (r0v1 'i' int), (r0v4 'i' int) binds: [B:21:0x0007, B:27:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|if (r0 \>= r2.mSize) goto L13\l}"];
Node_24 [shape=record,label="{24\:\ 0x000c}"];
Node_25 [shape=record,label="{25\:\ 0x0010|if (r2.mValues[r0] != r3) goto L9\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|LOOP_END\lLOOP:0: B:22:0x0008\-\>B:27:0x0013\l|int r0 = r0 + 1\l}"];
Node_30 [shape=record,label="{30\:\ 0x0012|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0012|RETURN\l|return r0\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0016|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|RETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public int androidx.collection.LongSparseArray.indexOfValue((r2v0 'this' androidx.collection.LongSparseArray\<E\> A[D('this' androidx.collection.LongSparseArray\<E\>), IMMUTABLE_TYPE, THIS]), (r3v0 'value' E A[D('value' E), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0013 \-\> B:22:0x0008, CROSS_EDGE: B:29:0x0017 \-\> B:17:?, CROSS_EDGE: B:19:0x0002 \-\> B:21:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;)I\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_30[style=dashed];
Node_27 -> Node_22;
Node_30 -> Node_26;
Node_26 -> Node_17;
Node_31 -> Node_28;
Node_28 -> Node_17;
}

