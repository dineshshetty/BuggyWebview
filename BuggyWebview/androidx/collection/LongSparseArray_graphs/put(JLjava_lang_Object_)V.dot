digraph "CFG forandroidx.collection.LongSparseArray.put(JLjava\/lang\/Object;)V" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|int r0 = androidx.collection.ContainerHelpers.binarySearch(r7.mKeys, r7.mSize, r8)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|if (r0 \< 0) goto L6\l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|r7.mValues[r0] = r10\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x000f|int r0 = ~r0\lint r1 = r7.mSize\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|if (r0 \>= r1) goto L12\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|java.lang.Object[] r2 = r7.mValues\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|if (r2[r0] != androidx.collection.LongSparseArray.DELETED) goto L12\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|r7.mKeys[r0] = r8\lr2[r0] = r10\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|RETURN\l|return\l}"];
Node_36 [shape=record,label="{36\:\ 0x0023}"];
Node_37 [shape=record,label="{37\:\ 0x0025|if (r7.mGarbage == false) goto L17\l}"];
Node_38 [shape=record,label="{38\:\ 0x0027}"];
Node_39 [shape=record,label="{39\:\ 0x002a|if (r1 \< r7.mKeys.length) goto L17\l}"];
Node_40 [shape=record,label="{40\:\ 0x002c|m114gc()\lint r0 = ~androidx.collection.ContainerHelpers.binarySearch(r7.mKeys, r7.mSize, r8)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0038|PHI: r0 \l  PHI: (r0v3 'i' int) = (r0v2 'i' int), (r0v2 'i' int), (r0v4 'i' int) binds: [B:37:0x0025, B:39:0x002a, B:40:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r7.mSize\l}"];
Node_42 [shape=record,label="{42\:\ 0x003d|if (r1 \< r7.mKeys.length) goto L20\l}"];
Node_43 [shape=record,label="{43\:\ 0x003f|int r1 = androidx.collection.ContainerHelpers.idealLongArraySize(r1 + 1)\llong[] r2 = new long[r1]\ljava.lang.Object[] r3 = new java.lang.Object[r1]\llong[] r4 = r7.mKeys\ljava.lang.System.arraycopy(r4, 0, r2, 0, r4.length)\ljava.lang.Object[] r4 = r7.mValues\ljava.lang.System.arraycopy(r4, 0, r3, 0, r4.length)\lr7.mKeys = r2\lr7.mValues = r3\l}"];
Node_44 [shape=record,label="{44\:\ 0x005a|int r1 = r7.mSize\l}"];
Node_45 [shape=record,label="{45\:\ 0x005e|if ((r1 \- r0) == 0) goto L23\l}"];
Node_46 [shape=record,label="{46\:\ 0x0060|long[] r2 = r7.mKeys\ljava.lang.System.arraycopy(r2, r0, r2, r0 + 1, r1 \- r0)\ljava.lang.Object[] r1 = r7.mValues\ljava.lang.System.arraycopy(r1, r0, r1, r0 + 1, r7.mSize \- r0)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0072|r7.mKeys[r0] = r8\lr7.mValues[r0] = r10\lr7.mSize = r7.mSize + 1\l}"];
Node_48 [shape=record,label="{48\:\ 0x0080|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.collection.LongSparseArray.put((r7v0 'this' androidx.collection.LongSparseArray\<E\> A[D('this' androidx.collection.LongSparseArray\<E\>), IMMUTABLE_TYPE, THIS]), (r8v0 'key' long A[D('key' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'value' E A[D('value' E), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0022 \-\> B:26:?, CROSS_EDGE: B:47:0x0072 \-\> B:48:0x0080, CROSS_EDGE: B:45:0x005e \-\> B:47:0x0072, CROSS_EDGE: B:42:0x003d \-\> B:44:0x005a, CROSS_EDGE: B:39:0x002a \-\> B:41:0x0038, CROSS_EDGE: B:37:0x0025 \-\> B:41:0x0038, CROSS_EDGE: B:31:0x0012 \-\> B:36:0x0023\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (JTE;)V\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_49;
Node_49 -> Node_26;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_36;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_26;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_41;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_26;
}

