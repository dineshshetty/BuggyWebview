digraph "CFG forandroidx.collection.LongSparseArray.putIfAbsent(JLjava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_6 [shape=record,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) = \l  (r1 I:androidx.collection.LongSparseArray A[D('this' androidx.collection.LongSparseArray\<E\>)])\l  (r2 I:long A[D('key' long)])\l type: VIRTUAL call: androidx.collection.LongSparseArray.get(long):java.lang.Object A[MD:(long):E (m)] (LINE:315)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mapValue' E)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0009  (LINE:316)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|0x0006: INVOKE  \l  (r1 I:androidx.collection.LongSparseArray A[D('this' androidx.collection.LongSparseArray\<E\>)])\l  (r2 I:long A[D('key' long)])\l  (r4 I:java.lang.Object A[D('value' E)])\l type: VIRTUAL call: androidx.collection.LongSparseArray.put(long, java.lang.Object):void A[MD:(long, E):void (m)] (LINE:317)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:E A[D('mapValue' E)])  (LINE:319)\l}"];
Node_7 [shape=record,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public E androidx.collection.LongSparseArray.putIfAbsent((r1 'this' I:androidx.collection.LongSparseArray\<E\> A[D('this' androidx.collection.LongSparseArray\<E\>), IMMUTABLE_TYPE, THIS]), (r2 I:long A[D('key' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:E A[D('value' E), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0004 \-\> B:11:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0009: r0 'mapValue' Ljava\/lang\/Object;, signature: TE;\l  0x0000\-0x0009: r1 'this' Landroidx\/collection\/LongSparseArray;, signature: Landroidx\/collection\/LongSparseArray\<TE;\>;\l  \-1 \-0x0009: r2 'key' J\l  0x0000\-0x0009: r4 'value' Ljava\/lang\/Object;, signature: TE;\lTYPE_VARS: [E]\lSIGNATURE: (JTE;)TE;\l}"];
MethodNode -> Node_6;Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_7;
}

