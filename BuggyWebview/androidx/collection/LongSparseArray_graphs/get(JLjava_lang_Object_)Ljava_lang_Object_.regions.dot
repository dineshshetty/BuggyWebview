digraph "CFG forandroidx.collection.LongSparseArray.get(JLjava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1134624517 {
label = "R(3:1|(2:3|(1:6))|8)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|int int r0 = androidx.collection.ContainerHelpers.binarySearch(r4.mKeys, r4.mSize, r5)\l}"];
subgraph cluster_IfRegion_2096680618 {
label = "IF [B:13:0x0008] THEN: R(2:3|(1:6)) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0008|if (r0 \>= 0) goto L3\l}"];
subgraph cluster_Region_1556411987 {
label = "R(2:3|(1:6))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000a|java.lang.Object[] java.lang.Object[] r1 = r4.mValues\l}"];
subgraph cluster_IfRegion_1527791827 {
label = "IF [B:15:0x0010] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0010|if (r1[r0] != androidx.collection.LongSparseArray.DELETED) goto L5\l}"];
subgraph cluster_Region_416836250 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0015|RETURN\l|return (E) r1[r0]\l}"];
}
}
}
}
Node_19 [shape=record,label="{19\:\ 0x0016|RETURN\l|return r7\l}"];
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0013}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public E androidx.collection.LongSparseArray.get((r4v0 'this' androidx.collection.LongSparseArray\<E\> A[D('this' androidx.collection.LongSparseArray\<E\>), IMMUTABLE_TYPE, THIS]), (r5v0 'key' long A[D('key' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'valueIfKeyNotFound' E A[D('valueIfKeyNotFound' E), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0016 \-\> B:11:?, CROSS_EDGE: B:13:0x0008 \-\> B:19:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (JTE;)TE;\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_19[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_19[style=dashed];
Node_18 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_17 -> Node_18;
}

