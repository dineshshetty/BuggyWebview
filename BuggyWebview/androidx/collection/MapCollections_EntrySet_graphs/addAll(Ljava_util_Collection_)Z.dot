digraph "CFG forandroidx.collection.MapCollections.EntrySet.addAll(Ljava\/util\/Collection;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|int r0 = androidx.collection.MapCollections.this.colGetSize()\ljava.util.Iterator r1 = r7.iterator()\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|LOOP_START\lLOOP:0: B:16:0x000a\-\>B:18:0x0010\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|if (r1.hasNext() == false) goto L5\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|LOOP_END\lLOOP:0: B:16:0x000a\-\>B:18:0x0010\l|java.util.Map$Entry r2 = r1.next()\landroidx.collection.MapCollections.this.colPut(r2.getKey(), r2.getValue())\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0024}"];
Node_20 [shape=record,label="{20\:\ 0x002a|if (r0 == androidx.collection.MapCollections.this.colGetSize()) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x002c|SYNTHETIC\lRETURN\l|return true\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x002e|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.collection.MapCollections.EntrySet.addAll((r6v0 'this' androidx.collection.MapCollections$EntrySet A[D('this' androidx.collection.MapCollections\<K, V\>$EntrySet), IMMUTABLE_TYPE, THIS]), (r7v0 'collection' java.util.Collection\<? extends java.util.Map$Entry\<K, V\>\> A[D('collection' java.util.Collection\<? extends java.util.Map$Entry\<K, V\>\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:18:0x0010 \-\> B:16:0x000a, CROSS_EDGE: B:22:0x002e \-\> B:23:0x002f\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/util\/Collection\<+Ljava\/util\/Map$Entry\<TK;TV;\>;\>;)Z\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.addAll(java.util.Collection\<? extends E\>):boolean\}]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_16;
Node_24 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_14;
Node_22 -> Node_14;
}

