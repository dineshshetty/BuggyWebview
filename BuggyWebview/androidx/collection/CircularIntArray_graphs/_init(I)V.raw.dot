digraph "CFG forandroidx.collection.CircularIntArray.\<init\>(I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r2 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:59)\l0x0003: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:60)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r3 I:??[int, byte, short, char] A[D('minCapacity' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:63)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r3 I:??[int, byte, short, char] A[D('minCapacity' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r3 I:int A[D('minCapacity' int)]) type: STATIC call: java.lang.Integer.bitCount(int):int A[MD:(int):int (c)] (LINE:70)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: ARITH  (r1 I:int) = (r3 I:int A[D('minCapacity' int)]) + (\-1 int)  (LINE:71)\l0x0012: INVOKE  (r1 I:int) = (r1 I:int) type: STATIC call: java.lang.Integer.highestOneBit(int):int A[MD:(int):int (c)]\l0x0016: ARITH  (r0 I:int) = (r1 I:int) \<\< (1 int) \l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: ARITH  (r1 I:int) = (r0 I:int A[D('arrayCapacity' int)]) + (\-1 int)  (LINE:76)\l0x001c: IPUT  (r1 I:int), (r2 I:androidx.collection.CircularIntArray) androidx.collection.CircularIntArray.mCapacityBitmask int \l0x001e: NEW_ARRAY  (r1 I:int[]) = (r0 I:int A[D('arrayCapacity' int), IMMUTABLE_TYPE]) type: int[]  (LINE:77)\l0x0020: IPUT  (r1 I:int[]), (r2 I:androidx.collection.CircularIntArray) androidx.collection.CircularIntArray.mElements int[] \l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:78)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('arrayCapacity' int)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minCapacity' int)])  (LINE:73)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('arrayCapacity' int)]) =  java.lang.IllegalArgumentException  (LINE:64)\l0x0025: CONST_STR  (r1 I:java.lang.String) =  \"capacity must be \<= 2^30\" \l0x0027: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|0x002a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:61)\l0x002d: CONST_STR  (r1 I:java.lang.String) =  \"capacity must be \>= 1\" \l0x002f: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.collection.CircularIntArray.\<init\>((r2 'this' I:androidx.collection.CircularIntArray A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('minCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0019 \-\> B:10:0x001a, CROSS_EDGE: B:13:0x002a \-\> B:1:?, CROSS_EDGE: B:15:0x0032 \-\> B:1:?\lDebug Info:\l  0x0018\-0x0019: r0 'arrayCapacity' I\l  0x001a\-0x0023: r0 'arrayCapacity' I\l  \-1 \-0x0032: r3 'minCapacity' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_1;
}

