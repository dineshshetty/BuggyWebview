digraph "CFG forandroidx.collection.SparseArrayCompat.append(ILjava\/lang\/Object;)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mSize int  (LINE:460)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0010 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: IGET  (r1 I:int[]) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mKeys int[] \l0x0006: ARITH  (r2 I:int) = (r0 I:int) + (\-1 int) \l0x0008: AGET  (r1 I:??[int, float, short, byte, char]) = (r1 I:??[int, float][]), (r2 I:??[int, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|0x000a: IF  (r8 I:??[int, byte, short, char] A[D('key' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:26:0x0010 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000c|0x000c: INVOKE  \l  (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)])\l  (r8 I:int A[D('key' int)])\l  (r9 I:java.lang.Object A[D('value' E)])\l type: VIRTUAL call: androidx.collection.SparseArrayCompat.put(int, java.lang.Object):void A[MD:(int, E):void (m)] (LINE:461)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|RETURN\l|0x000f: RETURN    (LINE:462)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|0x0010: IGET  (r1 I:boolean) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mGarbage boolean  (LINE:465)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001c \l}"];
Node_28 [shape=record,label="{28\:\ 0x0014|0x0014: IGET  (r1 I:int[]) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mKeys int[] \l0x0016: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0017|0x0017: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:31:0x001c \l}"];
Node_30 [shape=record,label="{30\:\ 0x0019|0x0019: INVOKE  (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) type: DIRECT call: androidx.collection.SparseArrayCompat.gc():void A[MD:():void (m)] (LINE:466)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|0x001c: IGET  (r0 I:int) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mSize int  (LINE:469)\l0x001e: IGET  (r1 I:int[]) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mKeys int[]  (LINE:470)\l0x0020: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0021|0x0021: IF  (r0 I:??[int, byte, short, char] A[D('pos' int)]) \< (r1 I:??[int, byte, short, char])  \-\> B:34:0x003e \l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: ARITH  (r1 I:int) = (r0 I:int A[D('pos' int)]) + (1 int)  (LINE:471)\l0x0025: INVOKE  (r1 I:int) = (r1 I:int) type: STATIC call: androidx.collection.ContainerHelpers.idealIntArraySize(int):int A[MD:(int):int (m)]\l0x0029: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[D('n' int), IMMUTABLE_TYPE]) type: int[]  (LINE:473)\l0x002b: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r1 I:int A[D('n' int), IMMUTABLE_TYPE]) type: java.lang.Object[]  (LINE:474)\l0x002d: IGET  (r4 I:int[]) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mKeys int[]  (LINE:477)\l0x002f: ARRAY_LENGTH  (r5 I:int) = (r4 I:??[]) \l0x0030: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0031: INVOKE  (r4 I:java.lang.Object), (r6 I:int), (r2 I:java.lang.Object A[D('nkeys' int[])]), (r6 I:int), (r5 I:int) type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l0x0034: IGET  (r4 I:java.lang.Object[]) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mValues java.lang.Object[]  (LINE:478)\l0x0036: ARRAY_LENGTH  (r5 I:int) = (r4 I:??[]) \l0x0037: INVOKE  (r4 I:java.lang.Object), (r6 I:int), (r3 I:java.lang.Object A[D('nvalues' java.lang.Object[])]), (r6 I:int), (r5 I:int) type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l0x003a: IPUT  \l  (r2 I:int[] A[D('nkeys' int[])])\l  (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)])\l androidx.collection.SparseArrayCompat.mKeys int[]  (LINE:480)\l0x003c: IPUT  \l  (r3 I:java.lang.Object[] A[D('nvalues' java.lang.Object[])])\l  (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)])\l androidx.collection.SparseArrayCompat.mValues java.lang.Object[]  (LINE:481)\l}"];
Node_34 [shape=record,label="{34\:\ 0x003e|0x003e: IGET  (r1 I:int[] A[D('n' int)]) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mKeys int[]  (LINE:484)\l0x0040: APUT  \l  (r1 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('pos' int)])\l  (r8 I:??[int, float, short, byte, char] A[D('key' int)])\l \l0x0042: IGET  (r1 I:java.lang.Object[]) = (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mValues java.lang.Object[]  (LINE:485)\l0x0044: APUT  (r1 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('pos' int)]), (r9 I:??[OBJECT, ARRAY] A[D('value' E)]) \l0x0046: ARITH  (r1 I:int) = (r0 I:int A[D('pos' int)]) + (1 int)  (LINE:486)\l0x0048: IPUT  (r1 I:int), (r7 I:androidx.collection.SparseArrayCompat A[D('this' androidx.collection.SparseArrayCompat\<E\>)]) androidx.collection.SparseArrayCompat.mSize int \l}"];
Node_35 [shape=record,label="{35\:\ 0x004a|RETURN\l|0x004a: RETURN    (LINE:487)\l}"];
MethodNode[shape=record,label="{public void androidx.collection.SparseArrayCompat.append((r7 'this' I:androidx.collection.SparseArrayCompat\<E\> A[D('this' androidx.collection.SparseArrayCompat\<E\>), IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('key' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:E A[D('value' E), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x004a \-\> B:19:?, CROSS_EDGE: B:32:0x0021 \-\> B:34:0x003e, CROSS_EDGE: B:29:0x0017 \-\> B:31:0x001c, CROSS_EDGE: B:27:0x0012 \-\> B:31:0x001c, CROSS_EDGE: B:21:0x0002 \-\> B:26:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0029\-0x003e: r1 'n' I\l  0x002b\-0x003e: r2 'nkeys' [I\l  0x002d\-0x003e: r3 'nvalues' [Ljava\/lang\/Object;\l  0x001e\-0x004a: r0 'pos' I\l  0x0000\-0x004a: r7 'this' Landroidx\/collection\/SparseArrayCompat;, signature: Landroidx\/collection\/SparseArrayCompat\<TE;\>;\l  \-1 \-0x004a: r8 'key' I\l  0x0000\-0x004a: r9 'value' Ljava\/lang\/Object;, signature: TE;\lTYPE_VARS: [E]\lSIGNATURE: (ITE;)V\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_19;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_19;
}

