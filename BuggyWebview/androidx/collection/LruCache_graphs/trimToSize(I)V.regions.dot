digraph "CFG forandroidx.collection.LruCache.trimToSize(I)V" {
subgraph cluster_Region_759652383 {
label = "R(1:(2:0|19)) | DECL_VAR: K key, V value\l";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_2001138404 {
label = "LOOP:0: (2:0|19)";
node [shape=record,color=blue];
subgraph cluster_Region_1990138954 {
label = "R(2:0|19)";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_833644665 {
label = "Synchronized:R(2:1|(1:(1:(2:(1:24)|(1:17)))(1:1)))";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0000|LOOP_START\lLOOP:0: B:31:0x0000\-\>B:45:0x004b\l}"];
subgraph cluster_Region_830529316 {
label = "R(1:(1:(2:(1:24)|(1:17)))(1:1))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_668010131 {
label = "IF [B:33:0x0003, B:35:0x000b, B:37:0x000f] THEN: R(1:(2:(1:24)|(1:17))) ELSE: R(1:1)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0003|if (r5.size \>= 0) goto L5\l}"];
Node_35 [shape=record,label="{35\:\ 0x000b|ADDED_TO_REGION\l|if (r5.map.isEmpty() != true) goto L13\l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|ADDED_TO_REGION\l|if (r5.size == 0) goto L13\l}"];
subgraph cluster_Region_1732247903 {
label = "R(1:(2:(1:24)|(1:17)))";
node [shape=record,color=blue];
subgraph cluster_Region_1426153070 {
label = "R(2:(1:24)|(1:17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1649394197 {
label = "IF [B:39:0x0013, B:41:0x001b] THEN: R(1:24) ELSE: null";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0013|if (r5.size \<= r6) goto L24\l}"];
Node_41 [shape=record,label="{41\:\ 0x001b|ADDED_TO_REGION\l|if (r5.map.isEmpty() == true) goto L20\l}"];
subgraph cluster_Region_1292215633 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x0050|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:56:0x0050\-\>B:46:0x0050 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_880974661 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x001e|TryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l|java.util.Map$Entry java.util.Map.Entry\<K, V\> r0 = r5.map.entrySet().iterator().next()     \/\/ Catch: java.lang.Throwable \-\> L71\ljava.lang.Object r1 = r0.getKey()     \/\/ Catch: java.lang.Throwable \-\> L71\ljava.lang.Object r2 = r0.getValue()     \/\/ Catch: java.lang.Throwable \-\> L71\lr5.map.remove(r1)     \/\/ Catch: java.lang.Throwable \-\> L71\lr5.size \-= safeSizeOf(r1, r2)\lr5.evictionCount++\l}"];
}
}
}
subgraph cluster_Region_707272535 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_InsnContainer_1963312722 [shape=record,label="{|break\l}"];
}
}
}
}
Node_45 [shape=record,label="{45\:\ 0x004b|LOOP_END\lLOOP:0: B:31:0x0000\-\>B:45:0x004b\l|entryRemoved(true, r1, r2, null)\l}"];
}
}
}
Node_29 [shape=record,color=red,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0005|TryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x000d|TryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l}"];
Node_55 [shape=record,color=red,label="{55\:\ 0x0052|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:55:0x0052\-\>B:48:0x0052 ?: BREAK  \l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x0052|EDGE_INSN: B:54:0x0052\-\>B:48:0x0052 ?: BREAK  , EDGE_INSN: B:55:0x0052\-\>B:48:0x0052 ?: BREAK  \lTryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x0070|TryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l|throw new java.lang.IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\")     \/\/ Catch: java.lang.Throwable \-\> L71\l}"];
Node_30 [shape=record,color=red,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0011|TryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0015|TryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x004a|TRY_LEAVE\lDONT_GENERATE\lTryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l|monitor\-exit()     \/\/ Catch: java.lang.Throwable \-\> L71\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x001d|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x001d|ADDED_TO_REGION\lEDGE_INSN: B:42:0x001d\-\>B:46:0x0050 ?: BREAK  \l}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0050|TRY_ENTER\lDONT_GENERATE\lEDGE_INSN: B:56:0x0050\-\>B:46:0x0050 ?: BREAK  , EDGE_INSN: B:42:0x001d\-\>B:46:0x0050 ?: BREAK  \lTryCatch #0 \{, blocks: (B:32:0x0001, B:34:0x0005, B:36:0x000d, B:38:0x0011, B:40:0x0015, B:43:0x001e, B:44:0x004a, B:46:0x0050, B:48:0x0052, B:49:0x0070), top: B:53:0x0001 \}\lCatch: all \-\> 0x0071\l|monitor\-exit()     \/\/ Catch: java.lang.Throwable \-\> L71\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x0051}"];
Node_54 [shape=record,color=red,label="{54\:\ 0x0052|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:54:0x0052\-\>B:48:0x0052 ?: BREAK  \l}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x0071|REMOVE\lExcHandler: all \-\> 0x0071\l}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x0072|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x0071\l}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x0073|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public void androidx.collection.LruCache.trimToSize((r5v0 'this' androidx.collection.LruCache\<K, V\> A[D('this' androidx.collection.LruCache\<K, V\>), IMMUTABLE_TYPE, THIS]), (r6v0 'maxSize' int A[D('maxSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lBACK_EDGE: B:45:0x004b \-\> B:31:0x0000, CROSS_EDGE: B:39:0x0013 \-\> B:46:0x0050, CROSS_EDGE: B:49:0x0070 \-\> B:30:?, CROSS_EDGE: B:35:0x000b \-\> B:38:0x0011, CROSS_EDGE: B:33:0x0003 \-\> B:48:0x0052, CROSS_EDGE: B:52:0x0073 \-\> B:30:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lJadxCommentsAttr\{\l WARN: \l \-\> Code restructure failed: missing block: B:49:0x0070, code lost:\l    throw new java.lang.IllegalStateException(getClass().getName() + \".sizeOf() is reporting inconsistent results!\");\l\}\l}"];
MethodNode -> Node_29;Node_31 -> Node_53;
Node_33 -> Node_34;
Node_33 -> Node_54[style=dashed];
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_37 -> Node_38;
Node_37 -> Node_55[style=dashed];
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_56;
Node_41 -> Node_43[style=dashed];
Node_41 -> Node_57;
Node_56 -> Node_46;
Node_43 -> Node_44;
Node_45 -> Node_31;
Node_29 -> Node_31;
Node_53 -> Node_32;
Node_53 -> Node_50;
Node_32 -> Node_33;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_55 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_30;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_44 -> Node_45;
Node_57 -> Node_42;
Node_42 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_30;
Node_54 -> Node_48;
Node_50 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_30;
}

