digraph "CFG forandroidx.collection.LruCache.remove(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('key' K)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0020  (LINE:200)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: MONITOR_ENTER  (r3 I:??[OBJECT, ARRAY] A[D('this' androidx.collection.LruCache\<K, V\>)])  (LINE:205)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x000b, B:25:0x0014), top: B:34:0x0003 \}\lCatch: all \-\> 0x001d\l|0x0003: IGET  (r0 I:java.util.LinkedHashMap\<K, V\>) = (r3 I:androidx.collection.LruCache A[D('this' androidx.collection.LruCache\<K, V\>)]) androidx.collection.LruCache.map java.util.LinkedHashMap A[Catch: all \-\> 0x001d, TRY_ENTER] (LINE:206)\l0x0005: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.LinkedHashMap), (r4 I:java.lang.Object A[D('key' K)]) type: VIRTUAL call: java.util.LinkedHashMap.remove(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x001d, MD:(java.lang.Object):V (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previous' V)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0014  (LINE:207)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000b|TryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x000b, B:25:0x0014), top: B:34:0x0003 \}\lCatch: all \-\> 0x001d\l|0x000b: IGET  (r1 I:int) = (r3 I:androidx.collection.LruCache A[D('this' androidx.collection.LruCache\<K, V\>)]) androidx.collection.LruCache.size int A[Catch: all \-\> 0x001d] (LINE:208)\l0x000d: INVOKE  (r2 I:int) = \l  (r3 I:androidx.collection.LruCache A[D('this' androidx.collection.LruCache\<K, V\>)])\l  (r4 I:java.lang.Object A[D('key' K)])\l  (r0 I:java.lang.Object A[D('previous' V)])\l type: DIRECT call: androidx.collection.LruCache.safeSizeOf(java.lang.Object, java.lang.Object):int A[Catch: all \-\> 0x001d, MD:(K, V):int (m)]\l0x0011: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) A[Catch: all \-\> 0x001d]\l0x0012: IPUT  (r1 I:int), (r3 I:androidx.collection.LruCache A[D('this' androidx.collection.LruCache\<K, V\>)]) androidx.collection.LruCache.size int A[Catch: all \-\> 0x001d]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x000b, B:25:0x0014), top: B:34:0x0003 \}\lCatch: all \-\> 0x001d\l|0x0014: MONITOR_EXIT  (r3 I:??[OBJECT, ARRAY] A[D('this' androidx.collection.LruCache\<K, V\>)]) A[Catch: all \-\> 0x001d, TRY_LEAVE] (LINE:210)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previous' V)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x001c  (LINE:212)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|0x0017: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:213)\l0x0018: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: INVOKE  \l  (r3 I:androidx.collection.LruCache A[D('this' androidx.collection.LruCache\<K, V\>)])\l  (r1 I:boolean)\l  (r4 I:java.lang.Object A[D('key' K)])\l  (r0 I:java.lang.Object A[D('previous' V)])\l  (r2 I:java.lang.Object)\l type: VIRTUAL call: androidx.collection.LruCache.entryRemoved(boolean, java.lang.Object, java.lang.Object, java.lang.Object):void A[MD:(boolean, K, V, V):void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:V A[D('previous' V)])  (LINE:216)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|ExcHandler: all \-\> 0x001d\l|0x001d: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x001d] (LINE:210)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001e|TRY_ENTER\lTRY_LEAVE\lCatch: all \-\> 0x001d\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|0x0020: NEW_INSTANCE  (r0 I:java.lang.NullPointerException) =  java.lang.NullPointerException  (LINE:201)\l0x0022: CONST_STR  (r1 I:java.lang.String) =  \"key == null\" \l0x0024: INVOKE  (r0 I:java.lang.NullPointerException), (r1 I:java.lang.String) type: DIRECT call: java.lang.NullPointerException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|0x0027: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final V androidx.collection.LruCache.remove((r3 'this' I:androidx.collection.LruCache\<K, V\> A[D('this' androidx.collection.LruCache\<K, V\>), IMMUTABLE_TYPE, THIS]), (r4 I:K A[D('key' K), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0015 \-\> B:28:0x001c, CROSS_EDGE: B:31:0x001f \-\> B:19:?, CROSS_EDGE: B:23:0x0009 \-\> B:25:0x0014, CROSS_EDGE: B:34:0x0003 \-\> B:29:0x001d, CROSS_EDGE: B:33:0x0027 \-\> B:19:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:22:0x0003, B:24:0x000b, B:25:0x0014), top: B:34:0x0003 \}\lTYPE_VARS: [V, K]\lSIGNATURE: (TK;)TV;\lDebug Info:\l  0x0009\-0x001d: r0 'previous' Ljava\/lang\/Object;, signature: TV;\l  0x0000\-0x0027: r3 'this' Landroidx\/collection\/LruCache;, signature: Landroidx\/collection\/LruCache\<TK;TV;\>;\l  0x0000\-0x0027: r4 'key' Ljava\/lang\/Object;, signature: TK;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_32;
Node_21 -> Node_34;
Node_34 -> Node_22;
Node_34 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_35;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_19;
Node_35 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
}

