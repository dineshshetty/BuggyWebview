digraph "CFG forandroidx.collection.ArraySet.\<init\>(Landroidx\/collection\/ArraySet;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:androidx.collection.ArraySet A[D('this' androidx.collection.ArraySet\<E\>)]) type: DIRECT call: androidx.collection.ArraySet.\<init\>():void A[MD:():void (m)] (LINE:261)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0003|0x0003: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('set' androidx.collection.ArraySet\<E\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:262)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: INVOKE  \l  (r0 I:androidx.collection.ArraySet A[D('this' androidx.collection.ArraySet\<E\>)])\l  (r1 I:androidx.collection.ArraySet A[D('set' androidx.collection.ArraySet\<E\>)])\l type: VIRTUAL call: androidx.collection.ArraySet.addAll(androidx.collection.ArraySet):void A[MD:(androidx.collection.ArraySet\<? extends E\>):void (m)] (LINE:263)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|RETURN\lORIG_RETURN\l|0x0008: RETURN    (LINE:265)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0008: RETURN   A[SYNTHETIC] (LINE:265)\l}"];
MethodNode[shape=record,label="{public void androidx.collection.ArraySet.\<init\>((r0 'this' I:androidx.collection.ArraySet\<E\> A[D('this' androidx.collection.ArraySet\<E\>), IMMUTABLE_TYPE, THIS]), (r1 I:androidx.collection.ArraySet\<E\> A[D('set' androidx.collection.ArraySet\<E\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0003 \-\> B:12:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x0008: r0 'this' Landroidx\/collection\/ArraySet;, signature: Landroidx\/collection\/ArraySet\<TE;\>;\l  0x0000\-0x0008: r1 'set' Landroidx\/collection\/ArraySet;, signature: Landroidx\/collection\/ArraySet\<TE;\>;\lTYPE_VARS: [E]\lSIGNATURE: (Landroidx\/collection\/ArraySet\<TE;\>;)V\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

