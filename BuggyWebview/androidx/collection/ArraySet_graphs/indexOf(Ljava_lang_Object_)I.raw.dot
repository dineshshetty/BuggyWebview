digraph "CFG forandroidx.collection.ArraySet.indexOf(Ljava\/lang\/Object;)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('key' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0007  (LINE:325)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r1 I:androidx.collection.ArraySet A[D('this' androidx.collection.ArraySet\<E\>)]) type: DIRECT call: androidx.collection.ArraySet.indexOfNull():int A[MD:():int (m)]\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r2 I:java.lang.Object A[D('key' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.hashCode():int A[MD:():int (c)]\l0x000b: INVOKE  (r0 I:int) = \l  (r1 I:androidx.collection.ArraySet A[D('this' androidx.collection.ArraySet\<E\>)])\l  (r2 I:java.lang.Object A[D('key' java.lang.Object)])\l  (r0 I:int)\l type: DIRECT call: androidx.collection.ArraySet.indexOf(java.lang.Object, int):int A[MD:(java.lang.Object, int):int (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int androidx.collection.ArraySet.indexOf((r1 'this' I:androidx.collection.ArraySet\<E\> A[D('this' androidx.collection.ArraySet\<E\>), IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[D('key' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0007 \-\> B:12:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x000f: r1 'this' Landroidx\/collection\/ArraySet;, signature: Landroidx\/collection\/ArraySet\<TE;\>;\l  \-1 \-0x000f: r2 'key' Ljava\/lang\/Object;\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_8;
}

