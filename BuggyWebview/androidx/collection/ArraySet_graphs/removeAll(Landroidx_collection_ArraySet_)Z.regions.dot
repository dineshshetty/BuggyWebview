digraph "CFG forandroidx.collection.ArraySet.removeAll(Landroidx\/collection\/ArraySet;)Z" {
subgraph cluster_Region_296291544 {
label = "R(4:1|(1:3)|5|6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|int int r0 = r5.mSize\lint int r1 = r4.mSize\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1637564406 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0005|LOOP_START\lLOOP:0: B:15:0x0005\-\>B:16:0x0007\lPHI: r2 \l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v5 'i' int) binds: [B:14:0x0000, B:16:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \< r0) goto L3\l}"];
subgraph cluster_Region_616038596 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0007|LOOP_END\lLOOP:0: B:15:0x0005\-\>B:16:0x0007\l|remove(r5.valueAt(r2))\lr2++\l}"];
}
}
Node_17 [shape=record,label="{17\:\ 0x0011|int int r2 = r4.mSize\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|RETURN\l|return r1 != r2\l}"];
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0011|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0015|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0017|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public boolean androidx.collection.ArraySet.removeAll((r4v0 'this' androidx.collection.ArraySet\<E\> A[D('this' androidx.collection.ArraySet\<E\>), IMMUTABLE_TYPE, THIS]), (r5v0 'array' androidx.collection.ArraySet\<? extends E\> A[D('array' androidx.collection.ArraySet\<? extends E\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:16:0x0007 \-\> B:15:0x0005, CROSS_EDGE: B:20:0x0017 \-\> B:21:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Landroidx\/collection\/ArraySet\<+TE;\>;)Z\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_22[style=dashed];
Node_16 -> Node_15;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_20;
Node_12 -> Node_14;
Node_22 -> Node_17;
Node_19 -> Node_13;
Node_20 -> Node_13;
}

