digraph "CFG forandroidx.collection.MapCollections.removeAllHelper(Ljava\/util\/Map;Ljava\/util\/Collection;)Z" {
subgraph cluster_Region_16798138 {
label = "R(3:1|(1:4)|7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0000|int int r0 = r3.size()\ljava.util.Iterator java.util.Iterator\<?\> r1 = r4.iterator()\l}"];
subgraph cluster_LoopRegion_808390476 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000c|if (r1.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_1591363557 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000e|LOOP_END\lLOOP:0: B:16:0x0008\-\>B:18:0x000e\l|r3.remove(r1.next())\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x001a|RETURN\l|return r0 != r3.size()\l}"];
}
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0008|LOOP_START\lLOOP:0: B:16:0x0008\-\>B:18:0x000e\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0016|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0016}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x001c|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x001e|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static boolean androidx.collection.MapCollections.removeAllHelper((r3v0 'map' java.util.Map\<K, V\> A[D('map' java.util.Map\<K, V\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'collection' java.util.Collection\<?\> A[D('collection' java.util.Collection\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x000e \-\> B:16:0x0008, CROSS_EDGE: B:22:0x001e \-\> B:23:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;\>(Ljava\/util\/Map\<TK;TV;\>;Ljava\/util\/Collection\<*\>;)Z\l}"];
MethodNode -> Node_13;Node_15 -> Node_16;
Node_17 -> Node_18;
Node_17 -> Node_24[style=dashed];
Node_18 -> Node_16;
Node_20 -> Node_21;
Node_20 -> Node_22;
Node_13 -> Node_15;
Node_16 -> Node_17;
Node_24 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_14;
Node_22 -> Node_14;
}

