digraph "CFG forandroidx.collection.MapCollections.equalsSetHelper(Ljava\/util\/Set;Ljava\/lang\/Object;)Z" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:515)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0001|0x0001: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('set' java.util.Set\<T\>)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('object' java.lang.Object)])  \-\> B:28:0x0004 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean)  (LINE:516)\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('object' java.lang.Object)]) java.util.Set  (LINE:518)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0023 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0009|0x0009: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('object' java.lang.Object)])  (LINE:519)\l0x000a: CHECK_CAST (r1 I:java.util.Set) = (java.util.Set) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x000c|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ 0x000c|TRY_ENTER\lTryCatch #2 \{ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021, blocks: (B:31:0x000c, B:33:0x0016), top: B:43:0x000c \}\lCatch: ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021\l|0x000c: INVOKE  (r3 I:int) = (r5 I:java.util.Set A[D('set' java.util.Set\<T\>)]) type: INTERFACE call: java.util.Set.size():int A[Catch: ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021, MD:():int (c), TRY_ENTER] (LINE:522)\l0x0010: INVOKE  (r4 I:int) = (r1 I:java.util.Set A[D('s' java.util.Set\<?\>)]) type: INTERFACE call: java.util.Set.size():int A[Catch: ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021, MD:():int (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|0x0014: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x001d \l}"];
Node_33 [shape=record,label="{33\:\ 0x0016|TRY_LEAVE\lTryCatch #2 \{ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021, blocks: (B:31:0x000c, B:33:0x0016), top: B:43:0x000c \}\lCatch: ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021\l|0x0016: INVOKE  (r3 I:boolean) = (r5 I:java.util.Set A[D('set' java.util.Set\<T\>)]), (r1 I:java.util.Collection A[D('s' java.util.Set\<?\>)]) type: INTERFACE call: java.util.Set.containsAll(java.util.Collection):boolean A[Catch: ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021, MD:(java.util.Collection\<?\>):boolean (c), TRY_LEAVE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|0x001a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x001d \l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_44 [shape=record,label="{44\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_36 [shape=record,label="{36\:\ 0x001d|RETURN\lORIG_RETURN\l|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: RETURN  (r0 I:boolean) \l}"];
Node_38 [shape=record,label="{38\:\ 0x001f|ExcHandler: ClassCastException \-\> 0x001f\l|0x001f: MOVE_EXCEPTION  (r0 I:java.lang.ClassCastException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: ClassCastException \-\> 0x001f] (LINE:525)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0020|RETURN\l|0x0020: RETURN  (r2 I:boolean)  (LINE:526)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0021|ExcHandler: NullPointerException \-\> 0x0021\l|0x0021: MOVE_EXCEPTION  (r0 I:java.lang.NullPointerException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NullPointerException \-\> 0x0021] (LINE:523)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0022|RETURN\l|0x0022: RETURN  (r2 I:boolean)  (LINE:524)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0023|RETURN\l|0x0023: RETURN  (r2 I:boolean)  (LINE:529)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.collection.MapCollections.equalsSetHelper((r5 I:java.util.Set\<T\> A[D('set' java.util.Set\<T\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[D('object' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x001e \-\> B:24:?, CROSS_EDGE: B:34:0x001a \-\> B:37:0x001e, CROSS_EDGE: B:39:0x0020 \-\> B:24:?, CROSS_EDGE: B:41:0x0022 \-\> B:24:?, CROSS_EDGE: B:32:0x0014 \-\> B:36:0x001d, CROSS_EDGE: B:43:0x000c \-\> B:38:0x001f, CROSS_EDGE: B:43:0x000c \-\> B:40:0x0021, CROSS_EDGE: B:42:0x0023 \-\> B:24:?\lINLINE_NOT_NEEDED\lTryCatch #2 \{ClassCastException \-\> 0x001f, NullPointerException \-\> 0x0021, blocks: (B:31:0x000c, B:33:0x0016), top: B:43:0x000c \}\lTYPE_VARS: [T, V, K]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Set\<TT;\>;Ljava\/lang\/Object;)Z\lDebug Info:\l  0x0020\-0x0021: r0 'ignored' Ljava\/lang\/ClassCastException;\l  0x0022\-0x0023: r0 'ignored' Ljava\/lang\/NullPointerException;\l  0x000c\-0x0023: r1 's' Ljava\/util\/Set;, signature: Ljava\/util\/Set\<*\>;\l  0x0000\-0x0023: r5 'set' Ljava\/util\/Set;, signature: Ljava\/util\/Set\<TT;\>;\l  \-1 \-0x0023: r6 'object' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_24;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_42;
Node_30 -> Node_43;
Node_43 -> Node_31;
Node_43 -> Node_38;
Node_43 -> Node_40;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_33 -> Node_44;
Node_34 -> Node_36;
Node_34 -> Node_45[style=dashed];
Node_45 -> Node_24;
Node_44 -> Node_38;
Node_44 -> Node_40;
Node_36 -> Node_24;
Node_38 -> Node_39;
Node_39 -> Node_24;
Node_40 -> Node_41;
Node_41 -> Node_24;
Node_42 -> Node_24;
}

