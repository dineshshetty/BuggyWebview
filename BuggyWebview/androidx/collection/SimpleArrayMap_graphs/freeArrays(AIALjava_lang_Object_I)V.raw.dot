digraph "CFG forandroidx.collection.SimpleArrayMap.freeArrays([I[Ljava\/lang\/Object;I)V" {
Node_39 [shape=record,label="{39\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0000|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<androidx.collection.SimpleArrayMap\>) =  androidx.collection.SimpleArrayMap.class  (LINE:201)\l0x0002: ARRAY_LENGTH  (r1 I:int) = (r8 I:??[] A[D('hashes' int[])]) \l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0005: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: CONST  (r5 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l0x0008: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0009: CONST  (r7 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x002e \l}"];
Node_43 [shape=record,label="{43\:\ 0x000d|0x000d: MONITOR_ENTER  (r0 I:??[OBJECT, ARRAY])  (LINE:202)\l}"];
Node_72 [shape=record,label="{72\:\ 0x000e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_44 [shape=record,label="{44\:\ 0x000e|TRY_ENTER\lTryCatch #1 \{all \-\> 0x002b, blocks: (B:44:0x000e, B:46:0x0012, B:48:0x001d, B:49:0x0022, B:50:0x0029), top: B:72:0x000e \}\lCatch: all \-\> 0x002b\l|0x000e: SGET  (r1 I:int) =  androidx.collection.SimpleArrayMap.mTwiceBaseCacheSize int A[Catch: all \-\> 0x002b, TRY_ENTER] (LINE:203)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0010|0x0010: IF  (r1 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char])  \-\> B:50:0x0029 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0012|TryCatch #1 \{all \-\> 0x002b, blocks: (B:44:0x000e, B:46:0x0012, B:48:0x001d, B:49:0x0022, B:50:0x0029), top: B:72:0x000e \}\lCatch: all \-\> 0x002b\l|0x0012: SGET  (r1 I:java.lang.Object[]) =  androidx.collection.SimpleArrayMap.mTwiceBaseCache java.lang.Object[] A[Catch: all \-\> 0x002b] (LINE:204)\l0x0014: APUT  \l  (r9 I:??[OBJECT, ARRAY][] A[D('array' java.lang.Object[])])\l  (r4 I:??[int, short, byte, char])\l  (r1 I:??[OBJECT, ARRAY])\l A[Catch: all \-\> 0x002b]\l0x0016: APUT  \l  (r9 I:??[OBJECT, ARRAY][] A[D('array' java.lang.Object[])])\l  (r6 I:??[int, short, byte, char])\l  (r8 I:??[OBJECT, ARRAY] A[D('hashes' int[])])\l A[Catch: all \-\> 0x002b] (LINE:205)\l0x0018: ARITH  (r1 I:int) = (r10 I:int A[D('size' int)]) \<\< (1 int) A[Catch: all \-\> 0x002b] (LINE:206)\l0x001a: ARITH  (r1 I:int) = (r1 I:int) \- (r6 I:int) A[Catch: all \-\> 0x002b]\l}"];
Node_47 [shape=record,label="{47\:\ 0x001b|LOOP_START\lLOOP:0: B:47:0x001b\-\>B:48:0x001d\l|0x001b: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \< (r3 I:??[int, byte, short, char])  \-\> B:74:0x0022 \l}"];
Node_48 [shape=record,label="{48\:\ 0x001d|LOOP_END\lTryCatch #1 \{all \-\> 0x002b, blocks: (B:44:0x000e, B:46:0x0012, B:48:0x001d, B:49:0x0022, B:50:0x0029), top: B:72:0x000e \}\lLOOP:0: B:47:0x001b\-\>B:48:0x001d\lCatch: all \-\> 0x002b\l|0x001d: APUT  \l  (r9 I:??[OBJECT, ARRAY][] A[D('array' java.lang.Object[])])\l  (r1 I:??[int, short, byte, char] A[D('i' int)])\l  (r2 I:??[OBJECT, ARRAY])\l A[Catch: all \-\> 0x002b] (LINE:207)\l0x001f: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int) A[Catch: all \-\> 0x002b] (LINE:206)\l0x0021: GOTO  \-\> 0x001b \l}"];
Node_74 [shape=record,label="{74\:\ 0x0022|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0022|TryCatch #1 \{all \-\> 0x002b, blocks: (B:44:0x000e, B:46:0x0012, B:48:0x001d, B:49:0x0022, B:50:0x0029), top: B:72:0x000e \}\lCatch: all \-\> 0x002b\l|0x0022: SPUT  (r9 I:java.lang.Object[] A[D('array' java.lang.Object[])]) androidx.collection.SimpleArrayMap.mTwiceBaseCache java.lang.Object[] A[Catch: all \-\> 0x002b] (LINE:209)\l0x0024: SGET  (r1 I:int) =  androidx.collection.SimpleArrayMap.mTwiceBaseCacheSize int A[Catch: all \-\> 0x002b] (LINE:210)\l0x0026: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int) A[Catch: all \-\> 0x002b]\l0x0027: SPUT  (r1 I:int) androidx.collection.SimpleArrayMap.mTwiceBaseCacheSize int A[Catch: all \-\> 0x002b]\l}"];
Node_50 [shape=record,label="{50\:\ 0x0029|TryCatch #1 \{all \-\> 0x002b, blocks: (B:44:0x000e, B:46:0x0012, B:48:0x001d, B:49:0x0022, B:50:0x0029), top: B:72:0x000e \}\lCatch: all \-\> 0x002b\l|0x0029: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x002b] (LINE:214)\l}"];
Node_51 [shape=record,label="{51\:\ 0x002a|0x002a: GOTO  \-\> 0x0053 \l}"];
Node_69 [shape=record,label="{69\:\ 0x0053|RETURN\lORIG_RETURN\l|0x0053: RETURN    (LINE:230)\l}"];
Node_40 [shape=record,label="{40\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_73 [shape=record,label="{73\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_52 [shape=record,label="{52\:\ 0x002b|ExcHandler: all \-\> 0x002b\l|0x002b: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x002b]\l}"];
Node_53 [shape=record,label="{53\:\ 0x002c|TRY_LEAVE\lCatch: all \-\> 0x002b\l}"];
Node_54 [shape=record,label="{54\:\ 0x002d|0x002d: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_55 [shape=record,label="{55\:\ 0x002e|0x002e: ARRAY_LENGTH  (r1 I:int) = (r8 I:??[] A[D('hashes' int[])])  (LINE:215)\l0x002f: CONST  (r7 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0030|0x0030: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:? \l}"];
Node_57 [shape=record,label="{57\:\ 0x0032|0x0032: MONITOR_ENTER  (r0 I:??[OBJECT, ARRAY])  (LINE:216)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0033|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_58 [shape=record,label="{58\:\ 0x0033|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0050, blocks: (B:58:0x0033, B:60:0x0037, B:62:0x0042, B:63:0x0047, B:64:0x004e), top: B:70:0x0033 \}\lCatch: all \-\> 0x0050\l|0x0033: SGET  (r1 I:int) =  androidx.collection.SimpleArrayMap.mBaseCacheSize int A[Catch: all \-\> 0x0050, TRY_ENTER] (LINE:217)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0035|0x0035: IF  (r1 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char])  \-\> B:64:0x004e \l}"];
Node_60 [shape=record,label="{60\:\ 0x0037|TryCatch #0 \{all \-\> 0x0050, blocks: (B:58:0x0033, B:60:0x0037, B:62:0x0042, B:63:0x0047, B:64:0x004e), top: B:70:0x0033 \}\lCatch: all \-\> 0x0050\l|0x0037: SGET  (r1 I:java.lang.Object[]) =  androidx.collection.SimpleArrayMap.mBaseCache java.lang.Object[] A[Catch: all \-\> 0x0050] (LINE:218)\l0x0039: APUT  \l  (r9 I:??[OBJECT, ARRAY][] A[D('array' java.lang.Object[])])\l  (r4 I:??[int, short, byte, char])\l  (r1 I:??[OBJECT, ARRAY])\l A[Catch: all \-\> 0x0050]\l0x003b: APUT  \l  (r9 I:??[OBJECT, ARRAY][] A[D('array' java.lang.Object[])])\l  (r6 I:??[int, short, byte, char])\l  (r8 I:??[OBJECT, ARRAY] A[D('hashes' int[])])\l A[Catch: all \-\> 0x0050] (LINE:219)\l0x003d: ARITH  (r1 I:int) = (r10 I:int A[D('size' int)]) \<\< (1 int) A[Catch: all \-\> 0x0050] (LINE:220)\l0x003f: ARITH  (r1 I:int) = (r1 I:int) \- (r6 I:int) A[Catch: all \-\> 0x0050]\l}"];
Node_61 [shape=record,label="{61\:\ 0x0040|LOOP_START\lLOOP:1: B:61:0x0040\-\>B:62:0x0042\l|0x0040: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \< (r3 I:??[int, byte, short, char])  \-\> B:75:0x0047 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0042|LOOP_END\lTryCatch #0 \{all \-\> 0x0050, blocks: (B:58:0x0033, B:60:0x0037, B:62:0x0042, B:63:0x0047, B:64:0x004e), top: B:70:0x0033 \}\lLOOP:1: B:61:0x0040\-\>B:62:0x0042\lCatch: all \-\> 0x0050\l|0x0042: APUT  \l  (r9 I:??[OBJECT, ARRAY][] A[D('array' java.lang.Object[])])\l  (r1 I:??[int, short, byte, char] A[D('i' int)])\l  (r2 I:??[OBJECT, ARRAY])\l A[Catch: all \-\> 0x0050] (LINE:221)\l0x0044: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int) A[Catch: all \-\> 0x0050] (LINE:220)\l0x0046: GOTO  \-\> 0x0040 \l}"];
Node_75 [shape=record,label="{75\:\ 0x0047|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0047|TryCatch #0 \{all \-\> 0x0050, blocks: (B:58:0x0033, B:60:0x0037, B:62:0x0042, B:63:0x0047, B:64:0x004e), top: B:70:0x0033 \}\lCatch: all \-\> 0x0050\l|0x0047: SPUT  (r9 I:java.lang.Object[] A[D('array' java.lang.Object[])]) androidx.collection.SimpleArrayMap.mBaseCache java.lang.Object[] A[Catch: all \-\> 0x0050] (LINE:223)\l0x0049: SGET  (r1 I:int) =  androidx.collection.SimpleArrayMap.mBaseCacheSize int A[Catch: all \-\> 0x0050] (LINE:224)\l0x004b: ARITH  (r1 I:int) = (r1 I:int) + (r6 I:int) A[Catch: all \-\> 0x0050]\l0x004c: SPUT  (r1 I:int) androidx.collection.SimpleArrayMap.mBaseCacheSize int A[Catch: all \-\> 0x0050]\l}"];
Node_64 [shape=record,label="{64\:\ 0x004e|TryCatch #0 \{all \-\> 0x0050, blocks: (B:58:0x0033, B:60:0x0037, B:62:0x0042, B:63:0x0047, B:64:0x004e), top: B:70:0x0033 \}\lCatch: all \-\> 0x0050\l|0x004e: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0050] (LINE:228)\l}"];
Node_65 [shape=record,label="{65\:\ 0x004f|0x004f: GOTO  \-\> 0x0053 \l}"];
Node_77 [shape=record,label="{77\:\ ?|SYNTHETIC\lRETURN\l|0x0053: RETURN   A[SYNTHETIC] (LINE:230)\l}"];
Node_71 [shape=record,label="{71\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_66 [shape=record,label="{66\:\ 0x0050|ExcHandler: all \-\> 0x0050\l|0x0050: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0050]\l}"];
Node_67 [shape=record,label="{67\:\ 0x0051|TRY_LEAVE\lCatch: all \-\> 0x0050\l}"];
Node_68 [shape=record,label="{68\:\ 0x0052|0x0052: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_76 [shape=record,label="{76\:\ ?|SYNTHETIC\lRETURN\l|0x0053: RETURN   A[SYNTHETIC] (LINE:230)\l}"];
MethodNode[shape=record,label="{private static void androidx.collection.SimpleArrayMap.freeArrays((r8 I:int[] A[D('hashes' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Object[] A[D('array' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:48:0x001d \-\> B:47:0x001b, CROSS_EDGE: B:54:0x002d \-\> B:40:?, CROSS_EDGE: B:45:0x0010 \-\> B:50:0x0029, CROSS_EDGE: B:72:0x000e \-\> B:52:0x002b, BACK_EDGE: B:62:0x0042 \-\> B:61:0x0040, CROSS_EDGE: B:65:0x004f \-\> B:69:0x0053, CROSS_EDGE: B:68:0x0052 \-\> B:40:?, CROSS_EDGE: B:59:0x0035 \-\> B:64:0x004e, CROSS_EDGE: B:70:0x0033 \-\> B:66:0x0050, CROSS_EDGE: B:56:0x0030 \-\> B:69:0x0053\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x0022: r1 'i' I\l  0x0040\-0x0047: r1 'i' I\l  \-1 \-0x0053: r8 'hashes' [I\l  \-1 \-0x0053: r9 'array' [Ljava\/lang\/Object;\l  \-1 \-0x0053: r10 'size' I\lTryCatch #0 \{all \-\> 0x0050, blocks: (B:58:0x0033, B:60:0x0037, B:62:0x0042, B:63:0x0047, B:64:0x004e), top: B:70:0x0033 \}, TryCatch #1 \{all \-\> 0x002b, blocks: (B:44:0x000e, B:46:0x0012, B:48:0x001d, B:49:0x0022, B:50:0x0029), top: B:72:0x000e \}\l}"];
MethodNode -> Node_39;Node_39 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_55;
Node_43 -> Node_72;
Node_72 -> Node_44;
Node_72 -> Node_52;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_50;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_74;
Node_48 -> Node_47;
Node_74 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_50 -> Node_73;
Node_51 -> Node_69;
Node_69 -> Node_40;
Node_73 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_40;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_76;
Node_57 -> Node_70;
Node_70 -> Node_58;
Node_70 -> Node_66;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_64;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_75;
Node_62 -> Node_61;
Node_75 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65;
Node_64 -> Node_71;
Node_65 -> Node_77;
Node_77 -> Node_40;
Node_71 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_40;
Node_76 -> Node_40;
}

