digraph "CFG forandroidx.collection.SimpleArrayMap.hashCode()I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|int[] r0 = r9.mHashes\ljava.lang.Object[] r1 = r9.mArray\lr2 = 0\lr3 = 0\lr4 = 1\lint r5 = r9.mSize\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|LOOP_START\lLOOP:0: B:16:0x0009\-\>B:21:0x0017\lPHI: r2 r3 r4 \l  PHI: (r2v1 'result' int) = (r2v0 'result' int), (r2v2 'result' int) binds: [B:15:0x0000, B:21:0x0017] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'i' int) = (r3v0 'i' int), (r3v2 'i' int) binds: [B:15:0x0000, B:21:0x0017] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'v' int) = (r4v0 'v' int), (r4v2 'v' int) binds: [B:15:0x0000, B:21:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r5) goto L10\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|r6 = r1[r4]\lr7 = r0[r3]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|if (r6 != null) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|r8 = 0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|LOOP_END\lLOOP:0: B:16:0x0009\-\>B:21:0x0017\lPHI: r8 \l  PHI: (r8v1 int) = (r8v0 int), (r8v2 int) binds: [B:24:0x0017, B:25:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 + (r7 ^ r8)\lint r3 = r3 + 1\lint r4 = r4 + 2\l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|int r8 = r6.hashCode()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\l|return r2\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int androidx.collection.SimpleArrayMap.hashCode((r9v0 'this' androidx.collection.SimpleArrayMap\<K, V\> A[D('this' androidx.collection.SimpleArrayMap\<K, V\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0017 \-\> B:16:0x0009, CROSS_EDGE: B:20:0x0013 \-\> B:21:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_25;
Node_25 -> Node_21;
Node_21 -> Node_16;
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

