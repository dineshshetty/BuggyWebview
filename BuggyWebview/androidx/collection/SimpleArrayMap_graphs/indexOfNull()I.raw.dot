digraph "CFG forandroidx.collection.SimpleArrayMap.indexOfNull()I" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r6 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mSize int  (LINE:126)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('N' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0006  (LINE:129)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0004|RETURN\l|0x0004: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:130)\l0x0005: RETURN  (r1 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0006|0x0006: IGET  (r1 I:int[]) = (r6 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mHashes int[]  (LINE:133)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INVOKE  (r1 I:int) = (r1 I:int[]), (r0 I:int A[D('N' int)]), (r2 I:int) type: STATIC call: androidx.collection.SimpleArrayMap.binarySearchHashes(int[], int, int):int A[MD:(int[], int, int):int (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x000d|0x000d: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:45:0x0010  (LINE:136)\l}"];
Node_44 [shape=record,label="{44\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:int A[D('index' int)])  (LINE:137)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0010|0x0010: IGET  (r2 I:java.lang.Object[]) = (r6 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mArray java.lang.Object[]  (LINE:141)\l0x0012: ARITH  (r3 I:int) = (r1 I:int A[D('index' int)]) \<\< (1 int) \l0x0014: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0019 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0018|RETURN\l|0x0018: RETURN  (r1 I:int A[D('index' int)])  (LINE:142)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0019|0x0019: ARITH  (r2 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:147)\l}"];
Node_49 [shape=record,label="{49\:\ 0x001b|LOOP_START\lLOOP:0: B:49:0x001b\-\>B:55:0x002c\l|0x001b: IF  (r2 I:??[int, byte, short, char] A[D('end' int)]) \>= (r0 I:??[int, byte, short, char] A[D('N' int)])  \-\> B:68:0x002f \l}"];
Node_50 [shape=record,label="{50\:\ 0x001d|0x001d: IGET  (r3 I:int[]) = (r6 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mHashes int[] \l0x001f: AGET  (r3 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][]), (r2 I:??[int, short, byte, char] A[D('end' int)]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0021|0x0021: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x002f \l}"];
Node_52 [shape=record,label="{52\:\ 0x0023|0x0023: IGET  (r3 I:java.lang.Object[]) = (r6 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mArray java.lang.Object[]  (LINE:148)\l0x0025: ARITH  (r4 I:int) = (r2 I:int A[D('end' int)]) \<\< (1 int) \l0x0027: AGET  (r3 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0029|0x0029: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x002c \l}"];
Node_55 [shape=record,label="{55\:\ 0x002c|LOOP_END\lLOOP:0: B:49:0x001b\-\>B:55:0x002c\l|0x002c: ARITH  (r2 I:int) = (r2 I:int A[D('end' int)]) + (1 int)  (LINE:147)\l}"];
Node_67 [shape=record,label="{67\:\ 0x002b|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x002b|RETURN\l|0x002b: RETURN  (r2 I:int A[D('end' int)]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x002f|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x002f|0x002f: ARITH  (r3 I:int) = (r1 I:int A[D('index' int)]) + (\-1 int)  (LINE:152)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0031|LOOP_START\lLOOP:1: B:57:0x0031\-\>B:63:0x0042\l|0x0031: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \< (0 ??[int, byte, short, char])  \-\> B:69:0x0045 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0033|0x0033: IGET  (r4 I:int[]) = (r6 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mHashes int[] \l0x0035: AGET  (r4 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][]), (r3 I:??[int, short, byte, char] A[D('i' int)]) \l}"];
Node_59 [shape=record,label="{59\:\ 0x0037|0x0037: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x0045 \l}"];
Node_60 [shape=record,label="{60\:\ 0x0039|0x0039: IGET  (r4 I:java.lang.Object[]) = (r6 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mArray java.lang.Object[]  (LINE:153)\l0x003b: ARITH  (r5 I:int) = (r3 I:int A[D('i' int)]) \<\< (1 int) \l0x003d: AGET  (r4 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x003f|0x003f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0042 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0042|LOOP_END\lLOOP:1: B:57:0x0031\-\>B:63:0x0042\l|0x0042: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (\-1 int)  (LINE:152)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0041|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x0041|RETURN\l|0x0041: RETURN  (r3 I:int A[D('i' int)]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0045|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0045|0x0045: NOT  (r3 I:int A[D('i' int)]) = (r2 I:int A[D('end' int)])  (LINE:160)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0046|RETURN\l|0x0046: RETURN  (r3 I:int) \l}"];
Node_69 [shape=record,label="{69\:\ 0x0045|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x002f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{int androidx.collection.SimpleArrayMap.indexOfNull((r6 'this' I:androidx.collection.SimpleArrayMap\<K, V\> A[D('this' androidx.collection.SimpleArrayMap\<K, V\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:44:0x000f \-\> B:37:?, CROSS_EDGE: B:47:0x0018 \-\> B:37:?, CROSS_EDGE: B:54:0x002b \-\> B:37:?, BACK_EDGE: B:55:0x002c \-\> B:49:0x001b, CROSS_EDGE: B:62:0x0041 \-\> B:37:?, BACK_EDGE: B:63:0x0042 \-\> B:57:0x0031, CROSS_EDGE: B:65:0x0046 \-\> B:37:?, CROSS_EDGE: B:57:0x0031 \-\> B:64:0x0045, CROSS_EDGE: B:49:0x001b \-\> B:56:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0031\-0x0045: r3 'i' I\l  0x0002\-0x0046: r0 'N' I\l  0x000d\-0x0046: r1 'index' I\l  0x001b\-0x0046: r2 'end' I\l  0x0000\-0x0046: r6 'this' Landroidx\/collection\/SimpleArrayMap;, signature: Landroidx\/collection\/SimpleArrayMap\<TK;TV;\>;\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_37;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_37;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_37;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_68;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_66;
Node_52 -> Node_53;
Node_53 -> Node_55;
Node_53 -> Node_67[style=dashed];
Node_55 -> Node_49;
Node_67 -> Node_54;
Node_54 -> Node_37;
Node_66 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_69;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_70;
Node_60 -> Node_61;
Node_61 -> Node_63;
Node_61 -> Node_71[style=dashed];
Node_63 -> Node_57;
Node_71 -> Node_62;
Node_62 -> Node_37;
Node_70 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_37;
Node_69 -> Node_64;
Node_68 -> Node_56;
}

