digraph "CFG forandroidx.collection.SimpleArrayMap.hashCode()I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:int[]) = (r9 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mHashes int[]  (LINE:743)\l0x0002: IGET  (r1 I:java.lang.Object[]) = (r9 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mArray java.lang.Object[]  (LINE:744)\l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:745)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:746)\l0x0006: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: IGET  (r5 I:int) = (r9 I:androidx.collection.SimpleArrayMap A[D('this' androidx.collection.SimpleArrayMap\<K, V\>)]) androidx.collection.SimpleArrayMap.mSize int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|LOOP_START\lLOOP:0: B:16:0x0009\-\>B:21:0x0017\l|0x0009: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r5 I:??[int, byte, short, char] A[D('s' int)])  \-\> B:23:0x001e \l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: AGET  (r6 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][] A[D('array' java.lang.Object[])]), (r4 I:??[int, short, byte, char] A[D('v' int)])  (LINE:747)\l0x000d: AGET  (r7 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('hashes' int[])]), (r3 I:??[int, short, byte, char] A[D('i' int)])  (LINE:748)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0013 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|LOOP_END\lLOOP:0: B:16:0x0009\-\>B:21:0x0017\l|0x0017: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) ^ (r8 I:??[int, boolean, short, byte, char]) \l0x0018: ARITH  (r2 I:int) = (r2 I:int A[D('result' int)]) + (r7 I:int) \l0x0019: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:746)\l0x001b: ARITH  (r4 I:int) = (r4 I:int A[D('v' int)]) + (2 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: INVOKE  (r8 I:int) = (r6 I:java.lang.Object A[D('value' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.hashCode():int A[MD:():int (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\l|0x001e: RETURN  (r2 I:int A[D('result' int)])  (LINE:750)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int androidx.collection.SimpleArrayMap.hashCode((r9 'this' I:androidx.collection.SimpleArrayMap\<K, V\> A[D('this' androidx.collection.SimpleArrayMap\<K, V\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0017 \-\> B:16:0x0009, CROSS_EDGE: B:20:0x0013 \-\> B:21:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0019: r6 'value' Ljava\/lang\/Object;\l  0x0006\-0x001e: r3 'i' I\l  0x0007\-0x001e: r4 'v' I\l  0x0009\-0x001e: r5 's' I\l  0x0002\-0x001e: r0 'hashes' [I\l  0x0004\-0x001e: r1 'array' [Ljava\/lang\/Object;\l  0x0005\-0x001e: r2 'result' I\l  0x0000\-0x001e: r9 'this' Landroidx\/collection\/SimpleArrayMap;, signature: Landroidx\/collection\/SimpleArrayMap\<TK;TV;\>;\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_25;
Node_25 -> Node_21;
Node_21 -> Node_16;
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

