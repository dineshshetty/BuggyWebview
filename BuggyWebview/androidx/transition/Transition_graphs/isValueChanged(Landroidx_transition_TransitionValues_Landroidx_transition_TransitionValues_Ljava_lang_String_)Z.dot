digraph "CFG forandroidx.transition.Transition.isValueChanged(Landroidx\/transition\/TransitionValues;Landroidx\/transition\/TransitionValues;Ljava\/lang\/String;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|java.lang.Object r0 = r3.values.get(r5)\ljava.lang.Object r1 = r4.values.get(r5)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|if (r0 != null) goto L6\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|if (r1 != null) goto L6\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|SYNTHETIC\lRETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0012|if (r0 == null) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|if (r1 != null) goto L8\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|r2 = r0.equals(r1) ^ true\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|RETURN\lORIG_RETURN\l|return true\l}"];
MethodNode[shape=record,label="{private static boolean androidx.transition.Transition.isValueChanged((r3v0 'oldValues' androidx.transition.TransitionValues A[D('oldValues' androidx.transition.TransitionValues), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'newValues' androidx.transition.TransitionValues A[D('newValues' androidx.transition.TransitionValues), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'key' java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0017 \-\> B:25:0x001f, CROSS_EDGE: B:24:0x001e \-\> B:25:0x001f, CROSS_EDGE: B:20:0x0012 \-\> B:24:0x001e, CROSS_EDGE: B:17:0x000c \-\> B:20:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_15;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_27 -> Node_15;
Node_24 -> Node_15;
}

