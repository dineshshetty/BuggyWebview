digraph "CFG forandroidx.transition.Transition.parseMatchOrder(Ljava\/lang\/String;)[I" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.util.StringTokenizer) =  java.util.StringTokenizer  (LINE:305)\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \",\" \l0x0004: INVOKE  \l  (r0 I:java.util.StringTokenizer)\l  (r7 I:java.lang.String A[D('matchOrderString' java.lang.String)])\l  (r1 I:java.lang.String)\l type: DIRECT call: java.util.StringTokenizer.\<init\>(java.lang.String, java.lang.String):void A[MD:(java.lang.String, java.lang.String):void (c)]\l0x0007: INVOKE  (r1 I:int) = (r0 I:java.util.StringTokenizer A[D('st' java.util.StringTokenizer)]) type: VIRTUAL call: java.util.StringTokenizer.countTokens():int A[MD:():int (c)] (LINE:307)\l0x000b: NEW_ARRAY  (r1 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:308)\l}"];
Node_34 [shape=record,label="{34\:\ 0x000e|LOOP_START\lLOOP:0: B:34:0x000e\-\>B:51:0x005f\l|0x000e: INVOKE  (r3 I:boolean) = (r0 I:java.util.StringTokenizer A[D('st' java.util.StringTokenizer)]) type: VIRTUAL call: java.util.StringTokenizer.hasMoreTokens():boolean A[MD:():boolean (c)] (LINE:309)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0012|0x0012: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x007e \l}"];
Node_36 [shape=record,label="{36\:\ 0x0014|0x0014: INVOKE  (r3 I:java.lang.String) = (r0 I:java.util.StringTokenizer A[D('st' java.util.StringTokenizer)]) type: VIRTUAL call: java.util.StringTokenizer.nextToken():java.lang.String A[MD:():java.lang.String (c)] (LINE:310)\l0x0018: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.String) type: VIRTUAL call: java.lang.String.trim():java.lang.String A[MD:():java.lang.String (c)]\l0x001c: CONST_STR  (r4 I:java.lang.String) =  \"id\"  (LINE:311)\l0x001e: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r3 I:java.lang.String A[D('token' java.lang.String)]) type: VIRTUAL call: java.lang.String.equalsIgnoreCase(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)]\l0x0022: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|0x0023: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0029 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0025|0x0025: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:312)\l0x0026: APUT  \l  (r1 I:??[int, float][] A[D('matches' int[])])\l  (r2 I:??[int, short, byte, char] A[D('index' int)])\l  (r4 I:??[int, float, short, byte, char])\l \l}"];
Node_58 [shape=record,label="{58\:\ 0x005f|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x005f|LOOP_END\lLOOP:0: B:34:0x000e\-\>B:51:0x005f\l|0x0060: ARITH  (r2 I:int) = (r2 I:int A[D('index' int)]) + (r5 I:int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|0x0029: CONST_STR  (r4 I:java.lang.String) =  \"instance\"  (LINE:313)\l0x002b: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r3 I:java.lang.String A[D('token' java.lang.String)]) type: VIRTUAL call: java.lang.String.equalsIgnoreCase(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x002f|0x002f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0034 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0031|0x0031: APUT  \l  (r1 I:??[int, float][] A[D('matches' int[])])\l  (r2 I:??[int, short, byte, char] A[D('index' int)])\l  (r5 I:??[int, float, short, byte, char])\l  (LINE:314)\l}"];
Node_59 [shape=record,label="{59\:\ 0x005f|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|0x0034: CONST_STR  (r4 I:java.lang.String) =  \"name\"  (LINE:315)\l0x0036: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r3 I:java.lang.String A[D('token' java.lang.String)]) type: VIRTUAL call: java.lang.String.equalsIgnoreCase(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x003a|0x003a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0040 \l}"];
Node_44 [shape=record,label="{44\:\ 0x003c|0x003c: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:316)\l0x003d: APUT  \l  (r1 I:??[int, float][] A[D('matches' int[])])\l  (r2 I:??[int, short, byte, char] A[D('index' int)])\l  (r4 I:??[int, float, short, byte, char])\l \l}"];
Node_60 [shape=record,label="{60\:\ 0x005f|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0040|0x0040: CONST_STR  (r4 I:java.lang.String) =  \"itemId\"  (LINE:317)\l0x0042: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r3 I:java.lang.String A[D('token' java.lang.String)]) type: VIRTUAL call: java.lang.String.equalsIgnoreCase(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0046|0x0046: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x004c \l}"];
Node_47 [shape=record,label="{47\:\ 0x0048|0x0048: CONST  (r4 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:318)\l0x0049: APUT  \l  (r1 I:??[int, float][] A[D('matches' int[])])\l  (r2 I:??[int, short, byte, char] A[D('index' int)])\l  (r4 I:??[int, float, short, byte, char])\l \l}"];
Node_61 [shape=record,label="{61\:\ 0x005f|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x004c|0x004c: INVOKE  (r4 I:boolean) = (r3 I:java.lang.String A[D('token' java.lang.String)]) type: VIRTUAL call: java.lang.String.isEmpty():boolean A[MD:():boolean (c)] (LINE:319)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0050|0x0050: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x0062 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0052|0x0052: ARRAY_LENGTH  (r4 I:int) = (r1 I:??[] A[D('matches' int[])])  (LINE:321)\l0x0053: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x0054: NEW_ARRAY  (r4 I:int[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0056: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:322)\l0x0057: INVOKE  \l  (r1 I:java.lang.Object A[D('matches' int[])])\l  (r6 I:int)\l  (r4 I:java.lang.Object A[D('smallerMatches' int[])])\l  (r6 I:int)\l  (r2 I:int A[D('index' int)])\l type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l0x005a: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('matches' int[])]) = (r4 I:??[OBJECT, ARRAY] A[D('smallerMatches' int[])])  (LINE:323)\l0x005c: ARITH  (r2 I:int) = (r2 I:int A[D('index' int)]) + (\-1 int) \l}"];
Node_57 [shape=record,label="{57\:\ 0x005f|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0062|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0062|0x0062: NEW_INSTANCE  (r4 I:android.view.InflateException) =  android.view.InflateException  (LINE:326)\l0x0064: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0066: INVOKE  (r5 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0069: CONST_STR  (r6 I:java.lang.String) =  \"Unknown match type in matchOrder: '\" \l0x006b: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x006e: INVOKE  (r5 I:java.lang.StringBuilder), (r3 I:java.lang.String A[D('token' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0071: CONST_STR  (r6 I:java.lang.String) =  \"'\" \l0x0073: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0076: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x007a: INVOKE  (r4 I:android.view.InflateException), (r5 I:java.lang.String) type: DIRECT call: android.view.InflateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x007d|0x007d: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x007e|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x007e|RETURN\l|0x007e: RETURN  (r1 I:int[] A[D('matches' int[])])  (LINE:330)\l}"];
MethodNode[shape=record,label="{private static int[] androidx.transition.Transition.parseMatchOrder((r7 I:java.lang.String A[D('matchOrderString' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:51:0x005f \-\> B:34:0x000e, CROSS_EDGE: B:41:0x0031 \-\> B:51:0x005f, CROSS_EDGE: B:44:0x003c \-\> B:51:0x005f, CROSS_EDGE: B:47:0x0048 \-\> B:51:0x005f, CROSS_EDGE: B:50:0x0052 \-\> B:51:0x005f, CROSS_EDGE: B:54:0x007e \-\> B:32:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0056\-0x005c: r4 'smallerMatches' [I\l  0x001c\-0x0060: r3 'token' Ljava\/lang\/String;\l  0x0062\-0x007e: r3 'token' Ljava\/lang\/String;\l  0x0007\-0x007e: r0 'st' Ljava\/util\/StringTokenizer;\l  0x000d\-0x007e: r1 'matches' [I\l  0x000e\-0x007e: r2 'index' I\l  \-1 \-0x007e: r7 'matchOrderString' Ljava\/lang\/String;\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_56;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_58;
Node_58 -> Node_51;
Node_51 -> Node_34;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_59;
Node_59 -> Node_51;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_60;
Node_60 -> Node_51;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_61;
Node_61 -> Node_51;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_55;
Node_50 -> Node_57;
Node_57 -> Node_51;
Node_55 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_32;
Node_56 -> Node_54;
Node_54 -> Node_32;
}

