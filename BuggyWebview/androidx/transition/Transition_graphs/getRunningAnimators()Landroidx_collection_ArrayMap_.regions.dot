digraph "CFG forandroidx.transition.Transition.getRunningAnimators()Landroidx\/collection\/ArrayMap;" {
subgraph cluster_Region_909274824 {
label = "R(2:1|(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|androidx.collection.ArrayMap androidx.collection.ArrayMap\<android.animation.Animator, androidx.transition.Transition.AnimationInfo\> r0 = androidx.transition.Transition.sRunningAnimators.get()\l}"];
subgraph cluster_Region_1683131437 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1716157140 {
label = "IF [B:10:0x0008] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0008|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_408536139 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000a|androidx.collection.ArrayMap androidx.collection.ArrayMap\<android.animation.Animator, androidx.transition.Transition.AnimationInfo\> r1 = new androidx.collection.ArrayMap\<\>()\landroidx.transition.Transition.sRunningAnimators.set(r1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0015|RETURN\lORIG_RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_438299906 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static androidx.collection.ArrayMap\<android.animation.Animator, androidx.transition.Transition$AnimationInfo\> androidx.transition.Transition.getRunningAnimators()  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0008 \-\> B:12:0x0015\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ()Landroidx\/collection\/ArrayMap\<Landroid\/animation\/Animator;Landroidx\/transition\/Transition$AnimationInfo;\>;\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

