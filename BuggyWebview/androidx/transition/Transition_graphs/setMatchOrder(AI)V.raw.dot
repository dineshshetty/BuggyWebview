digraph "CFG forandroidx.transition.Transition.setMatchOrder([I)V" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matches' int[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0034  (LINE:510)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r5 I:??[] A[D('matches' int[])]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0006 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:513)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0007|LOOP_START\lLOOP:0: B:32:0x0007\-\>B:38:0x0018\l|0x0007: ARRAY_LENGTH  (r1 I:int) = (r5 I:??[] A[D('matches' int[])]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:48:0x002b \l}"];
Node_34 [shape=record,label="{34\:\ 0x000a|0x000a: AGET  (r1 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('matches' int[])]), (r0 I:??[int, short, byte, char] A[D('i' int)])  (LINE:514)\l0x000c: INVOKE  (r2 I:boolean) = (r1 I:int A[D('match' int)]) type: STATIC call: androidx.transition.Transition.isValidMatch(int):boolean A[MD:(int):boolean (m)] (LINE:515)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x0023 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|0x0012: INVOKE  (r2 I:boolean) = (r5 I:int[] A[D('matches' int[])]), (r0 I:int A[D('i' int)]) type: STATIC call: androidx.transition.Transition.alreadyContains(int[], int):boolean A[MD:(int[], int):boolean (m)] (LINE:518)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x001b \l}"];
Node_38 [shape=record,label="{38\:\ 0x0018|LOOP_END\lLOOP:0: B:32:0x0007\-\>B:38:0x0018\l|0x0018: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:513)\l}"];
Node_47 [shape=record,label="{47\:\ 0x001b|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x001b|0x001b: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:519)\l0x001d: CONST_STR  (r3 I:java.lang.String) =  \"matches contains a duplicate value\" \l0x001f: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0022|0x0022: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_46 [shape=record,label="{46\:\ 0x0023|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0023|0x0023: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:516)\l0x0025: CONST_STR  (r3 I:java.lang.String) =  \"matches contains invalid value\" \l0x0027: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x002a|0x002a: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_48 [shape=record,label="{48\:\ 0x002b|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x002b|0x002b: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.lang.Object A[D('matches' int[])]) type: VIRTUAL call: java.lang.Object.clone():java.lang.Object A[MD:():java.lang.Object throws java.lang.CloneNotSupportedException (c)] (LINE:522)\l0x002f: CHECK_CAST (r0 I:int[]) = (int[]) (r0 I:??[OBJECT, ARRAY]) \l0x0031: IPUT  (r0 I:int[]), (r4 I:androidx.transition.Transition) androidx.transition.Transition.mMatchOrder int[] \l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|0x0038: RETURN   A[SYNTHETIC] (LINE:524)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0034|0x0034: SGET  (r0 I:int[]) =  androidx.transition.Transition.DEFAULT_MATCH_ORDER int[]  (LINE:511)\l0x0036: IPUT  (r0 I:int[]), (r4 I:androidx.transition.Transition) androidx.transition.Transition.mMatchOrder int[] \l}"];
Node_45 [shape=record,label="{45\:\ 0x0038|RETURN\lORIG_RETURN\l|0x0038: RETURN    (LINE:524)\l}"];
MethodNode[shape=record,label="{public void androidx.transition.Transition.setMatchOrder((r4 'this' I:androidx.transition.Transition A[IMMUTABLE_TYPE, THIS]), (r5 I:int[] A[D('matches' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x0018 \-\> B:32:0x0007, CROSS_EDGE: B:42:0x002a \-\> B:26:?, CROSS_EDGE: B:45:0x0038 \-\> B:26:?, CROSS_EDGE: B:44:0x0034 \-\> B:45:0x0038, CROSS_EDGE: B:27:0x0000 \-\> B:44:0x0034\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0018: r1 'match' I\l  0x0007\-0x002b: r0 'i' I\l  0x001b\-0x002b: r1 'match' I\l  \-1 \-0x0038: r5 'matches' [I\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_44;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_44[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_48;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_46;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_47;
Node_38 -> Node_32;
Node_47 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_26;
Node_46 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_26;
Node_48 -> Node_43;
Node_43 -> Node_49;
Node_49 -> Node_26;
Node_44 -> Node_45;
Node_45 -> Node_26;
}

