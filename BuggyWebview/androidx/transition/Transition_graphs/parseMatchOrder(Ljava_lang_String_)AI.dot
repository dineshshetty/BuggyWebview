digraph "CFG forandroidx.transition.Transition.parseMatchOrder(Ljava\/lang\/String;)[I" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|java.util.StringTokenizer r0 = new java.util.StringTokenizer(r7, \",\")\lint[] r1 = new int[r0.countTokens()]\lr2 = 0\l}"];
Node_34 [shape=record,label="{34\:\ 0x000e|LOOP_START\lLOOP:0: B:34:0x000e\-\>B:51:0x005f\lPHI: r1 r2 \l  PHI: (r1v3 'matches' int[]) = (r1v2 'matches' int[]), (r1v5 'matches' int[]) binds: [B:33:0x0000, B:51:0x005f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'index' int) = (r2v0 'index' int), (r2v4 'index' int) binds: [B:33:0x0000, B:51:0x005f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0012|if (r0.hasMoreTokens() == false) goto L29\l}"];
Node_36 [shape=record,label="{36\:\ 0x0014|java.lang.String r3 = r0.nextToken().trim()\l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|if (androidx.transition.Transition.MATCH_ID_STR.equalsIgnoreCase(r3) == false) goto L9\l}"];
Node_38 [shape=record,label="{38\:\ 0x0025|r1[r2] = 3\l}"];
Node_58 [shape=record,label="{58\:\ 0x005f|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x005f|LOOP_END\lLOOP:0: B:34:0x000e\-\>B:51:0x005f\lPHI: r1 r2 \l  PHI: (r1v5 'matches' int[]) = (r1v4 'matches' int[]), (r1v3 'matches' int[]), (r1v3 'matches' int[]), (r1v3 'matches' int[]), (r1v3 'matches' int[]) binds: [B:57:0x005f, B:61:0x005f, B:60:0x005f, B:59:0x005f, B:58:0x005f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v3 'index' int) = (r2v2 'index' int), (r2v1 'index' int), (r2v1 'index' int), (r2v1 'index' int), (r2v1 'index' int) binds: [B:57:0x005f, B:61:0x005f, B:60:0x005f, B:59:0x005f, B:58:0x005f] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 + 1\l}"];
Node_39 [shape=record,label="{39\:\ 0x0029}"];
Node_40 [shape=record,label="{40\:\ 0x002f|if (androidx.transition.Transition.MATCH_INSTANCE_STR.equalsIgnoreCase(r3) == false) goto L13\l}"];
Node_41 [shape=record,label="{41\:\ 0x0031|r1[r2] = 1\l}"];
Node_59 [shape=record,label="{59\:\ 0x005f|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0034}"];
Node_43 [shape=record,label="{43\:\ 0x003a|if (androidx.transition.Transition.MATCH_NAME_STR.equalsIgnoreCase(r3) == false) goto L17\l}"];
Node_44 [shape=record,label="{44\:\ 0x003c|r1[r2] = 2\l}"];
Node_60 [shape=record,label="{60\:\ 0x005f|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0040}"];
Node_46 [shape=record,label="{46\:\ 0x0046|if (androidx.transition.Transition.MATCH_ITEM_ID_STR.equalsIgnoreCase(r3) == false) goto L21\l}"];
Node_47 [shape=record,label="{47\:\ 0x0048|r1[r2] = 4\l}"];
Node_61 [shape=record,label="{61\:\ 0x005f|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x004c}"];
Node_49 [shape=record,label="{49\:\ 0x0050|if (r3.isEmpty() == false) goto L25\l}"];
Node_50 [shape=record,label="{50\:\ 0x0052|int[] r4 = new int[r1.length \- 1]\ljava.lang.System.arraycopy(r1, 0, r4, 0, r2)\lr1 = r4\lint r2 = r2 + (\-1)\l}"];
Node_57 [shape=record,label="{57\:\ 0x005f|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0062|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0062|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\lr5.append(\"Unknown match type in matchOrder: '\")\lr5.append(r3)\lr5.append(\"'\")\l}"];
Node_53 [shape=record,label="{53\:\ 0x007d|throw new android.view.InflateException(r5.toString())\l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x007e|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x007e|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{private static int[] androidx.transition.Transition.parseMatchOrder((r7v0 'matchOrderString' java.lang.String A[D('matchOrderString' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:51:0x005f \-\> B:34:0x000e, CROSS_EDGE: B:41:0x0031 \-\> B:51:0x005f, CROSS_EDGE: B:44:0x003c \-\> B:51:0x005f, CROSS_EDGE: B:47:0x0048 \-\> B:51:0x005f, CROSS_EDGE: B:50:0x0052 \-\> B:51:0x005f, CROSS_EDGE: B:54:0x007e \-\> B:32:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_56;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_58;
Node_58 -> Node_51;
Node_51 -> Node_34;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_59;
Node_59 -> Node_51;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_60;
Node_60 -> Node_51;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_61;
Node_61 -> Node_51;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_55;
Node_50 -> Node_57;
Node_57 -> Node_51;
Node_55 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_32;
Node_56 -> Node_54;
Node_54 -> Node_32;
}

