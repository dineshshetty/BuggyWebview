digraph "CFG forandroidx.transition.FragmentTransitionSupport.mergeTransitionsTogether(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.transition.TransitionSet r0 = new androidx.transition.TransitionSet()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r3 == null) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|r0.addTransition((androidx.transition.Transition) r3)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|if (r4 == null) goto L6\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|r0.addTransition((androidx.transition.Transition) r4)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|if (r5 == null) goto L8\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|r0.addTransition((androidx.transition.Transition) r5)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.Object androidx.transition.FragmentTransitionSupport.mergeTransitionsTogether((r2v0 'this' androidx.transition.FragmentTransitionSupport A[IMMUTABLE_TYPE, THIS]), (r3v0 'transition1' java.lang.Object A[D('transition1' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'transition2' java.lang.Object A[D('transition2' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'transition3' java.lang.Object A[D('transition3' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0015 \-\> B:9:0x001d, CROSS_EDGE: B:5:0x000d \-\> B:7:0x0015, CROSS_EDGE: B:3:0x0005 \-\> B:5:0x000d\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.fragment.app.FragmentTransitionImpl.mergeTransitionsTogether(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

