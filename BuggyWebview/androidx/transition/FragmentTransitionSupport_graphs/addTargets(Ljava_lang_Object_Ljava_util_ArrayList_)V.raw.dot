digraph "CFG forandroidx.transition.FragmentTransitionSupport.addTargets(Ljava\/lang\/Object;Ljava\/util\/ArrayList;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('transitionObj' java.lang.Object)])  (LINE:102)\l0x0001: CHECK_CAST (r0 I:androidx.transition.Transition) = (androidx.transition.Transition) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('transition' androidx.transition.Transition)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006  (LINE:103)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:104)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('transition' androidx.transition.Transition)]) androidx.transition.TransitionSet  (LINE:106)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001f \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('transition' androidx.transition.Transition)])  (LINE:107)\l0x000b: CHECK_CAST (r1 I:androidx.transition.TransitionSet) = (androidx.transition.TransitionSet) (r1 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r2 I:int) = (r1 I:androidx.transition.TransitionSet A[D('set' androidx.transition.TransitionSet)]) type: VIRTUAL call: androidx.transition.TransitionSet.getTransitionCount():int A[MD:():int (m)] (LINE:108)\l0x0011: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:109)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|LOOP_START\lLOOP:0: B:8:0x0012\-\>B:9:0x0014\l|0x0012: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('numTransitions' int)])  \-\> B:20:0x0043 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|LOOP_END\lLOOP:0: B:8:0x0012\-\>B:9:0x0014\l|0x0014: INVOKE  (r4 I:androidx.transition.Transition) = (r1 I:androidx.transition.TransitionSet A[D('set' androidx.transition.TransitionSet)]), (r3 I:int A[D('i' int)]) type: VIRTUAL call: androidx.transition.TransitionSet.getTransitionAt(int):androidx.transition.Transition A[MD:(int):androidx.transition.Transition (m)] (LINE:110)\l0x0018: INVOKE  \l  (r5 I:androidx.transition.FragmentTransitionSupport)\l  (r4 I:java.lang.Object A[D('child' androidx.transition.Transition)])\l  (r7 I:java.util.ArrayList A[D('views' java.util.ArrayList\<android.view.View\>)])\l type: VIRTUAL call: androidx.transition.FragmentTransitionSupport.addTargets(java.lang.Object, java.util.ArrayList):void A[MD:(java.lang.Object, java.util.ArrayList\<android.view.View\>):void (m)] (LINE:111)\l0x001b: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:109)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0043: RETURN   A[SYNTHETIC] (LINE:123)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: INVOKE  (r1 I:boolean) = (r0 I:androidx.transition.Transition A[D('transition' androidx.transition.Transition)]) type: STATIC call: androidx.transition.FragmentTransitionSupport.hasSimpleTarget(androidx.transition.Transition):boolean A[MD:(androidx.transition.Transition):boolean (m)] (LINE:113)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:? \l}"];
Node_13 [shape=record,label="{13\:\ 0x0025|0x0025: INVOKE  (r1 I:java.util.List) = (r0 I:androidx.transition.Transition A[D('transition' androidx.transition.Transition)]) type: VIRTUAL call: androidx.transition.Transition.getTargets():java.util.List A[MD:():java.util.List\<android.view.View\> (m)] (LINE:114)\l0x0029: INVOKE  (r2 I:boolean) = (r1 I:java.util.List A[D('targets' java.util.List\<android.view.View\>)]) type: STATIC call: androidx.transition.FragmentTransitionSupport.isNullOrEmpty(java.util.List):boolean A[MD:(java.util.List):boolean (m)] (LINE:115)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0043 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: INVOKE  (r2 I:int) = (r7 I:java.util.ArrayList A[D('views' java.util.ArrayList\<android.view.View\>)]) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)] (LINE:117)\l0x0033: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:118)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0034|LOOP_START\lLOOP:1: B:16:0x0034\-\>B:17:0x0036\l|0x0034: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('numViews' int)])  \-\> B:21:0x0043 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0036|LOOP_END\lLOOP:1: B:16:0x0034\-\>B:17:0x0036\l|0x0036: INVOKE  (r4 I:java.lang.Object) = (r7 I:java.util.ArrayList A[D('views' java.util.ArrayList\<android.view.View\>)]), (r3 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:119)\l0x003a: CHECK_CAST (r4 I:android.view.View) = (android.view.View) (r4 I:??[OBJECT, ARRAY]) \l0x003c: INVOKE  (r0 I:androidx.transition.Transition A[D('transition' androidx.transition.Transition)]), (r4 I:android.view.View) type: VIRTUAL call: androidx.transition.Transition.addTarget(android.view.View):androidx.transition.Transition A[MD:(android.view.View):androidx.transition.Transition (m)]\l0x003f: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:118)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0043|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|0x0043: RETURN   A[SYNTHETIC] (LINE:123)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|RETURN\lORIG_RETURN\l|0x0043: RETURN    (LINE:123)\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|0x0043: RETURN   A[SYNTHETIC] (LINE:123)\l}"];
MethodNode[shape=record,label="{public void androidx.transition.FragmentTransitionSupport.addTargets((r5 'this' I:androidx.transition.FragmentTransitionSupport A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[D('transitionObj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.ArrayList\<android.view.View\> A[D('views' java.util.ArrayList\<android.view.View\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0014 \-\> B:8:0x0012, CROSS_EDGE: B:19:0x0043 \-\> B:1:?, BACK_EDGE: B:17:0x0036 \-\> B:16:0x0034, CROSS_EDGE: B:16:0x0034 \-\> B:19:0x0043, CROSS_EDGE: B:14:0x002d \-\> B:19:0x0043, CROSS_EDGE: B:12:0x0023 \-\> B:19:0x0043\lDebug Info:\l  0x0018\-0x001b: r4 'child' Landroidx\/transition\/Transition;\l  0x000d\-0x001e: r1 'set' Landroidx\/transition\/TransitionSet;\l  0x0011\-0x001e: r2 'numTransitions' I\l  0x0012\-0x001e: r3 'i' I\l  0x0029\-0x0042: r1 'targets' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroid\/view\/View;\>;\l  0x0033\-0x0042: r2 'numViews' I\l  0x0034\-0x0042: r3 'i' I\l  0x0003\-0x0043: r0 'transition' Landroidx\/transition\/Transition;\l  \-1 \-0x0043: r6 'transitionObj' Ljava\/lang\/Object;\l  0x0000\-0x0043: r7 'views' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Landroid\/view\/View;\>;\lSIGNATURE: (Ljava\/lang\/Object;Ljava\/util\/ArrayList\<Landroid\/view\/View;\>;)V\lMETHOD_OVERRIDE: [androidx.fragment.app.FragmentTransitionImpl.addTargets(java.lang.Object, java.util.ArrayList\<android.view.View\>):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_11;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_9 -> Node_8;
Node_20 -> Node_23;
Node_23 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_22;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_16;
Node_21 -> Node_24;
Node_24 -> Node_1;
Node_19 -> Node_1;
Node_22 -> Node_1;
}

