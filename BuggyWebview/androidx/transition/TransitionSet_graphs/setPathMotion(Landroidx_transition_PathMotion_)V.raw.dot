digraph "CFG forandroidx.transition.TransitionSet.setPathMotion(Landroidx\/transition\/PathMotion;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  \l  (r2 I:androidx.transition.Transition)\l  (r3 I:androidx.transition.PathMotion A[D('pathMotion' androidx.transition.PathMotion)])\l type: SUPER call: androidx.transition.Transition.setPathMotion(androidx.transition.PathMotion):void A[MD:(androidx.transition.PathMotion):void (m)] (LINE:390)\l0x0003: IGET  (r0 I:int) = (r2 I:androidx.transition.TransitionSet) androidx.transition.TransitionSet.mChangeFlags int  (LINE:391)\l0x0005: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (4 ??[int, float, short, byte, char]) \l0x0007: IPUT  (r0 I:int), (r2 I:androidx.transition.TransitionSet) androidx.transition.TransitionSet.mChangeFlags int \l0x0009: IGET  (r0 I:java.util.ArrayList\<androidx.transition.Transition\>) = (r2 I:androidx.transition.TransitionSet) androidx.transition.TransitionSet.mTransitions java.util.ArrayList  (LINE:392)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0024 \l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:393)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|LOOP_START\lLOOP:0: B:16:0x000e\-\>B:18:0x0016\l|0x000e: IGET  (r1 I:java.util.ArrayList\<androidx.transition.Transition\>) = (r2 I:androidx.transition.TransitionSet) androidx.transition.TransitionSet.mTransitions java.util.ArrayList \l0x0010: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|0x0014: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:20:0x0024 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|LOOP_END\lLOOP:0: B:16:0x000e\-\>B:18:0x0016\l|0x0016: IGET  (r1 I:java.util.ArrayList\<androidx.transition.Transition\>) = (r2 I:androidx.transition.TransitionSet) androidx.transition.TransitionSet.mTransitions java.util.ArrayList  (LINE:394)\l0x0018: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.ArrayList), (r0 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x001c: CHECK_CAST (r1 I:androidx.transition.Transition) = (androidx.transition.Transition) (r1 I:??[OBJECT, ARRAY]) \l0x001e: INVOKE  \l  (r1 I:androidx.transition.Transition)\l  (r3 I:androidx.transition.PathMotion A[D('pathMotion' androidx.transition.PathMotion)])\l type: VIRTUAL call: androidx.transition.Transition.setPathMotion(androidx.transition.PathMotion):void A[MD:(androidx.transition.PathMotion):void (m)]\l0x0021: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:393)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN   A[SYNTHETIC] (LINE:397)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: RETURN    (LINE:397)\l}"];
MethodNode[shape=record,label="{public void androidx.transition.TransitionSet.setPathMotion((r2 'this' I:androidx.transition.TransitionSet A[IMMUTABLE_TYPE, THIS]), (r3 I:androidx.transition.PathMotion A[D('pathMotion' androidx.transition.PathMotion), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x0016 \-\> B:16:0x000e, CROSS_EDGE: B:14:0x000b \-\> B:19:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0024: r0 'i' I\l  \-1 \-0x0024: r3 'pathMotion' Landroidx\/transition\/PathMotion;\lMETHOD_OVERRIDE: [androidx.transition.Transition.setPathMotion(androidx.transition.PathMotion):void]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_12;
}

