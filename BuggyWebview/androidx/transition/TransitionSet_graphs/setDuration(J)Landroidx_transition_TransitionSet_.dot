digraph "CFG forandroidx.transition.TransitionSet.setDuration(J)Landroidx\/transition\/TransitionSet;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|super.setDuration(r6)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|if ((r5.mDuration \> 0 ? 1 : (r5.mDuration == 0 ? 0 : \-1)) \< 0) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|java.util.ArrayList\<androidx.transition.Transition\> r0 = r5.mTransitions\l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|if (r0 == null) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|int r0 = r0.size()\lr1 = 0\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|LOOP_START\lLOOP:0: B:18:0x0014\-\>B:19:0x0016\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:17:0x000f, B:19:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|LOOP_END\lLOOP:0: B:18:0x0014\-\>B:19:0x0016\l|r5.mTransitions.get(r1).setDuration(r6)\lint r1 = r1 + 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|RETURN\l|return r5\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.transition.TransitionSet androidx.transition.TransitionSet.setDuration((r5v0 'this' androidx.transition.TransitionSet A[IMMUTABLE_TYPE, THIS]), (r6v0 'duration' long A[D('duration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0016 \-\> B:18:0x0014, CROSS_EDGE: B:16:0x000d \-\> B:20:0x0024, CROSS_EDGE: B:14:0x0009 \-\> B:20:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lREPLACED_BY: androidx.transition.TransitionSet.setDuration(long):androidx.transition.Transition\lMETHOD_OVERRIDE: [androidx.transition.Transition.setDuration(long):androidx.transition.Transition]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_18;
Node_21 -> Node_20;
Node_20 -> Node_12;
}

