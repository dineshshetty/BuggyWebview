digraph "CFG forandroidx.transition.PatternPathMotion.setPatternPath(Landroid\/graphics\/Path;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY])  (LINE:107)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('patternPath' android.graphics.Path)]) \l0x0004: NEW_INSTANCE  (r2 I:android.graphics.PathMeasure) =  android.graphics.PathMeasure \l0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r2 I:android.graphics.PathMeasure), (r1 I:android.graphics.Path), (r3 I:boolean) type: DIRECT call: android.graphics.PathMeasure.\<init\>(android.graphics.Path, boolean):void A[MD:(android.graphics.Path, boolean):void (c)]\l0x000a: INVOKE  (r4 I:float) = (r2 I:android.graphics.PathMeasure A[D('pathMeasure' android.graphics.PathMeasure)]) type: VIRTUAL call: android.graphics.PathMeasure.getLength():float A[MD:():float (c)] (LINE:108)\l0x000e: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:109)\l0x000f: NEW_ARRAY  (r5 I:float[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0011: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:110)\l0x0012: INVOKE  \l  (r2 I:android.graphics.PathMeasure A[D('pathMeasure' android.graphics.PathMeasure)])\l  (r4 I:float A[D('length' float)])\l  (r5 I:float[] A[D('pos' float[])])\l  (r6 I:float[])\l type: VIRTUAL call: android.graphics.PathMeasure.getPosTan(float, float[], float[]):boolean A[MD:(float, float[], float[]):boolean (c)]\l0x0015: AGET  (r7 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('pos' float[])]), (r3 I:??[int, short, byte, char])  (LINE:111)\l0x0017: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:112)\l0x0018: AGET  (r9 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('pos' float[])]), (r8 I:??[int, short, byte, char]) \l0x001a: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:113)\l0x001b: INVOKE  \l  (r2 I:android.graphics.PathMeasure A[D('pathMeasure' android.graphics.PathMeasure)])\l  (r10 I:float)\l  (r5 I:float[] A[D('pos' float[])])\l  (r6 I:float[])\l type: VIRTUAL call: android.graphics.PathMeasure.getPosTan(float, float[], float[]):boolean A[MD:(float, float[], float[]):boolean (c)]\l0x001e: AGET  (r3 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('pos' float[])]), (r3 I:??[int, short, byte, char])  (LINE:114)\l0x0020: AGET  (r6 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('pos' float[])]), (r8 I:??[int, short, byte, char])  (LINE:115)\l0x0022: CMP_L  (r8 I:int) = (r3 I:float A[D('startX' float)]), (r7 I:float A[D('endX' float)])  (LINE:117)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0033 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: CMP_L  (r8 I:int) = (r6 I:float A[D('startY' float)]), (r9 I:float A[D('endY' float)]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|0x0028: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002b \l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|0x002b: NEW_INSTANCE  (r8 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:118)\l0x002d: CONST_STR  (r10 I:java.lang.String) =  \"pattern must not end at the starting point\" \l0x002f: INVOKE  (r8 I:java.lang.IllegalArgumentException), (r10 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0032|0x0032: THROW  (r8 I:java.lang.Throwable) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0033|0x0033: IGET  (r8 I:android.graphics.Matrix) = (r0 I:androidx.transition.PatternPathMotion) androidx.transition.PatternPathMotion.mTempMatrix android.graphics.Matrix  (LINE:121)\l0x0035: NEG  (r10 I:float) = (r3 I:float A[D('startX' float)]) \l0x0036: NEG  (r11 I:float) = (r6 I:float A[D('startY' float)]) \l0x0037: INVOKE  (r8 I:android.graphics.Matrix), (r10 I:float), (r11 I:float) type: VIRTUAL call: android.graphics.Matrix.setTranslate(float, float):void A[MD:(float, float):void (c)]\l0x003a: ARITH  (r8 I:float) = (r7 I:float A[D('endX' float)]) \- (r3 I:float A[D('startX' float)])  (LINE:122)\l0x003c: ARITH  (r10 I:float) = (r9 I:float A[D('endY' float)]) \- (r6 I:float A[D('startY' float)])  (LINE:123)\l0x003e: INVOKE  (r11 I:float) = (r8 I:float A[D('dx' float)]), (r10 I:float A[D('dy' float)]) type: STATIC call: androidx.transition.PatternPathMotion.distance(float, float):float A[MD:(float, float):float (m)] (LINE:124)\l0x0042: CONST  (r12 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:125)\l0x0044: ARITH  (r12 I:float) = (r12 I:float) \/ (r11 I:float A[D('distance' float)]) \l0x0045: IGET  (r13 I:android.graphics.Matrix) = (r0 I:androidx.transition.PatternPathMotion) androidx.transition.PatternPathMotion.mTempMatrix android.graphics.Matrix  (LINE:126)\l0x0047: INVOKE  (r13 I:android.graphics.Matrix), (r12 I:float A[D('scale' float)]), (r12 I:float A[D('scale' float)]) type: VIRTUAL call: android.graphics.Matrix.postScale(float, float):boolean A[MD:(float, float):boolean (c)]\l0x004a: CAST (r13 I:double) = (double) (r10 I:float A[D('dy' float)])  (LINE:127)\l0x004b: MOVE  (r15 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('pathMeasure' android.graphics.PathMeasure)]) \l0x004c: MOVE  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startX' float)]) \l0x004e: CAST (r2 I:double A[D('pathMeasure' android.graphics.PathMeasure)]) = (double) (r8 I:float A[D('dx' float)]) \l0x004f: INVOKE  (r2 I:double) = (r13 I:double), (r2 I:double) type: STATIC call: java.lang.Math.atan2(double, double):double A[MD:(double, double):double (c)]\l0x0053: IGET  (r13 I:android.graphics.Matrix) = (r0 I:androidx.transition.PatternPathMotion) androidx.transition.PatternPathMotion.mTempMatrix android.graphics.Matrix  (LINE:128)\l0x0055: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' float)]) \l0x0056: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('pos' float[])]) \l0x0058: NEG  (r4 I:double A[D('length' float)]) = (r2 I:double A[D('angle' double)]) \l0x0059: INVOKE  (r4 I:double) = (r4 I:double) type: STATIC call: java.lang.Math.toDegrees(double):double A[MD:(double):double (c)]\l0x005d: CAST (r4 I:float) = (float) (r4 I:double) \l0x005e: INVOKE  (r13 I:android.graphics.Matrix), (r4 I:float) type: VIRTUAL call: android.graphics.Matrix.postRotate(float):boolean A[MD:(float):boolean (c)]\l0x0061: IGET  (r4 I:android.graphics.Matrix) = (r0 I:androidx.transition.PatternPathMotion) androidx.transition.PatternPathMotion.mTempMatrix android.graphics.Matrix  (LINE:129)\l0x0063: IGET  (r5 I:android.graphics.Path) = (r0 I:androidx.transition.PatternPathMotion) androidx.transition.PatternPathMotion.mPatternPath android.graphics.Path \l0x0065: INVOKE  (r1 I:android.graphics.Path), (r4 I:android.graphics.Matrix), (r5 I:android.graphics.Path) type: VIRTUAL call: android.graphics.Path.transform(android.graphics.Matrix, android.graphics.Path):void A[MD:(android.graphics.Matrix, android.graphics.Path):void (c)]\l0x0068: IPUT  (r1 I:android.graphics.Path), (r0 I:androidx.transition.PatternPathMotion) androidx.transition.PatternPathMotion.mOriginalPatternPath android.graphics.Path  (LINE:130)\l}"];
Node_21 [shape=record,label="{21\:\ 0x006a|RETURN\l|0x006a: RETURN    (LINE:131)\l}"];
MethodNode[shape=record,label="{public void androidx.transition.PatternPathMotion.setPatternPath((r18 'this' I:androidx.transition.PatternPathMotion A[IMMUTABLE_TYPE, THIS]), (r19 I:android.graphics.Path A[D('patternPath' android.graphics.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x006a \-\> B:12:?, CROSS_EDGE: B:14:0x0024 \-\> B:20:0x0033\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x004e: r2 'pathMeasure' Landroid\/graphics\/PathMeasure;\l  0x0020\-0x004e: r3 'startX' F\l  0x000e\-0x0058: r4 'length' F\l  0x0011\-0x0058: r5 'pos' [F\l  0x0053\-0x006a: r2 'angle' D\l  0x0022\-0x006a: r6 'startY' F\l  0x0017\-0x006a: r7 'endX' F\l  0x003c\-0x006a: r8 'dx' F\l  0x001a\-0x006a: r9 'endY' F\l  0x003e\-0x006a: r10 'dy' F\l  0x0042\-0x006a: r11 'distance' F\l  0x0045\-0x006a: r12 'scale' F\l  0x0058\-0x006a: r14 'length' F\l  0x004e\-0x006a: r15 'pathMeasure' Landroid\/graphics\/PathMeasure;\l  0x004e\-0x006a: r16 'startX' F\l  0x0058\-0x006a: r17 'pos' [F\l  \-1 \-0x006a: r19 'patternPath' Landroid\/graphics\/Path;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_20[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

