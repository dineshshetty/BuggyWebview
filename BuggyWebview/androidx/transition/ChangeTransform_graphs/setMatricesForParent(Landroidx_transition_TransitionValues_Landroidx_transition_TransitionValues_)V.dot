digraph "CFG forandroidx.transition.ChangeTransform.setMatricesForParent(Landroidx\/transition\/TransitionValues;Landroidx\/transition\/TransitionValues;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|android.graphics.Matrix r0 = (android.graphics.Matrix) r8.values.get(androidx.transition.ChangeTransform.PROPNAME_PARENT_MATRIX)\lr8.view.setTag(androidx.transition.C0499R.C0502id.parent_matrix, r0)\landroid.graphics.Matrix r2 = r6.mTempMatrix\lr2.reset()\lr0.invert(r2)\landroid.graphics.Matrix r3 = (android.graphics.Matrix) r7.values.get(androidx.transition.ChangeTransform.PROPNAME_MATRIX)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|if (r3 != null) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|r3 = new android.graphics.Matrix()\lr7.values.put(androidx.transition.ChangeTransform.PROPNAME_MATRIX, r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|PHI: r3 \l  PHI: (r3v4 'startLocal' android.graphics.Matrix) = (r3v3 'startLocal' android.graphics.Matrix), (r3v5 'startLocal' android.graphics.Matrix) binds: [B:10:0x0023, B:11:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|android.graphics.Matrix r1 = (android.graphics.Matrix) r7.values.get(androidx.transition.ChangeTransform.PROPNAME_PARENT_MATRIX)\lr3.postConcat(r1)\lr3.postConcat(r2)\l}"];
Node_13 [shape=record,label="{13\:\ 0x003e|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.transition.ChangeTransform.setMatricesForParent((r6v0 'this' androidx.transition.ChangeTransform A[IMMUTABLE_TYPE, THIS]), (r7v0 'startValues' androidx.transition.TransitionValues A[D('startValues' androidx.transition.TransitionValues), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'endValues' androidx.transition.TransitionValues A[D('endValues' androidx.transition.TransitionValues), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0023 \-\> B:12:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

