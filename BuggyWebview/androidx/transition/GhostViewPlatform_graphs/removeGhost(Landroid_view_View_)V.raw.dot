digraph "CFG forandroidx.transition.GhostViewPlatform.removeGhost(Landroid\/view\/View;)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INVOKE   type: STATIC call: androidx.transition.GhostViewPlatform.fetchRemoveGhostMethod():void A[MD:():void (m)] (LINE:58)\l0x0003: SGET  (r0 I:java.lang.reflect.Method) =  androidx.transition.GhostViewPlatform.sRemoveGhostMethod java.lang.reflect.Method  (LINE:59)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:? \l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:61)\l0x0008: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IllegalAccessException \-\> 0x001d, InvocationTargetException \-\> 0x0012, blocks: (B:21:0x0009), top: B:28:0x0009 \}\lCatch: InvocationTargetException \-\> 0x0012, IllegalAccessException \-\> 0x001d\l|0x0009: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: InvocationTargetException \-\> 0x0012, IllegalAccessException \-\> 0x001d, TRY_ENTER]\l0x000b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: APUT  (r2 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]), (r4 I:??[OBJECT, ARRAY] A[D('view' android.view.View)]) A[Catch: InvocationTargetException \-\> 0x0012, IllegalAccessException \-\> 0x001d]\l0x000e: INVOKE  (r0 I:java.lang.reflect.Method), (r1 I:java.lang.Object), (r2 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: InvocationTargetException \-\> 0x0012, IllegalAccessException \-\> 0x001d, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c), TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN   A[SYNTHETIC] (LINE:68)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|ExcHandler: IllegalAccessException \-\> 0x001d\l|0x001d: MOVE_EXCEPTION  (r0 I:java.lang.IllegalAccessException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \-\> 0x001d] (LINE:62)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: RETURN    (LINE:68)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|ExcHandler: InvocationTargetException \-\> 0x0012\l|0x0012: MOVE_EXCEPTION  (r0 I:java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: InvocationTargetException \-\> 0x0012] (LINE:64)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:65)\l0x0015: INVOKE  (r2 I:java.lang.Throwable) = (r0 I:java.lang.reflect.InvocationTargetException A[D('e' java.lang.reflect.InvocationTargetException)]) type: VIRTUAL call: java.lang.reflect.InvocationTargetException.getCause():java.lang.Throwable A[MD:():java.lang.Throwable (c)]\l0x0019: INVOKE  (r1 I:java.lang.RuntimeException), (r2 I:java.lang.Throwable) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|0x001c: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN   A[SYNTHETIC] (LINE:68)\l}"];
MethodNode[shape=record,label="{public static void androidx.transition.GhostViewPlatform.removeGhost((r4 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x001d \-\> B:27:0x001e, CROSS_EDGE: B:25:0x001c \-\> B:17:?, CROSS_EDGE: B:28:0x0009 \-\> B:26:0x001d, CROSS_EDGE: B:28:0x0009 \-\> B:23:0x0012, CROSS_EDGE: B:19:0x0005 \-\> B:27:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x001d: r0 'e' Ljava\/lang\/reflect\/InvocationTargetException;\l  \-1 \-0x001e: r4 'view' Landroid\/view\/View;\lTryCatch #2 \{IllegalAccessException \-\> 0x001d, InvocationTargetException \-\> 0x0012, blocks: (B:21:0x0009), top: B:28:0x0009 \}\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_30;
Node_20 -> Node_28;
Node_28 -> Node_21;
Node_28 -> Node_26;
Node_28 -> Node_23;
Node_21 -> Node_29;
Node_21 -> Node_31;
Node_29 -> Node_26;
Node_29 -> Node_23;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_17;
Node_30 -> Node_17;
}

