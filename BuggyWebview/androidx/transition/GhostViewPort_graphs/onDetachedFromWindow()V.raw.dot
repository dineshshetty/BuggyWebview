digraph "CFG forandroidx.transition.GhostViewPort.onDetachedFromWindow()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:android.view.View) = (r2 I:androidx.transition.GhostViewPort) androidx.transition.GhostViewPort.mView android.view.View  (LINE:113)\l0x0002: INVOKE  (r0 I:android.view.ViewTreeObserver) = (r0 I:android.view.View) type: VIRTUAL call: android.view.View.getViewTreeObserver():android.view.ViewTreeObserver A[MD:():android.view.ViewTreeObserver (c)]\l0x0006: IGET  (r1 I:android.view.ViewTreeObserver$OnPreDrawListener) = (r2 I:androidx.transition.GhostViewPort) androidx.transition.GhostViewPort.mOnPreDrawListener android.view.ViewTreeObserver$OnPreDrawListener \l0x0008: INVOKE  (r0 I:android.view.ViewTreeObserver), (r1 I:android.view.ViewTreeObserver$OnPreDrawListener) type: VIRTUAL call: android.view.ViewTreeObserver.removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener):void A[MD:(android.view.ViewTreeObserver$OnPreDrawListener):void (c)]\l0x000b: IGET  (r0 I:android.view.View) = (r2 I:androidx.transition.GhostViewPort) androidx.transition.GhostViewPort.mView android.view.View  (LINE:114)\l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:android.view.View), (r1 I:int) type: STATIC call: androidx.transition.ViewUtils.setTransitionVisibility(android.view.View, int):void A[MD:(android.view.View, int):void (m)]\l0x0011: IGET  (r0 I:android.view.View) = (r2 I:androidx.transition.GhostViewPort) androidx.transition.GhostViewPort.mView android.view.View  (LINE:115)\l0x0013: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: INVOKE  (r0 I:android.view.View), (r1 I:androidx.transition.GhostViewPort) type: STATIC call: androidx.transition.GhostViewPort.setGhostView(android.view.View, androidx.transition.GhostViewPort):void A[MD:(android.view.View, androidx.transition.GhostViewPort):void (m)]\l0x0017: IGET  (r0 I:android.view.View) = (r2 I:androidx.transition.GhostViewPort) androidx.transition.GhostViewPort.mView android.view.View  (LINE:116)\l0x0019: INVOKE  (r0 I:android.view.ViewParent) = (r0 I:android.view.View) type: VIRTUAL call: android.view.View.getParent():android.view.ViewParent A[MD:():android.view.ViewParent (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x002a \l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|0x001f: IGET  (r0 I:android.view.View) = (r2 I:androidx.transition.GhostViewPort) androidx.transition.GhostViewPort.mView android.view.View  (LINE:117)\l0x0021: INVOKE  (r0 I:android.view.ViewParent) = (r0 I:android.view.View) type: VIRTUAL call: android.view.View.getParent():android.view.ViewParent A[MD:():android.view.ViewParent (c)]\l0x0025: CHECK_CAST (r0 I:android.view.View) = (android.view.View) (r0 I:??[OBJECT, ARRAY]) \l0x0027: INVOKE  (r0 I:android.view.View) type: VIRTUAL call: android.view.View.invalidate():void A[MD:():void (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: INVOKE  (r2 I:android.view.ViewGroup) type: SUPER call: android.view.ViewGroup.onDetachedFromWindow():void A[MD:():void (c)] (LINE:119)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|RETURN\l|0x002d: RETURN    (LINE:120)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected void androidx.transition.GhostViewPort.onDetachedFromWindow((r2 'this' I:androidx.transition.GhostViewPort A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x001d \-\> B:12:0x002a\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onDetachedFromWindow():void\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

