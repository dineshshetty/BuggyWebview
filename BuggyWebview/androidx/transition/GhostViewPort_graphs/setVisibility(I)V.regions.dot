digraph "CFG forandroidx.transition.GhostViewPort.setVisibility(I)V" {
subgraph cluster_Region_1006627827 {
label = "R(2:1|(1:(2:3|5)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|super.setVisibility(r3)\l}"];
subgraph cluster_Region_1243726132 {
label = "R(1:(2:3|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1112620660 {
label = "IF [B:13:0x0009] THEN: R(2:3|5) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0009|if (getGhostView(r2.mView) == r2) goto L3\l}"];
subgraph cluster_Region_1809725554 {
label = "R(2:3|5)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000b|int r0 = r3 == 0 ? 4 : 0\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|PHI: r0 \l  PHI: (r0v3 'inverseVisibility' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|androidx.transition.ViewUtils.setTransitionVisibility(r2.mView, r0)\l}"];
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x000d}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0015|ORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000f}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.transition.GhostViewPort.setVisibility((r2v0 'this' androidx.transition.GhostViewPort A[IMMUTABLE_TYPE, THIS]), (r3v0 'visibility' int A[D('visibility' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:16:0x000f \-\> B:17:0x0010, CROSS_EDGE: B:13:0x0009 \-\> B:18:0x0015\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.transition.GhostView.setVisibility(int):void, ClspMth\{android.view.View.setVisibility(int):void\}]\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_19[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_16;
Node_17 -> Node_18;
Node_10 -> Node_12;
Node_15 -> Node_17;
Node_18 -> Node_11;
Node_16 -> Node_17;
Node_19 -> Node_11;
}

