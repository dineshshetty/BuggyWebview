digraph "CFG forandroidx.transition.Explode.calculateOut(Landroid\/view\/View;Landroid\/graphics\/Rect;[I)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY])  (LINE:128)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r21 I:??[OBJECT, ARRAY] A[D('sceneRoot' android.view.View)]) \l0x0004: IGET  (r2 I:int[]) = (r0 I:androidx.transition.Explode) androidx.transition.Explode.mTempLoc int[] \l0x0006: INVOKE  (r1 I:android.view.View), (r2 I:int[]) type: VIRTUAL call: android.view.View.getLocationOnScreen(int[]):void A[MD:(int[]):void (c)]\l0x0009: IGET  (r2 I:int[]) = (r0 I:androidx.transition.Explode) androidx.transition.Explode.mTempLoc int[]  (LINE:129)\l0x000b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: AGET  (r4 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r3 I:??[int, short, byte, char]) \l0x000e: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:130)\l0x000f: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r5 I:??[int, short, byte, char]) \l0x0011: INVOKE  (r6 I:android.graphics.Rect) = (r20 I:androidx.transition.Explode) type: VIRTUAL call: androidx.transition.Explode.getEpicenter():android.graphics.Rect A[MD:():android.graphics.Rect (m)] (LINE:134)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|0x0015: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('epicenter' android.graphics.Rect)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0038  (LINE:135)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0017|0x0017: INVOKE  (r7 I:int) = (r21 I:android.view.View A[D('sceneRoot' android.view.View)]) type: VIRTUAL call: android.view.View.getWidth():int A[MD:():int (c)] (LINE:136)\l0x001b: ARITH  (r7 I:int) = (r7 I:int) \/ (2 int) \l0x001d: ARITH  (r7 I:int) = (r7 I:int) + (r4 I:int A[D('sceneRootX' int)]) \l0x001e: INVOKE  (r8 I:float) = (r21 I:android.view.View A[D('sceneRoot' android.view.View)]) type: VIRTUAL call: android.view.View.getTranslationX():float A[MD:():float (c)] (LINE:137)\l0x0022: INVOKE  (r8 I:int) = (r8 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x0026: ARITH  (r7 I:int) = (r7 I:int) + (r8 I:int) \l0x0027: INVOKE  (r8 I:int) = (r21 I:android.view.View A[D('sceneRoot' android.view.View)]) type: VIRTUAL call: android.view.View.getHeight():int A[MD:():int (c)] (LINE:138)\l0x002b: ARITH  (r8 I:int) = (r8 I:int) \/ (2 int) \l0x002d: ARITH  (r8 I:int) = (r8 I:int) + (r2 I:int A[D('sceneRootY' int)]) \l0x002e: INVOKE  (r9 I:float) = (r21 I:android.view.View A[D('sceneRoot' android.view.View)]) type: VIRTUAL call: android.view.View.getTranslationY():float A[MD:():float (c)] (LINE:139)\l0x0032: INVOKE  (r9 I:int) = (r9 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x0036: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0040|0x0040: INVOKE  (r9 I:int) = (r22 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.centerX():int A[MD:():int (c)] (LINE:145)\l0x0044: INVOKE  (r10 I:int) = (r22 I:android.graphics.Rect A[D('bounds' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.centerY():int A[MD:():int (c)] (LINE:146)\l0x0048: ARITH  (r11 I:int) = (r9 I:int A[D('centerX' int)]) \- (r7 I:int A[D('focalX' int)])  (LINE:147)\l0x004a: CAST (r11 I:float) = (float) (r11 I:int) \l0x004b: ARITH  (r12 I:int) = (r10 I:int A[D('centerY' int)]) \- (r8 I:int A[D('focalY' int)])  (LINE:148)\l0x004d: CAST (r12 I:float) = (float) (r12 I:int) \l0x004e: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:150)\l0x004f: CMP_L  (r14 I:int) = (r11 I:float A[D('xVector' float)]), (r13 I:float) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0051|0x0051: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0070 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|0x0053: CMP_L  (r13 I:int) = (r12 I:float A[D('yVector' float)]), (r13 I:float) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0055|0x0055: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0070 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0057|0x0057: INVOKE  (r13 I:double) =  type: STATIC call: java.lang.Math.random():double A[MD:():double (c)] (LINE:152)\l0x005b: CONST  (r15 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double]) \l0x005d: ARITH  (r13 I:double) = (r13 I:double) * (r15 I:double) \l0x005f: CAST (r13 I:float) = (float) (r13 I:double) \l0x0060: CONST  (r14 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x0062: ARITH  (r11 I:float A[D('xVector' float)]) = (r13 I:float) \- (r14 I:float) \l0x0064: INVOKE  (r17 I:double) =  type: STATIC call: java.lang.Math.random():double A[MD:():double (c)] (LINE:153)\l0x0068: MOVE  (r19 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('epicenter' android.graphics.Rect)]) \l0x006a: ARITH  (r5 I:double) = (r17 I:double) * (r15 I:double) \l0x006c: CAST (r5 I:float) = (float) (r5 I:double) \l0x006d: ARITH  (r12 I:float A[D('yVector' float)]) = (r5 I:float) \- (r14 I:float) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0072|0x0072: INVOKE  (r5 I:float) = (r11 I:float A[D('xVector' float)]), (r12 I:float A[D('yVector' float)]) type: STATIC call: androidx.transition.Explode.calculateDistance(float, float):float A[MD:(float, float):float (m)] (LINE:155)\l0x0076: ARITH  (r11 I:float) = (r11 I:float A[D('xVector' float)]) \/ (r5 I:float A[D('vectorSize' float)])  (LINE:156)\l0x0077: ARITH  (r12 I:float) = (r12 I:float A[D('yVector' float)]) \/ (r5 I:float A[D('vectorSize' float)])  (LINE:157)\l0x0078: ARITH  (r6 I:int) = (r7 I:int A[D('focalX' int)]) \- (r4 I:int A[D('sceneRootX' int)])  (LINE:159)\l0x007a: ARITH  (r14 I:int) = (r8 I:int A[D('focalY' int)]) \- (r2 I:int A[D('sceneRootY' int)]) \l0x007c: INVOKE  (r6 I:float) = (r1 I:android.view.View), (r6 I:int), (r14 I:int) type: STATIC call: androidx.transition.Explode.calculateMaxDistance(android.view.View, int, int):float A[MD:(android.view.View, int, int):float (m)] (LINE:160)\l0x0080: ARITH  (r14 I:float) = (r6 I:float A[D('maxDistance' float)]) * (r11 I:float A[D('xVector' float)])  (LINE:162)\l0x0082: INVOKE  (r14 I:int) = (r14 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x0086: APUT  \l  (r23 I:??[int, float][] A[D('outVector' int[])])\l  (r3 I:??[int, short, byte, char])\l  (r14 I:??[int, float, short, byte, char])\l \l0x0088: ARITH  (r3 I:float) = (r6 I:float A[D('maxDistance' float)]) * (r12 I:float A[D('yVector' float)])  (LINE:163)\l0x008a: INVOKE  (r3 I:int) = (r3 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x008e: CONST  (r13 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x008f: APUT  \l  (r23 I:??[int, float][] A[D('outVector' int[])])\l  (r13 I:??[int, short, byte, char])\l  (r3 I:??[int, float, short, byte, char])\l \l}"];
Node_27 [shape=record,label="{27\:\ 0x0091|RETURN\l|0x0091: RETURN    (LINE:164)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0070|0x0070: MOVE  (r19 I:??[OBJECT, ARRAY] A[D('epicenter' android.graphics.Rect)]) = (r6 I:??[OBJECT, ARRAY] A[D('epicenter' android.graphics.Rect)])  (LINE:150)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0038|0x0038: INVOKE  (r7 I:int) = (r6 I:android.graphics.Rect A[D('epicenter' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.centerX():int A[MD:():int (c)] (LINE:141)\l0x003c: INVOKE  (r8 I:int) = (r6 I:android.graphics.Rect A[D('epicenter' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.centerY():int A[MD:():int (c)] (LINE:142)\l}"];
MethodNode[shape=record,label="{private void androidx.transition.Explode.calculateOut((r20 'this' I:androidx.transition.Explode A[IMMUTABLE_TYPE, THIS]), (r21 I:android.view.View A[D('sceneRoot' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:int[] A[D('outVector' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0070 \-\> B:26:0x0072, CROSS_EDGE: B:21:0x0051 \-\> B:25:0x0070, CROSS_EDGE: B:19:0x0038 \-\> B:20:0x0040\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0027\-0x0038: r7 'focalX' I\l  0x0037\-0x0038: r8 'focalY' I\l  0x0015\-0x006a: r6 'epicenter' Landroid\/graphics\/Rect;\l  0x006a\-0x0070: r19 'epicenter' Landroid\/graphics\/Rect;\l  0x0070\-0x0072: r6 'epicenter' Landroid\/graphics\/Rect;\l  0x0011\-0x0091: r2 'sceneRootY' I\l  0x000e\-0x0091: r4 'sceneRootX' I\l  0x0076\-0x0091: r5 'vectorSize' F\l  0x0080\-0x0091: r6 'maxDistance' F\l  0x003c\-0x0091: r7 'focalX' I\l  0x0040\-0x0091: r8 'focalY' I\l  0x0044\-0x0091: r9 'centerX' I\l  0x0048\-0x0091: r10 'centerY' I\l  0x004b\-0x0091: r11 'xVector' F\l  0x004e\-0x0091: r12 'yVector' F\l  0x0072\-0x0091: r19 'epicenter' Landroid\/graphics\/Rect;\l  \-1 \-0x0091: r21 'sceneRoot' Landroid\/view\/View;\l  \-1 \-0x0091: r22 'bounds' Landroid\/graphics\/Rect;\l  \-1 \-0x0091: r23 'outVector' [I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_15;
Node_25 -> Node_26;
Node_19 -> Node_20;
}

