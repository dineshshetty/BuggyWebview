digraph "CFG forandroidx.transition.Explode.calculateMaxDistance(Landroid\/view\/View;II)F" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r4 I:android.view.View A[D('sceneRoot' android.view.View)]) type: VIRTUAL call: android.view.View.getWidth():int A[MD:():int (c)] (LINE:167)\l0x0004: ARITH  (r0 I:int) = (r0 I:int) \- (r5 I:int A[D('focalX' int)]) \l0x0005: INVOKE  (r0 I:int) = (r5 I:int A[D('focalX' int)]), (r0 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0009: INVOKE  (r1 I:int) = (r4 I:android.view.View A[D('sceneRoot' android.view.View)]) type: VIRTUAL call: android.view.View.getHeight():int A[MD:():int (c)] (LINE:168)\l0x000d: ARITH  (r1 I:int) = (r1 I:int) \- (r6 I:int A[D('focalY' int)]) \l0x000e: INVOKE  (r1 I:int) = (r6 I:int A[D('focalY' int)]), (r1 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0012: CAST (r2 I:float) = (float) (r0 I:int A[D('maxX' int)])  (LINE:169)\l0x0013: CAST (r3 I:float) = (float) (r1 I:int A[D('maxY' int)]) \l0x0014: INVOKE  (r2 I:float) = (r2 I:float), (r3 I:float) type: STATIC call: androidx.transition.Explode.calculateDistance(float, float):float A[MD:(float, float):float (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|RETURN\l|0x0018: RETURN  (r2 I:float) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static float androidx.transition.Explode.calculateMaxDistance((r4 I:android.view.View A[D('sceneRoot' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('focalX' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('focalY' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0018: r0 'maxX' I\l  0x0012\-0x0018: r1 'maxY' I\l  \-1 \-0x0018: r4 'sceneRoot' Landroid\/view\/View;\l  \-1 \-0x0018: r5 'focalX' I\l  \-1 \-0x0018: r6 'focalY' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

