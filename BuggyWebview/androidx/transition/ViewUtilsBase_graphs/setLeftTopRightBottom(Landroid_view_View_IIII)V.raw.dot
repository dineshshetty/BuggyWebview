digraph "CFG forandroidx.transition.ViewUtilsBase.setLeftTopRightBottom(Landroid\/view\/View;IIII)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INVOKE  (r4 I:androidx.transition.ViewUtilsBase) type: DIRECT call: androidx.transition.ViewUtilsBase.fetchSetFrame():void A[MD:():void (m)] (LINE:142)\l0x0003: SGET  (r0 I:java.lang.reflect.Method) =  androidx.transition.ViewUtilsBase.sSetFrameMethod java.lang.reflect.Method  (LINE:143)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:? \l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:145)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IllegalAccessException \-\> 0x0035, InvocationTargetException \-\> 0x002a, blocks: (B:21:0x0008), top: B:28:0x0008 \}\lCatch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035\l|0x0008: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035, TRY_ENTER]\l0x000a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r3 I:java.lang.Integer) = (r6 I:int A[D('left' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035, MD:(int):java.lang.Integer (c)]\l0x000f: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035]\l0x0011: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0012: INVOKE  (r3 I:java.lang.Integer) = (r7 I:int A[D('top' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035, MD:(int):java.lang.Integer (c)]\l0x0016: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035]\l0x0018: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0019: INVOKE  (r3 I:java.lang.Integer) = (r8 I:int A[D('right' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035, MD:(int):java.lang.Integer (c)]\l0x001d: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035]\l0x001f: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0020: INVOKE  (r3 I:java.lang.Integer) = (r9 I:int A[D('bottom' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035, MD:(int):java.lang.Integer (c)]\l0x0024: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035]\l0x0026: INVOKE  (r0 I:java.lang.reflect.Method), (r5 I:java.lang.Object A[D('v' android.view.View)]), (r1 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: InvocationTargetException \-\> 0x002a, IllegalAccessException \-\> 0x0035, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c), TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0036: RETURN   A[SYNTHETIC] (LINE:152)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0035|ExcHandler: IllegalAccessException \-\> 0x0035\l|0x0035: MOVE_EXCEPTION  (r0 I:java.lang.IllegalAccessException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \-\> 0x0035] (LINE:146)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0036|RETURN\lORIG_RETURN\l|0x0036: RETURN    (LINE:152)\l}"];
Node_23 [shape=record,label="{23\:\ 0x002a|ExcHandler: InvocationTargetException \-\> 0x002a\l|0x002a: MOVE_EXCEPTION  (r0 I:java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: InvocationTargetException \-\> 0x002a] (LINE:148)\l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|0x002b: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:149)\l0x002d: INVOKE  (r2 I:java.lang.Throwable) = (r0 I:java.lang.reflect.InvocationTargetException A[D('e' java.lang.reflect.InvocationTargetException)]) type: VIRTUAL call: java.lang.reflect.InvocationTargetException.getCause():java.lang.Throwable A[MD:():java.lang.Throwable (c)]\l0x0031: INVOKE  (r1 I:java.lang.RuntimeException), (r2 I:java.lang.Throwable) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0034|0x0034: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x0036: RETURN   A[SYNTHETIC] (LINE:152)\l}"];
MethodNode[shape=record,label="{public void androidx.transition.ViewUtilsBase.setLeftTopRightBottom((r4 'this' I:androidx.transition.ViewUtilsBase A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.View A[D('v' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0035 \-\> B:27:0x0036, CROSS_EDGE: B:25:0x0034 \-\> B:17:?, CROSS_EDGE: B:28:0x0008 \-\> B:26:0x0035, CROSS_EDGE: B:28:0x0008 \-\> B:23:0x002a, CROSS_EDGE: B:19:0x0005 \-\> B:27:0x0036\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002b\-0x0035: r0 'e' Ljava\/lang\/reflect\/InvocationTargetException;\l  \-1 \-0x0036: r5 'v' Landroid\/view\/View;\l  \-1 \-0x0036: r6 'left' I\l  \-1 \-0x0036: r7 'top' I\l  \-1 \-0x0036: r8 'right' I\l  \-1 \-0x0036: r9 'bottom' I\lTryCatch #2 \{IllegalAccessException \-\> 0x0035, InvocationTargetException \-\> 0x002a, blocks: (B:21:0x0008), top: B:28:0x0008 \}\lMETHOD_OVERRIDE: [androidx.transition.ViewUtilsBase.setLeftTopRightBottom(android.view.View, int, int, int, int):void]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_30;
Node_20 -> Node_28;
Node_28 -> Node_21;
Node_28 -> Node_26;
Node_28 -> Node_23;
Node_21 -> Node_29;
Node_21 -> Node_31;
Node_29 -> Node_26;
Node_29 -> Node_23;
Node_31 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_17;
Node_30 -> Node_17;
}

