digraph "CFG forandroidx.transition.ViewUtilsBase.setAnimationMatrix(Landroid\/view\/View;Landroid\/graphics\/Matrix;)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:109)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matrix' android.graphics.Matrix)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0061 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|0x0006: INVOKE  (r3 I:boolean) = (r12 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix)]) type: VIRTUAL call: android.graphics.Matrix.isIdentity():boolean A[MD:():boolean (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|0x000a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x000d \l}"];
Node_25 [shape=record,label="{25\:\ 0x000d|0x000d: IGET  (r3 I:float[]) = (r10 I:androidx.transition.ViewUtilsBase) androidx.transition.ViewUtilsBase.mMatrixValues float[]  (LINE:118)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('values' float[])]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0018  (LINE:119)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|0x0011: CONST  (r4 I:??[int, float, short, byte, char]) = (9 ??[int, float, short, byte, char])  (LINE:120)\l0x0013: NEW_ARRAY  (r4 I:float[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0015: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('values' float[])]) = (r4 I:??[OBJECT, ARRAY]) \l0x0016: IPUT  (r4 I:float[]), (r10 I:androidx.transition.ViewUtilsBase) androidx.transition.ViewUtilsBase.mMatrixValues float[] \l}"];
Node_28 [shape=record,label="{28\:\ 0x0018|0x0018: INVOKE  (r12 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix)]), (r3 I:float[] A[D('values' float[])]) type: VIRTUAL call: android.graphics.Matrix.getValues(float[]):void A[MD:(float[]):void (c)] (LINE:122)\l0x001b: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:123)\l0x001c: AGET  (r4 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('values' float[])]), (r4 I:??[int, short, byte, char]) \l0x001e: ARITH  (r5 I:float) = (r4 I:float A[D('sin' float)]) * (r4 I:float A[D('sin' float)])  (LINE:124)\l0x0020: ARITH  (r0 I:float) = (r0 I:float) \- (r5 I:float) \l0x0021: CAST (r5 I:double) = (double) (r0 I:float) \l0x0022: INVOKE  (r5 I:double) = (r5 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x0026: CAST (r0 I:float) = (float) (r5 I:double) \l0x0027: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0028: AGET  (r6 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('values' float[])]), (r5 I:??[int, short, byte, char]) \l0x002a: CMP_G  (r6 I:int) = (r6 I:float), (r2 I:float) \l}"];
Node_29 [shape=record,label="{29\:\ 0x002c|0x002c: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:31:0x0030 \l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|0x002e: CONST  (r6 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0031|0x0031: CAST (r6 I:float) = (float) (r6 I:int) \l0x0032: ARITH  (r0 I:float) = (r0 I:float) * (r6 I:float) \l0x0034: CAST (r6 I:double) = (double) (r4 I:float A[D('sin' float)])  (LINE:126)\l0x0035: CAST (r8 I:double) = (double) (r0 I:float A[D('cos' float)]) \l0x0036: INVOKE  (r6 I:double) = (r6 I:double), (r8 I:double) type: STATIC call: java.lang.Math.atan2(double, double):double A[MD:(double, double):double (c)]\l0x003a: INVOKE  (r6 I:double) = (r6 I:double) type: STATIC call: java.lang.Math.toDegrees(double):double A[MD:(double):double (c)]\l0x003e: CAST (r6 I:float) = (float) (r6 I:double) \l0x003f: AGET  (r5 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('values' float[])]), (r5 I:??[int, short, byte, char])  (LINE:127)\l0x0041: ARITH  (r5 I:float) = (r5 I:float) \/ (r0 I:float A[D('cos' float)]) \l0x0042: CONST  (r7 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:128)\l0x0043: AGET  (r7 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('values' float[])]), (r7 I:??[int, short, byte, char]) \l0x0045: ARITH  (r7 I:float) = (r7 I:float) \/ (r0 I:float A[D('cos' float)]) \l0x0046: AGET  (r1 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('values' float[])]), (r1 I:??[int, short, byte, char])  (LINE:129)\l0x0048: CONST  (r8 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char])  (LINE:130)\l0x0049: AGET  (r8 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('values' float[])]), (r8 I:??[int, short, byte, char]) \l0x004b: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r2 I:float) type: VIRTUAL call: android.view.View.setPivotX(float):void A[MD:(float):void (c)] (LINE:131)\l0x004e: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r2 I:float) type: VIRTUAL call: android.view.View.setPivotY(float):void A[MD:(float):void (c)] (LINE:132)\l0x0051: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r1 I:float A[D('dx' float)]) type: VIRTUAL call: android.view.View.setTranslationX(float):void A[MD:(float):void (c)] (LINE:133)\l0x0054: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r8 I:float A[D('dy' float)]) type: VIRTUAL call: android.view.View.setTranslationY(float):void A[MD:(float):void (c)] (LINE:134)\l0x0057: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r6 I:float A[D('rotation' float)]) type: VIRTUAL call: android.view.View.setRotation(float):void A[MD:(float):void (c)] (LINE:135)\l0x005a: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r5 I:float A[D('scaleX' float)]) type: VIRTUAL call: android.view.View.setScaleX(float):void A[MD:(float):void (c)] (LINE:136)\l0x005d: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r7 I:float A[D('scaleY' float)]) type: VIRTUAL call: android.view.View.setScaleY(float):void A[MD:(float):void (c)] (LINE:137)\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0082: RETURN   A[SYNTHETIC] (LINE:139)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0030|0x0030: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0061|0x0061: INVOKE  (r3 I:int) = (r11 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: android.view.View.getWidth():int A[MD:():int (c)] (LINE:110)\l0x0065: ARITH  (r3 I:int) = (r3 I:int) \/ (r1 I:int) \l0x0066: CAST (r3 I:float) = (float) (r3 I:int) \l0x0067: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r3 I:float) type: VIRTUAL call: android.view.View.setPivotX(float):void A[MD:(float):void (c)]\l0x006a: INVOKE  (r3 I:int) = (r11 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: android.view.View.getHeight():int A[MD:():int (c)] (LINE:111)\l0x006e: ARITH  (r3 I:int) = (r3 I:int) \/ (r1 I:int) \l0x006f: CAST (r1 I:float) = (float) (r3 I:int) \l0x0070: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r1 I:float) type: VIRTUAL call: android.view.View.setPivotY(float):void A[MD:(float):void (c)]\l0x0073: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r2 I:float) type: VIRTUAL call: android.view.View.setTranslationX(float):void A[MD:(float):void (c)] (LINE:112)\l0x0076: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r2 I:float) type: VIRTUAL call: android.view.View.setTranslationY(float):void A[MD:(float):void (c)] (LINE:113)\l0x0079: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r0 I:float) type: VIRTUAL call: android.view.View.setScaleX(float):void A[MD:(float):void (c)] (LINE:114)\l0x007c: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r0 I:float) type: VIRTUAL call: android.view.View.setScaleY(float):void A[MD:(float):void (c)] (LINE:115)\l0x007f: INVOKE  (r11 I:android.view.View A[D('view' android.view.View)]), (r2 I:float) type: VIRTUAL call: android.view.View.setRotation(float):void A[MD:(float):void (c)] (LINE:116)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0082|RETURN\lORIG_RETURN\l|0x0082: RETURN    (LINE:139)\l}"];
MethodNode[shape=record,label="{public void androidx.transition.ViewUtilsBase.setAnimationMatrix((r10 'this' I:androidx.transition.ViewUtilsBase A[IMMUTABLE_TYPE, THIS]), (r11 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0030 \-\> B:32:0x0031, CROSS_EDGE: B:26:0x000f \-\> B:28:0x0018, CROSS_EDGE: B:33:0x0061 \-\> B:34:0x0082, CROSS_EDGE: B:21:0x0004 \-\> B:33:0x0061\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0034\-0x0061: r0 'cos' F\l  0x0048\-0x0061: r1 'dx' F\l  0x000f\-0x0061: r3 'values' [F\l  0x001e\-0x0061: r4 'sin' F\l  0x0042\-0x0061: r5 'scaleX' F\l  0x003f\-0x0061: r6 'rotation' F\l  0x0046\-0x0061: r7 'scaleY' F\l  0x004b\-0x0061: r8 'dy' F\l  \-1 \-0x0082: r11 'view' Landroid\/view\/View;\l  \-1 \-0x0082: r12 'matrix' Landroid\/graphics\/Matrix;\lMETHOD_OVERRIDE: [androidx.transition.ViewUtilsBase.setAnimationMatrix(android.view.View, android.graphics.Matrix):void]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_33;
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_33[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_35;
Node_35 -> Node_19;
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_34 -> Node_19;
}

