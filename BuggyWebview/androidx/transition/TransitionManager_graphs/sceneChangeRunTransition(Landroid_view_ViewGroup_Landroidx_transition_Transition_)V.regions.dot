digraph "CFG forandroidx.transition.TransitionManager.sceneChangeRunTransition(Landroid\/view\/ViewGroup;Landroidx\/transition\/Transition;)V" {
subgraph cluster_Region_1048791953 {
label = "R(1:(1:(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_294343884 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_494877221 {
label = "IF [B:10:0x0000, B:11:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|if (r3 != null) goto L2\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|ADDED_TO_REGION\l|if (r2 != null) goto L3\l}"];
subgraph cluster_Region_1535510541 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|androidx.transition.TransitionManager$MultiListener androidx.transition.TransitionManager.MultiListener r0 = new androidx.transition.TransitionManager.MultiListener(r3, r2)\lr2.addOnAttachStateChangeListener(r0)\lr2.getViewTreeObserver().addOnPreDrawListener(r0)\l}"];
}
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0013|ORIG_RETURN\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
MethodNode[shape=record,label="{private static void androidx.transition.TransitionManager.sceneChangeRunTransition((r2v0 'sceneRoot' android.view.ViewGroup A[D('sceneRoot' android.view.ViewGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'transition' androidx.transition.Transition A[D('transition' androidx.transition.Transition), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0002 \-\> B:13:0x0013, CROSS_EDGE: B:10:0x0000 \-\> B:13:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_10 -> Node_14[style=dashed];
Node_11 -> Node_12;
Node_11 -> Node_15[style=dashed];
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_14 -> Node_9;
}

