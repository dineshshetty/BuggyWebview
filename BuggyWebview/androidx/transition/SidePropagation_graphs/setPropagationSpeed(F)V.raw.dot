digraph "CFG forandroidx.transition.SidePropagation.setPropagationSpeed(F)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:67)\l0x0001: CMP_L  (r0 I:int) = (r3 I:float A[D('propagationSpeed' float)]), (r0 I:float) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: IPUT  (r3 I:float A[D('propagationSpeed' float)]), (r2 I:androidx.transition.SidePropagation) androidx.transition.SidePropagation.mPropagationSpeed float  (LINE:70)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:71)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:68)\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"propagationSpeed may not be 0\" \l0x000c: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.transition.SidePropagation.setPropagationSpeed((r2 'this' I:androidx.transition.SidePropagation A[IMMUTABLE_TYPE, THIS]), (r3 I:float A[D('propagationSpeed' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r3 'propagationSpeed' F\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

