digraph "CFG forandroidx.transition.GhostViewHolder.onViewAdded(Landroid\/view\/View;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r2 I:androidx.transition.GhostViewHolder) androidx.transition.GhostViewHolder.mAttached boolean  (LINE:48)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r2 I:android.widget.FrameLayout), (r3 I:android.view.View A[D('child' android.view.View)]) type: SUPER call: android.widget.FrameLayout.onViewAdded(android.view.View):void A[MD:(android.view.View):void (c)] (LINE:51)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:52)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:49)\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"This GhostViewHolder is detached!\" \l0x000c: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.transition.GhostViewHolder.onViewAdded((r2 'this' I:androidx.transition.GhostViewHolder A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x000f \-\> B:1:?\lDebug Info:\l  \-1 \-0x000f: r3 'child' Landroid\/view\/View;\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewGroup.onViewAdded(android.view.View):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

