digraph "CFG forandroidx.transition.GhostViewHolder.addGhostView(Landroidx\/transition\/GhostViewPort;)V" {
subgraph cluster_Region_1698081799 {
label = "R(2:1|(1:8)(1:5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.ArrayList java.util.ArrayList\<android.view.View\> r0 = new java.util.ArrayList\<\>()\lgetParents(r4.mView, r0)\lint int r1 = getInsertIndex(r0)\l}"];
subgraph cluster_IfRegion_4878834 {
label = "IF [B:3:0x000e, B:5:0x0014] THEN: R(1:8) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|if (r1 \< 0) goto L8\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|ADDED_TO_REGION\l|if (r1 \>= getChildCount()) goto L8\l}"];
subgraph cluster_Region_398109945 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x001b|addView(r4)\l}"];
}
subgraph cluster_Region_1509733708 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0017|addView(r4, r1)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0010}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001e|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void androidx.transition.GhostViewHolder.addGhostView((r3v0 'this' androidx.transition.GhostViewHolder A[IMMUTABLE_TYPE, THIS]), (r4v0 'ghostView' androidx.transition.GhostViewPort A[D('ghostView' androidx.transition.GhostViewPort), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x001b \-\> B:9:0x001e, CROSS_EDGE: B:3:0x000e \-\> B:8:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l INFO: \l \-\> Access modifiers changed from: package\-private\}\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_5 -> Node_7[style=dashed];
Node_5 -> Node_8;
Node_8 -> Node_9;
Node_7 -> Node_10;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_10 -> Node_1;
Node_9 -> Node_1;
}

