digraph "CFG forandroidx.fragment.app.FragmentContainerView.addView(Landroid\/view\/View;ILandroid\/view\/ViewGroup$LayoutParams;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:androidx.fragment.app.Fragment) = (r4 I:android.view.View A[D('child' android.view.View)]) type: STATIC call: androidx.fragment.app.FragmentManager.getViewFragment(android.view.View):androidx.fragment.app.Fragment A[MD:(android.view.View):androidx.fragment.app.Fragment (m)] (LINE:308)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  \l  (r3 I:android.widget.FrameLayout)\l  (r4 I:android.view.View A[D('child' android.view.View)])\l  (r5 I:int A[D('index' int)])\l  (r6 I:android.view.ViewGroup$LayoutParams A[D('params' android.view.ViewGroup$LayoutParams)])\l type: SUPER call: android.widget.FrameLayout.addView(android.view.View, int, android.view.ViewGroup$LayoutParams):void A[MD:(android.view.View, int, android.view.ViewGroup$LayoutParams):void (c)] (LINE:313)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|RETURN\l|0x0009: RETURN    (LINE:314)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:309)\l0x000c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000e: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0011: CONST_STR  (r2 I:java.lang.String) =  \"Views added to a FragmentContainerView must be associated with a Fragment. View \" \l0x0013: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0016: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object A[D('child' android.view.View)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0019: CONST_STR  (r2 I:java.lang.String) =  \" is not associated with a Fragment.\" \l0x001b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001e: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0022: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentContainerView.addView((r3 'this' I:androidx.fragment.app.FragmentContainerView A[IMMUTABLE_TYPE, THIS]), (r4 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.view.ViewGroup$LayoutParams A[D('params' android.view.ViewGroup$LayoutParams), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0025 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r4 'child' Landroid\/view\/View;\l  \-1 \-0x0025: r5 'index' I\l  \-1 \-0x0025: r6 'params' Landroid\/view\/ViewGroup$LayoutParams;\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewGroup.addView(android.view.View, int, android.view.ViewGroup$LayoutParams):void\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

