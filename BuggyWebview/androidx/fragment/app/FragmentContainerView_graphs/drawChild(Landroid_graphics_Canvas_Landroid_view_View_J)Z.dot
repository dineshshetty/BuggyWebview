digraph "CFG forandroidx.fragment.app.FragmentContainerView.drawChild(Landroid\/graphics\/Canvas;Landroid\/view\/View;J)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0002|if (r1.mDrawDisappearingViewsFirst == false) goto L11\l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|java.util.ArrayList\<android.view.View\> r0 = r1.mDisappearingFragmentChildren\l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|if (r0 == null) goto L11\l}"];
Node_20 [shape=record,label="{20\:\ 0x0008}"];
Node_21 [shape=record,label="{21\:\ 0x000c|if (r0.size() \<= 0) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e}"];
Node_23 [shape=record,label="{23\:\ 0x0014|if (r1.mDisappearingFragmentChildren.contains(r3) == false) goto L11\l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018}"];
Node_27 [shape=record,label="{27\:\ 0x001c|RETURN\l|return super.drawChild(r2, r3, r4)\l}"];
MethodNode[shape=record,label="{protected boolean androidx.fragment.app.FragmentContainerView.drawChild((r1v0 'this' androidx.fragment.app.FragmentContainerView A[IMMUTABLE_TYPE, THIS]), (r2v0 'canvas' android.graphics.Canvas A[D('canvas' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'drawingTime' long A[D('drawingTime' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:27:0x001c \-\> B:15:?, CROSS_EDGE: B:21:0x000c \-\> B:26:0x0018, CROSS_EDGE: B:19:0x0006 \-\> B:26:0x0018, CROSS_EDGE: B:17:0x0002 \-\> B:26:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewGroup.drawChild(android.graphics.Canvas, android.view.View, long):boolean\}]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

