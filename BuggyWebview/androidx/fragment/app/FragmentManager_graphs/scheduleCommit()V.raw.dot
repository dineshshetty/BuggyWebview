digraph "CFG forandroidx.fragment.app.FragmentManager.scheduleCommit()V" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: IGET  (r0 I:java.util.ArrayList\<androidx.fragment.app.FragmentManager$OpGenerator\>) = (r5 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mPendingActions java.util.ArrayList  (LINE:1907)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x003a, blocks: (B:27:0x0003, B:29:0x0009, B:33:0x0012, B:39:0x0038, B:38:0x001f), top: B:44:0x0003 \}\lCatch: all \-\> 0x003a\l|0x0003: IGET  (r1 I:java.util.ArrayList\<androidx.fragment.app.FragmentManager$StartEnterTransitionListener\>) = (r5 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mPostponedTransactions java.util.ArrayList A[Catch: all \-\> 0x003a, TRY_ENTER] (LINE:1908)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0011 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|TryCatch #0 \{all \-\> 0x003a, blocks: (B:27:0x0003, B:29:0x0009, B:33:0x0012, B:39:0x0038, B:38:0x001f), top: B:44:0x0003 \}\lCatch: all \-\> 0x003a\l|0x0009: INVOKE  (r1 I:boolean) = (r1 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.isEmpty():boolean A[Catch: all \-\> 0x003a, MD:():boolean (c)] (LINE:1909)\l}"];
Node_30 [shape=record,label="{30\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0011 \l}"];
Node_31 [shape=record,label="{31\:\ 0x000f|0x000f: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0010: GOTO  \-\> 0x0012 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0012|TryCatch #0 \{all \-\> 0x003a, blocks: (B:27:0x0003, B:29:0x0009, B:33:0x0012, B:39:0x0038, B:38:0x001f), top: B:44:0x0003 \}\lCatch: all \-\> 0x003a\l|0x0012: IGET  (r4 I:java.util.ArrayList\<androidx.fragment.app.FragmentManager$OpGenerator\>) = (r5 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mPendingActions java.util.ArrayList A[Catch: all \-\> 0x003a] (LINE:1910)\l0x0014: INVOKE  (r4 I:int) = (r4 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[Catch: all \-\> 0x003a, MD:():int (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0018|0x0018: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x001b \l}"];
Node_35 [shape=record,label="{35\:\ 0x001a|0x001a: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x001b|0x001b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('postponeReady' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x001f  (LINE:1911)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pendingReady' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0038 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0038|TryCatch #0 \{all \-\> 0x003a, blocks: (B:27:0x0003, B:29:0x0009, B:33:0x0012, B:39:0x0038, B:38:0x001f), top: B:44:0x0003 \}\lCatch: all \-\> 0x003a\l|0x0038: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x003a] (LINE:1916)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0039|RETURN\l|0x0039: RETURN    (LINE:1917)\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_38 [shape=record,label="{38\:\ 0x001f|TryCatch #0 \{all \-\> 0x003a, blocks: (B:27:0x0003, B:29:0x0009, B:33:0x0012, B:39:0x0038, B:38:0x001f), top: B:44:0x0003 \}\lCatch: all \-\> 0x003a\l|0x001f: IGET  (r3 I:androidx.fragment.app.FragmentHostCallback\<?\>) = (r5 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mHost androidx.fragment.app.FragmentHostCallback A[Catch: all \-\> 0x003a] (LINE:1912)\l0x0021: INVOKE  (r3 I:android.os.Handler) = (r3 I:androidx.fragment.app.FragmentHostCallback) type: VIRTUAL call: androidx.fragment.app.FragmentHostCallback.getHandler():android.os.Handler A[Catch: all \-\> 0x003a, MD:():android.os.Handler (m)]\l0x0025: IGET  (r4 I:java.lang.Runnable) = (r5 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mExecCommit java.lang.Runnable A[Catch: all \-\> 0x003a]\l0x0027: INVOKE  (r3 I:android.os.Handler), (r4 I:java.lang.Runnable) type: VIRTUAL call: android.os.Handler.removeCallbacks(java.lang.Runnable):void A[Catch: all \-\> 0x003a, MD:(java.lang.Runnable):void (c)]\l0x002a: IGET  (r3 I:androidx.fragment.app.FragmentHostCallback\<?\>) = (r5 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mHost androidx.fragment.app.FragmentHostCallback A[Catch: all \-\> 0x003a] (LINE:1913)\l0x002c: INVOKE  (r3 I:android.os.Handler) = (r3 I:androidx.fragment.app.FragmentHostCallback) type: VIRTUAL call: androidx.fragment.app.FragmentHostCallback.getHandler():android.os.Handler A[Catch: all \-\> 0x003a, MD:():android.os.Handler (m)]\l0x0030: IGET  (r4 I:java.lang.Runnable) = (r5 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mExecCommit java.lang.Runnable A[Catch: all \-\> 0x003a]\l0x0032: INVOKE  (r3 I:android.os.Handler), (r4 I:java.lang.Runnable) type: VIRTUAL call: android.os.Handler.post(java.lang.Runnable):boolean A[Catch: all \-\> 0x003a, MD:(java.lang.Runnable):boolean (c)]\l0x0035: INVOKE  (r5 I:androidx.fragment.app.FragmentManager) type: DIRECT call: androidx.fragment.app.FragmentManager.updateOnBackPressedCallbackEnabled():void A[Catch: all \-\> 0x003a, MD:():void (m)] (LINE:1914)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x003a|ExcHandler: all \-\> 0x003a\l|0x003a: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x003a] (LINE:1916)\l}"];
Node_42 [shape=record,label="{42\:\ 0x003b|TRY_LEAVE\lCatch: all \-\> 0x003a\l}"];
Node_43 [shape=record,label="{43\:\ 0x003c|0x003c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{void androidx.fragment.app.FragmentManager.scheduleCommit((r5 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x003c \-\> B:24:?, CROSS_EDGE: B:37:0x001d \-\> B:39:0x0038, CROSS_EDGE: B:36:0x001b \-\> B:38:0x001f, CROSS_EDGE: B:34:0x0018 \-\> B:36:0x001b, CROSS_EDGE: B:32:0x0011 \-\> B:33:0x0012, CROSS_EDGE: B:28:0x0007 \-\> B:32:0x0011, CROSS_EDGE: B:44:0x0003 \-\> B:41:0x003a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0038: r1 'postponeReady' Z\l  0x001b\-0x0038: r2 'pendingReady' Z\lTryCatch #0 \{all \-\> 0x003a, blocks: (B:27:0x0003, B:29:0x0009, B:33:0x0012, B:39:0x0038, B:38:0x001f), top: B:44:0x0003 \}\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_44;
Node_44 -> Node_27;
Node_44 -> Node_41;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_39 -> Node_40;
Node_39 -> Node_45;
Node_40 -> Node_24;
Node_45 -> Node_41;
Node_38 -> Node_39;
Node_32 -> Node_33;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_24;
}

