digraph "CFG forandroidx.fragment.app.FragmentManager.toString()Ljava\/lang\/String;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|java.lang.StringBuilder r0 = new java.lang.StringBuilder(128)\lr0.append(\"FragmentManager\{\")\lr0.append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(r5)))\lr0.append(\" in \")\landroidx.fragment.app.Fragment r1 = r5.mParent\l}"];
Node_14 [shape=record,label="{14\:\ 0x0022|if (r1 == null) goto L7\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|java.lang.Class r1 = r1.getClass()\lr0.append(r1.getSimpleName())\lr0.append(\"\{\")\lr0.append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(r5.mParent)))\lr0.append(\"\}\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x006b|r0.append(\"\}\}\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x0074|RETURN\l|return r0.toString()\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|androidx.fragment.app.FragmentHostCallback\<?\> r1 = r5.mHost\l}"];
Node_17 [shape=record,label="{17\:\ 0x0045|if (r1 == null) goto L10\l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|java.lang.Class r1 = r1.getClass()\lr0.append(r1.getSimpleName())\lr0.append(\"\{\")\lr0.append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(r5.mHost)))\lr0.append(\"\}\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x0066|r0.append(\"null\")\l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.fragment.app.FragmentManager.toString((r5v0 'this' androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0047 \-\> B:20:0x006b, CROSS_EDGE: B:19:0x0066 \-\> B:20:0x006b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
}

