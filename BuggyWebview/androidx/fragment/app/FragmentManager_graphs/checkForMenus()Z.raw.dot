digraph "CFG forandroidx.fragment.app.FragmentManager.checkForMenus()Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3446)\l0x0001: IGET  (r1 I:androidx.fragment.app.FragmentStore) = (r3 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mFragmentStore androidx.fragment.app.FragmentStore  (LINE:3447)\l0x0003: INVOKE  (r1 I:java.util.List) = (r1 I:androidx.fragment.app.FragmentStore) type: VIRTUAL call: androidx.fragment.app.FragmentStore.getActiveFragments():java.util.List A[MD:():java.util.List\<androidx.fragment.app.Fragment\> (m)]\l0x0007: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.List) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|LOOP_START\lLOOP:0: B:21:0x000b\-\>B:26:0x001d\l|0x000b: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0022 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0015: CHECK_CAST (r2 I:androidx.fragment.app.Fragment) = (androidx.fragment.app.Fragment) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fragment' androidx.fragment.app.Fragment)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001d  (LINE:3448)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|0x0019: INVOKE  (r0 I:boolean A[D('hasMenu' boolean)]) = \l  (r3 I:androidx.fragment.app.FragmentManager)\l  (r2 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment)])\l type: DIRECT call: androidx.fragment.app.FragmentManager.isMenuAvailable(androidx.fragment.app.Fragment):boolean A[MD:(androidx.fragment.app.Fragment):boolean (m)] (LINE:3449)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|LOOP_END\lLOOP:0: B:21:0x000b\-\>B:26:0x001d\l|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasMenu' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000b  (LINE:3451)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001f|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|RETURN\l|0x001f: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:3452)\l0x0020: RETURN  (r1 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0022|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|RETURN\l|0x0022: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3455)\l0x0023: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean androidx.fragment.app.FragmentManager.checkForMenus((r3 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x001d \-\> B:21:0x000b, CROSS_EDGE: B:24:0x0017 \-\> B:26:0x001d, CROSS_EDGE: B:31:0x0023 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x0021: r2 'fragment' Landroidx\/fragment\/app\/Fragment;\l  0x0001\-0x0023: r0 'hasMenu' Z\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_35;
Node_25 -> Node_34;
Node_34 -> Node_26;
Node_26 -> Node_21;
Node_26 -> Node_32[style=dashed];
Node_32 -> Node_27;
Node_27 -> Node_19;
Node_35 -> Node_26;
Node_33 -> Node_30;
Node_30 -> Node_19;
}

