digraph "CFG forandroidx.fragment.app.FragmentManager.dispatchOptionsMenuClosed(Landroid\/view\/Menu;)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mCurState int  (LINE:3249)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|0x0003: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:23:0x0006 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:3250)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: IGET  (r0 I:androidx.fragment.app.FragmentStore) = (r2 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mFragmentStore androidx.fragment.app.FragmentStore  (LINE:3252)\l0x0008: INVOKE  (r0 I:java.util.List) = (r0 I:androidx.fragment.app.FragmentStore) type: VIRTUAL call: androidx.fragment.app.FragmentStore.getFragments():java.util.List A[MD:():java.util.List\<androidx.fragment.app.Fragment\> (m)]\l0x000c: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|LOOP_START\lLOOP:0: B:24:0x0010\-\>B:33:0x0010\l|0x0010: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0022 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001a: CHECK_CAST (r1 I:androidx.fragment.app.Fragment) = (androidx.fragment.app.Fragment) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001c|0x001c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('f' androidx.fragment.app.Fragment)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0010  (LINE:3253)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001e|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|0x001e: INVOKE  \l  (r1 I:androidx.fragment.app.Fragment A[D('f' androidx.fragment.app.Fragment)])\l  (r3 I:android.view.Menu A[D('menu' android.view.Menu)])\l type: VIRTUAL call: androidx.fragment.app.Fragment.performOptionsMenuClosed(android.view.Menu):void A[MD:(android.view.Menu):void (m)] (LINE:3254)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0010|LOOP_END\lSYNTHETIC\lLOOP:0: B:24:0x0010\-\>B:33:0x0010\l}"];
Node_34 [shape=record,label="{34\:\ 0x0010|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0022|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|RETURN\l|0x0022: RETURN    (LINE:3257)\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.dispatchOptionsMenuClosed((r2 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.Menu A[D('menu' android.view.Menu), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x001e \-\> B:24:0x0010, BACK_EDGE: B:27:0x001c \-\> B:24:0x0010, CROSS_EDGE: B:30:0x0022 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x0021: r1 'f' Landroidx\/fragment\/app\/Fragment;\l  \-1 \-0x0022: r3 'menu' Landroid\/view\/Menu;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_32[style=dashed];
Node_27 -> Node_34;
Node_32 -> Node_28;
Node_28 -> Node_35;
Node_35 -> Node_33;
Node_33 -> Node_24;
Node_34 -> Node_33;
Node_31 -> Node_30;
Node_30 -> Node_19;
}

