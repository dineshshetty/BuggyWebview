digraph "CFG forandroidx.fragment.app.FragmentManager.performPendingDeferredStart(Landroidx\/fragment\/app\/FragmentStateManager;)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|androidx.fragment.app.Fragment r0 = r3.getFragment()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|if (r0.mDeferStart == false) goto L14\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008}"];
Node_20 [shape=record,label="{20\:\ 0x000a|if (r2.mExecutingActions == false) goto L8\l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|r2.mHavePendingDeferredStart = true\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|r0.mDeferStart = false\l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|if (androidx.fragment.app.FragmentManager.USE_STATE_MANAGER == false) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|r3.moveToExpectedState()\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|moveToState(r0)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|RETURN\lORIG_RETURN\l|return\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.performPendingDeferredStart((r2v0 'this' androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r3v0 'fragmentStateManager' androidx.fragment.app.FragmentStateManager A[D('fragmentStateManager' androidx.fragment.app.FragmentStateManager), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001e \-\> B:16:?, CROSS_EDGE: B:26:0x001b \-\> B:27:0x001e, CROSS_EDGE: B:18:0x0006 \-\> B:27:0x001e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_16;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_29;
Node_29 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_28 -> Node_16;
}

