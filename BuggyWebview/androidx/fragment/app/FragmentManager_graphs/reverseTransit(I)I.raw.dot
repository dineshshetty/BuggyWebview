digraph "CFG forandroidx.fragment.app.FragmentManager.reverseTransit(I)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3469)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0001|0x0001: SWITCH  (r1 I:?? A[D('transit' int)])\l case 4097: goto B:19:0x000b\l case 4099: goto B:18:0x0008\l case 8194: goto B:17:0x0005\l default: goto B:23:?  (LINE:3470)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|SYNTHETIC\lRETURN\l|0x0005: CONST  (r0 I:??[int, float, short, byte, char] A[D('rev' int)]) = (4097(0x1001, float:5.741E\-42) ??[int, float, short, byte, char])  (LINE:3475)\l0x000e: RETURN  (r0 I:int A[D('rev' int)]) A[SYNTHETIC] (LINE:3481)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|SYNTHETIC\lRETURN\l|0x0008: CONST  (r0 I:??[int, float, short, byte, char] A[D('rev' int)]) = (4099(0x1003, float:5.744E\-42) ??[int, float, short, byte, char])  (LINE:3478)\l0x000e: RETURN  (r0 I:int A[D('rev' int)]) A[SYNTHETIC] (LINE:3481)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|RETURN\lORIG_RETURN\l|0x000b: CONST  (r0 I:??[int, float, short, byte, char] A[D('rev' int)]) = (8194(0x2002, float:1.1482E\-41) ??[int, float, short, byte, char])  (LINE:3472)\l0x000e: RETURN  (r0 I:int A[D('rev' int)])  (LINE:3481)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x000e: RETURN  (r0 I:int A[D('rev' int)]) A[SYNTHETIC] (LINE:3481)\l}"];
MethodNode[shape=record,label="{public static int androidx.fragment.app.FragmentManager.reverseTransit((r1 I:int A[D('transit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0008 \-\> B:20:0x000e, CROSS_EDGE: B:19:0x000b \-\> B:20:0x000e, CROSS_EDGE: B:15:0x0001 \-\> B:20:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x001d: r0 'rev' I\l  \-1 \-0x001d: r1 'transit' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_18;
Node_15 -> Node_19;
Node_15 -> Node_23;
Node_17 -> Node_13;
Node_18 -> Node_13;
Node_19 -> Node_13;
Node_23 -> Node_13;
}

