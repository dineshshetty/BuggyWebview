digraph "CFG forandroidx.fragment.app.FragmentManager.removeOnBackStackChangedListener(Landroidx\/fragment\/app\/FragmentManager$OnBackStackChangedListener;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:java.util.ArrayList\<androidx.fragment.app.FragmentManager$OnBackStackChangedListener\>) = (r1 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mBackStackChangeListeners java.util.ArrayList  (LINE:824)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: INVOKE  \l  (r0 I:java.util.ArrayList)\l  (r2 I:java.lang.Object A[D('listener' androidx.fragment.app.FragmentManager$OnBackStackChangedListener)])\l type: VIRTUAL call: java.util.ArrayList.remove(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:825)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|RETURN\lORIG_RETURN\l|0x0007: RETURN    (LINE:827)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0007: RETURN   A[SYNTHETIC] (LINE:827)\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.removeOnBackStackChangedListener((r1 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r2 I:androidx.fragment.app.FragmentManager$OnBackStackChangedListener A[D('listener' androidx.fragment.app.FragmentManager$OnBackStackChangedListener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r2 'listener' Landroidx\/fragment\/app\/FragmentManager$OnBackStackChangedListener;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

