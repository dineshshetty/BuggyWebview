digraph "CFG forandroidx.fragment.app.FragmentManager.makeRemovedFragmentsInvisible(Landroidx\/collection\/ArraySet;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|int r0 = r6.size()\lr1 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|LOOP_START\lLOOP:0: B:15:0x0005\-\>B:19:0x001f\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:14:0x0000, B:19:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L9\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|androidx.fragment.app.Fragment r2 = r6.valueAt(r1)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|if (r2.mAdded != false) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|android.view.View r3 = r2.requireView()\lr2.mPostponedAlpha = r3.getAlpha()\lr3.setAlpha(0.0f)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|LOOP_END\lLOOP:0: B:15:0x0005\-\>B:19:0x001f\l|int r1 = r1 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x001f|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0022|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.fragment.app.FragmentManager.makeRemovedFragmentsInvisible((r5v0 'this' androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r6v0 'fragments' androidx.collection.ArraySet\<androidx.fragment.app.Fragment\> A[D('fragments' androidx.collection.ArraySet\<androidx.fragment.app.Fragment\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x001f \-\> B:15:0x0005, CROSS_EDGE: B:17:0x000f \-\> B:19:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroidx\/collection\/ArraySet\<Landroidx\/fragment\/app\/Fragment;\>;)V\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_22;
Node_22 -> Node_19;
Node_19 -> Node_15;
Node_23 -> Node_19;
Node_21 -> Node_20;
Node_20 -> Node_13;
}

