digraph "CFG forandroidx.fragment.app.FragmentManager.findFragmentManager(Landroid\/view\/View;)Landroidx\/fragment\/app\/FragmentManager;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|androidx.fragment.app.Fragment r0 = findViewFragment(r6)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|if (r0 == null) goto L10\l}"];
Node_28 [shape=record,label="{28\:\ 0x0006}"];
Node_29 [shape=record,label="{29\:\ 0x000a|if (r0.isAdded() == false) goto L8\l}"];
Node_30 [shape=record,label="{30\:\ 0x000c|androidx.fragment.app.FragmentManager r1 = r0.getChildFragmentManager()\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0011|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"The Fragment \")\lr2.append(r0)\lr2.append(\" that owns View \")\lr2.append(r6)\lr2.append(\" has already been destroyed. Nested fragments should always use the child FragmentManager.\")\l}"];
Node_32 [shape=record,label="{32\:\ 0x0034|throw new java.lang.IllegalStateException(r2.toString())\l}"];
Node_33 [shape=record,label="{33\:\ 0x0035|android.content.Context r1 = r6.getContext()\lr2 = null\l}"];
Node_34 [shape=record,label="{34\:\ 0x003a|LOOP_START\lLOOP:0: B:34:0x003a\-\>B:39:0x0046\lPHI: r1 \l  PHI: (r1v1 'context' android.content.Context) = (r1v0 'context' android.content.Context), (r1v3 'context' android.content.Context) binds: [B:33:0x0035, B:39:0x0046] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x003c|if ((r1 instanceof android.content.ContextWrapper) == false) goto L23\l}"];
Node_36 [shape=record,label="{36\:\ 0x003e}"];
Node_37 [shape=record,label="{37\:\ 0x0040|if ((r1 instanceof androidx.fragment.app.FragmentActivity) == false) goto L15\l}"];
Node_39 [shape=record,label="{39\:\ 0x0046|LOOP_END\lLOOP:0: B:34:0x003a\-\>B:39:0x0046\l|android.content.Context r1 = ((android.content.ContextWrapper) r1).getBaseContext()\l}"];
Node_45 [shape=record,label="{45\:\ 0x0042|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0042|androidx.fragment.app.FragmentActivity r2 = (androidx.fragment.app.FragmentActivity) r1\l}"];
Node_40 [shape=record,label="{40\:\ 0x004e|PHI: r2 \l  PHI: (r2v1 'fragmentActivity' androidx.fragment.app.FragmentActivity) = (r2v0 'fragmentActivity' androidx.fragment.app.FragmentActivity), (r2v3 'fragmentActivity' androidx.fragment.app.FragmentActivity) binds: [B:46:0x004e, B:38:0x0042] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == null) goto L21\l}"];
Node_41 [shape=record,label="{41\:\ 0x0050|androidx.fragment.app.FragmentManager r3 = r2.getSupportFragmentManager()\l}"];
Node_42 [shape=record,label="{42\:\ 0x0055|RETURN\lORIG_RETURN\l|return r3\l}"];
Node_43 [shape=record,label="{43\:\ 0x0056|java.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"View \")\lr4.append(r6)\lr4.append(\" is not within a subclass of FragmentActivity.\")\l}"];
Node_44 [shape=record,label="{44\:\ 0x0071|throw new java.lang.IllegalStateException(r4.toString())\l}"];
Node_46 [shape=record,label="{46\:\ 0x004e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{static androidx.fragment.app.FragmentManager androidx.fragment.app.FragmentManager.findFragmentManager((r6v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0034 \-\> B:25:?, CROSS_EDGE: B:41:0x0050 \-\> B:42:0x0055, CROSS_EDGE: B:44:0x0071 \-\> B:25:?, BACK_EDGE: B:39:0x0046 \-\> B:34:0x003a, CROSS_EDGE: B:35:0x003c \-\> B:40:0x004e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_33;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_47;
Node_47 -> Node_25;
Node_31 -> Node_32;
Node_32 -> Node_25;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_46;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_45[style=dashed];
Node_39 -> Node_34;
Node_45 -> Node_38;
Node_38 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_25;
Node_43 -> Node_44;
Node_44 -> Node_25;
Node_46 -> Node_40;
}

