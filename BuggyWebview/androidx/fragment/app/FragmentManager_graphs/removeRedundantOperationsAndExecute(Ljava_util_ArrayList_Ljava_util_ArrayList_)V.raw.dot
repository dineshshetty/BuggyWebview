digraph "CFG forandroidx.fragment.app.FragmentManager.removeRedundantOperationsAndExecute(Ljava\/util\/ArrayList;Ljava\/util\/ArrayList;)V" {
Node_35 [shape=record,label="{35\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)]) type: VIRTUAL call: java.util.ArrayList.isEmpty():boolean A[MD:():boolean (c)] (LINE:2070)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0007 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0006|RETURN\l|0x0006: RETURN    (LINE:2071)\l}"];
Node_36 [shape=record,label="{36\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)]) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)] (LINE:2074)\l0x000b: INVOKE  (r1 I:int) = (r8 I:java.util.ArrayList A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>)]) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0063 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0011|0x0011: INVOKE  \l  (r6 I:androidx.fragment.app.FragmentManager)\l  (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)])\l  (r8 I:java.util.ArrayList A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>)])\l type: DIRECT call: androidx.fragment.app.FragmentManager.executePostponedTransaction(java.util.ArrayList, java.util.ArrayList):void A[MD:(java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>, java.util.ArrayList\<java.lang.Boolean\>):void (m)] (LINE:2079)\l0x0014: INVOKE  (r0 I:int) = (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)]) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)] (LINE:2081)\l0x0018: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2082)\l0x0019: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2083)\l}"];
Node_43 [shape=record,label="{43\:\ 0x001a|LOOP_START\lLOOP:0: B:43:0x001a\-\>B:57:0x005a\l|0x001a: IF  (r2 I:??[int, byte, short, char] A[D('recordNum' int)]) \>= (r0 I:??[int, byte, short, char] A[D('numRecords' int)])  \-\> B:63:0x005d \l}"];
Node_44 [shape=record,label="{44\:\ 0x001c|0x001c: INVOKE  (r3 I:java.lang.Object) = \l  (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)])\l  (r2 I:int A[D('recordNum' int)])\l type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:2084)\l0x0020: CHECK_CAST (r3 I:androidx.fragment.app.BackStackRecord) = (androidx.fragment.app.BackStackRecord) (r3 I:??[OBJECT, ARRAY]) \l0x0022: IGET  (r3 I:boolean) = (r3 I:androidx.fragment.app.BackStackRecord) androidx.fragment.app.BackStackRecord.mReorderingAllowed boolean \l}"];
Node_45 [shape=record,label="{45\:\ 0x0024|0x0024: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('canReorder' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x005a  (LINE:2085)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startIndex' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('recordNum' int)])  \-\> B:48:0x002b  (LINE:2087)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0028|0x0028: INVOKE  \l  (r6 I:androidx.fragment.app.FragmentManager)\l  (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)])\l  (r8 I:java.util.ArrayList A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>)])\l  (r1 I:int A[D('startIndex' int)])\l  (r2 I:int A[D('recordNum' int)])\l type: DIRECT call: androidx.fragment.app.FragmentManager.executeOpsTogether(java.util.ArrayList, java.util.ArrayList, int, int):void A[MD:(java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>, java.util.ArrayList\<java.lang.Boolean\>, int, int):void (m)] (LINE:2088)\l}"];
Node_48 [shape=record,label="{48\:\ 0x002b|0x002b: ARITH  (r4 I:int) = (r2 I:int A[D('recordNum' int)]) + (1 int)  (LINE:2092)\l0x002d: INVOKE  (r5 I:java.lang.Object) = (r8 I:java.util.ArrayList A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>)]), (r2 I:int A[D('recordNum' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:2093)\l0x0031: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0033: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0037|0x0037: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x0054 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0039|LOOP_START\lLOOP:1: B:50:0x0039\-\>B:55:0x0051\l|0x0039: IF  (r4 I:??[int, byte, short, char] A[D('reorderingEnd' int)]) \>= (r0 I:??[int, byte, short, char] A[D('numRecords' int)])  \-\> B:67:0x0054  (LINE:2094)\l}"];
Node_51 [shape=record,label="{51\:\ 0x003b|0x003b: INVOKE  (r5 I:java.lang.Object) = \l  (r8 I:java.util.ArrayList A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>)])\l  (r4 I:int A[D('reorderingEnd' int)])\l type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:2095)\l0x003f: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0041: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x0045|0x0045: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0054 \l}"];
Node_53 [shape=record,label="{53\:\ 0x0047|0x0047: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)])\l  (r4 I:int A[D('reorderingEnd' int)])\l type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:2096)\l0x004b: CHECK_CAST (r5 I:androidx.fragment.app.BackStackRecord) = (androidx.fragment.app.BackStackRecord) (r5 I:??[OBJECT, ARRAY]) \l0x004d: IGET  (r5 I:boolean) = (r5 I:androidx.fragment.app.BackStackRecord) androidx.fragment.app.BackStackRecord.mReorderingAllowed boolean \l}"];
Node_54 [shape=record,label="{54\:\ 0x004f|0x004f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0054 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0051|LOOP_END\lLOOP:1: B:50:0x0039\-\>B:55:0x0051\l|0x0051: ARITH  (r4 I:int) = (r4 I:int A[D('reorderingEnd' int)]) + (1 int)  (LINE:2097)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0054|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0054|SYNTHETIC\l}"];
Node_67 [shape=record,label="{67\:\ 0x0054|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0054|0x0054: INVOKE  \l  (r6 I:androidx.fragment.app.FragmentManager)\l  (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)])\l  (r8 I:java.util.ArrayList A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>)])\l  (r2 I:int A[D('recordNum' int)])\l  (r4 I:int A[D('reorderingEnd' int)])\l type: DIRECT call: androidx.fragment.app.FragmentManager.executeOpsTogether(java.util.ArrayList, java.util.ArrayList, int, int):void A[MD:(java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>, java.util.ArrayList\<java.lang.Boolean\>, int, int):void (m)] (LINE:2100)\l0x0057: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex' int)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('reorderingEnd' int)])  (LINE:2101)\l0x0058: ARITH  (r2 I:int A[D('recordNum' int)]) = (r4 I:int A[D('reorderingEnd' int)]) + (\-1 int)  (LINE:2102)\l}"];
Node_64 [shape=record,label="{64\:\ 0x005a|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x005a|LOOP_END\lLOOP:0: B:43:0x001a\-\>B:57:0x005a\l|0x005a: ARITH  (r2 I:int) = (r2 I:int A[D('recordNum' int)]) + (1 int)  (LINE:2083)\l}"];
Node_65 [shape=record,label="{65\:\ 0x005a|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x005d|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x005d|0x005d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startIndex' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('numRecords' int)])  \-\> B:69:?  (LINE:2105)\l}"];
Node_59 [shape=record,label="{59\:\ 0x005f|0x005f: INVOKE  \l  (r6 I:androidx.fragment.app.FragmentManager)\l  (r7 I:java.util.ArrayList A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>)])\l  (r8 I:java.util.ArrayList A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>)])\l  (r1 I:int A[D('startIndex' int)])\l  (r0 I:int A[D('numRecords' int)])\l type: DIRECT call: androidx.fragment.app.FragmentManager.executeOpsTogether(java.util.ArrayList, java.util.ArrayList, int, int):void A[MD:(java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>, java.util.ArrayList\<java.lang.Boolean\>, int, int):void (m)] (LINE:2106)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0062|RETURN\lORIG_RETURN\l|0x0062: RETURN    (LINE:2108)\l}"];
Node_69 [shape=record,label="{69\:\ ?|SYNTHETIC\lRETURN\l|0x0062: RETURN   A[SYNTHETIC] (LINE:2108)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0063|0x0063: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('numRecords' int)]) =  java.lang.IllegalStateException  (LINE:2075)\l0x0065: CONST_STR  (r1 I:java.lang.String) =  \"Internal error with the back stack records\" \l0x0067: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x006a|0x006a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void androidx.fragment.app.FragmentManager.removeRedundantOperationsAndExecute((r6 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.ArrayList\<androidx.fragment.app.BackStackRecord\> A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.ArrayList\<java.lang.Boolean\> A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:55:0x0051 \-\> B:50:0x0039, BACK_EDGE: B:57:0x005a \-\> B:43:0x001a, CROSS_EDGE: B:52:0x0045 \-\> B:56:0x0054, CROSS_EDGE: B:50:0x0039 \-\> B:56:0x0054, CROSS_EDGE: B:49:0x0037 \-\> B:56:0x0054, CROSS_EDGE: B:46:0x0026 \-\> B:48:0x002b, CROSS_EDGE: B:45:0x0024 \-\> B:57:0x005a, CROSS_EDGE: B:60:0x0062 \-\> B:36:?, CROSS_EDGE: B:58:0x005d \-\> B:60:0x0062, CROSS_EDGE: B:62:0x006a \-\> B:36:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x005a: r3 'canReorder' Z\l  0x002d\-0x005a: r4 'reorderingEnd' I\l  0x001a\-0x005d: r2 'recordNum' I\l  0x0018\-0x0063: r0 'numRecords' I\l  0x0019\-0x0063: r1 'startIndex' I\l  0x0000\-0x006a: r7 'records' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Landroidx\/fragment\/app\/BackStackRecord;\>;\l  0x0000\-0x006a: r8 'isRecordPop' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Ljava\/lang\/Boolean;\>;\lSIGNATURE: (Ljava\/util\/ArrayList\<Landroidx\/fragment\/app\/BackStackRecord;\>;Ljava\/util\/ArrayList\<Ljava\/lang\/Boolean;\>;)V\l}"];
MethodNode -> Node_35;Node_35 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_36;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_61;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_63;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_65;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_56;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_67;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_66;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_68;
Node_55 -> Node_50;
Node_68 -> Node_56;
Node_66 -> Node_56;
Node_67 -> Node_56;
Node_56 -> Node_64;
Node_64 -> Node_57;
Node_57 -> Node_43;
Node_65 -> Node_57;
Node_63 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_69;
Node_59 -> Node_60;
Node_60 -> Node_36;
Node_69 -> Node_36;
Node_61 -> Node_62;
Node_62 -> Node_36;
}

