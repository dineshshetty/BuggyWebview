digraph "CFG forandroidx.fragment.app.FragmentManager.isPrimaryNavigation(Landroidx\/fragment\/app\/Fragment;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:630)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0001|0x0001: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('parent' androidx.fragment.app.Fragment)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0004 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean)  (LINE:631)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: IGET  (r1 I:androidx.fragment.app.FragmentManager) = (r5 I:androidx.fragment.app.Fragment A[D('parent' androidx.fragment.app.Fragment)]) androidx.fragment.app.Fragment.mFragmentManager androidx.fragment.app.FragmentManager  (LINE:633)\l0x0007: INVOKE  (r2 I:androidx.fragment.app.Fragment) = (r1 I:androidx.fragment.app.FragmentManager A[D('parentFragmentManager' androidx.fragment.app.FragmentManager)]) type: VIRTUAL call: androidx.fragment.app.FragmentManager.getPrimaryNavigationFragment():androidx.fragment.app.Fragment A[MD:():androidx.fragment.app.Fragment (m)] (LINE:635)\l0x000b: INVOKE  (r3 I:boolean) = \l  (r5 I:androidx.fragment.app.Fragment A[D('parent' androidx.fragment.app.Fragment)])\l  (r2 I:java.lang.Object A[D('primaryNavigationFragment' androidx.fragment.app.Fragment)])\l type: VIRTUAL call: androidx.fragment.app.Fragment.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)] (LINE:639)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: IGET  (r3 I:androidx.fragment.app.Fragment) = (r1 I:androidx.fragment.app.FragmentManager A[D('parentFragmentManager' androidx.fragment.app.FragmentManager)]) androidx.fragment.app.FragmentManager.mParent androidx.fragment.app.Fragment \l0x0013: INVOKE  (r3 I:boolean) = (r4 I:androidx.fragment.app.FragmentManager), (r3 I:androidx.fragment.app.Fragment) type: VIRTUAL call: androidx.fragment.app.FragmentManager.isPrimaryNavigation(androidx.fragment.app.Fragment):boolean A[MD:(androidx.fragment.app.Fragment):boolean (m)] (LINE:640)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001a \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:639)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: RETURN  (r0 I:boolean)  (LINE:639)\l}"];
MethodNode[shape=record,label="{public boolean androidx.fragment.app.FragmentManager.isPrimaryNavigation((r4 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r5 I:androidx.fragment.app.Fragment A[D('parent' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x001b \-\> B:14:?, CROSS_EDGE: B:21:0x0017 \-\> B:24:0x001b, CROSS_EDGE: B:19:0x000f \-\> B:23:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x001b: r1 'parentFragmentManager' Landroidx\/fragment\/app\/FragmentManager;\l  0x000b\-0x001b: r2 'primaryNavigationFragment' Landroidx\/fragment\/app\/Fragment;\l  \-1 \-0x001b: r5 'parent' Landroidx\/fragment\/app\/Fragment;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_25[style=dashed];
Node_25 -> Node_14;
Node_23 -> Node_14;
}

