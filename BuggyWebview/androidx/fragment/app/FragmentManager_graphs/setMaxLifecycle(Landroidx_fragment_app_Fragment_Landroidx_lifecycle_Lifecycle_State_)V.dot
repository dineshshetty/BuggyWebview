digraph "CFG forandroidx.fragment.app.FragmentManager.setMaxLifecycle(Landroidx\/fragment\/app\/Fragment;Landroidx\/lifecycle\/Lifecycle$State;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x000a|if (r4.equals(findActiveFragment(r4.mWho)) == false) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c}"];
Node_17 [shape=record,label="{17\:\ 0x000e|if (r4.mHost == null) goto L7\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010}"];
Node_19 [shape=record,label="{19\:\ 0x0012|if (r4.mFragmentManager != r3) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|r4.mMaxState = r5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0017|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Fragment \")\lr1.append(r4)\lr1.append(\" is not an active fragment of FragmentManager \")\lr1.append(r3)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0035|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.setMaxLifecycle((r3v0 'this' androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r4v0 'f' androidx.fragment.app.Fragment A[D('f' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'state' androidx.lifecycle.Lifecycle$State A[D('state' androidx.lifecycle.Lifecycle$State), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0035 \-\> B:13:?, CROSS_EDGE: B:17:0x000e \-\> B:20:0x0014, CROSS_EDGE: B:15:0x000a \-\> B:22:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

