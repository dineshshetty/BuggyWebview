digraph "CFG forandroidx.fragment.app.FragmentManager.updateOnBackPressedCallbackEnabled()V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: IGET  (r0 I:java.util.ArrayList\<androidx.fragment.app.FragmentManager$OpGenerator\>) = (r3 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mPendingActions java.util.ArrayList  (LINE:609)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_26 [shape=record,label="{26\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002a, blocks: (B:26:0x0003, B:28:0x000c, B:29:0x0011, B:31:0x0013), top: B:43:0x0003 \}\lCatch: all \-\> 0x002a\l|0x0003: IGET  (r1 I:java.util.ArrayList\<androidx.fragment.app.FragmentManager$OpGenerator\>) = (r3 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mPendingActions java.util.ArrayList A[Catch: all \-\> 0x002a, TRY_ENTER] (LINE:610)\l0x0005: INVOKE  (r1 I:boolean) = (r1 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.isEmpty():boolean A[Catch: all \-\> 0x002a, MD:():boolean (c)]\l0x0009: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0013 \l}"];
Node_28 [shape=record,label="{28\:\ 0x000c|TryCatch #0 \{all \-\> 0x002a, blocks: (B:26:0x0003, B:28:0x000c, B:29:0x0011, B:31:0x0013), top: B:43:0x0003 \}\lCatch: all \-\> 0x002a\l|0x000c: IGET  (r1 I:androidx.activity.OnBackPressedCallback) = (r3 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mOnBackPressedCallback androidx.activity.OnBackPressedCallback A[Catch: all \-\> 0x002a] (LINE:611)\l0x000e: INVOKE  (r1 I:androidx.activity.OnBackPressedCallback), (r2 I:boolean) type: VIRTUAL call: androidx.activity.OnBackPressedCallback.setEnabled(boolean):void A[Catch: all \-\> 0x002a, MD:(boolean):void (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0011|TryCatch #0 \{all \-\> 0x002a, blocks: (B:26:0x0003, B:28:0x000c, B:29:0x0011, B:31:0x0013), top: B:43:0x0003 \}\lCatch: all \-\> 0x002a\l|0x0011: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x002a] (LINE:612)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0012|RETURN\l|0x0012: RETURN   \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0013|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x002a, blocks: (B:26:0x0003, B:28:0x000c, B:29:0x0011, B:31:0x0013), top: B:43:0x0003 \}\lCatch: all \-\> 0x002a\l|0x0013: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x002a, TRY_LEAVE] (LINE:614)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|0x0014: IGET  (r0 I:androidx.activity.OnBackPressedCallback) = (r3 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mOnBackPressedCallback androidx.activity.OnBackPressedCallback  (LINE:618)\l0x0016: INVOKE  (r1 I:int) = (r3 I:androidx.fragment.app.FragmentManager) type: VIRTUAL call: androidx.fragment.app.FragmentManager.getBackStackEntryCount():int A[MD:():int (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|0x001a: IF  (r1 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:37:0x0025 \l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|0x001c: IGET  (r1 I:androidx.fragment.app.Fragment) = (r3 I:androidx.fragment.app.FragmentManager) androidx.fragment.app.FragmentManager.mParent androidx.fragment.app.Fragment \l0x001e: INVOKE  (r1 I:boolean) = (r3 I:androidx.fragment.app.FragmentManager), (r1 I:androidx.fragment.app.Fragment) type: VIRTUAL call: androidx.fragment.app.FragmentManager.isPrimaryNavigation(androidx.fragment.app.Fragment):boolean A[MD:(androidx.fragment.app.Fragment):boolean (m)] (LINE:619)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0022: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0025 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0026|0x0026: INVOKE  (r0 I:androidx.activity.OnBackPressedCallback), (r2 I:boolean) type: VIRTUAL call: androidx.activity.OnBackPressedCallback.setEnabled(boolean):void A[MD:(boolean):void (m)] (LINE:618)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|RETURN\l|0x0029: RETURN    (LINE:620)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0025|0x0025: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x002a|ExcHandler: all \-\> 0x002a\l|0x002a: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x002a] (LINE:614)\l}"];
Node_41 [shape=record,label="{41\:\ 0x002b|TRY_ENTER\lTRY_LEAVE\lCatch: all \-\> 0x002a\l}"];
Node_42 [shape=record,label="{42\:\ 0x002c|0x002c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void androidx.fragment.app.FragmentManager.updateOnBackPressedCallbackEnabled((r3 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x0029 \-\> B:23:?, CROSS_EDGE: B:35:0x0022 \-\> B:38:0x0026, CROSS_EDGE: B:33:0x001a \-\> B:37:0x0025, CROSS_EDGE: B:42:0x002c \-\> B:23:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x002a, blocks: (B:26:0x0003, B:28:0x000c, B:29:0x0011, B:31:0x0013), top: B:43:0x0003 \}\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_43;
Node_43 -> Node_26;
Node_43 -> Node_40;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_23;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_37;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_38[style=dashed];
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_37 -> Node_38;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_23;
}

