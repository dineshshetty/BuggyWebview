digraph "CFG forandroidx.fragment.app.FragmentManager.putFragment(Landroid\/os\/Bundle;Ljava\/lang\/String;Landroidx\/fragment\/app\/Fragment;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:androidx.fragment.app.FragmentManager) = (r6 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment)]) androidx.fragment.app.Fragment.mFragmentManager androidx.fragment.app.FragmentManager  (LINE:936)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0022 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:937)\l0x0006: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0008: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x000b: CONST_STR  (r2 I:java.lang.String) =  \"Fragment \" \l0x000d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0010: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:java.lang.Object A[D('fragment' androidx.fragment.app.Fragment)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0013: CONST_STR  (r2 I:java.lang.String) =  \" is not currently in the FragmentManager\" \l0x0015: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0018: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001c: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l0x001f: INVOKE  (r3 I:androidx.fragment.app.FragmentManager), (r0 I:java.lang.RuntimeException) type: DIRECT call: androidx.fragment.app.FragmentManager.throwException(java.lang.RuntimeException):void A[MD:(java.lang.RuntimeException):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: IGET  (r0 I:java.lang.String) = (r6 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment)]) androidx.fragment.app.Fragment.mWho java.lang.String  (LINE:940)\l0x0024: INVOKE  \l  (r4 I:android.os.Bundle A[D('bundle' android.os.Bundle)])\l  (r5 I:java.lang.String A[D('key' java.lang.String)])\l  (r0 I:java.lang.String)\l type: VIRTUAL call: android.os.Bundle.putString(java.lang.String, java.lang.String):void A[MD:(java.lang.String, java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|RETURN\l|0x0027: RETURN    (LINE:941)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.putFragment((r3 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r4 I:android.os.Bundle A[D('bundle' android.os.Bundle), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0027: r4 'bundle' Landroid\/os\/Bundle;\l  \-1 \-0x0027: r5 'key' Ljava\/lang\/String;\l  \-1 \-0x0027: r6 'fragment' Landroidx\/fragment\/app\/Fragment;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

