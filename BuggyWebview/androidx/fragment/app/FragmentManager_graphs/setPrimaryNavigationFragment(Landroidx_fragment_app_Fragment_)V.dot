digraph "CFG forandroidx.fragment.app.FragmentManager.setPrimaryNavigationFragment(Landroidx\/fragment\/app\/Fragment;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|if (r4 == null) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002}"];
Node_18 [shape=record,label="{18\:\ 0x000c|if (r4.equals(findActiveFragment(r4.mWho)) == false) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e}"];
Node_20 [shape=record,label="{20\:\ 0x0010|if (r4.mHost == null) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012}"];
Node_22 [shape=record,label="{22\:\ 0x0014|if (r4.mFragmentManager != r3) goto L8\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Fragment \")\lr1.append(r4)\lr1.append(\" is not an active fragment of FragmentManager \")\lr1.append(r3)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0035|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0036|androidx.fragment.app.Fragment r0 = r3.mPrimaryNav\lr3.mPrimaryNav = r4\ldispatchParentPrimaryNavigationFragmentChanged(r0)\ldispatchParentPrimaryNavigationFragmentChanged(r3.mPrimaryNav)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0042|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.setPrimaryNavigationFragment((r3v0 'this' androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r4v0 'f' androidx.fragment.app.Fragment A[D('f' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0042 \-\> B:15:?, CROSS_EDGE: B:20:0x0010 \-\> B:26:0x0036, CROSS_EDGE: B:18:0x000c \-\> B:24:0x0017, CROSS_EDGE: B:16:0x0000 \-\> B:26:0x0036\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_26;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_26[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

