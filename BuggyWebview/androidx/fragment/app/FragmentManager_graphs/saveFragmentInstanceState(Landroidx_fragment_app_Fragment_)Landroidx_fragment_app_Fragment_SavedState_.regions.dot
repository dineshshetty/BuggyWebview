digraph "CFG forandroidx.fragment.app.FragmentManager.saveFragmentInstanceState(Landroidx\/fragment\/app\/Fragment;)Landroidx\/fragment\/app\/Fragment$SavedState;" {
subgraph cluster_Region_33822675 {
label = "R(3:1|(1:8)|6)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|androidx.fragment.app.FragmentStateManager androidx.fragment.app.FragmentStateManager r0 = r4.mFragmentStore.getFragmentStateManager(r5.mWho)\l}"];
subgraph cluster_IfRegion_1504361647 {
label = "IF [B:12:0x0008, B:14:0x0012] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0008|if (r0 == null) goto L8\l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|ADDED_TO_REGION\l|if (r0.getFragment().equals(r5) == false) goto L8\l}"];
subgraph cluster_Region_1317872251 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0014|throwException(new java.lang.IllegalStateException(\"Fragment \" + r5 + \" is not currently in the FragmentManager\"))\l}"];
}
}
Node_17 [shape=record,label="{17\:\ 0x0036|RETURN\l|return r0.saveInstanceState()\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000a}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0032}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.fragment.app.Fragment$SavedState androidx.fragment.app.FragmentManager.saveFragmentInstanceState((r4v0 'this' androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r5v0 'fragment' androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0012 \-\> B:16:0x0032, CROSS_EDGE: B:12:0x0008 \-\> B:15:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_17 -> Node_10;
Node_9 -> Node_11;
Node_13 -> Node_14;
Node_16 -> Node_17;
}

