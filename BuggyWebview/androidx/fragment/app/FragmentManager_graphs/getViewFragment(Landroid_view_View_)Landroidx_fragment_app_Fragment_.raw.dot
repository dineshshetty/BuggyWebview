digraph "CFG forandroidx.fragment.app.FragmentManager.getViewFragment(Landroid\/view\/View;)Landroidx\/fragment\/app\/Fragment;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:int) =  androidx.fragment.R.id.fragment_container_view_tag int  (LINE:1013)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r2 I:android.view.View A[D('view' android.view.View)]), (r0 I:int) type: VIRTUAL call: android.view.View.getTag(int):java.lang.Object A[MD:(int):java.lang.Object (c)]\l0x0006: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('tag' java.lang.Object)]) androidx.fragment.app.Fragment  (LINE:1014)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000e \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('tag' java.lang.Object)])  (LINE:1015)\l0x000b: CHECK_CAST (r1 I:androidx.fragment.app.Fragment) = (androidx.fragment.app.Fragment) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|RETURN\l|0x000d: RETURN  (r1 I:androidx.fragment.app.Fragment) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|RETURN\l|0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1017)\l0x000f: RETURN  (r1 I:androidx.fragment.app.Fragment) \l}"];
MethodNode[shape=record,label="{public static androidx.fragment.app.Fragment androidx.fragment.app.FragmentManager.getViewFragment((r2 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x000f: r0 'tag' Ljava\/lang\/Object;\l  \-1 \-0x000f: r2 'view' Landroid\/view\/View;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

