digraph "CFG forandroidx.fragment.app.FragmentManager.showFragment(Landroidx\/fragment\/app\/Fragment;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:1764)\l0x0001: INVOKE  (r0 I:boolean) = (r0 I:int) type: STATIC call: androidx.fragment.app.FragmentManager.isLoggingEnabled(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001d \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0009: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"show: \" \l0x000e: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0011: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.Object A[D('fragment' androidx.fragment.app.Fragment)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0014: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"FragmentManager\" \l0x001a: INVOKE  (r1 I:java.lang.String), (r0 I:java.lang.String) type: STATIC call: android.util.Log.v(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001d|0x001d: IGET  (r0 I:boolean) = (r3 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment)]) androidx.fragment.app.Fragment.mHidden boolean  (LINE:1765)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001f|0x001f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x0021|0x0021: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1766)\l0x0022: IPUT  (r0 I:boolean), (r3 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment)]) androidx.fragment.app.Fragment.mHidden boolean \l0x0024: IGET  (r0 I:boolean) = (r3 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment)]) androidx.fragment.app.Fragment.mHiddenChanged boolean  (LINE:1769)\l0x0026: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l0x0028: IPUT  (r0 I:boolean), (r3 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment)]) androidx.fragment.app.Fragment.mHiddenChanged boolean \l}"];
Node_18 [shape=record,label="{18\:\ 0x002a|RETURN\lORIG_RETURN\l|0x002a: RETURN    (LINE:1771)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x002a: RETURN   A[SYNTHETIC] (LINE:1771)\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.showFragment((r2 'this' I:androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r3 I:androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x001f \-\> B:18:0x002a, CROSS_EDGE: B:13:0x0005 \-\> B:15:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002a: r3 'fragment' Landroidx\/fragment\/app\/Fragment;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

