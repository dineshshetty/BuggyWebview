digraph "CFG forandroidx.fragment.app.FragmentManager.removeFragment(Landroidx\/fragment\/app\/Fragment;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0005|if (isLoggingEnabled(2) == false) goto L4\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"remove: \")\lr0.append(r4)\lr0.append(\" nesting=\")\lr0.append(r4.mBackStackNesting)\landroid.util.Log.v(androidx.fragment.app.FragmentManager.TAG, r0.toString())\l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|r0 = r4.isInBackStack() ^ true\l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|if (r4.mDetached == false) goto L9\l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|if (r0 == false) goto L7\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0033|r3.mFragmentStore.removeFragment(r4)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003c|if (isMenuAvailable(r4) == false) goto L12\l}"];
Node_24 [shape=record,label="{24\:\ 0x003e|r3.mNeedMenuInvalidate = true\l}"];
Node_25 [shape=record,label="{25\:\ 0x0040|r4.mRemoving = true\lsetVisibleRemovingFragment(r4)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0045|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentManager.removeFragment((r3v0 'this' androidx.fragment.app.FragmentManager A[IMMUTABLE_TYPE, THIS]), (r4v0 'fragment' androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x003c \-\> B:25:0x0040, CROSS_EDGE: B:21:0x0031 \-\> B:26:0x0045, CROSS_EDGE: B:20:0x002f \-\> B:22:0x0033, CROSS_EDGE: B:17:0x0005 \-\> B:19:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_27 -> Node_15;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_15;
}

