digraph "CFG forandroidx.fragment.app.FragmentTransitionCompat21.mergeTransitionsTogether(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|android.transition.TransitionSet r0 = new android.transition.TransitionSet()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|if (r3 == null) goto L4\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|r0.addTransition((android.transition.Transition) r3)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|if (r4 == null) goto L6\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|r0.addTransition((android.transition.Transition) r4)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|if (r5 == null) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x0017|r0.addTransition((android.transition.Transition) r5)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|RETURN\l|return r0\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.Object androidx.fragment.app.FragmentTransitionCompat21.mergeTransitionsTogether((r2v0 'this' androidx.fragment.app.FragmentTransitionCompat21 A[IMMUTABLE_TYPE, THIS]), (r3v0 'transition1' java.lang.Object A[D('transition1' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'transition2' java.lang.Object A[D('transition2' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'transition3' java.lang.Object A[D('transition3' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0015 \-\> B:19:0x001d, CROSS_EDGE: B:15:0x000d \-\> B:17:0x0015, CROSS_EDGE: B:13:0x0005 \-\> B:15:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.fragment.app.FragmentTransitionImpl.mergeTransitionsTogether(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

