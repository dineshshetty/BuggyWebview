digraph "CFG forandroidx.fragment.app.FragmentStore.getActiveFragments()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.ArrayList r0 = new java.util.ArrayList\<\>()\ljava.util.Iterator r1 = r4.mActive.values().iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|LOOP_START\lLOOP:0: B:3:0x000f\-\>B:14:0x000f\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|if (r1.hasNext() == false) goto L13\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|androidx.fragment.app.FragmentStateManager r2 = r1.next()\l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|if (r2 == null) goto L6\l}"];
Node_12 [shape=record,label="{12\:\ 0x0025|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0025|r0.add(null)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x000f\-\>B:14:0x000f\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|r0.add(r2.getFragment())\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{java.util.List\<androidx.fragment.app.Fragment\> androidx.fragment.app.FragmentStore.getActiveFragments((r4v0 'this' androidx.fragment.app.FragmentStore A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x001d \-\> B:3:0x000f, BACK_EDGE: B:8:0x0025 \-\> B:3:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ()Ljava\/util\/List\<Landroidx\/fragment\/app\/Fragment;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_12;
Node_6 -> Node_13[style=dashed];
Node_12 -> Node_8;
Node_8 -> Node_15;
Node_15 -> Node_14;
Node_14 -> Node_3;
Node_13 -> Node_7;
Node_7 -> Node_16;
Node_16 -> Node_14;
Node_11 -> Node_10;
Node_10 -> Node_1;
}

