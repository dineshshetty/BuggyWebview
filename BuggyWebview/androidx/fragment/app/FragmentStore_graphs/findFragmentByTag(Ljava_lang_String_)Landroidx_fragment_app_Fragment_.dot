digraph "CFG forandroidx.fragment.app.FragmentStore.findFragmentByTag(Ljava\/lang\/String;)Landroidx\/fragment\/app\/Fragment;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|if (r5 == null) goto L15\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|int r0 = r4.mAdded.size() + (\-1)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|LOOP_START\lLOOP:0: B:4:0x000a\-\>B:10:0x001f\lPHI: r0 \l  PHI: (r0v8 'i' int) = (r0v7 'i' int), (r0v9 'i' int) binds: [B:3:0x0002, B:10:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \< 0) goto L14\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|androidx.fragment.app.Fragment r1 = r4.mAdded.get(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|if (r1 == null) goto L13\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016}"];
Node_8 [shape=record,label="{8\:\ 0x001c|if (r5.equals(r1.mTag) == false) goto L11\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|RETURN\l|return r1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|LOOP_END\lLOOP:0: B:4:0x000a\-\>B:10:0x001f\l|int r0 = r0 + (\-1)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0022|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|if (r5 == null) goto L31\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|java.util.Iterator r0 = r4.mActive.values().iterator()\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|LOOP_START\lLOOP:1: B:13:0x002e\-\>B:30:0x002e\l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|if (r0.hasNext() == false) goto L29\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|androidx.fragment.app.FragmentStateManager r1 = r0.next()\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|if (r1 == null) goto L28\l}"];
Node_28 [shape=record,label="{28\:\ 0x003c|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x003c|androidx.fragment.app.Fragment r2 = r1.getFragment()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0046|if (r5.equals(r2.mTag) == false) goto L26\l}"];
Node_29 [shape=record,label="{29\:\ 0x0048|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0048|RETURN\l|return r2\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|LOOP_END\lSYNTHETIC\lLOOP:1: B:13:0x002e\-\>B:30:0x002e\l}"];
Node_31 [shape=record,label="{31\:\ 0x002e|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x004a|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|RETURN\lORIG_RETURN\l|return null\l}"];
MethodNode[shape=record,label="{androidx.fragment.app.Fragment androidx.fragment.app.FragmentStore.findFragmentByTag((r4v0 'this' androidx.fragment.app.FragmentStore A[IMMUTABLE_TYPE, THIS]), (r5v0 'tag' java.lang.String A[D('tag' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:10:0x001f \-\> B:4:0x000a, CROSS_EDGE: B:6:0x0014 \-\> B:10:0x001f, CROSS_EDGE: B:19:0x0048 \-\> B:1:?, BACK_EDGE: B:18:0x0046 \-\> B:13:0x002e, BACK_EDGE: B:16:0x003a \-\> B:13:0x002e, CROSS_EDGE: B:22:0x004b \-\> B:1:?, CROSS_EDGE: B:11:0x0022 \-\> B:21:0x004a, CROSS_EDGE: B:2:0x0000 \-\> B:11:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_11;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_23;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_25;
Node_7 -> Node_8;
Node_8 -> Node_24[style=dashed];
Node_8 -> Node_26;
Node_24 -> Node_9;
Node_9 -> Node_1;
Node_26 -> Node_10;
Node_10 -> Node_4;
Node_25 -> Node_10;
Node_23 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_27;
Node_15 -> Node_16;
Node_16 -> Node_28[style=dashed];
Node_16 -> Node_31;
Node_28 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_29[style=dashed];
Node_18 -> Node_32;
Node_29 -> Node_19;
Node_19 -> Node_1;
Node_32 -> Node_30;
Node_30 -> Node_13;
Node_31 -> Node_30;
Node_27 -> Node_33;
Node_33 -> Node_1;
Node_21 -> Node_1;
}

