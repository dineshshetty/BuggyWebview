digraph "CFG forandroidx.fragment.app.FragmentStore.getActiveFragmentStateManagers()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:208)\l0x0002: INVOKE  (r0 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0005: IGET  (r1 I:java.util.HashMap\<java.lang.String, androidx.fragment.app.FragmentStateManager\>) = (r3 I:androidx.fragment.app.FragmentStore) androidx.fragment.app.FragmentStore.mActive java.util.HashMap  (LINE:209)\l0x0007: INVOKE  (r1 I:java.util.Collection) = (r1 I:java.util.HashMap) type: VIRTUAL call: java.util.HashMap.values():java.util.Collection A[MD:():java.util.Collection\<V\> (c)]\l0x000b: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Collection) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|LOOP_START\lLOOP:0: B:3:0x000f\-\>B:12:0x000f\l|0x000f: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0019: CHECK_CAST (r2 I:androidx.fragment.app.FragmentStateManager) = (androidx.fragment.app.FragmentStateManager) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x001b|0x001b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fragmentStateManager' androidx.fragment.app.FragmentStateManager)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000f  (LINE:210)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|0x001d: INVOKE  \l  (r0 I:java.util.ArrayList A[D('activeFragmentStateManagers' java.util.ArrayList\<androidx.fragment.app.FragmentStateManager\>)])\l  (r2 I:java.lang.Object A[D('fragmentStateManager' androidx.fragment.app.FragmentStateManager)])\l type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:211)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x000f\-\>B:12:0x000f\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|RETURN\l|0x0021: RETURN  \l  (r0 I:java.util.List\<androidx.fragment.app.FragmentStateManager\> A[D('activeFragmentStateManagers' java.util.ArrayList\<androidx.fragment.app.FragmentStateManager\>)])\l  (LINE:214)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{java.util.List\<androidx.fragment.app.FragmentStateManager\> androidx.fragment.app.FragmentStore.getActiveFragmentStateManagers((r3 'this' I:androidx.fragment.app.FragmentStore A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x001d \-\> B:3:0x000f, BACK_EDGE: B:6:0x001b \-\> B:3:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x0020: r2 'fragmentStateManager' Landroidx\/fragment\/app\/FragmentStateManager;\l  0x0005\-0x0021: r0 'activeFragmentStateManagers' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Landroidx\/fragment\/app\/FragmentStateManager;\>;\lSIGNATURE: ()Ljava\/util\/List\<Landroidx\/fragment\/app\/FragmentStateManager;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_11[style=dashed];
Node_6 -> Node_13;
Node_11 -> Node_7;
Node_7 -> Node_14;
Node_14 -> Node_12;
Node_12 -> Node_3;
Node_13 -> Node_12;
Node_10 -> Node_9;
Node_9 -> Node_1;
}

