digraph "CFG forandroidx.fragment.app.FragmentStore.removeFragment(Landroidx\/fragment\/app\/Fragment;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.ArrayList\<androidx.fragment.app.Fragment\> r0 = r2.mAdded\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{, blocks: (B:4:0x0003, B:5:0x0008), top: B:11:0x0003 \}\lCatch: all \-\> 0x000d\l|r2.mAdded.remove(r3)     \/\/ Catch: java.lang.Throwable \-\> Ld\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:4:0x0003, B:5:0x0008), top: B:11:0x0003 \}\lCatch: all \-\> 0x000d\l|monitor\-exit(r0)     \/\/ Catch: java.lang.Throwable \-\> Ld\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|r3.mAdded = false\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|REMOVE\lExcHandler: all \-\> 0x000d\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|TRY_ENTER\lTRY_LEAVE\lREMOVE\lCatch: all \-\> 0x000d\l}"];
Node_10 [shape=record,label="{10\:\ 0x000f|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{void androidx.fragment.app.FragmentStore.removeFragment((r2v0 'this' androidx.fragment.app.FragmentStore A[IMMUTABLE_TYPE, THIS]), (r3v0 'fragment' androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000f \-\> B:1:?, CROSS_EDGE: B:11:0x0003 \-\> B:8:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_11;
Node_11 -> Node_4;
Node_11 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_12 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

