digraph "CFG forandroidx.fragment.app.Fragment.9.launch(Ljava\/lang\/Object;Landroidx\/core\/app\/ActivityOptionsCompat;)V" {
subgraph cluster_Region_304792367 {
label = "R(2:1|(2:(1:7)|(1:3)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|androidx.activity.result.ActivityResultLauncher androidx.activity.result.ActivityResultLauncher r0 = (androidx.activity.result.ActivityResultLauncher) r2.get()\l}"];
subgraph cluster_Region_222429461 {
label = "R(2:(1:7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1287904495 {
label = "IF [B:11:0x0008] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0008|if (r0 == null) goto L6\l}"];
subgraph cluster_Region_437333458 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0015|throw new java.lang.IllegalStateException(\"Operation cannot be started before fragment is in created state\")\l}"];
}
}
subgraph cluster_Region_85424320 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000a|r0.launch(r4, r5)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000d}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000e}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.Fragment.9.launch((r3v0 'this' androidx.fragment.app.Fragment$9 A[IMMUTABLE_TYPE, THIS]), (r4v0 'input' I A[D('input' I), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'options' androidx.core.app.ActivityOptionsCompat A[D('options' androidx.core.app.ActivityOptionsCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0015 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (TI;Landroidx\/core\/app\/ActivityOptionsCompat;)V\lMETHOD_OVERRIDE: [androidx.activity.result.ActivityResultLauncher.launch(I, androidx.core.app.ActivityOptionsCompat):void]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

