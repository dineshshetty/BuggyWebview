digraph "CFG forandroidx.fragment.app.FragmentAnim.transitToAnimResourceId(IZ)I" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:215)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0001|0x0001: SWITCH  (r2 I:?? A[D('transit' int)])\l case 4097: goto B:34:0x0017\l case 4099: goto B:30:0x000e\l case 8194: goto B:26:0x0005\l default: goto B:41:?  (LINE:216)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0005|0x0005: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('enter' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x000a  (LINE:221)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0007|0x0007: SGET  (r1 I:int) =  androidx.fragment.R.animator.fragment_close_enter int \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('animAttr' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN  (r0 I:int A[D('animAttr' int)]) A[SYNTHETIC] (LINE:227)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x000a|0x000a: SGET  (r1 I:int) =  androidx.fragment.R.animator.fragment_close_exit int \l}"];
Node_30 [shape=record,label="{30\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('enter' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0013  (LINE:224)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0010|0x0010: SGET  (r1 I:int) =  androidx.fragment.R.animator.fragment_fade_enter int \l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|0x0015: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('animAttr' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN  (r0 I:int A[D('animAttr' int)]) A[SYNTHETIC] (LINE:227)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0013|0x0013: SGET  (r1 I:int) =  androidx.fragment.R.animator.fragment_fade_exit int \l}"];
Node_34 [shape=record,label="{34\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('enter' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x001c  (LINE:218)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0019|0x0019: SGET  (r1 I:int) =  androidx.fragment.R.animator.fragment_open_enter int \l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|0x001e: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('animAttr' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: RETURN  (r0 I:int A[D('animAttr' int)])  (LINE:227)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001c|0x001c: SGET  (r1 I:int) =  androidx.fragment.R.animator.fragment_open_exit int \l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN  (r0 I:int A[D('animAttr' int)]) A[SYNTHETIC] (LINE:227)\l}"];
MethodNode[shape=record,label="{private static int androidx.fragment.app.FragmentAnim.transitToAnimResourceId((r2 I:int A[D('transit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[D('enter' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x000a \-\> B:29:0x000c, CROSS_EDGE: B:33:0x0015 \-\> B:38:0x0020, CROSS_EDGE: B:32:0x0013 \-\> B:33:0x0015, CROSS_EDGE: B:37:0x001e \-\> B:38:0x0020, CROSS_EDGE: B:36:0x001c \-\> B:37:0x001e, CROSS_EDGE: B:24:0x0001 \-\> B:38:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x002f: r0 'animAttr' I\l  \-1 \-0x002f: r2 'transit' I\l  \-1 \-0x002f: r3 'enter' Z\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_30;
Node_24 -> Node_34;
Node_24 -> Node_41;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_29 -> Node_39;
Node_39 -> Node_22;
Node_28 -> Node_29;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_33 -> Node_40;
Node_40 -> Node_22;
Node_32 -> Node_33;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_22;
Node_36 -> Node_37;
Node_41 -> Node_22;
}

