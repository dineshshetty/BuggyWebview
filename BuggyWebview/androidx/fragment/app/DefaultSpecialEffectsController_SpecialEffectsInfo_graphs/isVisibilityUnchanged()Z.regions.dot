digraph "CFG forandroidx.fragment.app.DefaultSpecialEffectsController.SpecialEffectsInfo.isVisibilityUnchanged()Z" {
subgraph cluster_Region_1757371425 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.fragment.app.SpecialEffectsController$Operation$State androidx.fragment.app.SpecialEffectsController.Operation.State r0 = androidx.fragment.app.SpecialEffectsController.Operation.State.from(r3.mOperation.getFragment().mView)\landroidx.fragment.app.SpecialEffectsController$Operation$State androidx.fragment.app.SpecialEffectsController.Operation.State r1 = r3.mOperation.getFinalState()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0012|RETURN\l|return r0 == r1 \|\| !(r0 == androidx.fragment.app.SpecialEffectsController.Operation.State.VISIBLE \|\| r1 == androidx.fragment.app.SpecialEffectsController.Operation.State.VISIBLE)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0014}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0016|REMOVE\lADDED_TO_REGION\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0018}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a|REMOVE\lADDED_TO_REGION\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001d|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001f|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{boolean androidx.fragment.app.DefaultSpecialEffectsController.SpecialEffectsInfo.isVisibilityUnchanged((r3v0 'this' androidx.fragment.app.DefaultSpecialEffectsController$SpecialEffectsInfo A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x001f \-\> B:11:0x0020, CROSS_EDGE: B:5:0x0016 \-\> B:9:0x001d, CROSS_EDGE: B:3:0x0012 \-\> B:10:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10;
Node_9 -> Node_1;
Node_10 -> Node_1;
}

