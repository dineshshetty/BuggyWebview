digraph "CFG forandroidx.fragment.app.BackStackRecord.isFragmentPostponed(Landroidx\/fragment\/app\/FragmentTransaction$Op;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.fragment.app.Fragment r0 = r2.mFragment\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 == null) goto L15\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004}"];
Node_5 [shape=record,label="{5\:\ 0x0006|if (r0.mAdded == false) goto L15\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008}"];
Node_7 [shape=record,label="{7\:\ 0x000a|if (r0.mView == null) goto L15\l}"];
Node_8 [shape=record,label="{8\:\ 0x000c}"];
Node_9 [shape=record,label="{9\:\ 0x000e|if (r0.mDetached != false) goto L15\l}"];
Node_10 [shape=record,label="{10\:\ 0x0010}"];
Node_11 [shape=record,label="{11\:\ 0x0012|if (r0.mHidden != false) goto L15\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014}"];
Node_13 [shape=record,label="{13\:\ 0x0018|if (r0.isPostponed() == false) goto L15\l}"];
Node_14 [shape=record,label="{14\:\ 0x001a|SYNTHETIC\lRETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private static boolean androidx.fragment.app.BackStackRecord.isFragmentPostponed((r2v0 'op' androidx.fragment.app.FragmentTransaction$Op A[D('op' androidx.fragment.app.FragmentTransaction$Op), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001c \-\> B:16:0x001d, CROSS_EDGE: B:11:0x0012 \-\> B:15:0x001c, CROSS_EDGE: B:9:0x000e \-\> B:15:0x001c, CROSS_EDGE: B:7:0x000a \-\> B:15:0x001c, CROSS_EDGE: B:5:0x0006 \-\> B:15:0x001c, CROSS_EDGE: B:3:0x0002 \-\> B:15:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_15;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_1;
Node_15 -> Node_1;
}

