digraph "CFG forandroidx.fragment.app.BackStackRecord.toString()Ljava\/lang\/String;" {
subgraph cluster_Region_647180018 {
label = "R(5:1|(1:3)|(1:6)|7|8)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.StringBuilder java.lang.StringBuilder r0 = new java.lang.StringBuilder(128)\lr0.append(\"BackStackEntry\{\")\lr0.append(java.lang.Integer.toHexString(java.lang.System.identityHashCode(r2)))\l}"];
subgraph cluster_IfRegion_455604997 {
label = "IF [B:3:0x0019] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0019|if (r2.mIndex \>= 0) goto L3\l}"];
subgraph cluster_Region_262782460 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001b|r0.append(\" #\")\lr0.append(r2.mIndex)\l}"];
}
}
subgraph cluster_IfRegion_331409842 {
label = "IF [B:6:0x0027] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0027|if (r2.mName != null) goto L6\l}"];
subgraph cluster_Region_1734792011 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0029|r0.append(\" \")\lr0.append(r2.mName)\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x0033|r0.append(\"\}\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|RETURN\l|return r0.toString()\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0025}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.fragment.app.BackStackRecord.toString((r2v0 'this' androidx.fragment.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0027 \-\> B:8:0x0033, CROSS_EDGE: B:3:0x0019 \-\> B:5:0x0025\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_0 -> Node_2;
Node_5 -> Node_6;
}

