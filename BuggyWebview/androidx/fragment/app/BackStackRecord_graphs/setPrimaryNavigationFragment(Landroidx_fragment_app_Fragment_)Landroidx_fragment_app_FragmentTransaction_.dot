digraph "CFG forandroidx.fragment.app.BackStackRecord.setPrimaryNavigationFragment(Landroidx\/fragment\/app\/Fragment;)Landroidx\/fragment\/app\/FragmentTransaction;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|if (r4 == null) goto L9\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002}"];
Node_4 [shape=record,label="{4\:\ 0x0004|if (r4.mFragmentManager == null) goto L9\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006}"];
Node_6 [shape=record,label="{6\:\ 0x000a|if (r4.mFragmentManager != r3.mManager) goto L6\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot setPrimaryNavigation for Fragment attached to a different FragmentManager. Fragment \")\lr1.append(r4.toString())\lr1.append(\" is already attached to a FragmentManager.\")\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|throw new java.lang.IllegalStateException(r1.toString())\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d}"];
Node_11 [shape=record,label="{11\:\ 0x0031|RETURN\l|return super.setPrimaryNavigationFragment(r4)\l}"];
MethodNode[shape=record,label="{public androidx.fragment.app.FragmentTransaction androidx.fragment.app.BackStackRecord.setPrimaryNavigationFragment((r3v0 'this' androidx.fragment.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]), (r4v0 'fragment' androidx.fragment.app.Fragment A[D('fragment' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0031 \-\> B:1:?, CROSS_EDGE: B:4:0x0004 \-\> B:10:0x002d, CROSS_EDGE: B:2:0x0000 \-\> B:10:0x002d\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.fragment.app.FragmentTransaction.setPrimaryNavigationFragment(androidx.fragment.app.Fragment):androidx.fragment.app.FragmentTransaction]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_10[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

