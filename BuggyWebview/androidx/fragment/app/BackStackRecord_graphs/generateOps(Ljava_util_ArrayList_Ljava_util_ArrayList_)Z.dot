digraph "CFG forandroidx.fragment.app.BackStackRecord.generateOps(Ljava\/util\/ArrayList;Ljava\/util\/ArrayList;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (androidx.fragment.app.FragmentManager.isLoggingEnabled(2) == false) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Run: \")\lr0.append(r2)\landroid.util.Log.v(androidx.fragment.app.BackStackRecord.TAG, r0.toString())\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|r3.add(r2)\lr4.add(false)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|if (r2.mAddToBackStack == false) goto L9\l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|r2.mManager.addBackStackState(r2)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|RETURN\lORIG_RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean androidx.fragment.app.BackStackRecord.generateOps((r2v0 'this' androidx.fragment.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]), (r3v0 'records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\> A[D('records' java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'isRecordPop' java.util.ArrayList\<java.lang.Boolean\> A[D('isRecordPop' java.util.ArrayList\<java.lang.Boolean\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x002a \-\> B:8:0x0031, CROSS_EDGE: B:3:0x0005 \-\> B:5:0x001d\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/util\/ArrayList\<Landroidx\/fragment\/app\/BackStackRecord;\>;Ljava\/util\/ArrayList\<Ljava\/lang\/Boolean;\>;)Z\lMETHOD_OVERRIDE: [androidx.fragment.app.FragmentManager.OpGenerator.generateOps(java.util.ArrayList\<androidx.fragment.app.BackStackRecord\>, java.util.ArrayList\<java.lang.Boolean\>):boolean]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_10 -> Node_1;
}

