digraph "CFG forandroidx.fragment.app.BackStackRecord.setOnStartPostponedListener(Landroidx\/fragment\/app\/Fragment$OnStartEnterTransitionListener;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|LOOP_START\lLOOP:0: B:3:0x0001\-\>B:8:0x001c\lPHI: r0 \l  PHI: (r0v1 'opNum' int) = (r0v0 'opNum' int), (r0v2 'opNum' int) binds: [B:2:0x0000, B:8:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|if (r0 \>= r3.mOps.size()) goto L10\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|androidx.fragment.app.FragmentTransaction$Op r1 = r3.mOps.get(r0)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|if (isFragmentPostponed(r1) == false) goto L9\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|r1.mFragment.setOnStartEnterTransitionListener(r4)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|LOOP_END\lLOOP:0: B:3:0x0001\-\>B:8:0x001c\l|int r0 = r0 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.fragment.app.BackStackRecord.setOnStartPostponedListener((r3v0 'this' androidx.fragment.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]), (r4v0 'listener' androidx.fragment.app.Fragment$OnStartEnterTransitionListener A[D('listener' androidx.fragment.app.Fragment$OnStartEnterTransitionListener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x001c \-\> B:3:0x0001, CROSS_EDGE: B:6:0x0015 \-\> B:8:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_11;
Node_11 -> Node_8;
Node_8 -> Node_3;
Node_12 -> Node_8;
Node_10 -> Node_9;
Node_9 -> Node_1;
}

