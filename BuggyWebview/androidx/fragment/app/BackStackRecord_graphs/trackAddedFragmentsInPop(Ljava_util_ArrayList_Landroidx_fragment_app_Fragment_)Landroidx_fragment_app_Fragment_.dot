digraph "CFG forandroidx.fragment.app.BackStackRecord.trackAddedFragmentsInPop(Ljava\/util\/ArrayList;Landroidx\/fragment\/app\/Fragment;)Landroidx\/fragment\/app\/Fragment;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = r3.mOps.size() + (\-1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_START\lLOOP:0: B:3:0x0008\-\>B:12:0x002e\lPHI: r0 r5 \l  PHI: (r0v3 'opNum' int) = (r0v2 'opNum' int), (r0v4 'opNum' int) binds: [B:2:0x0000, B:12:0x002e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 'oldPrimaryNav' androidx.fragment.app.Fragment) = (r5v0 'oldPrimaryNav' androidx.fragment.app.Fragment), (r5v4 'oldPrimaryNav' androidx.fragment.app.Fragment) binds: [B:2:0x0000, B:12:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \< 0) goto L17\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|androidx.fragment.app.FragmentTransaction$Op r1 = r3.mOps.get(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|switch(r1.mCmd) \{\l    case 1: goto L14;\l    case 2: goto L16;\l    case 3: goto L12;\l    case 4: goto L16;\l    case 5: goto L16;\l    case 6: goto L12;\l    case 7: goto L14;\l    case 8: goto L10;\l    case 9: goto L8;\l    case 10: goto L5;\l    default: goto L16;\l\}\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|r1.mCurrentMaxState = r1.mOldMaxState\l}"];
Node_16 [shape=record,label="{16\:\ 0x002e|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x002e|LOOP_END\lLOOP:0: B:3:0x0008\-\>B:12:0x002e\lPHI: r5 \l  PHI: (r5v4 'oldPrimaryNav' androidx.fragment.app.Fragment) = (r5v1 'oldPrimaryNav' androidx.fragment.app.Fragment), (r5v1 'oldPrimaryNav' androidx.fragment.app.Fragment), (r5v1 'oldPrimaryNav' androidx.fragment.app.Fragment), (r5v2 'oldPrimaryNav' androidx.fragment.app.Fragment), (r5v3 'oldPrimaryNav' androidx.fragment.app.Fragment), (r5v1 'oldPrimaryNav' androidx.fragment.app.Fragment) binds: [B:20:0x002e, B:15:0x002e, B:19:0x002e, B:18:0x002e, B:17:0x002e, B:16:0x002e] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = r0 + (\-1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001d|androidx.fragment.app.Fragment r5 = r1.mFragment\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0020|r5 = null\l}"];
Node_18 [shape=record,label="{18\:\ 0x002e|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|r4.add(r1.mFragment)\l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|r4.remove(r1.mFragment)\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0031|RETURN\l|return r5\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{androidx.fragment.app.Fragment androidx.fragment.app.BackStackRecord.trackAddedFragmentsInPop((r3v0 'this' androidx.fragment.app.BackStackRecord A[IMMUTABLE_TYPE, THIS]), (r4v0 'added' java.util.ArrayList\<androidx.fragment.app.Fragment\> A[D('added' java.util.ArrayList\<androidx.fragment.app.Fragment\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'oldPrimaryNav' androidx.fragment.app.Fragment A[D('oldPrimaryNav' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x002e \-\> B:3:0x0008, CROSS_EDGE: B:8:0x001d \-\> B:12:0x002e, CROSS_EDGE: B:9:0x0020 \-\> B:12:0x002e, CROSS_EDGE: B:10:0x0022 \-\> B:12:0x002e, CROSS_EDGE: B:11:0x0028 \-\> B:12:0x002e, CROSS_EDGE: B:5:0x0014 \-\> B:12:0x002e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/util\/ArrayList\<Landroidx\/fragment\/app\/Fragment;\>;Landroidx\/fragment\/app\/Fragment;)Landroidx\/fragment\/app\/Fragment;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_5 -> Node_9;
Node_5 -> Node_10;
Node_5 -> Node_11;
Node_5 -> Node_20;
Node_7 -> Node_16;
Node_16 -> Node_12;
Node_12 -> Node_3;
Node_8 -> Node_17;
Node_17 -> Node_12;
Node_9 -> Node_18;
Node_18 -> Node_12;
Node_10 -> Node_19;
Node_19 -> Node_12;
Node_11 -> Node_15;
Node_15 -> Node_12;
Node_20 -> Node_12;
Node_14 -> Node_13;
Node_13 -> Node_1;
}

