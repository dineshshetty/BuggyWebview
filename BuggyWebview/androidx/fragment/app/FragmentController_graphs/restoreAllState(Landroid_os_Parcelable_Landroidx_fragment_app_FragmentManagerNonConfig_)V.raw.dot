digraph "CFG forandroidx.fragment.app.FragmentController.restoreAllState(Landroid\/os\/Parcelable;Landroidx\/fragment\/app\/FragmentManagerNonConfig;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.fragment.app.FragmentHostCallback\<?\>) = (r1 I:androidx.fragment.app.FragmentController) androidx.fragment.app.FragmentController.mHost androidx.fragment.app.FragmentHostCallback  (LINE:183)\l0x0002: IGET  (r0 I:androidx.fragment.app.FragmentManager) = (r0 I:androidx.fragment.app.FragmentHostCallback) androidx.fragment.app.FragmentHostCallback.mFragmentManager androidx.fragment.app.FragmentManager \l0x0004: INVOKE  \l  (r0 I:androidx.fragment.app.FragmentManager)\l  (r2 I:android.os.Parcelable A[D('state' android.os.Parcelable)])\l  (r3 I:androidx.fragment.app.FragmentManagerNonConfig A[D('nonConfig' androidx.fragment.app.FragmentManagerNonConfig)])\l type: VIRTUAL call: androidx.fragment.app.FragmentManager.restoreAllState(android.os.Parcelable, androidx.fragment.app.FragmentManagerNonConfig):void A[MD:(android.os.Parcelable, androidx.fragment.app.FragmentManagerNonConfig):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:184)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.FragmentController.restoreAllState((r1 'this' I:androidx.fragment.app.FragmentController A[IMMUTABLE_TYPE, THIS]), (r2 I:android.os.Parcelable A[D('state' android.os.Parcelable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:androidx.fragment.app.FragmentManagerNonConfig A[D('nonConfig' androidx.fragment.app.FragmentManagerNonConfig), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Ljava\/lang\/Deprecated;=Annotation\{RUNTIME, type=Ljava\/lang\/Deprecated;, values=\{\}\}\}\lDebug Info:\l  \-1 \-0x0007: r2 'state' Landroid\/os\/Parcelable;\l  \-1 \-0x0007: r3 'nonConfig' Landroidx\/fragment\/app\/FragmentManagerNonConfig;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

