digraph "CFG forandroidx.fragment.app.FragmentController.createController(Landroidx\/fragment\/app\/FragmentHostCallback;)Landroidx\/fragment\/app\/FragmentController;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:androidx.fragment.app.FragmentController) =  androidx.fragment.app.FragmentController  (LINE:57)\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"callbacks == null\" \l0x0004: INVOKE  (r1 I:java.lang.Object) = (r2 I:java.lang.Object A[D('callbacks' androidx.fragment.app.FragmentHostCallback\<?\>)]), (r1 I:java.lang.Object) type: STATIC call: androidx.core.util.Preconditions.checkNotNull(java.lang.Object, java.lang.Object):java.lang.Object A[MD:\<T\>:(T, java.lang.Object):T (m)]\l0x0008: CHECK_CAST (r1 I:androidx.fragment.app.FragmentHostCallback) = (androidx.fragment.app.FragmentHostCallback) (r1 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:androidx.fragment.app.FragmentController), (r1 I:androidx.fragment.app.FragmentHostCallback) type: DIRECT call: androidx.fragment.app.FragmentController.\<init\>(androidx.fragment.app.FragmentHostCallback):void A[MD:(androidx.fragment.app.FragmentHostCallback\<?\>):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:androidx.fragment.app.FragmentController) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static androidx.fragment.app.FragmentController androidx.fragment.app.FragmentController.createController((r2 I:androidx.fragment.app.FragmentHostCallback\<?\> A[D('callbacks' androidx.fragment.app.FragmentHostCallback\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x000d: r2 'callbacks' Landroidx\/fragment\/app\/FragmentHostCallback;, signature: Landroidx\/fragment\/app\/FragmentHostCallback\<*\>;\lSIGNATURE: (Landroidx\/fragment\/app\/FragmentHostCallback\<*\>;)Landroidx\/fragment\/app\/FragmentController;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

