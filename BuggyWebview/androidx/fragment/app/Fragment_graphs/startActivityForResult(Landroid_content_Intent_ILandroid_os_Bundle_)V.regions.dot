digraph "CFG forandroidx.fragment.app.Fragment.startActivityForResult(Landroid\/content\/Intent;ILandroid\/os\/Bundle;)V" {
subgraph cluster_Region_1178066627 {
label = "R(1:(2:(2:6|7)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_1670538807 {
label = "R(2:(2:6|7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_91414965 {
label = "IF [B:11:0x0002] THEN: R(2:6|7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r3.mHost == null) goto L6\l}"];
subgraph cluster_Region_422732234 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000c}"];
Node_15 [shape=record,label="{15\:\ 0x0027|throw new java.lang.IllegalStateException(\"Fragment \" + r3 + \" not attached to Activity\")\l}"];
}
}
subgraph cluster_Region_1628141033 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|getParentFragmentManager().launchStartActivityForResult(r3, r4, r5, r6)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000b}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.fragment.app.Fragment.startActivityForResult((r3v0 'this' androidx.fragment.app.Fragment A[IMMUTABLE_TYPE, THIS]), (r4v0 'intent' android.content.Intent A[D('intent' android.content.Intent), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'requestCode' int A[D('requestCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'options' android.os.Bundle A[D('options' android.os.Bundle), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Ljava\/lang\/Deprecated;=Annotation\{RUNTIME, type=Ljava\/lang\/Deprecated;, values=\{\}\}\}\lINLINE_NOT_NEEDED\lCROSS_EDGE: B:15:0x0027 \-\> B:9:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_13 -> Node_9;
}

