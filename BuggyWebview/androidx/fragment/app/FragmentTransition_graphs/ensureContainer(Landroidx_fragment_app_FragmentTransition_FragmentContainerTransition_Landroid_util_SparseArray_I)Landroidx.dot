digraph "CFG forandroidx.fragment.app.FragmentTransition.ensureContainer(Landroidx\/fragment\/app\/FragmentTransition$FragmentContainerTransition;Landroid\/util\/SparseArray;I)Landroidx\/fragment\/app\/FragmentTransition$FragmentContainerTransition;" {
Node_6 [shape=record,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|if (r1 != null) goto L5\l}"];
Node_9 [shape=record,label="{9\:\ 0x0002|androidx.fragment.app.FragmentTransition$FragmentContainerTransition r0 = new androidx.fragment.app.FragmentTransition.FragmentContainerTransition()\lr2.put(r3, r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x000b|RETURN\lORIG_RETURN\l|return r0\l}"];
Node_7 [shape=record,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
MethodNode[shape=record,label="{private static androidx.fragment.app.FragmentTransition$FragmentContainerTransition androidx.fragment.app.FragmentTransition.ensureContainer((r1v0 'containerTransition' androidx.fragment.app.FragmentTransition$FragmentContainerTransition A[D('containerTransition' androidx.fragment.app.FragmentTransition$FragmentContainerTransition), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'transitioningFragments' android.util.SparseArray\<androidx.fragment.app.FragmentTransition$FragmentContainerTransition\> A[D('transitioningFragments' android.util.SparseArray\<androidx.fragment.app.FragmentTransition$FragmentContainerTransition\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'containerId' int A[D('containerId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0000 \-\> B:10:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroidx\/fragment\/app\/FragmentTransition$FragmentContainerTransition;Landroid\/util\/SparseArray\<Landroidx\/fragment\/app\/FragmentTransition$FragmentContainerTransition;\>;I)Landroidx\/fragment\/app\/FragmentTransition$FragmentContainerTransition;\l}"];
MethodNode -> Node_6;Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_11 -> Node_7;
}

