digraph "CFG forandroidx.fragment.app.FragmentTransition.mergeTransitions(Landroidx\/fragment\/app\/FragmentTransitionImpl;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Landroidx\/fragment\/app\/Fragment;Z)Ljava\/lang\/Object;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1090)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0001|0x0001: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('enterTransition' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0013  (LINE:1091)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|0x0003: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('exitTransition' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0013 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|0x0005: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('inFragment' androidx.fragment.app.Fragment)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0013 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|0x0007: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isPop' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x000e  (LINE:1092)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|0x0009: INVOKE  (r1 I:boolean) = (r6 I:androidx.fragment.app.Fragment A[D('inFragment' androidx.fragment.app.Fragment)]) type: VIRTUAL call: androidx.fragment.app.Fragment.getAllowReturnTransitionOverlap():boolean A[MD:():boolean (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|0x0012: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('overlap' boolean)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: INVOKE  (r1 I:boolean) = (r6 I:androidx.fragment.app.Fragment A[D('inFragment' androidx.fragment.app.Fragment)]) type: VIRTUAL call: androidx.fragment.app.Fragment.getAllowEnterTransitionOverlap():boolean A[MD:():boolean (m)] (LINE:1093)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('overlap' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x001a  (LINE:1101)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: INVOKE  (r1 I:java.lang.Object) = \l  (r2 I:androidx.fragment.app.FragmentTransitionImpl A[D('impl' androidx.fragment.app.FragmentTransitionImpl)])\l  (r4 I:java.lang.Object A[D('exitTransition' java.lang.Object)])\l  (r3 I:java.lang.Object A[D('enterTransition' java.lang.Object)])\l  (r5 I:java.lang.Object A[D('sharedElementTransition' java.lang.Object)])\l type: VIRTUAL call: androidx.fragment.app.FragmentTransitionImpl.mergeTransitionsTogether(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object (m)] (LINE:1103)\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN  (r1 I:java.lang.Object A[D('transition' java.lang.Object)]) A[SYNTHETIC] (LINE:1111)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: INVOKE  (r1 I:java.lang.Object) = \l  (r2 I:androidx.fragment.app.FragmentTransitionImpl A[D('impl' androidx.fragment.app.FragmentTransitionImpl)])\l  (r4 I:java.lang.Object A[D('exitTransition' java.lang.Object)])\l  (r3 I:java.lang.Object A[D('enterTransition' java.lang.Object)])\l  (r5 I:java.lang.Object A[D('sharedElementTransition' java.lang.Object)])\l type: VIRTUAL call: androidx.fragment.app.FragmentTransitionImpl.mergeTransitionsInSequence(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object (m)] (LINE:1108)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: RETURN  (r1 I:java.lang.Object A[D('transition' java.lang.Object)])  (LINE:1111)\l}"];
MethodNode[shape=record,label="{private static java.lang.Object androidx.fragment.app.FragmentTransition.mergeTransitions((r2 I:androidx.fragment.app.FragmentTransitionImpl A[D('impl' androidx.fragment.app.FragmentTransitionImpl), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[D('enterTransition' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[D('exitTransition' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[D('sharedElementTransition' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:androidx.fragment.app.Fragment A[D('inFragment' androidx.fragment.app.Fragment), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('isPop' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:28:0x001e, CROSS_EDGE: B:23:0x000e \-\> B:24:0x0012, CROSS_EDGE: B:20:0x0005 \-\> B:25:0x0013, CROSS_EDGE: B:19:0x0003 \-\> B:25:0x0013, CROSS_EDGE: B:18:0x0001 \-\> B:25:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x001a: r1 'transition' Ljava\/lang\/Object;\l  0x0001\-0x001e: r0 'overlap' Z\l  0x001e\-0x001e: r1 'transition' Ljava\/lang\/Object;\l  \-1 \-0x001e: r2 'impl' Landroidx\/fragment\/app\/FragmentTransitionImpl;\l  \-1 \-0x001e: r3 'enterTransition' Ljava\/lang\/Object;\l  \-1 \-0x001e: r4 'exitTransition' Ljava\/lang\/Object;\l  \-1 \-0x001e: r5 'sharedElementTransition' Ljava\/lang\/Object;\l  \-1 \-0x001e: r6 'inFragment' Landroidx\/fragment\/app\/Fragment;\l  \-1 \-0x001e: r7 'isPop' Z\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_23 -> Node_24;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_29;
Node_29 -> Node_16;
Node_27 -> Node_28;
Node_28 -> Node_16;
}

