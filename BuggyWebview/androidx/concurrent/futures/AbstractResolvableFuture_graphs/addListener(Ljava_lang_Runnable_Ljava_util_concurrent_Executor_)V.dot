digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.addListener(Ljava\/lang\/Runnable;Ljava\/util\/concurrent\/Executor;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|checkNotNull(r4)\lcheckNotNull(r5)\landroidx.concurrent.futures.AbstractResolvableFuture$Listener r0 = r3.listeners\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|if (r0 == androidx.concurrent.futures.AbstractResolvableFuture.Listener.TOMBSTONE) goto L12\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|androidx.concurrent.futures.AbstractResolvableFuture$Listener r1 = new androidx.concurrent.futures.AbstractResolvableFuture.Listener(r4, r5)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|LOOP_START\lLOOP:0: B:19:0x0011\-\>B:23:0x0020\lPHI: r0 \l  PHI: (r0v1 'oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener) = (r0v0 'oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener), (r0v2 'oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener) binds: [B:18:0x000c, B:23:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|r1.next = r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|if (androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER.casListeners(r3, r0, r1) == false) goto L6\l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|androidx.concurrent.futures.AbstractResolvableFuture$Listener r0 = r3.listeners\l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|LOOP_END\lLOOP:0: B:19:0x0011\-\>B:23:0x0020\l|if (r0 != androidx.concurrent.futures.AbstractResolvableFuture.Listener.TOMBSTONE) goto L4\l}"];
Node_26 [shape=record,label="{26\:\ 0x0022|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|executeListener(r4, r5)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public final void androidx.concurrent.futures.AbstractResolvableFuture.addListener((r3v0 'this' androidx.concurrent.futures.AbstractResolvableFuture\<V\> A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>), IMMUTABLE_TYPE, THIS]), (r4v0 'listener' java.lang.Runnable A[D('listener' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'executor' java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0020 \-\> B:19:0x0011, CROSS_EDGE: B:25:0x0025 \-\> B:15:?, CROSS_EDGE: B:17:0x000a \-\> B:24:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: [V]\lMETHOD_OVERRIDE: [com.google.common.util.concurrent.ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor):void]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_27[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_19;
Node_23 -> Node_26[style=dashed];
Node_26 -> Node_24;
Node_27 -> Node_21;
Node_21 -> Node_15;
Node_24 -> Node_25;
Node_25 -> Node_15;
}

