digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.addListener(Ljava\/lang\/Runnable;Ljava\/util\/concurrent\/Executor;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r4 I:java.lang.Object A[D('listener' java.lang.Runnable)]) type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture.checkNotNull(java.lang.Object):java.lang.Object A[MD:\<T\>:(T):T (m)] (LINE:653)\l0x0003: INVOKE  (r5 I:java.lang.Object A[D('executor' java.util.concurrent.Executor)]) type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture.checkNotNull(java.lang.Object):java.lang.Object A[MD:\<T\>:(T):T (m)] (LINE:654)\l0x0006: IGET  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) = \l  (r3 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>)])\l androidx.concurrent.futures.AbstractResolvableFuture.listeners androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:655)\l0x0008: SGET  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) =  androidx.concurrent.futures.AbstractResolvableFuture.Listener.TOMBSTONE androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:656)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0022 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: NEW_INSTANCE  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) =  androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:657)\l0x000e: INVOKE  \l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener)\l  (r4 I:java.lang.Runnable A[D('listener' java.lang.Runnable)])\l  (r5 I:java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor)])\l type: DIRECT call: androidx.concurrent.futures.AbstractResolvableFuture.Listener.\<init\>(java.lang.Runnable, java.util.concurrent.Executor):void A[MD:(java.lang.Runnable, java.util.concurrent.Executor):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|LOOP_START\lLOOP:0: B:19:0x0011\-\>B:23:0x0020\l|0x0011: IPUT  \l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('newNode' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l androidx.concurrent.futures.AbstractResolvableFuture.Listener.next androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:659)\l0x0013: SGET  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper) =  androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper  (LINE:660)\l0x0015: INVOKE  (r2 I:boolean) = \l  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper)\l  (r3 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>)])\l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('newNode' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l type: VIRTUAL call: androidx.concurrent.futures.AbstractResolvableFuture.AtomicHelper.casListeners(androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Listener, androidx.concurrent.futures.AbstractResolvableFuture$Listener):boolean A[MD:(androidx.concurrent.futures.AbstractResolvableFuture\<?\>, androidx.concurrent.futures.AbstractResolvableFuture$Listener, androidx.concurrent.futures.AbstractResolvableFuture$Listener):boolean (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|0x0019: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001c \l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|0x001c: IGET  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener)]) = \l  (r3 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>)])\l androidx.concurrent.futures.AbstractResolvableFuture.listeners androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:663)\l0x001e: SGET  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) =  androidx.concurrent.futures.AbstractResolvableFuture.Listener.TOMBSTONE androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:664)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|LOOP_END\lLOOP:0: B:19:0x0011\-\>B:23:0x0020\l|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('oldHead' androidx.concurrent.futures.AbstractResolvableFuture$Listener)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0011 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0022|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|RETURN\l|0x001b: RETURN    (LINE:661)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|0x0022: INVOKE  \l  (r4 I:java.lang.Runnable A[D('listener' java.lang.Runnable)])\l  (r5 I:java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture.executeListener(java.lang.Runnable, java.util.concurrent.Executor):void A[MD:(java.lang.Runnable, java.util.concurrent.Executor):void (m)] (LINE:668)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:669)\l}"];
MethodNode[shape=record,label="{public final void androidx.concurrent.futures.AbstractResolvableFuture.addListener((r3 'this' I:androidx.concurrent.futures.AbstractResolvableFuture\<V\> A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>), IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Runnable A[D('listener' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0020 \-\> B:19:0x0011, CROSS_EDGE: B:25:0x0025 \-\> B:15:?, CROSS_EDGE: B:17:0x000a \-\> B:24:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0022: r1 'newNode' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\l  0x0008\-0x0025: r0 'oldHead' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\l  0x0000\-0x0025: r3 'this' Landroidx\/concurrent\/futures\/AbstractResolvableFuture;, signature: Landroidx\/concurrent\/futures\/AbstractResolvableFuture\<TV;\>;\l  \-1 \-0x0025: r4 'listener' Ljava\/lang\/Runnable;\l  \-1 \-0x0025: r5 'executor' Ljava\/util\/concurrent\/Executor;\lTYPE_VARS: [V]\lMETHOD_OVERRIDE: [com.google.common.util.concurrent.ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor):void]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_27[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_19;
Node_23 -> Node_26[style=dashed];
Node_26 -> Node_24;
Node_27 -> Node_21;
Node_21 -> Node_15;
Node_24 -> Node_25;
Node_25 -> Node_15;
}

