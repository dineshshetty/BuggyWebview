digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.complete(Landroidx\/concurrent\/futures\/AbstractResolvableFuture;)V" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:868)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0001|LOOP_START\lLOOP:0: B:28:0x0001\-\>B:44:0x0001\l|0x0001: INVOKE  \l  (r6 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)])\l type: DIRECT call: androidx.concurrent.futures.AbstractResolvableFuture.releaseWaiters():void A[MD:():void (m)] (LINE:871)\l0x0004: INVOKE  \l  (r6 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)])\l type: VIRTUAL call: androidx.concurrent.futures.AbstractResolvableFuture.afterDone():void A[MD:():void (m)] (LINE:877)\l0x0007: INVOKE  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('next' androidx.concurrent.futures.AbstractResolvableFuture$Listener)]) = \l  (r6 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)])\l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('next' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l type: DIRECT call: androidx.concurrent.futures.AbstractResolvableFuture.clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener):androidx.concurrent.futures.AbstractResolvableFuture$Listener A[MD:(androidx.concurrent.futures.AbstractResolvableFuture$Listener):androidx.concurrent.futures.AbstractResolvableFuture$Listener (m)] (LINE:879)\l0x000b: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:880)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|LOOP_START\lLOOP:1: B:29:0x000c\-\>B:46:0x000c\l|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next' androidx.concurrent.futures.AbstractResolvableFuture$Listener)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0036  (LINE:881)\l}"];
Node_30 [shape=record,label="{30\:\ 0x000e|0x000e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('next' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])  (LINE:882)\l0x000f: IGET  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) = \l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('next' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l androidx.concurrent.futures.AbstractResolvableFuture.Listener.next androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:883)\l0x0011: IGET  (r2 I:java.lang.Runnable) = \l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('curr' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l androidx.concurrent.futures.AbstractResolvableFuture.Listener.task java.lang.Runnable  (LINE:884)\l0x0013: INSTANCE_OF  (r3 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('task' java.lang.Runnable)]) androidx.concurrent.futures.AbstractResolvableFuture$SetFuture  (LINE:885)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0030 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0030|0x0030: IGET  (r3 I:java.util.concurrent.Executor) = \l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('curr' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l androidx.concurrent.futures.AbstractResolvableFuture.Listener.executor java.util.concurrent.Executor  (LINE:902)\l0x0032: INVOKE  (r2 I:java.lang.Runnable A[D('task' java.lang.Runnable)]), (r3 I:java.util.concurrent.Executor) type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture.executeListener(java.lang.Runnable, java.util.concurrent.Executor):void A[MD:(java.lang.Runnable, java.util.concurrent.Executor):void (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x000c|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x000c|LOOP_END\lSYNTHETIC\lLOOP:1: B:29:0x000c\-\>B:46:0x000c\l}"];
Node_45 [shape=record,label="{45\:\ 0x0017|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0017|0x0017: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('task' java.lang.Runnable)])  (LINE:886)\l0x0018: CHECK_CAST (r3 I:androidx.concurrent.futures.AbstractResolvableFuture$SetFuture) = (androidx.concurrent.futures.AbstractResolvableFuture$SetFuture) (r3 I:??[OBJECT, ARRAY]) \l0x001a: IGET  (r6 I:androidx.concurrent.futures.AbstractResolvableFuture\<V\> A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)]) = \l  (r3 I:androidx.concurrent.futures.AbstractResolvableFuture$SetFuture A[D('setFuture' androidx.concurrent.futures.AbstractResolvableFuture$SetFuture\<?\>)])\l androidx.concurrent.futures.AbstractResolvableFuture.SetFuture.owner androidx.concurrent.futures.AbstractResolvableFuture  (LINE:893)\l0x001c: IGET  (r4 I:java.lang.Object) = \l  (r6 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)])\l androidx.concurrent.futures.AbstractResolvableFuture.value java.lang.Object  (LINE:894)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001e|0x001e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('setFuture' androidx.concurrent.futures.AbstractResolvableFuture$SetFuture\<?\>)])  \-\> B:48:0x000c \l}"];
Node_43 [shape=record,label="{43\:\ 0x0020|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0020|0x0020: IGET  (r4 I:com.google.common.util.concurrent.ListenableFuture\<? extends V\>) = \l  (r3 I:androidx.concurrent.futures.AbstractResolvableFuture$SetFuture A[D('setFuture' androidx.concurrent.futures.AbstractResolvableFuture$SetFuture\<?\>)])\l androidx.concurrent.futures.AbstractResolvableFuture.SetFuture.future com.google.common.util.concurrent.ListenableFuture  (LINE:895)\l0x0022: INVOKE  (r4 I:java.lang.Object) = (r4 I:com.google.common.util.concurrent.ListenableFuture) type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture.getFutureValue(com.google.common.util.concurrent.ListenableFuture):java.lang.Object A[MD:(com.google.common.util.concurrent.ListenableFuture\<?\>):java.lang.Object (m)]\l0x0026: SGET  (r5 I:androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper) =  androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper  (LINE:896)\l0x0028: INVOKE  (r5 I:boolean) = \l  (r5 I:androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper)\l  (r6 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)])\l  (r3 I:java.lang.Object A[D('setFuture' androidx.concurrent.futures.AbstractResolvableFuture$SetFuture\<?\>)])\l  (r4 I:java.lang.Object A[D('valueToSet' java.lang.Object)])\l type: VIRTUAL call: androidx.concurrent.futures.AbstractResolvableFuture.AtomicHelper.casValue(androidx.concurrent.futures.AbstractResolvableFuture, java.lang.Object, java.lang.Object):boolean A[MD:(androidx.concurrent.futures.AbstractResolvableFuture\<?\>, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x002c|0x002c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x000c \l}"];
Node_44 [shape=record,label="{44\:\ 0x0001|LOOP_END\lSYNTHETIC\lLOOP:0: B:28:0x0001\-\>B:44:0x0001\l}"];
Node_49 [shape=record,label="{49\:\ 0x000c|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x000c|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0036|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0036|RETURN\l|0x0036: RETURN    (LINE:907)\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void androidx.concurrent.futures.AbstractResolvableFuture.complete((r6 I:androidx.concurrent.futures.AbstractResolvableFuture\<?\> A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x002c \-\> B:28:0x0001, BACK_EDGE: B:35:0x002c \-\> B:29:0x000c, BACK_EDGE: B:33:0x001e \-\> B:29:0x000c, BACK_EDGE: B:38:0x0030 \-\> B:29:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x002f: r3 'setFuture' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$SetFuture;, signature: Landroidx\/concurrent\/futures\/AbstractResolvableFuture$SetFuture\<*\>;\l  0x0026\-0x002f: r4 'valueToSet' Ljava\/lang\/Object;\l  0x000f\-0x0035: r1 'curr' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\l  0x0013\-0x0035: r2 'task' Ljava\/lang\/Runnable;\l  0x0001\-0x0036: r0 'next' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\l  0x0000\-0x0036: r6 'future' Landroidx\/concurrent\/futures\/AbstractResolvableFuture;, signature: Landroidx\/concurrent\/futures\/AbstractResolvableFuture\<*\>;\lSIGNATURE: (Landroidx\/concurrent\/futures\/AbstractResolvableFuture\<*\>;)V\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_41;
Node_30 -> Node_31;
Node_31 -> Node_42;
Node_31 -> Node_45[style=dashed];
Node_42 -> Node_38;
Node_38 -> Node_47;
Node_47 -> Node_46;
Node_46 -> Node_29;
Node_45 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_43[style=dashed];
Node_33 -> Node_48;
Node_43 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_44[style=dashed];
Node_35 -> Node_49;
Node_44 -> Node_28;
Node_49 -> Node_46;
Node_48 -> Node_46;
Node_41 -> Node_40;
Node_40 -> Node_26;
}

