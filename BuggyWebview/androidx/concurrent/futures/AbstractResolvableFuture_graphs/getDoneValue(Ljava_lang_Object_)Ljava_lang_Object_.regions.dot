digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.getDoneValue(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_769825717 {
label = "R(1:(2:(1:14)|(1:(2:(1:12)|(1:(2:(1:7)|(1:10)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_1499750350 {
label = "R(2:(1:14)|(1:(2:(1:12)|(1:(2:(1:7)|(1:10))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1122626099 {
label = "IF [B:19:0x0002] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0002|if ((r3 instanceof androidx.concurrent.futures.AbstractResolvableFuture.Cancellation) != false) goto L13\l}"];
subgraph cluster_Region_1660846131 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0026|throw cancellationExceptionWithCause(\"Task was cancelled.\", ((androidx.concurrent.futures.AbstractResolvableFuture.Cancellation) r3).cause)\l}"];
}
}
subgraph cluster_Region_1534628074 {
label = "R(1:(2:(1:12)|(1:(2:(1:7)|(1:10)))))";
node [shape=record,color=blue];
subgraph cluster_Region_546909796 {
label = "R(2:(1:12)|(1:(2:(1:7)|(1:10))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_757915702 {
label = "IF [B:21:0x0006] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0006|if ((r3 instanceof androidx.concurrent.futures.AbstractResolvableFuture.Failure) != false) goto L11\l}"];
subgraph cluster_Region_1002767032 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x001a|throw new java.util.concurrent.ExecutionException(((androidx.concurrent.futures.AbstractResolvableFuture.Failure) r3).exception)\l}"];
}
}
subgraph cluster_Region_614808298 {
label = "R(1:(2:(1:7)|(1:10)))";
node [shape=record,color=blue];
subgraph cluster_Region_1302776340 {
label = "R(2:(1:7)|(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_130137798 {
label = "IF [B:23:0x000a] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x000a|if (r3 == androidx.concurrent.futures.AbstractResolvableFuture.NULL) goto L7\l}"];
subgraph cluster_Region_335719492 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x000c|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_436057668 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x000f|RETURN\l|return r3\l}"];
}
}
}
}
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0000}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0004}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0008}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000e}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0010}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x001b}"];
MethodNode[shape=record,label="{private V androidx.concurrent.futures.AbstractResolvableFuture.getDoneValue((r2v0 'this' androidx.concurrent.futures.AbstractResolvableFuture\<V\> A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>), IMMUTABLE_TYPE, THIS]), (r3v0 'obj' java.lang.Object A[D('obj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x000f \-\> B:17:?, CROSS_EDGE: B:29:0x001a \-\> B:17:?, CROSS_EDGE: B:31:0x0026 \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [V]\lSIGNATURE: (Ljava\/lang\/Object;)TV;\lEXCEPTIONS:[Ljava\/util\/concurrent\/ExecutionException;]\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r3v0, resolved type: java.lang.Object\}\l}"];
MethodNode -> Node_16;Node_19 -> Node_20[style=dashed];
Node_19 -> Node_30;
Node_31 -> Node_17;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_29 -> Node_17;
Node_23 -> Node_24;
Node_23 -> Node_26[style=dashed];
Node_24 -> Node_17;
Node_27 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_30 -> Node_31;
}

