digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.\<clinit\>()V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_CLASS  (r0 I:java.lang.Class\<androidx.concurrent.futures.AbstractResolvableFuture\>) =  androidx.concurrent.futures.AbstractResolvableFuture.class  (LINE:64)\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"guava.concurrent.generate_cancellation_cause\"  (LINE:66)\l0x0004: CONST_STR  (r2 I:java.lang.String) =  \"false\" \l0x0006: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.String), (r2 I:java.lang.String) type: STATIC call: java.lang.System.getProperty(java.lang.String, java.lang.String):java.lang.String A[MD:(java.lang.String, java.lang.String):java.lang.String (c)]\l0x000a: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String) type: STATIC call: java.lang.Boolean.parseBoolean(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)] (LINE:65)\l0x000e: SPUT  (r1 I:boolean) androidx.concurrent.futures.AbstractResolvableFuture.GENERATE_CANCELLATION_CAUSES boolean \l0x0010: INVOKE  (r1 I:java.lang.String) = (r0 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getName():java.lang.String A[MD:():java.lang.String (c)] (LINE:69)\l0x0014: INVOKE  (r1 I:java.util.logging.Logger) = (r1 I:java.lang.String) type: STATIC call: java.util.logging.Logger.getLogger(java.lang.String):java.util.logging.Logger A[MD:(java.lang.String):java.util.logging.Logger (c)]\l0x0018: SPUT  (r1 I:java.util.logging.Logger) androidx.concurrent.futures.AbstractResolvableFuture.log java.util.logging.Logger \l0x001a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:80)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x004f, blocks: (B:17:0x001b), top: B:26:0x001b \}\lCatch: all \-\> 0x004f\l|0x001b: NEW_INSTANCE  (r8 I:androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper) =  androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper A[Catch: all \-\> 0x004f, TRY_ENTER] (LINE:85)\l0x001d: CONST_CLASS  (r2 I:java.lang.Class\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>) =  androidx.concurrent.futures.AbstractResolvableFuture$Waiter.class \l0x001f: CONST_CLASS  (r3 I:java.lang.Class\<java.lang.Thread\>) =  java.lang.Thread.class \l0x0021: CONST_STR  (r4 I:java.lang.String) =  \"thread\" \l0x0023: INVOKE  (r3 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) = (r2 I:java.lang.Class), (r3 I:java.lang.Class), (r4 I:java.lang.String) type: STATIC call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class, java.lang.Class, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater A[Catch: all \-\> 0x004f, MD:\<U, W\>:(java.lang.Class\<U\>, java.lang.Class\<W\>, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<U, W\> (c)] (LINE:87)\l0x0027: CONST_CLASS  (r2 I:java.lang.Class\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>) =  androidx.concurrent.futures.AbstractResolvableFuture$Waiter.class \l0x0029: CONST_CLASS  (r4 I:java.lang.Class\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>) =  androidx.concurrent.futures.AbstractResolvableFuture$Waiter.class \l0x002b: CONST_STR  (r5 I:java.lang.String) =  \"next\" \l0x002d: INVOKE  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) = (r2 I:java.lang.Class), (r4 I:java.lang.Class), (r5 I:java.lang.String) type: STATIC call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class, java.lang.Class, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater A[Catch: all \-\> 0x004f, MD:\<U, W\>:(java.lang.Class\<U\>, java.lang.Class\<W\>, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<U, W\> (c)] (LINE:88)\l0x0031: CONST_CLASS  (r2 I:java.lang.Class\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>) =  androidx.concurrent.futures.AbstractResolvableFuture$Waiter.class \l0x0033: CONST_STR  (r5 I:java.lang.String) =  \"waiters\" \l0x0035: INVOKE  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) = (r0 I:java.lang.Class), (r2 I:java.lang.Class), (r5 I:java.lang.String) type: STATIC call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class, java.lang.Class, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater A[Catch: all \-\> 0x004f, MD:\<U, W\>:(java.lang.Class\<U\>, java.lang.Class\<W\>, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<U, W\> (c)] (LINE:89)\l0x0039: CONST_CLASS  (r2 I:java.lang.Class\<androidx.concurrent.futures.AbstractResolvableFuture$Listener\>) =  androidx.concurrent.futures.AbstractResolvableFuture$Listener.class \l0x003b: CONST_STR  (r6 I:java.lang.String) =  \"listeners\" \l0x003d: INVOKE  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) = (r0 I:java.lang.Class), (r2 I:java.lang.Class), (r6 I:java.lang.String) type: STATIC call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class, java.lang.Class, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater A[Catch: all \-\> 0x004f, MD:\<U, W\>:(java.lang.Class\<U\>, java.lang.Class\<W\>, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<U, W\> (c)] (LINE:90)\l0x0041: CONST_CLASS  (r2 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x0043: CONST_STR  (r7 I:java.lang.String) =  \"value\" \l0x0045: INVOKE  (r7 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater) = (r0 I:java.lang.Class), (r2 I:java.lang.Class), (r7 I:java.lang.String) type: STATIC call: java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(java.lang.Class, java.lang.Class, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater A[Catch: all \-\> 0x004f, MD:\<U, W\>:(java.lang.Class\<U\>, java.lang.Class\<W\>, java.lang.String):java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<U, W\> (c)] (LINE:94)\l0x0049: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x004a: INVOKE  \l  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper)\l  (r3 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r4 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r5 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r6 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r7 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l type: DIRECT call: androidx.concurrent.futures.AbstractResolvableFuture.SafeAtomicHelper.\<init\>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.util.concurrent.atomic.AtomicReferenceFieldUpdater):void A[Catch: all \-\> 0x004f, MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter, java.lang.Thread\>, java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter, androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>, java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>, java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Listener\>, java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, java.lang.Object\>):void (m), TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|0x004d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0057|0x0057: SPUT  \l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper A[D('helper' androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper)])\l androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper  (LINE:104)\l0x0059: CONST_CLASS  (r2 I:java.lang.Class\<java.util.concurrent.locks.LockSupport\>) =  java.util.concurrent.locks.LockSupport.class  (LINE:109)\l}"];
Node_22 [shape=record,label="{22\:\ 0x005b|0x005b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('thrownAtomicReferenceFieldUpdaterFailure' java.lang.Throwable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0066  (LINE:113)\l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|0x005d: SGET  (r3 I:java.util.logging.Logger) =  androidx.concurrent.futures.AbstractResolvableFuture.log java.util.logging.Logger  (LINE:114)\l0x005f: SGET  (r4 I:java.util.logging.Level) =  java.util.logging.Level.SEVERE java.util.logging.Level \l0x0061: CONST_STR  (r5 I:java.lang.String) =  \"SafeAtomicHelper is broken!\" \l0x0063: INVOKE  \l  (r3 I:java.util.logging.Logger)\l  (r4 I:java.util.logging.Level)\l  (r5 I:java.lang.String)\l  (r1 I:java.lang.Throwable A[D('thrownAtomicReferenceFieldUpdaterFailure' java.lang.Throwable)])\l type: VIRTUAL call: java.util.logging.Logger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable):void A[MD:(java.util.logging.Level, java.lang.String, java.lang.Throwable):void (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0066|0x0066: NEW_INSTANCE  (r0 I:java.lang.Object A[D('helper' androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper)]) =  java.lang.Object  (LINE:217)\l0x0068: INVOKE  (r0 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)]\l0x006b: SPUT  (r0 I:java.lang.Object) androidx.concurrent.futures.AbstractResolvableFuture.NULL java.lang.Object \l}"];
Node_25 [shape=record,label="{25\:\ 0x006d|RETURN\l|0x006d: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|ExcHandler: all \-\> 0x004f\l|0x004f: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x004f] (LINE:95)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('thrownAtomicReferenceFieldUpdaterFailure' java.lang.Throwable)]) = (r0 I:??[OBJECT, ARRAY] A[D('atomicReferenceFieldUpdaterFailure' java.lang.Throwable)])  (LINE:100)\l0x0051: NEW_INSTANCE  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper) =  androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper  (LINE:101)\l0x0053: INVOKE  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper) type: DIRECT call: androidx.concurrent.futures.AbstractResolvableFuture.SynchronizedHelper.\<init\>():void A[MD:():void (m)]\l0x0056: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('atomicReferenceFieldUpdaterFailure' java.lang.Throwable)]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{static void androidx.concurrent.futures.AbstractResolvableFuture.\<clinit\>()  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x005b \-\> B:24:0x0066, CROSS_EDGE: B:20:0x0050 \-\> B:21:0x0057, CROSS_EDGE: B:26:0x001b \-\> B:19:0x004f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x004e\-0x004f: r0 'helper' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$AtomicHelper;\l  0x0050\-0x0057: r0 'atomicReferenceFieldUpdaterFailure' Ljava\/lang\/Throwable;\l  0x0057\-0x0066: r0 'helper' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$AtomicHelper;\l  0x001b\-0x0066: r1 'thrownAtomicReferenceFieldUpdaterFailure' Ljava\/lang\/Throwable;\l  0x005b\-0x0066: r2 'ensureLoaded' Ljava\/lang\/Class;, signature: Ljava\/lang\/Class\<*\>;\lTryCatch #0 \{all \-\> 0x004f, blocks: (B:17:0x001b), top: B:26:0x001b \}\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_26;
Node_26 -> Node_17;
Node_26 -> Node_19;
Node_17 -> Node_18;
Node_17 -> Node_27;
Node_18 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_27 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
}

