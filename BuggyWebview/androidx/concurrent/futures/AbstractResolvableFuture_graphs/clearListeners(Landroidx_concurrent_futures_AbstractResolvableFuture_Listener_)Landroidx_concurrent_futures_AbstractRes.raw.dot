digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.clearListeners(Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;)Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|LOOP_START\lLOOP:0: B:13:0x0000\-\>B:14:0x000a\l|0x0000: IGET  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) = \l  (r3 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>)])\l androidx.concurrent.futures.AbstractResolvableFuture.listeners androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:960)\l0x0002: SGET  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper) =  androidx.concurrent.futures.AbstractResolvableFuture.ATOMIC_HELPER androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper  (LINE:961)\l0x0004: SGET  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) =  androidx.concurrent.futures.AbstractResolvableFuture.Listener.TOMBSTONE androidx.concurrent.futures.AbstractResolvableFuture$Listener \l0x0006: INVOKE  (r1 I:boolean) = \l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper)\l  (r3 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>)])\l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('head' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener)\l type: VIRTUAL call: androidx.concurrent.futures.AbstractResolvableFuture.AtomicHelper.casListeners(androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Listener, androidx.concurrent.futures.AbstractResolvableFuture$Listener):boolean A[MD:(androidx.concurrent.futures.AbstractResolvableFuture\<?\>, androidx.concurrent.futures.AbstractResolvableFuture$Listener, androidx.concurrent.futures.AbstractResolvableFuture$Listener):boolean (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|LOOP_END\lLOOP:0: B:13:0x0000\-\>B:14:0x000a\l|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0000 \l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|0x000c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('onto' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])  (LINE:962)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|LOOP_START\lLOOP:1: B:16:0x000d\-\>B:17:0x000f\l|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('head' androidx.concurrent.futures.AbstractResolvableFuture$Listener)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0016  (LINE:963)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|LOOP_END\lLOOP:1: B:16:0x000d\-\>B:17:0x000f\l|0x000f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('head' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])  (LINE:964)\l0x0010: IGET  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener) = \l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('head' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l androidx.concurrent.futures.AbstractResolvableFuture.Listener.next androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:965)\l0x0012: IPUT  \l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('reversedList' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l  (r2 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('tmp' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l androidx.concurrent.futures.AbstractResolvableFuture.Listener.next androidx.concurrent.futures.AbstractResolvableFuture$Listener  (LINE:966)\l0x0014: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('reversedList' androidx.concurrent.futures.AbstractResolvableFuture$Listener)]) = (r2 I:??[OBJECT, ARRAY] A[D('tmp' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])  (LINE:967)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\l|0x0016: RETURN  \l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('reversedList' androidx.concurrent.futures.AbstractResolvableFuture$Listener)])\l  (LINE:969)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private androidx.concurrent.futures.AbstractResolvableFuture$Listener androidx.concurrent.futures.AbstractResolvableFuture.clearListeners((r3 'this' I:androidx.concurrent.futures.AbstractResolvableFuture\<V\> A[D('this' androidx.concurrent.futures.AbstractResolvableFuture\<V\>), IMMUTABLE_TYPE, THIS]), (r4 I:androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('onto' androidx.concurrent.futures.AbstractResolvableFuture$Listener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:17:0x000f \-\> B:16:0x000d, BACK_EDGE: B:14:0x000a \-\> B:13:0x0000\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0015: r2 'tmp' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\l  0x000d\-0x0017: r1 'reversedList' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\l  0x0002\-0x0017: r0 'head' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\l  0x0000\-0x0017: r3 'this' Landroidx\/concurrent\/futures\/AbstractResolvableFuture;, signature: Landroidx\/concurrent\/futures\/AbstractResolvableFuture\<TV;\>;\l  \-1 \-0x0017: r4 'onto' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\lTYPE_VARS: [V]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_13;
Node_14 -> Node_20[style=dashed];
Node_20 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_16;
Node_21 -> Node_18;
Node_18 -> Node_12;
}

