digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.SynchronizedHelper.casListeners(Landroidx\/concurrent\/futures\/AbstractResolvableFuture;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;)Z" {
subgraph cluster_Region_455273450 {
label = "R(1:0)";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_197592084 {
label = "Synchronized:R(2:1|(1:(2:(2:5|7)|(1:11))))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0000}"];
subgraph cluster_Region_236427486 {
label = "R(1:(2:(2:5|7)|(1:11)))";
node [shape=record,color=blue];
subgraph cluster_Region_1712602900 {
label = "R(2:(2:5|7)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1785066887 {
label = "IF [B:19:0x0003] THEN: R(2:5|7) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0003|if (r2.listeners == r3) goto L5\l}"];
subgraph cluster_Region_1496431483 {
label = "R(2:5|7)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0005|TryCatch #0 \{, blocks: (B:18:0x0001, B:20:0x0005, B:21:0x0008, B:24:0x000b), top: B:29:0x0001 \}\lCatch: all \-\> 0x000d\l|r2.listeners = r4     \/\/ Catch: java.lang.Throwable \-\> Ld\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1800542699 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x000c|RETURN\l|return false\l}"];
}
}
}
}
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{, blocks: (B:18:0x0001, B:20:0x0005, B:21:0x0008, B:24:0x000b), top: B:29:0x0001 \}\lCatch: all \-\> 0x000d\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0008|DONT_GENERATE\lTryCatch #0 \{, blocks: (B:18:0x0001, B:20:0x0005, B:21:0x0008, B:24:0x000b), top: B:29:0x0001 \}\lCatch: all \-\> 0x000d\l|monitor\-exit()     \/\/ Catch: java.lang.Throwable \-\> Ld\l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x000a}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x000b|DONT_GENERATE\lTryCatch #0 \{, blocks: (B:18:0x0001, B:20:0x0005, B:21:0x0008, B:24:0x000b), top: B:29:0x0001 \}\lCatch: all \-\> 0x000d\l|monitor\-exit()     \/\/ Catch: java.lang.Throwable \-\> Ld\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000d|REMOVE\lExcHandler: all \-\> 0x000d\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x000e|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x000d\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x000f|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{boolean androidx.concurrent.futures.AbstractResolvableFuture.SynchronizedHelper.casListeners((r1v0 'this' androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper A[IMMUTABLE_TYPE, THIS]), (r2v0 'future' androidx.concurrent.futures.AbstractResolvableFuture\<?\> A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'expect' androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('expect' androidx.concurrent.futures.AbstractResolvableFuture$Listener), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'update' androidx.concurrent.futures.AbstractResolvableFuture$Listener A[D('update' androidx.concurrent.futures.AbstractResolvableFuture$Listener), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x000c \-\> B:16:?, CROSS_EDGE: B:28:0x000f \-\> B:16:?\lINLINE_NOT_NEEDED\lSIGNATURE: (Landroidx\/concurrent\/futures\/AbstractResolvableFuture\<*\>;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;)Z\lMETHOD_OVERRIDE: [androidx.concurrent.futures.AbstractResolvableFuture.AtomicHelper.casListeners(androidx.concurrent.futures.AbstractResolvableFuture\<?\>, androidx.concurrent.futures.AbstractResolvableFuture$Listener, androidx.concurrent.futures.AbstractResolvableFuture$Listener):boolean]\l}"];
MethodNode -> Node_15;Node_17 -> Node_29;
Node_19 -> Node_20;
Node_19 -> Node_23[style=dashed];
Node_20 -> Node_21;
Node_22 -> Node_16;
Node_25 -> Node_16;
Node_15 -> Node_17;
Node_29 -> Node_18;
Node_29 -> Node_26;
Node_18 -> Node_19;
Node_21 -> Node_22;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_16;
}

