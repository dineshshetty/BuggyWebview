digraph "CFG forandroidx.concurrent.futures.CallbackToFutureAdapter.SafeFuture.addListener(Ljava\/lang\/Runnable;Ljava\/util\/concurrent\/Executor;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture\<T\>) = \l  (r1 I:androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\>)])\l androidx.concurrent.futures.CallbackToFutureAdapter.SafeFuture.delegate androidx.concurrent.futures.AbstractResolvableFuture  (LINE:210)\l0x0002: INVOKE  \l  (r0 I:androidx.concurrent.futures.AbstractResolvableFuture)\l  (r2 I:java.lang.Runnable A[D('listener' java.lang.Runnable)])\l  (r3 I:java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor)])\l type: VIRTUAL call: androidx.concurrent.futures.AbstractResolvableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor):void A[MD:(java.lang.Runnable, java.util.concurrent.Executor):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:211)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.concurrent.futures.CallbackToFutureAdapter.SafeFuture.addListener((r1 'this' I:androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\> A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\>), IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Runnable A[D('listener' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  0x0000\-0x0005: r1 'this' Landroidx\/concurrent\/futures\/CallbackToFutureAdapter$SafeFuture;, signature: Landroidx\/concurrent\/futures\/CallbackToFutureAdapter$SafeFuture\<TT;\>;\l  \-1 \-0x0005: r2 'listener' Ljava\/lang\/Runnable;\l  \-1 \-0x0005: r3 'executor' Ljava\/util\/concurrent\/Executor;\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [com.google.common.util.concurrent.ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

