digraph "CFG forandroidx.concurrent.futures.CallbackToFutureAdapter.Completer.set(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1516162173 {
label = "R(4:1|2|(1:6)|7)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|boolean r0 = true\lr3.attemptedSetting = true\landroidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\> androidx.concurrent.futures.CallbackToFutureAdapter.SafeFuture\<T\> r1 = r3.future\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|r0 = (r1 == null \|\| !r1.set(r4)) ? false : false\l}"];
subgraph cluster_IfRegion_2106882475 {
label = "IF [B:8:0x000f] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x000f|PHI: r0 \l  PHI: (r0v2 'wasSet' boolean) = (r0v0 'wasSet' boolean) binds: [B:5:0x000b] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if (r0 != false) goto L6\l}"];
subgraph cluster_Region_1387341962 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0011|setCompletedNormally()\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0014|RETURN\l|return r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0007}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000b|REMOVE\lADDED_TO_REGION\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e}"];
MethodNode[shape=record,label="{public boolean androidx.concurrent.futures.CallbackToFutureAdapter.Completer.set((r3v0 'this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\> A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\>), IMMUTABLE_TYPE, THIS]), (r4v0 'value' T A[D('value' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x000f \-\> B:10:0x0014, CROSS_EDGE: B:5:0x000b \-\> B:8:0x000f, CROSS_EDGE: B:3:0x0005 \-\> B:7:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Z\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8;
Node_7 -> Node_8;
}

