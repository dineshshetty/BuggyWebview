digraph "CFG forandroidx.concurrent.futures.CallbackToFutureAdapter.Completer.finalize()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\> r0 = r4.future\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 == null) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004}"];
Node_5 [shape=record,label="{5\:\ 0x0008|if (r0.isDone() != false) goto L6\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"The completer object was garbage collected \- this future would otherwise never complete. The tag was: \")\lr2.append(r4.tag)\lr0.setException(new androidx.concurrent.futures.CallbackToFutureAdapter.FutureGarbageCollectedException(r2.toString()))\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025}"];
Node_8 [shape=record,label="{8\:\ 0x0027|if (r4.attemptedSetting != false) goto L14\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|androidx.concurrent.futures.ResolvableFuture\<java.lang.Void\> r1 = r4.cancellationFuture\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|if (r1 == null) goto L13\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|r1.set(null)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0031|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{protected void androidx.concurrent.futures.CallbackToFutureAdapter.Completer.finalize((r4v0 'this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\> A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x002b \-\> B:12:0x0031, CROSS_EDGE: B:8:0x0027 \-\> B:12:0x0031, CROSS_EDGE: B:5:0x0008 \-\> B:7:0x0025, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x0025\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_14 -> Node_1;
Node_13 -> Node_1;
}

