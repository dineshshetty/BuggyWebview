digraph "CFG forandroidx.concurrent.futures.CallbackToFutureAdapter.Completer.setException(Ljava\/lang\/Throwable;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:267)\l0x0001: IPUT  \l  (r0 I:boolean)\l  (r3 I:androidx.concurrent.futures.CallbackToFutureAdapter$Completer A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\>)])\l androidx.concurrent.futures.CallbackToFutureAdapter.Completer.attemptedSetting boolean \l0x0003: IGET  (r1 I:androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\>) = \l  (r3 I:androidx.concurrent.futures.CallbackToFutureAdapter$Completer A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\>)])\l androidx.concurrent.futures.CallbackToFutureAdapter.Completer.future androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture  (LINE:268)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('localFuture' androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e  (LINE:269)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r2 I:boolean) = \l  (r1 I:androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture A[D('localFuture' androidx.concurrent.futures.CallbackToFutureAdapter$SafeFuture\<T\>)])\l  (r4 I:java.lang.Throwable A[D('t' java.lang.Throwable)])\l type: VIRTUAL call: androidx.concurrent.futures.CallbackToFutureAdapter.SafeFuture.setException(java.lang.Throwable):boolean A[MD:(java.lang.Throwable):boolean (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('wasSet' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0014  (LINE:270)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: INVOKE  \l  (r3 I:androidx.concurrent.futures.CallbackToFutureAdapter$Completer A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\>)])\l type: DIRECT call: androidx.concurrent.futures.CallbackToFutureAdapter.Completer.setCompletedNormally():void A[MD:():void (m)] (LINE:271)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:boolean A[D('wasSet' boolean)])  (LINE:273)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public boolean androidx.concurrent.futures.CallbackToFutureAdapter.Completer.setException((r3 'this' I:androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\> A[D('this' androidx.concurrent.futures.CallbackToFutureAdapter$Completer\<T\>), IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Throwable A[D('t' java.lang.Throwable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x000f \-\> B:10:0x0014, CROSS_EDGE: B:5:0x000b \-\> B:8:0x000f, CROSS_EDGE: B:3:0x0005 \-\> B:7:0x000e\lDebug Info:\l  0x000f\-0x0014: r0 'wasSet' Z\l  0x0005\-0x0014: r1 'localFuture' Landroidx\/concurrent\/futures\/CallbackToFutureAdapter$SafeFuture;, signature: Landroidx\/concurrent\/futures\/CallbackToFutureAdapter$SafeFuture\<TT;\>;\l  0x0000\-0x0014: r3 'this' Landroidx\/concurrent\/futures\/CallbackToFutureAdapter$Completer;, signature: Landroidx\/concurrent\/futures\/CallbackToFutureAdapter$Completer\<TT;\>;\l  \-1 \-0x0014: r4 't' Ljava\/lang\/Throwable;\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_8[style=dashed];
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_7 -> Node_8;
}

