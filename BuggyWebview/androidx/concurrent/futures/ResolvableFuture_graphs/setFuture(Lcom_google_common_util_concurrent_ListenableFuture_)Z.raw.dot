digraph "CFG forandroidx.concurrent.futures.ResolvableFuture.setFuture(Lcom\/google\/common\/util\/concurrent\/ListenableFuture;)Z" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = \l  (r1 I:androidx.concurrent.futures.AbstractResolvableFuture A[D('this' androidx.concurrent.futures.ResolvableFuture\<V\>)])\l  (r2 I:com.google.common.util.concurrent.ListenableFuture A[D('future' com.google.common.util.concurrent.ListenableFuture\<? extends V\>)])\l type: SUPER call: androidx.concurrent.futures.AbstractResolvableFuture.setFuture(com.google.common.util.concurrent.ListenableFuture):boolean A[MD:(com.google.common.util.concurrent.ListenableFuture\<? extends V\>):boolean (m)] (LINE:60)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean androidx.concurrent.futures.ResolvableFuture.setFuture((r1 'this' I:androidx.concurrent.futures.ResolvableFuture\<V\> A[D('this' androidx.concurrent.futures.ResolvableFuture\<V\>), IMMUTABLE_TYPE, THIS]), (r2 I:com.google.common.util.concurrent.ListenableFuture\<? extends V\> A[D('future' com.google.common.util.concurrent.ListenableFuture\<? extends V\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x0004: r1 'this' Landroidx\/concurrent\/futures\/ResolvableFuture;, signature: Landroidx\/concurrent\/futures\/ResolvableFuture\<TV;\>;\l  0x0000\-0x0004: r2 'future' Lcom\/google\/common\/util\/concurrent\/ListenableFuture;, signature: Lcom\/google\/common\/util\/concurrent\/ListenableFuture\<+TV;\>;\lTYPE_VARS: [V]\lSIGNATURE: (Lcom\/google\/common\/util\/concurrent\/ListenableFuture\<+TV;\>;)Z\lMETHOD_OVERRIDE: [androidx.concurrent.futures.AbstractResolvableFuture.setFuture(com.google.common.util.concurrent.ListenableFuture\<? extends V\>):boolean]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

