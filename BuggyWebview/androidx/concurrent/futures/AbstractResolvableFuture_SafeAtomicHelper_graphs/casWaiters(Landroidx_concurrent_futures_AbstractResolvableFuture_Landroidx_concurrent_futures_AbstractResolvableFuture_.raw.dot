digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.SafeAtomicHelper.casWaiters(Landroidx\/concurrent\/futures\/AbstractResolvableFuture;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;)Z" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>) = (r1 I:androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper) androidx.concurrent.futures.AbstractResolvableFuture.SafeAtomicHelper.waitersUpdater java.util.concurrent.atomic.AtomicReferenceFieldUpdater  (LINE:1122)\l0x0002: INVOKE  (r0 I:boolean) = \l  (r0 I:java.util.concurrent.atomic.AtomicReferenceFieldUpdater)\l  (r2 I:java.lang.Object A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>)])\l  (r3 I:java.lang.Object A[D('expect' androidx.concurrent.futures.AbstractResolvableFuture$Waiter)])\l  (r4 I:java.lang.Object A[D('update' androidx.concurrent.futures.AbstractResolvableFuture$Waiter)])\l type: STATIC call: androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper$$ExternalSyntheticBackportWithForwarding0.m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean A[MD:(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Object, java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{boolean androidx.concurrent.futures.AbstractResolvableFuture.SafeAtomicHelper.casWaiters((r1 'this' I:androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper A[IMMUTABLE_TYPE, THIS]), (r2 I:androidx.concurrent.futures.AbstractResolvableFuture\<?\> A[D('future' androidx.concurrent.futures.AbstractResolvableFuture\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:androidx.concurrent.futures.AbstractResolvableFuture$Waiter A[D('expect' androidx.concurrent.futures.AbstractResolvableFuture$Waiter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.concurrent.futures.AbstractResolvableFuture$Waiter A[D('update' androidx.concurrent.futures.AbstractResolvableFuture$Waiter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x0006: r2 'future' Landroidx\/concurrent\/futures\/AbstractResolvableFuture;, signature: Landroidx\/concurrent\/futures\/AbstractResolvableFuture\<*\>;\l  \-1 \-0x0006: r3 'expect' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;\l  \-1 \-0x0006: r4 'update' Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;\lSIGNATURE: (Landroidx\/concurrent\/futures\/AbstractResolvableFuture\<*\>;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;)Z\lMETHOD_OVERRIDE: [androidx.concurrent.futures.AbstractResolvableFuture.AtomicHelper.casWaiters(androidx.concurrent.futures.AbstractResolvableFuture\<?\>, androidx.concurrent.futures.AbstractResolvableFuture$Waiter, androidx.concurrent.futures.AbstractResolvableFuture$Waiter):boolean]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

