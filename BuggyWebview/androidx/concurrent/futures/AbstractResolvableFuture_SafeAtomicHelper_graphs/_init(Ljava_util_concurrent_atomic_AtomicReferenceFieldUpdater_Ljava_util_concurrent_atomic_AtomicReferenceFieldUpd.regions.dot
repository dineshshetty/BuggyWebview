digraph "CFG forandroidx.concurrent.futures.AbstractResolvableFuture.SafeAtomicHelper.\<init\>(Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater;)V" {
subgraph cluster_Region_2105056122 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0000|super()\lr1.waiterThreadUpdater = r2\lr1.waiterNextUpdater = r3\lr1.waitersUpdater = r4\lr1.listenersUpdater = r5\lr1.valueUpdater = r6\l}"];
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.concurrent.futures.AbstractResolvableFuture.SafeAtomicHelper.\<init\>((r1v0 'this' androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper A[IMMUTABLE_TYPE, THIS]), (r2v0 'waiterThreadUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter, java.lang.Thread\> A[D('waiterThreadUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter, java.lang.Thread\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'waiterNextUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter, androidx.concurrent.futures.AbstractResolvableFuture$Waiter\> A[D('waiterNextUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture$Waiter, androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'waitersUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Waiter\> A[D('waitersUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Waiter\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'listenersUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Listener\> A[D('listenersUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, androidx.concurrent.futures.AbstractResolvableFuture$Listener\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'valueUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, java.lang.Object\> A[D('valueUpdater' java.util.concurrent.atomic.AtomicReferenceFieldUpdater\<androidx.concurrent.futures.AbstractResolvableFuture, java.lang.Object\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lSIGNATURE: (Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater\<Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;Ljava\/lang\/Thread;\>;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater\<Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;\>;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater\<Landroidx\/concurrent\/futures\/AbstractResolvableFuture;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Waiter;\>;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater\<Landroidx\/concurrent\/futures\/AbstractResolvableFuture;Landroidx\/concurrent\/futures\/AbstractResolvableFuture$Listener;\>;Ljava\/util\/concurrent\/atomic\/AtomicReferenceFieldUpdater\<Landroidx\/concurrent\/futures\/AbstractResolvableFuture;Ljava\/lang\/Object;\>;)V\l}"];
MethodNode -> Node_4;Node_6 -> Node_7;
Node_4 -> Node_6;
Node_7 -> Node_5;
}

