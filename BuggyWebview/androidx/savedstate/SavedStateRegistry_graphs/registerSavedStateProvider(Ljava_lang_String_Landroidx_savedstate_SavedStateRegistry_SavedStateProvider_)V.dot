digraph "CFG forandroidx.savedstate.SavedStateRegistry.registerSavedStateProvider(Ljava\/lang\/String;Landroidx\/savedstate\/SavedStateRegistry$SavedStateProvider;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"key\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"provider\")\landroidx.savedstate.SavedStateRegistry$SavedStateProvider r0 = r3.components.putIfAbsent(r4, r5)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0012|if (r0 != null) goto L9\l}"];
Node_14 [shape=record,label="{14\:\ 0x0014|r1 = true\l}"];
Node_16 [shape=record,label="{16\:\ 0x0017|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v4 boolean) binds: [B:15:0x0016, B:14:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x0019|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x001a}"];
Node_19 [shape=record,label="{19\:\ 0x0027|throw new java.lang.IllegalArgumentException(\"SavedStateProvider with the given key is already registered\".toString())\l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|r1 = false\l}"];
MethodNode[shape=record,label="{public final void androidx.savedstate.SavedStateRegistry.registerSavedStateProvider((r3v0 'this' androidx.savedstate.SavedStateRegistry A[IMMUTABLE_TYPE, THIS]), (r4v0 'key' java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'provider' androidx.savedstate.SavedStateRegistry$SavedStateProvider A[D('provider' androidx.savedstate.SavedStateRegistry$SavedStateProvider), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0027 \-\> B:11:?, CROSS_EDGE: B:15:0x0016 \-\> B:16:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

