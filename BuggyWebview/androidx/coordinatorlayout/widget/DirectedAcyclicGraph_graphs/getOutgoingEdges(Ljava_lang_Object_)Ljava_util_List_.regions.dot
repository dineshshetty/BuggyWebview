digraph "CFG forandroidx.coordinatorlayout.widget.DirectedAcyclicGraph.getOutgoingEdges(Ljava\/lang\/Object;)Ljava\/util\/List;" {
subgraph cluster_Region_911314245 {
label = "R(3:1|(3:3|(2:(1:8)|9)|11)|15)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0000|java.util.ArrayList\<T\> r0 = null\lint r1 = 0\lint int r2 = r5.mGraph.size()\l}"];
subgraph cluster_LoopRegion_148918646 {
label = "LOOP:0: (3:3|(2:(1:8)|9)|11)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0008|LOOP_START\lLOOP:0: B:20:0x0008\-\>B:28:0x002b\lPHI: r0 r1 \l  PHI: (r0v1 'result' java.util.ArrayList\<T\>) = (r0v0 'result' java.util.ArrayList\<T\>), (r0v2 'result' java.util.ArrayList\<T\>) binds: [B:19:0x0000, B:28:0x002b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:19:0x0000, B:28:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r2) goto L3\l}"];
subgraph cluster_Region_678969710 {
label = "R(3:3|(2:(1:8)|9)|11)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x000a|java.util.ArrayList java.util.ArrayList\<T\> r3 = r5.mGraph.valueAt(r1)\l}"];
subgraph cluster_IfRegion_2017488022 {
label = "IF [B:22:0x0012, B:24:0x0018] THEN: R(2:(1:8)|9) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0012|if (r3 != null) goto L5\l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|ADDED_TO_REGION\l|if (r3.contains(r6) != false) goto L7\l}"];
subgraph cluster_Region_845273562 {
label = "R(2:(1:8)|9)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_531228711 {
label = "IF [B:25:0x001a] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x001a|if (r0 == null) goto L8\l}"];
subgraph cluster_Region_707871021 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x001c|r0 = new java.util.ArrayList\<\>()\l}"];
}
}
Node_27 [shape=record,label="{27\:\ 0x0022|PHI: r0 \l  PHI: (r0v3 'result' java.util.ArrayList\<T\>) = (r0v1 'result' java.util.ArrayList\<T\>), (r0v4 'result' java.util.ArrayList\<T\>) binds: [B:25:0x001a, B:26:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|r0.add(r5.mGraph.keyAt(r1))\l}"];
}
}
Node_28 [shape=record,label="{28\:\ 0x002b|LOOP_END\lLOOP:0: B:20:0x0008\-\>B:28:0x002b\lPHI: r0 \l  PHI: (r0v2 'result' java.util.ArrayList\<T\>) = (r0v1 'result' java.util.ArrayList\<T\>), (r0v1 'result' java.util.ArrayList\<T\>), (r0v3 'result' java.util.ArrayList\<T\>) binds: [B:32:0x002b, B:33:0x002b, B:31:0x002b] A[DONT_GENERATE, DONT_INLINE]\l|r1++\l}"];
}
}
Node_29 [shape=record,label="{29\:\ 0x002e|RETURN\l|return r0\l}"];
}
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0014}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x002b|SYNTHETIC\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x002b|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x002b|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x002e|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> androidx.coordinatorlayout.widget.DirectedAcyclicGraph.getOutgoingEdges((r5v0 'this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\> A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>), IMMUTABLE_TYPE, THIS]), (r6v0 'node' T A[D('node' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x002b \-\> B:20:0x0008, CROSS_EDGE: B:25:0x001a \-\> B:27:0x0022, CROSS_EDGE: B:24:0x0018 \-\> B:28:0x002b, CROSS_EDGE: B:22:0x0012 \-\> B:28:0x002b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_17;Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_30[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_32[style=dashed];
Node_24 -> Node_25;
Node_24 -> Node_33[style=dashed];
Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_31;
Node_28 -> Node_20;
Node_29 -> Node_18;
Node_17 -> Node_19;
Node_23 -> Node_24;
Node_31 -> Node_28;
Node_33 -> Node_28;
Node_32 -> Node_28;
Node_30 -> Node_29;
}

