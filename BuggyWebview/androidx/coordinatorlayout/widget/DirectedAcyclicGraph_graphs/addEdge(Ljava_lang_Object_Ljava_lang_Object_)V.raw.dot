digraph "CFG forandroidx.coordinatorlayout.widget.DirectedAcyclicGraph.addEdge(Ljava\/lang\/Object;Ljava\/lang\/Object;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:androidx.collection.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = \l  (r2 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l androidx.coordinatorlayout.widget.DirectedAcyclicGraph.mGraph androidx.collection.SimpleArrayMap  (LINE:76)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:androidx.collection.SimpleArrayMap), (r3 I:java.lang.Object A[D('node' T)]) type: VIRTUAL call: androidx.collection.SimpleArrayMap.containsKey(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0027 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IGET  (r0 I:androidx.collection.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = \l  (r2 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l androidx.coordinatorlayout.widget.DirectedAcyclicGraph.mGraph androidx.collection.SimpleArrayMap \l0x000a: INVOKE  (r0 I:boolean) = (r0 I:androidx.collection.SimpleArrayMap), (r4 I:java.lang.Object A[D('incomingEdge' T)]) type: VIRTUAL call: androidx.collection.SimpleArrayMap.containsKey(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0027 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|0x0010: IGET  (r0 I:androidx.collection.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = \l  (r2 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l androidx.coordinatorlayout.widget.DirectedAcyclicGraph.mGraph androidx.collection.SimpleArrayMap  (LINE:81)\l0x0012: INVOKE  (r0 I:java.lang.Object) = (r0 I:androidx.collection.SimpleArrayMap), (r3 I:java.lang.Object A[D('node' T)]) type: VIRTUAL call: androidx.collection.SimpleArrayMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (m)]\l0x0016: CHECK_CAST (r0 I:java.util.ArrayList) = (java.util.ArrayList) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('edges' java.util.ArrayList\<T\>)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0023  (LINE:82)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|0x001a: INVOKE  (r0 I:java.util.ArrayList A[D('edges' java.util.ArrayList\<T\>)]) = \l  (r2 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l type: DIRECT call: androidx.coordinatorlayout.widget.DirectedAcyclicGraph.getEmptyList():java.util.ArrayList A[MD:():java.util.ArrayList\<T\> (m)] (LINE:84)\l0x001e: IGET  (r1 I:androidx.collection.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = \l  (r2 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l androidx.coordinatorlayout.widget.DirectedAcyclicGraph.mGraph androidx.collection.SimpleArrayMap  (LINE:85)\l0x0020: INVOKE  \l  (r1 I:androidx.collection.SimpleArrayMap)\l  (r3 I:java.lang.Object A[D('node' T)])\l  (r0 I:java.lang.Object A[D('edges' java.util.ArrayList\<T\>)])\l type: VIRTUAL call: androidx.collection.SimpleArrayMap.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0023|0x0023: INVOKE  (r0 I:java.util.ArrayList A[D('edges' java.util.ArrayList\<T\>)]), (r4 I:java.lang.Object A[D('incomingEdge' T)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:88)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|RETURN\l|0x0026: RETURN    (LINE:89)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|0x0027: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('edges' java.util.ArrayList\<T\>)]) =  java.lang.IllegalArgumentException  (LINE:77)\l0x0029: CONST_STR  (r1 I:java.lang.String) =  \"All nodes must be present in the graph before being added as an edge\" \l0x002b: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x002e|0x002e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.coordinatorlayout.widget.DirectedAcyclicGraph.addEdge((r2 'this' I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\> A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>), IMMUTABLE_TYPE, THIS]), (r3 I:T A[D('node' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[D('incomingEdge' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0018 \-\> B:22:0x0023, CROSS_EDGE: B:25:0x002e \-\> B:14:?, CROSS_EDGE: B:16:0x0006 \-\> B:24:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x0027: r0 'edges' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<TT;\>;\l  0x0000\-0x002e: r2 'this' Landroidx\/coordinatorlayout\/widget\/DirectedAcyclicGraph;, signature: Landroidx\/coordinatorlayout\/widget\/DirectedAcyclicGraph\<TT;\>;\l  0x0000\-0x002e: r3 'node' Ljava\/lang\/Object;, signature: TT;\l  0x0000\-0x002e: r4 'incomingEdge' Ljava\/lang\/Object;, signature: TT;\lTYPE_VARS: [T]\lSIGNATURE: (TT;TT;)V\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

