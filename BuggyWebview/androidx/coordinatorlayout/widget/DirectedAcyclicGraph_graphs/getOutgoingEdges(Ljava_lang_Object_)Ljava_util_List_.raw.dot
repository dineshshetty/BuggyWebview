digraph "CFG forandroidx.coordinatorlayout.widget.DirectedAcyclicGraph.getOutgoingEdges(Ljava\/lang\/Object;)Ljava\/util\/List;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:109)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:110)\l0x0002: IGET  (r2 I:androidx.collection.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = \l  (r5 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l androidx.coordinatorlayout.widget.DirectedAcyclicGraph.mGraph androidx.collection.SimpleArrayMap \l0x0004: INVOKE  (r2 I:int) = (r2 I:androidx.collection.SimpleArrayMap) type: VIRTUAL call: androidx.collection.SimpleArrayMap.size():int A[MD:():int (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|LOOP_START\lLOOP:0: B:20:0x0008\-\>B:28:0x002b\l|0x0008: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:30:0x002e \l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: IGET  (r3 I:androidx.collection.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = \l  (r5 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l androidx.coordinatorlayout.widget.DirectedAcyclicGraph.mGraph androidx.collection.SimpleArrayMap  (LINE:111)\l0x000c: INVOKE  (r3 I:java.lang.Object) = (r3 I:androidx.collection.SimpleArrayMap), (r1 I:int A[D('i' int)]) type: VIRTUAL call: androidx.collection.SimpleArrayMap.valueAt(int):java.lang.Object A[MD:(int):V (m)]\l0x0010: CHECK_CAST (r3 I:java.util.ArrayList) = (java.util.ArrayList) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('edges' java.util.ArrayList\<T\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x002b  (LINE:112)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: INVOKE  (r4 I:boolean) = (r3 I:java.util.ArrayList A[D('edges' java.util.ArrayList\<T\>)]), (r6 I:java.lang.Object A[D('node' T)]) type: VIRTUAL call: java.util.ArrayList.contains(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|0x0018: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002b \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' java.util.ArrayList\<T\>)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0022  (LINE:113)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001c|0x001c: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:114)\l0x001e: INVOKE  (r4 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0021: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList\<T\>)]) = (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0022|0x0022: IGET  (r4 I:androidx.collection.SimpleArrayMap\<T, java.util.ArrayList\<T\>\>) = \l  (r5 I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>)])\l androidx.coordinatorlayout.widget.DirectedAcyclicGraph.mGraph androidx.collection.SimpleArrayMap  (LINE:116)\l0x0024: INVOKE  (r4 I:java.lang.Object) = (r4 I:androidx.collection.SimpleArrayMap), (r1 I:int A[D('i' int)]) type: VIRTUAL call: androidx.collection.SimpleArrayMap.keyAt(int):java.lang.Object A[MD:(int):K (m)]\l0x0028: INVOKE  (r0 I:java.util.ArrayList A[D('result' java.util.ArrayList\<T\>)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x002b|LOOP_END\lLOOP:0: B:20:0x0008\-\>B:28:0x002b\l|0x002b: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:110)\l}"];
Node_33 [shape=record,label="{33\:\ 0x002b|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002b|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x002e|RETURN\l|0x002e: RETURN  (r0 I:java.util.List\<T\> A[D('result' java.util.ArrayList\<T\>)])  (LINE:119)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.List\<T\> androidx.coordinatorlayout.widget.DirectedAcyclicGraph.getOutgoingEdges((r5 'this' I:androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\> A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>), IMMUTABLE_TYPE, THIS]), (r6 I:T A[D('node' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x002b \-\> B:20:0x0008, CROSS_EDGE: B:25:0x001a \-\> B:27:0x0022, CROSS_EDGE: B:24:0x0018 \-\> B:28:0x002b, CROSS_EDGE: B:22:0x0012 \-\> B:28:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x002b: r3 'edges' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<TT;\>;\l  0x0002\-0x002e: r1 'i' I\l  0x0008\-0x002e: r2 'size' I\l  0x0001\-0x002e: r0 'result' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<TT;\>;\l  0x0000\-0x002e: r5 'this' Landroidx\/coordinatorlayout\/widget\/DirectedAcyclicGraph;, signature: Landroidx\/coordinatorlayout\/widget\/DirectedAcyclicGraph\<TT;\>;\l  0x0000\-0x002e: r6 'node' Ljava\/lang\/Object;, signature: TT;\lTYPE_VARS: [T]\lSIGNATURE: (TT;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_30;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_33;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_31;
Node_31 -> Node_28;
Node_28 -> Node_20;
Node_33 -> Node_28;
Node_32 -> Node_28;
Node_30 -> Node_29;
Node_29 -> Node_18;
}

