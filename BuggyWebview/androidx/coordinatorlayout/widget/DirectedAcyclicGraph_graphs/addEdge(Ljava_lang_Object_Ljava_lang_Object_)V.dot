digraph "CFG forandroidx.coordinatorlayout.widget.DirectedAcyclicGraph.addEdge(Ljava\/lang\/Object;Ljava\/lang\/Object;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0006|if (r2.mGraph.containsKey(r3) == false) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008}"];
Node_18 [shape=record,label="{18\:\ 0x000e|if (r2.mGraph.containsKey(r4) == false) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|java.util.ArrayList r0 = r2.mGraph.get(r3)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|if (r0 != null) goto L8\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|java.util.ArrayList r0 = getEmptyList()\lr2.mGraph.put(r3, r0)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0023|PHI: r0 \l  PHI: (r0v8 'edges' java.util.ArrayList\<T\>) = (r0v7 'edges' java.util.ArrayList\<T\>), (r0v9 'edges' java.util.ArrayList\<T\>) binds: [B:20:0x0018, B:21:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|r0.add(r4)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027}"];
Node_25 [shape=record,label="{25\:\ 0x002e|throw new java.lang.IllegalArgumentException(\"All nodes must be present in the graph before being added as an edge\")\l}"];
MethodNode[shape=record,label="{public void androidx.coordinatorlayout.widget.DirectedAcyclicGraph.addEdge((r2v0 'this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\> A[D('this' androidx.coordinatorlayout.widget.DirectedAcyclicGraph\<T\>), IMMUTABLE_TYPE, THIS]), (r3v0 'node' T A[D('node' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'incomingEdge' T A[D('incomingEdge' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0018 \-\> B:22:0x0023, CROSS_EDGE: B:25:0x002e \-\> B:14:?, CROSS_EDGE: B:16:0x0006 \-\> B:24:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;TT;)V\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

