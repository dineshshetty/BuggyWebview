digraph "CFG forandroidx.coordinatorlayout.widget.CoordinatorLayout.acquireTempRect()Landroid\/graphics\/Rect;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:androidx.core.util.Pools$Pool\<android.graphics.Rect\>) =  androidx.coordinatorlayout.widget.CoordinatorLayout.sRectPool androidx.core.util.Pools$Pool  (LINE:156)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:androidx.core.util.Pools$Pool) type: INTERFACE call: androidx.core.util.Pools.Pool.acquire():java.lang.Object A[MD:():T (m)]\l0x0006: CHECK_CAST (r0 I:android.graphics.Rect) = (android.graphics.Rect) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rect' android.graphics.Rect)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:157)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: NEW_INSTANCE  (r1 I:android.graphics.Rect) =  android.graphics.Rect  (LINE:158)\l0x000c: INVOKE  (r1 I:android.graphics.Rect) type: DIRECT call: android.graphics.Rect.\<init\>():void A[MD:():void (c)]\l0x000f: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('rect' android.graphics.Rect)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: RETURN  (r0 I:android.graphics.Rect A[D('rect' android.graphics.Rect)])  (LINE:160)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0010: RETURN  (r0 I:android.graphics.Rect A[D('rect' android.graphics.Rect)]) A[SYNTHETIC] (LINE:160)\l}"];
MethodNode[shape=record,label="{private static android.graphics.Rect androidx.coordinatorlayout.widget.CoordinatorLayout.acquireTempRect()  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0008 \-\> B:12:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0010: r0 'rect' Landroid\/graphics\/Rect;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

