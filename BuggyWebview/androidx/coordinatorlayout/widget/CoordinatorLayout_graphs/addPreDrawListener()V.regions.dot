digraph "CFG forandroidx.coordinatorlayout.widget.CoordinatorLayout.addPreDrawListener()V" {
subgraph cluster_Region_2044287183 {
label = "R(2:(2:(1:5)|6)|7)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_930448176 {
label = "IF [B:13:0x0002] THEN: R(2:(1:5)|6) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0002|if (r2.mIsAttachedToWindow != false) goto L3\l}"];
subgraph cluster_Region_344311614 {
label = "R(2:(1:5)|6)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_858392417 {
label = "IF [B:15:0x0006] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0006|if (r2.mOnPreDrawListener == null) goto L5\l}"];
subgraph cluster_Region_314836262 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0008|r2.mOnPreDrawListener = new androidx.coordinatorlayout.widget.CoordinatorLayout.OnPreDrawListener()\l}"];
}
}
Node_17 [shape=record,label="{17\:\ 0x000f|android.view.ViewTreeObserver android.view.ViewTreeObserver r0 = getViewTreeObserver()\lr0.addOnPreDrawListener(r2.mOnPreDrawListener)\l}"];
}
}
Node_18 [shape=record,label="{18\:\ 0x0018|r2.mNeedsPreDrawListener = true\l}"];
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0004}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x001b}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.coordinatorlayout.widget.CoordinatorLayout.addPreDrawListener((r2v0 'this' androidx.coordinatorlayout.widget.CoordinatorLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0006 \-\> B:17:0x000f, CROSS_EDGE: B:13:0x0002 \-\> B:18:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_19 -> Node_11;
}

