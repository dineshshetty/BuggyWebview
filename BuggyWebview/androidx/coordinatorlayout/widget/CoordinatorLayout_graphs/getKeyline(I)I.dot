digraph "CFG forandroidx.coordinatorlayout.widget.CoordinatorLayout.getKeyline(I)I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|int[] r0 = r4.mKeylines\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|if (r0 != null) goto L6\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"No keylines defined for \")\lr0.append(r4)\lr0.append(\" \- attempted index lookup \")\lr0.append(r5)\landroid.util.Log.e(androidx.coordinatorlayout.widget.CoordinatorLayout.TAG, r0.toString())\l}"];
Node_19 [shape=record,label="{19\:\ 0x0023|RETURN\l|return 0\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|if (r5 \< 0) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x0026}"];
Node_22 [shape=record,label="{22\:\ 0x0027|if (r5 \< r0.length) goto L9\l}"];
Node_24 [shape=record,label="{24\:\ 0x002a}"];
Node_25 [shape=record,label="{25\:\ 0x002c|RETURN\l|return r0[r5]\l}"];
Node_26 [shape=record,label="{26\:\ 0x002d|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Keyline index \")\lr0.append(r5)\lr0.append(\" out of range for \")\lr0.append(r4)\landroid.util.Log.e(androidx.coordinatorlayout.widget.CoordinatorLayout.TAG, r0.toString())\l}"];
Node_27 [shape=record,label="{27\:\ 0x0049|RETURN\l|return 0\l}"];
MethodNode[shape=record,label="{private int androidx.coordinatorlayout.widget.CoordinatorLayout.getKeyline((r4v0 'this' androidx.coordinatorlayout.widget.CoordinatorLayout A[IMMUTABLE_TYPE, THIS]), (r5v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x002c \-\> B:15:?, CROSS_EDGE: B:27:0x0049 \-\> B:15:?, CROSS_EDGE: B:20:0x0024 \-\> B:26:0x002d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_15;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_26;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_26[style=dashed];
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

