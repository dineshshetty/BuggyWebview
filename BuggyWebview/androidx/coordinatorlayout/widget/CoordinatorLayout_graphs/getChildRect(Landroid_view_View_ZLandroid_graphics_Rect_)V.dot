digraph "CFG forandroidx.coordinatorlayout.widget.CoordinatorLayout.getChildRect(Landroid\/view\/View;ZLandroid\/graphics\/Rect;)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0004|if (r5.isLayoutRequested() != false) goto L11\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006}"];
Node_19 [shape=record,label="{19\:\ 0x000c|if (r5.getVisibility() != 8) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|if (r6 == false) goto L9\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|getDescendantRect(r5, r7)\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|r7.set(r5.getLeft(), r5.getTop(), r5.getRight(), r5.getBottom())\l}"];
Node_24 [shape=record,label="{24\:\ 0x0028|RETURN\lORIG_RETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ 0x0029|r7.setEmpty()\l}"];
Node_26 [shape=record,label="{26\:\ 0x002c|RETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.coordinatorlayout.widget.CoordinatorLayout.getChildRect((r4v0 'this' androidx.coordinatorlayout.widget.CoordinatorLayout A[IMMUTABLE_TYPE, THIS]), (r5v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'transform' boolean A[D('transform' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'out' android.graphics.Rect A[D('out' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0015 \-\> B:24:0x0028, CROSS_EDGE: B:26:0x002c \-\> B:15:?, CROSS_EDGE: B:17:0x0004 \-\> B:25:0x0029\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_25[style=dashed];
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_27;
Node_27 -> Node_15;
Node_23 -> Node_24;
Node_24 -> Node_15;
Node_25 -> Node_26;
Node_26 -> Node_15;
}

