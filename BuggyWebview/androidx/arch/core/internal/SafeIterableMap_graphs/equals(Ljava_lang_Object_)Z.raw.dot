digraph "CFG forandroidx.arch.core.internal.SafeIterableMap.equals(Ljava\/lang\/Object;)Z" {
Node_40 [shape=record,label="{40\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:181)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0001|0x0001: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('obj' java.lang.Object)]) != (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>)])  \-\> B:45:0x0004 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean)  (LINE:182)\l}"];
Node_41 [shape=record,label="{41\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r9 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)]) androidx.arch.core.internal.SafeIterableMap  (LINE:184)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x000a \l}"];
Node_47 [shape=record,label="{47\:\ 0x0009|RETURN\l|0x0009: RETURN  (r2 I:boolean)  (LINE:185)\l}"];
Node_48 [shape=record,label="{48\:\ 0x000a|0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('obj' java.lang.Object)])  (LINE:187)\l0x000b: CHECK_CAST (r1 I:androidx.arch.core.internal.SafeIterableMap) = (androidx.arch.core.internal.SafeIterableMap) (r1 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r3 I:int) = (r8 I:androidx.arch.core.internal.SafeIterableMap A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>)]) type: VIRTUAL call: androidx.arch.core.internal.SafeIterableMap.size():int A[MD:():int (m)] (LINE:188)\l0x0011: INVOKE  (r4 I:int) = (r1 I:androidx.arch.core.internal.SafeIterableMap A[D('map' androidx.arch.core.internal.SafeIterableMap)]) type: VIRTUAL call: androidx.arch.core.internal.SafeIterableMap.size():int A[MD:():int (m)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0018 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0017|RETURN\l|0x0017: RETURN  (r2 I:boolean)  (LINE:189)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0018|0x0018: INVOKE  (r3 I:java.util.Iterator) = (r8 I:androidx.arch.core.internal.SafeIterableMap A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>)]) type: VIRTUAL call: androidx.arch.core.internal.SafeIterableMap.iterator():java.util.Iterator A[MD:():java.util.Iterator\<java.util.Map$Entry\<K, V\>\> (m)] (LINE:191)\l0x001c: INVOKE  (r4 I:java.util.Iterator) = (r1 I:androidx.arch.core.internal.SafeIterableMap A[D('map' androidx.arch.core.internal.SafeIterableMap)]) type: VIRTUAL call: androidx.arch.core.internal.SafeIterableMap.iterator():java.util.Iterator A[MD:():java.util.Iterator\<java.util.Map$Entry\<K, V\>\> (m)] (LINE:192)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0020|LOOP_START\lLOOP:0: B:52:0x0020\-\>B:76:0x0020\l|0x0020: INVOKE  (r5 I:boolean) = (r3 I:java.util.Iterator A[D('iterator1' java.util.Iterator\<java.util.Map$Entry\<K, V\>\>)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:193)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0024|0x0024: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x0044 \l}"];
Node_54 [shape=record,label="{54\:\ 0x0026|0x0026: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator A[D('iterator2' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x002a|0x002a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x0044 \l}"];
Node_56 [shape=record,label="{56\:\ 0x002c|0x002c: INVOKE  (r5 I:java.lang.Object) = (r3 I:java.util.Iterator A[D('iterator1' java.util.Iterator\<java.util.Map$Entry\<K, V\>\>)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:194)\l0x0030: CHECK_CAST (r5 I:java.util.Map$Entry) = (java.util.Map$Entry) (r5 I:??[OBJECT, ARRAY]) \l0x0032: INVOKE  (r6 I:java.lang.Object) = (r4 I:java.util.Iterator A[D('iterator2' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:195)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0036|0x0036: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next1' java.util.Map$Entry\<K, V\>)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x003a  (LINE:196)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0038|0x0038: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next2' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x0042 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0042|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x0042|RETURN\l|0x0042: RETURN  (r2 I:boolean)  (LINE:198)\l}"];
Node_59 [shape=record,label="{59\:\ 0x003a|0x003a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('next1' java.util.Map$Entry\<K, V\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x0020 \l}"];
Node_73 [shape=record,label="{73\:\ 0x003c|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x003c|0x003c: INVOKE  (r7 I:boolean) = \l  (r5 I:java.util.Map$Entry A[D('next1' java.util.Map$Entry\<K, V\>)])\l  (r6 I:java.lang.Object A[D('next2' java.lang.Object)])\l type: INTERFACE call: java.util.Map.Entry.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:197)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0040|0x0040: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0020 \l}"];
Node_75 [shape=record,label="{75\:\ 0x0042|SYNTHETIC\l}"];
Node_78 [shape=record,label="{78\:\ 0x0020|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x0020|LOOP_END\lSYNTHETIC\lLOOP:0: B:52:0x0020\-\>B:76:0x0020\l}"];
Node_77 [shape=record,label="{77\:\ 0x0020|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0044|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0044|0x0044: INVOKE  (r5 I:boolean) = (r3 I:java.util.Iterator A[D('iterator1' java.util.Iterator\<java.util.Map$Entry\<K, V\>\>)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:201)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0048|0x0048: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x0051 \l}"];
Node_66 [shape=record,label="{66\:\ 0x004a|0x004a: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator A[D('iterator2' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_67 [shape=record,label="{67\:\ 0x004e|0x004e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x0051 \l}"];
Node_79 [shape=record,label="{79\:\ ?|SYNTHETIC\lRETURN\l|0x0052: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_69 [shape=record,label="{69\:\ 0x0051|RETURN\lORIG_RETURN\l|0x0051: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0052: RETURN  (r0 I:boolean) \l}"];
Node_71 [shape=record,label="{71\:\ 0x0044|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean androidx.arch.core.internal.SafeIterableMap.equals((r8 'this' I:androidx.arch.core.internal.SafeIterableMap\<K, V\> A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>), IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.Object A[D('obj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:47:0x0009 \-\> B:41:?, CROSS_EDGE: B:50:0x0017 \-\> B:41:?, CROSS_EDGE: B:62:0x0042 \-\> B:41:?, BACK_EDGE: B:61:0x0040 \-\> B:52:0x0020, BACK_EDGE: B:59:0x003a \-\> B:52:0x0020, CROSS_EDGE: B:58:0x0038 \-\> B:62:0x0042, CROSS_EDGE: B:57:0x0036 \-\> B:59:0x003a, CROSS_EDGE: B:70:0x0052 \-\> B:41:?, CROSS_EDGE: B:67:0x004e \-\> B:70:0x0052, CROSS_EDGE: B:65:0x0048 \-\> B:69:0x0051, CROSS_EDGE: B:53:0x0024 \-\> B:64:0x0044\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0032\-0x0043: r5 'next1' Ljava\/util\/Map$Entry;, signature: Ljava\/util\/Map$Entry\<TK;TV;\>;\l  0x0036\-0x0043: r6 'next2' Ljava\/lang\/Object;\l  0x000d\-0x0052: r1 'map' Landroidx\/arch\/core\/internal\/SafeIterableMap;\l  0x001c\-0x0052: r3 'iterator1' Ljava\/util\/Iterator;, signature: Ljava\/util\/Iterator\<Ljava\/util\/Map$Entry\<TK;TV;\>;\>;\l  0x0020\-0x0052: r4 'iterator2' Ljava\/util\/Iterator;\l  0x0000\-0x0052: r8 'this' Landroidx\/arch\/core\/internal\/SafeIterableMap;, signature: Landroidx\/arch\/core\/internal\/SafeIterableMap\<TK;TV;\>;\l  \-1 \-0x0052: r9 'obj' Ljava\/lang\/Object;\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_40;Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_41;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_41;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_41;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_71;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_74;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_72;
Node_72 -> Node_62;
Node_62 -> Node_41;
Node_59 -> Node_73[style=dashed];
Node_59 -> Node_77;
Node_73 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_75[style=dashed];
Node_61 -> Node_78;
Node_75 -> Node_62;
Node_78 -> Node_76;
Node_76 -> Node_52;
Node_77 -> Node_76;
Node_74 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_69;
Node_66 -> Node_67;
Node_67 -> Node_69;
Node_67 -> Node_79[style=dashed];
Node_79 -> Node_41;
Node_69 -> Node_41;
Node_71 -> Node_64;
}

