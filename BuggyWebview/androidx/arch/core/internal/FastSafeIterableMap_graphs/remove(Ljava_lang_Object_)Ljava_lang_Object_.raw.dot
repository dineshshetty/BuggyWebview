digraph "CFG forandroidx.arch.core.internal.FastSafeIterableMap.remove(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:androidx.arch.core.internal.SafeIterableMap A[D('this' androidx.arch.core.internal.FastSafeIterableMap\<K, V\>)])\l  (r3 I:java.lang.Object A[D('key' K)])\l type: SUPER call: androidx.arch.core.internal.SafeIterableMap.remove(java.lang.Object):java.lang.Object A[MD:(K):V (m)] (LINE:56)\l0x0004: IGET  (r1 I:java.util.HashMap\<K, androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\>\>) = \l  (r2 I:androidx.arch.core.internal.FastSafeIterableMap A[D('this' androidx.arch.core.internal.FastSafeIterableMap\<K, V\>)])\l androidx.arch.core.internal.FastSafeIterableMap.mHashMap java.util.HashMap  (LINE:57)\l0x0006: INVOKE  (r1 I:java.util.HashMap), (r3 I:java.lang.Object A[D('key' K)]) type: VIRTUAL call: java.util.HashMap.remove(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:V A[D('removed' V)])  (LINE:58)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public V androidx.arch.core.internal.FastSafeIterableMap.remove((r2 'this' I:androidx.arch.core.internal.FastSafeIterableMap\<K, V\> A[D('this' androidx.arch.core.internal.FastSafeIterableMap\<K, V\>), IMMUTABLE_TYPE, THIS]), (r3 I:K A[D('key' K), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0009: r0 'removed' Ljava\/lang\/Object;, signature: TV;\l  0x0000\-0x0009: r2 'this' Landroidx\/arch\/core\/internal\/FastSafeIterableMap;, signature: Landroidx\/arch\/core\/internal\/FastSafeIterableMap\<TK;TV;\>;\l  0x0000\-0x0009: r3 'key' Ljava\/lang\/Object;, signature: TK;\lTYPE_VARS: [V, K]\lSIGNATURE: (TK;)TV;\lMETHOD_OVERRIDE: [androidx.arch.core.internal.SafeIterableMap.remove(K):V]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

