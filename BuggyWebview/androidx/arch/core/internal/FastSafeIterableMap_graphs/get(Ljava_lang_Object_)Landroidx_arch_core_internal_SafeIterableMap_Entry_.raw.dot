digraph "CFG forandroidx.arch.core.internal.FastSafeIterableMap.get(Ljava\/lang\/Object;)Landroidx\/arch\/core\/internal\/SafeIterableMap$Entry;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:java.util.HashMap\<K, androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\>\>) = \l  (r1 I:androidx.arch.core.internal.FastSafeIterableMap A[D('this' androidx.arch.core.internal.FastSafeIterableMap\<K, V\>)])\l androidx.arch.core.internal.FastSafeIterableMap.mHashMap java.util.HashMap  (LINE:41)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r2 I:java.lang.Object A[D('k' K)]) type: VIRTUAL call: java.util.HashMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0006: CHECK_CAST (r0 I:androidx.arch.core.internal.SafeIterableMap$Entry) = (androidx.arch.core.internal.SafeIterableMap$Entry) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\> androidx.arch.core.internal.FastSafeIterableMap.get((r1 'this' I:androidx.arch.core.internal.FastSafeIterableMap\<K, V\> A[D('this' androidx.arch.core.internal.FastSafeIterableMap\<K, V\>), IMMUTABLE_TYPE, THIS]), (r2 I:K A[D('k' K), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x0008: r1 'this' Landroidx\/arch\/core\/internal\/FastSafeIterableMap;, signature: Landroidx\/arch\/core\/internal\/FastSafeIterableMap\<TK;TV;\>;\l  0x0000\-0x0008: r2 'k' Ljava\/lang\/Object;, signature: TK;\lTYPE_VARS: [V, K]\lSIGNATURE: (TK;)Landroidx\/arch\/core\/internal\/SafeIterableMap$Entry\<TK;TV;\>;\lMETHOD_OVERRIDE: [androidx.arch.core.internal.SafeIterableMap.get(K):androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

