digraph "CFG forandroidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.supportRemove(Landroidx\/arch\/core\/internal\/SafeIterableMap$Entry;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\> r0 = r1.mCurrent\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|if (r2 != r0) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\> r0 = r0.mPrevious\lr1.mCurrent = r0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|if (r0 != null) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|r0 = true\l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v4 boolean) binds: [B:18:0x000c, B:17:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|r1.mBeforeStart = r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|RETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|r0 = false\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.supportRemove((r1v0 'this' androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>$IteratorWithAdditions), IMMUTABLE_TYPE, THIS]), (r2v0 'entry' androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\> A[D('entry' androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000c \-\> B:19:0x000d, CROSS_EDGE: B:14:0x0002 \-\> B:20:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: (Landroidx\/arch\/core\/internal\/SafeIterableMap$Entry\<TK;TV;\>;)V\lMETHOD_OVERRIDE: [androidx.arch.core.internal.SafeIterableMap.SupportRemove.supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\>):void]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_18 -> Node_19;
Node_21 -> Node_12;
}

