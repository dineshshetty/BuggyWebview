digraph "CFG forandroidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.\<init\>(Landroidx\/arch\/core\/internal\/SafeIterableMap;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IPUT  \l  (r1 I:androidx.arch.core.internal.SafeIterableMap)\l  (r0 I:androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>$IteratorWithAdditions)])\l androidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.this$0 androidx.arch.core.internal.SafeIterableMap  (LINE:318)\l0x0002: INVOKE  (r0 I:java.lang.Object A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>$IteratorWithAdditions)]) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)]\l0x0005: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:316)\l0x0006: IPUT  \l  (r1 I:boolean)\l  (r0 I:androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>$IteratorWithAdditions)])\l androidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.mBeforeStart boolean \l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:319)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.\<init\>((r0 'this' I:androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>$IteratorWithAdditions), IMMUTABLE_TYPE, THIS]), (r1 I:androidx.arch.core.internal.SafeIterableMap A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | SKIP_FIRST_ARG\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0000\-0x0008: r0 'this' Landroidx\/arch\/core\/internal\/SafeIterableMap$IteratorWithAdditions;, signature: Landroidx\/arch\/core\/internal\/SafeIterableMap\<TK;TV;\>.IteratorWithAdditions;\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

