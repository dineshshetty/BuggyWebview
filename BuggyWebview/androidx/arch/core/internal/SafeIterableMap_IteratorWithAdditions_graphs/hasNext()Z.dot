digraph "CFG forandroidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.hasNext()Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000}"];
Node_21 [shape=record,label="{21\:\ 0x0004|if (r3.mBeforeStart == false) goto L8\l}"];
Node_22 [shape=record,label="{22\:\ 0x0006}"];
Node_23 [shape=record,label="{23\:\ 0x000a|if (androidx.arch.core.internal.SafeIterableMap.this.mStart == null) goto L5\l}"];
Node_25 [shape=record,label="{25\:\ 0x000d|RETURN\lORIG_RETURN\l|return false\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_27 [shape=record,label="{27\:\ 0x000f|androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\> r0 = r3.mCurrent\l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|if (r0 == null) goto L13\l}"];
Node_29 [shape=record,label="{29\:\ 0x0013}"];
Node_30 [shape=record,label="{30\:\ 0x0015|if (r0.mNext == null) goto L13\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.arch.core.internal.SafeIterableMap.IteratorWithAdditions.hasNext((r3v0 'this' androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions A[D('this' androidx.arch.core.internal.SafeIterableMap\<K, V\>$IteratorWithAdditions), IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:23:0x000a \-\> B:26:0x000e, CROSS_EDGE: B:33:0x0019 \-\> B:19:?, CROSS_EDGE: B:30:0x0015 \-\> B:33:0x0019, CROSS_EDGE: B:28:0x0011 \-\> B:32:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_34[style=dashed];
Node_25 -> Node_19;
Node_34 -> Node_19;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_35[style=dashed];
Node_35 -> Node_19;
Node_32 -> Node_19;
}

