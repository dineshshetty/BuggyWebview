digraph "CFG forandroidx.arch.core.internal.SafeIterableMap.Entry.equals(Ljava\/lang\/Object;)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000}"];
Node_19 [shape=record,label="{19\:\ 0x0001|if (r6 != r5) goto L5\l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|RETURN\l|return true\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0004}"];
Node_22 [shape=record,label="{22\:\ 0x0007|if ((r6 instanceof androidx.arch.core.internal.SafeIterableMap.Entry) != false) goto L8\l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|RETURN\l|return false\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|androidx.arch.core.internal.SafeIterableMap$Entry r1 = (androidx.arch.core.internal.SafeIterableMap.Entry) r6\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|if (r5.mKey.equals(r1.mKey) == false) goto L13\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017}"];
Node_27 [shape=record,label="{27\:\ 0x001f|if (r5.mValue.equals(r1.mValue) == false) goto L13\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_29 [shape=record,label="{29\:\ 0x0022|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.arch.core.internal.SafeIterableMap.Entry.equals((r5v0 'this' androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\> A[D('this' androidx.arch.core.internal.SafeIterableMap$Entry\<K, V\>), IMMUTABLE_TYPE, THIS]), (r6v0 'obj' java.lang.Object A[D('obj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:23:0x0009 \-\> B:17:?, CROSS_EDGE: B:30:0x0023 \-\> B:17:?, CROSS_EDGE: B:27:0x001f \-\> B:30:0x0023, CROSS_EDGE: B:25:0x0015 \-\> B:29:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Map.Entry.equals(java.lang.Object):boolean\}]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_31 -> Node_17;
Node_29 -> Node_17;
}

