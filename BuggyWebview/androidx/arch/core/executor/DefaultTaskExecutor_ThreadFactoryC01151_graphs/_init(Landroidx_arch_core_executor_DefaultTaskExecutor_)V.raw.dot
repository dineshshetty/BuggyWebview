digraph "CFG forandroidx.arch.core.executor.DefaultTaskExecutor.1.\<init\>(Landroidx\/arch\/core\/executor\/DefaultTaskExecutor;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IPUT  \l  (r3 I:androidx.arch.core.executor.DefaultTaskExecutor A[D('this$0' androidx.arch.core.executor.DefaultTaskExecutor)])\l  (r2 I:androidx.arch.core.executor.DefaultTaskExecutor$1)\l androidx.arch.core.executor.DefaultTaskExecutor.1.this$0 androidx.arch.core.executor.DefaultTaskExecutor  (LINE:41)\l0x0002: INVOKE  (r2 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)]\l0x0005: NEW_INSTANCE  (r0 I:java.util.concurrent.atomic.AtomicInteger) =  java.util.concurrent.atomic.AtomicInteger  (LINE:44)\l0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r0 I:java.util.concurrent.atomic.AtomicInteger), (r1 I:int) type: DIRECT call: java.util.concurrent.atomic.AtomicInteger.\<init\>(int):void A[MD:(int):void (c)]\l0x000b: IPUT  (r0 I:java.util.concurrent.atomic.AtomicInteger), (r2 I:androidx.arch.core.executor.DefaultTaskExecutor$1) androidx.arch.core.executor.DefaultTaskExecutor.1.mThreadId java.util.concurrent.atomic.AtomicInteger \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|0x000d: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.arch.core.executor.DefaultTaskExecutor.1.\<init\>((r2 'this' I:androidx.arch.core.executor.DefaultTaskExecutor$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:androidx.arch.core.executor.DefaultTaskExecutor A[D('this$0' androidx.arch.core.executor.DefaultTaskExecutor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lSKIP_FIRST_ARG\lNO_SKIP_ARGS\lANONYMOUS_CONSTRUCTOR\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r3 'this$0' Landroidx\/arch\/core\/executor\/DefaultTaskExecutor;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

