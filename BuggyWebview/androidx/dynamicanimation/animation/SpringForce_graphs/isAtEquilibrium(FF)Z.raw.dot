digraph "CFG forandroidx.dynamicanimation.animation.SpringForce.isAtEquilibrium(FF)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:float) = (r7 I:float A[D('velocity' float)]) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)] (LINE:232)\l0x0004: CAST (r0 I:double) = (double) (r0 I:float) \l0x0005: IGET  (r2 I:double) = (r5 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mVelocityThreshold double \l0x0007: CMP_G  (r4 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:19:0x001e \l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: INVOKE  (r0 I:float) = (r5 I:androidx.dynamicanimation.animation.SpringForce) type: VIRTUAL call: androidx.dynamicanimation.animation.SpringForce.getFinalPosition():float A[MD:():float (m)] (LINE:233)\l0x000f: ARITH  (r0 I:float) = (r6 I:float A[D('value' float)]) \- (r0 I:float) \l0x0011: INVOKE  (r0 I:float) = (r0 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x0015: CAST (r0 I:double) = (double) (r0 I:float) \l0x0016: IGET  (r2 I:double) = (r5 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mValueThreshold double \l0x0018: CMP_G  (r4 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x001a|0x001a: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:21:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|RETURN\l|0x001c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:234)\l0x001d: RETURN  (r0 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x001e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:236)\l0x001f: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:236)\l0x001f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.dynamicanimation.animation.SpringForce.isAtEquilibrium((r5 'this' I:androidx.dynamicanimation.animation.SpringForce A[IMMUTABLE_TYPE, THIS]), (r6 I:float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('velocity' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x001f \-\> B:12:?, CROSS_EDGE: B:14:0x0009 \-\> B:19:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001f: r6 'value' F\l  \-1 \-0x001f: r7 'velocity' F\lMETHOD_OVERRIDE: [androidx.dynamicanimation.animation.Force.isAtEquilibrium(float, float):boolean]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_12;
Node_21 -> Node_12;
Node_19 -> Node_12;
}

