digraph "CFG forandroidx.dynamicanimation.animation.SpringForce.updateValues(DDJ)Landroidx\/dynamicanimation\/animation\/DynamicAnimation$MassState;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r21 I:??[OBJECT, ARRAY])  (LINE:276)\l0x0002: INVOKE  (r21 I:androidx.dynamicanimation.animation.SpringForce) type: DIRECT call: androidx.dynamicanimation.animation.SpringForce.init():void A[MD:():void (m)]\l0x0005: MOVE  (r1 I:??[long, double]) = (r26 I:??[long, double] A[D('timeElapsed' long)])  (LINE:278)\l0x0007: CAST (r3 I:double) = (double) (r1 I:long) \l0x0008: CONST  (r5 I:??[long, double]) = (4652007308841189376(0x408f400000000000, double:1000.0) ??[long, double]) \l0x000d: ARITH  (r3 I:double) = (r3 I:double) \/ (r5 I:double) \l0x000e: IGET  (r5 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mFinalPosition double  (LINE:279)\l0x0010: ARITH  (r5 I:double) = (r22 I:double A[D('lastDisplacement' double)]) \- (r5 I:double) \l0x0012: IGET  (r7 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mDampingRatio double  (LINE:282)\l0x0014: CONST  (r9 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double]) \l0x0016: CONST  (r11 I:??[long, double]) = (4613303445314885481(0x4005bf0a8b145769, double:2.718281828459045) ??[long, double]) \l0x001b: CMP_L  (r13 I:int) = (r7 I:double), (r9 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|0x001d: IF  (r13 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:16:0x0065 \l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|0x001f: IGET  (r7 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mGammaMinus double  (LINE:284)\l0x0021: ARITH  (r9 I:double) = (r7 I:double) * (r5 I:double A[D('lastDisplacement' double)]) \l0x0023: ARITH  (r9 I:double) = (r9 I:double) \- (r24 I:double A[D('lastVelocity' double)]) \l0x0025: IGET  (r13 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mGammaPlus double \l0x0027: ARITH  (r15 I:double) = (r7 I:double) \- (r13 I:double) \l0x0029: ARITH  (r9 I:double) = (r9 I:double) \/ (r15 I:double) \l0x002a: ARITH  (r9 I:double) = (r5 I:double A[D('lastDisplacement' double)]) \- (r9 I:double) \l0x002c: ARITH  (r15 I:double) = (r7 I:double) * (r5 I:double A[D('lastDisplacement' double)])  (LINE:286)\l0x002e: ARITH  (r15 I:double) = (r15 I:double) \- (r24 I:double A[D('lastVelocity' double)]) \l0x0030: ARITH  (r13 I:double) = (r7 I:double) \- (r13 I:double) \l0x0032: ARITH  (r15 I:double) = (r15 I:double) \/ (r13 I:double) \l0x0033: ARITH  (r7 I:double) = (r7 I:double) * (r3 I:double A[D('deltaT' double)])  (LINE:288)\l0x0035: INVOKE  (r7 I:double) = (r11 I:double), (r7 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)]\l0x0039: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double A[D('coeffA' double)]) \l0x003b: IGET  (r13 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mGammaPlus double \l0x003d: ARITH  (r13 I:double) = (r13 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x003f: INVOKE  (r13 I:double) = (r11 I:double), (r13 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)] (LINE:289)\l0x0043: ARITH  (r13 I:double) = (r13 I:double) * (r15 I:double A[D('coeffB' double)]) \l0x0045: ARITH  (r7 I:double) = (r7 I:double) + (r13 I:double) \l0x0046: IGET  (r13 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mGammaMinus double  (LINE:290)\l0x0048: ARITH  (r17 I:double) = (r9 I:double A[D('coeffA' double)]) * (r13 I:double) \l0x004a: ARITH  (r13 I:double) = (r13 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x004c: INVOKE  (r13 I:double) = (r11 I:double), (r13 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)]\l0x0050: ARITH  (r17 I:double) = (r17 I:double) * (r13 I:double) \l0x0052: IGET  (r13 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mGammaPlus double \l0x0054: ARITH  (r19 I:double) = (r15 I:double A[D('coeffB' double)]) * (r13 I:double) \l0x0056: ARITH  (r13 I:double) = (r13 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x0058: INVOKE  (r11 I:double) = (r11 I:double), (r13 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)] (LINE:291)\l0x005c: ARITH  (r19 I:double) = (r19 I:double) * (r11 I:double) \l0x005e: ARITH  (r17 I:double) = (r17 I:double) + (r19 I:double) \l0x0060: MOVE  (r15 I:??[long, double] A[D('coeffB' double)]) = (r5 I:??[long, double] A[D('lastDisplacement' double)])  (LINE:292)\l0x0061: MOVE  (r1 I:??[long, double]) = (r17 I:??[long, double] A[D('currentVelocity' double)]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0119|0x0119: IGET  (r5 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:313)\l0x011b: IGET  (r9 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mFinalPosition double \l0x011d: ARITH  (r9 I:double) = (r9 I:double) + (r7 I:double A[D('displacement' double)]) \l0x011e: CAST (r6 I:float) = (float) (r9 I:double) \l0x011f: IPUT  (r6 I:float), (r5 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) androidx.dynamicanimation.animation.DynamicAnimation.MassState.mValue float \l0x0121: IGET  (r5 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:314)\l0x0123: CAST (r6 I:float) = (float) (r1 I:double A[D('currentVelocity' double)]) \l0x0124: IPUT  (r6 I:float), (r5 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) androidx.dynamicanimation.animation.DynamicAnimation.MassState.mVelocity float \l0x0126: IGET  (r5 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:315)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0128|RETURN\l|0x0128: RETURN  (r5 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0065|0x0065: CMP_L  (r13 I:int) = (r7 I:double A[D('displacement' double)]), (r9 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0067|0x0067: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x00a9 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0069|0x0069: MOVE  (r7 I:??[long, double]) = (r5 I:??[long, double] A[D('lastDisplacement' double)])  (LINE:294)\l0x006a: IGET  (r9 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mNaturalFreq double  (LINE:295)\l0x006c: ARITH  (r13 I:double) = (r9 I:double) * (r5 I:double A[D('lastDisplacement' double)]) \l0x006e: ARITH  (r13 I:double) = (r24 I:double A[D('lastVelocity' double)]) + (r13 I:double) \l0x0070: ARITH  (r15 I:double) = (r13 I:double A[D('coeffB' double)]) * (r3 I:double A[D('deltaT' double)])  (LINE:296)\l0x0072: ARITH  (r15 I:double) = (r15 I:double) + (r7 I:double A[D('coeffA' double)]) \l0x0073: NEG  (r9 I:double) = (r9 I:double) \l0x0074: ARITH  (r9 I:double) = (r9 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x0076: INVOKE  (r9 I:double) = (r11 I:double), (r9 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)]\l0x007a: ARITH  (r9 I:double) = (r9 I:double) * (r15 I:double) \l0x007c: ARITH  (r15 I:double) = (r13 I:double A[D('coeffB' double)]) * (r3 I:double A[D('deltaT' double)])  (LINE:297)\l0x007e: ARITH  (r15 I:double) = (r15 I:double) + (r7 I:double A[D('coeffA' double)]) \l0x007f: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mNaturalFreq double \l0x0081: NEG  (r11 I:double) = (r11 I:double) \l0x0082: ARITH  (r11 I:double) = (r11 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x0084: CONST  (r1 I:??[long, double]) = (4613303445314885481(0x4005bf0a8b145769, double:2.718281828459045) ??[long, double]) \l0x0089: INVOKE  (r11 I:double) = (r1 I:double), (r11 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)]\l0x008d: ARITH  (r15 I:double) = (r15 I:double) * (r11 I:double) \l0x008f: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mNaturalFreq double \l0x0091: NEG  (r1 I:double) = (r11 I:double) \l0x0092: ARITH  (r15 I:double) = (r15 I:double) * (r1 I:double) \l0x0094: NEG  (r1 I:double) = (r11 I:double) \l0x0095: ARITH  (r1 I:double) = (r1 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x0097: CONST  (r11 I:??[long, double]) = (4613303445314885481(0x4005bf0a8b145769, double:2.718281828459045) ??[long, double])  (LINE:298)\l0x009c: INVOKE  (r1 I:double) = (r11 I:double), (r1 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)]\l0x00a0: ARITH  (r1 I:double) = (r1 I:double) * (r13 I:double A[D('coeffB' double)]) \l0x00a2: ARITH  (r17 I:double) = (r15 I:double) + (r1 I:double) \l0x00a4: MOVE  (r15 I:??[long, double]) = (r5 I:??[long, double] A[D('lastDisplacement' double)])  (LINE:299)\l0x00a5: MOVE  (r7 I:??[long, double]) = (r9 I:??[long, double] A[D('displacement' double)]) \l0x00a6: MOVE  (r1 I:??[long, double]) = (r17 I:??[long, double] A[D('currentVelocity' double)]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x00a9|0x00a9: MOVE  (r1 I:??[long, double]) = (r5 I:??[long, double] A[D('lastDisplacement' double)])  (LINE:301)\l0x00aa: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mDampedFreq double  (LINE:302)\l0x00ac: ARITH  (r9 I:double) = (r9 I:double) \/ (r11 I:double) \l0x00ad: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mNaturalFreq double \l0x00af: ARITH  (r13 I:double) = (r7 I:double) * (r11 I:double) \l0x00b1: ARITH  (r13 I:double) = (r13 I:double) * (r5 I:double A[D('lastDisplacement' double)]) \l0x00b3: ARITH  (r13 I:double) = (r13 I:double) + (r24 I:double A[D('lastVelocity' double)]) \l0x00b5: ARITH  (r9 I:double) = (r9 I:double) * (r13 I:double) \l0x00b7: NEG  (r7 I:double) = (r7 I:double)  (LINE:304)\l0x00b8: ARITH  (r7 I:double) = (r7 I:double) * (r11 I:double) \l0x00ba: ARITH  (r7 I:double) = (r7 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x00bc: CONST  (r11 I:??[long, double]) = (4613303445314885481(0x4005bf0a8b145769, double:2.718281828459045) ??[long, double]) \l0x00c1: INVOKE  (r7 I:double) = (r11 I:double), (r7 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)]\l0x00c5: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mDampedFreq double \l0x00c7: ARITH  (r11 I:double) = (r11 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x00c9: INVOKE  (r11 I:double) = (r11 I:double) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)] (LINE:305)\l0x00cd: ARITH  (r11 I:double) = (r11 I:double) * (r1 I:double A[D('cosCoeff' double)]) \l0x00cf: IGET  (r13 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mDampedFreq double \l0x00d1: ARITH  (r13 I:double) = (r13 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x00d3: INVOKE  (r13 I:double) = (r13 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)] (LINE:306)\l0x00d7: ARITH  (r13 I:double) = (r13 I:double) * (r9 I:double A[D('sinCoeff' double)]) \l0x00d9: ARITH  (r11 I:double) = (r11 I:double) + (r13 I:double) \l0x00da: ARITH  (r7 I:double) = (r7 I:double) * (r11 I:double) \l0x00dc: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mNaturalFreq double  (LINE:307)\l0x00de: NEG  (r13 I:double) = (r11 I:double) \l0x00df: ARITH  (r13 I:double) = (r13 I:double) * (r7 I:double A[D('displacement' double)]) \l0x00e1: MOVE  (r15 I:??[long, double]) = (r5 I:??[long, double] A[D('lastDisplacement' double)]) \l0x00e2: IGET  (r5 I:double A[D('lastDisplacement' double)]) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mDampingRatio double \l0x00e4: ARITH  (r13 I:double) = (r13 I:double) * (r5 I:double) \l0x00e6: NEG  (r5 I:double) = (r5 I:double) \l0x00e7: ARITH  (r5 I:double) = (r5 I:double) * (r11 I:double) \l0x00e9: ARITH  (r5 I:double) = (r5 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x00eb: CONST  (r11 I:??[long, double]) = (4613303445314885481(0x4005bf0a8b145769, double:2.718281828459045) ??[long, double])  (LINE:308)\l0x00f0: INVOKE  (r5 I:double) = (r11 I:double), (r5 I:double) type: STATIC call: java.lang.Math.pow(double, double):double A[MD:(double, double):double (c)]\l0x00f4: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mDampedFreq double \l0x00f6: MOVE  (r22 I:??[long, double]) = (r7 I:??[long, double] A[D('displacement' double)]) \l0x00f8: NEG  (r7 I:double A[D('displacement' double)]) = (r11 I:double) \l0x00f9: ARITH  (r7 I:double) = (r7 I:double) * (r1 I:double A[D('cosCoeff' double)]) \l0x00fb: ARITH  (r11 I:double) = (r11 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x00fd: INVOKE  (r11 I:double) = (r11 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)] (LINE:309)\l0x0101: ARITH  (r7 I:double) = (r7 I:double) * (r11 I:double) \l0x0103: IGET  (r11 I:double) = (r0 I:androidx.dynamicanimation.animation.SpringForce) androidx.dynamicanimation.animation.SpringForce.mDampedFreq double \l0x0105: ARITH  (r17 I:double) = (r11 I:double) * (r9 I:double A[D('sinCoeff' double)]) \l0x0107: ARITH  (r11 I:double) = (r11 I:double) * (r3 I:double A[D('deltaT' double)]) \l0x0109: INVOKE  (r11 I:double) = (r11 I:double) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)] (LINE:310)\l0x010d: ARITH  (r17 I:double) = (r17 I:double) * (r11 I:double) \l0x010f: ARITH  (r7 I:double) = (r7 I:double) + (r17 I:double) \l0x0111: ARITH  (r5 I:double) = (r5 I:double) * (r7 I:double) \l0x0113: ARITH  (r17 I:double) = (r13 I:double) + (r5 I:double) \l0x0115: MOVE  (r7 I:??[long, double]) = (r22 I:??[long, double] A[D('displacement' double)]) \l0x0117: MOVE  (r1 I:??[long, double] A[D('cosCoeff' double)]) = (r17 I:??[long, double]) \l}"];
MethodNode[shape=record,label="{public androidx.dynamicanimation.animation.DynamicAnimation$MassState androidx.dynamicanimation.animation.SpringForce.updateValues((r21 'this' I:androidx.dynamicanimation.animation.SpringForce A[IMMUTABLE_TYPE, THIS]), (r22 I:double A[D('lastDisplacement' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:double A[D('lastVelocity' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r26 I:long A[D('timeElapsed' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0069 \-\> B:20:0x0119, CROSS_EDGE: B:19:0x00a9 \-\> B:20:0x0119\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r22 'lastDisplacement' D\l  0x002c\-0x0060: r9 'coeffA' D\l  0x0033\-0x0060: r15 'coeffB' D\l  0x0046\-0x0065: r7 'displacement' D\l  0x0060\-0x0065: r17 'currentVelocity' D\l  0x006a\-0x00a4: r7 'coeffA' D\l  0x0070\-0x00a4: r13 'coeffB' D\l  0x007c\-0x00a9: r9 'displacement' D\l  0x00a4\-0x00a9: r17 'currentVelocity' D\l  0x0012\-0x00e2: r5 'lastDisplacement' D\l  0x00dc\-0x00f8: r7 'displacement' D\l  0x00b7\-0x0119: r9 'sinCoeff' D\l  0x00f8\-0x0119: r22 'displacement' D\l  0x00aa\-0x0119: r1 'cosCoeff' D\l  0x0119\-0x0128: r1 'currentVelocity' D\l  0x000e\-0x0128: r3 'deltaT' D\l  0x0119\-0x0128: r7 'displacement' D\l  0x00e2\-0x0128: r15 'lastDisplacement' D\l  \-1 \-0x0128: r24 'lastVelocity' D\l  \-1 \-0x0128: r26 'timeElapsed' J\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_19 -> Node_20;
}

