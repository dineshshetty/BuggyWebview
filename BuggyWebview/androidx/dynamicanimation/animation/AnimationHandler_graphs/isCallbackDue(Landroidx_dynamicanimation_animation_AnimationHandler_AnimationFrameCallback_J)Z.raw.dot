digraph "CFG forandroidx.dynamicanimation.animation.AnimationHandler.isCallbackDue(Landroidx\/dynamicanimation\/animation\/AnimationHandler$AnimationFrameCallback;J)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:androidx.collection.SimpleArrayMap\<androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback, java.lang.Long\>) = (r5 I:androidx.dynamicanimation.animation.AnimationHandler) androidx.dynamicanimation.animation.AnimationHandler.mDelayedCallbackStartTime androidx.collection.SimpleArrayMap  (LINE:171)\l0x0002: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:androidx.collection.SimpleArrayMap)\l  (r6 I:java.lang.Object A[D('callback' androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback)])\l type: VIRTUAL call: androidx.collection.SimpleArrayMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (m)]\l0x0006: CHECK_CAST (r0 I:java.lang.Long) = (java.lang.Long) (r0 I:??[OBJECT, ARRAY]) \l0x0008: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:172)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startTime' java.lang.Long)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x000c \l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|RETURN\l|0x000b: RETURN  (r1 I:boolean)  (LINE:173)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|0x000c: INVOKE  (r2 I:long) = (r0 I:java.lang.Long A[D('startTime' java.lang.Long)]) type: VIRTUAL call: java.lang.Long.longValue():long A[MD:():long (c)] (LINE:175)\l0x0010: CMP_L  (r4 I:int) = (r2 I:long), (r7 I:long A[D('currentTime' long)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|0x0012: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:20:0x001a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: IGET  (r2 I:androidx.collection.SimpleArrayMap\<androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback, java.lang.Long\>) = (r5 I:androidx.dynamicanimation.animation.AnimationHandler) androidx.dynamicanimation.animation.AnimationHandler.mDelayedCallbackStartTime androidx.collection.SimpleArrayMap  (LINE:176)\l0x0016: INVOKE  \l  (r2 I:androidx.collection.SimpleArrayMap)\l  (r6 I:java.lang.Object A[D('callback' androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback)])\l type: VIRTUAL call: androidx.collection.SimpleArrayMap.remove(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:boolean)  (LINE:177)\l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|RETURN\l|0x001a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:179)\l0x001b: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean androidx.dynamicanimation.animation.AnimationHandler.isCallbackDue((r5 'this' I:androidx.dynamicanimation.animation.AnimationHandler A[IMMUTABLE_TYPE, THIS]), (r6 I:androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback A[D('callback' androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:long A[D('currentTime' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0019 \-\> B:12:?, CROSS_EDGE: B:21:0x001b \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x001b: r0 'startTime' Ljava\/lang\/Long;\l  \-1 \-0x001b: r6 'callback' Landroidx\/dynamicanimation\/animation\/AnimationHandler$AnimationFrameCallback;\l  \-1 \-0x001b: r7 'currentTime' J\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_12;
}

