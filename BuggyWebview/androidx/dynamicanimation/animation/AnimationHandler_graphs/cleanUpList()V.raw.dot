digraph "CFG forandroidx.dynamicanimation.animation.AnimationHandler.cleanUpList()V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r2 I:androidx.dynamicanimation.animation.AnimationHandler) androidx.dynamicanimation.animation.AnimationHandler.mListDirty boolean  (LINE:183)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:? \l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: IGET  (r0 I:java.util.ArrayList\<androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback\>) = (r2 I:androidx.dynamicanimation.animation.AnimationHandler) androidx.dynamicanimation.animation.AnimationHandler.mAnimationCallbacks java.util.ArrayList  (LINE:184)\l0x0006: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l0x000a: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|LOOP_START\lLOOP:0: B:21:0x000c\-\>B:25:0x001b\l|0x000c: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \< (0 ??[int, byte, short, char])  \-\> B:28:0x001e \l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: IGET  (r1 I:java.util.ArrayList\<androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback\>) = (r2 I:androidx.dynamicanimation.animation.AnimationHandler) androidx.dynamicanimation.animation.AnimationHandler.mAnimationCallbacks java.util.ArrayList  (LINE:185)\l0x0010: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.ArrayList), (r0 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x001b \l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|0x0016: IGET  (r1 I:java.util.ArrayList\<androidx.dynamicanimation.animation.AnimationHandler$AnimationFrameCallback\>) = (r2 I:androidx.dynamicanimation.animation.AnimationHandler) androidx.dynamicanimation.animation.AnimationHandler.mAnimationCallbacks java.util.ArrayList  (LINE:186)\l0x0018: INVOKE  (r1 I:java.util.ArrayList), (r0 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.remove(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|LOOP_END\lLOOP:0: B:21:0x000c\-\>B:25:0x001b\l|0x001b: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (\-1 int)  (LINE:184)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001b|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x001e|0x001e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:189)\l0x001f: IPUT  (r0 I:boolean), (r2 I:androidx.dynamicanimation.animation.AnimationHandler) androidx.dynamicanimation.animation.AnimationHandler.mListDirty boolean \l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|RETURN\lORIG_RETURN\l|0x0021: RETURN    (LINE:191)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN   A[SYNTHETIC] (LINE:191)\l}"];
MethodNode[shape=record,label="{private void androidx.dynamicanimation.animation.AnimationHandler.cleanUpList((r2 'this' I:androidx.dynamicanimation.animation.AnimationHandler A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x001b \-\> B:21:0x000c, CROSS_EDGE: B:23:0x0014 \-\> B:25:0x001b, CROSS_EDGE: B:19:0x0002 \-\> B:27:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x001e: r0 'i' I\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_30;
Node_24 -> Node_29;
Node_29 -> Node_25;
Node_25 -> Node_21;
Node_30 -> Node_25;
Node_28 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_31 -> Node_17;
}

