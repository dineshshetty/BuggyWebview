digraph "CFG forandroidx.dynamicanimation.animation.FlingAnimation.DragForce.isAtEquilibrium(FF)Z" {
subgraph cluster_Region_2093969624 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|return java.lang.Math.abs(r4) \< r2.mVelocityThreshold\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000c|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public boolean androidx.dynamicanimation.animation.FlingAnimation.DragForce.isAtEquilibrium((r2v0 'this' androidx.dynamicanimation.animation.FlingAnimation$DragForce A[IMMUTABLE_TYPE, THIS]), (r3v0 'value' float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'velocity' float A[D('velocity' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000c \-\> B:6:0x000d\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.dynamicanimation.animation.Force.isAtEquilibrium(float, float):boolean]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_1;
Node_5 -> Node_1;
}

