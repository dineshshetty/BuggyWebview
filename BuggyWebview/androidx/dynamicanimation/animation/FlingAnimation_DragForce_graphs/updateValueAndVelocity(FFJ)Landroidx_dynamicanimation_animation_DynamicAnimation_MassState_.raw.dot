digraph "CFG forandroidx.dynamicanimation.animation.FlingAnimation.DragForce.updateValueAndVelocity(FFJ)Landroidx\/dynamicanimation\/animation\/DynamicAnimation$MassState;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:217)\l0x0002: CAST (r1 I:double) = (double) (r11 I:float A[D('velocity' float)]) \l0x0003: CAST (r3 I:float) = (float) (r12 I:long A[D('deltaT' long)]) \l0x0004: CONST  (r4 I:??[int, float, short, byte, char]) = (1148846080(0x447a0000, float:1000.0) ??[int, float, short, byte, char]) \l0x0006: ARITH  (r3 I:float) = (r3 I:float) \/ (r4 I:float) \l0x0007: IGET  (r5 I:float) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mFriction float \l0x0009: ARITH  (r3 I:float) = (r3 I:float) * (r5 I:float) \l0x000b: CAST (r5 I:double) = (double) (r3 I:float) \l0x000c: INVOKE  (r5 I:double) = (r5 I:double) type: STATIC call: java.lang.Math.exp(double):double A[MD:(double):double (c)]\l0x0010: ARITH  (r1 I:double) = (r1 I:double) * (r5 I:double) \l0x0012: CAST (r1 I:float) = (float) (r1 I:double) \l0x0013: IPUT  (r1 I:float), (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) androidx.dynamicanimation.animation.DynamicAnimation.MassState.mVelocity float \l0x0015: IGET  (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:218)\l0x0017: IGET  (r1 I:float) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mFriction float \l0x0019: ARITH  (r2 I:float) = (r11 I:float A[D('velocity' float)]) \/ (r1 I:float) \l0x001b: ARITH  (r2 I:float) = (r10 I:float A[D('value' float)]) \- (r2 I:float) \l0x001d: CAST (r2 I:double) = (double) (r2 I:float) \l0x001e: ARITH  (r5 I:float) = (r11 I:float A[D('velocity' float)]) \/ (r1 I:float) \l0x0020: CAST (r5 I:double) = (double) (r5 I:float) \l0x0021: CAST (r7 I:float) = (float) (r12 I:long A[D('deltaT' long)]) \l0x0022: ARITH  (r1 I:float) = (r1 I:float) * (r7 I:float) \l0x0024: ARITH  (r1 I:float) = (r1 I:float) \/ (r4 I:float) \l0x0025: CAST (r7 I:double) = (double) (r1 I:float) \l0x0026: INVOKE  (r7 I:double) = (r7 I:double) type: STATIC call: java.lang.Math.exp(double):double A[MD:(double):double (c)] (LINE:219)\l0x002a: ARITH  (r5 I:double) = (r5 I:double) * (r7 I:double) \l0x002c: ARITH  (r2 I:double) = (r2 I:double) + (r5 I:double) \l0x002d: CAST (r1 I:float) = (float) (r2 I:double) \l0x002e: IPUT  (r1 I:float), (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) androidx.dynamicanimation.animation.DynamicAnimation.MassState.mValue float \l0x0030: IGET  (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:220)\l0x0032: IGET  (r0 I:float) = (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) androidx.dynamicanimation.animation.DynamicAnimation.MassState.mValue float \l0x0034: IGET  (r1 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState \l0x0036: IGET  (r1 I:float) = (r1 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) androidx.dynamicanimation.animation.DynamicAnimation.MassState.mVelocity float \l0x0038: INVOKE  (r0 I:boolean) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce), (r0 I:float), (r1 I:float) type: VIRTUAL call: androidx.dynamicanimation.animation.FlingAnimation.DragForce.isAtEquilibrium(float, float):boolean A[MD:(float, float):boolean (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x003c|0x003c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0043 \l}"];
Node_4 [shape=record,label="{4\:\ 0x003e|0x003e: IGET  (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:221)\l0x0040: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0041: IPUT  (r1 I:float), (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) androidx.dynamicanimation.animation.DynamicAnimation.MassState.mVelocity float \l}"];
Node_5 [shape=record,label="{5\:\ 0x0043|0x0043: IGET  (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) = (r9 I:androidx.dynamicanimation.animation.FlingAnimation$DragForce) androidx.dynamicanimation.animation.FlingAnimation.DragForce.mMassState androidx.dynamicanimation.animation.DynamicAnimation$MassState  (LINE:223)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|RETURN\l|0x0045: RETURN  (r0 I:androidx.dynamicanimation.animation.DynamicAnimation$MassState) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{androidx.dynamicanimation.animation.DynamicAnimation$MassState androidx.dynamicanimation.animation.FlingAnimation.DragForce.updateValueAndVelocity((r9 'this' I:androidx.dynamicanimation.animation.FlingAnimation$DragForce A[IMMUTABLE_TYPE, THIS]), (r10 I:float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:float A[D('velocity' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('deltaT' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:3:0x003c \-\> B:5:0x0043\lDebug Info:\l  \-1 \-0x0045: r10 'value' F\l  \-1 \-0x0045: r11 'velocity' F\l  \-1 \-0x0045: r12 'deltaT' J\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

