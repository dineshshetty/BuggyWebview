digraph "CFG forandroidx.viewpager2.widget.ScrollEventAdapter.notifyProgrammaticScroll(IZ)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0001|if (r5 == false) goto L13\l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|r1 = 2\l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v5 int) binds: [B:19:0x0005, B:18:0x0003] A[DONT_GENERATE, DONT_INLINE]\l|r3.mAdapterState = r1\lr1 = false\lr3.mFakeDragging = false\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|if (r3.mTarget == r4) goto L7\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|r1 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|PHI: r1 \l  PHI: (r1v3 'hasNewTarget' boolean) = (r1v2 'hasNewTarget' boolean), (r1v4 'hasNewTarget' boolean) binds: [B:21:0x000d, B:22:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|r3.mTarget = r4\ldispatchStateChanged(2)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|if (r1 == false) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|dispatchSelected(r4)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001a|RETURN\lORIG_RETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|r1 = 3\l}"];
MethodNode[shape=record,label="{public void androidx.viewpager2.widget.ScrollEventAdapter.notifyProgrammaticScroll((r3v0 'this' androidx.viewpager2.widget.ScrollEventAdapter A[IMMUTABLE_TYPE, THIS]), (r4v0 'target' int A[D('target' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'smooth' boolean A[D('smooth' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0015 \-\> B:26:0x001a, CROSS_EDGE: B:21:0x000d \-\> B:23:0x0010, CROSS_EDGE: B:19:0x0005 \-\> B:20:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_15;
Node_27 -> Node_15;
Node_19 -> Node_20;
}

