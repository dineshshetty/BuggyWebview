digraph "CFG forandroidx.viewpager2.widget.ViewPager2.BasicAccessibilityProvider.onLmPerformAccessibilityAction(I)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r1 I:androidx.viewpager2.widget.ViewPager2$BasicAccessibilityProvider), (r2 I:int A[D('action' int)]) type: VIRTUAL call: androidx.viewpager2.widget.ViewPager2.BasicAccessibilityProvider.handlesLmPerformAccessibilityAction(int):boolean A[MD:(int):boolean (m)] (LINE:1298)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|RETURN\l|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1301)\l0x0007: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:1299)\l0x000a: INVOKE  (r0 I:java.lang.IllegalStateException) type: DIRECT call: java.lang.IllegalStateException.\<init\>():void A[MD:():void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|0x000d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean androidx.viewpager2.widget.ViewPager2.BasicAccessibilityProvider.onLmPerformAccessibilityAction((r1 'this' I:androidx.viewpager2.widget.ViewPager2$BasicAccessibilityProvider A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('action' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000d \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r2 'action' I\lMETHOD_OVERRIDE: [androidx.viewpager2.widget.ViewPager2.AccessibilityProvider.onLmPerformAccessibilityAction(int):boolean]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

