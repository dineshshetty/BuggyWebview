digraph "CFG forandroidx.viewpager2.widget.ViewPager2.4.onChildViewAttachedToWindow(Landroid\/view\/View;)V" {
subgraph cluster_Region_2047538032 {
label = "R(2:1|(1:(1:8)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0001|androidx.recyclerview.widget.RecyclerView$LayoutParams androidx.recyclerview.widget.RecyclerView.LayoutParams r0 = (androidx.recyclerview.widget.RecyclerView.LayoutParams) r4.getLayoutParams()\l}"];
subgraph cluster_Region_1269871545 {
label = "R(1:(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1823337417 {
label = "IF [B:12:0x000a, B:14:0x000e] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000a|if (r0.width != (\-1)) goto L7\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|ADDED_TO_REGION\l|if (r0.height != (\-1)) goto L7\l}"];
subgraph cluster_Region_65691107 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0018|throw new java.lang.IllegalStateException(\"Pages must fill the whole ViewPager2 (use match_parent)\")\l}"];
}
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000c}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0010}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0011}"];
MethodNode[shape=record,label="{public void androidx.viewpager2.widget.ViewPager2.4.onChildViewAttachedToWindow((r3v0 'this' androidx.viewpager2.widget.ViewPager2$4 A[IMMUTABLE_TYPE, THIS]), (r4v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0018 \-\> B:10:?, CROSS_EDGE: B:12:0x000a \-\> B:16:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.recyclerview.widget.RecyclerView.OnChildAttachStateChangeListener.onChildViewAttachedToWindow(android.view.View):void]\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_17 -> Node_10;
Node_9 -> Node_11;
Node_13 -> Node_14;
Node_15 -> Node_10;
Node_16 -> Node_17;
}

