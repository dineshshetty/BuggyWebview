digraph "CFG forandroidx.viewpager2.adapter.FragmentStateAdapter.isFragmentViewBound(J)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0007|if (r5.mItemIdToViewHolder.containsKey(r6) == false) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|androidx.fragment.app.Fragment r0 = r5.mFragments.get(r6)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|if (r0 != null) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|return false\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|android.view.View r3 = r0.getView()\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if (r3 != null) goto L11\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c|RETURN\l|return false\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d}"];
Node_12 [shape=record,label="{12\:\ 0x0021|if (r3.getParent() == null) goto L13\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|RETURN\lORIG_RETURN\l|return false\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{private boolean androidx.viewpager2.adapter.FragmentStateAdapter.isFragmentViewBound((r5v0 'this' androidx.viewpager2.adapter.FragmentStateAdapter A[IMMUTABLE_TYPE, THIS]), (r6v0 'itemId' long A[D('itemId' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0015 \-\> B:1:?, CROSS_EDGE: B:10:0x001c \-\> B:1:?, CROSS_EDGE: B:15:0x0025 \-\> B:1:?, CROSS_EDGE: B:12:0x0021 \-\> B:15:0x0025\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_1;
Node_16 -> Node_1;
}

