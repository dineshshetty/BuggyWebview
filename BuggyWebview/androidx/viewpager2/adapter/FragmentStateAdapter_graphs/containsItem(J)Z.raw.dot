digraph "CFG forandroidx.viewpager2.adapter.FragmentStateAdapter.containsItem(J)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:496)\l0x0002: CMP_L  (r2 I:int) = (r4 I:long A[D('itemId' long)]), (r0 I:long) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r3 I:androidx.viewpager2.adapter.FragmentStateAdapter) type: VIRTUAL call: androidx.viewpager2.adapter.FragmentStateAdapter.getItemCount():int A[MD:():int (m)]\l0x000a: CAST (r0 I:long) = (long) (r0 I:int) \l0x000b: CMP_L  (r2 I:int) = (r4 I:long A[D('itemId' long)]), (r0 I:long) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:7:0x0011 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|SYNTHETIC\lRETURN\l|0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0012: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.viewpager2.adapter.FragmentStateAdapter.containsItem((r3 'this' I:androidx.viewpager2.adapter.FragmentStateAdapter A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('itemId' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0011 \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0004 \-\> B:7:0x0011\lDebug Info:\l  \-1 \-0x0012: r4 'itemId' J\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_1;
}

