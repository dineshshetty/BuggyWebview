digraph "CFG forandroidx.loader.content.CursorLoader.onCanceled(Landroid\/database\/Cursor;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cursor' android.database.Cursor)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:?  (LINE:173)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: INVOKE  (r0 I:boolean) = (r2 I:android.database.Cursor A[D('cursor' android.database.Cursor)]) type: INTERFACE call: android.database.Cursor.isClosed():boolean A[MD:():boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:? \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: INVOKE  (r2 I:android.database.Cursor A[D('cursor' android.database.Cursor)]) type: INTERFACE call: android.database.Cursor.close():void A[MD:():void (c)] (LINE:174)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|RETURN\lORIG_RETURN\l|0x000b: RETURN    (LINE:176)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|0x000b: RETURN   A[SYNTHETIC] (LINE:176)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x000b: RETURN   A[SYNTHETIC] (LINE:176)\l}"];
MethodNode[shape=record,label="{public void androidx.loader.content.CursorLoader.onCanceled((r1 'this' I:androidx.loader.content.CursorLoader A[IMMUTABLE_TYPE, THIS]), (r2 I:android.database.Cursor A[D('cursor' android.database.Cursor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:4:0x0006 \-\> B:6:0x000b, CROSS_EDGE: B:2:0x0000 \-\> B:6:0x000b\lDebug Info:\l  \-1 \-0x000b: r2 'cursor' Landroid\/database\/Cursor;\lBRIDGED_BY: androidx.loader.content.CursorLoader.onCanceled(android.database.Cursor):void\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_8 -> Node_1;
Node_7 -> Node_1;
}

