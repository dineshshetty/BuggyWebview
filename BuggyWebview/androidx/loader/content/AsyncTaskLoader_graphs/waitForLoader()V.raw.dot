digraph "CFG forandroidx.loader.content.AsyncTaskLoader.waitForLoader()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:androidx.loader.content.AsyncTaskLoader\<D\>$LoadTask) = (r1 I:androidx.loader.content.AsyncTaskLoader A[D('this' androidx.loader.content.AsyncTaskLoader\<D\>)]) androidx.loader.content.AsyncTaskLoader.mTask androidx.loader.content.AsyncTaskLoader$LoadTask  (LINE:347)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('task' androidx.loader.content.AsyncTaskLoader\<D\>$LoadTask)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:348)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: INVOKE  \l  (r0 I:androidx.loader.content.AsyncTaskLoader$LoadTask A[D('task' androidx.loader.content.AsyncTaskLoader\<D\>$LoadTask)])\l type: VIRTUAL call: androidx.loader.content.AsyncTaskLoader.LoadTask.waitForLoader():void A[MD:():void (m)] (LINE:349)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|RETURN\lORIG_RETURN\l|0x0007: RETURN    (LINE:351)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0007: RETURN   A[SYNTHETIC] (LINE:351)\l}"];
MethodNode[shape=record,label="{public void androidx.loader.content.AsyncTaskLoader.waitForLoader((r1 'this' I:androidx.loader.content.AsyncTaskLoader\<D\> A[D('this' androidx.loader.content.AsyncTaskLoader\<D\>), IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0007: r0 'task' Landroidx\/loader\/content\/AsyncTaskLoader$LoadTask;, signature: Landroidx\/loader\/content\/AsyncTaskLoader\<TD;\>.LoadTask;\l  0x0000\-0x0007: r1 'this' Landroidx\/loader\/content\/AsyncTaskLoader;, signature: Landroidx\/loader\/content\/AsyncTaskLoader\<TD;\>;\lTYPE_VARS: [D]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

