digraph "CFG forandroidx.versionedparcelable.VersionedParcelStream.setSerializationFlags(ZZ)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowSerialization' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005  (LINE:134)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IPUT  (r4 I:boolean A[D('ignoreParcelables' boolean)]), (r2 I:androidx.versionedparcelable.VersionedParcelStream) androidx.versionedparcelable.VersionedParcelStream.mIgnoreParcelables boolean  (LINE:137)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:138)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:135)\l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"Serialization of this object is not allowed\" \l0x0009: INVOKE  (r0 I:java.lang.RuntimeException), (r1 I:java.lang.String) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|0x000c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.versionedparcelable.VersionedParcelStream.setSerializationFlags((r2 'this' I:androidx.versionedparcelable.VersionedParcelStream A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[D('allowSerialization' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('ignoreParcelables' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r3 'allowSerialization' Z\l  \-1 \-0x000c: r4 'ignoreParcelables' Z\lMETHOD_OVERRIDE: [androidx.versionedparcelable.VersionedParcel.setSerializationFlags(boolean, boolean):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

