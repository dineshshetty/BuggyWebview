digraph "CFG forandroidx.versionedparcelable.VersionedParcelStream.readByteArray()[B" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|TRY_ENTER\lTryCatch #0 \{IOException \-\> 0x0012, blocks: (B:15:0x0000, B:17:0x0008), top: B:24:0x0000 \}\lCatch: IOException \-\> 0x0012\l|int r0 = r3.mCurrentInput.readInt()     \/\/ Catch: java.io.IOException \-\> L12\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|if (r0 \<= 0) goto L8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|TRY_LEAVE\lTryCatch #0 \{IOException \-\> 0x0012, blocks: (B:15:0x0000, B:17:0x0008), top: B:24:0x0000 \}\lCatch: IOException \-\> 0x0012\l|byte[] r1 = new byte[r0]     \/\/ Catch: java.io.IOException \-\> L12\lr3.mCurrentInput.readFully(r1)     \/\/ Catch: java.io.IOException \-\> L12\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|RETURN\l|return r1\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|return null\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|ExcHandler: IOException \-\> 0x0012\l|java.io.IOException r0 = move\-exception\l}"];
Node_22 [shape=record,label="{22\:\ 0x0013}"];
Node_23 [shape=record,label="{23\:\ 0x0018|throw new androidx.versionedparcelable.VersionedParcel.ParcelException(r0)\l}"];
MethodNode[shape=record,label="{public byte[] androidx.versionedparcelable.VersionedParcelStream.readByteArray((r3v0 'this' androidx.versionedparcelable.VersionedParcelStream A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0018 \-\> B:14:?, CROSS_EDGE: B:20:0x0011 \-\> B:14:?, CROSS_EDGE: B:24:0x0000 \-\> B:21:0x0012\lINLINE_NOT_NEEDED\lTryCatch #0 \{IOException \-\> 0x0012, blocks: (B:15:0x0000, B:17:0x0008), top: B:24:0x0000 \}\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.versionedparcelable.VersionedParcel.readByteArray():byte[]]\l}"];
MethodNode -> Node_13;Node_13 -> Node_24;
Node_24 -> Node_15;
Node_24 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_17 -> Node_25;
Node_18 -> Node_14;
Node_25 -> Node_21;
Node_19 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

