digraph "CFG forandroidx.versionedparcelable.VersionedParcelStream.1.read([BII)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0005|if (androidx.versionedparcelable.VersionedParcelStream.this.mFieldSize == (\-1)) goto L8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007}"];
Node_18 [shape=record,label="{18\:\ 0x000f|if (androidx.versionedparcelable.VersionedParcelStream.this.mCount \>= androidx.versionedparcelable.VersionedParcelStream.this.mFieldSize) goto L5\l}"];
Node_20 [shape=record,label="{20\:\ 0x0012}"];
Node_21 [shape=record,label="{21\:\ 0x0017|throw new java.io.IOException()\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|int r0 = super.read(r4, r5, r6)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|if (r0 \<= 0) goto L11\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|androidx.versionedparcelable.VersionedParcelStream r1 = androidx.versionedparcelable.VersionedParcelStream.this\lr1.mCount = r1.mCount + r0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public int androidx.versionedparcelable.VersionedParcelStream.1.read((r3v0 'this' androidx.versionedparcelable.VersionedParcelStream$1 A[IMMUTABLE_TYPE, THIS]), (r4v0 'b' byte[] A[D('b' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'off' int A[D('off' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'len' int A[D('len' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:25:0x0025 \-\> B:14:?, CROSS_EDGE: B:23:0x001c \-\> B:25:0x0025, CROSS_EDGE: B:16:0x0005 \-\> B:22:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/io\/IOException;]\lMETHOD_OVERRIDE: [ClspMth\{java.io.InputStream.read(byte[], int, int):int throws java.io.IOException\}]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_22[style=dashed];
Node_20 -> Node_21;
Node_21 -> Node_14;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

