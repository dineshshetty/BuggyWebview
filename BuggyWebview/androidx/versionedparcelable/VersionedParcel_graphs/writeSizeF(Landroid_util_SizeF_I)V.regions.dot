digraph "CFG forandroidx.versionedparcelable.VersionedParcel.writeSizeF(Landroid\/util\/SizeF;I)V" {
subgraph cluster_Region_44930462 {
label = "R(3:1|4|(1:(1:6)))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|setOutputField(r3)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|PHI: r0 \l  PHI: (r0v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|writeBoolean(r2 != null)\l}"];
subgraph cluster_Region_1565084546 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_386725031 {
label = "IF [B:18:0x000b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000b|if (r2 != null) goto L6\l}"];
subgraph cluster_Region_1602725 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000d|writeFloat(r2.getWidth())\lwriteFloat(r2.getHeight())\l}"];
}
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0003}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0005}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x001b|ORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0007}"];
MethodNode[shape=record,label="{public void androidx.versionedparcelable.VersionedParcel.writeSizeF((r1v0 'this' androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r2v0 'val' android.util.SizeF A[D('val' android.util.SizeF), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'fieldId' int A[D('fieldId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000b \-\> B:20:0x001b, CROSS_EDGE: B:16:0x0007 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_13 -> Node_14;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_11 -> Node_13;
Node_14 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_20 -> Node_12;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

