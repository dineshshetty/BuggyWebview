digraph "CFG forandroidx.versionedparcelable.VersionedParcel.writeSparseBooleanArray(Landroid\/util\/SparseBooleanArray;I)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r3 I:androidx.versionedparcelable.VersionedParcel), (r5 I:int A[D('fieldId' int)]) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.setOutputField(int):void A[MD:(int):void (m)] (LINE:539)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0003|0x0003: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('val' android.util.SparseBooleanArray)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000a  (LINE:540)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:541)\l0x0006: INVOKE  (r3 I:androidx.versionedparcelable.VersionedParcel), (r0 I:int) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.writeInt(int):void A[MD:(int):void (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|RETURN\l|0x0009: RETURN    (LINE:542)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r4 I:android.util.SparseBooleanArray A[D('val' android.util.SparseBooleanArray)]) type: VIRTUAL call: android.util.SparseBooleanArray.size():int A[MD:():int (c)] (LINE:544)\l0x000e: INVOKE  (r3 I:androidx.versionedparcelable.VersionedParcel), (r0 I:int A[D('n' int)]) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.writeInt(int):void A[MD:(int):void (m)] (LINE:545)\l0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:546)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|LOOP_START\lLOOP:0: B:18:0x0012\-\>B:19:0x0014\l|0x0012: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('n' int)])  \-\> B:21:0x0025  (LINE:547)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|LOOP_END\lLOOP:0: B:18:0x0012\-\>B:19:0x0014\l|0x0014: INVOKE  (r2 I:int) = (r4 I:android.util.SparseBooleanArray A[D('val' android.util.SparseBooleanArray)]), (r1 I:int A[D('i' int)]) type: VIRTUAL call: android.util.SparseBooleanArray.keyAt(int):int A[MD:(int):int (c)] (LINE:548)\l0x0018: INVOKE  (r3 I:androidx.versionedparcelable.VersionedParcel), (r2 I:int) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.writeInt(int):void A[MD:(int):void (m)]\l0x001b: INVOKE  (r2 I:boolean) = (r4 I:android.util.SparseBooleanArray A[D('val' android.util.SparseBooleanArray)]), (r1 I:int A[D('i' int)]) type: VIRTUAL call: android.util.SparseBooleanArray.valueAt(int):boolean A[MD:(int):boolean (c)] (LINE:549)\l0x001f: INVOKE  (r3 I:androidx.versionedparcelable.VersionedParcel), (r2 I:boolean) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.writeBoolean(boolean):void A[MD:(boolean):void (m)]\l0x0022: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:550)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:552)\l}"];
MethodNode[shape=record,label="{public void androidx.versionedparcelable.VersionedParcel.writeSparseBooleanArray((r3 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r4 I:android.util.SparseBooleanArray A[D('val' android.util.SparseBooleanArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('fieldId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0014 \-\> B:18:0x0012, CROSS_EDGE: B:20:0x0025 \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0025: r0 'n' I\l  0x0012\-0x0025: r1 'i' I\l  \-1 \-0x0025: r4 'val' Landroid\/util\/SparseBooleanArray;\l  \-1 \-0x0025: r5 'fieldId' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_18;
Node_21 -> Node_20;
Node_20 -> Node_12;
}

