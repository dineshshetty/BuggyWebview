digraph "CFG forandroidx.versionedparcelable.VersionedParcel.readMap(Ljava\/util\/Map;I)Ljava\/util\/Map;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r7 I:androidx.versionedparcelable.VersionedParcel), (r9 I:int A[D('fieldId' int)]) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readField(int):boolean A[MD:(int):boolean (m)] (LINE:1401)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0007 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|RETURN\l|0x0006: RETURN  (r8 I:java.util.Map\<K, V\> A[D('def' java.util.Map\<K, V\>)])  (LINE:1402)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r7 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readInt():int A[MD:():int (m)] (LINE:1404)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|0x000b: IF  (r0 I:??[int, byte, short, char] A[D('size' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:26:0x000f  (LINE:1405)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|RETURN\l|0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1406)\l0x000e: RETURN  (r1 I:java.util.Map\<K, V\>) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: NEW_INSTANCE  (r1 I:androidx.collection.ArrayMap) =  androidx.collection.ArrayMap  (LINE:1408)\l0x0011: INVOKE  (r1 I:androidx.collection.ArrayMap) type: DIRECT call: androidx.collection.ArrayMap.\<init\>():void A[MD:():void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0017  (LINE:1409)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|RETURN\l|0x0016: RETURN  (r1 I:java.util.Map\<K, V\> A[D('map' java.util.Map\<K, V\>)])  (LINE:1410)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0017|0x0017: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:1412)\l0x0019: INVOKE  (r2 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x001c: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:1413)\l0x001e: INVOKE  (r3 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0021: INVOKE  (r7 I:androidx.versionedparcelable.VersionedParcel), (r2 I:java.util.Collection A[D('keyList' java.util.List\<K\>)]) type: DIRECT call: androidx.versionedparcelable.VersionedParcel.readCollection(java.util.Collection):java.util.Collection A[MD:\<T, S extends java.util.Collection\<T\>\>:(S extends java.util.Collection\<T\>):S extends java.util.Collection\<T\> (m)] (LINE:1414)\l0x0024: INVOKE  (r7 I:androidx.versionedparcelable.VersionedParcel), (r3 I:java.util.Collection A[D('valueList' java.util.List\<V\>)]) type: DIRECT call: androidx.versionedparcelable.VersionedParcel.readCollection(java.util.Collection):java.util.Collection A[MD:\<T, S extends java.util.Collection\<T\>\>:(S extends java.util.Collection\<T\>):S extends java.util.Collection\<T\> (m)] (LINE:1415)\l0x0027: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1416)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0028|LOOP_START\lLOOP:0: B:30:0x0028\-\>B:31:0x002a\l|0x0028: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:33:0x0038 \l}"];
Node_31 [shape=record,label="{31\:\ 0x002a|LOOP_END\lLOOP:0: B:30:0x0028\-\>B:31:0x002a\l|0x002a: INVOKE  (r5 I:java.lang.Object) = (r2 I:java.util.List A[D('keyList' java.util.List\<K\>)]), (r4 I:int A[D('i' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:1417)\l0x002e: INVOKE  (r6 I:java.lang.Object) = (r3 I:java.util.List A[D('valueList' java.util.List\<V\>)]), (r4 I:int A[D('i' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0032: INVOKE  (r1 I:java.util.Map A[D('map' java.util.Map\<K, V\>)]), (r5 I:java.lang.Object), (r6 I:java.lang.Object) type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l0x0035: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:1416)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0038|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:java.util.Map\<K, V\> A[D('map' java.util.Map\<K, V\>)])  (LINE:1419)\l}"];
MethodNode[shape=record,label="{public java.util.Map\<K, V\> androidx.versionedparcelable.VersionedParcel.readMap((r7 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r8 I:java.util.Map\<K, V\> A[D('def' java.util.Map\<K, V\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('fieldId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x000e \-\> B:18:?, CROSS_EDGE: B:28:0x0016 \-\> B:18:?, BACK_EDGE: B:31:0x002a \-\> B:30:0x0028, CROSS_EDGE: B:32:0x0038 \-\> B:18:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x0038: r4 'i' I\l  0x000b\-0x0038: r0 'size' I\l  0x0014\-0x0038: r1 'map' Ljava\/util\/Map;, signature: Ljava\/util\/Map\<TK;TV;\>;\l  0x001c\-0x0038: r2 'keyList' Ljava\/util\/List;, signature: Ljava\/util\/List\<TK;\>;\l  0x0021\-0x0038: r3 'valueList' Ljava\/util\/List;, signature: Ljava\/util\/List\<TV;\>;\l  0x0000\-0x0038: r8 'def' Ljava\/util\/Map;, signature: Ljava\/util\/Map\<TK;TV;\>;\l  \-1 \-0x0038: r9 'fieldId' I\lTYPE_VARS: [V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;\>(Ljava\/util\/Map\<TK;TV;\>;I)Ljava\/util\/Map\<TK;TV;\>;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_18;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_18;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_18;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_30;
Node_33 -> Node_32;
Node_32 -> Node_18;
}

