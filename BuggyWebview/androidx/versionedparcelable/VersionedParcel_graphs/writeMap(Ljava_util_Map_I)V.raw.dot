digraph "CFG forandroidx.versionedparcelable.VersionedParcel.writeMap(Ljava\/util\/Map;I)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INVOKE  (r6 I:androidx.versionedparcelable.VersionedParcel), (r8 I:int A[D('fieldId' int)]) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.setOutputField(int):void A[MD:(int):void (m)] (LINE:854)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|0x0003: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('val' java.util.Map\<K, V\>)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000a  (LINE:855)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|0x0005: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:856)\l0x0006: INVOKE  (r6 I:androidx.versionedparcelable.VersionedParcel), (r0 I:int) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.writeInt(int):void A[MD:(int):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|RETURN\l|0x0009: RETURN    (LINE:857)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r7 I:java.util.Map A[D('val' java.util.Map\<K, V\>)]) type: INTERFACE call: java.util.Map.size():int A[MD:():int (c)] (LINE:859)\l0x000e: INVOKE  (r6 I:androidx.versionedparcelable.VersionedParcel), (r0 I:int A[D('size' int)]) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.writeInt(int):void A[MD:(int):void (m)] (LINE:860)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0014  (LINE:861)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|RETURN\l|0x0013: RETURN    (LINE:862)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|0x0014: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:864)\l0x0016: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0019: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:865)\l0x001b: INVOKE  (r2 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x001e: INVOKE  (r3 I:java.util.Set) = (r7 I:java.util.Map A[D('val' java.util.Map\<K, V\>)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:866)\l0x0022: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.Set) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0026|LOOP_START\lLOOP:0: B:26:0x0026\-\>B:28:0x002c\l|0x0026: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|0x002a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0041 \l}"];
Node_28 [shape=record,label="{28\:\ 0x002c|LOOP_END\lLOOP:0: B:26:0x0026\-\>B:28:0x002c\l|0x002c: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0030: CHECK_CAST (r4 I:java.util.Map$Entry) = (java.util.Map$Entry) (r4 I:??[OBJECT, ARRAY]) \l0x0032: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry\<K, V\>)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:867)\l0x0036: INVOKE  (r1 I:java.util.List A[D('keySet' java.util.List\<K\>)]), (r5 I:java.lang.Object) type: INTERFACE call: java.util.List.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0039: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry\<K, V\>)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)] (LINE:868)\l0x003d: INVOKE  (r2 I:java.util.List A[D('valueSet' java.util.List\<V\>)]), (r5 I:java.lang.Object) type: INTERFACE call: java.util.List.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0041|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0041|0x0041: INVOKE  (r6 I:androidx.versionedparcelable.VersionedParcel), (r1 I:java.util.Collection A[D('keySet' java.util.List\<K\>)]) type: DIRECT call: androidx.versionedparcelable.VersionedParcel.writeCollection(java.util.Collection):void A[MD:\<T\>:(java.util.Collection\<T\>):void (m)] (LINE:870)\l0x0044: INVOKE  (r6 I:androidx.versionedparcelable.VersionedParcel), (r2 I:java.util.Collection A[D('valueSet' java.util.List\<V\>)]) type: DIRECT call: androidx.versionedparcelable.VersionedParcel.writeCollection(java.util.Collection):void A[MD:\<T\>:(java.util.Collection\<T\>):void (m)] (LINE:871)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0047|RETURN\l|0x0047: RETURN    (LINE:872)\l}"];
MethodNode[shape=record,label="{public void androidx.versionedparcelable.VersionedParcel.writeMap((r6 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.Map\<K, V\> A[D('val' java.util.Map\<K, V\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('fieldId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0013 \-\> B:17:?, BACK_EDGE: B:28:0x002c \-\> B:26:0x0026, CROSS_EDGE: B:30:0x0047 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0032\-0x0040: r4 'entry' Ljava\/util\/Map$Entry;, signature: Ljava\/util\/Map$Entry\<TK;TV;\>;\l  0x000e\-0x0047: r0 'size' I\l  0x0019\-0x0047: r1 'keySet' Ljava\/util\/List;, signature: Ljava\/util\/List\<TK;\>;\l  0x001e\-0x0047: r2 'valueSet' Ljava\/util\/List;, signature: Ljava\/util\/List\<TV;\>;\l  0x0000\-0x0047: r7 'val' Ljava\/util\/Map;, signature: Ljava\/util\/Map\<TK;TV;\>;\l  \-1 \-0x0047: r8 'fieldId' I\lTYPE_VARS: [V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;\>(Ljava\/util\/Map\<TK;TV;\>;I)V\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_17;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_26;
Node_31 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_17;
}

