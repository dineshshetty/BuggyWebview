digraph "CFG forandroidx.versionedparcelable.VersionedParcel.getWriteMethod(Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Method;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:androidx.collection.ArrayMap\<java.lang.String, java.lang.reflect.Method\>) = (r7 I:androidx.versionedparcelable.VersionedParcel) androidx.versionedparcelable.VersionedParcel.mWriteCache androidx.collection.ArrayMap  (LINE:1616)\l0x0002: INVOKE  (r1 I:java.lang.String) = (r8 I:java.lang.Class A[D('baseCls' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x0006: INVOKE  (r0 I:java.lang.Object) = (r0 I:androidx.collection.ArrayMap), (r1 I:java.lang.Object) type: VIRTUAL call: androidx.collection.ArrayMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (m)]\l0x000a: CHECK_CAST (r0 I:java.lang.reflect.Method) = (java.lang.reflect.Method) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('m' java.lang.reflect.Method)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:1617)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: INVOKE  (r1 I:java.lang.Class) = (r7 I:androidx.versionedparcelable.VersionedParcel), (r8 I:java.lang.Class A[D('baseCls' java.lang.Class)]) type: DIRECT call: androidx.versionedparcelable.VersionedParcel.findParcelClass(java.lang.Class):java.lang.Class A[MD:(java.lang.Class\<? extends androidx.versionedparcelable.VersionedParcelable\>):java.lang.Class throws java.lang.ClassNotFoundException (m)] (LINE:1618)\l0x0012: INVOKE  (r2 I:long) =  type: STATIC call: java.lang.System.currentTimeMillis():long A[MD:():long (c)] (LINE:1619)\l0x0016: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:1620)\l0x0017: NEW_ARRAY  (r4 I:java.lang.Class[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] \l0x0019: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001a: APUT  (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r8 I:??[OBJECT, ARRAY] A[D('baseCls' java.lang.Class)]) \l0x001c: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001d: CONST_CLASS  (r6 I:java.lang.Class\<androidx.versionedparcelable.VersionedParcel\>) =  androidx.versionedparcelable.VersionedParcel.class \l0x001f: APUT  (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r6 I:??[OBJECT, ARRAY]) \l0x0021: CONST_STR  (r5 I:java.lang.String) =  \"write\" \l0x0023: INVOKE  (r0 I:java.lang.reflect.Method A[D('m' java.lang.reflect.Method)]) = (r1 I:java.lang.Class A[D('cls' java.lang.Class)]), (r5 I:java.lang.String), (r4 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method A[MD:(java.lang.String, java.lang.Class\<?\>[]):java.lang.reflect.Method VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)]\l0x0027: IGET  (r4 I:androidx.collection.ArrayMap\<java.lang.String, java.lang.reflect.Method\>) = (r7 I:androidx.versionedparcelable.VersionedParcel) androidx.versionedparcelable.VersionedParcel.mWriteCache androidx.collection.ArrayMap  (LINE:1621)\l0x0029: INVOKE  (r5 I:java.lang.String) = (r8 I:java.lang.Class A[D('baseCls' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x002d: INVOKE  \l  (r4 I:androidx.collection.ArrayMap)\l  (r5 I:java.lang.Object)\l  (r0 I:java.lang.Object A[D('m' java.lang.reflect.Method)])\l type: VIRTUAL call: androidx.collection.ArrayMap.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: RETURN  (r0 I:java.lang.reflect.Method A[D('m' java.lang.reflect.Method)])  (LINE:1623)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r0 I:java.lang.reflect.Method A[D('m' java.lang.reflect.Method)]) A[SYNTHETIC] (LINE:1623)\l}"];
MethodNode[shape=record,label="{private java.lang.reflect.Method androidx.versionedparcelable.VersionedParcel.getWriteMethod((r7 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.Class A[D('baseCls' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000c \-\> B:12:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0030: r1 'cls' Ljava\/lang\/Class;\l  0x0016\-0x0030: r2 'start' J\l  0x000c\-0x0030: r0 'm' Ljava\/lang\/reflect\/Method;\l  \-1 \-0x0030: r8 'baseCls' Ljava\/lang\/Class;\lEXCEPTIONS:[Ljava\/lang\/IllegalAccessException;, Ljava\/lang\/NoSuchMethodException;, Ljava\/lang\/ClassNotFoundException;]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

