digraph "CFG forandroidx.versionedparcelable.VersionedParcel.readBooleanArray()[Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|int r0 = readInt()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|if (r0 \>= 0) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|RETURN\l|return null\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|boolean[] r1 = new boolean[r0]\lr2 = 0\l}"];
Node_24 [shape=record,label="{24\:\ 0x000b|LOOP_START\lLOOP:0: B:24:0x000b\-\>B:29:0x0016\lPHI: r2 \l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v2 'i' int) binds: [B:23:0x0008, B:29:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r0) goto L14\l}"];
Node_25 [shape=record,label="{25\:\ 0x000d}"];
Node_26 [shape=record,label="{26\:\ 0x0011|if (readInt() == 0) goto L12\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|r3 = true\l}"];
Node_33 [shape=record,label="{33\:\ 0x0016|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|LOOP_END\lLOOP:0: B:24:0x000b\-\>B:29:0x0016\lPHI: r3 \l  PHI: (r3v2 boolean A[IMMUTABLE_TYPE]) = (r3v1 boolean), (r3v3 boolean) binds: [B:32:0x0016, B:33:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|r1[r2] = r3\lint r2 = r2 + 1\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|r3 = false\l}"];
Node_32 [shape=record,label="{32\:\ 0x0016|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001b|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001b|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{public boolean[] androidx.versionedparcelable.VersionedParcel.readBooleanArray((r4v0 'this' androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0016 \-\> B:24:0x000b, CROSS_EDGE: B:28:0x0015 \-\> B:29:0x0016, CROSS_EDGE: B:30:0x001b \-\> B:18:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_18;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_33;
Node_33 -> Node_29;
Node_29 -> Node_24;
Node_28 -> Node_32;
Node_32 -> Node_29;
Node_31 -> Node_30;
Node_30 -> Node_18;
}

