digraph "CFG forandroidx.versionedparcelable.VersionedParcel.readCollection(Ljava\/util\/Collection;)Ljava\/util\/Collection;" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r3 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readInt():int A[MD:():int (m)] (LINE:1344)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1345)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:32:0x0008 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:S extends java.util.Collection\<T\>)  (LINE:1346)\l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0051  (LINE:1348)\l}"];
Node_33 [shape=record,label="{33\:\ 0x000a|0x000a: INVOKE  (r2 I:int) = (r3 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readInt():int A[MD:():int (m)] (LINE:1349)\l}"];
Node_34 [shape=record,label="{34\:\ 0x000e|0x000e: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:36:0x0011  (LINE:1350)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|RETURN\l|0x0010: RETURN  (r1 I:S extends java.util.Collection\<T\>)  (LINE:1351)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0011|0x0011: SWITCH  (r2 I:?? A[D('type' int)])\l case 1: goto B:46:0x0045\l case 2: goto B:44:0x0039\l case 3: goto B:42:0x002d\l case 4: goto B:40:0x0021\l case 5: goto B:38:0x0015\l default: goto B:48:0x0051  (LINE:1353)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0015|LOOP_START\lLOOP:0: B:38:0x0015\-\>B:39:0x0017\l|0x0015: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:49:0x0051  (LINE:1379)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0017|LOOP_END\lLOOP:0: B:38:0x0015\-\>B:39:0x0017\l|0x0017: INVOKE  (r1 I:android.os.IBinder) = (r3 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readStrongBinder():android.os.IBinder A[MD:():android.os.IBinder (m)] (LINE:1380)\l0x001b: INVOKE  (r4 I:java.util.Collection A[D('list' S extends java.util.Collection\<T\>)]), (r1 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x001e: ARITH  (r0 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:1381)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0051|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0021|LOOP_START\lLOOP:1: B:40:0x0021\-\>B:41:0x0023\l|0x0021: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:50:0x0051  (LINE:1355)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0023|LOOP_END\lLOOP:1: B:40:0x0021\-\>B:41:0x0023\l|0x0023: INVOKE  (r1 I:java.lang.String) = (r3 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readString():java.lang.String A[MD:():java.lang.String (m)] (LINE:1356)\l0x0027: INVOKE  (r4 I:java.util.Collection A[D('list' S extends java.util.Collection\<T\>)]), (r1 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x002a: ARITH  (r0 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:1357)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0051|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x002d|LOOP_START\lLOOP:2: B:42:0x002d\-\>B:43:0x002f\l|0x002d: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:51:0x0051  (LINE:1373)\l}"];
Node_43 [shape=record,label="{43\:\ 0x002f|LOOP_END\lLOOP:2: B:42:0x002d\-\>B:43:0x002f\l|0x002f: INVOKE  (r1 I:java.io.Serializable) = (r3 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readSerializable():java.io.Serializable A[MD:():java.io.Serializable (m)] (LINE:1374)\l0x0033: INVOKE  (r4 I:java.util.Collection A[D('list' S extends java.util.Collection\<T\>)]), (r1 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0036: ARITH  (r0 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:1375)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0051|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0039|LOOP_START\lLOOP:3: B:44:0x0039\-\>B:45:0x003b\l|0x0039: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:52:0x0051  (LINE:1361)\l}"];
Node_45 [shape=record,label="{45\:\ 0x003b|LOOP_END\lLOOP:3: B:44:0x0039\-\>B:45:0x003b\l|0x003b: INVOKE  (r1 I:android.os.Parcelable) = (r3 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readParcelable():android.os.Parcelable A[MD:\<T extends android.os.Parcelable\>:():T extends android.os.Parcelable (m)] (LINE:1362)\l0x003f: INVOKE  (r4 I:java.util.Collection A[D('list' S extends java.util.Collection\<T\>)]), (r1 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0042: ARITH  (r0 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:1363)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0051|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0045|LOOP_START\lLOOP:4: B:46:0x0045\-\>B:47:0x0047\l|0x0045: IF  (r0 I:??[int, byte, short, char] A[D('n' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:53:0x0051  (LINE:1367)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0047|LOOP_END\lLOOP:4: B:46:0x0045\-\>B:47:0x0047\l|0x0047: INVOKE  (r1 I:androidx.versionedparcelable.VersionedParcelable) = (r3 I:androidx.versionedparcelable.VersionedParcel) type: VIRTUAL call: androidx.versionedparcelable.VersionedParcel.readVersionedParcelable():androidx.versionedparcelable.VersionedParcelable A[MD:\<T extends androidx.versionedparcelable.VersionedParcelable\>:():T extends androidx.versionedparcelable.VersionedParcelable (m)] (LINE:1368)\l0x004b: INVOKE  (r4 I:java.util.Collection A[D('list' S extends java.util.Collection\<T\>)]), (r1 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x004e: ARITH  (r0 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:1369)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0051|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0051|RETURN\l|0x0051: RETURN  (r4 I:S extends java.util.Collection\<T\> A[D('list' S extends java.util.Collection\<T\>)])  (LINE:1386)\l}"];
MethodNode[shape=record,label="{private S extends java.util.Collection\<T\> androidx.versionedparcelable.VersionedParcel.readCollection((r3 'this' I:androidx.versionedparcelable.VersionedParcel A[IMMUTABLE_TYPE, THIS]), (r4 I:S extends java.util.Collection\<T\> A[D('list' S extends java.util.Collection\<T\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0010 \-\> B:28:?, BACK_EDGE: B:39:0x0017 \-\> B:38:0x0015, CROSS_EDGE: B:48:0x0051 \-\> B:28:?, BACK_EDGE: B:41:0x0023 \-\> B:40:0x0021, CROSS_EDGE: B:40:0x0021 \-\> B:48:0x0051, BACK_EDGE: B:43:0x002f \-\> B:42:0x002d, CROSS_EDGE: B:42:0x002d \-\> B:48:0x0051, BACK_EDGE: B:45:0x003b \-\> B:44:0x0039, CROSS_EDGE: B:44:0x0039 \-\> B:48:0x0051, BACK_EDGE: B:47:0x0047 \-\> B:46:0x0045, CROSS_EDGE: B:46:0x0045 \-\> B:48:0x0051, CROSS_EDGE: B:36:0x0011 \-\> B:48:0x0051, CROSS_EDGE: B:32:0x0008 \-\> B:48:0x0051\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0051: r2 'type' I\l  0x0004\-0x005f: r0 'n' I\l  0x0000\-0x005f: r4 'list' Ljava\/util\/Collection;, signature: TS;\lTYPE_VARS: [S extends java.util.Collection\<T\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;S::Ljava\/util\/Collection\<TT;\>;\>(TS;)TS;\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_28;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_48;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_28;
Node_36 -> Node_38;
Node_36 -> Node_40;
Node_36 -> Node_42;
Node_36 -> Node_44;
Node_36 -> Node_46;
Node_36 -> Node_48;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_49;
Node_39 -> Node_38;
Node_49 -> Node_48;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_50;
Node_41 -> Node_40;
Node_50 -> Node_48;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_51;
Node_43 -> Node_42;
Node_51 -> Node_48;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_52;
Node_45 -> Node_44;
Node_52 -> Node_48;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_53;
Node_47 -> Node_46;
Node_53 -> Node_48;
Node_48 -> Node_28;
}

