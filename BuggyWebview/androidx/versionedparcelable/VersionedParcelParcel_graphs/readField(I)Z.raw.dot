digraph "CFG forandroidx.versionedparcelable.VersionedParcelParcel.readField(I)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|LOOP_START\lLOOP:0: B:22:0x0000\-\>B:30:0x001c\l|0x0000: IGET  (r0 I:int) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mNextRead int  (LINE:70)\l0x0002: IGET  (r1 I:int) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mEnd int \l0x0004: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:36:0x0037 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mFieldId int  (LINE:71)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fieldId' int)])  \-\> B:27:0x000d \l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|0x000d: INVOKE  (r0 I:java.lang.String) = (r0 I:int) type: STATIC call: java.lang.String.valueOf(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:74)\l0x0011: INVOKE  (r1 I:java.lang.String) = (r5 I:int A[D('fieldId' int)]) type: STATIC call: java.lang.String.valueOf(int):java.lang.String A[MD:(int):java.lang.String (c)]\l0x0015: INVOKE  (r0 I:int) = (r0 I:java.lang.String), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.String.compareTo(java.lang.String):int A[MD:(java.lang.String):int (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0019|0x0019: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:30:0x001c \l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|LOOP_END\lLOOP:0: B:22:0x0000\-\>B:30:0x001c\l|0x001c: IGET  (r0 I:android.os.Parcel) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mParcel android.os.Parcel  (LINE:77)\l0x001e: IGET  (r1 I:int) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mNextRead int \l0x0020: INVOKE  (r0 I:android.os.Parcel), (r1 I:int) type: VIRTUAL call: android.os.Parcel.setDataPosition(int):void A[MD:(int):void (c)]\l0x0023: IGET  (r0 I:android.os.Parcel) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mParcel android.os.Parcel  (LINE:78)\l0x0025: INVOKE  (r0 I:int) = (r0 I:android.os.Parcel) type: VIRTUAL call: android.os.Parcel.readInt():int A[MD:():int (c)]\l0x0029: IGET  (r1 I:android.os.Parcel) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mParcel android.os.Parcel  (LINE:79)\l0x002b: INVOKE  (r1 I:int) = (r1 I:android.os.Parcel) type: VIRTUAL call: android.os.Parcel.readInt():int A[MD:():int (c)]\l0x002f: IPUT  (r1 I:int), (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mFieldId int \l0x0031: IGET  (r1 I:int) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mNextRead int  (LINE:82)\l0x0033: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('size' int)]) \l0x0034: IPUT  (r1 I:int), (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mNextRead int \l}"];
Node_37 [shape=record,label="{37\:\ 0x001b|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|RETURN\l|0x001b: RETURN  (r3 I:boolean)  (LINE:75)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x000c|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|RETURN\l|0x000c: RETURN  (r2 I:boolean)  (LINE:72)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0037|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0037|0x0037: IGET  (r0 I:int) = (r4 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mFieldId int  (LINE:84)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0039|0x0039: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fieldId' int)])  \-\> B:34:0x003c \l}"];
Node_34 [shape=record,label="{34\:\ 0x003c|RETURN\lORIG_RETURN\l|0x003c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003d: RETURN  (r2 I:boolean) \l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x003d: RETURN  (r2 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public boolean androidx.versionedparcelable.VersionedParcelParcel.readField((r4 'this' I:androidx.versionedparcelable.VersionedParcelParcel A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('fieldId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x001b \-\> B:21:?, BACK_EDGE: B:30:0x001c \-\> B:22:0x0000, CROSS_EDGE: B:35:0x003d \-\> B:21:?, CROSS_EDGE: B:32:0x0039 \-\> B:35:0x003d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0029\-0x0036: r0 'size' I\l  \-1 \-0x003d: r5 'fieldId' I\lMETHOD_OVERRIDE: [androidx.versionedparcelable.VersionedParcel.readField(int):boolean]\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_36;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_38[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_37[style=dashed];
Node_30 -> Node_22;
Node_37 -> Node_29;
Node_29 -> Node_21;
Node_38 -> Node_26;
Node_26 -> Node_21;
Node_36 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_39[style=dashed];
Node_34 -> Node_21;
Node_39 -> Node_21;
}

