digraph "CFG forandroidx.versionedparcelable.VersionedParcelParcel.readByteArray()[B" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:android.os.Parcel) = (r3 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mParcel android.os.Parcel  (LINE:236)\l0x0002: INVOKE  (r0 I:int) = (r0 I:android.os.Parcel) type: VIRTUAL call: android.os.Parcel.readInt():int A[MD:():int (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char] A[D('len' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:14:0x000a  (LINE:237)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|RETURN\l|0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:238)\l0x0009: RETURN  (r1 I:byte[]) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|0x000a: NEW_ARRAY  (r1 I:byte[]) = (r0 I:int A[D('len' int), IMMUTABLE_TYPE]) type: byte[]  (LINE:240)\l0x000c: IGET  (r2 I:android.os.Parcel) = (r3 I:androidx.versionedparcelable.VersionedParcelParcel) androidx.versionedparcelable.VersionedParcelParcel.mParcel android.os.Parcel  (LINE:241)\l0x000e: INVOKE  (r2 I:android.os.Parcel), (r1 I:byte[] A[D('bytes' byte[])]) type: VIRTUAL call: android.os.Parcel.readByteArray(byte[]):void A[MD:(byte[]):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|RETURN\l|0x0011: RETURN  (r1 I:byte[] A[D('bytes' byte[])])  (LINE:242)\l}"];
MethodNode[shape=record,label="{public byte[] androidx.versionedparcelable.VersionedParcelParcel.readByteArray((r3 'this' I:androidx.versionedparcelable.VersionedParcelParcel A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0011 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0011: r0 'len' I\l  0x000c\-0x0011: r1 'bytes' [B\lMETHOD_OVERRIDE: [androidx.versionedparcelable.VersionedParcel.readByteArray():byte[]]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

