digraph "CFG forandroidx.lifecycle.ProcessLifecycleOwner.dispatchPauseIfNeeded()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:androidx.lifecycle.ProcessLifecycleOwner) androidx.lifecycle.ProcessLifecycleOwner.mResumedCounter int  (LINE:142)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:143)\l0x0005: IPUT  (r0 I:boolean), (r2 I:androidx.lifecycle.ProcessLifecycleOwner) androidx.lifecycle.ProcessLifecycleOwner.mPauseSent boolean \l0x0007: IGET  (r0 I:androidx.lifecycle.LifecycleRegistry) = (r2 I:androidx.lifecycle.ProcessLifecycleOwner) androidx.lifecycle.ProcessLifecycleOwner.mRegistry androidx.lifecycle.LifecycleRegistry  (LINE:144)\l0x0009: SGET  (r1 I:androidx.lifecycle.Lifecycle$Event) =  androidx.lifecycle.Lifecycle.Event.ON_PAUSE androidx.lifecycle.Lifecycle$Event \l0x000b: INVOKE  (r0 I:androidx.lifecycle.LifecycleRegistry), (r1 I:androidx.lifecycle.Lifecycle$Event) type: VIRTUAL call: androidx.lifecycle.LifecycleRegistry.handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event):void A[MD:(androidx.lifecycle.Lifecycle$Event):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000e|RETURN\lORIG_RETURN\l|0x000e: RETURN    (LINE:146)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000e: RETURN   A[SYNTHETIC] (LINE:146)\l}"];
MethodNode[shape=record,label="{void androidx.lifecycle.ProcessLifecycleOwner.dispatchPauseIfNeeded((r2 'this' I:androidx.lifecycle.ProcessLifecycleOwner A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000e\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

