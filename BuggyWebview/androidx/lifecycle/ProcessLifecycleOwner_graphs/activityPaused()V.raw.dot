digraph "CFG forandroidx.lifecycle.ProcessLifecycleOwner.activityPaused()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r4 I:androidx.lifecycle.ProcessLifecycleOwner) androidx.lifecycle.ProcessLifecycleOwner.mResumedCounter int  (LINE:130)\l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0004: IPUT  (r0 I:int), (r4 I:androidx.lifecycle.ProcessLifecycleOwner) androidx.lifecycle.ProcessLifecycleOwner.mResumedCounter int \l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:131)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IGET  (r0 I:android.os.Handler) = (r4 I:androidx.lifecycle.ProcessLifecycleOwner) androidx.lifecycle.ProcessLifecycleOwner.mHandler android.os.Handler  (LINE:132)\l0x000a: IGET  (r1 I:java.lang.Runnable) = (r4 I:androidx.lifecycle.ProcessLifecycleOwner) androidx.lifecycle.ProcessLifecycleOwner.mDelayedPauseRunnable java.lang.Runnable \l0x000c: CONST  (r2 I:??[long, double]) = (700(0x2bc, double:3.46E\-321) ??[long, double]) \l0x000e: INVOKE  (r0 I:android.os.Handler), (r1 I:java.lang.Runnable), (r2 I:long) type: VIRTUAL call: android.os.Handler.postDelayed(java.lang.Runnable, long):boolean A[MD:(java.lang.Runnable, long):boolean (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: RETURN    (LINE:134)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN   A[SYNTHETIC] (LINE:134)\l}"];
MethodNode[shape=record,label="{void androidx.lifecycle.ProcessLifecycleOwner.activityPaused((r4 'this' I:androidx.lifecycle.ProcessLifecycleOwner A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0006 \-\> B:12:0x0011\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

