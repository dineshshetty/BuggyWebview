digraph "CFG forandroidx.lifecycle.SavedStateViewModelFactoryKt.newInstance(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Constructor;[Ljava\/lang\/Object;)Landroidx\/lifecycle\/ViewModel;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"modelClass\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"constructor\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"params\")\l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IllegalAccessException \-\> 0x0058, InstantiationException \-\> 0x0038, InvocationTargetException \-\> 0x001c, blocks: (B:19:0x0010), top: B:30:0x0010 \}\lCatch: InvocationTargetException \-\> 0x001c, InstantiationException \-\> 0x0038, IllegalAccessException \-\> 0x0058\l}"];
Node_20 [shape=record,label="{20\:\ 0x001b|RETURN\l|return r5.newInstance(java.util.Arrays.copyOf(r6, r6.length))\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x0058|ExcHandler: IllegalAccessException \-\> 0x0058\l|java.lang.IllegalAccessException r0 = move\-exception\l}"];
Node_28 [shape=record,label="{28\:\ 0x0059|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Failed to access \")\lr2.append(r4)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0072|throw new java.lang.RuntimeException(r2.toString(), r0)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0038|ExcHandler: InstantiationException \-\> 0x0038\l|java.lang.InstantiationException r0 = move\-exception\l}"];
Node_25 [shape=record,label="{25\:\ 0x0039|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"A \")\lr2.append(r4)\lr2.append(\" cannot be instantiated.\")\l}"];
Node_26 [shape=record,label="{26\:\ 0x0057|throw new java.lang.RuntimeException(r2.toString(), r0)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|ExcHandler: InvocationTargetException \-\> 0x001c\l|java.lang.reflect.InvocationTargetException r0 = move\-exception\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"An exception happened in constructor of \")\lr2.append(r4)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0037|throw new java.lang.RuntimeException(r2.toString(), r0.getCause())\l}"];
MethodNode[shape=record,label="{public static final T extends androidx.lifecycle.ViewModel androidx.lifecycle.SavedStateViewModelFactoryKt.newInstance((r4v0 'modelClass' java.lang.Class\<T extends androidx.lifecycle.ViewModel\> A[D('modelClass' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'constructor' java.lang.reflect.Constructor\<T extends androidx.lifecycle.ViewModel\> A[D('constructor' java.lang.reflect.Constructor), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'params' java.lang.Object[] A[D('params' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0072 \-\> B:17:?, CROSS_EDGE: B:26:0x0057 \-\> B:17:?, CROSS_EDGE: B:23:0x0037 \-\> B:17:?, CROSS_EDGE: B:30:0x0010 \-\> B:27:0x0058, CROSS_EDGE: B:30:0x0010 \-\> B:24:0x0038, CROSS_EDGE: B:30:0x0010 \-\> B:21:0x001c\lINLINE_NOT_NEEDED\lTryCatch #2 \{IllegalAccessException \-\> 0x0058, InstantiationException \-\> 0x0038, InvocationTargetException \-\> 0x001c, blocks: (B:19:0x0010), top: B:30:0x0010 \}\lTYPE_VARS: [T extends androidx.lifecycle.ViewModel]\lSIGNATURE: \<T:Landroidx\/lifecycle\/ViewModel;\>(Ljava\/lang\/Class\<TT;\>;Ljava\/lang\/reflect\/Constructor\<TT;\>;[Ljava\/lang\/Object;)TT;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_30;
Node_30 -> Node_19;
Node_30 -> Node_27;
Node_30 -> Node_24;
Node_30 -> Node_21;
Node_19 -> Node_20;
Node_19 -> Node_31;
Node_20 -> Node_17;
Node_31 -> Node_27;
Node_31 -> Node_24;
Node_31 -> Node_21;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

