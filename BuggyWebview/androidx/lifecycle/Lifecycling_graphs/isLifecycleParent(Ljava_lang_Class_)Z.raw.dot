digraph "CFG forandroidx.lifecycle.Lifecycling.isLifecycleParent(Ljava\/lang\/Class;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('klass' java.lang.Class\<?\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c  (LINE:202)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: CONST_CLASS  (r0 I:java.lang.Class\<androidx.lifecycle.LifecycleObserver\>) =  androidx.lifecycle.LifecycleObserver.class \l0x0004: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Class), (r1 I:java.lang.Class A[D('klass' java.lang.Class\<?\>)]) type: VIRTUAL call: java.lang.Class.isAssignableFrom(java.lang.Class):boolean A[MD:(java.lang.Class\<?\>):boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|SYNTHETIC\lRETURN\l|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean androidx.lifecycle.Lifecycling.isLifecycleParent((r1 I:java.lang.Class\<?\> A[D('klass' java.lang.Class\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000c \-\> B:7:0x000d, CROSS_EDGE: B:2:0x0000 \-\> B:6:0x000c\lDebug Info:\l  0x0000\-0x000d: r1 'klass' Ljava\/lang\/Class;, signature: Ljava\/lang\/Class\<*\>;\lSIGNATURE: (Ljava\/lang\/Class\<*\>;)Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

