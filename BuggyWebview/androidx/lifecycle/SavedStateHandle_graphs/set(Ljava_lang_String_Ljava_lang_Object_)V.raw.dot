digraph "CFG forandroidx.lifecycle.SavedStateHandle.set(Ljava\/lang\/String;Ljava\/lang\/Object;)V" {
Node_40 [shape=record,label="{40\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"key\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('key' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: SGET  (r0 I:androidx.lifecycle.SavedStateHandle$Companion) =  androidx.lifecycle.SavedStateHandle.Companion androidx.lifecycle.SavedStateHandle$Companion  (LINE:240)\l0x0007: INVOKE  (r0 I:boolean) = (r0 I:androidx.lifecycle.SavedStateHandle$Companion), (r5 I:java.lang.Object A[D('value' java.lang.Object)]) type: VIRTUAL call: androidx.lifecycle.SavedStateHandle.Companion.validateValue(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0036 \l}"];
Node_44 [shape=record,label="{44\:\ 0x000d|0x000d: IGET  (r0 I:java.util.Map\<java.lang.String, androidx.lifecycle.SavedStateHandle$SavingStateLiveData\<?\>\>) = (r3 I:androidx.lifecycle.SavedStateHandle) androidx.lifecycle.SavedStateHandle.liveDatas java.util.Map  (LINE:246)\l0x000f: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r4 I:java.lang.Object A[D('key' java.lang.String)]) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0013: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) androidx.lifecycle.MutableLiveData \l}"];
Node_45 [shape=record,label="{45\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x001a \l}"];
Node_46 [shape=record,label="{46\:\ 0x0017|0x0017: CHECK_CAST (r0 I:androidx.lifecycle.MutableLiveData) = (androidx.lifecycle.MutableLiveData) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x001c|0x001c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mutableLiveData' androidx.lifecycle.MutableLiveData)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0022  (LINE:247)\l}"];
Node_50 [shape=record,label="{50\:\ 0x001e|0x001e: INVOKE  \l  (r0 I:androidx.lifecycle.MutableLiveData A[D('mutableLiveData' androidx.lifecycle.MutableLiveData)])\l  (r5 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: androidx.lifecycle.MutableLiveData.setValue(java.lang.Object):void A[MD:(T):void (m)] (LINE:249)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0027|0x0027: IGET  (r1 I:java.util.Map\<java.lang.String, kotlinx.coroutines.flow.MutableStateFlow\<java.lang.Object\>\>) = (r3 I:androidx.lifecycle.SavedStateHandle) androidx.lifecycle.SavedStateHandle.flows java.util.Map  (LINE:253)\l0x0029: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Map), (r4 I:java.lang.Object A[D('key' java.lang.String)]) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x002d: CHECK_CAST (r1 I:kotlinx.coroutines.flow.MutableStateFlow) = (kotlinx.coroutines.flow.MutableStateFlow) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x002f|0x002f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x0032 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0032|0x0032: INVOKE  (r1 I:kotlinx.coroutines.flow.MutableStateFlow), (r5 I:java.lang.Object A[D('value' java.lang.Object)]) type: INTERFACE call: kotlinx.coroutines.flow.MutableStateFlow.setValue(java.lang.Object):void A[MD:(T):void (m)]\l}"];
Node_56 [shape=record,label="{56\:\ 0x0035|RETURN\lORIG_RETURN\l|0x0035: RETURN    (LINE:254)\l}"];
Node_41 [shape=record,label="{41\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lRETURN\l|0x0035: RETURN   A[SYNTHETIC] (LINE:254)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0022|0x0022: IGET  (r1 I:java.util.Map\<java.lang.String, java.lang.Object\>) = (r3 I:androidx.lifecycle.SavedStateHandle) androidx.lifecycle.SavedStateHandle.regular java.util.Map  (LINE:251)\l0x0024: INVOKE  \l  (r1 I:java.util.Map)\l  (r4 I:java.lang.Object A[D('key' java.lang.String)])\l  (r5 I:java.lang.Object A[D('value' java.lang.Object)])\l type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x001a|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0036|0x0036: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('mutableLiveData' androidx.lifecycle.MutableLiveData)]) =  java.lang.IllegalArgumentException  (LINE:241)\l0x0038: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:242)\l0x003a: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x003d: CONST_STR  (r2 I:java.lang.String) =  \"Can't put value with type \" \l0x003f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0042: INVOKE  (r5 I:java.lang.Object A[D('value' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0045: INVOKE  (r2 I:java.lang.Class) = (r5 I:java.lang.Object A[D('value' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.getClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)]\l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x004c: CONST_STR  (r2 I:java.lang.String) =  \" into saved state\" \l0x004e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0051: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0055: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)] (LINE:241)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0058|0x0058: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void androidx.lifecycle.SavedStateHandle.set((r3 'this' I:androidx.lifecycle.SavedStateHandle A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:53:0x002f \-\> B:56:0x0035, CROSS_EDGE: B:51:0x0022 \-\> B:52:0x0027, CROSS_EDGE: B:47:0x001a \-\> B:49:0x001c, CROSS_EDGE: B:58:0x0058 \-\> B:41:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x0036: r0 'mutableLiveData' Landroidx\/lifecycle\/MutableLiveData;\l  \-1 \-0x0058: r4 'key' Ljava\/lang\/String;\l  \-1 \-0x0058: r5 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/String;TT;)V\l}"];
MethodNode -> Node_40;Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_57;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_55;
Node_53 -> Node_59[style=dashed];
Node_55 -> Node_56;
Node_56 -> Node_41;
Node_59 -> Node_41;
Node_51 -> Node_52;
Node_47 -> Node_49;
Node_57 -> Node_58;
Node_58 -> Node_41;
}

