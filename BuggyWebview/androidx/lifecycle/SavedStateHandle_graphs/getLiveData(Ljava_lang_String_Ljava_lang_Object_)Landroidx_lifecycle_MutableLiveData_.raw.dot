digraph "CFG forandroidx.lifecycle.SavedStateHandle.getLiveData(Ljava\/lang\/String;Ljava\/lang\/Object;)Landroidx\/lifecycle\/MutableLiveData;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"key\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('key' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:148)\l0x0006: INVOKE  (r0 I:androidx.lifecycle.MutableLiveData) = \l  (r1 I:androidx.lifecycle.SavedStateHandle)\l  (r2 I:java.lang.String A[D('key' java.lang.String)])\l  (r0 I:boolean)\l  (r3 I:java.lang.Object A[D('initialValue' java.lang.Object)])\l type: DIRECT call: androidx.lifecycle.SavedStateHandle.getLiveDataInternal(java.lang.String, boolean, java.lang.Object):androidx.lifecycle.MutableLiveData A[MD:\<T\>:(java.lang.String, boolean, T):androidx.lifecycle.MutableLiveData\<T\> (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:androidx.lifecycle.MutableLiveData\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final androidx.lifecycle.MutableLiveData\<T\> androidx.lifecycle.SavedStateHandle.getLiveData((r1 'this' I:androidx.lifecycle.SavedStateHandle A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:T A[D('initialValue' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000a: r2 'key' Ljava\/lang\/String;\l  \-1 \-0x000a: r3 'initialValue' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/String;TT;)Landroidx\/lifecycle\/MutableLiveData\<TT;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

