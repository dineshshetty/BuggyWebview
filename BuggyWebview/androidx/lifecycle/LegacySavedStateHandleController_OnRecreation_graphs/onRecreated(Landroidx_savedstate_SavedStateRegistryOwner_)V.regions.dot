digraph "CFG forandroidx.lifecycle.LegacySavedStateHandleController.OnRecreation.onRecreated(Landroidx\/savedstate\/SavedStateRegistryOwner;)V" {
subgraph cluster_Region_678820691 {
label = "R(1:(2:(1:15)|(3:3|(1:6)|(1:(1:10)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1525414399 {
label = "R(2:(1:15)|(3:3|(1:6)|(1:(1:10))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_583071767 {
label = "IF [B:19:0x0002] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0002|if ((r7 instanceof androidx.lifecycle.ViewModelStoreOwner) == false) goto L14\l}"];
subgraph cluster_Region_1851227721 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0046|throw new java.lang.IllegalStateException(\"Internal error: OnRecreation should be registered only on components that implement ViewModelStoreOwner\")\l}"];
}
}
subgraph cluster_Region_837615970 {
label = "R(3:3|(1:6)|(1:(1:10)))";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0004|androidx.lifecycle.ViewModelStore androidx.lifecycle.ViewModelStore r0 = ((androidx.lifecycle.ViewModelStoreOwner) r7).getViewModelStore()\landroidx.savedstate.SavedStateRegistry androidx.savedstate.SavedStateRegistry r1 = r7.getSavedStateRegistry()\ljava.util.Iterator r2 = r0.keys().iterator()\l\l}"];
subgraph cluster_LoopRegion_1769979827 {
label = "LOOP:0: (1:6)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x001b|java.lang.String \lif (r2.hasNext() != false) goto L6\l}"];
subgraph cluster_Region_1978013996 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x001d|LOOP_END\lLOOP:0: B:21:0x0017\-\>B:23:0x001d\l|java.lang.String r3 = r2.next()\landroidx.lifecycle.ViewModel androidx.lifecycle.ViewModel r4 = r0.get(r3)\landroidx.lifecycle.LegacySavedStateHandleController.attachHandleIfNeeded(r4, r1, r7.getLifecycle())\l}"];
}
}
subgraph cluster_Region_1826522978 {
label = "R(1:(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1329074923 {
label = "IF [B:25:0x0037] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0037|if (r0.keys().isEmpty() == false) goto L10\l}"];
subgraph cluster_Region_990668337 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0039|r1.runOnNextRecreation(androidx.lifecycle.LegacySavedStateHandleController.OnRecreation.class)\l}"];
}
}
}
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0000}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0017|LOOP_START\lLOOP:0: B:21:0x0017\-\>B:23:0x001d\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x002f|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x002f}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x003e|ORIG_RETURN\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ ?|SYNTHETIC\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x003f}"];
MethodNode[shape=record,label="{public void androidx.lifecycle.LegacySavedStateHandleController.OnRecreation.onRecreated((r6v0 'this' androidx.lifecycle.LegacySavedStateHandleController$OnRecreation A[IMMUTABLE_TYPE, THIS]), (r7v0 'owner' androidx.savedstate.SavedStateRegistryOwner A[D('owner' androidx.savedstate.SavedStateRegistryOwner), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x001d \-\> B:21:0x0017, CROSS_EDGE: B:25:0x0037 \-\> B:27:0x003e, CROSS_EDGE: B:29:0x0046 \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.savedstate.SavedStateRegistry.AutoRecreated.onRecreated(androidx.savedstate.SavedStateRegistryOwner):void]\l}"];
MethodNode -> Node_16;Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_29 -> Node_17;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_22 -> Node_30[style=dashed];
Node_23 -> Node_21;
Node_25 -> Node_26;
Node_25 -> Node_31[style=dashed];
Node_26 -> Node_27;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_21 -> Node_22;
Node_30 -> Node_24;
Node_24 -> Node_25;
Node_27 -> Node_17;
Node_31 -> Node_17;
Node_28 -> Node_29;
}

