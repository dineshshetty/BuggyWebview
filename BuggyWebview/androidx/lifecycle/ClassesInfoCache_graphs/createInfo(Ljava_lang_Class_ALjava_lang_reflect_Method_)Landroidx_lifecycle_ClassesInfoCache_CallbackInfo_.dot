digraph "CFG forandroidx.lifecycle.ClassesInfoCache.createInfo(Ljava\/lang\/Class;[Ljava\/lang\/reflect\/Method;)Landroidx\/lifecycle\/ClassesInfoCache$CallbackInfo;" {
Node_57 [shape=record,label="{57\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ 0x0000|java.lang.Class r2 = r17.getSuperclass()\ljava.util.HashMap r3 = new java.util.HashMap\<\>()\l}"];
Node_60 [shape=record,label="{60\:\ 0x000d|if (r2 == null) goto L6\l}"];
Node_61 [shape=record,label="{61\:\ 0x000f|androidx.lifecycle.ClassesInfoCache$CallbackInfo r4 = getInfo(r2)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0013|if (r4 == null) goto L6\l}"];
Node_63 [shape=record,label="{63\:\ 0x0015|r3.putAll(r4.mHandlerToEvent)\l}"];
Node_64 [shape=record,label="{64\:\ 0x001a|java.lang.Class[] r4 = r17.getInterfaces()\lint r5 = r4.length\lr6 = 0\lr7 = 0\l}"];
Node_65 [shape=record,label="{65\:\ 0x0021|LOOP_START\lLOOP:0: B:65:0x0021\-\>B:70:0x004f\lPHI: r7 \l  PHI: (r7v1 int) = (r7v0 int), (r7v6 int) binds: [B:64:0x001a, B:70:0x004f] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 \>= r5) goto L14\l}"];
Node_66 [shape=record,label="{66\:\ 0x0023|r8 = r4[r7]\ljava.util.Iterator r9 = getInfo(r8).mHandlerToEvent.entrySet().iterator()\l}"];
Node_67 [shape=record,label="{67\:\ 0x0033|LOOP_START\lLOOP:1: B:67:0x0033\-\>B:69:0x0039\l}"];
Node_68 [shape=record,label="{68\:\ 0x0037|if (r9.hasNext() == false) goto L12\l}"];
Node_69 [shape=record,label="{69\:\ 0x0039|LOOP_END\lLOOP:1: B:67:0x0033\-\>B:69:0x0039\l|java.util.Map$Entry r10 = r9.next()\lverifyAndPutHandler(r3, r10.getKey(), r10.getValue(), r17)\l}"];
Node_106 [shape=record,label="{106\:\ 0x004f|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x004f|LOOP_END\lLOOP:0: B:65:0x0021\-\>B:70:0x004f\l|int r7 = r7 + 1\l}"];
Node_105 [shape=record,label="{105\:\ 0x0052|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0052|if (r18 == null) goto L53\l}"];
Node_72 [shape=record,label="{72\:\ 0x0054|r5 = r18\l}"];
Node_74 [shape=record,label="{74\:\ 0x005b|PHI: r5 \l  PHI: (r5v2 'methods' java.lang.reflect.Method[]) = (r5v1 'methods' java.lang.reflect.Method[]), (r5v3 'methods' java.lang.reflect.Method[]) binds: [B:73:0x0057, B:72:0x0054] A[DONT_GENERATE, DONT_INLINE]\l|r7 = false\lint r8 = r5.length\lr9 = 0\l}"];
Node_75 [shape=record,label="{75\:\ 0x005e|LOOP_START\lLOOP:2: B:75:0x005e\-\>B:100:0x00be\lPHI: r6 r7 r9 \l  PHI: (r6v1 char) = (r6v0 char), (r6v3 char) binds: [B:74:0x005b, B:100:0x00be] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v3 'hasLifecycleMethods' boolean) = (r7v2 'hasLifecycleMethods' boolean), (r7v4 'hasLifecycleMethods' boolean) binds: [B:74:0x005b, B:100:0x00be] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 int) = (r9v0 int), (r9v3 int) binds: [B:74:0x005b, B:100:0x00be] A[DONT_GENERATE, DONT_INLINE]\l|if (r9 \>= r8) goto L50\l}"];
Node_76 [shape=record,label="{76\:\ 0x0060|r10 = r5[r9]\landroidx.lifecycle.OnLifecycleEvent r11 = (androidx.lifecycle.OnLifecycleEvent) r10.getAnnotation(androidx.lifecycle.OnLifecycleEvent.class)\l}"];
Node_77 [shape=record,label="{77\:\ 0x006a|if (r11 != null) goto L21\l}"];
Node_79 [shape=record,label="{79\:\ 0x006d|r7 = true\ljava.lang.Class[] r12 = r10.getParameterTypes()\lr13 = 0\l}"];
Node_80 [shape=record,label="{80\:\ 0x0074|if (r12.length \<= 0) goto L29\l}"];
Node_81 [shape=record,label="{81\:\ 0x0076|r13 = 1\l}"];
Node_82 [shape=record,label="{82\:\ 0x007f|if (r12[r6].isAssignableFrom(androidx.lifecycle.LifecycleOwner.class) == false) goto L25\l}"];
Node_110 [shape=record,label="{110\:\ 0x0082|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x0082}"];
Node_85 [shape=record,label="{85\:\ 0x0089|throw new java.lang.IllegalArgumentException(\"invalid parameter type. Must be one and instanceof LifecycleOwner\")\l}"];
Node_58 [shape=record,label="{58\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_86 [shape=record,label="{86\:\ 0x008a|PHI: r13 \l  PHI: (r13v1 'callType' int) = (r13v0 'callType' int), (r13v4 'callType' int) binds: [B:80:0x0074, B:82:0x007f] A[DONT_GENERATE, DONT_INLINE]\l|androidx.lifecycle.Lifecycle$Event r14 = r11.value()\l}"];
Node_87 [shape=record,label="{87\:\ 0x0090|if (r12.length \<= 1) goto L41\l}"];
Node_88 [shape=record,label="{88\:\ 0x0092|r13 = 2\l}"];
Node_89 [shape=record,label="{89\:\ 0x009b|if (r12[1].isAssignableFrom(androidx.lifecycle.Lifecycle.Event.class) == false) goto L38\l}"];
Node_90 [shape=record,label="{90\:\ 0x009d}"];
Node_91 [shape=record,label="{91\:\ 0x009f|if (r14 != androidx.lifecycle.Lifecycle.Event.ON_ANY) goto L35\l}"];
Node_111 [shape=record,label="{111\:\ 0x00a2|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x00a2}"];
Node_94 [shape=record,label="{94\:\ 0x00a9|throw new java.lang.IllegalArgumentException(\"Second arg is supported only for ON_ANY value\")\l}"];
Node_108 [shape=record,label="{108\:\ 0x00aa|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x00aa}"];
Node_96 [shape=record,label="{96\:\ 0x00b1|throw new java.lang.IllegalArgumentException(\"invalid parameter type. second arg must be an event\")\l}"];
Node_97 [shape=record,label="{97\:\ 0x00b2|PHI: r13 \l  PHI: (r13v2 'callType' int) = (r13v1 'callType' int), (r13v3 'callType' int) binds: [B:87:0x0090, B:91:0x009f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_98 [shape=record,label="{98\:\ 0x00b4|if (r12.length \> 2) goto L46\l}"];
Node_99 [shape=record,label="{99\:\ 0x00b6|androidx.lifecycle.ClassesInfoCache$MethodReference r6 = new androidx.lifecycle.ClassesInfoCache.MethodReference(r13, r10)\lverifyAndPutHandler(r3, r6, r14, r17)\l}"];
Node_112 [shape=record,label="{112\:\ 0x00be|SYNTHETIC\l}"];
Node_100 [shape=record,label="{100\:\ 0x00be|LOOP_END\lLOOP:2: B:75:0x005e\-\>B:100:0x00be\lPHI: r7 \l  PHI: (r7v4 'hasLifecycleMethods' boolean) = (r7v3 'hasLifecycleMethods' boolean), (r7v5 'hasLifecycleMethods' boolean) binds: [B:113:0x00be, B:112:0x00be] A[DONT_GENERATE, DONT_INLINE]\l|int r9 = r9 + 1\lr6 = 0\l}"];
Node_107 [shape=record,label="{107\:\ 0x00c2|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x00c2}"];
Node_102 [shape=record,label="{102\:\ 0x00c9|throw new java.lang.IllegalArgumentException(\"cannot have more than 2 params\")\l}"];
Node_113 [shape=record,label="{113\:\ 0x00be|SYNTHETIC\l}"];
Node_109 [shape=record,label="{109\:\ 0x00ca|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x00ca|androidx.lifecycle.ClassesInfoCache$CallbackInfo r6 = new androidx.lifecycle.ClassesInfoCache.CallbackInfo(r3)\lr16.mCallbackMap.put(r17, r6)\lr16.mHasLifecycleMethods.put(r17, java.lang.Boolean.valueOf(r7))\l}"];
Node_104 [shape=record,label="{104\:\ 0x00dd|RETURN\l|return r6\l}"];
Node_73 [shape=record,label="{73\:\ 0x0057|java.lang.reflect.Method[] r5 = getDeclaredMethods(r17)\l}"];
MethodNode[shape=record,label="{private androidx.lifecycle.ClassesInfoCache$CallbackInfo androidx.lifecycle.ClassesInfoCache.createInfo((r16v0 'this' androidx.lifecycle.ClassesInfoCache A[IMMUTABLE_TYPE, THIS]), (r17v0 'klass' java.lang.Class\<?\> A[D('klass' java.lang.Class\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'declaredMethods' java.lang.reflect.Method[] A[D('declaredMethods' java.lang.reflect.Method[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:69:0x0039 \-\> B:67:0x0033, BACK_EDGE: B:70:0x004f \-\> B:65:0x0021, CROSS_EDGE: B:94:0x00a9 \-\> B:58:?, BACK_EDGE: B:100:0x00be \-\> B:75:0x005e, CROSS_EDGE: B:102:0x00c9 \-\> B:58:?, CROSS_EDGE: B:96:0x00b1 \-\> B:58:?, CROSS_EDGE: B:87:0x0090 \-\> B:97:0x00b2, CROSS_EDGE: B:80:0x0074 \-\> B:86:0x008a, CROSS_EDGE: B:77:0x006a \-\> B:100:0x00be, CROSS_EDGE: B:104:0x00dd \-\> B:58:?, CROSS_EDGE: B:73:0x0057 \-\> B:74:0x005b, CROSS_EDGE: B:62:0x0013 \-\> B:64:0x001a, CROSS_EDGE: B:60:0x000d \-\> B:64:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/Class\<*\>;[Ljava\/lang\/reflect\/Method;)Landroidx\/lifecycle\/ClassesInfoCache$CallbackInfo;\l}"];
MethodNode -> Node_57;Node_57 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_64;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_105;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_106;
Node_69 -> Node_67;
Node_106 -> Node_70;
Node_70 -> Node_65;
Node_105 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_73;
Node_72 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_109;
Node_76 -> Node_77;
Node_77 -> Node_79;
Node_77 -> Node_113[style=dashed];
Node_79 -> Node_80;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_86;
Node_81 -> Node_82;
Node_82 -> Node_86[style=dashed];
Node_82 -> Node_110;
Node_110 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_58;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_97;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_108;
Node_90 -> Node_91;
Node_91 -> Node_97[style=dashed];
Node_91 -> Node_111;
Node_111 -> Node_93;
Node_93 -> Node_94;
Node_94 -> Node_58;
Node_108 -> Node_95;
Node_95 -> Node_96;
Node_96 -> Node_58;
Node_97 -> Node_98;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_107;
Node_99 -> Node_112;
Node_112 -> Node_100;
Node_100 -> Node_75;
Node_107 -> Node_101;
Node_101 -> Node_102;
Node_102 -> Node_58;
Node_113 -> Node_100;
Node_109 -> Node_103;
Node_103 -> Node_104;
Node_104 -> Node_58;
Node_73 -> Node_74;
}

