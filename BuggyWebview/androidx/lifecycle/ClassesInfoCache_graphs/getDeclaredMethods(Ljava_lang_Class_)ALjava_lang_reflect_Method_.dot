digraph "CFG forandroidx.lifecycle.ClassesInfoCache.getDeclaredMethods(Ljava\/lang\/Class;)[Ljava\/lang\/reflect\/Method;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NoClassDefFoundError \-\> 0x0005, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lCatch: NoClassDefFoundError \-\> 0x0005\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|RETURN\l|return r4.getDeclaredMethods()\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|ExcHandler: NoClassDefFoundError \-\> 0x0005\l|java.lang.NoClassDefFoundError r0 = move\-exception\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006}"];
Node_15 [shape=record,label="{15\:\ 0x000d|throw new java.lang.IllegalArgumentException(\"The observer class has some methods that use newer APIs which are not available in the current OS version. Lifecycles cannot access even other methods so you should make sure that your observer classes only access framework classes that are available in your min API level OR use lifecycle:compiler annotation processor.\", r0)\l}"];
MethodNode[shape=record,label="{private java.lang.reflect.Method[] androidx.lifecycle.ClassesInfoCache.getDeclaredMethods((r3v0 'this' androidx.lifecycle.ClassesInfoCache A[IMMUTABLE_TYPE, THIS]), (r4v0 'klass' java.lang.Class\<?\> A[D('klass' java.lang.Class\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000d \-\> B:10:?, CROSS_EDGE: B:16:0x0000 \-\> B:13:0x0005\lINLINE_NOT_NEEDED\lTryCatch #0 \{NoClassDefFoundError \-\> 0x0005, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/Class\<*\>;)[Ljava\/lang\/reflect\/Method;\l}"];
MethodNode -> Node_9;Node_9 -> Node_16;
Node_16 -> Node_11;
Node_16 -> Node_13;
Node_11 -> Node_12;
Node_11 -> Node_17;
Node_12 -> Node_10;
Node_17 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_10;
}

