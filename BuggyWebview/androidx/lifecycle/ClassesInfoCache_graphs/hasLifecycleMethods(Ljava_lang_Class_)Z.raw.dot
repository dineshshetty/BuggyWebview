digraph "CFG forandroidx.lifecycle.ClassesInfoCache.hasLifecycleMethods(Ljava\/lang\/Class;)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: IGET  (r0 I:java.util.Map\<java.lang.Class\<?\>, java.lang.Boolean\>) = (r7 I:androidx.lifecycle.ClassesInfoCache) androidx.lifecycle.ClassesInfoCache.mHasLifecycleMethods java.util.Map  (LINE:49)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Map), (r8 I:java.lang.Object A[D('klass' java.lang.Class\<?\>)]) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0006: CHECK_CAST (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasLifecycleMethods' java.lang.Boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x000f  (LINE:50)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: INVOKE  (r1 I:boolean) = (r0 I:java.lang.Boolean A[D('hasLifecycleMethods' java.lang.Boolean)]) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)] (LINE:51)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|RETURN\l|0x000e: RETURN  (r1 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.reflect.Method[]) = (r7 I:androidx.lifecycle.ClassesInfoCache), (r8 I:java.lang.Class A[D('klass' java.lang.Class\<?\>)]) type: DIRECT call: androidx.lifecycle.ClassesInfoCache.getDeclaredMethods(java.lang.Class):java.lang.reflect.Method[] A[MD:(java.lang.Class\<?\>):java.lang.reflect.Method[] (m)] (LINE:54)\l0x0013: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[] A[D('methods' java.lang.reflect.Method[])])  (LINE:55)\l0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|LOOP_START\lLOOP:0: B:24:0x0016\-\>B:29:0x0029\l|0x0016: IF  (r4 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:33:0x002c \l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|0x0018: AGET  (r5 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][] A[D('methods' java.lang.reflect.Method[])]), (r4 I:??[int, short, byte, char]) \l0x001a: CONST_CLASS  (r6 I:java.lang.Class\<androidx.lifecycle.OnLifecycleEvent\>) =  androidx.lifecycle.OnLifecycleEvent.class  (LINE:56)\l0x001c: INVOKE  (r6 I:java.lang.annotation.Annotation) = (r5 I:java.lang.reflect.Method A[D('method' java.lang.reflect.Method)]), (r6 I:java.lang.Class) type: VIRTUAL call: java.lang.reflect.Method.getAnnotation(java.lang.Class):java.lang.annotation.Annotation A[MD:\<T extends java.lang.annotation.Annotation\>:(java.lang.Class\<T extends java.lang.annotation.Annotation\>):T extends java.lang.annotation.Annotation (c)]\l0x0020: CHECK_CAST (r6 I:androidx.lifecycle.OnLifecycleEvent) = (androidx.lifecycle.OnLifecycleEvent) (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0022|0x0022: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('annotation' androidx.lifecycle.OnLifecycleEvent)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0029  (LINE:57)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|LOOP_END\lLOOP:0: B:24:0x0016\-\>B:29:0x0029\l|0x0029: ARITH  (r4 I:int) = (r4 I:int) + (1 int)  (LINE:55)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0024|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0024|0x0024: INVOKE  \l  (r7 I:androidx.lifecycle.ClassesInfoCache)\l  (r8 I:java.lang.Class A[D('klass' java.lang.Class\<?\>)])\l  (r1 I:java.lang.reflect.Method[] A[D('methods' java.lang.reflect.Method[])])\l type: DIRECT call: androidx.lifecycle.ClassesInfoCache.createInfo(java.lang.Class, java.lang.reflect.Method[]):androidx.lifecycle.ClassesInfoCache$CallbackInfo A[MD:(java.lang.Class\<?\>, java.lang.reflect.Method[]):androidx.lifecycle.ClassesInfoCache$CallbackInfo (m)] (LINE:64)\l0x0027: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:65)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0028|RETURN\l|0x0028: RETURN  (r2 I:boolean) \l}"];
Node_33 [shape=record,label="{33\:\ 0x002c|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002c|0x002c: IGET  (r2 I:java.util.Map\<java.lang.Class\<?\>, java.lang.Boolean\>) = (r7 I:androidx.lifecycle.ClassesInfoCache) androidx.lifecycle.ClassesInfoCache.mHasLifecycleMethods java.util.Map  (LINE:68)\l0x002e: INVOKE  (r4 I:java.lang.Boolean) = (r3 I:boolean) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (c)]\l0x0032: INVOKE  (r2 I:java.util.Map), (r8 I:java.lang.Object A[D('klass' java.lang.Class\<?\>)]), (r4 I:java.lang.Object) type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0035|RETURN\l|0x0035: RETURN  (r3 I:boolean)  (LINE:69)\l}"];
MethodNode[shape=record,label="{public boolean androidx.lifecycle.ClassesInfoCache.hasLifecycleMethods((r7 'this' I:androidx.lifecycle.ClassesInfoCache A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.Class\<?\> A[D('klass' java.lang.Class\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0028 \-\> B:18:?, BACK_EDGE: B:29:0x0029 \-\> B:24:0x0016, CROSS_EDGE: B:31:0x0035 \-\> B:18:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x0029: r5 'method' Ljava\/lang\/reflect\/Method;\l  0x0022\-0x0029: r6 'annotation' Landroidx\/lifecycle\/OnLifecycleEvent;\l  0x0008\-0x0035: r0 'hasLifecycleMethods' Ljava\/lang\/Boolean;\l  0x0013\-0x0035: r1 'methods' [Ljava\/lang\/reflect\/Method;\l  0x0000\-0x0035: r8 'klass' Ljava\/lang\/Class;, signature: Ljava\/lang\/Class\<*\>;\lSIGNATURE: (Ljava\/lang\/Class\<*\>;)Z\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_18;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_33;
Node_25 -> Node_26;
Node_26 -> Node_29;
Node_26 -> Node_32[style=dashed];
Node_29 -> Node_24;
Node_32 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_18;
Node_33 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_18;
}

