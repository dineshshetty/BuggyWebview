digraph "CFG forandroidx.lifecycle.LifecycleRegistry.isSynced()Z" {
subgraph cluster_Region_937622211 {
label = "R(1:(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1701684353 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2002372928 {
label = "IF [B:16:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0007|if (r4.mObserverMap.size() == 0) goto L3\l}"];
subgraph cluster_Region_1256968158 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0009|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_505172329 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000a|androidx.lifecycle.Lifecycle$State androidx.lifecycle.Lifecycle.State r0 = r4.mObserverMap.eldest().getValue().mState\landroidx.lifecycle.Lifecycle$State androidx.lifecycle.Lifecycle.State r2 = r4.mObserverMap.newest().getValue().mState\l}"];
Node_19 [shape=record,label="{19\:\ 0x0026|RETURN\l|return r0 == r2 && r4.mState == r2\l}"];
}
}
}
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0028}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x002a|REMOVE\lADDED_TO_REGION\l}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|SYNTHETIC\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x002d|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{private boolean androidx.lifecycle.LifecycleRegistry.isSynced((r4v0 'this' androidx.lifecycle.LifecycleRegistry A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x002e \-\> B:14:?, CROSS_EDGE: B:21:0x002a \-\> B:24:0x002e, CROSS_EDGE: B:19:0x0026 \-\> B:23:0x002d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_16 -> Node_17;
Node_16 -> Node_18[style=dashed];
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_23;
Node_13 -> Node_15;
Node_15 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_25;
Node_25 -> Node_14;
Node_23 -> Node_14;
}

