digraph "CFG forandroidx.lifecycle.LifecycleRegistry.enforceMainThreadIfNeeded(Ljava\/lang\/String;)V" {
subgraph cluster_Region_2039829823 {
label = "R(1:(1:(2:5|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1846025745 {
label = "R(1:(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1958006059 {
label = "IF [B:14:0x0002, B:16:0x000c] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0002|if (r3.mEnforceMainThread != false) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|ADDED_TO_REGION\l|if (androidx.arch.core.executor.ArchTaskExecutor.getInstance().isMainThread() == false) goto L5\l}"];
subgraph cluster_Region_1255870395 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000f}"];
Node_19 [shape=record,label="{19\:\ 0x002a|throw new java.lang.IllegalStateException(\"Method \" + r4 + \" must be called on the main thread\")\l}"];
}
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0004}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x002b|RETURN\lORIG_RETURN\lADDED_TO_REGION\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.lifecycle.LifecycleRegistry.enforceMainThreadIfNeeded((r3v0 'this' androidx.lifecycle.LifecycleRegistry A[IMMUTABLE_TYPE, THIS]), (r4v0 'methodName' java.lang.String A[D('methodName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x002b \-\> B:12:?, CROSS_EDGE: B:14:0x0002 \-\> B:20:0x002b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_14 -> Node_15;
Node_14 -> Node_20[style=dashed];
Node_16 -> Node_18;
Node_16 -> Node_21[style=dashed];
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_21 -> Node_12;
Node_20 -> Node_12;
}

