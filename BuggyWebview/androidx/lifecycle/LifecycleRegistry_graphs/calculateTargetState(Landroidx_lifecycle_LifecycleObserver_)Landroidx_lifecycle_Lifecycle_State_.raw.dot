digraph "CFG forandroidx.lifecycle.LifecycleRegistry.calculateTargetState(Landroidx\/lifecycle\/LifecycleObserver;)Landroidx\/lifecycle\/Lifecycle$State;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:androidx.arch.core.internal.FastSafeIterableMap\<androidx.lifecycle.LifecycleObserver, androidx.lifecycle.LifecycleRegistry$ObserverWithState\>) = (r4 I:androidx.lifecycle.LifecycleRegistry) androidx.lifecycle.LifecycleRegistry.mObserverMap androidx.arch.core.internal.FastSafeIterableMap  (LINE:168)\l0x0002: INVOKE  (r0 I:java.util.Map$Entry) = \l  (r0 I:androidx.arch.core.internal.FastSafeIterableMap)\l  (r5 I:java.lang.Object A[D('observer' androidx.lifecycle.LifecycleObserver)])\l type: VIRTUAL call: androidx.arch.core.internal.FastSafeIterableMap.ceil(java.lang.Object):java.util.Map$Entry A[MD:(K):java.util.Map$Entry\<K, V\> (m)]\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:170)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('previous' java.util.Map$Entry\<androidx.lifecycle.LifecycleObserver, androidx.lifecycle.LifecycleRegistry$ObserverWithState\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0012 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|0x0009: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:java.util.Map$Entry A[D('previous' java.util.Map$Entry\<androidx.lifecycle.LifecycleObserver, androidx.lifecycle.LifecycleRegistry$ObserverWithState\>)])\l type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)]\l0x000d: CHECK_CAST (r2 I:androidx.lifecycle.LifecycleRegistry$ObserverWithState) = (androidx.lifecycle.LifecycleRegistry$ObserverWithState) (r2 I:??[OBJECT, ARRAY]) \l0x000f: IGET  (r2 I:androidx.lifecycle.Lifecycle$State) = (r2 I:androidx.lifecycle.LifecycleRegistry$ObserverWithState) androidx.lifecycle.LifecycleRegistry.ObserverWithState.mState androidx.lifecycle.Lifecycle$State \l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: IGET  (r3 I:java.util.ArrayList\<androidx.lifecycle.Lifecycle$State\>) = (r4 I:androidx.lifecycle.LifecycleRegistry) androidx.lifecycle.LifecycleRegistry.mParentStates java.util.ArrayList  (LINE:171)\l0x0015: INVOKE  (r3 I:boolean) = (r3 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0019|0x0019: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x002b \l}"];
Node_20 [shape=record,label="{20\:\ 0x001b|0x001b: IGET  (r1 I:java.util.ArrayList\<androidx.lifecycle.Lifecycle$State\>) = (r4 I:androidx.lifecycle.LifecycleRegistry) androidx.lifecycle.LifecycleRegistry.mParentStates java.util.ArrayList \l0x001d: INVOKE  (r3 I:int) = (r1 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l0x0021: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x0023: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.ArrayList), (r3 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0027: CHECK_CAST (r1 I:androidx.lifecycle.Lifecycle$State) = (androidx.lifecycle.Lifecycle$State) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x002b|0x002c: IGET  (r3 I:androidx.lifecycle.Lifecycle$State) = (r4 I:androidx.lifecycle.LifecycleRegistry) androidx.lifecycle.LifecycleRegistry.mState androidx.lifecycle.Lifecycle$State  (LINE:173)\l0x002e: INVOKE  (r3 I:androidx.lifecycle.Lifecycle$State) = \l  (r3 I:androidx.lifecycle.Lifecycle$State)\l  (r2 I:androidx.lifecycle.Lifecycle$State A[D('siblingState' androidx.lifecycle.Lifecycle$State)])\l type: STATIC call: androidx.lifecycle.LifecycleRegistry.min(androidx.lifecycle.Lifecycle$State, androidx.lifecycle.Lifecycle$State):androidx.lifecycle.Lifecycle$State A[MD:(androidx.lifecycle.Lifecycle$State, androidx.lifecycle.Lifecycle$State):androidx.lifecycle.Lifecycle$State (m)]\l0x0032: INVOKE  (r3 I:androidx.lifecycle.Lifecycle$State) = \l  (r3 I:androidx.lifecycle.Lifecycle$State)\l  (r1 I:androidx.lifecycle.Lifecycle$State A[D('parentState' androidx.lifecycle.Lifecycle$State)])\l type: STATIC call: androidx.lifecycle.LifecycleRegistry.min(androidx.lifecycle.Lifecycle$State, androidx.lifecycle.Lifecycle$State):androidx.lifecycle.Lifecycle$State A[MD:(androidx.lifecycle.Lifecycle$State, androidx.lifecycle.Lifecycle$State):androidx.lifecycle.Lifecycle$State (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0036|RETURN\l|0x0036: RETURN  (r3 I:androidx.lifecycle.Lifecycle$State) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|0x0012: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private androidx.lifecycle.Lifecycle$State androidx.lifecycle.LifecycleRegistry.calculateTargetState((r4 'this' I:androidx.lifecycle.LifecycleRegistry A[IMMUTABLE_TYPE, THIS]), (r5 I:androidx.lifecycle.LifecycleObserver A[D('observer' androidx.lifecycle.LifecycleObserver), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0019 \-\> B:22:0x002b, CROSS_EDGE: B:17:0x0012 \-\> B:18:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0036: r0 'previous' Ljava\/util\/Map$Entry;, signature: Ljava\/util\/Map$Entry\<Landroidx\/lifecycle\/LifecycleObserver;Landroidx\/lifecycle\/LifecycleRegistry$ObserverWithState;\>;\l  0x002c\-0x0036: r1 'parentState' Landroidx\/lifecycle\/Lifecycle$State;\l  0x0013\-0x0036: r2 'siblingState' Landroidx\/lifecycle\/Lifecycle$State;\l  \-1 \-0x0036: r5 'observer' Landroidx\/lifecycle\/LifecycleObserver;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
}

