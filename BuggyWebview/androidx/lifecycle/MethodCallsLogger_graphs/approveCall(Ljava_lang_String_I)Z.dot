digraph "CFG forandroidx.lifecycle.MethodCallsLogger.approveCall(Ljava\/lang\/String;I)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|java.lang.Integer r0 = r7.mCalledMethods.get(r8)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|if (r0 == null) goto L13\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|int r2 = r0.intValue()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|PHI: r2 \l  PHI: (r2v1 'mask' int) = (r2v0 'mask' int), (r2v2 'mask' int) binds: [B:20:0x0010, B:19:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|if ((r2 & r9) == 0) goto L12\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|r3 = true\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|PHI: r3 \l  PHI: (r3v2 'wasCalled' boolean) = (r3v1 'wasCalled' boolean), (r3v3 'wasCalled' boolean) binds: [B:24:0x0018, B:23:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|r7.mCalledMethods.put(r8, java.lang.Integer.valueOf(r2 \| r9))\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|if (r3 != false) goto L11\l}"];
Node_27 [shape=record,label="{27\:\ 0x0026|RETURN\lORIG_RETURN\l|return true\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|r3 = false\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|r2 = 0\l}"];
MethodNode[shape=record,label="{public boolean androidx.lifecycle.MethodCallsLogger.approveCall((r7v0 'this' androidx.lifecycle.MethodCallsLogger A[IMMUTABLE_TYPE, THIS]), (r8v0 'name' java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0024 \-\> B:28:0x0027, CROSS_EDGE: B:24:0x0018 \-\> B:25:0x0019, CROSS_EDGE: B:20:0x0010 \-\> B:21:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_16;
Node_29 -> Node_16;
Node_24 -> Node_25;
Node_20 -> Node_21;
}

