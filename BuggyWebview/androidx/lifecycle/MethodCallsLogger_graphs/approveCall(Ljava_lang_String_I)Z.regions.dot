digraph "CFG forandroidx.lifecycle.MethodCallsLogger.approveCall(Ljava\/lang\/String;I)Z" {
subgraph cluster_Region_1633910776 {
label = "R(5:1|2|5|7|8)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0000|java.lang.Integer java.lang.Integer r0 = r7.mCalledMethods.get(r8)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|int r2 = r0 != null ? r0.intValue() : 0\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|boolean r3 = (r2 & r9) != 0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|PHI: r3 \l  PHI: (r3v2 'wasCalled' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r7.mCalledMethods.put(r8, java.lang.Integer.valueOf(r2 \| r9))\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|RETURN\l|return !r3\l}"];
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000b}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0011|PHI: r2 \l  PHI: (r2v1 'mask' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0016}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0026|ORIG_RETURN\l}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ ?|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0018}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0010}"];
MethodNode[shape=record,label="{public boolean androidx.lifecycle.MethodCallsLogger.approveCall((r7v0 'this' androidx.lifecycle.MethodCallsLogger A[IMMUTABLE_TYPE, THIS]), (r8v0 'name' java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0024 \-\> B:28:0x0027, CROSS_EDGE: B:24:0x0018 \-\> B:25:0x0019, CROSS_EDGE: B:20:0x0010 \-\> B:21:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_20;
Node_22 -> Node_23;
Node_22 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_29;
Node_15 -> Node_17;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_23 -> Node_25;
Node_27 -> Node_16;
Node_29 -> Node_16;
Node_24 -> Node_25;
Node_20 -> Node_21;
}

