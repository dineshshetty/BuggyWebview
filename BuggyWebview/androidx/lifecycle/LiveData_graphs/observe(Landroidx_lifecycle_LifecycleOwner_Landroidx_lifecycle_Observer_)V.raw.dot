digraph "CFG forandroidx.lifecycle.LiveData.observe(Landroidx\/lifecycle\/LifecycleOwner;Landroidx\/lifecycle\/Observer;)V" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"observe\"  (LINE:191)\l0x0002: INVOKE  (r0 I:java.lang.String) type: STATIC call: androidx.lifecycle.LiveData.assertMainThread(java.lang.String):void A[MD:(java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:androidx.lifecycle.Lifecycle) = (r5 I:androidx.lifecycle.LifecycleOwner A[D('owner' androidx.lifecycle.LifecycleOwner)]) type: INTERFACE call: androidx.lifecycle.LifecycleOwner.getLifecycle():androidx.lifecycle.Lifecycle A[MD:():androidx.lifecycle.Lifecycle (m)] (LINE:192)\l0x0009: INVOKE  (r0 I:androidx.lifecycle.Lifecycle$State) = (r0 I:androidx.lifecycle.Lifecycle) type: VIRTUAL call: androidx.lifecycle.Lifecycle.getCurrentState():androidx.lifecycle.Lifecycle$State A[MD:():androidx.lifecycle.Lifecycle$State (m)]\l0x000d: SGET  (r1 I:androidx.lifecycle.Lifecycle$State) =  androidx.lifecycle.Lifecycle.State.DESTROYED androidx.lifecycle.Lifecycle$State \l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0012 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:194)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|0x0012: NEW_INSTANCE  (r0 I:androidx.lifecycle.LiveData$LifecycleBoundObserver) =  androidx.lifecycle.LiveData$LifecycleBoundObserver  (LINE:196)\l0x0014: INVOKE  \l  (r0 I:androidx.lifecycle.LiveData$LifecycleBoundObserver)\l  (r4 I:androidx.lifecycle.LiveData A[D('this' androidx.lifecycle.LiveData\<T\>)])\l  (r5 I:androidx.lifecycle.LifecycleOwner A[D('owner' androidx.lifecycle.LifecycleOwner)])\l  (r6 I:androidx.lifecycle.Observer A[D('observer' androidx.lifecycle.Observer\<? super T\>)])\l type: DIRECT call: androidx.lifecycle.LiveData.LifecycleBoundObserver.\<init\>(androidx.lifecycle.LiveData, androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Observer):void A[MD:(androidx.lifecycle.LiveData, androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Observer\<? super T\>):void (m)]\l0x0017: IGET  (r1 I:androidx.arch.core.internal.SafeIterableMap\<androidx.lifecycle.Observer\<? super T\>, androidx.lifecycle.LiveData\<T\>$ObserverWrapper\>) = (r4 I:androidx.lifecycle.LiveData A[D('this' androidx.lifecycle.LiveData\<T\>)]) androidx.lifecycle.LiveData.mObservers androidx.arch.core.internal.SafeIterableMap  (LINE:197)\l0x0019: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:androidx.arch.core.internal.SafeIterableMap)\l  (r6 I:java.lang.Object A[D('observer' androidx.lifecycle.Observer\<? super T\>)])\l  (r0 I:java.lang.Object A[D('wrapper' androidx.lifecycle.LiveData\<T\>$LifecycleBoundObserver)])\l type: VIRTUAL call: androidx.arch.core.internal.SafeIterableMap.putIfAbsent(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (m)]\l0x001d: CHECK_CAST (r1 I:androidx.lifecycle.LiveData$ObserverWrapper) = (androidx.lifecycle.LiveData$ObserverWrapper) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|0x001f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('existing' androidx.lifecycle.LiveData\<T\>$ObserverWrapper)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0030  (LINE:198)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|0x0021: INVOKE  (r2 I:boolean) = \l  (r1 I:androidx.lifecycle.LiveData$ObserverWrapper A[D('existing' androidx.lifecycle.LiveData\<T\>$ObserverWrapper)])\l  (r5 I:androidx.lifecycle.LifecycleOwner A[D('owner' androidx.lifecycle.LifecycleOwner)])\l type: VIRTUAL call: androidx.lifecycle.LiveData.ObserverWrapper.isAttachedTo(androidx.lifecycle.LifecycleOwner):boolean A[MD:(androidx.lifecycle.LifecycleOwner):boolean (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0028 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0028|0x0028: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:199)\l0x002a: CONST_STR  (r3 I:java.lang.String) =  \"Cannot add the same observer with different lifecycles\" \l0x002c: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x002f|0x002f: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0030|0x0030: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('existing' androidx.lifecycle.LiveData\<T\>$ObserverWrapper)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0033  (LINE:202)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0032|RETURN\l|0x0032: RETURN    (LINE:203)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0033|0x0033: INVOKE  (r2 I:androidx.lifecycle.Lifecycle) = (r5 I:androidx.lifecycle.LifecycleOwner A[D('owner' androidx.lifecycle.LifecycleOwner)]) type: INTERFACE call: androidx.lifecycle.LifecycleOwner.getLifecycle():androidx.lifecycle.Lifecycle A[MD:():androidx.lifecycle.Lifecycle (m)] (LINE:205)\l0x0037: INVOKE  \l  (r2 I:androidx.lifecycle.Lifecycle)\l  (r0 I:androidx.lifecycle.LifecycleObserver A[D('wrapper' androidx.lifecycle.LiveData\<T\>$LifecycleBoundObserver)])\l type: VIRTUAL call: androidx.lifecycle.Lifecycle.addObserver(androidx.lifecycle.LifecycleObserver):void A[MD:(androidx.lifecycle.LifecycleObserver):void (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x003a|RETURN\l|0x003a: RETURN    (LINE:206)\l}"];
MethodNode[shape=record,label="{public void androidx.lifecycle.LiveData.observe((r4 'this' I:androidx.lifecycle.LiveData\<T\> A[D('this' androidx.lifecycle.LiveData\<T\>), IMMUTABLE_TYPE, THIS]), (r5 I:androidx.lifecycle.LifecycleOwner A[D('owner' androidx.lifecycle.LifecycleOwner), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:androidx.lifecycle.Observer\<? super T\> A[D('observer' androidx.lifecycle.Observer\<? super T\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x002f \-\> B:17:?, CROSS_EDGE: B:29:0x0032 \-\> B:17:?, CROSS_EDGE: B:31:0x003a \-\> B:17:?, CROSS_EDGE: B:22:0x001f \-\> B:28:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x003a: r0 'wrapper' Landroidx\/lifecycle\/LiveData$LifecycleBoundObserver;, signature: Landroidx\/lifecycle\/LiveData\<TT;\>.LifecycleBoundObserver;\l  0x001f\-0x003a: r1 'existing' Landroidx\/lifecycle\/LiveData$ObserverWrapper;, signature: Landroidx\/lifecycle\/LiveData\<TT;\>.ObserverWrapper;\l  0x0000\-0x003a: r4 'this' Landroidx\/lifecycle\/LiveData;, signature: Landroidx\/lifecycle\/LiveData\<TT;\>;\l  \-1 \-0x003a: r5 'owner' Landroidx\/lifecycle\/LifecycleOwner;\l  0x0000\-0x003a: r6 'observer' Landroidx\/lifecycle\/Observer;, signature: Landroidx\/lifecycle\/Observer\<\-TT;\>;\lTYPE_VARS: [T]\lSIGNATURE: (Landroidx\/lifecycle\/LifecycleOwner;Landroidx\/lifecycle\/Observer\<\-TT;\>;)V\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_28[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_17;
Node_30 -> Node_31;
Node_31 -> Node_17;
}

