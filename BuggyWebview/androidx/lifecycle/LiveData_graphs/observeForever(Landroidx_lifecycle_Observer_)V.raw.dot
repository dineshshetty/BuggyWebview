digraph "CFG forandroidx.lifecycle.LiveData.observeForever(Landroidx\/lifecycle\/Observer;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"observeForever\"  (LINE:224)\l0x0002: INVOKE  (r0 I:java.lang.String) type: STATIC call: androidx.lifecycle.LiveData.assertMainThread(java.lang.String):void A[MD:(java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:androidx.lifecycle.LiveData$AlwaysActiveObserver) =  androidx.lifecycle.LiveData$AlwaysActiveObserver  (LINE:225)\l0x0007: INVOKE  \l  (r0 I:androidx.lifecycle.LiveData$AlwaysActiveObserver)\l  (r4 I:androidx.lifecycle.LiveData A[D('this' androidx.lifecycle.LiveData\<T\>)])\l  (r5 I:androidx.lifecycle.Observer A[D('observer' androidx.lifecycle.Observer\<? super T\>)])\l type: DIRECT call: androidx.lifecycle.LiveData.AlwaysActiveObserver.\<init\>(androidx.lifecycle.LiveData, androidx.lifecycle.Observer):void A[MD:(androidx.lifecycle.LiveData, androidx.lifecycle.Observer\<? super T\>):void (m)]\l0x000a: IGET  (r1 I:androidx.arch.core.internal.SafeIterableMap\<androidx.lifecycle.Observer\<? super T\>, androidx.lifecycle.LiveData\<T\>$ObserverWrapper\>) = (r4 I:androidx.lifecycle.LiveData A[D('this' androidx.lifecycle.LiveData\<T\>)]) androidx.lifecycle.LiveData.mObservers androidx.arch.core.internal.SafeIterableMap  (LINE:226)\l0x000c: INVOKE  (r1 I:java.lang.Object) = \l  (r1 I:androidx.arch.core.internal.SafeIterableMap)\l  (r5 I:java.lang.Object A[D('observer' androidx.lifecycle.Observer\<? super T\>)])\l  (r0 I:java.lang.Object A[D('wrapper' androidx.lifecycle.LiveData\<T\>$AlwaysActiveObserver)])\l type: VIRTUAL call: androidx.arch.core.internal.SafeIterableMap.putIfAbsent(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (m)]\l0x0010: CHECK_CAST (r1 I:androidx.lifecycle.LiveData$ObserverWrapper) = (androidx.lifecycle.LiveData$ObserverWrapper) (r1 I:??[OBJECT, ARRAY]) \l0x0012: INSTANCE_OF  (r2 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('existing' androidx.lifecycle.LiveData\<T\>$ObserverWrapper)]) androidx.lifecycle.LiveData$LifecycleBoundObserver  (LINE:227)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x001e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('existing' androidx.lifecycle.LiveData\<T\>$ObserverWrapper)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0019  (LINE:231)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|RETURN\l|0x0018: RETURN    (LINE:232)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0019|0x0019: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:234)\l0x001a: INVOKE  \l  (r0 I:androidx.lifecycle.LiveData$AlwaysActiveObserver A[D('wrapper' androidx.lifecycle.LiveData\<T\>$AlwaysActiveObserver)])\l  (r2 I:boolean)\l type: VIRTUAL call: androidx.lifecycle.LiveData.AlwaysActiveObserver.activeStateChanged(boolean):void A[MD:(boolean):void (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001d|RETURN\l|0x001d: RETURN    (LINE:235)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001e|0x001e: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:228)\l0x0020: CONST_STR  (r3 I:java.lang.String) =  \"Cannot add the same observer with different lifecycles\" \l0x0022: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|0x0025: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.lifecycle.LiveData.observeForever((r4 'this' I:androidx.lifecycle.LiveData\<T\> A[D('this' androidx.lifecycle.LiveData\<T\>), IMMUTABLE_TYPE, THIS]), (r5 I:androidx.lifecycle.Observer\<? super T\> A[D('observer' androidx.lifecycle.Observer\<? super T\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001d \-\> B:11:?, CROSS_EDGE: B:19:0x0025 \-\> B:11:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0025: r0 'wrapper' Landroidx\/lifecycle\/LiveData$AlwaysActiveObserver;, signature: Landroidx\/lifecycle\/LiveData\<TT;\>.AlwaysActiveObserver;\l  0x0012\-0x0025: r1 'existing' Landroidx\/lifecycle\/LiveData$ObserverWrapper;, signature: Landroidx\/lifecycle\/LiveData\<TT;\>.ObserverWrapper;\l  0x0000\-0x0025: r4 'this' Landroidx\/lifecycle\/LiveData;, signature: Landroidx\/lifecycle\/LiveData\<TT;\>;\l  0x0000\-0x0025: r5 'observer' Landroidx\/lifecycle\/Observer;, signature: Landroidx\/lifecycle\/Observer\<\-TT;\>;\lTYPE_VARS: [T]\lSIGNATURE: (Landroidx\/lifecycle\/Observer\<\-TT;\>;)V\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_11;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

