digraph "CFG forandroidx.lifecycle.ViewModel.setTagIfAbsent(Ljava\/lang\/String;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1434346692 {
label = "R(4:2|8|(1:12)|13) | DECL_VAR: java.lang.Object null\l";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_859700773 {
label = "Synchronized:R(2:2|(2:4|(1:6)))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0002}"];
subgraph cluster_Region_1169589602 {
label = "R(2:4|(1:6))";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{, blocks: (B:24:0x0003, B:26:0x000b, B:27:0x0010), top: B:38:0x0003 \}\lCatch: all \-\> 0x001e\l|java.lang.Object r1 = r3.mBagOfTags.get(r4)     \/\/ Catch: java.lang.Throwable \-\> L1e\l}"];
subgraph cluster_IfRegion_305879759 {
label = "IF [B:25:0x0009] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0009|if (r1 == null) goto L6\l}"];
subgraph cluster_Region_808860799 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x000b|TryCatch #0 \{, blocks: (B:24:0x0003, B:26:0x000b, B:27:0x0010), top: B:38:0x0003 \}\lCatch: all \-\> 0x001e\l|r3.mBagOfTags.put(r4, r5)     \/\/ Catch: java.lang.Throwable \-\> L1e\l}"];
}
}
}
}
Node_28 [shape=record,label="{28\:\ 0x0011|T r0 = r1 == null ? r5 : r1\l}"];
subgraph cluster_IfRegion_583360245 {
label = "IF [B:32:0x0018] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0018|if (r3.mCleared != false) goto L12\l}"];
subgraph cluster_Region_512451969 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x001a|closeWithRuntimeException(r0)\l}"];
}
}
Node_34 [shape=record,label="{34\:\ 0x001d|RETURN\l|return r0\l}"];
}
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0000}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0010|TRY_LEAVE\lDONT_GENERATE\lTryCatch #0 \{, blocks: (B:24:0x0003, B:26:0x000b, B:27:0x0010), top: B:38:0x0003 \}\lCatch: all \-\> 0x001e\l|monitor\-exit()     \/\/ Catch: java.lang.Throwable \-\> L1e\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0013}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0016|PHI: r0 \l  PHI: (r0v2 'result' T) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0015}"];
Node_39 [shape=record,color=red,label="{39\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x001e|REMOVE\lExcHandler: all \-\> 0x001e\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x001f|TRY_ENTER\lTRY_LEAVE\lREMOVE\lCatch: all \-\> 0x001e\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0020|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public T androidx.lifecycle.ViewModel.setTagIfAbsent((r3v0 'this' androidx.lifecycle.ViewModel A[IMMUTABLE_TYPE, THIS]), (r4v0 'key' java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'newValue' T A[D('newValue' T), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0018 \-\> B:34:0x001d, CROSS_EDGE: B:30:0x0015 \-\> B:31:0x0016, CROSS_EDGE: B:37:0x0020 \-\> B:21:?, CROSS_EDGE: B:25:0x0009 \-\> B:27:0x0010, CROSS_EDGE: B:38:0x0003 \-\> B:35:0x001e\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/String;TT;)TT;\l}"];
MethodNode -> Node_20;Node_23 -> Node_38;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_28 -> Node_30;
Node_32 -> Node_33;
Node_32 -> Node_34[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_38 -> Node_24;
Node_38 -> Node_35;
Node_27 -> Node_28;
Node_27 -> Node_39;
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_30 -> Node_31;
Node_39 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_21;
}

