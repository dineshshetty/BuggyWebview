digraph "CFG forandroidx.lifecycle.ViewModel.getTag(Ljava\/lang\/String;)Ljava\/lang\/Object;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|java.util.Map\<java.lang.String, java.lang.Object\> r0 = r2.mBagOfTags\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|if (r0 != null) goto L5\l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|RETURN\l|return null\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|monitor\-enter(r0)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|TRY_ENTER\lTryCatch #0 \{, blocks: (B:22:0x0007, B:23:0x000d), top: B:28:0x0007 \}\lCatch: all \-\> 0x000f\l|java.lang.Object r1 = (T) r2.mBagOfTags.get(r3)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|TryCatch #0 \{, blocks: (B:22:0x0007, B:23:0x000d), top: B:28:0x0007 \}\lCatch: all \-\> 0x000f\l|monitor\-exit(r0)     \/\/ Catch: java.lang.Throwable \-\> Lf\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|RETURN\l|return r1\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|REMOVE\lExcHandler: all \-\> 0x000f\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x000f\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public T androidx.lifecycle.ViewModel.getTag((r2v0 'this' androidx.lifecycle.ViewModel A[IMMUTABLE_TYPE, THIS]), (r3v0 'key' java.lang.String A[D('key' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x000e \-\> B:16:?, CROSS_EDGE: B:27:0x0011 \-\> B:16:?, CROSS_EDGE: B:28:0x0007 \-\> B:25:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/String;)TT;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_16;
Node_21 -> Node_28;
Node_28 -> Node_22;
Node_28 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_29;
Node_24 -> Node_16;
Node_29 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_16;
}

