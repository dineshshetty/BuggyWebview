digraph "CFG forandroidx.lifecycle.ViewModel.addCloseable(Ljava\/io\/Closeable;)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|java.util.Set\<java.io.Closeable\> r0 = r2.mCloseables\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|if (r0 == null) goto L14\l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|monitor\-enter(r0)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0005|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|TRY_ENTER\lTryCatch #0 \{, blocks: (B:20:0x0005, B:21:0x000a), top: B:27:0x0005 \}\lCatch: all \-\> 0x000c\l|r2.mCloseables.add(r3)     \/\/ Catch: java.lang.Throwable \-\> Lc\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|TryCatch #0 \{, blocks: (B:20:0x0005, B:21:0x000a), top: B:27:0x0005 \}\lCatch: all \-\> 0x000c\l|monitor\-exit(r0)     \/\/ Catch: java.lang.Throwable \-\> Lc\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|REMOVE\lExcHandler: all \-\> 0x000c\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x000c\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|REMOVE\l|throw r1\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.lifecycle.ViewModel.addCloseable((r2v0 'this' androidx.lifecycle.ViewModel A[IMMUTABLE_TYPE, THIS]), (r3v0 'closeable' java.io.Closeable A[D('closeable' java.io.Closeable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x000e \-\> B:16:?, CROSS_EDGE: B:27:0x0005 \-\> B:23:0x000c, CROSS_EDGE: B:18:0x0002 \-\> B:26:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_26;
Node_19 -> Node_27;
Node_27 -> Node_20;
Node_27 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_28;
Node_22 -> Node_29;
Node_29 -> Node_16;
Node_28 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_16;
Node_26 -> Node_16;
}

