digraph "CFG forandroidx.lifecycle.SavedStateHandleController.attachToLifecycle(Landroidx\/savedstate\/SavedStateRegistry;Landroidx\/lifecycle\/Lifecycle;)V" {
subgraph cluster_Region_659167763 {
label = "R(1:(2:(1:7)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_1352415228 {
label = "R(2:(1:7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_954900411 {
label = "IF [B:11:0x0002] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r2.mIsAttached != false) goto L6\l}"];
subgraph cluster_Region_1503902013 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x001d|throw new java.lang.IllegalStateException(\"Already attached to lifecycleOwner\")\l}"];
}
}
subgraph cluster_Region_785296024 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|r2.mIsAttached = true\lr4.addObserver(r2)\lr3.registerSavedStateProvider(r2.mKey, r2.mHandle.savedStateProvider())\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0015}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0016}"];
MethodNode[shape=record,label="{public void androidx.lifecycle.SavedStateHandleController.attachToLifecycle((r2v0 'this' androidx.lifecycle.SavedStateHandleController A[IMMUTABLE_TYPE, THIS]), (r3v0 'registry' androidx.savedstate.SavedStateRegistry A[D('registry' androidx.savedstate.SavedStateRegistry), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'lifecycle' androidx.lifecycle.Lifecycle A[D('lifecycle' androidx.lifecycle.Lifecycle), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001d \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

