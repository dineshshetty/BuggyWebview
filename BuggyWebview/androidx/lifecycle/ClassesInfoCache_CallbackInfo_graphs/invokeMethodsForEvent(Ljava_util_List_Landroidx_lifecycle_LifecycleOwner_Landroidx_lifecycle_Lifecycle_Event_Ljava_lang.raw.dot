digraph "CFG forandroidx.lifecycle.ClassesInfoCache.CallbackInfo.invokeMethodsForEvent(Ljava\/util\/List;Landroidx\/lifecycle\/LifecycleOwner;Landroidx\/lifecycle\/Lifecycle$Event;Ljava\/lang\/Object;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('handlers' java.util.List\<androidx.lifecycle.ClassesInfoCache$MethodReference\>)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0016  (LINE:197)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r2 I:java.util.List A[D('handlers' java.util.List\<androidx.lifecycle.ClassesInfoCache$MethodReference\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:198)\l0x0006: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|LOOP_START\lLOOP:0: B:13:0x0008\-\>B:14:0x000a\l|0x0008: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \< (0 ??[int, byte, short, char])  \-\> B:16:0x0016 \l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|LOOP_END\lLOOP:0: B:13:0x0008\-\>B:14:0x000a\l|0x000a: INVOKE  (r1 I:java.lang.Object) = \l  (r2 I:java.util.List A[D('handlers' java.util.List\<androidx.lifecycle.ClassesInfoCache$MethodReference\>)])\l  (r0 I:int A[D('i' int)])\l type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:199)\l0x000e: CHECK_CAST (r1 I:androidx.lifecycle.ClassesInfoCache$MethodReference) = (androidx.lifecycle.ClassesInfoCache$MethodReference) (r1 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  \l  (r1 I:androidx.lifecycle.ClassesInfoCache$MethodReference)\l  (r3 I:androidx.lifecycle.LifecycleOwner A[D('source' androidx.lifecycle.LifecycleOwner)])\l  (r4 I:androidx.lifecycle.Lifecycle$Event A[D('event' androidx.lifecycle.Lifecycle$Event)])\l  (r5 I:java.lang.Object A[D('mWrapped' java.lang.Object)])\l type: VIRTUAL call: androidx.lifecycle.ClassesInfoCache.MethodReference.invokeCallback(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle$Event, java.lang.Object):void A[MD:(androidx.lifecycle.LifecycleOwner, androidx.lifecycle.Lifecycle$Event, java.lang.Object):void (m)]\l0x0013: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (\-1 int)  (LINE:198)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x0016: RETURN   A[SYNTHETIC] (LINE:202)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: RETURN    (LINE:202)\l}"];
MethodNode[shape=record,label="{private static void androidx.lifecycle.ClassesInfoCache.CallbackInfo.invokeMethodsForEvent((r2 I:java.util.List\<androidx.lifecycle.ClassesInfoCache$MethodReference\> A[D('handlers' java.util.List\<androidx.lifecycle.ClassesInfoCache$MethodReference\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:androidx.lifecycle.LifecycleOwner A[D('source' androidx.lifecycle.LifecycleOwner), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.lifecycle.Lifecycle$Event A[D('event' androidx.lifecycle.Lifecycle$Event), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[D('mWrapped' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x000a \-\> B:13:0x0008, CROSS_EDGE: B:11:0x0000 \-\> B:15:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0016: r0 'i' I\l  0x0000\-0x0016: r2 'handlers' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroidx\/lifecycle\/ClassesInfoCache$MethodReference;\>;\l  \-1 \-0x0016: r3 'source' Landroidx\/lifecycle\/LifecycleOwner;\l  \-1 \-0x0016: r4 'event' Landroidx\/lifecycle\/Lifecycle$Event;\l  \-1 \-0x0016: r5 'mWrapped' Ljava\/lang\/Object;\lSIGNATURE: (Ljava\/util\/List\<Landroidx\/lifecycle\/ClassesInfoCache$MethodReference;\>;Landroidx\/lifecycle\/LifecycleOwner;Landroidx\/lifecycle\/Lifecycle$Event;Ljava\/lang\/Object;)V\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_13;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_10;
}

