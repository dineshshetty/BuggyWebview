digraph "CFG forandroidx.lifecycle.SavedStateHandle.SavingStateLiveData.setValue(Ljava\/lang\/Object;)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: IGET  (r0 I:androidx.lifecycle.SavedStateHandle) = (r4 I:androidx.lifecycle.SavedStateHandle$SavingStateLiveData) androidx.lifecycle.SavedStateHandle.SavingStateLiveData.handle androidx.lifecycle.SavedStateHandle  (LINE:338)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0022 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  (r2 I:java.util.Map) = (r0 I:androidx.lifecycle.SavedStateHandle A[D('it' androidx.lifecycle.SavedStateHandle)]) type: STATIC call: androidx.lifecycle.SavedStateHandle.access$getRegular$p(androidx.lifecycle.SavedStateHandle):java.util.Map A[MD:(androidx.lifecycle.SavedStateHandle):java.util.Map (m)] (LINE:339)\l0x0009: IGET  (r3 I:java.lang.String) = (r4 I:androidx.lifecycle.SavedStateHandle$SavingStateLiveData) androidx.lifecycle.SavedStateHandle.SavingStateLiveData.key java.lang.String \l0x000b: INVOKE  (r2 I:java.util.Map), (r3 I:java.lang.Object), (r5 I:java.lang.Object A[D('value' java.lang.Object)]) type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l0x000e: INVOKE  (r2 I:java.util.Map) = (r0 I:androidx.lifecycle.SavedStateHandle A[D('it' androidx.lifecycle.SavedStateHandle)]) type: STATIC call: androidx.lifecycle.SavedStateHandle.access$getFlows$p(androidx.lifecycle.SavedStateHandle):java.util.Map A[MD:(androidx.lifecycle.SavedStateHandle):java.util.Map (m)] (LINE:340)\l0x0012: IGET  (r3 I:java.lang.String) = (r4 I:androidx.lifecycle.SavedStateHandle$SavingStateLiveData) androidx.lifecycle.SavedStateHandle.SavingStateLiveData.key java.lang.String \l0x0014: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map), (r3 I:java.lang.Object) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0018: CHECK_CAST (r2 I:kotlinx.coroutines.flow.MutableStateFlow) = (kotlinx.coroutines.flow.MutableStateFlow) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001d \l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|0x001d: INVOKE  (r2 I:kotlinx.coroutines.flow.MutableStateFlow), (r5 I:java.lang.Object A[D('value' java.lang.Object)]) type: INTERFACE call: kotlinx.coroutines.flow.MutableStateFlow.setValue(java.lang.Object):void A[MD:(T):void (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0022|0x0022: INVOKE  (r4 I:androidx.lifecycle.MutableLiveData), (r5 I:java.lang.Object A[D('value' java.lang.Object)]) type: SUPER call: androidx.lifecycle.MutableLiveData.setValue(java.lang.Object):void A[MD:(T):void (m)] (LINE:342)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:343)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.lifecycle.SavedStateHandle.SavingStateLiveData.setValue((r4 'this' I:androidx.lifecycle.SavedStateHandle$SavingStateLiveData\<T\> A[IMMUTABLE_TYPE, THIS]), (r5 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:31:0x0022, CROSS_EDGE: B:25:0x0002 \-\> B:31:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (TT;)V\lDebug Info:\l  0x0004\-0x0021: r0 'it' Landroidx\/lifecycle\/SavedStateHandle;\l  0x0005\-0x0021: r1 '$i$a$\-let\-SavedStateHandle$SavingStateLiveData$setValue$1' I\l  \-1 \-0x0025: r5 'value' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [androidx.lifecycle.LiveData.setValue(T):void]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_23;
}

