digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.onKeyUp(ILandroid\/view\/KeyEvent;)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000}"];
Node_19 [shape=record,label="{19\:\ 0x0001|if (r3 != 4) goto L12\l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|android.view.View r0 = findVisibleDrawer()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|if (r0 == null) goto L8\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009}"];
Node_23 [shape=record,label="{23\:\ 0x000d|if (getDrawerLockMode(r0) != 0) goto L8\l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|closeDrawers()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|if (r0 == null) goto L11\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|SYNTHETIC\lRETURN\l|return androidx.drawerlayout.widget.DrawerLayout.CHILDREN_DISALLOW_INTERCEPT\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|RETURN\lORIG_RETURN\l|return false\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018}"];
Node_30 [shape=record,label="{30\:\ 0x001c|RETURN\l|return super.onKeyUp(r3, r4)\l}"];
MethodNode[shape=record,label="{public boolean androidx.drawerlayout.widget.DrawerLayout.onKeyUp((r2v0 'this' androidx.drawerlayout.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'keyCode' int A[D('keyCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'event' android.view.KeyEvent A[D('event' android.view.KeyEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:27:0x0016 \-\> B:28:0x0017, CROSS_EDGE: B:23:0x000d \-\> B:25:0x0012, CROSS_EDGE: B:21:0x0007 \-\> B:25:0x0012, CROSS_EDGE: B:30:0x001c \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onKeyUp(int, android.view.KeyEvent):boolean\}, ClspMth\{android.view.KeyEvent.Callback.onKeyUp(int, android.view.KeyEvent):boolean\}]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_17;
Node_27 -> Node_17;
Node_29 -> Node_30;
Node_30 -> Node_17;
}

