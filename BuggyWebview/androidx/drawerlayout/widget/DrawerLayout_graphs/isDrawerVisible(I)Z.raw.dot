digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.isDrawerVisible(I)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:android.view.View) = (r2 I:androidx.drawerlayout.widget.DrawerLayout), (r3 I:int A[D('drawerGravity' int)]) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.findDrawerWithGravity(int):android.view.View A[MD:(int):android.view.View (m)] (LINE:1942)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drawerView' android.view.View)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000b  (LINE:1943)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r1 I:boolean) = (r2 I:androidx.drawerlayout.widget.DrawerLayout), (r0 I:android.view.View A[D('drawerView' android.view.View)]) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.isDrawerVisible(android.view.View):boolean A[MD:(android.view.View):boolean (m)] (LINE:1944)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r1 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|RETURN\l|0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1946)\l0x000c: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.drawerlayout.widget.DrawerLayout.isDrawerVisible((r2 'this' I:androidx.drawerlayout.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('drawerGravity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000c \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000c: r0 'drawerView' Landroid\/view\/View;\l  \-1 \-0x000c: r3 'drawerGravity' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_9;
}

