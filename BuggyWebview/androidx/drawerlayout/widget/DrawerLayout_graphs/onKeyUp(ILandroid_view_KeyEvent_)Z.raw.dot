digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.onKeyUp(ILandroid\/view\/KeyEvent;)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:2060)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0001|0x0001: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('keyCode' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0018 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|0x0003: INVOKE  (r0 I:android.view.View) = (r2 I:androidx.drawerlayout.widget.DrawerLayout) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.findVisibleDrawer():android.view.View A[MD:():android.view.View (m)] (LINE:2061)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('visibleDrawer' android.view.View)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0012  (LINE:2062)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|0x0009: INVOKE  (r1 I:int) = (r2 I:androidx.drawerlayout.widget.DrawerLayout), (r0 I:android.view.View A[D('visibleDrawer' android.view.View)]) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.getDrawerLockMode(android.view.View):int A[MD:(android.view.View):int (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0012 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: INVOKE  (r2 I:androidx.drawerlayout.widget.DrawerLayout) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.closeDrawers():void A[MD:():void (m)] (LINE:2063)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('visibleDrawer' android.view.View)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0016  (LINE:2065)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|SYNTHETIC\lRETURN\l|0x0014: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0017: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: RETURN  (r1 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|0x0018: INVOKE  (r0 I:boolean) = \l  (r2 I:android.view.ViewGroup)\l  (r3 I:int A[D('keyCode' int)])\l  (r4 I:android.view.KeyEvent A[D('event' android.view.KeyEvent)])\l type: SUPER call: android.view.ViewGroup.onKeyUp(int, android.view.KeyEvent):boolean A[MD:(int, android.view.KeyEvent):boolean (c)] (LINE:2067)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.drawerlayout.widget.DrawerLayout.onKeyUp((r2 'this' I:androidx.drawerlayout.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('keyCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.view.KeyEvent A[D('event' android.view.KeyEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:27:0x0016 \-\> B:28:0x0017, CROSS_EDGE: B:23:0x000d \-\> B:25:0x0012, CROSS_EDGE: B:21:0x0007 \-\> B:25:0x0012, CROSS_EDGE: B:30:0x001c \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0018: r0 'visibleDrawer' Landroid\/view\/View;\l  \-1 \-0x001c: r3 'keyCode' I\l  \-1 \-0x001c: r4 'event' Landroid\/view\/KeyEvent;\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onKeyUp(int, android.view.KeyEvent):boolean\}, ClspMth\{android.view.KeyEvent.Callback.onKeyUp(int, android.view.KeyEvent):boolean\}]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_17;
Node_27 -> Node_17;
Node_29 -> Node_30;
Node_30 -> Node_17;
}

