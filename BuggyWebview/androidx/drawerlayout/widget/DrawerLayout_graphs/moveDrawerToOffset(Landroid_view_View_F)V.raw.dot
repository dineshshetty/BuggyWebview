digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.moveDrawerToOffset(Landroid\/view\/View;F)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:float) = (r6 I:androidx.drawerlayout.widget.DrawerLayout), (r7 I:android.view.View A[D('drawerView' android.view.View)]) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.getDrawerViewOffset(android.view.View):float A[MD:(android.view.View):float (m)] (LINE:1008)\l0x0004: INVOKE  (r1 I:int) = (r7 I:android.view.View A[D('drawerView' android.view.View)]) type: VIRTUAL call: android.view.View.getWidth():int A[MD:():int (c)] (LINE:1009)\l0x0008: CAST (r2 I:float) = (float) (r1 I:int A[D('width' int)])  (LINE:1010)\l0x0009: ARITH  (r2 I:float) = (r2 I:float) * (r0 I:float A[D('oldOffset' float)]) \l0x000b: CAST (r2 I:int) = (int) (r2 I:float) \l0x000c: CAST (r3 I:float) = (float) (r1 I:int A[D('width' int)])  (LINE:1011)\l0x000d: ARITH  (r3 I:float) = (r3 I:float) * (r8 I:float A[D('slideOffset' float)]) \l0x000f: CAST (r3 I:int) = (int) (r3 I:float) \l0x0010: ARITH  (r4 I:int) = (r3 I:int A[D('newPos' int)]) \- (r2 I:int A[D('oldPos' int)])  (LINE:1012)\l0x0013: CONST  (r5 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:1015)\l0x0014: INVOKE  (r5 I:boolean) = \l  (r6 I:androidx.drawerlayout.widget.DrawerLayout)\l  (r7 I:android.view.View A[D('drawerView' android.view.View)])\l  (r5 I:int)\l type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.checkDrawerViewAbsoluteGravity(android.view.View, int):boolean A[MD:(android.view.View, int):boolean (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0018|0x0018: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001c \l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|0x001a: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dx' int)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|0x001d: INVOKE  (r7 I:android.view.View A[D('drawerView' android.view.View)]), (r5 I:int) type: VIRTUAL call: android.view.View.offsetLeftAndRight(int):void A[MD:(int):void (c)] (LINE:1014)\l0x0020: INVOKE  \l  (r6 I:androidx.drawerlayout.widget.DrawerLayout)\l  (r7 I:android.view.View A[D('drawerView' android.view.View)])\l  (r8 I:float A[D('slideOffset' float)])\l type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.setDrawerViewOffset(android.view.View, float):void A[MD:(android.view.View, float):void (m)] (LINE:1016)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0023|RETURN\l|0x0023: RETURN    (LINE:1017)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: NEG  (r5 I:int) = (r4 I:int A[D('dx' int)]) \l}"];
MethodNode[shape=record,label="{void androidx.drawerlayout.widget.DrawerLayout.moveDrawerToOffset((r6 'this' I:androidx.drawerlayout.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]), (r7 I:android.view.View A[D('drawerView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:float A[D('slideOffset' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001c \-\> B:14:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0023: r0 'oldOffset' F\l  0x0008\-0x0023: r1 'width' I\l  0x000c\-0x0023: r2 'oldPos' I\l  0x0010\-0x0023: r3 'newPos' I\l  0x0012\-0x0023: r4 'dx' I\l  \-1 \-0x0023: r7 'drawerView' Landroid\/view\/View;\l  \-1 \-0x0023: r8 'slideOffset' F\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

