digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.findVisibleDrawer()Landroid\/view\/View;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|int r0 = getChildCount()\lr1 = 0\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|LOOP_START\lLOOP:0: B:19:0x0005\-\>B:25:0x0018\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v3 'i' int) binds: [B:18:0x0000, B:25:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L13\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|android.view.View r2 = getChildAt(r1)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|if (isDrawerView(r2) == false) goto L12\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011}"];
Node_23 [shape=record,label="{23\:\ 0x0015|if (isDrawerVisible(r2) == false) goto L10\l}"];
Node_29 [shape=record,label="{29\:\ 0x0017|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|RETURN\l|return r2\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|LOOP_END\lLOOP:0: B:19:0x0005\-\>B:25:0x0018\l|int r1 = r1 + 1\l}"];
Node_30 [shape=record,label="{30\:\ 0x0018|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{android.view.View androidx.drawerlayout.widget.DrawerLayout.findVisibleDrawer((r4v0 'this' androidx.drawerlayout.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x0018 \-\> B:19:0x0005, CROSS_EDGE: B:21:0x000f \-\> B:25:0x0018, CROSS_EDGE: B:27:0x001c \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_30;
Node_22 -> Node_23;
Node_23 -> Node_29[style=dashed];
Node_23 -> Node_31;
Node_29 -> Node_24;
Node_24 -> Node_17;
Node_31 -> Node_25;
Node_25 -> Node_19;
Node_30 -> Node_25;
Node_28 -> Node_26;
Node_26 -> Node_17;
}

