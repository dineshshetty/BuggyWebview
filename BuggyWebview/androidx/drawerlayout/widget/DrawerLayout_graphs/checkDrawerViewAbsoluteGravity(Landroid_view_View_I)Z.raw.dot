digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.checkDrawerViewAbsoluteGravity(Landroid\/view\/View;I)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r2 I:androidx.drawerlayout.widget.DrawerLayout), (r3 I:android.view.View A[D('drawerView' android.view.View)]) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.getDrawerViewAbsoluteGravity(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:991)\l0x0004: ARITH  (r1 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char] A[D('absGravity' int)]) & (r4 I:??[int, boolean, short, byte, char] A[D('checkFor' int)])  (LINE:992)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('checkFor' int)])  \-\> B:13:0x000a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|SYNTHETIC\lRETURN\l|0x0008: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000b: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\lORIG_RETURN\l|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean androidx.drawerlayout.widget.DrawerLayout.checkDrawerViewAbsoluteGravity((r2 'this' I:androidx.drawerlayout.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('drawerView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('checkFor' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000a \-\> B:14:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000b: r0 'absGravity' I\l  \-1 \-0x000b: r3 'drawerView' Landroid\/view\/View;\l  \-1 \-0x000b: r4 'checkFor' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

