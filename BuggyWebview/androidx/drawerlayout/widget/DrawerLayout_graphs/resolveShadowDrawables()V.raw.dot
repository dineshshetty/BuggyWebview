digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.resolveShadowDrawables()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:boolean) =  androidx.drawerlayout.widget.DrawerLayout.SET_DRAWER_SHADOW_FROM_ELEVATION boolean  (LINE:1195)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:1196)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r1 I:androidx.drawerlayout.widget.DrawerLayout) type: DIRECT call: androidx.drawerlayout.widget.DrawerLayout.resolveLeftShadow():android.graphics.drawable.Drawable A[MD:():android.graphics.drawable.Drawable (m)] (LINE:1198)\l0x0009: IPUT  (r0 I:android.graphics.drawable.Drawable), (r1 I:androidx.drawerlayout.widget.DrawerLayout) androidx.drawerlayout.widget.DrawerLayout.mShadowLeftResolved android.graphics.drawable.Drawable \l0x000b: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r1 I:androidx.drawerlayout.widget.DrawerLayout) type: DIRECT call: androidx.drawerlayout.widget.DrawerLayout.resolveRightShadow():android.graphics.drawable.Drawable A[MD:():android.graphics.drawable.Drawable (m)] (LINE:1199)\l0x000f: IPUT  (r0 I:android.graphics.drawable.Drawable), (r1 I:androidx.drawerlayout.widget.DrawerLayout) androidx.drawerlayout.widget.DrawerLayout.mShadowRightResolved android.graphics.drawable.Drawable \l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:1200)\l}"];
MethodNode[shape=record,label="{private void androidx.drawerlayout.widget.DrawerLayout.resolveShadowDrawables((r1 'this' I:androidx.drawerlayout.widget.DrawerLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:8:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

