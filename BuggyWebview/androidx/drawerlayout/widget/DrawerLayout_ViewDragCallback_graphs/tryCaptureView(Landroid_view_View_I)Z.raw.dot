digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.tryCaptureView(Landroid\/view\/View;I)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:androidx.drawerlayout.widget.DrawerLayout) = (r2 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.this$0 androidx.drawerlayout.widget.DrawerLayout  (LINE:2243)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:androidx.drawerlayout.widget.DrawerLayout), (r3 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.isDrawerView(android.view.View):boolean A[MD:(android.view.View):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: IGET  (r0 I:androidx.drawerlayout.widget.DrawerLayout) = (r2 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.this$0 androidx.drawerlayout.widget.DrawerLayout \l0x000a: IGET  (r1 I:int) = (r2 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.mAbsGravity int \l0x000c: INVOKE  (r0 I:boolean) = (r0 I:androidx.drawerlayout.widget.DrawerLayout), (r3 I:android.view.View A[D('child' android.view.View)]), (r1 I:int) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.checkDrawerViewAbsoluteGravity(android.view.View, int):boolean A[MD:(android.view.View, int):boolean (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: IGET  (r0 I:androidx.drawerlayout.widget.DrawerLayout) = (r2 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.this$0 androidx.drawerlayout.widget.DrawerLayout \l0x0014: INVOKE  (r0 I:int) = (r0 I:androidx.drawerlayout.widget.DrawerLayout), (r3 I:android.view.View A[D('child' android.view.View)]) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.getDrawerLockMode(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:2244)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001c \l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|SYNTHETIC\lRETURN\l|0x001a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001d: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:2243)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: RETURN  (r0 I:boolean)  (LINE:2243)\l}"];
MethodNode[shape=record,label="{public boolean androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.tryCaptureView((r2 'this' I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('pointerId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001c \-\> B:22:0x001d, CROSS_EDGE: B:17:0x0010 \-\> B:21:0x001c, CROSS_EDGE: B:15:0x0006 \-\> B:21:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001d: r3 'child' Landroid\/view\/View;\l  \-1 \-0x001d: r4 'pointerId' I\lMETHOD_OVERRIDE: [androidx.customview.widget.ViewDragHelper.Callback.tryCaptureView(android.view.View, int):boolean]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_13;
Node_21 -> Node_13;
}

