digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.onViewPositionChanged(Landroid\/view\/View;IIII)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:android.view.View A[D('changedView' android.view.View)]) type: VIRTUAL call: android.view.View.getWidth():int A[MD:():int (c)] (LINE:2255)\l0x0004: IGET  (r1 I:androidx.drawerlayout.widget.DrawerLayout) = (r4 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.this$0 androidx.drawerlayout.widget.DrawerLayout  (LINE:2258)\l0x0006: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0007: INVOKE  (r1 I:boolean) = \l  (r1 I:androidx.drawerlayout.widget.DrawerLayout)\l  (r5 I:android.view.View A[D('changedView' android.view.View)])\l  (r2 I:int)\l type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.checkDrawerViewAbsoluteGravity(android.view.View, int):boolean A[MD:(android.view.View, int):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0013 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|0x000d: ARITH  (r1 I:int) = (r0 I:int A[D('childWidth' int)]) + (r6 I:int A[D('left' int)])  (LINE:2259)\l0x000f: CAST (r1 I:float) = (float) (r1 I:int) \l0x0010: CAST (r2 I:float) = (float) (r0 I:int A[D('childWidth' int)]) \l0x0011: ARITH  (r1 I:float) = (r1 I:float) \/ (r2 I:float) \l}"];
Node_18 [shape=record,label="{18\:\ 0x001f|0x001f: IGET  (r2 I:androidx.drawerlayout.widget.DrawerLayout) = (r4 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.this$0 androidx.drawerlayout.widget.DrawerLayout  (LINE:2264)\l0x0021: INVOKE  \l  (r2 I:androidx.drawerlayout.widget.DrawerLayout)\l  (r5 I:android.view.View A[D('changedView' android.view.View)])\l  (r1 I:float A[D('offset' float)])\l type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.setDrawerViewOffset(android.view.View, float):void A[MD:(android.view.View, float):void (m)]\l0x0024: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2265)\l0x0025: CMP_L  (r2 I:int) = (r1 I:float A[D('offset' float)]), (r2 I:float) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|0x0027: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002b \l}"];
Node_20 [shape=record,label="{20\:\ 0x0029|0x0029: CONST  (r2 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x002c|0x002c: INVOKE  (r5 I:android.view.View A[D('changedView' android.view.View)]), (r2 I:int) type: VIRTUAL call: android.view.View.setVisibility(int):void A[MD:(int):void (c)]\l0x002f: IGET  (r2 I:androidx.drawerlayout.widget.DrawerLayout) = (r4 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.this$0 androidx.drawerlayout.widget.DrawerLayout  (LINE:2266)\l0x0031: INVOKE  (r2 I:androidx.drawerlayout.widget.DrawerLayout) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.invalidate():void A[MD:():void (s)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0034|RETURN\l|0x0034: RETURN    (LINE:2267)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|0x002b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|0x0013: IGET  (r1 I:androidx.drawerlayout.widget.DrawerLayout A[D('offset' float)]) = (r4 I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback) androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.this$0 androidx.drawerlayout.widget.DrawerLayout  (LINE:2261)\l0x0015: INVOKE  (r1 I:int) = (r1 I:androidx.drawerlayout.widget.DrawerLayout) type: VIRTUAL call: androidx.drawerlayout.widget.DrawerLayout.getWidth():int A[MD:():int (s)]\l0x0019: ARITH  (r2 I:int) = (r1 I:int A[D('width' int)]) \- (r6 I:int A[D('left' int)])  (LINE:2262)\l0x001b: CAST (r2 I:float) = (float) (r2 I:int) \l0x001c: CAST (r3 I:float) = (float) (r0 I:int A[D('childWidth' int)]) \l0x001d: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x001e: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('width' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void androidx.drawerlayout.widget.DrawerLayout.ViewDragCallback.onViewPositionChanged((r4 'this' I:androidx.drawerlayout.widget.DrawerLayout$ViewDragCallback A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.View A[D('changedView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('dx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('dy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x002b \-\> B:22:0x002c, CROSS_EDGE: B:17:0x0013 \-\> B:18:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0013: r1 'offset' F\l  0x0019\-0x001f: r1 'width' I\l  0x0004\-0x0034: r0 'childWidth' I\l  0x001f\-0x0034: r1 'offset' F\l  \-1 \-0x0034: r5 'changedView' Landroid\/view\/View;\l  \-1 \-0x0034: r6 'left' I\l  \-1 \-0x0034: r7 'top' I\l  \-1 \-0x0034: r8 'dx' I\l  \-1 \-0x0034: r9 'dy' I\lMETHOD_OVERRIDE: [androidx.customview.widget.ViewDragHelper.Callback.onViewPositionChanged(android.view.View, int, int, int, int):void]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

