digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.1.perform(Landroid\/view\/View;Landroidx\/core\/view\/accessibility\/AccessibilityViewCommand$CommandArguments;)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0006|if (androidx.drawerlayout.widget.DrawerLayout.this.isDrawerOpen(r3) == false) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008}"];
Node_16 [shape=record,label="{16\:\ 0x000f|if (androidx.drawerlayout.widget.DrawerLayout.this.getDrawerLockMode(r3) == 2) goto L8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|androidx.drawerlayout.widget.DrawerLayout.this.closeDrawer(r3)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0017|RETURN\l|return androidx.drawerlayout.widget.DrawerLayout.CHILDREN_DISALLOW_INTERCEPT\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.drawerlayout.widget.DrawerLayout.1.perform((r2v0 'this' androidx.drawerlayout.widget.DrawerLayout$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'arguments' androidx.core.view.accessibility.AccessibilityViewCommand$CommandArguments A[D('arguments' androidx.core.view.accessibility.AccessibilityViewCommand$CommandArguments), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0019 \-\> B:12:?, CROSS_EDGE: B:14:0x0006 \-\> B:19:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.view.accessibility.AccessibilityViewCommand.perform(android.view.View, androidx.core.view.accessibility.AccessibilityViewCommand$CommandArguments):boolean]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_12;
Node_21 -> Node_12;
Node_19 -> Node_12;
}

