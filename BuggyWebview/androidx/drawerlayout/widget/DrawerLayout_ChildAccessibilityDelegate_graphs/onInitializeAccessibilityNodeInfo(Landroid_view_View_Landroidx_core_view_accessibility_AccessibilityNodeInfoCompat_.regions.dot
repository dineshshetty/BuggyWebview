digraph "CFG forandroidx.drawerlayout.widget.DrawerLayout.ChildAccessibilityDelegate.onInitializeAccessibilityNodeInfo(Landroid\/view\/View;Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat;)V" {
subgraph cluster_Region_1110313144 {
label = "R(2:1|(1:(1:3)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|super.onInitializeAccessibilityNodeInfo(r2, r3)\l}"];
subgraph cluster_Region_2026360117 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1270343065 {
label = "IF [B:10:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0007|if (androidx.drawerlayout.widget.DrawerLayout.includeChildForAccessibility(r2) == false) goto L3\l}"];
subgraph cluster_Region_2102518444 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0009|r3.setParent(null)\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000d|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.drawerlayout.widget.DrawerLayout.ChildAccessibilityDelegate.onInitializeAccessibilityNodeInfo((r1v0 'this' androidx.drawerlayout.widget.DrawerLayout$ChildAccessibilityDelegate A[IMMUTABLE_TYPE, THIS]), (r2v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'info' androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[D('info' androidx.core.view.accessibility.AccessibilityNodeInfoCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0007 \-\> B:12:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.view.AccessibilityDelegateCompat.onInitializeAccessibilityNodeInfo(android.view.View, androidx.core.view.accessibility.AccessibilityNodeInfoCompat):void]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

