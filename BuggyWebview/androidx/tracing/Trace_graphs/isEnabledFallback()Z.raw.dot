digraph "CFG forandroidx.tracing.Trace.isEnabledFallback()Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"isTagEnabled\"  (LINE:159)\l0x0002: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r3 I:??[int, float, short, byte, char]) = (18 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|0x0007: IF  (r1 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char])  \-\> B:25:0x0046 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0046|RETURN\l|0x0046: RETURN  (r2 I:boolean)  (LINE:173)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|TRY_ENTER\lTryCatch #0 \{Exception \-\> 0x0042, blocks: (B:18:0x0009, B:20:0x000f, B:21:0x002b), top: B:26:0x0009 \}\lCatch: Exception \-\> 0x0042\l|0x0009: SGET  (r1 I:java.lang.reflect.Method) =  androidx.tracing.Trace.sIsTagEnabledMethod java.lang.reflect.Method A[Catch: Exception \-\> 0x0042, TRY_ENTER] (LINE:161)\l0x000b: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000c: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002b \l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|TryCatch #0 \{Exception \-\> 0x0042, blocks: (B:18:0x0009, B:20:0x000f, B:21:0x002b), top: B:26:0x0009 \}\lCatch: Exception \-\> 0x0042\l|0x000f: CONST_CLASS  (r1 I:java.lang.Class\<android.os.Trace\>) =  android.os.Trace.class  (LINE:162)\l0x0011: CONST_STR  (r5 I:java.lang.String) =  \"TRACE_TAG_APP\" \l0x0013: INVOKE  (r1 I:java.lang.reflect.Field) = (r1 I:java.lang.Class), (r5 I:java.lang.String) type: VIRTUAL call: java.lang.Class.getField(java.lang.String):java.lang.reflect.Field A[Catch: Exception \-\> 0x0042, MD:(java.lang.String):java.lang.reflect.Field throws java.lang.NoSuchFieldException (c)]\l0x0017: INVOKE  (r5 I:long) = (r1 I:java.lang.reflect.Field A[D('traceTagAppField' java.lang.reflect.Field)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.reflect.Field.getLong(java.lang.Object):long A[Catch: Exception \-\> 0x0042, MD:(java.lang.Object):long throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)] (LINE:163)\l0x001b: SPUT  (r5 I:long) androidx.tracing.Trace.sTraceTagApp long A[Catch: Exception \-\> 0x0042]\l0x001d: CONST_CLASS  (r5 I:java.lang.Class\<android.os.Trace\>) =  android.os.Trace.class  (LINE:164)\l0x001f: NEW_ARRAY  (r6 I:java.lang.Class[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch: Exception \-\> 0x0042]\l0x0021: SGET  (r7 I:java.lang.Class) =  java.lang.Long.TYPE java.lang.Class A[Catch: Exception \-\> 0x0042]\l0x0023: APUT  (r6 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r7 I:??[OBJECT, ARRAY]) A[Catch: Exception \-\> 0x0042]\l0x0025: INVOKE  (r5 I:java.lang.reflect.Method) = (r5 I:java.lang.Class), (r0 I:java.lang.String), (r6 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method A[Catch: Exception \-\> 0x0042, MD:(java.lang.String, java.lang.Class\<?\>[]):java.lang.reflect.Method VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)] (LINE:165)\l0x0029: SPUT  (r5 I:java.lang.reflect.Method) androidx.tracing.Trace.sIsTagEnabledMethod java.lang.reflect.Method A[Catch: Exception \-\> 0x0042]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|TRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0042, blocks: (B:18:0x0009, B:20:0x000f, B:21:0x002b), top: B:26:0x0009 \}\lCatch: Exception \-\> 0x0042\l|0x002b: SGET  (r1 I:java.lang.reflect.Method A[D('traceTagAppField' java.lang.reflect.Field)]) =  androidx.tracing.Trace.sIsTagEnabledMethod java.lang.reflect.Method A[Catch: Exception \-\> 0x0042] (LINE:167)\l0x002d: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: Exception \-\> 0x0042]\l0x002f: SGET  (r5 I:long) =  androidx.tracing.Trace.sTraceTagApp long A[Catch: Exception \-\> 0x0042]\l0x0031: INVOKE  (r5 I:java.lang.Long) = (r5 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[Catch: Exception \-\> 0x0042, MD:(long):java.lang.Long (c)]\l0x0035: APUT  (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r5 I:??[OBJECT, ARRAY]) A[Catch: Exception \-\> 0x0042]\l0x0037: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.reflect.Method), (r4 I:java.lang.Object), (r3 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: Exception \-\> 0x0042, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l0x003b: CHECK_CAST (r1 I:java.lang.Boolean) = (java.lang.Boolean) (r1 I:??[OBJECT, ARRAY]) A[Catch: Exception \-\> 0x0042]\l0x003d: INVOKE  (r0 I:boolean) = (r1 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[Catch: Exception \-\> 0x0042, MD:():boolean (c), TRY_LEAVE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0041|RETURN\l|0x0041: RETURN  (r0 I:boolean) \l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x0042|ExcHandler: Exception \-\> 0x0042\l|0x0042: MOVE_EXCEPTION  (r1 I:java.lang.Exception A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: Exception \-\> 0x0042] (LINE:168)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0043|0x0043: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.Exception A[D('exception' java.lang.Exception)]) type: STATIC call: androidx.tracing.Trace.handleException(java.lang.String, java.lang.Exception):void A[MD:(java.lang.String, java.lang.Exception):void (m)] (LINE:169)\l}"];
MethodNode[shape=record,label="{private static boolean androidx.tracing.Trace.isEnabledFallback()  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0041 \-\> B:15:?, CROSS_EDGE: B:24:0x0043 \-\> B:25:0x0046, CROSS_EDGE: B:19:0x000d \-\> B:21:0x002b, CROSS_EDGE: B:26:0x0009 \-\> B:23:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x002b: r1 'traceTagAppField' Ljava\/lang\/reflect\/Field;\l  0x0043\-0x0046: r1 'exception' Ljava\/lang\/Exception;\lTryCatch #0 \{Exception \-\> 0x0042, blocks: (B:18:0x0009, B:20:0x000f, B:21:0x002b), top: B:26:0x0009 \}\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_25;
Node_17 -> Node_26[style=dashed];
Node_25 -> Node_15;
Node_26 -> Node_18;
Node_26 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_27;
Node_22 -> Node_15;
Node_27 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
}

