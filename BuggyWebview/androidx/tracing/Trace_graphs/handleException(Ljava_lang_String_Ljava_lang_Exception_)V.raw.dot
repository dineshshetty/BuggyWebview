digraph "CFG forandroidx.tracing.Trace.handleException(Ljava\/lang\/String;Ljava\/lang\/Exception;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('exception' java.lang.Exception)]) java.lang.reflect.InvocationTargetException  (LINE:229)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0016 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: INVOKE  (r0 I:java.lang.Throwable) = (r3 I:java.lang.Exception A[D('exception' java.lang.Exception)]) type: VIRTUAL call: java.lang.Exception.getCause():java.lang.Throwable A[MD:():java.lang.Throwable (c)] (LINE:230)\l0x0008: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('cause' java.lang.Throwable)]) java.lang.RuntimeException  (LINE:231)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0010 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('cause' java.lang.Throwable)])  (LINE:232)\l0x000d: CHECK_CAST (r1 I:java.lang.RuntimeException) = (java.lang.RuntimeException) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:234)\l0x0012: INVOKE  (r1 I:java.lang.RuntimeException), (r0 I:java.lang.Throwable A[D('cause' java.lang.Throwable)]) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0015|0x0015: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:java.lang.StringBuilder A[D('cause' java.lang.Throwable)]) =  java.lang.StringBuilder  (LINE:237)\l0x0018: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x001b: CONST_STR  (r1 I:java.lang.String) =  \"Unable to call \" \l0x001d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0020: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String A[D('methodName' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0023: CONST_STR  (r1 I:java.lang.String) =  \" via reflection\" \l0x0025: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0028: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x002c: CONST_STR  (r1 I:java.lang.String) =  \"Trace\" \l0x002e: INVOKE  (r1 I:java.lang.String), (r0 I:java.lang.String), (r3 I:java.lang.Throwable A[D('exception' java.lang.Exception)]) type: STATIC call: android.util.Log.v(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|RETURN\l|0x0031: RETURN    (LINE:238)\l}"];
MethodNode[shape=record,label="{private static void androidx.tracing.Trace.handleException((r2 I:java.lang.String A[D('methodName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Exception A[D('exception' java.lang.Exception), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0015 \-\> B:13:?, CROSS_EDGE: B:23:0x0031 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0016: r0 'cause' Ljava\/lang\/Throwable;\l  \-1 \-0x0031: r2 'methodName' Ljava\/lang\/String;\l  \-1 \-0x0031: r3 'exception' Ljava\/lang\/Exception;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

