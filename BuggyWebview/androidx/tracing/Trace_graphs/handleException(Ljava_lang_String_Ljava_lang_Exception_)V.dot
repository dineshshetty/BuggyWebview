digraph "CFG forandroidx.tracing.Trace.handleException(Ljava\/lang\/String;Ljava\/lang\/Exception;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0002|if ((r3 instanceof java.lang.reflect.InvocationTargetException) == false) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|java.lang.Throwable r0 = r3.getCause()\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|if ((r0 instanceof java.lang.RuntimeException) == false) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c}"];
Node_19 [shape=record,label="{19\:\ 0x000f|throw ((java.lang.RuntimeException) r0)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010}"];
Node_21 [shape=record,label="{21\:\ 0x0015|throw new java.lang.RuntimeException(r0)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Unable to call \")\lr0.append(r2)\lr0.append(\" via reflection\")\landroid.util.Log.v(androidx.tracing.Trace.TAG, r0.toString(), r3)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|RETURN\l|return\l}"];
MethodNode[shape=record,label="{private static void androidx.tracing.Trace.handleException((r2v0 'methodName' java.lang.String A[D('methodName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'exception' java.lang.Exception A[D('exception' java.lang.Exception), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0015 \-\> B:13:?, CROSS_EDGE: B:23:0x0031 \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

