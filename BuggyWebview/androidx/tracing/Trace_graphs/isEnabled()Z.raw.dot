digraph "CFG forandroidx.tracing.Trace.isEnabled()Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|TRY_ENTER\lTryCatch #2 \{NoClassDefFoundError \-\> 0x000a, NoSuchMethodError \-\> 0x000c, blocks: (B:16:0x0000, B:18:0x0004), top: B:26:0x0000 \}\lCatch: NoClassDefFoundError \-\> 0x000a, NoSuchMethodError \-\> 0x000c\l|0x0000: SGET  (r0 I:java.lang.reflect.Method) =  androidx.tracing.Trace.sIsTagEnabledMethod java.lang.reflect.Method A[Catch: NoClassDefFoundError \-\> 0x000a, NoSuchMethodError \-\> 0x000c, TRY_ENTER] (LINE:61)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000d \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|TRY_LEAVE\lTryCatch #2 \{NoClassDefFoundError \-\> 0x000a, NoSuchMethodError \-\> 0x000c, blocks: (B:16:0x0000, B:18:0x0004), top: B:26:0x0000 \}\lCatch: NoClassDefFoundError \-\> 0x000a, NoSuchMethodError \-\> 0x000c\l|0x0004: INVOKE  (r0 I:boolean) =  type: STATIC call: android.os.Trace.isEnabled():boolean A[Catch: NoClassDefFoundError \-\> 0x000a, NoSuchMethodError \-\> 0x000c, MD:():boolean (c), TRY_LEAVE] (LINE:62)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|0x000d: INVOKE  (r0 I:boolean) =  type: STATIC call: androidx.tracing.Trace.isEnabledFallback():boolean A[MD:():boolean (m)] (LINE:66)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|ExcHandler: NoClassDefFoundError \-\> 0x000a\l|0x000a: MOVE_EXCEPTION  (r0 I:java.lang.NoClassDefFoundError A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NoClassDefFoundError \-\> 0x000a] (LINE:64)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|ExcHandler: NoSuchMethodError \-\> 0x000c\l|0x000c: MOVE_EXCEPTION  (r0 I:java.lang.NoSuchMethodError A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NoSuchMethodError \-\> 0x000c]\l}"];
MethodNode[shape=record,label="{public static boolean androidx.tracing.Trace.isEnabled()  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0011 \-\> B:15:?, CROSS_EDGE: B:23:0x000c \-\> B:24:0x000d, CROSS_EDGE: B:17:0x0002 \-\> B:24:0x000d, CROSS_EDGE: B:26:0x0000 \-\> B:21:0x000a, CROSS_EDGE: B:26:0x0000 \-\> B:23:0x000c\lINLINE_NOT_NEEDED\lTryCatch #2 \{NoClassDefFoundError \-\> 0x000a, NoSuchMethodError \-\> 0x000c, blocks: (B:16:0x0000, B:18:0x0004), top: B:26:0x0000 \}\l}"];
MethodNode -> Node_14;Node_14 -> Node_26;
Node_26 -> Node_16;
Node_26 -> Node_21;
Node_26 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_18 -> Node_27;
Node_19 -> Node_15;
Node_27 -> Node_21;
Node_27 -> Node_23;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_21 -> Node_24;
Node_23 -> Node_24;
}

