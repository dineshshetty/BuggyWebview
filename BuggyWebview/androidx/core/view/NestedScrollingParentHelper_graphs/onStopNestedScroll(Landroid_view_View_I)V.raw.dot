digraph "CFG forandroidx.core.view.NestedScrollingParentHelper.onStopNestedScroll(Landroid\/view\/View;I)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:114)\l0x0001: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0007 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IPUT  (r0 I:int), (r2 I:androidx.core.view.NestedScrollingParentHelper) androidx.core.view.NestedScrollingParentHelper.mNestedScrollAxesNonTouch int  (LINE:115)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0009: RETURN   A[SYNTHETIC] (LINE:119)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|0x0007: IPUT  (r0 I:int), (r2 I:androidx.core.view.NestedScrollingParentHelper) androidx.core.view.NestedScrollingParentHelper.mNestedScrollAxesTouch int  (LINE:117)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|RETURN\lORIG_RETURN\l|0x0009: RETURN    (LINE:119)\l}"];
MethodNode[shape=record,label="{public void androidx.core.view.NestedScrollingParentHelper.onStopNestedScroll((r2 'this' I:androidx.core.view.NestedScrollingParentHelper A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('target' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0007 \-\> B:14:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0009: r3 'target' Landroid\/view\/View;\l  \-1 \-0x0009: r4 'type' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

