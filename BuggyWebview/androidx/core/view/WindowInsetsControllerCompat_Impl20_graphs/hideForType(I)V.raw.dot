digraph "CFG forandroidx.core.view.WindowInsetsControllerCompat.Impl20.hideForType(I)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: SWITCH  (r4 I:?? A[D('type' int)])\l case 1: goto B:29:0x0026\l case 2: goto B:27:0x0021\l case 8: goto B:26:0x0004\l default: goto B:32:?  (LINE:472)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|0x0004: IGET  (r0 I:android.view.Window) = (r3 I:androidx.core.view.WindowInsetsControllerCompat$Impl20) androidx.core.view.WindowInsetsControllerCompat.Impl20.mWindow android.view.Window  (LINE:480)\l0x0006: INVOKE  (r0 I:android.content.Context) = (r0 I:android.view.Window) type: VIRTUAL call: android.view.Window.getContext():android.content.Context A[MD:():android.content.Context (c)]\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"input_method\"  (LINE:481)\l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) type: VIRTUAL call: android.content.Context.getSystemService(java.lang.String):java.lang.Object A[MD:(java.lang.String):java.lang.Object (c)]\l0x0010: CHECK_CAST (r0 I:android.view.inputmethod.InputMethodManager) = (android.view.inputmethod.InputMethodManager) (r0 I:??[OBJECT, ARRAY]) \l0x0012: IGET  (r1 I:android.view.Window) = (r3 I:androidx.core.view.WindowInsetsControllerCompat$Impl20) androidx.core.view.WindowInsetsControllerCompat.Impl20.mWindow android.view.Window \l0x0014: INVOKE  (r1 I:android.view.View) = (r1 I:android.view.Window) type: VIRTUAL call: android.view.Window.getDecorView():android.view.View A[MD:():android.view.View (c)] (LINE:482)\l0x0018: INVOKE  (r1 I:android.os.IBinder) = (r1 I:android.view.View) type: VIRTUAL call: android.view.View.getWindowToken():android.os.IBinder A[MD:():android.os.IBinder (c)]\l0x001c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: INVOKE  (r0 I:android.view.inputmethod.InputMethodManager), (r1 I:android.os.IBinder), (r2 I:int) type: VIRTUAL call: android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow(android.os.IBinder, int):boolean A[MD:(android.os.IBinder, int):boolean (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|RETURN\lORIG_RETURN\l|0x002b: RETURN    (LINE:485)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:477)\l0x0022: INVOKE  (r3 I:androidx.core.view.WindowInsetsControllerCompat$Impl20), (r0 I:int) type: VIRTUAL call: androidx.core.view.WindowInsetsControllerCompat.Impl20.setSystemUiFlag(int):void A[MD:(int):void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:478)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0026|0x0026: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:474)\l0x0027: INVOKE  (r3 I:androidx.core.view.WindowInsetsControllerCompat$Impl20), (r0 I:int) type: VIRTUAL call: androidx.core.view.WindowInsetsControllerCompat.Impl20.setSystemUiFlag(int):void A[MD:(int):void (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x002a|RETURN\l|0x002a: RETURN    (LINE:475)\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x002b: RETURN   A[SYNTHETIC] (LINE:485)\l}"];
MethodNode[shape=record,label="{private void androidx.core.view.WindowInsetsControllerCompat.Impl20.hideForType((r3 'this' I:androidx.core.view.WindowInsetsControllerCompat$Impl20 A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0025 \-\> B:23:?, CROSS_EDGE: B:30:0x002a \-\> B:23:?, CROSS_EDGE: B:24:0x0000 \-\> B:31:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0039: r4 'type' I\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27;
Node_24 -> Node_29;
Node_24 -> Node_32;
Node_26 -> Node_31;
Node_31 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_23;
Node_29 -> Node_30;
Node_30 -> Node_23;
Node_32 -> Node_23;
}

