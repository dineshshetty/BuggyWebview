digraph "CFG forandroidx.core.view.WindowInsetsControllerCompat.Impl20.lambda$showForType$0(Landroid\/view\/View;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0001|0x0001: INVOKE  (r0 I:android.content.Context) = (r2 I:android.view.View A[D('finalView' android.view.View)]) type: VIRTUAL call: android.view.View.getContext():android.content.Context A[MD:():android.content.Context (c)] (LINE:451)\l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"input_method\"  (LINE:452)\l0x0007: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) type: VIRTUAL call: android.content.Context.getSystemService(java.lang.String):java.lang.Object A[MD:(java.lang.String):java.lang.Object (c)]\l0x000b: CHECK_CAST (r0 I:android.view.inputmethod.InputMethodManager) = (android.view.inputmethod.InputMethodManager) (r0 I:??[OBJECT, ARRAY]) \l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:453)\l0x000e: INVOKE  \l  (r0 I:android.view.inputmethod.InputMethodManager A[D('imm' android.view.inputmethod.InputMethodManager)])\l  (r2 I:android.view.View A[D('finalView' android.view.View)])\l  (r1 I:int)\l type: VIRTUAL call: android.view.inputmethod.InputMethodManager.showSoftInput(android.view.View, int):boolean A[MD:(android.view.View, int):boolean (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:455)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void androidx.core.view.WindowInsetsControllerCompat.Impl20.lambda$showForType$0((r2 I:android.view.View A[D('finalView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0011: r0 'imm' Landroid\/view\/inputmethod\/InputMethodManager;\l  \-1 \-0x0011: r2 'finalView' Landroid\/view\/View;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

