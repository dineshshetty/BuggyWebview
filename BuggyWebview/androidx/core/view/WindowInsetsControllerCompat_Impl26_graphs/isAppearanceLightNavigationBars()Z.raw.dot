digraph "CFG forandroidx.core.view.WindowInsetsControllerCompat.Impl26.isAppearanceLightNavigationBars()Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:android.view.Window) = (r1 I:androidx.core.view.WindowInsetsControllerCompat$Impl26) androidx.core.view.WindowInsetsControllerCompat.Impl26.mWindow android.view.Window  (LINE:584)\l0x0002: INVOKE  (r0 I:android.view.View) = (r0 I:android.view.Window) type: VIRTUAL call: android.view.Window.getDecorView():android.view.View A[MD:():android.view.View (c)]\l0x0006: INVOKE  (r0 I:int) = (r0 I:android.view.View) type: VIRTUAL call: android.view.View.getSystemUiVisibility():int A[MD:():int (c)]\l0x000a: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) & (16 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0010 \l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|SYNTHETIC\lRETURN\l|0x000e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0011: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.core.view.WindowInsetsControllerCompat.Impl26.isAppearanceLightNavigationBars((r1 'this' I:androidx.core.view.WindowInsetsControllerCompat$Impl26 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0010 \-\> B:22:0x0011\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.core.view.WindowInsetsControllerCompat.Impl.isAppearanceLightNavigationBars():boolean]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_17;
Node_21 -> Node_17;
}

