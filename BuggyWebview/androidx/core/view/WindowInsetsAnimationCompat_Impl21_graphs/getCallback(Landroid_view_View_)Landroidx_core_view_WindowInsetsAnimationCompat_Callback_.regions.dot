digraph "CFG forandroidx.core.view.WindowInsetsAnimationCompat.Impl21.getCallback(Landroid\/view\/View;)Landroidx\/core\/view\/WindowInsetsAnimationCompat$Callback;" {
subgraph cluster_Region_375929868 {
label = "R(2:1|(2:(1:6)|(2:3|4)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object java.lang.Object r0 = r3.getTag(androidx.core.C0180R.C0183id.tag_window_insets_animation_callback)\l}"];
subgraph cluster_Region_1533198953 {
label = "R(2:(1:6)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1149431037 {
label = "IF [B:3:0x0009] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|if ((r0 instanceof androidx.core.view.WindowInsetsAnimationCompat.Impl21.Impl21OnApplyWindowInsetsListener) == false) goto L6\l}"];
subgraph cluster_Region_1405690580 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
}
}
subgraph cluster_Region_2042333830 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|androidx.core.view.WindowInsetsAnimationCompat$Callback androidx.core.view.WindowInsetsAnimationCompat.Callback r1 = ((androidx.core.view.WindowInsetsAnimationCompat.Impl21.Impl21OnApplyWindowInsetsListener) r0).mCallback\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|RETURN\lORIG_RETURN\l|return r1\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static androidx.core.view.WindowInsetsAnimationCompat$Callback androidx.core.view.WindowInsetsAnimationCompat.Impl21.getCallback((r3v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:3:0x0009 \-\> B:5:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_6 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_0 -> Node_2;
}

