digraph "CFG forandroidx.core.view.WindowInsetsAnimationCompat.Impl21.forwardToViewIfNeeded(Landroid\/view\/View;Landroid\/view\/WindowInsets;)Landroid\/view\/WindowInsets;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  androidx.core.R.id.tag_on_apply_window_listener int  (LINE:819)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r1 I:android.view.View A[D('v' android.view.View)]), (r0 I:int) type: VIRTUAL call: android.view.View.getTag(int):java.lang.Object A[MD:(int):java.lang.Object (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0009 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|RETURN\l|0x0008: RETURN  (r2 I:android.view.WindowInsets A[D('insets' android.view.WindowInsets)])  (LINE:820)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r0 I:android.view.WindowInsets) = \l  (r1 I:android.view.View A[D('v' android.view.View)])\l  (r2 I:android.view.WindowInsets A[D('insets' android.view.WindowInsets)])\l type: VIRTUAL call: android.view.View.onApplyWindowInsets(android.view.WindowInsets):android.view.WindowInsets A[MD:(android.view.WindowInsets):android.view.WindowInsets (c)] (LINE:822)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:android.view.WindowInsets) \l}"];
MethodNode[shape=record,label="{static android.view.WindowInsets androidx.core.view.WindowInsetsAnimationCompat.Impl21.forwardToViewIfNeeded((r1 I:android.view.View A[D('v' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.view.WindowInsets A[D('insets' android.view.WindowInsets), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000d \-\> B:1:?\lDebug Info:\l  \-1 \-0x000d: r1 'v' Landroid\/view\/View;\l  \-1 \-0x000d: r2 'insets' Landroid\/view\/WindowInsets;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

