digraph "CFG forandroidx.core.view.WindowInsetsCompat.insetInsets(Landroidx\/core\/graphics\/Insets;IIII)Landroidx\/core\/graphics\/Insets;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|int r0 = java.lang.Math.max(0, r5.left \- r6)\lint r2 = java.lang.Math.max(0, r5.top \- r7)\lint r3 = java.lang.Math.max(0, r5.right \- r8)\lint r1 = java.lang.Math.max(0, r5.bottom \- r9)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|if (r0 != r6) goto L8\l}"];
Node_14 [shape=record,label="{14\:\ 0x001f|if (r2 != r7) goto L8\l}"];
Node_15 [shape=record,label="{15\:\ 0x0021|if (r3 != r8) goto L8\l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|if (r1 != r9) goto L8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|RETURN\l|return r5\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0026}"];
Node_19 [shape=record,label="{19\:\ 0x002a|RETURN\l|return androidx.core.graphics.Insets.m106of(r0, r2, r3, r1)\l}"];
MethodNode[shape=record,label="{public static androidx.core.graphics.Insets androidx.core.view.WindowInsetsCompat.insetInsets((r5v0 'insets' androidx.core.graphics.Insets A[D('insets' androidx.core.graphics.Insets), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'left' int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'top' int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'right' int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'bottom' int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x002a \-\> B:11:?, CROSS_EDGE: B:15:0x0021 \-\> B:18:0x0026, CROSS_EDGE: B:14:0x001f \-\> B:18:0x0026, CROSS_EDGE: B:13:0x001d \-\> B:18:0x0026\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

