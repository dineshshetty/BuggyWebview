digraph "CFG forandroidx.core.view.MenuKt.forEach(Landroid\/view\/Menu;Lkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_540719733 {
label = "R(2:1|(1:3))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"action\")\lint r1 = 0\lint int r2 = r5.size()\l}"];
subgraph cluster_LoopRegion_1609131502 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0010|LOOP_START\lLOOP:0: B:3:0x0010\-\>B:4:0x0012\lPHI: r1 \l  PHI: (r1v1 'index' int) = (r1v0 'index' int), (r1v2 'index' int) binds: [B:2:0x0000, B:4:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r2) goto L3\l}"];
subgraph cluster_Region_2015749848 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0012|LOOP_END\lLOOP:0: B:3:0x0010\-\>B:4:0x0012\l|android.view.MenuItem android.view.MenuItem r3 = r5.getItem(r1)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r3, \"getItem(index)\")\lr6.invoke(r3)\lr1++\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0021|SYNTHETIC\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0021}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void androidx.core.view.MenuKt.forEach((r5v0 '$this$forEach' android.view.Menu A[D('$this$forEach' android.view.Menu), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'action' kotlin.jvm.functions.Function1\<? super android.view.MenuItem, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x0012 \-\> B:3:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/view\/Menu;Lkotlin\/jvm\/functions\/Function1\<\-Landroid\/view\/MenuItem;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_3;
Node_0 -> Node_2;
Node_6 -> Node_5;
Node_5 -> Node_1;
}

