digraph "CFG forandroidx.core.view.WindowInsetsCompat.BuilderImpl.setInsets(ILandroidx\/core\/graphics\/Insets;)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: IGET  (r0 I:androidx.core.graphics.Insets[]) = (r3 I:androidx.core.view.WindowInsetsCompat$BuilderImpl) androidx.core.view.WindowInsetsCompat.BuilderImpl.mInsetsTypeMask androidx.core.graphics.Insets[]  (LINE:1644)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, short, byte, char]) = (9 ??[int, float, short, byte, char])  (LINE:1645)\l0x0006: NEW_ARRAY  (r0 I:androidx.core.graphics.Insets[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: androidx.core.graphics.Insets[] \l0x0008: IPUT  (r0 I:androidx.core.graphics.Insets[]), (r3 I:androidx.core.view.WindowInsetsCompat$BuilderImpl) androidx.core.view.WindowInsetsCompat.BuilderImpl.mInsetsTypeMask androidx.core.graphics.Insets[] \l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1647)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|LOOP_START\lLOOP:0: B:23:0x000b\-\>B:29:0x001c\l|0x000b: CONST  (r1 I:??[int, float, short, byte, char]) = (256(0x100, float:3.59E\-43) ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|0x000d: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:31:0x001f \l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|0x000f: ARITH  (r1 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('typeMask' int)]) & (r0 I:??[int, boolean, short, byte, char] A[D('i' int)])  (LINE:1648)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0014 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0014|0x0014: IGET  (r1 I:androidx.core.graphics.Insets[]) = (r3 I:androidx.core.view.WindowInsetsCompat$BuilderImpl) androidx.core.view.WindowInsetsCompat.BuilderImpl.mInsetsTypeMask androidx.core.graphics.Insets[]  (LINE:1651)\l0x0016: INVOKE  (r2 I:int) = (r0 I:int A[D('i' int)]) type: STATIC call: androidx.core.view.WindowInsetsCompat.Type.indexOf(int):int A[MD:(int):int (m)]\l0x001a: APUT  \l  (r1 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char])\l  (r5 I:??[OBJECT, ARRAY] A[D('insets' androidx.core.graphics.Insets)])\l \l}"];
Node_32 [shape=record,label="{32\:\ 0x001c|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|LOOP_END\lLOOP:0: B:23:0x000b\-\>B:29:0x001c\l|0x001c: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) \<\< (1 int)  (LINE:1647)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|RETURN\l|0x001f: RETURN    (LINE:1653)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.core.view.WindowInsetsCompat.BuilderImpl.setInsets((r3 'this' I:androidx.core.view.WindowInsetsCompat$BuilderImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('typeMask' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:androidx.core.graphics.Insets A[D('insets' androidx.core.graphics.Insets), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x001c \-\> B:23:0x000b, CROSS_EDGE: B:26:0x0011 \-\> B:29:0x001c, CROSS_EDGE: B:20:0x0002 \-\> B:22:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x001f: r0 'i' I\l  \-1 \-0x001f: r4 'typeMask' I\l  \-1 \-0x001f: r5 'insets' Landroidx\/core\/graphics\/Insets;\lMETHOD_OVERRIDE: [androidx.core.view.WindowInsetsCompat.BuilderImpl.setInsets(int, androidx.core.graphics.Insets):void]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_33[style=dashed];
Node_28 -> Node_32;
Node_32 -> Node_29;
Node_29 -> Node_23;
Node_33 -> Node_29;
Node_31 -> Node_30;
Node_30 -> Node_18;
}

