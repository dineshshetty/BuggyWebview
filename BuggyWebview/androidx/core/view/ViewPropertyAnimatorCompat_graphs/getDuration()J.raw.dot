digraph "CFG forandroidx.core.view.ViewPropertyAnimatorCompat.getDuration()J" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.ref.WeakReference\<android.view.View\>) = (r4 I:androidx.core.view.ViewPropertyAnimatorCompat) androidx.core.view.ViewPropertyAnimatorCompat.mView java.lang.ref.WeakReference  (LINE:252)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ref.WeakReference) type: VIRTUAL call: java.lang.ref.WeakReference.get():java.lang.Object A[MD:():T (c)]\l0x0006: CHECK_CAST (r0 I:android.view.View) = (android.view.View) (r0 I:??[OBJECT, ARRAY]) \l0x0008: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0014 \l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: INVOKE  (r0 I:android.view.ViewPropertyAnimator) = (r1 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: android.view.View.animate():android.view.ViewPropertyAnimator A[MD:():android.view.ViewPropertyAnimator (c)] (LINE:253)\l0x000f: INVOKE  (r2 I:long) = (r0 I:android.view.ViewPropertyAnimator) type: VIRTUAL call: android.view.ViewPropertyAnimator.getDuration():long A[MD:():long (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|RETURN\l|0x0013: RETURN  (r2 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|RETURN\l|0x0014: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:255)\l0x0016: RETURN  (r2 I:long) \l}"];
MethodNode[shape=record,label="{public long androidx.core.view.ViewPropertyAnimatorCompat.getDuration((r4 'this' I:androidx.core.view.ViewPropertyAnimatorCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0016 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0016: r1 'view' Landroid\/view\/View;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_17;
}

