digraph "CFG forandroidx.core.view.ViewCompat.dispatchNestedPreScroll(Landroid\/view\/View;II[I[II)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('view' android.view.View)]) androidx.core.view.NestedScrollingChild2  (LINE:3449)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0011 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('view' android.view.View)])  (LINE:3450)\l0x0005: CHECK_CAST (r1 I:androidx.core.view.NestedScrollingChild2) = (androidx.core.view.NestedScrollingChild2) (r1 I:??[OBJECT, ARRAY]) \l0x0007: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dx' int)]) \l0x0008: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dy' int)]) \l0x0009: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('consumed' int[])]) \l0x000a: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('offsetInWindow' int[])]) \l0x000b: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('type' int)]) \l0x000c: INVOKE  (r0 I:boolean) = (r1 I:androidx.core.view.NestedScrollingChild2), (r2 I:int), (r3 I:int), (r4 I:int[]), (r5 I:int[]), (r6 I:int) type: INTERFACE call: androidx.core.view.NestedScrollingChild2.dispatchNestedPreScroll(int, int, int[], int[], int):boolean A[MD:(int, int, int[], int[], int):boolean (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|0x0011: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0018  (LINE:3452)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: INVOKE  (r0 I:boolean) = \l  (r7 I:android.view.View A[D('view' android.view.View)])\l  (r8 I:int A[D('dx' int)])\l  (r9 I:int A[D('dy' int)])\l  (r10 I:int[] A[D('consumed' int[])])\l  (r11 I:int[] A[D('offsetInWindow' int[])])\l type: STATIC call: androidx.core.view.ViewCompat.dispatchNestedPreScroll(android.view.View, int, int, int[], int[]):boolean A[MD:(android.view.View, int, int, int[], int[]):boolean (m)] (LINE:3453)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|RETURN\l|0x0017: RETURN  (r0 I:boolean) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|RETURN\l|0x0018: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3455)\l0x0019: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.view.ViewCompat.dispatchNestedPreScroll((r7 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('dx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('dy' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int[] A[D('consumed' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int[] A[D('offsetInWindow' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0017 \-\> B:12:?, CROSS_EDGE: B:21:0x0019 \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0019: r7 'view' Landroid\/view\/View;\l  \-1 \-0x0019: r8 'dx' I\l  \-1 \-0x0019: r9 'dy' I\l  \-1 \-0x0019: r10 'consumed' [I\l  \-1 \-0x0019: r11 'offsetInWindow' [I\l  \-1 \-0x0019: r12 'type' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_12;
}

