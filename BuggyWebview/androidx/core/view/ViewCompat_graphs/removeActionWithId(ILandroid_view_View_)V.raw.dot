digraph "CFG forandroidx.core.view.ViewCompat.removeActionWithId(ILandroid\/view\/View;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.List) = (r4 I:android.view.View A[D('view' android.view.View)]) type: STATIC call: androidx.core.view.ViewCompat.getActionList(android.view.View):java.util.List A[MD:(android.view.View):java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\> (m)] (LINE:1353)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1354)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|LOOP_START\lLOOP:0: B:16:0x0005\-\>B:21:0x001b\l|0x0005: INVOKE  (r2 I:int) = \l  (r0 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:24:0x001e \l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: INVOKE  (r2 I:java.lang.Object) = \l  (r0 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l  (r1 I:int A[D('i' int)])\l type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:1355)\l0x000f: CHECK_CAST (r2 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) = (androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) (r2 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r2 I:int) = (r2 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.getId():int A[MD:():int (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|0x0015: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('actionId' int)])  \-\> B:21:0x001b \l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|LOOP_END\lLOOP:0: B:16:0x0005\-\>B:21:0x001b\l|0x001b: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:1354)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0017|0x0017: INVOKE  \l  (r0 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l  (r1 I:int A[D('i' int)])\l type: INTERFACE call: java.util.List.remove(int):java.lang.Object A[MD:(int):E (c)] (LINE:1356)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: RETURN    (LINE:1360)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN   A[SYNTHETIC] (LINE:1360)\l}"];
MethodNode[shape=record,label="{private static void androidx.core.view.ViewCompat.removeActionWithId((r3 I:int A[D('actionId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x001b \-\> B:16:0x0005, CROSS_EDGE: B:17:0x0009 \-\> B:22:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x001e: r1 'i' I\l  0x0004\-0x001e: r0 'actions' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat$AccessibilityActionCompat;\>;\l  \-1 \-0x001e: r3 'actionId' I\l  \-1 \-0x001e: r4 'view' Landroid\/view\/View;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_21;
Node_19 -> Node_23[style=dashed];
Node_21 -> Node_16;
Node_23 -> Node_20;
Node_20 -> Node_22;
Node_22 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

