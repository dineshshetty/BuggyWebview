digraph "CFG forandroidx.core.view.ViewCompat.getSystemGestureExclusionRects(Landroid\/view\/View;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:2625)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (29 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:14:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r0 I:java.util.List) = (r2 I:android.view.View A[D('view' android.view.View)]) type: STATIC call: androidx.core.view.ViewCompat.Api29Impl.getSystemGestureExclusionRects(android.view.View):java.util.List A[MD:(android.view.View):java.util.List\<android.graphics.Rect\> (m)] (LINE:2626)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:java.util.List\<android.graphics.Rect\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: INVOKE  (r0 I:java.util.List) =  type: STATIC call: java.util.Collections.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (c)] (LINE:2628)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:java.util.List\<android.graphics.Rect\>) \l}"];
MethodNode[shape=record,label="{public static java.util.List\<android.graphics.Rect\> androidx.core.view.ViewCompat.getSystemGestureExclusionRects((r2 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r2 'view' Landroid\/view\/View;\lSIGNATURE: (Landroid\/view\/View;)Ljava\/util\/List\<Landroid\/graphics\/Rect;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

