digraph "CFG forandroidx.core.view.ViewCompat.getAvailableActionIdFromResources(Landroid\/view\/View;Ljava\/lang\/CharSequence;)I" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:1278)\l0x0001: INVOKE  (r1 I:java.util.List) = (r7 I:android.view.View A[D('view' android.view.View)]) type: STATIC call: androidx.core.view.ViewCompat.getActionList(android.view.View):java.util.List A[MD:(android.view.View):java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\> (m)] (LINE:1280)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1281)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0006|LOOP_START\lLOOP:0: B:39:0x0006\-\>B:45:0x0027\l|0x0006: INVOKE  (r3 I:int) = \l  (r1 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x000a|0x000a: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:64:0x002a \l}"];
Node_41 [shape=record,label="{41\:\ 0x000c|0x000c: INVOKE  (r3 I:java.lang.Object) = \l  (r1 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l  (r2 I:int A[D('i' int)])\l type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:1282)\l0x0010: CHECK_CAST (r3 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) = (androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) (r3 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r3 I:java.lang.CharSequence) = (r3 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.getLabel():java.lang.CharSequence A[MD:():java.lang.CharSequence (m)]\l0x0016: INVOKE  (r3 I:boolean) = (r8 I:java.lang.CharSequence A[D('label' java.lang.CharSequence)]), (r3 I:java.lang.CharSequence) type: STATIC call: android.text.TextUtils.equals(java.lang.CharSequence, java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence):boolean (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|0x001a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0027 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0027|LOOP_END\lLOOP:0: B:39:0x0006\-\>B:45:0x0027\l|0x0027: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:1281)\l}"];
Node_63 [shape=record,label="{63\:\ 0x001c|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x001c|0x001c: INVOKE  (r3 I:java.lang.Object) = \l  (r1 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l  (r2 I:int A[D('i' int)])\l type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:1283)\l0x0020: CHECK_CAST (r3 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) = (androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) (r3 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r3 I:int) = (r3 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.getId():int A[MD:():int (m)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0026|RETURN\l|0x0026: RETURN  (r3 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_64 [shape=record,label="{64\:\ 0x002a|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|0x002a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1287)\l}"];
Node_47 [shape=record,label="{47\:\ 0x002b|LOOP_START\lLOOP:1: B:47:0x002b\-\>B:61:0x0053\l|0x002b: SGET  (r3 I:int[]) =  androidx.core.view.ViewCompat.ACCESSIBILITY_ACTIONS_RESOURCE_IDS int[] \l0x002d: ARRAY_LENGTH  (r4 I:int) = (r3 I:??[]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x002e|0x002e: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:65:0x0056 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0030|0x0030: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0031|0x0031: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' int)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0056 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0033|0x0033: AGET  (r3 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][]), (r2 I:??[int, short, byte, char] A[D('i' int)])  (LINE:1289)\l0x0035: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1290)\l0x0036: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1291)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0037|LOOP_START\lLOOP:2: B:52:0x0037\-\>B:58:0x004c\l|0x0037: INVOKE  (r6 I:int) = \l  (r1 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x003b|0x003b: IF  (r5 I:??[int, byte, short, char] A[D('j' int)]) \>= (r6 I:??[int, byte, short, char])  \-\> B:69:0x0050 \l}"];
Node_54 [shape=record,label="{54\:\ 0x003d|0x003d: INVOKE  (r6 I:java.lang.Object) = \l  (r1 I:java.util.List A[D('actions' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat\>)])\l  (r5 I:int A[D('j' int)])\l type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:1292)\l0x0041: CHECK_CAST (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) = (androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) (r6 I:??[OBJECT, ARRAY]) \l0x0043: INVOKE  (r6 I:int) = (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityActionCompat) type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.getId():int A[MD:():int (m)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x0047|0x0047: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('id' int)])  \-\> B:57:0x004b \l}"];
Node_56 [shape=record,label="{56\:\ 0x0049|0x0049: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x004c|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x004c|LOOP_END\lLOOP:2: B:52:0x0037\-\>B:58:0x004c\l|0x004c: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('idAvailable' boolean)]) & (r6 I:??[int, boolean, short, byte, char]) \l0x004d: ARITH  (r5 I:int) = (r5 I:int A[D('j' int)]) + (1 int)  (LINE:1291)\l}"];
Node_57 [shape=record,label="{57\:\ 0x004b|0x004b: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x004c|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0050|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0050|0x0050: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('idAvailable' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0053  (LINE:1294)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0052|0x0052: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('result' int)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('id' int)])  (LINE:1295)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0053|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0053|LOOP_END\lLOOP:1: B:47:0x002b\-\>B:61:0x0053\l|0x0053: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:1288)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0053|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0056|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x0056|RETURN\l|0x0056: RETURN  (r0 I:int A[D('result' int)])  (LINE:1298)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0056|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int androidx.core.view.ViewCompat.getAvailableActionIdFromResources((r7 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.CharSequence A[D('label' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:45:0x0027 \-\> B:39:0x0006, BACK_EDGE: B:58:0x004c \-\> B:52:0x0037, CROSS_EDGE: B:57:0x004b \-\> B:58:0x004c, BACK_EDGE: B:61:0x0053 \-\> B:47:0x002b, CROSS_EDGE: B:59:0x0050 \-\> B:61:0x0053, CROSS_EDGE: B:62:0x0056 \-\> B:37:?, CROSS_EDGE: B:48:0x002e \-\> B:62:0x0056\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x002a: r2 'i' I\l  0x0037\-0x0050: r5 'j' I\l  0x0035\-0x0053: r3 'id' I\l  0x0036\-0x0053: r4 'idAvailable' Z\l  0x002b\-0x0056: r2 'i' I\l  0x0001\-0x0056: r0 'result' I\l  0x0005\-0x0056: r1 'actions' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat$AccessibilityActionCompat;\>;\l  \-1 \-0x0056: r7 'view' Landroid\/view\/View;\l  \-1 \-0x0056: r8 'label' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_64;
Node_41 -> Node_42;
Node_42 -> Node_45;
Node_42 -> Node_63[style=dashed];
Node_45 -> Node_39;
Node_63 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_37;
Node_64 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_65;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_66;
Node_51 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_69;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_71;
Node_71 -> Node_58;
Node_58 -> Node_52;
Node_57 -> Node_70;
Node_70 -> Node_58;
Node_69 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_68;
Node_60 -> Node_67;
Node_67 -> Node_61;
Node_61 -> Node_47;
Node_68 -> Node_61;
Node_66 -> Node_62;
Node_62 -> Node_37;
Node_65 -> Node_62;
}

