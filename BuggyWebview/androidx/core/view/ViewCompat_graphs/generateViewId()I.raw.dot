digraph "CFG forandroidx.core.view.ViewCompat.generateViewId()I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:4084)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (17 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:20:0x000b \l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: INVOKE  (r0 I:int) =  type: STATIC call: androidx.core.view.ViewCompat.Api17Impl.generateViewId():int A[MD:():int (m)] (LINE:4085)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:int) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|LOOP_START\lLOOP:0: B:20:0x000b\-\>B:24:0x001d\l|0x000b: SGET  (r0 I:java.util.concurrent.atomic.AtomicInteger) =  androidx.core.view.ViewCompat.sNextGeneratedId java.util.concurrent.atomic.AtomicInteger  (LINE:4088)\l0x000d: INVOKE  (r1 I:int) = (r0 I:java.util.concurrent.atomic.AtomicInteger) type: VIRTUAL call: java.util.concurrent.atomic.AtomicInteger.get():int A[MD:():int (c)]\l0x0011: ARITH  (r2 I:int) = (r1 I:int A[D('result' int)]) + (1 int)  (LINE:4090)\l0x0013: CONST  (r3 I:??[int, float, short, byte, char]) = (16777215(0xffffff, float:2.3509886E\-38) ??[int, float, short, byte, char])  (LINE:4091)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|0x0016: IF  (r2 I:??[int, byte, short, char] A[D('newValue' int)]) \<= (r3 I:??[int, byte, short, char])  \-\> B:23:0x0019 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|0x0018: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('newValue' int)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|0x0019: INVOKE  (r0 I:boolean) = (r0 I:java.util.concurrent.atomic.AtomicInteger), (r1 I:int A[D('result' int)]), (r2 I:int A[D('newValue' int)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicInteger.compareAndSet(int, int):boolean A[MD:(int, int):boolean (c)] (LINE:4092)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001d|LOOP_END\lLOOP:0: B:20:0x000b\-\>B:24:0x001d\l|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x000b \l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:int A[D('result' int)])  (LINE:4093)\l}"];
MethodNode[shape=record,label="{public static int androidx.core.view.ViewCompat.generateViewId()  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001f \-\> B:15:?, BACK_EDGE: B:24:0x001d \-\> B:20:0x000b, CROSS_EDGE: B:21:0x0016 \-\> B:23:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0020: r1 'result' I\l  0x0013\-0x0020: r2 'newValue' I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_15;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_20;
Node_24 -> Node_27[style=dashed];
Node_27 -> Node_25;
Node_25 -> Node_15;
}

