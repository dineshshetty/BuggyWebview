digraph "CFG forandroidx.core.view.ViewCompat.getMinimumWidth(Landroid\/view\/View;)I" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:2012)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:31:0x000b \l}"];
Node_29 [shape=record,label="{29\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r3 I:android.view.View A[D('view' android.view.View)]) type: STATIC call: androidx.core.view.ViewCompat.Api16Impl.getMinimumWidth(android.view.View):int A[MD:(android.view.View):int (m)] (LINE:2013)\l}"];
Node_30 [shape=record,label="{30\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x000b|0x000b: SGET  (r0 I:boolean) =  androidx.core.view.ViewCompat.sMinWidthFieldFetched boolean  (LINE:2015)\l}"];
Node_32 [shape=record,label="{32\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0021 \l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:2017)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0010|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_34 [shape=record,label="{34\:\ 0x0010|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{NoSuchFieldException \-\> 0x001e, blocks: (B:34:0x0010), top: B:47:0x0010 \}\lCatch: NoSuchFieldException \-\> 0x001e\l|0x0010: CONST_CLASS  (r1 I:java.lang.Class\<android.view.View\>) =  android.view.View.class A[TRY_ENTER]\l0x0012: CONST_STR  (r2 I:java.lang.String) =  \"mMinWidth\" \l0x0014: INVOKE  (r1 I:java.lang.reflect.Field) = (r1 I:java.lang.Class), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.Class.getDeclaredField(java.lang.String):java.lang.reflect.Field A[Catch: NoSuchFieldException \-\> 0x001e, MD:(java.lang.String):java.lang.reflect.Field throws java.lang.NoSuchFieldException (c)]\l0x0018: SPUT  (r1 I:java.lang.reflect.Field) androidx.core.view.ViewCompat.sMinWidthField java.lang.reflect.Field A[Catch: NoSuchFieldException \-\> 0x001e]\l0x001a: INVOKE  (r1 I:java.lang.reflect.Field), (r0 I:boolean) type: VIRTUAL call: java.lang.reflect.Field.setAccessible(boolean):void A[Catch: NoSuchFieldException \-\> 0x001e, MD:(boolean):void throws java.lang.SecurityException (c), TRY_LEAVE] (LINE:2018)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001f|0x001f: SPUT  (r0 I:boolean) androidx.core.view.ViewCompat.sMinWidthFieldFetched boolean  (LINE:2022)\l}"];
Node_48 [shape=record,label="{48\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_36 [shape=record,label="{36\:\ 0x001e|ExcHandler: NoSuchFieldException \-\> 0x001e\l|0x001e: MOVE_EXCEPTION  (r1 I:java.lang.NoSuchFieldException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NoSuchFieldException \-\> 0x001e] (LINE:2019)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0021|0x0021: SGET  (r0 I:java.lang.reflect.Field) =  androidx.core.view.ViewCompat.sMinWidthField java.lang.reflect.Field  (LINE:2025)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:? \l}"];
Node_45 [shape=record,label="{45\:\ 0x0025|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0030, blocks: (B:40:0x0025), top: B:45:0x0025 \}\lCatch: Exception \-\> 0x0030\l|0x0025: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.reflect.Field), (r3 I:java.lang.Object A[D('view' android.view.View)]) type: VIRTUAL call: java.lang.reflect.Field.get(java.lang.Object):java.lang.Object A[Catch: Exception \-\> 0x0030, MD:(java.lang.Object):java.lang.Object throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c), TRY_ENTER] (LINE:2027)\l0x0029: CHECK_CAST (r0 I:java.lang.Integer) = (java.lang.Integer) (r0 I:??[OBJECT, ARRAY]) A[Catch: Exception \-\> 0x0030]\l0x002b: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[Catch: Exception \-\> 0x0030, MD:():int (c), TRY_LEAVE]\l}"];
Node_41 [shape=record,label="{41\:\ 0x002f|RETURN\l|0x002f: RETURN  (r0 I:int) \l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|ExcHandler: Exception \-\> 0x0030\l|0x0030: MOVE_EXCEPTION  (r0 I:java.lang.Exception A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: Exception \-\> 0x0030] (LINE:2028)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0031|RETURN\lORIG_RETURN\l|0x0031: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2035)\l0x0032: RETURN  (r0 I:int) \l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|0x0031: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:2035)\l0x0032: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public static int androidx.core.view.ViewCompat.getMinimumWidth((r3 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:44:0x0032 \-\> B:26:?, CROSS_EDGE: B:41:0x002f \-\> B:26:?, CROSS_EDGE: B:42:0x0030 \-\> B:43:0x0031, CROSS_EDGE: B:45:0x0025 \-\> B:42:0x0030, CROSS_EDGE: B:36:0x001e \-\> B:37:0x001f, CROSS_EDGE: B:47:0x0010 \-\> B:36:0x001e, CROSS_EDGE: B:32:0x000d \-\> B:38:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0032: r3 'view' Landroid\/view\/View;\lTryCatch #0 \{Exception \-\> 0x0030, blocks: (B:40:0x0025), top: B:45:0x0025 \}, TryCatch #1 \{NoSuchFieldException \-\> 0x001e, blocks: (B:34:0x0010), top: B:47:0x0010 \}\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_30 -> Node_26;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_38;
Node_33 -> Node_47;
Node_47 -> Node_34;
Node_47 -> Node_36;
Node_34 -> Node_37;
Node_34 -> Node_48;
Node_37 -> Node_38;
Node_48 -> Node_36;
Node_36 -> Node_37;
Node_38 -> Node_39;
Node_39 -> Node_45[style=dashed];
Node_39 -> Node_49;
Node_45 -> Node_40;
Node_45 -> Node_42;
Node_40 -> Node_41;
Node_40 -> Node_46;
Node_41 -> Node_26;
Node_46 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_26;
Node_49 -> Node_26;
}

