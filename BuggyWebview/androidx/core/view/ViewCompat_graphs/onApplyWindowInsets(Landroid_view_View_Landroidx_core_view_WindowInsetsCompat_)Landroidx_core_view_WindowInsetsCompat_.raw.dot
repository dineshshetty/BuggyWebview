digraph "CFG forandroidx.core.view.ViewCompat.onApplyWindowInsets(Landroid\/view\/View;Landroidx\/core\/view\/WindowInsetsCompat;)Landroidx\/core\/view\/WindowInsetsCompat;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:2556)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:21:0x001b \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: INVOKE  (r0 I:android.view.WindowInsets) = (r4 I:androidx.core.view.WindowInsetsCompat A[D('insets' androidx.core.view.WindowInsetsCompat)]) type: VIRTUAL call: androidx.core.view.WindowInsetsCompat.toWindowInsets():android.view.WindowInsets A[MD:():android.view.WindowInsets (m)] (LINE:2557)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unwrapped' android.view.WindowInsets)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001b  (LINE:2558)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: INVOKE  (r1 I:android.view.WindowInsets) = \l  (r3 I:android.view.View A[D('view' android.view.View)])\l  (r0 I:android.view.WindowInsets A[D('unwrapped' android.view.WindowInsets)])\l type: STATIC call: androidx.core.view.ViewCompat.Api20Impl.onApplyWindowInsets(android.view.View, android.view.WindowInsets):android.view.WindowInsets A[MD:(android.view.View, android.view.WindowInsets):android.view.WindowInsets (m)] (LINE:2559)\l0x0010: INVOKE  (r2 I:boolean) = \l  (r1 I:android.view.WindowInsets A[D('result' android.view.WindowInsets)])\l  (r0 I:java.lang.Object A[D('unwrapped' android.view.WindowInsets)])\l type: VIRTUAL call: android.view.WindowInsets.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:2560)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001b \l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|0x0016: INVOKE  (r2 I:androidx.core.view.WindowInsetsCompat) = \l  (r1 I:android.view.WindowInsets A[D('result' android.view.WindowInsets)])\l  (r3 I:android.view.View A[D('view' android.view.View)])\l type: STATIC call: androidx.core.view.WindowInsetsCompat.toWindowInsetsCompat(android.view.WindowInsets, android.view.View):androidx.core.view.WindowInsetsCompat A[MD:(android.view.WindowInsets, android.view.View):androidx.core.view.WindowInsetsCompat (m)] (LINE:2562)\l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|RETURN\l|0x001a: RETURN  (r2 I:androidx.core.view.WindowInsetsCompat) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|RETURN\l|0x001b: RETURN  (r4 I:androidx.core.view.WindowInsetsCompat A[D('insets' androidx.core.view.WindowInsetsCompat)])  (LINE:2566)\l}"];
MethodNode[shape=record,label="{public static androidx.core.view.WindowInsetsCompat androidx.core.view.ViewCompat.onApplyWindowInsets((r3 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.core.view.WindowInsetsCompat A[D('insets' androidx.core.view.WindowInsetsCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001b \-\> B:12:?, CROSS_EDGE: B:16:0x000a \-\> B:21:0x001b, CROSS_EDGE: B:14:0x0004 \-\> B:21:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x001b: r0 'unwrapped' Landroid\/view\/WindowInsets;\l  0x0010\-0x001b: r1 'result' Landroid\/view\/WindowInsets;\l  \-1 \-0x001b: r3 'view' Landroid\/view\/View;\l  \-1 \-0x001b: r4 'insets' Landroidx\/core\/view\/WindowInsetsCompat;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_21 -> Node_12;
}

