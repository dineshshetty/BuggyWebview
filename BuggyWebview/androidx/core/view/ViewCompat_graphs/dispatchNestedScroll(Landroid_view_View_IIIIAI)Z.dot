digraph "CFG forandroidx.core.view.ViewCompat.dispatchNestedScroll(Landroid\/view\/View;IIII[I)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 21) goto L6\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|return androidx.core.view.ViewCompat.Api21Impl.dispatchNestedScroll(r7, r8, r9, r10, r11, r12)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b}"];
Node_19 [shape=record,label="{19\:\ 0x000d|if ((r7 instanceof androidx.core.view.NestedScrollingChild) == false) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f}"];
Node_21 [shape=record,label="{21\:\ 0x001b|RETURN\l|return ((androidx.core.view.NestedScrollingChild) r7).dispatchNestedScroll(r8, r9, r10, r11, r12)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.view.ViewCompat.dispatchNestedScroll((r7v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'dxConsumed' int A[D('dxConsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'dyConsumed' int A[D('dyConsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'dxUnconsumed' int A[D('dxUnconsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'dyUnconsumed' int A[D('dyUnconsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'offsetInWindow' int[] A[D('offsetInWindow' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001b \-\> B:13:?, CROSS_EDGE: B:23:0x001d \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_13;
}

