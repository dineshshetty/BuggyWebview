digraph "CFG forandroidx.core.view.ViewCompat.stopNestedScroll(Landroid\/view\/View;I)V" {
subgraph cluster_Region_1410245612 {
label = "R(1:(1:3)(1:(1:7)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1377881262 {
label = "IF [B:13:0x0002] THEN: R(1:3) ELSE: R(1:(1:7)(0))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0002|if ((r1 instanceof androidx.core.view.NestedScrollingChild2) != false) goto L3\l}"];
subgraph cluster_Region_1558771800 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0004|((androidx.core.view.NestedScrollingChild2) r1).stopNestedScroll(r2)\l}"];
}
subgraph cluster_Region_580402076 {
label = "R(1:(1:7)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_53013984 {
label = "IF [B:15:0x000b] THEN: R(1:7) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000b|if (r2 == 0) goto L7\l}"];
subgraph cluster_Region_1463354519 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000d|stopNestedScroll(r1)\l}"];
}
subgraph cluster_Region_1275595792 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0010|ORIG_RETURN\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static void androidx.core.view.ViewCompat.stopNestedScroll((r1v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x000d \-\> B:17:0x0010, CROSS_EDGE: B:15:0x000b \-\> B:17:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_15 -> Node_19[style=dashed];
Node_16 -> Node_17;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_18 -> Node_11;
Node_17 -> Node_11;
Node_19 -> Node_11;
}

