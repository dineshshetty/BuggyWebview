digraph "CFG forandroidx.core.view.WindowInsetsCompat.Impl20.getVisibleInsets(Landroid\/view\/View;)Landroidx\/core\/graphics\/Insets;" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"WindowInsetsCompat\"  (LINE:1126)\l0x0002: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0004: CONST  (r2 I:??[int, float, short, byte, char]) = (30 ??[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0006|0x0006: IF  (r1 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:58:0x0061 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0008|0x0008: SGET  (r1 I:boolean) =  androidx.core.view.WindowInsetsCompat.Impl20.sVisibleRectReflectionFetched boolean  (LINE:1130)\l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x000f \l}"];
Node_37 [shape=record,label="{37\:\ 0x000c|0x000c: INVOKE   type: STATIC call: androidx.core.view.WindowInsetsCompat.Impl20.loadReflectionField():void A[MD:():void (m)] (LINE:1131)\l}"];
Node_38 [shape=record,label="{38\:\ 0x000f|0x000f: SGET  (r1 I:java.lang.reflect.Method) =  androidx.core.view.WindowInsetsCompat.Impl20.sGetViewRootImplMethod java.lang.reflect.Method  (LINE:1134)\l0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0060 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0014|0x0014: SGET  (r3 I:java.lang.Class\<?\>) =  androidx.core.view.WindowInsetsCompat.Impl20.sAttachInfoClass java.lang.Class \l}"];
Node_41 [shape=record,label="{41\:\ 0x0016|0x0016: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0060 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0018|0x0018: SGET  (r3 I:java.lang.reflect.Field) =  androidx.core.view.WindowInsetsCompat.Impl20.sVisibleInsetsField java.lang.reflect.Field \l}"];
Node_43 [shape=record,label="{43\:\ 0x001a|0x001a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x001d \l}"];
Node_45 [shape=record,label="{45\:\ 0x001d|0x001d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1141)\l}"];
Node_60 [shape=record,label="{60\:\ 0x001e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_46 [shape=record,label="{46\:\ 0x001e|TRY_ENTER\lTryCatch #0 \{ReflectiveOperationException \-\> 0x0046, blocks: (B:46:0x001e, B:48:0x0026, B:50:0x0031, B:52:0x0041), top: B:60:0x001e \}\lCatch: ReflectiveOperationException \-\> 0x0046\l|0x001e: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: ReflectiveOperationException \-\> 0x0046, TRY_ENTER]\l0x0020: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.reflect.Method), (r6 I:java.lang.Object A[D('rootView' android.view.View)]), (r3 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: ReflectiveOperationException \-\> 0x0046, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0024|0x0024: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('viewRootImpl' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0031  (LINE:1142)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0026|TryCatch #0 \{ReflectiveOperationException \-\> 0x0046, blocks: (B:46:0x001e, B:48:0x0026, B:50:0x0031, B:52:0x0041), top: B:60:0x001e \}\lCatch: ReflectiveOperationException \-\> 0x0046\l|0x0026: CONST_STR  (r3 I:java.lang.String) =  \"Failed to get visible insets. getViewRootImpl() returned null from the provided view. This means that the view is either not attached or the method has been overridden\"  (LINE:1143)\l0x0028: NEW_INSTANCE  (r4 I:java.lang.NullPointerException) =  java.lang.NullPointerException A[Catch: ReflectiveOperationException \-\> 0x0046]\l0x002a: INVOKE  (r4 I:java.lang.NullPointerException) type: DIRECT call: java.lang.NullPointerException.\<init\>():void A[Catch: ReflectiveOperationException \-\> 0x0046, MD:():void (c)]\l0x002d: INVOKE  (r0 I:java.lang.String), (r3 I:java.lang.String), (r4 I:java.lang.Throwable) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int A[Catch: ReflectiveOperationException \-\> 0x0046, MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0030|RETURN\l|0x0030: RETURN  (r2 I:androidx.core.graphics.Insets)  (LINE:1147)\l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x0031|TryCatch #0 \{ReflectiveOperationException \-\> 0x0046, blocks: (B:46:0x001e, B:48:0x0026, B:50:0x0031, B:52:0x0041), top: B:60:0x001e \}\lCatch: ReflectiveOperationException \-\> 0x0046\l|0x0031: SGET  (r3 I:java.lang.reflect.Field) =  androidx.core.view.WindowInsetsCompat.Impl20.sAttachInfoField java.lang.reflect.Field A[Catch: ReflectiveOperationException \-\> 0x0046] (LINE:1149)\l0x0033: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.lang.reflect.Field), (r1 I:java.lang.Object A[D('viewRootImpl' java.lang.Object)]) type: VIRTUAL call: java.lang.reflect.Field.get(java.lang.Object):java.lang.Object A[Catch: ReflectiveOperationException \-\> 0x0046, MD:(java.lang.Object):java.lang.Object throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)]\l0x0037: SGET  (r4 I:java.lang.reflect.Field) =  androidx.core.view.WindowInsetsCompat.Impl20.sVisibleInsetsField java.lang.reflect.Field A[Catch: ReflectiveOperationException \-\> 0x0046] (LINE:1150)\l0x0039: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.lang.reflect.Field), (r3 I:java.lang.Object A[D('mAttachInfo' java.lang.Object)]) type: VIRTUAL call: java.lang.reflect.Field.get(java.lang.Object):java.lang.Object A[Catch: ReflectiveOperationException \-\> 0x0046, MD:(java.lang.Object):java.lang.Object throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)]\l0x003d: CHECK_CAST (r4 I:android.graphics.Rect) = (android.graphics.Rect) (r4 I:??[OBJECT, ARRAY]) A[Catch: ReflectiveOperationException \-\> 0x0046]\l}"];
Node_51 [shape=record,label="{51\:\ 0x003f|0x003f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('visibleRect' android.graphics.Rect)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:?  (LINE:1151)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0041|TRY_LEAVE\lTryCatch #0 \{ReflectiveOperationException \-\> 0x0046, blocks: (B:46:0x001e, B:48:0x0026, B:50:0x0031, B:52:0x0041), top: B:60:0x001e \}\lCatch: ReflectiveOperationException \-\> 0x0046\l|0x0041: INVOKE  (r2 I:androidx.core.graphics.Insets) = (r4 I:android.graphics.Rect A[D('visibleRect' android.graphics.Rect)]) type: STATIC call: androidx.core.graphics.Insets.of(android.graphics.Rect):androidx.core.graphics.Insets A[Catch: ReflectiveOperationException \-\> 0x0046, MD:(android.graphics.Rect):androidx.core.graphics.Insets (m), TRY_LEAVE]\l}"];
Node_53 [shape=record,label="{53\:\ 0x0045|RETURN\lORIG_RETURN\l|0x0045: RETURN  (r2 I:androidx.core.graphics.Insets) \l}"];
Node_61 [shape=record,label="{61\:\ ?|SYNTHETIC\lRETURN\l|0x0045: RETURN  (r2 I:androidx.core.graphics.Insets) A[SYNTHETIC]\l}"];
Node_54 [shape=record,label="{54\:\ 0x0046|ExcHandler: ReflectiveOperationException \-\> 0x0046\l|0x0046: MOVE_EXCEPTION  (r1 I:java.lang.ReflectiveOperationException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: ReflectiveOperationException \-\> 0x0046] (LINE:1153)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0047|0x0047: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:1154)\l0x0049: INVOKE  (r3 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x004c: CONST_STR  (r4 I:java.lang.String) =  \"Failed to get visible insets. (Reflection error). \" \l0x004e: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0051: INVOKE  (r4 I:java.lang.String) = (r1 I:java.lang.ReflectiveOperationException A[D('e' java.lang.ReflectiveOperationException)]) type: VIRTUAL call: java.lang.ReflectiveOperationException.getMessage():java.lang.String A[MD:():java.lang.String (s)] (LINE:1155)\l0x0055: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0058: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005c: INVOKE  \l  (r0 I:java.lang.String)\l  (r3 I:java.lang.String)\l  (r1 I:java.lang.Throwable A[D('e' java.lang.ReflectiveOperationException)])\l type: STATIC call: android.util.Log.e(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)] (LINE:1154)\l}"];
Node_56 [shape=record,label="{56\:\ 0x005f|RETURN\l|0x005f: RETURN  (r2 I:androidx.core.graphics.Insets)  (LINE:1159)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0060|RETURN\l|0x0060: RETURN  (r2 I:androidx.core.graphics.Insets)  (LINE:1137)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0061|0x0061: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException) =  java.lang.UnsupportedOperationException  (LINE:1127)\l0x0063: CONST_STR  (r1 I:java.lang.String) =  \"getVisibleInsets() should not be called on API \>= 30. Use WindowInsets.isVisible() instead.\" \l0x0065: INVOKE  (r0 I:java.lang.UnsupportedOperationException), (r1 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0068|0x0068: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private androidx.core.graphics.Insets androidx.core.view.WindowInsetsCompat.Impl20.getVisibleInsets((r5 'this' I:androidx.core.view.WindowInsetsCompat$Impl20 A[IMMUTABLE_TYPE, THIS]), (r6 I:android.view.View A[D('rootView' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:53:0x0045 \-\> B:32:?, CROSS_EDGE: B:51:0x003f \-\> B:53:0x0045, CROSS_EDGE: B:56:0x005f \-\> B:32:?, CROSS_EDGE: B:57:0x0060 \-\> B:32:?, CROSS_EDGE: B:41:0x0016 \-\> B:57:0x0060, CROSS_EDGE: B:39:0x0012 \-\> B:57:0x0060, CROSS_EDGE: B:36:0x000a \-\> B:38:0x000f, CROSS_EDGE: B:59:0x0068 \-\> B:32:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x0046: r1 'viewRootImpl' Ljava\/lang\/Object;\l  0x0037\-0x0046: r3 'mAttachInfo' Ljava\/lang\/Object;\l  0x003f\-0x0046: r4 'visibleRect' Landroid\/graphics\/Rect;\l  0x0047\-0x005f: r1 'e' Ljava\/lang\/ReflectiveOperationException;\l  \-1 \-0x0068: r6 'rootView' Landroid\/view\/View;\lTryCatch #0 \{ReflectiveOperationException \-\> 0x0046, blocks: (B:46:0x001e, B:48:0x0026, B:50:0x0031, B:52:0x0041), top: B:60:0x001e \}\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_58;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_57;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_57;
Node_42 -> Node_43;
Node_43 -> Node_45;
Node_43 -> Node_57[style=dashed];
Node_45 -> Node_60;
Node_60 -> Node_46;
Node_60 -> Node_54;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_32;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_61;
Node_52 -> Node_53;
Node_53 -> Node_32;
Node_61 -> Node_32;
Node_54 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_32;
Node_57 -> Node_32;
Node_58 -> Node_59;
Node_59 -> Node_32;
}

