digraph "CFG forandroidx.core.view.WindowInsetsCompat.Impl20.isVisible(I)Z" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|r0 = 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x0001|LOOP_START\lLOOP:0: B:22:0x0001\-\>B:31:0x0012\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v3 'i' int) binds: [B:21:0x0000, B:31:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0003|if (r0 \> 256) goto L14\l}"];
Node_24 [shape=record,label="{24\:\ 0x0005}"];
Node_25 [shape=record,label="{25\:\ 0x0007|if ((r3 & r0) != 0) goto L6\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a}"];
Node_28 [shape=record,label="{28\:\ 0x000e|if (isTypeVisible(r0) != false) goto L11\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|RETURN\l|return false\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|LOOP_END\lLOOP:0: B:22:0x0001\-\>B:31:0x0012\l|int r0 = r0 \<\< 1\l}"];
Node_37 [shape=record,label="{37\:\ 0x0012|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0015|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0015|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{boolean androidx.core.view.WindowInsetsCompat.Impl20.isVisible((r2v0 'this' androidx.core.view.WindowInsetsCompat$Impl20 A[IMMUTABLE_TYPE, THIS]), (r3v0 'typeMask' int A[D('typeMask' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:31:0x0012 \-\> B:22:0x0001, CROSS_EDGE: B:25:0x0007 \-\> B:31:0x0012, CROSS_EDGE: B:33:0x0016 \-\> B:20:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.view.WindowInsetsCompat.Impl.isVisible(int):boolean]\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_34;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_37[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_35[style=dashed];
Node_28 -> Node_36;
Node_35 -> Node_29;
Node_29 -> Node_20;
Node_36 -> Node_31;
Node_31 -> Node_22;
Node_37 -> Node_31;
Node_34 -> Node_32;
Node_32 -> Node_20;
}

