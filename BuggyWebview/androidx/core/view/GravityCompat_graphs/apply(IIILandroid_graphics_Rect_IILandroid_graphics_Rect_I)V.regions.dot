digraph "CFG forandroidx.core.view.GravityCompat.apply(IIILandroid\/graphics\/Rect;IILandroid\/graphics\/Rect;I)V" {
subgraph cluster_Region_1848502772 {
label = "R(1:(1:3)(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_952497985 {
label = "IF [B:11:0x0004] THEN: R(1:3) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \>= 17) goto L3\l}"];
subgraph cluster_Region_1515843669 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0006|androidx.core.view.GravityCompat.Api17Impl.apply(r2, r3, r4, r5, r6, r7, r8, r9)\l}"];
}
subgraph cluster_Region_2012972849 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000a|android.view.Gravity.apply(r2, r3, r4, r5, r6, r7, r8)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000d|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static void androidx.core.view.GravityCompat.apply((r2v0 'gravity' int A[D('gravity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'w' int A[D('w' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'h' int A[D('h' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'container' android.graphics.Rect A[D('container' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'xAdj' int A[D('xAdj' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'yAdj' int A[D('yAdj' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'outRect' android.graphics.Rect A[D('outRect' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'layoutDirection' int A[D('layoutDirection' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000a \-\> B:14:0x000d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_15 -> Node_9;
Node_14 -> Node_9;
}

