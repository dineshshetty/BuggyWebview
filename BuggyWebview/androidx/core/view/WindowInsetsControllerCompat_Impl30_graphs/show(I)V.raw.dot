digraph "CFG forandroidx.core.view.WindowInsetsControllerCompat.Impl30.show(I)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: IGET  (r0 I:android.view.Window) = (r2 I:androidx.core.view.WindowInsetsControllerCompat$Impl30) androidx.core.view.WindowInsetsControllerCompat.Impl30.mWindow android.view.Window  (LINE:625)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001f \l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|0x0004: ARITH  (r0 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char] A[D('types' int)]) & (8 ??[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x001f \l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|0x0008: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x000a: CONST  (r1 I:??[int, float, short, byte, char]) = (32 ??[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:31:0x001f \l}"];
Node_30 [shape=record,label="{30\:\ 0x000e|0x000e: IGET  (r0 I:android.view.Window) = (r2 I:androidx.core.view.WindowInsetsControllerCompat$Impl30) androidx.core.view.WindowInsetsControllerCompat.Impl30.mWindow android.view.Window  (LINE:626)\l0x0010: INVOKE  (r0 I:android.content.Context) = (r0 I:android.view.Window) type: VIRTUAL call: android.view.Window.getContext():android.content.Context A[MD:():android.content.Context (c)] (LINE:627)\l0x0014: CONST_STR  (r1 I:java.lang.String) =  \"input_method\"  (LINE:628)\l0x0016: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) type: VIRTUAL call: android.content.Context.getSystemService(java.lang.String):java.lang.Object A[MD:(java.lang.String):java.lang.Object (c)]\l0x001a: CHECK_CAST (r0 I:android.view.inputmethod.InputMethodManager) = (android.view.inputmethod.InputMethodManager) (r0 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r0 I:android.view.inputmethod.InputMethodManager A[D('imm' android.view.inputmethod.InputMethodManager)]) type: VIRTUAL call: android.view.inputmethod.InputMethodManager.isActive():boolean A[MD:():boolean (c)] (LINE:637)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|0x001f: IGET  (r0 I:android.view.WindowInsetsController A[D('imm' android.view.inputmethod.InputMethodManager)]) = (r2 I:androidx.core.view.WindowInsetsControllerCompat$Impl30) androidx.core.view.WindowInsetsControllerCompat.Impl30.mInsetsController android.view.WindowInsetsController  (LINE:639)\l0x0021: INVOKE  (r0 I:android.view.WindowInsetsController), (r3 I:int A[D('types' int)]) type: INTERFACE call: android.view.WindowInsetsController.show(int):void A[MD:(int):void (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0024|RETURN\l|0x0024: RETURN    (LINE:640)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.core.view.WindowInsetsControllerCompat.Impl30.show((r2 'this' I:androidx.core.view.WindowInsetsControllerCompat$Impl30 A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('types' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x000c \-\> B:31:0x001f, CROSS_EDGE: B:27:0x0006 \-\> B:31:0x001f, CROSS_EDGE: B:25:0x0002 \-\> B:31:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x001f: r0 'imm' Landroid\/view\/inputmethod\/InputMethodManager;\l  \-1 \-0x0024: r3 'types' I\lMETHOD_OVERRIDE: [androidx.core.view.WindowInsetsControllerCompat.Impl.show(int):void]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_23;
}

