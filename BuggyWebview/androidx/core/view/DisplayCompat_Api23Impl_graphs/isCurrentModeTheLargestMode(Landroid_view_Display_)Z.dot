digraph "CFG forandroidx.core.view.DisplayCompat.Api23Impl.isCurrentModeTheLargestMode(Landroid\/view\/Display;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|android.view.Display$Mode r0 = r8.getMode()\landroid.view.Display$Mode[] r1 = r8.getSupportedModes()\lint r2 = r1.length\lr4 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|LOOP_START\lLOOP:0: B:3:0x000b\-\>B:9:0x0024\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:2:0x0000, B:9:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r2) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|r5 = r1[r4]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|if (r0.getPhysicalHeight() \< r5.getPhysicalHeight()) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019}"];
Node_7 [shape=record,label="{7\:\ 0x0021|if (r0.getPhysicalWidth() \>= r5.getPhysicalWidth()) goto L7\l}"];
Node_9 [shape=record,label="{9\:\ 0x0024|LOOP_END\lLOOP:0: B:3:0x000b\-\>B:9:0x0024\l|int r4 = r4 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0027|RETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{static boolean androidx.core.view.DisplayCompat.Api23Impl.isCurrentModeTheLargestMode((r8v0 'display' android.view.Display A[D('display' android.view.Display), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0024 \-\> B:3:0x000b, CROSS_EDGE: B:5:0x0017 \-\> B:10:0x0027, CROSS_EDGE: B:12:0x0029 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_14;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_13[style=dashed];
Node_9 -> Node_3;
Node_13 -> Node_10;
Node_10 -> Node_1;
Node_14 -> Node_10;
Node_15 -> Node_11;
Node_11 -> Node_1;
}

