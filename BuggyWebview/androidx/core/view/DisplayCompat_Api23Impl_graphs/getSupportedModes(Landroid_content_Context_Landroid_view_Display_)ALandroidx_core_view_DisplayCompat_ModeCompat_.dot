digraph "CFG forandroidx.core.view.DisplayCompat.Api23Impl.getSupportedModes(Landroid\/content\/Context;Landroid\/view\/Display;)[Landroidx\/core\/view\/DisplayCompat$ModeCompat;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|android.view.Display$Mode[] r0 = r9.getSupportedModes()\landroidx.core.view.DisplayCompat$ModeCompat[] r1 = new androidx.core.view.DisplayCompat.ModeCompat[r0.length]\landroid.view.Display$Mode r2 = r9.getMode()\landroid.graphics.Point r3 = androidx.core.view.DisplayCompat.getCurrentDisplaySizeFromWorkarounds(r8, r9)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|if (r3 == null) goto L18\l}"];
Node_4 [shape=record,label="{4\:\ 0x0011}"];
Node_5 [shape=record,label="{5\:\ 0x0015|if (physicalSizeEquals(r2, r3) == false) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|r4 = 0\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|LOOP_START\lLOOP:0: B:8:0x0019\-\>B:14:0x0034\lPHI: r4 \l  PHI: (r4v5 'i' int) = (r4v4 'i' int), (r4v6 'i' int) binds: [B:7:0x0018, B:14:0x0034] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|if (r4 \>= r0.length) goto L15\l}"];
Node_10 [shape=record,label="{10\:\ 0x001c}"];
Node_11 [shape=record,label="{11\:\ 0x0022|if (physicalSizeEquals(r0[r4], r2) == false) goto L13\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|androidx.core.view.DisplayCompat$ModeCompat r5 = new androidx.core.view.DisplayCompat.ModeCompat(r0[r4], r3)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0034|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0034|LOOP_END\lLOOP:0: B:8:0x0019\-\>B:14:0x0034\lPHI: r5 \l  PHI: (r5v7 androidx.core.view.DisplayCompat$ModeCompat) = (r5v6 androidx.core.view.DisplayCompat$ModeCompat), (r5v8 androidx.core.view.DisplayCompat$ModeCompat) binds: [B:21:0x0034, B:22:0x0034] A[DONT_GENERATE, DONT_INLINE]\l|r1[r4] = r5\lint r4 = r4 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|androidx.core.view.DisplayCompat$ModeCompat r5 = new androidx.core.view.DisplayCompat.ModeCompat(r0[r4], false)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|RETURN\l|return r1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0039|r4 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x003a|LOOP_START\lLOOP:1: B:16:0x003a\-\>B:18:0x003d\lPHI: r4 \l  PHI: (r4v1 'i' int) = (r4v0 'i' int), (r4v2 'i' int) binds: [B:15:0x0039, B:18:0x003d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|if (r4 \>= r0.length) goto L22\l}"];
Node_18 [shape=record,label="{18\:\ 0x003d|LOOP_END\lLOOP:1: B:16:0x003a\-\>B:18:0x003d\l|boolean r5 = physicalSizeEquals(r0[r4], r2)\lr1[r4] = new androidx.core.view.DisplayCompat.ModeCompat(r0[r4], r5)\lint r4 = r4 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x004f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static androidx.core.view.DisplayCompat$ModeCompat[] androidx.core.view.DisplayCompat.Api23Impl.getSupportedModes((r8v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'display' android.view.Display A[D('display' android.view.Display), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0034 \-\> B:8:0x0019, CROSS_EDGE: B:13:0x002c \-\> B:14:0x0034, BACK_EDGE: B:18:0x003d \-\> B:16:0x003a, CROSS_EDGE: B:17:0x003b \-\> B:19:0x004f, CROSS_EDGE: B:3:0x000f \-\> B:15:0x0039\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_15;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_15[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_22;
Node_22 -> Node_14;
Node_14 -> Node_8;
Node_13 -> Node_21;
Node_21 -> Node_14;
Node_20 -> Node_19;
Node_19 -> Node_1;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_16;
Node_23 -> Node_19;
}

