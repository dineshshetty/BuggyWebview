digraph "CFG forandroidx.core.view.WindowInsetsCompat.Impl.getInsetsIgnoringVisibility(I)Landroidx\/core\/graphics\/Insets;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: ARITH  (r0 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char] A[D('typeMask' int)]) & (8 ??[int, float, short, byte, char])  (LINE:827)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0007 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: SGET  (r0 I:androidx.core.graphics.Insets) =  androidx.core.graphics.Insets.NONE androidx.core.graphics.Insets  (LINE:830)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:androidx.core.graphics.Insets) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:828)\l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"Unable to query the maximum insets for IME\" \l0x000b: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|0x000e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{androidx.core.graphics.Insets androidx.core.view.WindowInsetsCompat.Impl.getInsetsIgnoringVisibility((r2 'this' I:androidx.core.view.WindowInsetsCompat$Impl A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('typeMask' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r3 'typeMask' I\lMETHOD_OVERRIDE: [androidx.core.view.WindowInsetsCompat.Impl.getInsetsIgnoringVisibility(int):androidx.core.graphics.Insets]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

