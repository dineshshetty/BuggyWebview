digraph "CFG forandroidx.core.view.WindowInsetsCompat.Impl.equals(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_712405656 {
label = "R(1:(2:(1:3)|(1:(2:(2:8|9)|(1:7)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1574375825 {
label = "R(2:(1:3)|(1:(2:(2:8|9)|(1:7))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_750129958 {
label = "IF [B:25:0x0001] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0001|if (r5 == r6) goto L3\l}"];
subgraph cluster_Region_363303366 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0003|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_215798616 {
label = "R(1:(2:(2:8|9)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1776423115 {
label = "R(2:(2:8|9)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1976635890 {
label = "IF [B:28:0x0007] THEN: R(2:8|9) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0007|if ((r6 instanceof androidx.core.view.WindowInsetsCompat.Impl) == true) goto L8\l}"];
subgraph cluster_Region_1167116003 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x000a|androidx.core.view.WindowInsetsCompat$Impl androidx.core.view.WindowInsetsCompat.Impl r1 = (androidx.core.view.WindowInsetsCompat.Impl) r6\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|RETURN\l|return isRound() == r1.isRound() && isConsumed() == r1.isConsumed() && androidx.core.util.ObjectsCompat.equals(getSystemWindowInsets(), r1.getSystemWindowInsets()) && androidx.core.util.ObjectsCompat.equals(getStableInsets(), r1.getStableInsets()) && androidx.core.util.ObjectsCompat.equals(getDisplayCutout(), r1.getDisplayCutout())\l}"];
}
}
subgraph cluster_Region_1548850991 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0009|RETURN\l|return false\l}"];
}
}
}
}
}
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0000}"];
Node_23 [shape=record,color=red,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0004}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0017}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x001f|REMOVE\lADDED_TO_REGION\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0021}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x002d|REMOVE\lADDED_TO_REGION\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x002f}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x003b|REMOVE\lADDED_TO_REGION\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x003d}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0049|REMOVE\lADDED_TO_REGION\l}"];
Node_43 [shape=record,color=red,label="{43\:\ ?|SYNTHETIC\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x004c|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public boolean androidx.core.view.WindowInsetsCompat.Impl.equals((r5v0 'this' androidx.core.view.WindowInsetsCompat$Impl A[IMMUTABLE_TYPE, THIS]), (r6v0 'o' java.lang.Object A[D('o' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0009 \-\> B:23:?, CROSS_EDGE: B:42:0x004d \-\> B:23:?, CROSS_EDGE: B:39:0x0049 \-\> B:42:0x004d, CROSS_EDGE: B:37:0x003b \-\> B:41:0x004c, CROSS_EDGE: B:35:0x002d \-\> B:41:0x004c, CROSS_EDGE: B:33:0x001f \-\> B:41:0x004c, CROSS_EDGE: B:31:0x0015 \-\> B:41:0x004c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.view.WindowInsetsCompat.Impl.equals(java.lang.Object):boolean]\l}"];
MethodNode -> Node_22;Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_26 -> Node_23;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_41;
Node_29 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_27 -> Node_28;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_41;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_41;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_43;
Node_43 -> Node_23;
Node_41 -> Node_23;
}

