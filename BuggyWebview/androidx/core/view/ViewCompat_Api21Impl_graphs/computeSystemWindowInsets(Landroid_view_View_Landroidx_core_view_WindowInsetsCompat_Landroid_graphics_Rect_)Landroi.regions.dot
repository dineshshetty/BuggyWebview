digraph "CFG forandroidx.core.view.ViewCompat.Api21Impl.computeSystemWindowInsets(Landroid\/view\/View;Landroidx\/core\/view\/WindowInsetsCompat;Landroid\/graphics\/Rect;)Landroidx\/core\/view\/WindowInsetsCompat;" {
subgraph cluster_Region_697927349 {
label = "R(2:1|(2:(1:4)|(2:6|7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|android.view.WindowInsets android.view.WindowInsets r0 = r3.toWindowInsets()\l}"];
subgraph cluster_Region_432163661 {
label = "R(2:(1:4)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_716550469 {
label = "IF [B:11:0x0004] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1038829727 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000f|RETURN\l|return androidx.core.view.WindowInsetsCompat.toWindowInsetsCompat(r2.computeSystemWindowInsets(r0, r4), r2)\l}"];
}
}
subgraph cluster_Region_600532173 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0010|r4.setEmpty()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0013|RETURN\l|return r3\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0007}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static androidx.core.view.WindowInsetsCompat androidx.core.view.ViewCompat.Api21Impl.computeSystemWindowInsets((r2v0 'v' android.view.View A[D('v' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'insets' androidx.core.view.WindowInsetsCompat A[D('insets' androidx.core.view.WindowInsetsCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'outLocalInsets' android.graphics.Rect A[D('outLocalInsets' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0013 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
}

