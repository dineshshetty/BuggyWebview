digraph "CFG forandroidx.core.view.inputmethod.EditorInfoCompat.trimLongSurroundingText(Landroid\/view\/inputmethod\/EditorInfo;Ljava\/lang\/CharSequence;II)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|int r3 = r19 \- r18\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|if (r3 \<= 1024) goto L17\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|r5 = 0\l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|PHI: r5 \l  PHI: (r5v2 'newSelLength' int) = (r5v1 'newSelLength' int), (r5v3 'newSelLength' int) binds: [B:23:0x000f, B:22:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|int r6 = r17.length() \- r19\lint r7 = 2048 \- r5\lint r8 = java.lang.Math.min(r18, (int) (((double) r7) * 0.8d))\lint r9 = java.lang.Math.min(r6, r7 \- r8)\lint r10 = java.lang.Math.min(r18, r7 \- r9)\lint r11 = r18 \- r10\l}"];
Node_25 [shape=record,label="{25\:\ 0x0038|if (isCutOnSurrogate(r17, r18 \- r10, 0) == false) goto L7\l}"];
Node_26 [shape=record,label="{26\:\ 0x003a|int r11 = r11 + 1\lint r10 = r10 + (\-1)\l}"];
Node_27 [shape=record,label="{27\:\ 0x003e|PHI: r10 r11 \l  PHI: (r10v4 'newBeforeCursorLength' int) = (r10v3 'newBeforeCursorLength' int), (r10v5 'newBeforeCursorLength' int) binds: [B:25:0x0038, B:26:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v1 'newBeforeCursorHead' int) = (r11v0 'newBeforeCursorHead' int), (r11v3 'newBeforeCursorHead' int) binds: [B:25:0x0038, B:26:0x003a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0046|if (isCutOnSurrogate(r17, (r19 + r9) \- 1, 1) == false) goto L10\l}"];
Node_29 [shape=record,label="{29\:\ 0x0048|int r9 = r9 + (\-1)\l}"];
Node_30 [shape=record,label="{30\:\ 0x004a|PHI: r9 \l  PHI: (r9v2 'newAfterCursorLength' int) = (r9v1 'newAfterCursorLength' int), (r9v3 'newAfterCursorLength' int) binds: [B:28:0x0046, B:29:0x0048] A[DONT_GENERATE, DONT_INLINE]\l|int r12 = (r10 + r5) + r9\l}"];
Node_31 [shape=record,label="{31\:\ 0x004d|if (r5 == r3) goto L16\l}"];
Node_32 [shape=record,label="{32\:\ 0x004f|java.lang.CharSequence r14 = r17.subSequence(r11, r11 + r10)\ljava.lang.CharSequence r15 = r17.subSequence(r19, r19 + r9)\ljava.lang.CharSequence r4 = android.text.TextUtils.concat(new java.lang.CharSequence[]\{r14, r15\})\l}"];
Node_34 [shape=record,label="{34\:\ 0x006e|PHI: r4 \l  PHI: (r4v3 'newInitialSurroundingText' java.lang.CharSequence) = (r4v2 'newInitialSurroundingText' java.lang.CharSequence), (r4v5 'newInitialSurroundingText' java.lang.CharSequence) binds: [B:33:0x0068, B:32:0x004f] A[DONT_GENERATE, DONT_INLINE]\l|int r13 = 0 + r10\lsetSurroundingText(r16, r4, r13, r13 + r5)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0078|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0068|java.lang.CharSequence r4 = r17.subSequence(r11, r11 + r12)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|r5 = r3\l}"];
MethodNode[shape=record,label="{private static void androidx.core.view.inputmethod.EditorInfoCompat.trimLongSurroundingText((r16v0 'editorInfo' android.view.inputmethod.EditorInfo A[D('editorInfo' android.view.inputmethod.EditorInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'subText' java.lang.CharSequence A[D('subText' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'selStart' int A[D('selStart' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'selEnd' int A[D('selEnd' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0068 \-\> B:34:0x006e, CROSS_EDGE: B:28:0x0046 \-\> B:30:0x004a, CROSS_EDGE: B:25:0x0038 \-\> B:27:0x003e, CROSS_EDGE: B:23:0x000f \-\> B:24:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_33 -> Node_34;
Node_23 -> Node_24;
}

