digraph "CFG forandroidx.core.view.inputmethod.InputContentInfoCompat.\<init\>(Landroid\/net\/Uri;Landroid\/content\/ClipDescription;Landroid\/net\/Uri;)V" {
subgraph cluster_Region_700308465 {
label = "R(1:(1:3)(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_944865742 {
label = "IF [B:11:0x0007] THEN: R(1:3) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0007|if (android.os.Build.VERSION.SDK_INT \>= 25) goto L3\l}"];
subgraph cluster_Region_1727917390 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0009|r2.mImpl = new androidx.core.view.inputmethod.InputContentInfoCompat.InputContentInfoCompatApi25Impl(r3, r4, r5)\l}"];
}
subgraph cluster_Region_1782651186 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0011|r2.mImpl = new androidx.core.view.inputmethod.InputContentInfoCompat.InputContentInfoCompatBaseImpl(r3, r4, r5)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0018|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void androidx.core.view.inputmethod.InputContentInfoCompat.\<init\>((r2v0 'this' androidx.core.view.inputmethod.InputContentInfoCompat A[IMMUTABLE_TYPE, THIS]), (r3v0 'contentUri' android.net.Uri A[D('contentUri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'description' android.content.ClipDescription A[D('description' android.content.ClipDescription), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'linkUri' android.net.Uri A[D('linkUri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:14:0x0018\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_15 -> Node_9;
Node_14 -> Node_9;
}

