digraph "CFG forandroidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.onGlobalLayout()V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:4551)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (28 ??[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:19:0x0030 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IGET  (r0 I:java.util.WeakHashMap\<android.view.View, java.lang.Boolean\>) = (r4 I:androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager) androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.mPanesToVisible java.util.WeakHashMap  (LINE:4552)\l0x0008: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.WeakHashMap) type: VIRTUAL call: java.util.WeakHashMap.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)]\l0x000c: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|LOOP_START\lLOOP:0: B:16:0x0010\-\>B:18:0x0016\l|0x0010: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0030 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|LOOP_END\lLOOP:0: B:16:0x0010\-\>B:18:0x0016\l|0x0016: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001a: CHECK_CAST (r1 I:java.util.Map$Entry) = (java.util.Map$Entry) (r1 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry\<android.view.View, java.lang.Boolean\>)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:4553)\l0x0020: CHECK_CAST (r2 I:android.view.View) = (android.view.View) (r2 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry\<android.view.View, java.lang.Boolean\>)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)]\l0x0026: CHECK_CAST (r3 I:java.lang.Boolean) = (java.lang.Boolean) (r3 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l0x002c: INVOKE  (r4 I:androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager), (r2 I:android.view.View), (r3 I:boolean) type: DIRECT call: androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.checkPaneVisibility(android.view.View, boolean):void A[MD:(android.view.View, boolean):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN   A[SYNTHETIC] (LINE:4556)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: RETURN    (LINE:4556)\l}"];
MethodNode[shape=record,label="{public void androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.onGlobalLayout((r4 'this' I:androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:18:0x0016 \-\> B:16:0x0010, CROSS_EDGE: B:14:0x0004 \-\> B:19:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x002f: r1 'entry' Ljava\/util\/Map$Entry;, signature: Ljava\/util\/Map$Entry\<Landroid\/view\/View;Ljava\/lang\/Boolean;\>;\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewTreeObserver.OnGlobalLayoutListener.onGlobalLayout():void\}]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_12;
}

