digraph "CFG forandroidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.addAccessibilityPane(Landroid\/view\/View;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|java.util.WeakHashMap\<android.view.View, java.lang.Boolean\> r0 = r2.mPanesToVisible\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|if (r3.isShown() == false) goto L12\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008}"];
Node_18 [shape=record,label="{18\:\ 0x000c|if (r3.getWindowVisibility() != 0) goto L12\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|r1 = true\l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v5 boolean) binds: [B:20:0x0010, B:19:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|r0.put(r3, java.lang.Boolean.valueOf(r1))\lr3.addOnAttachStateChangeListener(r2)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|if (androidx.core.view.ViewCompat.Api19Impl.isAttachedToWindow(r3) == false) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|registerForLayoutCallback(r3)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|RETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|r1 = false\l}"];
MethodNode[shape=record,label="{void androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.addAccessibilityPane((r2v0 'this' androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager A[IMMUTABLE_TYPE, THIS]), (r3v0 'pane' android.view.View A[D('pane' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x001f \-\> B:24:0x0024, CROSS_EDGE: B:20:0x0010 \-\> B:21:0x0011, CROSS_EDGE: B:16:0x0006 \-\> B:20:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_14;
Node_25 -> Node_14;
Node_20 -> Node_21;
}

