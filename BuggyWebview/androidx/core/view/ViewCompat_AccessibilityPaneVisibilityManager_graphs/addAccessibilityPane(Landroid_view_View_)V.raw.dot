digraph "CFG forandroidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.addAccessibilityPane(Landroid\/view\/View;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:java.util.WeakHashMap\<android.view.View, java.lang.Boolean\>) = (r2 I:androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager) androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.mPanesToVisible java.util.WeakHashMap  (LINE:4572)\l0x0002: INVOKE  (r1 I:boolean) = (r3 I:android.view.View A[D('pane' android.view.View)]) type: VIRTUAL call: android.view.View.isShown():boolean A[MD:():boolean (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0010 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: INVOKE  (r1 I:int) = (r3 I:android.view.View A[D('pane' android.view.View)]) type: VIRTUAL call: android.view.View.getWindowVisibility():int A[MD:():int (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0010 \l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|0x0011: INVOKE  (r1 I:java.lang.Boolean) = (r1 I:boolean) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (c)]\l0x0015: INVOKE  (r0 I:java.util.WeakHashMap), (r3 I:java.lang.Object A[D('pane' android.view.View)]), (r1 I:java.lang.Object) type: VIRTUAL call: java.util.WeakHashMap.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l0x0018: INVOKE  (r3 I:android.view.View A[D('pane' android.view.View)]), (r2 I:android.view.View$OnAttachStateChangeListener) type: VIRTUAL call: android.view.View.addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener):void A[MD:(android.view.View$OnAttachStateChangeListener):void (c)] (LINE:4573)\l0x001b: INVOKE  (r0 I:boolean) = (r3 I:android.view.View A[D('pane' android.view.View)]) type: STATIC call: androidx.core.view.ViewCompat.Api19Impl.isAttachedToWindow(android.view.View):boolean A[MD:(android.view.View):boolean (m)] (LINE:4574)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|0x001f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:? \l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|0x0021: INVOKE  \l  (r2 I:androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager)\l  (r3 I:android.view.View A[D('pane' android.view.View)])\l type: DIRECT call: androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.registerForLayoutCallback(android.view.View):void A[MD:(android.view.View):void (m)] (LINE:4575)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: RETURN    (LINE:4577)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN   A[SYNTHETIC] (LINE:4577)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{void androidx.core.view.ViewCompat.AccessibilityPaneVisibilityManager.addAccessibilityPane((r2 'this' I:androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('pane' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x001f \-\> B:24:0x0024, CROSS_EDGE: B:20:0x0010 \-\> B:21:0x0011, CROSS_EDGE: B:16:0x0006 \-\> B:20:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0024: r3 'pane' Landroid\/view\/View;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_14;
Node_25 -> Node_14;
Node_20 -> Node_21;
}

