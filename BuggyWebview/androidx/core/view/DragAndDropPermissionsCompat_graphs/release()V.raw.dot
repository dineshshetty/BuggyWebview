digraph "CFG forandroidx.core.view.DragAndDropPermissionsCompat.release()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:68)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (24 ??[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IGET  (r0 I:android.view.DragAndDropPermissions) = (r2 I:androidx.core.view.DragAndDropPermissionsCompat) androidx.core.view.DragAndDropPermissionsCompat.mDragAndDropPermissions android.view.DragAndDropPermissions  (LINE:69)\l0x0008: INVOKE  (r0 I:android.view.DragAndDropPermissions) type: STATIC call: androidx.core.view.DragAndDropPermissionsCompat.Api24Impl.release(android.view.DragAndDropPermissions):void A[MD:(android.view.DragAndDropPermissions):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\lORIG_RETURN\l|0x000b: RETURN    (LINE:71)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000b: RETURN   A[SYNTHETIC] (LINE:71)\l}"];
MethodNode[shape=record,label="{public void androidx.core.view.DragAndDropPermissionsCompat.release((r2 'this' I:androidx.core.view.DragAndDropPermissionsCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:12:0x000b\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

