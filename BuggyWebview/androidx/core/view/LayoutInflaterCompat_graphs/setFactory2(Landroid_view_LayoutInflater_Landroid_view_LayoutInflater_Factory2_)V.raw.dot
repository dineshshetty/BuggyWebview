digraph "CFG forandroidx.core.view.LayoutInflaterCompat.setFactory2(Landroid\/view\/LayoutInflater;Landroid\/view\/LayoutInflater$Factory2;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  \l  (r2 I:android.view.LayoutInflater A[D('inflater' android.view.LayoutInflater)])\l  (r3 I:android.view.LayoutInflater$Factory2 A[D('factory' android.view.LayoutInflater$Factory2)])\l type: VIRTUAL call: android.view.LayoutInflater.setFactory2(android.view.LayoutInflater$Factory2):void A[MD:(android.view.LayoutInflater$Factory2):void (c)] (LINE:141)\l0x0003: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:143)\l0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:20:? \l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|0x0009: INVOKE  (r0 I:android.view.LayoutInflater$Factory) = (r2 I:android.view.LayoutInflater A[D('inflater' android.view.LayoutInflater)]) type: VIRTUAL call: android.view.LayoutInflater.getFactory():android.view.LayoutInflater$Factory A[MD:():android.view.LayoutInflater$Factory (c)] (LINE:144)\l0x000d: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('f' android.view.LayoutInflater$Factory)]) android.view.LayoutInflater$Factory2  (LINE:145)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0018 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|0x0011: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('f' android.view.LayoutInflater$Factory)])  (LINE:148)\l0x0012: CHECK_CAST (r1 I:android.view.LayoutInflater$Factory2) = (android.view.LayoutInflater$Factory2) (r1 I:??[OBJECT, ARRAY]) \l0x0014: INVOKE  \l  (r2 I:android.view.LayoutInflater A[D('inflater' android.view.LayoutInflater)])\l  (r1 I:android.view.LayoutInflater$Factory2)\l type: STATIC call: androidx.core.view.LayoutInflaterCompat.forceSetFactory2(android.view.LayoutInflater, android.view.LayoutInflater$Factory2):void A[MD:(android.view.LayoutInflater, android.view.LayoutInflater$Factory2):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN   A[SYNTHETIC] (LINE:154)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|0x0018: INVOKE  \l  (r2 I:android.view.LayoutInflater A[D('inflater' android.view.LayoutInflater)])\l  (r3 I:android.view.LayoutInflater$Factory2 A[D('factory' android.view.LayoutInflater$Factory2)])\l type: STATIC call: androidx.core.view.LayoutInflaterCompat.forceSetFactory2(android.view.LayoutInflater, android.view.LayoutInflater$Factory2):void A[MD:(android.view.LayoutInflater, android.view.LayoutInflater$Factory2):void (m)] (LINE:151)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001b|RETURN\lORIG_RETURN\l|0x001b: RETURN    (LINE:154)\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN   A[SYNTHETIC] (LINE:154)\l}"];
MethodNode[shape=record,label="{public static void androidx.core.view.LayoutInflaterCompat.setFactory2((r2 I:android.view.LayoutInflater A[D('inflater' android.view.LayoutInflater), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.view.LayoutInflater$Factory2 A[D('factory' android.view.LayoutInflater$Factory2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0018 \-\> B:19:0x001b, CROSS_EDGE: B:14:0x0007 \-\> B:19:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x001b: r0 'f' Landroid\/view\/LayoutInflater$Factory;\l  \-1 \-0x001b: r2 'inflater' Landroid\/view\/LayoutInflater;\l  \-1 \-0x001b: r3 'factory' Landroid\/view\/LayoutInflater$Factory2;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_21;
Node_21 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_12;
}

