digraph "CFG forandroidx.core.view.ContentInfoCompat.buildClipData(Landroid\/content\/ClipDescription;Ljava\/util\/List;)Landroid\/content\/ClipData;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:android.content.ClipData) =  android.content.ClipData  (LINE:301)\l0x0002: NEW_INSTANCE  (r1 I:android.content.ClipDescription) =  android.content.ClipDescription \l0x0004: INVOKE  \l  (r1 I:android.content.ClipDescription)\l  (r3 I:android.content.ClipDescription A[D('description' android.content.ClipDescription)])\l type: DIRECT call: android.content.ClipDescription.\<init\>(android.content.ClipDescription):void A[MD:(android.content.ClipDescription):void (c)]\l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.List A[D('items' java.util.List\<android.content.ClipData$Item\>)]), (r2 I:int) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x000c: CHECK_CAST (r2 I:android.content.ClipData$Item) = (android.content.ClipData$Item) (r2 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:android.content.ClipData), (r1 I:android.content.ClipDescription), (r2 I:android.content.ClipData$Item) type: DIRECT call: android.content.ClipData.\<init\>(android.content.ClipDescription, android.content.ClipData$Item):void A[MD:(android.content.ClipDescription, android.content.ClipData$Item):void (c)]\l0x0011: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:302)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0012|LOOP_START\lLOOP:0: B:11:0x0012\-\>B:13:0x0018\l|0x0012: INVOKE  (r2 I:int) = (r4 I:java.util.List A[D('items' java.util.List\<android.content.ClipData$Item\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|0x0016: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:15:0x0024 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0018|LOOP_END\lLOOP:0: B:11:0x0012\-\>B:13:0x0018\l|0x0018: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.List A[D('items' java.util.List\<android.content.ClipData$Item\>)]), (r1 I:int A[D('i' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:303)\l0x001c: CHECK_CAST (r2 I:android.content.ClipData$Item) = (android.content.ClipData$Item) (r2 I:??[OBJECT, ARRAY]) \l0x001e: INVOKE  (r0 I:android.content.ClipData A[D('clip' android.content.ClipData)]), (r2 I:android.content.ClipData$Item) type: VIRTUAL call: android.content.ClipData.addItem(android.content.ClipData$Item):void A[MD:(android.content.ClipData$Item):void (c)]\l0x0021: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:302)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0024|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|RETURN\l|0x0024: RETURN  (r0 I:android.content.ClipData A[D('clip' android.content.ClipData)])  (LINE:305)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static android.content.ClipData androidx.core.view.ContentInfoCompat.buildClipData((r3 I:android.content.ClipDescription A[D('description' android.content.ClipDescription), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.List\<android.content.ClipData$Item\> A[D('items' java.util.List\<android.content.ClipData$Item\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0018 \-\> B:11:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0024: r1 'i' I\l  0x0011\-0x0024: r0 'clip' Landroid\/content\/ClipData;\l  \-1 \-0x0024: r3 'description' Landroid\/content\/ClipDescription;\l  0x0000\-0x0024: r4 'items' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroid\/content\/ClipData$Item;\>;\lSIGNATURE: (Landroid\/content\/ClipDescription;Ljava\/util\/List\<Landroid\/content\/ClipData$Item;\>;)Landroid\/content\/ClipData;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

