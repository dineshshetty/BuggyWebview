digraph "CFG forandroidx.core.view.ViewKt.doOnAttach(Landroid\/view\/View;Lkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_349502353 {
label = "R(2:1|(1:3)(1:6))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"action\")\l}"];
subgraph cluster_IfRegion_1481554203 {
label = "IF [B:3:0x000f] THEN: R(1:3) ELSE: R(1:6)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000f|if (androidx.core.view.ViewCompat.isAttachedToWindow(r2) != false) goto L3\l}"];
subgraph cluster_Region_261183804 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0011|r3.invoke(r2)\l}"];
}
subgraph cluster_Region_1288165030 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0015|r2.addOnAttachStateChangeListener(new androidx.core.view.ViewKt$doOnAttach$1())\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001f|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static final void androidx.core.view.ViewKt.doOnAttach((r2v0 '$this$doOnAttach' android.view.View A[D('$this$doOnAttach' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'action' kotlin.jvm.functions.Function1\<? super android.view.View, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0015 \-\> B:6:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/view\/View;Lkotlin\/jvm\/functions\/Function1\<\-Landroid\/view\/View;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_0 -> Node_2;
Node_7 -> Node_1;
Node_6 -> Node_1;
}

