digraph "CFG forandroidx.core.view.ViewKt.drawToBitmap(Landroid\/view\/View;Landroid\/graphics\/Bitmap$Config;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$drawToBitmap' android.view.View)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"config\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('config' android.graphics.Bitmap$Config)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r7 I:android.view.View A[D('$this$drawToBitmap' android.view.View)]) type: STATIC call: androidx.core.view.ViewCompat.isLaidOut(android.view.View):boolean A[MD:(android.view.View):boolean (m)] (LINE:227)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x003e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r0 I:int) = (r7 I:android.view.View A[D('$this$drawToBitmap' android.view.View)]) type: VIRTUAL call: android.view.View.getWidth():int A[MD:():int (c)] (LINE:230)\l0x0014: INVOKE  (r1 I:int) = (r7 I:android.view.View A[D('$this$drawToBitmap' android.view.View)]) type: VIRTUAL call: android.view.View.getHeight():int A[MD:():int (c)]\l0x0018: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:int), (r1 I:int), (r8 I:android.graphics.Bitmap$Config A[D('config' android.graphics.Bitmap$Config)]) type: STATIC call: android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap (c)]\l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"createBitmap(width, height, config)\" \l0x001e: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0021: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: NEW_INSTANCE  (r2 I:android.graphics.Canvas) =  android.graphics.Canvas  (LINE:414)\l0x0024: INVOKE  (r2 I:android.graphics.Canvas), (r0 I:android.graphics.Bitmap A[D('$this$applyCanvas$iv' android.graphics.Bitmap)]) type: DIRECT call: android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void A[MD:(android.graphics.Bitmap):void (c)]\l0x0027: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('c$iv' android.graphics.Canvas)])  (LINE:415)\l0x0028: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0029: INVOKE  (r5 I:int) = (r7 I:android.view.View A[D('$this$drawToBitmap' android.view.View)]) type: VIRTUAL call: android.view.View.getScrollX():int A[MD:():int (c)] (LINE:231)\l0x002d: CAST (r5 I:float) = (float) (r5 I:int) \l0x002e: NEG  (r5 I:float) = (r5 I:float) \l0x002f: INVOKE  (r6 I:int) = (r7 I:android.view.View A[D('$this$drawToBitmap' android.view.View)]) type: VIRTUAL call: android.view.View.getScrollY():int A[MD:():int (c)]\l0x0033: CAST (r6 I:float) = (float) (r6 I:int) \l0x0034: NEG  (r6 I:float) = (r6 I:float) \l0x0035: INVOKE  \l  (r3 I:android.graphics.Canvas A[D('$this$drawToBitmap_u24lambda_u2d1' android.graphics.Canvas)])\l  (r5 I:float)\l  (r6 I:float)\l type: VIRTUAL call: android.graphics.Canvas.translate(float, float):void A[MD:(float, float):void (c)]\l0x0038: INVOKE  \l  (r7 I:android.view.View A[D('$this$drawToBitmap' android.view.View)])\l  (r3 I:android.graphics.Canvas A[D('$this$drawToBitmap_u24lambda_u2d1' android.graphics.Canvas)])\l type: VIRTUAL call: android.view.View.draw(android.graphics.Canvas):void A[MD:(android.graphics.Canvas):void (c)] (LINE:232)\l}"];
Node_5 [shape=record,label="{5\:\ 0x003d|RETURN\l|0x003d: RETURN  (r0 I:android.graphics.Bitmap A[D('$this$applyCanvas$iv' android.graphics.Bitmap)])  (LINE:230)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x003e|0x003e: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:228)\l0x0040: CONST_STR  (r1 I:java.lang.String) =  \"View needs to be laid out before calling drawToBitmap()\" \l0x0042: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0045|0x0045: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final android.graphics.Bitmap androidx.core.view.ViewKt.drawToBitmap((r7 I:android.view.View A[D('$this$drawToBitmap' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.graphics.Bitmap$Config A[D('config' android.graphics.Bitmap$Config), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0045 \-\> B:1:?\lDebug Info:\l  0x0028\-0x003c: r3 '$this$drawToBitmap_u24lambda_u2d1' Landroid\/graphics\/Canvas;\l  0x0029\-0x003c: r4 '$i$a$\-applyCanvas\-ViewKt$drawToBitmap$1' I\l  0x0021\-0x003d: r0 '$this$applyCanvas$iv' Landroid\/graphics\/Bitmap;\l  0x0022\-0x003d: r1 '$i$f$applyCanvas' I\l  0x0027\-0x003d: r2 'c$iv' Landroid\/graphics\/Canvas;\l  \-1 \-0x0045: r7 '$this$drawToBitmap' Landroid\/view\/View;\l  \-1 \-0x0045: r8 'config' Landroid\/graphics\/Bitmap$Config;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

