digraph "CFG forandroidx.core.view.ViewKt.getAncestors(Landroid\/view\/View;)Lkotlin\/sequences\/Sequence;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$ancestors' android.view.View)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:android.view.ViewParent) = (r2 I:android.view.View A[D('$this$ancestors' android.view.View)]) type: VIRTUAL call: android.view.View.getParent():android.view.ViewParent A[MD:():android.view.ViewParent (c)] (LINE:395)\l0x0009: SGET  (r1 I:androidx.core.view.ViewKt$ancestors$1) =  androidx.core.view.ViewKt$ancestors$1.INSTANCE androidx.core.view.ViewKt$ancestors$1 \l0x000b: CHECK_CAST (r1 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r1 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:java.lang.Object), (r1 I:kotlin.jvm.functions.Function1) type: STATIC call: kotlin.sequences.SequencesKt.generateSequence(java.lang.Object, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:\<T\>:(T, kotlin.jvm.functions.Function1\<? super T, ? extends T\>):kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:kotlin.sequences.Sequence\<android.view.ViewParent\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<android.view.ViewParent\> androidx.core.view.ViewKt.getAncestors((r2 I:android.view.View A[D('$this$ancestors' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0011: r2 '$this$ancestors' Landroid\/view\/View;\lSIGNATURE: (Landroid\/view\/View;)Lkotlin\/sequences\/Sequence\<Landroid\/view\/ViewParent;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

