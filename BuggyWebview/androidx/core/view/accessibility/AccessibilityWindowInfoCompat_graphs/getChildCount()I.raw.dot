digraph "CFG forandroidx.core.view.accessibility.AccessibilityWindowInfoCompat.getChildCount()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:223)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:java.lang.Object) = (r2 I:androidx.core.view.accessibility.AccessibilityWindowInfoCompat) androidx.core.view.accessibility.AccessibilityWindowInfoCompat.mInfo java.lang.Object  (LINE:224)\l0x0008: CHECK_CAST (r0 I:android.view.accessibility.AccessibilityWindowInfo) = (android.view.accessibility.AccessibilityWindowInfo) (r0 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r0 I:int) = (r0 I:android.view.accessibility.AccessibilityWindowInfo) type: STATIC call: androidx.core.view.accessibility.AccessibilityWindowInfoCompat.Api21Impl.getChildCount(android.view.accessibility.AccessibilityWindowInfo):int A[MD:(android.view.accessibility.AccessibilityWindowInfo):int (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|RETURN\l|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:226)\l0x0010: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int androidx.core.view.accessibility.AccessibilityWindowInfoCompat.getChildCount((r2 'this' I:androidx.core.view.accessibility.AccessibilityWindowInfoCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0010 \-\> B:1:?\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

