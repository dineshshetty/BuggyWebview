digraph "CFG forandroidx.core.view.accessibility.AccessibilityWindowInfoCompat.toString()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\landroid.graphics.Rect r1 = new android.graphics.Rect()\lgetBoundsInScreen(r1)\lr0.append(\"AccessibilityWindowInfo[\")\lr0.append(\"id=\")\lr0.append(getId())\lr0.append(\", type=\")\lr0.append(typeToString(getType()))\lr0.append(\", layer=\")\lr0.append(getLayer())\lr0.append(\", bounds=\")\lr0.append(r1)\lr0.append(\", focused=\")\lr0.append(isFocused())\lr0.append(\", active=\")\lr0.append(isActive())\lr0.append(\", hasParent=\")\lr3 = true\l}"];
Node_3 [shape=record,label="{3\:\ 0x0065|if (getParent() == null) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x0067|r2 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x006a|PHI: r2 \l  PHI: (r2v16 boolean) = (r2v15 boolean), (r2v21 boolean) binds: [B:5:0x0069, B:4:0x0067] A[DONT_GENERATE, DONT_INLINE]\l|r0.append(r2)\lr0.append(\", hasChildren=\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x0076|if (getChildCount() \<= 0) goto L6\l}"];
Node_9 [shape=record,label="{9\:\ 0x0079|r3 = false\l}"];
Node_10 [shape=record,label="{10\:\ 0x007a|PHI: r3 \l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:7:0x0076, B:9:0x0079] A[DONT_GENERATE, DONT_INLINE]\l|r0.append(r3)\lr0.append(']')\l}"];
Node_11 [shape=record,label="{11\:\ 0x0086|RETURN\l|return r0.toString()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0069|r2 = false\l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.core.view.accessibility.AccessibilityWindowInfoCompat.toString((r5v0 'this' androidx.core.view.accessibility.AccessibilityWindowInfoCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0076 \-\> B:10:0x007a, CROSS_EDGE: B:5:0x0069 \-\> B:6:0x006a\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_5 -> Node_6;
}

