digraph "CFG forandroidx.core.view.accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi16.findAccessibilityNodeInfosByText(Ljava\/lang\/String;I)Ljava\/util\/List;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:androidx.core.view.accessibility.AccessibilityNodeProviderCompat) = (r6 I:androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi16) androidx.core.view.accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi16.mCompat androidx.core.view.accessibility.AccessibilityNodeProviderCompat  (LINE:57)\l0x0002: INVOKE  (r0 I:java.util.List) = \l  (r0 I:androidx.core.view.accessibility.AccessibilityNodeProviderCompat)\l  (r7 I:java.lang.String A[D('text' java.lang.String)])\l  (r8 I:int A[D('virtualViewId' int)])\l type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeProviderCompat.findAccessibilityNodeInfosByText(java.lang.String, int):java.util.List A[MD:(java.lang.String, int):java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat\> (m)] (LINE:58)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('compatInfos' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat\>)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000a  (LINE:59)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|RETURN\l|0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:60)\l0x0009: RETURN  (r1 I:java.util.List\<android.view.accessibility.AccessibilityNodeInfo\>) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:62)\l0x000c: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x000f: INVOKE  (r2 I:int) = (r0 I:java.util.List A[D('compatInfos' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:63)\l0x0013: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:64)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|LOOP_START\lLOOP:0: B:18:0x0014\-\>B:19:0x0016\l|0x0014: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('infoCount' int)])  \-\> B:21:0x0026 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|LOOP_END\lLOOP:0: B:18:0x0014\-\>B:19:0x0016\l|0x0016: INVOKE  (r4 I:java.lang.Object) = \l  (r0 I:java.util.List A[D('compatInfos' java.util.List\<androidx.core.view.accessibility.AccessibilityNodeInfoCompat\>)])\l  (r3 I:int A[D('i' int)])\l type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:65)\l0x001a: CHECK_CAST (r4 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat) = (androidx.core.view.accessibility.AccessibilityNodeInfoCompat) (r4 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r5 I:android.view.accessibility.AccessibilityNodeInfo) = \l  (r4 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[D('infoCompat' androidx.core.view.accessibility.AccessibilityNodeInfoCompat)])\l type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.unwrap():android.view.accessibility.AccessibilityNodeInfo A[MD:():android.view.accessibility.AccessibilityNodeInfo (m)] (LINE:66)\l0x0020: INVOKE  \l  (r1 I:java.util.List A[D('infoList' java.util.List\<android.view.accessibility.AccessibilityNodeInfo\>)])\l  (r5 I:java.lang.Object)\l type: INTERFACE call: java.util.List.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0023: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:64)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|RETURN\l|0x0026: RETURN  \l  (r1 I:java.util.List\<android.view.accessibility.AccessibilityNodeInfo\> A[D('infoList' java.util.List\<android.view.accessibility.AccessibilityNodeInfo\>)])\l  (LINE:68)\l}"];
MethodNode[shape=record,label="{public java.util.List\<android.view.accessibility.AccessibilityNodeInfo\> androidx.core.view.accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeProviderApi16.findAccessibilityNodeInfosByText((r6 'this' I:androidx.core.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderApi16 A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.String A[D('text' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('virtualViewId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:19:0x0016 \-\> B:18:0x0014, CROSS_EDGE: B:20:0x0026 \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x0023: r4 'infoCompat' Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat;\l  0x0014\-0x0026: r3 'i' I\l  0x0006\-0x0026: r0 'compatInfos' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroidx\/core\/view\/accessibility\/AccessibilityNodeInfoCompat;\>;\l  0x000f\-0x0026: r1 'infoList' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroid\/view\/accessibility\/AccessibilityNodeInfo;\>;\l  0x0013\-0x0026: r2 'infoCount' I\l  \-1 \-0x0026: r7 'text' Ljava\/lang\/String;\l  \-1 \-0x0026: r8 'virtualViewId' I\lSIGNATURE: (Ljava\/lang\/String;I)Ljava\/util\/List\<Landroid\/view\/accessibility\/AccessibilityNodeInfo;\>;\lMETHOD_OVERRIDE: [ClspMth\{android.view.accessibility.AccessibilityNodeProvider.findAccessibilityNodeInfosByText(java.lang.String, int):java.util.List\<android.view.accessibility.AccessibilityNodeInfo\>\}]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_18;
Node_21 -> Node_20;
Node_20 -> Node_12;
}

