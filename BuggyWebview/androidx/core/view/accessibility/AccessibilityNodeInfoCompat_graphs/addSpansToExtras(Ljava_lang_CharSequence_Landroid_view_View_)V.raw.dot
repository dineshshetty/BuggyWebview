digraph "CFG forandroidx.core.view.accessibility.AccessibilityNodeInfoCompat.addSpansToExtras(Ljava\/lang\/CharSequence;Landroid\/view\/View;)V" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:2706)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (19 ??[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:38:0x004c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|0x0006: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0008: CONST  (r1 I:??[int, float, short, byte, char]) = (26 ??[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x000a|0x000a: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:41:? \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: INVOKE  (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat) type: DIRECT call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.clearExtrasSpans():void A[MD:():void (m)] (LINE:2707)\l0x000f: INVOKE  \l  (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat)\l  (r8 I:android.view.View A[D('view' android.view.View)])\l type: DIRECT call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.removeCollectedSpans(android.view.View):void A[MD:(android.view.View):void (m)] (LINE:2708)\l0x0012: INVOKE  (r0 I:android.text.style.ClickableSpan[]) = (r7 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)]) type: STATIC call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.getClickableSpans(java.lang.CharSequence):android.text.style.ClickableSpan[] A[MD:(java.lang.CharSequence):android.text.style.ClickableSpan[] (m)] (LINE:2709)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('spans' android.text.style.ClickableSpan[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:?  (LINE:2710)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|0x0018: ARRAY_LENGTH  (r1 I:int) = (r0 I:??[] A[D('spans' android.text.style.ClickableSpan[])]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|0x0019: IF  (r1 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:43:? \l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|0x001b: INVOKE  (r1 I:android.os.Bundle) = (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat) type: VIRTUAL call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.getExtras():android.os.Bundle A[MD:():android.os.Bundle (m)] (LINE:2711)\l0x001f: SGET  (r2 I:int) =  androidx.core.R.id.accessibility_action_clickable_span int \l0x0021: CONST_STR  (r3 I:java.lang.String) =  \"androidx.view.accessibility.AccessibilityNodeInfoCompat.SPANS_ACTION_ID_KEY\" \l0x0023: INVOKE  (r1 I:android.os.Bundle), (r3 I:java.lang.String), (r2 I:int) type: VIRTUAL call: android.os.Bundle.putInt(java.lang.String, int):void A[MD:(java.lang.String, int):void (c)]\l0x0027: INVOKE  (r1 I:android.util.SparseArray) = \l  (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat)\l  (r8 I:android.view.View A[D('view' android.view.View)])\l type: DIRECT call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.getOrCreateSpansFromViewTags(android.view.View):android.util.SparseArray A[MD:(android.view.View):android.util.SparseArray\<java.lang.ref.WeakReference\<android.text.style.ClickableSpan\>\> (m)] (LINE:2713)\l0x002b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2714)\l}"];
Node_34 [shape=record,label="{34\:\ 0x002c|LOOP_START\lLOOP:0: B:34:0x002c\-\>B:37:0x0031\l|0x002c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('spans' android.text.style.ClickableSpan[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x004c \l}"];
Node_35 [shape=record,label="{35\:\ 0x002e|0x002e: ARRAY_LENGTH  (r3 I:int) = (r0 I:??[] A[D('spans' android.text.style.ClickableSpan[])]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x002f|0x002f: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:40:0x004c \l}"];
Node_37 [shape=record,label="{37\:\ 0x0031|LOOP_END\lLOOP:0: B:34:0x002c\-\>B:37:0x0031\l|0x0031: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('spans' android.text.style.ClickableSpan[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:2715)\l0x0033: INVOKE  (r3 I:int) = \l  (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat)\l  (r3 I:android.text.style.ClickableSpan)\l  (r1 I:android.util.SparseArray A[D('tagSpans' android.util.SparseArray\<java.lang.ref.WeakReference\<android.text.style.ClickableSpan\>\>)])\l type: DIRECT call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.idForClickableSpan(android.text.style.ClickableSpan, android.util.SparseArray):int A[MD:(android.text.style.ClickableSpan, android.util.SparseArray\<java.lang.ref.WeakReference\<android.text.style.ClickableSpan\>\>):int (m)]\l0x0037: NEW_INSTANCE  (r4 I:java.lang.ref.WeakReference) =  java.lang.ref.WeakReference  (LINE:2716)\l0x0039: AGET  (r5 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('spans' android.text.style.ClickableSpan[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l \l0x003b: INVOKE  (r4 I:java.lang.ref.WeakReference), (r5 I:java.lang.Object) type: DIRECT call: java.lang.ref.WeakReference.\<init\>(java.lang.Object):void A[MD:(T):void (c)]\l0x003e: INVOKE  \l  (r1 I:android.util.SparseArray A[D('tagSpans' android.util.SparseArray\<java.lang.ref.WeakReference\<android.text.style.ClickableSpan\>\>)])\l  (r3 I:int A[D('id' int)])\l  (r4 I:java.lang.Object)\l type: VIRTUAL call: android.util.SparseArray.put(int, java.lang.Object):void A[MD:(int, E):void (c)]\l0x0041: AGET  (r4 I:??[OBJECT, ARRAY]) = \l  (r0 I:??[OBJECT, ARRAY][] A[D('spans' android.text.style.ClickableSpan[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:2717)\l0x0043: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('text' java.lang.CharSequence)]) \l0x0044: CHECK_CAST (r5 I:android.text.Spanned) = (android.text.Spanned) (r5 I:??[OBJECT, ARRAY]) \l0x0046: INVOKE  \l  (r6 I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat)\l  (r4 I:android.text.style.ClickableSpan)\l  (r5 I:android.text.Spanned)\l  (r3 I:int A[D('id' int)])\l type: DIRECT call: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.addSpanLocationToExtras(android.text.style.ClickableSpan, android.text.Spanned, int):void A[MD:(android.text.style.ClickableSpan, android.text.Spanned, int):void (m)]\l0x0049: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:2714)\l}"];
Node_40 [shape=record,label="{40\:\ 0x004c|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x004c: RETURN   A[SYNTHETIC] (LINE:2721)\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x004c|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ ?|SYNTHETIC\lRETURN\l|0x004c: RETURN   A[SYNTHETIC] (LINE:2721)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x004c: RETURN   A[SYNTHETIC] (LINE:2721)\l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|0x004c: RETURN   A[SYNTHETIC] (LINE:2721)\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x004c: RETURN   A[SYNTHETIC] (LINE:2721)\l}"];
Node_38 [shape=record,label="{38\:\ 0x004c|RETURN\lORIG_RETURN\l|0x004c: RETURN    (LINE:2721)\l}"];
MethodNode[shape=record,label="{public void androidx.core.view.accessibility.AccessibilityNodeInfoCompat.addSpansToExtras((r6 'this' I:androidx.core.view.accessibility.AccessibilityNodeInfoCompat A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.CharSequence A[D('text' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:37:0x0031 \-\> B:34:0x002c, CROSS_EDGE: B:34:0x002c \-\> B:38:0x004c, CROSS_EDGE: B:32:0x0019 \-\> B:38:0x004c, CROSS_EDGE: B:30:0x0016 \-\> B:38:0x004c, CROSS_EDGE: B:28:0x000a \-\> B:38:0x004c, CROSS_EDGE: B:26:0x0004 \-\> B:38:0x004c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0037\-0x0049: r3 'id' I\l  0x0016\-0x004c: r0 'spans' [Landroid\/text\/style\/ClickableSpan;\l  0x002b\-0x004c: r1 'tagSpans' Landroid\/util\/SparseArray;, signature: Landroid\/util\/SparseArray\<Ljava\/lang\/ref\/WeakReference\<Landroid\/text\/style\/ClickableSpan;\>;\>;\l  0x002c\-0x004c: r2 'i' I\l  \-1 \-0x004c: r7 'text' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r8 'view' Landroid\/view\/View;\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_38;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_41;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_42;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_43;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_39;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_40;
Node_37 -> Node_34;
Node_40 -> Node_45;
Node_45 -> Node_24;
Node_39 -> Node_44;
Node_44 -> Node_24;
Node_43 -> Node_24;
Node_42 -> Node_24;
Node_41 -> Node_24;
Node_38 -> Node_24;
}

