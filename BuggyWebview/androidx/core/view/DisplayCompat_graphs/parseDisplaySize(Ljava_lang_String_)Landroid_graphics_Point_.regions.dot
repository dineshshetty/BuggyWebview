digraph "CFG forandroidx.core.view.DisplayCompat.parseDisplaySize(Ljava\/lang\/String;)Landroid\/graphics\/Point;" {
subgraph cluster_Region_210884935 {
label = "R(3:1|(2:3|(1:7))|10)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.String[] java.lang.String[] r0 = r4.trim().split(\"x\", \-1)\l}"];
subgraph cluster_IfRegion_1991376714 {
label = "IF [B:3:0x000d] THEN: R(2:3|(1:7)) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000d|if (r0.length == 2) goto L3\l}"];
subgraph cluster_Region_38235407 {
label = "R(2:3|(1:7))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000f|int int r1 = java.lang.Integer.parseInt(r0[0])\lint int r2 = java.lang.Integer.parseInt(r0[1])\l}"];
subgraph cluster_IfRegion_340888828 {
label = "IF [B:5:0x001d, B:6:0x001f] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001d|if (r1 \> 0) goto L5\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|ADDED_TO_REGION\l|if (r2 \> 0) goto L6\l}"];
subgraph cluster_Region_369636560 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0026|RETURN\l|return new android.graphics.Point(r1, r2)\l}"];
}
}
}
}
Node_10 [shape=record,label="{10\:\ 0x002c|throw new java.lang.NumberFormatException()\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0021}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0027}"];
MethodNode[shape=record,label="{private static android.graphics.Point androidx.core.view.DisplayCompat.parseDisplaySize((r4v0 'displaySize' java.lang.String A[D('displaySize' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x002c \-\> B:1:?, CROSS_EDGE: B:5:0x001d \-\> B:9:0x0027, CROSS_EDGE: B:3:0x000d \-\> B:9:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/lang\/NumberFormatException;]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_9[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_9[style=dashed];
Node_6 -> Node_7;
Node_6 -> Node_9[style=dashed];
Node_8 -> Node_1;
Node_10 -> Node_1;
Node_0 -> Node_2;
Node_7 -> Node_8;
Node_9 -> Node_10;
}

