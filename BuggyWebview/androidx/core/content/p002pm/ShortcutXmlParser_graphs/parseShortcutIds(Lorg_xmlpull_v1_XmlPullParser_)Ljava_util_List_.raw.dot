digraph "CFG forandroidx.core.content.pm.ShortcutXmlParser.parseShortcutIds(Lorg\/xmlpull\/v1\/XmlPullParser;)Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:138)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: INVOKE  (r0 I:java.util.ArrayList), (r1 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|LOOP_START\lLOOP:0: B:3:0x0006\-\>B:26:0x0006\l|0x0006: INVOKE  (r2 I:int) = (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: INTERFACE call: org.xmlpull.v1.XmlPullParser.next():int A[MD:():int throws java.io.IOException, org.xmlpull.v1.XmlPullParserException (c)] (LINE:141)\l0x000a: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0038 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0016 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|0x0010: INVOKE  (r2 I:int) = (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: INTERFACE call: org.xmlpull.v1.XmlPullParser.getDepth():int A[MD:():int (c)] (LINE:142)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:20:0x0038 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0038|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0038|RETURN\l|0x0038: RETURN  (r0 I:java.util.List\<java.lang.String\> A[D('result' java.util.List\<java.lang.String\>)])  (LINE:156)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: INVOKE  (r2 I:int) = (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: INTERFACE call: org.xmlpull.v1.XmlPullParser.getDepth():int A[MD:():int (c)] (LINE:143)\l0x001a: INVOKE  (r4 I:java.lang.String) = (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: INTERFACE call: org.xmlpull.v1.XmlPullParser.getName():java.lang.String A[MD:():java.lang.String (c)] (LINE:144)\l0x001e: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:146)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0006 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0021|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('depth' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0006 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0023|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: CONST_STR  (r5 I:java.lang.String) =  \"shortcut\" \l0x0025: INVOKE  (r5 I:boolean) = (r5 I:java.lang.String), (r4 I:java.lang.Object A[D('tag' java.lang.String)]) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0006 \l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: CONST_STR  (r5 I:java.lang.String) =  \"shortcutId\"  (LINE:147)\l0x002d: INVOKE  (r5 I:java.lang.String) = (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]), (r5 I:java.lang.String) type: STATIC call: androidx.core.content.pm.ShortcutXmlParser.getAttributeValue(org.xmlpull.v1.XmlPullParser, java.lang.String):java.lang.String A[MD:(org.xmlpull.v1.XmlPullParser, java.lang.String):java.lang.String (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('shortcutId' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0034  (LINE:149)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0034|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|0x0034: INVOKE  \l  (r0 I:java.util.List A[D('result' java.util.List\<java.lang.String\>)])\l  (r5 I:java.lang.Object A[D('shortcutId' java.lang.String)])\l type: INTERFACE call: java.util.List.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:152)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0006|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x0006\-\>B:26:0x0006\l}"];
Node_30 [shape=record,label="{30\:\ 0x0006|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0006|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0038|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.util.List\<java.lang.String\> androidx.core.content.pm.ShortcutXmlParser.parseShortcutIds((r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:17:0x0034 \-\> B:3:0x0006, BACK_EDGE: B:15:0x0031 \-\> B:3:0x0006, BACK_EDGE: B:13:0x0029 \-\> B:3:0x0006, BACK_EDGE: B:11:0x0021 \-\> B:3:0x0006, BACK_EDGE: B:10:0x001f \-\> B:3:0x0006, CROSS_EDGE: B:6:0x000e \-\> B:9:0x0016, CROSS_EDGE: B:4:0x000b \-\> B:19:0x0038\lDebug Info:\l  0x001a\-0x0037: r2 'depth' I\l  0x001e\-0x0037: r4 'tag' Ljava\/lang\/String;\l  0x0031\-0x0037: r5 'shortcutId' Ljava\/lang\/String;\l  0x0006\-0x0038: r0 'result' Ljava\/util\/List;, signature: Ljava\/util\/List\<Ljava\/lang\/String;\>;\l  0x000b\-0x0038: r3 'type' I\l  \-1 \-0x0038: r6 'parser' Lorg\/xmlpull\/v1\/XmlPullParser;\lEXCEPTIONS:[Ljava\/io\/IOException;, Lorg\/xmlpull\/v1\/XmlPullParserException;]\lSIGNATURE: (Lorg\/xmlpull\/v1\/XmlPullParser;)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_21;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_20;
Node_20 -> Node_19;
Node_19 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_22[style=dashed];
Node_10 -> Node_27;
Node_22 -> Node_11;
Node_11 -> Node_23[style=dashed];
Node_11 -> Node_28;
Node_23 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_24[style=dashed];
Node_13 -> Node_29;
Node_24 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_25;
Node_15 -> Node_30[style=dashed];
Node_25 -> Node_17;
Node_17 -> Node_31;
Node_31 -> Node_26;
Node_26 -> Node_3;
Node_30 -> Node_26;
Node_29 -> Node_26;
Node_28 -> Node_26;
Node_27 -> Node_26;
Node_21 -> Node_19;
}

