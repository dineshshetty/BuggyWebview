digraph "CFG forandroidx.core.content.pm.ShortcutXmlParser.getXmlResourceParser(Landroid\/content\/Context;Landroid\/content\/pm\/ActivityInfo;)Landroid\/content\/res\/XmlResourceParser;" {
subgraph cluster_Region_1166546502 {
label = "R(2:1|(2:(2:5|6)|(1:3)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|android.content.res.XmlResourceParser android.content.res.XmlResourceParser r0 = r5.loadXmlMetaData(r4.getPackageManager(), androidx.core.content.p002pm.ShortcutXmlParser.META_DATA_APP_SHORTCUTS)\l}"];
subgraph cluster_Region_1494539838 {
label = "R(2:(2:5|6)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1434421242 {
label = "IF [B:3:0x000a] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000a|if (r0 == null) goto L5\l}"];
subgraph cluster_Region_1470396693 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000d}"];
Node_6 [shape=record,label="{6\:\ 0x0025|throw new java.lang.IllegalArgumentException(\"Failed to open android.app.shortcuts meta\-data resource of \" + r5.name)\l}"];
}
}
subgraph cluster_Region_103028564 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|return r0\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static android.content.res.XmlResourceParser androidx.core.content.pm.ShortcutXmlParser.getXmlResourceParser((r4v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'info' android.content.pm.ActivityInfo A[D('info' android.content.pm.ActivityInfo), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0025 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_4 -> Node_1;
Node_0 -> Node_2;
}

