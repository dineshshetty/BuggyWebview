digraph "CFG forandroidx.core.content.pm.ShortcutManagerCompat.getShortcutInfoCompatWithLowestRank(Ljava\/util\/List;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:802)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:803)\l0x0002: INVOKE  (r2 I:java.util.Iterator) = (r5 I:java.util.List A[D('shortcuts' java.util.List\<androidx.core.content.pm.ShortcutInfoCompat\>)]) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:804)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|LOOP_START\lLOOP:0: B:3:0x0006\-\>B:12:0x0006\l|0x0006: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0010: CHECK_CAST (r3 I:androidx.core.content.pm.ShortcutInfoCompat) = (androidx.core.content.pm.ShortcutInfoCompat) (r3 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r4 I:int) = (r3 I:androidx.core.content.pm.ShortcutInfoCompat A[D('s' androidx.core.content.pm.ShortcutInfoCompat)]) type: VIRTUAL call: androidx.core.content.pm.ShortcutInfoCompat.getRank():int A[MD:():int (m)] (LINE:805)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r4 I:??[int, byte, short, char]) \<= (r0 I:??[int, byte, short, char] A[D('rank' int)])  \-\> B:13:0x0006 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r1 I:java.lang.String A[D('target' java.lang.String)]) = (r3 I:androidx.core.content.pm.ShortcutInfoCompat A[D('s' androidx.core.content.pm.ShortcutInfoCompat)]) type: VIRTUAL call: androidx.core.content.pm.ShortcutInfoCompat.getId():java.lang.String A[MD:():java.lang.String (m)] (LINE:806)\l0x001c: INVOKE  (r0 I:int A[D('rank' int)]) = (r3 I:androidx.core.content.pm.ShortcutInfoCompat A[D('s' androidx.core.content.pm.ShortcutInfoCompat)]) type: VIRTUAL call: androidx.core.content.pm.ShortcutInfoCompat.getRank():int A[MD:():int (m)] (LINE:807)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x0006\-\>B:12:0x0006\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0021|RETURN\l|0x0021: RETURN  (r1 I:java.lang.String A[D('target' java.lang.String)])  (LINE:810)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static java.lang.String androidx.core.content.pm.ShortcutManagerCompat.getShortcutInfoCompatWithLowestRank((r5 I:java.util.List\<androidx.core.content.pm.ShortcutInfoCompat\> A[D('shortcuts' java.util.List\<androidx.core.content.pm.ShortcutInfoCompat\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x0018 \-\> B:3:0x0006, BACK_EDGE: B:6:0x0016 \-\> B:3:0x0006\lDebug Info:\l  0x0012\-0x0020: r3 's' Landroidx\/core\/content\/pm\/ShortcutInfoCompat;\l  0x0001\-0x0021: r0 'rank' I\l  0x0002\-0x0021: r1 'target' Ljava\/lang\/String;\l  0x0000\-0x0021: r5 'shortcuts' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroidx\/core\/content\/pm\/ShortcutInfoCompat;\>;\lSIGNATURE: (Ljava\/util\/List\<Landroidx\/core\/content\/pm\/ShortcutInfoCompat;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_10[style=dashed];
Node_6 -> Node_13;
Node_10 -> Node_7;
Node_7 -> Node_14;
Node_14 -> Node_12;
Node_12 -> Node_3;
Node_13 -> Node_12;
Node_11 -> Node_9;
Node_9 -> Node_1;
}

