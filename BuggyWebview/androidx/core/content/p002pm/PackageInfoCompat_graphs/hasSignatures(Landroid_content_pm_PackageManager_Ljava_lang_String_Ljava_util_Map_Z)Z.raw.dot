digraph "CFG forandroidx.core.content.pm.PackageInfoCompat.hasSignatures(Landroid\/content\/pm\/PackageManager;Ljava\/lang\/String;Ljava\/util\/Map;Z)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)]) type: INTERFACE call: java.util.Map.isEmpty():boolean A[MD:():boolean (c)] (LINE:141)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:boolean)  (LINE:142)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: INVOKE  (r0 I:java.util.Set) = (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)]) type: INTERFACE call: java.util.Map.keySet():java.util.Set A[MD:():java.util.Set\<K\> (c)] (LINE:145)\l0x000c: INVOKE  (r2 I:java.util.Iterator) = (r0 I:java.util.Set A[D('expectedCertBytes' java.util.Set\<byte[]\>)]) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:152)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|LOOP_START\lLOOP:0: B:6:0x0010\-\>B:13:0x002c\l|0x0010: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l0x0014: CONST_STR  (r4 I:java.lang.String) =  \"Unsupported certificate type \" \l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x007c \l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001c: CHECK_CAST (r3 I:byte[]) = (byte[]) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bytes' byte[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x0065  (LINE:153)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: INVOKE  (r5 I:java.lang.Object) = \l  (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)])\l  (r3 I:java.lang.Object A[D('bytes' byte[])])\l type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)] (LINE:157)\l0x0024: CHECK_CAST (r5 I:java.lang.Integer) = (java.lang.Integer) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' java.lang.Integer)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x004e  (LINE:158)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: INVOKE  (r6 I:int) = (r5 I:java.lang.Integer A[D('type' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:163)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|LOOP_END\lLOOP:0: B:6:0x0010\-\>B:13:0x002c\l|0x002c: SWITCH  (r6 I:??)\l case 0: goto B:6:0x0010\l case 1: goto B:6:0x0010\l default: goto B:64:0x002f \l}"];
Node_64 [shape=record,label="{64\:\ 0x002f|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|0x002f: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:168)\l0x0031: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0033: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0036: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0039: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:java.lang.Object A[D('type' java.lang.Integer)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x003c: CONST_STR  (r4 I:java.lang.String) =  \" when verifying \" \l0x003e: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0041: INVOKE  (r2 I:java.lang.StringBuilder), (r11 I:java.lang.String A[D('packageName' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0044: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0048: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x004b|0x004b: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_62 [shape=record,label="{62\:\ 0x004e|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:159)\l0x0050: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0052: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0055: CONST_STR  (r4 I:java.lang.String) =  \"Type must be specified for cert when verifying \" \l0x0057: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005a: INVOKE  (r2 I:java.lang.StringBuilder), (r11 I:java.lang.String A[D('packageName' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0061: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0064|0x0064: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_65 [shape=record,label="{65\:\ 0x0065|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0065|0x0065: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:154)\l0x0067: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0069: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x006c: CONST_STR  (r4 I:java.lang.String) =  \"Cert byte array cannot be null when verifying \" \l0x006e: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0071: INVOKE  (r2 I:java.lang.StringBuilder), (r11 I:java.lang.String A[D('packageName' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0074: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0078: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x007b|0x007b: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_63 [shape=record,label="{63\:\ 0x007c|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x007c|0x007c: INVOKE  (r2 I:java.util.List) = \l  (r10 I:android.content.pm.PackageManager A[D('packageManager' android.content.pm.PackageManager)])\l  (r11 I:java.lang.String A[D('packageName' java.lang.String)])\l type: STATIC call: androidx.core.content.pm.PackageInfoCompat.getSignatures(android.content.pm.PackageManager, java.lang.String):java.util.List A[MD:(android.content.pm.PackageManager, java.lang.String):java.util.List\<android.content.pm.Signature\> throws android.content.pm.PackageManager$NameNotFoundException (m)] (LINE:174)\l0x0080: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:180)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0081|0x0081: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matchExact' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x00ac \l}"];
Node_23 [shape=record,label="{23\:\ 0x0083|0x0083: SGET  (r5 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0085: CONST  (r6 I:??[int, float, short, byte, char]) = (28 ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0087|0x0087: IF  (r5 I:??[int, byte, short, char]) \< (r6 I:??[int, byte, short, char])  \-\> B:33:0x00ac \l}"];
Node_25 [shape=record,label="{25\:\ 0x0089|0x0089: INVOKE  (r4 I:java.util.Iterator) = (r0 I:java.util.Set A[D('expectedCertBytes' java.util.Set\<byte[]\>)]) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:184)\l}"];
Node_26 [shape=record,label="{26\:\ 0x008d|LOOP_START\lLOOP:1: B:26:0x008d\-\>B:29:0x00a7\l|0x008d: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0091|0x0091: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x00ab \l}"];
Node_28 [shape=record,label="{28\:\ 0x0093|0x0093: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0097: CHECK_CAST (r5 I:byte[]) = (byte[]) (r5 I:??[OBJECT, ARRAY]) \l0x0099: INVOKE  (r6 I:java.lang.Object) = \l  (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)])\l  (r5 I:java.lang.Object A[D('bytes' byte[])])\l type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)] (LINE:185)\l0x009d: CHECK_CAST (r6 I:java.lang.Integer) = (java.lang.Integer) (r6 I:??[OBJECT, ARRAY]) \l0x009f: INVOKE  (r7 I:int) = (r6 I:java.lang.Integer A[D('type' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:187)\l0x00a3: INVOKE  (r7 I:boolean) = \l  (r10 I:android.content.pm.PackageManager A[D('packageManager' android.content.pm.PackageManager)])\l  (r11 I:java.lang.String A[D('packageName' java.lang.String)])\l  (r5 I:byte[] A[D('bytes' byte[])])\l  (r7 I:int)\l type: STATIC call: androidx.core.content.pm.PackageInfoCompat.Api28Impl.hasSigningCertificate(android.content.pm.PackageManager, java.lang.String, byte[], int):boolean A[MD:(android.content.pm.PackageManager, java.lang.String, byte[], int):boolean (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x00a7|LOOP_END\lLOOP:1: B:26:0x008d\-\>B:29:0x00a7\l|0x00a7: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x008d \l}"];
Node_67 [shape=record,label="{67\:\ 0x00a9|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x00a9|RETURN\l|0x00a9: RETURN  (r1 I:boolean)  (LINE:188)\l}"];
Node_66 [shape=record,label="{66\:\ 0x00ab|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x00ab|RETURN\l|0x00ab: RETURN  (r3 I:boolean)  (LINE:192)\l}"];
Node_33 [shape=record,label="{33\:\ 0x00ac|0x00ac: INVOKE  (r5 I:int) = (r2 I:java.util.List A[D('signers' java.util.List\<android.content.pm.Signature\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:196)\l}"];
Node_34 [shape=record,label="{34\:\ 0x00b0|0x00b0: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x013b \l}"];
Node_35 [shape=record,label="{35\:\ 0x00b2|0x00b2: INVOKE  (r5 I:int) = (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)]) type: INTERFACE call: java.util.Map.size():int A[MD:():int (c)] (LINE:197)\l0x00b6: INVOKE  (r6 I:int) = (r2 I:java.util.List A[D('signers' java.util.List\<android.content.pm.Signature\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x00ba|0x00ba: IF  (r5 I:??[int, byte, short, char]) \> (r6 I:??[int, byte, short, char])  \-\> B:61:0x013b \l}"];
Node_37 [shape=record,label="{37\:\ 0x00bc|0x00bc: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matchExact' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00c9 \l}"];
Node_38 [shape=record,label="{38\:\ 0x00be|0x00be: INVOKE  (r5 I:int) = (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)]) type: INTERFACE call: java.util.Map.size():int A[MD:():int (c)] (LINE:198)\l0x00c2: INVOKE  (r6 I:int) = (r2 I:java.util.List A[D('signers' java.util.List\<android.content.pm.Signature\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x00c6|0x00c6: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x00c9 \l}"];
Node_41 [shape=record,label="{41\:\ 0x00c9|0x00c9: INVOKE  (r5 I:java.lang.Integer) = (r3 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:203)\l0x00cd: INVOKE  (r5 I:boolean) = (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)]), (r5 I:java.lang.Object) type: INTERFACE call: java.util.Map.containsValue(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l0x00d1: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:204)\l}"];
Node_42 [shape=record,label="{42\:\ 0x00d2|0x00d2: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasSha256' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x00f4  (LINE:205)\l}"];
Node_43 [shape=record,label="{43\:\ 0x00d4|0x00d4: INVOKE  (r7 I:int) = (r2 I:java.util.List A[D('signers' java.util.List\<android.content.pm.Signature\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:207)\l0x00d8: NEW_ARRAY  (r6 I:byte[][] A[D('sha256Digests' byte[][])]) = (r7 I:int A[IMMUTABLE_TYPE]) type: byte[][] \l0x00da: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:208)\l}"];
Node_44 [shape=record,label="{44\:\ 0x00db|LOOP_START\lLOOP:2: B:44:0x00db\-\>B:46:0x00e1\l|0x00db: INVOKE  (r8 I:int) = (r2 I:java.util.List A[D('signers' java.util.List\<android.content.pm.Signature\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x00df|0x00df: IF  (r7 I:??[int, byte, short, char] A[D('index' int)]) \>= (r8 I:??[int, byte, short, char])  \-\> B:68:0x00f4 \l}"];
Node_46 [shape=record,label="{46\:\ 0x00e1|LOOP_END\lLOOP:2: B:44:0x00db\-\>B:46:0x00e1\l|0x00e1: INVOKE  (r8 I:java.lang.Object) = (r2 I:java.util.List A[D('signers' java.util.List\<android.content.pm.Signature\>)]), (r7 I:int A[D('index' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:209)\l0x00e5: CHECK_CAST (r8 I:android.content.pm.Signature) = (android.content.pm.Signature) (r8 I:??[OBJECT, ARRAY]) \l0x00e7: INVOKE  (r8 I:byte[]) = (r8 I:android.content.pm.Signature) type: VIRTUAL call: android.content.pm.Signature.toByteArray():byte[] A[MD:():byte[] (c)]\l0x00eb: INVOKE  (r8 I:byte[]) = (r8 I:byte[]) type: STATIC call: androidx.core.content.pm.PackageInfoCompat.computeSHA256Digest(byte[]):byte[] A[MD:(byte[]):byte[] (m)]\l0x00ef: APUT  \l  (r6 I:??[OBJECT, ARRAY][] A[D('sha256Digests' byte[][])])\l  (r7 I:??[int, short, byte, char] A[D('index' int)])\l  (r8 I:??[OBJECT, ARRAY])\l \l0x00f1: ARITH  (r7 I:int) = (r7 I:int A[D('index' int)]) + (1 int)  (LINE:208)\l}"];
Node_68 [shape=record,label="{68\:\ 0x00f4|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x00f4|0x00f4: INVOKE  (r7 I:java.util.Iterator) = (r0 I:java.util.Set A[D('expectedCertBytes' java.util.Set\<byte[]\>)]) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:213)\l0x00f8: INVOKE  (r8 I:boolean) = (r7 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x00fc|0x00fc: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x013a \l}"];
Node_49 [shape=record,label="{49\:\ 0x00fe|0x00fe: INVOKE  (r7 I:java.lang.Object) = (r7 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0102: CHECK_CAST (r7 I:byte[]) = (byte[]) (r7 I:??[OBJECT, ARRAY]) \l0x0104: INVOKE  (r8 I:java.lang.Object) = \l  (r12 I:java.util.Map A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>)])\l  (r7 I:java.lang.Object A[D('bytes' byte[])])\l type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)] (LINE:214)\l0x0108: CHECK_CAST (r8 I:java.lang.Integer) = (java.lang.Integer) (r8 I:??[OBJECT, ARRAY]) \l0x010a: INVOKE  (r9 I:int) = (r8 I:java.lang.Integer A[D('type' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)] (LINE:216)\l}"];
Node_50 [shape=record,label="{50\:\ 0x010e|0x010e: SWITCH  (r9 I:??)\l case 0: goto B:56:0x012d\l case 1: goto B:53:0x0126\l default: goto B:51:0x0111 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0111|0x0111: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:234)\l0x0113: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0115: INVOKE  (r3 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0118: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x011b: INVOKE  (r3 I:java.lang.StringBuilder), (r8 I:java.lang.Object A[D('type' java.lang.Integer)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x011e: INVOKE  (r3 I:java.lang.String) = (r3 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0122: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x0125|0x0125: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0126|0x0126: INVOKE  (r4 I:boolean) = (r6 I:byte[][] A[D('sha256Digests' byte[][])]), (r7 I:byte[] A[D('bytes' byte[])]) type: STATIC call: androidx.core.content.pm.PackageInfoCompat.byteArrayContains(byte[][], byte[]):boolean A[MD:(byte[][], byte[]):boolean (m)] (LINE:228)\l}"];
Node_54 [shape=record,label="{54\:\ 0x012a|0x012a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0139 \l}"];
Node_55 [shape=record,label="{55\:\ 0x012c|RETURN\l|0x012c: RETURN  (r1 I:boolean)  (LINE:229)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0139|RETURN\l|0x0139: RETURN  (r3 I:boolean)  (LINE:238)\l}"];
Node_56 [shape=record,label="{56\:\ 0x012d|0x012d: NEW_INSTANCE  (r4 I:android.content.pm.Signature) =  android.content.pm.Signature  (LINE:220)\l0x012f: INVOKE  (r4 I:android.content.pm.Signature), (r7 I:byte[] A[D('bytes' byte[])]) type: DIRECT call: android.content.pm.Signature.\<init\>(byte[]):void A[MD:(byte[]):void (c)]\l0x0132: INVOKE  (r9 I:boolean) = \l  (r2 I:java.util.List A[D('signers' java.util.List\<android.content.pm.Signature\>)])\l  (r4 I:java.lang.Object A[D('expectedSignature' android.content.pm.Signature)])\l type: INTERFACE call: java.util.List.contains(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:221)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0136|0x0136: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0139 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0138|RETURN\l|0x0138: RETURN  (r1 I:boolean)  (LINE:222)\l}"];
Node_60 [shape=record,label="{60\:\ 0x013a|RETURN\l|0x013a: RETURN  (r1 I:boolean)  (LINE:241)\l}"];
Node_61 [shape=record,label="{61\:\ 0x013b|RETURN\l|0x013b: RETURN  (r1 I:boolean)  (LINE:199)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.content.pm.PackageInfoCompat.hasSignatures((r10 I:android.content.pm.PackageManager A[D('packageManager' android.content.pm.PackageManager), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[D('packageName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.util.Map\<byte[], java.lang.Integer\> A[D('certificatesAndType' java.util.Map\<byte[], java.lang.Integer\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[D('matchExact' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x004b \-\> B:1:?, BACK_EDGE: B:13:0x002c \-\> B:6:0x0010, CROSS_EDGE: B:18:0x0064 \-\> B:1:?, CROSS_EDGE: B:20:0x007b \-\> B:1:?, CROSS_EDGE: B:30:0x00a9 \-\> B:1:?, BACK_EDGE: B:29:0x00a7 \-\> B:26:0x008d, CROSS_EDGE: B:32:0x00ab \-\> B:1:?, BACK_EDGE: B:46:0x00e1 \-\> B:44:0x00db, CROSS_EDGE: B:52:0x0125 \-\> B:1:?, CROSS_EDGE: B:55:0x012c \-\> B:1:?, CROSS_EDGE: B:59:0x0139 \-\> B:1:?, CROSS_EDGE: B:58:0x0138 \-\> B:1:?, CROSS_EDGE: B:57:0x0136 \-\> B:59:0x0139, CROSS_EDGE: B:60:0x013a \-\> B:1:?, CROSS_EDGE: B:42:0x00d2 \-\> B:47:0x00f4, CROSS_EDGE: B:61:0x013b \-\> B:1:?, CROSS_EDGE: B:37:0x00bc \-\> B:41:0x00c9, CROSS_EDGE: B:36:0x00ba \-\> B:61:0x013b, CROSS_EDGE: B:34:0x00b0 \-\> B:61:0x013b, CROSS_EDGE: B:22:0x0081 \-\> B:33:0x00ac\lDebug Info:\l  0x001e\-0x004d: r3 'bytes' [B\l  0x0026\-0x004d: r5 'type' Ljava\/lang\/Integer;\l  0x004e\-0x0065: r5 'type' Ljava\/lang\/Integer;\l  0x004e\-0x007c: r3 'bytes' [B\l  0x0099\-0x00aa: r5 'bytes' [B\l  0x009f\-0x00aa: r6 'type' Ljava\/lang\/Integer;\l  0x00db\-0x00f4: r7 'index' I\l  0x0132\-0x0139: r4 'expectedSignature' Landroid\/content\/pm\/Signature;\l  0x0104\-0x013a: r7 'bytes' [B\l  0x010a\-0x013a: r8 'type' Ljava\/lang\/Integer;\l  0x00d1\-0x013b: r5 'hasSha256' Z\l  0x00d2\-0x013b: r6 'sha256Digests' [[B\l  0x000c\-0x014b: r0 'expectedCertBytes' Ljava\/util\/Set;, signature: Ljava\/util\/Set\<[B\>;\l  0x0080\-0x014b: r2 'signers' Ljava\/util\/List;, signature: Ljava\/util\/List\<Landroid\/content\/pm\/Signature;\>;\l  \-1 \-0x014b: r10 'packageManager' Landroid\/content\/pm\/PackageManager;\l  \-1 \-0x014b: r11 'packageName' Ljava\/lang\/String;\l  0x0000\-0x014b: r12 'certificatesAndType' Ljava\/util\/Map;, signature: Ljava\/util\/Map\<[BLjava\/lang\/Integer;\>;\l  \-1 \-0x014b: r13 'matchExact' Z\lEXCEPTIONS:[Landroid\/content\/pm\/PackageManager$NameNotFoundException;]\lSIGNATURE: (Landroid\/content\/pm\/PackageManager;Ljava\/lang\/String;Ljava\/util\/Map\<[BLjava\/lang\/Integer;\>;Z)Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_63;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_65;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_62;
Node_12 -> Node_13;
Node_13 -> Node_6;
Node_13 -> Node_64;
Node_64 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_62 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_65 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_63 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_33;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_66;
Node_28 -> Node_29;
Node_29 -> Node_26;
Node_29 -> Node_67[style=dashed];
Node_67 -> Node_30;
Node_30 -> Node_1;
Node_66 -> Node_32;
Node_32 -> Node_1;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_61;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_61;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_41;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_61[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_47;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_68;
Node_46 -> Node_44;
Node_68 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_60;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_50 -> Node_53;
Node_50 -> Node_56;
Node_51 -> Node_52;
Node_52 -> Node_1;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_59;
Node_55 -> Node_1;
Node_59 -> Node_1;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_1;
Node_60 -> Node_1;
Node_61 -> Node_1;
}

