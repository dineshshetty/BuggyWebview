digraph "CFG forandroidx.core.content.MimeTypeFilter.matches([Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0001|if (r8 != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|RETURN\l|return null\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004|java.lang.String[] r2 = r9.split(\"\/\")\lint r3 = r8.length\lr4 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|LOOP_START\lLOOP:0: B:6:0x000c\-\>B:10:0x001b\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:5:0x0004, B:10:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r3) goto L12\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|r5 = r8[r4]\ljava.lang.String[] r6 = r5.split(\"\/\")\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|if (mimeTypeAgainstFilter(r6, r2) == false) goto L9\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|LOOP_END\lLOOP:0: B:6:0x000c\-\>B:10:0x001b\l|int r4 = r4 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|RETURN\l|return r5\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.core.content.MimeTypeFilter.matches((r8v0 'mimeTypes' java.lang.String[] A[D('mimeTypes' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'filter' java.lang.String A[D('filter' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x001a \-\> B:1:?, BACK_EDGE: B:10:0x001b \-\> B:6:0x000c, CROSS_EDGE: B:11:0x001e \-\> B:1:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_6;
Node_12 -> Node_9;
Node_9 -> Node_1;
Node_13 -> Node_11;
Node_11 -> Node_1;
}

