digraph "CFG forandroidx.core.content.MimeTypeFilter.matches([Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:115)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|0x0001: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mimeTypes' java.lang.String[])]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0004 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:java.lang.String)  (LINE:116)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004|0x0004: CONST_STR  (r1 I:java.lang.String) =  \"\/\"  (LINE:119)\l0x0006: INVOKE  (r2 I:java.lang.String[]) = (r9 I:java.lang.String A[D('filter' java.lang.String)]), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.String.split(java.lang.String):java.lang.String[] A[MD:(java.lang.String):java.lang.String[] (c)]\l0x000a: ARRAY_LENGTH  (r3 I:int) = (r8 I:??[] A[D('mimeTypes' java.lang.String[])])  (LINE:120)\l0x000b: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|LOOP_START\lLOOP:0: B:6:0x000c\-\>B:10:0x001b\l|0x000c: IF  (r4 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:13:0x001e \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: AGET  (r5 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY][] A[D('mimeTypes' java.lang.String[])]), (r4 I:??[int, short, byte, char]) \l0x0010: INVOKE  (r6 I:java.lang.String[]) = (r5 I:java.lang.String A[D('mimeType' java.lang.String)]), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.String.split(java.lang.String):java.lang.String[] A[MD:(java.lang.String):java.lang.String[] (c)] (LINE:121)\l0x0014: INVOKE  (r7 I:boolean) = \l  (r6 I:java.lang.String[] A[D('mimeTypeParts' java.lang.String[])])\l  (r2 I:java.lang.String[] A[D('filterParts' java.lang.String[])])\l type: STATIC call: androidx.core.content.MimeTypeFilter.mimeTypeAgainstFilter(java.lang.String[], java.lang.String[]):boolean A[MD:(java.lang.String[], java.lang.String[]):boolean (m)] (LINE:122)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001b \l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|LOOP_END\lLOOP:0: B:6:0x000c\-\>B:10:0x001b\l|0x001b: ARITH  (r4 I:int) = (r4 I:int) + (1 int)  (LINE:120)\l}"];
Node_12 [shape=record,label="{12\:\ 0x001a|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|RETURN\l|0x001a: RETURN  (r5 I:java.lang.String A[D('mimeType' java.lang.String)])  (LINE:123)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|RETURN\l|0x001e: RETURN  (r0 I:java.lang.String)  (LINE:127)\l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.core.content.MimeTypeFilter.matches((r8 I:java.lang.String[] A[D('mimeTypes' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[D('filter' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x001a \-\> B:1:?, BACK_EDGE: B:10:0x001b \-\> B:6:0x000c, CROSS_EDGE: B:11:0x001e \-\> B:1:?\lDebug Info:\l  0x0010\-0x001b: r5 'mimeType' Ljava\/lang\/String;\l  0x0014\-0x001b: r6 'mimeTypeParts' [Ljava\/lang\/String;\l  0x000a\-0x001e: r2 'filterParts' [Ljava\/lang\/String;\l  \-1 \-0x001e: r8 'mimeTypes' [Ljava\/lang\/String;\l  \-1 \-0x001e: r9 'filter' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_12[style=dashed];
Node_10 -> Node_6;
Node_12 -> Node_9;
Node_9 -> Node_1;
Node_13 -> Node_11;
Node_11 -> Node_1;
}

