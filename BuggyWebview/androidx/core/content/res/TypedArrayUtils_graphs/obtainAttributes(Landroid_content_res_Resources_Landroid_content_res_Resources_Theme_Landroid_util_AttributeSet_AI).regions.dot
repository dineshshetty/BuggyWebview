digraph "CFG forandroidx.core.content.res.TypedArrayUtils.obtainAttributes(Landroid\/content\/res\/Resources;Landroid\/content\/res\/Resources$Theme;Landroid\/util\/AttributeSet;[I)Landroid\/content\/res\/TypedArray;" {
subgraph cluster_Region_1795448277 {
label = "R(1:(2:(1:3)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1991218893 {
label = "R(2:(1:3)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1885285386 {
label = "IF [B:9:0x0000] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|if (r2 == null) goto L2\l}"];
subgraph cluster_Region_1616019609 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0006|RETURN\l|return r1.obtainAttributes(r3, r4)\l}"];
}
}
subgraph cluster_Region_695309235 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|return r2.obtainStyledAttributes(r3, r4, 0, 0)\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0002}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0007}"];
MethodNode[shape=record,label="{public static android.content.res.TypedArray androidx.core.content.res.TypedArrayUtils.obtainAttributes((r1v0 'res' android.content.res.Resources A[D('res' android.content.res.Resources), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'theme' android.content.res.Resources$Theme A[D('theme' android.content.res.Resources$Theme), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'set' android.util.AttributeSet A[D('set' android.util.AttributeSet), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'attrs' int[] A[D('attrs' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_9 -> Node_12[style=dashed];
Node_11 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

