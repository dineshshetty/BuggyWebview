digraph "CFG forandroidx.core.content.res.FontResourcesParserCompat.parse(Lorg\/xmlpull\/v1\/XmlPullParser;Landroid\/content\/res\/Resources;)Landroidx\/core\/content\/res\/FontResourcesParserCompat$FamilyResourceEntry;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|LOOP_START\lLOOP:0: B:16:0x0000\-\>B:19:0x0009\l|int r0 = r3.next()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|if (r0 == 2) goto L12\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008}"];
Node_19 [shape=record,label="{19\:\ 0x0009|LOOP_END\lLOOP:0: B:16:0x0000\-\>B:19:0x0009\l|if (r0 == 1) goto L5\l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|if (r0 != 2) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e}"];
Node_23 [shape=record,label="{23\:\ 0x0012|RETURN\l|return readFamilies(r3, r4)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013}"];
Node_25 [shape=record,label="{25\:\ 0x001a|throw new org.xmlpull.v1.XmlPullParserException(\"No start tag found\")\l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.parse((r3v0 'parser' org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'resources' android.content.res.Resources A[D('resources' android.content.res.Resources), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001a \-\> B:15:?, BACK_EDGE: B:19:0x0009 \-\> B:16:0x0000, CROSS_EDGE: B:17:0x0006 \-\> B:21:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Lorg\/xmlpull\/v1\/XmlPullParserException;, Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_26;
Node_18 -> Node_19;
Node_19 -> Node_16[style=dashed];
Node_19 -> Node_27;
Node_27 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_15;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_26 -> Node_21;
}

