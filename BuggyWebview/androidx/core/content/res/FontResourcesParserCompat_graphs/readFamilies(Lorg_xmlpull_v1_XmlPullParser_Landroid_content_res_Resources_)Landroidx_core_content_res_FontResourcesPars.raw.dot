digraph "CFG forandroidx.core.content.res.FontResourcesParserCompat.readFamilies(Lorg\/xmlpull\/v1\/XmlPullParser;Landroid\/content\/res\/Resources;)Landroidx\/core\/content\/res\/FontResourcesParserCompat$FamilyResourceEntry;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:199)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: CONST_STR  (r2 I:java.lang.String) =  \"font\-family\" \l0x0004: INVOKE  \l  (r3 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l  (r0 I:int)\l  (r1 I:java.lang.String)\l  (r2 I:java.lang.String)\l type: INTERFACE call: org.xmlpull.v1.XmlPullParser.require(int, java.lang.String, java.lang.String):void A[MD:(int, java.lang.String, java.lang.String):void throws java.io.IOException, org.xmlpull.v1.XmlPullParserException (c)]\l0x0007: INVOKE  (r0 I:java.lang.String) = (r3 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: INTERFACE call: org.xmlpull.v1.XmlPullParser.getName():java.lang.String A[MD:():java.lang.String (c)] (LINE:200)\l0x000b: INVOKE  (r2 I:boolean) = (r0 I:java.lang.String A[D('tag' java.lang.String)]), (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:201)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|0x000f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0016 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0011|0x0011: INVOKE  (r1 I:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry) = \l  (r3 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l  (r4 I:android.content.res.Resources A[D('resources' android.content.res.Resources)])\l type: STATIC call: androidx.core.content.res.FontResourcesParserCompat.readFamily(org.xmlpull.v1.XmlPullParser, android.content.res.Resources):androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry A[MD:(org.xmlpull.v1.XmlPullParser, android.content.res.Resources):androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry throws org.xmlpull.v1.XmlPullParserException, java.io.IOException (m)] (LINE:202)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|0x0015: RETURN  (r1 I:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|0x0016: INVOKE  (r3 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: STATIC call: androidx.core.content.res.FontResourcesParserCompat.skip(org.xmlpull.v1.XmlPullParser):void A[MD:(org.xmlpull.v1.XmlPullParser):void throws org.xmlpull.v1.XmlPullParserException, java.io.IOException (m)] (LINE:204)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry)  (LINE:205)\l}"];
MethodNode[shape=record,label="{private static androidx.core.content.res.FontResourcesParserCompat$FamilyResourceEntry androidx.core.content.res.FontResourcesParserCompat.readFamilies((r3 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.content.res.Resources A[D('resources' android.content.res.Resources), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0019 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x0019: r0 'tag' Ljava\/lang\/String;\l  \-1 \-0x0019: r3 'parser' Lorg\/xmlpull\/v1\/XmlPullParser;\l  \-1 \-0x0019: r4 'resources' Landroid\/content\/res\/Resources;\lEXCEPTIONS:[Lorg\/xmlpull\/v1\/XmlPullParserException;, Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

