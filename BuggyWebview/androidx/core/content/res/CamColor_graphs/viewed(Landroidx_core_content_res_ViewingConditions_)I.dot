digraph "CFG forandroidx.core.content.res.CamColor.viewed(Landroidx\/core\/content\/res\/ViewingConditions;)I" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x000b|if ((((double) getChroma()) \> 0.0d ? 1 : (((double) getChroma()) == 0.0d ? 0 : \-1)) == 0) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d}"];
Node_16 [shape=record,label="{16\:\ 0x0014|if ((((double) getJ()) \> 0.0d ? 1 : (((double) getJ()) == 0.0d ? 0 : \-1)) != 0) goto L5\l}"];
Node_18 [shape=record,label="{18\:\ 0x0017|float r0 = getChroma() \/ ((float) java.lang.Math.sqrt(((double) getJ()) \/ 100.0d))\l}"];
Node_20 [shape=record,label="{20\:\ 0x0029|PHI: r0 \l  PHI: (r0v3 'alpha' float) = (r0v2 'alpha' float), (r0v13 'alpha' float) binds: [B:19:0x0028, B:18:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|float r1 = (float) java.lang.Math.pow(((double) r0) \/ java.lang.Math.pow(1.64d \- java.lang.Math.pow(0.29d, (double) r41.getN()), 0.73d), 1.1111111111111112d)\lfloat r6 = (getHue() * 3.1415927f) \/ 180.0f\lfloat r8 = ((float) (java.lang.Math.cos(((double) r6) + 2.0d) + 3.8d)) * 0.25f\lfloat r7 = r41.getAw() * ((float) java.lang.Math.pow(((double) getJ()) \/ 100.0d, (1.0d \/ ((double) r41.getC())) \/ ((double) r41.getZ())))\lfloat r2 = ((3846.1538f * r8) * r41.getNc()) * r41.getNcb()\lfloat r3 = r7 \/ r41.getNbb()\lfloat r9 = (float) java.lang.Math.sin((double) r6)\lfloat r10 = (float) java.lang.Math.cos((double) r6)\lfloat r11 = (((0.305f + r3) * 23.0f) * r1) \/ (((23.0f * r2) + ((11.0f * r1) * r10)) + ((108.0f * r1) * r9))\lfloat r12 = r11 * r10\lfloat r13 = r11 * r9\lfloat r15 = (((r3 * 460.0f) + (451.0f * r12)) + (288.0f * r13)) \/ 1403.0f\lfloat r17 = (((r3 * 460.0f) \- (891.0f * r12)) \- (261.0f * r13)) \/ 1403.0f\lfloat r14 = (((460.0f * r3) \- (220.0f * r12)) \- (6300.0f * r13)) \/ 1403.0f\lfloat r0 = java.lang.Math.abs(r15)\lfloat r0 = (float) java.lang.Math.max(0.0d, (((double) java.lang.Math.abs(r15)) * 27.13d) \/ (400.0d \- ((double) r0)))\lfloat r1 = (java.lang.Math.signum(r15) * (100.0f \/ r41.getFl())) * ((float) java.lang.Math.pow((double) r0, 2.380952380952381d))\lfloat r2 = (float) java.lang.Math.max(0.0d, (((double) java.lang.Math.abs(r17)) * 27.13d) \/ (400.0d \- ((double) java.lang.Math.abs(r17))))\lfloat r3 = (java.lang.Math.signum(r17) * (100.0f \/ r41.getFl())) * ((float) java.lang.Math.pow((double) r2, 2.380952380952381d))\lfloat r5 = (float) java.lang.Math.max(0.0d, (((double) java.lang.Math.abs(r14)) * 27.13d) \/ (400.0d \- ((double) java.lang.Math.abs(r14))))\lfloat r6 = (java.lang.Math.signum(r14) * (100.0f \/ r41.getFl())) * ((float) java.lang.Math.pow((double) r5, 2.380952380952381d))\lfloat r4 = r1 \/ r41.getRgbD()[0]\lfloat r7 = r3 \/ r41.getRgbD()[1]\lfloat r20 = r6 \/ r41.getRgbD()[2]\lfloat[][] r23 = androidx.core.content.res.CamUtils.CAM16RGB_TO_XYZ\lfloat r5 = ((r23[0][0] * r4) + (r23[0][1] * r7)) + (r23[0][2] * r20)\lfloat r8 = ((r23[1][0] * r4) + (r23[1][1] * r7)) + (r23[1][2] * r20)\lfloat r0 = ((r23[2][0] * r4) + (r23[2][1] * r7)) + (r23[2][2] * r20)\lint r1 = androidx.core.graphics.ColorUtils.XYZToColor((double) r5, (double) r8, (double) r0)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0239|RETURN\l|return r1\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0028|r0 = 0.0f\l}"];
MethodNode[shape=record,label="{int androidx.core.content.res.CamColor.viewed((r40v0 'this' androidx.core.content.res.CamColor A[IMMUTABLE_TYPE, THIS]), (r41v0 'viewingConditions' androidx.core.content.res.ViewingConditions A[D('viewingConditions' androidx.core.content.res.ViewingConditions), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0028 \-\> B:20:0x0029, CROSS_EDGE: B:14:0x000b \-\> B:19:0x0028\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
}

