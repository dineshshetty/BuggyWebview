digraph "CFG forandroidx.core.content.res.CamColor.findCamByJ(FFF)Landroidx\/core\/content\/res\/CamColor;" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:483)\l0x0001: CONST  (r1 I:??[int, float, short, byte, char]) = (1120403456(0x42c80000, float:100.0) ??[int, float, short, byte, char])  (LINE:484)\l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:485)\l0x0004: CONST  (r3 I:??[int, float, short, byte, char]) = (1148846080(0x447a0000, float:1000.0) ??[int, float, short, byte, char])  (LINE:486)\l0x0006: CONST  (r4 I:??[int, float, short, byte, char]) = (1148846080(0x447a0000, float:1000.0) ??[int, float, short, byte, char])  (LINE:487)\l0x0008: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:489)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0009|LOOP_START\lLOOP:0: B:31:0x0009\-\>B:53:0x0009\l|0x0009: ARITH  (r6 I:float) = (r0 I:float A[D('low' float)]) \- (r1 I:float A[D('high' float)])  (LINE:490)\l0x000b: INVOKE  (r6 I:float) = (r6 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x000f: CONST  (r7 I:??[int, float, short, byte, char]) = (1008981770(0x3c23d70a, float:0.01) ??[int, float, short, byte, char]) \l0x0012: CMP_L  (r6 I:int) = (r6 I:float), (r7 I:float) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|0x0014: IF  (r6 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:50:0x0066 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0016|0x0016: ARITH  (r6 I:float) = (r1 I:float A[D('high' float)]) \- (r0 I:float A[D('low' float)])  (LINE:491)\l0x0018: CONST  (r7 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l0x001a: ARITH  (r6 I:float) = (r6 I:float) \/ (r7 I:float) \l0x001b: ARITH  (r2 I:float A[D('mid' float)]) = (r0 I:float A[D('low' float)]) + (r6 I:float) \l0x001d: INVOKE  (r6 I:androidx.core.content.res.CamColor) = (r2 I:float A[D('mid' float)]), (r14 I:float A[D('chroma' float)]), (r13 I:float A[D('hue' float)]) type: STATIC call: androidx.core.content.res.CamColor.fromJch(float, float, float):androidx.core.content.res.CamColor A[MD:(float, float, float):androidx.core.content.res.CamColor (m)] (LINE:493)\l0x0021: INVOKE  (r7 I:int) = (r6 I:androidx.core.content.res.CamColor A[D('camBeforeClip' androidx.core.content.res.CamColor)]) type: VIRTUAL call: androidx.core.content.res.CamColor.viewedInSrgb():int A[MD:():int (m)] (LINE:497)\l0x0025: INVOKE  (r8 I:float) = (r7 I:int A[D('clipped' int)]) type: STATIC call: androidx.core.content.res.CamUtils.lStarFromInt(int):float A[MD:(int):float (m)] (LINE:498)\l0x0029: ARITH  (r9 I:float) = (r15 I:float A[D('lstar' float)]) \- (r8 I:float A[D('clippedLstar' float)])  (LINE:499)\l0x002b: INVOKE  (r9 I:float) = (r9 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x002f: CONST  (r10 I:??[int, float, short, byte, char]) = (1045220557(0x3e4ccccd, float:0.2) ??[int, float, short, byte, char])  (LINE:502)\l0x0032: CMP_G  (r10 I:int) = (r9 I:float A[D('dL' float)]), (r10 I:float) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0034|0x0034: IF  (r10 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:38:0x0054 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0036|0x0036: INVOKE  (r10 I:androidx.core.content.res.CamColor) = (r7 I:int A[D('clipped' int)]) type: STATIC call: androidx.core.content.res.CamColor.fromColor(int):androidx.core.content.res.CamColor A[MD:(int):androidx.core.content.res.CamColor (m)] (LINE:507)\l0x003b: INVOKE  (r11 I:float) = (r10 I:androidx.core.content.res.CamColor A[D('camClipped' androidx.core.content.res.CamColor)]) type: VIRTUAL call: androidx.core.content.res.CamColor.getJ():float A[MD:():float (m)] (LINE:509)\l0x003f: INVOKE  (r12 I:float) = (r10 I:androidx.core.content.res.CamColor A[D('camClipped' androidx.core.content.res.CamColor)]) type: VIRTUAL call: androidx.core.content.res.CamColor.getChroma():float A[MD:():float (m)]\l0x0043: INVOKE  (r11 I:androidx.core.content.res.CamColor) = (r11 I:float), (r12 I:float), (r13 I:float A[D('hue' float)]) type: STATIC call: androidx.core.content.res.CamColor.fromJch(float, float, float):androidx.core.content.res.CamColor A[MD:(float, float, float):androidx.core.content.res.CamColor (m)]\l0x0047: INVOKE  (r11 I:float) = \l  (r10 I:androidx.core.content.res.CamColor A[D('camClipped' androidx.core.content.res.CamColor)])\l  (r11 I:androidx.core.content.res.CamColor)\l type: VIRTUAL call: androidx.core.content.res.CamColor.distance(androidx.core.content.res.CamColor):float A[MD:(androidx.core.content.res.CamColor):float (m)] (LINE:508)\l0x004b: CONST  (r12 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:510)\l0x004d: CMP_G  (r12 I:int) = (r11 I:float A[D('dE' float)]), (r12 I:float) \l}"];
Node_36 [shape=record,label="{36\:\ 0x004f|0x004f: IF  (r12 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:38:0x0054 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0051|0x0051: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestdL' float)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dL' float)])  (LINE:511)\l0x0052: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestdE' float)]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dE' float)])  (LINE:512)\l0x0053: MOVE  (r5 I:??[OBJECT, ARRAY] A[D('bestCam' androidx.core.content.res.CamColor)]) = (r10 I:??[OBJECT, ARRAY] A[D('camClipped' androidx.core.content.res.CamColor)])  (LINE:513)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0054|0x0054: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('camClipped' androidx.core.content.res.CamColor)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:523)\l0x0055: CMP_L  (r11 I:int) = (r3 I:float A[D('bestdL' float)]), (r10 I:float) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0057|0x0057: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x005e \l}"];
Node_40 [shape=record,label="{40\:\ 0x0059|0x0059: CMP_L  (r10 I:int) = (r4 I:float A[D('bestdE' float)]), (r10 I:float) \l}"];
Node_41 [shape=record,label="{41\:\ 0x005b|0x005b: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x005e \l}"];
Node_51 [shape=record,label="{51\:\ 0x0066|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0066|RETURN\l|0x0066: RETURN  (r5 I:androidx.core.content.res.CamColor A[D('bestCam' androidx.core.content.res.CamColor)])  (LINE:534)\l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x005e|0x005e: CMP_G  (r10 I:int) = (r8 I:float A[D('clippedLstar' float)]), (r15 I:float A[D('lstar' float)])  (LINE:527)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0060|0x0060: IF  (r10 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:49:0x0064 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0064|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0064|0x0064: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('high' float)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('mid' float)])  (LINE:530)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0009|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x0009|LOOP_END\lSYNTHETIC\lLOOP:0: B:31:0x0009\-\>B:53:0x0009\l}"];
Node_52 [shape=record,label="{52\:\ 0x0062|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0062|0x0062: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('low' float)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('mid' float)])  (LINE:528)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0009|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0066|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static androidx.core.content.res.CamColor androidx.core.content.res.CamColor.findCamByJ((r13 I:float A[D('hue' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:float A[D('chroma' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:float A[D('lstar' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:45:0x0062 \-\> B:31:0x0009, BACK_EDGE: B:46:0x0064 \-\> B:31:0x0009, CROSS_EDGE: B:39:0x0057 \-\> B:43:0x005e, CROSS_EDGE: B:36:0x004f \-\> B:38:0x0054, CROSS_EDGE: B:34:0x0034 \-\> B:38:0x0054, CROSS_EDGE: B:32:0x0014 \-\> B:48:0x0066\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003a\-0x0054: r10 'camClipped' Landroidx\/core\/content\/res\/CamColor;\l  0x004b\-0x0054: r11 'dE' F\l  0x0021\-0x0065: r6 'camBeforeClip' Landroidx\/core\/content\/res\/CamColor;\l  0x0025\-0x0065: r7 'clipped' I\l  0x0029\-0x0065: r8 'clippedLstar' F\l  0x002f\-0x0065: r9 'dL' F\l  0x0001\-0x0066: r0 'low' F\l  0x0003\-0x0066: r1 'high' F\l  0x0004\-0x0066: r2 'mid' F\l  0x0006\-0x0066: r3 'bestdL' F\l  0x0008\-0x0066: r4 'bestdE' F\l  0x0009\-0x0066: r5 'bestCam' Landroidx\/core\/content\/res\/CamColor;\l  \-1 \-0x0066: r13 'hue' F\l  \-1 \-0x0066: r14 'chroma' F\l  \-1 \-0x0066: r15 'lstar' F\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_50;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_43;
Node_40 -> Node_41;
Node_41 -> Node_43;
Node_41 -> Node_51[style=dashed];
Node_51 -> Node_48;
Node_48 -> Node_29;
Node_43 -> Node_44;
Node_44 -> Node_49;
Node_44 -> Node_52[style=dashed];
Node_49 -> Node_46;
Node_46 -> Node_54;
Node_54 -> Node_53;
Node_53 -> Node_31;
Node_52 -> Node_45;
Node_45 -> Node_55;
Node_55 -> Node_53;
Node_50 -> Node_48;
}

