digraph "CFG forandroidx.core.content.res.GrowingArrayUtils.insert([JIIJ)[J" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: ARITH  (r0 I:int) = (r4 I:int A[D('currentSize' int)]) + (1 int)  (LINE:139)\l0x0002: ARRAY_LENGTH  (r1 I:int) = (r3 I:??[] A[D('array' long[])]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0003|0x0003: IF  (r0 I:??[int, byte, short, char]) \> (r1 I:??[int, byte, short, char])  \-\> B:14:0x000f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: ARITH  (r0 I:int) = (r5 I:int A[D('index' int)]) + (1 int)  (LINE:140)\l0x0007: ARITH  (r1 I:int) = (r4 I:int A[D('currentSize' int)]) \- (r5 I:int A[D('index' int)]) \l0x0009: INVOKE  \l  (r3 I:java.lang.Object A[D('array' long[])])\l  (r5 I:int A[D('index' int)])\l  (r3 I:java.lang.Object A[D('array' long[])])\l  (r0 I:int)\l  (r1 I:int)\l type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l0x000c: APUT  \l  (r3 I:??[long, double][] A[D('array' long[])])\l  (r5 I:??[int, short, byte, char] A[D('index' int)])\l  (r6 I:??[long, double] A[D('element' long)])\l  (LINE:141)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|0x000e: RETURN  (r3 I:long[] A[D('array' long[])])  (LINE:142)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|0x000f: INVOKE  (r0 I:int) = (r4 I:int A[D('currentSize' int)]) type: STATIC call: androidx.core.content.res.GrowingArrayUtils.growSize(int):int A[MD:(int):int (m)] (LINE:145)\l0x0013: NEW_ARRAY  (r0 I:long[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: long[] \l0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:146)\l0x0016: INVOKE  \l  (r3 I:java.lang.Object A[D('array' long[])])\l  (r1 I:int)\l  (r0 I:java.lang.Object A[D('newArray' long[])])\l  (r1 I:int)\l  (r5 I:int A[D('index' int)])\l type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l0x0019: APUT  \l  (r0 I:??[long, double][] A[D('newArray' long[])])\l  (r5 I:??[int, short, byte, char] A[D('index' int)])\l  (r6 I:??[long, double] A[D('element' long)])\l  (LINE:147)\l0x001b: ARITH  (r1 I:int) = (r5 I:int A[D('index' int)]) + (1 int)  (LINE:148)\l0x001d: ARRAY_LENGTH  (r2 I:int) = (r3 I:??[] A[D('array' long[])]) \l0x001e: ARITH  (r2 I:int) = (r2 I:int) \- (r5 I:int A[D('index' int)]) \l0x001f: INVOKE  \l  (r3 I:java.lang.Object A[D('array' long[])])\l  (r5 I:int A[D('index' int)])\l  (r0 I:java.lang.Object A[D('newArray' long[])])\l  (r1 I:int)\l  (r2 I:int)\l type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:long[] A[D('newArray' long[])])  (LINE:149)\l}"];
MethodNode[shape=record,label="{public static long[] androidx.core.content.res.GrowingArrayUtils.insert((r3 I:long[] A[D('array' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('currentSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('element' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0022 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0022: r0 'newArray' [J\l  \-1 \-0x0022: r3 'array' [J\l  \-1 \-0x0022: r4 'currentSize' I\l  \-1 \-0x0022: r5 'index' I\l  \-1 \-0x0022: r6 'element' J\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

