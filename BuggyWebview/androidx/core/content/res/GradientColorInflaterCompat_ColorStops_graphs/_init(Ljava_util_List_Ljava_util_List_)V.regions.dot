digraph "CFG forandroidx.core.content.res.GradientColorInflaterCompat.ColorStops.\<init\>(Ljava\/util\/List;Ljava\/util\/List;)V" {
subgraph cluster_Region_641806078 {
label = "R(2:1|(1:3))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|int int r0 = r5.size()\lr4.mColors = new int[r0]\lr4.mOffsets = new float[r0]\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1479790151 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0010|LOOP_START\lLOOP:0: B:10:0x0010\-\>B:11:0x0012\lPHI: r1 \l  PHI: (r1v3 'i' int) = (r1v2 'i' int), (r1v4 'i' int) binds: [B:9:0x0000, B:11:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r0) goto L3\l}"];
subgraph cluster_Region_243766307 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0012|LOOP_END\lLOOP:0: B:10:0x0010\-\>B:11:0x0012\l|r4.mColors[r1] = r5.get(r1).intValue()\lr4.mOffsets[r1] = r6.get(r1).floatValue()\lr1++\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0031|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0031}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.core.content.res.GradientColorInflaterCompat.ColorStops.\<init\>((r4v0 'this' androidx.core.content.res.GradientColorInflaterCompat$ColorStops A[IMMUTABLE_TYPE, THIS]), (r5v0 'colorsList' java.util.List\<java.lang.Integer\> A[D('colorsList' java.util.List\<java.lang.Integer\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'offsetsList' java.util.List\<java.lang.Float\> A[D('offsetsList' java.util.List\<java.lang.Float\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0012 \-\> B:10:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/util\/List\<Ljava\/lang\/Integer;\>;Ljava\/util\/List\<Ljava\/lang\/Float;\>;)V\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_7 -> Node_9;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

