digraph "CFG forandroidx.core.content.res.ColorStateListInflaterCompat.modulateColorAlpha(IFF)I" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:242)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: CMP_L  (r1 I:int) = (r8 I:float A[D('lStar' float)]), (r1 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: IF  (r1 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:24:0x000e \l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (1120403456(0x42c80000, float:100.0) ??[int, float, short, byte, char]) \l0x0008: CMP_G  (r1 I:int) = (r8 I:float A[D('lStar' float)]), (r1 I:float) \l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: IF  (r1 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:24:0x000e \l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|0x000c: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|0x000f: CONST  (r2 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:243)\l0x0011: CMP_L  (r2 I:int) = (r7 I:float A[D('alphaMod' float)]), (r2 I:float) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0018 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('validLStar' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0018 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|RETURN\l|0x0017: RETURN  (r6 I:int A[D('color' int)])  (LINE:244)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|0x0018: INVOKE  (r2 I:int) = (r6 I:int A[D('color' int)]) type: STATIC call: android.graphics.Color.alpha(int):int A[MD:(int):int (c)] (LINE:247)\l0x001c: CAST (r3 I:float) = (float) (r2 I:int A[D('baseAlpha' int)])  (LINE:248)\l0x001d: ARITH  (r3 I:float) = (r3 I:float) * (r7 I:float A[D('alphaMod' float)]) \l0x001f: CONST  (r4 I:??[int, float, short, byte, char]) = (1056964608(0x3f000000, float:0.5) ??[int, float, short, byte, char]) \l0x0021: ARITH  (r3 I:float) = (r3 I:float) + (r4 I:float) \l0x0022: CAST (r3 I:int) = (int) (r3 I:float) \l0x0023: CONST  (r4 I:??[int, float, short, byte, char]) = (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0025: INVOKE  (r0 I:int) = (r3 I:int), (r0 I:int), (r4 I:int) type: STATIC call: androidx.core.math.MathUtils.clamp(int, int, int):int A[MD:(int, int, int):int (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0029|0x0029: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('validLStar' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x003b  (LINE:250)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|0x002b: INVOKE  (r3 I:androidx.core.content.res.CamColor) = (r6 I:int A[D('color' int)]) type: STATIC call: androidx.core.content.res.CamColor.fromColor(int):androidx.core.content.res.CamColor A[MD:(int):androidx.core.content.res.CamColor (m)] (LINE:251)\l0x002f: INVOKE  (r4 I:float) = (r3 I:androidx.core.content.res.CamColor A[D('baseCam' androidx.core.content.res.CamColor)]) type: VIRTUAL call: androidx.core.content.res.CamColor.getHue():float A[MD:():float (m)] (LINE:252)\l0x0033: INVOKE  (r5 I:float) = (r3 I:androidx.core.content.res.CamColor A[D('baseCam' androidx.core.content.res.CamColor)]) type: VIRTUAL call: androidx.core.content.res.CamColor.getChroma():float A[MD:():float (m)]\l0x0037: INVOKE  (r6 I:int A[D('color' int)]) = (r4 I:float), (r5 I:float), (r8 I:float A[D('lStar' float)]) type: STATIC call: androidx.core.content.res.CamColor.toColor(float, float, float):int A[MD:(float, float, float):int (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x003b|0x003b: CONST  (r3 I:??[int, float, short, byte, char] A[D('baseCam' androidx.core.content.res.CamColor)]) = (16777215(0xffffff, float:2.3509886E\-38) ??[int, float, short, byte, char])  (LINE:255)\l0x003e: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (r6 I:??[int, boolean, short, byte, char] A[D('color' int)]) \l0x003f: ARITH  (r4 I:int) = (r0 I:int A[D('alpha' int)]) \<\< (24 int) \l0x0041: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) \| (r4 I:??[int, boolean, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0042|RETURN\l|0x0042: RETURN  (r3 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static int androidx.core.content.res.ColorStateListInflaterCompat.modulateColorAlpha((r6 I:int A[D('color' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('alphaMod' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:float A[D('lStar' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0042 \-\> B:18:?, CROSS_EDGE: B:30:0x0029 \-\> B:32:0x003b, CROSS_EDGE: B:26:0x0013 \-\> B:29:0x0018, CROSS_EDGE: B:24:0x000e \-\> B:25:0x000f, CROSS_EDGE: B:20:0x0004 \-\> B:24:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002f\-0x003b: r3 'baseCam' Landroidx\/core\/content\/res\/CamColor;\l  0x0029\-0x0042: r0 'alpha' I\l  0x000f\-0x0042: r1 'validLStar' Z\l  0x001c\-0x0042: r2 'baseAlpha' I\l  \-1 \-0x0042: r6 'color' I\l  \-1 \-0x0042: r7 'alphaMod' F\l  \-1 \-0x0042: r8 'lStar' F\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_24;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_18;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_18;
Node_24 -> Node_25;
}

