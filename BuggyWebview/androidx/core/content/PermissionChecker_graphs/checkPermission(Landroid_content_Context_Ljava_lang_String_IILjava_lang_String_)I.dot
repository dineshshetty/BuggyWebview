digraph "CFG forandroidx.core.content.PermissionChecker.checkPermission(Landroid\/content\/Context;Ljava\/lang\/String;IILjava\/lang\/String;)I" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000}"];
Node_33 [shape=record,label="{33\:\ 0x0005|if (r6.checkPermission(r7, r8, r9) != (\-1)) goto L5\l}"];
Node_34 [shape=record,label="{34\:\ 0x0007|RETURN\l|return \-1\l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0008|java.lang.String r0 = androidx.core.app.AppOpsManagerCompat.permissionToOp(r7)\l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|if (r0 != null) goto L8\l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|RETURN\l|return 0\l}"];
Node_38 [shape=record,label="{38\:\ 0x0010|if (r10 != null) goto L15\l}"];
Node_39 [shape=record,label="{39\:\ 0x0012|java.lang.String[] r3 = r6.getPackageManager().getPackagesForUid(r9)\l}"];
Node_40 [shape=record,label="{40\:\ 0x001a|if (r3 == null) goto L14\l}"];
Node_41 [shape=record,label="{41\:\ 0x001c}"];
Node_42 [shape=record,label="{42\:\ 0x001d|if (r3.length \> 0) goto L13\l}"];
Node_44 [shape=record,label="{44\:\ 0x0020|r10 = r3[0]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0023|RETURN\l|return \-1\l}"];
Node_46 [shape=record,label="{46\:\ 0x0024|PHI: r10 \l  PHI: (r10v1 'packageName' java.lang.String) = (r10v0 'packageName' java.lang.String), (r10v2 'packageName' java.lang.String) binds: [B:38:0x0010, B:44:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = android.os.Process.myUid()\ljava.lang.String r3 = r6.getPackageName()\l}"];
Node_47 [shape=record,label="{47\:\ 0x002c|if (r1 != r9) goto L26\l}"];
Node_48 [shape=record,label="{48\:\ 0x002e}"];
Node_49 [shape=record,label="{49\:\ 0x0032|if (androidx.core.util.ObjectsCompat.equals(r3, r10) == false) goto L26\l}"];
Node_50 [shape=record,label="{50\:\ 0x0034|r4 = true\l}"];
Node_52 [shape=record,label="{52\:\ 0x0037|PHI: r4 \l  PHI: (r4v1 'isCheckSelfPermission' boolean) = (r4v0 'isCheckSelfPermission' boolean), (r4v3 'isCheckSelfPermission' boolean) binds: [B:51:0x0036, B:50:0x0034] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 == false) goto L25\l}"];
Node_53 [shape=record,label="{53\:\ 0x0039|int r5 = androidx.core.app.AppOpsManagerCompat.checkOrNoteProxyOp(r6, r9, r0, r10)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0042|PHI: r5 \l  PHI: (r5v1 'checkOpResult' int) = (r5v0 'checkOpResult' int), (r5v2 'checkOpResult' int) binds: [B:54:0x003e, B:53:0x0039] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 != 0) goto L23\l}"];
Node_57 [shape=record,label="{57\:\ 0x0045|RETURN\lORIG_RETURN\l|return \-2\l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_54 [shape=record,label="{54\:\ 0x003e|int r5 = androidx.core.app.AppOpsManagerCompat.noteProxyOpNoThrow(r6, r0, r10)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0036|r4 = false\l}"];
MethodNode[shape=record,label="{public static int androidx.core.content.PermissionChecker.checkPermission((r6v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'permission' java.lang.String A[D('permission' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'pid' int A[D('pid' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'uid' int A[D('uid' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'packageName' java.lang.String A[D('packageName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x000f \-\> B:31:?, CROSS_EDGE: B:58:0x0046 \-\> B:31:?, CROSS_EDGE: B:55:0x0042 \-\> B:58:0x0046, CROSS_EDGE: B:54:0x003e \-\> B:55:0x0042, CROSS_EDGE: B:51:0x0036 \-\> B:52:0x0037, CROSS_EDGE: B:47:0x002c \-\> B:51:0x0036, CROSS_EDGE: B:45:0x0023 \-\> B:31:?, CROSS_EDGE: B:40:0x001a \-\> B:45:0x0023, CROSS_EDGE: B:38:0x0010 \-\> B:46:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_31;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_31;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_46;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_45;
Node_41 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_31;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_51;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_51;
Node_50 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_55;
Node_55 -> Node_57;
Node_55 -> Node_59[style=dashed];
Node_57 -> Node_31;
Node_59 -> Node_31;
Node_54 -> Node_55;
Node_51 -> Node_52;
}

