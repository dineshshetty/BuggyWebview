digraph "CFG forandroidx.core.widget.ListViewCompat.scrollListBy(Landroid\/widget\/ListView;I)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:39)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (19 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:19:0x000a \l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: INVOKE  (r3 I:android.widget.ListView A[D('listView' android.widget.ListView)]), (r4 I:int A[D('y' int)]) type: STATIC call: androidx.core.widget.ListViewCompat.Api19Impl.scrollListBy(android.widget.ListView, int):void A[MD:(android.widget.ListView, int):void (m)] (LINE:41)\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0022: RETURN   A[SYNTHETIC] (LINE:57)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: INVOKE  (r0 I:int) = (r3 I:android.widget.ListView A[D('listView' android.widget.ListView)]) type: VIRTUAL call: android.widget.ListView.getFirstVisiblePosition():int A[MD:():int (s)] (LINE:44)\l0x000e: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:45)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstPosition' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0012 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:46)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:49)\l0x0013: INVOKE  (r1 I:android.view.View) = (r3 I:android.widget.ListView A[D('listView' android.widget.ListView)]), (r1 I:int) type: VIRTUAL call: android.widget.ListView.getChildAt(int):android.view.View A[MD:(int):android.view.View (s)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|0x0017: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstView' android.view.View)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001a  (LINE:50)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|RETURN\l|0x0019: RETURN    (LINE:51)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|0x001a: INVOKE  (r2 I:int) = (r1 I:android.view.View A[D('firstView' android.view.View)]) type: VIRTUAL call: android.view.View.getTop():int A[MD:():int (c)] (LINE:54)\l0x001e: ARITH  (r2 I:int) = (r2 I:int) \- (r4 I:int A[D('y' int)]) \l0x001f: INVOKE  \l  (r3 I:android.widget.ListView A[D('listView' android.widget.ListView)])\l  (r0 I:int A[D('firstPosition' int)])\l  (r2 I:int A[D('newTop' int)])\l type: VIRTUAL call: android.widget.ListView.setSelectionFromTop(int, int):void A[MD:(int, int):void (c)] (LINE:55)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0022|RETURN\lORIG_RETURN\l|0x0022: RETURN    (LINE:57)\l}"];
MethodNode[shape=record,label="{public static void androidx.core.widget.ListViewCompat.scrollListBy((r3 I:android.widget.ListView A[D('listView' android.widget.ListView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0011 \-\> B:15:?, CROSS_EDGE: B:24:0x0019 \-\> B:15:?, CROSS_EDGE: B:25:0x001a \-\> B:26:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0022: r0 'firstPosition' I\l  0x0017\-0x0022: r1 'firstView' Landroid\/view\/View;\l  0x001f\-0x0022: r2 'newTop' I\l  \-1 \-0x0022: r3 'listView' Landroid\/widget\/ListView;\l  \-1 \-0x0022: r4 'y' I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_27;
Node_27 -> Node_15;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_15;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_15;
Node_25 -> Node_26;
Node_26 -> Node_15;
}

