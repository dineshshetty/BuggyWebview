digraph "CFG forandroidx.core.widget.AutoScrollHelper.getEdgeValue(FFFF)F" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: ARITH  (r0 I:float) = (r8 I:float A[D('relativeValue' float)]) * (r9 I:float A[D('size' float)])  (LINE:617)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:float) = (r0 I:float), (r1 I:float), (r10 I:float A[D('maxValue' float)]) type: STATIC call: androidx.core.widget.AutoScrollHelper.constrain(float, float, float):float A[MD:(float, float, float):float (m)]\l0x0007: INVOKE  (r2 I:float) = (r7 I:androidx.core.widget.AutoScrollHelper), (r11 I:float A[D('current' float)]), (r0 I:float A[D('edgeSize' float)]) type: DIRECT call: androidx.core.widget.AutoScrollHelper.constrainEdgeValue(float, float):float A[MD:(float, float):float (m)] (LINE:618)\l0x000b: ARITH  (r3 I:float) = (r9 I:float A[D('size' float)]) \- (r11 I:float A[D('current' float)])  (LINE:619)\l0x000d: INVOKE  (r3 I:float) = (r7 I:androidx.core.widget.AutoScrollHelper), (r3 I:float), (r0 I:float A[D('edgeSize' float)]) type: DIRECT call: androidx.core.widget.AutoScrollHelper.constrainEdgeValue(float, float):float A[MD:(float, float):float (m)]\l0x0011: ARITH  (r4 I:float) = (r3 I:float A[D('valueTrailing' float)]) \- (r2 I:float A[D('valueLeading' float)])  (LINE:620)\l0x0013: CMP_G  (r5 I:int) = (r4 I:float A[D('value' float)]), (r1 I:float)  (LINE:622)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|0x0015: IF  (r5 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:16:0x0020 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|0x0017: IGET  (r1 I:android.view.animation.Interpolator) = (r7 I:androidx.core.widget.AutoScrollHelper) androidx.core.widget.AutoScrollHelper.mEdgeInterpolator android.view.animation.Interpolator  (LINE:623)\l0x0019: NEG  (r5 I:float) = (r4 I:float A[D('value' float)]) \l0x001a: INVOKE  (r1 I:float) = (r1 I:android.view.animation.Interpolator), (r5 I:float) type: INTERFACE call: android.view.animation.Interpolator.getInterpolation(float):float A[MD:(float):float (c)]\l0x001e: NEG  (r1 I:float) = (r1 I:float) \l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|0x002a: CONST  (r5 I:??[int, float, short, byte, char]) = (\-1082130432(0xffffffffbf800000, float:\-1.0) ??[int, float, short, byte, char])  (LINE:630)\l0x002c: CONST  (r6 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x002e: INVOKE  (r5 I:float) = (r1 I:float A[D('interpolated' float)]), (r5 I:float), (r6 I:float) type: STATIC call: androidx.core.widget.AutoScrollHelper.constrain(float, float, float):float A[MD:(float, float, float):float (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0032|RETURN\l|0x0032: RETURN  (r5 I:float) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0020|0x0020: CMP_L  (r5 I:int) = (r4 I:float A[D('value' float)]), (r1 I:float A[D('interpolated' float)])  (LINE:624)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0022|0x0022: IF  (r5 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:21:0x0033 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0024|0x0024: IGET  (r1 I:android.view.animation.Interpolator) = (r7 I:androidx.core.widget.AutoScrollHelper) androidx.core.widget.AutoScrollHelper.mEdgeInterpolator android.view.animation.Interpolator  (LINE:625)\l0x0026: INVOKE  (r1 I:float) = (r1 I:android.view.animation.Interpolator), (r4 I:float A[D('value' float)]) type: INTERFACE call: android.view.animation.Interpolator.getInterpolation(float):float A[MD:(float):float (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0033|RETURN\l|0x0033: RETURN  (r1 I:float A[D('interpolated' float)])  (LINE:627)\l}"];
MethodNode[shape=record,label="{private float androidx.core.widget.AutoScrollHelper.getEdgeValue((r7 'this' I:androidx.core.widget.AutoScrollHelper A[IMMUTABLE_TYPE, THIS]), (r8 I:float A[D('relativeValue' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:float A[D('size' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:float A[D('maxValue' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:float A[D('current' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0024 \-\> B:19:0x002a, CROSS_EDGE: B:21:0x0033 \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0020: r1 'interpolated' F\l  0x002a\-0x0033: r1 'interpolated' F\l  0x0007\-0x0033: r0 'edgeSize' F\l  0x000b\-0x0033: r2 'valueLeading' F\l  0x0011\-0x0033: r3 'valueTrailing' F\l  0x0013\-0x0033: r4 'value' F\l  \-1 \-0x0033: r8 'relativeValue' F\l  \-1 \-0x0033: r9 'size' F\l  \-1 \-0x0033: r10 'maxValue' F\l  \-1 \-0x0033: r11 'current' F\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_21;
Node_18 -> Node_19;
Node_21 -> Node_12;
}

