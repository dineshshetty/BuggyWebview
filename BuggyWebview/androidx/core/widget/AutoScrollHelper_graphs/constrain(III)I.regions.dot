digraph "CFG forandroidx.core.widget.AutoScrollHelper.constrain(III)I" {
subgraph cluster_Region_597406838 {
label = "R(1:(2:(1:2)|(1:(2:(1:5)|(1:6)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1953812545 {
label = "R(2:(1:2)|(1:(2:(1:5)|(1:6))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_183898119 {
label = "IF [B:9:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|if (r0 \> r2) goto L2\l}"];
subgraph cluster_Region_772544235 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_1355431768 {
label = "R(1:(2:(1:5)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_49159128 {
label = "R(2:(1:5)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_950162858 {
label = "IF [B:11:0x0003] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0003|if (r0 \< r1) goto L5\l}"];
subgraph cluster_Region_1993848603 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0005|RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_2011592294 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0006|RETURN\l|return r0\l}"];
}
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static int androidx.core.widget.AutoScrollHelper.constrain((r0v0 'value' int A[D('value' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 'min' int A[D('min' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'max' int A[D('max' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0005 \-\> B:8:?, CROSS_EDGE: B:13:0x0006 \-\> B:8:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_8;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

