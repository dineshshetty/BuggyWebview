digraph "CFG forandroidx.core.widget.AutoScrollHelper.setEnabled(Z)Landroidx\/core\/widget\/AutoScrollHelper;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r1 I:androidx.core.widget.AutoScrollHelper) androidx.core.widget.AutoScrollHelper.mEnabled boolean  (LINE:236)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0009 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('enabled' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0009 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|0x0006: INVOKE  (r1 I:androidx.core.widget.AutoScrollHelper) type: DIRECT call: androidx.core.widget.AutoScrollHelper.requestStop():void A[MD:():void (m)] (LINE:237)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: IPUT  (r2 I:boolean A[D('enabled' boolean)]), (r1 I:androidx.core.widget.AutoScrollHelper) androidx.core.widget.AutoScrollHelper.mEnabled boolean  (LINE:240)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|RETURN\l|0x000b: RETURN  (r1 I:androidx.core.widget.AutoScrollHelper)  (LINE:241)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.core.widget.AutoScrollHelper androidx.core.widget.AutoScrollHelper.setEnabled((r1 'this' I:androidx.core.widget.AutoScrollHelper A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[D('enabled' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0004 \-\> B:14:0x0009, CROSS_EDGE: B:11:0x0002 \-\> B:14:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r2 'enabled' Z\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

