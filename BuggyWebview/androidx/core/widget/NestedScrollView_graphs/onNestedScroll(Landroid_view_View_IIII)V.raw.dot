digraph "CFG forandroidx.core.widget.NestedScrollView.onNestedScroll(Landroid\/view\/View;IIII)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:401)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: INVOKE  (r2 I:androidx.core.widget.NestedScrollView), (r7 I:int A[D('dyUnconsumed' int)]), (r0 I:int), (r1 I:int[]) type: DIRECT call: androidx.core.widget.NestedScrollView.onNestedScrollInternal(int, int, int[]):void A[MD:(int, int, int[]):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:402)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.core.widget.NestedScrollView.onNestedScroll((r2 'this' I:androidx.core.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.View A[D('target' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('dxConsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('dyConsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('dxUnconsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('dyUnconsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0005: r3 'target' Landroid\/view\/View;\l  \-1 \-0x0005: r4 'dxConsumed' I\l  \-1 \-0x0005: r5 'dyConsumed' I\l  \-1 \-0x0005: r6 'dxUnconsumed' I\l  \-1 \-0x0005: r7 'dyUnconsumed' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.ViewParent.onNestedScroll(android.view.View, int, int, int, int):void\}, androidx.core.view.NestedScrollingParent.onNestedScroll(android.view.View, int, int, int, int):void, ClspMth\{android.view.ViewGroup.onNestedScroll(android.view.View, int, int, int, int):void\}]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

