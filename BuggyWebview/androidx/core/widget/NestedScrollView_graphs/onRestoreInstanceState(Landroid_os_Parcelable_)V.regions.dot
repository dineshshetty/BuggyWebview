digraph "CFG forandroidx.core.widget.NestedScrollView.onRestoreInstanceState(Landroid\/os\/Parcelable;)V" {
subgraph cluster_Region_353025869 {
label = "R(1:(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_298437229 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_777181865 {
label = "IF [B:11:0x0002] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if ((r3 instanceof androidx.core.widget.NestedScrollView.SavedState) == false) goto L3\l}"];
subgraph cluster_Region_284953020 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|super.onRestoreInstanceState(r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_384165603 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0008|androidx.core.widget.NestedScrollView$SavedState androidx.core.widget.NestedScrollView.SavedState r0 = (androidx.core.widget.NestedScrollView.SavedState) r3\lsuper.onRestoreInstanceState(r0.getSuperState())\lr2.mSavedState = r0\lrequestLayout()\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0017}"];
MethodNode[shape=record,label="{protected void androidx.core.widget.NestedScrollView.onRestoreInstanceState((r2v0 'this' androidx.core.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r3v0 'state' android.os.Parcelable A[D('state' android.os.Parcelable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0017 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onRestoreInstanceState(android.os.Parcelable):void\}]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_15 -> Node_9;
}

