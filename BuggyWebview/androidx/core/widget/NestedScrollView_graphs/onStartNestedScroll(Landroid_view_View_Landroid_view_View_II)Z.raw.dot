digraph "CFG forandroidx.core.widget.NestedScrollView.onStartNestedScroll(Landroid\/view\/View;Landroid\/view\/View;II)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: ARITH  (r0 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('axes' int)]) & (2 ??[int, float, short, byte, char])  (LINE:351)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0006 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|SYNTHETIC\lRETURN\l|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|RETURN\lORIG_RETURN\l|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.core.widget.NestedScrollView.onStartNestedScroll((r1 'this' I:androidx.core.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r2 I:android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.view.View A[D('target' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('axes' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0006 \-\> B:14:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r2 'child' Landroid\/view\/View;\l  \-1 \-0x0007: r3 'target' Landroid\/view\/View;\l  \-1 \-0x0007: r4 'axes' I\l  \-1 \-0x0007: r5 'type' I\lMETHOD_OVERRIDE: [androidx.core.view.NestedScrollingParent2.onStartNestedScroll(android.view.View, android.view.View, int, int):boolean]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

