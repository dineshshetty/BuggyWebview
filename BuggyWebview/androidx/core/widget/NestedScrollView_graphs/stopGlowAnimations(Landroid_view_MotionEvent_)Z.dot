digraph "CFG forandroidx.core.widget.NestedScrollView.stopGlowAnimations(Landroid\/view\/MotionEvent;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|r0 = false\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|if ((androidx.core.widget.EdgeEffectCompat.getDistance(r6.mEdgeGlowTop) \> 0.0f ? 1 : (androidx.core.widget.EdgeEffectCompat.getDistance(r6.mEdgeGlowTop) == 0.0f ? 0 : \-1)) == 0) goto L4\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|androidx.core.widget.EdgeEffectCompat.onPullDistance(r6.mEdgeGlowTop, 0.0f, r7.getX() \/ ((float) getWidth()))\lr0 = true\l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|PHI: r0 \l  PHI: (r0v1 'stopped' boolean) = (r0v0 'stopped' boolean), (r0v3 'stopped' boolean) binds: [B:13:0x000a, B:14:0x000c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0024|if ((androidx.core.widget.EdgeEffectCompat.getDistance(r6.mEdgeGlowBottom) \> 0.0f ? 1 : (androidx.core.widget.EdgeEffectCompat.getDistance(r6.mEdgeGlowBottom) == 0.0f ? 0 : \-1)) == 0) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|androidx.core.widget.EdgeEffectCompat.onPullDistance(r6.mEdgeGlowBottom, 0.0f, 1.0f \- (r7.getX() \/ ((float) getWidth())))\l}"];
Node_18 [shape=record,label="{18\:\ 0x0039|RETURN\lORIG_RETURN\l|return true\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{private boolean androidx.core.widget.NestedScrollView.stopGlowAnimations((r6v0 'this' androidx.core.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r7v0 'e' android.view.MotionEvent A[D('e' android.view.MotionEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0024 \-\> B:18:0x0039, CROSS_EDGE: B:13:0x000a \-\> B:15:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

