digraph "CFG forandroidx.core.widget.NestedScrollView.doScrollY(I)V" {
subgraph cluster_Region_201626178 {
label = "R(1:(1:(1:(1:4)(1:7))))";
node [shape=record,color=blue];
subgraph cluster_Region_520789908 {
label = "R(1:(1:(1:4)(1:7)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_564961604 {
label = "IF [B:12:0x0000] THEN: R(1:(1:4)(1:7)) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|if (r3 != 0) goto L2\l}"];
subgraph cluster_Region_1477887325 {
label = "R(1:(1:4)(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1881721503 {
label = "IF [B:14:0x0005] THEN: R(1:4) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0005|if (r2.mSmoothScrollingEnabled != false) goto L4\l}"];
subgraph cluster_Region_991235377 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0007|smoothScrollBy(0, r3)\l}"];
}
subgraph cluster_Region_2138520982 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000b|scrollBy(0, r3)\l}"];
}
}
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0002}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000e|ORIG_RETURN\l}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private void androidx.core.widget.NestedScrollView.doScrollY((r2v0 'this' androidx.core.widget.NestedScrollView A[IMMUTABLE_TYPE, THIS]), (r3v0 'delta' int A[D('delta' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x000b \-\> B:17:0x000e, CROSS_EDGE: B:12:0x0000 \-\> B:17:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_12 -> Node_18[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_10 -> Node_12;
Node_13 -> Node_14;
Node_19 -> Node_11;
Node_17 -> Node_11;
Node_18 -> Node_11;
}

