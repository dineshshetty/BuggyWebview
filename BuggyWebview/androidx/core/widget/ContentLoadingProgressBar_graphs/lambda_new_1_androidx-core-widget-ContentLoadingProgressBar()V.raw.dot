digraph "CFG forandroidx.core.widget.ContentLoadingProgressBar.lambda$new$1$androidx\-core\-widget\-ContentLoadingProgressBar()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:51)\l0x0001: IPUT  (r0 I:boolean), (r3 I:androidx.core.widget.ContentLoadingProgressBar) androidx.core.widget.ContentLoadingProgressBar.mPostedShow boolean \l0x0003: IGET  (r1 I:boolean) = (r3 I:androidx.core.widget.ContentLoadingProgressBar) androidx.core.widget.ContentLoadingProgressBar.mDismissed boolean  (LINE:52)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:? \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r1 I:long) =  type: STATIC call: java.lang.System.currentTimeMillis():long A[MD:():long (c)] (LINE:53)\l0x000b: IPUT  (r1 I:long), (r3 I:androidx.core.widget.ContentLoadingProgressBar) androidx.core.widget.ContentLoadingProgressBar.mStartTime long \l0x000d: INVOKE  (r3 I:androidx.core.widget.ContentLoadingProgressBar), (r0 I:int) type: VIRTUAL call: androidx.core.widget.ContentLoadingProgressBar.setVisibility(int):void A[MD:(int):void (s)] (LINE:54)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: RETURN    (LINE:56)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ ?|SYNTHETIC\lRETURN\l|0x0010: RETURN   A[SYNTHETIC] (LINE:56)\l}"];
MethodNode[shape=record,label="{\/* synthetic *\/ void androidx.core.widget.ContentLoadingProgressBar.lambda$new$1$androidx\-core\-widget\-ContentLoadingProgressBar((r3 'this' I:androidx.core.widget.ContentLoadingProgressBar A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:3:0x0005 \-\> B:5:0x0010\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

