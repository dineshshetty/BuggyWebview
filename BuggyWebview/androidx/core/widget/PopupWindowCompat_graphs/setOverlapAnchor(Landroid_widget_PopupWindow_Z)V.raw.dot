digraph "CFG forandroidx.core.widget.PopupWindowCompat.setOverlapAnchor(Landroid\/widget\/PopupWindow;Z)V" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:93)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (23 ??[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:35:0x000a \l}"];
Node_34 [shape=record,label="{34\:\ 0x0006|0x0006: INVOKE  \l  (r4 I:android.widget.PopupWindow A[D('popupWindow' android.widget.PopupWindow)])\l  (r5 I:boolean A[D('overlapAnchor' boolean)])\l type: STATIC call: androidx.core.widget.PopupWindowCompat.Api23Impl.setOverlapAnchor(android.widget.PopupWindow, boolean):void A[MD:(android.widget.PopupWindow, boolean):void (m)] (LINE:94)\l}"];
Node_56 [shape=record,label="{56\:\ ?|SYNTHETIC\lRETURN\l|0x003f: RETURN   A[SYNTHETIC] (LINE:113)\l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x000a|0x000a: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:95)\l0x000c: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x000e|0x000e: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:57:? \l}"];
Node_37 [shape=record,label="{37\:\ 0x0010|0x0010: SGET  (r0 I:boolean) =  androidx.core.widget.PopupWindowCompat.sOverlapAnchorFieldAttempted boolean  (LINE:96)\l0x0012: CONST_STR  (r1 I:java.lang.String) =  \"PopupWindowCompatApi21\" \l}"];
Node_38 [shape=record,label="{38\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x002d \l}"];
Node_39 [shape=record,label="{39\:\ 0x0016|0x0016: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:98)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0017|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_40 [shape=record,label="{40\:\ 0x0017|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NoSuchFieldException \-\> 0x0025, blocks: (B:40:0x0017), top: B:52:0x0017 \}\lCatch: NoSuchFieldException \-\> 0x0025\l|0x0017: CONST_CLASS  (r2 I:java.lang.Class\<android.widget.PopupWindow\>) =  android.widget.PopupWindow.class A[TRY_ENTER]\l0x0019: CONST_STR  (r3 I:java.lang.String) =  \"mOverlapAnchor\" \l0x001b: INVOKE  (r2 I:java.lang.reflect.Field) = (r2 I:java.lang.Class), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.Class.getDeclaredField(java.lang.String):java.lang.reflect.Field A[Catch: NoSuchFieldException \-\> 0x0025, MD:(java.lang.String):java.lang.reflect.Field throws java.lang.NoSuchFieldException (c)]\l0x001f: SPUT  (r2 I:java.lang.reflect.Field) androidx.core.widget.PopupWindowCompat.sOverlapAnchorField java.lang.reflect.Field A[Catch: NoSuchFieldException \-\> 0x0025]\l0x0021: INVOKE  (r2 I:java.lang.reflect.Field), (r0 I:boolean) type: VIRTUAL call: java.lang.reflect.Field.setAccessible(boolean):void A[Catch: NoSuchFieldException \-\> 0x0025, MD:(boolean):void throws java.lang.SecurityException (c), TRY_LEAVE] (LINE:99)\l}"];
Node_44 [shape=record,label="{44\:\ 0x002b|0x002b: SPUT  (r0 I:boolean) androidx.core.widget.PopupWindowCompat.sOverlapAnchorFieldAttempted boolean  (LINE:103)\l}"];
Node_53 [shape=record,label="{53\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_42 [shape=record,label="{42\:\ 0x0025|ExcHandler: NoSuchFieldException \-\> 0x0025\l|0x0025: MOVE_EXCEPTION  (r2 I:java.lang.NoSuchFieldException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NoSuchFieldException \-\> 0x0025] (LINE:100)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0026|0x0026: CONST_STR  (r3 I:java.lang.String) =  \"Could not fetch mOverlapAnchor field from PopupWindow\"  (LINE:101)\l0x0028: INVOKE  (r1 I:java.lang.String), (r3 I:java.lang.String), (r2 I:java.lang.Throwable A[D('e' java.lang.NoSuchFieldException)]) type: STATIC call: android.util.Log.i(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x002d|0x002d: SGET  (r0 I:java.lang.reflect.Field) =  androidx.core.widget.PopupWindowCompat.sOverlapAnchorField java.lang.reflect.Field  (LINE:105)\l}"];
Node_46 [shape=record,label="{46\:\ 0x002f|0x002f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:58:? \l}"];
Node_54 [shape=record,label="{54\:\ 0x0031|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_47 [shape=record,label="{47\:\ 0x0031|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{IllegalAccessException \-\> 0x0039, blocks: (B:47:0x0031), top: B:54:0x0031 \}\lCatch: IllegalAccessException \-\> 0x0039\l|0x0031: INVOKE  (r2 I:java.lang.Boolean) = (r5 I:boolean A[D('overlapAnchor' boolean)]) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[Catch: IllegalAccessException \-\> 0x0039, MD:(boolean):java.lang.Boolean (c), TRY_ENTER] (LINE:107)\l0x0035: INVOKE  \l  (r0 I:java.lang.reflect.Field)\l  (r4 I:java.lang.Object A[D('popupWindow' android.widget.PopupWindow)])\l  (r2 I:java.lang.Object)\l type: VIRTUAL call: java.lang.reflect.Field.set(java.lang.Object, java.lang.Object):void A[Catch: IllegalAccessException \-\> 0x0039, MD:(java.lang.Object, java.lang.Object):void throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c), TRY_LEAVE]\l}"];
Node_55 [shape=record,label="{55\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lRETURN\l|0x003f: RETURN   A[SYNTHETIC] (LINE:113)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0039|ExcHandler: IllegalAccessException \-\> 0x0039\l|0x0039: MOVE_EXCEPTION  (r0 I:java.lang.IllegalAccessException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \-\> 0x0039] (LINE:108)\l}"];
Node_50 [shape=record,label="{50\:\ 0x003a|0x003a: CONST_STR  (r2 I:java.lang.String) =  \"Could not set overlap anchor field in PopupWindow\"  (LINE:109)\l0x003c: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String), (r0 I:java.lang.Throwable A[D('e' java.lang.IllegalAccessException)]) type: STATIC call: android.util.Log.i(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x003f|RETURN\lORIG_RETURN\l|0x003f: RETURN    (LINE:113)\l}"];
Node_58 [shape=record,label="{58\:\ ?|SYNTHETIC\lRETURN\l|0x003f: RETURN   A[SYNTHETIC] (LINE:113)\l}"];
Node_57 [shape=record,label="{57\:\ ?|SYNTHETIC\lRETURN\l|0x003f: RETURN   A[SYNTHETIC] (LINE:113)\l}"];
MethodNode[shape=record,label="{public static void androidx.core.widget.PopupWindowCompat.setOverlapAnchor((r4 I:android.widget.PopupWindow A[D('popupWindow' android.widget.PopupWindow), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('overlapAnchor' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:46:0x002f \-\> B:51:0x003f, CROSS_EDGE: B:47:0x0031 \-\> B:51:0x003f, CROSS_EDGE: B:50:0x003a \-\> B:51:0x003f, CROSS_EDGE: B:54:0x0031 \-\> B:49:0x0039, CROSS_EDGE: B:43:0x0026 \-\> B:44:0x002b, CROSS_EDGE: B:52:0x0017 \-\> B:42:0x0025, CROSS_EDGE: B:38:0x0014 \-\> B:45:0x002d, CROSS_EDGE: B:36:0x000e \-\> B:51:0x003f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x002b: r2 'e' Ljava\/lang\/NoSuchFieldException;\l  0x003a\-0x003f: r0 'e' Ljava\/lang\/IllegalAccessException;\l  \-1 \-0x003f: r4 'popupWindow' Landroid\/widget\/PopupWindow;\l  \-1 \-0x003f: r5 'overlapAnchor' Z\lTryCatch #0 \{NoSuchFieldException \-\> 0x0025, blocks: (B:40:0x0017), top: B:52:0x0017 \}, TryCatch #1 \{IllegalAccessException \-\> 0x0039, blocks: (B:47:0x0031), top: B:54:0x0031 \}\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_56;
Node_56 -> Node_31;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_57;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_45;
Node_39 -> Node_52;
Node_52 -> Node_40;
Node_52 -> Node_42;
Node_40 -> Node_44;
Node_40 -> Node_53;
Node_44 -> Node_45;
Node_53 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_45 -> Node_46;
Node_46 -> Node_54[style=dashed];
Node_46 -> Node_58;
Node_54 -> Node_47;
Node_54 -> Node_49;
Node_47 -> Node_55;
Node_47 -> Node_59;
Node_55 -> Node_49;
Node_59 -> Node_31;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_31;
Node_58 -> Node_31;
Node_57 -> Node_31;
}

