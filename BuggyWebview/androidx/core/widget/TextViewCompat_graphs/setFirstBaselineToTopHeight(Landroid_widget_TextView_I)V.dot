digraph "CFG forandroidx.core.widget.TextViewCompat.setFirstBaselineToTopHeight(Landroid\/widget\/TextView;I)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|androidx.core.util.Preconditions.checkArgumentNonnegative(r7)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|if (android.os.Build.VERSION.SDK_INT \< 28) goto L6\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|androidx.core.widget.TextViewCompat.Api28Impl.setFirstBaselineToTopHeight(r6, r7)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|android.graphics.Paint$FontMetricsInt r0 = r6.getPaint().getFontMetricsInt()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|if (android.os.Build.VERSION.SDK_INT \< 16) goto L16\l}"];
Node_26 [shape=record,label="{26\:\ 0x001b}"];
Node_27 [shape=record,label="{27\:\ 0x001f|if (androidx.core.widget.TextViewCompat.Api16Impl.getIncludeFontPadding(r6) == false) goto L10\l}"];
Node_29 [shape=record,label="{29\:\ 0x0022|int r1 = r0.ascent\l}"];
Node_31 [shape=record,label="{31\:\ 0x0027|PHI: r1 \l  PHI: (r1v3 'fontMetricsTop' int) = (r1v2 'fontMetricsTop' int), (r1v5 'fontMetricsTop' int) binds: [B:30:0x0025, B:29:0x0022] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_32 [shape=record,label="{32\:\ 0x002b|if (r7 \<= java.lang.Math.abs(r1)) goto L15\l}"];
Node_33 [shape=record,label="{33\:\ 0x002d|int r2 = r7 + r1\lr6.setPadding(r6.getPaddingLeft(), r2, r6.getPaddingRight(), r6.getPaddingBottom())\l}"];
Node_34 [shape=record,label="{34\:\ 0x003e|RETURN\lORIG_RETURN\l|return\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_30 [shape=record,label="{30\:\ 0x0025|int r1 = r0.top\l}"];
MethodNode[shape=record,label="{public static void androidx.core.widget.TextViewCompat.setFirstBaselineToTopHeight((r6v0 'textView' android.widget.TextView A[D('textView' android.widget.TextView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'firstBaselineToTopHeight' int A[D('firstBaselineToTopHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x003e \-\> B:19:?, CROSS_EDGE: B:32:0x002b \-\> B:34:0x003e, CROSS_EDGE: B:30:0x0025 \-\> B:31:0x0027, CROSS_EDGE: B:25:0x0019 \-\> B:30:0x0025\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_19;
Node_35 -> Node_19;
Node_30 -> Node_31;
}

