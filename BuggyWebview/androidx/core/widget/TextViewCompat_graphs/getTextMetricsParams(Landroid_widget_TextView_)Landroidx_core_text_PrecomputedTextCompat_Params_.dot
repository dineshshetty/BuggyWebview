digraph "CFG forandroidx.core.widget.TextViewCompat.getTextMetricsParams(Landroid\/widget\/TextView;)Landroidx\/core\/text\/PrecomputedTextCompat$Params;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 28) goto L6\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006}"];
Node_19 [shape=record,label="{19\:\ 0x000f|RETURN\l|return new androidx.core.text.PrecomputedTextCompat.Params(androidx.core.widget.TextViewCompat.Api28Impl.getTextMetricsParams(r3))\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|androidx.core.text.PrecomputedTextCompat$Params$Builder r0 = new androidx.core.text.PrecomputedTextCompat.Params.Builder(new android.text.TextPaint(r3.getPaint()))\l}"];
Node_21 [shape=record,label="{21\:\ 0x0022|if (android.os.Build.VERSION.SDK_INT \< 23) goto L9\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|r0.setBreakStrategy(androidx.core.widget.TextViewCompat.Api23Impl.getBreakStrategy(r3))\lr0.setHyphenationFrequency(androidx.core.widget.TextViewCompat.Api23Impl.getHyphenationFrequency(r3))\l}"];
Node_23 [shape=record,label="{23\:\ 0x0032}"];
Node_24 [shape=record,label="{24\:\ 0x0036|if (android.os.Build.VERSION.SDK_INT \< 18) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x0038|r0.setTextDirection(getTextDirectionHeuristic(r3))\l}"];
Node_26 [shape=record,label="{26\:\ 0x003f}"];
Node_27 [shape=record,label="{27\:\ 0x0043|RETURN\l|return r0.build()\l}"];
MethodNode[shape=record,label="{public static androidx.core.text.PrecomputedTextCompat$Params androidx.core.widget.TextViewCompat.getTextMetricsParams((r3v0 'textView' android.widget.TextView A[D('textView' android.widget.TextView), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0043 \-\> B:15:?, CROSS_EDGE: B:24:0x0036 \-\> B:26:0x003f, CROSS_EDGE: B:21:0x0022 \-\> B:23:0x0032\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_15;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

