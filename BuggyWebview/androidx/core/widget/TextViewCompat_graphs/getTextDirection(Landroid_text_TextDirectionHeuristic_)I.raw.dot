digraph "CFG forandroidx.core.widget.TextViewCompat.getTextDirection(Landroid\/text\/TextDirectionHeuristic;)I" {
Node_33 [shape=record,label="{33\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0000|0x0000: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.FIRSTSTRONG_RTL android.text.TextDirectionHeuristic  (LINE:989)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0003|0x0003: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0006 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:int)  (LINE:990)\l}"];
Node_34 [shape=record,label="{34\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0006|0x0006: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.FIRSTSTRONG_LTR android.text.TextDirectionHeuristic  (LINE:991)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x000b \l}"];
Node_40 [shape=record,label="{40\:\ 0x000a|RETURN\l|0x000a: RETURN  (r1 I:int)  (LINE:992)\l}"];
Node_41 [shape=record,label="{41\:\ 0x000b|0x000b: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.ANYRTL_LTR android.text.TextDirectionHeuristic  (LINE:993)\l}"];
Node_42 [shape=record,label="{42\:\ 0x000d|0x000d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0011 \l}"];
Node_43 [shape=record,label="{43\:\ 0x000f|RETURN\l|0x000f: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:994)\l0x0010: RETURN  (r0 I:int) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0011|0x0011: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.LTR android.text.TextDirectionHeuristic  (LINE:995)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0017 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0015|RETURN\l|0x0015: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:996)\l0x0016: RETURN  (r0 I:int) \l}"];
Node_49 [shape=record,label="{49\:\ 0x0017|0x0017: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.RTL android.text.TextDirectionHeuristic  (LINE:997)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0019|0x0019: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x001d \l}"];
Node_51 [shape=record,label="{51\:\ 0x001b|RETURN\l|0x001b: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:998)\l0x001c: RETURN  (r0 I:int) \l}"];
Node_53 [shape=record,label="{53\:\ 0x001d|0x001d: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.LOCALE android.text.TextDirectionHeuristic  (LINE:999)\l}"];
Node_54 [shape=record,label="{54\:\ 0x001f|0x001f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0023 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0021|RETURN\l|0x0021: CONST  (r0 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char])  (LINE:1000)\l0x0022: RETURN  (r0 I:int) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0023|0x0023: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.FIRSTSTRONG_LTR android.text.TextDirectionHeuristic  (LINE:1001)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0029 \l}"];
Node_59 [shape=record,label="{59\:\ 0x0027|RETURN\l|0x0027: CONST  (r0 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char])  (LINE:1002)\l0x0028: RETURN  (r0 I:int) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0029|0x0029: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.FIRSTSTRONG_RTL android.text.TextDirectionHeuristic  (LINE:1003)\l}"];
Node_62 [shape=record,label="{62\:\ 0x002b|0x002b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heuristic' android.text.TextDirectionHeuristic)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x002f \l}"];
Node_63 [shape=record,label="{63\:\ 0x002d|RETURN\l|0x002d: CONST  (r0 I:??[int, float, short, byte, char]) = (7 ??[int, float, short, byte, char])  (LINE:1004)\l0x002e: RETURN  (r0 I:int) \l}"];
Node_65 [shape=record,label="{65\:\ 0x002f|RETURN\l|0x002f: RETURN  (r1 I:int)  (LINE:1006)\l}"];
MethodNode[shape=record,label="{private static int androidx.core.widget.TextViewCompat.getTextDirection((r2 I:android.text.TextDirectionHeuristic A[D('heuristic' android.text.TextDirectionHeuristic), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x000a \-\> B:34:?, CROSS_EDGE: B:44:0x0010 \-\> B:34:?, CROSS_EDGE: B:48:0x0016 \-\> B:34:?, CROSS_EDGE: B:52:0x001c \-\> B:34:?, CROSS_EDGE: B:56:0x0022 \-\> B:34:?, CROSS_EDGE: B:60:0x0028 \-\> B:34:?, CROSS_EDGE: B:64:0x002e \-\> B:34:?, CROSS_EDGE: B:65:0x002f \-\> B:34:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002f: r2 'heuristic' Landroid\/text\/TextDirectionHeuristic;\l}"];
MethodNode -> Node_33;Node_33 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_34;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_34;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_45;
Node_43 -> Node_34;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_49;
Node_47 -> Node_34;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_53;
Node_51 -> Node_34;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_57;
Node_55 -> Node_34;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_61;
Node_59 -> Node_34;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_65;
Node_63 -> Node_34;
Node_65 -> Node_34;
}

