digraph "CFG forandroidx.core.widget.TextViewCompat.retrieveIntFromField(Ljava\/lang\/reflect\/Field;Landroid\/widget\/TextView;)I" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IllegalAccessException \-\> 0x0005, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lCatch: IllegalAccessException \-\> 0x0005\l|0x0000: INVOKE  (r0 I:int) = \l  (r3 I:java.lang.reflect.Field A[D('field' java.lang.reflect.Field)])\l  (r4 I:java.lang.Object A[D('textView' android.widget.TextView)])\l type: VIRTUAL call: java.lang.reflect.Field.getInt(java.lang.Object):int A[Catch: IllegalAccessException \-\> 0x0005, MD:(java.lang.Object):int throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c), TRY_ENTER, TRY_LEAVE] (LINE:129)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|ExcHandler: IllegalAccessException \-\> 0x0005\l|0x0005: MOVE_EXCEPTION  (r0 I:java.lang.IllegalAccessException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \-\> 0x0005] (LINE:130)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:131)\l0x0008: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x000b: CONST_STR  (r2 I:java.lang.String) =  \"Could not retrieve value of \" \l0x000d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0010: INVOKE  (r2 I:java.lang.String) = (r3 I:java.lang.reflect.Field A[D('field' java.lang.reflect.Field)]) type: VIRTUAL call: java.lang.reflect.Field.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x0014: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0017: CONST_STR  (r2 I:java.lang.String) =  \" field.\" \l0x0019: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001c: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0020: CONST_STR  (r2 I:java.lang.String) =  \"TextViewCompat\" \l0x0022: INVOKE  (r2 I:java.lang.String), (r1 I:java.lang.String) type: STATIC call: android.util.Log.d(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l0x0025: CONST  (r0 I:??[int, float, short, byte, char] A[D('e' java.lang.IllegalAccessException)]) = (\-1 ??[int, float, short, byte, char])  (LINE:133)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|RETURN\l|0x0026: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private static int androidx.core.widget.TextViewCompat.retrieveIntFromField((r3 I:java.lang.reflect.Field A[D('field' java.lang.reflect.Field), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.widget.TextView A[D('textView' android.widget.TextView), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0026 \-\> B:10:?, CROSS_EDGE: B:16:0x0000 \-\> B:13:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0025: r0 'e' Ljava\/lang\/IllegalAccessException;\l  \-1 \-0x0026: r3 'field' Ljava\/lang\/reflect\/Field;\l  \-1 \-0x0026: r4 'textView' Landroid\/widget\/TextView;\lTryCatch #0 \{IllegalAccessException \-\> 0x0005, blocks: (B:11:0x0000), top: B:16:0x0000 \}\l}"];
MethodNode -> Node_9;Node_9 -> Node_16;
Node_16 -> Node_11;
Node_16 -> Node_13;
Node_11 -> Node_12;
Node_11 -> Node_17;
Node_12 -> Node_10;
Node_17 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_10;
}

