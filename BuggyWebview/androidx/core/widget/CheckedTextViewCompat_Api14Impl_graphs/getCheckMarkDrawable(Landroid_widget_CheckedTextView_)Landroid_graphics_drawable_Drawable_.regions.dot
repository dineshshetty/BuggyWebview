digraph "CFG forandroidx.core.widget.CheckedTextViewCompat.Api14Impl.getCheckMarkDrawable(Landroid\/widget\/CheckedTextView;)Landroid\/graphics\/drawable\/Drawable;" {
subgraph cluster_Region_594624420 {
label = "R(4:(2:(1:5)|6)|10|(1:(1:16))|12)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_433762498 {
label = "IF [B:24:0x0004] THEN: R(2:(1:5)|6) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0004|if (androidx.core.widget.CheckedTextViewCompat.Api14Impl.sResolved == false) goto L3\l}"];
subgraph cluster_Region_1813034017 {
label = "R(2:(1:5)|6)";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_108424318 {
label = "Try: R(1:5) catches: R(2:8|9)";
node [shape=record,color=blue];
subgraph cluster_Region_867786416 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0007|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NoSuchFieldException \-\> 0x0015, blocks: (B:26:0x0007), top: B:38:0x0007 \}\lCatch: NoSuchFieldException \-\> 0x0015\l|java.lang.reflect.Field java.lang.reflect.Field r2 = android.widget.CheckedTextView.class.getDeclaredField(\"mCheckMarkDrawable\")     \/\/ Catch: java.lang.NoSuchFieldException \-\> L15\landroidx.core.widget.CheckedTextViewCompat.Api14Impl.sCheckMarkDrawableField = r2     \/\/ Catch: java.lang.NoSuchFieldException \-\> L15\lr2.setAccessible(true)     \/\/ Catch: java.lang.NoSuchFieldException \-\> L15\l}"];
}
subgraph cluster_Region_1339912055 {
label = "R(2:8|9) | ExcHandler: NoSuchFieldException \-\> 0x0015\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0015|ExcHandler: NoSuchFieldException \-\> 0x0015\l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|android.util.Log.i(androidx.core.widget.CheckedTextViewCompat.TAG, \"Failed to retrieve mCheckMarkDrawable field\", r2)\l}"];
}
}
Node_30 [shape=record,label="{30\:\ 0x001b|androidx.core.widget.CheckedTextViewCompat.Api14Impl.sResolved = true\l}"];
}
}
Node_31 [shape=record,label="{31\:\ 0x001d|java.lang.reflect.Field java.lang.reflect.Field r0 = androidx.core.widget.CheckedTextViewCompat.Api14Impl.sCheckMarkDrawableField\l}"];
subgraph cluster_IfRegion_1873468706 {
label = "IF [B:32:0x0020] THEN: R(1:(1:16)) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0020|if (r0 != null) goto L14\l}"];
subgraph cluster_Region_63806190 {
label = "R(1:(1:16))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_1788188426 {
label = "Try: R(1:16) catches: R(2:18|19)";
node [shape=record,color=blue];
subgraph cluster_Region_1545901965 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0028|RETURN\l|return (android.graphics.drawable.Drawable) r0.get(r4)\l}"];
}
subgraph cluster_Region_1605698490 {
label = "R(2:18|19) | ExcHandler: IllegalAccessException \-\> 0x0029\l";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0029|ExcHandler: IllegalAccessException \-\> 0x0029\l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|android.util.Log.i(androidx.core.widget.CheckedTextViewCompat.TAG, \"Failed to get check mark drawable via reflection\", r0)\landroidx.core.widget.CheckedTextViewCompat.Api14Impl.sCheckMarkDrawableField = null\l}"];
}
}
}
}
Node_37 [shape=record,label="{37\:\ 0x0031|RETURN\l|return null\l}"];
}
subgraph cluster_Region_1339912055 {
label = "R(2:8|9) | ExcHandler: NoSuchFieldException \-\> 0x0015\l";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0015|ExcHandler: NoSuchFieldException \-\> 0x0015\l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|android.util.Log.i(androidx.core.widget.CheckedTextViewCompat.TAG, \"Failed to retrieve mCheckMarkDrawable field\", r2)\l}"];
}
subgraph cluster_Region_1605698490 {
label = "R(2:18|19) | ExcHandler: IllegalAccessException \-\> 0x0029\l";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0029|ExcHandler: IllegalAccessException \-\> 0x0029\l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|android.util.Log.i(androidx.core.widget.CheckedTextViewCompat.TAG, \"Failed to get check mark drawable via reflection\", r0)\landroidx.core.widget.CheckedTextViewCompat.Api14Impl.sCheckMarkDrawableField = null\l}"];
}
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0000}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0006}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_39 [shape=record,color=red,label="{39\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0022|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0022|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{IllegalAccessException \-\> 0x0029, blocks: (B:33:0x0022), top: B:40:0x0022 \}\lCatch: IllegalAccessException \-\> 0x0029\l}"];
Node_41 [shape=record,color=red,label="{41\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
MethodNode[shape=record,label="{static android.graphics.drawable.Drawable androidx.core.widget.CheckedTextViewCompat.Api14Impl.getCheckMarkDrawable((r4v0 'textView' android.widget.CheckedTextView A[D('textView' android.widget.CheckedTextView), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0028 \-\> B:22:?, CROSS_EDGE: B:36:0x002a \-\> B:37:0x0031, CROSS_EDGE: B:40:0x0022 \-\> B:35:0x0029, CROSS_EDGE: B:29:0x0016 \-\> B:30:0x001b, CROSS_EDGE: B:38:0x0007 \-\> B:28:0x0015, CROSS_EDGE: B:24:0x0004 \-\> B:31:0x001d\lINLINE_NOT_NEEDED\lTryCatch #0 \{NoSuchFieldException \-\> 0x0015, blocks: (B:26:0x0007), top: B:38:0x0007 \}, TryCatch #1 \{IllegalAccessException \-\> 0x0029, blocks: (B:33:0x0022), top: B:40:0x0022 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_21;Node_24 -> Node_25;
Node_24 -> Node_31[style=dashed];
Node_26 -> Node_30;
Node_26 -> Node_39;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_37[style=dashed];
Node_32 -> Node_40;
Node_34 -> Node_22;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_22;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_25 -> Node_38;
Node_38 -> Node_26;
Node_38 -> Node_28;
Node_39 -> Node_28;
Node_40 -> Node_33;
Node_40 -> Node_35;
Node_33 -> Node_34;
Node_33 -> Node_41;
Node_41 -> Node_35;
}

