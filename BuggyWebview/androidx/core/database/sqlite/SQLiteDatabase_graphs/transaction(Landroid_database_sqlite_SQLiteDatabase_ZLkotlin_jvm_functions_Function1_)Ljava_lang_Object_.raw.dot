digraph "CFG forandroidx.core.database.sqlite.SQLiteDatabaseKt.transaction(Landroid\/database\/sqlite\/SQLiteDatabase;ZLkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$transaction' android.database.sqlite.SQLiteDatabase)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"body\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('body' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('exclusive' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0011  (LINE:30)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: INVOKE  (r3 I:android.database.sqlite.SQLiteDatabase A[D('$this$transaction' android.database.sqlite.SQLiteDatabase)]) type: VIRTUAL call: android.database.sqlite.SQLiteDatabase.beginTransaction():void A[MD:():void (c)] (LINE:31)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0015: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:36)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0016|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0029, blocks: (B:7:0x0016), top: B:13:0x0016 \}\lCatch: all \-\> 0x0029\l|0x0016: INVOKE  (r2 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function1 A[D('body' kotlin.jvm.functions.Function1)])\l  (r3 I:java.lang.Object A[D('$this$transaction' android.database.sqlite.SQLiteDatabase)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0029, MD:(P1):R (m), TRY_ENTER]\l0x001a: INVOKE  (r3 I:android.database.sqlite.SQLiteDatabase A[D('$this$transaction' android.database.sqlite.SQLiteDatabase)]) type: VIRTUAL call: android.database.sqlite.SQLiteDatabase.setTransactionSuccessful():void A[Catch: all \-\> 0x0029, MD:():void (c), TRY_LEAVE] (LINE:37)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x0021: INVOKE  (r3 I:android.database.sqlite.SQLiteDatabase A[D('$this$transaction' android.database.sqlite.SQLiteDatabase)]) type: VIRTUAL call: android.database.sqlite.SQLiteDatabase.endTransaction():void A[MD:():void (c)] (LINE:40)\l0x0024: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l0x0027: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|RETURN\l|0x0028: RETURN  (r2 I:T)  (LINE:38)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|ExcHandler: all \-\> 0x0029\l|0x0029: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0029] (LINE:39)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002a|0x002a: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x002d: INVOKE  (r3 I:android.database.sqlite.SQLiteDatabase A[D('$this$transaction' android.database.sqlite.SQLiteDatabase)]) type: VIRTUAL call: android.database.sqlite.SQLiteDatabase.endTransaction():void A[MD:():void (c)] (LINE:40)\l0x0030: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0033|0x0033: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: INVOKE  (r3 I:android.database.sqlite.SQLiteDatabase A[D('$this$transaction' android.database.sqlite.SQLiteDatabase)]) type: VIRTUAL call: android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive():void A[MD:():void (c)] (LINE:33)\l}"];
MethodNode[shape=record,label="{public static final T androidx.core.database.sqlite.SQLiteDatabaseKt.transaction((r3 I:android.database.sqlite.SQLiteDatabase A[D('$this$transaction' android.database.sqlite.SQLiteDatabase), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('exclusive' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super android.database.sqlite.SQLiteDatabase, ? extends T\> A[D('body' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0033 \-\> B:1:?, CROSS_EDGE: B:13:0x0016 \-\> B:10:0x0029, CROSS_EDGE: B:5:0x0011 \-\> B:6:0x0014\lDebug Info:\l  0x001a\-0x001e: r2 'result' Ljava\/lang\/Object;\l  0x0028\-0x0029: r1 'result' Ljava\/lang\/Object;\l  0x000b\-0x0033: r0 '$i$f$transaction' I\l  \-1 \-0x0033: r3 '$this$transaction' Landroid\/database\/sqlite\/SQLiteDatabase;\l  \-1 \-0x0033: r4 'exclusive' Z\l  \-1 \-0x0033: r5 'body' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lTryCatch #0 \{all \-\> 0x0029, blocks: (B:7:0x0016), top: B:13:0x0016 \}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Landroid\/database\/sqlite\/SQLiteDatabase;ZLkotlin\/jvm\/functions\/Function1\<\-Landroid\/database\/sqlite\/SQLiteDatabase;+TT;\>;)TT;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_13;
Node_13 -> Node_7;
Node_13 -> Node_10;
Node_7 -> Node_8;
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_14 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_5 -> Node_6;
}

