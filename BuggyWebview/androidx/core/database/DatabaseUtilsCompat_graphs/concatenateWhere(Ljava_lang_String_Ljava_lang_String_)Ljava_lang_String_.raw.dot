digraph "CFG forandroidx.core.database.DatabaseUtilsCompat.concatenateWhere(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:java.lang.CharSequence A[D('a' java.lang.String)]) type: STATIC call: android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (c)] (LINE:41)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|0x0006: RETURN  (r3 I:java.lang.String A[D('b' java.lang.String)])  (LINE:42)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r3 I:java.lang.CharSequence A[D('b' java.lang.String)]) type: STATIC call: android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (c)] (LINE:44)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000e \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|0x000d: RETURN  (r2 I:java.lang.String A[D('a' java.lang.String)])  (LINE:45)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:48)\l0x0010: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0013: CONST_STR  (r1 I:java.lang.String) =  \"(\" \l0x0015: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0018: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:java.lang.String A[D('a' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001b: CONST_STR  (r1 I:java.lang.String) =  \") AND (\" \l0x001d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0020: INVOKE  (r0 I:java.lang.StringBuilder), (r3 I:java.lang.String A[D('b' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0023: CONST_STR  (r1 I:java.lang.String) =  \")\" \l0x0025: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0028: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002c|RETURN\l|0x002c: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.core.database.DatabaseUtilsCompat.concatenateWhere((r2 I:java.lang.String A[D('a' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[D('b' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Ljava\/lang\/Deprecated;=Annotation\{RUNTIME, type=Ljava\/lang\/Deprecated;, values=\{\}\}\}\lCROSS_EDGE: B:7:0x000d \-\> B:1:?, CROSS_EDGE: B:9:0x002c \-\> B:1:?\lDebug Info:\l  \-1 \-0x002c: r2 'a' Ljava\/lang\/String;\l  \-1 \-0x002c: r3 'b' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

