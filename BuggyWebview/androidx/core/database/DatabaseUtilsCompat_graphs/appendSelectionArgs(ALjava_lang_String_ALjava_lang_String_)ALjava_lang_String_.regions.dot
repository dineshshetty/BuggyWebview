digraph "CFG forandroidx.core.database.DatabaseUtilsCompat.appendSelectionArgs([Ljava\/lang\/String;[Ljava\/lang\/String;)[Ljava\/lang\/String;" {
subgraph cluster_Region_1675628388 {
label = "R(1:(2:(1:7)|(2:4|5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1499683418 {
label = "R(2:(1:7)|(2:4|5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_338622688 {
label = "IF [B:2:0x0000, B:4:0x0003] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|if (r4 == null) goto L7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|ADDED_TO_REGION\l|if (r4.length == 0) goto L7\l}"];
subgraph cluster_Region_1289792073 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0016|RETURN\l|return r5\l}"];
}
}
subgraph cluster_Region_1916583391 {
label = "R(2:4|5)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0006|java.lang.String[] java.lang.String[] r0 = new java.lang.String[r4.length + r5.length]\ljava.lang.System.arraycopy(r4, 0, r0, 0, r4.length)\ljava.lang.System.arraycopy(r5, 0, r0, r4.length, r5.length)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|return r0\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0002}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static java.lang.String[] androidx.core.database.DatabaseUtilsCompat.appendSelectionArgs((r4v0 'originalValues' java.lang.String[] A[D('originalValues' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'newValues' java.lang.String[] A[D('newValues' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Ljava\/lang\/Deprecated;=Annotation\{RUNTIME, type=Ljava\/lang\/Deprecated;, values=\{\}\}\}\lCROSS_EDGE: B:8:0x0016 \-\> B:1:?, CROSS_EDGE: B:2:0x0000 \-\> B:8:0x0016\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_2 -> Node_3[style=dashed];
Node_2 -> Node_8;
Node_4 -> Node_6[style=dashed];
Node_4 -> Node_8;
Node_8 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_0 -> Node_2;
Node_3 -> Node_4;
}

