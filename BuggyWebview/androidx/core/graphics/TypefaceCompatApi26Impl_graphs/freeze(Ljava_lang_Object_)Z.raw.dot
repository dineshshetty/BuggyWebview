digraph "CFG forandroidx.core.graphics.TypefaceCompatApi26Impl.freeze(Ljava\/lang\/Object;)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:183)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IllegalAccessException \| InvocationTargetException \-\> 0x0010, blocks: (B:14:0x0001), top: B:20:0x0001 \}\lCatch: IllegalAccessException \| InvocationTargetException \-\> 0x0010, IllegalAccessException \-\> 0x0012\l|0x0001: IGET  (r1 I:java.lang.reflect.Method) = (r3 I:androidx.core.graphics.TypefaceCompatApi26Impl) androidx.core.graphics.TypefaceCompatApi26Impl.mFreeze java.lang.reflect.Method A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0010, IllegalAccessException \-\> 0x0012, TRY_ENTER]\l0x0003: NEW_ARRAY  (r2 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0010, IllegalAccessException \-\> 0x0012]\l0x0005: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.reflect.Method), (r4 I:java.lang.Object A[D('family' java.lang.Object)]), (r2 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0010, IllegalAccessException \-\> 0x0012, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l0x0009: CHECK_CAST (r1 I:java.lang.Boolean) = (java.lang.Boolean) (r1 I:??[OBJECT, ARRAY]) A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0010, IllegalAccessException \-\> 0x0012]\l0x000b: INVOKE  (r0 I:boolean) = (r1 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0010, IllegalAccessException \-\> 0x0012, MD:():boolean (c), TRY_LEAVE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|ExcHandler: IllegalAccessException \| InvocationTargetException \-\> 0x0010\l|0x0010: MOVE_EXCEPTION  (r1 I:java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \| InvocationTargetException \-\> 0x0010] (LINE:184)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:boolean)  (LINE:185)\l}"];
MethodNode[shape=record,label="{private boolean androidx.core.graphics.TypefaceCompatApi26Impl.freeze((r3 'this' I:androidx.core.graphics.TypefaceCompatApi26Impl A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[D('family' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0013 \-\> B:12:?, CROSS_EDGE: B:20:0x0001 \-\> B:16:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0013: r1 'e' Ljava\/lang\/ReflectiveOperationException;\l  \-1 \-0x0013: r4 'family' Ljava\/lang\/Object;\lTryCatch #2 \{IllegalAccessException \| InvocationTargetException \-\> 0x0010, blocks: (B:14:0x0001), top: B:20:0x0001 \}\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_16;
Node_14 -> Node_15;
Node_14 -> Node_21;
Node_15 -> Node_12;
Node_21 -> Node_16;
Node_16 -> Node_19;
Node_19 -> Node_12;
}

