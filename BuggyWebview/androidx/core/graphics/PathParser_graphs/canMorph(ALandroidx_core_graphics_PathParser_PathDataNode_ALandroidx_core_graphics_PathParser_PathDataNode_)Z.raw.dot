digraph "CFG forandroidx.core.graphics.PathParser.canMorph([Landroidx\/core\/graphics\/PathParser$PathDataNode;[Landroidx\/core\/graphics\/PathParser$PathDataNode;)Z" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:137)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0001|0x0001: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nodesFrom' androidx.core.graphics.PathParser$PathDataNode[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x002c \l}"];
Node_29 [shape=record,label="{29\:\ 0x0003|0x0003: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nodesTo' androidx.core.graphics.PathParser$PathDataNode[])]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0006 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0006|0x0006: ARRAY_LENGTH  (r1 I:int) = (r4 I:??[] A[D('nodesFrom' androidx.core.graphics.PathParser$PathDataNode[])])  (LINE:141)\l0x0007: ARRAY_LENGTH  (r2 I:int) = (r5 I:??[] A[D('nodesTo' androidx.core.graphics.PathParser$PathDataNode[])]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x000b \l}"];
Node_33 [shape=record,label="{33\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean)  (LINE:142)\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x000b|0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:145)\l}"];
Node_35 [shape=record,label="{35\:\ 0x000c|LOOP_START\lLOOP:0: B:35:0x000c\-\>B:42:0x0026\l|0x000c: ARRAY_LENGTH  (r2 I:int) = (r4 I:??[] A[D('nodesFrom' androidx.core.graphics.PathParser$PathDataNode[])]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|0x000d: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:49:0x002a \l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|0x000f: AGET  (r2 I:??[OBJECT, ARRAY]) = \l  (r4 I:??[OBJECT, ARRAY][] A[D('nodesFrom' androidx.core.graphics.PathParser$PathDataNode[])])\l  (r1 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:146)\l0x0011: IGET  (r2 I:char) = (r2 I:androidx.core.graphics.PathParser$PathDataNode) androidx.core.graphics.PathParser.PathDataNode.mType char \l0x0013: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r5 I:??[OBJECT, ARRAY][] A[D('nodesTo' androidx.core.graphics.PathParser$PathDataNode[])])\l  (r1 I:??[int, short, byte, char] A[D('i' int)])\l \l0x0015: IGET  (r3 I:char) = (r3 I:androidx.core.graphics.PathParser$PathDataNode) androidx.core.graphics.PathParser.PathDataNode.mType char \l}"];
Node_38 [shape=record,label="{38\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0029 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0019|0x0019: AGET  (r2 I:??[OBJECT, ARRAY]) = \l  (r4 I:??[OBJECT, ARRAY][] A[D('nodesFrom' androidx.core.graphics.PathParser$PathDataNode[])])\l  (r1 I:??[int, short, byte, char] A[D('i' int)])\l \l0x001b: IGET  (r2 I:float[]) = (r2 I:androidx.core.graphics.PathParser$PathDataNode) androidx.core.graphics.PathParser.PathDataNode.mParams float[] \l0x001d: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[]) \l0x001e: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r5 I:??[OBJECT, ARRAY][] A[D('nodesTo' androidx.core.graphics.PathParser$PathDataNode[])])\l  (r1 I:??[int, short, byte, char] A[D('i' int)])\l \l0x0020: IGET  (r3 I:float[]) = (r3 I:androidx.core.graphics.PathParser$PathDataNode) androidx.core.graphics.PathParser.PathDataNode.mParams float[] \l0x0022: ARRAY_LENGTH  (r3 I:int) = (r3 I:??[]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|0x0023: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0026 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0026|LOOP_END\lLOOP:0: B:35:0x000c\-\>B:42:0x0026\l|0x0026: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:145)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0029|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0029|RETURN\l|0x0029: RETURN  (r0 I:boolean)  (LINE:148)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0029|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x002a|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x002a|RETURN\l|0x002a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:151)\l0x002b: RETURN  (r0 I:boolean) \l}"];
Node_46 [shape=record,label="{46\:\ 0x002c|RETURN\l|0x002c: RETURN  (r0 I:boolean)  (LINE:138)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.graphics.PathParser.canMorph((r4 I:androidx.core.graphics.PathParser$PathDataNode[] A[D('nodesFrom' androidx.core.graphics.PathParser$PathDataNode[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:androidx.core.graphics.PathParser$PathDataNode[] A[D('nodesTo' androidx.core.graphics.PathParser$PathDataNode[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:42:0x0026 \-\> B:35:0x000c, CROSS_EDGE: B:43:0x0029 \-\> B:26:?, CROSS_EDGE: B:38:0x0017 \-\> B:43:0x0029, CROSS_EDGE: B:45:0x002b \-\> B:26:?, CROSS_EDGE: B:46:0x002c \-\> B:26:?, CROSS_EDGE: B:28:0x0001 \-\> B:46:0x002c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x002a: r1 'i' I\l  \-1 \-0x002c: r4 'nodesFrom' [Landroidx\/core\/graphics\/PathParser$PathDataNode;\l  \-1 \-0x002c: r5 'nodesTo' [Landroidx\/core\/graphics\/PathParser$PathDataNode;\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_46;
Node_29 -> Node_31;
Node_29 -> Node_46[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_26;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_49;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_48;
Node_39 -> Node_40;
Node_40 -> Node_42;
Node_40 -> Node_47[style=dashed];
Node_42 -> Node_35;
Node_47 -> Node_43;
Node_43 -> Node_26;
Node_48 -> Node_43;
Node_49 -> Node_44;
Node_44 -> Node_26;
Node_46 -> Node_26;
}

