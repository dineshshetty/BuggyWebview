digraph "CFG forandroidx.core.graphics.PathParser.copyOfRange([FII)[F" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IF  (r6 I:??[int, byte, short, char] A[D('start' int)]) \> (r7 I:??[int, byte, short, char] A[D('end' int)])  \-\> B:22:0x001c  (LINE:54)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: ARRAY_LENGTH  (r0 I:int) = (r5 I:??[] A[D('original' float[])])  (LINE:57)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|0x0003: IF  (r6 I:??[int, byte, short, char] A[D('start' int)]) \< (0 ??[int, byte, short, char])  \-\> B:20:0x0016  (LINE:58)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|0x0005: IF  (r6 I:??[int, byte, short, char] A[D('start' int)]) \> (r0 I:??[int, byte, short, char] A[D('originalLength' int)])  \-\> B:20:0x0016 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|0x0007: ARITH  (r1 I:int) = (r7 I:int A[D('end' int)]) \- (r6 I:int A[D('start' int)])  (LINE:61)\l0x0009: ARITH  (r2 I:int) = (r0 I:int A[D('originalLength' int)]) \- (r6 I:int A[D('start' int)])  (LINE:62)\l0x000b: INVOKE  (r2 I:int) = (r1 I:int A[D('resultLength' int)]), (r2 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x000f: NEW_ARRAY  (r3 I:float[]) = (r1 I:int A[D('resultLength' int), IMMUTABLE_TYPE]) type: float[]  (LINE:63)\l0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:64)\l0x0012: INVOKE  \l  (r5 I:java.lang.Object A[D('original' float[])])\l  (r6 I:int A[D('start' int)])\l  (r3 I:java.lang.Object A[D('result' float[])])\l  (r4 I:int)\l  (r2 I:int A[D('copyLength' int)])\l type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|RETURN\l|0x0015: RETURN  (r3 I:float[] A[D('result' float[])])  (LINE:65)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|0x0016: NEW_INSTANCE  (r1 I:java.lang.ArrayIndexOutOfBoundsException A[D('resultLength' int)]) =  java.lang.ArrayIndexOutOfBoundsException  (LINE:59)\l0x0018: INVOKE  (r1 I:java.lang.ArrayIndexOutOfBoundsException) type: DIRECT call: java.lang.ArrayIndexOutOfBoundsException.\<init\>():void A[MD:():void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001b|0x001b: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|0x001c: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('originalLength' int)]) =  java.lang.IllegalArgumentException  (LINE:55)\l0x001e: INVOKE  (r0 I:java.lang.IllegalArgumentException) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>():void A[MD:():void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static float[] androidx.core.graphics.PathParser.copyOfRange((r5 I:float[] A[D('original' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('end' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001b \-\> B:13:?, CROSS_EDGE: B:16:0x0003 \-\> B:20:0x0016, CROSS_EDGE: B:23:0x0021 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0016: r1 'resultLength' I\l  0x000f\-0x0016: r2 'copyLength' I\l  0x0011\-0x0016: r3 'result' [F\l  0x0003\-0x001c: r0 'originalLength' I\l  \-1 \-0x0021: r5 'original' [F\l  \-1 \-0x0021: r6 'start' I\l  \-1 \-0x0021: r7 'end' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

