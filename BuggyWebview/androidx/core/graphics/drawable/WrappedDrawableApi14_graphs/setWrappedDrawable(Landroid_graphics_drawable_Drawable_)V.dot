digraph "CFG forandroidx.core.graphics.drawable.WrappedDrawableApi14.setWrappedDrawable(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|android.graphics.drawable.Drawable r0 = r2.mDrawable\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|if (r0 == null) goto L4\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|r0.setCallback(null)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|r2.mDrawable = r3\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|if (r3 == null) goto L9\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|r3.setCallback(r2)\lsetVisible(r3.isVisible(), true)\lsetState(r3.getState())\lsetLevel(r3.getLevel())\lsetBounds(r3.getBounds())\landroidx.core.graphics.drawable.WrappedDrawableState r0 = r2.mState\l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|if (r0 == null) goto L9\l}"];
Node_21 [shape=record,label="{21\:\ 0x0030|r0.mDrawableState = r3.getConstantState()\l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|invalidateSelf()\l}"];
Node_23 [shape=record,label="{23\:\ 0x0039|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void androidx.core.graphics.drawable.WrappedDrawableApi14.setWrappedDrawable((r2v0 'this' androidx.core.graphics.drawable.WrappedDrawableApi14 A[IMMUTABLE_TYPE, THIS]), (r3v0 'dr' android.graphics.drawable.Drawable A[D('dr' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x002e \-\> B:22:0x0036, CROSS_EDGE: B:18:0x000a \-\> B:22:0x0036, CROSS_EDGE: B:15:0x0002 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.graphics.drawable.WrappedDrawable.setWrappedDrawable(android.graphics.drawable.Drawable):void]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

