digraph "CFG forandroidx.core.graphics.drawable.WrappedDrawableApi14.setTintMode(Landroid\/graphics\/PorterDuff$Mode;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:androidx.core.graphics.drawable.WrappedDrawableState) = (r1 I:androidx.core.graphics.drawable.WrappedDrawableApi14) androidx.core.graphics.drawable.WrappedDrawableApi14.mState androidx.core.graphics.drawable.WrappedDrawableState  (LINE:300)\l0x0002: IPUT  \l  (r2 I:android.graphics.PorterDuff$Mode A[D('tintMode' android.graphics.PorterDuff$Mode)])\l  (r0 I:androidx.core.graphics.drawable.WrappedDrawableState)\l androidx.core.graphics.drawable.WrappedDrawableState.mTintMode android.graphics.PorterDuff$Mode \l0x0004: INVOKE  (r0 I:int[]) = (r1 I:androidx.core.graphics.drawable.WrappedDrawableApi14) type: VIRTUAL call: androidx.core.graphics.drawable.WrappedDrawableApi14.getState():int[] A[MD:():int[] (m)] (LINE:301)\l0x0008: INVOKE  (r1 I:androidx.core.graphics.drawable.WrappedDrawableApi14), (r0 I:int[]) type: DIRECT call: androidx.core.graphics.drawable.WrappedDrawableApi14.updateTint(int[]):boolean A[MD:(int[]):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|RETURN\l|0x000b: RETURN    (LINE:302)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.core.graphics.drawable.WrappedDrawableApi14.setTintMode((r1 'this' I:androidx.core.graphics.drawable.WrappedDrawableApi14 A[IMMUTABLE_TYPE, THIS]), (r2 I:android.graphics.PorterDuff$Mode A[D('tintMode' android.graphics.PorterDuff$Mode), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r2 'tintMode' Landroid\/graphics\/PorterDuff$Mode;\lMETHOD_OVERRIDE: [androidx.core.graphics.drawable.TintAwareDrawable.setTintMode(android.graphics.PorterDuff$Mode):void, ClspMth\{android.graphics.drawable.Drawable.setTintMode(android.graphics.PorterDuff$Mode):void\}]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

