digraph "CFG forandroidx.core.graphics.drawable.DrawableCompat.unwrap(Landroid\/graphics\/drawable\/Drawable;)Landroid\/graphics\/drawable\/Drawable;" {
subgraph cluster_Region_904254386 {
label = "R(1:(2:(1:4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_18054625 {
label = "R(2:(1:4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1343751325 {
label = "IF [B:10:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|if ((r1 instanceof androidx.core.graphics.drawable.WrappedDrawable) != false) goto L3\l}"];
subgraph cluster_Region_1570909931 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\l|return (T) ((androidx.core.graphics.drawable.WrappedDrawable) r1).getWrappedDrawable()\l}"];
}
}
subgraph cluster_Region_1178668718 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|return r1\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0000}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0004}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static T extends android.graphics.drawable.Drawable androidx.core.graphics.drawable.DrawableCompat.unwrap((r1v0 'drawable' android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T extends android.graphics.drawable.Drawable]\lSIGNATURE: \<T:Landroid\/graphics\/drawable\/Drawable;\>(Landroid\/graphics\/drawable\/Drawable;)TT;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r1v0, resolved type: android.graphics.drawable.Drawable\}\l}"];
MethodNode -> Node_7;Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_11 -> Node_12;
}

