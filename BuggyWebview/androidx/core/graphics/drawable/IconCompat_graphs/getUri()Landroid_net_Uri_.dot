digraph "CFG forandroidx.core.graphics.drawable.IconCompat.getUri()Landroid\/net\/Uri;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0003|if (r3.mType != (\-1)) goto L8\l}"];
Node_21 [shape=record,label="{21\:\ 0x0005}"];
Node_22 [shape=record,label="{22\:\ 0x0009|if (android.os.Build.VERSION.SDK_INT \< 23) goto L8\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b}"];
Node_24 [shape=record,label="{24\:\ 0x0011|RETURN\l|return androidx.core.graphics.drawable.IconCompat.Api23Impl.getUri(r3.mObj1)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|int r0 = r3.mType\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|if (r0 == 4) goto L14\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017}"];
Node_28 [shape=record,label="{28\:\ 0x0018|if (r0 != 6) goto L12\l}"];
Node_30 [shape=record,label="{30\:\ 0x001b|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"called getUri() on \")\lr1.append(r3)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0031|throw new java.lang.IllegalStateException(r1.toString())\l}"];
Node_32 [shape=record,label="{32\:\ 0x0032}"];
Node_33 [shape=record,label="{33\:\ 0x003a|RETURN\l|return android.net.Uri.parse((java.lang.String) r3.mObj1)\l}"];
MethodNode[shape=record,label="{public android.net.Uri androidx.core.graphics.drawable.IconCompat.getUri((r3v0 'this' androidx.core.graphics.drawable.IconCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0031 \-\> B:18:?, CROSS_EDGE: B:33:0x003a \-\> B:18:?, CROSS_EDGE: B:26:0x0015 \-\> B:32:0x0032, CROSS_EDGE: B:20:0x0003 \-\> B:25:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_25;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_23 -> Node_24;
Node_24 -> Node_18;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_32[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_18;
Node_32 -> Node_33;
Node_33 -> Node_18;
}

