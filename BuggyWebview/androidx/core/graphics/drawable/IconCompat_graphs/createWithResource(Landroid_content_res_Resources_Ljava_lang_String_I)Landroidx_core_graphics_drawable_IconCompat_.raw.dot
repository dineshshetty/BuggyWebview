digraph "CFG forandroidx.core.graphics.drawable.IconCompat.createWithResource(Landroid\/content\/res\/Resources;Ljava\/lang\/String;I)Landroidx\/core\/graphics\/drawable\/IconCompat;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r5 I:java.lang.Object A[D('pkg' java.lang.String)]) type: STATIC call: androidx.core.util.ObjectsCompat.requireNonNull(java.lang.Object):java.lang.Object A[MD:\<T\>:(T):T (m)] (LINE:252)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|0x0003: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('resId' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0024  (LINE:253)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:androidx.core.graphics.drawable.IconCompat) =  androidx.core.graphics.drawable.IconCompat  (LINE:256)\l0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0008: INVOKE  (r0 I:androidx.core.graphics.drawable.IconCompat), (r1 I:int) type: DIRECT call: androidx.core.graphics.drawable.IconCompat.\<init\>(int):void A[MD:(int):void (m)]\l0x000b: IPUT  \l  (r6 I:int A[D('resId' int)])\l  (r0 I:androidx.core.graphics.drawable.IconCompat A[D('rep' androidx.core.graphics.drawable.IconCompat)])\l androidx.core.graphics.drawable.IconCompat.mInt1 int  (LINE:257)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('r' android.content.res.Resources)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001f  (LINE:258)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|0x001f: IPUT  \l  (r5 I:java.lang.Object A[D('pkg' java.lang.String)])\l  (r0 I:androidx.core.graphics.drawable.IconCompat A[D('rep' androidx.core.graphics.drawable.IconCompat)])\l androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:265)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0021|0x0021: IPUT  \l  (r5 I:java.lang.String A[D('pkg' java.lang.String)])\l  (r0 I:androidx.core.graphics.drawable.IconCompat A[D('rep' androidx.core.graphics.drawable.IconCompat)])\l androidx.core.graphics.drawable.IconCompat.mString1 java.lang.String  (LINE:267)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|RETURN\l|0x0023: RETURN  (r0 I:androidx.core.graphics.drawable.IconCompat A[D('rep' androidx.core.graphics.drawable.IconCompat)])  (LINE:268)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x000f|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NotFoundException \-\> 0x0016, blocks: (B:24:0x000f), top: B:34:0x000f \}\lCatch: NotFoundException \-\> 0x0016\l|0x000f: INVOKE  (r1 I:java.lang.String) = (r4 I:android.content.res.Resources A[D('r' android.content.res.Resources)]), (r6 I:int A[D('resId' int)]) type: VIRTUAL call: android.content.res.Resources.getResourceName(int):java.lang.String A[Catch: NotFoundException \-\> 0x0016, MD:(int):java.lang.String throws android.content.res.Resources$NotFoundException (c), TRY_ENTER] (LINE:260)\l0x0013: IPUT  \l  (r1 I:java.lang.Object)\l  (r0 I:androidx.core.graphics.drawable.IconCompat A[D('rep' androidx.core.graphics.drawable.IconCompat)])\l androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object A[Catch: NotFoundException \-\> 0x0016, TRY_LEAVE]\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|ExcHandler: NotFoundException \-\> 0x0016\l|0x0016: MOVE_EXCEPTION  (r1 I:android.content.res.Resources$NotFoundException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NotFoundException \-\> 0x0016] (LINE:261)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|0x0017: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:262)\l0x0019: CONST_STR  (r3 I:java.lang.String) =  \"Icon resource cannot be found\" \l0x001b: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|0x001e: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0024|0x0024: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('rep' androidx.core.graphics.drawable.IconCompat)]) =  java.lang.IllegalArgumentException  (LINE:254)\l0x0026: CONST_STR  (r1 I:java.lang.String) =  \"Drawable resource ID must not be 0\" \l0x0028: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x002b|0x002b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static androidx.core.graphics.drawable.IconCompat androidx.core.graphics.drawable.IconCompat.createWithResource((r4 I:android.content.res.Resources A[D('r' android.content.res.Resources), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('pkg' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('resId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x000f \-\> B:30:0x0021, CROSS_EDGE: B:28:0x001e \-\> B:19:?, CROSS_EDGE: B:34:0x000f \-\> B:26:0x0016, CROSS_EDGE: B:33:0x002b \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x001f: r1 'e' Landroid\/content\/res\/Resources$NotFoundException;\l  0x000b\-0x0024: r0 'rep' Landroidx\/core\/graphics\/drawable\/IconCompat;\l  \-1 \-0x002b: r4 'r' Landroid\/content\/res\/Resources;\l  \-1 \-0x002b: r5 'pkg' Ljava\/lang\/String;\l  \-1 \-0x002b: r6 'resId' I\lTryCatch #0 \{NotFoundException \-\> 0x0016, blocks: (B:24:0x000f), top: B:34:0x000f \}\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_32;
Node_22 -> Node_23;
Node_23 -> Node_29;
Node_23 -> Node_34[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_34 -> Node_24;
Node_34 -> Node_26;
Node_24 -> Node_30;
Node_24 -> Node_35;
Node_35 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
}

