digraph "CFG forandroidx.core.graphics.drawable.IconCompat.createFromIconOrNullIfZeroResId(Landroid\/graphics\/drawable\/Icon;)Landroidx\/core\/graphics\/drawable\/IconCompat;" {
subgraph cluster_Region_1977313723 {
label = "R(1:(2:(1:5)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_577785242 {
label = "R(2:(1:5)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1018997143 {
label = "IF [B:13:0x0005, B:15:0x000b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0005|if (androidx.core.graphics.drawable.IconCompat.Api23Impl.getType(r2) == 2) goto L3\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|ADDED_TO_REGION\l|if (androidx.core.graphics.drawable.IconCompat.Api23Impl.getResId(r2) == 0) goto L5\l}"];
subgraph cluster_Region_549757599 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000d|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_243040653 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0013|RETURN\l|return androidx.core.graphics.drawable.IconCompat.Api23Impl.createFromIconInner(r2)\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0007}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000f}"];
MethodNode[shape=record,label="{public static androidx.core.graphics.drawable.IconCompat androidx.core.graphics.drawable.IconCompat.createFromIconOrNullIfZeroResId((r2v0 'icon' android.graphics.drawable.Icon A[D('icon' android.graphics.drawable.Icon), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0013 \-\> B:11:?, CROSS_EDGE: B:13:0x0005 \-\> B:18:0x000f\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_16 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_18 -> Node_19;
}

