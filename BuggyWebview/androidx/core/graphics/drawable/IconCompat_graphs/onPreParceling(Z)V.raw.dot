digraph "CFG forandroidx.core.graphics.drawable.IconCompat.onPreParceling(Z)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: IGET  (r0 I:android.graphics.PorterDuff$Mode) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mTintMode android.graphics.PorterDuff$Mode  (LINE:850)\l0x0002: INVOKE  (r0 I:java.lang.String) = (r0 I:android.graphics.PorterDuff$Mode) type: VIRTUAL call: android.graphics.PorterDuff.Mode.name():java.lang.String A[MD:():java.lang.String (c)]\l0x0006: IPUT  (r0 I:java.lang.String), (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mTintModeStr java.lang.String \l0x0008: IGET  (r0 I:int) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mType int  (LINE:851)\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"UTF\-16\" \l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: SWITCH  (r0 I:??)\l case \-1: goto B:33:0x0057\l case 0: goto B:43:?\l case 1: goto B:30:0x0037\l case 2: goto B:29:0x0028\l case 3: goto B:28:0x0021\l case 4: goto B:27:0x0010\l case 5: goto B:30:0x0037\l case 6: goto B:27:0x0010\l default: goto B:43:? \l}"];
Node_27 [shape=record,label="{27\:\ 0x0010|0x0010: IGET  (r0 I:java.lang.Object) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:874)\l0x0012: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0016: INVOKE  (r1 I:java.nio.charset.Charset) = (r1 I:java.lang.String) type: STATIC call: java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset A[MD:(java.lang.String):java.nio.charset.Charset (c)]\l0x001a: INVOKE  (r0 I:byte[]) = (r0 I:java.lang.String), (r1 I:java.nio.charset.Charset) type: VIRTUAL call: java.lang.String.getBytes(java.nio.charset.Charset):byte[] A[MD:(java.nio.charset.Charset):byte[] (c)]\l0x001e: IPUT  (r0 I:byte[]), (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_37 [shape=record,label="{37\:\ 0x0068|RETURN\lORIG_RETURN\l|0x0068: RETURN    (LINE:883)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0021|0x0021: IGET  (r0 I:java.lang.Object) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:880)\l0x0023: CHECK_CAST (r0 I:byte[]) = (byte[]) (r0 I:??[OBJECT, ARRAY]) \l0x0025: IPUT  (r0 I:byte[]), (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x0068: RETURN   A[SYNTHETIC] (LINE:883)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0028|0x0028: IGET  (r0 I:java.lang.Object) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:877)\l0x002a: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l0x002c: INVOKE  (r1 I:java.nio.charset.Charset) = (r1 I:java.lang.String) type: STATIC call: java.nio.charset.Charset.forName(java.lang.String):java.nio.charset.Charset A[MD:(java.lang.String):java.nio.charset.Charset (c)]\l0x0030: INVOKE  (r0 I:byte[]) = (r0 I:java.lang.String), (r1 I:java.nio.charset.Charset) type: VIRTUAL call: java.lang.String.getBytes(java.nio.charset.Charset):byte[] A[MD:(java.nio.charset.Charset):byte[] (c)]\l0x0034: IPUT  (r0 I:byte[]), (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0068: RETURN   A[SYNTHETIC] (LINE:883)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0037|0x0037: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isStream' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0050  (LINE:863)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0039|0x0039: IGET  (r0 I:java.lang.Object) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:864)\l0x003b: CHECK_CAST (r0 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r0 I:??[OBJECT, ARRAY]) \l0x003d: NEW_INSTANCE  (r1 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream  (LINE:865)\l0x003f: INVOKE  (r1 I:java.io.ByteArrayOutputStream) type: DIRECT call: java.io.ByteArrayOutputStream.\<init\>():void A[MD:():void (c)]\l0x0042: SGET  (r2 I:android.graphics.Bitmap$CompressFormat) =  android.graphics.Bitmap.CompressFormat.PNG android.graphics.Bitmap$CompressFormat  (LINE:866)\l0x0044: CONST  (r3 I:??[int, float, short, byte, char]) = (90 ??[int, float, short, byte, char]) \l0x0046: INVOKE  \l  (r0 I:android.graphics.Bitmap A[D('bitmap' android.graphics.Bitmap)])\l  (r2 I:android.graphics.Bitmap$CompressFormat)\l  (r3 I:int)\l  (r1 I:java.io.OutputStream A[D('data' java.io.ByteArrayOutputStream)])\l type: VIRTUAL call: android.graphics.Bitmap.compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean A[MD:(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream):boolean (c)]\l0x0049: INVOKE  (r2 I:byte[]) = (r1 I:java.io.ByteArrayOutputStream A[D('data' java.io.ByteArrayOutputStream)]) type: VIRTUAL call: java.io.ByteArrayOutputStream.toByteArray():byte[] A[MD:():byte[] (c)] (LINE:867)\l0x004d: IPUT  (r2 I:byte[]), (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mData byte[] \l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|0x0068: RETURN   A[SYNTHETIC] (LINE:883)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0050|0x0050: IGET  (r0 I:java.lang.Object) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:869)\l0x0052: CHECK_CAST (r0 I:android.os.Parcelable) = (android.os.Parcelable) (r0 I:??[OBJECT, ARRAY]) \l0x0054: IPUT  (r0 I:android.os.Parcelable), (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mParcelable android.os.Parcelable \l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x0068: RETURN   A[SYNTHETIC] (LINE:883)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0057|0x0057: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isStream' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0060  (LINE:853)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0059|0x0059: IGET  (r0 I:java.lang.Object) = (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:858)\l0x005b: CHECK_CAST (r0 I:android.os.Parcelable) = (android.os.Parcelable) (r0 I:??[OBJECT, ARRAY]) \l0x005d: IPUT  (r0 I:android.os.Parcelable), (r4 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mParcelable android.os.Parcelable \l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|0x0068: RETURN   A[SYNTHETIC] (LINE:883)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0060|0x0060: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:855)\l0x0062: CONST_STR  (r1 I:java.lang.String) =  \"Can't serialize Icon created with IconCompat#createFromIcon\" \l0x0064: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0067|0x0067: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x0068: RETURN   A[SYNTHETIC] (LINE:883)\l}"];
MethodNode[shape=record,label="{public void androidx.core.graphics.drawable.IconCompat.onPreParceling((r4 'this' I:androidx.core.graphics.drawable.IconCompat A[IMMUTABLE_TYPE, THIS]), (r5 I:boolean A[D('isStream' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0021 \-\> B:37:0x0068, CROSS_EDGE: B:29:0x0028 \-\> B:37:0x0068, CROSS_EDGE: B:31:0x0039 \-\> B:37:0x0068, CROSS_EDGE: B:32:0x0050 \-\> B:37:0x0068, CROSS_EDGE: B:34:0x0059 \-\> B:37:0x0068, CROSS_EDGE: B:36:0x0067 \-\> B:23:?, CROSS_EDGE: B:25:0x000c \-\> B:37:0x0068\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003d\-0x004f: r0 'bitmap' Landroid\/graphics\/Bitmap;\l  0x0042\-0x004f: r1 'data' Ljava\/io\/ByteArrayOutputStream;\l  \-1 \-0x007d: r5 'isStream' Z\lMETHOD_OVERRIDE: [androidx.versionedparcelable.CustomVersionedParcelable.onPreParceling(boolean):void]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_28;
Node_25 -> Node_29;
Node_25 -> Node_30;
Node_25 -> Node_33;
Node_25 -> Node_43;
Node_27 -> Node_37;
Node_37 -> Node_23;
Node_28 -> Node_38;
Node_38 -> Node_23;
Node_29 -> Node_39;
Node_39 -> Node_23;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_40;
Node_40 -> Node_23;
Node_32 -> Node_41;
Node_41 -> Node_23;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_42;
Node_42 -> Node_23;
Node_35 -> Node_36;
Node_36 -> Node_23;
Node_43 -> Node_23;
}

