digraph "CFG forandroidx.core.graphics.drawable.IconCompat.getBitmap()Landroid\/graphics\/Bitmap;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mType int  (LINE:454)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0016 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0005|0x0005: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (23 ??[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0009|0x0009: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:34:0x0016 \l}"];
Node_28 [shape=record,label="{28\:\ 0x000b|0x000b: IGET  (r0 I:java.lang.Object) = (r3 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:455)\l0x000d: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) android.graphics.Bitmap \l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0014 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: CHECK_CAST (r0 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r0 I:??[OBJECT, ARRAY])  (LINE:456)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|RETURN\l|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:458)\l0x0015: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0016|0x0016: IGET  (r0 I:int) = (r3 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mType int  (LINE:460)\l0x0018: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0020 \l}"];
Node_36 [shape=record,label="{36\:\ 0x001b|0x001b: IGET  (r0 I:java.lang.Object) = (r3 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:461)\l0x001d: CHECK_CAST (r0 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x001f|RETURN\l|0x001f: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0020|0x0020: CONST  (r2 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char])  (LINE:462)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x002c \l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|0x0023: IGET  (r0 I:java.lang.Object) = (r3 I:androidx.core.graphics.drawable.IconCompat) androidx.core.graphics.drawable.IconCompat.mObj1 java.lang.Object  (LINE:463)\l0x0025: CHECK_CAST (r0 I:android.graphics.Bitmap) = (android.graphics.Bitmap) (r0 I:??[OBJECT, ARRAY]) \l0x0027: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.Bitmap), (r1 I:boolean) type: STATIC call: androidx.core.graphics.drawable.IconCompat.createLegacyIconFromAdaptiveIcon(android.graphics.Bitmap, boolean):android.graphics.Bitmap A[MD:(android.graphics.Bitmap, boolean):android.graphics.Bitmap (m)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_42 [shape=record,label="{42\:\ 0x002c|0x002c: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:465)\l0x002e: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0030: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0033: CONST_STR  (r2 I:java.lang.String) =  \"called getBitmap() on \" \l0x0035: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0038: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x003b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003f: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0042|0x0042: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.graphics.Bitmap androidx.core.graphics.drawable.IconCompat.getBitmap((r3 'this' I:androidx.core.graphics.drawable.IconCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0015 \-\> B:23:?, CROSS_EDGE: B:37:0x001f \-\> B:23:?, CROSS_EDGE: B:41:0x002b \-\> B:23:?, CROSS_EDGE: B:43:0x0042 \-\> B:23:?, CROSS_EDGE: B:25:0x0003 \-\> B:34:0x0016\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_34;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_32 -> Node_23;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_23;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_41 -> Node_23;
Node_42 -> Node_43;
Node_43 -> Node_23;
}

