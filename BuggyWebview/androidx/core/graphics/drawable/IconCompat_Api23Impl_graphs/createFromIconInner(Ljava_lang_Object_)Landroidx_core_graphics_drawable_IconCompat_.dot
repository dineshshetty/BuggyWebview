digraph "CFG forandroidx.core.graphics.drawable.IconCompat.Api23Impl.createFromIconInner(Ljava\/lang\/Object;)Landroidx\/core\/graphics\/drawable\/IconCompat;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|androidx.core.util.Preconditions.checkNotNull(r3)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|switch(getType(r3)) \{\l    case 2: goto L10;\l    case 3: goto L3;\l    case 4: goto L8;\l    case 5: goto L3;\l    case 6: goto L6;\l    default: goto L3;\l\}\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|androidx.core.graphics.drawable.IconCompat r0 = new androidx.core.graphics.drawable.IconCompat(\-1)\lr0.mObj1 = r3\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|RETURN\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013}"];
Node_19 [shape=record,label="{19\:\ 0x001b|RETURN\l|return androidx.core.graphics.drawable.IconCompat.createWithAdaptiveBitmapContentUri(getUri(r3))\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c}"];
Node_21 [shape=record,label="{21\:\ 0x0024|RETURN\l|return androidx.core.graphics.drawable.IconCompat.createWithContentUri(getUri(r3))\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025}"];
Node_23 [shape=record,label="{23\:\ 0x0032|RETURN\l|return androidx.core.graphics.drawable.IconCompat.createWithResource(null, getResPackage(r3), getResId(r3))\l}"];
MethodNode[shape=record,label="{static androidx.core.graphics.drawable.IconCompat androidx.core.graphics.drawable.IconCompat.Api23Impl.createFromIconInner((r3v0 'icon' java.lang.Object A[D('icon' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001b \-\> B:13:?, CROSS_EDGE: B:21:0x0024 \-\> B:13:?, CROSS_EDGE: B:23:0x0032 \-\> B:13:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_18;
Node_15 -> Node_20;
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

