digraph "CFG forandroidx.core.graphics.drawable.DrawableKt.toBitmap(Landroid\/graphics\/drawable\/Drawable;IILandroid\/graphics\/Bitmap$Config;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$toBitmap' android.graphics.drawable.Drawable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INSTANCE_OF  (r0 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('$this$toBitmap' android.graphics.drawable.Drawable)]) android.graphics.drawable.BitmapDrawable  (LINE:51)\l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"bitmap\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0062 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|0x000b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$toBitmap' android.graphics.drawable.Drawable)])  (LINE:52)\l0x000c: CHECK_CAST (r0 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r0 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.drawable.BitmapDrawable) type: VIRTUAL call: android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap A[MD:():android.graphics.Bitmap (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x005a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('config' android.graphics.Bitmap$Config)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0023  (LINE:56)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$toBitmap' android.graphics.drawable.Drawable)]) \l0x0017: CHECK_CAST (r0 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r0 I:??[OBJECT, ARRAY]) \l0x0019: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.drawable.BitmapDrawable) type: VIRTUAL call: android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap A[MD:():android.graphics.Bitmap (c)]\l0x001d: INVOKE  (r0 I:android.graphics.Bitmap$Config) = (r0 I:android.graphics.Bitmap) type: VIRTUAL call: android.graphics.Bitmap.getConfig():android.graphics.Bitmap$Config A[MD:():android.graphics.Bitmap$Config (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('config' android.graphics.Bitmap$Config)])  \-\> B:19:0x0062 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|0x0023: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$toBitmap' android.graphics.drawable.Drawable)])  (LINE:59)\l0x0024: CHECK_CAST (r0 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r0 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.drawable.BitmapDrawable) type: VIRTUAL call: android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap A[MD:():android.graphics.Bitmap (c)]\l0x002a: INVOKE  (r0 I:int) = (r0 I:android.graphics.Bitmap) type: VIRTUAL call: android.graphics.Bitmap.getWidth():int A[MD:():int (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|0x002e: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('width' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0048 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|0x0030: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$toBitmap' android.graphics.drawable.Drawable)]) \l0x0031: CHECK_CAST (r0 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r0 I:??[OBJECT, ARRAY]) \l0x0033: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.drawable.BitmapDrawable) type: VIRTUAL call: android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap A[MD:():android.graphics.Bitmap (c)]\l0x0037: INVOKE  (r0 I:int) = (r0 I:android.graphics.Bitmap) type: VIRTUAL call: android.graphics.Bitmap.getHeight():int A[MD:():int (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x003b|0x003b: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('height' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0048 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003d|0x003d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$toBitmap' android.graphics.drawable.Drawable)])  (LINE:60)\l0x003e: CHECK_CAST (r0 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r0 I:??[OBJECT, ARRAY]) \l0x0040: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.drawable.BitmapDrawable) type: VIRTUAL call: android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap A[MD:():android.graphics.Bitmap (c)]\l0x0044: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|RETURN\l|0x0047: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|0x0048: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$toBitmap' android.graphics.drawable.Drawable)])  (LINE:62)\l0x0049: CHECK_CAST (r0 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r0 I:??[OBJECT, ARRAY]) \l0x004b: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.drawable.BitmapDrawable) type: VIRTUAL call: android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap A[MD:():android.graphics.Bitmap (c)]\l0x004f: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0050: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:android.graphics.Bitmap), (r8 I:int A[D('width' int)]), (r9 I:int A[D('height' int)]), (r1 I:boolean) type: STATIC call: android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap, int, int, boolean):android.graphics.Bitmap A[MD:(android.graphics.Bitmap, int, int, boolean):android.graphics.Bitmap (c)]\l0x0054: CONST_STR  (r1 I:java.lang.String) =  \"createScaledBitmap(bitmap, width, height, true)\" \l0x0056: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0059|RETURN\l|0x0059: RETURN  (r0 I:android.graphics.Bitmap) \l}"];
Node_17 [shape=record,label="{17\:\ 0x005a|0x005a: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:54)\l0x005c: CONST_STR  (r1 I:java.lang.String) =  \"bitmap is null\" \l0x005e: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0061|0x0061: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0062|0x0062: INVOKE  (r0 I:android.graphics.Rect) = (r7 I:android.graphics.drawable.Drawable A[D('$this$toBitmap' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getBounds():android.graphics.Rect A[MD:():android.graphics.Rect (c)] (LINE:66)\l0x0066: CONST_STR  (r2 I:java.lang.String) =  \"bounds\" \l0x0068: INVOKE  (r0 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x006b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x006c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x006d: IGET  (r2 I:int) = (r2 I:android.graphics.Rect A[D('$this$component1$iv' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:119)\l0x0070: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0071: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0072: IGET  (r3 I:int) = (r3 I:android.graphics.Rect A[D('$this$component2$iv' android.graphics.Rect)]) android.graphics.Rect.top int  (LINE:120)\l0x0075: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0076: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0077: IGET  (r4 I:int) = (r4 I:android.graphics.Rect A[D('$this$component3$iv' android.graphics.Rect)]) android.graphics.Rect.right int  (LINE:121)\l0x007a: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x007b: IGET  (r0 I:int) = (r0 I:android.graphics.Rect A[D('$this$component4$iv' android.graphics.Rect)]) android.graphics.Rect.bottom int  (LINE:122)\l}"];
Node_20 [shape=record,label="{20\:\ 0x007e|0x007e: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('config' android.graphics.Bitmap$Config)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0083  (LINE:68)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0080|0x0080: SGET  (r5 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config \l}"];
Node_23 [shape=record,label="{23\:\ 0x0084|0x0084: INVOKE  (r5 I:android.graphics.Bitmap) = (r8 I:int A[D('width' int)]), (r9 I:int A[D('height' int)]), (r5 I:android.graphics.Bitmap$Config) type: STATIC call: android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap (c)]\l0x0088: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:69)\l0x0089: INVOKE  \l  (r7 I:android.graphics.drawable.Drawable A[D('$this$toBitmap' android.graphics.drawable.Drawable)])\l  (r6 I:int)\l  (r6 I:int)\l  (r8 I:int A[D('width' int)])\l  (r9 I:int A[D('height' int)])\l type: VIRTUAL call: android.graphics.drawable.Drawable.setBounds(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l0x008c: NEW_INSTANCE  (r6 I:android.graphics.Canvas) =  android.graphics.Canvas  (LINE:70)\l0x008e: INVOKE  (r6 I:android.graphics.Canvas), (r5 I:android.graphics.Bitmap A[D('bitmap' android.graphics.Bitmap)]) type: DIRECT call: android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void A[MD:(android.graphics.Bitmap):void (c)]\l0x0091: INVOKE  \l  (r7 I:android.graphics.drawable.Drawable A[D('$this$toBitmap' android.graphics.drawable.Drawable)])\l  (r6 I:android.graphics.Canvas)\l type: VIRTUAL call: android.graphics.drawable.Drawable.draw(android.graphics.Canvas):void A[MD:(android.graphics.Canvas):void (c)]\l0x0094: INVOKE  \l  (r7 I:android.graphics.drawable.Drawable A[D('$this$toBitmap' android.graphics.drawable.Drawable)])\l  (r2 I:int A[D('oldLeft' int)])\l  (r3 I:int A[D('oldTop' int)])\l  (r4 I:int A[D('oldRight' int)])\l  (r0 I:int A[D('oldBottom' int)])\l type: VIRTUAL call: android.graphics.drawable.Drawable.setBounds(int, int, int, int):void A[MD:(int, int, int, int):void (c)] (LINE:72)\l0x0097: INVOKE  (r5 I:java.lang.Object A[D('bitmap' android.graphics.Bitmap)]), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)] (LINE:73)\l}"];
Node_24 [shape=record,label="{24\:\ 0x009a|RETURN\l|0x009a: RETURN  (r5 I:android.graphics.Bitmap A[D('bitmap' android.graphics.Bitmap)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0083|0x0083: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('config' android.graphics.Bitmap$Config)]) \l}"];
MethodNode[shape=record,label="{public static final android.graphics.Bitmap androidx.core.graphics.drawable.DrawableKt.toBitmap((r7 I:android.graphics.drawable.Drawable A[D('$this$toBitmap' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.graphics.Bitmap$Config A[D('config' android.graphics.Bitmap$Config), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0059 \-\> B:1:?, CROSS_EDGE: B:10:0x002e \-\> B:15:0x0048, CROSS_EDGE: B:24:0x009a \-\> B:1:?, CROSS_EDGE: B:22:0x0083 \-\> B:23:0x0084, CROSS_EDGE: B:6:0x0014 \-\> B:9:0x0023, CROSS_EDGE: B:18:0x0061 \-\> B:1:?, CROSS_EDGE: B:3:0x0009 \-\> B:19:0x0062\lDebug Info:\l  0x006c\-0x006f: r2 '$this$component1$iv' Landroid\/graphics\/Rect;\l  0x006d\-0x006f: r3 '$i$f$component1' I\l  0x0071\-0x0074: r3 '$this$component2$iv' Landroid\/graphics\/Rect;\l  0x0072\-0x0074: r4 '$i$f$component2' I\l  0x0076\-0x0079: r4 '$this$component3$iv' Landroid\/graphics\/Rect;\l  0x0077\-0x0079: r5 '$i$f$component3' I\l  0x007a\-0x007d: r0 '$this$component4$iv' Landroid\/graphics\/Rect;\l  0x007b\-0x007d: r5 '$i$f$component4' I\l  0x007e\-0x009a: r0 'oldBottom' I\l  0x0070\-0x009a: r2 'oldLeft' I\l  0x0075\-0x009a: r3 'oldTop' I\l  0x007a\-0x009a: r4 'oldRight' I\l  0x0088\-0x009a: r5 'bitmap' Landroid\/graphics\/Bitmap;\l  \-1 \-0x009a: r7 '$this$toBitmap' Landroid\/graphics\/drawable\/Drawable;\l  \-1 \-0x009a: r8 'width' I\l  \-1 \-0x009a: r9 'height' I\l  \-1 \-0x009a: r10 'config' Landroid\/graphics\/Bitmap$Config;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_19;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_17;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_15;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_1;
Node_22 -> Node_23;
}

