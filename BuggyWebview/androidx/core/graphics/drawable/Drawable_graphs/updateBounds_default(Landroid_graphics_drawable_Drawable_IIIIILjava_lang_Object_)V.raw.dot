digraph "CFG forandroidx.core.graphics.drawable.DrawableKt.updateBounds$default(Landroid\/graphics\/drawable\/Drawable;IIIIILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:110)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r1 I:android.graphics.Rect) = (r0 I:android.graphics.drawable.Drawable) type: VIRTUAL call: android.graphics.drawable.Drawable.getBounds():android.graphics.Rect A[MD:():android.graphics.Rect (c)] (LINE:111)\l0x0008: IGET  (r1 I:int) = (r1 I:android.graphics.Rect) android.graphics.Rect.left int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:110)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: INVOKE  (r2 I:android.graphics.Rect) = (r0 I:android.graphics.drawable.Drawable) type: VIRTUAL call: android.graphics.drawable.Drawable.getBounds():android.graphics.Rect A[MD:():android.graphics.Rect (c)] (LINE:112)\l0x0012: IGET  (r2 I:int) = (r2 I:android.graphics.Rect) android.graphics.Rect.top int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|0x0014: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:110)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0016|0x0016: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: INVOKE  (r3 I:android.graphics.Rect) = (r0 I:android.graphics.drawable.Drawable) type: VIRTUAL call: android.graphics.drawable.Drawable.getBounds():android.graphics.Rect A[MD:():android.graphics.Rect (c)] (LINE:113)\l0x001c: IGET  (r3 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.right int \l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|0x001e: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char])  (LINE:110)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0028 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: INVOKE  (r4 I:android.graphics.Rect) = (r0 I:android.graphics.drawable.Drawable) type: VIRTUAL call: android.graphics.drawable.Drawable.getBounds():android.graphics.Rect A[MD:():android.graphics.Rect (c)] (LINE:114)\l0x0026: IGET  (r4 I:int) = (r4 I:android.graphics.Rect) android.graphics.Rect.bottom int \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: INVOKE  (r0 I:android.graphics.drawable.Drawable), (r1 I:int), (r2 I:int), (r3 I:int), (r4 I:int) type: STATIC call: androidx.core.graphics.drawable.DrawableKt.updateBounds(android.graphics.drawable.Drawable, int, int, int, int):void A[MD:(android.graphics.drawable.Drawable, int, int, int, int):void (m)] (LINE:110)\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|RETURN\l|0x002b: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void androidx.core.graphics.drawable.DrawableKt.updateBounds$default((r0 I:android.graphics.drawable.Drawable A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:12:0x0020 \-\> B:14:0x0028, CROSS_EDGE: B:9:0x0016 \-\> B:11:0x001e, CROSS_EDGE: B:6:0x000c \-\> B:8:0x0014, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x000a\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [110=5]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
}

