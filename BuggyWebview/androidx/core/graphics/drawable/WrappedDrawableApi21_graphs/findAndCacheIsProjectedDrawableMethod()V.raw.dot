digraph "CFG forandroidx.core.graphics.drawable.WrappedDrawableApi21.findAndCacheIsProjectedDrawableMethod()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:java.lang.reflect.Method) =  androidx.core.graphics.drawable.WrappedDrawableApi21.sIsProjectedDrawableMethod java.lang.reflect.Method  (LINE:141)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:? \l}"];
Node_9 [shape=record,label="{9\:\ 0x0004|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0012, blocks: (B:4:0x0004), top: B:9:0x0004 \}\lCatch: Exception \-\> 0x0012\l|0x0004: CONST_CLASS  (r0 I:java.lang.Class\<android.graphics.drawable.Drawable\>) =  android.graphics.drawable.Drawable.class A[TRY_ENTER] (LINE:143)\l0x0006: CONST_STR  (r1 I:java.lang.String) =  \"isProjected\" \l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: NEW_ARRAY  (r2 I:java.lang.Class[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.Class[] A[Catch: Exception \-\> 0x0012]\l0x000b: INVOKE  (r0 I:java.lang.reflect.Method) = (r0 I:java.lang.Class), (r1 I:java.lang.String), (r2 I:java.lang.Class[]) type: VIRTUAL call: java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[]):java.lang.reflect.Method A[Catch: Exception \-\> 0x0012, MD:(java.lang.String, java.lang.Class\<?\>[]):java.lang.reflect.Method VARARG throws java.lang.NoSuchMethodException, java.lang.SecurityException (c)]\l0x000f: SPUT  (r0 I:java.lang.reflect.Method) androidx.core.graphics.drawable.WrappedDrawableApi21.sIsProjectedDrawableMethod java.lang.reflect.Method A[Catch: Exception \-\> 0x0012, TRY_LEAVE]\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN   A[SYNTHETIC] (LINE:148)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|ExcHandler: Exception \-\> 0x0012\l|0x0012: MOVE_EXCEPTION  (r0 I:java.lang.Exception A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: Exception \-\> 0x0012] (LINE:144)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|0x0013: CONST_STR  (r1 I:java.lang.String) =  \"WrappedDrawableApi21\"  (LINE:145)\l0x0015: CONST_STR  (r2 I:java.lang.String) =  \"Failed to retrieve Drawable#isProjected() method\" \l0x0017: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String), (r0 I:java.lang.Throwable A[D('ex' java.lang.Exception)]) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: RETURN    (LINE:148)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN   A[SYNTHETIC] (LINE:148)\l}"];
MethodNode[shape=record,label="{private void androidx.core.graphics.drawable.WrappedDrawableApi21.findAndCacheIsProjectedDrawableMethod((r3 'this' I:androidx.core.graphics.drawable.WrappedDrawableApi21 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:4:0x0004 \-\> B:8:0x001a, CROSS_EDGE: B:7:0x0013 \-\> B:8:0x001a, CROSS_EDGE: B:9:0x0004 \-\> B:6:0x0012\lDebug Info:\l  0x0013\-0x001a: r0 'ex' Ljava\/lang\/Exception;\lTryCatch #0 \{Exception \-\> 0x0012, blocks: (B:4:0x0004), top: B:9:0x0004 \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_9[style=dashed];
Node_3 -> Node_11;
Node_9 -> Node_4;
Node_9 -> Node_6;
Node_4 -> Node_10;
Node_4 -> Node_12;
Node_10 -> Node_6;
Node_12 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_11 -> Node_1;
}

