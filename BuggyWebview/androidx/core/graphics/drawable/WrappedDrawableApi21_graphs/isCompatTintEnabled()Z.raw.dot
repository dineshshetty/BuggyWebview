digraph "CFG forandroidx.core.graphics.drawable.WrappedDrawableApi21.isCompatTintEnabled()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:113)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IGET  (r0 I:android.graphics.drawable.Drawable) = (r3 I:androidx.core.graphics.drawable.WrappedDrawableApi21) androidx.core.graphics.drawable.WrappedDrawableApi21.mDrawable android.graphics.drawable.Drawable  (LINE:114)\l0x0009: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('drawable' android.graphics.drawable.Drawable)]) android.graphics.drawable.GradientDrawable  (LINE:115)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('drawable' android.graphics.drawable.Drawable)]) android.graphics.drawable.DrawableContainer \l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0019 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('drawable' android.graphics.drawable.Drawable)]) android.graphics.drawable.InsetDrawable \l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0019 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('drawable' android.graphics.drawable.Drawable)]) android.graphics.drawable.RippleDrawable \l}"];
Node_11 [shape=record,label="{11\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:? \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|RETURN\lORIG_RETURN\l|0x0019: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001a: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|RETURN\l|0x001b: RETURN  (r1 I:boolean)  (LINE:120)\l}"];
MethodNode[shape=record,label="{protected boolean androidx.core.graphics.drawable.WrappedDrawableApi21.isCompatTintEnabled((r3 'this' I:androidx.core.graphics.drawable.WrappedDrawableApi21 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0017 \-\> B:13:0x001a, CROSS_EDGE: B:9:0x0013 \-\> B:12:0x0019, CROSS_EDGE: B:7:0x000f \-\> B:12:0x0019, CROSS_EDGE: B:5:0x000b \-\> B:12:0x0019, CROSS_EDGE: B:14:0x001b \-\> B:1:?\lDebug Info:\l  0x0009\-0x001b: r0 'drawable' Landroid\/graphics\/drawable\/Drawable;\lMETHOD_OVERRIDE: [androidx.core.graphics.drawable.WrappedDrawableApi14.isCompatTintEnabled():boolean]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_12;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_15 -> Node_1;
Node_12 -> Node_1;
Node_14 -> Node_1;
}

