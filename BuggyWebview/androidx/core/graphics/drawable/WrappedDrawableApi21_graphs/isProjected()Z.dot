digraph "CFG forandroidx.core.graphics.drawable.WrappedDrawableApi21.isProjected()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r4.mDrawable == null) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|java.lang.reflect.Method r0 = androidx.core.graphics.drawable.WrappedDrawableApi21.sIsProjectedDrawableMethod\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|if (r0 == null) goto L12\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0018, blocks: (B:6:0x0009), top: B:11:0x0009 \}\lCatch: Exception \-\> 0x0018\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|return ((java.lang.Boolean) r0.invoke(r4.mDrawable, new java.lang.Object[0])).booleanValue()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|ExcHandler: Exception \-\> 0x0018\l|java.lang.Exception r0 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|android.util.Log.w(androidx.core.graphics.drawable.WrappedDrawableApi21.TAG, \"Error calling Drawable#isProjected() method\", r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.core.graphics.drawable.WrappedDrawableApi21.isProjected((r4v0 'this' androidx.core.graphics.drawable.WrappedDrawableApi21 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x0017 \-\> B:1:?, CROSS_EDGE: B:9:0x0019 \-\> B:10:0x0020, CROSS_EDGE: B:11:0x0009 \-\> B:8:0x0018, CROSS_EDGE: B:3:0x0003 \-\> B:10:0x0020\lTryCatch #0 \{Exception \-\> 0x0018, blocks: (B:6:0x0009), top: B:11:0x0009 \}\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.isProjected():boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_10;
Node_5 -> Node_11[style=dashed];
Node_11 -> Node_6;
Node_11 -> Node_8;
Node_6 -> Node_7;
Node_6 -> Node_12;
Node_7 -> Node_1;
Node_12 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

