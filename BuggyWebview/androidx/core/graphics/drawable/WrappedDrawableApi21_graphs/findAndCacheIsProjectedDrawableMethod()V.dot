digraph "CFG forandroidx.core.graphics.drawable.WrappedDrawableApi21.findAndCacheIsProjectedDrawableMethod()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (androidx.core.graphics.drawable.WrappedDrawableApi21.sIsProjectedDrawableMethod != null) goto L11\l}"];
Node_9 [shape=record,label="{9\:\ 0x0004|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0012, blocks: (B:4:0x0004), top: B:9:0x0004 \}\lCatch: Exception \-\> 0x0012\l|androidx.core.graphics.drawable.WrappedDrawableApi21.sIsProjectedDrawableMethod = android.graphics.drawable.Drawable.class.getDeclaredMethod(\"isProjected\", new java.lang.Class[0])     \/\/ Catch: java.lang.Exception \-\> L12\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|ExcHandler: Exception \-\> 0x0012\l|java.lang.Exception r0 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|android.util.Log.w(androidx.core.graphics.drawable.WrappedDrawableApi21.TAG, \"Failed to retrieve Drawable#isProjected() method\", r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|RETURN\lORIG_RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.core.graphics.drawable.WrappedDrawableApi21.findAndCacheIsProjectedDrawableMethod((r3v0 'this' androidx.core.graphics.drawable.WrappedDrawableApi21 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:4:0x0004 \-\> B:8:0x001a, CROSS_EDGE: B:7:0x0013 \-\> B:8:0x001a, CROSS_EDGE: B:9:0x0004 \-\> B:6:0x0012\lINLINE_NOT_NEEDED\lTryCatch #0 \{Exception \-\> 0x0012, blocks: (B:4:0x0004), top: B:9:0x0004 \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_9[style=dashed];
Node_3 -> Node_11;
Node_9 -> Node_4;
Node_9 -> Node_6;
Node_4 -> Node_10;
Node_4 -> Node_12;
Node_10 -> Node_6;
Node_12 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_11 -> Node_1;
}

