digraph "CFG forandroidx.core.graphics.TypefaceCompatApi21Impl.addFontWeightStyle(Ljava\/lang\/Object;Ljava\/lang\/String;IZ)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE   type: STATIC call: androidx.core.graphics.TypefaceCompatApi21Impl.init():void A[MD:():void (m)] (LINE:136)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IllegalAccessException \| InvocationTargetException \-\> 0x0024, blocks: (B:15:0x0003), top: B:22:0x0003 \}\lCatch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026\l|0x0003: SGET  (r0 I:java.lang.reflect.Method) =  androidx.core.graphics.TypefaceCompatApi21Impl.sAddFontWeightStyle java.lang.reflect.Method A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026, TRY_ENTER] (LINE:138)\l0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0006: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026]\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r5 I:??[OBJECT, ARRAY] A[D('name' java.lang.String)]) A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026]\l0x000b: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000c: INVOKE  (r3 I:java.lang.Integer) = (r6 I:int A[D('weight' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026, MD:(int):java.lang.Integer (c)] (LINE:139)\l0x0010: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026]\l0x0012: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0013: INVOKE  (r3 I:java.lang.Boolean) = (r7 I:boolean A[D('style' boolean)]) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026, MD:(boolean):java.lang.Boolean (c)]\l0x0017: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026]\l0x0019: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.reflect.Method), (r4 I:java.lang.Object A[D('family' java.lang.Object)]), (r1 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)] (LINE:138)\l0x001d: CHECK_CAST (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:??[OBJECT, ARRAY]) A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026]\l0x001f: INVOKE  (r1 I:boolean) = (r0 I:java.lang.Boolean A[D('result' java.lang.Boolean)]) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[Catch: IllegalAccessException \| InvocationTargetException \-\> 0x0024, IllegalAccessException \-\> 0x0026, MD:():boolean (c), TRY_LEAVE] (LINE:140)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|RETURN\l|0x0023: RETURN  (r1 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_17 [shape=record,label="{17\:\ 0x0024|ExcHandler: IllegalAccessException \| InvocationTargetException \-\> 0x0024\l|0x0024: MOVE_EXCEPTION  (r0 I:java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \| InvocationTargetException \-\> 0x0024] (LINE:141)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|0x0027: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:142)\l0x0029: INVOKE  (r1 I:java.lang.RuntimeException), (r0 I:java.lang.Throwable A[D('e' java.lang.ReflectiveOperationException)]) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002c|0x002c: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static boolean androidx.core.graphics.TypefaceCompatApi21Impl.addFontWeightStyle((r4 I:java.lang.Object A[D('family' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('weight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('style' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x002c \-\> B:13:?, CROSS_EDGE: B:22:0x0003 \-\> B:17:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0024: r0 'result' Ljava\/lang\/Boolean;\l  0x0027\-0x002c: r0 'e' Ljava\/lang\/ReflectiveOperationException;\l  \-1 \-0x002c: r4 'family' Ljava\/lang\/Object;\l  \-1 \-0x002c: r5 'name' Ljava\/lang\/String;\l  \-1 \-0x002c: r6 'weight' I\l  \-1 \-0x002c: r7 'style' Z\lTryCatch #2 \{IllegalAccessException \| InvocationTargetException \-\> 0x0024, blocks: (B:15:0x0003), top: B:22:0x0003 \}\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_22;
Node_22 -> Node_15;
Node_22 -> Node_17;
Node_15 -> Node_16;
Node_15 -> Node_23;
Node_16 -> Node_13;
Node_23 -> Node_17;
Node_17 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

