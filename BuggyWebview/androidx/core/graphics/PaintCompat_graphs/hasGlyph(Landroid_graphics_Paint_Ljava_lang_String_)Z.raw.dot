digraph "CFG forandroidx.core.graphics.PaintCompat.hasGlyph(Landroid\/graphics\/Paint;Ljava\/lang\/String;)Z" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:53)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (23 ??[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:37:0x000b \l}"];
Node_35 [shape=record,label="{35\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = \l  (r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l  (r12 I:java.lang.String A[D('string' java.lang.String)])\l type: STATIC call: androidx.core.graphics.PaintCompat.Api23Impl.hasGlyph(android.graphics.Paint, java.lang.String):boolean A[MD:(android.graphics.Paint, java.lang.String):boolean (m)] (LINE:54)\l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x000b|0x000b: INVOKE  (r0 I:int) = (r12 I:java.lang.String A[D('string' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:56)\l0x000f: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:58)\l0x0010: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x001e \l}"];
Node_39 [shape=record,label="{39\:\ 0x0013|0x0013: INVOKE  (r3 I:char) = (r12 I:java.lang.String A[D('string' java.lang.String)]), (r2 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x0017: INVOKE  (r3 I:boolean) = (r3 I:char) type: STATIC call: java.lang.Character.isWhitespace(char):boolean A[MD:(char):boolean (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x001b|0x001b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x001e \l}"];
Node_41 [shape=record,label="{41\:\ 0x001d|RETURN\l|0x001d: RETURN  (r1 I:boolean)  (LINE:60)\l}"];
Node_42 [shape=record,label="{42\:\ 0x001e|0x001e: CONST_STR  (r3 I:java.lang.String) =  \"udfffd\"  (LINE:63)\l0x0020: INVOKE  (r4 I:float) = (r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint)]), (r3 I:java.lang.String) type: VIRTUAL call: android.graphics.Paint.measureText(java.lang.String):float A[MD:(java.lang.String):float (c)]\l0x0024: CONST_STR  (r5 I:java.lang.String) =  \"m\"  (LINE:64)\l0x0026: INVOKE  (r5 I:float) = (r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint)]), (r5 I:java.lang.String) type: VIRTUAL call: android.graphics.Paint.measureText(java.lang.String):float A[MD:(java.lang.String):float (c)]\l0x002a: INVOKE  (r6 I:float) = \l  (r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l  (r12 I:java.lang.String A[D('string' java.lang.String)])\l type: VIRTUAL call: android.graphics.Paint.measureText(java.lang.String):float A[MD:(java.lang.String):float (c)] (LINE:66)\l0x002e: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:68)\l0x002f: CMP_L  (r7 I:int) = (r6 I:float A[D('width' float)]), (r7 I:float) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0031|0x0031: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0034 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0033|RETURN\l|0x0033: RETURN  (r2 I:boolean)  (LINE:70)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0034|0x0034: INVOKE  (r7 I:int) = (r12 I:java.lang.String A[D('string' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:73)\l0x0038: INVOKE  (r7 I:int) = (r12 I:java.lang.String A[D('string' java.lang.String)]), (r2 I:int), (r7 I:int) type: VIRTUAL call: java.lang.String.codePointCount(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x003c|0x003c: IF  (r7 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:56:0x0061 \l}"];
Node_47 [shape=record,label="{47\:\ 0x003e|0x003e: CONST  (r7 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:76)\l0x0040: ARITH  (r7 I:float) = (r7 I:float) * (r5 I:float A[D('emGlyphWidth' float)]) \l0x0042: CMP_L  (r7 I:int) = (r6 I:float A[D('width' float)]), (r7 I:float) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0044|0x0044: IF  (r7 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:50:0x0047 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0046|RETURN\l|0x0046: RETURN  (r2 I:boolean)  (LINE:77)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0047|0x0047: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:90)\l0x0048: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:91)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0049|LOOP_START\lLOOP:0: B:51:0x0049\-\>B:52:0x004b\l|0x0049: IF  (r8 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:61:0x005c  (LINE:92)\l}"];
Node_52 [shape=record,label="{52\:\ 0x004b|LOOP_END\lLOOP:0: B:51:0x0049\-\>B:52:0x004b\l|0x004b: INVOKE  (r9 I:int) = (r12 I:java.lang.String A[D('string' java.lang.String)]), (r8 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.codePointAt(int):int A[MD:(int):int (c)] (LINE:93)\l0x004f: INVOKE  (r9 I:int) = (r9 I:int) type: STATIC call: java.lang.Character.charCount(int):int A[MD:(int):int (c)]\l0x0053: ARITH  (r10 I:int) = (r8 I:int A[D('i' int)]) + (r9 I:int A[D('charCount' int)])  (LINE:94)\l0x0055: INVOKE  (r10 I:float) = \l  (r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l  (r12 I:java.lang.String A[D('string' java.lang.String)])\l  (r8 I:int A[D('i' int)])\l  (r10 I:int)\l type: VIRTUAL call: android.graphics.Paint.measureText(java.lang.String, int, int):float A[MD:(java.lang.String, int, int):float (c)]\l0x0059: ARITH  (r7 I:float) = (r7 I:float A[D('sumWidth' float)]) + (r10 I:float) \l0x005a: ARITH  (r8 I:int) = (r8 I:int A[D('i' int)]) + (r9 I:int A[D('charCount' int)])  (LINE:95)\l}"];
Node_61 [shape=record,label="{61\:\ 0x005c|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x005c|0x005c: CMP_L  (r9 I:int) = (r6 I:float A[D('width' float)]), (r7 I:float A[D('sumWidth' float)])  (LINE:97)\l}"];
Node_54 [shape=record,label="{54\:\ 0x005e|0x005e: IF  (r9 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:56:0x0061 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0060|RETURN\l|0x0060: RETURN  (r2 I:boolean)  (LINE:98)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0061|0x0061: CMP_L  (r7 I:int A[D('sumWidth' float)]) = (r6 I:float A[D('width' float)]), (r4 I:float A[D('missingGlyphWidth' float)])  (LINE:102)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0063|0x0063: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x0066 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0065|RETURN\l|0x0065: RETURN  (r1 I:boolean)  (LINE:104)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0066|0x0066: INVOKE  (r7 I:androidx.core.util.Pair) =  type: STATIC call: androidx.core.graphics.PaintCompat.obtainEmptyRects():androidx.core.util.Pair A[MD:():androidx.core.util.Pair\<android.graphics.Rect, android.graphics.Rect\> (m)] (LINE:109)\l0x006a: INVOKE  (r8 I:int) = (r3 I:java.lang.String) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:110)\l0x006e: IGET  (r9 I:F) = (r7 I:androidx.core.util.Pair A[D('rects' androidx.core.util.Pair\<android.graphics.Rect, android.graphics.Rect\>)]) androidx.core.util.Pair.first java.lang.Object \l0x0070: CHECK_CAST (r9 I:android.graphics.Rect) = (android.graphics.Rect) (r9 I:??[OBJECT, ARRAY]) \l0x0072: INVOKE  \l  (r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l  (r3 I:java.lang.String)\l  (r2 I:int)\l  (r8 I:int)\l  (r9 I:android.graphics.Rect)\l type: VIRTUAL call: android.graphics.Paint.getTextBounds(java.lang.String, int, int, android.graphics.Rect):void A[MD:(java.lang.String, int, int, android.graphics.Rect):void (c)]\l0x0075: IGET  (r3 I:S) = (r7 I:androidx.core.util.Pair A[D('rects' androidx.core.util.Pair\<android.graphics.Rect, android.graphics.Rect\>)]) androidx.core.util.Pair.second java.lang.Object  (LINE:111)\l0x0077: CHECK_CAST (r3 I:android.graphics.Rect) = (android.graphics.Rect) (r3 I:??[OBJECT, ARRAY]) \l0x0079: INVOKE  \l  (r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l  (r12 I:java.lang.String A[D('string' java.lang.String)])\l  (r2 I:int)\l  (r0 I:int A[D('length' int)])\l  (r3 I:android.graphics.Rect)\l type: VIRTUAL call: android.graphics.Paint.getTextBounds(java.lang.String, int, int, android.graphics.Rect):void A[MD:(java.lang.String, int, int, android.graphics.Rect):void (c)]\l0x007c: IGET  (r2 I:F) = (r7 I:androidx.core.util.Pair A[D('rects' androidx.core.util.Pair\<android.graphics.Rect, android.graphics.Rect\>)]) androidx.core.util.Pair.first java.lang.Object  (LINE:112)\l0x007e: CHECK_CAST (r2 I:android.graphics.Rect) = (android.graphics.Rect) (r2 I:??[OBJECT, ARRAY]) \l0x0080: IGET  (r3 I:S) = (r7 I:androidx.core.util.Pair A[D('rects' androidx.core.util.Pair\<android.graphics.Rect, android.graphics.Rect\>)]) androidx.core.util.Pair.second java.lang.Object \l0x0082: INVOKE  (r2 I:boolean) = (r2 I:android.graphics.Rect), (r3 I:java.lang.Object) type: VIRTUAL call: android.graphics.Rect.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l0x0086: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) ^ (r2 I:??[int, boolean, short, byte, char]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0087|RETURN\l|0x0087: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.graphics.PaintCompat.hasGlyph((r11 I:android.graphics.Paint A[D('paint' android.graphics.Paint), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String A[D('string' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:41:0x001d \-\> B:32:?, CROSS_EDGE: B:44:0x0033 \-\> B:32:?, CROSS_EDGE: B:49:0x0046 \-\> B:32:?, BACK_EDGE: B:52:0x004b \-\> B:51:0x0049, CROSS_EDGE: B:55:0x0060 \-\> B:32:?, CROSS_EDGE: B:58:0x0065 \-\> B:32:?, CROSS_EDGE: B:60:0x0087 \-\> B:32:?, CROSS_EDGE: B:46:0x003c \-\> B:56:0x0061, CROSS_EDGE: B:38:0x0011 \-\> B:42:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0053\-0x005b: r9 'charCount' I\l  0x0048\-0x0061: r7 'sumWidth' F\l  0x0049\-0x0061: r8 'i' I\l  0x000f\-0x0087: r0 'length' I\l  0x0024\-0x0087: r4 'missingGlyphWidth' F\l  0x002a\-0x0087: r5 'emGlyphWidth' F\l  0x002e\-0x0087: r6 'width' F\l  0x006a\-0x0087: r7 'rects' Landroidx\/core\/util\/Pair;, signature: Landroidx\/core\/util\/Pair\<Landroid\/graphics\/Rect;Landroid\/graphics\/Rect;\>;\l  \-1 \-0x0087: r11 'paint' Landroid\/graphics\/Paint;\l  \-1 \-0x0087: r12 'string' Ljava\/lang\/String;\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_32;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_42;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_32;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_32;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_56;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_32;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_61;
Node_52 -> Node_51;
Node_61 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_32;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_59;
Node_58 -> Node_32;
Node_59 -> Node_60;
Node_60 -> Node_32;
}

