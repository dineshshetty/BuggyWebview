digraph "CFG forandroidx.core.graphics.BitmapCompat.Api31Impl.getHardwareBitmapConfig(Landroid\/graphics\/Bitmap;)Landroid\/graphics\/Bitmap$Config;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:android.hardware.HardwareBuffer) = (r2 I:android.graphics.Bitmap A[D('bm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getHardwareBuffer():android.hardware.HardwareBuffer A[MD:():android.hardware.HardwareBuffer (c)] (LINE:427)\l0x0004: INVOKE  (r0 I:int) = (r0 I:android.hardware.HardwareBuffer) type: VIRTUAL call: android.hardware.HardwareBuffer.getFormat():int A[MD:():int (c)]\l0x0008: CONST  (r1 I:??[int, float, short, byte, char]) = (22 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000f \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|0x000c: SGET  (r0 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.RGBA_F16 android.graphics.Bitmap$Config  (LINE:428)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:android.graphics.Bitmap$Config) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|0x000f: SGET  (r0 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config  (LINE:430)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:android.graphics.Bitmap$Config) \l}"];
MethodNode[shape=record,label="{static android.graphics.Bitmap$Config androidx.core.graphics.BitmapCompat.Api31Impl.getHardwareBitmapConfig((r2 I:android.graphics.Bitmap A[D('bm' android.graphics.Bitmap), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0011 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0011: r2 'bm' Landroid\/graphics\/Bitmap;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

