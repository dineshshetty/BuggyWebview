digraph "CFG forandroidx.core.graphics.ColorUtils.blendHSL([F[FF[F)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: ARRAY_LENGTH  (r0 I:int) = (r7 I:??[] A[D('outResult' float[])])  (LINE:651)\l0x0001: CONST  (r1 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:654)\l0x0006: ARITH  (r0 I:float) = (r0 I:float) \- (r6 I:float A[D('ratio' float)]) \l0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:656)\l0x0008: AGET  (r2 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][] A[D('hsl1' float[])]), (r1 I:??[int, short, byte, char]) \l0x000a: AGET  (r3 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('hsl2' float[])]), (r1 I:??[int, short, byte, char]) \l0x000c: INVOKE  (r2 I:float) = (r2 I:float), (r3 I:float), (r6 I:float A[D('ratio' float)]) type: STATIC call: androidx.core.graphics.ColorUtils.circularInterpolate(float, float, float):float A[MD:(float, float, float):float (m)]\l0x0010: APUT  \l  (r7 I:??[int, float][] A[D('outResult' float[])])\l  (r1 I:??[int, short, byte, char])\l  (r2 I:??[int, float, short, byte, char])\l \l0x0012: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:657)\l0x0013: AGET  (r2 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][] A[D('hsl1' float[])]), (r1 I:??[int, short, byte, char]) \l0x0015: ARITH  (r2 I:float) = (r2 I:float) * (r0 I:float A[D('inverseRatio' float)]) \l0x0017: AGET  (r3 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('hsl2' float[])]), (r1 I:??[int, short, byte, char]) \l0x0019: ARITH  (r3 I:float) = (r3 I:float) * (r6 I:float A[D('ratio' float)]) \l0x001b: ARITH  (r2 I:float) = (r2 I:float) + (r3 I:float) \l0x001c: APUT  \l  (r7 I:??[int, float][] A[D('outResult' float[])])\l  (r1 I:??[int, short, byte, char])\l  (r2 I:??[int, float, short, byte, char])\l \l0x001e: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:658)\l0x001f: AGET  (r2 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][] A[D('hsl1' float[])]), (r1 I:??[int, short, byte, char]) \l0x0021: ARITH  (r2 I:float) = (r2 I:float) * (r0 I:float A[D('inverseRatio' float)]) \l0x0023: AGET  (r3 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('hsl2' float[])]), (r1 I:??[int, short, byte, char]) \l0x0025: ARITH  (r3 I:float) = (r3 I:float) * (r6 I:float A[D('ratio' float)]) \l0x0027: ARITH  (r2 I:float) = (r2 I:float) + (r3 I:float) \l0x0028: APUT  \l  (r7 I:??[int, float][] A[D('outResult' float[])])\l  (r1 I:??[int, short, byte, char])\l  (r2 I:??[int, float, short, byte, char])\l \l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|RETURN\l|0x002a: RETURN    (LINE:659)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('inverseRatio' float)]) =  java.lang.IllegalArgumentException  (LINE:652)\l0x002d: CONST_STR  (r1 I:java.lang.String) =  \"result must have a length of 3.\" \l0x002f: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0032|0x0032: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void androidx.core.graphics.ColorUtils.blendHSL((r4 I:float[] A[D('hsl1' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float[] A[D('hsl2' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float A[D('ratio' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float[] A[D('outResult' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0032 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x002b: r0 'inverseRatio' F\l  \-1 \-0x0032: r4 'hsl1' [F\l  \-1 \-0x0032: r5 'hsl2' [F\l  \-1 \-0x0032: r6 'ratio' F\l  \-1 \-0x0032: r7 'outResult' [F\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

