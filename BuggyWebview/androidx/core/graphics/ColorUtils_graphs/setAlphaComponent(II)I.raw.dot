digraph "CFG forandroidx.core.graphics.ColorUtils.setAlphaComponent(II)I" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IF  (r3 I:??[int, byte, short, char] A[D('alpha' int)]) \< (0 ??[int, byte, short, char])  \-\> B:16:0x000e  (LINE:378)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, short, byte, char]) = (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: IF  (r3 I:??[int, byte, short, char] A[D('alpha' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:16:0x000e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, short, byte, char]) = (16777215(0xffffff, float:2.3509886E\-38) ??[int, float, short, byte, char])  (LINE:381)\l0x0009: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) & (r2 I:??[int, boolean, short, byte, char] A[D('color' int)]) \l0x000a: ARITH  (r1 I:int) = (r3 I:int A[D('alpha' int)]) \<\< (24 int) \l0x000c: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:int) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:379)\l0x0010: CONST_STR  (r1 I:java.lang.String) =  \"alpha must be between 0 and 255.\" \l0x0012: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|0x0015: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int androidx.core.graphics.ColorUtils.setAlphaComponent((r2 I:int A[D('color' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('alpha' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0015 \-\> B:10:?, CROSS_EDGE: B:11:0x0000 \-\> B:16:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r2 'color' I\l  \-1 \-0x0015: r3 'alpha' I\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_15;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

