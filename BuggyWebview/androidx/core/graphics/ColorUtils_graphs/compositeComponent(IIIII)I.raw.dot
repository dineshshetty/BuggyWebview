digraph "CFG forandroidx.core.graphics.ColorUtils.compositeComponent(IIIII)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('a' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0004  (LINE:148)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|RETURN\l|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: RETURN  (r0 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: ARITH  (r0 I:int) = (r3 I:int A[D('fgC' int)]) * (255 int)  (LINE:149)\l0x0006: ARITH  (r0 I:int) = (r0 I:int) * (r4 I:int A[D('fgA' int)]) \l0x0008: ARITH  (r1 I:int) = (r5 I:int A[D('bgC' int)]) * (r6 I:int A[D('bgA' int)]) \l0x000a: ARITH  (r2 I:int) = (255 int) \- (r4 I:int A[D('fgA' int)]) \l0x000c: ARITH  (r1 I:int) = (r1 I:int) * (r2 I:int) \l0x000e: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000f: ARITH  (r1 I:int) = (r7 I:int A[D('a' int)]) * (255 int) \l0x0011: ARITH  (r0 I:int) = (r0 I:int) \/ (r1 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private static int androidx.core.graphics.ColorUtils.compositeComponent((r3 I:int A[D('fgC' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('fgA' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('bgC' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('bgA' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('a' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0012 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r3 'fgC' I\l  \-1 \-0x0012: r4 'fgA' I\l  \-1 \-0x0012: r5 'bgC' I\l  \-1 \-0x0012: r6 'bgA' I\l  \-1 \-0x0012: r7 'a' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

