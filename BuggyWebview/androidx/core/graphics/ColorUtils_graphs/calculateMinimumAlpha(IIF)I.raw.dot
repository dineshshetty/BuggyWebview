digraph "CFG forandroidx.core.graphics.ColorUtils.calculateMinimumAlpha(IIF)I" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r11 I:int A[D('background' int)]) type: STATIC call: android.graphics.Color.alpha(int):int A[MD:(int):int (c)] (LINE:200)\l0x0004: CONST  (r1 I:??[int, float, short, byte, char]) = (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x003d \l}"];
Node_29 [shape=record,label="{29\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r10 I:int A[D('foreground' int)]), (r1 I:int) type: STATIC call: androidx.core.graphics.ColorUtils.setAlphaComponent(int, int):int A[MD:(int, int):int (m)] (LINE:206)\l0x000c: INVOKE  (r1 I:double) = (r0 I:int A[D('testForeground' int)]), (r11 I:int A[D('background' int)]) type: STATIC call: androidx.core.graphics.ColorUtils.calculateContrast(int, int):double A[MD:(int, int):double (m)] (LINE:207)\l0x0010: CAST (r3 I:double) = (double) (r12 I:float A[D('minContrastRatio' float)])  (LINE:208)\l0x0011: CMP_G  (r5 I:int) = (r1 I:double A[D('testRatio' double)]), (r3 I:double) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|0x0013: IF  (r5 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:33:0x0017 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|RETURN\l|0x0015: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:210)\l0x0016: RETURN  (r3 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|0x0017: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l0x0018: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:215)\l0x0019: CONST  (r5 I:??[int, float, short, byte, char]) = (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char])  (LINE:216)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001b|LOOP_START\lLOOP:0: B:34:0x001b\-\>B:42:0x0038\l|0x001b: CONST  (r6 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:218)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|0x001d: IF  (r3 I:??[int, byte, short, char] A[D('numIterations' int)]) \> (r6 I:??[int, byte, short, char])  \-\> B:47:0x003c \l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|0x001f: ARITH  (r6 I:int) = (r5 I:int A[D('maxAlpha' int)]) \- (r4 I:int A[D('minAlpha' int)]) \l0x0021: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0022|0x0022: IF  (r6 I:??[int, byte, short, char]) \<= (r7 I:??[int, byte, short, char])  \-\> B:46:0x003c \l}"];
Node_38 [shape=record,label="{38\:\ 0x0024|0x0024: ARITH  (r6 I:int) = (r4 I:int A[D('minAlpha' int)]) + (r5 I:int A[D('maxAlpha' int)])  (LINE:220)\l0x0026: ARITH  (r6 I:int) = (r6 I:int) \/ (2 int) \l0x0028: INVOKE  (r0 I:int A[D('testForeground' int)]) = (r10 I:int A[D('foreground' int)]), (r6 I:int A[D('testAlpha' int)]) type: STATIC call: androidx.core.graphics.ColorUtils.setAlphaComponent(int, int):int A[MD:(int, int):int (m)] (LINE:222)\l0x002c: INVOKE  (r1 I:double A[D('testRatio' double)]) = (r0 I:int A[D('testForeground' int)]), (r11 I:int A[D('background' int)]) type: STATIC call: androidx.core.graphics.ColorUtils.calculateContrast(int, int):double A[MD:(int, int):double (m)] (LINE:223)\l0x0030: CAST (r7 I:double) = (double) (r12 I:float A[D('minContrastRatio' float)])  (LINE:225)\l0x0031: CMP_G  (r9 I:int) = (r1 I:double A[D('testRatio' double)]), (r7 I:double) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0033|0x0033: IF  (r9 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:41:0x0037 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0035|0x0035: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minAlpha' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('testAlpha' int)])  (LINE:226)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0038|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0038|LOOP_END\lLOOP:0: B:34:0x001b\-\>B:42:0x0038\l|0x0039: ARITH  (r3 I:int) = (r3 I:int A[D('numIterations' int)]) + (1 int) \l}"];
Node_41 [shape=record,label="{41\:\ 0x0037|0x0037: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maxAlpha' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('testAlpha' int)])  (LINE:228)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0038|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x003c|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x003c|RETURN\l|0x003c: RETURN  (r5 I:int A[D('maxAlpha' int)])  (LINE:235)\l}"];
Node_47 [shape=record,label="{47\:\ 0x003c|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x003d|0x003d: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('testForeground' int)]) =  java.lang.IllegalArgumentException  (LINE:201)\l0x003f: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0041: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0044: CONST_STR  (r2 I:java.lang.String) =  \"background can not be translucent: #\" \l0x0046: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0049: INVOKE  (r2 I:java.lang.String) = (r11 I:int A[D('background' int)]) type: STATIC call: java.lang.Integer.toHexString(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:202)\l0x004d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0050: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0054: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0057|0x0057: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int androidx.core.graphics.ColorUtils.calculateMinimumAlpha((r10 I:int A[D('foreground' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('background' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:float A[D('minContrastRatio' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:42:0x0038 \-\> B:34:0x001b, CROSS_EDGE: B:41:0x0037 \-\> B:42:0x0038, CROSS_EDGE: B:43:0x003c \-\> B:26:?, CROSS_EDGE: B:35:0x001d \-\> B:43:0x003c, CROSS_EDGE: B:45:0x0057 \-\> B:26:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x0039: r6 'testAlpha' I\l  0x000c\-0x003d: r0 'testForeground' I\l  0x0010\-0x003d: r1 'testRatio' D\l  0x0018\-0x003d: r3 'numIterations' I\l  0x0019\-0x003d: r4 'minAlpha' I\l  0x001b\-0x003d: r5 'maxAlpha' I\l  \-1 \-0x0057: r10 'foreground' I\l  \-1 \-0x0057: r11 'background' I\l  \-1 \-0x0057: r12 'minContrastRatio' F\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_44;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_26;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_47;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_49;
Node_49 -> Node_42;
Node_42 -> Node_34;
Node_41 -> Node_48;
Node_48 -> Node_42;
Node_46 -> Node_43;
Node_43 -> Node_26;
Node_47 -> Node_43;
Node_44 -> Node_45;
Node_45 -> Node_26;
}

