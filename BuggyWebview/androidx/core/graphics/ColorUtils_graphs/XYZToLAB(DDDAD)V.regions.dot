digraph "CFG forandroidx.core.graphics.ColorUtils.XYZToLAB(DDD[D)V" {
subgraph cluster_Region_2089402181 {
label = "R(1:(2:(1:7)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_2109183757 {
label = "R(2:(1:7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_307673721 {
label = "IF [B:11:0x0002] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r13.length != 3) goto L6\l}"];
subgraph cluster_Region_1133945358 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x004f|throw new java.lang.IllegalArgumentException(\"outLab must have a length of 3.\")\l}"];
}
}
subgraph cluster_Region_1668082413 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|double double r7 = pivotXyzComponent(r7 \/ androidx.core.graphics.ColorUtils.XYZ_WHITE_REFERENCE_X)\ldouble double r9 = pivotXyzComponent(r9 \/ androidx.core.graphics.ColorUtils.XYZ_WHITE_REFERENCE_Y)\ldouble double r11 = pivotXyzComponent(r11 \/ androidx.core.graphics.ColorUtils.XYZ_WHITE_REFERENCE_Z)\lr13[0] = java.lang.Math.max(0.0d, (116.0d * r9) \- 16.0d)\lr13[1] = (r7 \- r9) * 500.0d\lr13[2] = (r9 \- r11) * 200.0d\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0047}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0048}"];
MethodNode[shape=record,label="{public static void androidx.core.graphics.ColorUtils.XYZToLAB((r7v0 'x' double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'y' double A[D('y' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'z' double A[D('z' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'outLab' double[] A[D('outLab' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x004f \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

