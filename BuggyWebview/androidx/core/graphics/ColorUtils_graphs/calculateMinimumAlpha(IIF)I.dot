digraph "CFG forandroidx.core.graphics.ColorUtils.calculateMinimumAlpha(IIF)I" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000}"];
Node_28 [shape=record,label="{28\:\ 0x0006|if (android.graphics.Color.alpha(r11) != 255) goto L22\l}"];
Node_29 [shape=record,label="{29\:\ 0x0008|int r0 = setAlphaComponent(r10, 255)\ldouble r1 = calculateContrast(r0, r11)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|if ((r1 \> ((double) r12) ? 1 : (r1 == ((double) r12) ? 0 : \-1)) \>= 0) goto L7\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|RETURN\l|return \-1\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|r3 = 0\lr4 = 0\lr5 = 255\l}"];
Node_34 [shape=record,label="{34\:\ 0x001b|LOOP_START\lLOOP:0: B:34:0x001b\-\>B:42:0x0038\lPHI: r3 r4 r5 \l  PHI: (r3v2 'numIterations' int) = (r3v1 'numIterations' int), (r3v3 'numIterations' int) binds: [B:33:0x0017, B:42:0x0038] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'minAlpha' int) = (r4v0 'minAlpha' int), (r4v2 'minAlpha' int) binds: [B:33:0x0017, B:42:0x0038] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v2 'maxAlpha' int) = (r5v1 'maxAlpha' int), (r5v4 'maxAlpha' int) binds: [B:33:0x0017, B:42:0x0038] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|if (r3 \> 10) goto L21\l}"];
Node_36 [shape=record,label="{36\:\ 0x001f}"];
Node_37 [shape=record,label="{37\:\ 0x0022|if ((r5 \- r4) \<= 1) goto L19\l}"];
Node_38 [shape=record,label="{38\:\ 0x0024|int r6 = (r4 + r5) \/ 2\lint r0 = setAlphaComponent(r10, r6)\ldouble r1 = calculateContrast(r0, r11)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0033|if ((r1 \> ((double) r12) ? 1 : (r1 == ((double) r12) ? 0 : \-1)) \>= 0) goto L17\l}"];
Node_40 [shape=record,label="{40\:\ 0x0035|r4 = r6\l}"];
Node_49 [shape=record,label="{49\:\ 0x0038|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0038|LOOP_END\lLOOP:0: B:34:0x001b\-\>B:42:0x0038\lPHI: r4 r5 \l  PHI: (r4v2 'minAlpha' int) = (r4v1 'minAlpha' int), (r4v3 'minAlpha' int) binds: [B:48:0x0038, B:49:0x0038] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v4 'maxAlpha' int) = (r5v3 'maxAlpha' int), (r5v2 'maxAlpha' int) binds: [B:48:0x0038, B:49:0x0038] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = r3 + 1\l}"];
Node_41 [shape=record,label="{41\:\ 0x0037|r5 = r6\l}"];
Node_48 [shape=record,label="{48\:\ 0x0038|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x003c|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x003c|RETURN\l|return r5\l}"];
Node_47 [shape=record,label="{47\:\ 0x003c|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x003d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"background can not be translucent: #\")\lr1.append(java.lang.Integer.toHexString(r11))\l}"];
Node_45 [shape=record,label="{45\:\ 0x0057|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static int androidx.core.graphics.ColorUtils.calculateMinimumAlpha((r10v0 'foreground' int A[D('foreground' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'background' int A[D('background' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'minContrastRatio' float A[D('minContrastRatio' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:42:0x0038 \-\> B:34:0x001b, CROSS_EDGE: B:41:0x0037 \-\> B:42:0x0038, CROSS_EDGE: B:43:0x003c \-\> B:26:?, CROSS_EDGE: B:35:0x001d \-\> B:43:0x003c, CROSS_EDGE: B:45:0x0057 \-\> B:26:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_44;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_26;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_47;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_49;
Node_49 -> Node_42;
Node_42 -> Node_34;
Node_41 -> Node_48;
Node_48 -> Node_42;
Node_46 -> Node_43;
Node_43 -> Node_26;
Node_47 -> Node_43;
Node_44 -> Node_45;
Node_45 -> Node_26;
}

