digraph "CFG forandroidx.core.graphics.BitmapKt.createBitmap$default(IILandroid\/graphics\/Bitmap$Config;ZLandroid\/graphics\/ColorSpace;ILjava\/lang\/Object;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r7 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:113)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r3 I:android.graphics.Bitmap$Config A[D('config' android.graphics.Bitmap$Config)]) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config  (LINE:116)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: ARITH  (r7 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char])  (LINE:113)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000b \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: CONST  (r4 I:??[boolean, int, float, short, byte, char] A[D('hasAlpha' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:117)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000b|0x000b: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char]) & (16 ??[int, float, short, byte, char])  (LINE:113)\l}"];
Node_9 [shape=record,label="{9\:\ 0x000d|0x000d: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001b \l}"];
Node_10 [shape=record,label="{10\:\ 0x000f|0x000f: SGET  (r6 I:android.graphics.ColorSpace$Named) =  android.graphics.ColorSpace.Named.SRGB android.graphics.ColorSpace$Named  (LINE:118)\l0x0011: INVOKE  (r6 I:android.graphics.ColorSpace) = (r6 I:android.graphics.ColorSpace$Named) type: STATIC call: android.graphics.ColorSpace.get(android.graphics.ColorSpace$Named):android.graphics.ColorSpace A[MD:(android.graphics.ColorSpace$Named):android.graphics.ColorSpace (c)]\l0x0015: CONST_STR  (r7 I:java.lang.String) =  \"get(ColorSpace.Named.SRGB)\" \l0x0017: INVOKE  (r6 I:java.lang.Object), (r7 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001a: MOVE  (r5 I:??[OBJECT, ARRAY] A[D('colorSpace' android.graphics.ColorSpace)]) = (r6 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: CONST_STR  (r6 I:java.lang.String) =  \"config\"  (LINE:113)\l0x001d: INVOKE  (r3 I:java.lang.Object A[D('config' android.graphics.Bitmap$Config)]), (r6 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0020: CONST_STR  (r6 I:java.lang.String) =  \"colorSpace\" \l0x0022: INVOKE  (r5 I:java.lang.Object A[D('colorSpace' android.graphics.ColorSpace)]), (r6 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0025: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0026: INVOKE  (r7 I:android.graphics.Bitmap) = \l  (r1 I:int A[D('width' int)])\l  (r2 I:int A[D('height' int)])\l  (r3 I:android.graphics.Bitmap$Config A[D('config' android.graphics.Bitmap$Config)])\l  (r4 I:boolean A[D('hasAlpha' boolean)])\l  (r5 I:android.graphics.ColorSpace A[D('colorSpace' android.graphics.ColorSpace)])\l type: STATIC call: android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config, boolean, android.graphics.ColorSpace):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap$Config, boolean, android.graphics.ColorSpace):android.graphics.Bitmap (c)] (LINE:120)\l0x002a: CONST_STR  (r0 I:java.lang.String) =  \"createBitmap(width, heigâ€¦ig, hasAlpha, colorSpace)\" \l0x002c: INVOKE  (r7 I:java.lang.Object), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|RETURN\l|0x002f: RETURN  (r7 I:android.graphics.Bitmap) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ android.graphics.Bitmap androidx.core.graphics.BitmapKt.createBitmap$default((r1 I:int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.graphics.Bitmap$Config A[D('config' android.graphics.Bitmap$Config), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('hasAlpha' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.ColorSpace A[D('colorSpace' android.graphics.ColorSpace), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:9:0x000d \-\> B:11:0x001b, CROSS_EDGE: B:6:0x0008 \-\> B:8:0x000b, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lDebug Info:\l  \-1 \-0x002f: r1 'width' I\l  \-1 \-0x002f: r2 'height' I\l  \-1 \-0x002f: r3 'config' Landroid\/graphics\/Bitmap$Config;\l  \-1 \-0x002f: r4 'hasAlpha' Z\l  \-1 \-0x002f: r5 'colorSpace' Landroid\/graphics\/ColorSpace;\l  0x0026\-0x002f: r6 '$i$f$createBitmap' I\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [113=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

