digraph "CFG forandroidx.core.graphics.BitmapKt.contains(Landroid\/graphics\/Bitmap;Landroid\/graphics\/PointF;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"p\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|if ((r5.x \> 0.0f ? 1 : (r5.x == 0.0f ? 0 : \-1)) \< 0) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012}"];
Node_5 [shape=record,label="{5\:\ 0x001b|if ((r5.x \> ((float) r4.getWidth()) ? 1 : (r5.x == ((float) r4.getWidth()) ? 0 : \-1)) \>= 0) goto L11\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d}"];
Node_7 [shape=record,label="{7\:\ 0x0021|if ((r5.y \> 0.0f ? 1 : (r5.y == 0.0f ? 0 : \-1)) \< 0) goto L11\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023}"];
Node_9 [shape=record,label="{9\:\ 0x002c|if ((r5.y \> ((float) r4.getHeight()) ? 1 : (r5.y == ((float) r4.getHeight()) ? 0 : \-1)) \>= 0) goto L11\l}"];
Node_10 [shape=record,label="{10\:\ 0x002e|SYNTHETIC\lRETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0030|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public static final boolean androidx.core.graphics.BitmapKt.contains((r4v0 '$this$contains' android.graphics.Bitmap A[D('$this$contains' android.graphics.Bitmap), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'p' android.graphics.PointF A[D('p' android.graphics.PointF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0030 \-\> B:12:0x0031, CROSS_EDGE: B:7:0x0021 \-\> B:11:0x0030, CROSS_EDGE: B:5:0x001b \-\> B:11:0x0030, CROSS_EDGE: B:3:0x0010 \-\> B:11:0x0030\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_1;
}

