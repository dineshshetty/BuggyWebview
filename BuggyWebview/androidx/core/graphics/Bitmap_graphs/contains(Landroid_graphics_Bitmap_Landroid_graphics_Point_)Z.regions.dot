digraph "CFG forandroidx.core.graphics.BitmapKt.contains(Landroid\/graphics\/Bitmap;Landroid\/graphics\/Point;)Z" {
subgraph cluster_Region_679298553 {
label = "R(2:1|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"p\")\lint int r1 = r5.getWidth()\lint int r2 = r6.x\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|RETURN\lPHI: r1 \l  PHI: (r1v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|return (r2 \>= 0 && r2 \< r1) && r6.y \>= 0 && r6.y \< r5.getHeight()\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0013}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0015|REMOVE\lADDED_TO_REGION\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0017}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x001c}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001e|REMOVE\lADDED_TO_REGION\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0020}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0026|REMOVE\lADDED_TO_REGION\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0029|ORIG_RETURN\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0019}"];
MethodNode[shape=record,label="{public static final boolean androidx.core.graphics.BitmapKt.contains((r5v0 '$this$contains' android.graphics.Bitmap A[D('$this$contains' android.graphics.Bitmap), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'p' android.graphics.Point A[D('p' android.graphics.Point), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0026 \-\> B:14:0x002a, CROSS_EDGE: B:9:0x001e \-\> B:13:0x0029, CROSS_EDGE: B:7:0x001a \-\> B:13:0x0029, CROSS_EDGE: B:6:0x0019 \-\> B:7:0x001a, CROSS_EDGE: B:3:0x0013 \-\> B:6:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_7 -> Node_8;
Node_7 -> Node_13;
Node_0 -> Node_2;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15;
Node_15 -> Node_1;
Node_13 -> Node_1;
Node_6 -> Node_7;
}

