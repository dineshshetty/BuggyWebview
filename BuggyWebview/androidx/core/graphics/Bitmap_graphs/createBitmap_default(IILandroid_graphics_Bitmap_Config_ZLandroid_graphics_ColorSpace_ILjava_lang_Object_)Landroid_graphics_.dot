digraph "CFG forandroidx.core.graphics.BitmapKt.createBitmap$default(IILandroid\/graphics\/Bitmap$Config;ZLandroid\/graphics\/ColorSpace;ILjava\/lang\/Object;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r6 & 4) == 0) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|android.graphics.Bitmap$Config r3 = android.graphics.Bitmap.Config.ARGB_8888\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|PHI: r3 \l  PHI: (r3v1 'config' android.graphics.Bitmap$Config) = (r3v0 'config' android.graphics.Bitmap$Config), (r3v2 'config' android.graphics.Bitmap$Config) binds: [B:3:0x0002, B:4:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|if ((r6 & 8) == 0) goto L7\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|r4 = true\l}"];
Node_8 [shape=record,label="{8\:\ 0x000b|PHI: r4 \l  PHI: (r4v1 'hasAlpha' boolean) = (r4v0 'hasAlpha' boolean), (r4v2 'hasAlpha' boolean) binds: [B:6:0x0008, B:7:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x000d|if ((r6 & 16) == 0) goto L10\l}"];
Node_10 [shape=record,label="{10\:\ 0x000f|android.graphics.ColorSpace r6 = android.graphics.ColorSpace.get(android.graphics.ColorSpace.Named.SRGB)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r6, \"get(ColorSpace.Named.SRGB)\")\lr5 = r6\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|PHI: r5 \l  PHI: (r5v1 'colorSpace' android.graphics.ColorSpace) = (r5v0 'colorSpace' android.graphics.ColorSpace), (r5v2 'colorSpace' android.graphics.ColorSpace) binds: [B:9:0x000d, B:10:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"config\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"colorSpace\")\landroid.graphics.Bitmap r7 = android.graphics.Bitmap.createBitmap(r1, r2, r3, r4, r5)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r7, \"createBitmap(width, heigâ€¦ig, hasAlpha, colorSpace)\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x002f|RETURN\l|return r7\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ android.graphics.Bitmap androidx.core.graphics.BitmapKt.createBitmap$default((r1v0 'width' int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'height' int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'config' android.graphics.Bitmap$Config A[D('config' android.graphics.Bitmap$Config), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'hasAlpha' boolean A[D('hasAlpha' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'colorSpace' android.graphics.ColorSpace A[D('colorSpace' android.graphics.ColorSpace), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:9:0x000d \-\> B:11:0x001b, CROSS_EDGE: B:6:0x0008 \-\> B:8:0x000b, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [113=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

