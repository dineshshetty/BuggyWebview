digraph "CFG forandroidx.core.graphics.BitmapKt.scale$default(Landroid\/graphics\/Bitmap;IIZILjava\/lang\/Object;)Landroid\/graphics\/Bitmap;" {
subgraph cluster_Region_67141500 {
label = "R(3:(1:3)|4|5)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1059908979 {
label = "IF [B:3:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r5 & 4) != 0) goto L3\l}"];
subgraph cluster_Region_1375239660 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|r4 = true\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x0005|PHI: r4 \l  PHI: (r4v1 'filter' boolean) = (r4v0 'filter' boolean), (r4v2 'filter' boolean) binds: [B:3:0x0002, B:4:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\landroid.graphics.Bitmap android.graphics.Bitmap r6 = android.graphics.Bitmap.createScaledBitmap(r1, r2, r3, r4)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r6, \"createScaledBitmap(this, width, height, filter)\")\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|RETURN\l|return r6\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ android.graphics.Bitmap androidx.core.graphics.BitmapKt.scale$default((r1v0 '$this$scale_u24default' android.graphics.Bitmap A[D('$this$scale_u24default' android.graphics.Bitmap), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'width' int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'height' int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'filter' boolean A[D('filter' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:3:0x0002 \-\> B:5:0x0005\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
}

