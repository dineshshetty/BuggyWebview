digraph "CFG forandroidx.core.graphics.BitmapKt.contains(Landroid\/graphics\/Bitmap;Landroid\/graphics\/Point;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"p\")\lint r1 = r5.getWidth()\lint r2 = r6.x\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|if (r2 \< 0) goto L13\l}"];
Node_4 [shape=record,label="{4\:\ 0x0015|if (r2 \>= r1) goto L13\l}"];
Node_5 [shape=record,label="{5\:\ 0x0017|r1 = true\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|PHI: r1 \l  PHI: (r1v2 boolean) = (r1v1 boolean), (r1v5 boolean) binds: [B:6:0x0019, B:5:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L12\l}"];
Node_8 [shape=record,label="{8\:\ 0x001c}"];
Node_9 [shape=record,label="{9\:\ 0x001e|if (r6.y \< 0) goto L12\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020}"];
Node_11 [shape=record,label="{11\:\ 0x0026|if (r6.y \>= r5.getHeight()) goto L12\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|RETURN\lORIG_RETURN\l|return false\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|r1 = false\l}"];
MethodNode[shape=record,label="{public static final boolean androidx.core.graphics.BitmapKt.contains((r5v0 '$this$contains' android.graphics.Bitmap A[D('$this$contains' android.graphics.Bitmap), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'p' android.graphics.Point A[D('p' android.graphics.Point), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0026 \-\> B:14:0x002a, CROSS_EDGE: B:9:0x001e \-\> B:13:0x0029, CROSS_EDGE: B:7:0x001a \-\> B:13:0x0029, CROSS_EDGE: B:6:0x0019 \-\> B:7:0x001a, CROSS_EDGE: B:3:0x0013 \-\> B:6:0x0019\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_15 -> Node_1;
Node_13 -> Node_1;
Node_6 -> Node_7;
}

