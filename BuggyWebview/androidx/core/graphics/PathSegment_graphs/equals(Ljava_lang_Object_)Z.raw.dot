digraph "CFG forandroidx.core.graphics.PathSegment.equals(Ljava\/lang\/Object;)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:72)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0001|0x0001: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('o' java.lang.Object)])  \-\> B:25:0x0004 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('o' java.lang.Object)]) androidx.core.graphics.PathSegment  (LINE:73)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x000a \l}"];
Node_27 [shape=record,label="{27\:\ 0x0009|RETURN\l|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x000a|0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('o' java.lang.Object)])  (LINE:74)\l0x000b: CHECK_CAST (r1 I:androidx.core.graphics.PathSegment) = (androidx.core.graphics.PathSegment) (r1 I:??[OBJECT, ARRAY]) \l0x000d: IGET  (r3 I:float) = (r5 I:androidx.core.graphics.PathSegment) androidx.core.graphics.PathSegment.mStartFraction float  (LINE:75)\l0x000f: IGET  (r4 I:float) = (r1 I:androidx.core.graphics.PathSegment A[D('that' androidx.core.graphics.PathSegment)]) androidx.core.graphics.PathSegment.mStartFraction float \l0x0011: INVOKE  (r3 I:int) = (r3 I:float), (r4 I:float) type: STATIC call: java.lang.Float.compare(float, float):int A[MD:(float, float):int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0036 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0017|0x0017: IGET  (r3 I:float) = (r5 I:androidx.core.graphics.PathSegment) androidx.core.graphics.PathSegment.mEndFraction float \l0x0019: IGET  (r4 I:float) = (r1 I:androidx.core.graphics.PathSegment A[D('that' androidx.core.graphics.PathSegment)]) androidx.core.graphics.PathSegment.mEndFraction float \l0x001b: INVOKE  (r3 I:int) = (r3 I:float), (r4 I:float) type: STATIC call: java.lang.Float.compare(float, float):int A[MD:(float, float):int (c)] (LINE:76)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0036 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0021|0x0021: IGET  (r3 I:android.graphics.PointF) = (r5 I:androidx.core.graphics.PathSegment) androidx.core.graphics.PathSegment.mStart android.graphics.PointF \l0x0023: IGET  (r4 I:android.graphics.PointF) = (r1 I:androidx.core.graphics.PathSegment A[D('that' androidx.core.graphics.PathSegment)]) androidx.core.graphics.PathSegment.mStart android.graphics.PointF \l0x0025: INVOKE  (r3 I:boolean) = (r3 I:android.graphics.PointF), (r4 I:java.lang.Object) type: VIRTUAL call: android.graphics.PointF.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:77)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0029|0x0029: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0036 \l}"];
Node_34 [shape=record,label="{34\:\ 0x002b|0x002b: IGET  (r3 I:android.graphics.PointF) = (r5 I:androidx.core.graphics.PathSegment) androidx.core.graphics.PathSegment.mEnd android.graphics.PointF \l0x002d: IGET  (r4 I:android.graphics.PointF) = (r1 I:androidx.core.graphics.PathSegment A[D('that' androidx.core.graphics.PathSegment)]) androidx.core.graphics.PathSegment.mEnd android.graphics.PointF \l0x002f: INVOKE  (r3 I:boolean) = (r3 I:android.graphics.PointF), (r4 I:java.lang.Object) type: VIRTUAL call: android.graphics.PointF.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:78)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0033|0x0033: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0036 \l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0037: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:75)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0036|RETURN\lORIG_RETURN\l|0x0036: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0037: RETURN  (r0 I:boolean)  (LINE:75)\l}"];
MethodNode[shape=record,label="{public boolean androidx.core.graphics.PathSegment.equals((r5 'this' I:androidx.core.graphics.PathSegment A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Object A[D('o' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0009 \-\> B:21:?, CROSS_EDGE: B:38:0x0037 \-\> B:21:?, CROSS_EDGE: B:35:0x0033 \-\> B:38:0x0037, CROSS_EDGE: B:33:0x0029 \-\> B:37:0x0036, CROSS_EDGE: B:31:0x001f \-\> B:37:0x0036, CROSS_EDGE: B:29:0x0015 \-\> B:37:0x0036\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0037: r1 'that' Landroidx\/core\/graphics\/PathSegment;\l  \-1 \-0x0037: r6 'o' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_21;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_37;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_37;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_39[style=dashed];
Node_39 -> Node_21;
Node_37 -> Node_21;
}

