digraph "CFG forandroidx.core.graphics.CanvasKt.withRotation$default(Landroid\/graphics\/Canvas;FFFLkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r7 & 1) == 0) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|r3 = 0.0f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|PHI: r3 \l  PHI: (r3v1 'degrees' float) = (r3v0 'degrees' float), (r3v2 'degrees' float) binds: [B:3:0x0002, B:4:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|if ((r7 & 2) == 0) goto L7\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|r4 = 0.0f\l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|PHI: r4 \l  PHI: (r4v1 'pivotX' float) = (r4v0 'pivotX' float), (r4v2 'pivotX' float) binds: [B:6:0x0007, B:7:0x0009] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,label="{9\:\ 0x000c|if ((r7 & 4) == 0) goto L10\l}"];
Node_10 [shape=record,label="{10\:\ 0x000e|r5 = 0.0f\l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|PHI: r5 \l  PHI: (r5v1 'pivotY' float) = (r5v0 'pivotY' float), (r5v2 'pivotY' float) binds: [B:9:0x000c, B:10:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"block\")\lint r8 = r2.save()\lr2.rotate(r3, r4, r5)\lr0 = 1\l}"];
Node_18 [shape=record,label="{18\:\ 0x0023|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0031, blocks: (B:12:0x0023), top: B:18:0x0023 \}\lCatch: all \-\> 0x0031\l|r6.invoke(r2)     \/\/ Catch: java.lang.Throwable \-\> L31\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|DONT_GENERATE\l|kotlin.jvm.internal.InlineMarker.finallyStart(r0)\lr2.restoreToCount(r8)\lkotlin.jvm.internal.InlineMarker.finallyEnd(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|ExcHandler: all \-\> 0x0031\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|FINALLY_INSNS\l|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lr2.restoreToCount(r8)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|throw r1\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void androidx.core.graphics.CanvasKt.withRotation$default((r2v0 '$this$withRotation_u24default' android.graphics.Canvas A[D('$this$withRotation_u24default' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'degrees' float A[D('degrees' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'pivotX' float A[D('pivotX' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'pivotY' float A[D('pivotY' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'block' kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:17:0x003b \-\> B:1:?, CROSS_EDGE: B:18:0x0023 \-\> B:15:0x0031, CROSS_EDGE: B:9:0x000c \-\> B:11:0x000f, CROSS_EDGE: B:6:0x0007 \-\> B:8:0x000a, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0005\lTryCatch #0 \{all \-\> 0x0031, blocks: (B:12:0x0023), top: B:18:0x0023 \}\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [60=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_18;
Node_18 -> Node_12;
Node_18 -> Node_15;
Node_12 -> Node_13;
Node_12 -> Node_19;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_19 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_1;
}

