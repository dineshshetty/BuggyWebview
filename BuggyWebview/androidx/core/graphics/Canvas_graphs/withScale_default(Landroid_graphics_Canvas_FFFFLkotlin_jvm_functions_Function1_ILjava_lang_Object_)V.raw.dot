digraph "CFG forandroidx.core.graphics.CanvasKt.withScale$default(Landroid\/graphics\/Canvas;FFFFLkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r9 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:79)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: CONST  (r3 I:??[int, float, short, byte, char] A[D('x' float)]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:80)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: ARITH  (r9 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:79)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000c \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: CONST  (r4 I:??[int, float, short, byte, char] A[D('y' float)]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:81)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|0x000c: ARITH  (r9 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:79)\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|0x000e: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0011 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|0x0010: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pivotX' float)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:82)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: ARITH  (r8 I:??[int, boolean]) = (r8 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char])  (LINE:79)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0013: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0016 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|0x0015: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pivotY' float)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:83)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|0x0016: CONST_STR  (r8 I:java.lang.String) =  \"\<this\>\"  (LINE:79)\l0x0018: INVOKE  (r2 I:java.lang.Object A[D('$this$withScale_u24default' android.graphics.Canvas)]), (r8 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001b: CONST_STR  (r8 I:java.lang.String) =  \"block\" \l0x001d: INVOKE  (r7 I:java.lang.Object A[D('block' kotlin.jvm.functions.Function1)]), (r8 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0020: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: INVOKE  (r9 I:int) = (r2 I:android.graphics.Canvas A[D('$this$withScale_u24default' android.graphics.Canvas)]) type: VIRTUAL call: android.graphics.Canvas.save():int A[MD:():int (c)] (LINE:86)\l0x0025: INVOKE  \l  (r2 I:android.graphics.Canvas A[D('$this$withScale_u24default' android.graphics.Canvas)])\l  (r3 I:float A[D('x' float)])\l  (r4 I:float A[D('y' float)])\l  (r5 I:float A[D('pivotX' float)])\l  (r6 I:float A[D('pivotY' float)])\l type: VIRTUAL call: android.graphics.Canvas.scale(float, float, float, float):void A[MD:(float, float, float, float):void (c)] (LINE:87)\l0x0029: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:89)\l}"];
Node_21 [shape=record,label="{21\:\ 0x002a|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0038, blocks: (B:15:0x002a), top: B:21:0x002a \}\lCatch: all \-\> 0x0038\l|0x002a: INVOKE  \l  (r7 I:kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1)])\l  (r2 I:java.lang.Object A[D('$this$withScale_u24default' android.graphics.Canvas)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0038, MD:(P1):R (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002d|0x002d: INVOKE  (r0 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x0030: INVOKE  \l  (r2 I:android.graphics.Canvas A[D('$this$withScale_u24default' android.graphics.Canvas)])\l  (r9 I:int A[D('checkpoint' int)])\l type: VIRTUAL call: android.graphics.Canvas.restoreToCount(int):void A[MD:(int):void (c)] (LINE:91)\l0x0033: INVOKE  (r0 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|RETURN\l|0x0037: RETURN    (LINE:93)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0038|ExcHandler: all \-\> 0x0038\l|0x0038: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0038] (LINE:90)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|0x0039: INVOKE  (r0 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x003c: INVOKE  \l  (r2 I:android.graphics.Canvas A[D('$this$withScale_u24default' android.graphics.Canvas)])\l  (r9 I:int A[D('checkpoint' int)])\l type: VIRTUAL call: android.graphics.Canvas.restoreToCount(int):void A[MD:(int):void (c)] (LINE:91)\l0x003f: INVOKE  (r0 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0042: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void androidx.core.graphics.CanvasKt.withScale$default((r2 I:android.graphics.Canvas A[D('$this$withScale_u24default' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:float A[D('x' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[D('y' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[D('pivotX' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float A[D('pivotY' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:20:0x0042 \-\> B:1:?, CROSS_EDGE: B:21:0x002a \-\> B:18:0x0038, CROSS_EDGE: B:12:0x0013 \-\> B:14:0x0016, CROSS_EDGE: B:9:0x000e \-\> B:11:0x0011, CROSS_EDGE: B:6:0x0008 \-\> B:8:0x000c, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lDebug Info:\l  \-1 \-0x0042: r2 '$this$withScale_u24default' Landroid\/graphics\/Canvas;\l  \-1 \-0x0042: r3 'x' F\l  \-1 \-0x0042: r4 'y' F\l  \-1 \-0x0042: r5 'pivotX' F\l  \-1 \-0x0042: r6 'pivotY' F\l  \-1 \-0x0042: r7 'block' Lkotlin\/jvm\/functions\/Function1;\l  0x0021\-0x0042: r8 '$i$f$withScale' I\l  0x0025\-0x0042: r9 'checkpoint' I\lTryCatch #0 \{all \-\> 0x0038, blocks: (B:15:0x002a), top: B:21:0x002a \}\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [79=5]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_21;
Node_21 -> Node_15;
Node_21 -> Node_18;
Node_15 -> Node_16;
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_22 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_1;
}

