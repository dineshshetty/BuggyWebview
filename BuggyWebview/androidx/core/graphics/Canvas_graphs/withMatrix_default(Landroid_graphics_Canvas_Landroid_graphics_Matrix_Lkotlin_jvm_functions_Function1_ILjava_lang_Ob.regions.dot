digraph "CFG forandroidx.core.graphics.CanvasKt.withMatrix$default(Landroid\/graphics\/Canvas;Landroid\/graphics\/Matrix;Lkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)V" {
subgraph cluster_Region_875533084 {
label = "R(4:1|(1:3)|4|(1:6))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|int r6 = 1\l}"];
subgraph cluster_IfRegion_1510265087 {
label = "IF [B:3:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r5 & 1) != 0) goto L3\l}"];
subgraph cluster_Region_771037537 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|r3 = new android.graphics.Matrix()\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x000a|PHI: r3 \l  PHI: (r3v1 'matrix' android.graphics.Matrix) = (r3v0 'matrix' android.graphics.Matrix), (r3v2 'matrix' android.graphics.Matrix) binds: [B:3:0x0002, B:4:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"matrix\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"block\")\lint int r0 = r2.save()\lr2.concat(r3)\l}"];
subgraph cluster_TryCatchRegion_1243251428 {
label = "Try: R(1:6) finally: R(3:11|12|13)";
node [shape=record,color=blue];
subgraph cluster_Region_710079918 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0022|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0030, blocks: (B:6:0x0022), top: B:12:0x0022 \}\lCatch: all \-\> 0x0030\l|r4.invoke(r2)     \/\/ Catch: java.lang.Throwable \-\> L30\l}"];
}
subgraph cluster_Region_1714464154 {
label = "R(3:11|12|13) | ExcHandler: all \-\> 0x0030\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0030|ExcHandler: all \-\> 0x0030\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|FINALLY_INSNS\l|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lr2.restoreToCount(r0)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|throw r1\l}"];
}
}
}
subgraph cluster_Region_1714464154 {
label = "R(3:11|12|13) | ExcHandler: all \-\> 0x0030\l";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0030|ExcHandler: all \-\> 0x0030\l}"];
Node_10 [shape=record,label="{10\:\ 0x0031|FINALLY_INSNS\l|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lr2.restoreToCount(r0)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|throw r1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0022|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0025|DONT_GENERATE\l|kotlin.jvm.internal.InlineMarker.finallyStart(r6)\lr2.restoreToCount(r0)\lkotlin.jvm.internal.InlineMarker.finallyEnd(r6)\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x002f}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void androidx.core.graphics.CanvasKt.withMatrix$default((r2v0 '$this$withMatrix_u24default' android.graphics.Canvas A[D('$this$withMatrix_u24default' android.graphics.Canvas), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'matrix' android.graphics.Matrix A[D('matrix' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'block' kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:11:0x003a \-\> B:1:?, CROSS_EDGE: B:12:0x0022 \-\> B:9:0x0030, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x000a\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0030, blocks: (B:6:0x0022), top: B:12:0x0022 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_12;
Node_6 -> Node_7;
Node_6 -> Node_13;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_0 -> Node_2;
Node_12 -> Node_6;
Node_12 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_13 -> Node_9;
}

