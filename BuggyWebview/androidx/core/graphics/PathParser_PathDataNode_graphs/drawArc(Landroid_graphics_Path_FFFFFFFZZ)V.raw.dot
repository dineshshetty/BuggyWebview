digraph "CFG forandroidx.core.graphics.PathParser.PathDataNode.drawArc(Landroid\/graphics\/Path;FFFFFFFZZ)V" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r74 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('x0' float)])  (LINE:657)\l0x0002: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r75 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('y0' float)]) \l0x0004: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r76 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('x1' float)]) \l0x0006: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r77 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('y1' float)]) \l0x0008: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r78 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('a' float)]) \l0x000a: MOVE  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r79 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('b' float)]) \l0x000c: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r82 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isPositiveArc' boolean)]) \l0x000e: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r80 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('theta' float)]) \l0x0010: CAST (r0 I:double) = (double) (r8 I:float) \l0x0011: INVOKE  (r35 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.toRadians(double):double A[MD:(double):double (c)]\l0x0015: INVOKE  (r37 I:double) = (r35 I:double A[D('thetaD' double)]) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)] (LINE:659)\l0x0019: INVOKE  (r39 I:double) = (r35 I:double A[D('thetaD' double)]) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)] (LINE:660)\l0x001d: CAST (r0 I:double) = (double) (r10 I:float)  (LINE:663)\l0x001e: ARITH  (r0 I:double) = (r0 I:double) * (r37 I:double A[D('cosTheta' double)]) \l0x0020: CAST (r2 I:double) = (double) (r11 I:float) \l0x0021: ARITH  (r2 I:double) = (r2 I:double) * (r39 I:double A[D('sinTheta' double)]) \l0x0023: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x0024: CAST (r2 I:double) = (double) (r14 I:float) \l0x0025: ARITH  (r41 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0027: NEG  (r0 I:float) = (r10 I:float)  (LINE:664)\l0x0028: CAST (r0 I:double) = (double) (r0 I:float) \l0x0029: ARITH  (r0 I:double) = (r0 I:double) * (r39 I:double A[D('sinTheta' double)]) \l0x002b: CAST (r2 I:double) = (double) (r11 I:float) \l0x002c: ARITH  (r2 I:double) = (r2 I:double) * (r37 I:double A[D('cosTheta' double)]) \l0x002e: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x002f: CAST (r2 I:double) = (double) (r15 I:float) \l0x0030: ARITH  (r43 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0032: CAST (r0 I:double) = (double) (r12 I:float)  (LINE:665)\l0x0033: ARITH  (r0 I:double) = (r0 I:double) * (r37 I:double A[D('cosTheta' double)]) \l0x0035: CAST (r2 I:double) = (double) (r13 I:float) \l0x0036: ARITH  (r2 I:double) = (r2 I:double) * (r39 I:double A[D('sinTheta' double)]) \l0x0038: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x0039: CAST (r2 I:double) = (double) (r14 I:float) \l0x003a: ARITH  (r45 I:double) = (r0 I:double) \/ (r2 I:double) \l0x003c: NEG  (r0 I:float) = (r12 I:float)  (LINE:666)\l0x003d: CAST (r0 I:double) = (double) (r0 I:float) \l0x003e: ARITH  (r0 I:double) = (r0 I:double) * (r39 I:double A[D('sinTheta' double)]) \l0x0040: CAST (r2 I:double) = (double) (r13 I:float) \l0x0041: ARITH  (r2 I:double) = (r2 I:double) * (r37 I:double A[D('cosTheta' double)]) \l0x0043: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x0044: CAST (r2 I:double) = (double) (r15 I:float) \l0x0045: ARITH  (r47 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0047: ARITH  (r49 I:double) = (r41 I:double A[D('x0p' double)]) \- (r45 I:double A[D('x1p' double)])  (LINE:669)\l0x0049: ARITH  (r51 I:double) = (r43 I:double A[D('y0p' double)]) \- (r47 I:double A[D('y1p' double)])  (LINE:670)\l0x004b: ARITH  (r0 I:double) = (r41 I:double A[D('x0p' double)]) + (r45 I:double A[D('x1p' double)])  (LINE:671)\l0x004d: CONST  (r2 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double]) \l0x004f: ARITH  (r53 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0051: ARITH  (r0 I:double) = (r43 I:double A[D('y0p' double)]) + (r47 I:double A[D('y1p' double)])  (LINE:672)\l0x0053: ARITH  (r55 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0055: ARITH  (r0 I:double) = (r49 I:double A[D('dx' double)]) * (r49 I:double A[D('dx' double)])  (LINE:674)\l0x0057: ARITH  (r2 I:double) = (r51 I:double A[D('dy' double)]) * (r51 I:double A[D('dy' double)]) \l0x0059: ARITH  (r6 I:double) = (r0 I:double) + (r2 I:double) \l0x005b: CONST_STR  (r0 I:java.lang.String) =  \"PathParser\"  (LINE:675)\l0x005d: CONST  (r1 I:??[long, double]) = (0 ??[long, double]) \l0x005f: CMP_L  (r3 I:int) = (r6 I:double A[D('dsq' double)]), (r1 I:double) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0061|0x0061: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0069 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0063|0x0063: CONST_STR  (r1 I:java.lang.String) =  \" Points are coincident\"  (LINE:676)\l0x0065: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0068|RETURN\l|0x0068: RETURN    (LINE:677)\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0069|0x0069: CONST  (r3 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:679)\l0x006b: ARITH  (r3 I:double) = (r3 I:double) \/ (r6 I:double A[D('dsq' double)]) \l0x006c: CONST  (r16 I:??[long, double]) = (4598175219545276416(0x3fd0000000000000, double:0.25) ??[long, double]) \l0x006e: ARITH  (r57 I:double) = (r3 I:double) \- (r16 I:double) \l0x0070: CMP_G  (r3 I:int) = (r57 I:double A[D('disc' double)]), (r1 I:double)  (LINE:680)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0072|0x0072: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:35:0x00b4 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0074|0x0074: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:681)\l0x0076: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0079: CONST_STR  (r2 I:java.lang.String) =  \"Points are too far apart \" \l0x007b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x007e: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:double A[D('dsq' double)]) type: VIRTUAL call: java.lang.StringBuilder.append(double):java.lang.StringBuilder A[MD:(double):java.lang.StringBuilder (c)]\l0x0081: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0085: INVOKE  (r0 I:java.lang.String), (r1 I:java.lang.String) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l0x0088: INVOKE  (r0 I:double) = (r6 I:double A[D('dsq' double)]) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)] (LINE:682)\l0x008c: CONST  (r2 I:??[long, double]) = (4611685973391391630(0x3ffffff583a53b8e, double:1.99999) ??[long, double]) \l0x0091: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x0092: CAST (r5 I:float) = (float) (r0 I:double) \l0x0093: ARITH  (r16 I:float) = (r14 I:float) * (r5 I:float A[D('adjust' float)])  (LINE:683)\l0x0095: ARITH  (r17 I:float) = (r15 I:float) * (r5 I:float A[D('adjust' float)]) \l0x0097: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r73 I:??[OBJECT, ARRAY] A[D('p' android.graphics.Path)]) \l0x0099: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r74 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('x0' float)]) \l0x009b: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r75 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('y0' float)]) \l0x009d: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r76 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('x1' float)]) \l0x009f: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r77 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('y1' float)]) \l0x00a1: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adjust' float)]) \l0x00a3: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('adjust' float)]) = (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a5: MOVE  (r59 I:??[long, double]) = (r6 I:??[long, double] A[D('dsq' double)]) \l0x00a7: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dsq' double)]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a9: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r80 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('theta' float)]) \l0x00ab: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r81 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isMoreThanHalf' boolean)]) \l0x00ad: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00ae: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r82 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isPositiveArc' boolean)]) \l0x00b0: INVOKE  \l  (r0 I:android.graphics.Path)\l  (r1 I:float)\l  (r2 I:float)\l  (r3 I:float)\l  (r4 I:float)\l  (r5 I:float)\l  (r6 I:float)\l  (r7 I:float)\l  (r8 I:boolean)\l  (r9 I:boolean)\l type: STATIC call: androidx.core.graphics.PathParser.PathDataNode.drawArc(android.graphics.Path, float, float, float, float, float, float, float, boolean, boolean):void A[MD:(android.graphics.Path, float, float, float, float, float, float, float, boolean, boolean):void (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x00b3|RETURN\l|0x00b3: RETURN    (LINE:685)\l}"];
Node_35 [shape=record,label="{35\:\ 0x00b4|0x00b4: MOVE  (r59 I:??[long, double] A[D('dsq' double)]) = (r6 I:??[long, double] A[D('dsq' double)])  (LINE:687)\l0x00b6: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b7: INVOKE  (r3 I:double) = (r57 I:double A[D('disc' double)]) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x00bb: ARITH  (r5 I:double) = (r3 I:double A[D('s' double)]) * (r49 I:double A[D('dx' double)])  (LINE:688)\l0x00bd: ARITH  (r7 I:double) = (r3 I:double A[D('s' double)]) * (r51 I:double A[D('dy' double)])  (LINE:689)\l0x00bf: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r81 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('isMoreThanHalf' boolean)])  (LINE:692)\l}"];
Node_36 [shape=record,label="{36\:\ 0x00c1|0x00c1: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x00c8 \l}"];
Node_37 [shape=record,label="{37\:\ 0x00c3|0x00c3: ARITH  (r16 I:double) = (r53 I:double A[D('xm' double)]) \- (r7 I:double A[D('sdy' double)])  (LINE:693)\l0x00c5: ARITH  (r18 I:double) = (r55 I:double A[D('ym' double)]) + (r5 I:double A[D('sdx' double)])  (LINE:694)\l}"];
Node_39 [shape=record,label="{39\:\ 0x00cc|0x00cc: ARITH  (r1 I:double) = (r43 I:double A[D('y0p' double)]) \- (r18 I:double A[D('cy' double)])  (LINE:700)\l0x00ce: MOVE  (r61 I:??[long, double]) = (r3 I:??[long, double] A[D('s' double)]) \l0x00d0: ARITH  (r3 I:double A[D('s' double)]) = (r41 I:double A[D('x0p' double)]) \- (r16 I:double A[D('cx' double)]) \l0x00d2: INVOKE  (r1 I:double) = (r1 I:double), (r3 I:double) type: STATIC call: java.lang.Math.atan2(double, double):double A[MD:(double, double):double (c)]\l0x00d6: ARITH  (r3 I:double) = (r47 I:double A[D('y1p' double)]) \- (r18 I:double A[D('cy' double)])  (LINE:702)\l0x00d8: MOVE  (r63 I:??[long, double]) = (r5 I:??[long, double] A[D('sdx' double)]) \l0x00da: ARITH  (r5 I:double A[D('sdx' double)]) = (r45 I:double A[D('x1p' double)]) \- (r16 I:double A[D('cx' double)]) \l0x00dc: INVOKE  (r3 I:double) = (r3 I:double), (r5 I:double) type: STATIC call: java.lang.Math.atan2(double, double):double A[MD:(double, double):double (c)]\l0x00e0: ARITH  (r5 I:double) = (r3 I:double A[D('eta1' double)]) \- (r1 I:double A[D('eta0' double)])  (LINE:704)\l0x00e2: CONST  (r20 I:??[long, double]) = (0 ??[long, double])  (LINE:705)\l0x00e4: CMP_L  (r9 I:int) = (r5 I:double A[D('sweep' double)]), (r20 I:double) \l}"];
Node_40 [shape=record,label="{40\:\ 0x00e6|0x00e6: IF  (r9 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:42:0x00ea \l}"];
Node_41 [shape=record,label="{41\:\ 0x00e8|0x00e8: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x00eb|0x00eb: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x00fd \l}"];
Node_44 [shape=record,label="{44\:\ 0x00ed|0x00ed: CONST  (r22 I:??[long, double]) = (4618760256179416344(0x401921fb54442d18, double:6.283185307179586) ??[long, double])  (LINE:706)\l0x00f2: CONST  (r20 I:??[long, double]) = (0 ??[long, double]) \l0x00f4: CMP_L  (r9 I:int) = (r5 I:double A[D('sweep' double)]), (r20 I:double) \l}"];
Node_45 [shape=record,label="{45\:\ 0x00f6|0x00f6: IF  (r9 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:47:0x00fb \l}"];
Node_46 [shape=record,label="{46\:\ 0x00f8|0x00f8: ARITH  (r5 I:double) = (r5 I:double A[D('sweep' double)]) \- (r22 I:double)  (LINE:707)\l}"];
Node_47 [shape=record,label="{47\:\ 0x00fb|0x00fb: ARITH  (r5 I:double) = (r5 I:double A[D('sweep' double)]) + (r22 I:double)  (LINE:709)\l}"];
Node_48 [shape=record,label="{48\:\ 0x00fd|0x00fd: MOVE  (r65 I:??[long, double]) = (r3 I:??[long, double] A[D('eta1' double)])  (LINE:713)\l0x00ff: CAST (r3 I:double A[D('eta1' double)]) = (double) (r14 I:float) \l0x0100: ARITH  (r16 I:double) = (r16 I:double A[D('cx' double)]) * (r3 I:double) \l0x0102: CAST (r3 I:double) = (double) (r15 I:float)  (LINE:714)\l0x0103: ARITH  (r3 I:double) = (r3 I:double) * (r18 I:double A[D('cy' double)]) \l0x0105: MOVE  (r67 I:??[long, double]) = (r16 I:??[long, double] A[D('cx' double)])  (LINE:715)\l0x0107: ARITH  (r18 I:double) = (r16 I:double A[D('cx' double)]) * (r37 I:double A[D('cosTheta' double)])  (LINE:716)\l0x0109: ARITH  (r20 I:double) = (r3 I:double A[D('cy' double)]) * (r39 I:double A[D('sinTheta' double)]) \l0x010b: ARITH  (r69 I:double) = (r18 I:double) \- (r20 I:double) \l0x010d: MOVE  (r17 I:??[long, double]) = (r69 I:??[long, double] A[D('cx' double)]) \l0x010f: ARITH  (r19 I:double) = (r67 I:double A[D('tcx' double)]) * (r39 I:double A[D('sinTheta' double)])  (LINE:717)\l0x0111: ARITH  (r21 I:double) = (r3 I:double A[D('cy' double)]) * (r37 I:double A[D('cosTheta' double)]) \l0x0113: ARITH  (r3 I:double A[D('cy' double)]) = (r19 I:double) + (r21 I:double) \l0x0115: MOVE  (r19 I:??[long, double]) = (r3 I:??[long, double] A[D('cy' double)]) \l0x0117: MOVE  (r71 I:??[long, double]) = (r3 I:??[long, double] A[D('cy' double)])  (LINE:719)\l0x0119: CAST (r3 I:double A[D('cy' double)]) = (double) (r14 I:float) \l0x011a: MOVE  (r21 I:??[long, double]) = (r3 I:??[long, double]) \l0x011c: CAST (r3 I:double) = (double) (r15 I:float) \l0x011d: MOVE  (r23 I:??[long, double]) = (r3 I:??[long, double]) \l0x011f: CAST (r3 I:double) = (double) (r10 I:float) \l0x0120: MOVE  (r25 I:??[long, double]) = (r3 I:??[long, double]) \l0x0122: CAST (r3 I:double) = (double) (r11 I:float) \l0x0123: MOVE  (r27 I:??[long, double]) = (r3 I:??[long, double]) \l0x0125: MOVE  (r16 I:??[OBJECT, ARRAY]) = (r73 I:??[OBJECT, ARRAY] A[D('p' android.graphics.Path)]) \l0x0127: MOVE  (r29 I:??[long, double]) = (r35 I:??[long, double] A[D('thetaD' double)]) \l0x0129: MOVE  (r31 I:??[long, double]) = (r1 I:??[long, double] A[D('eta0' double)]) \l0x012b: MOVE  (r33 I:??[long, double]) = (r5 I:??[long, double] A[D('sweep' double)]) \l0x012d: INVOKE  \l  (r16 I:android.graphics.Path)\l  (r17 I:double)\l  (r19 I:double)\l  (r21 I:double)\l  (r23 I:double)\l  (r25 I:double)\l  (r27 I:double)\l  (r29 I:double)\l  (r31 I:double)\l  (r33 I:double)\l type: STATIC call: androidx.core.graphics.PathParser.PathDataNode.arcToBezier(android.graphics.Path, double, double, double, double, double, double, double, double, double):void A[MD:(android.graphics.Path, double, double, double, double, double, double, double, double, double):void (m)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0130|RETURN\l|0x0130: RETURN    (LINE:720)\l}"];
Node_42 [shape=record,label="{42\:\ 0x00ea|0x00ea: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x00c8|0x00c8: ARITH  (r16 I:double A[D('cx' double)]) = (r53 I:double A[D('xm' double)]) + (r7 I:double A[D('sdy' double)])  (LINE:696)\l0x00ca: ARITH  (r18 I:double) = (r55 I:double A[D('ym' double)]) \- (r5 I:double A[D('sdx' double)])  (LINE:697)\l}"];
MethodNode[shape=record,label="{private static void androidx.core.graphics.PathParser.PathDataNode.drawArc((r73 I:android.graphics.Path A[D('p' android.graphics.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r74 I:float A[D('x0' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r75 I:float A[D('y0' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r76 I:float A[D('x1' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r77 I:float A[D('y1' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r78 I:float A[D('a' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r79 I:float A[D('b' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r80 I:float A[D('theta' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r81 I:boolean A[D('isMoreThanHalf' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r82 I:boolean A[D('isPositiveArc' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x00b3 \-\> B:26:?, CROSS_EDGE: B:49:0x0130 \-\> B:26:?, CROSS_EDGE: B:47:0x00fb \-\> B:48:0x00fd, CROSS_EDGE: B:43:0x00eb \-\> B:48:0x00fd, CROSS_EDGE: B:42:0x00ea \-\> B:43:0x00eb, CROSS_EDGE: B:38:0x00c8 \-\> B:39:0x00cc\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0093\-0x00a3: r5 'adjust' F\l  0x005b\-0x00a7: r6 'dsq' D\l  0x00a3\-0x00b4: r18 'adjust' F\l  0x00a7\-0x00b4: r59 'dsq' D\l  0x00b4\-0x00b7: r6 'dsq' D\l  0x00c5\-0x00c8: r16 'cx' D\l  0x00c7\-0x00c8: r18 'cy' D\l  0x00bb\-0x00d0: r3 's' D\l  0x00bd\-0x00da: r5 'sdx' D\l  0x00e0\-0x00ff: r3 'eta1' D\l  0x00cc\-0x0105: r18 'cy' D\l  0x00ca\-0x010d: r16 'cx' D\l  0x0105\-0x0119: r3 'cy' D\l  0x00d6\-0x0130: r1 'eta0' D\l  0x00e2\-0x0130: r5 'sweep' D\l  0x00bf\-0x0130: r7 'sdy' D\l  0x0015\-0x0130: r35 'thetaD' D\l  0x0019\-0x0130: r37 'cosTheta' D\l  0x001d\-0x0130: r39 'sinTheta' D\l  0x0027\-0x0130: r41 'x0p' D\l  0x0032\-0x0130: r43 'y0p' D\l  0x003c\-0x0130: r45 'x1p' D\l  0x0047\-0x0130: r47 'y1p' D\l  0x0049\-0x0130: r49 'dx' D\l  0x004b\-0x0130: r51 'dy' D\l  0x0051\-0x0130: r53 'xm' D\l  0x0055\-0x0130: r55 'ym' D\l  0x0070\-0x0130: r57 'disc' D\l  0x00b7\-0x0130: r59 'dsq' D\l  0x00d0\-0x0130: r61 's' D\l  0x00da\-0x0130: r63 'sdx' D\l  0x00ff\-0x0130: r65 'eta1' D\l  0x0107\-0x0130: r67 'tcx' D\l  0x010d\-0x0130: r69 'cx' D\l  0x0119\-0x0130: r71 'cy' D\l  \-1 \-0x0130: r73 'p' Landroid\/graphics\/Path;\l  \-1 \-0x0130: r74 'x0' F\l  \-1 \-0x0130: r75 'y0' F\l  \-1 \-0x0130: r76 'x1' F\l  \-1 \-0x0130: r77 'y1' F\l  \-1 \-0x0130: r78 'a' F\l  \-1 \-0x0130: r79 'b' F\l  \-1 \-0x0130: r80 'theta' F\l  \-1 \-0x0130: r81 'isMoreThanHalf' Z\l  \-1 \-0x0130: r82 'isPositiveArc' Z\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_30 -> Node_26;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_26;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_48;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_26;
Node_42 -> Node_43;
Node_38 -> Node_39;
}

