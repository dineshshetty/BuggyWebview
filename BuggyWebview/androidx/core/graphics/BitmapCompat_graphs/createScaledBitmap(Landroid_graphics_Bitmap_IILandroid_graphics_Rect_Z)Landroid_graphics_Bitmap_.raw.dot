digraph "CFG forandroidx.core.graphics.BitmapCompat.createScaledBitmap(Landroid\/graphics\/Bitmap;IILandroid\/graphics\/Rect;Z)Landroid\/graphics\/Bitmap;" {
Node_150 [shape=record,label="{150\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_152 [shape=record,label="{152\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r30 I:??[OBJECT, ARRAY] A[D('srcBm' android.graphics.Bitmap)])  (LINE:133)\l0x0002: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dstW' int)]) \l0x0004: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r32 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dstH' int)]) \l0x0006: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r33 I:??[OBJECT, ARRAY] A[D('srcRect' android.graphics.Rect)]) \l}"];
Node_153 [shape=record,label="{153\:\ 0x0008|0x0008: IF  (r1 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:294:0x024f \l}"];
Node_154 [shape=record,label="{154\:\ 0x000a|0x000a: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:294:0x024f \l}"];
Node_155 [shape=record,label="{155\:\ 0x000c|0x000c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:169:0x0035  (LINE:137)\l}"];
Node_156 [shape=record,label="{156\:\ 0x000e|0x000e: INVOKE  (r4 I:boolean) = (r33 I:android.graphics.Rect A[D('srcRect' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.isEmpty():boolean A[MD:():boolean (c)] (LINE:138)\l}"];
Node_157 [shape=record,label="{157\:\ 0x0012|0x0012: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:167:0x002d \l}"];
Node_158 [shape=record,label="{158\:\ 0x0014|0x0014: IGET  (r4 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.left int \l}"];
Node_159 [shape=record,label="{159\:\ 0x0016|0x0016: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:167:0x002d \l}"];
Node_160 [shape=record,label="{160\:\ 0x0018|0x0018: IGET  (r4 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.right int \l0x001a: INVOKE  (r5 I:int) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getWidth():int A[MD:():int (c)]\l}"];
Node_161 [shape=record,label="{161\:\ 0x001e|0x001e: IF  (r4 I:??[int, byte, short, char]) \> (r5 I:??[int, byte, short, char])  \-\> B:167:0x002d \l}"];
Node_162 [shape=record,label="{162\:\ 0x0020|0x0020: IGET  (r4 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.top int \l}"];
Node_163 [shape=record,label="{163\:\ 0x0022|0x0022: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:167:0x002d \l}"];
Node_164 [shape=record,label="{164\:\ 0x0024|0x0024: IGET  (r4 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.bottom int \l0x0026: INVOKE  (r5 I:int) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getHeight():int A[MD:():int (c)] (LINE:139)\l}"];
Node_165 [shape=record,label="{165\:\ 0x002a|0x002a: IF  (r4 I:??[int, byte, short, char]) \> (r5 I:??[int, byte, short, char])  \-\> B:167:0x002d \l}"];
Node_167 [shape=record,label="{167\:\ 0x002d|0x002d: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:140)\l0x002f: CONST_STR  (r5 I:java.lang.String) =  \"srcRect must be contained by srcBm!\" \l0x0031: INVOKE  (r4 I:java.lang.IllegalArgumentException), (r5 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_168 [shape=record,label="{168\:\ 0x0034|0x0034: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_151 [shape=record,label="{151\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_169 [shape=record,label="{169\:\ 0x0035|0x0035: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r30 I:??[OBJECT, ARRAY] A[D('srcBm' android.graphics.Bitmap)])  (LINE:144)\l0x0037: SGET  (r5 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:145)\l0x0039: CONST  (r6 I:??[int, float, short, byte, char]) = (27 ??[int, float, short, byte, char]) \l}"];
Node_170 [shape=record,label="{170\:\ 0x003b|0x003b: IF  (r5 I:??[int, byte, short, char]) \< (r6 I:??[int, byte, short, char])  \-\> B:172:0x0041 \l}"];
Node_171 [shape=record,label="{171\:\ 0x003d|0x003d: INVOKE  (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)]) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: STATIC call: androidx.core.graphics.BitmapCompat.Api27Impl.copyBitmapIfHardware(android.graphics.Bitmap):android.graphics.Bitmap A[MD:(android.graphics.Bitmap):android.graphics.Bitmap (m)] (LINE:148)\l}"];
Node_172 [shape=record,label="{172\:\ 0x0041|0x0041: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:174:0x0048  (LINE:151)\l}"];
Node_173 [shape=record,label="{173\:\ 0x0043|0x0043: INVOKE  (r5 I:int) = (r33 I:android.graphics.Rect A[D('srcRect' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.width():int A[MD:():int (c)]\l}"];
Node_175 [shape=record,label="{175\:\ 0x004c|0x004c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:177:0x0053  (LINE:152)\l}"];
Node_176 [shape=record,label="{176\:\ 0x004e|0x004e: INVOKE  (r7 I:int) = (r33 I:android.graphics.Rect A[D('srcRect' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.height():int A[MD:():int (c)]\l}"];
Node_178 [shape=record,label="{178\:\ 0x0057|0x0057: CAST (r8 I:float) = (float) (r1 I:int)  (LINE:154)\l0x0058: CAST (r9 I:float) = (float) (r5 I:int A[D('srcW' int)]) \l0x0059: ARITH  (r8 I:float) = (r8 I:float) \/ (r9 I:float) \l0x005a: CAST (r9 I:float) = (float) (r2 I:int)  (LINE:155)\l0x005b: CAST (r10 I:float) = (float) (r7 I:int A[D('srcH' int)]) \l0x005c: ARITH  (r9 I:float) = (r9 I:float) \/ (r10 I:float) \l}"];
Node_179 [shape=record,label="{179\:\ 0x005d|0x005d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:181:0x0062  (LINE:157)\l}"];
Node_180 [shape=record,label="{180\:\ 0x005f|0x005f: IGET  (r11 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.left int \l}"];
Node_182 [shape=record,label="{182\:\ 0x0063|0x0063: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:184:0x0068  (LINE:158)\l}"];
Node_183 [shape=record,label="{183\:\ 0x0065|0x0065: IGET  (r12 I:int) = (r3 I:android.graphics.Rect) android.graphics.Rect.top int \l}"];
Node_185 [shape=record,label="{185\:\ 0x0069|0x0069: CONST  (r13 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:161)\l}"];
Node_186 [shape=record,label="{186\:\ 0x006a|0x006a: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('srcX' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:198:0x008c \l}"];
Node_187 [shape=record,label="{187\:\ 0x006c|0x006c: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('srcY' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:198:0x008c \l}"];
Node_188 [shape=record,label="{188\:\ 0x006e|0x006e: INVOKE  (r14 I:int) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getWidth():int A[MD:():int (c)]\l}"];
Node_189 [shape=record,label="{189\:\ 0x0072|0x0072: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:198:0x008c \l}"];
Node_190 [shape=record,label="{190\:\ 0x0074|0x0074: INVOKE  (r14 I:int) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getHeight():int A[MD:():int (c)]\l}"];
Node_191 [shape=record,label="{191\:\ 0x0078|0x0078: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:198:0x008c \l}"];
Node_192 [shape=record,label="{192\:\ 0x007a|0x007a: INVOKE  (r6 I:boolean) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.isMutable():boolean A[MD:():boolean (c)] (LINE:163)\l}"];
Node_193 [shape=record,label="{193\:\ 0x007e|0x007e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:197:0x008b \l}"];
Node_194 [shape=record,label="{194\:\ 0x0080|0x0080: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('src' android.graphics.Bitmap)])  \-\> B:197:0x008b \l}"];
Node_195 [shape=record,label="{195\:\ 0x0082|0x0082: INVOKE  (r6 I:android.graphics.Bitmap$Config) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getConfig():android.graphics.Bitmap$Config A[MD:():android.graphics.Bitmap$Config (c)] (LINE:164)\l0x0086: INVOKE  (r6 I:android.graphics.Bitmap) = (r0 I:android.graphics.Bitmap), (r6 I:android.graphics.Bitmap$Config), (r13 I:boolean) type: VIRTUAL call: android.graphics.Bitmap.copy(android.graphics.Bitmap$Config, boolean):android.graphics.Bitmap A[MD:(android.graphics.Bitmap$Config, boolean):android.graphics.Bitmap (c)]\l}"];
Node_196 [shape=record,label="{196\:\ 0x008a|RETURN\l|0x008a: RETURN  (r6 I:android.graphics.Bitmap) \l}"];
Node_197 [shape=record,label="{197\:\ 0x008b|RETURN\l|0x008b: RETURN  (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)])  (LINE:167)\l}"];
Node_198 [shape=record,label="{198\:\ 0x008c|0x008c: NEW_INSTANCE  (r14 I:android.graphics.Paint) =  android.graphics.Paint  (LINE:171)\l0x008e: INVOKE  (r14 I:android.graphics.Paint), (r13 I:int) type: DIRECT call: android.graphics.Paint.\<init\>(int):void A[MD:(int):void (c)]\l0x0091: INVOKE  (r14 I:android.graphics.Paint A[D('paint' android.graphics.Paint)]), (r13 I:boolean) type: VIRTUAL call: android.graphics.Paint.setFilterBitmap(boolean):void A[MD:(boolean):void (c)] (LINE:172)\l0x0094: SGET  (r15 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:173)\l0x0096: CONST  (r10 I:??[int, float, short, byte, char]) = (29 ??[int, float, short, byte, char]) \l}"];
Node_199 [shape=record,label="{199\:\ 0x0098|0x0098: IF  (r15 I:??[int, byte, short, char]) \< (r10 I:??[int, byte, short, char])  \-\> B:201:0x009e \l}"];
Node_200 [shape=record,label="{200\:\ 0x009a|0x009a: INVOKE  (r14 I:android.graphics.Paint A[D('paint' android.graphics.Paint)]) type: STATIC call: androidx.core.graphics.BitmapCompat.Api29Impl.setPaintBlendMode(android.graphics.Paint):void A[MD:(android.graphics.Paint):void (m)] (LINE:174)\l}"];
Node_202 [shape=record,label="{202\:\ 0x00a8|0x00a8: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('srcW' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:206:0x00c1  (LINE:180)\l}"];
Node_203 [shape=record,label="{203\:\ 0x00aa|0x00aa: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('srcH' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:206:0x00c1 \l}"];
Node_204 [shape=record,label="{204\:\ 0x00ac|0x00ac: INVOKE  (r6 I:android.graphics.Bitmap$Config) = (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getConfig():android.graphics.Bitmap$Config A[MD:():android.graphics.Bitmap$Config (c)] (LINE:181)\l0x00b0: INVOKE  (r6 I:android.graphics.Bitmap) = (r1 I:int), (r2 I:int), (r6 I:android.graphics.Bitmap$Config) type: STATIC call: android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap (c)]\l0x00b4: NEW_INSTANCE  (r10 I:android.graphics.Canvas) =  android.graphics.Canvas  (LINE:182)\l0x00b6: INVOKE  (r10 I:android.graphics.Canvas), (r6 I:android.graphics.Bitmap A[D('out' android.graphics.Bitmap)]) type: DIRECT call: android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void A[MD:(android.graphics.Bitmap):void (c)]\l0x00b9: NEG  (r13 I:int) = (r11 I:int A[D('srcX' int)])  (LINE:183)\l0x00ba: CAST (r13 I:float) = (float) (r13 I:int) \l0x00bb: NEG  (r15 I:int) = (r12 I:int A[D('srcY' int)]) \l0x00bc: CAST (r15 I:float) = (float) (r15 I:int) \l0x00bd: INVOKE  \l  (r10 I:android.graphics.Canvas A[D('canvasForCopy' android.graphics.Canvas)])\l  (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)])\l  (r13 I:float)\l  (r15 I:float)\l  (r14 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l type: VIRTUAL call: android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint):void A[MD:(android.graphics.Bitmap, float, float, android.graphics.Paint):void (c)]\l}"];
Node_205 [shape=record,label="{205\:\ 0x00c0|RETURN\l|0x00c0: RETURN  (r6 I:android.graphics.Bitmap A[D('out' android.graphics.Bitmap)])  (LINE:184)\l}"];
Node_206 [shape=record,label="{206\:\ 0x00c1|0x00c1: CONST  (r17 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double])  (LINE:188)\l0x00c3: INVOKE  (r17 I:double) = (r17 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x00c7: CONST  (r10 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char])  (LINE:189)\l0x00c9: CMP_L  (r15 I:int) = (r8 I:float A[D('sx' float)]), (r10 I:float) \l}"];
Node_207 [shape=record,label="{207\:\ 0x00cb|0x00cb: IF  (r15 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:209:0x00db \l}"];
Node_208 [shape=record,label="{208\:\ 0x00cd|0x00cd: MOVE  (r15 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)]) \l0x00ce: CAST (r13 I:double) = (double) (r8 I:float A[D('sx' float)]) \l0x00cf: INVOKE  (r13 I:double) = (r13 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x00d3: ARITH  (r13 I:double) = (r13 I:double) \/ (r17 I:double A[D('log2' double)]) \l0x00d5: INVOKE  (r13 I:double) = (r13 I:double) type: STATIC call: java.lang.Math.ceil(double):double A[MD:(double):double (c)]\l0x00d9: CAST (r13 I:int) = (int) (r13 I:double) \l}"];
Node_210 [shape=record,label="{210\:\ 0x00e8|0x00e9: CMP_L  (r10 I:int) = (r9 I:float A[D('sy' float)]), (r10 I:float)  (LINE:191)\l}"];
Node_211 [shape=record,label="{211\:\ 0x00eb|0x00eb: IF  (r10 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:213:0x00fb \l}"];
Node_212 [shape=record,label="{212\:\ 0x00ed|0x00ed: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcH' int)]) \l0x00ee: CAST (r6 I:double) = (double) (r9 I:float A[D('sy' float)]) \l0x00ef: INVOKE  (r6 I:double) = (r6 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x00f3: ARITH  (r6 I:double) = (r6 I:double) \/ (r17 I:double A[D('log2' double)]) \l0x00f5: INVOKE  (r6 I:double) = (r6 I:double) type: STATIC call: java.lang.Math.ceil(double):double A[MD:(double):double (c)]\l0x00f9: CAST (r6 I:int) = (int) (r6 I:double) \l}"];
Node_214 [shape=record,label="{214\:\ 0x0108|0x0109: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsX' int)])  (LINE:193)\l0x010a: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)])  (LINE:194)\l0x010c: CONST  (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:200)\l0x010e: CONST  (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l}"];
Node_215 [shape=record,label="{215\:\ 0x0110|0x0110: IF  (r34 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scaleInLinearSpace' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:229:0x016a  (LINE:204)\l}"];
Node_216 [shape=record,label="{216\:\ 0x0112|0x0112: SGET  (r14 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:205)\l0x0114: CONST  (r3 I:??[int, float, short, byte, char]) = (27 ??[int, float, short, byte, char]) \l}"];
Node_217 [shape=record,label="{217\:\ 0x0116|0x0116: IF  (r14 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char])  \-\> B:228:0x0161 \l}"];
Node_218 [shape=record,label="{218\:\ 0x0118|0x0118: INVOKE  (r3 I:boolean) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: STATIC call: androidx.core.graphics.BitmapCompat.Api27Impl.isAlreadyF16AndLinear(android.graphics.Bitmap):boolean A[MD:(android.graphics.Bitmap):boolean (m)]\l}"];
Node_219 [shape=record,label="{219\:\ 0x011c|0x011c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:228:0x0161 \l}"];
Node_220 [shape=record,label="{220\:\ 0x011e|0x011e: IF  (r13 I:??[int, byte, short, char] A[D('stepsX' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:222:0x0126  (LINE:206)\l}"];
Node_221 [shape=record,label="{221\:\ 0x0120|0x0120: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0121: INVOKE  (r19 I:int) = (r5 I:int A[D('srcW' int)]), (r1 I:int), (r3 I:int), (r7 I:int A[D('totalStepsX' int)]) type: STATIC call: androidx.core.graphics.BitmapCompat.sizeAtStep(int, int, int, int):int A[MD:(int, int, int, int):int (m)]\l}"];
Node_223 [shape=record,label="{223\:\ 0x0129|0x0129: MOVE  (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_224 [shape=record,label="{224\:\ 0x012b|0x012b: IF  (r6 I:??[int, byte, short, char] A[D('stepsY' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:226:0x0134  (LINE:207)\l}"];
Node_225 [shape=record,label="{225\:\ 0x012d|0x012d: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) \l0x012f: INVOKE  (r20 I:int) = (r10 I:int A[D('srcH' int)]), (r2 I:int), (r3 I:int), (r14 I:int A[D('totalStepsY' int)]) type: STATIC call: androidx.core.graphics.BitmapCompat.sizeAtStep(int, int, int, int):int A[MD:(int, int, int, int):int (m)]\l}"];
Node_227 [shape=record,label="{227\:\ 0x0138|0x0138: MOVE  (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x013a: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)])  (LINE:208)\l0x013c: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) = (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allocW' int)]) \l0x013e: MOVE  (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allocW' int)]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sx' float)]) \l0x0140: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sx' float)]) = (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allocH' int)]) \l0x0142: MOVE  (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allocH' int)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sy' float)]) \l0x0144: INVOKE  (r9 I:android.graphics.Bitmap) = (r6 I:int A[D('allocW' int)]), (r8 I:int A[D('allocH' int)]), (r0 I:android.graphics.Bitmap), (r3 I:boolean) type: STATIC call: androidx.core.graphics.BitmapCompat.Api27Impl.createBitmapWithSourceColorspace(int, int, android.graphics.Bitmap, boolean):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap, boolean):android.graphics.Bitmap (m)]\l0x0148: NEW_INSTANCE  (r3 I:android.graphics.Canvas) =  android.graphics.Canvas  (LINE:210)\l0x014a: INVOKE  (r3 I:android.graphics.Canvas), (r9 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) type: DIRECT call: android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void A[MD:(android.graphics.Bitmap):void (c)]\l0x014d: MOVE  (r25 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allocW' int)])  (LINE:211)\l0x014f: NEG  (r6 I:int A[D('allocW' int)]) = (r11 I:int A[D('srcX' int)]) \l0x0150: CAST (r6 I:float) = (float) (r6 I:int) \l0x0151: MOVE  (r26 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('allocH' int)]) \l0x0153: NEG  (r8 I:int A[D('allocH' int)]) = (r12 I:int A[D('srcY' int)]) \l0x0154: CAST (r8 I:float) = (float) (r8 I:int) \l0x0155: INVOKE  \l  (r3 I:android.graphics.Canvas A[D('canvasForCopy' android.graphics.Canvas)])\l  (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)])\l  (r6 I:float)\l  (r8 I:float)\l  (r15 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l type: VIRTUAL call: android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint):void A[MD:(android.graphics.Bitmap, float, float, android.graphics.Paint):void (c)]\l0x0158: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcX' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:212)\l0x0159: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcY' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:213)\l0x015a: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('dst' android.graphics.Bitmap)])  (LINE:214)\l0x015b: MOVE  (r21 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('src' android.graphics.Bitmap)])  (LINE:215)\l0x015d: MOVE  (r4 I:??[OBJECT, ARRAY] A[D('src' android.graphics.Bitmap)]) = (r6 I:??[OBJECT, ARRAY] A[D('swap' android.graphics.Bitmap)])  (LINE:216)\l0x015e: CONST  (r22 I:??[boolean, int, float, short, byte, char] A[D('needFinalConversion' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:217)\l}"];
Node_230 [shape=record,label="{230\:\ 0x0172|0x0172: NEW_INSTANCE  (r3 I:android.graphics.Rect) =  android.graphics.Rect  (LINE:221)\l0x0174: INVOKE  \l  (r3 I:android.graphics.Rect)\l  (r11 I:int A[D('srcX' int)])\l  (r12 I:int A[D('srcY' int)])\l  (r5 I:int A[D('srcW' int)])\l  (r10 I:int A[D('srcH' int)])\l type: DIRECT call: android.graphics.Rect.\<init\>(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l0x0177: NEW_INSTANCE  (r6 I:android.graphics.Rect) =  android.graphics.Rect  (LINE:222)\l0x0179: INVOKE  (r6 I:android.graphics.Rect) type: DIRECT call: android.graphics.Rect.\<init\>():void A[MD:():void (c)]\l0x017c: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r21 I:??[OBJECT, ARRAY] A[D('dst' android.graphics.Bitmap)]) \l}"];
Node_231 [shape=record,label="{231\:\ 0x017e|LOOP_START\lLOOP:0: B:231:0x017e\-\>B:293:0x0232\l|0x017e: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stepsX' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:238:0x018b  (LINE:224)\l}"];
Node_232 [shape=record,label="{232\:\ 0x0180|0x0180: IF  (r20 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stepsY' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:296:0x0183 \l}"];
Node_296 [shape=record,label="{296\:\ 0x0183|SYNTHETIC\l}"];
Node_234 [shape=record,label="{234\:\ 0x0183|0x0183: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dst' android.graphics.Bitmap)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:237:0x018a  (LINE:310)\l}"];
Node_235 [shape=record,label="{235\:\ 0x0185|0x0185: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dst' android.graphics.Bitmap)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:237:0x018a \l}"];
Node_236 [shape=record,label="{236\:\ 0x0187|0x0187: INVOKE  (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.recycle():void A[MD:():void (c)] (LINE:311)\l}"];
Node_237 [shape=record,label="{237\:\ 0x018a|RETURN\l|0x018a: RETURN  (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)])  (LINE:313)\l}"];
Node_238 [shape=record,label="{238\:\ 0x018b|0x018b: IF  (r13 I:??[int, byte, short, char] A[D('stepsX' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:240:0x0190  (LINE:225)\l}"];
Node_239 [shape=record,label="{239\:\ 0x018d|0x018d: ARITH  (r13 I:int) = (r13 I:int A[D('stepsX' int)]) + (1 int)  (LINE:226)\l}"];
Node_242 [shape=record,label="{242\:\ 0x0194|0x0194: IF  (r20 I:??[int, byte, short, char] A[D('stepsY' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:244:0x019b  (LINE:230)\l}"];
Node_243 [shape=record,label="{243\:\ 0x0196|0x0196: ARITH  (r20 I:int) = (r20 I:int A[D('stepsY' int)]) + (1 int)  (LINE:231)\l0x0198: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) \l}"];
Node_247 [shape=record,label="{247\:\ 0x01a4|0x01a4: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcX' int)])  (LINE:235)\l0x01a6: INVOKE  (r11 I:int) = (r5 I:int A[D('srcW' int)]), (r1 I:int), (r13 I:int A[D('stepsX' int)]), (r7 I:int A[D('totalStepsX' int)]) type: STATIC call: androidx.core.graphics.BitmapCompat.sizeAtStep(int, int, int, int):int A[MD:(int, int, int, int):int (m)]\l0x01aa: MOVE  (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcY' int)])  (LINE:236)\l0x01ac: INVOKE  (r12 I:int) = (r10 I:int A[D('srcH' int)]), (r2 I:int), (r9 I:int A[D('stepsY' int)]), (r14 I:int A[D('totalStepsY' int)]) type: STATIC call: androidx.core.graphics.BitmapCompat.sizeAtStep(int, int, int, int):int A[MD:(int, int, int, int):int (m)]\l0x01b0: MOVE  (r25 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('currRect' android.graphics.Rect)])  (LINE:237)\l0x01b2: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('currRect' android.graphics.Rect)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x01b3: INVOKE  \l  (r6 I:android.graphics.Rect A[D('nextRect' android.graphics.Rect)])\l  (r3 I:int A[D('currRect' android.graphics.Rect)])\l  (r3 I:int A[D('currRect' android.graphics.Rect)])\l  (r11 I:int A[D('nextW' int)])\l  (r12 I:int A[D('nextH' int)])\l type: VIRTUAL call: android.graphics.Rect.set(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l}"];
Node_248 [shape=record,label="{248\:\ 0x01b6|0x01b6: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stepsX' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:251:0x01bd  (LINE:255)\l}"];
Node_249 [shape=record,label="{249\:\ 0x01b8|0x01b8: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stepsY' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:251:0x01bd \l}"];
Node_250 [shape=record,label="{250\:\ 0x01ba|0x01ba: CONST  (r16 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_252 [shape=record,label="{252\:\ 0x01bf|0x01bf: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dst' android.graphics.Bitmap)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:258:0x01cf  (LINE:256)\l}"];
Node_253 [shape=record,label="{253\:\ 0x01c1|0x01c1: INVOKE  (r3 I:int) = (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getWidth():int A[MD:():int (c)] (LINE:257)\l}"];
Node_254 [shape=record,label="{254\:\ 0x01c5|0x01c5: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:258:0x01cf \l}"];
Node_255 [shape=record,label="{255\:\ 0x01c7|0x01c7: INVOKE  (r3 I:int) = (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getHeight():int A[MD:():int (c)]\l}"];
Node_256 [shape=record,label="{256\:\ 0x01cb|0x01cb: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:258:0x01cf \l}"];
Node_257 [shape=record,label="{257\:\ 0x01cd|0x01cd: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_259 [shape=record,label="{259\:\ 0x01d0|0x01d0: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dst' android.graphics.Bitmap)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:273:0x01f7  (LINE:258)\l}"];
Node_260 [shape=record,label="{260\:\ 0x01d2|0x01d2: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dst' android.graphics.Bitmap)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:273:0x01f7 \l}"];
Node_261 [shape=record,label="{261\:\ 0x01d4|0x01d4: IF  (r34 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scaleInLinearSpace' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:267:0x01e7 \l}"];
Node_262 [shape=record,label="{262\:\ 0x01d6|0x01d6: MOVE  (r27 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextW' int)]) \l0x01d8: SGET  (r11 I:int A[D('nextW' int)]) =  android.os.Build.VERSION.SDK_INT int \l0x01da: MOVE  (r28 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextH' int)]) \l0x01dc: CONST  (r12 I:??[int, float, short, byte, char] A[D('nextH' int)]) = (27 ??[int, float, short, byte, char]) \l}"];
Node_263 [shape=record,label="{263\:\ 0x01de|0x01de: IF  (r11 I:??[int, byte, short, char]) \< (r12 I:??[int, byte, short, char] A[D('nextH' int)])  \-\> B:268:0x01eb \l}"];
Node_264 [shape=record,label="{264\:\ 0x01e0|0x01e0: INVOKE  (r12 I:boolean) = (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) type: STATIC call: androidx.core.graphics.BitmapCompat.Api27Impl.isAlreadyF16AndLinear(android.graphics.Bitmap):boolean A[MD:(android.graphics.Bitmap):boolean (m)] (LINE:267)\l}"];
Node_265 [shape=record,label="{265\:\ 0x01e4|0x01e4: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:274:0x01fb \l}"];
Node_274 [shape=record,label="{274\:\ 0x01fb|0x01fb: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dst' android.graphics.Bitmap)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:277:0x0202  (LINE:274)\l}"];
Node_275 [shape=record,label="{275\:\ 0x01fd|0x01fd: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dst' android.graphics.Bitmap)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:277:0x0202 \l}"];
Node_276 [shape=record,label="{276\:\ 0x01ff|0x01ff: INVOKE  (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.recycle():void A[MD:():void (c)] (LINE:275)\l}"];
Node_277 [shape=record,label="{277\:\ 0x0202|0x0202: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('needFinalConversion' boolean)])  (LINE:283)\l}"];
Node_278 [shape=record,label="{278\:\ 0x0204|0x0204: IF  (r13 I:??[int, byte, short, char] A[D('stepsX' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:280:0x0208  (LINE:284)\l}"];
Node_279 [shape=record,label="{279\:\ 0x0206|0x0206: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastScratchStep' int)]) \l}"];
Node_281 [shape=record,label="{281\:\ 0x0209|0x0209: INVOKE  (r11 I:int) = (r5 I:int A[D('srcW' int)]), (r1 I:int), (r11 I:int), (r7 I:int A[D('totalStepsX' int)]) type: STATIC call: androidx.core.graphics.BitmapCompat.sizeAtStep(int, int, int, int):int A[MD:(int, int, int, int):int (m)]\l}"];
Node_282 [shape=record,label="{282\:\ 0x020d|0x020d: IF  (r9 I:??[int, byte, short, char] A[D('stepsY' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:284:0x0211  (LINE:286)\l}"];
Node_283 [shape=record,label="{283\:\ 0x020f|0x020f: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastScratchStep' int)]) \l}"];
Node_285 [shape=record,label="{285\:\ 0x0212|0x0212: INVOKE  (r1 I:int) = (r10 I:int A[D('srcH' int)]), (r2 I:int), (r1 I:int), (r14 I:int A[D('totalStepsY' int)]) type: STATIC call: androidx.core.graphics.BitmapCompat.sizeAtStep(int, int, int, int):int A[MD:(int, int, int, int):int (m)]\l0x0216: SGET  (r2 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:290)\l0x0218: MOVE  (r29 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dstSizeIsFinal' boolean)]) \l0x021a: CONST  (r3 I:??[int, float, short, byte, char] A[D('dstSizeIsFinal' boolean)]) = (27 ??[int, float, short, byte, char]) \l}"];
Node_286 [shape=record,label="{286\:\ 0x021c|0x021c: IF  (r2 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char] A[D('dstSizeIsFinal' boolean)])  \-\> B:292:0x022a \l}"];
Node_287 [shape=record,label="{287\:\ 0x021e|0x021e: IF  (r34 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scaleInLinearSpace' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:290:0x0224  (LINE:291)\l}"];
Node_288 [shape=record,label="{288\:\ 0x0220|0x0220: IF  (r16 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastStep' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:290:0x0224 \l}"];
Node_289 [shape=record,label="{289\:\ 0x0222|0x0222: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_291 [shape=record,label="{291\:\ 0x0225|0x0225: INVOKE  (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) = \l  (r11 I:int A[D('allocW' int)])\l  (r1 I:int A[D('allocH' int)])\l  (r0 I:android.graphics.Bitmap)\l  (r2 I:boolean A[D('linear' boolean)])\l type: STATIC call: androidx.core.graphics.BitmapCompat.Api27Impl.createBitmapWithSourceColorspace(int, int, android.graphics.Bitmap, boolean):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap, boolean):android.graphics.Bitmap (m)] (LINE:292)\l}"];
Node_299 [shape=record,label="{299\:\ 0x0232|SYNTHETIC\l}"];
Node_293 [shape=record,label="{293\:\ 0x0232|LOOP_END\lLOOP:0: B:231:0x017e\-\>B:293:0x0232\l|0x0232: NEW_INSTANCE  (r1 I:android.graphics.Canvas A[D('allocH' int)]) =  android.graphics.Canvas  (LINE:301)\l0x0234: INVOKE  (r1 I:android.graphics.Canvas), (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) type: DIRECT call: android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void A[MD:(android.graphics.Bitmap):void (c)]\l0x0237: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r25 I:??[OBJECT, ARRAY] A[D('currRect' android.graphics.Rect)])  (LINE:302)\l0x0239: INVOKE  \l  (r1 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l  (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)])\l  (r2 I:android.graphics.Rect A[D('currRect' android.graphics.Rect)])\l  (r6 I:android.graphics.Rect A[D('nextRect' android.graphics.Rect)])\l  (r15 I:android.graphics.Paint A[D('paint' android.graphics.Paint)])\l type: VIRTUAL call: android.graphics.Canvas.drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint):void A[MD:(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint):void (c)]\l0x023c: MOVE  (r11 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('src' android.graphics.Bitmap)])  (LINE:305)\l0x023d: MOVE  (r4 I:??[OBJECT, ARRAY] A[D('src' android.graphics.Bitmap)]) = (r8 I:??[OBJECT, ARRAY] A[D('dst' android.graphics.Bitmap)])  (LINE:306)\l0x023e: MOVE  (r8 I:??[OBJECT, ARRAY] A[D('dst' android.graphics.Bitmap)]) = (r11 I:??[OBJECT, ARRAY] A[D('swap' android.graphics.Bitmap)])  (LINE:307)\l0x023f: INVOKE  \l  (r2 I:android.graphics.Rect A[D('currRect' android.graphics.Rect)])\l  (r6 I:android.graphics.Rect A[D('nextRect' android.graphics.Rect)])\l type: VIRTUAL call: android.graphics.Rect.set(android.graphics.Rect):void A[MD:(android.graphics.Rect):void (c)] (LINE:308)\l0x0242: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('canvas' android.graphics.Canvas)]) = (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dstW' int)])  (LINE:309)\l0x0244: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('currRect' android.graphics.Rect)]) \l0x0245: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcX' int)]) \l0x0247: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcY' int)]) \l0x0249: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('currRect' android.graphics.Rect)]) = (r32 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dstH' int)]) \l0x024b: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcX' int)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) \l}"];
Node_290 [shape=record,label="{290\:\ 0x0224|0x0224: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_292 [shape=record,label="{292\:\ 0x022a|0x022a: INVOKE  (r2 I:android.graphics.Bitmap$Config) = (r4 I:android.graphics.Bitmap A[D('src' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getConfig():android.graphics.Bitmap$Config A[MD:():android.graphics.Bitmap$Config (c)] (LINE:295)\l0x022e: INVOKE  (r8 I:android.graphics.Bitmap A[D('dst' android.graphics.Bitmap)]) = (r11 I:int A[D('allocW' int)]), (r1 I:int A[D('allocH' int)]), (r2 I:android.graphics.Bitmap$Config) type: STATIC call: android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap (c)]\l}"];
Node_297 [shape=record,label="{297\:\ 0x0232|SYNTHETIC\l}"];
Node_284 [shape=record,label="{284\:\ 0x0211|0x0211: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) \l}"];
Node_280 [shape=record,label="{280\:\ 0x0208|0x0208: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsX' int)]) \l}"];
Node_268 [shape=record,label="{268\:\ 0x01eb|0x01eb: IF  (r16 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastStep' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:272:0x01f2  (LINE:267)\l}"];
Node_269 [shape=record,label="{269\:\ 0x01ed|0x01ed: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dstSizeIsFinal' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:274:0x01fb \l}"];
Node_270 [shape=record,label="{270\:\ 0x01ef|0x01ef: IF  (r22 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('needFinalConversion' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:272:0x01f2 \l}"];
Node_272 [shape=record,label="{272\:\ 0x01f2|0x01f2: MOVE  (r29 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dstSizeIsFinal' boolean)])  (LINE:301)\l0x01f4: CONST  (r3 I:??[int, float, short, byte, char] A[D('dstSizeIsFinal' boolean)]) = (27 ??[int, float, short, byte, char]) \l}"];
Node_298 [shape=record,label="{298\:\ 0x0232|SYNTHETIC\l}"];
Node_267 [shape=record,label="{267\:\ 0x01e7|0x01e7: MOVE  (r27 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextW' int)]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextW' int)])  (LINE:258)\l0x01e9: MOVE  (r28 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextH' int)]) \l}"];
Node_273 [shape=record,label="{273\:\ 0x01f7|0x01f7: MOVE  (r27 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextW' int)]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextW' int)])  (LINE:258)\l0x01f9: MOVE  (r28 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nextH' int)]) \l}"];
Node_258 [shape=record,label="{258\:\ 0x01cf|0x01cf: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_251 [shape=record,label="{251\:\ 0x01bd|0x01bd: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_244 [shape=record,label="{244\:\ 0x019b|0x019b: IF  (r20 I:??[int, byte, short, char] A[D('stepsY' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:246:0x01a2  (LINE:232)\l}"];
Node_245 [shape=record,label="{245\:\ 0x019d|0x019d: ARITH  (r20 I:int) = (r20 I:int A[D('stepsY' int)]) + (\-1 int)  (LINE:233)\l0x019f: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) \l}"];
Node_246 [shape=record,label="{246\:\ 0x01a2|0x01a2: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)])  (LINE:232)\l}"];
Node_240 [shape=record,label="{240\:\ 0x0190|0x0190: IF  (r13 I:??[int, byte, short, char] A[D('stepsX' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:242:0x0194  (LINE:227)\l}"];
Node_241 [shape=record,label="{241\:\ 0x0192|0x0192: ARITH  (r13 I:int) = (r13 I:int A[D('stepsX' int)]) + (\-1 int)  (LINE:228)\l}"];
Node_226 [shape=record,label="{226\:\ 0x0134|0x0134: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) \l0x0136: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcH' int)]) \l}"];
Node_222 [shape=record,label="{222\:\ 0x0126|0x0126: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0127: MOVE  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcW' int)]) \l}"];
Node_228 [shape=record,label="{228\:\ 0x0161|0x0161: MOVE  (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sx' float)]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sx' float)])  (LINE:205)\l0x0163: MOVE  (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sy' float)]) \l0x0165: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) \l0x0167: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) \l}"];
Node_229 [shape=record,label="{229\:\ 0x016a|0x016a: MOVE  (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sx' float)]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sx' float)])  (LINE:204)\l0x016c: MOVE  (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('sy' float)]) \l0x016e: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) \l0x0170: MOVE  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('totalStepsY' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stepsY' int)]) \l}"];
Node_213 [shape=record,label="{213\:\ 0x00fb|0x00fb: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcH' int)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('srcH' int)])  (LINE:192)\l0x00fc: CAST (r6 I:double) = (double) (r9 I:float A[D('sy' float)]) \l0x00fd: INVOKE  (r6 I:double) = (r6 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x0101: ARITH  (r6 I:double) = (r6 I:double) \/ (r17 I:double A[D('log2' double)]) \l0x0103: INVOKE  (r6 I:double) = (r6 I:double) type: STATIC call: java.lang.Math.floor(double):double A[MD:(double):double (c)]\l0x0107: CAST (r6 I:int) = (int) (r6 I:double) \l}"];
Node_209 [shape=record,label="{209\:\ 0x00db|0x00db: MOVE  (r15 I:??[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)]) = (r14 I:??[OBJECT, ARRAY] A[D('paint' android.graphics.Paint)])  (LINE:190)\l0x00dc: CAST (r13 I:double) = (double) (r8 I:float A[D('sx' float)]) \l0x00dd: INVOKE  (r13 I:double) = (r13 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x00e1: ARITH  (r13 I:double) = (r13 I:double) \/ (r17 I:double A[D('log2' double)]) \l0x00e3: INVOKE  (r13 I:double) = (r13 I:double) type: STATIC call: java.lang.Math.floor(double):double A[MD:(double):double (c)]\l0x00e7: CAST (r13 I:int) = (int) (r13 I:double) \l}"];
Node_201 [shape=record,label="{201\:\ 0x009e|0x009e: NEW_INSTANCE  (r10 I:android.graphics.PorterDuffXfermode) =  android.graphics.PorterDuffXfermode  (LINE:176)\l0x00a0: SGET  (r15 I:android.graphics.PorterDuff$Mode) =  android.graphics.PorterDuff.Mode.SRC android.graphics.PorterDuff$Mode \l0x00a2: INVOKE  (r10 I:android.graphics.PorterDuffXfermode), (r15 I:android.graphics.PorterDuff$Mode) type: DIRECT call: android.graphics.PorterDuffXfermode.\<init\>(android.graphics.PorterDuff$Mode):void A[MD:(android.graphics.PorterDuff$Mode):void (c)]\l0x00a5: INVOKE  (r14 I:android.graphics.Paint A[D('paint' android.graphics.Paint)]), (r10 I:android.graphics.Xfermode) type: VIRTUAL call: android.graphics.Paint.setXfermode(android.graphics.Xfermode):android.graphics.Xfermode A[MD:(android.graphics.Xfermode):android.graphics.Xfermode (c)]\l}"];
Node_184 [shape=record,label="{184\:\ 0x0068|0x0068: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_181 [shape=record,label="{181\:\ 0x0062|0x0062: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_177 [shape=record,label="{177\:\ 0x0053|0x0053: INVOKE  (r7 I:int) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getHeight():int A[MD:():int (c)]\l}"];
Node_174 [shape=record,label="{174\:\ 0x0048|0x0048: INVOKE  (r5 I:int) = (r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getWidth():int A[MD:():int (c)]\l}"];
Node_294 [shape=record,label="{294\:\ 0x024f|0x024f: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:134)\l0x0251: CONST_STR  (r2 I:java.lang.String) =  \"dstW and dstH must be \> 0!\" \l0x0253: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_295 [shape=record,label="{295\:\ 0x0256|0x0256: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.Bitmap androidx.core.graphics.BitmapCompat.createScaledBitmap((r30 I:android.graphics.Bitmap A[D('srcBm' android.graphics.Bitmap), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r31 I:int A[D('dstW' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:int A[D('dstH' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:android.graphics.Rect A[D('srcRect' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:boolean A[D('scaleInLinearSpace' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:196:0x008a \-\> B:151:?, CROSS_EDGE: B:197:0x008b \-\> B:151:?, CROSS_EDGE: B:193:0x007e \-\> B:197:0x008b, CROSS_EDGE: B:205:0x00c0 \-\> B:151:?, CROSS_EDGE: B:237:0x018a \-\> B:151:?, CROSS_EDGE: B:235:0x0185 \-\> B:237:0x018a, CROSS_EDGE: B:234:0x0183 \-\> B:237:0x018a, BACK_EDGE: B:293:0x0232 \-\> B:231:0x017e, CROSS_EDGE: B:291:0x0225 \-\> B:293:0x0232, CROSS_EDGE: B:290:0x0224 \-\> B:291:0x0225, CROSS_EDGE: B:287:0x021e \-\> B:290:0x0224, CROSS_EDGE: B:292:0x022a \-\> B:293:0x0232, CROSS_EDGE: B:284:0x0211 \-\> B:285:0x0212, CROSS_EDGE: B:280:0x0208 \-\> B:281:0x0209, CROSS_EDGE: B:275:0x01fd \-\> B:277:0x0202, CROSS_EDGE: B:274:0x01fb \-\> B:277:0x0202, CROSS_EDGE: B:269:0x01ed \-\> B:274:0x01fb, CROSS_EDGE: B:268:0x01eb \-\> B:272:0x01f2, CROSS_EDGE: B:265:0x01e4 \-\> B:274:0x01fb, CROSS_EDGE: B:263:0x01de \-\> B:268:0x01eb, CROSS_EDGE: B:267:0x01e7 \-\> B:268:0x01eb, CROSS_EDGE: B:273:0x01f7 \-\> B:274:0x01fb, CROSS_EDGE: B:259:0x01d0 \-\> B:273:0x01f7, CROSS_EDGE: B:258:0x01cf \-\> B:259:0x01d0, CROSS_EDGE: B:254:0x01c5 \-\> B:258:0x01cf, CROSS_EDGE: B:252:0x01bf \-\> B:258:0x01cf, CROSS_EDGE: B:251:0x01bd \-\> B:252:0x01bf, CROSS_EDGE: B:248:0x01b6 \-\> B:251:0x01bd, CROSS_EDGE: B:245:0x019d \-\> B:247:0x01a4, CROSS_EDGE: B:246:0x01a2 \-\> B:247:0x01a4, CROSS_EDGE: B:241:0x0192 \-\> B:242:0x0194, CROSS_EDGE: B:240:0x0190 \-\> B:242:0x0194, CROSS_EDGE: B:231:0x017e \-\> B:238:0x018b, CROSS_EDGE: B:226:0x0134 \-\> B:227:0x0138, CROSS_EDGE: B:222:0x0126 \-\> B:223:0x0129, CROSS_EDGE: B:228:0x0161 \-\> B:230:0x0172, CROSS_EDGE: B:217:0x0116 \-\> B:228:0x0161, CROSS_EDGE: B:229:0x016a \-\> B:230:0x0172, CROSS_EDGE: B:213:0x00fb \-\> B:214:0x0108, CROSS_EDGE: B:209:0x00db \-\> B:210:0x00e8, CROSS_EDGE: B:202:0x00a8 \-\> B:206:0x00c1, CROSS_EDGE: B:201:0x009e \-\> B:202:0x00a8, CROSS_EDGE: B:189:0x0072 \-\> B:198:0x008c, CROSS_EDGE: B:187:0x006c \-\> B:198:0x008c, CROSS_EDGE: B:186:0x006a \-\> B:198:0x008c, CROSS_EDGE: B:184:0x0068 \-\> B:185:0x0069, CROSS_EDGE: B:181:0x0062 \-\> B:182:0x0063, CROSS_EDGE: B:177:0x0053 \-\> B:178:0x0057, CROSS_EDGE: B:174:0x0048 \-\> B:175:0x004c, CROSS_EDGE: B:170:0x003b \-\> B:172:0x0041, CROSS_EDGE: B:163:0x0022 \-\> B:167:0x002d, CROSS_EDGE: B:161:0x001e \-\> B:167:0x002d, CROSS_EDGE: B:159:0x0016 \-\> B:167:0x002d, CROSS_EDGE: B:157:0x0012 \-\> B:167:0x002d, CROSS_EDGE: B:155:0x000c \-\> B:169:0x0035, CROSS_EDGE: B:295:0x0256 \-\> B:151:?, CROSS_EDGE: B:153:0x0008 \-\> B:294:0x024f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x00b4\-0x00c1: r6 'out' Landroid\/graphics\/Bitmap;\l  0x00b9\-0x00c1: r10 'canvasForCopy' Landroid\/graphics\/Canvas;\l  0x0091\-0x00ce: r14 'paint' Landroid\/graphics\/Paint;\l  0x00ce\-0x00db: r15 'paint' Landroid\/graphics\/Paint;\l  0x00db\-0x00dc: r14 'paint' Landroid\/graphics\/Paint;\l  0x0057\-0x00ee: r7 'srcH' I\l  0x00ee\-0x00fb: r10 'srcH' I\l  0x00fb\-0x00fc: r7 'srcH' I\l  0x010c\-0x012f: r20 'totalStepsY' I\l  0x012f\-0x0134: r14 'totalStepsY' I\l  0x0134\-0x0136: r20 'totalStepsY' I\l  0x005d\-0x0144: r9 'sy' F\l  0x0109\-0x0144: r6 'stepsY' I\l  0x005a\-0x0144: r8 'sx' F\l  0x012b\-0x0144: r23 'allocW' I\l  0x013a\-0x0144: r24 'allocH' I\l  0x010e\-0x0148: r21 'dst' Landroid\/graphics\/Bitmap;\l  0x0144\-0x014f: r6 'allocW' I\l  0x0144\-0x0153: r8 'allocH' I\l  0x0148\-0x015d: r9 'dst' Landroid\/graphics\/Bitmap;\l  0x014d\-0x0161: r3 'canvasForCopy' Landroid\/graphics\/Canvas;\l  0x0136\-0x0161: r14 'totalStepsY' I\l  0x0144\-0x0161: r23 'sx' F\l  0x0144\-0x0161: r24 'sy' F\l  0x014f\-0x0161: r25 'allocW' I\l  0x0153\-0x0161: r26 'allocH' I\l  0x015b\-0x0161: r6 'swap' Landroid\/graphics\/Bitmap;\l  0x0144\-0x0161: r20 'stepsY' I\l  0x0161\-0x0169: r6 'stepsY' I\l  0x0161\-0x0169: r8 'sx' F\l  0x0161\-0x0169: r9 'sy' F\l  0x0161\-0x0169: r20 'totalStepsY' I\l  0x0169\-0x016a: r14 'totalStepsY' I\l  0x0169\-0x016a: r23 'sx' F\l  0x0169\-0x016a: r24 'sy' F\l  0x0169\-0x016a: r20 'stepsY' I\l  0x016a\-0x0172: r6 'stepsY' I\l  0x016a\-0x0172: r8 'sx' F\l  0x016a\-0x0172: r9 'sy' F\l  0x016a\-0x0172: r20 'totalStepsY' I\l  0x015d\-0x017e: r21 'dst' Landroid\/graphics\/Bitmap;\l  0x0172\-0x01a4: r20 'stepsY' I\l  0x0063\-0x01a6: r11 'srcX' I\l  0x0069\-0x01ac: r12 'srcY' I\l  0x0177\-0x01b3: r3 'currRect' Landroid\/graphics\/Rect;\l  0x01aa\-0x01d8: r11 'nextW' I\l  0x01b0\-0x01de: r12 'nextH' I\l  0x01d8\-0x01e7: r27 'nextW' I\l  0x01de\-0x01e7: r28 'nextH' I\l  0x01e7\-0x01eb: r11 'nextW' I\l  0x01e7\-0x01eb: r12 'nextH' I\l  0x01eb\-0x01f7: r27 'nextW' I\l  0x01eb\-0x01f7: r28 'nextH' I\l  0x01f7\-0x01fb: r11 'nextW' I\l  0x01f7\-0x01fb: r12 'nextH' I\l  0x01d0\-0x021c: r3 'dstSizeIsFinal' Z\l  0x0225\-0x0229: r2 'linear' Z\l  0x0216\-0x0232: r1 'allocH' I\l  0x020d\-0x0232: r11 'allocW' I\l  0x0204\-0x0232: r12 'lastScratchStep' I\l  0x01b3\-0x0239: r25 'currRect' Landroid\/graphics\/Rect;\l  0x0237\-0x0242: r1 'canvas' Landroid\/graphics\/Canvas;\l  0x023d\-0x0242: r11 'swap' Landroid\/graphics\/Bitmap;\l  0x01bf\-0x0242: r16 'lastStep' Z\l  0x01fb\-0x0242: r27 'nextW' I\l  0x01fb\-0x0242: r28 'nextH' I\l  0x021c\-0x0242: r29 'dstSizeIsFinal' Z\l  0x0239\-0x024f: r2 'currRect' Landroid\/graphics\/Rect;\l  0x0037\-0x024f: r4 'src' Landroid\/graphics\/Bitmap;\l  0x004c\-0x024f: r5 'srcW' I\l  0x017e\-0x024f: r6 'nextRect' Landroid\/graphics\/Rect;\l  0x010a\-0x024f: r7 'totalStepsX' I\l  0x017e\-0x024f: r8 'dst' Landroid\/graphics\/Bitmap;\l  0x01a4\-0x024f: r9 'stepsY' I\l  0x00fc\-0x024f: r10 'srcH' I\l  0x00e9\-0x024f: r13 'stepsX' I\l  0x0172\-0x024f: r14 'totalStepsY' I\l  0x00dc\-0x024f: r15 'paint' Landroid\/graphics\/Paint;\l  0x00c7\-0x024f: r17 'log2' D\l  0x01a6\-0x024f: r20 'srcX' I\l  0x01ac\-0x024f: r21 'srcY' I\l  0x0110\-0x024f: r22 'needFinalConversion' Z\l  0x0172\-0x024f: r23 'sx' F\l  0x0172\-0x024f: r24 'sy' F\l  \-1 \-0x0256: r30 'srcBm' Landroid\/graphics\/Bitmap;\l  \-1 \-0x0256: r31 'dstW' I\l  \-1 \-0x0256: r32 'dstH' I\l  \-1 \-0x0256: r33 'srcRect' Landroid\/graphics\/Rect;\l  \-1 \-0x0256: r34 'scaleInLinearSpace' Z\l}"];
MethodNode -> Node_150;Node_150 -> Node_152;
Node_152 -> Node_153;
Node_153 -> Node_154[style=dashed];
Node_153 -> Node_294;
Node_154 -> Node_155[style=dashed];
Node_154 -> Node_294;
Node_155 -> Node_156[style=dashed];
Node_155 -> Node_169;
Node_156 -> Node_157;
Node_157 -> Node_158[style=dashed];
Node_157 -> Node_167;
Node_158 -> Node_159;
Node_159 -> Node_160[style=dashed];
Node_159 -> Node_167;
Node_160 -> Node_161;
Node_161 -> Node_162[style=dashed];
Node_161 -> Node_167;
Node_162 -> Node_163;
Node_163 -> Node_164[style=dashed];
Node_163 -> Node_167;
Node_164 -> Node_165;
Node_165 -> Node_167;
Node_165 -> Node_169[style=dashed];
Node_167 -> Node_168;
Node_168 -> Node_151;
Node_169 -> Node_170;
Node_170 -> Node_171[style=dashed];
Node_170 -> Node_172;
Node_171 -> Node_172;
Node_172 -> Node_173[style=dashed];
Node_172 -> Node_174;
Node_173 -> Node_175;
Node_175 -> Node_176[style=dashed];
Node_175 -> Node_177;
Node_176 -> Node_178;
Node_178 -> Node_179;
Node_179 -> Node_180[style=dashed];
Node_179 -> Node_181;
Node_180 -> Node_182;
Node_182 -> Node_183[style=dashed];
Node_182 -> Node_184;
Node_183 -> Node_185;
Node_185 -> Node_186;
Node_186 -> Node_187[style=dashed];
Node_186 -> Node_198;
Node_187 -> Node_188[style=dashed];
Node_187 -> Node_198;
Node_188 -> Node_189;
Node_189 -> Node_190[style=dashed];
Node_189 -> Node_198;
Node_190 -> Node_191;
Node_191 -> Node_192[style=dashed];
Node_191 -> Node_198;
Node_192 -> Node_193;
Node_193 -> Node_194[style=dashed];
Node_193 -> Node_197;
Node_194 -> Node_195[style=dashed];
Node_194 -> Node_197;
Node_195 -> Node_196;
Node_196 -> Node_151;
Node_197 -> Node_151;
Node_198 -> Node_199;
Node_199 -> Node_200[style=dashed];
Node_199 -> Node_201;
Node_200 -> Node_202;
Node_202 -> Node_203[style=dashed];
Node_202 -> Node_206;
Node_203 -> Node_204[style=dashed];
Node_203 -> Node_206;
Node_204 -> Node_205;
Node_205 -> Node_151;
Node_206 -> Node_207;
Node_207 -> Node_208[style=dashed];
Node_207 -> Node_209;
Node_208 -> Node_210;
Node_210 -> Node_211;
Node_211 -> Node_212[style=dashed];
Node_211 -> Node_213;
Node_212 -> Node_214;
Node_214 -> Node_215;
Node_215 -> Node_216[style=dashed];
Node_215 -> Node_229;
Node_216 -> Node_217;
Node_217 -> Node_218[style=dashed];
Node_217 -> Node_228;
Node_218 -> Node_219;
Node_219 -> Node_220[style=dashed];
Node_219 -> Node_228;
Node_220 -> Node_221[style=dashed];
Node_220 -> Node_222;
Node_221 -> Node_223;
Node_223 -> Node_224;
Node_224 -> Node_225[style=dashed];
Node_224 -> Node_226;
Node_225 -> Node_227;
Node_227 -> Node_230;
Node_230 -> Node_231;
Node_231 -> Node_232[style=dashed];
Node_231 -> Node_238;
Node_232 -> Node_238[style=dashed];
Node_232 -> Node_296;
Node_296 -> Node_234;
Node_234 -> Node_235[style=dashed];
Node_234 -> Node_237;
Node_235 -> Node_236[style=dashed];
Node_235 -> Node_237;
Node_236 -> Node_237;
Node_237 -> Node_151;
Node_238 -> Node_239[style=dashed];
Node_238 -> Node_240;
Node_239 -> Node_242;
Node_242 -> Node_243[style=dashed];
Node_242 -> Node_244;
Node_243 -> Node_247;
Node_247 -> Node_248;
Node_248 -> Node_249[style=dashed];
Node_248 -> Node_251;
Node_249 -> Node_250[style=dashed];
Node_249 -> Node_251;
Node_250 -> Node_252;
Node_252 -> Node_253[style=dashed];
Node_252 -> Node_258;
Node_253 -> Node_254;
Node_254 -> Node_255[style=dashed];
Node_254 -> Node_258;
Node_255 -> Node_256;
Node_256 -> Node_257[style=dashed];
Node_256 -> Node_258;
Node_257 -> Node_259;
Node_259 -> Node_260[style=dashed];
Node_259 -> Node_273;
Node_260 -> Node_261[style=dashed];
Node_260 -> Node_273;
Node_261 -> Node_262[style=dashed];
Node_261 -> Node_267;
Node_262 -> Node_263;
Node_263 -> Node_264[style=dashed];
Node_263 -> Node_268;
Node_264 -> Node_265;
Node_265 -> Node_268[style=dashed];
Node_265 -> Node_274;
Node_274 -> Node_275[style=dashed];
Node_274 -> Node_277;
Node_275 -> Node_276[style=dashed];
Node_275 -> Node_277;
Node_276 -> Node_277;
Node_277 -> Node_278;
Node_278 -> Node_279[style=dashed];
Node_278 -> Node_280;
Node_279 -> Node_281;
Node_281 -> Node_282;
Node_282 -> Node_283[style=dashed];
Node_282 -> Node_284;
Node_283 -> Node_285;
Node_285 -> Node_286;
Node_286 -> Node_287[style=dashed];
Node_286 -> Node_292;
Node_287 -> Node_288[style=dashed];
Node_287 -> Node_290;
Node_288 -> Node_289[style=dashed];
Node_288 -> Node_290;
Node_289 -> Node_291;
Node_291 -> Node_299;
Node_299 -> Node_293;
Node_293 -> Node_231;
Node_290 -> Node_291;
Node_292 -> Node_297;
Node_297 -> Node_293;
Node_284 -> Node_285;
Node_280 -> Node_281;
Node_268 -> Node_269[style=dashed];
Node_268 -> Node_272;
Node_269 -> Node_270[style=dashed];
Node_269 -> Node_274;
Node_270 -> Node_272;
Node_270 -> Node_274[style=dashed];
Node_272 -> Node_298;
Node_298 -> Node_293;
Node_267 -> Node_268;
Node_273 -> Node_274;
Node_258 -> Node_259;
Node_251 -> Node_252;
Node_244 -> Node_245[style=dashed];
Node_244 -> Node_246;
Node_245 -> Node_247;
Node_246 -> Node_247;
Node_240 -> Node_241[style=dashed];
Node_240 -> Node_242;
Node_241 -> Node_242;
Node_226 -> Node_227;
Node_222 -> Node_223;
Node_228 -> Node_230;
Node_229 -> Node_230;
Node_213 -> Node_214;
Node_209 -> Node_210;
Node_201 -> Node_202;
Node_184 -> Node_185;
Node_181 -> Node_182;
Node_177 -> Node_178;
Node_174 -> Node_175;
Node_294 -> Node_295;
Node_295 -> Node_151;
}

