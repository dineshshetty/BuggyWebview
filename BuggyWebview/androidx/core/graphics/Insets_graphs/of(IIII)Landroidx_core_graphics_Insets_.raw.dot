digraph "CFG forandroidx.core.graphics.Insets.of(IIII)Landroidx\/core\/graphics\/Insets;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('left' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b  (LINE:64)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('top' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('right' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b \l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bottom' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: SGET  (r0 I:androidx.core.graphics.Insets) =  androidx.core.graphics.Insets.NONE androidx.core.graphics.Insets  (LINE:65)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:androidx.core.graphics.Insets) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:androidx.core.graphics.Insets) =  androidx.core.graphics.Insets  (LINE:67)\l0x000d: INVOKE  \l  (r0 I:androidx.core.graphics.Insets)\l  (r1 I:int A[D('left' int)])\l  (r2 I:int A[D('top' int)])\l  (r3 I:int A[D('right' int)])\l  (r4 I:int A[D('bottom' int)])\l type: DIRECT call: androidx.core.graphics.Insets.\<init\>(int, int, int, int):void A[MD:(int, int, int, int):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:androidx.core.graphics.Insets) \l}"];
MethodNode[shape=record,label="{public static androidx.core.graphics.Insets androidx.core.graphics.Insets.of((r1 I:int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0010 \-\> B:11:?, CROSS_EDGE: B:14:0x0004 \-\> B:18:0x000b, CROSS_EDGE: B:13:0x0002 \-\> B:18:0x000b, CROSS_EDGE: B:12:0x0000 \-\> B:18:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r1 'left' I\l  \-1 \-0x0010: r2 'top' I\l  \-1 \-0x0010: r3 'right' I\l  \-1 \-0x0010: r4 'bottom' I\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

