digraph "CFG forandroidx.core.graphics.Insets.of(IIII)Landroidx\/core\/graphics\/Insets;" {
subgraph cluster_Region_532699549 {
label = "R(1:(2:(1:6)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_780613711 {
label = "R(2:(1:6)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1167247153 {
label = "IF [B:12:0x0000, B:13:0x0002, B:14:0x0004, B:15:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|if (r1 == 0) goto L2\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|ADDED_TO_REGION\l|if (r2 == 0) goto L3\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|ADDED_TO_REGION\l|if (r3 == 0) goto L4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|ADDED_TO_REGION\l|if (r4 == 0) goto L5\l}"];
subgraph cluster_Region_1107302021 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|return androidx.core.graphics.Insets.NONE\l}"];
}
}
subgraph cluster_Region_1603384297 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|return new androidx.core.graphics.Insets(r1, r2, r3, r4)\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0008}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000b}"];
MethodNode[shape=record,label="{public static androidx.core.graphics.Insets androidx.core.graphics.Insets.of((r1v0 'left' int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'top' int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'right' int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'bottom' int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0010 \-\> B:11:?, CROSS_EDGE: B:14:0x0004 \-\> B:18:0x000b, CROSS_EDGE: B:13:0x0002 \-\> B:18:0x000b, CROSS_EDGE: B:12:0x0000 \-\> B:18:0x000b\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_12 -> Node_18[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_18[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

