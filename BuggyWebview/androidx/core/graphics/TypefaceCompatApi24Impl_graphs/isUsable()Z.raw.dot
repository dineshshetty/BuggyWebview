digraph "CFG forandroidx.core.graphics.TypefaceCompatApi24Impl.isUsable()Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: SGET  (r0 I:java.lang.reflect.Method) =  androidx.core.graphics.TypefaceCompatApi24Impl.sAddFontWeightStyle java.lang.reflect.Method  (LINE:94)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: CONST_STR  (r1 I:java.lang.String) =  \"TypefaceCompatApi24Impl\"  (LINE:95)\l0x0006: CONST_STR  (r2 I:java.lang.String) =  \"Unable to collect necessary private methods.Fallback to legacy implementation.\" \l0x0008: INVOKE  (r1 I:java.lang.String), (r2 I:java.lang.String) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000f  (LINE:98)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|SYNTHETIC\lRETURN\l|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0010: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.graphics.TypefaceCompatApi24Impl.isUsable()  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000f \-\> B:18:0x0010, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x000b\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_11;
}

