digraph "CFG forandroidx.core.graphics.TypefaceCompat.create(Landroid\/content\/Context;Landroid\/graphics\/Typeface;I)Landroid\/graphics\/Typeface;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('context' android.content.Context)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0015  (LINE:283)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:287)\l0x0003: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:288)\l0x0005: CONST  (r2 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: IF  (r1 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:8:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: INVOKE  (r0 I:android.graphics.Typeface A[D('typefaceFromFamily' android.graphics.Typeface)]) = \l  (r3 I:android.content.Context A[D('context' android.content.Context)])\l  (r4 I:android.graphics.Typeface A[D('family' android.graphics.Typeface)])\l  (r5 I:int A[D('style' int)])\l type: STATIC call: androidx.core.graphics.TypefaceCompat.getBestFontFromFamily(android.content.Context, android.graphics.Typeface, int):android.graphics.Typeface A[MD:(android.content.Context, android.graphics.Typeface, int):android.graphics.Typeface (m)] (LINE:289)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('typefaceFromFamily' android.graphics.Typeface)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0010  (LINE:290)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:android.graphics.Typeface A[D('typefaceFromFamily' android.graphics.Typeface)])  (LINE:291)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: INVOKE  (r1 I:android.graphics.Typeface) = (r4 I:android.graphics.Typeface A[D('family' android.graphics.Typeface)]), (r5 I:int A[D('style' int)]) type: STATIC call: android.graphics.Typeface.create(android.graphics.Typeface, int):android.graphics.Typeface A[MD:(android.graphics.Typeface, int):android.graphics.Typeface (c)] (LINE:295)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|RETURN\l|0x0014: RETURN  (r1 I:android.graphics.Typeface) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('typefaceFromFamily' android.graphics.Typeface)]) =  java.lang.IllegalArgumentException  (LINE:284)\l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"Context cannot be null\" \l0x0019: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|0x001c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static android.graphics.Typeface androidx.core.graphics.TypefaceCompat.create((r3 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.Typeface A[D('family' android.graphics.Typeface), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('style' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0014 \-\> B:1:?, CROSS_EDGE: B:4:0x0007 \-\> B:8:0x0010, CROSS_EDGE: B:11:0x001c \-\> B:1:?\lDebug Info:\l  0x0003\-0x0015: r0 'typefaceFromFamily' Landroid\/graphics\/Typeface;\l  \-1 \-0x001c: r3 'context' Landroid\/content\/Context;\l  \-1 \-0x001c: r4 'family' Landroid\/graphics\/Typeface;\l  \-1 \-0x001c: r5 'style' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

