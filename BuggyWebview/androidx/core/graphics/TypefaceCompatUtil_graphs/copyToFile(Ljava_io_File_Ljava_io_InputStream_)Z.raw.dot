digraph "CFG forandroidx.core.graphics.TypefaceCompatUtil.copyToFile(Ljava\/io\/File;Ljava\/io\/InputStream;)Z" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:154)\l0x0001: INVOKE  (r1 I:android.os.StrictMode$ThreadPolicy) =  type: STATIC call: android.os.StrictMode.allowThreadDiskWrites():android.os.StrictMode$ThreadPolicy A[MD:():android.os.StrictMode$ThreadPolicy (c)] (LINE:155)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:157)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0006|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|TRY_ENTER\lTryCatch #1 \{IOException \-\> 0x0026, blocks: (B:24:0x0006, B:25:0x0010, B:27:0x0018), top: B:39:0x0006, outer: #0 \}\lCatch: all \-\> 0x0024, IOException \-\> 0x0026\l|0x0006: NEW_INSTANCE  (r3 I:java.io.FileOutputStream) =  java.io.FileOutputStream A[Catch: all \-\> 0x0024, IOException \-\> 0x0026, TRY_ENTER]\l0x0008: INVOKE  (r3 I:java.io.FileOutputStream), (r7 I:java.io.File A[D('file' java.io.File)]), (r2 I:boolean) type: DIRECT call: java.io.FileOutputStream.\<init\>(java.io.File, boolean):void A[Catch: all \-\> 0x0024, IOException \-\> 0x0026, MD:(java.io.File, boolean):void throws java.io.FileNotFoundException (c)]\l0x000b: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('os' java.io.FileOutputStream)]) = (r3 I:??[OBJECT, ARRAY]) \l0x000c: CONST  (r3 I:??[int, float, short, byte, char]) = (1024(0x400, float:1.435E\-42) ??[int, float, short, byte, char])  (LINE:158)\l0x000e: NEW_ARRAY  (r3 I:byte[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch: all \-\> 0x0024, IOException \-\> 0x0026]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|LOOP_START\lTryCatch #1 \{IOException \-\> 0x0026, blocks: (B:24:0x0006, B:25:0x0010, B:27:0x0018), top: B:39:0x0006, outer: #0 \}\lLOOP:0: B:25:0x0010\-\>B:27:0x0018\lCatch: all \-\> 0x0024, IOException \-\> 0x0026\l|0x0010: INVOKE  (r4 I:int) = (r8 I:java.io.InputStream A[D('is' java.io.InputStream)]), (r3 I:byte[] A[D('buffer' byte[])]) type: VIRTUAL call: java.io.InputStream.read(byte[]):int A[Catch: all \-\> 0x0024, IOException \-\> 0x0026, MD:(byte[]):int throws java.io.IOException (c)] (LINE:160)\l0x0014: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: CONST  (r6 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x001c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|TRY_LEAVE\lLOOP_END\lTryCatch #1 \{IOException \-\> 0x0026, blocks: (B:24:0x0006, B:25:0x0010, B:27:0x0018), top: B:39:0x0006, outer: #0 \}\lLOOP:0: B:25:0x0010\-\>B:27:0x0018\lCatch: all \-\> 0x0024, IOException \-\> 0x0026\l|0x0018: INVOKE  \l  (r0 I:java.io.FileOutputStream A[D('os' java.io.FileOutputStream)])\l  (r3 I:byte[] A[D('buffer' byte[])])\l  (r2 I:int)\l  (r5 I:int A[D('readLen' int)])\l type: VIRTUAL call: java.io.FileOutputStream.write(byte[], int, int):void A[Catch: all \-\> 0x0024, IOException \-\> 0x0026, MD:(byte[], int, int):void throws java.io.IOException (c), TRY_LEAVE] (LINE:161)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001c|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|0x001c: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:163)\l0x001d: INVOKE  (r0 I:java.io.Closeable A[D('os' java.io.FileOutputStream)]) type: STATIC call: androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):void A[MD:(java.io.Closeable):void (m)] (LINE:168)\l0x0020: INVOKE  (r1 I:android.os.StrictMode$ThreadPolicy A[D('old' android.os.StrictMode$ThreadPolicy)]) type: STATIC call: android.os.StrictMode.setThreadPolicy(android.os.StrictMode$ThreadPolicy):void A[MD:(android.os.StrictMode$ThreadPolicy):void (c)] (LINE:169)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0023|RETURN\l|0x0023: RETURN  (r2 I:boolean)  (LINE:163)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|ExcHandler: all \-\> 0x0024\l|0x0024: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0024] (LINE:168)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0049|0x0049: INVOKE  (r0 I:java.io.Closeable A[D('os' java.io.FileOutputStream)]) type: STATIC call: androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):void A[MD:(java.io.Closeable):void (m)] (LINE:168)\l0x004c: INVOKE  (r1 I:android.os.StrictMode$ThreadPolicy A[D('old' android.os.StrictMode$ThreadPolicy)]) type: STATIC call: android.os.StrictMode.setThreadPolicy(android.os.StrictMode$ThreadPolicy):void A[MD:(android.os.StrictMode$ThreadPolicy):void (c)] (LINE:169)\l}"];
Node_38 [shape=record,label="{38\:\ 0x004f|0x004f: THROW  (r2 I:java.lang.Throwable)  (LINE:170)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0026|ExcHandler: IOException \-\> 0x0026\l|0x0026: MOVE_EXCEPTION  (r3 I:java.io.IOException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IOException \-\> 0x0026] (LINE:164)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0027|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0024, blocks: (B:24:0x0006, B:25:0x0010, B:27:0x0018, B:34:0x0027), top: B:39:0x0006, inners: #1 \}\lCatch: all \-\> 0x0024\l|0x0027: CONST_STR  (r4 I:java.lang.String) =  \"TypefaceCompatUtil\" A[TRY_ENTER] (LINE:165)\l0x0029: NEW_INSTANCE  (r5 I:java.lang.StringBuilder) =  java.lang.StringBuilder A[Catch: all \-\> 0x0024]\l0x002b: INVOKE  (r5 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[Catch: all \-\> 0x0024, MD:():void (c)]\l0x002e: CONST_STR  (r6 I:java.lang.String) =  \"Error copying resource contents to temp file: \" \l0x0030: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[Catch: all \-\> 0x0024, MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0033: INVOKE  (r6 I:java.lang.String) = (r3 I:java.io.IOException A[D('e' java.io.IOException)]) type: VIRTUAL call: java.io.IOException.getMessage():java.lang.String A[Catch: all \-\> 0x0024, MD:():java.lang.String (s)]\l0x0037: INVOKE  (r5 I:java.lang.StringBuilder), (r6 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[Catch: all \-\> 0x0024, MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003a: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[Catch: all \-\> 0x0024, MD:():java.lang.String (c)]\l0x003e: INVOKE  (r4 I:java.lang.String), (r5 I:java.lang.String) type: STATIC call: android.util.Log.e(java.lang.String, java.lang.String):int A[Catch: all \-\> 0x0024, MD:(java.lang.String, java.lang.String):int (c), TRY_LEAVE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0042|0x0042: INVOKE  (r0 I:java.io.Closeable A[D('os' java.io.FileOutputStream)]) type: STATIC call: androidx.core.graphics.TypefaceCompatUtil.closeQuietly(java.io.Closeable):void A[MD:(java.io.Closeable):void (m)] (LINE:168)\l0x0045: INVOKE  (r1 I:android.os.StrictMode$ThreadPolicy A[D('old' android.os.StrictMode$ThreadPolicy)]) type: STATIC call: android.os.StrictMode.setThreadPolicy(android.os.StrictMode$ThreadPolicy):void A[MD:(android.os.StrictMode$ThreadPolicy):void (c)] (LINE:169)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0048|RETURN\l|0x0048: RETURN  (r2 I:boolean)  (LINE:166)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.graphics.TypefaceCompatUtil.copyToFile((r7 I:java.io.File A[D('file' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.io.InputStream A[D('is' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:27:0x0018 \-\> B:25:0x0010, CROSS_EDGE: B:36:0x0048 \-\> B:22:?, CROSS_EDGE: B:38:0x004f \-\> B:22:?, CROSS_EDGE: B:39:0x0006 \-\> B:31:0x0024, CROSS_EDGE: B:39:0x0006 \-\> B:33:0x0026\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0024, blocks: (B:24:0x0006, B:25:0x0010, B:27:0x0018, B:34:0x0027), top: B:39:0x0006, inners: #1 \}, TryCatch #1 \{IOException \-\> 0x0026, blocks: (B:24:0x0006, B:25:0x0010, B:27:0x0018), top: B:39:0x0006, outer: #0 \}\lDebug Info:\l  0x0010\-0x0024: r3 'buffer' [B\l  0x0015\-0x0024: r5 'readLen' I\l  0x0027\-0x0049: r3 'e' Ljava\/io\/IOException;\l  0x0001\-0x004f: r0 'os' Ljava\/io\/FileOutputStream;\l  0x0005\-0x004f: r1 'old' Landroid\/os\/StrictMode$ThreadPolicy;\l  \-1 \-0x004f: r7 'file' Ljava\/io\/File;\l  \-1 \-0x004f: r8 'is' Ljava\/io\/InputStream;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [168=4]\}\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_39;
Node_39 -> Node_24;
Node_39 -> Node_31;
Node_39 -> Node_33;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_40;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_41;
Node_27 -> Node_25;
Node_41 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_22;
Node_40 -> Node_33;
Node_40 -> Node_31;
Node_31 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_22;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_22;
}

