digraph "CFG forandroidx.core.graphics.TypefaceCompatUtil.closeQuietly(Ljava\/io\/Closeable;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c' java.io.Closeable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:?  (LINE:193)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IOException \-\> 0x0006, blocks: (B:14:0x0002), top: B:18:0x0002 \}\lCatch: IOException \-\> 0x0006\l|0x0002: INVOKE  (r1 I:java.io.Closeable A[D('c' java.io.Closeable)]) type: INTERFACE call: java.io.Closeable.close():void A[Catch: IOException \-\> 0x0006, MD:():void throws java.io.IOException (c), TRY_ENTER, TRY_LEAVE] (LINE:195)\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0007: RETURN   A[SYNTHETIC] (LINE:200)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|ExcHandler: IOException \-\> 0x0006\l|0x0006: MOVE_EXCEPTION  (r0 I:java.io.IOException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IOException \-\> 0x0006] (LINE:196)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|RETURN\lORIG_RETURN\l|0x0007: RETURN    (LINE:200)\l}"];
Node_20 [shape=record,label="{20\:\ ?|SYNTHETIC\lRETURN\l|0x0007: RETURN   A[SYNTHETIC] (LINE:200)\l}"];
MethodNode[shape=record,label="{public static void androidx.core.graphics.TypefaceCompatUtil.closeQuietly((r1 I:java.io.Closeable A[D('c' java.io.Closeable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0002 \-\> B:17:0x0007, CROSS_EDGE: B:16:0x0006 \-\> B:17:0x0007, CROSS_EDGE: B:18:0x0002 \-\> B:16:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r1 'c' Ljava\/io\/Closeable;\lTryCatch #0 \{IOException \-\> 0x0006, blocks: (B:14:0x0002), top: B:18:0x0002 \}\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_18[style=dashed];
Node_13 -> Node_20;
Node_18 -> Node_14;
Node_18 -> Node_16;
Node_14 -> Node_19;
Node_14 -> Node_21;
Node_19 -> Node_16;
Node_21 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_12;
Node_20 -> Node_12;
}

