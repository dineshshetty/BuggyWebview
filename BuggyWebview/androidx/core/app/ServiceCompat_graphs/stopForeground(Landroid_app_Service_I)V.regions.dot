digraph "CFG forandroidx.core.app.ServiceCompat.stopForeground(Landroid\/app\/Service;I)V" {
subgraph cluster_Region_108937604 {
label = "R(1:(1:3)(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_752213353 {
label = "IF [B:3:0x0004] THEN: R(1:3) ELSE: R(1:9)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \>= 24) goto L3\l}"];
subgraph cluster_Region_802278872 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|androidx.core.app.ServiceCompat.Api24Impl.stopForeground(r2, r3)\l}"];
}
subgraph cluster_Region_799966252 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0011|PHI: r0 \l  PHI: (r0v3 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r2.stopForeground((r3 & 1) != 0)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000a}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000c}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000e}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0014|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0010}"];
MethodNode[shape=record,label="{public static void androidx.core.app.ServiceCompat.stopForeground((r2v0 'service' android.app.Service A[D('service' android.app.Service), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'flags' int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0011 \-\> B:10:0x0014, CROSS_EDGE: B:8:0x0010 \-\> B:9:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_9 -> Node_10;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_11 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_10 -> Node_1;
Node_8 -> Node_9;
}

