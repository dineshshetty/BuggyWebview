digraph "CFG forandroidx.core.app.SharedElementCallback.createDrawableBitmap(Landroid\/graphics\/drawable\/Drawable;)Landroid\/graphics\/Bitmap;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r13 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicWidth():int A[MD:():int (c)] (LINE:214)\l0x0004: INVOKE  (r1 I:int) = (r13 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicHeight():int A[MD:():int (c)] (LINE:215)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char] A[D('width' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:31:0x0053  (LINE:216)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: IF  (r1 I:??[int, byte, short, char] A[D('height' int)]) \> (0 ??[int, byte, short, char])  \-\> B:23:0x000d \l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: CONST  (r2 I:??[int, float, short, byte, char]) = (1233125376(0x49800000, float:1048576.0) ??[int, float, short, byte, char])  (LINE:219)\l0x000f: ARITH  (r3 I:int) = (r0 I:int A[D('width' int)]) * (r1 I:int A[D('height' int)]) \l0x0011: CAST (r3 I:float) = (float) (r3 I:int) \l0x0012: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x0013: CONST  (r3 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x0015: INVOKE  (r2 I:float) = (r3 I:float), (r2 I:float) type: STATIC call: java.lang.Math.min(float, float):float A[MD:(float, float):float (c)]\l0x0019: INSTANCE_OF  (r4 I:boolean) = (r13 I:??[OBJECT, ARRAY] A[D('drawable' android.graphics.drawable.Drawable)]) android.graphics.drawable.BitmapDrawable  (LINE:220)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0029 \l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|0x001d: CMP_L  (r3 I:int) = (r2 I:float A[D('scale' float)]), (r3 I:float) \l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0029 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('drawable' android.graphics.drawable.Drawable)])  (LINE:222)\l0x0022: CHECK_CAST (r3 I:android.graphics.drawable.BitmapDrawable) = (android.graphics.drawable.BitmapDrawable) (r3 I:??[OBJECT, ARRAY]) \l0x0024: INVOKE  (r3 I:android.graphics.Bitmap) = (r3 I:android.graphics.drawable.BitmapDrawable) type: VIRTUAL call: android.graphics.drawable.BitmapDrawable.getBitmap():android.graphics.Bitmap A[MD:():android.graphics.Bitmap (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0028|RETURN\l|0x0028: RETURN  (r3 I:android.graphics.Bitmap) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|0x0029: CAST (r3 I:float) = (float) (r0 I:int A[D('width' int)])  (LINE:224)\l0x002a: ARITH  (r3 I:float) = (r3 I:float) * (r2 I:float A[D('scale' float)]) \l0x002c: CAST (r3 I:int) = (int) (r3 I:float) \l0x002d: CAST (r4 I:float) = (float) (r1 I:int A[D('height' int)])  (LINE:225)\l0x002e: ARITH  (r4 I:float) = (r4 I:float) * (r2 I:float A[D('scale' float)]) \l0x0030: CAST (r4 I:int) = (int) (r4 I:float) \l0x0031: SGET  (r5 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config  (LINE:226)\l0x0033: INVOKE  (r5 I:android.graphics.Bitmap) = (r3 I:int A[D('bitmapWidth' int)]), (r4 I:int A[D('bitmapHeight' int)]), (r5 I:android.graphics.Bitmap$Config) type: STATIC call: android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap (c)]\l0x0037: NEW_INSTANCE  (r6 I:android.graphics.Canvas) =  android.graphics.Canvas  (LINE:227)\l0x0039: INVOKE  (r6 I:android.graphics.Canvas), (r5 I:android.graphics.Bitmap A[D('bitmap' android.graphics.Bitmap)]) type: DIRECT call: android.graphics.Canvas.\<init\>(android.graphics.Bitmap):void A[MD:(android.graphics.Bitmap):void (c)]\l0x003c: INVOKE  (r7 I:android.graphics.Rect) = (r13 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getBounds():android.graphics.Rect A[MD:():android.graphics.Rect (c)] (LINE:228)\l0x0040: IGET  (r8 I:int) = (r7 I:android.graphics.Rect A[D('existingBounds' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:229)\l0x0042: IGET  (r9 I:int) = (r7 I:android.graphics.Rect A[D('existingBounds' android.graphics.Rect)]) android.graphics.Rect.top int  (LINE:230)\l0x0044: IGET  (r10 I:int) = (r7 I:android.graphics.Rect A[D('existingBounds' android.graphics.Rect)]) android.graphics.Rect.right int  (LINE:231)\l0x0046: IGET  (r11 I:int) = (r7 I:android.graphics.Rect A[D('existingBounds' android.graphics.Rect)]) android.graphics.Rect.bottom int  (LINE:232)\l0x0048: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:233)\l0x0049: INVOKE  \l  (r13 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r12 I:int)\l  (r12 I:int)\l  (r3 I:int A[D('bitmapWidth' int)])\l  (r4 I:int A[D('bitmapHeight' int)])\l type: VIRTUAL call: android.graphics.drawable.Drawable.setBounds(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l0x004c: INVOKE  \l  (r13 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r6 I:android.graphics.Canvas A[D('canvas' android.graphics.Canvas)])\l type: VIRTUAL call: android.graphics.drawable.Drawable.draw(android.graphics.Canvas):void A[MD:(android.graphics.Canvas):void (c)] (LINE:234)\l0x004f: INVOKE  \l  (r13 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l  (r8 I:int A[D('left' int)])\l  (r9 I:int A[D('top' int)])\l  (r10 I:int A[D('right' int)])\l  (r11 I:int A[D('bottom' int)])\l type: VIRTUAL call: android.graphics.drawable.Drawable.setBounds(int, int, int, int):void A[MD:(int, int, int, int):void (c)] (LINE:235)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0052|RETURN\l|0x0052: RETURN  (r5 I:android.graphics.Bitmap A[D('bitmap' android.graphics.Bitmap)])  (LINE:236)\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0053: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scale' float)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:217)\l0x0054: RETURN  (r2 I:android.graphics.Bitmap) A[SYNTHETIC]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0053|RETURN\lORIG_RETURN\l|0x0053: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scale' float)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:217)\l0x0054: RETURN  (r2 I:android.graphics.Bitmap) \l}"];
MethodNode[shape=record,label="{private static android.graphics.Bitmap androidx.core.app.SharedElementCallback.createDrawableBitmap((r13 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0052 \-\> B:18:?, CROSS_EDGE: B:24:0x001b \-\> B:29:0x0029, CROSS_EDGE: B:32:0x0054 \-\> B:18:?, CROSS_EDGE: B:20:0x0008 \-\> B:31:0x0053\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0053: r2 'scale' F\l  0x002d\-0x0053: r3 'bitmapWidth' I\l  0x0031\-0x0053: r4 'bitmapHeight' I\l  0x0037\-0x0053: r5 'bitmap' Landroid\/graphics\/Bitmap;\l  0x003c\-0x0053: r6 'canvas' Landroid\/graphics\/Canvas;\l  0x0040\-0x0053: r7 'existingBounds' Landroid\/graphics\/Rect;\l  0x0042\-0x0053: r8 'left' I\l  0x0044\-0x0053: r9 'top' I\l  0x0046\-0x0053: r10 'right' I\l  0x0048\-0x0053: r11 'bottom' I\l  0x0004\-0x0054: r0 'width' I\l  0x0008\-0x0054: r1 'height' I\l  \-1 \-0x0054: r13 'drawable' Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_23;
Node_21 -> Node_33[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_18;
Node_29 -> Node_30;
Node_30 -> Node_18;
Node_33 -> Node_18;
Node_31 -> Node_18;
}

