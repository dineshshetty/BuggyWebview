digraph "CFG forandroidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.cancelAll(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r3.this$0.checkPermission(getCallingUid(), r4)\llong r0 = clearCallingIdentity()\l}"];
Node_9 [shape=record,label="{9\:\ 0x000d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:3:0x000d), top: B:9:0x000d \}\lCatch: all \-\> 0x0017\l|r3.this$0.cancelAll(r4)     \/\/ Catch: java.lang.Throwable \-\> L17\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|DONT_GENERATE\l|restoreCallingIdentity(r0)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|ExcHandler: all \-\> 0x0017\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|FINALLY_INSNS\l|restoreCallingIdentity(r0)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|throw r2\l}"];
MethodNode[shape=record,label="{public void androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.cancelAll((r3v0 'this' androidx.core.app.NotificationCompatSideChannelService$NotificationSideChannelStub A[IMMUTABLE_TYPE, THIS]), (r4v0 'packageName' java.lang.String A[D('packageName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x001b \-\> B:1:?, CROSS_EDGE: B:9:0x000d \-\> B:6:0x0017\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:3:0x000d), top: B:9:0x000d \}\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [android.support.v4.app.INotificationSideChannel.cancelAll(java.lang.String):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_9;
Node_9 -> Node_3;
Node_9 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_10 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
}

