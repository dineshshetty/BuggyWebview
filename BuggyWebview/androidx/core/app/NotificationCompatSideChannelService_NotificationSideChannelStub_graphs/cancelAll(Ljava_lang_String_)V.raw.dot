digraph "CFG forandroidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.cancelAll(Ljava\/lang\/String;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.core.app.NotificationCompatSideChannelService) = (r3 I:androidx.core.app.NotificationCompatSideChannelService$NotificationSideChannelStub) androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.this$0 androidx.core.app.NotificationCompatSideChannelService  (LINE:103)\l0x0002: INVOKE  (r1 I:int) =  type: STATIC call: androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.getCallingUid():int A[MD:():int (s)]\l0x0006: INVOKE  \l  (r0 I:androidx.core.app.NotificationCompatSideChannelService)\l  (r1 I:int)\l  (r4 I:java.lang.String A[D('packageName' java.lang.String)])\l type: VIRTUAL call: androidx.core.app.NotificationCompatSideChannelService.checkPermission(int, java.lang.String):void A[MD:(int, java.lang.String):void (m)]\l0x0009: INVOKE  (r0 I:long) =  type: STATIC call: androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.clearCallingIdentity():long A[MD:():long (s)] (LINE:104)\l}"];
Node_9 [shape=record,label="{9\:\ 0x000d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:3:0x000d), top: B:9:0x000d \}\lCatch: all \-\> 0x0017\l|0x000d: IGET  (r2 I:androidx.core.app.NotificationCompatSideChannelService) = (r3 I:androidx.core.app.NotificationCompatSideChannelService$NotificationSideChannelStub) androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.this$0 androidx.core.app.NotificationCompatSideChannelService A[Catch: all \-\> 0x0017, TRY_ENTER] (LINE:106)\l0x000f: INVOKE  \l  (r2 I:androidx.core.app.NotificationCompatSideChannelService)\l  (r4 I:java.lang.String A[D('packageName' java.lang.String)])\l type: VIRTUAL call: androidx.core.app.NotificationCompatSideChannelService.cancelAll(java.lang.String):void A[Catch: all \-\> 0x0017, MD:(java.lang.String):void (m), TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: INVOKE  (r0 I:long A[D('idToken' long)]) type: STATIC call: androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.restoreCallingIdentity(long):void A[MD:(long):void (s)] (LINE:108)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0016|RETURN\l|0x0016: RETURN    (LINE:110)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|ExcHandler: all \-\> 0x0017\l|0x0017: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0017] (LINE:108)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: INVOKE  (r0 I:long A[D('idToken' long)]) type: STATIC call: androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.restoreCallingIdentity(long):void A[MD:(long):void (s)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: THROW  (r2 I:java.lang.Throwable)  (LINE:109)\l}"];
MethodNode[shape=record,label="{public void androidx.core.app.NotificationCompatSideChannelService.NotificationSideChannelStub.cancelAll((r3 'this' I:androidx.core.app.NotificationCompatSideChannelService$NotificationSideChannelStub A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[D('packageName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x001b \-\> B:1:?, CROSS_EDGE: B:9:0x000d \-\> B:6:0x0017\lDebug Info:\l  0x000d\-0x001b: r0 'idToken' J\l  \-1 \-0x001b: r4 'packageName' Ljava\/lang\/String;\lTryCatch #0 \{all \-\> 0x0017, blocks: (B:3:0x000d), top: B:9:0x000d \}\lMETHOD_OVERRIDE: [android.support.v4.app.INotificationSideChannel.cancelAll(java.lang.String):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_9;
Node_9 -> Node_3;
Node_9 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_10 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
}

