digraph "CFG forandroidx.core.app.NotificationManagerCompat.getNotificationChannelsCompat()Ljava\/util\/List;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 26) goto L12\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|java.util.List r0 = getNotificationChannels()\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|if (r0.isEmpty() != false) goto L12\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|java.util.ArrayList r1 = new java.util.ArrayList\<\>(r0.size())\ljava.util.Iterator r2 = r0.iterator()\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|LOOP_START\lLOOP:0: B:7:0x001d\-\>B:9:0x0023\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r2.hasNext() == false) goto L9\l}"];
Node_9 [shape=record,label="{9\:\ 0x0023|LOOP_END\lLOOP:0: B:7:0x001d\-\>B:9:0x0023\l|android.app.NotificationChannel r3 = r2.next()\lr1.add(new androidx.core.app.NotificationChannelCompat(r3))\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|RETURN\l|return r1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033}"];
Node_12 [shape=record,label="{12\:\ 0x0037|RETURN\l|return java.util.Collections.emptyList()\l}"];
MethodNode[shape=record,label="{public java.util.List\<androidx.core.app.NotificationChannelCompat\> androidx.core.app.NotificationManagerCompat.getNotificationChannelsCompat((r5v0 'this' androidx.core.app.NotificationManagerCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0023 \-\> B:7:0x001d, CROSS_EDGE: B:12:0x0037 \-\> B:1:?, CROSS_EDGE: B:3:0x0004 \-\> B:11:0x0033\lTYPE_VARS: EMPTY\lSIGNATURE: ()Ljava\/util\/List\<Landroidx\/core\/app\/NotificationChannelCompat;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_13;
Node_9 -> Node_7;
Node_13 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

