digraph "CFG forandroidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl.setLaunchBounds(Landroid\/graphics\/Rect;)Landroidx\/core\/app\/ActivityOptionsCompat;" {
subgraph cluster_Region_2037188322 {
label = "R(1:(2:(1:3)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_690635911 {
label = "R(2:(1:3)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1887250768 {
label = "IF [B:10:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 24) goto L3\l}"];
subgraph cluster_Region_1681534289 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0006|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_1970371874 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0012|RETURN\l|return new androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl(androidx.core.app.ActivityOptionsCompat.Api24Impl.setLaunchBounds(r2.mActivityOptions, r3))\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0000}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0007}"];
MethodNode[shape=record,label="{public androidx.core.app.ActivityOptionsCompat androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl.setLaunchBounds((r2v0 'this' androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl A[IMMUTABLE_TYPE, THIS]), (r3v0 'screenSpacePixelRect' android.graphics.Rect A[D('screenSpacePixelRect' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0012 \-\> B:8:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.core.app.ActivityOptionsCompat.setLaunchBounds(android.graphics.Rect):androidx.core.app.ActivityOptionsCompat]\l}"];
MethodNode -> Node_7;Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_12 -> Node_13;
}

