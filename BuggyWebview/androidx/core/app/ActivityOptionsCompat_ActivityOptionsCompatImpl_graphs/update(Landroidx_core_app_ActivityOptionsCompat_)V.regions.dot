digraph "CFG forandroidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl.update(Landroidx\/core\/app\/ActivityOptionsCompat;)V" {
subgraph cluster_Region_397057614 {
label = "R(1:(1:(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_584018255 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1546229849 {
label = "IF [B:10:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|if ((r4 instanceof androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl) != false) goto L3\l}"];
subgraph cluster_Region_291660087 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl r0 = (androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl) r4\lr3.mActivityOptions.update(r0.mActivityOptions)\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000e|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl.update((r3v0 'this' androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl A[IMMUTABLE_TYPE, THIS]), (r4v0 'otherOptions' androidx.core.app.ActivityOptionsCompat A[D('otherOptions' androidx.core.app.ActivityOptionsCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.app.ActivityOptionsCompat.update(androidx.core.app.ActivityOptionsCompat):void]\l}"];
MethodNode -> Node_7;Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

