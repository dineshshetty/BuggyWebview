digraph "CFG forandroidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl.getLaunchBounds()Landroid\/graphics\/Rect;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:295)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (24 ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:14:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|RETURN\l|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:296)\l0x0007: RETURN  (r0 I:android.graphics.Rect) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: IGET  (r0 I:android.app.ActivityOptions) = (r2 I:androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl) androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl.mActivityOptions android.app.ActivityOptions  (LINE:298)\l0x000a: INVOKE  (r0 I:android.graphics.Rect) = (r0 I:android.app.ActivityOptions) type: STATIC call: androidx.core.app.ActivityOptionsCompat.Api24Impl.getLaunchBounds(android.app.ActivityOptions):android.graphics.Rect A[MD:(android.app.ActivityOptions):android.graphics.Rect (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:android.graphics.Rect) \l}"];
MethodNode[shape=record,label="{public android.graphics.Rect androidx.core.app.ActivityOptionsCompat.ActivityOptionsCompatImpl.getLaunchBounds((r2 'this' I:androidx.core.app.ActivityOptionsCompat$ActivityOptionsCompatImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000e \-\> B:9:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.core.app.ActivityOptionsCompat.getLaunchBounds():android.graphics.Rect]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

