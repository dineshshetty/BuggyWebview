digraph "CFG forandroidx.core.app.FrameMetricsAggregator.FrameMetricsApi24Impl.stop()[Landroid\/util\/SparseIntArray;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = r6.mActivities.size()\lint r1 = r0 + (\-1)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_START\lLOOP:0: B:3:0x0008\-\>B:7:0x002c\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v3 'i' int) binds: [B:2:0x0000, B:7:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< 0) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|java.lang.ref.WeakReference r2 = r6.mActivities.get(r1)\landroid.app.Activity r3 = r2.get()\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|if (r2.get() == null) goto L8\l}"];
Node_6 [shape=record,label="{6\:\ 0x001e|r3.getWindow().removeOnFrameMetricsAvailableListener(r6.mListener)\lr6.mActivities.remove(r1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|LOOP_END\lLOOP:0: B:3:0x0008\-\>B:7:0x002c\l|int r1 = r1 + (\-1)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002c|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x002f|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f}"];
Node_9 [shape=record,label="{9\:\ 0x0031|RETURN\l|return r6.mMetrics\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public android.util.SparseIntArray[] androidx.core.app.FrameMetricsAggregator.FrameMetricsApi24Impl.stop((r6v0 'this' androidx.core.app.FrameMetricsAggregator$FrameMetricsApi24Impl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x002c \-\> B:3:0x0008, CROSS_EDGE: B:5:0x001c \-\> B:7:0x002c\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.app.FrameMetricsAggregator.FrameMetricsBaseImpl.stop():android.util.SparseIntArray[]]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_12;
Node_6 -> Node_11;
Node_11 -> Node_7;
Node_7 -> Node_3;
Node_12 -> Node_7;
Node_10 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

