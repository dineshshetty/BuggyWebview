digraph "CFG forandroidx.core.app.NotificationChannelGroupCompat.\<init\>(Landroid\/app\/NotificationChannelGroup;Ljava\/util\/List;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|this(r3.getId())\lr2.mName = r3.getName()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|if (android.os.Build.VERSION.SDK_INT \< 28) goto L4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0013|r2.mDescription = r3.getDescription()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0019}"];
Node_17 [shape=record,label="{17\:\ 0x001b|if (android.os.Build.VERSION.SDK_INT \< 28) goto L9\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|r2.mBlocked = r3.isBlocked()\lr2.mChannels = getChannelsCompat(r3.getChannels())\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x002e|r2.mChannels = getChannelsCompat(r4)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.core.app.NotificationChannelGroupCompat.\<init\>((r2v0 'this' androidx.core.app.NotificationChannelGroupCompat A[IMMUTABLE_TYPE, THIS]), (r3v0 'group' android.app.NotificationChannelGroup A[D('group' android.app.NotificationChannelGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'allChannels' java.util.List\<android.app.NotificationChannel\> A[D('allChannels' java.util.List\<android.app.NotificationChannel\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x002e \-\> B:20:0x0034, CROSS_EDGE: B:14:0x0011 \-\> B:16:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/app\/NotificationChannelGroup;Ljava\/util\/List\<Landroid\/app\/NotificationChannel;\>;)V\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
}

