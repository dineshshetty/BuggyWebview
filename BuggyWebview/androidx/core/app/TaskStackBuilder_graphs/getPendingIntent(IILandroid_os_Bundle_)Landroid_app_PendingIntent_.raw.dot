digraph "CFG forandroidx.core.app.TaskStackBuilder.getPendingIntent(IILandroid\/os\/Bundle;)Landroid\/app\/PendingIntent;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:java.util.ArrayList\<android.content.Intent\>) = (r4 I:androidx.core.app.TaskStackBuilder) androidx.core.app.TaskStackBuilder.mIntents java.util.ArrayList  (LINE:335)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0037 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: IGET  (r0 I:java.util.ArrayList\<android.content.Intent\>) = (r4 I:androidx.core.app.TaskStackBuilder) androidx.core.app.TaskStackBuilder.mIntents java.util.ArrayList  (LINE:340)\l0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_ARRAY  (r2 I:android.content.Intent[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: android.content.Intent[] \l0x000d: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.util.ArrayList), (r2 I:java.lang.Object[]) type: VIRTUAL call: java.util.ArrayList.toArray(java.lang.Object[]):java.lang.Object[] A[MD:\<T\>:(T[]):T[] (c)]\l0x0011: CHECK_CAST (r0 I:android.content.Intent[]) = (android.content.Intent[]) (r0 I:??[OBJECT, ARRAY]) \l0x0013: NEW_INSTANCE  (r2 I:android.content.Intent) =  android.content.Intent  (LINE:341)\l0x0015: AGET  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('intents' android.content.Intent[])]), (r1 I:??[int, short, byte, char]) \l0x0017: INVOKE  (r2 I:android.content.Intent), (r3 I:android.content.Intent) type: DIRECT call: android.content.Intent.\<init\>(android.content.Intent):void A[MD:(android.content.Intent):void (c)]\l0x001a: CONST  (r3 I:??[int, float, short, byte, char]) = (268484608(0x1000c000, float:2.539146E\-29) ??[int, float, short, byte, char]) \l0x001d: INVOKE  (r2 I:android.content.Intent) = (r2 I:android.content.Intent), (r3 I:int) type: VIRTUAL call: android.content.Intent.addFlags(int):android.content.Intent A[MD:(int):android.content.Intent (c)]\l0x0021: APUT  \l  (r0 I:??[OBJECT, ARRAY][] A[D('intents' android.content.Intent[])])\l  (r1 I:??[int, short, byte, char])\l  (r2 I:??[OBJECT, ARRAY])\l \l0x0023: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:344)\l0x0025: CONST  (r2 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0027|0x0027: IF  (r1 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:20:0x0030 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0029|0x0029: IGET  (r1 I:android.content.Context) = (r4 I:androidx.core.app.TaskStackBuilder) androidx.core.app.TaskStackBuilder.mSourceContext android.content.Context  (LINE:345)\l0x002b: INVOKE  (r1 I:android.app.PendingIntent) = \l  (r1 I:android.content.Context)\l  (r5 I:int A[D('requestCode' int)])\l  (r0 I:android.content.Intent[] A[D('intents' android.content.Intent[])])\l  (r6 I:int A[D('flags' int)])\l  (r7 I:android.os.Bundle A[D('options' android.os.Bundle)])\l type: STATIC call: androidx.core.app.TaskStackBuilder.Api16Impl.getActivities(android.content.Context, int, android.content.Intent[], int, android.os.Bundle):android.app.PendingIntent A[MD:(android.content.Context, int, android.content.Intent[], int, android.os.Bundle):android.app.PendingIntent (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|RETURN\l|0x002f: RETURN  (r1 I:android.app.PendingIntent) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|0x0030: IGET  (r1 I:android.content.Context) = (r4 I:androidx.core.app.TaskStackBuilder) androidx.core.app.TaskStackBuilder.mSourceContext android.content.Context  (LINE:347)\l0x0032: INVOKE  (r1 I:android.app.PendingIntent) = \l  (r1 I:android.content.Context)\l  (r5 I:int A[D('requestCode' int)])\l  (r0 I:android.content.Intent[] A[D('intents' android.content.Intent[])])\l  (r6 I:int A[D('flags' int)])\l type: STATIC call: android.app.PendingIntent.getActivities(android.content.Context, int, android.content.Intent[], int):android.app.PendingIntent A[MD:(android.content.Context, int, android.content.Intent[], int):android.app.PendingIntent (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:android.app.PendingIntent) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0037|0x0037: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('intents' android.content.Intent[])]) =  java.lang.IllegalStateException  (LINE:336)\l0x0039: CONST_STR  (r1 I:java.lang.String) =  \"No intents added to TaskStackBuilder; cannot getPendingIntent\" \l0x003b: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x003e|0x003e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public android.app.PendingIntent androidx.core.app.TaskStackBuilder.getPendingIntent((r4 'this' I:androidx.core.app.TaskStackBuilder A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('requestCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.os.Bundle A[D('options' android.os.Bundle), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0036 \-\> B:13:?, CROSS_EDGE: B:23:0x003e \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0037: r0 'intents' [Landroid\/content\/Intent;\l  \-1 \-0x003e: r5 'requestCode' I\l  \-1 \-0x003e: r6 'flags' I\l  \-1 \-0x003e: r7 'options' Landroid\/os\/Bundle;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

