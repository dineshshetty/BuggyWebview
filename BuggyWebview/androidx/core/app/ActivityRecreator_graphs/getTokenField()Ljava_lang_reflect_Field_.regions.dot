digraph "CFG forandroidx.core.app.ActivityRecreator.getTokenField()Ljava\/lang\/reflect\/Field;" {
subgraph cluster_Region_1647457766 {
label = "R(1:(2:2|3))";
node [shape=record,color=blue];
subgraph cluster_TryCatchRegion_720153379 {
label = "Try: R(2:2|3) catches: R(1:7)";
node [shape=record,color=blue];
subgraph cluster_Region_1597516544 {
label = "R(2:2|3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x000d, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lCatch: all \-\> 0x000d\l|java.lang.reflect.Field java.lang.reflect.Field r0 = android.app.Activity.class.getDeclaredField(\"mToken\")     \/\/ Catch: java.lang.Throwable \-\> Ld\lr0.setAccessible(true)     \/\/ Catch: java.lang.Throwable \-\> Ld\l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|RETURN\l|return r0\l}"];
}
subgraph cluster_Region_1285997014 {
label = "R(1:7) | ExcHandler: all \-\> 0x000d\l";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000e|RETURN\l|return null\l}"];
}
}
}
subgraph cluster_Region_1285997014 {
label = "R(1:7) | ExcHandler: all \-\> 0x000d\l";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000e|RETURN\l|return null\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000d|ExcHandler: all \-\> 0x000d\l}"];
MethodNode[shape=record,label="{private static java.lang.reflect.Field androidx.core.app.ActivityRecreator.getTokenField()  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:10:?, CROSS_EDGE: B:16:0x0000 \-\> B:13:0x000d\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x000d, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_11 -> Node_17;
Node_12 -> Node_10;
Node_14 -> Node_10;
Node_14 -> Node_10;
Node_9 -> Node_16;
Node_16 -> Node_11;
Node_16 -> Node_13;
Node_17 -> Node_13;
Node_13 -> Node_14;
}

