digraph "CFG forandroidx.core.app.ActivityRecreator.getActivityThreadClass()Ljava\/lang\/Class;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0007, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lCatch: all \-\> 0x0007\l|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"android.app.ActivityThread\" A[TRY_ENTER] (LINE:378)\l0x0002: INVOKE  (r0 I:java.lang.Class) = (r0 I:java.lang.String) type: STATIC call: java.lang.Class.forName(java.lang.String):java.lang.Class A[Catch: all \-\> 0x0007, MD:(java.lang.String):java.lang.Class\<?\> throws java.lang.ClassNotFoundException (c), TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:java.lang.Class\<?\>) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|ExcHandler: all \-\> 0x0007\l|0x0007: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0007] (LINE:379)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|RETURN\l|0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:380)\l0x0009: RETURN  (r1 I:java.lang.Class\<?\>) \l}"];
MethodNode[shape=record,label="{private static java.lang.Class\<?\> androidx.core.app.ActivityRecreator.getActivityThreadClass()  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0009 \-\> B:10:?, CROSS_EDGE: B:16:0x0000 \-\> B:13:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0009: r0 't' Ljava\/lang\/Throwable;\lTryCatch #0 \{all \-\> 0x0007, blocks: (B:11:0x0000), top: B:16:0x0000 \}\lSIGNATURE: ()Ljava\/lang\/Class\<*\>;\l}"];
MethodNode -> Node_9;Node_9 -> Node_16;
Node_16 -> Node_11;
Node_16 -> Node_13;
Node_11 -> Node_12;
Node_11 -> Node_17;
Node_12 -> Node_10;
Node_17 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_10;
}

