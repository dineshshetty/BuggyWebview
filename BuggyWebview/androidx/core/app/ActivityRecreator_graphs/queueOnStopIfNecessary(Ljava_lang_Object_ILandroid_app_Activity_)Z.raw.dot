digraph "CFG forandroidx.core.app.ActivityRecreator.queueOnStopIfNecessary(Ljava\/lang\/Object;ILandroid\/app\/Activity;)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:257)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0023, blocks: (B:20:0x0001, B:22:0x0009, B:25:0x0010), top: B:32:0x0001 \}\lCatch: all \-\> 0x0023\l|0x0001: SGET  (r1 I:java.lang.reflect.Field) =  androidx.core.app.ActivityRecreator.tokenField java.lang.reflect.Field A[Catch: all \-\> 0x0023, TRY_ENTER]\l0x0003: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.reflect.Field), (r7 I:java.lang.Object A[D('activity' android.app.Activity)]) type: VIRTUAL call: java.lang.reflect.Field.get(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0023, MD:(java.lang.Object):java.lang.Object throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('token' java.lang.Object)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentlyRecreatingToken' java.lang.Object)])  \-\> B:28:0x0022  (LINE:258)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|TryCatch #0 \{all \-\> 0x0023, blocks: (B:20:0x0001, B:22:0x0009, B:25:0x0010), top: B:32:0x0001 \}\lCatch: all \-\> 0x0023\l|0x0009: INVOKE  (r2 I:int) = (r7 I:java.lang.Object A[D('activity' android.app.Activity)]) type: VIRTUAL call: java.lang.Object.hashCode():int A[Catch: all \-\> 0x0023, MD:():int (c)] (LINE:259)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('currentlyRecreatingHashCode' int)])  \-\> B:25:0x0010 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: GOTO  \-\> 0x0022 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0023, blocks: (B:20:0x0001, B:22:0x0009, B:25:0x0010), top: B:32:0x0001 \}\lCatch: all \-\> 0x0023\l|0x0010: SGET  (r2 I:java.lang.reflect.Field) =  androidx.core.app.ActivityRecreator.mainThreadField java.lang.reflect.Field A[Catch: all \-\> 0x0023] (LINE:265)\l0x0012: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.reflect.Field), (r7 I:java.lang.Object A[D('activity' android.app.Activity)]) type: VIRTUAL call: java.lang.reflect.Field.get(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0023, MD:(java.lang.Object):java.lang.Object throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)]\l0x0016: SGET  (r3 I:android.os.Handler) =  androidx.core.app.ActivityRecreator.mainHandler android.os.Handler A[Catch: all \-\> 0x0023] (LINE:269)\l0x0018: NEW_INSTANCE  (r4 I:androidx.core.app.ActivityRecreator$3) =  androidx.core.app.ActivityRecreator$3 A[Catch: all \-\> 0x0023]\l0x001a: INVOKE  \l  (r4 I:androidx.core.app.ActivityRecreator$3)\l  (r2 I:java.lang.Object A[D('activityThread' java.lang.Object)])\l  (r1 I:java.lang.Object A[D('token' java.lang.Object)])\l type: DIRECT call: androidx.core.app.ActivityRecreator.3.\<init\>(java.lang.Object, java.lang.Object):void A[Catch: all \-\> 0x0023, MD:(java.lang.Object, java.lang.Object):void (m)]\l0x001d: INVOKE  (r3 I:android.os.Handler), (r4 I:java.lang.Runnable) type: VIRTUAL call: android.os.Handler.postAtFrontOfQueue(java.lang.Runnable):boolean A[Catch: all \-\> 0x0023, MD:(java.lang.Runnable):boolean (c), TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|RETURN\l|0x0020: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:294)\l0x0021: RETURN  (r0 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:boolean)  (LINE:263)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|ExcHandler: all \-\> 0x0023\l|0x0023: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0023] (LINE:295)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0024|0x0024: CONST_STR  (r2 I:java.lang.String) =  \"ActivityRecreator\"  (LINE:296)\l0x0026: CONST_STR  (r3 I:java.lang.String) =  \"Exception while fetching field values\" \l0x0028: INVOKE  (r2 I:java.lang.String), (r3 I:java.lang.String), (r1 I:java.lang.Throwable A[D('t' java.lang.Throwable)]) type: STATIC call: android.util.Log.e(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:boolean)  (LINE:297)\l}"];
MethodNode[shape=record,label="{protected static boolean androidx.core.app.ActivityRecreator.queueOnStopIfNecessary((r5 I:java.lang.Object A[D('currentlyRecreatingToken' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('currentlyRecreatingHashCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.app.Activity A[D('activity' android.app.Activity), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0021 \-\> B:18:?, CROSS_EDGE: B:31:0x002b \-\> B:18:?, CROSS_EDGE: B:21:0x0007 \-\> B:28:0x0022, CROSS_EDGE: B:32:0x0001 \-\> B:29:0x0023\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x0022: r2 'activityThread' Ljava\/lang\/Object;\l  0x0007\-0x0023: r1 'token' Ljava\/lang\/Object;\l  0x0024\-0x002b: r1 't' Ljava\/lang\/Throwable;\l  \-1 \-0x002b: r5 'currentlyRecreatingToken' Ljava\/lang\/Object;\l  \-1 \-0x002b: r6 'currentlyRecreatingHashCode' I\l  \-1 \-0x002b: r7 'activity' Landroid\/app\/Activity;\lTryCatch #0 \{all \-\> 0x0023, blocks: (B:20:0x0001, B:22:0x0009, B:25:0x0010), top: B:32:0x0001 \}\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_32;
Node_32 -> Node_20;
Node_32 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_25 -> Node_33;
Node_26 -> Node_18;
Node_33 -> Node_29;
Node_28 -> Node_18;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_18;
}

