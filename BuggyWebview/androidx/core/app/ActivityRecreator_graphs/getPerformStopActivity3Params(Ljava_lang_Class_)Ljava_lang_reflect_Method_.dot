digraph "CFG forandroidx.core.app.ActivityRecreator.getPerformStopActivity3Params(Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Method;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0001|if (r6 != null) goto L5\l}"];
Node_15 [shape=record,label="{15\:\ 0x0003|RETURN\l|return null\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0020, blocks: (B:16:0x0004), top: B:20:0x0004 \}\lCatch: all \-\> 0x0020\l|java.lang.reflect.Method r1 = r6.getDeclaredMethod(\"performStopActivity\", new java.lang.Class[]\{android.os.IBinder.class, java.lang.Boolean.TYPE, java.lang.String.class\})     \/\/ Catch: java.lang.Throwable \-\> L20\lr1.setAccessible(true)     \/\/ Catch: java.lang.Throwable \-\> L20\l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|RETURN\l|return r1\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0020|ExcHandler: all \-\> 0x0020\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static java.lang.reflect.Method androidx.core.app.ActivityRecreator.getPerformStopActivity3Params((r6v0 'activityThreadClass' java.lang.Class\<?\> A[D('activityThreadClass' java.lang.Class\<?\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x001f \-\> B:12:?, CROSS_EDGE: B:19:0x0021 \-\> B:12:?, CROSS_EDGE: B:20:0x0004 \-\> B:18:0x0020\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0020, blocks: (B:16:0x0004), top: B:20:0x0004 \}\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/Class\<*\>;)Ljava\/lang\/reflect\/Method;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_12;
Node_20 -> Node_16;
Node_20 -> Node_18;
Node_16 -> Node_17;
Node_16 -> Node_21;
Node_17 -> Node_12;
Node_21 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
}

