digraph "CFG forandroidx.core.app.Person.Api28Impl.fromAndroidPerson(Landroid\/app\/Person;)Landroidx\/core\/app\/Person;" {
subgraph cluster_Region_2089604725 {
label = "R(3:1|(1:3)(1:7)|5) | DECL_VAR: androidx.core.graphics.drawable.IconCompat null\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|androidx.core.app.Person$Builder androidx.core.app.Person.Builder r0 = new androidx.core.app.Person.Builder().setName(r2.getName())\l}"];
subgraph cluster_IfRegion_666226223 {
label = "IF [B:11:0x0011] THEN: R(1:3) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0011|if (r2.getIcon() != null) goto L3\l}"];
subgraph cluster_Region_1804965940 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0013|androidx.core.graphics.drawable.IconCompat r1 = androidx.core.graphics.drawable.IconCompat.createFromIcon(r2.getIcon())\l}"];
}
subgraph cluster_Region_649209665 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001c|r1 = null\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0045|RETURN\l|return r0.setIcon(r1).setUri(r2.getUri()).setKey(r2.getKey()).setBot(r2.isBot()).setImportant(r2.isImportant()).build()\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001d|PHI: r1 \l  PHI: (r1v3 androidx.core.graphics.drawable.IconCompat) = (r1v2 androidx.core.graphics.drawable.IconCompat), (r1v9 androidx.core.graphics.drawable.IconCompat) binds: [B:13:0x001c, B:12:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static androidx.core.app.Person androidx.core.app.Person.Api28Impl.fromAndroidPerson((r2v0 'person' android.app.Person A[D('person' android.app.Person), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001c \-\> B:14:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_14 -> Node_15;
}

