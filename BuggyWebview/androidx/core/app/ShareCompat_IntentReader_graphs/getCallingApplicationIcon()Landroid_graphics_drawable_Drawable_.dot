digraph "CFG forandroidx.core.app.ShareCompat.IntentReader.getCallingApplicationIcon()Landroid\/graphics\/drawable\/Drawable;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r5.mCallingPackage != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|RETURN\l|return null\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|android.content.pm.PackageManager r0 = r5.mContext.getPackageManager()\l}"];
Node_11 [shape=record,label="{11\:\ 0x000c|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NameNotFoundException \-\> 0x0013, blocks: (B:6:0x000c), top: B:11:0x000c \}\lCatch: NameNotFoundException \-\> 0x0013\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|RETURN\l|return r0.getApplicationIcon(r5.mCallingPackage)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|ExcHandler: NameNotFoundException \-\> 0x0013\l|android.content.pm.PackageManager$NameNotFoundException r2 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|android.util.Log.e(androidx.core.app.ShareCompat.IntentReader.TAG, \"Could not retrieve icon for calling application\", r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{public android.graphics.drawable.Drawable androidx.core.app.ShareCompat.IntentReader.getCallingApplicationIcon((r5v0 'this' androidx.core.app.ShareCompat$IntentReader A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0012 \-\> B:1:?, CROSS_EDGE: B:10:0x001b \-\> B:1:?, CROSS_EDGE: B:11:0x000c \-\> B:8:0x0013\lTryCatch #0 \{NameNotFoundException \-\> 0x0013, blocks: (B:6:0x000c), top: B:11:0x000c \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_11;
Node_11 -> Node_6;
Node_11 -> Node_8;
Node_6 -> Node_7;
Node_6 -> Node_12;
Node_7 -> Node_1;
Node_12 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

