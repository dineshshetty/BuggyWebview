digraph "CFG forandroidx.core.app.ShareCompat.IntentReader.getStream(I)Landroid\/net\/Uri;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r3.mStreams != null) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (isMultipleShare() == false) goto L6\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|r3.mStreams = r3.mIntent.getParcelableArrayListExtra(\"android.intent.extra.STREAM\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|java.util.ArrayList\<android.net.Uri\> r0 = r3.mStreams\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|if (r0 == null) goto L11\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018}"];
Node_10 [shape=record,label="{10\:\ 0x001e|RETURN\l|return r0.get(r4)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|if (r4 != 0) goto L14\l}"];
Node_12 [shape=record,label="{12\:\ 0x0021}"];
Node_13 [shape=record,label="{13\:\ 0x0029|RETURN\l|return (android.net.Uri) r3.mIntent.getParcelableExtra(\"android.intent.extra.STREAM\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Stream items available: \")\lr1.append(getStreamCount())\lr1.append(\" index requested: \")\lr1.append(r4)\l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|throw new java.lang.IndexOutOfBoundsException(r1.toString())\l}"];
MethodNode[shape=record,label="{public android.net.Uri androidx.core.app.ShareCompat.IntentReader.getStream((r3v0 'this' androidx.core.app.ShareCompat$IntentReader A[IMMUTABLE_TYPE, THIS]), (r4v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0029 \-\> B:1:?, CROSS_EDGE: B:15:0x004c \-\> B:1:?, CROSS_EDGE: B:5:0x000a \-\> B:7:0x0014, CROSS_EDGE: B:3:0x0004 \-\> B:7:0x0014\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_1;
}

