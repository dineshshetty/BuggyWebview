digraph "CFG forandroidx.core.app.JobIntentService.CompatWorkEnqueuer.serviceStartReceived()V" {
subgraph cluster_Region_2135601032 {
label = "R(1:0)";
node [shape=record,color=blue];
subgraph cluster_SynchronizedRegion_1673724389 {
label = "Synchronized:R(2:1|(1:4))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
subgraph cluster_Region_1459951269 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0002|TRY_ENTER\lTryCatch #0 \{, blocks: (B:4:0x0002, B:5:0x0004), top: B:10:0x0002 \}\lCatch: all \-\> 0x0006\l|r1.mLaunchingService = false     \/\/ Catch: java.lang.Throwable \-\> L6\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0001}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0002|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0004|DONT_GENERATE\lTryCatch #0 \{, blocks: (B:4:0x0002, B:5:0x0004), top: B:10:0x0002 \}\lCatch: all \-\> 0x0006\l|monitor\-exit()     \/\/ Catch: java.lang.Throwable \-\> L6\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0005}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0006|REMOVE\lExcHandler: all \-\> 0x0006\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0007|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x0006\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0008|REMOVE\l|throw r0\l}"];
MethodNode[shape=record,label="{public void androidx.core.app.JobIntentService.CompatWorkEnqueuer.serviceStartReceived((r1v0 'this' androidx.core.app.JobIntentService$CompatWorkEnqueuer A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0008 \-\> B:1:?, CROSS_EDGE: B:10:0x0002 \-\> B:7:0x0006\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.core.app.JobIntentService.WorkEnqueuer.serviceStartReceived():void]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_4 -> Node_5;
Node_0 -> Node_2;
Node_3 -> Node_10;
Node_10 -> Node_4;
Node_10 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_1;
Node_11 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

