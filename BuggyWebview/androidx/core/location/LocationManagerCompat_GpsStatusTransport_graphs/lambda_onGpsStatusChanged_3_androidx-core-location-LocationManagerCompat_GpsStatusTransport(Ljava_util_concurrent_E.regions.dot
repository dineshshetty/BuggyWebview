digraph "CFG forandroidx.core.location.LocationManagerCompat.GpsStatusTransport.lambda$onGpsStatusChanged$3$androidx\-core\-location\-LocationManagerCompat$GpsStatusTransport(Ljava\/util\/concurrent\/Executor;Landroidx\/core\/location\/GnssStatusCompat;)V" {
subgraph cluster_Region_128444426 {
label = "R(1:(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1990490206 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_206655785 {
label = "IF [B:10:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|if (r1.mExecutor != r2) goto L3\l}"];
subgraph cluster_Region_1416304618 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1815364309 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0005|r1.mCallback.onSatelliteStatusChanged(r3)\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0000}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000a}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void androidx.core.location.LocationManagerCompat.GpsStatusTransport.lambda$onGpsStatusChanged$3$androidx\-core\-location\-LocationManagerCompat$GpsStatusTransport((r1v0 'this' androidx.core.location.LocationManagerCompat$GpsStatusTransport A[IMMUTABLE_TYPE, THIS]), (r2v0 'executor' java.util.concurrent.Executor A[D('executor' java.util.concurrent.Executor), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'gnssStatus' androidx.core.location.GnssStatusCompat A[D('gnssStatus' androidx.core.location.GnssStatusCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000a \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_13 -> Node_8;
}

