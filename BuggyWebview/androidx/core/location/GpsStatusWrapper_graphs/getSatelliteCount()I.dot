digraph "CFG forandroidx.core.location.GpsStatusWrapper.getSatelliteCount()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|android.location.GpsStatus r0 = r4.mWrapped\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x0012, B:9:0x0018, B:10:0x0025, B:11:0x002b, B:12:0x002d), top: B:17:0x0003 \}\lCatch: all \-\> 0x002f\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|if (r4.mCachedSatelliteCount != (\-1)) goto L12\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|TryCatch #0 \{, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x0012, B:9:0x0018, B:10:0x0025, B:11:0x002b, B:12:0x002d), top: B:17:0x0003 \}\lCatch: all \-\> 0x002f\l|java.util.Iterator r1 = r4.mWrapped.getSatellites().iterator()     \/\/ Catch: java.lang.Throwable \-\> L2f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|LOOP_START\lTryCatch #0 \{, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x0012, B:9:0x0018, B:10:0x0025, B:11:0x002b, B:12:0x002d), top: B:17:0x0003 \}\lLOOP:0: B:7:0x0012\-\>B:9:0x0018\lCatch: all \-\> 0x002f\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|if (r1.hasNext() == false) goto L10\l}"];
Node_9 [shape=record,label="{9\:\ 0x0018|LOOP_END\lTryCatch #0 \{, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x0012, B:9:0x0018, B:10:0x0025, B:11:0x002b, B:12:0x002d), top: B:17:0x0003 \}\lLOOP:0: B:7:0x0012\-\>B:9:0x0018\lCatch: all \-\> 0x002f\l|android.location.GpsSatellite r2 = r1.next()     \/\/ Catch: java.lang.Throwable \-\> L2f\lr4.mCachedSatelliteCount = r4.mCachedSatelliteCount + 1     \/\/ Catch: java.lang.Throwable \-\> L2f\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|TryCatch #0 \{, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x0012, B:9:0x0018, B:10:0x0025, B:11:0x002b, B:12:0x002d), top: B:17:0x0003 \}\lCatch: all \-\> 0x002f\l|r4.mCachedSatelliteCount = r4.mCachedSatelliteCount + 1     \/\/ Catch: java.lang.Throwable \-\> L2f\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|TryCatch #0 \{, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x0012, B:9:0x0018, B:10:0x0025, B:11:0x002b, B:12:0x002d), top: B:17:0x0003 \}\lCatch: all \-\> 0x002f\l|int r1 = r4.mCachedSatelliteCount     \/\/ Catch: java.lang.Throwable \-\> L2f\l}"];
Node_12 [shape=record,label="{12\:\ 0x002d|TryCatch #0 \{, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x0012, B:9:0x0018, B:10:0x0025, B:11:0x002b, B:12:0x002d), top: B:17:0x0003 \}\lCatch: all \-\> 0x002f\l|monitor\-exit(r0)     \/\/ Catch: java.lang.Throwable \-\> L2f\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|RETURN\l|return r1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x002f|REMOVE\lExcHandler: all \-\> 0x002f\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x002f\l}"];
Node_16 [shape=record,label="{16\:\ 0x0031|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{public int androidx.core.location.GpsStatusWrapper.getSatelliteCount((r4v0 'this' androidx.core.location.GpsStatusWrapper A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0018 \-\> B:7:0x0012, CROSS_EDGE: B:16:0x0031 \-\> B:1:?, CROSS_EDGE: B:5:0x0006 \-\> B:11:0x002b, CROSS_EDGE: B:17:0x0003 \-\> B:14:0x002f\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.location.GnssStatusCompat.getSatelliteCount():int]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_17;
Node_17 -> Node_4;
Node_17 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_19;
Node_9 -> Node_7;
Node_19 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_18;
Node_13 -> Node_1;
Node_18 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

