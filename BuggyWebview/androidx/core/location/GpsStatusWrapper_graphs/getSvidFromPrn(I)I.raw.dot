digraph "CFG forandroidx.core.location.GpsStatusWrapper.getSvidFromPrn(I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r1 I:int A[D('prn' int)]) type: STATIC call: androidx.core.location.GpsStatusWrapper.getConstellationFromPrn(int):int A[MD:(int):int (m)] (LINE:205)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: SWITCH  (r0 I:??)\l case 2: goto B:7:0x000e\l case 3: goto B:6:0x000b\l case 4: goto B:11:?\l case 5: goto B:5:0x0008\l default: goto B:11:? \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: ARITH  (r1 I:int) = (r1 I:int A[D('prn' int)]) + (\-200 int)  (LINE:213)\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN  (r1 I:int A[D('prn' int)]) A[SYNTHETIC] (LINE:216)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: ARITH  (r1 I:int) = (r1 I:int A[D('prn' int)]) + (\-64 int)  (LINE:210)\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN  (r1 I:int A[D('prn' int)]) A[SYNTHETIC] (LINE:216)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: ARITH  (r1 I:int) = (r1 I:int A[D('prn' int)]) + (87 int)  (LINE:207)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: RETURN  (r1 I:int A[D('prn' int)])  (LINE:216)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN  (r1 I:int A[D('prn' int)]) A[SYNTHETIC] (LINE:216)\l}"];
MethodNode[shape=record,label="{private static int androidx.core.location.GpsStatusWrapper.getSvidFromPrn((r1 I:int A[D('prn' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x000b \-\> B:8:0x0011, CROSS_EDGE: B:7:0x000e \-\> B:8:0x0011, CROSS_EDGE: B:3:0x0004 \-\> B:8:0x0011\lDebug Info:\l  \-1 \-0x001d: r1 'prn' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_3 -> Node_11;
Node_5 -> Node_9;
Node_9 -> Node_1;
Node_6 -> Node_10;
Node_10 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_11 -> Node_1;
}

