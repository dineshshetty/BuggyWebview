digraph "CFG forandroidx.core.location.GpsStatusWrapper.getConstellationType(I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:84)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (24 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:6:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:85)\l0x0007: RETURN  (r0 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: INVOKE  (r0 I:android.location.GpsSatellite) = (r2 I:androidx.core.location.GpsStatusWrapper), (r3 I:int A[D('satelliteIndex' int)]) type: DIRECT call: androidx.core.location.GpsStatusWrapper.getSatellite(int):android.location.GpsSatellite A[MD:(int):android.location.GpsSatellite (m)] (LINE:87)\l0x000c: INVOKE  (r0 I:int) = (r0 I:android.location.GpsSatellite) type: VIRTUAL call: android.location.GpsSatellite.getPrn():int A[MD:():int (c)]\l0x0010: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: androidx.core.location.GpsStatusWrapper.getConstellationFromPrn(int):int A[MD:(int):int (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int androidx.core.location.GpsStatusWrapper.getConstellationType((r2 'this' I:androidx.core.location.GpsStatusWrapper A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('satelliteIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0014 \-\> B:1:?\lDebug Info:\l  \-1 \-0x0014: r3 'satelliteIndex' I\lMETHOD_OVERRIDE: [androidx.core.location.GnssStatusCompat.getConstellationType(int):int]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

