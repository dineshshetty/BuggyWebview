digraph "CFG forandroidx.core.location.LocationCompat.getElapsedRealtimeMillis(Landroid\/location\/Location;)J" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 17) goto L6\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006}"];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|return java.util.concurrent.TimeUnit.NANOSECONDS.toMillis(androidx.core.location.LocationCompat.Api17Impl.getElapsedRealtimeNanos(r7))\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|long r0 = java.lang.System.currentTimeMillis() \- r7.getTime()\llong r2 = android.os.SystemClock.elapsedRealtime()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0022|if ((r0 \> 0 ? 1 : (r0 == 0 ? 0 : \-1)) \>= 0) goto L9\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|RETURN\l|return r2\l}"];
Node_23 [shape=record,label="{23\:\ 0x0025}"];
Node_24 [shape=record,label="{24\:\ 0x0027|if ((r0 \> r2 ? 1 : (r0 == r2 ? 0 : \-1)) \<= 0) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x0029|RETURN\l|return 0\l}"];
Node_26 [shape=record,label="{26\:\ 0x002a}"];
Node_27 [shape=record,label="{27\:\ 0x002c|RETURN\l|return r2 \- r0\l}"];
MethodNode[shape=record,label="{public static long androidx.core.location.LocationCompat.getElapsedRealtimeMillis((r7v0 'location' android.location.Location A[D('location' android.location.Location), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0024 \-\> B:15:?, CROSS_EDGE: B:25:0x0029 \-\> B:15:?, CROSS_EDGE: B:27:0x002c \-\> B:15:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_15;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_15;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

