digraph "CFG forandroidx.core.location.LocationCompat.setMock(Landroid\/location\/Location;Z)V" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:349)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (18 ??[int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:47:0x0033 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0033|0x0033: INVOKE  (r0 I:android.os.Bundle) = (r4 I:android.location.Location A[D('location' android.location.Location)]) type: VIRTUAL call: android.location.Location.getExtras():android.os.Bundle A[MD:():android.os.Bundle (c)] (LINE:364)\l0x0037: CONST_STR  (r2 I:java.lang.String) =  \"mockLocation\"  (LINE:365)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0039|0x0039: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('extras' android.os.Bundle)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x004a \l}"];
Node_49 [shape=record,label="{49\:\ 0x003b|0x003b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mock' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:?  (LINE:366)\l}"];
Node_50 [shape=record,label="{50\:\ 0x003d|0x003d: NEW_INSTANCE  (r3 I:android.os.Bundle) =  android.os.Bundle  (LINE:367)\l0x003f: INVOKE  (r3 I:android.os.Bundle) type: DIRECT call: android.os.Bundle.\<init\>():void A[MD:():void (c)]\l0x0042: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('extras' android.os.Bundle)]) = (r3 I:??[OBJECT, ARRAY]) \l0x0043: INVOKE  (r0 I:android.os.Bundle A[D('extras' android.os.Bundle)]), (r2 I:java.lang.String), (r1 I:boolean) type: VIRTUAL call: android.os.Bundle.putBoolean(java.lang.String, boolean):void A[MD:(java.lang.String, boolean):void (c)] (LINE:368)\l0x0046: INVOKE  \l  (r4 I:android.location.Location A[D('location' android.location.Location)])\l  (r0 I:android.os.Bundle A[D('extras' android.os.Bundle)])\l type: VIRTUAL call: android.location.Location.setExtras(android.os.Bundle):void A[MD:(android.os.Bundle):void (c)] (LINE:369)\l}"];
Node_60 [shape=record,label="{60\:\ ?|SYNTHETIC\lRETURN\l|0x005d: RETURN   A[SYNTHETIC] (LINE:382)\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lRETURN\l|0x005d: RETURN   A[SYNTHETIC] (LINE:382)\l}"];
Node_51 [shape=record,label="{51\:\ 0x004a|0x004a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mock' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0050  (LINE:372)\l}"];
Node_52 [shape=record,label="{52\:\ 0x004c|0x004c: INVOKE  (r0 I:android.os.Bundle A[D('extras' android.os.Bundle)]), (r2 I:java.lang.String), (r1 I:boolean) type: VIRTUAL call: android.os.Bundle.putBoolean(java.lang.String, boolean):void A[MD:(java.lang.String, boolean):void (c)] (LINE:373)\l}"];
Node_61 [shape=record,label="{61\:\ ?|SYNTHETIC\lRETURN\l|0x005d: RETURN   A[SYNTHETIC] (LINE:382)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0050|0x0050: INVOKE  (r0 I:android.os.Bundle A[D('extras' android.os.Bundle)]), (r2 I:java.lang.String) type: VIRTUAL call: android.os.Bundle.remove(java.lang.String):void A[MD:(java.lang.String):void (c)] (LINE:375)\l0x0053: INVOKE  (r1 I:boolean) = (r0 I:android.os.Bundle A[D('extras' android.os.Bundle)]) type: VIRTUAL call: android.os.Bundle.isEmpty():boolean A[MD:():boolean (c)] (LINE:376)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0057|0x0057: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:? \l}"];
Node_55 [shape=record,label="{55\:\ 0x0059|0x0059: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:377)\l0x005a: INVOKE  (r4 I:android.location.Location A[D('location' android.location.Location)]), (r1 I:android.os.Bundle) type: VIRTUAL call: android.location.Location.setExtras(android.os.Bundle):void A[MD:(android.os.Bundle):void (c)]\l}"];
Node_56 [shape=record,label="{56\:\ 0x005d|RETURN\lORIG_RETURN\l|0x005d: RETURN    (LINE:382)\l}"];
Node_62 [shape=record,label="{62\:\ ?|SYNTHETIC\lRETURN\l|0x005d: RETURN   A[SYNTHETIC] (LINE:382)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0007|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_36 [shape=record,label="{36\:\ 0x0007|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029, InvocationTargetException \-\> 0x0018, blocks: (B:36:0x0007), top: B:57:0x0007 \}\lCatch: InvocationTargetException \-\> 0x0018, IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029\l|0x0007: INVOKE  (r0 I:java.lang.reflect.Method) =  type: STATIC call: androidx.core.location.LocationCompat.getSetIsFromMockProviderMethod():java.lang.reflect.Method A[Catch: InvocationTargetException \-\> 0x0018, IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029, MD:():java.lang.reflect.Method throws java.lang.NoSuchMethodException (m), TRY_ENTER] (LINE:351)\l0x000b: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: InvocationTargetException \-\> 0x0018, IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029]\l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  (r3 I:java.lang.Boolean) = (r5 I:boolean A[D('mock' boolean)]) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[Catch: InvocationTargetException \-\> 0x0018, IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029, MD:(boolean):java.lang.Boolean (c)]\l0x0012: APUT  (r1 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) A[Catch: InvocationTargetException \-\> 0x0018, IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029]\l0x0014: INVOKE  \l  (r0 I:java.lang.reflect.Method)\l  (r4 I:java.lang.Object A[D('location' android.location.Location)])\l  (r1 I:java.lang.Object[])\l type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: InvocationTargetException \-\> 0x0018, IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c), TRY_LEAVE]\l}"];
Node_58 [shape=record,label="{58\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_63 [shape=record,label="{63\:\ ?|SYNTHETIC\lRETURN\l|0x005d: RETURN   A[SYNTHETIC] (LINE:382)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001f|ExcHandler: IllegalAccessException \-\> 0x001f\l|0x001f: MOVE_EXCEPTION  (r0 I:java.lang.IllegalAccessException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \-\> 0x001f] (LINE:356)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|0x0020: NEW_INSTANCE  (r1 I:java.lang.IllegalAccessError) =  java.lang.IllegalAccessError  (LINE:357)\l0x0022: INVOKE  (r1 I:java.lang.IllegalAccessError) type: DIRECT call: java.lang.IllegalAccessError.\<init\>():void A[MD:():void (c)]\l0x0025: INVOKE  \l  (r1 I:java.lang.Error A[D('error' java.lang.Error)])\l  (r0 I:java.lang.Throwable A[D('e' java.lang.IllegalAccessException)])\l type: VIRTUAL call: java.lang.Error.initCause(java.lang.Throwable):java.lang.Throwable A[MD:(java.lang.Throwable):java.lang.Throwable (c)] (LINE:358)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0028|0x0028: THROW  (r1 I:java.lang.Throwable A[D('error' java.lang.Error)])  (LINE:359)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0029|ExcHandler: NoSuchMethodException \-\> 0x0029\l|0x0029: MOVE_EXCEPTION  (r0 I:java.lang.NoSuchMethodException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NoSuchMethodException \-\> 0x0029] (LINE:352)\l}"];
Node_45 [shape=record,label="{45\:\ 0x002a|0x002a: NEW_INSTANCE  (r1 I:java.lang.NoSuchMethodError) =  java.lang.NoSuchMethodError  (LINE:353)\l0x002c: INVOKE  (r1 I:java.lang.NoSuchMethodError) type: DIRECT call: java.lang.NoSuchMethodError.\<init\>():void A[MD:():void (c)]\l0x002f: INVOKE  \l  (r1 I:java.lang.Error A[D('error' java.lang.Error)])\l  (r0 I:java.lang.Throwable A[D('e' java.lang.NoSuchMethodException)])\l type: VIRTUAL call: java.lang.Error.initCause(java.lang.Throwable):java.lang.Throwable A[MD:(java.lang.Throwable):java.lang.Throwable (c)] (LINE:354)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0032|0x0032: THROW  (r1 I:java.lang.Throwable A[D('error' java.lang.Error)])  (LINE:355)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0018|ExcHandler: InvocationTargetException \-\> 0x0018\l|0x0018: MOVE_EXCEPTION  (r0 I:java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: InvocationTargetException \-\> 0x0018] (LINE:360)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0019|0x0019: NEW_INSTANCE  (r1 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:361)\l0x001b: INVOKE  (r1 I:java.lang.RuntimeException), (r0 I:java.lang.Throwable A[D('e' java.lang.reflect.InvocationTargetException)]) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.Throwable):void A[MD:(java.lang.Throwable):void (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x001e|0x001e: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static void androidx.core.location.LocationCompat.setMock((r4 I:android.location.Location A[D('location' android.location.Location), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('mock' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:49:0x003b \-\> B:56:0x005d, CROSS_EDGE: B:52:0x004c \-\> B:56:0x005d, CROSS_EDGE: B:55:0x0059 \-\> B:56:0x005d, CROSS_EDGE: B:54:0x0057 \-\> B:56:0x005d, CROSS_EDGE: B:36:0x0007 \-\> B:56:0x005d, CROSS_EDGE: B:43:0x0028 \-\> B:33:?, CROSS_EDGE: B:46:0x0032 \-\> B:33:?, CROSS_EDGE: B:40:0x001e \-\> B:33:?, CROSS_EDGE: B:57:0x0007 \-\> B:41:0x001f, CROSS_EDGE: B:57:0x0007 \-\> B:44:0x0029, CROSS_EDGE: B:57:0x0007 \-\> B:38:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x001f: r0 'e' Ljava\/lang\/reflect\/InvocationTargetException;\l  0x0020\-0x0029: r0 'e' Ljava\/lang\/IllegalAccessException;\l  0x0025\-0x0029: r1 'error' Ljava\/lang\/Error;\l  0x002a\-0x0033: r0 'e' Ljava\/lang\/NoSuchMethodException;\l  0x002f\-0x0033: r1 'error' Ljava\/lang\/Error;\l  0x0037\-0x005d: r0 'extras' Landroid\/os\/Bundle;\l  \-1 \-0x005d: r4 'location' Landroid\/location\/Location;\l  \-1 \-0x005d: r5 'mock' Z\lTryCatch #2 \{IllegalAccessException \-\> 0x001f, NoSuchMethodException \-\> 0x0029, InvocationTargetException \-\> 0x0018, blocks: (B:36:0x0007), top: B:57:0x0007 \}\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_47;
Node_35 -> Node_57[style=dashed];
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_51;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_59;
Node_50 -> Node_60;
Node_60 -> Node_33;
Node_59 -> Node_33;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_61;
Node_61 -> Node_33;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_62;
Node_55 -> Node_56;
Node_56 -> Node_33;
Node_62 -> Node_33;
Node_57 -> Node_36;
Node_57 -> Node_41;
Node_57 -> Node_44;
Node_57 -> Node_38;
Node_36 -> Node_58;
Node_36 -> Node_63;
Node_58 -> Node_41;
Node_58 -> Node_44;
Node_58 -> Node_38;
Node_63 -> Node_33;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_33;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_33;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_33;
}

