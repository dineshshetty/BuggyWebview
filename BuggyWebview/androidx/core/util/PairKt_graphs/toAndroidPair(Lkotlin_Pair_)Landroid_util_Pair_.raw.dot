digraph "CFG forandroidx.core.util.PairKt.toAndroidPair(Lkotlin\/Pair;)Landroid\/util\/Pair;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$toAndroidPair' kotlin.Pair)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: NEW_INSTANCE  (r1 I:android.util.Pair) =  android.util.Pair  (LINE:87)\l0x0008: INVOKE  (r2 I:java.lang.Object) = (r4 I:kotlin.Pair A[D('$this$toAndroidPair' kotlin.Pair)]) type: VIRTUAL call: kotlin.Pair.getFirst():java.lang.Object A[MD:():A (m)]\l0x000c: INVOKE  (r3 I:java.lang.Object) = (r4 I:kotlin.Pair A[D('$this$toAndroidPair' kotlin.Pair)]) type: VIRTUAL call: kotlin.Pair.getSecond():java.lang.Object A[MD:():B (m)]\l0x0010: INVOKE  (r1 I:android.util.Pair), (r2 I:java.lang.Object), (r3 I:java.lang.Object) type: DIRECT call: android.util.Pair.\<init\>(java.lang.Object, java.lang.Object):void A[MD:(F, S):void (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0013|RETURN\l|0x0013: RETURN  (r1 I:android.util.Pair\<F, S\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final android.util.Pair\<F, S\> androidx.core.util.PairKt.toAndroidPair((r4 I:kotlin.Pair\<? extends F, ? extends S\> A[D('$this$toAndroidPair' kotlin.Pair), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  0x0006\-0x0013: r0 '$i$f$toAndroidPair' I\l  \-1 \-0x0013: r4 '$this$toAndroidPair' Lkotlin\/Pair;\lTYPE_VARS: [S, F]\lSIGNATURE: \<F:Ljava\/lang\/Object;S:Ljava\/lang\/Object;\>(Lkotlin\/Pair\<+TF;+TS;\>;)Landroid\/util\/Pair\<TF;TS;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

