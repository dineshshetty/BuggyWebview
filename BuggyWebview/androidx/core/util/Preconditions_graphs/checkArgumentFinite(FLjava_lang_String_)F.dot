digraph "CFG forandroidx.core.util.Preconditions.checkArgumentFinite(FLjava\/lang\/String;)F" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0004|if (java.lang.Float.isNaN(r3) != false) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006}"];
Node_16 [shape=record,label="{16\:\ 0x000a|if (java.lang.Float.isInfinite(r3) != false) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|RETURN\l|return r3\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r4)\lr1.append(\" must not be infinite\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x0023|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r4)\lr1.append(\" must not be NaN\")\l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static float androidx.core.util.Preconditions.checkArgumentFinite((r3v0 'value' float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'valueName' java.lang.String A[D('valueName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0023 \-\> B:12:?, CROSS_EDGE: B:21:0x003a \-\> B:12:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

