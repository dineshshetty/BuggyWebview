digraph "CFG forandroidx.core.util.Preconditions.checkArgumentInRange(DDDLjava\/lang\/String;)D" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:326)\l0x0001: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r3 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0004: CMP_G  (r4 I:int) = (r6 I:double A[D('value' double)]), (r8 I:double A[D('lower' double)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: IF  (r4 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:20:0x002b \l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: CMP_L  (r4 I:int) = (r6 I:double A[D('value' double)]), (r10 I:double A[D('upper' double)])  (LINE:330)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: IF  (r4 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:18:0x000d \l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|RETURN\l|0x000c: RETURN  (r6 I:double A[D('value' double)])  (LINE:336)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:331)\l0x000f: SGET  (r5 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x0011: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0013: APUT  \l  (r3 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char])\l  (r12 I:??[OBJECT, ARRAY] A[D('valueName' java.lang.String)])\l \l0x0015: INVOKE  (r2 I:java.lang.Double) = (r8 I:double A[D('lower' double)]) type: STATIC call: java.lang.Double.valueOf(double):java.lang.Double A[MD:(double):java.lang.Double (c)] (LINE:333)\l0x0019: APUT  (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r1 I:java.lang.Double) = (r10 I:double A[D('upper' double)]) type: STATIC call: java.lang.Double.valueOf(double):java.lang.Double A[MD:(double):java.lang.Double (c)]\l0x001f: APUT  (r3 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x0021: CONST_STR  (r0 I:java.lang.String) =  \"%s is out of range of [%f, %f] (too high)\"  (LINE:332)\l0x0023: INVOKE  (r0 I:java.lang.String) = (r5 I:java.util.Locale), (r0 I:java.lang.String), (r3 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x0027: INVOKE  (r4 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|0x002a: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x002b|0x002b: NEW_INSTANCE  (r4 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:327)\l0x002d: SGET  (r5 I:java.util.Locale) =  java.util.Locale.US java.util.Locale \l0x002f: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0031: APUT  \l  (r3 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char])\l  (r12 I:??[OBJECT, ARRAY] A[D('valueName' java.lang.String)])\l \l0x0033: INVOKE  (r2 I:java.lang.Double) = (r8 I:double A[D('lower' double)]) type: STATIC call: java.lang.Double.valueOf(double):java.lang.Double A[MD:(double):java.lang.Double (c)] (LINE:329)\l0x0037: APUT  (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l0x0039: INVOKE  (r1 I:java.lang.Double) = (r10 I:double A[D('upper' double)]) type: STATIC call: java.lang.Double.valueOf(double):java.lang.Double A[MD:(double):java.lang.Double (c)]\l0x003d: APUT  (r3 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x003f: CONST_STR  (r0 I:java.lang.String) =  \"%s is out of range of [%f, %f] (too low)\"  (LINE:328)\l0x0041: INVOKE  (r0 I:java.lang.String) = (r5 I:java.util.Locale), (r0 I:java.lang.String), (r3 I:java.lang.Object[]) type: STATIC call: java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String A[MD:(java.util.Locale, java.lang.String, java.lang.Object[]):java.lang.String VARARG (c)]\l0x0045: INVOKE  (r4 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0048|0x0048: THROW  (r4 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static double androidx.core.util.Preconditions.checkArgumentInRange((r6 I:double A[D('value' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:double A[D('lower' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:double A[D('upper' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String A[D('valueName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x002a \-\> B:12:?, CROSS_EDGE: B:21:0x0048 \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0048: r6 'value' D\l  \-1 \-0x0048: r8 'lower' D\l  \-1 \-0x0048: r10 'upper' D\l  \-1 \-0x0048: r12 'valueName' Ljava\/lang\/String;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

