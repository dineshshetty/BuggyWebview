digraph "CFG forandroidx.core.util.Preconditions.checkArgumentInRange(DDDLjava\/lang\/String;)D" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0006|if ((r6 \> r8 ? 1 : (r6 == r8 ? 0 : \-1)) \< 0) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008}"];
Node_16 [shape=record,label="{16\:\ 0x000a|if ((r6 \> r10 ? 1 : (r6 == r10 ? 0 : \-1)) \> 0) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|RETURN\l|return r6\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d}"];
Node_19 [shape=record,label="{19\:\ 0x002a|throw new java.lang.IllegalArgumentException(java.lang.String.format(java.util.Locale.US, \"%s is out of range of [%f, %f] (too high)\", new java.lang.Object[]\{r12, java.lang.Double.valueOf(r8), java.lang.Double.valueOf(r10)\}))\l}"];
Node_20 [shape=record,label="{20\:\ 0x002b}"];
Node_21 [shape=record,label="{21\:\ 0x0048|throw new java.lang.IllegalArgumentException(java.lang.String.format(java.util.Locale.US, \"%s is out of range of [%f, %f] (too low)\", new java.lang.Object[]\{r12, java.lang.Double.valueOf(r8), java.lang.Double.valueOf(r10)\}))\l}"];
MethodNode[shape=record,label="{public static double androidx.core.util.Preconditions.checkArgumentInRange((r6v0 'value' double A[D('value' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'lower' double A[D('lower' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'upper' double A[D('upper' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'valueName' java.lang.String A[D('valueName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x002a \-\> B:12:?, CROSS_EDGE: B:21:0x0048 \-\> B:12:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

