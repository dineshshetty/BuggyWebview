digraph "CFG forandroidx.core.util.Preconditions.checkFlagsArgument(II)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000}"];
Node_10 [shape=record,label="{10\:\ 0x0002|if ((r3 & r4) != r3) goto L5\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|return r3\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Requested flags 0x\")\lr1.append(java.lang.Integer.toHexString(r3))\lr1.append(\", but only 0x\")\lr1.append(java.lang.Integer.toHexString(r4))\lr1.append(\" are allowed\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x0030|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static int androidx.core.util.Preconditions.checkFlagsArgument((r3v0 'requestedFlags' int A[D('requestedFlags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'allowedFlags' int A[D('allowedFlags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0030 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

