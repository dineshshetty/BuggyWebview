digraph "CFG forandroidx.core.util.LongSparseArrayKt.putAll(Landroid\/util\/LongSparseArray;Landroid\/util\/LongSparseArray;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$putAll' android.util.LongSparseArray)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('other' android.util.LongSparseArray)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('other' android.util.LongSparseArray)])  (LINE:98)\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:133)\l0x000d: INVOKE  (r3 I:int) = (r0 I:android.util.LongSparseArray A[D('$this$forEach$iv' android.util.LongSparseArray)]) type: VIRTUAL call: android.util.LongSparseArray.size():int A[MD:():int (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|LOOP_START\lLOOP:0: B:3:0x0011\-\>B:4:0x0013\l|0x0011: IF  (r2 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:7:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0013|LOOP_END\lLOOP:0: B:3:0x0011\-\>B:4:0x0013\l|0x0013: INVOKE  (r4 I:long) = \l  (r0 I:android.util.LongSparseArray A[D('$this$forEach$iv' android.util.LongSparseArray)])\l  (r2 I:int A[D('index$iv' int)])\l type: VIRTUAL call: android.util.LongSparseArray.keyAt(int):long A[MD:(int):long (c)] (LINE:134)\l0x0017: INVOKE  (r6 I:java.lang.Object) = \l  (r0 I:android.util.LongSparseArray A[D('$this$forEach$iv' android.util.LongSparseArray)])\l  (r2 I:int A[D('index$iv' int)])\l type: VIRTUAL call: android.util.LongSparseArray.valueAt(int):java.lang.Object A[MD:(int):E (c)]\l0x001b: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: INVOKE  \l  (r8 I:android.util.LongSparseArray A[D('$this$putAll' android.util.LongSparseArray)])\l  (r4 I:long A[D('p0' long)])\l  (r6 I:java.lang.Object A[D('p1' java.lang.Object)])\l type: VIRTUAL call: android.util.LongSparseArray.put(long, java.lang.Object):void A[MD:(long, E):void (c)] (LINE:98)\l0x001f: ARITH  (r2 I:int) = (r2 I:int A[D('index$iv' int)]) + (1 int)  (LINE:133)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|RETURN\l|0x0023: RETURN    (LINE:98)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void androidx.core.util.LongSparseArrayKt.putAll((r8 I:android.util.LongSparseArray\<T\> A[D('$this$putAll' android.util.LongSparseArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.util.LongSparseArray\<T\> A[D('other' android.util.LongSparseArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x0013 \-\> B:3:0x0011\lDebug Info:\l  0x0017\-0x001f: r4 'p0' J\l  0x001b\-0x001f: r6 'p1' Ljava\/lang\/Object;\l  0x001c\-0x001f: r7 '$i$a$\-forEach\-LongSparseArrayKt$putAll$1' I\l  0x000d\-0x0022: r2 'index$iv' I\l  0x000b\-0x0023: r0 '$this$forEach$iv' Landroid\/util\/LongSparseArray;\l  0x000c\-0x0023: r1 '$i$f$forEach' I\l  \-1 \-0x0023: r8 '$this$putAll' Landroid\/util\/LongSparseArray;\l  \-1 \-0x0023: r9 'other' Landroid\/util\/LongSparseArray;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Landroid\/util\/LongSparseArray\<TT;\>;Landroid\/util\/LongSparseArray\<TT;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_3;
Node_7 -> Node_6;
Node_6 -> Node_1;
}

