digraph "CFG forandroidx.core.util.TimeUtils.accumField(IIZI)I" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (99 ??[int, float, short, byte, char])  (LINE:44)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0002|0x0002: IF  (r1 I:??[int, byte, short, char] A[D('amt' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:48:0x0021 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0004|0x0004: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('always' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x000a \l}"];
Node_30 [shape=record,label="{30\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0007|0x0007: IF  (r4 I:??[int, byte, short, char] A[D('zeropad' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:33:0x000a \l}"];
Node_33 [shape=record,label="{33\:\ 0x000a|0x000a: CONST  (r0 I:??[int, float, short, byte, char]) = (9 ??[int, float, short, byte, char])  (LINE:47)\l}"];
Node_34 [shape=record,label="{34\:\ 0x000c|0x000c: IF  (r1 I:??[int, byte, short, char] A[D('amt' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:46:0x001e \l}"];
Node_35 [shape=record,label="{35\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('always' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0014 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|0x0011: IF  (r4 I:??[int, byte, short, char] A[D('zeropad' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:39:0x0014 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0014|0x0014: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('always' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x001b  (LINE:50)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0016|0x0016: IF  (r1 I:??[int, byte, short, char] A[D('amt' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:42:0x0019 \l}"];
Node_42 [shape=record,label="{42\:\ 0x0019|RETURN\l|0x0019: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:53)\l0x001a: RETURN  (r0 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x001b|0x001b: ARITH  (r0 I:int) = (r2 I:int A[D('suffix' int)]) + (1 int)  (LINE:51)\l}"];
Node_45 [shape=record,label="{45\:\ 0x001d|RETURN\l|0x001d: RETURN  (r0 I:int) \l}"];
Node_46 [shape=record,label="{46\:\ 0x001e|0x001e: ARITH  (r0 I:int) = (r2 I:int A[D('suffix' int)]) + (2 int)  (LINE:48)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0020|RETURN\l|0x0020: RETURN  (r0 I:int) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0021|0x0021: ARITH  (r0 I:int) = (r2 I:int A[D('suffix' int)]) + (3 int)  (LINE:45)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0023|RETURN\l|0x0023: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private static int androidx.core.util.TimeUtils.accumField((r1 I:int A[D('amt' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('suffix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[D('always' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('zeropad' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:45:0x001d \-\> B:26:?, CROSS_EDGE: B:39:0x0014 \-\> B:44:0x001b, CROSS_EDGE: B:47:0x0020 \-\> B:26:?, CROSS_EDGE: B:35:0x000e \-\> B:39:0x0014, CROSS_EDGE: B:34:0x000c \-\> B:46:0x001e, CROSS_EDGE: B:49:0x0023 \-\> B:26:?, CROSS_EDGE: B:29:0x0004 \-\> B:33:0x000a, CROSS_EDGE: B:28:0x0002 \-\> B:48:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0023: r1 'amt' I\l  \-1 \-0x0023: r2 'suffix' I\l  \-1 \-0x0023: r3 'always' Z\l  \-1 \-0x0023: r4 'zeropad' I\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_48;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_48[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_46;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_39;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_46[style=dashed];
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_44;
Node_40 -> Node_42;
Node_40 -> Node_44[style=dashed];
Node_42 -> Node_26;
Node_44 -> Node_45;
Node_45 -> Node_26;
Node_46 -> Node_47;
Node_47 -> Node_26;
Node_48 -> Node_49;
Node_49 -> Node_26;
}

