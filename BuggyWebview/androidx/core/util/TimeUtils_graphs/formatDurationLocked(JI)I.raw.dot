digraph "CFG forandroidx.core.util.TimeUtils.formatDurationLocked(JI)I" {
Node_84 [shape=record,label="{84\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_86 [shape=record,label="{86\:\ 0x0000|0x0000: MOVE  (r0 I:??[long, double]) = (r27 I:??[long, double] A[D('duration' long)])  (LINE:81)\l0x0002: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r29 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fieldLen' int)]) \l0x0004: SGET  (r3 I:char[]) =  androidx.core.util.TimeUtils.sFormatStr char[] \l0x0006: ARRAY_LENGTH  (r3 I:int) = (r3 I:??[]) \l}"];
Node_87 [shape=record,label="{87\:\ 0x0007|0x0007: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:89:0x000d \l}"];
Node_88 [shape=record,label="{88\:\ 0x0009|0x0009: NEW_ARRAY  (r3 I:char[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: char[]  (LINE:82)\l0x000b: SPUT  (r3 I:char[]) androidx.core.util.TimeUtils.sFormatStr char[] \l}"];
Node_89 [shape=record,label="{89\:\ 0x000d|0x000d: SGET  (r3 I:char[]) =  androidx.core.util.TimeUtils.sFormatStr char[]  (LINE:85)\l0x000f: CONST  (r4 I:??[int, float, short, byte, char]) = (32 ??[int, float, short, byte, char])  (LINE:87)\l0x0011: CONST  (r5 I:??[long, double]) = (0 ??[long, double]) \l0x0013: CMP_L  (r7 I:int) = (r0 I:long), (r5 I:long) \l}"];
Node_90 [shape=record,label="{90\:\ 0x0015|0x0015: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x0026 \l}"];
Node_91 [shape=record,label="{91\:\ 0x0017|0x0017: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:88)\l0x0018: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int)  (LINE:89)\l}"];
Node_92 [shape=record,label="{92\:\ 0x001a|LOOP_START\lLOOP:0: B:92:0x001a\-\>B:93:0x001c\l|0x001a: IF  (r5 I:??[int, byte, short, char] A[D('pos' int)]) \>= (r2 I:??[int, byte, short, char] A[D('fieldLen' int)])  \-\> B:166:0x001f  (LINE:90)\l}"];
Node_93 [shape=record,label="{93\:\ 0x001c|LOOP_END\lLOOP:0: B:92:0x001a\-\>B:93:0x001c\l|0x001c: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r5 I:??[int, short, byte, char] A[D('pos' int)])\l  (r4 I:char A[IMMUTABLE_TYPE])\l  (LINE:91)\l}"];
Node_166 [shape=record,label="{166\:\ 0x001f|SYNTHETIC\l}"];
Node_94 [shape=record,label="{94\:\ 0x001f|0x001f: CONST  (r4 I:??[int, float, short, byte, char]) = (48 ??[int, float, short, byte, char])  (LINE:93)\l0x0021: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r5 I:??[int, short, byte, char] A[D('pos' int)])\l  (r4 I:char A[IMMUTABLE_TYPE])\l \l0x0023: ARITH  (r4 I:int) = (r5 I:int A[D('pos' int)]) + (1 int)  (LINE:94)\l}"];
Node_95 [shape=record,label="{95\:\ 0x0025|RETURN\l|0x0025: RETURN  (r4 I:int) \l}"];
Node_85 [shape=record,label="{85\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_96 [shape=record,label="{96\:\ 0x0026|0x0026: CMP_L  (r7 I:int) = (r0 I:long), (r5 I:long A[D('pos' int)])  (LINE:98)\l}"];
Node_97 [shape=record,label="{97\:\ 0x0028|0x0028: IF  (r7 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:99:0x002e \l}"];
Node_98 [shape=record,label="{98\:\ 0x002a|0x002a: CONST  (r5 I:??[int, float, short, byte, char]) = (43 ??[int, float, short, byte, char])  (LINE:99)\l0x002c: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_100 [shape=record,label="{100\:\ 0x0032|0x0032: CONST  (r5 I:??[long, double] A[D('prefix' char)]) = (1000(0x3e8, double:4.94E\-321) ??[long, double])  (LINE:105)\l0x0034: ARITH  (r7 I:long) = (r0 I:long A[D('duration' long)]) % (r5 I:long) \l0x0036: CAST (r11 I:int) = (int) (r7 I:long) \l0x0037: ARITH  (r5 I:long) = (r0 I:long A[D('duration' long)]) \/ (r5 I:long)  (LINE:106)\l0x0039: CAST (r5 I:double) = (double) (r5 I:long) \l0x003a: INVOKE  (r5 I:double) = (r5 I:double) type: STATIC call: java.lang.Math.floor(double):double A[MD:(double):double (c)]\l0x003e: CAST (r5 I:int) = (int) (r5 I:double) \l0x003f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:107)\l0x0040: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0041: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0042: CONST  (r9 I:??[int, float, short, byte, char]) = (86400(0x15180, float:1.21072E\-40) ??[int, float, short, byte, char])  (LINE:109)\l}"];
Node_101 [shape=record,label="{101\:\ 0x0045|0x0045: IF  (r5 I:??[int, byte, short, char] A[D('seconds' int)]) \<= (r9 I:??[int, byte, short, char])  \-\> B:103:0x004e \l}"];
Node_102 [shape=record,label="{102\:\ 0x0047|0x0047: ARITH  (r6 I:int A[D('days' int)]) = (r5 I:int A[D('seconds' int)]) \/ (r9 I:int)  (LINE:110)\l0x0049: ARITH  (r9 I:int) = (r9 I:int) * (r6 I:int A[D('days' int)])  (LINE:111)\l0x004b: ARITH  (r5 I:int) = (r5 I:int A[D('seconds' int)]) \- (r9 I:int) \l0x004c: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('days' int)]) \l}"];
Node_104 [shape=record,label="{104\:\ 0x004f|0x004f: CONST  (r6 I:??[int, float, short, byte, char] A[D('days' int)]) = (3600(0xe10, float:5.045E\-42) ??[int, float, short, byte, char])  (LINE:113)\l}"];
Node_105 [shape=record,label="{105\:\ 0x0051|0x0051: IF  (r5 I:??[int, byte, short, char] A[D('seconds' int)]) \<= (r6 I:??[int, byte, short, char])  \-\> B:107:0x005a \l}"];
Node_106 [shape=record,label="{106\:\ 0x0053|0x0053: ARITH  (r7 I:int A[D('hours' int)]) = (r5 I:int A[D('seconds' int)]) \/ (3600 int)  (LINE:114)\l0x0055: ARITH  (r6 I:int) = (r7 I:int A[D('hours' int)]) * (3600 int)  (LINE:115)\l0x0057: ARITH  (r5 I:int) = (r5 I:int A[D('seconds' int)]) \- (r6 I:int) \l0x0058: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hours' int)]) \l}"];
Node_108 [shape=record,label="{108\:\ 0x005b|0x005b: CONST  (r6 I:??[int, float, short, byte, char]) = (60 ??[int, float, short, byte, char])  (LINE:117)\l}"];
Node_109 [shape=record,label="{109\:\ 0x005d|0x005d: IF  (r5 I:??[int, byte, short, char] A[D('seconds' int)]) \<= (r6 I:??[int, byte, short, char])  \-\> B:111:0x0067 \l}"];
Node_110 [shape=record,label="{110\:\ 0x005f|0x005f: ARITH  (r8 I:int A[D('minutes' int)]) = (r5 I:int A[D('seconds' int)]) \/ (60 int)  (LINE:118)\l0x0061: ARITH  (r6 I:int) = (r8 I:int A[D('minutes' int)]) * (60 int)  (LINE:119)\l0x0063: ARITH  (r5 I:int) = (r5 I:int A[D('seconds' int)]) \- (r6 I:int) \l0x0064: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('seconds' int)]) \l0x0065: MOVE  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minutes' int)]) \l}"];
Node_112 [shape=record,label="{112\:\ 0x0069|0x0069: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('seconds' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:122)\l0x006a: CONST  (r16 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:124)\l0x006c: CONST  (r9 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x006d: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x006e: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_113 [shape=record,label="{113\:\ 0x006f|0x006f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:132:0x00a5 \l}"];
Node_114 [shape=record,label="{114\:\ 0x0071|0x0071: INVOKE  (r6 I:int) = (r12 I:int A[D('days' int)]), (r7 I:int), (r8 I:boolean), (r8 I:int) type: STATIC call: androidx.core.util.TimeUtils.accumField(int, int, boolean, int):int A[MD:(int, int, boolean, int):int (m)] (LINE:125)\l}"];
Node_115 [shape=record,label="{115\:\ 0x0075|0x0075: IF  (r6 I:??[int, byte, short, char] A[D('myLen' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:117:0x0078  (LINE:126)\l}"];
Node_116 [shape=record,label="{116\:\ 0x0077|0x0077: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_117 [shape=record,label="{117\:\ 0x0078|0x0078: INVOKE  (r8 I:int) = (r13 I:int A[D('hours' int)]), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.accumField(int, int, boolean, int):int A[MD:(int, int, boolean, int):int (m)]\l0x007c: ARITH  (r6 I:int) = (r6 I:int A[D('myLen' int)]) + (r8 I:int) \l}"];
Node_118 [shape=record,label="{118\:\ 0x007d|0x007d: IF  (r6 I:??[int, byte, short, char] A[D('myLen' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:120:0x0081  (LINE:127)\l}"];
Node_119 [shape=record,label="{119\:\ 0x007f|0x007f: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_121 [shape=record,label="{121\:\ 0x0082|0x0082: INVOKE  (r8 I:int) = (r15 I:int A[D('minutes' int)]), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.accumField(int, int, boolean, int):int A[MD:(int, int, boolean, int):int (m)]\l0x0086: ARITH  (r6 I:int) = (r6 I:int A[D('myLen' int)]) + (r8 I:int) \l}"];
Node_122 [shape=record,label="{122\:\ 0x0087|0x0087: IF  (r6 I:??[int, byte, short, char] A[D('myLen' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:124:0x008b  (LINE:128)\l}"];
Node_123 [shape=record,label="{123\:\ 0x0089|0x0089: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_125 [shape=record,label="{125\:\ 0x008c|0x008c: INVOKE  (r8 I:int) = (r14 I:int A[D('seconds' int)]), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.accumField(int, int, boolean, int):int A[MD:(int, int, boolean, int):int (m)]\l0x0090: ARITH  (r6 I:int) = (r6 I:int A[D('myLen' int)]) + (r8 I:int) \l}"];
Node_126 [shape=record,label="{126\:\ 0x0091|0x0091: IF  (r6 I:??[int, byte, short, char] A[D('myLen' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:128:0x0095  (LINE:129)\l}"];
Node_127 [shape=record,label="{127\:\ 0x0093|0x0093: CONST  (r8 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_129 [shape=record,label="{129\:\ 0x0096|0x0096: INVOKE  (r8 I:int) = (r11 I:int A[D('millis' int)]), (r9 I:int), (r7 I:boolean), (r8 I:int) type: STATIC call: androidx.core.util.TimeUtils.accumField(int, int, boolean, int):int A[MD:(int, int, boolean, int):int (m)]\l0x009a: ARITH  (r8 I:int) = (r8 I:int) + (r7 I:int) \l0x009b: ARITH  (r6 I:int) = (r6 I:int A[D('myLen' int)]) + (r8 I:int) \l}"];
Node_130 [shape=record,label="{130\:\ 0x009c|LOOP_START\lLOOP:1: B:130:0x009c\-\>B:131:0x009e\l|0x009c: IF  (r6 I:??[int, byte, short, char] A[D('myLen' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:167:0x00a5  (LINE:130)\l}"];
Node_131 [shape=record,label="{131\:\ 0x009e|LOOP_END\lLOOP:1: B:130:0x009c\-\>B:131:0x009e\l|0x009e: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r5 I:??[int, short, byte, char] A[D('pos' int)])\l  (r4 I:char A[IMMUTABLE_TYPE])\l  (LINE:131)\l0x00a0: ARITH  (r5 I:int) = (r5 I:int A[D('pos' int)]) + (1 int)  (LINE:132)\l0x00a2: ARITH  (r6 I:int) = (r6 I:int A[D('myLen' int)]) + (1 int)  (LINE:133)\l}"];
Node_167 [shape=record,label="{167\:\ 0x00a5|SYNTHETIC\l}"];
Node_128 [shape=record,label="{128\:\ 0x0095|0x0095: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_124 [shape=record,label="{124\:\ 0x008b|0x008b: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_120 [shape=record,label="{120\:\ 0x0081|0x0081: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_132 [shape=record,label="{132\:\ 0x00a5|0x00a5: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r5 I:??[int, short, byte, char] A[D('pos' int)])\l  (r10 I:char A[D('prefix' char), IMMUTABLE_TYPE])\l  (LINE:137)\l0x00a7: ARITH  (r17 I:int) = (r5 I:int A[D('pos' int)]) + (1 int)  (LINE:138)\l0x00a9: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)])  (LINE:140)\l}"];
Node_133 [shape=record,label="{133\:\ 0x00ab|0x00ab: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:135:0x00af  (LINE:141)\l}"];
Node_134 [shape=record,label="{134\:\ 0x00ad|0x00ad: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_136 [shape=record,label="{136\:\ 0x00b0|0x00b0: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b2: CONST  (r6 I:??[int, float, short, byte, char]) = (100 ??[int, float, short, byte, char])  (LINE:142)\l0x00b4: CONST  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b6: CONST  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00b8: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('formatStr' char[])]) \l0x00b9: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('days' int)]) \l0x00ba: CONST  (r21 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x00bc: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x00be: MOVE  (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l0x00c0: CONST  (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00c2: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00c4: CONST  (r19 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x00c6: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00c8: INVOKE  (r9 I:int) = (r4 I:char[]), (r5 I:int), (r6 I:char), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.printField(char[], int, char, int, boolean, int):int A[MD:(char[], int, char, int, boolean, int):int (m)]\l0x00cc: CONST  (r6 I:??[int, float, short, byte, char]) = (104(0x68, float:1.46E\-43) ??[int, float, short, byte, char])  (LINE:143)\l0x00ce: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
Node_137 [shape=record,label="{137\:\ 0x00d0|0x00d0: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pos' int)]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)])  \-\> B:139:0x00d5 \l}"];
Node_138 [shape=record,label="{138\:\ 0x00d2|0x00d2: CONST  (r17 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_140 [shape=record,label="{140\:\ 0x00d7|0x00d7: IF  (r18 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('zeropad' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:142:0x00dc \l}"];
Node_141 [shape=record,label="{141\:\ 0x00d9|0x00d9: CONST  (r20 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_143 [shape=record,label="{143\:\ 0x00de|0x00de: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('formatStr' char[])]) \l0x00df: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hours' int)]) \l0x00e0: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x00e1: MOVE  (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l0x00e3: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00e5: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x00e7: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00e9: INVOKE  (r9 I:int) = (r4 I:char[]), (r5 I:int), (r6 I:char), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.printField(char[], int, char, int, boolean, int):int A[MD:(char[], int, char, int, boolean, int):int (m)]\l0x00ed: CONST  (r6 I:??[int, float, short, byte, char]) = (109(0x6d, float:1.53E\-43) ??[int, float, short, byte, char])  (LINE:144)\l0x00ef: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
Node_144 [shape=record,label="{144\:\ 0x00f1|0x00f1: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pos' int)]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)])  \-\> B:146:0x00f6 \l}"];
Node_145 [shape=record,label="{145\:\ 0x00f3|0x00f3: CONST  (r17 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_147 [shape=record,label="{147\:\ 0x00f8|0x00f8: IF  (r18 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('zeropad' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:149:0x00fd \l}"];
Node_148 [shape=record,label="{148\:\ 0x00fa|0x00fa: CONST  (r20 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_150 [shape=record,label="{150\:\ 0x00ff|0x00ff: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('formatStr' char[])]) \l0x0100: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minutes' int)]) \l0x0101: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x0102: MOVE  (r25 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l0x0104: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0106: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x0108: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x010a: INVOKE  (r9 I:int) = (r4 I:char[]), (r5 I:int), (r6 I:char), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.printField(char[], int, char, int, boolean, int):int A[MD:(char[], int, char, int, boolean, int):int (m)]\l0x010e: CONST  (r6 I:??[int, float, short, byte, char]) = (115(0x73, float:1.61E\-43) ??[int, float, short, byte, char])  (LINE:145)\l0x0110: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r25 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
Node_151 [shape=record,label="{151\:\ 0x0112|0x0112: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pos' int)]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)])  \-\> B:153:0x0115 \l}"];
Node_153 [shape=record,label="{153\:\ 0x0115|0x0115: CONST  (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_154 [shape=record,label="{154\:\ 0x0117|0x0117: IF  (r18 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('zeropad' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:156:0x011a \l}"];
Node_156 [shape=record,label="{156\:\ 0x011a|0x011a: CONST  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_157 [shape=record,label="{157\:\ 0x011c|0x011c: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('formatStr' char[])]) \l0x011d: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('seconds' int)]) \l0x011e: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x011f: MOVE  (r26 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l0x0121: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0123: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x0125: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0127: INVOKE  (r9 I:int) = (r4 I:char[]), (r5 I:int), (r6 I:char), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.printField(char[], int, char, int, boolean, int):int A[MD:(char[], int, char, int, boolean, int):int (m)]\l0x012b: CONST  (r6 I:??[int, float, short, byte, char]) = (109(0x6d, float:1.53E\-43) ??[int, float, short, byte, char])  (LINE:146)\l0x012d: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_158 [shape=record,label="{158\:\ 0x012e|0x012e: IF  (r18 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('zeropad' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:162:0x0135 \l}"];
Node_159 [shape=record,label="{159\:\ 0x0130|0x0130: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r26 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
Node_160 [shape=record,label="{160\:\ 0x0132|0x0132: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pos' int)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' int)])  \-\> B:163:0x0137 \l}"];
Node_163 [shape=record,label="{163\:\ 0x0137|0x0137: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_164 [shape=record,label="{164\:\ 0x0139|0x0139: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('formatStr' char[])]) \l0x013a: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('millis' int)]) \l0x013b: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l0x013d: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x013e: MOVE  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) \l0x0140: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)]) = (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0142: INVOKE  (r4 I:int) = (r4 I:char[]), (r5 I:int), (r6 I:char), (r7 I:int), (r8 I:boolean), (r9 I:int) type: STATIC call: androidx.core.util.TimeUtils.printField(char[], int, char, int, boolean, int):int A[MD:(char[], int, char, int, boolean, int):int (m)]\l0x0146: CONST  (r5 I:??[int, float, short, byte, char]) = (115(0x73, float:1.61E\-43) ??[int, float, short, byte, char])  (LINE:147)\l0x0148: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r4 I:??[int, short, byte, char] A[D('pos' int)])\l  (r5 I:char A[IMMUTABLE_TYPE])\l \l0x014a: ARITH  (r5 I:int) = (r4 I:int A[D('pos' int)]) + (1 int)  (LINE:148)\l}"];
Node_165 [shape=record,label="{165\:\ 0x014c|RETURN\l|0x014c: RETURN  (r5 I:int) \l}"];
Node_162 [shape=record,label="{162\:\ 0x0135|0x0135: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) = (r26 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)]) \l}"];
Node_149 [shape=record,label="{149\:\ 0x00fd|0x00fd: CONST  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_146 [shape=record,label="{146\:\ 0x00f6|0x00f6: CONST  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_142 [shape=record,label="{142\:\ 0x00dc|0x00dc: CONST  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_139 [shape=record,label="{139\:\ 0x00d5|0x00d5: CONST  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_135 [shape=record,label="{135\:\ 0x00af|0x00af: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_111 [shape=record,label="{111\:\ 0x0067|0x0067: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('seconds' int)])  (LINE:117)\l0x0068: MOVE  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minutes' int)]) \l}"];
Node_107 [shape=record,label="{107\:\ 0x005a|0x005a: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hours' int)])  (LINE:113)\l}"];
Node_103 [shape=record,label="{103\:\ 0x004e|0x004e: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('days' int)])  (LINE:109)\l}"];
Node_99 [shape=record,label="{99\:\ 0x002e|0x002e: CONST  (r5 I:??[int, float, short, byte, char] A[D('prefix' char)]) = (45 ??[int, float, short, byte, char])  (LINE:101)\l0x0030: NEG  (r0 I:long) = (r0 I:long)  (LINE:102)\l0x0031: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('prefix' char)]) \l}"];
MethodNode[shape=record,label="{private static int androidx.core.util.TimeUtils.formatDurationLocked((r27 I:long A[D('duration' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r29 I:int A[D('fieldLen' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lBACK_EDGE: B:93:0x001c \-\> B:92:0x001a, BACK_EDGE: B:131:0x009e \-\> B:130:0x009c, CROSS_EDGE: B:165:0x014c \-\> B:85:?, CROSS_EDGE: B:160:0x0132 \-\> B:164:0x0139, CROSS_EDGE: B:162:0x0135 \-\> B:163:0x0137, CROSS_EDGE: B:154:0x0117 \-\> B:157:0x011c, CROSS_EDGE: B:151:0x0112 \-\> B:154:0x0117, CROSS_EDGE: B:149:0x00fd \-\> B:150:0x00ff, CROSS_EDGE: B:146:0x00f6 \-\> B:147:0x00f8, CROSS_EDGE: B:142:0x00dc \-\> B:143:0x00de, CROSS_EDGE: B:139:0x00d5 \-\> B:140:0x00d7, CROSS_EDGE: B:135:0x00af \-\> B:136:0x00b0, CROSS_EDGE: B:128:0x0095 \-\> B:129:0x0096, CROSS_EDGE: B:124:0x008b \-\> B:125:0x008c, CROSS_EDGE: B:120:0x0081 \-\> B:121:0x0082, CROSS_EDGE: B:115:0x0075 \-\> B:117:0x0078, CROSS_EDGE: B:113:0x006f \-\> B:132:0x00a5, CROSS_EDGE: B:111:0x0067 \-\> B:112:0x0069, CROSS_EDGE: B:107:0x005a \-\> B:108:0x005b, CROSS_EDGE: B:103:0x004e \-\> B:104:0x004f, CROSS_EDGE: B:99:0x002e \-\> B:100:0x0032, CROSS_EDGE: B:87:0x0007 \-\> B:89:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001a: r29 'fieldLen' I\l  0x001a\-0x0026: r2 'fieldLen' I\l  0x0018\-0x0026: r5 'pos' I\l  0x002d\-0x002e: r5 'prefix' C\l  0x0030\-0x0032: r5 'prefix' C\l  \-1 \-0x0032: r27 'duration' J\l  0x0040\-0x004f: r6 'days' I\l  0x0041\-0x005b: r7 'hours' I\l  0x003f\-0x0069: r5 'seconds' I\l  0x0042\-0x0069: r8 'minutes' I\l  0x0075\-0x00a5: r6 'myLen' I\l  0x006a\-0x00a9: r5 'pos' I\l  0x00ab\-0x00c2: r8 'start' I\l  0x00a9\-0x00cc: r17 'pos' I\l  0x00c2\-0x00d0: r22 'start' I\l  0x00d0\-0x00e3: r8 'start' I\l  0x00cc\-0x00e7: r9 'pos' I\l  0x00e7\-0x00ed: r17 'pos' I\l  0x00e3\-0x00f1: r24 'start' I\l  0x00f1\-0x0104: r8 'start' I\l  0x00ed\-0x0108: r9 'pos' I\l  0x0108\-0x010e: r17 'pos' I\l  0x0104\-0x0112: r25 'start' I\l  0x0112\-0x0121: r8 'start' I\l  0x010e\-0x0125: r9 'pos' I\l  0x0125\-0x012b: r17 'pos' I\l  0x0121\-0x0132: r26 'start' I\l  0x0132\-0x0135: r7 'start' I\l  0x0135\-0x0137: r26 'start' I\l  0x0137\-0x013d: r7 'start' I\l  0x012b\-0x0140: r9 'pos' I\l  0x0140\-0x0146: r19 'pos' I\l  0x0032\-0x014c: r0 'duration' J\l  0x000f\-0x014c: r3 'formatStr' [C\l  0x0146\-0x014c: r4 'pos' I\l  0x0032\-0x014c: r10 'prefix' C\l  0x0037\-0x014c: r11 'millis' I\l  0x004f\-0x014c: r12 'days' I\l  0x005b\-0x014c: r13 'hours' I\l  0x0069\-0x014c: r14 'seconds' I\l  0x0069\-0x014c: r15 'minutes' I\l  0x013d\-0x014c: r17 'start' I\l  0x00b2\-0x014c: r18 'zeropad' Z\l  0x0026\-0x014c: r29 'fieldLen' I\l}"];
MethodNode -> Node_84;Node_84 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_89;
Node_88 -> Node_89;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_96;
Node_91 -> Node_92;
Node_92 -> Node_93[style=dashed];
Node_92 -> Node_166;
Node_93 -> Node_92;
Node_166 -> Node_94;
Node_94 -> Node_95;
Node_95 -> Node_85;
Node_96 -> Node_97;
Node_97 -> Node_98[style=dashed];
Node_97 -> Node_99;
Node_98 -> Node_100;
Node_100 -> Node_101;
Node_101 -> Node_102[style=dashed];
Node_101 -> Node_103;
Node_102 -> Node_104;
Node_104 -> Node_105;
Node_105 -> Node_106[style=dashed];
Node_105 -> Node_107;
Node_106 -> Node_108;
Node_108 -> Node_109;
Node_109 -> Node_110[style=dashed];
Node_109 -> Node_111;
Node_110 -> Node_112;
Node_112 -> Node_113;
Node_113 -> Node_114[style=dashed];
Node_113 -> Node_132;
Node_114 -> Node_115;
Node_115 -> Node_116[style=dashed];
Node_115 -> Node_117;
Node_116 -> Node_117;
Node_117 -> Node_118;
Node_118 -> Node_119[style=dashed];
Node_118 -> Node_120;
Node_119 -> Node_121;
Node_121 -> Node_122;
Node_122 -> Node_123[style=dashed];
Node_122 -> Node_124;
Node_123 -> Node_125;
Node_125 -> Node_126;
Node_126 -> Node_127[style=dashed];
Node_126 -> Node_128;
Node_127 -> Node_129;
Node_129 -> Node_130;
Node_130 -> Node_131[style=dashed];
Node_130 -> Node_167;
Node_131 -> Node_130;
Node_167 -> Node_132;
Node_128 -> Node_129;
Node_124 -> Node_125;
Node_120 -> Node_121;
Node_132 -> Node_133;
Node_133 -> Node_134[style=dashed];
Node_133 -> Node_135;
Node_134 -> Node_136;
Node_136 -> Node_137;
Node_137 -> Node_138[style=dashed];
Node_137 -> Node_139;
Node_138 -> Node_140;
Node_140 -> Node_141[style=dashed];
Node_140 -> Node_142;
Node_141 -> Node_143;
Node_143 -> Node_144;
Node_144 -> Node_145[style=dashed];
Node_144 -> Node_146;
Node_145 -> Node_147;
Node_147 -> Node_148[style=dashed];
Node_147 -> Node_149;
Node_148 -> Node_150;
Node_150 -> Node_151;
Node_151 -> Node_153;
Node_151 -> Node_154[style=dashed];
Node_153 -> Node_154;
Node_154 -> Node_156;
Node_154 -> Node_157[style=dashed];
Node_156 -> Node_157;
Node_157 -> Node_158;
Node_158 -> Node_159[style=dashed];
Node_158 -> Node_162;
Node_159 -> Node_160;
Node_160 -> Node_163;
Node_160 -> Node_164[style=dashed];
Node_163 -> Node_164;
Node_164 -> Node_165;
Node_165 -> Node_85;
Node_162 -> Node_163;
Node_149 -> Node_150;
Node_146 -> Node_147;
Node_142 -> Node_143;
Node_139 -> Node_140;
Node_135 -> Node_136;
Node_111 -> Node_112;
Node_107 -> Node_108;
Node_103 -> Node_104;
Node_99 -> Node_100;
}

