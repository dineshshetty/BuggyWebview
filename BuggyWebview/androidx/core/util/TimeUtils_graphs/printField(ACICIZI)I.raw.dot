digraph "CFG forandroidx.core.util.TimeUtils.printField([CICIZI)I" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('always' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0004  (LINE:58)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0002|0x0002: IF  (r4 I:??[int, byte, short, char] A[D('amt' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:41:? \l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x003c: RETURN  (r6 I:int A[D('pos' int)]) A[SYNTHETIC] (LINE:77)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0004|0x0004: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('pos' int)])  (LINE:59)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0005|0x0005: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('always' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x000a  (LINE:60)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0007|0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|0x0008: IF  (r8 I:??[int, byte, short, char] A[D('zeropad' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:31:0x000e \l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|0x000e: ARITH  (r1 I:int) = (r4 I:int A[D('amt' int)]) \/ (100 int)  (LINE:61)\l0x0010: ARITH  (r2 I:int) = (r1 I:int A[D('dig' int)]) + (48 int)  (LINE:62)\l0x0012: CAST (r2 I:char) = (char) (r2 I:int) \l0x0013: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r6 I:??[int, short, byte, char] A[D('pos' int)])\l  (r2 I:char A[IMMUTABLE_TYPE])\l \l0x0015: ARITH  (r6 I:int) = (r6 I:int A[D('pos' int)]) + (1 int)  (LINE:63)\l0x0017: ARITH  (r2 I:int) = (r1 I:int A[D('dig' int)]) * (100 int)  (LINE:64)\l0x0019: ARITH  (r4 I:int) = (r4 I:int A[D('amt' int)]) \- (r2 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('always' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001f  (LINE:66)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|0x001d: IF  (r8 I:??[int, byte, short, char] A[D('zeropad' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:38:0x0025 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0025|0x0025: ARITH  (r1 I:int) = (r4 I:int A[D('amt' int)]) \/ (10 int)  (LINE:67)\l0x0027: ARITH  (r2 I:int) = (r1 I:int A[D('dig' int)]) + (48 int)  (LINE:68)\l0x0029: CAST (r2 I:char) = (char) (r2 I:int) \l0x002a: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r6 I:??[int, short, byte, char] A[D('pos' int)])\l  (r2 I:char A[IMMUTABLE_TYPE])\l \l0x002c: ARITH  (r6 I:int) = (r6 I:int A[D('pos' int)]) + (1 int)  (LINE:69)\l0x002e: ARITH  (r2 I:int) = (r1 I:int A[D('dig' int)]) * (10 int)  (LINE:70)\l0x0030: ARITH  (r4 I:int) = (r4 I:int A[D('amt' int)]) \- (r2 I:int) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0031|0x0031: ARITH  (r1 I:int A[D('dig' int)]) = (r4 I:int A[D('amt' int)]) + (48 int)  (LINE:72)\l0x0033: CAST (r1 I:char) = (char) (r1 I:int) \l0x0034: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r6 I:??[int, short, byte, char] A[D('pos' int)])\l  (r1 I:char A[IMMUTABLE_TYPE])\l \l0x0036: ARITH  (r6 I:int) = (r6 I:int A[D('pos' int)]) + (1 int)  (LINE:73)\l0x0038: APUT  \l  (r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE])\l  (r6 I:??[int, short, byte, char] A[D('pos' int)])\l  (r5 I:char A[D('suffix' char), IMMUTABLE_TYPE])\l  (LINE:74)\l0x003a: ARITH  (r6 I:int) = (r6 I:int A[D('pos' int)]) + (1 int)  (LINE:75)\l}"];
Node_40 [shape=record,label="{40\:\ 0x003c|RETURN\lORIG_RETURN\l|0x003c: RETURN  (r6 I:int A[D('pos' int)])  (LINE:77)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001f|0x001f: CONST  (r1 I:??[int, float, short, byte, char]) = (9 ??[int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0021|0x0021: IF  (r4 I:??[int, byte, short, char] A[D('amt' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:38:0x0025 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startPos' int)]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pos' int)])  \-\> B:39:0x0031 \l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|0x000a: CONST  (r1 I:??[int, float, short, byte, char]) = (99 ??[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x000c|0x000c: IF  (r4 I:??[int, byte, short, char] A[D('amt' int)]) \<= (r1 I:??[int, byte, short, char])  \-\> B:32:0x001a \l}"];
MethodNode[shape=record,label="{private static int androidx.core.util.TimeUtils.printField((r3 I:char[] A[D('formatStr' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('amt' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:char A[D('suffix' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('pos' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('always' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('zeropad' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0023 \-\> B:39:0x0031, CROSS_EDGE: B:36:0x0021 \-\> B:38:0x0025, CROSS_EDGE: B:34:0x001d \-\> B:38:0x0025, CROSS_EDGE: B:32:0x001a \-\> B:35:0x001f, CROSS_EDGE: B:30:0x000c \-\> B:32:0x001a, CROSS_EDGE: B:28:0x0008 \-\> B:31:0x000e, CROSS_EDGE: B:26:0x0005 \-\> B:29:0x000a, CROSS_EDGE: B:24:0x0002 \-\> B:40:0x003c, CROSS_EDGE: B:23:0x0000 \-\> B:25:0x0004\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x001a: r1 'dig' I\l  0x0027\-0x0031: r1 'dig' I\l  0x0005\-0x003c: r0 'startPos' I\l  \-1 \-0x003c: r3 'formatStr' [C\l  \-1 \-0x003c: r4 'amt' I\l  \-1 \-0x003c: r5 'suffix' C\l  \-1 \-0x003c: r6 'pos' I\l  \-1 \-0x003c: r7 'always' Z\l  \-1 \-0x003c: r8 'zeropad' I\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_41;
Node_41 -> Node_22;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_22;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
}

