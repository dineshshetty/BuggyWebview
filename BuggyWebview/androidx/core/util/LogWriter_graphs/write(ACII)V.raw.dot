digraph "CFG forandroidx.core.util.LogWriter.write([CII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:56)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|LOOP_START\lLOOP:0: B:3:0x0001\-\>B:8:0x0014\l|0x0001: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r6 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:10:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|0x0003: ARITH  (r1 I:int) = (r5 I:int A[D('offset' int)]) + (r0 I:int A[D('i' int)])  (LINE:57)\l0x0005: AGET  (r1 I:char A[IMMUTABLE_TYPE]) = (r4 I:char[] A[D('buf' char[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]) \l0x0007: CONST  (r2 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:58)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c' char)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000f \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: INVOKE  (r3 I:androidx.core.util.LogWriter) type: DIRECT call: androidx.core.util.LogWriter.flushBuilder():void A[MD:():void (m)] (LINE:59)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x0001\-\>B:8:0x0014\l|0x0014: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:56)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|0x000f: IGET  (r2 I:java.lang.StringBuilder) = (r3 I:androidx.core.util.LogWriter) androidx.core.util.LogWriter.mBuilder java.lang.StringBuilder  (LINE:62)\l0x0011: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:char A[D('c' char)]) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|RETURN\l|0x0017: RETURN    (LINE:65)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.core.util.LogWriter.write((r3 'this' I:androidx.core.util.LogWriter A[IMMUTABLE_TYPE, THIS]), (r4 I:char[] A[D('buf' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:8:0x0014 \-\> B:3:0x0001, CROSS_EDGE: B:7:0x000f \-\> B:8:0x0014\lDebug Info:\l  0x0007\-0x0014: r1 'c' C\l  0x0001\-0x0017: r0 'i' I\l  \-1 \-0x0017: r4 'buf' [C\l  \-1 \-0x0017: r5 'offset' I\l  \-1 \-0x0017: r6 'count' I\lMETHOD_OVERRIDE: [ClspMth\{java.io.Writer.write(char[], int, int):void throws java.io.IOException\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_12;
Node_12 -> Node_8;
Node_8 -> Node_3;
Node_7 -> Node_11;
Node_11 -> Node_8;
Node_10 -> Node_9;
Node_9 -> Node_1;
}

