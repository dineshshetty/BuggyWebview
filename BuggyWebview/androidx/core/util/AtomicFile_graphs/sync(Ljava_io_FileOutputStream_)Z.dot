digraph "CFG forandroidx.core.util.AtomicFile.sync(Ljava\/io\/FileOutputStream;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IOException \-\> 0x0009, blocks: (B:2:0x0000), top: B:8:0x0000 \}\lCatch: IOException \-\> 0x0009\l|r1.getFD().sync()     \/\/ Catch: java.io.IOException \-\> L9\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|ExcHandler: IOException \-\> 0x0009\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private static boolean androidx.core.util.AtomicFile.sync((r1v0 'stream' java.io.FileOutputStream A[D('stream' java.io.FileOutputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000b \-\> B:1:?, CROSS_EDGE: B:8:0x0000 \-\> B:5:0x0009\lINLINE_NOT_NEEDED\lTryCatch #0 \{IOException \-\> 0x0009, blocks: (B:2:0x0000), top: B:8:0x0000 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_8;
Node_8 -> Node_2;
Node_8 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_1;
Node_9 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

