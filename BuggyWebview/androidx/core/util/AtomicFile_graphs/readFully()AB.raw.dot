digraph "CFG forandroidx.core.util.AtomicFile.readFully()[B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:java.io.FileInputStream) = (r7 I:androidx.core.util.AtomicFile) type: VIRTUAL call: androidx.core.util.AtomicFile.openRead():java.io.FileInputStream A[MD:():java.io.FileInputStream throws java.io.FileNotFoundException (m)] (LINE:191)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:193)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lCatch: all \-\> 0x002c\l|0x0005: INVOKE  (r2 I:int) = (r0 I:java.io.FileInputStream A[D('stream' java.io.FileInputStream)]) type: VIRTUAL call: java.io.FileInputStream.available():int A[Catch: all \-\> 0x002c, MD:():int throws java.io.IOException (c), TRY_ENTER] (LINE:194)\l0x0009: NEW_ARRAY  (r3 I:byte[]) = (r2 I:int A[D('avail' int), IMMUTABLE_TYPE]) type: byte[] A[Catch: all \-\> 0x002c] (LINE:195)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|TRY_LEAVE\lLOOP_START\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lLOOP:0: B:4:0x000b\-\>B:21:0x000b\lCatch: all \-\> 0x002c\l|0x000b: ARRAY_LENGTH  (r4 I:int) = (r3 I:??[] A[D('data' byte[])]) A[Catch: all \-\> 0x002c] (LINE:197)\l0x000c: ARITH  (r4 I:int) = (r4 I:int) \- (r1 I:int A[D('pos' int)]) A[Catch: all \-\> 0x002c]\l0x000d: INVOKE  (r4 I:int) = \l  (r0 I:java.io.FileInputStream A[D('stream' java.io.FileInputStream)])\l  (r3 I:byte[] A[D('data' byte[])])\l  (r1 I:int A[D('pos' int)])\l  (r4 I:int)\l type: VIRTUAL call: java.io.FileInputStream.read(byte[], int, int):int A[Catch: all \-\> 0x002c, MD:(byte[], int, int):int throws java.io.IOException (c), TRY_LEAVE]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r4 I:??[int, byte, short, char] A[D('amt' int)]) \> (0 ??[int, byte, short, char])  \-\> B:8:0x0018  (LINE:200)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: ARITH  (r1 I:int) = (r1 I:int A[D('pos' int)]) + (r4 I:int A[D('amt' int)])  (LINE:205)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lCatch: all \-\> 0x002c\l|0x0019: INVOKE  (r5 I:int) = (r0 I:java.io.FileInputStream A[D('stream' java.io.FileInputStream)]) type: VIRTUAL call: java.io.FileInputStream.available():int A[Catch: all \-\> 0x002c, MD:():int throws java.io.IOException (c), TRY_ENTER] (LINE:206)\l0x001d: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('avail' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: ARRAY_LENGTH  (r5 I:int) = (r3 I:??[] A[D('data' byte[])]) A[Catch: all \-\> 0x002c] (LINE:207)\l0x001f: ARITH  (r5 I:int) = (r5 I:int) \- (r1 I:int A[D('pos' int)]) A[Catch: all \-\> 0x002c]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IF  (r2 I:??[int, byte, short, char] A[D('avail' int)]) \<= (r5 I:??[int, byte, short, char])  \-\> B:22:0x000b \l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lCatch: all \-\> 0x002c\l|0x0022: ARITH  (r5 I:int) = (r1 I:int A[D('pos' int)]) + (r2 I:int A[D('avail' int)]) A[Catch: all \-\> 0x002c] (LINE:208)\l0x0024: NEW_ARRAY  (r5 I:byte[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: byte[] A[Catch: all \-\> 0x002c]\l0x0026: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:209)\l0x0027: INVOKE  \l  (r3 I:java.lang.Object A[D('data' byte[])])\l  (r6 I:int)\l  (r5 I:java.lang.Object A[D('newData' byte[])])\l  (r6 I:int)\l  (r1 I:int A[D('pos' int)])\l type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[Catch: all \-\> 0x002c, MD:(java.lang.Object, int, java.lang.Object, int, int):void (c), TRY_LEAVE]\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('data' byte[])]) = (r5 I:??[OBJECT, ARRAY] A[D('newData' byte[])])  (LINE:210)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|LOOP_END\lSYNTHETIC\lLOOP:0: B:4:0x000b\-\>B:21:0x000b\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: INVOKE  (r0 I:java.io.FileInputStream A[D('stream' java.io.FileInputStream)]) type: VIRTUAL call: java.io.FileInputStream.close():void A[MD:():void throws java.io.IOException (c)] (LINE:214)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|0x0017: RETURN  (r3 I:byte[] A[D('data' byte[])])  (LINE:203)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|ExcHandler: all \-\> 0x002c\l|0x002c: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x002c] (LINE:214)\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: INVOKE  (r0 I:java.io.FileInputStream A[D('stream' java.io.FileInputStream)]) type: VIRTUAL call: java.io.FileInputStream.close():void A[MD:():void throws java.io.IOException (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: THROW  (r1 I:java.lang.Throwable)  (LINE:215)\l}"];
MethodNode[shape=record,label="{public byte[] androidx.core.util.AtomicFile.readFully((r7 'this' I:androidx.core.util.AtomicFile A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x002a \-\> B:4:0x000b, BACK_EDGE: B:10:0x0020 \-\> B:4:0x000b, CROSS_EDGE: B:16:0x0030 \-\> B:1:?, CROSS_EDGE: B:17:0x0005 \-\> B:14:0x002c\lDebug Info:\l  0x0011\-0x002b: r4 'amt' I\l  0x0026\-0x002b: r5 'newData' [B\l  0x0005\-0x002c: r1 'pos' I\l  0x0009\-0x002c: r2 'avail' I\l  0x000b\-0x002c: r3 'data' [B\l  0x0004\-0x0030: r0 'stream' Ljava\/io\/FileInputStream;\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_17;
Node_17 -> Node_3;
Node_17 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_18;
Node_5 -> Node_8;
Node_5 -> Node_20[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_19[style=dashed];
Node_10 -> Node_22;
Node_19 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_23;
Node_23 -> Node_21;
Node_21 -> Node_4;
Node_22 -> Node_21;
Node_20 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_18 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

