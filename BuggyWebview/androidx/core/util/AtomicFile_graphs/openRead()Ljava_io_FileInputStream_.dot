digraph "CFG forandroidx.core.util.AtomicFile.openRead()Ljava\/io\/FileInputStream;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r2.mLegacyBackupName.exists() == false) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|rename(r2.mLegacyBackupName, r2.mBaseName)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f}"];
Node_6 [shape=record,label="{6\:\ 0x0015|if (r2.mNewName.exists() == false) goto L11\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017}"];
Node_8 [shape=record,label="{8\:\ 0x001d|if (r2.mBaseName.exists() == false) goto L11\l}"];
Node_9 [shape=record,label="{9\:\ 0x001f}"];
Node_10 [shape=record,label="{10\:\ 0x0025|if (r2.mNewName.delete() != false) goto L11\l}"];
Node_11 [shape=record,label="{11\:\ 0x0027|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"Failed to delete outdated new file \")\lr0.append(r2.mNewName)\landroid.util.Log.e(androidx.core.util.AtomicFile.LOG_TAG, r0.toString())\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f}"];
Node_13 [shape=record,label="{13\:\ 0x0046|RETURN\l|return new java.io.FileInputStream(r2.mBaseName)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.io.FileInputStream androidx.core.util.AtomicFile.openRead((r2v0 'this' androidx.core.util.AtomicFile A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0025 \-\> B:12:0x003f, CROSS_EDGE: B:8:0x001d \-\> B:12:0x003f, CROSS_EDGE: B:6:0x0015 \-\> B:12:0x003f, CROSS_EDGE: B:3:0x0006 \-\> B:5:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/io\/FileNotFoundException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_12;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

