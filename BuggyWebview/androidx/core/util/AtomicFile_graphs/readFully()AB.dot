digraph "CFG forandroidx.core.util.AtomicFile.readFully()[B" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.io.FileInputStream r0 = openRead()\lr1 = 0\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lCatch: all \-\> 0x002c\l|byte[] r3 = new byte[r0.available()]     \/\/ Catch: java.lang.Throwable \-\> L2c\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|TRY_LEAVE\lLOOP_START\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lLOOP:0: B:4:0x000b\-\>B:21:0x000b\lCatch: all \-\> 0x002c\lPHI: r1 r3 \l  PHI: (r1v2 'pos' int) = (r1v0 'pos' int), (r1v3 'pos' int) binds: [B:3:0x0005, B:21:0x000b] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'data' byte[]) = (r3v0 'data' byte[]), (r3v2 'data' byte[]) binds: [B:3:0x0005, B:21:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r0.read(r3, r1, r3.length \- r1)     \/\/ Catch: java.lang.Throwable \-\> L2c\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|if (r4 \> 0) goto L6\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|int r1 = r1 + r4\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|TRY_ENTER\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lCatch: all \-\> 0x002c\l|int r5 = r0.available()     \/\/ Catch: java.lang.Throwable \-\> L2c\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|if (r5 \<= (r3.length \- r1)) goto L14\l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lCatch: all \-\> 0x002c\l|byte[] r5 = new byte[r1 + r5]     \/\/ Catch: java.lang.Throwable \-\> L2c\ljava.lang.System.arraycopy(r3, 0, r5, 0, r1)     \/\/ Catch: java.lang.Throwable \-\> L2c\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|r3 = r5\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|LOOP_END\lSYNTHETIC\lLOOP:0: B:4:0x000b\-\>B:21:0x000b\lPHI: r3 \l  PHI: (r3v2 'data' byte[]) = (r3v1 'data' byte[]), (r3v3 'data' byte[]) binds: [B:22:0x000b, B:23:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|DONT_GENERATE\l|r0.close()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|return r3\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|ExcHandler: all \-\> 0x002c\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|FINALLY_INSNS\l|r0.close()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|throw r1\l}"];
MethodNode[shape=record,label="{public byte[] androidx.core.util.AtomicFile.readFully((r7v0 'this' androidx.core.util.AtomicFile A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x002a \-\> B:4:0x000b, BACK_EDGE: B:10:0x0020 \-\> B:4:0x000b, CROSS_EDGE: B:16:0x0030 \-\> B:1:?, CROSS_EDGE: B:17:0x0005 \-\> B:14:0x002c\lTryCatch #0 \{all \-\> 0x002c, blocks: (B:3:0x0005, B:4:0x000b, B:9:0x0019, B:11:0x0022), top: B:17:0x0005 \}\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_17;
Node_17 -> Node_3;
Node_17 -> Node_14;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_4 -> Node_18;
Node_5 -> Node_8;
Node_5 -> Node_20[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_19[style=dashed];
Node_10 -> Node_22;
Node_19 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_23;
Node_23 -> Node_21;
Node_21 -> Node_4;
Node_22 -> Node_21;
Node_20 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_18 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
}

