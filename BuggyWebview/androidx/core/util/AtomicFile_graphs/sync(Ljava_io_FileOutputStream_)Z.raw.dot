digraph "CFG forandroidx.core.util.AtomicFile.sync(Ljava\/io\/FileOutputStream;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{IOException \-\> 0x0009, blocks: (B:2:0x0000), top: B:8:0x0000 \}\lCatch: IOException \-\> 0x0009\l|0x0000: INVOKE  (r0 I:java.io.FileDescriptor) = (r1 I:java.io.FileOutputStream A[D('stream' java.io.FileOutputStream)]) type: VIRTUAL call: java.io.FileOutputStream.getFD():java.io.FileDescriptor A[Catch: IOException \-\> 0x0009, MD:():java.io.FileDescriptor throws java.io.IOException (c), TRY_ENTER] (LINE:220)\l0x0004: INVOKE  (r0 I:java.io.FileDescriptor) type: VIRTUAL call: java.io.FileDescriptor.sync():void A[Catch: IOException \-\> 0x0009, MD:():void throws java.io.SyncFailedException (c), TRY_LEAVE]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|RETURN\l|0x0007: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:221)\l0x0008: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_5 [shape=record,label="{5\:\ 0x0009|ExcHandler: IOException \-\> 0x0009\l|0x0009: MOVE_EXCEPTION  (r0 I:java.io.IOException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IOException \-\> 0x0009] (LINE:222)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|RETURN\l|0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:224)\l0x000b: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean androidx.core.util.AtomicFile.sync((r1 I:java.io.FileOutputStream A[D('stream' java.io.FileOutputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000b \-\> B:1:?, CROSS_EDGE: B:8:0x0000 \-\> B:5:0x0009\lDebug Info:\l  \-1 \-0x000b: r1 'stream' Ljava\/io\/FileOutputStream;\lTryCatch #0 \{IOException \-\> 0x0009, blocks: (B:2:0x0000), top: B:8:0x0000 \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_8;
Node_8 -> Node_2;
Node_8 -> Node_5;
Node_2 -> Node_3;
Node_2 -> Node_9;
Node_3 -> Node_1;
Node_9 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

