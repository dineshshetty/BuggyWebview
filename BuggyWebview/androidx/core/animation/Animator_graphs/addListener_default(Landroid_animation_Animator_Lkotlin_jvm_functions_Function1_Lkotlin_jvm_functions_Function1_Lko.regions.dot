digraph "CFG forandroidx.core.animation.AnimatorKt.addListener$default(Landroid\/animation\/Animator;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Landroid\/animation\/Animator$AnimatorListener;" {
subgraph cluster_Region_188451634 {
label = "R(6:(1:3)|(1:6)|(1:9)|(1:12)|13|14)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_769451928 {
label = "IF [B:3:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if ((r6 & 1) != 0) goto L3\l}"];
subgraph cluster_Region_1366740768 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|androidx.core.animation.AnimatorKt$addListener$1 kotlin.jvm.functions.Function1 r7 = androidx.core.animation.AnimatorKt$addListener$1.INSTANCE\lkotlin.jvm.functions.Function1 r2 = r7\l}"];
}
}
subgraph cluster_IfRegion_299204453 {
label = "IF [B:6:0x000b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000b|if ((r6 & 2) != 0) goto L6\l}"];
subgraph cluster_Region_105100993 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x000d|androidx.core.animation.AnimatorKt$addListener$2 kotlin.jvm.functions.Function1 r7 = androidx.core.animation.AnimatorKt$addListener$2.INSTANCE\lkotlin.jvm.functions.Function1 r3 = r7\l}"];
}
}
subgraph cluster_IfRegion_1972346674 {
label = "IF [B:9:0x0014] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0014|if ((r6 & 4) != 0) goto L9\l}"];
subgraph cluster_Region_600782852 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0016|androidx.core.animation.AnimatorKt$addListener$3 kotlin.jvm.functions.Function1 r7 = androidx.core.animation.AnimatorKt$addListener$3.INSTANCE\lkotlin.jvm.functions.Function1 r4 = r7\l}"];
}
}
subgraph cluster_IfRegion_326137903 {
label = "IF [B:12:0x001d] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x001d|if ((r6 & 8) != 0) goto L12\l}"];
subgraph cluster_Region_835797910 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001f|androidx.core.animation.AnimatorKt$addListener$4 kotlin.jvm.functions.Function1 r6 = androidx.core.animation.AnimatorKt$addListener$4.INSTANCE\lkotlin.jvm.functions.Function1 r5 = r6\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0024|PHI: r5 \l  PHI: (r5v1 'onRepeat' kotlin.jvm.functions.Function1) = (r5v0 'onRepeat' kotlin.jvm.functions.Function1), (r5v3 'onRepeat' kotlin.jvm.functions.Function1) binds: [B:12:0x001d, B:13:0x001f] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"onEnd\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"onStart\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"onCancel\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"onRepeat\")\landroidx.core.animation.AnimatorKt$addListener$listener$1 androidx.core.animation.AnimatorKt$addListener$listener$1 r7 = new androidx.core.animation.AnimatorKt$addListener$listener$1(r5, r2, r4, r3)\lr1.addListener(r7)\l}"];
Node_15 [shape=record,label="{15\:\ 0x004c|RETURN\l|return r7\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0009|PHI: r2 \l  PHI: (r2v1 'onEnd' kotlin.jvm.functions.Function1) = (r2v0 'onEnd' kotlin.jvm.functions.Function1), (r2v3 'onEnd' kotlin.jvm.functions.Function1) binds: [B:3:0x0002, B:4:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0012|PHI: r3 \l  PHI: (r3v1 'onStart' kotlin.jvm.functions.Function1) = (r3v0 'onStart' kotlin.jvm.functions.Function1), (r3v3 'onStart' kotlin.jvm.functions.Function1) binds: [B:6:0x000b, B:7:0x000d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001b|PHI: r4 \l  PHI: (r4v1 'onCancel' kotlin.jvm.functions.Function1) = (r4v0 'onCancel' kotlin.jvm.functions.Function1), (r4v3 'onCancel' kotlin.jvm.functions.Function1) binds: [B:9:0x0014, B:10:0x0016] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ android.animation.Animator$AnimatorListener androidx.core.animation.AnimatorKt.addListener$default((r1v0 '$this$addListener_u24default' android.animation.Animator A[D('$this$addListener_u24default' android.animation.Animator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'onEnd' kotlin.jvm.functions.Function1 A[D('onEnd' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'onStart' kotlin.jvm.functions.Function1 A[D('onStart' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'onCancel' kotlin.jvm.functions.Function1 A[D('onCancel' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'onRepeat' kotlin.jvm.functions.Function1 A[D('onRepeat' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:12:0x001d \-\> B:14:0x0024, CROSS_EDGE: B:9:0x0014 \-\> B:11:0x001b, CROSS_EDGE: B:6:0x000b \-\> B:8:0x0012, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [94=5]\}\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_8 -> Node_9;
Node_11 -> Node_12;
}

