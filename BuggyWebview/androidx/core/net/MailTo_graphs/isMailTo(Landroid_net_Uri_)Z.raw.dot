digraph "CFG forandroidx.core.net.MailTo.isMailTo(Landroid\/net\/Uri;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('uri' android.net.Uri)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010  (LINE:89)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: INVOKE  (r0 I:java.lang.String) = (r2 I:android.net.Uri A[D('uri' android.net.Uri)]) type: VIRTUAL call: android.net.Uri.getScheme():java.lang.String A[MD:():java.lang.String (c)]\l0x0006: CONST_STR  (r1 I:java.lang.String) =  \"mailto\" \l0x0008: INVOKE  (r0 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0010 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|SYNTHETIC\lRETURN\l|0x000e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0011: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.net.MailTo.isMailTo((r2 I:android.net.Uri A[D('uri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0010 \-\> B:7:0x0011, CROSS_EDGE: B:2:0x0000 \-\> B:6:0x0010\lDebug Info:\l  \-1 \-0x0011: r2 'uri' Landroid\/net\/Uri;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_6;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_6;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

