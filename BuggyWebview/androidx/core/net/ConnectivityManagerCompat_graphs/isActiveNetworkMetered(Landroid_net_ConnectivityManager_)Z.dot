digraph "CFG forandroidx.core.net.ConnectivityManagerCompat.isActiveNetworkMetered(Landroid\/net\/ConnectivityManager;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \< 16) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006}"];
Node_5 [shape=record,label="{5\:\ 0x000a|RETURN\l|return androidx.core.net.ConnectivityManagerCompat.Api16Impl.isActiveNetworkMetered(r3)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|android.net.NetworkInfo r0 = r3.getActiveNetworkInfo()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|if (r0 != null) goto L9\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|RETURN\l|return true\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|int r2 = r0.getType()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|switch(r2) \{\l    case 0: goto L13;\l    case 1: goto L12;\l    case 2: goto L13;\l    case 3: goto L13;\l    case 4: goto L13;\l    case 5: goto L13;\l    case 6: goto L13;\l    case 7: goto L12;\l    case 8: goto L11;\l    case 9: goto L12;\l    default: goto L11;\l\}\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|RETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.net.ConnectivityManagerCompat.isActiveNetworkMetered((r3v0 'cm' android.net.ConnectivityManager A[D('cm' android.net.ConnectivityManager), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0012 \-\> B:1:?, CROSS_EDGE: B:11:0x001a \-\> B:1:?, CROSS_EDGE: B:13:0x001c \-\> B:1:?, CROSS_EDGE: B:14:0x001d \-\> B:1:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12;
Node_10 -> Node_14;
Node_11 -> Node_1;
Node_12 -> Node_1;
Node_14 -> Node_1;
}

