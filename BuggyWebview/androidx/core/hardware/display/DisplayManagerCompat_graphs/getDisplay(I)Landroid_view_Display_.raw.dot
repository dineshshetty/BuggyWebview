digraph "CFG forandroidx.core.hardware.display.DisplayManagerCompat.getDisplay(I)Landroid\/view\/Display;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:87)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (17 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:6:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:android.content.Context) = (r2 I:androidx.core.hardware.display.DisplayManagerCompat) androidx.core.hardware.display.DisplayManagerCompat.mContext android.content.Context  (LINE:88)\l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"display\"  (LINE:89)\l0x000a: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) type: VIRTUAL call: android.content.Context.getSystemService(java.lang.String):java.lang.Object A[MD:(java.lang.String):java.lang.Object (c)]\l0x000e: CHECK_CAST (r0 I:android.hardware.display.DisplayManager) = (android.hardware.display.DisplayManager) (r0 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:android.view.Display) = (r0 I:android.hardware.display.DisplayManager), (r3 I:int A[D('displayId' int)]) type: STATIC call: androidx.core.hardware.display.DisplayManagerCompat.Api17Impl.getDisplay(android.hardware.display.DisplayManager, int):android.view.Display A[MD:(android.hardware.display.DisplayManager, int):android.view.Display (m)] (LINE:88)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:android.view.Display) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IGET  (r0 I:android.content.Context) = (r2 I:androidx.core.hardware.display.DisplayManagerCompat) androidx.core.hardware.display.DisplayManagerCompat.mContext android.content.Context  (LINE:92)\l0x0017: CONST_STR  (r1 I:java.lang.String) =  \"window\" \l0x0019: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.content.Context), (r1 I:java.lang.String) type: VIRTUAL call: android.content.Context.getSystemService(java.lang.String):java.lang.Object A[MD:(java.lang.String):java.lang.Object (c)]\l0x001d: CHECK_CAST (r0 I:android.view.WindowManager) = (android.view.WindowManager) (r0 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r0 I:android.view.Display) = (r0 I:android.view.WindowManager) type: INTERFACE call: android.view.WindowManager.getDefaultDisplay():android.view.Display A[MD:():android.view.Display (c)] (LINE:93)\l0x0023: INVOKE  (r1 I:int) = (r0 I:android.view.Display A[D('display' android.view.Display)]) type: VIRTUAL call: android.view.Display.getDisplayId():int A[MD:():int (c)] (LINE:94)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0027|0x0027: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('displayId' int)])  \-\> B:9:0x002a \l}"];
Node_8 [shape=record,label="{8\:\ 0x0029|RETURN\l|0x0029: RETURN  (r0 I:android.view.Display A[D('display' android.view.Display)])  (LINE:95)\l}"];
Node_9 [shape=record,label="{9\:\ 0x002a|RETURN\l|0x002a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:97)\l0x002b: RETURN  (r1 I:android.view.Display) \l}"];
MethodNode[shape=record,label="{public android.view.Display androidx.core.hardware.display.DisplayManagerCompat.getDisplay((r2 'this' I:androidx.core.hardware.display.DisplayManagerCompat A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('displayId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0029 \-\> B:1:?, CROSS_EDGE: B:10:0x002b \-\> B:1:?\lDebug Info:\l  0x0023\-0x002b: r0 'display' Landroid\/view\/Display;\l  \-1 \-0x002b: r3 'displayId' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_1;
Node_9 -> Node_1;
}

