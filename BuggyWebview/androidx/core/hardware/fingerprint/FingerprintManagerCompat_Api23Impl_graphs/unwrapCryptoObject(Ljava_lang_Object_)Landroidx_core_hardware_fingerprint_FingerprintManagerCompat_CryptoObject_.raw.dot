digraph "CFG forandroidx.core.hardware.fingerprint.FingerprintManagerCompat.Api23Impl.unwrapCryptoObject(Ljava\/lang\/Object;)Landroidx\/core\/hardware\/fingerprint\/FingerprintManagerCompat$CryptoObject;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('cryptoObjectObj' java.lang.Object)])  (LINE:334)\l0x0001: CHECK_CAST (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject) = (android.hardware.fingerprint.FingerprintManager$CryptoObject) (r0 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:336)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cryptoObject' android.hardware.fingerprint.FingerprintManager$CryptoObject)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|0x0006: RETURN  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)  (LINE:337)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: INVOKE  (r2 I:javax.crypto.Cipher) = \l  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject A[D('cryptoObject' android.hardware.fingerprint.FingerprintManager$CryptoObject)])\l type: VIRTUAL call: android.hardware.fingerprint.FingerprintManager.CryptoObject.getCipher():javax.crypto.Cipher A[MD:():javax.crypto.Cipher (c)] (LINE:338)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|0x000d: NEW_INSTANCE  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) =  androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject  (LINE:339)\l0x000f: INVOKE  (r2 I:javax.crypto.Cipher) = \l  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject A[D('cryptoObject' android.hardware.fingerprint.FingerprintManager$CryptoObject)])\l type: VIRTUAL call: android.hardware.fingerprint.FingerprintManager.CryptoObject.getCipher():javax.crypto.Cipher A[MD:():javax.crypto.Cipher (c)]\l0x0013: INVOKE  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject), (r2 I:javax.crypto.Cipher) type: DIRECT call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.\<init\>(javax.crypto.Cipher):void A[MD:(javax.crypto.Cipher):void (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|RETURN\l|0x0016: RETURN  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: INVOKE  (r2 I:java.security.Signature) = \l  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject A[D('cryptoObject' android.hardware.fingerprint.FingerprintManager$CryptoObject)])\l type: VIRTUAL call: android.hardware.fingerprint.FingerprintManager.CryptoObject.getSignature():java.security.Signature A[MD:():java.security.Signature (c)] (LINE:340)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0027 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: NEW_INSTANCE  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) =  androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject  (LINE:341)\l0x001f: INVOKE  (r2 I:java.security.Signature) = \l  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject A[D('cryptoObject' android.hardware.fingerprint.FingerprintManager$CryptoObject)])\l type: VIRTUAL call: android.hardware.fingerprint.FingerprintManager.CryptoObject.getSignature():java.security.Signature A[MD:():java.security.Signature (c)]\l0x0023: INVOKE  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject), (r2 I:java.security.Signature) type: DIRECT call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.\<init\>(java.security.Signature):void A[MD:(java.security.Signature):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0026|RETURN\l|0x0026: RETURN  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: INVOKE  (r2 I:javax.crypto.Mac) = \l  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject A[D('cryptoObject' android.hardware.fingerprint.FingerprintManager$CryptoObject)])\l type: VIRTUAL call: android.hardware.fingerprint.FingerprintManager.CryptoObject.getMac():javax.crypto.Mac A[MD:():javax.crypto.Mac (c)] (LINE:342)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0037 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|0x002d: NEW_INSTANCE  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) =  androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject  (LINE:343)\l0x002f: INVOKE  (r2 I:javax.crypto.Mac) = \l  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject A[D('cryptoObject' android.hardware.fingerprint.FingerprintManager$CryptoObject)])\l type: VIRTUAL call: android.hardware.fingerprint.FingerprintManager.CryptoObject.getMac():javax.crypto.Mac A[MD:():javax.crypto.Mac (c)]\l0x0033: INVOKE  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject), (r2 I:javax.crypto.Mac) type: DIRECT call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.\<init\>(javax.crypto.Mac):void A[MD:(javax.crypto.Mac):void (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|RETURN\l|0x0037: RETURN  (r1 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)  (LINE:345)\l}"];
MethodNode[shape=record,label="{public static androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject androidx.core.hardware.fingerprint.FingerprintManagerCompat.Api23Impl.unwrapCryptoObject((r3 I:java.lang.Object A[D('cryptoObjectObj' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0016 \-\> B:1:?, CROSS_EDGE: B:12:0x0026 \-\> B:1:?, CROSS_EDGE: B:16:0x0036 \-\> B:1:?, CROSS_EDGE: B:17:0x0037 \-\> B:1:?\lDebug Info:\l  0x0003\-0x0037: r0 'cryptoObject' Landroid\/hardware\/fingerprint\/FingerprintManager$CryptoObject;\l  \-1 \-0x0037: r3 'cryptoObjectObj' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_17 -> Node_1;
}

