digraph "CFG forandroidx.core.hardware.fingerprint.FingerprintManagerCompat.Api23Impl.wrapCryptoObject(Landroidx\/core\/hardware\/fingerprint\/FingerprintManagerCompat$CryptoObject;)Landroid\/hardware\/fingerprint\/FingerprintManager$CryptoObject;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:319)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|0x0001: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0004 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)  (LINE:320)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004|0x0004: INVOKE  (r1 I:javax.crypto.Cipher) = \l  (r2 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)])\l type: VIRTUAL call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.getCipher():javax.crypto.Cipher A[MD:():javax.crypto.Cipher (m)] (LINE:321)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0014 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject) =  android.hardware.fingerprint.FingerprintManager$CryptoObject  (LINE:322)\l0x000c: INVOKE  (r1 I:javax.crypto.Cipher) = \l  (r2 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)])\l type: VIRTUAL call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.getCipher():javax.crypto.Cipher A[MD:():javax.crypto.Cipher (m)]\l0x0010: INVOKE  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject), (r1 I:javax.crypto.Cipher) type: DIRECT call: android.hardware.fingerprint.FingerprintManager.CryptoObject.\<init\>(javax.crypto.Cipher):void A[MD:(javax.crypto.Cipher):void (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: INVOKE  (r1 I:java.security.Signature) = \l  (r2 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)])\l type: VIRTUAL call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.getSignature():java.security.Signature A[MD:():java.security.Signature (m)] (LINE:323)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0024 \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject) =  android.hardware.fingerprint.FingerprintManager$CryptoObject  (LINE:324)\l0x001c: INVOKE  (r1 I:java.security.Signature) = \l  (r2 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)])\l type: VIRTUAL call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.getSignature():java.security.Signature A[MD:():java.security.Signature (m)]\l0x0020: INVOKE  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject), (r1 I:java.security.Signature) type: DIRECT call: android.hardware.fingerprint.FingerprintManager.CryptoObject.\<init\>(java.security.Signature):void A[MD:(java.security.Signature):void (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|RETURN\l|0x0023: RETURN  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|0x0024: INVOKE  (r1 I:javax.crypto.Mac) = \l  (r2 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)])\l type: VIRTUAL call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.getMac():javax.crypto.Mac A[MD:():javax.crypto.Mac (m)] (LINE:325)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0034 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: NEW_INSTANCE  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject) =  android.hardware.fingerprint.FingerprintManager$CryptoObject  (LINE:326)\l0x002c: INVOKE  (r1 I:javax.crypto.Mac) = \l  (r2 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject)])\l type: VIRTUAL call: androidx.core.hardware.fingerprint.FingerprintManagerCompat.CryptoObject.getMac():javax.crypto.Mac A[MD:():javax.crypto.Mac (m)]\l0x0030: INVOKE  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject), (r1 I:javax.crypto.Mac) type: DIRECT call: android.hardware.fingerprint.FingerprintManager.CryptoObject.\<init\>(javax.crypto.Mac):void A[MD:(javax.crypto.Mac):void (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0033|RETURN\l|0x0033: RETURN  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0034|RETURN\l|0x0034: RETURN  (r0 I:android.hardware.fingerprint.FingerprintManager$CryptoObject)  (LINE:328)\l}"];
MethodNode[shape=record,label="{public static android.hardware.fingerprint.FingerprintManager$CryptoObject androidx.core.hardware.fingerprint.FingerprintManagerCompat.Api23Impl.wrapCryptoObject((r2 I:androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject A[D('cryptoObject' androidx.core.hardware.fingerprint.FingerprintManagerCompat$CryptoObject), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0013 \-\> B:1:?, CROSS_EDGE: B:12:0x0023 \-\> B:1:?, CROSS_EDGE: B:16:0x0033 \-\> B:1:?, CROSS_EDGE: B:17:0x0034 \-\> B:1:?\lDebug Info:\l  \-1 \-0x0034: r2 'cryptoObject' Landroidx\/core\/hardware\/fingerprint\/FingerprintManagerCompat$CryptoObject;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_17 -> Node_1;
}

