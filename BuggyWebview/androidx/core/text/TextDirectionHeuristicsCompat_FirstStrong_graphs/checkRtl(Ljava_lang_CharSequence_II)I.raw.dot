digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.FirstStrong.checkRtl(Ljava\/lang\/CharSequence;II)I" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:183)\l0x0001: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:184)\l0x0002: ARITH  (r2 I:int) = (r6 I:int A[D('start' int)]) + (r7 I:int A[D('count' int)]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|LOOP_START\lLOOP:0: B:13:0x0004\-\>B:16:0x0009\l|0x0004: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('e' int)])  \-\> B:18:0x0018 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0018 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|LOOP_END\lLOOP:0: B:13:0x0004\-\>B:16:0x0009\l|0x0009: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)]), (r1 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:185)\l0x000d: INVOKE  (r3 I:byte) = (r3 I:char) type: STATIC call: java.lang.Character.getDirectionality(char):byte A[MD:(char):byte (c)]\l0x0011: INVOKE  (r0 I:int A[D('result' int)]) = (r3 I:int) type: STATIC call: androidx.core.text.TextDirectionHeuristicsCompat.isRtlTextOrFormat(int):int A[MD:(int):int (m)]\l0x0015: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:184)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:int A[D('result' int)])  (LINE:187)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public int androidx.core.text.TextDirectionHeuristicsCompat.FirstStrong.checkRtl((r4 'this' I:androidx.core.text.TextDirectionHeuristicsCompat$FirstStrong A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:16:0x0009 \-\> B:13:0x0004, CROSS_EDGE: B:13:0x0004 \-\> B:17:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0018: r1 'i' I\l  0x0004\-0x0018: r2 'e' I\l  0x0001\-0x0018: r0 'result' I\l  \-1 \-0x0018: r5 'cs' Ljava\/lang\/CharSequence;\l  \-1 \-0x0018: r6 'start' I\l  \-1 \-0x0018: r7 'count' I\lMETHOD_OVERRIDE: [androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm.checkRtl(java.lang.CharSequence, int, int):int]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_13;
Node_19 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_17;
}

