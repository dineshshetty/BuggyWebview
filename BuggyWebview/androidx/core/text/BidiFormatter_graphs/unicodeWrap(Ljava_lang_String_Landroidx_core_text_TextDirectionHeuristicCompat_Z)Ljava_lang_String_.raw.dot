digraph "CFG forandroidx.core.text.BidiFormatter.unicodeWrap(Ljava\/lang\/String;Landroidx\/core\/text\/TextDirectionHeuristicCompat;Z)Ljava\/lang\/String;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('str' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0004  (LINE:391)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|RETURN\l|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: RETURN  (r0 I:java.lang.String) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: INVOKE  (r0 I:java.lang.CharSequence) = \l  (r1 I:androidx.core.text.BidiFormatter)\l  (r2 I:java.lang.CharSequence A[D('str' java.lang.String)])\l  (r3 I:androidx.core.text.TextDirectionHeuristicCompat A[D('heuristic' androidx.core.text.TextDirectionHeuristicCompat)])\l  (r4 I:boolean A[D('isolate' boolean)])\l type: VIRTUAL call: androidx.core.text.BidiFormatter.unicodeWrap(java.lang.CharSequence, androidx.core.text.TextDirectionHeuristicCompat, boolean):java.lang.CharSequence A[MD:(java.lang.CharSequence, androidx.core.text.TextDirectionHeuristicCompat, boolean):java.lang.CharSequence (m)] (LINE:392)\l0x0008: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.core.text.BidiFormatter.unicodeWrap((r1 'this' I:androidx.core.text.BidiFormatter A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.String A[D('str' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:androidx.core.text.TextDirectionHeuristicCompat A[D('heuristic' androidx.core.text.TextDirectionHeuristicCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('isolate' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 'str' Ljava\/lang\/String;\l  \-1 \-0x000c: r3 'heuristic' Landroidx\/core\/text\/TextDirectionHeuristicCompat;\l  \-1 \-0x000c: r4 'isolate' Z\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

