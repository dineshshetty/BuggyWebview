digraph "CFG forandroidx.core.text.BidiFormatter.markAfter(Ljava\/lang\/CharSequence;Landroidx\/core\/text\/TextDirectionHeuristicCompat;)Ljava\/lang\/String;" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:300)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:boolean) = \l  (r5 I:androidx.core.text.TextDirectionHeuristicCompat A[D('heuristic' androidx.core.text.TextDirectionHeuristicCompat)])\l  (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)])\l  (r1 I:int)\l  (r0 I:int)\l type: INTERFACE call: androidx.core.text.TextDirectionHeuristicCompat.isRtl(java.lang.CharSequence, int, int):boolean A[MD:(java.lang.CharSequence, int, int):boolean (m)]\l0x0009: IGET  (r1 I:boolean) = (r3 I:androidx.core.text.BidiFormatter) androidx.core.text.BidiFormatter.mIsRtlContext boolean  (LINE:302)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0019 \l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isRtl' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0016 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)]) type: STATIC call: androidx.core.text.BidiFormatter.getExitDir(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x0013: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0019 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: SGET  (r1 I:java.lang.String) =  androidx.core.text.BidiFormatter.LRM_STRING java.lang.String  (LINE:303)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|RETURN\l|0x0018: RETURN  (r1 I:java.lang.String) \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0019|0x0019: IGET  (r1 I:boolean) = (r3 I:androidx.core.text.BidiFormatter) androidx.core.text.BidiFormatter.mIsRtlContext boolean  (LINE:305)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|0x001b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0029 \l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|0x001d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isRtl' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0026 \l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|0x001f: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)]) type: STATIC call: androidx.core.text.BidiFormatter.getExitDir(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x0023: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0024|0x0024: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:? \l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|0x0029: CONST_STR  (r1 I:java.lang.String) =  \"\" A[SYNTHETIC] (LINE:308)\l0x002b: RETURN  (r1 I:java.lang.String) A[SYNTHETIC]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0026|0x0026: SGET  (r1 I:java.lang.String) =  androidx.core.text.BidiFormatter.RLM_STRING java.lang.String  (LINE:306)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0028|RETURN\l|0x0028: RETURN  (r1 I:java.lang.String) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0029|RETURN\lORIG_RETURN\l|0x0029: CONST_STR  (r1 I:java.lang.String) =  \"\"  (LINE:308)\l0x002b: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{private java.lang.String androidx.core.text.BidiFormatter.markAfter((r3 'this' I:androidx.core.text.BidiFormatter A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:androidx.core.text.TextDirectionHeuristicCompat A[D('heuristic' androidx.core.text.TextDirectionHeuristicCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0028 \-\> B:20:?, CROSS_EDGE: B:36:0x002b \-\> B:20:?, CROSS_EDGE: B:30:0x001d \-\> B:33:0x0026, CROSS_EDGE: B:29:0x001b \-\> B:35:0x0029, CROSS_EDGE: B:23:0x000d \-\> B:26:0x0016, CROSS_EDGE: B:22:0x000b \-\> B:28:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x002b: r0 'isRtl' Z\l  \-1 \-0x002b: r4 'str' Ljava\/lang\/CharSequence;\l  \-1 \-0x002b: r5 'heuristic' Landroidx\/core\/text\/TextDirectionHeuristicCompat;\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_20;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_35;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_37 -> Node_20;
Node_33 -> Node_34;
Node_34 -> Node_20;
Node_35 -> Node_20;
}

