digraph "CFG forandroidx.core.text.BidiFormatter.unicodeWrap(Ljava\/lang\/CharSequence;Landroidx\/core\/text\/TextDirectionHeuristicCompat;Z)Ljava\/lang\/CharSequence;" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|if (r4 != null) goto L4\l}"];
Node_28 [shape=record,label="{28\:\ 0x0002|RETURN\l|return null\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0004|boolean r0 = r5.isRtl(r4, 0, r4.length())\landroid.text.SpannableStringBuilder r1 = new android.text.SpannableStringBuilder()\l}"];
Node_31 [shape=record,label="{31\:\ 0x0016|if (getStereoReset() == false) goto L11\l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|if (r6 == false) goto L11\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|if (r0 == false) goto L10\l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|androidx.core.text.TextDirectionHeuristicCompat r2 = androidx.core.text.TextDirectionHeuristicsCompat.RTL\l}"];
Node_36 [shape=record,label="{36\:\ 0x0022|PHI: r2 \l  PHI: (r2v11 androidx.core.text.TextDirectionHeuristicCompat) = (r2v10 androidx.core.text.TextDirectionHeuristicCompat), (r2v13 androidx.core.text.TextDirectionHeuristicCompat) binds: [B:35:0x0020, B:34:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|r1.append(markBefore(r4, r2))\l}"];
Node_35 [shape=record,label="{35\:\ 0x0020|androidx.core.text.TextDirectionHeuristicCompat r2 = androidx.core.text.TextDirectionHeuristicsCompat.LTR\l}"];
Node_37 [shape=record,label="{37\:\ 0x0029}"];
Node_38 [shape=record,label="{38\:\ 0x002b|if (r0 == r3.mIsRtlContext) goto L23\l}"];
Node_39 [shape=record,label="{39\:\ 0x002d|if (r0 == false) goto L22\l}"];
Node_40 [shape=record,label="{40\:\ 0x002f|r2 = androidx.core.text.BidiFormatter.RLE\l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|PHI: r2 \l  PHI: (r2v7 char) = (r2v6 char), (r2v9 char) binds: [B:41:0x0032, B:40:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|r1.append(r2)\lr1.append(r4)\lr1.append(androidx.core.text.BidiFormatter.PDF)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0043|if (r6 == false) goto L21\l}"];
Node_45 [shape=record,label="{45\:\ 0x0046|if (r0 == false) goto L20\l}"];
Node_46 [shape=record,label="{46\:\ 0x0048|androidx.core.text.TextDirectionHeuristicCompat r2 = androidx.core.text.TextDirectionHeuristicsCompat.RTL\l}"];
Node_48 [shape=record,label="{48\:\ 0x004d|PHI: r2 \l  PHI: (r2v3 androidx.core.text.TextDirectionHeuristicCompat) = (r2v2 androidx.core.text.TextDirectionHeuristicCompat), (r2v5 androidx.core.text.TextDirectionHeuristicCompat) binds: [B:47:0x004b, B:46:0x0048] A[DONT_GENERATE, DONT_INLINE]\l|r1.append(markAfter(r4, r2))\l}"];
Node_47 [shape=record,label="{47\:\ 0x004b|androidx.core.text.TextDirectionHeuristicCompat r2 = androidx.core.text.TextDirectionHeuristicsCompat.LTR\l}"];
Node_49 [shape=record,label="{49\:\ 0x0054|RETURN\l|return r1\l}"];
Node_41 [shape=record,label="{41\:\ 0x0032|r2 = androidx.core.text.BidiFormatter.LRE\l}"];
Node_43 [shape=record,label="{43\:\ 0x0040|r1.append(r4)\l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence androidx.core.text.BidiFormatter.unicodeWrap((r3v0 'this' androidx.core.text.BidiFormatter A[IMMUTABLE_TYPE, THIS]), (r4v0 'str' java.lang.CharSequence A[D('str' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'heuristic' androidx.core.text.TextDirectionHeuristicCompat A[D('heuristic' androidx.core.text.TextDirectionHeuristicCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'isolate' boolean A[D('isolate' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:49:0x0054 \-\> B:26:?, CROSS_EDGE: B:47:0x004b \-\> B:48:0x004d, CROSS_EDGE: B:44:0x0043 \-\> B:49:0x0054, CROSS_EDGE: B:41:0x0032 \-\> B:42:0x0034, CROSS_EDGE: B:43:0x0040 \-\> B:44:0x0043, CROSS_EDGE: B:35:0x0020 \-\> B:36:0x0022, CROSS_EDGE: B:32:0x0018 \-\> B:37:0x0029, CROSS_EDGE: B:31:0x0016 \-\> B:37:0x0029\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_26;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_43;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_49;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_47 -> Node_48;
Node_49 -> Node_26;
Node_41 -> Node_42;
Node_43 -> Node_44;
}

