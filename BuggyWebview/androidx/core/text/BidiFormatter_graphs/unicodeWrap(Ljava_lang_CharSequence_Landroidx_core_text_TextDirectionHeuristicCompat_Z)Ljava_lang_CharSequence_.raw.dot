digraph "CFG forandroidx.core.text.BidiFormatter.unicodeWrap(Ljava\/lang\/CharSequence;Landroidx\/core\/text\/TextDirectionHeuristicCompat;Z)Ljava\/lang\/CharSequence;" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('str' java.lang.CharSequence)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0004  (LINE:411)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0002|RETURN\l|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:412)\l0x0005: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0009: INVOKE  (r0 I:boolean) = \l  (r5 I:androidx.core.text.TextDirectionHeuristicCompat A[D('heuristic' androidx.core.text.TextDirectionHeuristicCompat)])\l  (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)])\l  (r0 I:int)\l  (r1 I:int)\l type: INTERFACE call: androidx.core.text.TextDirectionHeuristicCompat.isRtl(java.lang.CharSequence, int, int):boolean A[MD:(java.lang.CharSequence, int, int):boolean (m)]\l0x000d: NEW_INSTANCE  (r1 I:android.text.SpannableStringBuilder) =  android.text.SpannableStringBuilder  (LINE:413)\l0x000f: INVOKE  (r1 I:android.text.SpannableStringBuilder) type: DIRECT call: android.text.SpannableStringBuilder.\<init\>():void A[MD:():void (c)]\l0x0012: INVOKE  (r2 I:boolean) = (r3 I:androidx.core.text.BidiFormatter) type: VIRTUAL call: androidx.core.text.BidiFormatter.getStereoReset():boolean A[MD:():boolean (m)] (LINE:414)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0029 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|0x0018: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isolate' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0029 \l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isRtl' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0020  (LINE:416)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|0x001d: SGET  (r2 I:androidx.core.text.TextDirectionHeuristicCompat) =  androidx.core.text.TextDirectionHeuristicsCompat.RTL androidx.core.text.TextDirectionHeuristicCompat \l}"];
Node_36 [shape=record,label="{36\:\ 0x0022|0x0022: INVOKE  (r2 I:java.lang.String) = \l  (r3 I:androidx.core.text.BidiFormatter)\l  (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)])\l  (r2 I:androidx.core.text.TextDirectionHeuristicCompat)\l type: DIRECT call: androidx.core.text.BidiFormatter.markBefore(java.lang.CharSequence, androidx.core.text.TextDirectionHeuristicCompat):java.lang.String A[MD:(java.lang.CharSequence, androidx.core.text.TextDirectionHeuristicCompat):java.lang.String (m)] (LINE:415)\l0x0026: INVOKE  \l  (r1 I:android.text.SpannableStringBuilder A[D('result' android.text.SpannableStringBuilder)])\l  (r2 I:java.lang.CharSequence)\l type: VIRTUAL call: android.text.SpannableStringBuilder.append(java.lang.CharSequence):android.text.SpannableStringBuilder A[MD:(java.lang.CharSequence):android.text.SpannableStringBuilder (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0020|0x0020: SGET  (r2 I:androidx.core.text.TextDirectionHeuristicCompat) =  androidx.core.text.TextDirectionHeuristicsCompat.LTR androidx.core.text.TextDirectionHeuristicCompat \l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|0x0029: IGET  (r2 I:boolean) = (r3 I:androidx.core.text.BidiFormatter) androidx.core.text.BidiFormatter.mIsRtlContext boolean  (LINE:418)\l}"];
Node_38 [shape=record,label="{38\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isRtl' boolean)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0040 \l}"];
Node_39 [shape=record,label="{39\:\ 0x002d|0x002d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isRtl' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0032  (LINE:419)\l}"];
Node_40 [shape=record,label="{40\:\ 0x002f|0x002f: CONST  (r2 I:??[int, float, short, byte, char]) = (8235(0x202b, float:1.154E\-41) ??[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|0x0034: INVOKE  (r1 I:android.text.SpannableStringBuilder A[D('result' android.text.SpannableStringBuilder)]), (r2 I:char) type: VIRTUAL call: android.text.SpannableStringBuilder.append(char):android.text.SpannableStringBuilder A[MD:(char):android.text.SpannableStringBuilder (c)]\l0x0037: INVOKE  \l  (r1 I:android.text.SpannableStringBuilder A[D('result' android.text.SpannableStringBuilder)])\l  (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)])\l type: VIRTUAL call: android.text.SpannableStringBuilder.append(java.lang.CharSequence):android.text.SpannableStringBuilder A[MD:(java.lang.CharSequence):android.text.SpannableStringBuilder (c)] (LINE:420)\l0x003a: CONST  (r2 I:??[int, float, short, byte, char]) = (8236(0x202c, float:1.1541E\-41) ??[int, float, short, byte, char])  (LINE:421)\l0x003c: INVOKE  (r1 I:android.text.SpannableStringBuilder A[D('result' android.text.SpannableStringBuilder)]), (r2 I:char) type: VIRTUAL call: android.text.SpannableStringBuilder.append(char):android.text.SpannableStringBuilder A[MD:(char):android.text.SpannableStringBuilder (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0043|0x0043: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isolate' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:49:0x0054  (LINE:425)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0046|0x0046: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isRtl' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x004b  (LINE:427)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0048|0x0048: SGET  (r2 I:androidx.core.text.TextDirectionHeuristicCompat) =  androidx.core.text.TextDirectionHeuristicsCompat.RTL androidx.core.text.TextDirectionHeuristicCompat \l}"];
Node_48 [shape=record,label="{48\:\ 0x004d|0x004d: INVOKE  (r2 I:java.lang.String) = \l  (r3 I:androidx.core.text.BidiFormatter)\l  (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)])\l  (r2 I:androidx.core.text.TextDirectionHeuristicCompat)\l type: DIRECT call: androidx.core.text.BidiFormatter.markAfter(java.lang.CharSequence, androidx.core.text.TextDirectionHeuristicCompat):java.lang.String A[MD:(java.lang.CharSequence, androidx.core.text.TextDirectionHeuristicCompat):java.lang.String (m)] (LINE:426)\l0x0051: INVOKE  \l  (r1 I:android.text.SpannableStringBuilder A[D('result' android.text.SpannableStringBuilder)])\l  (r2 I:java.lang.CharSequence)\l type: VIRTUAL call: android.text.SpannableStringBuilder.append(java.lang.CharSequence):android.text.SpannableStringBuilder A[MD:(java.lang.CharSequence):android.text.SpannableStringBuilder (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x004b|0x004b: SGET  (r2 I:androidx.core.text.TextDirectionHeuristicCompat) =  androidx.core.text.TextDirectionHeuristicsCompat.LTR androidx.core.text.TextDirectionHeuristicCompat \l}"];
Node_49 [shape=record,label="{49\:\ 0x0054|RETURN\l|0x0054: RETURN  (r1 I:java.lang.CharSequence A[D('result' android.text.SpannableStringBuilder)])  (LINE:429)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0032|0x0032: CONST  (r2 I:??[int, float, short, byte, char]) = (8234(0x202a, float:1.1538E\-41) ??[int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0040|0x0040: INVOKE  \l  (r1 I:android.text.SpannableStringBuilder A[D('result' android.text.SpannableStringBuilder)])\l  (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence)])\l type: VIRTUAL call: android.text.SpannableStringBuilder.append(java.lang.CharSequence):android.text.SpannableStringBuilder A[MD:(java.lang.CharSequence):android.text.SpannableStringBuilder (c)] (LINE:423)\l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence androidx.core.text.BidiFormatter.unicodeWrap((r3 'this' I:androidx.core.text.BidiFormatter A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.CharSequence A[D('str' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:androidx.core.text.TextDirectionHeuristicCompat A[D('heuristic' androidx.core.text.TextDirectionHeuristicCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('isolate' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:49:0x0054 \-\> B:26:?, CROSS_EDGE: B:47:0x004b \-\> B:48:0x004d, CROSS_EDGE: B:44:0x0043 \-\> B:49:0x0054, CROSS_EDGE: B:41:0x0032 \-\> B:42:0x0034, CROSS_EDGE: B:43:0x0040 \-\> B:44:0x0043, CROSS_EDGE: B:35:0x0020 \-\> B:36:0x0022, CROSS_EDGE: B:32:0x0018 \-\> B:37:0x0029, CROSS_EDGE: B:31:0x0016 \-\> B:37:0x0029\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0054: r0 'isRtl' Z\l  0x0012\-0x0054: r1 'result' Landroid\/text\/SpannableStringBuilder;\l  \-1 \-0x0054: r4 'str' Ljava\/lang\/CharSequence;\l  \-1 \-0x0054: r5 'heuristic' Landroidx\/core\/text\/TextDirectionHeuristicCompat;\l  \-1 \-0x0054: r6 'isolate' Z\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_26;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_43;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_49;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_47 -> Node_48;
Node_49 -> Node_26;
Node_41 -> Node_42;
Node_43 -> Node_44;
}

