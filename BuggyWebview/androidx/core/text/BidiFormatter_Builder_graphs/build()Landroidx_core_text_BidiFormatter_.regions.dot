digraph "CFG forandroidx.core.text.BidiFormatter.Builder.build()Landroidx\/core\/text\/BidiFormatter;" {
subgraph cluster_Region_756361954 {
label = "R(1:(2:(1:6)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_496806154 {
label = "R(2:(1:6)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1210450433 {
label = "IF [B:13:0x0003, B:15:0x0009] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0003|if (r4.mFlags == 2) goto L3\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|ADDED_TO_REGION\l|if (r4.mTextDirectionHeuristicCompat == androidx.core.text.BidiFormatter.DEFAULT_TEXT_DIRECTION_HEURISTIC) goto L5\l}"];
subgraph cluster_Region_1607879360 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0011|RETURN\l|return getDefaultInstanceFromContext(r4.mIsRtlContext)\l}"];
}
}
subgraph cluster_Region_1536178658 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x001d|RETURN\l|return new androidx.core.text.BidiFormatter(r4.mIsRtlContext, r4.mFlags, r4.mTextDirectionHeuristicCompat)\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0005}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000b}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0012}"];
MethodNode[shape=record,label="{public androidx.core.text.BidiFormatter androidx.core.text.BidiFormatter.Builder.build((r4v0 'this' androidx.core.text.BidiFormatter$Builder A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001d \-\> B:11:?, CROSS_EDGE: B:13:0x0003 \-\> B:18:0x0012\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

