digraph "CFG forandroidx.core.text.TextUtilsCompat.getLayoutDirectionFromLocale(Ljava\/util\/Locale;)I" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:92)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (17 ??[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:30:0x000b \l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r2 I:java.util.Locale A[D('locale' java.util.Locale)]) type: STATIC call: androidx.core.text.TextUtilsCompat.Api17Impl.getLayoutDirectionFromLocale(java.util.Locale):int A[MD:(java.util.Locale):int (m)] (LINE:93)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:int) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|0x000b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('locale' java.util.Locale)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0032  (LINE:95)\l}"];
Node_31 [shape=record,label="{31\:\ 0x000d|0x000d: SGET  (r0 I:java.util.Locale) =  androidx.core.text.TextUtilsCompat.ROOT java.util.Locale \l0x000f: INVOKE  (r0 I:boolean) = (r2 I:java.util.Locale A[D('locale' java.util.Locale)]), (r0 I:java.lang.Object) type: VIRTUAL call: java.util.Locale.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:? \l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.String) = (r2 I:java.util.Locale A[D('locale' java.util.Locale)]) type: STATIC call: androidx.core.text.ICUCompat.maximizeAndGetScript(java.util.Locale):java.lang.String A[MD:(java.util.Locale):java.lang.String (m)] (LINE:96)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scriptSubtag' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0020  (LINE:97)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|0x001b: INVOKE  (r1 I:int) = (r2 I:java.util.Locale A[D('locale' java.util.Locale)]) type: STATIC call: androidx.core.text.TextUtilsCompat.getLayoutDirectionFromFirstChar(java.util.Locale):int A[MD:(java.util.Locale):int (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0020|0x0020: CONST_STR  (r1 I:java.lang.String) =  \"Arab\"  (LINE:101)\l0x0022: INVOKE  (r1 I:boolean) = (r0 I:java.lang.String A[D('scriptSubtag' java.lang.String)]), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.String.equalsIgnoreCase(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0030 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0028|0x0028: CONST_STR  (r1 I:java.lang.String) =  \"Hebr\"  (LINE:102)\l0x002a: INVOKE  (r1 I:boolean) = (r0 I:java.lang.String A[D('scriptSubtag' java.lang.String)]), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.String.equalsIgnoreCase(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x002e|0x002e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:? \l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x0030: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) A[SYNTHETIC] (LINE:103)\l0x0031: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0032: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scriptSubtag' java.lang.String)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:106)\l0x0033: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:103)\l0x0031: RETURN  (r1 I:int) \l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x0032: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scriptSubtag' java.lang.String)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:106)\l0x0033: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0032|RETURN\lORIG_RETURN\l|0x0032: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('scriptSubtag' java.lang.String)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:106)\l0x0033: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static int androidx.core.text.TextUtilsCompat.getLayoutDirectionFromLocale((r2 I:java.util.Locale A[D('locale' java.util.Locale), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:36:0x001f \-\> B:25:?, CROSS_EDGE: B:42:0x0031 \-\> B:25:?, CROSS_EDGE: B:44:0x0033 \-\> B:25:?, CROSS_EDGE: B:38:0x0026 \-\> B:41:0x0030, CROSS_EDGE: B:32:0x0013 \-\> B:43:0x0032, CROSS_EDGE: B:30:0x000b \-\> B:43:0x0032\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0032: r0 'scriptSubtag' Ljava\/lang\/String;\l  \-1 \-0x0033: r2 'locale' Ljava\/util\/Locale;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_25;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_43;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_46;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_35 -> Node_36;
Node_36 -> Node_25;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_41;
Node_39 -> Node_40;
Node_40 -> Node_45[style=dashed];
Node_40 -> Node_47;
Node_45 -> Node_25;
Node_47 -> Node_25;
Node_41 -> Node_25;
Node_46 -> Node_25;
Node_43 -> Node_25;
}

