digraph "CFG forandroidx.core.text.SpannableStringBuilderKt.inSpans(Landroid\/text\/SpannableStringBuilder;[Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Landroid\/text\/SpannableStringBuilder;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"spans\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"builderAction\")\lint r1 = r7.length()\lr9.invoke(r7)\lint r2 = r8.length\lr3 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0019|LOOP_START\lLOOP:0: B:3:0x0019\-\>B:4:0x001b\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:2:0x0000, B:4:0x001b] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|LOOP_END\lLOOP:0: B:3:0x0019\-\>B:4:0x001b\l|r4 = r8[r3]\lr7.setSpan(r4, r1, r7.length(), 17)\lint r3 = r3 + 1\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|RETURN\l|return r7\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final android.text.SpannableStringBuilder androidx.core.text.SpannableStringBuilderKt.inSpans((r7v0 '$this$inSpans' android.text.SpannableStringBuilder A[D('$this$inSpans' android.text.SpannableStringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'spans' java.lang.Object[] A[D('spans' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'builderAction' kotlin.jvm.functions.Function1\<? super android.text.SpannableStringBuilder, kotlin.Unit\> A[D('builderAction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x001b \-\> B:3:0x0019\lTYPE_VARS: EMPTY\lSIGNATURE: (Landroid\/text\/SpannableStringBuilder;[Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1\<\-Landroid\/text\/SpannableStringBuilder;Lkotlin\/Unit;\>;)Landroid\/text\/SpannableStringBuilder;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_3;
Node_6 -> Node_5;
Node_5 -> Node_1;
}

