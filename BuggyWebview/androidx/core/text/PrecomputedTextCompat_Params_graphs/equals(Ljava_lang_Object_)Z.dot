digraph "CFG forandroidx.core.text.PrecomputedTextCompat.Params.equals(Ljava\/lang\/Object;)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0001|if (r6 != r5) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|RETURN\l|return true\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0004}"];
Node_23 [shape=record,label="{23\:\ 0x0007|if ((r6 instanceof androidx.core.text.PrecomputedTextCompat.Params) != false) goto L8\l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|RETURN\l|return false\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|androidx.core.text.PrecomputedTextCompat$Params r1 = (androidx.core.text.PrecomputedTextCompat.Params) r6\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|if (equalsWithoutTextDirection(r1) != false) goto L11\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|RETURN\l|return false\l}"];
Node_28 [shape=record,label="{28\:\ 0x0014}"];
Node_29 [shape=record,label="{29\:\ 0x0018|if (android.os.Build.VERSION.SDK_INT \< 18) goto L16\l}"];
Node_30 [shape=record,label="{30\:\ 0x001a}"];
Node_31 [shape=record,label="{31\:\ 0x0020|if (r5.mTextDir == r1.getTextDirection()) goto L16\l}"];
Node_32 [shape=record,label="{32\:\ 0x0022|RETURN\l|return false\l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean androidx.core.text.PrecomputedTextCompat.Params.equals((r5v0 'this' androidx.core.text.PrecomputedTextCompat$Params A[IMMUTABLE_TYPE, THIS]), (r6v0 'o' java.lang.Object A[D('o' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0009 \-\> B:18:?, CROSS_EDGE: B:27:0x0013 \-\> B:18:?, CROSS_EDGE: B:32:0x0022 \-\> B:18:?, CROSS_EDGE: B:33:0x0023 \-\> B:18:?, CROSS_EDGE: B:29:0x0018 \-\> B:33:0x0023\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_18;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_18;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_18;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_18;
Node_33 -> Node_18;
}

