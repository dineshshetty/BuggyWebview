digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.AnyStrong.checkRtl(Ljava\/lang\/CharSequence;II)I" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|r0 = false\lr1 = r6\lint r2 = r6 + r7\l}"];
Node_32 [shape=record,label="{32\:\ 0x0004|LOOP_START\lLOOP:0: B:32:0x0004\-\>B:46:0x0026\lPHI: r0 r1 \l  PHI: (r0v1 'haveUnlookedFor' boolean) = (r0v0 'haveUnlookedFor' boolean), (r0v3 'haveUnlookedFor' boolean) binds: [B:31:0x0000, B:46:0x0026] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v4 'i' int) binds: [B:31:0x0000, B:46:0x0026] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r2) goto L20\l}"];
Node_33 [shape=record,label="{33\:\ 0x0006}"];
Node_34 [shape=record,label="{34\:\ 0x0012|switch(androidx.core.text.TextDirectionHeuristicsCompat.isRtlText(java.lang.Character.getDirectionality(r5.charAt(r1)))) \{\l    case 0: goto L13;\l    case 1: goto L5;\l    default: goto L19;\l\}\l}"];
Node_36 [shape=record,label="{36\:\ 0x0016}"];
Node_37 [shape=record,label="{37\:\ 0x0018|if (r4.mLookForRtl != false) goto L7\l}"];
Node_40 [shape=record,label="{40\:\ 0x001c|r0 = true\l}"];
Node_56 [shape=record,label="{56\:\ 0x0026|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0026|LOOP_END\lLOOP:0: B:32:0x0004\-\>B:46:0x0026\lPHI: r0 \l  PHI: (r0v3 'haveUnlookedFor' boolean) = (r0v1 'haveUnlookedFor' boolean), (r0v2 'haveUnlookedFor' boolean), (r0v4 'haveUnlookedFor' boolean) binds: [B:57:0x0026, B:55:0x0026, B:56:0x0026] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r1 + 1\l}"];
Node_54 [shape=record,label="{54\:\ 0x001a|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x001a|RETURN\l|return 1\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x001e}"];
Node_42 [shape=record,label="{42\:\ 0x0020|if (r4.mLookForRtl == false) goto L15\l}"];
Node_45 [shape=record,label="{45\:\ 0x0024|r0 = true\l}"];
Node_55 [shape=record,label="{55\:\ 0x0026|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0022|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0022|RETURN\l|return 0\l}"];
Node_57 [shape=record,label="{57\:\ 0x0026|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x0029|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0029|if (r0 == false) goto L24\l}"];
Node_48 [shape=record,label="{48\:\ 0x002b}"];
Node_49 [shape=record,label="{49\:\ 0x002d|RETURN\l|return r4.mLookForRtl ? 1 : 0\l}"];
Node_50 [shape=record,label="{50\:\ 0x002e|RETURN\l|return 2\l}"];
MethodNode[shape=record,label="{public int androidx.core.text.TextDirectionHeuristicsCompat.AnyStrong.checkRtl((r4v0 'this' androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong A[IMMUTABLE_TYPE, THIS]), (r5v0 'cs' java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'count' int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0026 \-\> B:32:0x0004, CROSS_EDGE: B:44:0x0023 \-\> B:30:?, CROSS_EDGE: B:45:0x0024 \-\> B:46:0x0026, CROSS_EDGE: B:34:0x0012 \-\> B:46:0x0026, CROSS_EDGE: B:49:0x002d \-\> B:30:?, CROSS_EDGE: B:51:0x002f \-\> B:30:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm.checkRtl(java.lang.CharSequence, int, int):int]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_53;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_41;
Node_34 -> Node_57;
Node_36 -> Node_37;
Node_37 -> Node_40;
Node_37 -> Node_54[style=dashed];
Node_40 -> Node_56;
Node_56 -> Node_46;
Node_46 -> Node_32;
Node_54 -> Node_38;
Node_38 -> Node_30;
Node_41 -> Node_42;
Node_42 -> Node_45;
Node_42 -> Node_52[style=dashed];
Node_45 -> Node_55;
Node_55 -> Node_46;
Node_52 -> Node_43;
Node_43 -> Node_30;
Node_57 -> Node_46;
Node_53 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_30;
Node_50 -> Node_30;
}

