digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.AnyStrong.checkRtl(Ljava\/lang\/CharSequence;II)I" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:206)\l0x0001: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:207)\l0x0002: ARITH  (r2 I:int) = (r6 I:int A[D('start' int)]) + (r7 I:int A[D('count' int)]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0004|LOOP_START\lLOOP:0: B:32:0x0004\-\>B:46:0x0026\l|0x0004: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char] A[D('e' int)])  \-\> B:53:0x0029 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0006|0x0006: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)]), (r1 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:208)\l0x000a: INVOKE  (r3 I:byte) = (r3 I:char) type: STATIC call: java.lang.Character.getDirectionality(char):byte A[MD:(char):byte (c)]\l0x000e: INVOKE  (r3 I:int) = (r3 I:int) type: STATIC call: androidx.core.text.TextDirectionHeuristicsCompat.isRtlText(int):int A[MD:(int):int (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0012|0x0012: SWITCH  (r3 I:??)\l case 0: goto B:41:0x001e\l case 1: goto B:36:0x0016\l default: goto B:57:0x0026 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0016|0x0016: IGET  (r3 I:boolean) = (r4 I:androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong) androidx.core.text.TextDirectionHeuristicsCompat.AnyStrong.mLookForRtl boolean  (LINE:216)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0018|0x0018: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x001c \l}"];
Node_40 [shape=record,label="{40\:\ 0x001c|0x001c: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('haveUnlookedFor' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:219)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0026|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0026|LOOP_END\lLOOP:0: B:32:0x0004\-\>B:46:0x0026\l|0x0026: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:207)\l}"];
Node_54 [shape=record,label="{54\:\ 0x001a|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x001a|RETURN\l|0x001a: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:217)\l0x001b: RETURN  (r3 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x001e|0x001e: IGET  (r3 I:boolean) = (r4 I:androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong) androidx.core.text.TextDirectionHeuristicsCompat.AnyStrong.mLookForRtl boolean  (LINE:210)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|0x0020: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0024 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0024|0x0024: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('haveUnlookedFor' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:213)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0026|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0022|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0022|RETURN\l|0x0022: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:211)\l0x0023: RETURN  (r3 I:int) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0026|SYNTHETIC\l}"];
Node_53 [shape=record,label="{53\:\ 0x0029|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0029|0x0029: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('haveUnlookedFor' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x002e  (LINE:225)\l}"];
Node_48 [shape=record,label="{48\:\ 0x002b|0x002b: IGET  (r1 I:boolean) = (r4 I:androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong) androidx.core.text.TextDirectionHeuristicsCompat.AnyStrong.mLookForRtl boolean  (LINE:226)\l}"];
Node_49 [shape=record,label="{49\:\ 0x002d|RETURN\l|0x002d: RETURN  (r1 I:int) \l}"];
Node_50 [shape=record,label="{50\:\ 0x002e|RETURN\l|0x002e: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:228)\l0x002f: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public int androidx.core.text.TextDirectionHeuristicsCompat.AnyStrong.checkRtl((r4 'this' I:androidx.core.text.TextDirectionHeuristicsCompat$AnyStrong A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0026 \-\> B:32:0x0004, CROSS_EDGE: B:44:0x0023 \-\> B:30:?, CROSS_EDGE: B:45:0x0024 \-\> B:46:0x0026, CROSS_EDGE: B:34:0x0012 \-\> B:46:0x0026, CROSS_EDGE: B:49:0x002d \-\> B:30:?, CROSS_EDGE: B:51:0x002f \-\> B:30:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0029: r1 'i' I\l  0x0004\-0x0029: r2 'e' I\l  0x0001\-0x0037: r0 'haveUnlookedFor' Z\l  \-1 \-0x0037: r5 'cs' Ljava\/lang\/CharSequence;\l  \-1 \-0x0037: r6 'start' I\l  \-1 \-0x0037: r7 'count' I\lMETHOD_OVERRIDE: [androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm.checkRtl(java.lang.CharSequence, int, int):int]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_53;
Node_33 -> Node_34;
Node_34 -> Node_36;
Node_34 -> Node_41;
Node_34 -> Node_57;
Node_36 -> Node_37;
Node_37 -> Node_40;
Node_37 -> Node_54[style=dashed];
Node_40 -> Node_56;
Node_56 -> Node_46;
Node_46 -> Node_32;
Node_54 -> Node_38;
Node_38 -> Node_30;
Node_41 -> Node_42;
Node_42 -> Node_45;
Node_42 -> Node_52[style=dashed];
Node_45 -> Node_55;
Node_55 -> Node_46;
Node_52 -> Node_43;
Node_43 -> Node_30;
Node_57 -> Node_46;
Node_53 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_50;
Node_48 -> Node_49;
Node_49 -> Node_30;
Node_50 -> Node_30;
}

