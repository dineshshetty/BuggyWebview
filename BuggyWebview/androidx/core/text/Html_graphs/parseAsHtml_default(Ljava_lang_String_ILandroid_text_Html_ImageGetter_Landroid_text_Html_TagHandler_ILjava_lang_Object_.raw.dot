digraph "CFG forandroidx.core.text.HtmlKt.parseAsHtml$default(Ljava\/lang\/String;ILandroid\/text\/Html$ImageGetter;Landroid\/text\/Html$TagHandler;ILjava\/lang\/Object;)Landroid\/text\/Spanned;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:39)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0005 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('flags' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:40)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:39)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('imageGetter' android.text.Html$ImageGetter)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:41)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char])  (LINE:39)\l}"];
Node_9 [shape=record,label="{9\:\ 0x000c|0x000c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x000f \l}"];
Node_10 [shape=record,label="{10\:\ 0x000e|0x000e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tagHandler' android.text.Html$TagHandler)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:42)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|0x000f: CONST_STR  (r5 I:java.lang.String) =  \"\<this\>\"  (LINE:39)\l0x0011: INVOKE  (r1 I:java.lang.Object A[D('$this$parseAsHtml_u24default' java.lang.String)]), (r5 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  (r6 I:android.text.Spanned) = \l  (r1 I:java.lang.String A[D('$this$parseAsHtml_u24default' java.lang.String)])\l  (r2 I:int A[D('flags' int)])\l  (r3 I:android.text.Html$ImageGetter A[D('imageGetter' android.text.Html$ImageGetter)])\l  (r4 I:android.text.Html$TagHandler A[D('tagHandler' android.text.Html$TagHandler)])\l type: STATIC call: androidx.core.text.HtmlCompat.fromHtml(java.lang.String, int, android.text.Html$ImageGetter, android.text.Html$TagHandler):android.text.Spanned A[MD:(java.lang.String, int, android.text.Html$ImageGetter, android.text.Html$TagHandler):android.text.Spanned (m)] (LINE:43)\l0x0019: CONST_STR  (r0 I:java.lang.String) =  \"fromHtml(this, flags, imageGetter, tagHandler)\" \l0x001b: INVOKE  (r6 I:java.lang.Object), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|RETURN\l|0x001e: RETURN  (r6 I:android.text.Spanned) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ android.text.Spanned androidx.core.text.HtmlKt.parseAsHtml$default((r1 I:java.lang.String A[D('$this$parseAsHtml_u24default' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('flags' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.text.Html$ImageGetter A[D('imageGetter' android.text.Html$ImageGetter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.text.Html$TagHandler A[D('tagHandler' android.text.Html$TagHandler), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:9:0x000c \-\> B:11:0x000f, CROSS_EDGE: B:6:0x0007 \-\> B:8:0x000a, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0005\lDebug Info:\l  \-1 \-0x001e: r1 '$this$parseAsHtml_u24default' Ljava\/lang\/String;\l  \-1 \-0x001e: r2 'flags' I\l  \-1 \-0x001e: r3 'imageGetter' Landroid\/text\/Html$ImageGetter;\l  \-1 \-0x001e: r4 'tagHandler' Landroid\/text\/Html$TagHandler;\l  0x0015\-0x001e: r5 '$i$f$parseAsHtml' I\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [39=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

