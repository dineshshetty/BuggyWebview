digraph "CFG forandroidx.core.text.PrecomputedTextCompat.Params.Builder.build()Landroidx\/core\/text\/PrecomputedTextCompat$Params;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:androidx.core.text.PrecomputedTextCompat$Params) =  androidx.core.text.PrecomputedTextCompat$Params  (LINE:191)\l0x0002: IGET  (r1 I:android.text.TextPaint) = (r5 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mPaint android.text.TextPaint \l0x0004: IGET  (r2 I:android.text.TextDirectionHeuristic) = (r5 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mTextDir android.text.TextDirectionHeuristic \l0x0006: IGET  (r3 I:int) = (r5 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mBreakStrategy int \l0x0008: IGET  (r4 I:int) = (r5 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mHyphenationFrequency int \l0x000a: INVOKE  \l  (r0 I:androidx.core.text.PrecomputedTextCompat$Params)\l  (r1 I:android.text.TextPaint)\l  (r2 I:android.text.TextDirectionHeuristic)\l  (r3 I:int)\l  (r4 I:int)\l type: DIRECT call: androidx.core.text.PrecomputedTextCompat.Params.\<init\>(android.text.TextPaint, android.text.TextDirectionHeuristic, int, int):void A[MD:(android.text.TextPaint, android.text.TextDirectionHeuristic, int, int):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:androidx.core.text.PrecomputedTextCompat$Params) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.core.text.PrecomputedTextCompat$Params androidx.core.text.PrecomputedTextCompat.Params.Builder.build((r5 'this' I:androidx.core.text.PrecomputedTextCompat$Params$Builder A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

