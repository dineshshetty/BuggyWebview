digraph "CFG forandroidx.core.text.PrecomputedTextCompat.Params.Builder.\<init\>(Landroid\/text\/TextPaint;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r2 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:116)\l0x0003: IPUT  \l  (r3 I:android.text.TextPaint A[D('paint' android.text.TextPaint)])\l  (r2 I:androidx.core.text.PrecomputedTextCompat$Params$Builder)\l androidx.core.text.PrecomputedTextCompat.Params.Builder.mPaint android.text.TextPaint  (LINE:117)\l0x0005: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:118)\l0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (23 ??[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|0x0009: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:17:0x0011 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|0x000b: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:119)\l0x000c: IPUT  (r0 I:int), (r2 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mBreakStrategy int \l0x000e: IPUT  (r0 I:int), (r2 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mHyphenationFrequency int  (LINE:120)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|0x0016: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:124)\l0x0018: CONST  (r1 I:??[int, float, short, byte, char]) = (18 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|0x001a: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:21:0x0021 \l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|0x001c: SGET  (r0 I:android.text.TextDirectionHeuristic) =  android.text.TextDirectionHeuristics.FIRSTSTRONG_LTR android.text.TextDirectionHeuristic  (LINE:125)\l0x001e: IPUT  (r0 I:android.text.TextDirectionHeuristic), (r2 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mTextDir android.text.TextDirectionHeuristic \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN   A[SYNTHETIC] (LINE:129)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0021|0x0021: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:127)\l0x0022: IPUT  (r0 I:android.text.TextDirectionHeuristic), (r2 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mTextDir android.text.TextDirectionHeuristic \l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: RETURN    (LINE:129)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:122)\l0x0012: IPUT  (r0 I:int), (r2 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mHyphenationFrequency int \l0x0014: IPUT  (r0 I:int), (r2 I:androidx.core.text.PrecomputedTextCompat$Params$Builder) androidx.core.text.PrecomputedTextCompat.Params.Builder.mBreakStrategy int \l}"];
MethodNode[shape=record,label="{public void androidx.core.text.PrecomputedTextCompat.Params.Builder.\<init\>((r2 'this' I:androidx.core.text.PrecomputedTextCompat$Params$Builder A[IMMUTABLE_TYPE, THIS]), (r3 I:android.text.TextPaint A[D('paint' android.text.TextPaint), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0021 \-\> B:22:0x0024, CROSS_EDGE: B:17:0x0011 \-\> B:18:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0024: r3 'paint' Landroid\/text\/TextPaint;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
Node_17 -> Node_18;
}

