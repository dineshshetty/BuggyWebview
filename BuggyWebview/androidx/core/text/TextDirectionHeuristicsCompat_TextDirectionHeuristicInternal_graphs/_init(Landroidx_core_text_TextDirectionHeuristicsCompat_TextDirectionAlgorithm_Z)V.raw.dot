digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicInternal.\<init\>(Landroidx\/core\/text\/TextDirectionHeuristicsCompat$TextDirectionAlgorithm;Z)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  \l  (r0 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl)\l  (r1 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm A[D('algorithm' androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm)])\l type: DIRECT call: androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.\<init\>(androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm):void A[MD:(androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm):void (m)] (LINE:156)\l0x0003: IPUT  \l  (r2 I:boolean A[D('defaultIsRtl' boolean)])\l  (r0 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal)\l androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicInternal.mDefaultIsRtl boolean  (LINE:157)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:158)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicInternal.\<init\>((r0 'this' I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicInternal A[IMMUTABLE_TYPE, THIS]), (r1 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm A[D('algorithm' androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[D('defaultIsRtl' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0005: r1 'algorithm' Landroidx\/core\/text\/TextDirectionHeuristicsCompat$TextDirectionAlgorithm;\l  \-1 \-0x0005: r2 'defaultIsRtl' Z\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

