digraph "CFG forandroidx.core.text.BidiFormatter.DirectionalityEstimator.\<clinit\>()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (1792(0x700, float:2.511E\-42) ??[int, float, short, byte, char])  (LINE:584)\l0x0002: NEW_ARRAY  (r1 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0004: SPUT  (r1 I:byte[]) androidx.core.text.BidiFormatter.DirectionalityEstimator.DIR_TYPE_CACHE byte[] \l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:585)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0007|LOOP_START\lLOOP:0: B:10:0x0007\-\>B:11:0x0009\l|0x0007: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:13:0x0014 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|LOOP_END\lLOOP:0: B:10:0x0007\-\>B:11:0x0009\l|0x0009: SGET  (r2 I:byte[]) =  androidx.core.text.BidiFormatter.DirectionalityEstimator.DIR_TYPE_CACHE byte[]  (LINE:586)\l0x000b: INVOKE  (r3 I:byte) = (r1 I:int A[D('i' int)]) type: STATIC call: java.lang.Character.getDirectionality(int):byte A[MD:(int):byte (c)]\l0x000f: APUT  (r2 I:byte[] A[IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:byte A[IMMUTABLE_TYPE]) \l0x0011: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:585)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|RETURN\l|0x0014: RETURN    (LINE:588)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void androidx.core.text.BidiFormatter.DirectionalityEstimator.\<clinit\>()  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0009 \-\> B:10:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x0014: r1 'i' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_10;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

