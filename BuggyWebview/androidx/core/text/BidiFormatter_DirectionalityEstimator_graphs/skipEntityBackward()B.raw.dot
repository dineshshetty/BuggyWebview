digraph "CFG forandroidx.core.text.BidiFormatter.DirectionalityEstimator.skipEntityBackward()B" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r4 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.charIndex int  (LINE:944)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|LOOP_START\lLOOP:0: B:18:0x0002\-\>B:24:0x001b\l|0x0002: IGET  (r1 I:int) = (r4 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.charIndex int  (LINE:945)\l0x0004: CONST  (r2 I:??[int, float, short, byte, char]) = (59 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: IF  (r1 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:28:0x001d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0008: IGET  (r3 I:java.lang.CharSequence) = (r4 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.text java.lang.CharSequence  (LINE:946)\l0x000a: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x000c: IPUT  (r1 I:int), (r4 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.charIndex int \l0x000e: INVOKE  (r1 I:char) = (r3 I:java.lang.CharSequence), (r1 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0012: IPUT  (r1 I:char), (r4 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.lastChar char \l0x0014: CONST  (r3 I:??[int, float, short, byte, char]) = (38 ??[int, float, short, byte, char])  (LINE:947)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001b \l}"];
Node_24 [shape=record,label="{24\:\ 0x001b|LOOP_END\lLOOP:0: B:18:0x0002\-\>B:24:0x001b\l|0x001b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0002  (LINE:950)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|0x001d: IPUT  (r0 I:int A[D('initialCharIndex' int)]), (r4 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.charIndex int  (LINE:954)\l0x001f: IPUT  (r2 I:char), (r4 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.lastChar char  (LINE:955)\l0x0021: CONST  (r1 I:??[int, float, short, byte, char]) = (13 ??[int, float, short, byte, char])  (LINE:956)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0023|RETURN\l|0x0023: RETURN  (r1 I:byte) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|RETURN\l|0x0018: CONST  (r1 I:??[int, float, short, byte, char]) = (12 ??[int, float, short, byte, char])  (LINE:948)\l0x001a: RETURN  (r1 I:byte) \l}"];
Node_28 [shape=record,label="{28\:\ 0x001d|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private byte androidx.core.text.BidiFormatter.DirectionalityEstimator.skipEntityBackward((r4 'this' I:androidx.core.text.BidiFormatter$DirectionalityEstimator A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x001b \-\> B:18:0x0002, CROSS_EDGE: B:26:0x0023 \-\> B:16:?, CROSS_EDGE: B:19:0x0006 \-\> B:25:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0023: r0 'initialCharIndex' I\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_24;
Node_21 -> Node_27[style=dashed];
Node_24 -> Node_18;
Node_24 -> Node_29[style=dashed];
Node_29 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_27 -> Node_22;
Node_22 -> Node_16;
Node_28 -> Node_25;
}

