digraph "CFG forandroidx.core.text.BidiFormatter.DirectionalityEstimator.getEntryDir()I" {
Node_66 [shape=record,label="{66\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_68 [shape=record,label="{68\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:646)\l0x0001: IPUT  (r0 I:int), (r8 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.charIndex int \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:647)\l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:648)\l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:649)\l}"];
Node_69 [shape=record,label="{69\:\ 0x0006|LOOP_START\lLOOP:0: B:69:0x0006\-\>B:113:0x0006\l|0x0006: IGET  (r4 I:int) = (r8 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.charIndex int  (LINE:650)\l0x0008: IGET  (r5 I:int) = (r8 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.length int \l0x000a: CONST  (r6 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x000b: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x000c|0x000c: IF  (r4 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char])  \-\> B:109:0x0030 \l}"];
Node_71 [shape=record,label="{71\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstNonEmptyEmbeddingLevel' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:110:0x0030 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0010|0x0010: INVOKE  (r4 I:byte) = (r8 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) type: VIRTUAL call: androidx.core.text.BidiFormatter.DirectionalityEstimator.dirTypeForward():byte A[MD:():byte (m)] (LINE:651)\l}"];
Node_73 [shape=record,label="{73\:\ 0x0014|0x0014: SWITCH  (r4 I:??)\l case 0: goto B:108:0x002b\l case 1: goto B:107:0x0026\l case 2: goto B:107:0x0026\l case 9: goto B:114:0x0006\l case 14: goto B:106:0x0021\l case 15: goto B:106:0x0021\l case 16: goto B:105:0x001d\l case 17: goto B:105:0x001d\l case 18: goto B:104:0x0019\l default: goto B:103:0x0017 \l}"];
Node_103 [shape=record,label="{103\:\ 0x0017|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0017|0x0017: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstNonEmptyEmbeddingLevel' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('embeddingLevel' int)])  (LINE:685)\l}"];
Node_115 [shape=record,label="{115\:\ 0x0006|SYNTHETIC\l}"];
Node_113 [shape=record,label="{113\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:69:0x0006\-\>B:113:0x0006\l}"];
Node_104 [shape=record,label="{104\:\ 0x0019|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x0019|0x0019: ARITH  (r1 I:int) = (r1 I:int A[D('embeddingLevel' int)]) + (\-1 int)  (LINE:663)\l0x001b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('embeddingLevelDir' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:667)\l}"];
Node_116 [shape=record,label="{116\:\ 0x0006|SYNTHETIC\l}"];
Node_105 [shape=record,label="{105\:\ 0x001d|SYNTHETIC\l}"];
Node_76 [shape=record,label="{76\:\ 0x001d|0x001d: ARITH  (r1 I:int) = (r1 I:int A[D('embeddingLevel' int)]) + (1 int)  (LINE:659)\l0x001f: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('embeddingLevelDir' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:660)\l}"];
Node_117 [shape=record,label="{117\:\ 0x0006|SYNTHETIC\l}"];
Node_106 [shape=record,label="{106\:\ 0x0021|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0021|0x0021: ARITH  (r1 I:int) = (r1 I:int A[D('embeddingLevel' int)]) + (1 int)  (LINE:654)\l0x0023: CONST  (r2 I:??[int, float, short, byte, char] A[D('embeddingLevelDir' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:655)\l}"];
Node_118 [shape=record,label="{118\:\ 0x0006|SYNTHETIC\l}"];
Node_107 [shape=record,label="{107\:\ 0x0026|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x0026|0x0026: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('embeddingLevel' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x0029  (LINE:679)\l}"];
Node_81 [shape=record,label="{81\:\ 0x0029|0x0029: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstNonEmptyEmbeddingLevel' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('embeddingLevel' int)])  (LINE:682)\l}"];
Node_119 [shape=record,label="{119\:\ 0x0006|SYNTHETIC\l}"];
Node_111 [shape=record,label="{111\:\ 0x0028|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x0028|RETURN\l|0x0028: RETURN  (r7 I:int)  (LINE:680)\l}"];
Node_67 [shape=record,label="{67\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_108 [shape=record,label="{108\:\ 0x002b|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x002b|0x002b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('embeddingLevel' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:84:0x002e  (LINE:672)\l}"];
Node_84 [shape=record,label="{84\:\ 0x002e|0x002e: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstNonEmptyEmbeddingLevel' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('embeddingLevel' int)])  (LINE:675)\l}"];
Node_120 [shape=record,label="{120\:\ 0x0006|SYNTHETIC\l}"];
Node_112 [shape=record,label="{112\:\ 0x002d|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x002d|RETURN\l|0x002d: RETURN  (r6 I:int)  (LINE:673)\l}"];
Node_114 [shape=record,label="{114\:\ 0x0006|SYNTHETIC\l}"];
Node_110 [shape=record,label="{110\:\ 0x0030|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0030|0x0030: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstNonEmptyEmbeddingLevel' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:87:0x0033  (LINE:692)\l}"];
Node_86 [shape=record,label="{86\:\ 0x0032|RETURN\l|0x0032: RETURN  (r0 I:int)  (LINE:695)\l}"];
Node_87 [shape=record,label="{87\:\ 0x0033|0x0033: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('embeddingLevelDir' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:0x0036  (LINE:699)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0035|RETURN\l|0x0035: RETURN  (r2 I:int A[D('embeddingLevelDir' int)])  (LINE:701)\l}"];
Node_89 [shape=record,label="{89\:\ 0x0036|LOOP_START\lLOOP:1: B:89:0x0036\-\>B:127:0x0036\l|0x0036: IGET  (r4 I:int) = (r8 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) androidx.core.text.BidiFormatter.DirectionalityEstimator.charIndex int  (LINE:706)\l}"];
Node_90 [shape=record,label="{90\:\ 0x0038|0x0038: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:121:0x0052 \l}"];
Node_91 [shape=record,label="{91\:\ 0x003a|0x003a: INVOKE  (r4 I:byte) = (r8 I:androidx.core.text.BidiFormatter$DirectionalityEstimator) type: VIRTUAL call: androidx.core.text.BidiFormatter.DirectionalityEstimator.dirTypeBackward():byte A[MD:():byte (m)] (LINE:707)\l}"];
Node_92 [shape=record,label="{92\:\ 0x003e|0x003e: SWITCH  (r4 I:??)\l case 14: goto B:124:0x004b\l case 15: goto B:124:0x004b\l case 16: goto B:123:0x0045\l case 17: goto B:123:0x0045\l case 18: goto B:122:0x0042\l default: goto B:128:0x0036 \l}"];
Node_122 [shape=record,label="{122\:\ 0x0042|SYNTHETIC\l}"];
Node_94 [shape=record,label="{94\:\ 0x0042|0x0042: ARITH  (r1 I:int) = (r1 I:int A[D('embeddingLevel' int)]) + (1 int)  (LINE:723)\l}"];
Node_129 [shape=record,label="{129\:\ 0x0036|SYNTHETIC\l}"];
Node_127 [shape=record,label="{127\:\ 0x0036|LOOP_END\lSYNTHETIC\lLOOP:1: B:89:0x0036\-\>B:127:0x0036\l}"];
Node_123 [shape=record,label="{123\:\ 0x0045|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0045|0x0045: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstNonEmptyEmbeddingLevel' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('embeddingLevel' int)])  \-\> B:97:0x0048  (LINE:717)\l}"];
Node_97 [shape=record,label="{97\:\ 0x0048|0x0048: ARITH  (r1 I:int) = (r1 I:int A[D('embeddingLevel' int)]) + (\-1 int)  (LINE:720)\l}"];
Node_130 [shape=record,label="{130\:\ 0x0036|SYNTHETIC\l}"];
Node_125 [shape=record,label="{125\:\ 0x0047|SYNTHETIC\l}"];
Node_96 [shape=record,label="{96\:\ 0x0047|RETURN\l|0x0047: RETURN  (r7 I:int)  (LINE:718)\l}"];
Node_124 [shape=record,label="{124\:\ 0x004b|SYNTHETIC\l}"];
Node_98 [shape=record,label="{98\:\ 0x004b|0x004b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstNonEmptyEmbeddingLevel' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('embeddingLevel' int)])  \-\> B:100:0x004e  (LINE:710)\l}"];
Node_100 [shape=record,label="{100\:\ 0x004e|0x004e: ARITH  (r1 I:int) = (r1 I:int A[D('embeddingLevel' int)]) + (\-1 int)  (LINE:713)\l}"];
Node_131 [shape=record,label="{131\:\ 0x0036|SYNTHETIC\l}"];
Node_126 [shape=record,label="{126\:\ 0x004d|SYNTHETIC\l}"];
Node_99 [shape=record,label="{99\:\ 0x004d|RETURN\l|0x004d: RETURN  (r6 I:int)  (LINE:711)\l}"];
Node_128 [shape=record,label="{128\:\ 0x0036|SYNTHETIC\l}"];
Node_121 [shape=record,label="{121\:\ 0x0052|SYNTHETIC\l}"];
Node_102 [shape=record,label="{102\:\ 0x0052|RETURN\l|0x0052: RETURN  (r0 I:int)  (LINE:728)\l}"];
Node_109 [shape=record,label="{109\:\ 0x0030|SYNTHETIC\l}"];
MethodNode[shape=record,label="{int androidx.core.text.BidiFormatter.DirectionalityEstimator.getEntryDir((r8 'this' I:androidx.core.text.BidiFormatter$DirectionalityEstimator A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:74:0x0017 \-\> B:69:0x0006, BACK_EDGE: B:75:0x0019 \-\> B:69:0x0006, BACK_EDGE: B:76:0x001d \-\> B:69:0x0006, BACK_EDGE: B:77:0x0021 \-\> B:69:0x0006, BACK_EDGE: B:81:0x0029 \-\> B:69:0x0006, CROSS_EDGE: B:83:0x002d \-\> B:67:?, BACK_EDGE: B:84:0x002e \-\> B:69:0x0006, BACK_EDGE: B:73:0x0014 \-\> B:69:0x0006, CROSS_EDGE: B:86:0x0032 \-\> B:67:?, CROSS_EDGE: B:88:0x0035 \-\> B:67:?, BACK_EDGE: B:94:0x0042 \-\> B:89:0x0036, CROSS_EDGE: B:96:0x0047 \-\> B:67:?, BACK_EDGE: B:97:0x0048 \-\> B:89:0x0036, CROSS_EDGE: B:99:0x004d \-\> B:67:?, BACK_EDGE: B:100:0x004e \-\> B:89:0x0036, BACK_EDGE: B:92:0x003e \-\> B:89:0x0036, CROSS_EDGE: B:102:0x0052 \-\> B:67:?, CROSS_EDGE: B:70:0x000c \-\> B:85:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0087: r1 'embeddingLevel' I\l  0x0005\-0x0087: r2 'embeddingLevelDir' I\l  0x0006\-0x0087: r3 'firstNonEmptyEmbeddingLevel' I\l}"];
MethodNode -> Node_66;Node_66 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_109;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_110;
Node_72 -> Node_73;
Node_73 -> Node_103;
Node_73 -> Node_104;
Node_73 -> Node_105;
Node_73 -> Node_106;
Node_73 -> Node_107;
Node_73 -> Node_108;
Node_73 -> Node_114;
Node_103 -> Node_74;
Node_74 -> Node_115;
Node_115 -> Node_113;
Node_113 -> Node_69;
Node_104 -> Node_75;
Node_75 -> Node_116;
Node_116 -> Node_113;
Node_105 -> Node_76;
Node_76 -> Node_117;
Node_117 -> Node_113;
Node_106 -> Node_77;
Node_77 -> Node_118;
Node_118 -> Node_113;
Node_107 -> Node_79;
Node_79 -> Node_81;
Node_79 -> Node_111[style=dashed];
Node_81 -> Node_119;
Node_119 -> Node_113;
Node_111 -> Node_80;
Node_80 -> Node_67;
Node_108 -> Node_82;
Node_82 -> Node_84;
Node_82 -> Node_112[style=dashed];
Node_84 -> Node_120;
Node_120 -> Node_113;
Node_112 -> Node_83;
Node_83 -> Node_67;
Node_114 -> Node_113;
Node_110 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_87;
Node_86 -> Node_67;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_89;
Node_88 -> Node_67;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_121;
Node_91 -> Node_92;
Node_92 -> Node_122;
Node_92 -> Node_123;
Node_92 -> Node_124;
Node_92 -> Node_128;
Node_122 -> Node_94;
Node_94 -> Node_129;
Node_129 -> Node_127;
Node_127 -> Node_89;
Node_123 -> Node_95;
Node_95 -> Node_97;
Node_95 -> Node_125[style=dashed];
Node_97 -> Node_130;
Node_130 -> Node_127;
Node_125 -> Node_96;
Node_96 -> Node_67;
Node_124 -> Node_98;
Node_98 -> Node_100;
Node_98 -> Node_126[style=dashed];
Node_100 -> Node_131;
Node_131 -> Node_127;
Node_126 -> Node_99;
Node_99 -> Node_67;
Node_128 -> Node_127;
Node_121 -> Node_102;
Node_102 -> Node_67;
Node_109 -> Node_85;
}

