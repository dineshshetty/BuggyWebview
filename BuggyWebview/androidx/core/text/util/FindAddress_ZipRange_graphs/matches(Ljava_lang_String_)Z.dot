digraph "CFG forandroidx.core.text.util.FindAddress.ZipRange.matches(Ljava\/lang\/String;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|int r1 = java.lang.Integer.parseInt(r4.substring(0, 2))\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|if (r3.mLow \> r1) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e}"];
Node_18 [shape=record,label="{18\:\ 0x0010|if (r1 \<= r3.mHigh) goto L5\l}"];
Node_23 [shape=record,label="{23\:\ 0x001a|RETURN\lORIG_RETURN\l|return true\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012}"];
Node_20 [shape=record,label="{20\:\ 0x0014|if (r1 == r3.mException1) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016}"];
Node_22 [shape=record,label="{22\:\ 0x0018|if (r1 != r3.mException2) goto L11\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{boolean androidx.core.text.util.FindAddress.ZipRange.matches((r3v0 'this' androidx.core.text.util.FindAddress$ZipRange A[IMMUTABLE_TYPE, THIS]), (r4v0 'zipCode' java.lang.String A[D('zipCode' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0018 \-\> B:24:0x001b, CROSS_EDGE: B:20:0x0014 \-\> B:23:0x001a, CROSS_EDGE: B:18:0x0010 \-\> B:23:0x001a, CROSS_EDGE: B:16:0x000c \-\> B:19:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_23 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_25 -> Node_14;
}

