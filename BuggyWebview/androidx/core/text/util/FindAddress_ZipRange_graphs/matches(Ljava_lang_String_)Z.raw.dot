digraph "CFG forandroidx.core.text.util.FindAddress.ZipRange.matches(Ljava\/lang\/String;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:51)\l0x0001: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0002: INVOKE  (r1 I:java.lang.String) = (r4 I:java.lang.String A[D('zipCode' java.lang.String)]), (r0 I:int), (r1 I:int) type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)]\l0x0006: INVOKE  (r1 I:int) = (r1 I:java.lang.String) type: STATIC call: java.lang.Integer.parseInt(java.lang.String):int A[MD:(java.lang.String):int throws java.lang.NumberFormatException (c)]\l0x000a: IGET  (r2 I:int) = (r3 I:androidx.core.text.util.FindAddress$ZipRange) androidx.core.text.util.FindAddress.ZipRange.mLow int  (LINE:52)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|0x000c: IF  (r2 I:??[int, byte, short, char]) \> (r1 I:??[int, byte, short, char] A[D('prefix' int)])  \-\> B:19:0x0012 \l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|0x000e: IGET  (r2 I:int) = (r3 I:androidx.core.text.util.FindAddress$ZipRange) androidx.core.text.util.FindAddress.ZipRange.mHigh int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|0x0010: IF  (r1 I:??[int, byte, short, char] A[D('prefix' int)]) \<= (r2 I:??[int, byte, short, char])  \-\> B:23:0x001a \l}"];
Node_23 [shape=record,label="{23\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001b: RETURN  (r0 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: IGET  (r2 I:int) = (r3 I:androidx.core.text.util.FindAddress$ZipRange) androidx.core.text.util.FindAddress.ZipRange.mException1 int \l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prefix' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|0x0016: IGET  (r2 I:int) = (r3 I:androidx.core.text.util.FindAddress$ZipRange) androidx.core.text.util.FindAddress.ZipRange.mException2 int \l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|0x0018: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('prefix' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:? \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{boolean androidx.core.text.util.FindAddress.ZipRange.matches((r3 'this' I:androidx.core.text.util.FindAddress$ZipRange A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.String A[D('zipCode' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0018 \-\> B:24:0x001b, CROSS_EDGE: B:20:0x0014 \-\> B:23:0x001a, CROSS_EDGE: B:18:0x0010 \-\> B:23:0x001a, CROSS_EDGE: B:16:0x000c \-\> B:19:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x001b: r1 'prefix' I\l  \-1 \-0x001b: r4 'zipCode' Ljava\/lang\/String;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_23 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_25;
Node_25 -> Node_14;
}

