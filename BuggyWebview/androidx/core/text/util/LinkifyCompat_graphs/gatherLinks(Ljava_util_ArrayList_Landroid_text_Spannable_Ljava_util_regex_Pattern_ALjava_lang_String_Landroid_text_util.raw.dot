digraph "CFG forandroidx.core.text.util.LinkifyCompat.gatherLinks(Ljava\/util\/ArrayList;Landroid\/text\/Spannable;Ljava\/util\/regex\/Pattern;[Ljava\/lang\/String;Landroid\/text\/util\/Linkify$MatchFilter;Landroid\/text\/util\/Linkify$TransformFilter;)V" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.regex.Matcher) = \l  (r8 I:java.util.regex.Pattern A[D('pattern' java.util.regex.Pattern)])\l  (r7 I:java.lang.CharSequence A[D('s' android.text.Spannable)])\l type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)] (LINE:410)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0004|LOOP_START\lLOOP:0: B:24:0x0004\-\>B:38:0x0004\l|0x0004: INVOKE  (r1 I:boolean) = (r0 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.find():boolean A[MD:():boolean (c)] (LINE:412)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0034 \l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r0 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.start():int A[MD:():int (c)] (LINE:413)\l0x000e: INVOKE  (r2 I:int) = (r0 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)] (LINE:414)\l0x0012: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:415)\l0x0013: INVOKE  (r3 I:java.lang.String) = (r0 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]), (r3 I:int) type: VIRTUAL call: java.util.regex.Matcher.group(int):java.lang.String A[MD:(int):java.lang.String (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|0x0017: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matchFilter' android.text.util.Linkify$MatchFilter)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x001f  (LINE:417)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0019|0x0019: INVOKE  (r4 I:boolean) = \l  (r10 I:android.text.util.Linkify$MatchFilter A[D('matchFilter' android.text.util.Linkify$MatchFilter)])\l  (r7 I:java.lang.CharSequence A[D('s' android.text.Spannable)])\l  (r1 I:int A[D('start' int)])\l  (r2 I:int A[D('end' int)])\l type: INTERFACE call: android.text.util.Linkify.MatchFilter.acceptMatch(java.lang.CharSequence, int, int):boolean A[MD:(java.lang.CharSequence, int, int):boolean (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|0x001d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0004 \l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0004 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0021|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0021|0x0021: NEW_INSTANCE  (r4 I:androidx.core.text.util.LinkifyCompat$LinkSpec) =  androidx.core.text.util.LinkifyCompat$LinkSpec  (LINE:418)\l0x0023: INVOKE  (r4 I:androidx.core.text.util.LinkifyCompat$LinkSpec) type: DIRECT call: androidx.core.text.util.LinkifyCompat.LinkSpec.\<init\>():void A[MD:():void (m)]\l0x0026: INVOKE  (r5 I:java.lang.String) = \l  (r3 I:java.lang.String A[D('match' java.lang.String)])\l  (r9 I:java.lang.String[] A[D('schemes' java.lang.String[])])\l  (r0 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)])\l  (r11 I:android.text.util.Linkify$TransformFilter A[D('transformFilter' android.text.util.Linkify$TransformFilter)])\l type: STATIC call: androidx.core.text.util.LinkifyCompat.makeUrl(java.lang.String, java.lang.String[], java.util.regex.Matcher, android.text.util.Linkify$TransformFilter):java.lang.String A[MD:(java.lang.String, java.lang.String[], java.util.regex.Matcher, android.text.util.Linkify$TransformFilter):java.lang.String (m)] (LINE:419)\l0x002a: IPUT  \l  (r5 I:java.lang.String)\l  (r4 I:androidx.core.text.util.LinkifyCompat$LinkSpec A[D('spec' androidx.core.text.util.LinkifyCompat$LinkSpec)])\l androidx.core.text.util.LinkifyCompat.LinkSpec.url java.lang.String \l0x002c: IPUT  \l  (r1 I:int A[D('start' int)])\l  (r4 I:androidx.core.text.util.LinkifyCompat$LinkSpec A[D('spec' androidx.core.text.util.LinkifyCompat$LinkSpec)])\l androidx.core.text.util.LinkifyCompat.LinkSpec.start int  (LINE:420)\l0x002e: IPUT  \l  (r2 I:int A[D('end' int)])\l  (r4 I:androidx.core.text.util.LinkifyCompat$LinkSpec A[D('spec' androidx.core.text.util.LinkifyCompat$LinkSpec)])\l androidx.core.text.util.LinkifyCompat.LinkSpec.end int  (LINE:421)\l0x0030: INVOKE  \l  (r6 I:java.util.ArrayList A[D('links' java.util.ArrayList\<androidx.core.text.util.LinkifyCompat$LinkSpec\>)])\l  (r4 I:java.lang.Object A[D('spec' androidx.core.text.util.LinkifyCompat$LinkSpec)])\l type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:423)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0004|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0004|LOOP_END\lSYNTHETIC\lLOOP:0: B:24:0x0004\-\>B:38:0x0004\l}"];
Node_40 [shape=record,label="{40\:\ 0x0004|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0004|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x001f|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0034|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|RETURN\l|0x0034: RETURN    (LINE:426)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static void androidx.core.text.util.LinkifyCompat.gatherLinks((r6 I:java.util.ArrayList\<androidx.core.text.util.LinkifyCompat$LinkSpec\> A[D('links' java.util.ArrayList\<androidx.core.text.util.LinkifyCompat$LinkSpec\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.text.Spannable A[D('s' android.text.Spannable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.regex.Pattern A[D('pattern' java.util.regex.Pattern), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String[] A[D('schemes' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.text.util.Linkify$MatchFilter A[D('matchFilter' android.text.util.Linkify$MatchFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:android.text.util.Linkify$TransformFilter A[D('transformFilter' android.text.util.Linkify$TransformFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:31:0x0021 \-\> B:24:0x0004, BACK_EDGE: B:30:0x001f \-\> B:24:0x0004, BACK_EDGE: B:29:0x001d \-\> B:24:0x0004, CROSS_EDGE: B:27:0x0017 \-\> B:30:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0033: r1 'start' I\l  0x0012\-0x0033: r2 'end' I\l  0x0017\-0x0033: r3 'match' Ljava\/lang\/String;\l  0x0026\-0x0033: r4 'spec' Landroidx\/core\/text\/util\/LinkifyCompat$LinkSpec;\l  0x0004\-0x0034: r0 'm' Ljava\/util\/regex\/Matcher;\l  0x0000\-0x0034: r6 'links' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Landroidx\/core\/text\/util\/LinkifyCompat$LinkSpec;\>;\l  \-1 \-0x0034: r7 's' Landroid\/text\/Spannable;\l  \-1 \-0x0034: r8 'pattern' Ljava\/util\/regex\/Pattern;\l  \-1 \-0x0034: r9 'schemes' [Ljava\/lang\/String;\l  \-1 \-0x0034: r10 'matchFilter' Landroid\/text\/util\/Linkify$MatchFilter;\l  \-1 \-0x0034: r11 'transformFilter' Landroid\/text\/util\/Linkify$TransformFilter;\lSIGNATURE: (Ljava\/util\/ArrayList\<Landroidx\/core\/text\/util\/LinkifyCompat$LinkSpec;\>;Landroid\/text\/Spannable;Ljava\/util\/regex\/Pattern;[Ljava\/lang\/String;Landroid\/text\/util\/Linkify$MatchFilter;Landroid\/text\/util\/Linkify$TransformFilter;)V\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_35;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_36[style=dashed];
Node_29 -> Node_39;
Node_36 -> Node_30;
Node_30 -> Node_37[style=dashed];
Node_30 -> Node_40;
Node_37 -> Node_31;
Node_31 -> Node_41;
Node_41 -> Node_38;
Node_38 -> Node_24;
Node_40 -> Node_38;
Node_39 -> Node_38;
Node_34 -> Node_30;
Node_35 -> Node_33;
Node_33 -> Node_22;
}

