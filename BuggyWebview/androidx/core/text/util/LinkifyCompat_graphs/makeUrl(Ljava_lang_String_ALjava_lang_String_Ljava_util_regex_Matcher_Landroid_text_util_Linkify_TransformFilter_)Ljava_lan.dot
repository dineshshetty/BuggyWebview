digraph "CFG forandroidx.core.text.util.LinkifyCompat.makeUrl(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/util\/regex\/Matcher;Landroid\/text\/util\/Linkify$TransformFilter;)Ljava\/lang\/String;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|if (r14 == null) goto L3\l}"];
Node_24 [shape=record,label="{24\:\ 0x0002|java.lang.String r11 = r14.transformUrl(r13, r11)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0006|PHI: r11 \l  PHI: (r11v1 'url' java.lang.String) = (r11v0 'url' java.lang.String), (r11v5 'url' java.lang.String) binds: [B:23:0x0000, B:24:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|r6 = false\lint r7 = r12.length\lr9 = 0\l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|LOOP_START\lLOOP:0: B:26:0x000a\-\>B:32:0x0045\lPHI: r9 \l  PHI: (r9v1 int) = (r9v0 int), (r9v2 int) binds: [B:25:0x0006, B:32:0x0045] A[DONT_GENERATE, DONT_INLINE]\l|if (r9 \>= r7) goto L20\l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|r10 = r12[r9]\lr0 = r11\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|if (r0.regionMatches(true, 0, r10, 0, r10.length()) == false) goto L7\l}"];
Node_32 [shape=record,label="{32\:\ 0x0045|LOOP_END\lLOOP:0: B:26:0x000a\-\>B:32:0x0045\l|int r9 = r9 + 1\l}"];
Node_39 [shape=record,label="{39\:\ 0x001d|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|r6 = true\lr0 = r11\l}"];
Node_30 [shape=record,label="{30\:\ 0x002b|if (r0.regionMatches(false, 0, r10, 0, r10.length()) != false) goto L12\l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r10)\lr0.append(r11.substring(r10.length()))\ljava.lang.String r11 = r0.toString()\l}"];
Node_33 [shape=record,label="{33\:\ 0x0048|PHI: r6 r11 \l  PHI: (r6v1 'hasPrefix' boolean) = (r6v0 'hasPrefix' boolean), (r6v2 'hasPrefix' boolean), (r6v2 'hasPrefix' boolean) binds: [B:38:0x0048, B:30:0x002b, B:31:0x002d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r11v2 'url' java.lang.String) = (r11v1 'url' java.lang.String), (r11v1 'url' java.lang.String), (r11v4 'url' java.lang.String) binds: [B:38:0x0048, B:30:0x002b, B:31:0x002d] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != false) goto L19\l}"];
Node_34 [shape=record,label="{34\:\ 0x004a}"];
Node_35 [shape=record,label="{35\:\ 0x004b|if (r12.length \<= 0) goto L18\l}"];
Node_36 [shape=record,label="{36\:\ 0x004d|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r12[0])\lr0.append(r11)\l}"];
Node_37 [shape=record,label="{37\:\ 0x005e|RETURN\lORIG_RETURN\l|return r0.toString()\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|return r11\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|return r11\l}"];
Node_38 [shape=record,label="{38\:\ 0x0048|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.lang.String androidx.core.text.util.LinkifyCompat.makeUrl((r11v0 'url' java.lang.String A[D('url' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'prefixes' java.lang.String[] A[D('prefixes' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'matcher' java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'filter' android.text.util.Linkify$TransformFilter A[D('filter' android.text.util.Linkify$TransformFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x004b \-\> B:37:0x005e, CROSS_EDGE: B:33:0x0048 \-\> B:37:0x005e, CROSS_EDGE: B:30:0x002b \-\> B:33:0x0048, BACK_EDGE: B:32:0x0045 \-\> B:26:0x000a, CROSS_EDGE: B:26:0x000a \-\> B:33:0x0048, CROSS_EDGE: B:23:0x0000 \-\> B:25:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_38;
Node_27 -> Node_28;
Node_28 -> Node_32;
Node_28 -> Node_39[style=dashed];
Node_32 -> Node_26;
Node_39 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_40;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_37;
Node_37 -> Node_22;
Node_41 -> Node_22;
Node_40 -> Node_22;
Node_38 -> Node_33;
}

