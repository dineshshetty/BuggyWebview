digraph "CFG forandroidx.core.text.util.LinkifyCompat.addLinks(Landroid\/widget\/TextView;I)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: androidx.core.text.util.LinkifyCompat.shouldAddLinksFallbackToFramework():boolean A[MD:():boolean (m)] (LINE:155)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000b \l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r5 I:android.widget.TextView A[D('text' android.widget.TextView)]), (r6 I:int A[D('mask' int)]) type: STATIC call: android.text.util.Linkify.addLinks(android.widget.TextView, int):boolean A[MD:(android.widget.TextView, int):boolean (c)] (LINE:156)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x000b|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:158)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|0x000c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mask' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x000f \l}"];
Node_28 [shape=record,label="{28\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:boolean)  (LINE:159)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.CharSequence) = (r5 I:android.widget.TextView A[D('text' android.widget.TextView)]) type: VIRTUAL call: android.widget.TextView.getText():java.lang.CharSequence A[MD:():java.lang.CharSequence (c)] (LINE:162)\l0x0013: INSTANCE_OF  (r2 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('t' java.lang.CharSequence)]) android.text.Spannable  (LINE:164)\l0x0015: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0025 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|0x0018: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('t' java.lang.CharSequence)])  (LINE:165)\l0x0019: CHECK_CAST (r2 I:android.text.Spannable) = (android.text.Spannable) (r2 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r2 I:boolean) = (r2 I:android.text.Spannable), (r6 I:int A[D('mask' int)]) type: STATIC call: androidx.core.text.util.LinkifyCompat.addLinks(android.text.Spannable, int):boolean A[MD:(android.text.Spannable, int):boolean (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x001f|0x001f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0036 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0021|0x0021: INVOKE  (r5 I:android.widget.TextView A[D('text' android.widget.TextView)]) type: STATIC call: androidx.core.text.util.LinkifyCompat.addLinkMovementMethod(android.widget.TextView):void A[MD:(android.widget.TextView):void (m)] (LINE:166)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|RETURN\l|0x0024: RETURN  (r3 I:boolean)  (LINE:167)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0036|RETURN\l|0x0036: RETURN  (r0 I:boolean)  (LINE:181)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0025|0x0025: INVOKE  (r2 I:android.text.SpannableString) = (r1 I:java.lang.CharSequence A[D('t' java.lang.CharSequence)]) type: STATIC call: android.text.SpannableString.valueOf(java.lang.CharSequence):android.text.SpannableString A[MD:(java.lang.CharSequence):android.text.SpannableString (c)] (LINE:171)\l0x0029: INVOKE  (r4 I:boolean) = (r2 I:android.text.Spannable A[D('s' android.text.SpannableString)]), (r6 I:int A[D('mask' int)]) type: STATIC call: androidx.core.text.util.LinkifyCompat.addLinks(android.text.Spannable, int):boolean A[MD:(android.text.Spannable, int):boolean (m)] (LINE:173)\l}"];
Node_36 [shape=record,label="{36\:\ 0x002d|0x002d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0036 \l}"];
Node_37 [shape=record,label="{37\:\ 0x002f|0x002f: INVOKE  (r5 I:android.widget.TextView A[D('text' android.widget.TextView)]) type: STATIC call: androidx.core.text.util.LinkifyCompat.addLinkMovementMethod(android.widget.TextView):void A[MD:(android.widget.TextView):void (m)] (LINE:174)\l0x0032: INVOKE  \l  (r5 I:android.widget.TextView A[D('text' android.widget.TextView)])\l  (r2 I:java.lang.CharSequence A[D('s' android.text.SpannableString)])\l type: VIRTUAL call: android.widget.TextView.setText(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (c)] (LINE:175)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0035|RETURN\l|0x0035: RETURN  (r3 I:boolean)  (LINE:177)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.text.util.LinkifyCompat.addLinks((r5 I:android.widget.TextView A[D('text' android.widget.TextView), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('mask' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x000e \-\> B:21:?, CROSS_EDGE: B:34:0x0024 \-\> B:21:?, CROSS_EDGE: B:39:0x0036 \-\> B:21:?, CROSS_EDGE: B:38:0x0035 \-\> B:21:?, CROSS_EDGE: B:36:0x002d \-\> B:39:0x0036\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0029\-0x0036: r2 's' Landroid\/text\/SpannableString;\l  0x0013\-0x0036: r1 't' Ljava\/lang\/CharSequence;\l  \-1 \-0x0036: r5 'text' Landroid\/widget\/TextView;\l  \-1 \-0x0036: r6 'mask' I\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_21;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_21;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_35;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_39;
Node_33 -> Node_34;
Node_34 -> Node_21;
Node_39 -> Node_21;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_21;
}

