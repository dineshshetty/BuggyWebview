digraph "CFG forandroidx.core.text.util.LinkifyCompat.makeUrl(Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/util\/regex\/Matcher;Landroid\/text\/util\/Linkify$TransformFilter;)Ljava\/lang\/String;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('filter' android.text.util.Linkify$TransformFilter)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0006  (LINE:380)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0002|0x0002: INVOKE  (r11 I:java.lang.String A[D('url' java.lang.String)]) = \l  (r14 I:android.text.util.Linkify$TransformFilter A[D('filter' android.text.util.Linkify$TransformFilter)])\l  (r13 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)])\l  (r11 I:java.lang.String A[D('url' java.lang.String)])\l type: INTERFACE call: android.text.util.Linkify.TransformFilter.transformUrl(java.util.regex.Matcher, java.lang.String):java.lang.String A[MD:(java.util.regex.Matcher, java.lang.String):java.lang.String (c)] (LINE:381)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0006|0x0006: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:384)\l0x0007: ARRAY_LENGTH  (r7 I:int) = (r12 I:??[] A[D('prefixes' java.lang.String[])])  (LINE:386)\l0x0008: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|LOOP_START\lLOOP:0: B:26:0x000a\-\>B:32:0x0045\l|0x000a: IF  (r9 I:??[int, byte, short, char]) \>= (r7 I:??[int, byte, short, char])  \-\> B:38:0x0048 \l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|0x000c: AGET  (r10 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY][] A[D('prefixes' java.lang.String[])]), (r9 I:??[int, short, byte, char]) \l0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:387)\l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: INVOKE  (r5 I:int) = (r10 I:java.lang.String A[D('prefix' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x0015: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('url' java.lang.String)]) \l0x0016: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('prefix' java.lang.String)]) \l0x0017: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:boolean), (r2 I:int), (r3 I:java.lang.String), (r4 I:int), (r5 I:int) type: VIRTUAL call: java.lang.String.regionMatches(boolean, int, java.lang.String, int, int):boolean A[MD:(boolean, int, java.lang.String, int, int):boolean (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0045 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0045|LOOP_END\lLOOP:0: B:26:0x000a\-\>B:32:0x0045\l|0x0045: ARITH  (r9 I:int) = (r9 I:int) + (1 int)  (LINE:386)\l}"];
Node_39 [shape=record,label="{39\:\ 0x001d|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|0x001d: CONST  (r6 I:??[boolean, int, float, short, byte, char] A[D('hasPrefix' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:388)\l0x001e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:391)\l0x001f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: INVOKE  (r5 I:int) = (r10 I:java.lang.String A[D('prefix' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x0025: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('url' java.lang.String)]) \l0x0026: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('prefix' java.lang.String)]) \l0x0027: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:boolean), (r2 I:int), (r3 I:java.lang.String), (r4 I:int), (r5 I:int) type: VIRTUAL call: java.lang.String.regionMatches(boolean, int, java.lang.String, int, int):boolean A[MD:(boolean, int, java.lang.String, int, int):boolean (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0048 \l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|0x002d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:392)\l0x002f: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0032: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:java.lang.String A[D('prefix' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0035: INVOKE  (r1 I:int) = (r10 I:java.lang.String A[D('prefix' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x0039: INVOKE  (r1 I:java.lang.String) = (r11 I:java.lang.String A[D('url' java.lang.String)]), (r1 I:int) type: VIRTUAL call: java.lang.String.substring(int):java.lang.String A[MD:(int):java.lang.String (c)]\l0x003d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0040: INVOKE  (r11 I:java.lang.String A[D('url' java.lang.String)]) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0048|0x0048: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasPrefix' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:?  (LINE:399)\l}"];
Node_34 [shape=record,label="{34\:\ 0x004a|0x004a: ARRAY_LENGTH  (r0 I:int) = (r12 I:??[] A[D('prefixes' java.lang.String[])]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x004b|0x004b: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:41:? \l}"];
Node_36 [shape=record,label="{36\:\ 0x004d|0x004d: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:400)\l0x004f: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0052: AGET  (r1 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY][] A[D('prefixes' java.lang.String[])]), (r8 I:??[int, short, byte, char]) \l0x0054: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0057: INVOKE  (r0 I:java.lang.StringBuilder), (r11 I:java.lang.String A[D('url' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005a: INVOKE  (r11 I:java.lang.String A[D('url' java.lang.String)]) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x005e|RETURN\lORIG_RETURN\l|0x005e: RETURN  (r11 I:java.lang.String A[D('url' java.lang.String)])  (LINE:403)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x005e: RETURN  (r11 I:java.lang.String A[D('url' java.lang.String)]) A[SYNTHETIC] (LINE:403)\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|0x005e: RETURN  (r11 I:java.lang.String A[D('url' java.lang.String)]) A[SYNTHETIC] (LINE:403)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0048|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static java.lang.String androidx.core.text.util.LinkifyCompat.makeUrl((r11 I:java.lang.String A[D('url' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String[] A[D('prefixes' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:android.text.util.Linkify$TransformFilter A[D('filter' android.text.util.Linkify$TransformFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x004b \-\> B:37:0x005e, CROSS_EDGE: B:33:0x0048 \-\> B:37:0x005e, CROSS_EDGE: B:30:0x002b \-\> B:33:0x0048, BACK_EDGE: B:32:0x0045 \-\> B:26:0x000a, CROSS_EDGE: B:26:0x000a \-\> B:33:0x0048, CROSS_EDGE: B:23:0x0000 \-\> B:25:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0045: r10 'prefix' Ljava\/lang\/String;\l  0x0007\-0x005e: r6 'hasPrefix' Z\l  \-1 \-0x005e: r11 'url' Ljava\/lang\/String;\l  \-1 \-0x005e: r12 'prefixes' [Ljava\/lang\/String;\l  \-1 \-0x005e: r13 'matcher' Ljava\/util\/regex\/Matcher;\l  \-1 \-0x005e: r14 'filter' Landroid\/text\/util\/Linkify$TransformFilter;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_38;
Node_27 -> Node_28;
Node_28 -> Node_32;
Node_28 -> Node_39[style=dashed];
Node_32 -> Node_26;
Node_39 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_40;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_37;
Node_37 -> Node_22;
Node_41 -> Node_22;
Node_40 -> Node_22;
Node_38 -> Node_33;
}

