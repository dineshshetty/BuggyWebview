digraph "CFG forandroidx.core.text.util.LinkifyCompat.addLinks(Landroid\/text\/Spannable;Ljava\/util\/regex\/Pattern;Ljava\/lang\/String;Landroid\/text\/util\/Linkify$MatchFilter;Landroid\/text\/util\/Linkify$TransformFilter;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: androidx.core.text.util.LinkifyCompat.shouldAddLinksFallbackToFramework():boolean A[MD:():boolean (m)] (LINE:297)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = \l  (r7 I:android.text.Spannable A[D('spannable' android.text.Spannable)])\l  (r8 I:java.util.regex.Pattern A[D('pattern' java.util.regex.Pattern)])\l  (r9 I:java.lang.String A[D('scheme' java.lang.String)])\l  (r10 I:android.text.util.Linkify$MatchFilter A[D('matchFilter' android.text.util.Linkify$MatchFilter)])\l  (r11 I:android.text.util.Linkify$TransformFilter A[D('transformFilter' android.text.util.Linkify$TransformFilter)])\l type: STATIC call: android.text.util.Linkify.addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String, android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):boolean A[MD:(android.text.Spannable, java.util.regex.Pattern, java.lang.String, android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):boolean (c)] (LINE:298)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:300)\l0x000c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('spannable' android.text.Spannable)]) \l0x000d: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('pattern' java.util.regex.Pattern)]) \l0x000e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('scheme' java.lang.String)]) \l0x000f: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('matchFilter' android.text.util.Linkify$MatchFilter)]) \l0x0010: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('transformFilter' android.text.util.Linkify$TransformFilter)]) \l0x0011: INVOKE  (r0 I:boolean) = \l  (r1 I:android.text.Spannable)\l  (r2 I:java.util.regex.Pattern)\l  (r3 I:java.lang.String)\l  (r4 I:java.lang.String[])\l  (r5 I:android.text.util.Linkify$MatchFilter)\l  (r6 I:android.text.util.Linkify$TransformFilter)\l type: STATIC call: androidx.core.text.util.LinkifyCompat.addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):boolean A[MD:(android.text.Spannable, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0015|RETURN\l|0x0015: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.text.util.LinkifyCompat.addLinks((r7 I:android.text.Spannable A[D('spannable' android.text.Spannable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.regex.Pattern A[D('pattern' java.util.regex.Pattern), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[D('scheme' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:android.text.util.Linkify$MatchFilter A[D('matchFilter' android.text.util.Linkify$MatchFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:android.text.util.Linkify$TransformFilter A[D('transformFilter' android.text.util.Linkify$TransformFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0015 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r7 'spannable' Landroid\/text\/Spannable;\l  \-1 \-0x0015: r8 'pattern' Ljava\/util\/regex\/Pattern;\l  \-1 \-0x0015: r9 'scheme' Ljava\/lang\/String;\l  \-1 \-0x0015: r10 'matchFilter' Landroid\/text\/util\/Linkify$MatchFilter;\l  \-1 \-0x0015: r11 'transformFilter' Landroid\/text\/util\/Linkify$TransformFilter;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

