digraph "CFG forandroidx.core.text.util.LinkifyCompat.addLinks(Landroid\/text\/Spannable;Ljava\/util\/regex\/Pattern;Ljava\/lang\/String;[Ljava\/lang\/String;Landroid\/text\/util\/Linkify$MatchFilter;Landroid\/text\/util\/Linkify$TransformFilter;)Z" {
Node_42 [shape=record,label="{42\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) =  type: STATIC call: androidx.core.text.util.LinkifyCompat.shouldAddLinksFallbackToFramework():boolean A[MD:():boolean (m)] (LINE:323)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x000b \l}"];
Node_46 [shape=record,label="{46\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = \l  (r9 I:android.text.Spannable A[D('spannable' android.text.Spannable)])\l  (r10 I:java.util.regex.Pattern A[D('pattern' java.util.regex.Pattern)])\l  (r11 I:java.lang.String A[D('defaultScheme' java.lang.String)])\l  (r12 I:java.lang.String[] A[D('schemes' java.lang.String[])])\l  (r13 I:android.text.util.Linkify$MatchFilter A[D('matchFilter' android.text.util.Linkify$MatchFilter)])\l  (r14 I:android.text.util.Linkify$TransformFilter A[D('transformFilter' android.text.util.Linkify$TransformFilter)])\l type: STATIC call: androidx.core.text.util.LinkifyCompat.Api24Impl.addLinks(android.text.Spannable, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):boolean A[MD:(android.text.Spannable, java.util.regex.Pattern, java.lang.String, java.lang.String[], android.text.util.Linkify$MatchFilter, android.text.util.Linkify$TransformFilter):boolean (m)] (LINE:324)\l}"];
Node_47 [shape=record,label="{47\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_43 [shape=record,label="{43\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x000b|0x000b: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('defaultScheme' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x000f  (LINE:328)\l}"];
Node_49 [shape=record,label="{49\:\ 0x000d|0x000d: CONST_STR  (r11 I:java.lang.String A[D('defaultScheme' java.lang.String)]) =  \"\" \l}"];
Node_50 [shape=record,label="{50\:\ 0x000f|0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:329)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0010|0x0010: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('schemes' java.lang.String[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0015 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0012|0x0012: ARRAY_LENGTH  (r1 I:int) = (r12 I:??[] A[D('schemes' java.lang.String[])]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0013|0x0013: IF  (r1 I:??[int, byte, short, char]) \>= (r0 I:??[int, byte, short, char])  \-\> B:55:0x0017 \l}"];
Node_55 [shape=record,label="{55\:\ 0x0017|0x0017: ARRAY_LENGTH  (r1 I:int) = (r12 I:??[] A[D('schemes' java.lang.String[])])  (LINE:333)\l0x0018: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x0019: NEW_ARRAY  (r0 I:java.lang.String[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x001b: SGET  (r1 I:java.util.Locale) =  java.util.Locale.ROOT java.util.Locale  (LINE:334)\l0x001d: INVOKE  (r1 I:java.lang.String) = (r11 I:java.lang.String A[D('defaultScheme' java.lang.String)]), (r1 I:java.util.Locale) type: VIRTUAL call: java.lang.String.toLowerCase(java.util.Locale):java.lang.String A[MD:(java.util.Locale):java.lang.String (c)]\l0x0021: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: APUT  \l  (r0 I:??[OBJECT, ARRAY][] A[D('schemesCopy' java.lang.String[])])\l  (r2 I:??[int, short, byte, char])\l  (r1 I:??[OBJECT, ARRAY])\l \l0x0024: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:335)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0025|LOOP_START\lLOOP:0: B:56:0x0025\-\>B:62:0x0037\l|0x0025: ARRAY_LENGTH  (r3 I:int) = (r12 I:??[] A[D('schemes' java.lang.String[])]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0026|0x0026: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:74:0x003c \l}"];
Node_58 [shape=record,label="{58\:\ 0x0028|0x0028: AGET  (r3 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY][] A[D('schemes' java.lang.String[])]), (r1 I:??[int, short, byte, char] A[D('index' int)])  (LINE:336)\l0x002a: ARITH  (r4 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:337)\l}"];
Node_59 [shape=record,label="{59\:\ 0x002c|0x002c: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('scheme' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0031 \l}"];
Node_60 [shape=record,label="{60\:\ 0x002e|0x002e: CONST_STR  (r5 I:java.lang.String) =  \"\" \l}"];
Node_76 [shape=record,label="{76\:\ 0x0037|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x0037|LOOP_END\lLOOP:0: B:56:0x0025\-\>B:62:0x0037\l|0x0037: APUT  \l  (r0 I:??[OBJECT, ARRAY][] A[D('schemesCopy' java.lang.String[])])\l  (r4 I:??[int, short, byte, char])\l  (r5 I:??[OBJECT, ARRAY])\l \l0x0039: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:335)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0031|0x0031: SGET  (r5 I:java.util.Locale) =  java.util.Locale.ROOT java.util.Locale \l0x0033: INVOKE  (r5 I:java.lang.String) = (r3 I:java.lang.String A[D('scheme' java.lang.String)]), (r5 I:java.util.Locale) type: VIRTUAL call: java.lang.String.toLowerCase(java.util.Locale):java.lang.String A[MD:(java.util.Locale):java.lang.String (c)]\l}"];
Node_75 [shape=record,label="{75\:\ 0x0037|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x003c|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x003c|0x003c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:340)\l0x003d: INVOKE  (r3 I:java.util.regex.Matcher) = \l  (r10 I:java.util.regex.Pattern A[D('pattern' java.util.regex.Pattern)])\l  (r9 I:java.lang.CharSequence A[D('spannable' android.text.Spannable)])\l type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)] (LINE:341)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0041|LOOP_START\lLOOP:1: B:64:0x0041\-\>B:80:0x0041\l|0x0041: INVOKE  (r4 I:boolean) = (r3 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.find():boolean A[MD:():boolean (c)] (LINE:343)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0045|0x0045: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:77:0x0067 \l}"];
Node_66 [shape=record,label="{66\:\ 0x0047|0x0047: INVOKE  (r4 I:int) = (r3 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.start():int A[MD:():int (c)] (LINE:344)\l0x004b: INVOKE  (r5 I:int) = (r3 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)] (LINE:345)\l0x004f: INVOKE  (r6 I:java.lang.String) = (r3 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)]), (r2 I:int) type: VIRTUAL call: java.util.regex.Matcher.group(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:346)\l0x0053: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:347)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0054|0x0054: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('matchFilter' android.text.util.Linkify$MatchFilter)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x005a  (LINE:349)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0056|0x0056: INVOKE  (r7 I:boolean A[D('allowed' boolean)]) = \l  (r13 I:android.text.util.Linkify$MatchFilter A[D('matchFilter' android.text.util.Linkify$MatchFilter)])\l  (r9 I:java.lang.CharSequence A[D('spannable' android.text.Spannable)])\l  (r4 I:int A[D('start' int)])\l  (r5 I:int A[D('end' int)])\l type: INTERFACE call: android.text.util.Linkify.MatchFilter.acceptMatch(java.lang.CharSequence, int, int):boolean A[MD:(java.lang.CharSequence, int, int):boolean (c)] (LINE:350)\l}"];
Node_69 [shape=record,label="{69\:\ 0x005a|0x005a: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('allowed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x0041  (LINE:353)\l}"];
Node_78 [shape=record,label="{78\:\ 0x005c|SYNTHETIC\l}"];
Node_70 [shape=record,label="{70\:\ 0x005c|0x005c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0041 \l}"];
Node_79 [shape=record,label="{79\:\ 0x005e|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x005e|0x005e: INVOKE  (r8 I:java.lang.String) = \l  (r6 I:java.lang.String A[D('match' java.lang.String)])\l  (r0 I:java.lang.String[] A[D('schemesCopy' java.lang.String[])])\l  (r3 I:java.util.regex.Matcher A[D('m' java.util.regex.Matcher)])\l  (r14 I:android.text.util.Linkify$TransformFilter A[D('transformFilter' android.text.util.Linkify$TransformFilter)])\l type: STATIC call: androidx.core.text.util.LinkifyCompat.makeUrl(java.lang.String, java.lang.String[], java.util.regex.Matcher, android.text.util.Linkify$TransformFilter):java.lang.String A[MD:(java.lang.String, java.lang.String[], java.util.regex.Matcher, android.text.util.Linkify$TransformFilter):java.lang.String (m)] (LINE:354)\l0x0062: INVOKE  \l  (r8 I:java.lang.String A[D('url' java.lang.String)])\l  (r4 I:int A[D('start' int)])\l  (r5 I:int A[D('end' int)])\l  (r9 I:android.text.Spannable A[D('spannable' android.text.Spannable)])\l type: STATIC call: androidx.core.text.util.LinkifyCompat.applyLink(java.lang.String, int, int, android.text.Spannable):void A[MD:(java.lang.String, int, int, android.text.Spannable):void (m)] (LINE:356)\l0x0065: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('hasMatches' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:357)\l}"];
Node_83 [shape=record,label="{83\:\ 0x0041|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x0041|LOOP_END\lSYNTHETIC\lLOOP:1: B:64:0x0041\-\>B:80:0x0041\l}"];
Node_82 [shape=record,label="{82\:\ 0x0041|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0041|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0067|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0067|RETURN\l|0x0067: RETURN  (r1 I:boolean A[D('hasMatches' boolean)])  (LINE:361)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0015|0x0015: SGET  (r12 I:java.lang.String[] A[D('schemes' java.lang.String[])]) =  androidx.core.text.util.LinkifyCompat.EMPTY_STRING java.lang.String[]  (LINE:330)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.text.util.LinkifyCompat.addLinks((r9 I:android.text.Spannable A[D('spannable' android.text.Spannable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.regex.Pattern A[D('pattern' java.util.regex.Pattern), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[D('defaultScheme' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String[] A[D('schemes' java.lang.String[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:android.text.util.Linkify$MatchFilter A[D('matchFilter' android.text.util.Linkify$MatchFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:android.text.util.Linkify$TransformFilter A[D('transformFilter' android.text.util.Linkify$TransformFilter), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:62:0x0037 \-\> B:56:0x0025, CROSS_EDGE: B:61:0x0031 \-\> B:62:0x0037, BACK_EDGE: B:71:0x005e \-\> B:64:0x0041, BACK_EDGE: B:70:0x005c \-\> B:64:0x0041, BACK_EDGE: B:69:0x005a \-\> B:64:0x0041, CROSS_EDGE: B:67:0x0054 \-\> B:69:0x005a, CROSS_EDGE: B:73:0x0067 \-\> B:43:?, CROSS_EDGE: B:53:0x0013 \-\> B:55:0x0017, CROSS_EDGE: B:51:0x0010 \-\> B:54:0x0015, CROSS_EDGE: B:48:0x000b \-\> B:50:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002a\-0x0039: r3 'scheme' Ljava\/lang\/String;\l  0x0025\-0x003c: r1 'index' I\l  0x004b\-0x0066: r4 'start' I\l  0x004f\-0x0066: r5 'end' I\l  0x0053\-0x0066: r6 'match' Ljava\/lang\/String;\l  0x0054\-0x0066: r7 'allowed' Z\l  0x0062\-0x0066: r8 'url' Ljava\/lang\/String;\l  0x001b\-0x0067: r0 'schemesCopy' [Ljava\/lang\/String;\l  0x003d\-0x0067: r1 'hasMatches' Z\l  0x0041\-0x0067: r3 'm' Ljava\/util\/regex\/Matcher;\l  \-1 \-0x0067: r9 'spannable' Landroid\/text\/Spannable;\l  \-1 \-0x0067: r10 'pattern' Ljava\/util\/regex\/Pattern;\l  \-1 \-0x0067: r11 'defaultScheme' Ljava\/lang\/String;\l  \-1 \-0x0067: r12 'schemes' [Ljava\/lang\/String;\l  \-1 \-0x0067: r13 'matchFilter' Landroid\/text\/util\/Linkify$MatchFilter;\l  \-1 \-0x0067: r14 'transformFilter' Landroid\/text\/util\/Linkify$TransformFilter;\l}"];
MethodNode -> Node_42;Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_48;
Node_46 -> Node_47;
Node_47 -> Node_43;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_54;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_74;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_76;
Node_76 -> Node_62;
Node_62 -> Node_56;
Node_61 -> Node_75;
Node_75 -> Node_62;
Node_74 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_77;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_69;
Node_68 -> Node_69;
Node_69 -> Node_78[style=dashed];
Node_69 -> Node_81;
Node_78 -> Node_70;
Node_70 -> Node_79[style=dashed];
Node_70 -> Node_82;
Node_79 -> Node_71;
Node_71 -> Node_83;
Node_83 -> Node_80;
Node_80 -> Node_64;
Node_82 -> Node_80;
Node_81 -> Node_80;
Node_77 -> Node_73;
Node_73 -> Node_43;
Node_54 -> Node_55;
}

