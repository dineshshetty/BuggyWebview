digraph "CFG forandroidx.core.text.util.FindAddress.isValidZipCode(Ljava\/lang\/String;Ljava\/util\/regex\/MatchResult;)Z" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:345)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0001|0x0001: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stateMatch' java.util.regex.MatchResult)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0004 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0004|0x0004: INVOKE  (r1 I:int) = (r4 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult)]) type: INTERFACE call: java.util.regex.MatchResult.groupCount():int A[MD:():int (c)] (LINE:347)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|LOOP_START\lLOOP:0: B:28:0x0008\-\>B:32:0x0014\l|0x0008: IF  (r1 I:??[int, byte, short, char] A[D('stateIndex' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:41:0x0016  (LINE:348)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|0x000a: ARITH  (r2 I:int) = (r1 I:int A[D('stateIndex' int)]) + (\-1 int)  (LINE:349)\l0x000c: INVOKE  (r1 I:java.lang.String) = (r4 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult)]), (r1 I:int A[D('stateIndex' int)]) type: INTERFACE call: java.util.regex.MatchResult.group(int):java.lang.String A[MD:(int):java.lang.String (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0014 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|LOOP_END\lLOOP:0: B:28:0x0008\-\>B:32:0x0014\l|0x0014: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stateIndex' int)]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x0012|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('stateIndex' int)]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0016|0x0016: SGET  (r2 I:java.util.regex.Pattern A[D('stateIndex' int)]) =  androidx.core.text.util.FindAddress.sZipCodeRe java.util.regex.Pattern  (LINE:351)\l0x0018: INVOKE  (r2 I:java.util.regex.Matcher) = (r2 I:java.util.regex.Pattern), (r3 I:java.lang.CharSequence A[D('zipCode' java.lang.String)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x001c: INVOKE  (r2 I:boolean) = (r2 I:java.util.regex.Matcher) type: VIRTUAL call: java.util.regex.Matcher.matches():boolean A[MD:():boolean (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0020|0x0020: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:? \l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0022: SGET  (r2 I:androidx.core.text.util.FindAddress$ZipRange[]) =  androidx.core.text.util.FindAddress.sStateZipCodeRanges androidx.core.text.util.FindAddress$ZipRange[] \l0x0024: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('stateIndex' int)]) \l0x0026: INVOKE  (r2 I:boolean) = (r2 I:androidx.core.text.util.FindAddress$ZipRange), (r3 I:java.lang.String A[D('zipCode' java.lang.String)]) type: VIRTUAL call: androidx.core.text.util.FindAddress.ZipRange.matches(java.lang.String):boolean A[MD:(java.lang.String):boolean (m)] (LINE:352)\l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|0x002a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:? \l}"];
Node_37 [shape=record,label="{37\:\ 0x002c|RETURN\lORIG_RETURN\l|0x002c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x002f: RETURN  (r0 I:boolean)  (LINE:351)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x002f: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:351)\l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|0x002f: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:351)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0016|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static boolean androidx.core.text.util.FindAddress.isValidZipCode((r3 I:java.lang.String A[D('zipCode' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x002f \-\> B:23:?, CROSS_EDGE: B:36:0x002a \-\> B:39:0x002f, CROSS_EDGE: B:34:0x0020 \-\> B:39:0x002f, BACK_EDGE: B:32:0x0014 \-\> B:28:0x0008, CROSS_EDGE: B:28:0x0008 \-\> B:33:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x000c: r1 'stateIndex' I\l  0x000c\-0x0016: r2 'stateIndex' I\l  0x0016\-0x002f: r1 'stateIndex' I\l  \-1 \-0x002f: r3 'zipCode' Ljava\/lang\/String;\l  \-1 \-0x002f: r4 'stateMatch' Ljava\/util\/regex\/MatchResult;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_41;
Node_29 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_40[style=dashed];
Node_32 -> Node_28;
Node_40 -> Node_31;
Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_42;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_43;
Node_37 -> Node_23;
Node_43 -> Node_23;
Node_42 -> Node_23;
Node_41 -> Node_33;
}

