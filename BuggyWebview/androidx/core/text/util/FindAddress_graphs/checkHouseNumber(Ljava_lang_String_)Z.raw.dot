digraph "CFG forandroidx.core.text.util.FindAddress.checkHouseNumber(Ljava\/lang\/String;)Z" {
Node_43 [shape=record,label="{43\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:272)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:273)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0002|LOOP_START\lLOOP:0: B:46:0x0002\-\>B:51:0x0014\l|0x0002: INVOKE  (r2 I:int) = (r7 I:java.lang.String A[D('houseNumber' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0006|0x0006: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:83:0x0017 \l}"];
Node_48 [shape=record,label="{48\:\ 0x0008|0x0008: INVOKE  (r2 I:char) = (r7 I:java.lang.String A[D('houseNumber' java.lang.String)]), (r1 I:int A[D('i' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:274)\l0x000c: INVOKE  (r2 I:boolean) = (r2 I:char) type: STATIC call: java.lang.Character.isDigit(char):boolean A[MD:(char):boolean (c)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x0014 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0012|0x0012: ARITH  (r0 I:int) = (r0 I:int A[D('digitCount' int)]) + (1 int) \l}"];
Node_84 [shape=record,label="{84\:\ 0x0014|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0014|LOOP_END\lLOOP:0: B:46:0x0002\-\>B:51:0x0014\l|0x0014: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:273)\l}"];
Node_85 [shape=record,label="{85\:\ 0x0014|SYNTHETIC\l}"];
Node_83 [shape=record,label="{83\:\ 0x0017|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0017|0x0017: CONST  (r1 I:??[int, float, short, byte, char] A[D('i' int)]) = (5 ??[int, float, short, byte, char])  (LINE:276)\l0x0018: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0019|0x0019: IF  (r0 I:??[int, byte, short, char] A[D('digitCount' int)]) \<= (r1 I:??[int, byte, short, char])  \-\> B:55:0x001c \l}"];
Node_54 [shape=record,label="{54\:\ 0x001b|RETURN\l|0x001b: RETURN  (r2 I:boolean) \l}"];
Node_44 [shape=record,label="{44\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_55 [shape=record,label="{55\:\ 0x001c|0x001c: SGET  (r1 I:java.util.regex.Pattern) =  androidx.core.text.util.FindAddress.sSuffixedNumberRe java.util.regex.Pattern  (LINE:279)\l0x001e: INVOKE  (r1 I:java.util.regex.Matcher) = (r1 I:java.util.regex.Pattern), (r7 I:java.lang.CharSequence A[D('houseNumber' java.lang.String)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x0022: INVOKE  (r3 I:boolean) = (r1 I:java.util.regex.Matcher A[D('suffixMatcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.find():boolean A[MD:():boolean (c)] (LINE:280)\l0x0026: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0027|0x0027: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0077 \l}"];
Node_57 [shape=record,label="{57\:\ 0x0029|0x0029: INVOKE  (r3 I:java.lang.String) = (r1 I:java.util.regex.Matcher A[D('suffixMatcher' java.util.regex.Matcher)]), (r4 I:int) type: VIRTUAL call: java.util.regex.Matcher.group(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:281)\l0x002d: INVOKE  (r3 I:int) = (r3 I:java.lang.String) type: STATIC call: java.lang.Integer.parseInt(java.lang.String):int A[MD:(java.lang.String):int throws java.lang.NumberFormatException (c)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0031|0x0031: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('num' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0034  (LINE:282)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0033|RETURN\l|0x0033: RETURN  (r2 I:boolean)  (LINE:283)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0034|0x0034: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:285)\l0x0035: INVOKE  (r2 I:java.lang.String) = (r1 I:java.util.regex.Matcher A[D('suffixMatcher' java.util.regex.Matcher)]), (r2 I:int) type: VIRTUAL call: java.util.regex.Matcher.group(int):java.lang.String A[MD:(int):java.lang.String (c)]\l0x0039: INVOKE  (r4 I:java.util.Locale) =  type: STATIC call: java.util.Locale.getDefault():java.util.Locale A[MD:():java.util.Locale (c)]\l0x003d: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.String), (r4 I:java.util.Locale) type: VIRTUAL call: java.lang.String.toLowerCase(java.util.Locale):java.lang.String A[MD:(java.util.Locale):java.lang.String (c)]\l0x0041: ARITH  (r4 I:int) = (r3 I:int A[D('num' int)]) % (10 int)  (LINE:286)\l0x0043: CONST_STR  (r5 I:java.lang.String) =  \"th\" \l}"];
Node_61 [shape=record,label="{61\:\ 0x0045|0x0045: SWITCH  (r4 I:??)\l case 1: goto B:76:0x0069\l case 2: goto B:70:0x005b\l case 3: goto B:64:0x004d\l default: goto B:62:0x0048 \l}"];
Node_62 [shape=record,label="{62\:\ 0x0048|0x0048: INVOKE  (r4 I:boolean) = (r2 I:java.lang.String A[D('suffix' java.lang.String)]), (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:294)\l}"];
Node_63 [shape=record,label="{63\:\ 0x004c|RETURN\l|0x004c: RETURN  (r4 I:boolean) \l}"];
Node_64 [shape=record,label="{64\:\ 0x004d|0x004d: ARITH  (r4 I:int) = (r3 I:int A[D('num' int)]) % (100 int)  (LINE:292)\l0x004f: CONST  (r6 I:??[int, float, short, byte, char]) = (13 ??[int, float, short, byte, char]) \l}"];
Node_65 [shape=record,label="{65\:\ 0x0051|0x0051: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x0054 \l}"];
Node_67 [shape=record,label="{67\:\ 0x0054|0x0054: CONST_STR  (r5 I:java.lang.String) =  \"rd\" \l}"];
Node_68 [shape=record,label="{68\:\ 0x0056|0x0056: INVOKE  (r4 I:boolean) = (r2 I:java.lang.String A[D('suffix' java.lang.String)]), (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x005a|RETURN\l|0x005a: RETURN  (r4 I:boolean) \l}"];
Node_70 [shape=record,label="{70\:\ 0x005b|0x005b: ARITH  (r4 I:int) = (r3 I:int A[D('num' int)]) % (100 int)  (LINE:290)\l0x005d: CONST  (r6 I:??[int, float, short, byte, char]) = (12 ??[int, float, short, byte, char]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x005f|0x005f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0062 \l}"];
Node_73 [shape=record,label="{73\:\ 0x0062|0x0062: CONST_STR  (r5 I:java.lang.String) =  \"nd\" \l}"];
Node_74 [shape=record,label="{74\:\ 0x0064|0x0064: INVOKE  (r4 I:boolean) = (r2 I:java.lang.String A[D('suffix' java.lang.String)]), (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_75 [shape=record,label="{75\:\ 0x0068|RETURN\l|0x0068: RETURN  (r4 I:boolean) \l}"];
Node_76 [shape=record,label="{76\:\ 0x0069|0x0069: ARITH  (r4 I:int) = (r3 I:int A[D('num' int)]) % (100 int)  (LINE:288)\l0x006b: CONST  (r6 I:??[int, float, short, byte, char]) = (11 ??[int, float, short, byte, char]) \l}"];
Node_77 [shape=record,label="{77\:\ 0x006d|0x006d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x0070 \l}"];
Node_79 [shape=record,label="{79\:\ 0x0070|0x0070: CONST_STR  (r5 I:java.lang.String) =  \"st\" \l}"];
Node_80 [shape=record,label="{80\:\ 0x0072|0x0072: INVOKE  (r4 I:boolean) = (r2 I:java.lang.String A[D('suffix' java.lang.String)]), (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_81 [shape=record,label="{81\:\ 0x0076|RETURN\l|0x0076: RETURN  (r4 I:boolean) \l}"];
Node_82 [shape=record,label="{82\:\ 0x0077|RETURN\l|0x0077: RETURN  (r4 I:boolean)  (LINE:297)\l}"];
MethodNode[shape=record,label="{private static boolean androidx.core.text.util.FindAddress.checkHouseNumber((r7 I:java.lang.String A[D('houseNumber' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:51:0x0014 \-\> B:46:0x0002, CROSS_EDGE: B:49:0x0010 \-\> B:51:0x0014, CROSS_EDGE: B:59:0x0033 \-\> B:44:?, CROSS_EDGE: B:63:0x004c \-\> B:44:?, CROSS_EDGE: B:69:0x005a \-\> B:44:?, CROSS_EDGE: B:65:0x0051 \-\> B:68:0x0056, CROSS_EDGE: B:75:0x0068 \-\> B:44:?, CROSS_EDGE: B:71:0x005f \-\> B:74:0x0064, CROSS_EDGE: B:81:0x0076 \-\> B:44:?, CROSS_EDGE: B:77:0x006d \-\> B:80:0x0072, CROSS_EDGE: B:82:0x0077 \-\> B:44:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0017: r1 'i' I\l  0x0041\-0x0077: r2 'suffix' Ljava\/lang\/String;\l  0x0031\-0x0077: r3 'num' I\l  0x0001\-0x0081: r0 'digitCount' I\l  0x0022\-0x0081: r1 'suffixMatcher' Ljava\/util\/regex\/Matcher;\l  \-1 \-0x0081: r7 'houseNumber' Ljava\/lang\/String;\l}"];
MethodNode -> Node_43;Node_43 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_83;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_85;
Node_50 -> Node_84;
Node_84 -> Node_51;
Node_51 -> Node_46;
Node_85 -> Node_51;
Node_83 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_54 -> Node_44;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_82;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_44;
Node_60 -> Node_61;
Node_61 -> Node_62;
Node_61 -> Node_64;
Node_61 -> Node_70;
Node_61 -> Node_76;
Node_62 -> Node_63;
Node_63 -> Node_44;
Node_64 -> Node_65;
Node_65 -> Node_67;
Node_65 -> Node_68[style=dashed];
Node_67 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_44;
Node_70 -> Node_71;
Node_71 -> Node_73;
Node_71 -> Node_74[style=dashed];
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_44;
Node_76 -> Node_77;
Node_77 -> Node_79;
Node_77 -> Node_80[style=dashed];
Node_79 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_44;
Node_82 -> Node_44;
}

