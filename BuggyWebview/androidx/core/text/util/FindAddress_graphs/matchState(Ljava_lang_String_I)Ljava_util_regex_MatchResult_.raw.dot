digraph "CFG forandroidx.core.text.util.FindAddress.matchState(Ljava\/lang\/String;I)Ljava\/util\/regex\/MatchResult;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:330)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0001|0x0001: IF  (r4 I:??[int, byte, short, char] A[D('offset' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:19:0x0013 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|0x0003: ARITH  (r1 I:int) = (r4 I:int A[D('offset' int)]) + (\-1 int) \l0x0005: INVOKE  (r1 I:char) = (r3 I:java.lang.String A[D('content' java.lang.String)]), (r1 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x0009: CONST_STR  (r2 I:java.lang.String) =  \",*•t  u1680u2000u2001u2002u2003u2004u2005u2006 u2008u2009u200a u205fu3000nu000bfru0085u2028u2029\" \l0x000b: INVOKE  (r1 I:int) = (r2 I:java.lang.String), (r1 I:int) type: VIRTUAL call: java.lang.String.indexOf(int):int A[MD:(int):int (c)]\l0x000f: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0013 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:java.util.regex.MatchResult) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|0x0013: SGET  (r1 I:java.util.regex.Pattern) =  androidx.core.text.util.FindAddress.sStateRe java.util.regex.Pattern  (LINE:331)\l0x0015: INVOKE  (r1 I:java.util.regex.Matcher) = (r1 I:java.util.regex.Pattern), (r3 I:java.lang.CharSequence A[D('content' java.lang.String)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x0019: INVOKE  (r2 I:int) = (r3 I:java.lang.String A[D('content' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x001d: INVOKE  (r1 I:java.util.regex.Matcher) = (r1 I:java.util.regex.Matcher), (r4 I:int A[D('offset' int)]), (r2 I:int) type: VIRTUAL call: java.util.regex.Matcher.region(int, int):java.util.regex.Matcher A[MD:(int, int):java.util.regex.Matcher (c)]\l0x0021: INVOKE  (r2 I:boolean) = (r1 I:java.util.regex.Matcher A[D('stateMatcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.lookingAt():boolean A[MD:():boolean (c)] (LINE:332)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:? \l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|0x0027: INVOKE  (r0 I:java.util.regex.MatchResult) = (r1 I:java.util.regex.Matcher A[D('stateMatcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.toMatchResult():java.util.regex.MatchResult A[MD:():java.util.regex.MatchResult (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x002b|RETURN\lORIG_RETURN\l|0x002b: RETURN  (r0 I:java.util.regex.MatchResult) \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x002b: RETURN  (r0 I:java.util.regex.MatchResult) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public static java.util.regex.MatchResult androidx.core.text.util.FindAddress.matchState((r3 I:java.lang.String A[D('content' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x002b \-\> B:13:?, CROSS_EDGE: B:20:0x0025 \-\> B:22:0x002b, CROSS_EDGE: B:15:0x0001 \-\> B:19:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0021\-0x002b: r1 'stateMatcher' Ljava\/util\/regex\/Matcher;\l  \-1 \-0x002b: r3 'content' Ljava\/lang\/String;\l  \-1 \-0x002b: r4 'offset' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_13;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_13;
Node_23 -> Node_13;
}

