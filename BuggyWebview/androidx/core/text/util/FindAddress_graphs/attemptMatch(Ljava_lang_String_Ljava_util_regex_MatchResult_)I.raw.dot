digraph "CFG forandroidx.core.text.util.FindAddress.attemptMatch(Ljava\/lang\/String;Ljava\/util\/regex\/MatchResult;)I" {
Node_85 [shape=record,label="{85\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_87 [shape=record,label="{87\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:401)\l0x0001: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:402)\l0x0002: INVOKE  (r2 I:int) = (r14 I:java.util.regex.MatchResult A[D('houseNumberMatch' java.util.regex.MatchResult)]) type: INTERFACE call: java.util.regex.MatchResult.end():int A[MD:():int (c)] (LINE:403)\l0x0006: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:404)\l0x0007: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:405)\l0x0008: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:406)\l0x0009: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:407)\l0x000a: CONST_STR  (r7 I:java.lang.String) =  \"\"  (LINE:408)\l0x000c: SGET  (r8 I:java.util.regex.Pattern) =  androidx.core.text.util.FindAddress.sWordRe java.util.regex.Pattern  (LINE:410)\l0x000e: INVOKE  (r8 I:java.util.regex.Matcher) = (r8 I:java.util.regex.Pattern), (r13 I:java.lang.CharSequence A[D('content' java.lang.String)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l}"];
Node_88 [shape=record,label="{88\:\ 0x0012|LOOP_START\lLOOP:0: B:88:0x0012\-\>B:142:0x00cc\l|0x0012: INVOKE  (r9 I:int) = (r13 I:java.lang.String A[D('content' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:412)\l}"];
Node_89 [shape=record,label="{89\:\ 0x0016|0x0016: IF  (r2 I:??[int, byte, short, char] A[D('it' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:152:0x00d6 \l}"];
Node_90 [shape=record,label="{90\:\ 0x0018|0x0018: INVOKE  (r9 I:boolean) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]), (r2 I:int A[D('it' int)]) type: VIRTUAL call: java.util.regex.Matcher.find(int):boolean A[MD:(int):boolean (c)] (LINE:413)\l}"];
Node_91 [shape=record,label="{91\:\ 0x001c|0x001c: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x0024 \l}"];
Node_94 [shape=record,label="{94\:\ 0x0024|0x0024: INVOKE  (r9 I:int) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)] (LINE:417)\l0x0028: INVOKE  (r10 I:int) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.start():int A[MD:():int (c)]\l0x002c: ARITH  (r9 I:int) = (r9 I:int) \- (r10 I:int) \l0x002d: CONST  (r10 I:??[int, float, short, byte, char]) = (25 ??[int, float, short, byte, char]) \l}"];
Node_95 [shape=record,label="{95\:\ 0x002f|0x002f: IF  (r9 I:??[int, byte, short, char]) \<= (r10 I:??[int, byte, short, char])  \-\> B:98:0x0037 \l}"];
Node_98 [shape=record,label="{98\:\ 0x0037|LOOP_START\lLOOP:1: B:98:0x0037\-\>B:103:0x004e\l|0x0037: INVOKE  (r9 I:int) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.start():int A[MD:():int (c)] (LINE:423)\l0x003b: CONST  (r10 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_99 [shape=record,label="{99\:\ 0x003c|0x003c: IF  (r2 I:??[int, byte, short, char] A[D('it' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:167:0x0050 \l}"];
Node_100 [shape=record,label="{100\:\ 0x003e|0x003e: ARITH  (r9 I:int) = (r2 I:int A[D('it' int)]) + (1 int)  (LINE:424)\l0x0040: INVOKE  (r2 I:char) = (r13 I:java.lang.String A[D('content' java.lang.String)]), (r2 I:int A[D('it' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x0044: CONST_STR  (r11 I:java.lang.String) =  \"nu000bfru0085u2028u2029\" \l0x0046: INVOKE  (r2 I:int) = (r11 I:java.lang.String), (r2 I:int) type: VIRTUAL call: java.lang.String.indexOf(int):int A[MD:(int):int (c)]\l}"];
Node_101 [shape=record,label="{101\:\ 0x004a|0x004a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:169:0x004e \l}"];
Node_102 [shape=record,label="{102\:\ 0x004c|0x004c: ARITH  (r3 I:int) = (r3 I:int A[D('numLines' int)]) + (1 int) \l}"];
Node_168 [shape=record,label="{168\:\ 0x004e|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x004e|LOOP_END\lLOOP:1: B:98:0x0037\-\>B:103:0x004e\l|0x004e: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' int)]) \l}"];
Node_169 [shape=record,label="{169\:\ 0x004e|SYNTHETIC\l}"];
Node_167 [shape=record,label="{167\:\ 0x0050|SYNTHETIC\l}"];
Node_104 [shape=record,label="{104\:\ 0x0050|0x0050: CONST  (r9 I:??[int, float, short, byte, char] A[D('it' int)]) = (5 ??[int, float, short, byte, char])  (LINE:428)\l}"];
Node_105 [shape=record,label="{105\:\ 0x0051|0x0051: IF  (r3 I:??[int, byte, short, char] A[D('numLines' int)]) \<= (r9 I:??[int, byte, short, char])  \-\> B:107:0x0055 \l}"];
Node_107 [shape=record,label="{107\:\ 0x0055|0x0055: ARITH  (r6 I:int) = (r6 I:int A[D('wordCount' int)]) + (1 int)  (LINE:431)\l0x0057: CONST  (r11 I:??[int, float, short, byte, char]) = (14 ??[int, float, short, byte, char]) \l}"];
Node_108 [shape=record,label="{108\:\ 0x0059|0x0059: IF  (r6 I:??[int, byte, short, char] A[D('wordCount' int)]) \<= (r11 I:??[int, byte, short, char])  \-\> B:110:0x005d \l}"];
Node_110 [shape=record,label="{110\:\ 0x005d|0x005d: INVOKE  (r11 I:java.util.regex.MatchResult) = (r13 I:java.lang.String A[D('content' java.lang.String)]), (r2 I:int A[D('it' int)]) type: STATIC call: androidx.core.text.util.FindAddress.matchHouseNumber(java.lang.String, int):java.util.regex.MatchResult A[MD:(java.lang.String, int):java.util.regex.MatchResult (m)] (LINE:433)\l0x0061: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_111 [shape=record,label="{111\:\ 0x0062|0x0062: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:119:0x006f \l}"];
Node_112 [shape=record,label="{112\:\ 0x0064|0x0064: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('consecutiveHouseNumbers' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:117:0x006b  (LINE:434)\l}"];
Node_113 [shape=record,label="{113\:\ 0x0066|0x0066: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_114 [shape=record,label="{114\:\ 0x0067|0x0067: IF  (r3 I:??[int, byte, short, char] A[D('numLines' int)]) \<= (r9 I:??[int, byte, short, char])  \-\> B:117:0x006b \l}"];
Node_156 [shape=record,label="{156\:\ 0x0069|SYNTHETIC\l}"];
Node_115 [shape=record,label="{115\:\ 0x0069|0x0069: NEG  (r9 I:int) = (r2 I:int A[D('it' int)])  (LINE:437)\l}"];
Node_116 [shape=record,label="{116\:\ 0x006a|RETURN\l|0x006a: RETURN  (r9 I:int) \l}"];
Node_86 [shape=record,label="{86\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_117 [shape=record,label="{117\:\ 0x006b|0x006b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('restartPos' int)]) != (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:160:0x00cc  (LINE:440)\l}"];
Node_118 [shape=record,label="{118\:\ 0x006d|0x006d: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('restartPos' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' int)]) \l}"];
Node_161 [shape=record,label="{161\:\ 0x00cc|SYNTHETIC\l}"];
Node_142 [shape=record,label="{142\:\ 0x00cc|LOOP_END\lLOOP:0: B:88:0x0012\-\>B:142:0x00cc\l|0x00cc: INVOKE  (r7 I:java.lang.String A[D('lastWord' java.lang.String)]) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]), (r12 I:int) type: VIRTUAL call: java.util.regex.Matcher.group(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:412)\l0x00d0: INVOKE  (r2 I:int A[D('it' int)]) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)]\l}"];
Node_160 [shape=record,label="{160\:\ 0x00cc|SYNTHETIC\l}"];
Node_119 [shape=record,label="{119\:\ 0x006f|0x006f: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('consecutiveHouseNumbers' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:444)\l0x0070: INVOKE  (r10 I:java.lang.String) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]), (r12 I:int) type: VIRTUAL call: java.util.regex.Matcher.group(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:446)\l0x0074: INVOKE  (r10 I:boolean) = (r10 I:java.lang.String) type: STATIC call: androidx.core.text.util.FindAddress.isValidLocationName(java.lang.String):boolean A[MD:(java.lang.String):boolean (m)]\l}"];
Node_120 [shape=record,label="{120\:\ 0x0078|0x0078: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:122:0x007c \l}"];
Node_121 [shape=record,label="{121\:\ 0x007a|0x007a: CONST  (r5 I:??[boolean, int, float, short, byte, char] A[D('foundLocationName' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:447)\l}"];
Node_162 [shape=record,label="{162\:\ 0x00cc|SYNTHETIC\l}"];
Node_122 [shape=record,label="{122\:\ 0x007c|0x007c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('wordCount' int)]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:125:0x0085  (LINE:451)\l}"];
Node_123 [shape=record,label="{123\:\ 0x007e|0x007e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('foundLocationName' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:125:0x0085 \l}"];
Node_158 [shape=record,label="{158\:\ 0x0080|SYNTHETIC\l}"];
Node_124 [shape=record,label="{124\:\ 0x0080|0x0080: INVOKE  (r2 I:int A[D('it' int)]) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)] (LINE:453)\l}"];
Node_143 [shape=record,label="{143\:\ 0x00d6|0x00d6: IF  (r1 I:??[int, byte, short, char] A[D('nonZipMatch' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:145:0x00d9  (LINE:488)\l}"];
Node_144 [shape=record,label="{144\:\ 0x00d8|RETURN\l|0x00d8: RETURN  (r1 I:int A[D('nonZipMatch' int)]) \l}"];
Node_145 [shape=record,label="{145\:\ 0x00d9|0x00d9: IF  (r0 I:??[int, byte, short, char] A[D('restartPos' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:147:0x00dd  (LINE:490)\l}"];
Node_146 [shape=record,label="{146\:\ 0x00db|0x00db: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('restartPos' int)]) \l}"];
Node_148 [shape=record,label="{148\:\ 0x00de|0x00de: NEG  (r9 I:int) = (r9 I:int) \l}"];
Node_149 [shape=record,label="{149\:\ 0x00df|RETURN\l|0x00df: RETURN  (r9 I:int) \l}"];
Node_147 [shape=record,label="{147\:\ 0x00dd|0x00dd: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' int)]) \l}"];
Node_125 [shape=record,label="{125\:\ 0x0085|0x0085: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('foundLocationName' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:163:0x00cc  (LINE:457)\l}"];
Node_126 [shape=record,label="{126\:\ 0x0087|0x0087: CONST  (r9 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l}"];
Node_127 [shape=record,label="{127\:\ 0x0088|0x0088: IF  (r6 I:??[int, byte, short, char] A[D('wordCount' int)]) \<= (r9 I:??[int, byte, short, char])  \-\> B:164:0x00cc \l}"];
Node_128 [shape=record,label="{128\:\ 0x008a|0x008a: INVOKE  (r9 I:java.util.regex.MatchResult) = (r13 I:java.lang.String A[D('content' java.lang.String)]), (r2 I:int A[D('it' int)]) type: STATIC call: androidx.core.text.util.FindAddress.matchState(java.lang.String, int):java.util.regex.MatchResult A[MD:(java.lang.String, int):java.util.regex.MatchResult (m)] (LINE:459)\l}"];
Node_129 [shape=record,label="{129\:\ 0x008e|0x008e: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('stateMatch' java.util.regex.MatchResult)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:165:0x00cc  (LINE:460)\l}"];
Node_130 [shape=record,label="{130\:\ 0x0090|0x0090: CONST_STR  (r10 I:java.lang.String) =  \"et\"  (LINE:461)\l0x0092: INVOKE  (r10 I:boolean) = (r7 I:java.lang.String A[D('lastWord' java.lang.String)]), (r10 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_131 [shape=record,label="{131\:\ 0x0096|0x0096: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:135:0x00a9 \l}"];
Node_132 [shape=record,label="{132\:\ 0x0098|0x0098: INVOKE  (r10 I:java.lang.String) = (r9 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult)]), (r12 I:int) type: INTERFACE call: java.util.regex.MatchResult.group(int):java.lang.String A[MD:(int):java.lang.String (c)]\l0x009c: CONST_STR  (r11 I:java.lang.String) =  \"al\" \l0x009e: INVOKE  (r10 I:boolean) = (r10 I:java.lang.String), (r11 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_133 [shape=record,label="{133\:\ 0x00a2|0x00a2: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:135:0x00a9 \l}"];
Node_155 [shape=record,label="{155\:\ 0x00a4|SYNTHETIC\l}"];
Node_134 [shape=record,label="{134\:\ 0x00a4|0x00a4: INVOKE  (r2 I:int A[D('it' int)]) = (r9 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult)]) type: INTERFACE call: java.util.regex.MatchResult.end():int A[MD:():int (c)] (LINE:463)\l}"];
Node_135 [shape=record,label="{135\:\ 0x00a9|0x00a9: SGET  (r10 I:java.util.regex.Pattern) =  androidx.core.text.util.FindAddress.sWordRe java.util.regex.Pattern  (LINE:468)\l0x00ab: INVOKE  (r10 I:java.util.regex.Matcher) = (r10 I:java.util.regex.Pattern), (r13 I:java.lang.CharSequence A[D('content' java.lang.String)]) type: VIRTUAL call: java.util.regex.Pattern.matcher(java.lang.CharSequence):java.util.regex.Matcher A[MD:(java.lang.CharSequence):java.util.regex.Matcher (c)]\l0x00af: INVOKE  (r11 I:int) = (r9 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult)]) type: INTERFACE call: java.util.regex.MatchResult.end():int A[MD:():int (c)] (LINE:469)\l0x00b3: INVOKE  (r11 I:boolean) = (r10 I:java.util.regex.Matcher A[D('zipMatcher' java.util.regex.Matcher)]), (r11 I:int) type: VIRTUAL call: java.util.regex.Matcher.find(int):boolean A[MD:(int):boolean (c)]\l}"];
Node_136 [shape=record,label="{136\:\ 0x00b7|0x00b7: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:141:0x00c8 \l}"];
Node_137 [shape=record,label="{137\:\ 0x00b9|0x00b9: INVOKE  (r11 I:java.lang.String) = (r10 I:java.util.regex.Matcher A[D('zipMatcher' java.util.regex.Matcher)]), (r12 I:int) type: VIRTUAL call: java.util.regex.Matcher.group(int):java.lang.String A[MD:(int):java.lang.String (c)] (LINE:470)\l0x00bd: INVOKE  (r11 I:boolean) = (r11 I:java.lang.String), (r9 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult)]) type: STATIC call: androidx.core.text.util.FindAddress.isValidZipCode(java.lang.String, java.util.regex.MatchResult):boolean A[MD:(java.lang.String, java.util.regex.MatchResult):boolean (m)]\l}"];
Node_138 [shape=record,label="{138\:\ 0x00c1|0x00c1: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:166:0x00cc \l}"];
Node_150 [shape=record,label="{150\:\ 0x00c3|SYNTHETIC\l}"];
Node_139 [shape=record,label="{139\:\ 0x00c3|0x00c3: INVOKE  (r11 I:int) = (r10 I:java.util.regex.Matcher A[D('zipMatcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)] (LINE:471)\l}"];
Node_140 [shape=record,label="{140\:\ 0x00c7|RETURN\l|0x00c7: RETURN  (r11 I:int) \l}"];
Node_166 [shape=record,label="{166\:\ 0x00cc|SYNTHETIC\l}"];
Node_141 [shape=record,label="{141\:\ 0x00c8|0x00c8: INVOKE  (r1 I:int A[D('nonZipMatch' int)]) = (r9 I:java.util.regex.MatchResult A[D('stateMatch' java.util.regex.MatchResult)]) type: INTERFACE call: java.util.regex.MatchResult.end():int A[MD:():int (c)] (LINE:482)\l}"];
Node_159 [shape=record,label="{159\:\ 0x00cc|SYNTHETIC\l}"];
Node_165 [shape=record,label="{165\:\ 0x00cc|SYNTHETIC\l}"];
Node_164 [shape=record,label="{164\:\ 0x00cc|SYNTHETIC\l}"];
Node_163 [shape=record,label="{163\:\ 0x00cc|SYNTHETIC\l}"];
Node_153 [shape=record,label="{153\:\ 0x00d6|SYNTHETIC\l}"];
Node_151 [shape=record,label="{151\:\ 0x00d6|SYNTHETIC\l}"];
Node_157 [shape=record,label="{157\:\ 0x0031|SYNTHETIC\l}"];
Node_96 [shape=record,label="{96\:\ 0x0031|0x0031: INVOKE  (r9 I:int) = (r8 I:java.util.regex.Matcher A[D('matcher' java.util.regex.Matcher)]) type: VIRTUAL call: java.util.regex.Matcher.end():int A[MD:():int (c)] (LINE:419)\l0x0035: NEG  (r9 I:int) = (r9 I:int) \l}"];
Node_97 [shape=record,label="{97\:\ 0x0036|RETURN\l|0x0036: RETURN  (r9 I:int) \l}"];
Node_154 [shape=record,label="{154\:\ 0x001e|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x001e|0x001e: INVOKE  (r9 I:int) = (r13 I:java.lang.String A[D('content' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:415)\l0x0022: NEG  (r9 I:int) = (r9 I:int) \l}"];
Node_93 [shape=record,label="{93\:\ 0x0023|RETURN\l|0x0023: RETURN  (r9 I:int) \l}"];
Node_152 [shape=record,label="{152\:\ 0x00d6|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static int androidx.core.text.util.FindAddress.attemptMatch((r13 I:java.lang.String A[D('content' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.util.regex.MatchResult A[D('houseNumberMatch' java.util.regex.MatchResult), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:97:0x0036 \-\> B:86:?, BACK_EDGE: B:103:0x004e \-\> B:98:0x0037, CROSS_EDGE: B:101:0x004a \-\> B:103:0x004e, CROSS_EDGE: B:116:0x006a \-\> B:86:?, BACK_EDGE: B:142:0x00cc \-\> B:88:0x0012, CROSS_EDGE: B:117:0x006b \-\> B:142:0x00cc, CROSS_EDGE: B:112:0x0064 \-\> B:117:0x006b, CROSS_EDGE: B:121:0x007a \-\> B:142:0x00cc, CROSS_EDGE: B:144:0x00d8 \-\> B:86:?, CROSS_EDGE: B:149:0x00df \-\> B:86:?, CROSS_EDGE: B:147:0x00dd \-\> B:148:0x00de, CROSS_EDGE: B:134:0x00a4 \-\> B:143:0x00d6, CROSS_EDGE: B:140:0x00c7 \-\> B:86:?, CROSS_EDGE: B:138:0x00c1 \-\> B:142:0x00cc, CROSS_EDGE: B:141:0x00c8 \-\> B:142:0x00cc, CROSS_EDGE: B:131:0x0096 \-\> B:135:0x00a9, CROSS_EDGE: B:129:0x008e \-\> B:142:0x00cc, CROSS_EDGE: B:127:0x0088 \-\> B:142:0x00cc, CROSS_EDGE: B:125:0x0085 \-\> B:142:0x00cc, CROSS_EDGE: B:122:0x007c \-\> B:125:0x0085, CROSS_EDGE: B:108:0x0059 \-\> B:143:0x00d6, CROSS_EDGE: B:105:0x0051 \-\> B:143:0x00d6, CROSS_EDGE: B:89:0x0016 \-\> B:143:0x00d6\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0040: r2 'it' I\l  0x0040\-0x0050: r9 'it' I\l  0x008e\-0x00cc: r9 'stateMatch' Ljava\/util\/regex\/MatchResult;\l  0x00af\-0x00cc: r10 'zipMatcher' Ljava\/util\/regex\/Matcher;\l  0x0001\-0x00df: r0 'restartPos' I\l  0x0002\-0x00df: r1 'nonZipMatch' I\l  0x0050\-0x00df: r2 'it' I\l  0x0007\-0x00df: r3 'numLines' I\l  0x0008\-0x00df: r4 'consecutiveHouseNumbers' Z\l  0x0009\-0x00df: r5 'foundLocationName' Z\l  0x000a\-0x00df: r6 'wordCount' I\l  0x000c\-0x00df: r7 'lastWord' Ljava\/lang\/String;\l  0x0012\-0x00df: r8 'matcher' Ljava\/util\/regex\/Matcher;\l  \-1 \-0x00df: r13 'content' Ljava\/lang\/String;\l  \-1 \-0x00df: r14 'houseNumberMatch' Ljava\/util\/regex\/MatchResult;\l}"];
MethodNode -> Node_85;Node_85 -> Node_87;
Node_87 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_152;
Node_90 -> Node_91;
Node_91 -> Node_94;
Node_91 -> Node_154[style=dashed];
Node_94 -> Node_95;
Node_95 -> Node_98;
Node_95 -> Node_157[style=dashed];
Node_98 -> Node_99;
Node_99 -> Node_100[style=dashed];
Node_99 -> Node_167;
Node_100 -> Node_101;
Node_101 -> Node_102[style=dashed];
Node_101 -> Node_169;
Node_102 -> Node_168;
Node_168 -> Node_103;
Node_103 -> Node_98;
Node_169 -> Node_103;
Node_167 -> Node_104;
Node_104 -> Node_105;
Node_105 -> Node_107;
Node_105 -> Node_151[style=dashed];
Node_107 -> Node_108;
Node_108 -> Node_110;
Node_108 -> Node_153[style=dashed];
Node_110 -> Node_111;
Node_111 -> Node_112[style=dashed];
Node_111 -> Node_119;
Node_112 -> Node_113[style=dashed];
Node_112 -> Node_117;
Node_113 -> Node_114;
Node_114 -> Node_117;
Node_114 -> Node_156[style=dashed];
Node_156 -> Node_115;
Node_115 -> Node_116;
Node_116 -> Node_86;
Node_117 -> Node_118[style=dashed];
Node_117 -> Node_160;
Node_118 -> Node_161;
Node_161 -> Node_142;
Node_142 -> Node_88;
Node_160 -> Node_142;
Node_119 -> Node_120;
Node_120 -> Node_121[style=dashed];
Node_120 -> Node_122;
Node_121 -> Node_162;
Node_162 -> Node_142;
Node_122 -> Node_123[style=dashed];
Node_122 -> Node_125;
Node_123 -> Node_125;
Node_123 -> Node_158[style=dashed];
Node_158 -> Node_124;
Node_124 -> Node_143;
Node_143 -> Node_144[style=dashed];
Node_143 -> Node_145;
Node_144 -> Node_86;
Node_145 -> Node_146[style=dashed];
Node_145 -> Node_147;
Node_146 -> Node_148;
Node_148 -> Node_149;
Node_149 -> Node_86;
Node_147 -> Node_148;
Node_125 -> Node_126[style=dashed];
Node_125 -> Node_163;
Node_126 -> Node_127;
Node_127 -> Node_128[style=dashed];
Node_127 -> Node_164;
Node_128 -> Node_129;
Node_129 -> Node_130[style=dashed];
Node_129 -> Node_165;
Node_130 -> Node_131;
Node_131 -> Node_132[style=dashed];
Node_131 -> Node_135;
Node_132 -> Node_133;
Node_133 -> Node_135;
Node_133 -> Node_155[style=dashed];
Node_155 -> Node_134;
Node_134 -> Node_143;
Node_135 -> Node_136;
Node_136 -> Node_137[style=dashed];
Node_136 -> Node_141;
Node_137 -> Node_138;
Node_138 -> Node_150[style=dashed];
Node_138 -> Node_166;
Node_150 -> Node_139;
Node_139 -> Node_140;
Node_140 -> Node_86;
Node_166 -> Node_142;
Node_141 -> Node_159;
Node_159 -> Node_142;
Node_165 -> Node_142;
Node_164 -> Node_142;
Node_163 -> Node_142;
Node_153 -> Node_143;
Node_151 -> Node_143;
Node_157 -> Node_96;
Node_96 -> Node_97;
Node_97 -> Node_86;
Node_154 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_86;
Node_152 -> Node_143;
}

