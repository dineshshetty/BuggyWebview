digraph "CFG forandroidx.core.text.util.FindAddress.findAddress(Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_9085685 {
label = "R(3:1|(1:(2:11|(2:(1:17)|(1:13)))(1:7))|20)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0000|java.util.regex.Matcher java.util.regex.Matcher r0 = androidx.core.text.util.FindAddress.sHouseNumberRe.matcher(r4)\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_478274385 {
label = "LOOP:0: (1:(2:11|(2:(1:17)|(1:13)))(1:7))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x000b|if (r0.find(r1) != false) goto L4\l}"];
subgraph cluster_Region_353968029 {
label = "R(1:(2:11|(2:(1:17)|(1:13)))(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_721702724 {
label = "IF [B:28:0x0016] THEN: R(2:11|(2:(1:17)|(1:13))) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0016|if (checkHouseNumber(r0.group(0)) != false) goto L10\l}"];
subgraph cluster_Region_1581538867 {
label = "R(2:11|(2:(1:17)|(1:13)))";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0018|int int r1 = r0.start()\lint int r2 = attemptMatch(r4, r0)\l}"];
subgraph cluster_Region_526896149 {
label = "R(2:(1:17)|(1:13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1832534191 {
label = "IF [B:30:0x0020] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0020|if (r2 \> 0) goto L15\l}"];
subgraph cluster_Region_292757876 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0026|RETURN\l|return r4.substring(r1, r2)\l}"];
}
}
subgraph cluster_Region_402924383 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0027|int r1 = \-r2\l}"];
}
}
}
subgraph cluster_Region_185389572 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0029|int r1 = r0.end()\l}"];
}
}
}
}
Node_35 [shape=record,label="{35\:\ 0x002e|RETURN\l|return null\l}"];
}
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0007|LOOP_START\lLOOP:0: B:25:0x0007\-\>B:41:0x0007\lPHI: r1 \l  PHI: (r1v1 'start' int) = (r1v0 'start' int), (r1v4 'start' int) binds: [B:24:0x0000, B:41:0x0007] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x000d}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0029|SYNTHETIC\l}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x0007|SYNTHETIC\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0007|LOOP_END\lSYNTHETIC\lLOOP:0: B:25:0x0007\-\>B:41:0x0007\lPHI: r1 \l  PHI: (r1v4 'start' int) = (r1v3 'start' int), (r1v5 'start' int) binds: [B:43:0x0007, B:42:0x0007] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0018|SYNTHETIC\l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0007|SYNTHETIC\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0022|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0022}"];
Node_23 [shape=record,color=red,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x002e|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static java.lang.String androidx.core.text.util.FindAddress.findAddress((r4v0 'content' java.lang.String A[D('content' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:33:0x0027 \-\> B:25:0x0007, BACK_EDGE: B:34:0x0029 \-\> B:25:0x0007, CROSS_EDGE: B:36:0x002f \-\> B:23:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_22;Node_24 -> Node_25;
Node_26 -> Node_27;
Node_26 -> Node_39[style=dashed];
Node_28 -> Node_38[style=dashed];
Node_28 -> Node_40;
Node_29 -> Node_30;
Node_30 -> Node_33[style=dashed];
Node_30 -> Node_37;
Node_32 -> Node_23;
Node_33 -> Node_43;
Node_34 -> Node_42;
Node_35 -> Node_23;
Node_22 -> Node_24;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_38 -> Node_34;
Node_42 -> Node_41;
Node_41 -> Node_25;
Node_40 -> Node_29;
Node_43 -> Node_41;
Node_37 -> Node_31;
Node_31 -> Node_32;
Node_39 -> Node_35;
}

