digraph "CFG forandroidx.core.text.PrecomputedTextCompat.create(Ljava\/lang\/CharSequence;Landroidx\/core\/text\/PrecomputedTextCompat$Params;)Landroidx\/core\/text\/PrecomputedTextCompat;" {
Node_38 [shape=record,label="{38\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0000|0x0000: INVOKE  (r14 I:java.lang.Object A[D('text' java.lang.CharSequence)]) type: STATIC call: androidx.core.util.Preconditions.checkNotNull(java.lang.Object):java.lang.Object A[MD:\<T\>:(T):T (m)] (LINE:431)\l0x0003: INVOKE  (r15 I:java.lang.Object A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) type: STATIC call: androidx.core.util.Preconditions.checkNotNull(java.lang.Object):java.lang.Object A[MD:\<T\>:(T):T (m)] (LINE:432)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0006|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_41 [shape=record,label="{41\:\ 0x0006|TRY_ENTER\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0006: CONST_STR  (r0 I:java.lang.String) =  \"PrecomputedText\" A[TRY_ENTER] (LINE:435)\l0x0008: INVOKE  (r0 I:java.lang.String) type: STATIC call: androidx.core.os.TraceCompat.beginSection(java.lang.String):void A[Catch: all \-\> 0x00b7, MD:(java.lang.String):void (m)]\l0x000b: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int A[Catch: all \-\> 0x00b7] (LINE:437)\l0x000d: CONST  (r1 I:??[int, float, short, byte, char]) = (29 ??[int, float, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x000f|0x000f: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:48:0x0024 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0011|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0011: IGET  (r0 I:android.text.PrecomputedText$Params) = (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) androidx.core.text.PrecomputedTextCompat.Params.mWrapped android.text.PrecomputedText$Params A[Catch: all \-\> 0x00b7]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0024 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0015|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0015: NEW_INSTANCE  (r0 I:androidx.core.text.PrecomputedTextCompat) =  androidx.core.text.PrecomputedTextCompat A[Catch: all \-\> 0x00b7] (LINE:438)\l0x0017: IGET  (r1 I:android.text.PrecomputedText$Params) = (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) androidx.core.text.PrecomputedTextCompat.Params.mWrapped android.text.PrecomputedText$Params A[Catch: all \-\> 0x00b7]\l0x0019: INVOKE  (r1 I:android.text.PrecomputedText) = (r14 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)]), (r1 I:android.text.PrecomputedText$Params) type: STATIC call: android.text.PrecomputedText.create(java.lang.CharSequence, android.text.PrecomputedText$Params):android.text.PrecomputedText A[Catch: all \-\> 0x00b7, MD:(java.lang.CharSequence, android.text.PrecomputedText$Params):android.text.PrecomputedText (c)] (LINE:439)\l0x001d: INVOKE  \l  (r0 I:androidx.core.text.PrecomputedTextCompat)\l  (r1 I:android.text.PrecomputedText)\l  (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)])\l type: DIRECT call: androidx.core.text.PrecomputedTextCompat.\<init\>(android.text.PrecomputedText, androidx.core.text.PrecomputedTextCompat$Params):void A[Catch: all \-\> 0x00b7, MD:(android.text.PrecomputedText, androidx.core.text.PrecomputedTextCompat$Params):void (m), TRY_LEAVE]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0020|0x0020: INVOKE   type: STATIC call: androidx.core.os.TraceCompat.endSection():void A[MD:():void (m)] (LINE:483)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0023|RETURN\l|0x0023: RETURN  (r0 I:androidx.core.text.PrecomputedTextCompat)  (LINE:438)\l}"];
Node_39 [shape=record,label="{39\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_48 [shape=record,label="{48\:\ 0x0024|TRY_ENTER\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0024: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList A[Catch: all \-\> 0x00b7, TRY_ENTER] (LINE:442)\l0x0026: INVOKE  (r0 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[Catch: all \-\> 0x00b7, MD:():void (c)]\l0x0029: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:444)\l0x002a: INVOKE  (r2 I:int) = (r14 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[Catch: all \-\> 0x00b7, MD:():int (c)] (LINE:445)\l0x002e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:446)\l}"];
Node_49 [shape=record,label="{49\:\ 0x002f|LOOP_START\lLOOP:0: B:49:0x002f\-\>B:54:0x003e\l|0x002f: IF  (r3 I:??[int, byte, short, char] A[D('paraStart' int)]) \>= (r2 I:??[int, byte, short, char] A[D('end' int)])  \-\> B:72:0x0047 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0031|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0031: CONST  (r4 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:447)\l0x0033: INVOKE  (r4 I:int) = \l  (r14 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)])\l  (r4 I:char)\l  (r3 I:int A[D('paraStart' int)])\l  (r2 I:int A[D('end' int)])\l type: STATIC call: android.text.TextUtils.indexOf(java.lang.CharSequence, char, int, int):int A[Catch: all \-\> 0x00b7, MD:(java.lang.CharSequence, char, int, int):int (c)]\l0x0037: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('paraEnd' int)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0038|0x0038: IF  (r1 I:??[int, byte, short, char] A[D('paraEnd' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:53:0x003c  (LINE:448)\l}"];
Node_52 [shape=record,label="{52\:\ 0x003a|0x003a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('paraEnd' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('end' int)])  (LINE:451)\l0x003b: GOTO  \-\> 0x003e \l}"];
Node_74 [shape=record,label="{74\:\ 0x003e|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x003e|LOOP_END\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lLOOP:0: B:49:0x002f\-\>B:54:0x003e\lCatch: all \-\> 0x00b7\l|0x003e: INVOKE  (r4 I:java.lang.Integer) = (r1 I:int A[D('paraEnd' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: all \-\> 0x00b7, MD:(int):java.lang.Integer (c)] (LINE:456)\l0x0042: INVOKE  (r0 I:java.util.ArrayList A[D('ends' java.util.ArrayList\<java.lang.Integer\>)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[Catch: all \-\> 0x00b7, MD:(E):boolean (c)]\l0x0045: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('paraStart' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('paraEnd' int)])  (LINE:446)\l0x0046: GOTO  \-\> 0x002f \l}"];
Node_53 [shape=record,label="{53\:\ 0x003c|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x003c: ARITH  (r1 I:int) = (r1 I:int A[D('paraEnd' int)]) + (1 int) A[Catch: all \-\> 0x00b7] (LINE:453)\l}"];
Node_73 [shape=record,label="{73\:\ 0x003e|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0047|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0047|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0047: INVOKE  (r3 I:int) = (r0 I:java.util.ArrayList A[D('ends' java.util.ArrayList\<java.lang.Integer\>)]) type: VIRTUAL call: java.util.ArrayList.size():int A[Catch: all \-\> 0x00b7, MD:():int (c)] (LINE:458)\l0x004b: NEW_ARRAY  (r3 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] A[Catch: all \-\> 0x00b7]\l0x004d: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:459)\l}"];
Node_56 [shape=record,label="{56\:\ 0x004e|LOOP_START\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lLOOP:1: B:56:0x004e\-\>B:58:0x0054\lCatch: all \-\> 0x00b7\l|0x004e: INVOKE  (r5 I:int) = (r0 I:java.util.ArrayList A[D('ends' java.util.ArrayList\<java.lang.Integer\>)]) type: VIRTUAL call: java.util.ArrayList.size():int A[Catch: all \-\> 0x00b7, MD:():int (c)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x0052|0x0052: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:75:0x0063 \l}"];
Node_58 [shape=record,label="{58\:\ 0x0054|LOOP_END\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lLOOP:1: B:56:0x004e\-\>B:58:0x0054\lCatch: all \-\> 0x00b7\l|0x0054: INVOKE  (r5 I:java.lang.Object) = (r0 I:java.util.ArrayList A[D('ends' java.util.ArrayList\<java.lang.Integer\>)]), (r4 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[Catch: all \-\> 0x00b7, MD:(int):E (c)] (LINE:460)\l0x0058: CHECK_CAST (r5 I:java.lang.Integer) = (java.lang.Integer) (r5 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x00b7]\l0x005a: INVOKE  (r5 I:int) = (r5 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[Catch: all \-\> 0x00b7, MD:():int (c)]\l0x005e: APUT  \l  (r3 I:??[int, float][] A[D('result' int[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l  (r5 I:??[int, float, short, byte, char])\l A[Catch: all \-\> 0x00b7]\l0x0060: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int) A[Catch: all \-\> 0x00b7] (LINE:459)\l0x0062: GOTO  \-\> 0x004e \l}"];
Node_75 [shape=record,label="{75\:\ 0x0063|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0063|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0063: SGET  (r4 I:int A[D('i' int)]) =  android.os.Build.VERSION.SDK_INT int A[Catch: all \-\> 0x00b7] (LINE:466)\l0x0065: CONST  (r5 I:??[int, float, short, byte, char]) = (23 ??[int, float, short, byte, char]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0067|0x0067: IF  (r4 I:??[int, byte, short, char]) \< (r5 I:??[int, byte, short, char])  \-\> B:62:0x0095 \l}"];
Node_61 [shape=record,label="{61\:\ 0x0069|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0069: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:467)\l0x006a: INVOKE  (r5 I:int) = (r14 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[Catch: all \-\> 0x00b7, MD:():int (c)]\l0x006e: INVOKE  (r6 I:android.text.TextPaint) = (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) type: VIRTUAL call: androidx.core.text.PrecomputedTextCompat.Params.getTextPaint():android.text.TextPaint A[Catch: all \-\> 0x00b7, MD:():android.text.TextPaint (m)]\l0x0072: CONST  (r7 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char]) \l0x0075: INVOKE  (r4 I:android.text.StaticLayout$Builder) = \l  (r14 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)])\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:android.text.TextPaint)\l  (r7 I:int)\l type: STATIC call: android.text.StaticLayout.Builder.obtain(java.lang.CharSequence, int, int, android.text.TextPaint, int):android.text.StaticLayout$Builder A[Catch: all \-\> 0x00b7, MD:(java.lang.CharSequence, int, int, android.text.TextPaint, int):android.text.StaticLayout$Builder (c)]\l0x0079: INVOKE  (r5 I:int) = (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) type: VIRTUAL call: androidx.core.text.PrecomputedTextCompat.Params.getBreakStrategy():int A[Catch: all \-\> 0x00b7, MD:():int (m)] (LINE:469)\l0x007d: INVOKE  (r4 I:android.text.StaticLayout$Builder) = (r4 I:android.text.StaticLayout$Builder), (r5 I:int) type: VIRTUAL call: android.text.StaticLayout.Builder.setBreakStrategy(int):android.text.StaticLayout$Builder A[Catch: all \-\> 0x00b7, MD:(int):android.text.StaticLayout$Builder (c)]\l0x0081: INVOKE  (r5 I:int) = (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) type: VIRTUAL call: androidx.core.text.PrecomputedTextCompat.Params.getHyphenationFrequency():int A[Catch: all \-\> 0x00b7, MD:():int (m)] (LINE:470)\l0x0085: INVOKE  (r4 I:android.text.StaticLayout$Builder) = (r4 I:android.text.StaticLayout$Builder), (r5 I:int) type: VIRTUAL call: android.text.StaticLayout.Builder.setHyphenationFrequency(int):android.text.StaticLayout$Builder A[Catch: all \-\> 0x00b7, MD:(int):android.text.StaticLayout$Builder (c)]\l0x0089: INVOKE  (r5 I:android.text.TextDirectionHeuristic) = (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) type: VIRTUAL call: androidx.core.text.PrecomputedTextCompat.Params.getTextDirection():android.text.TextDirectionHeuristic A[Catch: all \-\> 0x00b7, MD:():android.text.TextDirectionHeuristic (m)] (LINE:471)\l0x008d: INVOKE  (r4 I:android.text.StaticLayout$Builder) = (r4 I:android.text.StaticLayout$Builder), (r5 I:android.text.TextDirectionHeuristic) type: VIRTUAL call: android.text.StaticLayout.Builder.setTextDirection(android.text.TextDirectionHeuristic):android.text.StaticLayout$Builder A[Catch: all \-\> 0x00b7, MD:(android.text.TextDirectionHeuristic):android.text.StaticLayout$Builder (c)]\l0x0091: INVOKE  (r4 I:android.text.StaticLayout$Builder) type: VIRTUAL call: android.text.StaticLayout.Builder.build():android.text.StaticLayout A[Catch: all \-\> 0x00b7, MD:():android.text.StaticLayout (c)] (LINE:472)\l0x0094: GOTO  \-\> 0x00ae \l}"];
Node_65 [shape=record,label="{65\:\ 0x00ae|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x00ae: NEW_INSTANCE  (r4 I:androidx.core.text.PrecomputedTextCompat) =  androidx.core.text.PrecomputedTextCompat A[Catch: all \-\> 0x00b7] (LINE:481)\l0x00b0: INVOKE  \l  (r4 I:androidx.core.text.PrecomputedTextCompat)\l  (r14 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)])\l  (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)])\l  (r3 I:int[] A[D('result' int[])])\l type: DIRECT call: androidx.core.text.PrecomputedTextCompat.\<init\>(java.lang.CharSequence, androidx.core.text.PrecomputedTextCompat$Params, int[]):void A[Catch: all \-\> 0x00b7, MD:(java.lang.CharSequence, androidx.core.text.PrecomputedTextCompat$Params, int[]):void (m), TRY_LEAVE]\l}"];
Node_66 [shape=record,label="{66\:\ 0x00b3|0x00b3: INVOKE   type: STATIC call: androidx.core.os.TraceCompat.endSection():void A[MD:():void (m)] (LINE:483)\l}"];
Node_67 [shape=record,label="{67\:\ 0x00b6|RETURN\l|0x00b6: RETURN  (r4 I:androidx.core.text.PrecomputedTextCompat)  (LINE:481)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0095|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x0095: SGET  (r4 I:int) =  android.os.Build.VERSION.SDK_INT int A[Catch: all \-\> 0x00b7] (LINE:473)\l0x0097: CONST  (r5 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0099|0x0099: IF  (r4 I:??[int, byte, short, char]) \< (r5 I:??[int, byte, short, char])  \-\> B:65:0x00ae \l}"];
Node_64 [shape=record,label="{64\:\ 0x009b|TryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\lCatch: all \-\> 0x00b7\l|0x009b: NEW_INSTANCE  (r6 I:android.text.StaticLayout) =  android.text.StaticLayout A[Catch: all \-\> 0x00b7] (LINE:474)\l0x009d: INVOKE  (r8 I:android.text.TextPaint) = (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params)]) type: VIRTUAL call: androidx.core.text.PrecomputedTextCompat.Params.getTextPaint():android.text.TextPaint A[Catch: all \-\> 0x00b7, MD:():android.text.TextPaint (m)]\l0x00a1: CONST  (r9 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char]) \l0x00a4: SGET  (r10 I:android.text.Layout$Alignment) =  android.text.Layout.Alignment.ALIGN_NORMAL android.text.Layout$Alignment A[Catch: all \-\> 0x00b7]\l0x00a6: CONST  (r11 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x00a8: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a9: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00aa: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('text' java.lang.CharSequence)]) \l0x00ab: INVOKE  \l  (r6 I:android.text.StaticLayout)\l  (r7 I:java.lang.CharSequence)\l  (r8 I:android.text.TextPaint)\l  (r9 I:int)\l  (r10 I:android.text.Layout$Alignment)\l  (r11 I:float)\l  (r12 I:float)\l  (r13 I:boolean)\l type: DIRECT call: android.text.StaticLayout.\<init\>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean):void A[Catch: all \-\> 0x00b7, MD:(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, boolean):void (c)]\l}"];
Node_68 [shape=record,label="{68\:\ 0x00b7|ExcHandler: all \-\> 0x00b7\l|0x00b7: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x00b7] (LINE:483)\l}"];
Node_69 [shape=record,label="{69\:\ 0x00b8|0x00b8: INVOKE   type: STATIC call: androidx.core.os.TraceCompat.endSection():void A[MD:():void (m)]\l}"];
Node_70 [shape=record,label="{70\:\ 0x00bb|0x00bb: THROW  (r0 I:java.lang.Throwable)  (LINE:484)\l}"];
MethodNode[shape=record,label="{public static androidx.core.text.PrecomputedTextCompat androidx.core.text.PrecomputedTextCompat.create((r14 I:java.lang.CharSequence A[D('text' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:androidx.core.text.PrecomputedTextCompat$Params A[D('params' androidx.core.text.PrecomputedTextCompat$Params), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:54:0x003e \-\> B:49:0x002f, CROSS_EDGE: B:53:0x003c \-\> B:54:0x003e, BACK_EDGE: B:58:0x0054 \-\> B:56:0x004e, CROSS_EDGE: B:67:0x00b6 \-\> B:39:?, CROSS_EDGE: B:64:0x009b \-\> B:65:0x00ae, CROSS_EDGE: B:63:0x0099 \-\> B:65:0x00ae, CROSS_EDGE: B:42:0x000f \-\> B:48:0x0024, CROSS_EDGE: B:70:0x00bb \-\> B:39:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002f\-0x0047: r3 'paraStart' I\l  0x004e\-0x0063: r4 'i' I\l  0x0029\-0x00b7: r0 'ends' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Ljava\/lang\/Integer;\>;\l  0x002a\-0x00b7: r1 'paraEnd' I\l  0x002e\-0x00b7: r2 'end' I\l  0x004d\-0x00b7: r3 'result' [I\l  \-1 \-0x00bb: r14 'text' Ljava\/lang\/CharSequence;\l  \-1 \-0x00bb: r15 'params' Landroidx\/core\/text\/PrecomputedTextCompat$Params;\lTryCatch #0 \{all \-\> 0x00b7, blocks: (B:41:0x0006, B:43:0x0011, B:45:0x0015, B:48:0x0024, B:50:0x0031, B:54:0x003e, B:53:0x003c, B:55:0x0047, B:56:0x004e, B:58:0x0054, B:59:0x0063, B:61:0x0069, B:65:0x00ae, B:62:0x0095, B:64:0x009b), top: B:71:0x0006 \}\l}"];
MethodNode -> Node_38;Node_38 -> Node_40;
Node_40 -> Node_71;
Node_71 -> Node_41;
Node_71 -> Node_68;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_48;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_48;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_39;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_72;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_74;
Node_74 -> Node_54;
Node_54 -> Node_49;
Node_53 -> Node_73;
Node_73 -> Node_54;
Node_72 -> Node_55;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_75;
Node_58 -> Node_56;
Node_75 -> Node_59;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_62;
Node_61 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_39;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_65;
Node_68 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_39;
}

