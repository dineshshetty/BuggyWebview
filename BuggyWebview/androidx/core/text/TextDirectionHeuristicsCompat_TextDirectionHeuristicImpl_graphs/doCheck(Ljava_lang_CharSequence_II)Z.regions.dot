digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.doCheck(Ljava\/lang\/CharSequence;II)Z" {
subgraph cluster_Region_1004211847 {
label = "R(1:2)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_665804606 {
label = "Switch: 3
 case 0 -> R(1:7)
 case 1 -> R(1:6)
 case default -> R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0006|switch(r1.mAlgorithm.checkRtl(r2, r3, r4)) \{\l    case 0: goto L7;\l    case 1: goto L6;\l    default: goto L3;\l\}\l}"];
subgraph cluster_Region_1711793278 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0010|RETURN\l|return true\l}"];
}
subgraph cluster_Region_551954682 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000e|RETURN\l|return false\l}"];
}
subgraph cluster_Region_1126872407 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|return defaultIsRtl()\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0009}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private boolean androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.doCheck((r1v0 'this' androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl A[IMMUTABLE_TYPE, THIS]), (r2v0 'cs' java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'count' int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000f \-\> B:11:?, CROSS_EDGE: B:19:0x0011 \-\> B:11:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_16;
Node_13 -> Node_18;
Node_18 -> Node_11;
Node_16 -> Node_11;
Node_15 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

