digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.isRtl(Ljava\/lang\/CharSequence;II)Z" {
subgraph cluster_Region_505496739 {
label = "R(1:(2:(1:14)|(1:(2:(1:9)|(1:12)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1197242125 {
label = "R(2:(1:14)|(1:(2:(1:9)|(1:12))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1458317028 {
label = "IF [B:17:0x0000, B:18:0x0002, B:19:0x0004, B:21:0x000b] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0000|if (r2 == null) goto L13\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|ADDED_TO_REGION\l|if (r3 \< 0) goto L13\l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|ADDED_TO_REGION\l|if (r4 \< 0) goto L13\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|ADDED_TO_REGION\l|if ((r2.length() \- r4) \< r3) goto L13\l}"];
subgraph cluster_Region_1081778531 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0020|throw new java.lang.IllegalArgumentException()\l}"];
}
}
subgraph cluster_Region_1416294803 {
label = "R(1:(2:(1:9)|(1:12)))";
node [shape=record,color=blue];
subgraph cluster_Region_1881800716 {
label = "R(2:(1:9)|(1:12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1204208619 {
label = "IF [B:23:0x000f] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x000f|if (r1.mAlgorithm == null) goto L8\l}"];
subgraph cluster_Region_1377965001 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0015|RETURN\l|return defaultIsRtl()\l}"];
}
}
subgraph cluster_Region_1372034679 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x001a|RETURN\l|return doCheck(r2, r3, r4)\l}"];
}
}
}
}
}
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0006}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x000d}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0011}"];
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0016}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x001b}"];
MethodNode[shape=record,label="{public boolean androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.isRtl((r1v0 'this' androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl A[IMMUTABLE_TYPE, THIS]), (r2v0 'cs' java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'start' int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'count' int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:16:?, CROSS_EDGE: B:29:0x0020 \-\> B:16:?, CROSS_EDGE: B:19:0x0004 \-\> B:28:0x001b, CROSS_EDGE: B:18:0x0002 \-\> B:28:0x001b, CROSS_EDGE: B:17:0x0000 \-\> B:28:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.text.TextDirectionHeuristicCompat.isRtl(java.lang.CharSequence, int, int):boolean]\l}"];
MethodNode -> Node_15;Node_17 -> Node_18[style=dashed];
Node_17 -> Node_28;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_29 -> Node_16;
Node_23 -> Node_24;
Node_23 -> Node_26[style=dashed];
Node_25 -> Node_16;
Node_27 -> Node_16;
Node_15 -> Node_17;
Node_20 -> Node_21;
Node_22 -> Node_23;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_28 -> Node_29;
}

