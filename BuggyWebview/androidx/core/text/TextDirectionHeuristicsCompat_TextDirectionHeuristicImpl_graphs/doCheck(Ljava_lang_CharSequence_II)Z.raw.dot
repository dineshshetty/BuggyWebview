digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.doCheck(Ljava\/lang\/CharSequence;II)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IGET  (r0 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm) = (r1 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl) androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.mAlgorithm androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm  (LINE:140)\l0x0002: INVOKE  (r0 I:int) = \l  (r0 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm)\l  (r2 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)])\l  (r3 I:int A[D('start' int)])\l  (r4 I:int A[D('count' int)])\l type: INTERFACE call: androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionAlgorithm.checkRtl(java.lang.CharSequence, int, int):int A[MD:(java.lang.CharSequence, int, int):int (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|0x0006: SWITCH  (r0 I:??)\l case 0: goto B:18:0x0010\l case 1: goto B:16:0x000e\l default: goto B:14:0x0009 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: INVOKE  (r0 I:boolean) = (r1 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl) type: VIRTUAL call: androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.defaultIsRtl():boolean A[MD:():boolean (m)] (LINE:146)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|RETURN\l|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:144)\l0x000f: RETURN  (r0 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|RETURN\l|0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:142)\l0x0011: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.doCheck((r1 'this' I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000f \-\> B:11:?, CROSS_EDGE: B:19:0x0011 \-\> B:11:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0019: r2 'cs' Ljava\/lang\/CharSequence;\l  \-1 \-0x0019: r3 'start' I\l  \-1 \-0x0019: r4 'count' I\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_11;
Node_16 -> Node_11;
Node_18 -> Node_11;
}

