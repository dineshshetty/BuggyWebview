digraph "CFG forandroidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.isRtl(Ljava\/lang\/CharSequence;II)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cs' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x001b  (LINE:130)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|0x0002: IF  (r3 I:??[int, byte, short, char] A[D('start' int)]) \< (0 ??[int, byte, short, char])  \-\> B:28:0x001b \l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|0x0004: IF  (r4 I:??[int, byte, short, char] A[D('count' int)]) \< (0 ??[int, byte, short, char])  \-\> B:28:0x001b \l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|0x0006: INVOKE  (r0 I:int) = (r2 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x000a: ARITH  (r0 I:int) = (r0 I:int) \- (r4 I:int A[D('count' int)]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|0x000b: IF  (r0 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char] A[D('start' int)])  \-\> B:28:0x001b \l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|0x000d: IGET  (r0 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm) = (r1 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl) androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.mAlgorithm androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionAlgorithm  (LINE:133)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0016 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0011|0x0011: INVOKE  (r0 I:boolean) = (r1 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl) type: VIRTUAL call: androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.defaultIsRtl():boolean A[MD:():boolean (m)] (LINE:134)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|RETURN\l|0x0015: RETURN  (r0 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: INVOKE  (r0 I:boolean) = \l  (r1 I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl)\l  (r2 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence)])\l  (r3 I:int A[D('start' int)])\l  (r4 I:int A[D('count' int)])\l type: DIRECT call: androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.doCheck(java.lang.CharSequence, int, int):boolean A[MD:(java.lang.CharSequence, int, int):boolean (m)] (LINE:136)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|RETURN\l|0x001a: RETURN  (r0 I:boolean) \l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|0x001b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:131)\l0x001d: INVOKE  (r0 I:java.lang.IllegalArgumentException) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>():void A[MD:():void (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|0x0020: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public boolean androidx.core.text.TextDirectionHeuristicsCompat.TextDirectionHeuristicImpl.isRtl((r1 'this' I:androidx.core.text.TextDirectionHeuristicsCompat$TextDirectionHeuristicImpl A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.CharSequence A[D('cs' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:16:?, CROSS_EDGE: B:29:0x0020 \-\> B:16:?, CROSS_EDGE: B:19:0x0004 \-\> B:28:0x001b, CROSS_EDGE: B:18:0x0002 \-\> B:28:0x001b, CROSS_EDGE: B:17:0x0000 \-\> B:28:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r2 'cs' Ljava\/lang\/CharSequence;\l  \-1 \-0x0020: r3 'start' I\l  \-1 \-0x0020: r4 'count' I\lMETHOD_OVERRIDE: [androidx.core.text.TextDirectionHeuristicCompat.isRtl(java.lang.CharSequence, int, int):boolean]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_28;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_28;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_28;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_16;
Node_28 -> Node_29;
Node_29 -> Node_16;
}

