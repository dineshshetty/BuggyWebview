digraph "CFG forandroidx.core.provider.FontRequestWorker.2.accept(Landroidx\/core\/provider\/FontRequestWorker$TypefaceResult;)V" {
subgraph cluster_Region_460630523 {
label = "R(2:(1:2)|3)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_32744628 {
label = "IF [B:8:0x0000] THEN: R(1:2) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0000|if (r3 == null) goto L2\l}"];
subgraph cluster_Region_501189879 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0002|r3 = new androidx.core.provider.FontRequestWorker.TypefaceResult(\-3)\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x0009|PHI: r3 \l  PHI: (r3v1 'typefaceResult' androidx.core.provider.FontRequestWorker$TypefaceResult) = (r3v0 'typefaceResult' androidx.core.provider.FontRequestWorker$TypefaceResult), (r3v2 'typefaceResult' androidx.core.provider.FontRequestWorker$TypefaceResult) binds: [B:8:0x0000, B:9:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|r1.onTypefaceResult(r3)\l}"];
}
Node_6 [shape=record,color=red,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x000e}"];
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.core.provider.FontRequestWorker.2.accept((r2v0 'this' androidx.core.provider.FontRequestWorker$2 A[IMMUTABLE_TYPE, THIS]), (r3v0 'typefaceResult' androidx.core.provider.FontRequestWorker$TypefaceResult A[D('typefaceResult' androidx.core.provider.FontRequestWorker$TypefaceResult), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0000 \-\> B:10:0x0009\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lREPLACED_BY: androidx.core.provider.FontRequestWorker.2.accept(androidx.core.provider.FontRequestWorker$TypefaceResult):void\lBRIDGED_BY: androidx.core.provider.FontRequestWorker.2.accept(androidx.core.provider.FontRequestWorker$TypefaceResult):void\lMETHOD_OVERRIDE: [androidx.core.util.Consumer.accept(T):void]\l}"];
MethodNode -> Node_6;Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_6 -> Node_8;
Node_11 -> Node_7;
}

