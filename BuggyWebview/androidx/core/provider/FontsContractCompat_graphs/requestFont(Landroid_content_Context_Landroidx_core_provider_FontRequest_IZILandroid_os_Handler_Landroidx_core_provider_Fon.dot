digraph "CFG forandroidx.core.provider.FontsContractCompat.requestFont(Landroid\/content\/Context;Landroidx\/core\/provider\/FontRequest;IZILandroid\/os\/Handler;Landroidx\/core\/provider\/FontsContractCompat$FontRequestCallback;)Landroid\/graphics\/Typeface;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|androidx.core.provider.CallbackWithHandler r0 = new androidx.core.provider.CallbackWithHandler(r8, r7)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|if (r5 == false) goto L6\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|return androidx.core.provider.FontRequestWorker.requestFontSync(r2, r3, r0, r4, r6)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c}"];
Node_15 [shape=record,label="{15\:\ 0x0011|RETURN\l|return androidx.core.provider.FontRequestWorker.requestFontAsync(r2, r3, r4, null, r0)\l}"];
MethodNode[shape=record,label="{public static android.graphics.Typeface androidx.core.provider.FontsContractCompat.requestFont((r2v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'request' androidx.core.provider.FontRequest A[D('request' androidx.core.provider.FontRequest), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'style' int A[D('style' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'isBlockingFetch' boolean A[D('isBlockingFetch' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'timeout' int A[D('timeout' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'handler' android.os.Handler A[D('handler' android.os.Handler), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'callback' androidx.core.provider.FontsContractCompat$FontRequestCallback A[D('callback' androidx.core.provider.FontsContractCompat$FontRequestCallback), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0011 \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

