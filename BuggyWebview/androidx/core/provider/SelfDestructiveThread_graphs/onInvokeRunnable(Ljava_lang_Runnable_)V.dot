digraph "CFG forandroidx.core.provider.SelfDestructiveThread.onInvokeRunnable(Ljava\/lang\/Runnable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r6.run()\ljava.lang.Object r0 = r5.mLock\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|monitor\-enter(r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|TRY_ENTER\lTryCatch #0 \{, blocks: (B:4:0x0006, B:5:0x0018), top: B:10:0x0006 \}\lCatch: all \-\> 0x001a\l|r5.mHandler.removeMessages(0)     \/\/ Catch: java.lang.Throwable \-\> L1a\landroid.os.Handler r1 = r5.mHandler     \/\/ Catch: java.lang.Throwable \-\> L1a\lr1.sendMessageDelayed(r1.obtainMessage(0), (long) r5.mDestructAfterMillisec)     \/\/ Catch: java.lang.Throwable \-\> L1a\l}"];
Node_5 [shape=record,label="{5\:\ 0x0018|TryCatch #0 \{, blocks: (B:4:0x0006, B:5:0x0018), top: B:10:0x0006 \}\lCatch: all \-\> 0x001a\l|monitor\-exit(r0)     \/\/ Catch: java.lang.Throwable \-\> L1a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0019|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|REMOVE\lExcHandler: all \-\> 0x001a\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x001a\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{void androidx.core.provider.SelfDestructiveThread.onInvokeRunnable((r5v0 'this' androidx.core.provider.SelfDestructiveThread A[IMMUTABLE_TYPE, THIS]), (r6v0 'runnable' java.lang.Runnable A[D('runnable' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x001c \-\> B:1:?, CROSS_EDGE: B:10:0x0006 \-\> B:7:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_10;
Node_10 -> Node_4;
Node_10 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_1;
Node_11 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

