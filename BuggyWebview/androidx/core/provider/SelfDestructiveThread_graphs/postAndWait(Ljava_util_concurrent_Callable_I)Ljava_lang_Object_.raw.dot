digraph "CFG forandroidx.core.provider.SelfDestructiveThread.postAndWait(Ljava\/util\/concurrent\/Callable;I)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r4 I:java.util.concurrent.locks.ReentrantLock) =  java.util.concurrent.locks.ReentrantLock  (LINE:171)\l0x0002: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantLock) type: DIRECT call: java.util.concurrent.locks.ReentrantLock.\<init\>():void A[MD:():void (c)]\l0x0005: INVOKE  (r7 I:java.util.concurrent.locks.Condition) = (r4 I:java.util.concurrent.locks.ReentrantLock A[D('lock' java.util.concurrent.locks.ReentrantLock)]) type: VIRTUAL call: java.util.concurrent.locks.ReentrantLock.newCondition():java.util.concurrent.locks.Condition A[MD:():java.util.concurrent.locks.Condition (c)] (LINE:172)\l0x0009: NEW_INSTANCE  (r2 I:java.util.concurrent.atomic.AtomicReference) =  java.util.concurrent.atomic.AtomicReference  (LINE:174)\l0x000b: INVOKE  (r2 I:java.util.concurrent.atomic.AtomicReference) type: DIRECT call: java.util.concurrent.atomic.AtomicReference.\<init\>():void A[MD:():void (c)]\l0x000e: NEW_INSTANCE  (r5 I:java.util.concurrent.atomic.AtomicBoolean) =  java.util.concurrent.atomic.AtomicBoolean  (LINE:175)\l0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0011: INVOKE  (r5 I:java.util.concurrent.atomic.AtomicBoolean), (r0 I:boolean) type: DIRECT call: java.util.concurrent.atomic.AtomicBoolean.\<init\>(boolean):void A[MD:(boolean):void (c)]\l0x0014: NEW_INSTANCE  (r8 I:androidx.core.provider.SelfDestructiveThread$3) =  androidx.core.provider.SelfDestructiveThread$3  (LINE:176)\l0x0016: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x0017: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY]) \l0x0018: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('callable' java.util.concurrent.Callable\<T\>)]) \l0x0019: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('cond' java.util.concurrent.locks.Condition)]) \l0x001a: INVOKE  \l  (r0 I:androidx.core.provider.SelfDestructiveThread$3)\l  (r1 I:androidx.core.provider.SelfDestructiveThread)\l  (r2 I:java.util.concurrent.atomic.AtomicReference A[D('holder' java.util.concurrent.atomic.AtomicReference\<T\>)])\l  (r3 I:java.util.concurrent.Callable)\l  (r4 I:java.util.concurrent.locks.ReentrantLock A[D('lock' java.util.concurrent.locks.ReentrantLock)])\l  (r5 I:java.util.concurrent.atomic.AtomicBoolean A[D('running' java.util.concurrent.atomic.AtomicBoolean)])\l  (r6 I:java.util.concurrent.locks.Condition)\l type: DIRECT call: androidx.core.provider.SelfDestructiveThread.3.\<init\>(androidx.core.provider.SelfDestructiveThread, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Callable, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.locks.Condition):void A[MD:(androidx.core.provider.SelfDestructiveThread, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Callable, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.locks.Condition):void (m)]\l0x001d: INVOKE  (r10 I:androidx.core.provider.SelfDestructiveThread), (r8 I:java.lang.Runnable) type: DIRECT call: androidx.core.provider.SelfDestructiveThread.post(java.lang.Runnable):void A[MD:(java.lang.Runnable):void (m)]\l0x0020: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantLock A[D('lock' java.util.concurrent.locks.ReentrantLock)]) type: VIRTUAL call: java.util.concurrent.locks.ReentrantLock.lock():void A[MD:():void (c)] (LINE:194)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0023|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x0023|TRY_ENTER\lTryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lCatch: all \-\> 0x005c\l|0x0023: INVOKE  (r0 I:boolean) = (r5 I:java.util.concurrent.atomic.AtomicBoolean A[D('running' java.util.concurrent.atomic.AtomicBoolean)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicBoolean.get():boolean A[Catch: all \-\> 0x005c, MD:():boolean (c), TRY_ENTER] (LINE:196)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0027|0x0027: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0031 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0029|TRY_LEAVE\lTryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lCatch: all \-\> 0x005c\l|0x0029: INVOKE  (r0 I:java.lang.Object) = (r2 I:java.util.concurrent.atomic.AtomicReference A[D('holder' java.util.concurrent.atomic.AtomicReference\<T\>)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReference.get():java.lang.Object A[Catch: all \-\> 0x005c, MD:():V (c), TRY_LEAVE] (LINE:197)\l}"];
Node_6 [shape=record,label="{6\:\ 0x002d|0x002d: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantLock A[D('lock' java.util.concurrent.locks.ReentrantLock)]) type: VIRTUAL call: java.util.concurrent.locks.ReentrantLock.unlock():void A[MD:():void (c)] (LINE:214)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|RETURN\l|0x0030: RETURN  (r0 I:T)  (LINE:197)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lCatch: all \-\> 0x005c\l|0x0031: SGET  (r0 I:java.util.concurrent.TimeUnit) =  java.util.concurrent.TimeUnit.MILLISECONDS java.util.concurrent.TimeUnit A[Catch: all \-\> 0x005c, TRY_ENTER] (LINE:199)\l0x0033: CAST (r8 I:long) = (long) (r12 I:int A[D('timeoutMillis' int)]) A[Catch: all \-\> 0x005c]\l0x0034: INVOKE  (r0 I:long) = (r0 I:java.util.concurrent.TimeUnit), (r8 I:long) type: VIRTUAL call: java.util.concurrent.TimeUnit.toNanos(long):long A[Catch: all \-\> 0x005c, MD:(long):long (c), TRY_LEAVE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0038|LOOP_START\lSYNTHETIC\lEXC_TOP_SPLITTER\lLOOP:0: B:25:0x0038\-\>B:18:0x0051\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{InterruptedException \-\> 0x003e, blocks: (B:9:0x0038), top: B:25:0x0038 \}\lCatch: InterruptedException \-\> 0x003e, all \-\> 0x005c\l|0x0038: INVOKE  (r8 I:long) = \l  (r7 I:java.util.concurrent.locks.Condition A[D('cond' java.util.concurrent.locks.Condition)])\l  (r0 I:long A[D('remaining' long)])\l type: INTERFACE call: java.util.concurrent.locks.Condition.awaitNanos(long):long A[Catch: InterruptedException \-\> 0x003e, all \-\> 0x005c, MD:(long):long throws java.lang.InterruptedException (c), TRY_ENTER, TRY_LEAVE] (LINE:202)\l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|0x003c: MOVE  (r0 I:??[long, double] A[D('remaining' long)]) = (r8 I:??[long, double]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|TRY_ENTER\lTryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lCatch: all \-\> 0x005c\l|0x003f: INVOKE  (r3 I:boolean) = (r5 I:java.util.concurrent.atomic.AtomicBoolean A[D('running' java.util.concurrent.atomic.AtomicBoolean)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicBoolean.get():boolean A[Catch: all \-\> 0x005c, MD:():boolean (c), TRY_ENTER] (LINE:206)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x004d \l}"];
Node_17 [shape=record,label="{17\:\ 0x004d|0x004d: CONST  (r8 I:??[long, double]) = (0 ??[long, double])  (LINE:209)\l0x004f: CMP_L  (r3 I:int) = (r0 I:long A[D('remaining' long)]), (r8 I:long) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0051|LOOP_END\lLOOP:0: B:25:0x0038\-\>B:18:0x0051\l|0x0051: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:28:0x0054 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0054|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0054|TRY_ENTER\lTryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lCatch: all \-\> 0x005c\l|0x0054: NEW_INSTANCE  (r3 I:java.lang.InterruptedException) =  java.lang.InterruptedException A[Catch: all \-\> 0x005c, TRY_ENTER] (LINE:210)\l0x0056: CONST_STR  (r6 I:java.lang.String) =  \"timeout\" \l0x0058: INVOKE  (r3 I:java.lang.InterruptedException), (r6 I:java.lang.String) type: DIRECT call: java.lang.InterruptedException.\<init\>(java.lang.String):void A[Catch: all \-\> 0x005c, MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005b|TRY_LEAVE\lTryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lCatch: all \-\> 0x005c\l|0x005b: THROW  (r3 I:java.lang.Throwable) A[Catch: all \-\> 0x005c, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0045|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0045|TRY_LEAVE\lTryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lCatch: all \-\> 0x005c\l|0x0045: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.concurrent.atomic.AtomicReference A[D('holder' java.util.concurrent.atomic.AtomicReference\<T\>)]) type: VIRTUAL call: java.util.concurrent.atomic.AtomicReference.get():java.lang.Object A[Catch: all \-\> 0x005c, MD:():V (c), TRY_LEAVE] (LINE:207)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantLock A[D('lock' java.util.concurrent.locks.ReentrantLock)]) type: VIRTUAL call: java.util.concurrent.locks.ReentrantLock.unlock():void A[MD:():void (c)] (LINE:214)\l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|RETURN\l|0x004c: RETURN  (r3 I:T)  (LINE:207)\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|ExcHandler: InterruptedException \-\> 0x003e\l|0x003e: MOVE_EXCEPTION  (r3 I:java.lang.InterruptedException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: InterruptedException \-\> 0x003e] (LINE:203)\l}"];
Node_22 [shape=record,label="{22\:\ 0x005c|ExcHandler: all \-\> 0x005c\l|0x005c: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x005c] (LINE:214)\l}"];
Node_23 [shape=record,label="{23\:\ 0x005d|0x005d: INVOKE  (r4 I:java.util.concurrent.locks.ReentrantLock A[D('lock' java.util.concurrent.locks.ReentrantLock)]) type: VIRTUAL call: java.util.concurrent.locks.ReentrantLock.unlock():void A[MD:():void (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0060|0x0060: THROW  (r0 I:java.lang.Throwable)  (LINE:215)\l}"];
MethodNode[shape=record,label="{public T androidx.core.provider.SelfDestructiveThread.postAndWait((r10 'this' I:androidx.core.provider.SelfDestructiveThread A[IMMUTABLE_TYPE, THIS]), (r11 I:java.util.concurrent.Callable\<T\> A[D('callable' java.util.concurrent.Callable\<T\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('timeoutMillis' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x004c \-\> B:1:?, CROSS_EDGE: B:21:0x005b \-\> B:1:?, BACK_EDGE: B:18:0x0051 \-\> B:25:0x0038, CROSS_EDGE: B:11:0x003e \-\> B:12:0x003f, CROSS_EDGE: B:25:0x0038 \-\> B:11:0x003e, CROSS_EDGE: B:24:0x0060 \-\> B:1:?\lTryCatch #0 \{InterruptedException \-\> 0x003e, blocks: (B:9:0x0038), top: B:25:0x0038 \}, TryCatch #1 \{all \-\> 0x005c, blocks: (B:3:0x0023, B:5:0x0029, B:8:0x0031, B:9:0x0038, B:12:0x003f, B:14:0x0045, B:20:0x0054, B:21:0x005b), top: B:27:0x0023 \}\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/concurrent\/Callable\<TT;\>;I)TT;\lDebug Info:\l  0x000e\-0x005b: r2 'holder' Ljava\/util\/concurrent\/atomic\/AtomicReference;, signature: Ljava\/util\/concurrent\/atomic\/AtomicReference\<TT;\>;\l  0x0005\-0x005b: r4 'lock' Ljava\/util\/concurrent\/locks\/ReentrantLock;\l  0x0014\-0x005b: r5 'running' Ljava\/util\/concurrent\/atomic\/AtomicBoolean;\l  0x0009\-0x005b: r7 'cond' Ljava\/util\/concurrent\/locks\/Condition;\l  0x0000\-0x005b: r11 'callable' Ljava\/util\/concurrent\/Callable;, signature: Ljava\/util\/concurrent\/Callable\<TT;\>;\l  \-1 \-0x005b: r12 'timeoutMillis' I\l  0x0038\-0x005c: r0 'remaining' J\l  0x005c\-0x0060: r2 'holder' Ljava\/util\/concurrent\/atomic\/AtomicReference;, signature: Ljava\/util\/concurrent\/atomic\/AtomicReference\<TT;\>;\l  0x005c\-0x0060: r4 'lock' Ljava\/util\/concurrent\/locks\/ReentrantLock;\l  0x005c\-0x0060: r5 'running' Ljava\/util\/concurrent\/atomic\/AtomicBoolean;\l  0x005c\-0x0060: r7 'cond' Ljava\/util\/concurrent\/locks\/Condition;\l  0x005c\-0x0060: r11 'callable' Ljava\/util\/concurrent\/Callable;, signature: Ljava\/util\/concurrent\/Callable\<TT;\>;\l  0x005c\-0x0060: r12 'timeoutMillis' I\lEXCEPTIONS:[Ljava\/lang\/InterruptedException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_27;
Node_27 -> Node_3;
Node_27 -> Node_22;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_8 -> Node_25;
Node_25 -> Node_9;
Node_25 -> Node_11;
Node_9 -> Node_10;
Node_9 -> Node_26;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_17;
Node_13 -> Node_29[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_25[style=dashed];
Node_18 -> Node_28;
Node_28 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_1;
Node_29 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_1;
Node_26 -> Node_11;
Node_11 -> Node_12;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_1;
}

