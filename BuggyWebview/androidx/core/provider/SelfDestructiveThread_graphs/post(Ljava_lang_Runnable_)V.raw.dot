digraph "CFG forandroidx.core.provider.SelfDestructiveThread.post(Ljava\/lang\/Runnable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mLock java.lang.Object  (LINE:111)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: MONITOR_ENTER  (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{all \-\> 0x003b, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x002a, B:8:0x0039), top: B:13:0x0003 \}\lCatch: all \-\> 0x003b\l|0x0003: IGET  (r1 I:android.os.HandlerThread) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mThread android.os.HandlerThread A[Catch: all \-\> 0x003b, TRY_ENTER] (LINE:112)\l0x0005: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x002a \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|TryCatch #0 \{all \-\> 0x003b, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x002a, B:8:0x0039), top: B:13:0x0003 \}\lCatch: all \-\> 0x003b\l|0x0008: NEW_INSTANCE  (r1 I:android.os.HandlerThread) =  android.os.HandlerThread A[Catch: all \-\> 0x003b] (LINE:113)\l0x000a: IGET  (r3 I:java.lang.String) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mThreadName java.lang.String A[Catch: all \-\> 0x003b]\l0x000c: IGET  (r4 I:int) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mPriority int A[Catch: all \-\> 0x003b]\l0x000e: INVOKE  (r1 I:android.os.HandlerThread), (r3 I:java.lang.String), (r4 I:int) type: DIRECT call: android.os.HandlerThread.\<init\>(java.lang.String, int):void A[Catch: all \-\> 0x003b, MD:(java.lang.String, int):void (c)]\l0x0011: IPUT  (r1 I:android.os.HandlerThread), (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mThread android.os.HandlerThread A[Catch: all \-\> 0x003b]\l0x0013: INVOKE  (r1 I:android.os.HandlerThread) type: VIRTUAL call: android.os.HandlerThread.start():void A[Catch: all \-\> 0x003b, MD:():void (c)] (LINE:114)\l0x0016: NEW_INSTANCE  (r1 I:android.os.Handler) =  android.os.Handler A[Catch: all \-\> 0x003b] (LINE:115)\l0x0018: IGET  (r3 I:android.os.HandlerThread) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mThread android.os.HandlerThread A[Catch: all \-\> 0x003b]\l0x001a: INVOKE  (r3 I:android.os.Looper) = (r3 I:android.os.HandlerThread) type: VIRTUAL call: android.os.HandlerThread.getLooper():android.os.Looper A[Catch: all \-\> 0x003b, MD:():android.os.Looper (c)]\l0x001e: IGET  (r4 I:android.os.Handler$Callback) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mCallback android.os.Handler$Callback A[Catch: all \-\> 0x003b]\l0x0020: INVOKE  (r1 I:android.os.Handler), (r3 I:android.os.Looper), (r4 I:android.os.Handler$Callback) type: DIRECT call: android.os.Handler.\<init\>(android.os.Looper, android.os.Handler$Callback):void A[Catch: all \-\> 0x003b, MD:(android.os.Looper, android.os.Handler$Callback):void (c)]\l0x0023: IPUT  (r1 I:android.os.Handler), (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mHandler android.os.Handler A[Catch: all \-\> 0x003b]\l0x0025: IGET  (r1 I:int) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mGeneration int A[Catch: all \-\> 0x003b] (LINE:116)\l0x0027: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) A[Catch: all \-\> 0x003b]\l0x0028: IPUT  (r1 I:int), (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mGeneration int A[Catch: all \-\> 0x003b]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|TryCatch #0 \{all \-\> 0x003b, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x002a, B:8:0x0039), top: B:13:0x0003 \}\lCatch: all \-\> 0x003b\l|0x002a: IGET  (r1 I:android.os.Handler) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mHandler android.os.Handler A[Catch: all \-\> 0x003b] (LINE:118)\l0x002c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002d: INVOKE  (r1 I:android.os.Handler), (r3 I:int) type: VIRTUAL call: android.os.Handler.removeMessages(int):void A[Catch: all \-\> 0x003b, MD:(int):void (c)]\l0x0030: IGET  (r1 I:android.os.Handler) = (r5 I:androidx.core.provider.SelfDestructiveThread) androidx.core.provider.SelfDestructiveThread.mHandler android.os.Handler A[Catch: all \-\> 0x003b] (LINE:119)\l0x0032: INVOKE  (r2 I:android.os.Message) = (r1 I:android.os.Handler), (r2 I:int), (r6 I:java.lang.Object A[D('runnable' java.lang.Runnable)]) type: VIRTUAL call: android.os.Handler.obtainMessage(int, java.lang.Object):android.os.Message A[Catch: all \-\> 0x003b, MD:(int, java.lang.Object):android.os.Message (c)]\l0x0036: INVOKE  (r1 I:android.os.Handler), (r2 I:android.os.Message) type: VIRTUAL call: android.os.Handler.sendMessage(android.os.Message):boolean A[Catch: all \-\> 0x003b, MD:(android.os.Message):boolean (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|TryCatch #0 \{all \-\> 0x003b, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x002a, B:8:0x0039), top: B:13:0x0003 \}\lCatch: all \-\> 0x003b\l|0x0039: MONITOR_EXIT  (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x003b] (LINE:120)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|RETURN\l|0x003a: RETURN    (LINE:121)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|ExcHandler: all \-\> 0x003b\l|0x003b: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x003b] (LINE:120)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|TRY_LEAVE\lCatch: all \-\> 0x003b\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void androidx.core.provider.SelfDestructiveThread.post((r5 'this' I:androidx.core.provider.SelfDestructiveThread A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Runnable A[D('runnable' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x003d \-\> B:1:?, CROSS_EDGE: B:5:0x0006 \-\> B:7:0x002a, CROSS_EDGE: B:13:0x0003 \-\> B:10:0x003b\lDebug Info:\l  \-1 \-0x003d: r6 'runnable' Ljava\/lang\/Runnable;\lTryCatch #0 \{all \-\> 0x003b, blocks: (B:4:0x0003, B:6:0x0008, B:7:0x002a, B:8:0x0039), top: B:13:0x0003 \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_13;
Node_13 -> Node_4;
Node_13 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_14;
Node_9 -> Node_1;
Node_14 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

