digraph "CFG forandroidx.core.provider.DocumentsContractCompat.isTreeUri(Landroid\/net\/Uri;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:81)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:boolean)  (LINE:82)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:83)\l0x000a: CONST  (r2 I:??[int, float, short, byte, char]) = (24 ??[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: IF  (r0 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:13:0x0027 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: INVOKE  (r0 I:java.util.List) = (r4 I:android.net.Uri A[D('uri' android.net.Uri)]) type: VIRTUAL call: android.net.Uri.getPathSegments():java.util.List A[MD:():java.util.List\<java.lang.String\> (c)] (LINE:85)\l0x0012: INVOKE  (r2 I:int) = (r0 I:java.util.List A[D('paths' java.util.List\<java.lang.String\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:86)\l0x0016: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IF  (r2 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char])  \-\> B:15:? \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.List A[D('paths' java.util.List\<java.lang.String\>)]), (r1 I:int) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x001d: CONST_STR  (r3 I:java.lang.String) =  \"tree\" \l0x001f: INVOKE  (r2 I:boolean) = (r3 I:java.lang.String), (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0023|0x0023: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|RETURN\lORIG_RETURN\l|0x0025: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0026: RETURN  (r1 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|0x0026: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0026: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|0x0027: INVOKE  (r0 I:boolean) = (r4 I:android.net.Uri A[D('uri' android.net.Uri)]) type: STATIC call: androidx.core.provider.DocumentsContractCompat.DocumentsContractApi24Impl.isTreeUri(android.net.Uri):boolean A[MD:(android.net.Uri):boolean (m)] (LINE:88)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.provider.DocumentsContractCompat.isTreeUri((r4 I:android.net.Uri A[D('uri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0026 \-\> B:1:?, CROSS_EDGE: B:10:0x0023 \-\> B:12:0x0026, CROSS_EDGE: B:8:0x0017 \-\> B:12:0x0026, CROSS_EDGE: B:14:0x002b \-\> B:1:?\lDebug Info:\l  0x0012\-0x0027: r0 'paths' Ljava\/util\/List;, signature: Ljava\/util\/List\<Ljava\/lang\/String;\>;\l  \-1 \-0x002b: r4 'uri' Landroid\/net\/Uri;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_1;
Node_16 -> Node_1;
Node_15 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

