digraph "CFG forandroidx.core.provider.DocumentsContractCompat.isTreeUri(Landroid\/net\/Uri;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (android.os.Build.VERSION.SDK_INT \>= 21) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|RETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008}"];
Node_6 [shape=record,label="{6\:\ 0x000c|if (android.os.Build.VERSION.SDK_INT \>= 24) goto L14\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|java.util.List r0 = r4.getPathSegments()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|if (r0.size() \< 2) goto L13\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019}"];
Node_10 [shape=record,label="{10\:\ 0x0023|if (androidx.core.provider.DocumentsContractCompat.PATH_TREE.equals(r0.get(0)) == false) goto L12\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|RETURN\lORIG_RETURN\l|return true\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027}"];
Node_14 [shape=record,label="{14\:\ 0x002b|RETURN\l|return androidx.core.provider.DocumentsContractCompat.DocumentsContractApi24Impl.isTreeUri(r4)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.provider.DocumentsContractCompat.isTreeUri((r4v0 'uri' android.net.Uri A[D('uri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0026 \-\> B:1:?, CROSS_EDGE: B:10:0x0023 \-\> B:12:0x0026, CROSS_EDGE: B:8:0x0017 \-\> B:12:0x0026, CROSS_EDGE: B:14:0x002b \-\> B:1:?\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_16;
Node_11 -> Node_1;
Node_16 -> Node_1;
Node_15 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

