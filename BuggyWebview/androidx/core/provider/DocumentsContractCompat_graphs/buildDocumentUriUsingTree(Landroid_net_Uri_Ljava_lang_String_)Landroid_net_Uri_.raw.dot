digraph "CFG forandroidx.core.provider.DocumentsContractCompat.buildDocumentUriUsingTree(Landroid\/net\/Uri;Ljava\/lang\/String;)Landroid\/net\/Uri;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:140)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r0 I:android.net.Uri) = (r2 I:android.net.Uri A[D('treeUri' android.net.Uri)]), (r3 I:java.lang.String A[D('documentId' java.lang.String)]) type: STATIC call: androidx.core.provider.DocumentsContractCompat.DocumentsContractApi21Impl.buildDocumentUriUsingTree(android.net.Uri, java.lang.String):android.net.Uri A[MD:(android.net.Uri, java.lang.String):android.net.Uri (m)] (LINE:141)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:android.net.Uri) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|RETURN\l|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:143)\l0x000c: RETURN  (r0 I:android.net.Uri) \l}"];
MethodNode[shape=record,label="{public static android.net.Uri androidx.core.provider.DocumentsContractCompat.buildDocumentUriUsingTree((r2 I:android.net.Uri A[D('treeUri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[D('documentId' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000c \-\> B:1:?\lDebug Info:\l  \-1 \-0x000c: r2 'treeUri' Landroid\/net\/Uri;\l  \-1 \-0x000c: r3 'documentId' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_1;
}

