digraph "CFG forandroidx.core.provider.SelfDestructiveThread.1.handleMessage(Landroid\/os\/Message;)Z" {
subgraph cluster_Region_458067985 {
label = "R(1:2)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_1259289753 {
label = "Switch: 3
 case 0 -> R(2:7|8)
 case 1 -> R(2:5|6)
 case default -> R(1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0003|switch(r4.what) \{\l    case 0: goto L7;\l    case 1: goto L5;\l    default: goto L3;\l\}\l}"];
subgraph cluster_Region_1234641599 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0011|androidx.core.provider.SelfDestructiveThread.this.onDestruction()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0016|RETURN\l|return true\l}"];
}
subgraph cluster_Region_41042819 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0007|androidx.core.provider.SelfDestructiveThread.this.onInvokeRunnable((java.lang.Runnable) r4.obj)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0010|RETURN\l|return true\l}"];
}
subgraph cluster_Region_1967687364 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|return true\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean androidx.core.provider.SelfDestructiveThread.1.handleMessage((r3v0 'this' androidx.core.provider.SelfDestructiveThread$1 A[IMMUTABLE_TYPE, THIS]), (r4v0 'msg' android.os.Message A[D('msg' android.os.Message), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:6:0x0010 \-\> B:1:?, CROSS_EDGE: B:8:0x0016 \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.os.Handler.Callback.handleMessage(android.os.Message):boolean\}]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5;
Node_3 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_4 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
}

