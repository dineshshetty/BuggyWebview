digraph "CFG forandroidx.core.provider.DocumentsContractCompat.DocumentsContractApi21Impl.createDocument(Landroid\/content\/ContentResolver;Landroid\/net\/Uri;Ljava\/lang\/String;Ljava\/lang\/String;)Landroid\/net\/Uri;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:android.net.Uri) = \l  (r1 I:android.content.ContentResolver A[D('content' android.content.ContentResolver)])\l  (r2 I:android.net.Uri A[D('parentDocumentUri' android.net.Uri)])\l  (r3 I:java.lang.String A[D('mimeType' java.lang.String)])\l  (r4 I:java.lang.String A[D('displayName' java.lang.String)])\l type: STATIC call: android.provider.DocumentsContract.createDocument(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String):android.net.Uri A[MD:(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String):android.net.Uri throws java.io.FileNotFoundException (c)] (LINE:309)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:android.net.Uri) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static android.net.Uri androidx.core.provider.DocumentsContractCompat.DocumentsContractApi21Impl.createDocument((r1 I:android.content.ContentResolver A[D('content' android.content.ContentResolver), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:android.net.Uri A[D('parentDocumentUri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[D('mimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[D('displayName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0004: r1 'content' Landroid\/content\/ContentResolver;\l  \-1 \-0x0004: r2 'parentDocumentUri' Landroid\/net\/Uri;\l  \-1 \-0x0004: r3 'mimeType' Ljava\/lang\/String;\l  \-1 \-0x0004: r4 'displayName' Ljava\/lang\/String;\lEXCEPTIONS:[Ljava\/io\/FileNotFoundException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

