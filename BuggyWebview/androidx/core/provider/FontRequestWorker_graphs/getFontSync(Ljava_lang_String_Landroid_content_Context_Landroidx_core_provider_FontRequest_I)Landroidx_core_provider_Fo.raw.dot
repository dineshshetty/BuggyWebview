digraph "CFG forandroidx.core.provider.FontRequestWorker.getFontSync(Ljava\/lang\/String;Landroid\/content\/Context;Landroidx\/core\/provider\/FontRequest;I)Landroidx\/core\/provider\/FontRequestWorker$TypefaceResult;" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: SGET  (r0 I:androidx.collection.LruCache\<java.lang.String, android.graphics.Typeface\>) =  androidx.core.provider.FontRequestWorker.sTypefaceCache androidx.collection.LruCache  (LINE:238)\l0x0002: INVOKE  (r1 I:java.lang.Object) = (r0 I:androidx.collection.LruCache), (r6 I:java.lang.Object A[D('cacheId' java.lang.String)]) type: VIRTUAL call: androidx.collection.LruCache.get(java.lang.Object):java.lang.Object A[MD:(K):V (m)]\l0x0006: CHECK_CAST (r1 I:android.graphics.Typeface) = (android.graphics.Typeface) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cached' android.graphics.Typeface)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0010  (LINE:239)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) =  androidx.core.provider.FontRequestWorker$TypefaceResult  (LINE:240)\l0x000c: INVOKE  \l  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult)\l  (r1 I:android.graphics.Typeface A[D('cached' android.graphics.Typeface)])\l type: DIRECT call: androidx.core.provider.FontRequestWorker.TypefaceResult.\<init\>(android.graphics.Typeface):void A[MD:(android.graphics.Typeface):void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) \l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|0x0010: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:245)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0011|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NameNotFoundException \-\> 0x003d, blocks: (B:30:0x0011), top: B:44:0x0011 \}\lCatch: NameNotFoundException \-\> 0x003d\l|0x0011: INVOKE  (r3 I:androidx.core.provider.FontsContractCompat$FontFamilyResult) = \l  (r7 I:android.content.Context A[D('context' android.content.Context)])\l  (r8 I:androidx.core.provider.FontRequest A[D('request' androidx.core.provider.FontRequest)])\l  (r2 I:android.os.CancellationSignal)\l type: STATIC call: androidx.core.provider.FontProvider.getFontFamilyResult(android.content.Context, androidx.core.provider.FontRequest, android.os.CancellationSignal):androidx.core.provider.FontsContractCompat$FontFamilyResult A[Catch: NameNotFoundException \-\> 0x003d, MD:(android.content.Context, androidx.core.provider.FontRequest, android.os.CancellationSignal):androidx.core.provider.FontsContractCompat$FontFamilyResult throws android.content.pm.PackageManager$NameNotFoundException (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0016|0x0016: INVOKE  (r4 I:int) = \l  (r3 I:androidx.core.provider.FontsContractCompat$FontFamilyResult A[D('result' androidx.core.provider.FontsContractCompat$FontFamilyResult)])\l type: STATIC call: androidx.core.provider.FontRequestWorker.getFontFamilyResultStatus(androidx.core.provider.FontsContractCompat$FontFamilyResult):int A[MD:(androidx.core.provider.FontsContractCompat$FontFamilyResult):int (m)] (LINE:250)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fontFamilyResultStatus' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0022  (LINE:251)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: NEW_INSTANCE  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) =  androidx.core.provider.FontRequestWorker$TypefaceResult  (LINE:252)\l0x001e: INVOKE  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult), (r4 I:int A[D('fontFamilyResultStatus' int)]) type: DIRECT call: androidx.core.provider.FontRequestWorker.TypefaceResult.\<init\>(int):void A[MD:(int):void (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0023: INVOKE  (r5 I:androidx.core.provider.FontsContractCompat$FontInfo[]) = \l  (r3 I:androidx.core.provider.FontsContractCompat$FontFamilyResult A[D('result' androidx.core.provider.FontsContractCompat$FontFamilyResult)])\l type: VIRTUAL call: androidx.core.provider.FontsContractCompat.FontFamilyResult.getFonts():androidx.core.provider.FontsContractCompat$FontInfo[] A[MD:():androidx.core.provider.FontsContractCompat$FontInfo[] (m)] (LINE:256)\l0x0027: INVOKE  (r2 I:android.graphics.Typeface) = \l  (r7 I:android.content.Context A[D('context' android.content.Context)])\l  (r2 I:android.os.CancellationSignal)\l  (r5 I:androidx.core.provider.FontsContractCompat$FontInfo[])\l  (r9 I:int A[D('style' int)])\l type: STATIC call: androidx.core.graphics.TypefaceCompat.createFromFontInfo(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[], int):android.graphics.Typeface A[MD:(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat$FontInfo[], int):android.graphics.Typeface (m)] (LINE:255)\l}"];
Node_36 [shape=record,label="{36\:\ 0x002b|0x002b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('typeface' android.graphics.Typeface)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0036  (LINE:258)\l}"];
Node_37 [shape=record,label="{37\:\ 0x002d|0x002d: INVOKE  \l  (r0 I:androidx.collection.LruCache)\l  (r6 I:java.lang.Object A[D('cacheId' java.lang.String)])\l  (r2 I:java.lang.Object A[D('typeface' android.graphics.Typeface)])\l type: VIRTUAL call: androidx.collection.LruCache.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (m)] (LINE:259)\l0x0030: NEW_INSTANCE  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) =  androidx.core.provider.FontRequestWorker$TypefaceResult  (LINE:260)\l0x0032: INVOKE  \l  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult)\l  (r2 I:android.graphics.Typeface A[D('typeface' android.graphics.Typeface)])\l type: DIRECT call: androidx.core.provider.FontRequestWorker.TypefaceResult.\<init\>(android.graphics.Typeface):void A[MD:(android.graphics.Typeface):void (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0035|RETURN\l|0x0035: RETURN  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0036|0x0036: NEW_INSTANCE  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) =  androidx.core.provider.FontRequestWorker$TypefaceResult  (LINE:262)\l0x0038: CONST  (r5 I:??[int, float, short, byte, char]) = (\-3 ??[int, float, short, byte, char]) \l0x0039: INVOKE  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult), (r5 I:int) type: DIRECT call: androidx.core.provider.FontRequestWorker.TypefaceResult.\<init\>(int):void A[MD:(int):void (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x003c|RETURN\l|0x003c: RETURN  (r0 I:androidx.core.provider.FontRequestWorker$TypefaceResult) \l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_41 [shape=record,label="{41\:\ 0x003d|ExcHandler: NameNotFoundException \-\> 0x003d\l|0x003d: MOVE_EXCEPTION  (r0 I:android.content.pm.PackageManager$NameNotFoundException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NameNotFoundException \-\> 0x003d] (LINE:246)\l}"];
Node_42 [shape=record,label="{42\:\ 0x003e|0x003e: NEW_INSTANCE  (r2 I:androidx.core.provider.FontRequestWorker$TypefaceResult) =  androidx.core.provider.FontRequestWorker$TypefaceResult  (LINE:247)\l0x0040: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0041: INVOKE  (r2 I:androidx.core.provider.FontRequestWorker$TypefaceResult), (r3 I:int) type: DIRECT call: androidx.core.provider.FontRequestWorker.TypefaceResult.\<init\>(int):void A[MD:(int):void (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0044|RETURN\l|0x0044: RETURN  (r2 I:androidx.core.provider.FontRequestWorker$TypefaceResult) \l}"];
MethodNode[shape=record,label="{static androidx.core.provider.FontRequestWorker$TypefaceResult androidx.core.provider.FontRequestWorker.getFontSync((r6 I:java.lang.String A[D('cacheId' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:androidx.core.provider.FontRequest A[D('request' androidx.core.provider.FontRequest), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('style' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0021 \-\> B:24:?, CROSS_EDGE: B:38:0x0035 \-\> B:24:?, CROSS_EDGE: B:40:0x003c \-\> B:24:?, CROSS_EDGE: B:43:0x0044 \-\> B:24:?, CROSS_EDGE: B:44:0x0011 \-\> B:41:0x003d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002b\-0x003d: r2 'typeface' Landroid\/graphics\/Typeface;\l  0x0015\-0x003d: r3 'result' Landroidx\/core\/provider\/FontsContractCompat$FontFamilyResult;\l  0x001a\-0x003d: r4 'fontFamilyResultStatus' I\l  0x003e\-0x0044: r0 'e' Landroid\/content\/pm\/PackageManager$NameNotFoundException;\l  0x0008\-0x0044: r1 'cached' Landroid\/graphics\/Typeface;\l  \-1 \-0x0044: r6 'cacheId' Ljava\/lang\/String;\l  \-1 \-0x0044: r7 'context' Landroid\/content\/Context;\l  \-1 \-0x0044: r8 'request' Landroidx\/core\/provider\/FontRequest;\l  \-1 \-0x0044: r9 'style' I\lTryCatch #0 \{NameNotFoundException \-\> 0x003d, blocks: (B:30:0x0011), top: B:44:0x0011 \}\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_24;
Node_29 -> Node_44;
Node_44 -> Node_30;
Node_44 -> Node_41;
Node_30 -> Node_31;
Node_30 -> Node_45;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_24;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_24;
Node_39 -> Node_40;
Node_40 -> Node_24;
Node_45 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_24;
}

