digraph "CFG forandroidx.core.provider.FontProvider.lambda$static$0([B[B)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: ARRAY_LENGTH  (r0 I:int) = (r3 I:??[] A[D('l' byte[])])  (LINE:198)\l0x0001: ARRAY_LENGTH  (r1 I:int) = (r4 I:??[] A[D('r' byte[])]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0008 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: ARRAY_LENGTH  (r0 I:int) = (r3 I:??[] A[D('l' byte[])])  (LINE:199)\l0x0005: ARRAY_LENGTH  (r1 I:int) = (r4 I:??[] A[D('r' byte[])]) \l0x0006: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:201)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0009|LOOP_START\lLOOP:0: B:25:0x0009\-\>B:31:0x0018\l|0x0009: ARRAY_LENGTH  (r1 I:int) = (r3 I:??[] A[D('l' byte[])]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|0x000a: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:35:0x001b \l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|0x000c: AGET  (r1 I:??[int, short, byte, char]) = (r3 I:byte[] A[D('l' byte[]), IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char] A[D('i' int)])  (LINE:202)\l0x000e: AGET  (r2 I:??[int, short, byte, char]) = (r4 I:byte[] A[D('r' byte[]), IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char] A[D('i' int)]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0010|0x0010: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0018 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|LOOP_END\lLOOP:0: B:25:0x0009\-\>B:31:0x0018\l|0x0018: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:201)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0012|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0012|0x0012: AGET  (r1 I:??[int, short, byte, char]) = (r3 I:byte[] A[D('l' byte[]), IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char] A[D('i' int)])  (LINE:203)\l0x0014: AGET  (r2 I:??[int, short, byte, char]) = (r4 I:byte[] A[D('r' byte[]), IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char] A[D('i' int)]) \l0x0016: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:int) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001b|RETURN\l|0x001b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:206)\l0x001c: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ int androidx.core.provider.FontProvider.lambda$static$0((r3 I:byte[] A[D('l' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte[] A[D('r' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:30:0x0017 \-\> B:19:?, BACK_EDGE: B:31:0x0018 \-\> B:25:0x0009, CROSS_EDGE: B:33:0x001c \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x001b: r0 'i' I\l  \-1 \-0x001c: r3 'l' [B\l  \-1 \-0x001c: r4 'r' [B\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_31;
Node_28 -> Node_34[style=dashed];
Node_31 -> Node_25;
Node_34 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_19;
Node_35 -> Node_32;
Node_32 -> Node_19;
}

