digraph "CFG forandroidx.core.provider.FontProvider.lambda$static$0([B[B)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000}"];
Node_21 [shape=record,label="{21\:\ 0x0002|if (r3.length == r4.length) goto L6\l}"];
Node_22 [shape=record,label="{22\:\ 0x0004}"];
Node_23 [shape=record,label="{23\:\ 0x0007|RETURN\l|return r3.length \- r4.length\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|r0 = 0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0009|LOOP_START\lLOOP:0: B:25:0x0009\-\>B:31:0x0018\lPHI: r0 \l  PHI: (r0v2 'i' int) = (r0v1 'i' int), (r0v4 'i' int) binds: [B:24:0x0008, B:31:0x0018] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|if (r0 \>= r3.length) goto L15\l}"];
Node_27 [shape=record,label="{27\:\ 0x000c}"];
Node_28 [shape=record,label="{28\:\ 0x0010|if (r3[r0] == r4[r0]) goto L11\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|LOOP_END\lLOOP:0: B:25:0x0009\-\>B:31:0x0018\l|int r0 = r0 + 1\l}"];
Node_34 [shape=record,label="{34\:\ 0x0012|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0012}"];
Node_30 [shape=record,label="{30\:\ 0x0017|RETURN\l|return r3[r0] \- r4[r0]\l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001b|RETURN\l|return 0\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ int androidx.core.provider.FontProvider.lambda$static$0((r3v0 'l' byte[] A[D('l' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'r' byte[] A[D('r' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:30:0x0017 \-\> B:19:?, BACK_EDGE: B:31:0x0018 \-\> B:25:0x0009, CROSS_EDGE: B:33:0x001c \-\> B:19:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_31;
Node_28 -> Node_34[style=dashed];
Node_31 -> Node_25;
Node_34 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_19;
Node_35 -> Node_32;
Node_32 -> Node_19;
}

