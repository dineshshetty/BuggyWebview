digraph "CFG forandroidx.core.provider.FontProvider.equalsByteArrayList(Ljava\/util\/List;Ljava\/util\/List;)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r4 I:java.util.List A[D('signatures' java.util.List\<byte[]\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:211)\l0x0004: INVOKE  (r1 I:int) = (r5 I:java.util.List A[D('requestSignatures' java.util.List\<byte[]\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000c \l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|RETURN\l|0x000b: RETURN  (r2 I:boolean)  (LINE:212)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|LOOP_START\lLOOP:0: B:22:0x000d\-\>B:27:0x0026\l|0x000d: INVOKE  (r1 I:int) = (r4 I:java.util.List A[D('signatures' java.util.List\<byte[]\>)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:30:0x0029 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: INVOKE  (r1 I:java.lang.Object) = (r4 I:java.util.List A[D('signatures' java.util.List\<byte[]\>)]), (r0 I:int A[D('i' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:215)\l0x0017: CHECK_CAST (r1 I:byte[]) = (byte[]) (r1 I:??[OBJECT, ARRAY]) \l0x0019: INVOKE  (r3 I:java.lang.Object) = (r5 I:java.util.List A[D('requestSignatures' java.util.List\<byte[]\>)]), (r0 I:int A[D('i' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x001d: CHECK_CAST (r3 I:byte[]) = (byte[]) (r3 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r1 I:boolean) = (r1 I:byte[]), (r3 I:byte[]) type: STATIC call: java.util.Arrays.equals(byte[], byte[]):boolean A[MD:(byte[], byte[]):boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0023|0x0023: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0026 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0026|LOOP_END\lLOOP:0: B:22:0x000d\-\>B:27:0x0026\l|0x0026: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:214)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0025|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0025|RETURN\l|0x0025: RETURN  (r2 I:boolean)  (LINE:216)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0029|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0029|RETURN\l|0x0029: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('i' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:219)\l0x002a: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static boolean androidx.core.provider.FontProvider.equalsByteArrayList((r4 I:java.util.List\<byte[]\> A[D('signatures' java.util.List\<byte[]\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.List\<byte[]\> A[D('requestSignatures' java.util.List\<byte[]\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0025 \-\> B:17:?, BACK_EDGE: B:27:0x0026 \-\> B:22:0x000d, CROSS_EDGE: B:29:0x002a \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000d\-0x0029: r0 'i' I\l  0x0000\-0x002a: r4 'signatures' Ljava\/util\/List;, signature: Ljava\/util\/List\<[B\>;\l  0x0000\-0x002a: r5 'requestSignatures' Ljava\/util\/List;, signature: Ljava\/util\/List\<[B\>;\lSIGNATURE: (Ljava\/util\/List\<[B\>;Ljava\/util\/List\<[B\>;)Z\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_30;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_31[style=dashed];
Node_27 -> Node_22;
Node_31 -> Node_26;
Node_26 -> Node_17;
Node_30 -> Node_28;
Node_28 -> Node_17;
}

