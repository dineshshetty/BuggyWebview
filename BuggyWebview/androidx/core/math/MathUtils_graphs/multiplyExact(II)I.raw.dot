digraph "CFG forandroidx.core.math.MathUtils.multiplyExact(II)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CAST (r0 I:long) = (long) (r5 I:int A[D('x' int)])  (LINE:86)\l0x0001: CAST (r2 I:long) = (long) (r6 I:int A[D('y' int)]) \l0x0002: ARITH  (r0 I:long) = (r0 I:long) * (r2 I:long) \l0x0004: CAST (r2 I:int) = (int) (r0 I:long A[D('r' long)])  (LINE:87)\l0x0005: CAST (r2 I:long) = (long) (r2 I:int) \l0x0006: CMP_L  (r4 I:int) = (r2 I:long), (r0 I:long A[D('r' long)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000c \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: CAST (r2 I:int) = (int) (r0 I:long A[D('r' long)])  (LINE:90)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|0x000b: RETURN  (r2 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|0x000c: NEW_INSTANCE  (r2 I:java.lang.ArithmeticException) =  java.lang.ArithmeticException  (LINE:88)\l0x000e: CONST_STR  (r3 I:java.lang.String) =  \"integer overflow\" \l0x0010: INVOKE  (r2 I:java.lang.ArithmeticException), (r3 I:java.lang.String) type: DIRECT call: java.lang.ArithmeticException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0013|0x0013: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int androidx.core.math.MathUtils.multiplyExact((r5 I:int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0013 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0013: r0 'r' J\l  \-1 \-0x0013: r5 'x' I\l  \-1 \-0x0013: r6 'y' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

