digraph "CFG forandroidx.core.math.MathUtils.addExact(II)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r0 I:int) = (r3 I:int A[D('x' int)]) + (r4 I:int A[D('y' int)])  (LINE:31)\l0x0002: ARITH  (r1 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char] A[D('x' int)]) ^ (r0 I:??[int, boolean, short, byte, char] A[D('r' int)])  (LINE:33)\l0x0004: ARITH  (r2 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('y' int)]) ^ (r0 I:??[int, boolean, short, byte, char] A[D('r' int)]) \l0x0006: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) & (r2 I:??[int, boolean, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0007|0x0007: IF  (r1 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:12:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:int A[D('r' int)])  (LINE:36)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: NEW_INSTANCE  (r1 I:java.lang.ArithmeticException) =  java.lang.ArithmeticException  (LINE:34)\l0x000c: CONST_STR  (r2 I:java.lang.String) =  \"integer overflow\" \l0x000e: INVOKE  (r1 I:java.lang.ArithmeticException), (r2 I:java.lang.String) type: DIRECT call: java.lang.ArithmeticException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|0x0011: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static int androidx.core.math.MathUtils.addExact((r3 I:int A[D('x' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('y' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0011: r0 'r' I\l  \-1 \-0x0011: r3 'x' I\l  \-1 \-0x0011: r4 'y' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

