digraph "CFG forandroidx.core.math.MathUtils.clamp(JJJ)J" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000}"];
Node_12 [shape=record,label="{12\:\ 0x0002|if ((r1 \> r3 ? 1 : (r1 == r3 ? 0 : \-1)) \>= 0) goto L5\l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|RETURN\l|return r3\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0005}"];
Node_15 [shape=record,label="{15\:\ 0x0007|if ((r1 \> r5 ? 1 : (r1 == r5 ? 0 : \-1)) \<= 0) goto L8\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|RETURN\l|return r5\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{public static long androidx.core.math.MathUtils.clamp((r1v0 'value' long A[D('value' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'min' long A[D('min' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'max' long A[D('max' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0009 \-\> B:10:?, CROSS_EDGE: B:17:0x000a \-\> B:10:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

