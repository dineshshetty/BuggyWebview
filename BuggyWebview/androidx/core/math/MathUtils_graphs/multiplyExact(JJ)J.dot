digraph "CFG forandroidx.core.math.MathUtils.multiplyExact(JJ)J" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|long r0 = r11 * r13\llong r2 = java.lang.Math.abs(r11)\llong r4 = java.lang.Math.abs(r13)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|if ((((r2 \| r4) \>\>\> 31) \> 0 ? 1 : (((r2 \| r4) \>\>\> 31) == 0 ? 0 : \-1)) == 0) goto L14\l}"];
Node_20 [shape=record,label="{20\:\ 0x0015}"];
Node_21 [shape=record,label="{21\:\ 0x0017|if ((r13 \> 0 ? 1 : (r13 == 0 ? 0 : \-1)) == 0) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x0019}"];
Node_23 [shape=record,label="{23\:\ 0x001d|if (((r0 \/ r13) \> r11 ? 1 : ((r0 \/ r13) == r11 ? 0 : \-1)) != 0) goto L7\l}"];
Node_29 [shape=record,label="{29\:\ 0x002c}"];
Node_30 [shape=record,label="{30\:\ 0x0033|throw new java.lang.ArithmeticException(\"long overflow\")\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f}"];
Node_25 [shape=record,label="{25\:\ 0x0023|if ((r11 \> Long.MIN_VALUE ? 1 : (r11 == Long.MIN_VALUE ? 0 : \-1)) != 0) goto L14\l}"];
Node_26 [shape=record,label="{26\:\ 0x0025}"];
Node_27 [shape=record,label="{27\:\ 0x0029|if ((r13 \> (\-1) ? 1 : (r13 == (\-1) ? 0 : \-1)) == 0) goto L7\l}"];
Node_31 [shape=record,label="{31\:\ 0x0034|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public static long androidx.core.math.MathUtils.multiplyExact((r11v0 'x' long A[D('x' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'y' long A[D('y' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0034 \-\> B:17:?, CROSS_EDGE: B:25:0x0023 \-\> B:31:0x0034, CROSS_EDGE: B:23:0x001d \-\> B:29:0x002c, CROSS_EDGE: B:21:0x0017 \-\> B:24:0x001f, CROSS_EDGE: B:19:0x0013 \-\> B:31:0x0034\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_31 -> Node_17;
}

