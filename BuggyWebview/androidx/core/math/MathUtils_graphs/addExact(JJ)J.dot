digraph "CFG forandroidx.core.math.MathUtils.addExact(JJ)J" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|long r0 = r7 + r9\l}"];
Node_10 [shape=record,label="{10\:\ 0x000b|if ((((r7 ^ r0) & (r9 ^ r0)) \> 0 ? 1 : (((r7 ^ r0) & (r9 ^ r0)) == 0 ? 0 : \-1)) \< 0) goto L5\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|RETURN\l|return r0\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x000e}"];
Node_13 [shape=record,label="{13\:\ 0x0015|throw new java.lang.ArithmeticException(\"long overflow\")\l}"];
MethodNode[shape=record,label="{public static long androidx.core.math.MathUtils.addExact((r7v0 'x' long A[D('x' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'y' long A[D('y' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:8:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

