digraph "CFG forandroidx.core.math.MathUtils.multiplyExact(JJ)J" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: ARITH  (r0 I:long) = (r11 I:long A[D('x' long)]) * (r13 I:long A[D('y' long)])  (LINE:98)\l0x0002: INVOKE  (r2 I:long) = (r11 I:long A[D('x' long)]) type: STATIC call: java.lang.Math.abs(long):long A[MD:(long):long (c)] (LINE:99)\l0x0006: INVOKE  (r4 I:long) = (r13 I:long A[D('y' long)]) type: STATIC call: java.lang.Math.abs(long):long A[MD:(long):long (c)] (LINE:100)\l0x000a: ARITH  (r6 I:long) = (r2 I:long A[D('ax' long)]) \| (r4 I:long A[D('ay' long)])  (LINE:101)\l0x000c: CONST  (r8 I:??[int, float, short, byte, char]) = (31 ??[int, float, short, byte, char]) \l0x000e: ARITH  (r6 I:long) = (r6 I:long) \>\>\> (r8 I:long) \l0x000f: CONST  (r8 I:??[long, double]) = (0 ??[long, double]) \l0x0011: CMP_L  (r10 I:int) = (r6 I:long), (r8 I:long) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0013|0x0013: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0034 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: CMP_L  (r6 I:int) = (r13 I:long A[D('y' long)]), (r8 I:long)  (LINE:105)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|0x0017: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001f \l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|0x0019: ARITH  (r6 I:long) = (r0 I:long A[D('r' long)]) \/ (r13 I:long A[D('y' long)]) \l0x001b: CMP_L  (r8 I:int) = (r6 I:long), (r11 I:long A[D('x' long)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x001d|0x001d: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002c \l}"];
Node_29 [shape=record,label="{29\:\ 0x002c|0x002c: NEW_INSTANCE  (r6 I:java.lang.ArithmeticException) =  java.lang.ArithmeticException  (LINE:106)\l0x002e: CONST_STR  (r7 I:java.lang.String) =  \"long overflow\" \l0x0030: INVOKE  (r6 I:java.lang.ArithmeticException), (r7 I:java.lang.String) type: DIRECT call: java.lang.ArithmeticException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0033|0x0033: THROW  (r6 I:java.lang.Throwable) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f|0x001f: CONST  (r6 I:??[long, double]) = (\-9223372036854775808 ??[long, double]) \l0x0021: CMP_L  (r8 I:int) = (r11 I:long A[D('x' long)]), (r6 I:long) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0023|0x0023: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0034 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0025|0x0025: CONST  (r6 I:??[long, double]) = (\-1 ??[long, double]) \l0x0027: CMP_L  (r8 I:int) = (r13 I:long A[D('y' long)]), (r6 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0029|0x0029: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002c \l}"];
Node_31 [shape=record,label="{31\:\ 0x0034|RETURN\l|0x0034: RETURN  (r0 I:long A[D('r' long)])  (LINE:109)\l}"];
MethodNode[shape=record,label="{public static long androidx.core.math.MathUtils.multiplyExact((r11 I:long A[D('x' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:long A[D('y' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0034 \-\> B:17:?, CROSS_EDGE: B:25:0x0023 \-\> B:31:0x0034, CROSS_EDGE: B:23:0x001d \-\> B:29:0x002c, CROSS_EDGE: B:21:0x0017 \-\> B:24:0x001f, CROSS_EDGE: B:19:0x0013 \-\> B:31:0x0034\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x0034: r0 'r' J\l  0x0006\-0x0034: r2 'ax' J\l  0x000a\-0x0034: r4 'ay' J\l  \-1 \-0x0034: r11 'x' J\l  \-1 \-0x0034: r13 'y' J\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_31;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_31;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_31 -> Node_17;
}

