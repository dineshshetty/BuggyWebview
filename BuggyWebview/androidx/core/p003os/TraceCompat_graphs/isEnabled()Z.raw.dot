digraph "CFG forandroidx.core.os.TraceCompat.isEnabled()Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:82)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (29 ??[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:21:0x000b \l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) =  type: STATIC call: androidx.core.os.TraceCompat.Api29Impl.isEnabled():boolean A[MD:():boolean (m)] (LINE:83)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|0x000b: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:84)\l0x000d: CONST  (r1 I:??[int, float, short, byte, char]) = (18 ??[int, float, short, byte, char]) \l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|0x0010: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:27:0x0033 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0033|RETURN\l|0x0033: RETURN  (r2 I:boolean)  (LINE:93)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0012|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x002b, blocks: (B:23:0x0012), top: B:28:0x0012 \}\lCatch: Exception \-\> 0x002b\l|0x0012: SGET  (r0 I:java.lang.reflect.Method) =  androidx.core.os.TraceCompat.sIsTagEnabledMethod java.lang.reflect.Method A[Catch: Exception \-\> 0x002b, TRY_ENTER] (LINE:86)\l0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0016: NEW_ARRAY  (r3 I:java.lang.Object[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: Exception \-\> 0x002b]\l0x0018: SGET  (r4 I:long) =  androidx.core.os.TraceCompat.sTraceTagApp long A[Catch: Exception \-\> 0x002b]\l0x001a: INVOKE  (r4 I:java.lang.Long) = (r4 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[Catch: Exception \-\> 0x002b, MD:(long):java.lang.Long (c)]\l0x001e: APUT  (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r4 I:??[OBJECT, ARRAY]) A[Catch: Exception \-\> 0x002b]\l0x0020: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.reflect.Method), (r1 I:java.lang.Object), (r3 I:java.lang.Object[]) type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: Exception \-\> 0x002b, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l0x0024: CHECK_CAST (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:??[OBJECT, ARRAY]) A[Catch: Exception \-\> 0x002b]\l0x0026: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[Catch: Exception \-\> 0x002b, MD:():boolean (c), TRY_LEAVE]\l}"];
Node_24 [shape=record,label="{24\:\ 0x002a|RETURN\l|0x002a: RETURN  (r0 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_25 [shape=record,label="{25\:\ 0x002b|ExcHandler: Exception \-\> 0x002b\l|0x002b: MOVE_EXCEPTION  (r0 I:java.lang.Exception A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: Exception \-\> 0x002b] (LINE:87)\l}"];
Node_26 [shape=record,label="{26\:\ 0x002c|0x002c: CONST_STR  (r1 I:java.lang.String) =  \"TraceCompat\"  (LINE:88)\l0x002e: CONST_STR  (r3 I:java.lang.String) =  \"Unable to invoke isTagEnabled() via reflection.\" \l0x0030: INVOKE  (r1 I:java.lang.String), (r3 I:java.lang.String) type: STATIC call: android.util.Log.v(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.os.TraceCompat.isEnabled()  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0033 \-\> B:16:?, CROSS_EDGE: B:24:0x002a \-\> B:16:?, CROSS_EDGE: B:26:0x002c \-\> B:27:0x0033, CROSS_EDGE: B:28:0x0012 \-\> B:25:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002c\-0x0033: r0 'e' Ljava\/lang\/Exception;\lTryCatch #0 \{Exception \-\> 0x002b, blocks: (B:23:0x0012), top: B:28:0x0012 \}\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_21 -> Node_22;
Node_22 -> Node_27;
Node_22 -> Node_28[style=dashed];
Node_27 -> Node_16;
Node_28 -> Node_23;
Node_28 -> Node_25;
Node_23 -> Node_24;
Node_23 -> Node_29;
Node_24 -> Node_16;
Node_29 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
}

