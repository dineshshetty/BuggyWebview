digraph "CFG forandroidx.core.os.PersistableBundleKt.persistableBundleOf([Lkotlin\/Pair;)Landroid\/os\/PersistableBundle;" {
subgraph cluster_Region_805695636 {
label = "R(3:1|(1:3)|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"pairs\")\landroid.os.PersistableBundle android.os.PersistableBundle r0 = androidx.core.p003os.PersistableBundle.createPersistableBundle(r9.length)\lint r4 = 0\l\l}"];
subgraph cluster_LoopRegion_873695086 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000e|LOOP_START\lLOOP:0: B:3:0x000e\-\>B:4:0x0010\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:2:0x0000, B:4:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \< r3) goto L3\l}"];
subgraph cluster_Region_1982217071 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|LOOP_END\lLOOP:0: B:3:0x000e\-\>B:4:0x0010\l|r5 = r9[r4]\ljava.lang.String java.lang.String r7 = r5.component1()\ljava.lang.Object java.lang.Object r8 = r5.component2()\landroidx.core.p003os.PersistableBundle.putValue(r0, r7, r8)\lr4++\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x0025|RETURN\l|return r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0025|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final android.os.PersistableBundle androidx.core.os.PersistableBundleKt.persistableBundleOf((r9v0 'pairs' kotlin.Pair\<java.lang.String, ? extends java.lang.Object\>[] A[D('pairs' kotlin.Pair[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x0010 \-\> B:3:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([Lkotlin\/Pair\<Ljava\/lang\/String;+Ljava\/lang\/Object;\>;)Landroid\/os\/PersistableBundle;\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_3;
Node_6 -> Node_1;
Node_0 -> Node_2;
Node_7 -> Node_6;
}

