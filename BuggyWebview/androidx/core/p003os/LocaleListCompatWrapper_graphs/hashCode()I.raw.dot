digraph "CFG forandroidx.core.os.LocaleListCompatWrapper.hashCode()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:98)\l0x0001: IGET  (r1 I:java.util.Locale[]) = (r7 I:androidx.core.os.LocaleListCompatWrapper) androidx.core.os.LocaleListCompatWrapper.mList java.util.Locale[]  (LINE:99)\l0x0003: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[]) \l0x0004: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|LOOP_START\lLOOP:0: B:3:0x0005\-\>B:4:0x0007\l|0x0005: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:6:0x0014 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|LOOP_END\lLOOP:0: B:3:0x0005\-\>B:4:0x0007\l|0x0007: AGET  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]) \l0x0009: ARITH  (r5 I:int) = (r0 I:int A[D('result' int)]) * (31 int)  (LINE:100)\l0x000b: INVOKE  (r6 I:int) = (r4 I:java.util.Locale A[D('locale' java.util.Locale)]) type: VIRTUAL call: java.util.Locale.hashCode():int A[MD:():int (c)]\l0x000f: ARITH  (r0 I:int A[D('result' int)]) = (r5 I:int) + (r6 I:int) \l0x0011: ARITH  (r3 I:int) = (r3 I:int) + (1 int)  (LINE:99)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:int A[D('result' int)])  (LINE:102)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int androidx.core.os.LocaleListCompatWrapper.hashCode((r7 'this' I:androidx.core.os.LocaleListCompatWrapper A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x0007 \-\> B:3:0x0005\lDebug Info:\l  0x0009\-0x0011: r4 'locale' Ljava\/util\/Locale;\l  0x0001\-0x0014: r0 'result' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_3;
Node_6 -> Node_5;
Node_5 -> Node_1;
}

