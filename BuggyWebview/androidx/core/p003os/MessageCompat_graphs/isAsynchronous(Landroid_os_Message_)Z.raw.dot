digraph "CFG forandroidx.core.os.MessageCompat.isAsynchronous(Landroid\/os\/Message;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:100)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (22 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:6:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r3 I:android.os.Message A[D('message' android.os.Message)]) type: STATIC call: androidx.core.os.MessageCompat.Api22Impl.isAsynchronous(android.os.Message):boolean A[MD:(android.os.Message):boolean (m)] (LINE:101)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: SGET  (r0 I:boolean) =  androidx.core.os.MessageCompat.sTryIsAsynchronous boolean  (LINE:103)\l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001e \l}"];
Node_8 [shape=record,label="{8\:\ 0x0010|0x0010: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int \l0x0012: CONST  (r2 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|0x0014: IF  (r0 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:14:0x001e \l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{NoSuchMethodError \-\> 0x001b, blocks: (B:10:0x0016), top: B:15:0x0016 \}\lCatch: NoSuchMethodError \-\> 0x001b\l|0x0016: INVOKE  (r0 I:boolean) = (r3 I:android.os.Message A[D('message' android.os.Message)]) type: STATIC call: androidx.core.os.MessageCompat.Api22Impl.isAsynchronous(android.os.Message):boolean A[Catch: NoSuchMethodError \-\> 0x001b, MD:(android.os.Message):boolean (m), TRY_ENTER, TRY_LEAVE] (LINE:107)\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|RETURN\l|0x001a: RETURN  (r0 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|ExcHandler: NoSuchMethodError \-\> 0x001b\l|0x001b: MOVE_EXCEPTION  (r0 I:java.lang.NoSuchMethodError A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NoSuchMethodError \-\> 0x001b] (LINE:108)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|0x001c: SPUT  (r1 I:boolean) androidx.core.os.MessageCompat.sTryIsAsynchronous boolean  (LINE:109)\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|RETURN\l|0x001e: RETURN  (r1 I:boolean)  (LINE:112)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.os.MessageCompat.isAsynchronous((r3 I:android.os.Message A[D('message' android.os.Message), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x001e \-\> B:1:?, CROSS_EDGE: B:11:0x001a \-\> B:1:?, CROSS_EDGE: B:13:0x001c \-\> B:14:0x001e, CROSS_EDGE: B:15:0x0016 \-\> B:12:0x001b, CROSS_EDGE: B:7:0x000e \-\> B:14:0x001e\lDebug Info:\l  0x001c\-0x001e: r0 'e' Ljava\/lang\/NoSuchMethodError;\l  \-1 \-0x001e: r3 'message' Landroid\/os\/Message;\lTryCatch #0 \{NoSuchMethodError \-\> 0x001b, blocks: (B:10:0x0016), top: B:15:0x0016 \}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_14;
Node_9 -> Node_15[style=dashed];
Node_15 -> Node_10;
Node_15 -> Node_12;
Node_10 -> Node_11;
Node_10 -> Node_16;
Node_11 -> Node_1;
Node_16 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

