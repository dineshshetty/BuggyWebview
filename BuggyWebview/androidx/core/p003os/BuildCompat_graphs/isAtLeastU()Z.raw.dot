digraph "CFG forandroidx.core.os.BuildCompat.isAtLeastU()Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:226)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (33 ??[int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:17:0x0012 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: SGET  (r0 I:java.lang.String) =  android.os.Build.VERSION.CODENAME java.lang.String \l0x0008: CONST_STR  (r1 I:java.lang.String) =  \"UpsideDownCake\"  (LINE:227)\l0x000a: INVOKE  (r0 I:boolean) = (r1 I:java.lang.String), (r0 I:java.lang.String) type: STATIC call: androidx.core.os.BuildCompat.isAtLeastPreReleaseCodename(java.lang.String, java.lang.String):boolean A[MD:(java.lang.String, java.lang.String):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0012 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|SYNTHETIC\lRETURN\l|0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0013: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:226)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: RETURN  (r0 I:boolean)  (LINE:226)\l}"];
MethodNode[shape=record,label="{public static boolean androidx.core.os.BuildCompat.isAtLeastU()  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0012 \-\> B:18:0x0013, CROSS_EDGE: B:13:0x0004 \-\> B:17:0x0012\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_11;
}

