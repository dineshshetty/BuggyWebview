digraph "CFG forandroidx.core.os.BuildCompat.isAtLeastPreReleaseCodename(Ljava\/lang\/String;Ljava\/lang\/String;)Z" {
subgraph cluster_Region_613804934 {
label = "R(1:(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1400084734 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1193138757 {
label = "IF [B:13:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0007|if (\"REL\".equals(r5) == true) goto L3\l}"];
subgraph cluster_Region_2103530338 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0009|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_965789693 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000a|java.lang.String java.lang.String r0 = r5.toUpperCase(java.util.Locale.ROOT)\ljava.lang.String java.lang.String r2 = r4.toUpperCase(java.util.Locale.ROOT)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001a|RETURN\l|return r0.compareTo(r2) \>= 0\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x001c|ORIG_RETURN\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{protected static boolean androidx.core.os.BuildCompat.isAtLeastPreReleaseCodename((r4v0 'codename' java.lang.String A[D('codename' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'buildCodename' java.lang.String A[D('buildCodename' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x001d \-\> B:11:?, CROSS_EDGE: B:16:0x001a \-\> B:18:0x001d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_17 -> Node_11;
Node_19 -> Node_11;
}

