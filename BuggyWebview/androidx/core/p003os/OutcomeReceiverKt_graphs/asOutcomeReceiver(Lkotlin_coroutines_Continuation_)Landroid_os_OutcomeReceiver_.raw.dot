digraph "CFG forandroidx.core.os.OutcomeReceiverKt.asOutcomeReceiver(Lkotlin\/coroutines\/Continuation;)Landroid\/os\/OutcomeReceiver;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$asOutcomeReceiver' kotlin.coroutines.Continuation)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:androidx.core.os.ContinuationOutcomeReceiver) =  androidx.core.os.ContinuationOutcomeReceiver  (LINE:58)\l0x0007: INVOKE  \l  (r0 I:androidx.core.os.ContinuationOutcomeReceiver)\l  (r1 I:kotlin.coroutines.Continuation A[D('$this$asOutcomeReceiver' kotlin.coroutines.Continuation)])\l type: DIRECT call: androidx.core.os.ContinuationOutcomeReceiver.\<init\>(kotlin.coroutines.Continuation):void A[MD:(kotlin.coroutines.Continuation\<? super R\>):void (m)]\l0x000a: CHECK_CAST (r0 I:android.os.OutcomeReceiver) = (android.os.OutcomeReceiver) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:android.os.OutcomeReceiver\<R, E extends java.lang.Throwable\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final android.os.OutcomeReceiver\<R, E extends java.lang.Throwable\> androidx.core.os.OutcomeReceiverKt.asOutcomeReceiver((r1 I:kotlin.coroutines.Continuation\<? super R\> A[D('$this$asOutcomeReceiver' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000c: r1 '$this$asOutcomeReceiver' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [R, E extends java.lang.Throwable]\lSIGNATURE: \<R:Ljava\/lang\/Object;E:Ljava\/lang\/Throwable;\>(Lkotlin\/coroutines\/Continuation\<\-TR;\>;)Landroid\/os\/OutcomeReceiver\<TR;TE;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

