digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VClipPath.inflate(Landroid\/content\/res\/Resources;Landroid\/util\/AttributeSet;Landroid\/content\/res\/Resources$Theme;Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"pathData\"  (LINE:1778)\l0x0002: INVOKE  (r0 I:boolean) = (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]), (r0 I:java.lang.String) type: STATIC call: androidx.core.content.res.TypedArrayUtils.hasAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean A[MD:(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasPathData' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0009  (LINE:1779)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:1780)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|0x0009: SGET  (r1 I:int[]) =  androidx.vectordrawable.graphics.drawable.AndroidResources.STYLEABLE_VECTOR_DRAWABLE_CLIP_PATH int[]  (LINE:1782)\l0x000b: INVOKE  (r1 I:android.content.res.TypedArray) = \l  (r3 I:android.content.res.Resources A[D('r' android.content.res.Resources)])\l  (r5 I:android.content.res.Resources$Theme A[D('theme' android.content.res.Resources$Theme)])\l  (r4 I:android.util.AttributeSet A[D('attrs' android.util.AttributeSet)])\l  (r1 I:int[])\l type: STATIC call: androidx.core.content.res.TypedArrayUtils.obtainAttributes(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int[]):android.content.res.TypedArray A[MD:(android.content.res.Resources, android.content.res.Resources$Theme, android.util.AttributeSet, int[]):android.content.res.TypedArray (m)]\l0x000f: INVOKE  \l  (r2 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath)\l  (r1 I:android.content.res.TypedArray A[D('a' android.content.res.TypedArray)])\l  (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l type: DIRECT call: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VClipPath.updateStateFromTypedArray(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser):void A[MD:(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser):void (m)] (LINE:1784)\l0x0012: INVOKE  (r1 I:android.content.res.TypedArray A[D('a' android.content.res.TypedArray)]) type: VIRTUAL call: android.content.res.TypedArray.recycle():void A[MD:():void (c)] (LINE:1785)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|0x0015: RETURN    (LINE:1786)\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VClipPath.inflate((r2 'this' I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VClipPath A[IMMUTABLE_TYPE, THIS]), (r3 I:android.content.res.Resources A[D('r' android.content.res.Resources), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.util.AttributeSet A[D('attrs' android.util.AttributeSet), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.content.res.Resources$Theme A[D('theme' android.content.res.Resources$Theme), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0015: r0 'hasPathData' Z\l  0x000f\-0x0015: r1 'a' Landroid\/content\/res\/TypedArray;\l  \-1 \-0x0015: r3 'r' Landroid\/content\/res\/Resources;\l  \-1 \-0x0015: r4 'attrs' Landroid\/util\/AttributeSet;\l  \-1 \-0x0015: r5 'theme' Landroid\/content\/res\/Resources$Theme;\l  \-1 \-0x0015: r6 'parser' Lorg\/xmlpull\/v1\/XmlPullParser;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

