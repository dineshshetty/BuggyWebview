digraph "CFG forandroidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat.1.scheduleDrawable(Landroid\/graphics\/drawable\/Drawable;Ljava\/lang\/Runnable;J)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat) = (r1 I:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$1) androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat.1.this$0 androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat  (LINE:741)\l0x0002: INVOKE  \l  (r0 I:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat)\l  (r3 I:java.lang.Runnable A[D('what' java.lang.Runnable)])\l  (r4 I:long A[D('when' long)])\l type: VIRTUAL call: androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat.scheduleSelf(java.lang.Runnable, long):void A[MD:(java.lang.Runnable, long):void (s)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:742)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat.1.scheduleDrawable((r1 'this' I:androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:android.graphics.drawable.Drawable A[D('who' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Runnable A[D('what' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:long A[D('when' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0005: r2 'who' Landroid\/graphics\/drawable\/Drawable;\l  \-1 \-0x0005: r3 'what' Ljava\/lang\/Runnable;\l  \-1 \-0x0005: r4 'when' J\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.Callback.scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long):void\}]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

