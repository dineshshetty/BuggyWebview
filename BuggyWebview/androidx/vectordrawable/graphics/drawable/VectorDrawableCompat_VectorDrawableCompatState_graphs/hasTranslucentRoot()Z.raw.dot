digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.hasTranslucentRoot()Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer) = (r2 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState) androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.mVPathRenderer androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer  (LINE:1057)\l0x0002: INVOKE  (r0 I:int) = (r0 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer) type: VIRTUAL call: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.getRootAlpha():int A[MD:():int (m)]\l0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:13:0x000c \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|SYNTHETIC\lRETURN\l|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.hasTranslucentRoot((r2 'this' I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:14:0x000d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

