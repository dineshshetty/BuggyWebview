digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.createCachedBitmapIfNeeded(II)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IGET  (r0 I:android.graphics.Bitmap) = (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState) androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.mCachedBitmap android.graphics.Bitmap  (LINE:1084)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000a \l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = \l  (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)\l  (r2 I:int A[D('width' int)])\l  (r3 I:int A[D('height' int)])\l type: VIRTUAL call: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.canReuseBitmap(int, int):boolean A[MD:(int, int):boolean (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:? \l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x0015: RETURN   A[SYNTHETIC] (LINE:1090)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|0x000a: SGET  (r0 I:android.graphics.Bitmap$Config) =  android.graphics.Bitmap.Config.ARGB_8888 android.graphics.Bitmap$Config  (LINE:1085)\l0x000c: INVOKE  (r0 I:android.graphics.Bitmap) = (r2 I:int A[D('width' int)]), (r3 I:int A[D('height' int)]), (r0 I:android.graphics.Bitmap$Config) type: STATIC call: android.graphics.Bitmap.createBitmap(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap A[MD:(int, int, android.graphics.Bitmap$Config):android.graphics.Bitmap (c)]\l0x0010: IPUT  \l  (r0 I:android.graphics.Bitmap)\l  (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState)\l androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.mCachedBitmap android.graphics.Bitmap \l0x0012: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1087)\l0x0013: IPUT  (r0 I:boolean), (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState) androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.mCacheDirty boolean \l}"];
Node_16 [shape=record,label="{16\:\ 0x0015|RETURN\lORIG_RETURN\l|0x0015: RETURN    (LINE:1090)\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.createCachedBitmapIfNeeded((r1 'this' I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0008 \-\> B:16:0x0015, CROSS_EDGE: B:12:0x0002 \-\> B:15:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r2 'width' I\l  \-1 \-0x0015: r3 'height' I\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

