digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.createCachedBitmapIfNeeded(II)V" {
subgraph cluster_Region_639280395 {
label = "R(1:(1:(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_1421856811 {
label = "R(1:(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_708877265 {
label = "IF [B:12:0x0002, B:14:0x0008] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0002|if (r1.mCachedBitmap == null) goto L7\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|ADDED_TO_REGION\l|if (canReuseBitmap(r2, r3) == false) goto L7\l}"];
subgraph cluster_Region_315627911 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000a|r1.mCachedBitmap = android.graphics.Bitmap.createBitmap(r2, r3, android.graphics.Bitmap.Config.ARGB_8888)\lr1.mCacheDirty = true\l}"];
}
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0004}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0015|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.createCachedBitmapIfNeeded((r1v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState A[IMMUTABLE_TYPE, THIS]), (r2v0 'width' int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'height' int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0008 \-\> B:16:0x0015, CROSS_EDGE: B:12:0x0002 \-\> B:15:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
Node_15 -> Node_16;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_17 -> Node_10;
Node_16 -> Node_10;
}

