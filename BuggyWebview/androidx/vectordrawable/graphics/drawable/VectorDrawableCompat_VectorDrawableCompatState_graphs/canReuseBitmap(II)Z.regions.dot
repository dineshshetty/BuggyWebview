digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.canReuseBitmap(II)Z" {
subgraph cluster_Region_1287151828 {
label = "R(1:(2:(1:5)|(1:7)))";
node [shape=record,color=blue];
subgraph cluster_Region_837841318 {
label = "R(2:(1:5)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1911383546 {
label = "IF [B:14:0x0006, B:16:0x000e] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0006|if (r2 == r1.mCachedBitmap.getWidth()) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|ADDED_TO_REGION\l|if (r3 == r1.mCachedBitmap.getHeight()) goto L5\l}"];
subgraph cluster_Region_1551840462 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0010|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1397637461 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0008}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0012|RETURN\lORIG_RETURN\lADDED_TO_REGION\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.canReuseBitmap((r1v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState A[IMMUTABLE_TYPE, THIS]), (r2v0 'width' int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'height' int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0013 \-\> B:12:?, CROSS_EDGE: B:14:0x0006 \-\> B:19:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_14 -> Node_15;
Node_14 -> Node_19[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_21[style=dashed];
Node_17 -> Node_12;
Node_21 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_19 -> Node_12;
}

