digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.canReuseCache()Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000}"];
Node_23 [shape=record,label="{23\:\ 0x0002|if (r2.mCacheDirty != false) goto L17\l}"];
Node_24 [shape=record,label="{24\:\ 0x0004}"];
Node_25 [shape=record,label="{25\:\ 0x0008|if (r2.mCachedTint != r2.mTint) goto L16\l}"];
Node_26 [shape=record,label="{26\:\ 0x000a}"];
Node_27 [shape=record,label="{27\:\ 0x000e|if (r2.mCachedTintMode != r2.mTintMode) goto L15\l}"];
Node_28 [shape=record,label="{28\:\ 0x0010}"];
Node_29 [shape=record,label="{29\:\ 0x0014|if (r2.mCachedAutoMirrored != r2.mAutoMirrored) goto L14\l}"];
Node_30 [shape=record,label="{30\:\ 0x0016}"];
Node_31 [shape=record,label="{31\:\ 0x001e|if (r2.mCachedRootAlpha != r2.mVPathRenderer.getRootAlpha()) goto L13\l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|RETURN\l|return true\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_34 [shape=record,label="{34\:\ 0x0022|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VectorDrawableCompatState.canReuseCache((r2v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0023 \-\> B:21:?, CROSS_EDGE: B:29:0x0014 \-\> B:34:0x0022, CROSS_EDGE: B:27:0x000e \-\> B:34:0x0022, CROSS_EDGE: B:25:0x0008 \-\> B:34:0x0022, CROSS_EDGE: B:23:0x0002 \-\> B:34:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_34;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_36;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_37;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_39;
Node_32 -> Node_21;
Node_39 -> Node_21;
Node_38 -> Node_21;
Node_37 -> Node_21;
Node_36 -> Node_21;
Node_34 -> Node_21;
}

