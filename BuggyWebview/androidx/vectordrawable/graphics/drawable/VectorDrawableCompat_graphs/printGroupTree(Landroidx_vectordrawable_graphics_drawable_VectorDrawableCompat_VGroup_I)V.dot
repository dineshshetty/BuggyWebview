digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.printGroupTree(Landroidx\/vectordrawable\/graphics\/drawable\/VectorDrawableCompat$VGroup;I)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|java.lang.String r0 = \"\"\lr1 = 0\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|LOOP_START\lLOOP:0: B:21:0x0003\-\>B:22:0x0005\lPHI: r0 r1 \l  PHI: (r0v1 'indent' java.lang.String) = (r0v0 'indent' java.lang.String), (r0v2 'indent' java.lang.String) binds: [B:20:0x0000, B:22:0x0005] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v9 'i' int) binds: [B:20:0x0000, B:22:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r7) goto L4\l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|LOOP_END\lLOOP:0: B:21:0x0003\-\>B:22:0x0005\l|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(r0)\lr2.append(\"    \")\ljava.lang.String r0 = r2.toString()\lint r1 = r1 + 1\l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r0)\lr1.append(\"current group is :\")\lr1.append(r6.getGroupName())\lr1.append(\" rotation is \")\lr1.append(r6.mRotate)\landroid.util.Log.v(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.LOGTAG, r1.toString())\ljava.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(r0)\lr1.append(\"matrix is :\")\lr1.append(r6.getLocalMatrix().toString())\landroid.util.Log.v(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.LOGTAG, r1.toString())\lr1 = 0\l}"];
Node_24 [shape=record,label="{24\:\ 0x0060|LOOP_START\lLOOP:1: B:24:0x0060\-\>B:30:0x0085\lPHI: r1 \l  PHI: (r1v7 'i' int) = (r1v6 'i' int), (r1v8 'i' int) binds: [B:23:0x0019, B:30:0x0085] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0066|if (r1 \>= r6.mChildren.size()) goto L15\l}"];
Node_26 [shape=record,label="{26\:\ 0x0068|androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VObject r2 = r6.mChildren.get(r1)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0072|if ((r2 instanceof androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VGroup) == false) goto L13\l}"];
Node_28 [shape=record,label="{28\:\ 0x0074|printGroupTree((androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VGroup) r2, r7 + 1)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0085|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0085|LOOP_END\lLOOP:1: B:24:0x0060\-\>B:30:0x0085\l|int r1 = r1 + 1\l}"];
Node_29 [shape=record,label="{29\:\ 0x007d|((androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPath) r2).printVPath(r7 + 1)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0085|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0088|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0088|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.printGroupTree((r5v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat A[IMMUTABLE_TYPE, THIS]), (r6v0 'currentGroup' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup A[D('currentGroup' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'level' int A[D('level' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x0005 \-\> B:21:0x0003, BACK_EDGE: B:30:0x0085 \-\> B:24:0x0060, CROSS_EDGE: B:29:0x007d \-\> B:30:0x0085\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_32;
Node_22 -> Node_21;
Node_32 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_35;
Node_35 -> Node_30;
Node_30 -> Node_24;
Node_29 -> Node_34;
Node_34 -> Node_30;
Node_33 -> Node_31;
Node_31 -> Node_19;
}

