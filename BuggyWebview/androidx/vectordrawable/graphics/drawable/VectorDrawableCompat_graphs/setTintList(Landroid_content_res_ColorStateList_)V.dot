digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.setTintList(Landroid\/content\/res\/ColorStateList;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0002|if (r3.mDelegateDrawable == null) goto L6\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|androidx.core.graphics.drawable.DrawableCompat.setTintList(r3.mDelegateDrawable, r4)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState r0 = r3.mVectorState\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|if (r0.mTint == r4) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|r0.mTint = r4\lr3.mTintFilter = updateTintFilter(r3.mTintFilter, r4, r0.mTintMode)\linvalidateSelf()\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|RETURN\lORIG_RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.setTintList((r3v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat A[IMMUTABLE_TYPE, THIS]), (r4v0 'tint' android.content.res.ColorStateList A[D('tint' android.content.res.ColorStateList), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:20:0x001f \-\> B:12:?, CROSS_EDGE: B:18:0x000e \-\> B:20:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.graphics.drawable.TintAwareDrawable.setTintList(android.content.res.ColorStateList):void, ClspMth\{android.graphics.drawable.Drawable.setTintList(android.content.res.ColorStateList):void\}]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_21 -> Node_12;
}

