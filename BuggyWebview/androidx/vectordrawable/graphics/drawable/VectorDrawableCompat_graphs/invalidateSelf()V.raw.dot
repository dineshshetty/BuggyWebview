digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.invalidateSelf()V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:android.graphics.drawable.Drawable) = (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat) androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.mDelegateDrawable android.graphics.drawable.Drawable  (LINE:933)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IGET  (r0 I:android.graphics.drawable.Drawable) = (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat) androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.mDelegateDrawable android.graphics.drawable.Drawable  (LINE:934)\l0x0006: INVOKE  (r0 I:android.graphics.drawable.Drawable) type: VIRTUAL call: android.graphics.drawable.Drawable.invalidateSelf():void A[MD:():void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|RETURN\l|0x0009: RETURN    (LINE:935)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|0x000a: INVOKE  (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCommon) type: SUPER call: androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.invalidateSelf():void A[MD:():void (c)] (LINE:937)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|0x000d: RETURN    (LINE:938)\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.invalidateSelf((r1 'this' I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x000d \-\> B:9:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.invalidateSelf():void\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

