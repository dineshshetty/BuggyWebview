digraph "CFG forandroidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(Landroid\/animation\/ValueAnimator;Landroid\/content\/res\/TypedArray;Landroid\/content\/res\/TypedArray;FLorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"duration\"  (LINE:345)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (300(0x12c, float:4.2E\-43) ??[int, float, short, byte, char]) \l0x0005: INVOKE  (r0 I:int) = \l  (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray)])\l  (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l  (r0 I:java.lang.String)\l  (r1 I:int)\l  (r2 I:int)\l type: STATIC call: androidx.core.content.res.TypedArrayUtils.getNamedInt(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int A[MD:(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int (m)]\l0x0009: CAST (r2 I:long) = (long) (r0 I:int) \l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"startOffset\"  (LINE:347)\l0x000c: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x000d: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:int) = \l  (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray)])\l  (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l  (r0 I:java.lang.String)\l  (r4 I:int)\l  (r5 I:int)\l type: STATIC call: androidx.core.content.res.TypedArrayUtils.getNamedInt(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int A[MD:(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int (m)]\l0x0012: CAST (r6 I:long) = (long) (r0 I:int) \l0x0013: CONST_STR  (r0 I:java.lang.String) =  \"valueType\"  (LINE:349)\l0x0015: CONST  (r4 I:??[int, float, short, byte, char]) = (7 ??[int, float, short, byte, char]) \l0x0016: CONST  (r8 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0017: INVOKE  (r0 I:int) = \l  (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray)])\l  (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l  (r0 I:java.lang.String)\l  (r4 I:int)\l  (r8 I:int)\l type: STATIC call: androidx.core.content.res.TypedArrayUtils.getNamedInt(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int A[MD:(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int (m)]\l0x001b: CONST_STR  (r4 I:java.lang.String) =  \"valueFrom\"  (LINE:353)\l0x001d: INVOKE  (r4 I:boolean) = (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]), (r4 I:java.lang.String) type: STATIC call: androidx.core.content.res.TypedArrayUtils.hasAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean A[MD:(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0021|0x0021: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0042 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0023|0x0023: CONST_STR  (r4 I:java.lang.String) =  \"valueTo\"  (LINE:354)\l0x0025: INVOKE  (r4 I:boolean) = (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]), (r4 I:java.lang.String) type: STATIC call: androidx.core.content.res.TypedArrayUtils.hasAttribute(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean A[MD:(org.xmlpull.v1.XmlPullParser, java.lang.String):boolean (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|0x0029: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0042 \l}"];
Node_23 [shape=record,label="{23\:\ 0x002b|0x002b: CONST  (r4 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char])  (LINE:355)\l0x002c: CONST  (r9 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x002d|0x002d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('valueType' int)]) != (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0033 \l}"];
Node_25 [shape=record,label="{25\:\ 0x002f|0x002f: INVOKE  (r0 I:int A[D('valueType' int)]) = (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray)]), (r9 I:int), (r4 I:int) type: STATIC call: androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.inferValueTypeFromValues(android.content.res.TypedArray, int, int):int A[MD:(android.content.res.TypedArray, int, int):int (m)] (LINE:356)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0033|0x0033: CONST_STR  (r10 I:java.lang.String) =  \"\"  (LINE:360)\l0x0035: INVOKE  (r4 I:android.animation.PropertyValuesHolder) = \l  (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray)])\l  (r0 I:int A[D('valueType' int)])\l  (r9 I:int)\l  (r4 I:int)\l  (r10 I:java.lang.String)\l type: STATIC call: androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.getPVH(android.content.res.TypedArray, int, int, int, java.lang.String):android.animation.PropertyValuesHolder A[MD:(android.content.res.TypedArray, int, int, int, java.lang.String):android.animation.PropertyValuesHolder (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0039|0x0039: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pvh' android.animation.PropertyValuesHolder)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0042  (LINE:363)\l}"];
Node_28 [shape=record,label="{28\:\ 0x003b|0x003b: NEW_ARRAY  (r9 I:android.animation.PropertyValuesHolder[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: android.animation.PropertyValuesHolder[]  (LINE:364)\l0x003d: APUT  \l  (r9 I:??[OBJECT, ARRAY][])\l  (r5 I:??[int, short, byte, char])\l  (r4 I:??[OBJECT, ARRAY] A[D('pvh' android.animation.PropertyValuesHolder)])\l \l0x003f: INVOKE  \l  (r11 I:android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator)])\l  (r9 I:android.animation.PropertyValuesHolder[])\l type: VIRTUAL call: android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder[]):void A[MD:(android.animation.PropertyValuesHolder[]):void VARARG (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0042|0x0042: INVOKE  (r11 I:android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator)]), (r2 I:long A[D('duration' long)]) type: VIRTUAL call: android.animation.ValueAnimator.setDuration(long):android.animation.ValueAnimator A[MD:(long):android.animation.ValueAnimator (c)] (LINE:367)\l0x0045: INVOKE  \l  (r11 I:android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator)])\l  (r6 I:long A[D('startDelay' long)])\l type: VIRTUAL call: android.animation.ValueAnimator.setStartDelay(long):void A[MD:(long):void (c)] (LINE:368)\l0x0048: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:370)\l0x0049: CONST_STR  (r9 I:java.lang.String) =  \"repeatCount\" \l0x004b: INVOKE  (r4 I:int) = \l  (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray)])\l  (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l  (r9 I:java.lang.String)\l  (r4 I:int)\l  (r5 I:int)\l type: STATIC call: androidx.core.content.res.TypedArrayUtils.getNamedInt(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int A[MD:(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int (m)]\l0x004f: INVOKE  (r11 I:android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator)]), (r4 I:int) type: VIRTUAL call: android.animation.ValueAnimator.setRepeatCount(int):void A[MD:(int):void (c)]\l0x0052: CONST_STR  (r4 I:java.lang.String) =  \"repeatMode\"  (LINE:372)\l0x0054: INVOKE  (r1 I:int) = \l  (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray)])\l  (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l  (r4 I:java.lang.String)\l  (r8 I:int)\l  (r1 I:int)\l type: STATIC call: androidx.core.content.res.TypedArrayUtils.getNamedInt(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int A[MD:(android.content.res.TypedArray, org.xmlpull.v1.XmlPullParser, java.lang.String, int, int):int (m)]\l0x0058: INVOKE  (r11 I:android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator)]), (r1 I:int) type: VIRTUAL call: android.animation.ValueAnimator.setRepeatMode(int):void A[MD:(int):void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x005b|0x005b: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('arrayObjectAnimator' android.content.res.TypedArray)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:?  (LINE:375)\l}"];
Node_31 [shape=record,label="{31\:\ 0x005d|0x005d: INVOKE  \l  (r11 I:android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator)])\l  (r13 I:android.content.res.TypedArray A[D('arrayObjectAnimator' android.content.res.TypedArray)])\l  (r0 I:int A[D('valueType' int)])\l  (r14 I:float A[D('pixelSize' float)])\l  (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])\l type: STATIC call: androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.setupObjectAnimator(android.animation.ValueAnimator, android.content.res.TypedArray, int, float, org.xmlpull.v1.XmlPullParser):void A[MD:(android.animation.ValueAnimator, android.content.res.TypedArray, int, float, org.xmlpull.v1.XmlPullParser):void (m)] (LINE:376)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0060|RETURN\lORIG_RETURN\l|0x0060: RETURN    (LINE:378)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0060: RETURN   A[SYNTHETIC] (LINE:378)\l}"];
MethodNode[shape=record,label="{private static void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray((r11 I:android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:android.content.res.TypedArray A[D('arrayObjectAnimator' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:float A[D('pixelSize' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x005b \-\> B:32:0x0060, CROSS_EDGE: B:27:0x0039 \-\> B:29:0x0042, CROSS_EDGE: B:24:0x002d \-\> B:26:0x0033, CROSS_EDGE: B:22:0x0029 \-\> B:29:0x0042, CROSS_EDGE: B:20:0x0021 \-\> B:29:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0039\-0x0042: r4 'pvh' Landroid\/animation\/PropertyValuesHolder;\l  0x001b\-0x0060: r0 'valueType' I\l  0x000a\-0x0060: r2 'duration' J\l  0x0013\-0x0060: r6 'startDelay' J\l  \-1 \-0x0060: r11 'anim' Landroid\/animation\/ValueAnimator;\l  \-1 \-0x0060: r12 'arrayAnimator' Landroid\/content\/res\/TypedArray;\l  \-1 \-0x0060: r13 'arrayObjectAnimator' Landroid\/content\/res\/TypedArray;\l  \-1 \-0x0060: r14 'pixelSize' F\l  \-1 \-0x0060: r15 'parser' Lorg\/xmlpull\/v1\/XmlPullParser;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_33 -> Node_18;
}

