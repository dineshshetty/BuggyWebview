digraph "CFG forandroidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.inferValueTypeFromValues(Landroid\/content\/res\/TypedArray;II)I" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|0x0000: INVOKE  (r0 I:android.util.TypedValue) = \l  (r7 I:android.content.res.TypedArray A[D('styledAttributes' android.content.res.TypedArray)])\l  (r8 I:int A[D('valueFromId' int)])\l type: VIRTUAL call: android.content.res.TypedArray.peekValue(int):android.util.TypedValue A[MD:(int):android.util.TypedValue (c)] (LINE:655)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:656)\l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tvFrom' android.util.TypedValue)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x000a \l}"];
Node_29 [shape=record,label="{29\:\ 0x0008|0x0008: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x000b|0x000b: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasFrom' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0010  (LINE:657)\l}"];
Node_32 [shape=record,label="{32\:\ 0x000d|0x000d: IGET  (r4 I:int) = (r0 I:android.util.TypedValue A[D('tvFrom' android.util.TypedValue)]) android.util.TypedValue.type int \l}"];
Node_34 [shape=record,label="{34\:\ 0x0011|0x0011: INVOKE  (r5 I:android.util.TypedValue) = \l  (r7 I:android.content.res.TypedArray A[D('styledAttributes' android.content.res.TypedArray)])\l  (r9 I:int A[D('valueToId' int)])\l type: VIRTUAL call: android.content.res.TypedArray.peekValue(int):android.util.TypedValue A[MD:(int):android.util.TypedValue (c)] (LINE:658)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0015|0x0015: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tvTo' android.util.TypedValue)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0018  (LINE:659)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0018|0x0018: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0019|0x0019: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasTo' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x001d  (LINE:660)\l}"];
Node_39 [shape=record,label="{39\:\ 0x001b|0x001b: IGET  (r2 I:int) = (r5 I:android.util.TypedValue A[D('tvTo' android.util.TypedValue)]) android.util.TypedValue.type int \l}"];
Node_40 [shape=record,label="{40\:\ 0x001d|0x001d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasFrom' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0025  (LINE:664)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001f|0x001f: INVOKE  (r6 I:boolean) = (r4 I:int A[D('fromType' int)]) type: STATIC call: androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.isColorType(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0023|0x0023: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x002d \l}"];
Node_46 [shape=record,label="{46\:\ 0x002d|SYNTHETIC\lRETURN\l|0x002d: CONST  (r6 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:665)\l0x0030: RETURN  (r6 I:int A[D('valueType' int)]) A[SYNTHETIC] (LINE:669)\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0025|0x0025: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hasTo' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x002f \l}"];
Node_44 [shape=record,label="{44\:\ 0x0027|0x0027: INVOKE  (r6 I:boolean) = (r2 I:int A[D('toType' int)]) type: STATIC call: androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.isColorType(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x002b|0x002b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x002f \l}"];
Node_47 [shape=record,label="{47\:\ 0x002f|RETURN\lORIG_RETURN\l|0x002f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('valueType' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:667)\l0x0030: RETURN  (r6 I:int A[D('valueType' int)])  (LINE:669)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0010|0x0010: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x000a|0x000a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static int androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.inferValueTypeFromValues((r7 I:android.content.res.TypedArray A[D('styledAttributes' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('valueFromId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('valueToId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:47:0x002f \-\> B:48:0x0030, CROSS_EDGE: B:43:0x0025 \-\> B:47:0x002f, CROSS_EDGE: B:42:0x0023 \-\> B:46:0x002d, CROSS_EDGE: B:40:0x001d \-\> B:43:0x0025, CROSS_EDGE: B:38:0x0019 \-\> B:40:0x001d, CROSS_EDGE: B:35:0x0015 \-\> B:38:0x0019, CROSS_EDGE: B:33:0x0010 \-\> B:34:0x0011, CROSS_EDGE: B:30:0x000a \-\> B:31:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002e\-0x002f: r6 'valueType' I\l  0x0004\-0x0030: r0 'tvFrom' Landroid\/util\/TypedValue;\l  0x0019\-0x0030: r1 'hasTo' Z\l  0x001d\-0x0030: r2 'toType' I\l  0x000b\-0x0030: r3 'hasFrom' Z\l  0x0011\-0x0030: r4 'fromType' I\l  0x0015\-0x0030: r5 'tvTo' Landroid\/util\/TypedValue;\l  0x0030\-0x0030: r6 'valueType' I\l  \-1 \-0x0030: r7 'styledAttributes' Landroid\/content\/res\/TypedArray;\l  \-1 \-0x0030: r8 'valueFromId' I\l  \-1 \-0x0030: r9 'valueToId' I\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_38[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_46;
Node_46 -> Node_26;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_47;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_47 -> Node_26;
Node_33 -> Node_34;
Node_30 -> Node_31;
}

