digraph "CFG forandroidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.inferValueTypeFromValues(Landroid\/content\/res\/TypedArray;II)I" {
subgraph cluster_Region_1299550270 {
label = "R(7:1|2|4|6|7|9|(2:(1:14)|(1:19)))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0000|android.util.TypedValue android.util.TypedValue r0 = r7.peekValue(r8)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|boolean r3 = r0 != null\l}"];
Node_31 [shape=record,label="{31\:\ 0x000b|PHI: r3 \l  PHI: (r3v1 'hasFrom' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r3 ? r0.type : 0\l}"];
Node_34 [shape=record,label="{34\:\ 0x0011|PHI: r4 \l  PHI: (r4v1 'fromType' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|android.util.TypedValue android.util.TypedValue r5 = r7.peekValue(r9)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0015|boolean r1 = r5 != null\l}"];
Node_38 [shape=record,label="{38\:\ 0x0019|PHI: r1 \l  PHI: (r1v1 'hasTo' boolean) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|int r2 = r1 ? r5.type : 0\l}"];
subgraph cluster_Region_1461303212 {
label = "R(2:(1:14)|(1:19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1933175417 {
label = "IF [B:40:0x001d, B:42:0x0023, B:43:0x0025, B:45:0x002b] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x001d|PHI: r2 \l  PHI: (r2v1 'toType' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if (r3 != false) goto L12\l}"];
Node_42 [shape=record,label="{42\:\ 0x0023|ADDED_TO_REGION\l|if (isColorType(r4) != false) goto L14\l}"];
Node_43 [shape=record,label="{43\:\ 0x0025|ADDED_TO_REGION\l|if (r1 != false) goto L17\l}"];
Node_45 [shape=record,label="{45\:\ 0x002b|ADDED_TO_REGION\l|if (isColorType(r2) != false) goto L14\l}"];
subgraph cluster_Region_446111674 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_46 [shape=record,label="{46\:\ 0x002d|SYNTHETIC\lRETURN\l|return 3\l}"];
}
}
subgraph cluster_Region_279806966 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x002f|RETURN\lORIG_RETURN\l|return 0\l}"];
}
}
}
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0008}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x000d}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0018}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x001b}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x001f}"];
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x0027}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0010}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x000a}"];
MethodNode[shape=record,label="{private static int androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.inferValueTypeFromValues((r7v0 'styledAttributes' android.content.res.TypedArray A[D('styledAttributes' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'valueFromId' int A[D('valueFromId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'valueToId' int A[D('valueToId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:47:0x002f \-\> B:48:0x0030, CROSS_EDGE: B:43:0x0025 \-\> B:47:0x002f, CROSS_EDGE: B:42:0x0023 \-\> B:46:0x002d, CROSS_EDGE: B:40:0x001d \-\> B:43:0x0025, CROSS_EDGE: B:38:0x0019 \-\> B:40:0x001d, CROSS_EDGE: B:35:0x0015 \-\> B:38:0x0019, CROSS_EDGE: B:33:0x0010 \-\> B:34:0x0011, CROSS_EDGE: B:30:0x000a \-\> B:31:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_25;Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_30;
Node_31 -> Node_32;
Node_31 -> Node_33;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_38;
Node_38 -> Node_39;
Node_38 -> Node_40;
Node_40 -> Node_41;
Node_40 -> Node_43[style=dashed];
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_46;
Node_43 -> Node_44;
Node_43 -> Node_47[style=dashed];
Node_45 -> Node_46;
Node_45 -> Node_47[style=dashed];
Node_46 -> Node_26;
Node_47 -> Node_26;
Node_25 -> Node_27;
Node_29 -> Node_31;
Node_32 -> Node_34;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_44 -> Node_45;
Node_33 -> Node_34;
Node_30 -> Node_31;
}

