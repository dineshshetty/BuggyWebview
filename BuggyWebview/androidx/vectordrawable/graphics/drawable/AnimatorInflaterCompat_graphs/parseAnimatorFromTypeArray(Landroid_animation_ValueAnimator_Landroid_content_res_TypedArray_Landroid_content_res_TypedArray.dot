digraph "CFG forandroidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray(Landroid\/animation\/ValueAnimator;Landroid\/content\/res\/TypedArray;Landroid\/content\/res\/TypedArray;FLorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|long r2 = (long) androidx.core.content.res.TypedArrayUtils.getNamedInt(r12, r15, androidx.constraintlayout.core.motion.utils.TypedValues.TransitionType.S_DURATION, 1, com.google.android.material.card.MaterialCardViewHelper.DEFAULT_FADE_ANIM_DURATION)\llong r6 = (long) androidx.core.content.res.TypedArrayUtils.getNamedInt(r12, r15, \"startOffset\", 2, 0)\lint r0 = androidx.core.content.res.TypedArrayUtils.getNamedInt(r12, r15, \"valueType\", 7, 4)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0021|if (androidx.core.content.res.TypedArrayUtils.hasAttribute(r15, \"valueFrom\") == false) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x0023}"];
Node_22 [shape=record,label="{22\:\ 0x0029|if (androidx.core.content.res.TypedArrayUtils.hasAttribute(r15, \"valueTo\") == false) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x002b}"];
Node_24 [shape=record,label="{24\:\ 0x002d|if (r0 != 4) goto L8\l}"];
Node_25 [shape=record,label="{25\:\ 0x002f|int r0 = inferValueTypeFromValues(r12, 5, 6)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0033|PHI: r0 \l  PHI: (r0v7 'valueType' int) = (r0v5 'valueType' int), (r0v8 'valueType' int) binds: [B:24:0x002d, B:25:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|android.animation.PropertyValuesHolder r4 = getPVH(r12, r0, 5, 6, \"\")\l}"];
Node_27 [shape=record,label="{27\:\ 0x0039|if (r4 == null) goto L11\l}"];
Node_28 [shape=record,label="{28\:\ 0x003b|r11.setValues(new android.animation.PropertyValuesHolder[]\{r4\})\l}"];
Node_29 [shape=record,label="{29\:\ 0x0042|PHI: r0 \l  PHI: (r0v6 'valueType' int) = (r0v5 'valueType' int), (r0v5 'valueType' int), (r0v7 'valueType' int), (r0v7 'valueType' int) binds: [B:20:0x0021, B:22:0x0029, B:27:0x0039, B:28:0x003b] A[DONT_GENERATE, DONT_INLINE]\l|r11.setDuration(r2)\lr11.setStartDelay(r6)\lr11.setRepeatCount(androidx.core.content.res.TypedArrayUtils.getNamedInt(r12, r15, \"repeatCount\", 3, 0))\lr11.setRepeatMode(androidx.core.content.res.TypedArrayUtils.getNamedInt(r12, r15, \"repeatMode\", 4, 1))\l}"];
Node_30 [shape=record,label="{30\:\ 0x005b|if (r13 == null) goto L16\l}"];
Node_31 [shape=record,label="{31\:\ 0x005d|setupObjectAnimator(r11, r13, r0, r14, r15)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0060|RETURN\lORIG_RETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private static void androidx.vectordrawable.graphics.drawable.AnimatorInflaterCompat.parseAnimatorFromTypeArray((r11v0 'anim' android.animation.ValueAnimator A[D('anim' android.animation.ValueAnimator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'arrayAnimator' android.content.res.TypedArray A[D('arrayAnimator' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'arrayObjectAnimator' android.content.res.TypedArray A[D('arrayObjectAnimator' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'pixelSize' float A[D('pixelSize' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'parser' org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x005b \-\> B:32:0x0060, CROSS_EDGE: B:27:0x0039 \-\> B:29:0x0042, CROSS_EDGE: B:24:0x002d \-\> B:26:0x0033, CROSS_EDGE: B:22:0x0029 \-\> B:29:0x0042, CROSS_EDGE: B:20:0x0021 \-\> B:29:0x0042\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_33 -> Node_18;
}

