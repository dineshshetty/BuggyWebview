digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.getMatrixScale(Landroid\/graphics\/Matrix;)F" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char])  (LINE:1393)\l0x0001: NEW_ARRAY  (r0 I:float[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0003: FILL_ARRAY  (r0 I:??[]), data: 0x0040: FILL_ARRAY_DATA  , data: [0, 1065353216, 1065353216, 0] \l0x0006: INVOKE  \l  (r11 I:android.graphics.Matrix A[D('groupStackedMatrix' android.graphics.Matrix)])\l  (r0 I:float[] A[D('unitVectors' float[])])\l type: VIRTUAL call: android.graphics.Matrix.mapVectors(float[]):void A[MD:(float[]):void (c)] (LINE:1394)\l0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1395)\l0x000a: AGET  (r2 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r1 I:??[int, short, byte, char]) \l0x000c: CAST (r2 I:double) = (double) (r2 I:float) \l0x000d: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000e: AGET  (r5 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r4 I:??[int, short, byte, char]) \l0x0010: CAST (r5 I:double) = (double) (r5 I:float) \l0x0011: INVOKE  (r2 I:double) = (r2 I:double), (r5 I:double) type: STATIC call: java.lang.Math.hypot(double, double):double A[MD:(double, double):double (c)]\l0x0015: CAST (r2 I:float) = (float) (r2 I:double) \l0x0016: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:1396)\l0x0017: AGET  (r5 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r3 I:??[int, short, byte, char]) \l0x0019: CAST (r5 I:double) = (double) (r5 I:float) \l0x001a: CONST  (r7 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x001b: AGET  (r8 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r7 I:??[int, short, byte, char]) \l0x001d: CAST (r8 I:double) = (double) (r8 I:float) \l0x001e: INVOKE  (r5 I:double) = (r5 I:double), (r8 I:double) type: STATIC call: java.lang.Math.hypot(double, double):double A[MD:(double, double):double (c)]\l0x0022: CAST (r5 I:float) = (float) (r5 I:double) \l0x0023: AGET  (r1 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r1 I:??[int, short, byte, char])  (LINE:1397)\l0x0025: AGET  (r4 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r4 I:??[int, short, byte, char]) \l0x0027: AGET  (r3 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r3 I:??[int, short, byte, char]) \l0x0029: AGET  (r6 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][] A[D('unitVectors' float[])]), (r7 I:??[int, short, byte, char]) \l0x002b: INVOKE  (r1 I:float) = (r1 I:float), (r4 I:float), (r3 I:float), (r6 I:float) type: STATIC call: androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.cross(float, float, float, float):float A[MD:(float, float, float, float):float (m)]\l0x002f: INVOKE  (r3 I:float) = (r2 I:float A[D('scaleX' float)]), (r5 I:float A[D('scaleY' float)]) type: STATIC call: java.lang.Math.max(float, float):float A[MD:(float, float):float (c)] (LINE:1399)\l0x0033: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1401)\l0x0034: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1402)\l0x0035: CMP_L  (r6 I:int) = (r3 I:float A[D('maxScale' float)]), (r6 I:float) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0037|0x0037: IF  (r6 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|0x0039: INVOKE  (r6 I:float) = (r1 I:float A[D('crossProduct' float)]) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)] (LINE:1403)\l0x003d: ARITH  (r4 I:float A[D('matrixScale' float)]) = (r6 I:float) \/ (r3 I:float A[D('maxScale' float)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|RETURN\lORIG_RETURN\l|0x003f: RETURN  (r4 I:float A[D('matrixScale' float)])  (LINE:1408)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x003f: RETURN  (r4 I:float A[D('matrixScale' float)]) A[SYNTHETIC] (LINE:1408)\l}"];
MethodNode[shape=record,label="{private float androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.getMatrixScale((r10 'this' I:androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer A[IMMUTABLE_TYPE, THIS]), (r11 I:android.graphics.Matrix A[D('groupStackedMatrix' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0037 \-\> B:12:0x003f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x004b: r0 'unitVectors' [F\l  0x002f\-0x004b: r1 'crossProduct' F\l  0x0016\-0x004b: r2 'scaleX' F\l  0x0033\-0x004b: r3 'maxScale' F\l  0x0034\-0x004b: r4 'matrixScale' F\l  0x0023\-0x004b: r5 'scaleY' F\l  \-1 \-0x004b: r11 'groupStackedMatrix' Landroid\/graphics\/Matrix;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

