digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.\<init\>(Landroidx\/vectordrawable\/graphics\/drawable\/VectorDrawableCompat$VPathRenderer;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|r3.mFinalPathMatrix = new android.graphics.Matrix()\lr3.mBaseWidth = 0.0f\lr3.mBaseHeight = 0.0f\lr3.mViewportWidth = 0.0f\lr3.mViewportHeight = 0.0f\lr3.mRootAlpha = 255\lr3.mRootName = null\lr3.mIsStateful = null\landroidx.collection.ArrayMap r0 = new androidx.collection.ArrayMap\<\>()\lr3.mVGTargetsMap = r0\lr3.mRootGroup = new androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VGroup(r4.mRootGroup, r0)\lr3.mPath = new android.graphics.Path(r4.mPath)\lr3.mRenderPath = new android.graphics.Path(r4.mRenderPath)\lr3.mBaseWidth = r4.mBaseWidth\lr3.mBaseHeight = r4.mBaseHeight\lr3.mViewportWidth = r4.mViewportWidth\lr3.mViewportHeight = r4.mViewportHeight\lr3.mChangingConfigurations = r4.mChangingConfigurations\lr3.mRootAlpha = r4.mRootAlpha\lr3.mRootName = r4.mRootName\ljava.lang.String r1 = r4.mRootName\l}"];
Node_10 [shape=record,label="{10\:\ 0x005c|if (r1 == null) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|r0.put(r1, r3)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0061|r3.mIsStateful = r4.mIsStateful\l}"];
Node_13 [shape=record,label="{13\:\ 0x0065|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.\<init\>((r3v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer A[IMMUTABLE_TYPE, THIS]), (r4v0 'copy' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer A[D('copy' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x005c \-\> B:12:0x0061\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

