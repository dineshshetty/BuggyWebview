digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.getMatrixScale(Landroid\/graphics\/Matrix;)F" {
subgraph cluster_Region_1086664865 {
label = "R(2:1|(2:(1:6)|(2:3|4)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|float[] float[] r0 = \{0.0f, 1.0f, 1.0f, 0.0f\}\lr11.mapVectors(r0)\lfloat float r2 = (float) java.lang.Math.hypot(r0[0], r0[1])\lfloat float r5 = (float) java.lang.Math.hypot(r0[2], r0[3])\lfloat float r1 = cross(r0[0], r0[1], r0[2], r0[3])\lfloat float r3 = java.lang.Math.max(r2, r5)\l}"];
subgraph cluster_Region_1647944810 {
label = "R(2:(1:6)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_875548111 {
label = "IF [B:10:0x0037] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0037|if (r3 \<= 0.0f) goto L6\l}"];
subgraph cluster_Region_404922342 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return 0.0f\l}"];
}
}
subgraph cluster_Region_1247843440 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0039|float float r4 = java.lang.Math.abs(r1) \/ r3\l}"];
Node_12 [shape=record,label="{12\:\ 0x003f|RETURN\lORIG_RETURN\l|return r4\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private float androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPathRenderer.getMatrixScale((r10v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer A[IMMUTABLE_TYPE, THIS]), (r11v0 'groupStackedMatrix' android.graphics.Matrix A[D('groupStackedMatrix' android.graphics.Matrix), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0037 \-\> B:12:0x003f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_7 -> Node_9;
}

