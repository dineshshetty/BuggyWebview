digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCommon.applyTheme(Landroid\/content\/res\/Resources$Theme;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:android.graphics.drawable.Drawable) = (r1 I:androidx.vectordrawable.graphics.drawable.VectorDrawableCommon) androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.mDelegateDrawable android.graphics.drawable.Drawable  (LINE:95)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0008 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: INVOKE  \l  (r0 I:android.graphics.drawable.Drawable)\l  (r2 I:android.content.res.Resources$Theme A[D('t' android.content.res.Resources$Theme)])\l type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.applyTheme(android.graphics.drawable.Drawable, android.content.res.Resources$Theme):void A[MD:(android.graphics.drawable.Drawable, android.content.res.Resources$Theme):void (m)] (LINE:96)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:97)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:99)\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCommon.applyTheme((r1 'this' I:androidx.vectordrawable.graphics.drawable.VectorDrawableCommon A[IMMUTABLE_TYPE, THIS]), (r2 I:android.content.res.Resources$Theme A[D('t' android.content.res.Resources$Theme), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0008: r2 't' Landroid\/content\/res\/Resources$Theme;\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.applyTheme(android.content.res.Resources$Theme):void\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

