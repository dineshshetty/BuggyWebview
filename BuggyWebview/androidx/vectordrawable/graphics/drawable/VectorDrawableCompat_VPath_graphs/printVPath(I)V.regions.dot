digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPath.printVPath(I)V" {
subgraph cluster_Region_999495341 {
label = "R(3:1|(1:3)|5)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|java.lang.String java.lang.String r0 = \"\"\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1698059274 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0003|LOOP_START\lLOOP:0: B:11:0x0003\-\>B:12:0x0005\lPHI: r0 r1 \l  PHI: (r0v1 'indent' java.lang.String) = (r0v0 'indent' java.lang.String), (r0v2 'indent' java.lang.String) binds: [B:10:0x0000, B:12:0x0005] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v4 'i' int) binds: [B:10:0x0000, B:12:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r5) goto L3\l}"];
subgraph cluster_Region_801824322 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0005|LOOP_END\lLOOP:0: B:11:0x0003\-\>B:12:0x0005\l|java.lang.String r0 = r0 + \"    \"\lr1++\l}"];
}
}
Node_13 [shape=record,label="{13\:\ 0x0019|android.util.Log.v(androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.LOGTAG, r0 + \"current path is :\" + r4.mPathName + \" pathData is \" + nodesToString(r4.mNodes))\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0019|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0042}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VPath.printVPath((r4v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath A[IMMUTABLE_TYPE, THIS]), (r5v0 'level' int A[D('level' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0005 \-\> B:11:0x0003\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_15[style=dashed];
Node_12 -> Node_11;
Node_13 -> Node_14;
Node_8 -> Node_10;
Node_15 -> Node_13;
Node_14 -> Node_9;
}

