digraph "CFG forandroidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VGroup.updateStateFromTypedArray(Landroid\/content\/res\/TypedArray;Lorg\/xmlpull\/v1\/XmlPullParser;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|r3.mThemeAttrs = null\lr3.mRotate = androidx.core.content.res.TypedArrayUtils.getNamedFloat(r4, r5, androidx.constraintlayout.motion.widget.Key.ROTATION, 5, r3.mRotate)\lr3.mPivotX = r4.getFloat(1, r3.mPivotX)\lr3.mPivotY = r4.getFloat(2, r3.mPivotY)\lr3.mScaleX = androidx.core.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"scaleX\", 3, r3.mScaleX)\lr3.mScaleY = androidx.core.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"scaleY\", 4, r3.mScaleY)\lr3.mTranslateX = androidx.core.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"translateX\", 6, r3.mTranslateX)\lr3.mTranslateY = androidx.core.content.res.TypedArrayUtils.getNamedFloat(r4, r5, \"translateY\", 7, r3.mTranslateY)\ljava.lang.String r0 = r4.getString(0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0052|if (r0 == null) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x0054|r3.mGroupName = r0\l}"];
Node_12 [shape=record,label="{12\:\ 0x0056|updateLocalMatrix()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0059|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.vectordrawable.graphics.drawable.VectorDrawableCompat.VGroup.updateStateFromTypedArray((r3v0 'this' androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup A[IMMUTABLE_TYPE, THIS]), (r4v0 'a' android.content.res.TypedArray A[D('a' android.content.res.TypedArray), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'parser' org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0052 \-\> B:12:0x0056\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

