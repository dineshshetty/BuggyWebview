digraph "CFG forandroidx.cursoradapter.widget.CursorAdapter.runQueryOnBackgroundThread(Ljava\/lang\/CharSequence;)Landroid\/database\/Cursor;" {
subgraph cluster_Region_725165106 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|android.widget.FilterQueryProvider android.widget.FilterQueryProvider r0 = r1.mFilterQueryProvider\l}"];
subgraph cluster_Region_1410845677 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1883489962 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_275440409 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|return r0.runQuery(r2)\l}"];
}
}
subgraph cluster_Region_1682651371 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000b|RETURN\l|return r1.mCursor\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0009}"];
MethodNode[shape=record,label="{public android.database.Cursor androidx.cursoradapter.widget.CursorAdapter.runQueryOnBackgroundThread((r1v0 'this' androidx.cursoradapter.widget.CursorAdapter A[IMMUTABLE_TYPE, THIS]), (r2v0 'constraint' java.lang.CharSequence A[D('constraint' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000b \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.cursoradapter.widget.CursorFilter.CursorFilterClient.runQueryOnBackgroundThread(java.lang.CharSequence):android.database.Cursor, androidx.cursoradapter.widget.CursorAdapter.runQueryOnBackgroundThread(java.lang.CharSequence):android.database.Cursor]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

