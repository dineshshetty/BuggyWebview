digraph "CFG forandroidx.cursoradapter.widget.CursorAdapter.changeCursor(Landroid\/database\/Cursor;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:android.database.Cursor) = \l  (r1 I:androidx.cursoradapter.widget.CursorAdapter)\l  (r2 I:android.database.Cursor A[D('cursor' android.database.Cursor)])\l type: VIRTUAL call: androidx.cursoradapter.widget.CursorAdapter.swapCursor(android.database.Cursor):android.database.Cursor A[MD:(android.database.Cursor):android.database.Cursor (m)] (LINE:334)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('old' android.database.Cursor)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:335)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: INVOKE  (r0 I:android.database.Cursor A[D('old' android.database.Cursor)]) type: INTERFACE call: android.database.Cursor.close():void A[MD:():void (c)] (LINE:336)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|RETURN\lORIG_RETURN\l|0x0009: RETURN    (LINE:338)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0009: RETURN   A[SYNTHETIC] (LINE:338)\l}"];
MethodNode[shape=record,label="{public void androidx.cursoradapter.widget.CursorAdapter.changeCursor((r1 'this' I:androidx.cursoradapter.widget.CursorAdapter A[IMMUTABLE_TYPE, THIS]), (r2 I:android.database.Cursor A[D('cursor' android.database.Cursor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0004 \-\> B:12:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0009: r0 'old' Landroid\/database\/Cursor;\l  \-1 \-0x0009: r2 'cursor' Landroid\/database\/Cursor;\lMETHOD_OVERRIDE: [androidx.cursoradapter.widget.CursorFilter.CursorFilterClient.changeCursor(android.database.Cursor):void, androidx.cursoradapter.widget.CursorAdapter.changeCursor(android.database.Cursor):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

