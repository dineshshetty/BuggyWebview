digraph "CFG forandroidx.print.PrintHelper.getMatrix(IILandroid\/graphics\/RectF;I)Landroid\/graphics\/Matrix;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:android.graphics.Matrix) =  android.graphics.Matrix  (LINE:589)\l0x0002: INVOKE  (r0 I:android.graphics.Matrix) type: DIRECT call: android.graphics.Matrix.\<init\>():void A[MD:():void (c)]\l0x0005: INVOKE  (r1 I:float) = (r8 I:android.graphics.RectF A[D('content' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)] (LINE:592)\l0x0009: CAST (r2 I:float) = (float) (r6 I:int A[D('imageWidth' int)]) \l0x000a: ARITH  (r1 I:float) = (r1 I:float) \/ (r2 I:float) \l0x000b: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:593)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fittingMode' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: INVOKE  (r2 I:float) = (r8 I:android.graphics.RectF A[D('content' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.height():float A[MD:():float (c)] (LINE:594)\l0x0012: CAST (r3 I:float) = (float) (r7 I:int A[D('imageHeight' int)]) \l0x0013: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x0014: INVOKE  (r1 I:float A[D('scale' float)]) = (r1 I:float A[D('scale' float)]), (r2 I:float) type: STATIC call: java.lang.Math.max(float, float):float A[MD:(float, float):float (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|0x0023: INVOKE  \l  (r0 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix)])\l  (r1 I:float A[D('scale' float)])\l  (r1 I:float A[D('scale' float)])\l type: VIRTUAL call: android.graphics.Matrix.postScale(float, float):boolean A[MD:(float, float):boolean (c)] (LINE:598)\l0x0026: INVOKE  (r2 I:float) = (r8 I:android.graphics.RectF A[D('content' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.width():float A[MD:():float (c)] (LINE:601)\l0x002a: CAST (r3 I:float) = (float) (r6 I:int A[D('imageWidth' int)]) \l0x002b: ARITH  (r3 I:float) = (r3 I:float) * (r1 I:float A[D('scale' float)]) \l0x002d: ARITH  (r2 I:float) = (r2 I:float) \- (r3 I:float) \l0x002e: CONST  (r3 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l0x0030: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x0031: INVOKE  (r4 I:float) = (r8 I:android.graphics.RectF A[D('content' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.height():float A[MD:():float (c)] (LINE:603)\l0x0035: CAST (r5 I:float) = (float) (r7 I:int A[D('imageHeight' int)]) \l0x0036: ARITH  (r5 I:float) = (r5 I:float) * (r1 I:float A[D('scale' float)]) \l0x0038: ARITH  (r4 I:float) = (r4 I:float) \- (r5 I:float) \l0x0039: ARITH  (r4 I:float) = (r4 I:float) \/ (r3 I:float) \l0x003a: INVOKE  \l  (r0 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix)])\l  (r2 I:float A[D('translateX' float)])\l  (r4 I:float A[D('translateY' float)])\l type: VIRTUAL call: android.graphics.Matrix.postTranslate(float, float):boolean A[MD:(float, float):boolean (c)] (LINE:605)\l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|RETURN\l|0x003d: RETURN  (r0 I:android.graphics.Matrix A[D('matrix' android.graphics.Matrix)])  (LINE:606)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0019|0x0019: INVOKE  (r2 I:float) = (r8 I:android.graphics.RectF A[D('content' android.graphics.RectF)]) type: VIRTUAL call: android.graphics.RectF.height():float A[MD:():float (c)] (LINE:596)\l0x001d: CAST (r3 I:float) = (float) (r7 I:int A[D('imageHeight' int)]) \l0x001e: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x001f: INVOKE  (r1 I:float A[D('scale' float)]) = (r1 I:float A[D('scale' float)]), (r2 I:float) type: STATIC call: java.lang.Math.min(float, float):float A[MD:(float, float):float (c)]\l}"];
MethodNode[shape=record,label="{static android.graphics.Matrix androidx.print.PrintHelper.getMatrix((r6 I:int A[D('imageWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('imageHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.graphics.RectF A[D('content' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('fittingMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0019 \-\> B:6:0x0023\lDebug Info:\l  0x0005\-0x003d: r0 'matrix' Landroid\/graphics\/Matrix;\l  0x000b\-0x003d: r1 'scale' F\l  0x0031\-0x003d: r2 'translateX' F\l  0x003a\-0x003d: r4 'translateY' F\l  \-1 \-0x003d: r6 'imageWidth' I\l  \-1 \-0x003d: r7 'imageHeight' I\l  \-1 \-0x003d: r8 'content' Landroid\/graphics\/RectF;\l  \-1 \-0x003d: r9 'fittingMode' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
}

