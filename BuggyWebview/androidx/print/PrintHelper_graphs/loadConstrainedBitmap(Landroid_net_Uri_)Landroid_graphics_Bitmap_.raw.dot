digraph "CFG forandroidx.print.PrintHelper.loadConstrainedBitmap(Landroid\/net\/Uri;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('uri' android.net.Uri)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0069  (LINE:746)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IGET  (r0 I:android.content.Context) = (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mContext android.content.Context \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0069 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:android.graphics.BitmapFactory$Options) =  android.graphics.BitmapFactory$Options  (LINE:750)\l0x0008: INVOKE  (r0 I:android.graphics.BitmapFactory$Options) type: DIRECT call: android.graphics.BitmapFactory.Options.\<init\>():void A[MD:():void (c)]\l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:751)\l0x000c: IPUT  (r1 I:boolean), (r0 I:android.graphics.BitmapFactory$Options A[D('opt' android.graphics.BitmapFactory$Options)]) android.graphics.BitmapFactory.Options.inJustDecodeBounds boolean \l0x000e: INVOKE  \l  (r10 I:androidx.print.PrintHelper)\l  (r11 I:android.net.Uri A[D('uri' android.net.Uri)])\l  (r0 I:android.graphics.BitmapFactory$Options A[D('opt' android.graphics.BitmapFactory$Options)])\l type: DIRECT call: androidx.print.PrintHelper.loadBitmap(android.net.Uri, android.graphics.BitmapFactory$Options):android.graphics.Bitmap A[MD:(android.net.Uri, android.graphics.BitmapFactory$Options):android.graphics.Bitmap throws java.io.FileNotFoundException (m)] (LINE:752)\l0x0011: IGET  (r2 I:int) = (r0 I:android.graphics.BitmapFactory$Options A[D('opt' android.graphics.BitmapFactory$Options)]) android.graphics.BitmapFactory.Options.outWidth int  (LINE:754)\l0x0013: IGET  (r3 I:int) = (r0 I:android.graphics.BitmapFactory$Options A[D('opt' android.graphics.BitmapFactory$Options)]) android.graphics.BitmapFactory.Options.outHeight int  (LINE:755)\l0x0015: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:758)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: IF  (r2 I:??[int, byte, short, char] A[D('w' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:46:0x0068 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r3 I:??[int, byte, short, char] A[D('h' int)]) \> (0 ??[int, byte, short, char])  \-\> B:9:0x001b \l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|0x001b: INVOKE  (r5 I:int) = (r2 I:int A[D('w' int)]), (r3 I:int A[D('h' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)] (LINE:763)\l0x001f: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:765)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|LOOP_START\lLOOP:0: B:10:0x0020\-\>B:12:0x0024\l|0x0020: CONST  (r7 I:??[int, float, short, byte, char]) = (3500(0xdac, float:4.905E\-42) ??[int, float, short, byte, char])  (LINE:766)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|0x0022: IF  (r5 I:??[int, byte, short, char] A[D('imageSide' int)]) \<= (r7 I:??[int, byte, short, char])  \-\> B:57:0x0029 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|LOOP_END\lLOOP:0: B:10:0x0020\-\>B:12:0x0024\l|0x0024: ARITH  (r5 I:int) = (r5 I:int A[D('imageSide' int)]) \>\>\> (1 int)  (LINE:767)\l0x0026: ARITH  (r6 I:int) = (r6 I:int A[D('sampleSize' int)]) \<\< (1 int)  (LINE:768)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0029|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: IF  (r6 I:??[int, byte, short, char] A[D('sampleSize' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:45:0x0067  (LINE:772)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002b|0x002b: INVOKE  (r7 I:int) = (r2 I:int A[D('w' int)]), (r3 I:int A[D('h' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x002f: ARITH  (r7 I:int) = (r7 I:int) \/ (r6 I:int A[D('sampleSize' int)]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0030|0x0030: IF  (r7 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:17:0x0033 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0033|0x0033: IGET  (r7 I:java.lang.Object) = (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mLock java.lang.Object  (LINE:776)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0035|0x0035: MONITOR_ENTER  (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0036|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0036|TRY_ENTER\lTRY_LEAVE\lTryCatch #4 \{all \-\> 0x005f, blocks: (B:19:0x0036), top: B:53:0x0036 \}\lCatch: all \-\> 0x005f\l|0x0036: NEW_INSTANCE  (r8 I:android.graphics.BitmapFactory$Options) =  android.graphics.BitmapFactory$Options A[Catch: all \-\> 0x005f, TRY_ENTER] (LINE:777)\l0x0038: INVOKE  (r8 I:android.graphics.BitmapFactory$Options) type: DIRECT call: android.graphics.BitmapFactory.Options.\<init\>():void A[Catch: all \-\> 0x005f, MD:():void (c)]\l0x003b: IPUT  (r8 I:android.graphics.BitmapFactory$Options), (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mDecodeOptions android.graphics.BitmapFactory$Options A[Catch: all \-\> 0x005f]\l0x003d: IPUT  (r1 I:boolean), (r8 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.inMutable boolean A[Catch: all \-\> 0x005f] (LINE:778)\l0x003f: IGET  (r1 I:android.graphics.BitmapFactory$Options) = (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mDecodeOptions android.graphics.BitmapFactory$Options A[Catch: all \-\> 0x005f] (LINE:779)\l0x0041: IPUT  (r6 I:int A[D('sampleSize' int)]), (r1 I:android.graphics.BitmapFactory$Options) android.graphics.BitmapFactory.Options.inSampleSize int A[Catch: all \-\> 0x005f]\l0x0043: IGET  (r1 I:android.graphics.BitmapFactory$Options) = (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mDecodeOptions android.graphics.BitmapFactory$Options A[Catch: all \-\> 0x005f, TRY_LEAVE] (LINE:780)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0045|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{all \-\> 0x0065, blocks: (B:20:0x0045, B:41:0x0063), top: B:53:0x0036 \}\lCatch: all \-\> 0x0065\l|0x0045: MONITOR_EXIT  (r7 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0065, TRY_ENTER, TRY_LEAVE] (LINE:781)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0046|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0054, blocks: (B:21:0x0046), top: B:51:0x0046 \}\lCatch: all \-\> 0x0054\l|0x0046: INVOKE  (r7 I:android.graphics.Bitmap) = \l  (r10 I:androidx.print.PrintHelper)\l  (r11 I:android.net.Uri A[D('uri' android.net.Uri)])\l  (r1 I:android.graphics.BitmapFactory$Options A[D('decodeOptions' android.graphics.BitmapFactory$Options)])\l type: DIRECT call: androidx.print.PrintHelper.loadBitmap(android.net.Uri, android.graphics.BitmapFactory$Options):android.graphics.Bitmap A[Catch: all \-\> 0x0054, MD:(android.net.Uri, android.graphics.BitmapFactory$Options):android.graphics.Bitmap throws java.io.FileNotFoundException (m), TRY_ENTER, TRY_LEAVE] (LINE:783)\l}"];
Node_22 [shape=record,label="{22\:\ 0x004a|0x004a: IGET  (r8 I:java.lang.Object) = (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mLock java.lang.Object  (LINE:785)\l}"];
Node_23 [shape=record,label="{23\:\ 0x004c|0x004c: MONITOR_ENTER  (r8 I:??[OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x004d|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x004d|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0051, blocks: (B:24:0x004d, B:25:0x004f), top: B:49:0x004d \}\lCatch: all \-\> 0x0051\l|0x004d: IPUT  (r4 I:android.graphics.BitmapFactory$Options), (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mDecodeOptions android.graphics.BitmapFactory$Options A[Catch: all \-\> 0x0051, TRY_ENTER] (LINE:786)\l}"];
Node_25 [shape=record,label="{25\:\ 0x004f|TryCatch #0 \{all \-\> 0x0051, blocks: (B:24:0x004d, B:25:0x004f), top: B:49:0x004d \}\lCatch: all \-\> 0x0051\l|0x004f: MONITOR_EXIT  (r8 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0051] (LINE:787)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0050|RETURN\l|0x0050: RETURN  (r7 I:android.graphics.Bitmap) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x0051|ExcHandler: all \-\> 0x0051\l|0x0051: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0051]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0052|TRY_LEAVE\lCatch: all \-\> 0x0051\l}"];
Node_29 [shape=record,label="{29\:\ 0x0053|0x0053: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_52 [shape=record,label="{52\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_30 [shape=record,label="{30\:\ 0x0054|ExcHandler: all \-\> 0x0054\l|0x0054: MOVE_EXCEPTION  (r7 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0054] (LINE:785)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0055|0x0055: IGET  (r8 I:java.lang.Object) = (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mLock java.lang.Object \l}"];
Node_32 [shape=record,label="{32\:\ 0x0057|0x0057: MONITOR_ENTER  (r8 I:??[OBJECT, ARRAY]) \l}"];
Node_54 [shape=record,label="{54\:\ 0x0058|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_33 [shape=record,label="{33\:\ 0x0058|TRY_ENTER\lTryCatch #3 \{all \-\> 0x005c, blocks: (B:33:0x0058, B:34:0x005a), top: B:54:0x0058 \}\lCatch: all \-\> 0x005c\l|0x0058: IPUT  (r4 I:android.graphics.BitmapFactory$Options), (r10 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mDecodeOptions android.graphics.BitmapFactory$Options A[Catch: all \-\> 0x005c, TRY_ENTER] (LINE:786)\l}"];
Node_34 [shape=record,label="{34\:\ 0x005a|TRY_LEAVE\lTryCatch #3 \{all \-\> 0x005c, blocks: (B:33:0x0058, B:34:0x005a), top: B:54:0x0058 \}\lCatch: all \-\> 0x005c\l}"];
Node_35 [shape=record,label="{35\:\ 0x005b|0x005b: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_55 [shape=record,label="{55\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_36 [shape=record,label="{36\:\ 0x005c|ExcHandler: all \-\> 0x005c\l|0x005c: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x005c]\l}"];
Node_37 [shape=record,label="{37\:\ 0x005d|TRY_ENTER\lTRY_LEAVE\lCatch: all \-\> 0x005c\l}"];
Node_38 [shape=record,label="{38\:\ 0x005e|0x005e: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_56 [shape=record,label="{56\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_43 [shape=record,label="{43\:\ 0x0065|ExcHandler: all \-\> 0x0065\l|0x0065: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0065]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0063|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{all \-\> 0x0065, blocks: (B:20:0x0045, B:41:0x0063), top: B:53:0x0036 \}\lCatch: all \-\> 0x0065\l|0x0063: MONITOR_EXIT  (r7 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0065, TRY_ENTER, TRY_LEAVE]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0064|0x0064: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_39 [shape=record,label="{39\:\ 0x005f|ExcHandler: all \-\> 0x005f\l|0x005f: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x005f] (LINE:781)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0060|0x0060: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x0061: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0062: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0067|RETURN\l|0x0067: RETURN  (r4 I:android.graphics.Bitmap)  (LINE:773)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0068|RETURN\l|0x0068: RETURN  (r4 I:android.graphics.Bitmap)  (LINE:759)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0069|0x0069: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('opt' android.graphics.BitmapFactory$Options)]) =  java.lang.IllegalArgumentException  (LINE:747)\l0x006b: CONST_STR  (r1 I:java.lang.String) =  \"bad argument to getScaledBitmap\" \l0x006d: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x0070|0x0070: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{android.graphics.Bitmap androidx.print.PrintHelper.loadConstrainedBitmap((r10 'this' I:androidx.print.PrintHelper A[IMMUTABLE_TYPE, THIS]), (r11 I:android.net.Uri A[D('uri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0024 \-\> B:10:0x0020, CROSS_EDGE: B:29:0x0053 \-\> B:1:?, CROSS_EDGE: B:49:0x004d \-\> B:27:0x0051, CROSS_EDGE: B:35:0x005b \-\> B:1:?, CROSS_EDGE: B:38:0x005e \-\> B:1:?, CROSS_EDGE: B:54:0x0058 \-\> B:36:0x005c, CROSS_EDGE: B:51:0x0046 \-\> B:30:0x0054, CROSS_EDGE: B:42:0x0064 \-\> B:1:?, CROSS_EDGE: B:43:0x0065 \-\> B:41:0x0063, CROSS_EDGE: B:53:0x0036 \-\> B:39:0x005f, CROSS_EDGE: B:45:0x0067 \-\> B:1:?, CROSS_EDGE: B:13:0x0029 \-\> B:45:0x0067, CROSS_EDGE: B:46:0x0068 \-\> B:1:?, CROSS_EDGE: B:6:0x0016 \-\> B:46:0x0068, CROSS_EDGE: B:48:0x0070 \-\> B:1:?, CROSS_EDGE: B:2:0x0000 \-\> B:47:0x0069\lDebug Info:\l  0x0045\-0x005f: r1 'decodeOptions' Landroid\/graphics\/BitmapFactory$Options;\l  0x0063\-0x0067: r1 'decodeOptions' Landroid\/graphics\/BitmapFactory$Options;\l  0x001f\-0x0068: r5 'imageSide' I\l  0x0020\-0x0068: r6 'sampleSize' I\l  0x000b\-0x0069: r0 'opt' Landroid\/graphics\/BitmapFactory$Options;\l  0x0013\-0x0069: r2 'w' I\l  0x0015\-0x0069: r3 'h' I\l  \-1 \-0x0070: r11 'uri' Landroid\/net\/Uri;\lTryCatch #0 \{all \-\> 0x0051, blocks: (B:24:0x004d, B:25:0x004f), top: B:49:0x004d \}, TryCatch #1 \{all \-\> 0x0054, blocks: (B:21:0x0046), top: B:51:0x0046 \}, TryCatch #2 \{all \-\> 0x0065, blocks: (B:20:0x0045, B:41:0x0063), top: B:53:0x0036 \}, TryCatch #3 \{all \-\> 0x005c, blocks: (B:33:0x0058, B:34:0x005a), top: B:54:0x0058 \}, TryCatch #4 \{all \-\> 0x005f, blocks: (B:19:0x0036), top: B:53:0x0036 \}\lEXCEPTIONS:[Ljava\/io\/FileNotFoundException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_47;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_47;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_46;
Node_7 -> Node_9;
Node_7 -> Node_46[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_57;
Node_12 -> Node_10;
Node_57 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_45;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_45[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_53;
Node_53 -> Node_19;
Node_53 -> Node_43;
Node_53 -> Node_39;
Node_19 -> Node_20;
Node_19 -> Node_56;
Node_20 -> Node_51;
Node_51 -> Node_21;
Node_51 -> Node_30;
Node_21 -> Node_22;
Node_21 -> Node_52;
Node_22 -> Node_23;
Node_23 -> Node_49;
Node_49 -> Node_24;
Node_49 -> Node_27;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_50;
Node_26 -> Node_1;
Node_50 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_1;
Node_52 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_54;
Node_54 -> Node_33;
Node_54 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_34 -> Node_55;
Node_35 -> Node_1;
Node_55 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_1;
Node_56 -> Node_39;
Node_43 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_1;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_45 -> Node_1;
Node_46 -> Node_1;
Node_47 -> Node_48;
Node_48 -> Node_1;
}

