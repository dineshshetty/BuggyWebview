digraph "CFG forandroidx.print.PrintHelper.loadBitmap(Landroid\/net\/Uri;Landroid\/graphics\/BitmapFactory$Options;)Landroid\/graphics\/Bitmap;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"close fail \"  (LINE:796)\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"PrintHelper\" \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('uri' android.net.Uri)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0030 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r2 I:android.content.Context) = (r5 I:androidx.print.PrintHelper) androidx.print.PrintHelper.mContext android.content.Context \l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0030 \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:799)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0024, blocks: (B:7:0x000b), top: B:23:0x000b \}\lCatch: all \-\> 0x0024\l|0x000b: INVOKE  (r2 I:android.content.ContentResolver) = (r2 I:android.content.Context) type: VIRTUAL call: android.content.Context.getContentResolver():android.content.ContentResolver A[Catch: all \-\> 0x0024, MD:():android.content.ContentResolver (c), TRY_ENTER] (LINE:801)\l0x000f: INVOKE  (r2 I:java.io.InputStream) = (r2 I:android.content.ContentResolver), (r6 I:android.net.Uri A[D('uri' android.net.Uri)]) type: VIRTUAL call: android.content.ContentResolver.openInputStream(android.net.Uri):java.io.InputStream A[Catch: all \-\> 0x0024, MD:(android.net.Uri):java.io.InputStream throws java.io.FileNotFoundException (c)]\l0x0013: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('is' java.io.InputStream)]) = (r2 I:??[OBJECT, ARRAY]) \l0x0014: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:802)\l0x0015: INVOKE  (r2 I:android.graphics.Bitmap) = \l  (r3 I:java.io.InputStream A[D('is' java.io.InputStream)])\l  (r2 I:android.graphics.Rect)\l  (r7 I:android.graphics.BitmapFactory$Options A[D('o' android.graphics.BitmapFactory$Options)])\l type: STATIC call: android.graphics.BitmapFactory.decodeStream(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options):android.graphics.Bitmap A[Catch: all \-\> 0x0024, MD:(java.io.InputStream, android.graphics.Rect, android.graphics.BitmapFactory$Options):android.graphics.Bitmap (c), TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|0x0019: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('is' java.io.InputStream)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0023  (LINE:804)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|RETURN\l|0x0023: RETURN  (r2 I:android.graphics.Bitmap)  (LINE:809)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_9 [shape=record,label="{9\:\ 0x001b|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{IOException \-\> 0x001f, blocks: (B:9:0x001b), top: B:25:0x001b \}\lCatch: IOException \-\> 0x001f\l|0x001b: INVOKE  (r3 I:java.io.InputStream A[D('is' java.io.InputStream)]) type: VIRTUAL call: java.io.InputStream.close():void A[Catch: IOException \-\> 0x001f, MD:():void throws java.io.IOException (c), TRY_ENTER, TRY_LEAVE] (LINE:806)\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x001f|ExcHandler: IOException \-\> 0x001f\l|0x001f: MOVE_EXCEPTION  (r4 I:java.io.IOException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IOException \-\> 0x001f] (LINE:807)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|0x0020: INVOKE  (r1 I:java.lang.String), (r0 I:java.lang.String), (r4 I:java.lang.Throwable A[D('t' java.io.IOException)]) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)] (LINE:808)\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|ExcHandler: all \-\> 0x0024\l|0x0024: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0024] (LINE:804)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0025|0x0025: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('is' java.io.InputStream)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x002f \l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|0x002f: THROW  (r2 I:java.lang.Throwable)  (LINE:809)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0027|TRY_ENTER\lTRY_LEAVE\lTryCatch #2 \{IOException \-\> 0x002b, blocks: (B:16:0x0027), top: B:27:0x0027 \}\lCatch: IOException \-\> 0x002b\l|0x0027: INVOKE  (r3 I:java.io.InputStream A[D('is' java.io.InputStream)]) type: VIRTUAL call: java.io.InputStream.close():void A[Catch: IOException \-\> 0x002b, MD:():void throws java.io.IOException (c), TRY_ENTER, TRY_LEAVE] (LINE:806)\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x002b|ExcHandler: IOException \-\> 0x002b\l|0x002b: MOVE_EXCEPTION  (r4 I:java.io.IOException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IOException \-\> 0x002b] (LINE:807)\l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|0x002c: INVOKE  (r1 I:java.lang.String), (r0 I:java.lang.String), (r4 I:java.lang.Throwable A[D('t' java.io.IOException)]) type: STATIC call: android.util.Log.w(java.lang.String, java.lang.String, java.lang.Throwable):int A[MD:(java.lang.String, java.lang.String, java.lang.Throwable):int (c)] (LINE:808)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0030|0x0030: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:797)\l0x0032: CONST_STR  (r1 I:java.lang.String) =  \"bad argument to loadBitmap\" \l0x0034: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0037|0x0037: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private android.graphics.Bitmap androidx.print.PrintHelper.loadBitmap((r5 'this' I:androidx.print.PrintHelper A[IMMUTABLE_TYPE, THIS]), (r6 I:android.net.Uri A[D('uri' android.net.Uri), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.graphics.BitmapFactory$Options A[D('o' android.graphics.BitmapFactory$Options), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:9:0x001b \-\> B:13:0x0023, CROSS_EDGE: B:12:0x0020 \-\> B:13:0x0023, CROSS_EDGE: B:25:0x001b \-\> B:11:0x001f, CROSS_EDGE: B:20:0x002f \-\> B:1:?, CROSS_EDGE: B:16:0x0027 \-\> B:20:0x002f, CROSS_EDGE: B:19:0x002c \-\> B:20:0x002f, CROSS_EDGE: B:27:0x0027 \-\> B:18:0x002b, CROSS_EDGE: B:23:0x000b \-\> B:14:0x0024, CROSS_EDGE: B:22:0x0037 \-\> B:1:?, CROSS_EDGE: B:3:0x0004 \-\> B:21:0x0030\lDebug Info:\l  0x0020\-0x0023: r4 't' Ljava\/io\/IOException;\l  0x002c\-0x002f: r4 't' Ljava\/io\/IOException;\l  0x000b\-0x0030: r3 'is' Ljava\/io\/InputStream;\l  \-1 \-0x0037: r6 'uri' Landroid\/net\/Uri;\l  \-1 \-0x0037: r7 'o' Landroid\/graphics\/BitmapFactory$Options;\lTryCatch #0 \{all \-\> 0x0024, blocks: (B:7:0x000b), top: B:23:0x000b \}, TryCatch #1 \{IOException \-\> 0x001f, blocks: (B:9:0x001b), top: B:25:0x001b \}, TryCatch #2 \{IOException \-\> 0x002b, blocks: (B:16:0x0027), top: B:27:0x0027 \}\lEXCEPTIONS:[Ljava\/io\/FileNotFoundException;]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [809=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_21;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_21;
Node_6 -> Node_23;
Node_23 -> Node_7;
Node_23 -> Node_14;
Node_7 -> Node_8;
Node_7 -> Node_24;
Node_8 -> Node_13;
Node_8 -> Node_25[style=dashed];
Node_13 -> Node_1;
Node_25 -> Node_9;
Node_25 -> Node_11;
Node_9 -> Node_13;
Node_9 -> Node_26;
Node_26 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_24 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_20;
Node_15 -> Node_27[style=dashed];
Node_20 -> Node_1;
Node_27 -> Node_16;
Node_27 -> Node_18;
Node_16 -> Node_20;
Node_16 -> Node_28;
Node_28 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_1;
}

