digraph "CFG forandroidx.documentfile.provider.TreeDocumentFile.createFile(Ljava\/lang\/String;Ljava\/lang\/String;)Landroidx\/documentfile\/provider\/DocumentFile;" {
subgraph cluster_Region_665488892 {
label = "R(2:1|(2:(1:4)|(1:6)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|android.net.Uri android.net.Uri r0 = createFile(r3.mContext, r3.mUri, r4, r5)\l}"];
subgraph cluster_Region_380824701 {
label = "R(2:(1:4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_524674410 {
label = "IF [B:3:0x0008] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1237442624 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|return new androidx.documentfile.provider.TreeDocumentFile(r3, r3.mContext, r0)\l}"];
}
}
subgraph cluster_Region_1250208759 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|RETURN\lORIG_RETURN\l|return null\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.documentfile.provider.DocumentFile androidx.documentfile.provider.TreeDocumentFile.createFile((r3v0 'this' androidx.documentfile.provider.TreeDocumentFile A[IMMUTABLE_TYPE, THIS]), (r4v0 'mimeType' java.lang.String A[D('mimeType' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'displayName' java.lang.String A[D('displayName' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0012 \-\> B:6:0x0013\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.documentfile.provider.DocumentFile.createFile(java.lang.String, java.lang.String):androidx.documentfile.provider.DocumentFile]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_7 -> Node_1;
Node_5 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_7;
}

