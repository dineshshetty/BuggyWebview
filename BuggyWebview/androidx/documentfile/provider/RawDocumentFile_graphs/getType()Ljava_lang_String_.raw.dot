digraph "CFG forandroidx.documentfile.provider.RawDocumentFile.getType()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.io.File) = (r1 I:androidx.documentfile.provider.RawDocumentFile) androidx.documentfile.provider.RawDocumentFile.mFile java.io.File  (LINE:79)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.io.File) type: VIRTUAL call: java.io.File.isDirectory():boolean A[MD:():boolean (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000a \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|RETURN\l|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:80)\l0x0009: RETURN  (r0 I:java.lang.String) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: IGET  (r0 I:java.io.File) = (r1 I:androidx.documentfile.provider.RawDocumentFile) androidx.documentfile.provider.RawDocumentFile.mFile java.io.File  (LINE:82)\l0x000c: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.File) type: VIRTUAL call: java.io.File.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x0010: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String) type: STATIC call: androidx.documentfile.provider.RawDocumentFile.getTypeForName(java.lang.String):java.lang.String A[MD:(java.lang.String):java.lang.String (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.documentfile.provider.RawDocumentFile.getType((r1 'this' I:androidx.documentfile.provider.RawDocumentFile A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0014 \-\> B:1:?\lMETHOD_OVERRIDE: [androidx.documentfile.provider.DocumentFile.getType():java.lang.String]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

