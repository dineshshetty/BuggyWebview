digraph "CFG forandroidx.documentfile.provider.RawDocumentFile.deleteContents(Ljava\/io\/File;)Z" {
subgraph cluster_Region_1743378790 {
label = "R(3:1|(2:3|(4:5|(1:7)|(1:10)(0)|12))|15)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.io.File[] java.io.File[] r0 = r7.listFiles()\lboolean r1 = true\l}"];
subgraph cluster_IfRegion_2055905479 {
label = "IF [B:3:0x0005] THEN: R(2:3|(4:5|(1:7)|(1:10)(0)|12)) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_874088464 {
label = "R(2:3|(4:5|(1:7)|(1:10)(0)|12))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|int r3 = 0\l\l}"];
subgraph cluster_LoopRegion_1628868009 {
label = "LOOP:0: (4:5|(1:7)|(1:10)(0)|12)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0009|LOOP_START\lLOOP:0: B:5:0x0009\-\>B:12:0x0035\lPHI: r1 r3 \l  PHI: (r1v2 'success' boolean) = (r1v0 'success' boolean), (r1v4 'success' boolean) binds: [B:4:0x0007, B:12:0x0035] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:4:0x0007, B:12:0x0035] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \< r2) goto L5\l}"];
subgraph cluster_Region_1110700150 {
label = "R(4:5|(1:7)|(1:10)(0)|12)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000b|r4 = r0[r3]\l}"];
subgraph cluster_IfRegion_1049032452 {
label = "IF [B:7:0x0011] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0011|if (r4.isDirectory() != false) goto L7\l}"];
subgraph cluster_Region_1151023767 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0013|r1 &= deleteContents(r4)\l}"];
}
}
subgraph cluster_IfRegion_312928091 {
label = "IF [B:10:0x001c] THEN: R(1:10) ELSE: R(0)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x001c|if (r4.delete() == false) goto L10\l}"];
subgraph cluster_Region_1807233983 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001e|android.util.Log.w(\"DocumentFile\", \"Failed to delete \" + r4)\lr1 = false\l}"];
}
subgraph cluster_Region_759037062 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_12 [shape=record,label="{12\:\ 0x0035|LOOP_END\lLOOP:0: B:5:0x0009\-\>B:12:0x0035\lPHI: r1 \l  PHI: (r1v4 'success' boolean) = (r1v3 'success' boolean), (r1v5 'success' boolean) binds: [B:16:0x0035, B:15:0x0035] A[DONT_GENERATE, DONT_INLINE]\l|r3++\l}"];
}
}
}
}
Node_13 [shape=record,label="{13\:\ 0x0038|RETURN\lPHI: r1 \l  PHI: (r1v1 'success' boolean) = (r1v0 'success' boolean), (r1v2 'success' boolean) binds: [B:3:0x0005, B:14:0x0038] A[DONT_GENERATE, DONT_INLINE]\l|return r1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0018|PHI: r1 \l  PHI: (r1v3 'success' boolean) = (r1v2 'success' boolean), (r1v6 'success' boolean) binds: [B:7:0x0011, B:8:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0035|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0035|SYNTHETIC\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0038|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static boolean androidx.documentfile.provider.RawDocumentFile.deleteContents((r7v0 'dir' java.io.File A[D('dir' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0035 \-\> B:5:0x0009, CROSS_EDGE: B:10:0x001c \-\> B:12:0x0035, CROSS_EDGE: B:7:0x0011 \-\> B:9:0x0018, CROSS_EDGE: B:3:0x0005 \-\> B:13:0x0038\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_13[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_14[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_9[style=dashed];
Node_8 -> Node_9;
Node_10 -> Node_11;
Node_10 -> Node_16[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_5;
Node_13 -> Node_1;
Node_0 -> Node_2;
Node_9 -> Node_10;
Node_15 -> Node_12;
Node_16 -> Node_12;
Node_14 -> Node_13;
}

