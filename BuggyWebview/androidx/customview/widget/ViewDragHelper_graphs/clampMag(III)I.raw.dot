digraph "CFG forandroidx.customview.widget.ViewDragHelper.clampMag(III)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r3 I:int A[D('value' int)]) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:699)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char] A[D('absValue' int)]) \>= (r4 I:??[int, byte, short, char] A[D('absMin' int)])  \-\> B:19:0x0008  (LINE:700)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0006|RETURN\l|0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: RETURN  (r1 I:int) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char] A[D('absValue' int)]) \<= (r5 I:??[int, byte, short, char] A[D('absMax' int)])  \-\> B:24:0x0010  (LINE:701)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|0x000a: IF  (r3 I:??[int, byte, short, char] A[D('value' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:22:0x000e \l}"];
Node_21 [shape=record,label="{21\:\ 0x000c|0x000c: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('absMax' int)]) \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: NEG  (r1 I:int) = (r5 I:int A[D('absMax' int)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN  (r1 I:int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|RETURN\l|0x0010: RETURN  (r3 I:int A[D('value' int)])  (LINE:702)\l}"];
MethodNode[shape=record,label="{private int androidx.customview.widget.ViewDragHelper.clampMag((r2 'this' I:androidx.customview.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('value' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('absMin' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('absMax' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x000f \-\> B:14:?, CROSS_EDGE: B:22:0x000e \-\> B:23:0x000f, CROSS_EDGE: B:24:0x0010 \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0010: r0 'absValue' I\l  \-1 \-0x0010: r3 'value' I\l  \-1 \-0x0010: r4 'absMin' I\l  \-1 \-0x0010: r5 'absMax' I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_14;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_25;
Node_25 -> Node_14;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_24 -> Node_14;
}

