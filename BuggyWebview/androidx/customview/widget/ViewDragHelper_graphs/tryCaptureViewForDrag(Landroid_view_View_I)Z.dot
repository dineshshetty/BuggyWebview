digraph "CFG forandroidx.customview.widget.ViewDragHelper.tryCaptureViewForDrag(Landroid\/view\/View;I)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000}"];
Node_18 [shape=record,label="{18\:\ 0x0003|if (r3 != r2.mCapturedView) goto L7\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005}"];
Node_20 [shape=record,label="{20\:\ 0x0007|if (r2.mActivePointerId != r4) goto L7\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|RETURN\l|return true\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|if (r3 == null) goto L13\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c}"];
Node_24 [shape=record,label="{24\:\ 0x0012|if (r2.mCallback.tryCaptureView(r3, r4) == false) goto L12\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|r2.mActivePointerId = r4\lcaptureChildView(r3, r4)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0019|RETURN\l|return true\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{boolean androidx.customview.widget.ViewDragHelper.tryCaptureViewForDrag((r2v0 'this' androidx.customview.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r3v0 'toCapture' android.view.View A[D('toCapture' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'pointerId' int A[D('pointerId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0019 \-\> B:16:?, CROSS_EDGE: B:28:0x001b \-\> B:16:?, CROSS_EDGE: B:22:0x000a \-\> B:27:0x001a, CROSS_EDGE: B:18:0x0003 \-\> B:22:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_16;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_29 -> Node_16;
Node_27 -> Node_16;
}

