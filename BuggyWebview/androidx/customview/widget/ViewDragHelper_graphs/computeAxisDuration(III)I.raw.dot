digraph "CFG forandroidx.customview.widget.ViewDragHelper.computeAxisDuration(III)I" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('delta' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0004  (LINE:667)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|RETURN\l|0x0002: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:668)\l0x0003: RETURN  (r0 I:int) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IGET  (r0 I:android.view.ViewGroup) = (r7 I:androidx.customview.widget.ViewDragHelper) androidx.customview.widget.ViewDragHelper.mParentView android.view.ViewGroup  (LINE:671)\l0x0006: INVOKE  (r0 I:int) = (r0 I:android.view.ViewGroup) type: VIRTUAL call: android.view.ViewGroup.getWidth():int A[MD:():int (c)]\l0x000a: ARITH  (r1 I:int) = (r0 I:int A[D('width' int)]) \/ (2 int)  (LINE:672)\l0x000c: INVOKE  (r2 I:int) = (r8 I:int A[D('delta' int)]) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:673)\l0x0010: CAST (r2 I:float) = (float) (r2 I:int) \l0x0011: CAST (r3 I:float) = (float) (r0 I:int A[D('width' int)]) \l0x0012: ARITH  (r2 I:float) = (r2 I:float) \/ (r3 I:float) \l0x0013: CONST  (r3 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x0015: INVOKE  (r2 I:float) = (r3 I:float), (r2 I:float) type: STATIC call: java.lang.Math.min(float, float):float A[MD:(float, float):float (c)]\l0x0019: CAST (r4 I:float) = (float) (r1 I:int A[D('halfWidth' int)])  (LINE:674)\l0x001a: CAST (r5 I:float) = (float) (r1 I:int A[D('halfWidth' int)]) \l0x001b: INVOKE  (r6 I:float) = (r7 I:androidx.customview.widget.ViewDragHelper), (r2 I:float A[D('distanceRatio' float)]) type: DIRECT call: androidx.customview.widget.ViewDragHelper.distanceInfluenceForSnapDuration(float):float A[MD:(float):float (m)] (LINE:675)\l0x001f: ARITH  (r5 I:float) = (r5 I:float) * (r6 I:float) \l0x0021: ARITH  (r4 I:float) = (r4 I:float) + (r5 I:float) \l0x0022: INVOKE  (r9 I:int A[D('velocity' int)]) = (r9 I:int A[D('velocity' int)]) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:678)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|0x0026: IF  (r9 I:??[int, byte, short, char] A[D('velocity' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:19:0x003a  (LINE:679)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0028|0x0028: CONST  (r3 I:??[int, float, short, byte, char]) = (1148846080(0x447a0000, float:1000.0) ??[int, float, short, byte, char])  (LINE:680)\l0x002a: CAST (r5 I:float) = (float) (r9 I:int A[D('velocity' int)]) \l0x002b: ARITH  (r5 I:float) = (r4 I:float A[D('distance' float)]) \/ (r5 I:float) \l0x002d: INVOKE  (r5 I:float) = (r5 I:float) type: STATIC call: java.lang.Math.abs(float):float A[MD:(float):float (c)]\l0x0031: ARITH  (r5 I:float) = (r5 I:float) * (r3 I:float) \l0x0033: INVOKE  (r3 I:int) = (r5 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x0037: ARITH  (r3 I:int) = (r3 I:int) * (4 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0047|0x0047: CONST  (r5 I:??[int, float, short, byte, char] A[D('range' float)]) = (600(0x258, float:8.41E\-43) ??[int, float, short, byte, char])  (LINE:685)\l0x0049: INVOKE  (r5 I:int) = (r3 I:int A[D('duration' int)]), (r5 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x004d|RETURN\l|0x004d: RETURN  (r5 I:int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x003a|0x003a: INVOKE  (r5 I:int) = (r8 I:int A[D('delta' int)]) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:682)\l0x003e: CAST (r5 I:float) = (float) (r5 I:int) \l0x003f: CAST (r6 I:float) = (float) (r10 I:int A[D('motionRange' int)]) \l0x0040: ARITH  (r5 I:float) = (r5 I:float) \/ (r6 I:float) \l0x0041: ARITH  (r3 I:float) = (r3 I:float) + (r5 I:float A[D('range' float)])  (LINE:683)\l0x0042: CONST  (r6 I:??[int, float, short, byte, char]) = (1132462080(0x43800000, float:256.0) ??[int, float, short, byte, char]) \l0x0044: ARITH  (r3 I:float) = (r3 I:float) * (r6 I:float) \l0x0046: CAST (r3 I:int) = (int) (r3 I:float) \l}"];
MethodNode[shape=record,label="{private int androidx.customview.widget.ViewDragHelper.computeAxisDuration((r7 'this' I:androidx.customview.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('delta' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('velocity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('motionRange' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x004d \-\> B:12:?, CROSS_EDGE: B:19:0x003a \-\> B:20:0x0047\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0039\-0x003a: r3 'duration' I\l  0x0041\-0x0047: r5 'range' F\l  0x000a\-0x004d: r0 'width' I\l  0x000c\-0x004d: r1 'halfWidth' I\l  0x0019\-0x004d: r2 'distanceRatio' F\l  0x0047\-0x004d: r3 'duration' I\l  0x0022\-0x004d: r4 'distance' F\l  \-1 \-0x004d: r8 'delta' I\l  \-1 \-0x004d: r9 'velocity' I\l  \-1 \-0x004d: r10 'motionRange' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_16;
Node_14 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
}

