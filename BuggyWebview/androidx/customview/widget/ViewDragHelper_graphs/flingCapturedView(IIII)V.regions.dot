digraph "CFG forandroidx.customview.widget.ViewDragHelper.flingCapturedView(IIII)V" {
subgraph cluster_Region_25512008 {
label = "R(1:(2:(1:7)|(1:3)))";
node [shape=record,color=blue];
subgraph cluster_Region_368860676 {
label = "R(2:(1:7)|(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_932863723 {
label = "IF [B:11:0x0002] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r10.mReleaseInProgress == false) goto L6\l}"];
subgraph cluster_Region_268241909 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0037|throw new java.lang.IllegalStateException(\"Cannot flingCapturedView outside of a call to Callback#onViewReleased\")\l}"];
}
}
subgraph cluster_Region_605148490 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|r10.mScroller.fling(r10.mCapturedView.getLeft(), r10.mCapturedView.getTop(), (int) r10.mVelocityTracker.getXVelocity(r10.mActivePointerId), (int) r10.mVelocityTracker.getYVelocity(r10.mActivePointerId), r11, r13, r12, r14)\lsetDragState(2)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x002f}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0030}"];
MethodNode[shape=record,label="{public void androidx.customview.widget.ViewDragHelper.flingCapturedView((r10v0 'this' androidx.customview.widget.ViewDragHelper A[IMMUTABLE_TYPE, THIS]), (r11v0 'minLeft' int A[D('minLeft' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'minTop' int A[D('minTop' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'maxLeft' int A[D('maxLeft' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'maxTop' int A[D('maxTop' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0037 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_15 -> Node_9;
Node_12 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_13 -> Node_9;
Node_14 -> Node_15;
}

