digraph "CFG forandroidx.customview.widget.ExploreByTouchHelper.guessPreviouslyFocusedRect(Landroid\/view\/View;ILandroid\/graphics\/Rect;)Landroid\/graphics\/Rect;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|int r0 = r4.getWidth()\lint r1 = r4.getHeight()\l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|switch(r5) \{\l    case 17: goto L10;\l    case 33: goto L9;\l    case 66: goto L8;\l    case 130: goto L6;\l    default: goto L3;\l\}\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d}"];
Node_16 [shape=record,label="{16\:\ 0x0014|throw new java.lang.IllegalArgumentException(\"direction must be one of \{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT\}.\")\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|r6.set(0, \-1, r0, \-1)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|RETURN\l|return r6\l}"];
Node_18 [shape=record,label="{18\:\ 0x0019|r6.set(\-1, 0, \-1, r1)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|r6.set(0, r1, r0, r1)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0021|r6.set(r0, 0, r0, r1)\l}"];
MethodNode[shape=record,label="{private static android.graphics.Rect androidx.customview.widget.ExploreByTouchHelper.guessPreviouslyFocusedRect((r4v0 'host' android.view.View A[D('host' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'direction' int A[D('direction' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'outBounds' android.graphics.Rect A[D('outBounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0025 \-\> B:12:?, CROSS_EDGE: B:18:0x0019 \-\> B:21:0x0025, CROSS_EDGE: B:19:0x001d \-\> B:21:0x0025, CROSS_EDGE: B:20:0x0021 \-\> B:21:0x0025\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17;
Node_14 -> Node_18;
Node_14 -> Node_19;
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_17 -> Node_21;
Node_21 -> Node_12;
Node_18 -> Node_21;
Node_19 -> Node_21;
Node_20 -> Node_21;
}

