digraph "CFG forandroidx.customview.widget.FocusStrategy.beamBeats(ILandroid\/graphics\/Rect;Landroid\/graphics\/Rect;Landroid\/graphics\/Rect;)Z" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = \l  (r6 I:int A[D('direction' int)])\l  (r7 I:android.graphics.Rect A[D('source' android.graphics.Rect)])\l  (r8 I:android.graphics.Rect A[D('rect1' android.graphics.Rect)])\l type: STATIC call: androidx.customview.widget.FocusStrategy.beamsOverlap(int, android.graphics.Rect, android.graphics.Rect):boolean A[MD:(int, android.graphics.Rect, android.graphics.Rect):boolean (m)] (LINE:243)\l0x0004: INVOKE  (r1 I:boolean) = \l  (r6 I:int A[D('direction' int)])\l  (r7 I:android.graphics.Rect A[D('source' android.graphics.Rect)])\l  (r9 I:android.graphics.Rect A[D('rect2' android.graphics.Rect)])\l type: STATIC call: androidx.customview.widget.FocusStrategy.beamsOverlap(int, android.graphics.Rect, android.graphics.Rect):boolean A[MD:(int, android.graphics.Rect, android.graphics.Rect):boolean (m)] (LINE:244)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:247)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rect2InSrcBeam' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x002c \l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('rect1InSrcBeam' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000e \l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|0x000e: INVOKE  (r3 I:boolean) = \l  (r6 I:int A[D('direction' int)])\l  (r7 I:android.graphics.Rect A[D('source' android.graphics.Rect)])\l  (r9 I:android.graphics.Rect A[D('rect2' android.graphics.Rect)])\l type: STATIC call: androidx.customview.widget.FocusStrategy.isToDirectionOf(int, android.graphics.Rect, android.graphics.Rect):boolean A[MD:(int, android.graphics.Rect, android.graphics.Rect):boolean (m)] (LINE:257)\l0x0012: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0013|0x0013: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0016 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0015|RETURN\l|0x0015: RETURN  (r4 I:boolean)  (LINE:258)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|0x0016: CONST  (r3 I:??[int, float, short, byte, char]) = (17 ??[int, float, short, byte, char])  (LINE:263)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|0x0018: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('direction' int)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x002b \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: CONST  (r3 I:??[int, float, short, byte, char]) = (66 ??[int, float, short, byte, char]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('direction' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001f \l}"];
Node_35 [shape=record,label="{35\:\ 0x001f|0x001f: INVOKE  (r3 I:int) = \l  (r6 I:int A[D('direction' int)])\l  (r7 I:android.graphics.Rect A[D('source' android.graphics.Rect)])\l  (r8 I:android.graphics.Rect A[D('rect1' android.graphics.Rect)])\l type: STATIC call: androidx.customview.widget.FocusStrategy.majorAxisDistance(int, android.graphics.Rect, android.graphics.Rect):int A[MD:(int, android.graphics.Rect, android.graphics.Rect):int (m)] (LINE:271)\l0x0023: INVOKE  (r5 I:int) = \l  (r6 I:int A[D('direction' int)])\l  (r7 I:android.graphics.Rect A[D('source' android.graphics.Rect)])\l  (r9 I:android.graphics.Rect A[D('rect2' android.graphics.Rect)])\l type: STATIC call: androidx.customview.widget.FocusStrategy.majorAxisDistanceToFarEdge(int, android.graphics.Rect, android.graphics.Rect):int A[MD:(int, android.graphics.Rect, android.graphics.Rect):int (m)] (LINE:272)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0027|0x0027: IF  (r3 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char])  \-\> B:41:? \l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|RETURN\lORIG_RETURN\l|0x0029: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x002a: RETURN  (r2 I:boolean)  (LINE:271)\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x002a: RETURN  (r2 I:boolean) A[SYNTHETIC] (LINE:271)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002b|RETURN\l|0x002b: RETURN  (r4 I:boolean)  (LINE:264)\l}"];
Node_40 [shape=record,label="{40\:\ 0x002c|RETURN\l|0x002c: RETURN  (r2 I:boolean)  (LINE:248)\l}"];
MethodNode[shape=record,label="{private static boolean androidx.customview.widget.FocusStrategy.beamBeats((r6 I:int A[D('direction' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:android.graphics.Rect A[D('source' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:android.graphics.Rect A[D('rect1' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:android.graphics.Rect A[D('rect2' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:38:0x002a \-\> B:22:?, CROSS_EDGE: B:36:0x0027 \-\> B:38:0x002a, CROSS_EDGE: B:39:0x002b \-\> B:22:?, CROSS_EDGE: B:31:0x0018 \-\> B:39:0x002b, CROSS_EDGE: B:40:0x002c \-\> B:22:?, CROSS_EDGE: B:24:0x0009 \-\> B:40:0x002c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x002c: r0 'rect1InSrcBeam' Z\l  0x0008\-0x002c: r1 'rect2InSrcBeam' Z\l  \-1 \-0x002c: r6 'direction' I\l  \-1 \-0x002c: r7 'source' Landroid\/graphics\/Rect;\l  \-1 \-0x002c: r8 'rect1' Landroid\/graphics\/Rect;\l  \-1 \-0x002c: r9 'rect2' Landroid\/graphics\/Rect;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_40;
Node_25 -> Node_27;
Node_25 -> Node_40[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_22;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_39;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_39[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_41;
Node_37 -> Node_22;
Node_41 -> Node_22;
Node_39 -> Node_22;
Node_40 -> Node_22;
}

