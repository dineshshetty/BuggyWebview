digraph "CFG forandroidx.customview.widget.FocusStrategy.isToDirectionOf(ILandroid\/graphics\/Rect;Landroid\/graphics\/Rect;)Z" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:343)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0002|0x0002: SWITCH  (r4 I:?? A[D('direction' int)])\l case 17: goto B:51:0x0028\l case 33: goto B:46:0x001f\l case 66: goto B:41:0x0016\l case 130: goto B:36:0x000d\l default: goto B:34:0x0005 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0005|0x0005: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:353)\l0x0007: CONST_STR  (r1 I:java.lang.String) =  \"direction must be one of \{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT\}.\" \l0x0009: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x000c|0x000c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x000d|0x000d: IGET  (r2 I:int) = (r5 I:android.graphics.Rect A[D('src' android.graphics.Rect)]) android.graphics.Rect.bottom int  (LINE:351)\l0x000f: IGET  (r3 I:int) = (r6 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) android.graphics.Rect.top int \l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|0x0011: IF  (r2 I:??[int, byte, short, char]) \> (r3 I:??[int, byte, short, char])  \-\> B:39:0x0014 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0014|RETURN\lORIG_RETURN\l|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: RETURN  (r0 I:boolean) \l}"];
Node_56 [shape=record,label="{56\:\ ?|SYNTHETIC\lRETURN\l|0x0015: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0016|0x0016: IGET  (r2 I:int) = (r5 I:android.graphics.Rect A[D('src' android.graphics.Rect)]) android.graphics.Rect.right int  (LINE:347)\l0x0018: IGET  (r3 I:int) = (r6 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) android.graphics.Rect.left int \l}"];
Node_42 [shape=record,label="{42\:\ 0x001a|0x001a: IF  (r2 I:??[int, byte, short, char]) \> (r3 I:??[int, byte, short, char])  \-\> B:44:0x001d \l}"];
Node_44 [shape=record,label="{44\:\ 0x001d|RETURN\lORIG_RETURN\l|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: RETURN  (r0 I:boolean) \l}"];
Node_57 [shape=record,label="{57\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_46 [shape=record,label="{46\:\ 0x001f|0x001f: IGET  (r2 I:int) = (r5 I:android.graphics.Rect A[D('src' android.graphics.Rect)]) android.graphics.Rect.top int  (LINE:349)\l0x0021: IGET  (r3 I:int) = (r6 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) android.graphics.Rect.bottom int \l}"];
Node_47 [shape=record,label="{47\:\ 0x0023|0x0023: IF  (r2 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char])  \-\> B:49:0x0026 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0026|RETURN\lORIG_RETURN\l|0x0026: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: RETURN  (r0 I:boolean) \l}"];
Node_58 [shape=record,label="{58\:\ ?|SYNTHETIC\lRETURN\l|0x0027: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_51 [shape=record,label="{51\:\ 0x0028|0x0028: IGET  (r2 I:int) = (r5 I:android.graphics.Rect A[D('src' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:345)\l0x002a: IGET  (r3 I:int) = (r6 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) android.graphics.Rect.right int \l}"];
Node_52 [shape=record,label="{52\:\ 0x002c|0x002c: IF  (r2 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char])  \-\> B:54:0x002f \l}"];
Node_54 [shape=record,label="{54\:\ 0x002f|RETURN\lORIG_RETURN\l|0x002f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0030: RETURN  (r0 I:boolean) \l}"];
Node_59 [shape=record,label="{59\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{private static boolean androidx.customview.widget.FocusStrategy.isToDirectionOf((r4 I:int A[D('direction' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.Rect A[D('src' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:android.graphics.Rect A[D('dest' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x0015 \-\> B:31:?, CROSS_EDGE: B:37:0x0011 \-\> B:40:0x0015, CROSS_EDGE: B:45:0x001e \-\> B:31:?, CROSS_EDGE: B:42:0x001a \-\> B:45:0x001e, CROSS_EDGE: B:50:0x0027 \-\> B:31:?, CROSS_EDGE: B:47:0x0023 \-\> B:50:0x0027, CROSS_EDGE: B:55:0x0030 \-\> B:31:?, CROSS_EDGE: B:52:0x002c \-\> B:55:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0043: r4 'direction' I\l  \-1 \-0x0043: r5 'src' Landroid\/graphics\/Rect;\l  \-1 \-0x0043: r6 'dest' Landroid\/graphics\/Rect;\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_36;
Node_33 -> Node_41;
Node_33 -> Node_46;
Node_33 -> Node_51;
Node_34 -> Node_35;
Node_35 -> Node_31;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_56[style=dashed];
Node_39 -> Node_31;
Node_56 -> Node_31;
Node_41 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_57[style=dashed];
Node_44 -> Node_31;
Node_57 -> Node_31;
Node_46 -> Node_47;
Node_47 -> Node_49;
Node_47 -> Node_58[style=dashed];
Node_49 -> Node_31;
Node_58 -> Node_31;
Node_51 -> Node_52;
Node_52 -> Node_54;
Node_52 -> Node_59[style=dashed];
Node_54 -> Node_31;
Node_59 -> Node_31;
}

