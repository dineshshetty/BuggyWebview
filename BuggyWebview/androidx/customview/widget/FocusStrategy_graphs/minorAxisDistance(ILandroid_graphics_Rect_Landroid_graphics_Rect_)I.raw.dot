digraph "CFG forandroidx.customview.widget.FocusStrategy.minorAxisDistance(ILandroid\/graphics\/Rect;Landroid\/graphics\/Rect;)I" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: SWITCH  (r3 I:?? A[D('direction' int)])\l case 17: goto B:16:0x0023\l case 33: goto B:14:0x000b\l case 66: goto B:16:0x0023\l case 130: goto B:14:0x000b\l default: goto B:12:0x0003  (LINE:423)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0003|0x0003: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:435)\l0x0005: CONST_STR  (r1 I:java.lang.String) =  \"direction must be one of \{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT\}.\" \l0x0007: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|0x000a: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: IGET  (r0 I:int) = (r4 I:android.graphics.Rect A[D('source' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:432)\l0x000d: INVOKE  (r1 I:int) = (r4 I:android.graphics.Rect A[D('source' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.width():int A[MD:():int (c)] (LINE:433)\l0x0011: ARITH  (r1 I:int) = (r1 I:int) \/ (2 int) \l0x0013: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0014: IGET  (r1 I:int) = (r5 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) android.graphics.Rect.left int \l0x0016: INVOKE  (r2 I:int) = (r5 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.width():int A[MD:():int (c)]\l0x001a: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x001c: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x001d: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x001e: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:432)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|0x0023: IGET  (r0 I:int) = (r4 I:android.graphics.Rect A[D('source' android.graphics.Rect)]) android.graphics.Rect.top int  (LINE:427)\l0x0025: INVOKE  (r1 I:int) = (r4 I:android.graphics.Rect A[D('source' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.height():int A[MD:():int (c)] (LINE:428)\l0x0029: ARITH  (r1 I:int) = (r1 I:int) \/ (2 int) \l0x002b: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x002c: IGET  (r1 I:int) = (r5 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) android.graphics.Rect.top int \l0x002e: INVOKE  (r2 I:int) = (r5 I:android.graphics.Rect A[D('dest' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.height():int A[MD:():int (c)]\l0x0032: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0034: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0035: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x0036: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: java.lang.Math.abs(int):int A[MD:(int):int (c)] (LINE:427)\l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|RETURN\l|0x003a: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private static int androidx.customview.widget.FocusStrategy.minorAxisDistance((r3 I:int A[D('direction' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.graphics.Rect A[D('source' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:android.graphics.Rect A[D('dest' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0022 \-\> B:10:?, CROSS_EDGE: B:17:0x003a \-\> B:10:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x004d: r3 'direction' I\l  \-1 \-0x004d: r4 'source' Landroid\/graphics\/Rect;\l  \-1 \-0x004d: r5 'dest' Landroid\/graphics\/Rect;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14;
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_10;
Node_14 -> Node_15;
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

