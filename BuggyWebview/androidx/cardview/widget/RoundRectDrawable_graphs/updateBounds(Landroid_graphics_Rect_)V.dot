digraph "CFG forandroidx.cardview.widget.RoundRectDrawable.updateBounds(Landroid\/graphics\/Rect;)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|if (r7 != null) goto L3\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|android.graphics.Rect r7 = getBounds()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|PHI: r7 \l  PHI: (r7v1 'bounds' android.graphics.Rect) = (r7v0 'bounds' android.graphics.Rect), (r7v2 'bounds' android.graphics.Rect) binds: [B:11:0x0000, B:12:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|r6.mBoundsF.set((float) r7.left, (float) r7.top, (float) r7.right, (float) r7.bottom)\lr6.mBoundsI.set(r7)\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|if (r6.mInsetForPadding == false) goto L8\l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|float r0 = androidx.cardview.widget.RoundRectDrawableWithShadow.calculateVerticalPadding(r6.mPadding, r6.mRadius, r6.mInsetForRadius)\lfloat r1 = androidx.cardview.widget.RoundRectDrawableWithShadow.calculateHorizontalPadding(r6.mPadding, r6.mRadius, r6.mInsetForRadius)\lr6.mBoundsI.inset((int) java.lang.Math.ceil((double) r1), (int) java.lang.Math.ceil((double) r0))\lr6.mBoundsF.set(r6.mBoundsI)\l}"];
Node_16 [shape=record,label="{16\:\ 0x004c|RETURN\lORIG_RETURN\l|return\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.cardview.widget.RoundRectDrawable.updateBounds((r6v0 'this' androidx.cardview.widget.RoundRectDrawable A[IMMUTABLE_TYPE, THIS]), (r7v0 'bounds' android.graphics.Rect A[D('bounds' android.graphics.Rect), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x001e \-\> B:16:0x004c, CROSS_EDGE: B:11:0x0000 \-\> B:13:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

