digraph "CFG forandroidx.cardview.widget.RoundRectDrawableWithShadow.calculateHorizontalPadding(FFZ)F" {
Node_6 [shape=record,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|0x0000: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('addPaddingForCorners' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x000e  (LINE:189)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0002|0x0002: CAST (r0 I:double) = (double) (r6 I:float A[D('maxShadowSize' float)])  (LINE:190)\l0x0003: CONST  (r2 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double]) \l0x0005: SGET  (r4 I:double) =  androidx.cardview.widget.RoundRectDrawableWithShadow.COS_45 double \l0x0007: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0008: CAST (r4 I:double) = (double) (r7 I:float A[D('cornerRadius' float)]) \l0x0009: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x000b: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x000c: CAST (r0 I:float) = (float) (r0 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:float) \l}"];
Node_7 [shape=record,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|RETURN\l|0x000e: RETURN  (r6 I:float A[D('maxShadowSize' float)])  (LINE:192)\l}"];
MethodNode[shape=record,label="{public static float androidx.cardview.widget.RoundRectDrawableWithShadow.calculateHorizontalPadding((r6 I:float A[D('maxShadowSize' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('cornerRadius' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('addPaddingForCorners' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x000e \-\> B:7:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r6 'maxShadowSize' F\l  \-1 \-0x000e: r7 'cornerRadius' F\l  \-1 \-0x000e: r8 'addPaddingForCorners' Z\l}"];
MethodNode -> Node_6;Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_10;
Node_10 -> Node_7;
Node_11 -> Node_7;
}

