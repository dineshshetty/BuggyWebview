digraph "CFG forandroidx.constraintlayout.motion.widget.MotionPaths.getCenter(D[I[D[FI)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY])  (LINE:317)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r22 I:??[OBJECT, ARRAY] A[D('toUse' int[])]) \l0x0004: IGET  (r2 I:float) = (r0 I:androidx.constraintlayout.motion.widget.MotionPaths) androidx.constraintlayout.motion.widget.MotionPaths.x float \l0x0006: IGET  (r3 I:float) = (r0 I:androidx.constraintlayout.motion.widget.MotionPaths) androidx.constraintlayout.motion.widget.MotionPaths.y float  (LINE:318)\l0x0008: IGET  (r4 I:float) = (r0 I:androidx.constraintlayout.motion.widget.MotionPaths) androidx.constraintlayout.motion.widget.MotionPaths.width float  (LINE:319)\l0x000a: IGET  (r5 I:float) = (r0 I:androidx.constraintlayout.motion.widget.MotionPaths) androidx.constraintlayout.motion.widget.MotionPaths.height float  (LINE:320)\l0x000c: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:321)\l0x000d: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:322)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000f|LOOP_START\lLOOP:0: B:3:0x000f\-\>B:12:0x0023\l|0x000f: ARRAY_LENGTH  (r9 I:int) = (r1 I:??[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r8 I:??[int, byte, short, char] A[D('i' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:19:0x0026 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: AGET  (r9 I:??[long, double]) = (r23 I:??[long, double][] A[D('data' double[])]), (r8 I:??[int, short, byte, char] A[D('i' int)])  (LINE:323)\l0x0014: CAST (r9 I:float) = (float) (r9 I:double) \l0x0015: AGET  (r10 I:??[int, float, short, byte, char]) = (r1 I:??[int, float][]), (r8 I:??[int, short, byte, char] A[D('i' int)])  (LINE:325)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: SWITCH  (r10 I:??)\l case 1: goto B:11:0x0021\l case 2: goto B:10:0x001f\l case 3: goto B:9:0x001d\l case 4: goto B:8:0x001b\l default: goto B:24:0x0023 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_height' float)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:336)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0023|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|LOOP_END\lLOOP:0: B:3:0x000f\-\>B:12:0x0023\l|0x0023: ARITH  (r8 I:int) = (r8 I:int A[D('i' int)]) + (1 int)  (LINE:322)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_width' float)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:333)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0023|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001f|0x001f: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_y' float)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:330)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0023|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|0x0021: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:327)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0023|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0023|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0026|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0026|0x0026: IGET  (r8 I:androidx.constraintlayout.motion.widget.MotionController A[D('i' int)]) = (r0 I:androidx.constraintlayout.motion.widget.MotionPaths) androidx.constraintlayout.motion.widget.MotionPaths.mRelativeToController androidx.constraintlayout.motion.widget.MotionController  (LINE:340)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|0x0028: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x006a \l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|0x002a: CONST  (r10 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:341)\l0x002b: NEW_ARRAY  (r11 I:float[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x002d: NEW_ARRAY  (r10 I:float[]) = (r10 I:int A[IMMUTABLE_TYPE]) type: float[]  (LINE:342)\l0x002f: MOVE  (r12 I:??[long, double]) = (r20 I:??[long, double] A[D('p' double)])  (LINE:344)\l0x0031: INVOKE  \l  (r8 I:androidx.constraintlayout.motion.widget.MotionController)\l  (r12 I:double)\l  (r11 I:float[] A[D('pos' float[])])\l  (r10 I:float[] A[D('vel' float[])])\l type: VIRTUAL call: androidx.constraintlayout.motion.widget.MotionController.getCenter(double, float[], float[]):void A[MD:(double, float[], float[]):void (m)]\l0x0034: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:345)\l0x0035: AGET  (r8 I:??[int, float, short, byte, char]) = (r11 I:??[int, float][] A[D('pos' float[])]), (r8 I:??[int, short, byte, char]) \l0x0037: CONST  (r14 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:346)\l0x0038: AGET  (r14 I:??[int, float, short, byte, char]) = (r11 I:??[int, float][] A[D('pos' float[])]), (r14 I:??[int, short, byte, char]) \l0x003a: MOVE  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)])  (LINE:347)\l0x003b: MOVE  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_y' float)])  (LINE:348)\l0x003d: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('vel' float[])])  (LINE:350)\l0x003f: CAST (r9 I:double) = (double) (r8 I:float A[D('rx' float)]) \l0x0040: CAST (r0 I:double) = (double) (r15 I:float A[D('radius' float)]) \l0x0041: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)]) \l0x0043: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)]) = (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('angle' float)]) \l0x0045: MOVE  (r16 I:??[OBJECT, ARRAY] A[D('angle' float)]) = (r11 I:??[OBJECT, ARRAY] A[D('pos' float[])]) \l0x0047: CAST (r11 I:double A[D('pos' float[])]) = (double) (r2 I:float A[D('angle' float)]) \l0x0048: INVOKE  (r11 I:double) = (r11 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)]\l0x004c: ARITH  (r0 I:double) = (r0 I:double) * (r11 I:double) \l0x004e: ARITH  (r9 I:double) = (r9 I:double) + (r0 I:double) \l0x004f: CONST  (r0 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l0x0051: ARITH  (r1 I:float) = (r4 I:float A[D('v_width' float)]) \/ (r0 I:float) \l0x0053: CAST (r11 I:double) = (double) (r1 I:float) \l0x0054: ARITH  (r9 I:double) = (r9 I:double) \- (r11 I:double) \l0x0055: CAST (r1 I:float) = (float) (r9 I:double) \l0x0056: CAST (r9 I:double) = (double) (r14 I:float A[D('ry' float)])  (LINE:351)\l0x0057: CAST (r11 I:double) = (double) (r15 I:float A[D('radius' float)]) \l0x0058: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)]) \l0x0059: CAST (r0 I:double) = (double) (r2 I:float A[D('angle' float)]) \l0x005a: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)]\l0x005e: ARITH  (r11 I:double) = (r11 I:double) * (r0 I:double) \l0x0060: ARITH  (r9 I:double) = (r9 I:double) \- (r11 I:double) \l0x0061: CONST  (r0 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l0x0063: ARITH  (r1 I:float) = (r5 I:float A[D('v_height' float)]) \/ (r0 I:float) \l0x0065: CAST (r11 I:double) = (double) (r1 I:float) \l0x0066: ARITH  (r9 I:double) = (r9 I:double) \- (r11 I:double) \l0x0067: CAST (r3 I:float A[D('v_y' float)]) = (float) (r9 I:double) \l0x0068: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('angle' float)]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x006e|0x006e: ARITH  (r1 I:float) = (r4 I:float A[D('v_width' float)]) \/ (r0 I:float)  (LINE:354)\l0x0070: ARITH  (r1 I:float) = (r1 I:float) + (r2 I:float A[D('v_x' float)]) \l0x0071: ARITH  (r1 I:float) = (r1 I:float) + (r6 I:float A[D('translationX' float)]) \l0x0072: APUT  \l  (r24 I:??[int, float][] A[D('point' float[])])\l  (r25 I:??[int, short, byte, char] A[D('offset' int)])\l  (r1 I:??[int, float, short, byte, char])\l \l0x0074: ARITH  (r1 I:int) = (r25 I:int A[D('offset' int)]) + (1 int)  (LINE:355)\l0x0076: ARITH  (r0 I:float) = (r5 I:float A[D('v_height' float)]) \/ (r0 I:float) \l0x0078: ARITH  (r0 I:float) = (r0 I:float) + (r3 I:float A[D('v_y' float)]) \l0x0079: ARITH  (r0 I:float) = (r0 I:float) + (r7 I:float A[D('translationY' float)]) \l0x007a: APUT  \l  (r24 I:??[int, float][] A[D('point' float[])])\l  (r1 I:??[int, short, byte, char])\l  (r0 I:??[int, float, short, byte, char])\l \l}"];
Node_18 [shape=record,label="{18\:\ 0x007c|RETURN\l|0x007c: RETURN    (LINE:356)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x006a|0x006a: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)])  (LINE:340)\l0x006c: CONST  (r0 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{void androidx.constraintlayout.motion.widget.MotionPaths.getCenter((r19 'this' I:androidx.constraintlayout.motion.widget.MotionPaths A[IMMUTABLE_TYPE, THIS]), (r20 I:double A[D('p' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int[] A[D('toUse' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:double[] A[D('data' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:float[] A[D('point' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0023 \-\> B:3:0x000f, CROSS_EDGE: B:9:0x001d \-\> B:12:0x0023, CROSS_EDGE: B:10:0x001f \-\> B:12:0x0023, CROSS_EDGE: B:11:0x0021 \-\> B:12:0x0023, CROSS_EDGE: B:6:0x0017 \-\> B:12:0x0023, CROSS_EDGE: B:16:0x006a \-\> B:17:0x006e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0023: r9 'value' F\l  0x000f\-0x0026: r8 'i' I\l  0x002f\-0x003f: r10 'vel' [F\l  0x002d\-0x0047: r11 'pos' [F\l  0x0006\-0x0047: r2 'v_x' F\l  0x003d\-0x0047: r16 'angle' F\l  0x0047\-0x0056: r18 'v_x' F\l  0x0056\-0x0059: r1 'v_x' F\l  0x0037\-0x006a: r8 'rx' F\l  0x0059\-0x006a: r13 'v_x' F\l  0x003a\-0x006a: r14 'ry' F\l  0x003b\-0x006a: r15 'radius' F\l  0x0047\-0x006a: r16 'pos' [F\l  0x003f\-0x006a: r17 'vel' [F\l  0x0047\-0x006a: r2 'angle' F\l  0x006a\-0x0089: r2 'v_x' F\l  0x0008\-0x0089: r3 'v_y' F\l  0x000a\-0x0089: r4 'v_width' F\l  0x000c\-0x0089: r5 'v_height' F\l  0x000d\-0x0089: r6 'translationX' F\l  0x000e\-0x0089: r7 'translationY' F\l  \-1 \-0x0089: r20 'p' D\l  \-1 \-0x0089: r22 'toUse' [I\l  \-1 \-0x0089: r23 'data' [D\l  \-1 \-0x0089: r24 'point' [F\l  \-1 \-0x0089: r25 'offset' I\lMETHOD_PARAMETERS: [p, toUse, data, point, offset]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9;
Node_6 -> Node_10;
Node_6 -> Node_11;
Node_6 -> Node_24;
Node_8 -> Node_21;
Node_21 -> Node_12;
Node_12 -> Node_3;
Node_9 -> Node_22;
Node_22 -> Node_12;
Node_10 -> Node_23;
Node_23 -> Node_12;
Node_11 -> Node_20;
Node_20 -> Node_12;
Node_24 -> Node_12;
Node_19 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_16 -> Node_17;
}

