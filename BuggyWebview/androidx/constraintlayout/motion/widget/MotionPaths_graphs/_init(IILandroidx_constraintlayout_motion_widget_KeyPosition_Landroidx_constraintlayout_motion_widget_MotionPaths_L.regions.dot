digraph "CFG forandroidx.constraintlayout.motion.widget.MotionPaths.\<init\>(IILandroidx\/constraintlayout\/motion\/widget\/KeyPosition;Landroidx\/constraintlayout\/motion\/widget\/MotionPaths;Landroidx\/constraintlayout\/motion\/widget\/MotionPaths;)V" {
subgraph cluster_Region_984650695 {
label = "R(2:1|(2:(2:3|4)|(1:7)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|r3.mDrawPath = 0\lr3.mPathRotate = Float.NaN\lr3.mProgress = Float.NaN\lr3.mPathMotionArc = androidx.constraintlayout.motion.widget.Key.UNSET\lr3.mAnimateRelativeTo = androidx.constraintlayout.motion.widget.Key.UNSET\lr3.mRelativeAngle = Float.NaN\lr3.mRelativeToController = null\lr3.attributes = new java.util.LinkedHashMap\<\>()\lr3.mMode = 0\lr3.mTempValue = new double[18]\lr3.mTempDelta = new double[18]\l}"];
subgraph cluster_Region_271200495 {
label = "R(2:(2:3|4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_339611070 {
label = "IF [B:3:0x0030] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0030|if (r7.mAnimateRelativeTo != androidx.constraintlayout.motion.widget.Key.UNSET) goto L3\l}"];
subgraph cluster_Region_1501518822 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0032|initPolar(r4, r5, r6, r7, r8)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1743766949 {
label = "R(1:7)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_646130943 {
label = "Switch: 3
 case 1 -> R(2:12|13)
 case 2 -> R(2:10|11)
 case default -> R(2:8|9)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0038|switch(r6.mPositionType) \{\l    case 1: goto L12;\l    case 2: goto L10;\l    default: goto L8;\l\}\l}"];
subgraph cluster_Region_1110742636 {
label = "R(2:12|13)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0043|initPath(r6, r7, r8)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0046|RETURN\l|return\l}"];
}
subgraph cluster_Region_1639404967 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x003f|initScreen(r4, r5, r6, r7, r8)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|RETURN\l|return\l}"];
}
subgraph cluster_Region_2020374233 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x003b|initCartesian(r6, r7, r8)\l}"];
Node_9 [shape=record,label="{9\:\ 0x003e|RETURN\l|return\l}"];
}
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0036}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.motion.widget.MotionPaths.\<init\>((r3v0 'this' androidx.constraintlayout.motion.widget.MotionPaths A[IMMUTABLE_TYPE, THIS]), (r4v0 'parentWidth' int A[D('parentWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'parentHeight' int A[D('parentHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'c' androidx.constraintlayout.motion.widget.KeyPosition A[D('c' androidx.constraintlayout.motion.widget.KeyPosition), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'startTimePoint' androidx.constraintlayout.motion.widget.MotionPaths A[D('startTimePoint' androidx.constraintlayout.motion.widget.MotionPaths), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'endTimePoint' androidx.constraintlayout.motion.widget.MotionPaths A[D('endTimePoint' androidx.constraintlayout.motion.widget.MotionPaths), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x003e \-\> B:1:?, CROSS_EDGE: B:11:0x0042 \-\> B:1:?, CROSS_EDGE: B:13:0x0046 \-\> B:1:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [parentWidth, parentHeight, c, startTimePoint, endTimePoint]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_7 -> Node_8;
Node_7 -> Node_10;
Node_7 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_0 -> Node_2;
Node_6 -> Node_7;
}

