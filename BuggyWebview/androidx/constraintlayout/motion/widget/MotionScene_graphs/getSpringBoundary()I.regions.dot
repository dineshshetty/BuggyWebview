digraph "CFG forandroidx.constraintlayout.motion.widget.MotionScene.getSpringBoundary()I" {
subgraph cluster_Region_1667055537 {
label = "R(2:1|(2:(1:6)|(1:8)))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|androidx.constraintlayout.motion.widget.MotionScene$Transition androidx.constraintlayout.motion.widget.MotionScene.Transition r0 = r1.mCurrentTransition\l}"];
subgraph cluster_Region_1788781331 {
label = "R(2:(1:6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_374030259 {
label = "IF [B:14:0x0002, B:16:0x0008] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0002|if (r0 != null) goto L3\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|ADDED_TO_REGION\l|if (r0.mTouchResponse != null) goto L5\l}"];
subgraph cluster_Region_1601969415 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0014|RETURN\l|return r1.mCurrentTransition.mTouchResponse.getSpringBoundary()\l}"];
}
}
subgraph cluster_Region_1571304248 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0004}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000a}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0015|RETURN\lORIG_RETURN\lADDED_TO_REGION\l|return 0\l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.motion.widget.MotionScene.getSpringBoundary((r1v0 'this' androidx.constraintlayout.motion.widget.MotionScene A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0016 \-\> B:12:?, CROSS_EDGE: B:14:0x0002 \-\> B:19:0x0015\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_19[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_21[style=dashed];
Node_18 -> Node_12;
Node_21 -> Node_12;
Node_11 -> Node_13;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_19 -> Node_12;
}

