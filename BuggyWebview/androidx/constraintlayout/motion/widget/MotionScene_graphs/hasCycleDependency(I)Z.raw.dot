digraph "CFG forandroidx.constraintlayout.motion.widget.MotionScene.hasCycleDependency(I)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:android.util.SparseIntArray) = (r4 I:androidx.constraintlayout.motion.widget.MotionScene) androidx.constraintlayout.motion.widget.MotionScene.mDeriveMap android.util.SparseIntArray  (LINE:1808)\l0x0002: INVOKE  (r0 I:int) = (r0 I:android.util.SparseIntArray), (r5 I:int A[D('key' int)]) type: VIRTUAL call: android.util.SparseIntArray.get(int):int A[MD:(int):int (c)]\l0x0006: IGET  (r1 I:android.util.SparseIntArray) = (r4 I:androidx.constraintlayout.motion.widget.MotionScene) androidx.constraintlayout.motion.widget.MotionScene.mDeriveMap android.util.SparseIntArray  (LINE:1809)\l0x0008: INVOKE  (r1 I:int) = (r1 I:android.util.SparseIntArray) type: VIRTUAL call: android.util.SparseIntArray.size():int A[MD:():int (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|LOOP_START\lLOOP:0: B:19:0x000c\-\>B:26:0x0017\l|0x000c: IF  (r0 I:??[int, byte, short, char] A[D('derived' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:30:0x001f  (LINE:1810)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1811)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('derived' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('key' int)])  \-\> B:23:0x0012 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: ARITH  (r3 I:int) = (r1 I:int A[D('len' int)]) + (\-1 int)  (LINE:1814)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|0x0014: IF  (r1 I:??[int, byte, short, char] A[D('len' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:26:0x0017 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|LOOP_END\lLOOP:0: B:19:0x000c\-\>B:26:0x0017\l|0x0017: IGET  (r1 I:android.util.SparseIntArray) = (r4 I:androidx.constraintlayout.motion.widget.MotionScene) androidx.constraintlayout.motion.widget.MotionScene.mDeriveMap android.util.SparseIntArray  (LINE:1817)\l0x0019: INVOKE  (r0 I:int A[D('derived' int)]) = (r1 I:android.util.SparseIntArray), (r0 I:int A[D('derived' int)]) type: VIRTUAL call: android.util.SparseIntArray.get(int):int A[MD:(int):int (c)]\l0x001d: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('len' int)]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|RETURN\l|0x0016: RETURN  (r2 I:boolean)  (LINE:1815)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0011|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|RETURN\l|0x0011: RETURN  (r2 I:boolean)  (LINE:1812)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|RETURN\l|0x001f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1819)\l0x0020: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean androidx.constraintlayout.motion.widget.MotionScene.hasCycleDependency((r4 'this' I:androidx.constraintlayout.motion.widget.MotionScene A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('key' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0016 \-\> B:17:?, BACK_EDGE: B:26:0x0017 \-\> B:19:0x000c, CROSS_EDGE: B:28:0x0020 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0014: r1 'len' I\l  0x0014\-0x001f: r3 'len' I\l  0x0006\-0x0020: r0 'derived' I\l  0x001f\-0x0020: r1 'len' I\l  \-1 \-0x0020: r5 'key' I\lMETHOD_PARAMETERS: [key]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_30;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_31[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_29[style=dashed];
Node_26 -> Node_19;
Node_29 -> Node_25;
Node_25 -> Node_17;
Node_31 -> Node_22;
Node_22 -> Node_17;
Node_30 -> Node_27;
Node_27 -> Node_17;
}

