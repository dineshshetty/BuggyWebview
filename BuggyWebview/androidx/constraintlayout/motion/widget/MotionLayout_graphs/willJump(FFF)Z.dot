digraph "CFG forandroidx.constraintlayout.motion.widget.MotionLayout.willJump(FFF)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000}"];
Node_19 [shape=record,label="{19\:\ 0x0007|if ((r7 \> 0.0f ? 1 : (r7 == 0.0f ? 0 : \-1)) \<= 0) goto L8\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|float r3 = r7 \/ r9\lfloat r4 = (r7 * r3) \- (((r9 * r3) * r3) \/ 2.0f)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0019|if (((r8 + r4) \> 1.0f ? 1 : ((r8 + r4) == 1.0f ? 0 : \-1)) \<= 0) goto L5\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|RETURN\lORIG_RETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|float r4 = \-r7\lfloat r4 = r4 \/ r9\lfloat r5 = (r7 * r4) + (((r9 * r4) * r4) \/ 2.0f)\l}"];
Node_26 [shape=record,label="{26\:\ 0x002c|if (((r8 + r5) \> 0.0f ? 1 : ((r8 + r5) == 0.0f ? 0 : \-1)) \>= 0) goto L10\l}"];
Node_28 [shape=record,label="{28\:\ 0x002f|RETURN\lORIG_RETURN\l|return false\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{private static boolean androidx.constraintlayout.motion.widget.MotionLayout.willJump((r7v0 'velocity' float A[D('velocity' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'position' float A[D('position' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'maxAcceleration' float A[D('maxAcceleration' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0019 \-\> B:24:0x001d, CROSS_EDGE: B:29:0x0030 \-\> B:17:?, CROSS_EDGE: B:26:0x002c \-\> B:29:0x0030\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [velocity, position, maxAcceleration]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_23;
Node_21 -> Node_30[style=dashed];
Node_23 -> Node_17;
Node_30 -> Node_17;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_31[style=dashed];
Node_28 -> Node_17;
Node_31 -> Node_17;
}

