digraph "CFG forandroidx.constraintlayout.motion.widget.MotionLayout.cloneConstraintSet(I)Landroidx\/constraintlayout\/widget\/ConstraintSet;" {
subgraph cluster_Region_1190403625 {
label = "R(2:1|(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|androidx.constraintlayout.motion.widget.MotionScene androidx.constraintlayout.motion.widget.MotionScene r0 = r2.mScene\l}"];
subgraph cluster_Region_428616967 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_824599393 {
label = "IF [B:11:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_958633520 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_466560995 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0006|androidx.constraintlayout.widget.ConstraintSet androidx.constraintlayout.widget.ConstraintSet r0 = r0.getConstraintSet(r3)\landroidx.constraintlayout.widget.ConstraintSet androidx.constraintlayout.widget.ConstraintSet r1 = new androidx.constraintlayout.widget.ConstraintSet()\lr1.clone(r0)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|RETURN\l|return r1\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.constraintlayout.widget.ConstraintSet androidx.constraintlayout.motion.widget.MotionLayout.cloneConstraintSet((r2v0 'this' androidx.constraintlayout.motion.widget.MotionLayout A[IMMUTABLE_TYPE, THIS]), (r3v0 'id' int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0012 \-\> B:9:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [id]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
}

