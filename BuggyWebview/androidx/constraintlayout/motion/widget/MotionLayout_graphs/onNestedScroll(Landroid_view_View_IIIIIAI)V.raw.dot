digraph "CFG forandroidx.constraintlayout.motion.widget.MotionLayout.onNestedScroll(Landroid\/view\/View;IIIII[I)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r3 I:androidx.constraintlayout.motion.widget.MotionLayout) androidx.constraintlayout.motion.widget.MotionLayout.mUndergoingMotion boolean  (LINE:3003)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0009 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dxConsumed' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0009 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dyConsumed' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0014 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0014|0x0014: IPUT  (r1 I:boolean), (r3 I:androidx.constraintlayout.motion.widget.MotionLayout) androidx.constraintlayout.motion.widget.MotionLayout.mUndergoingMotion boolean  (LINE:3007)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0016|RETURN\l|0x0016: RETURN    (LINE:3008)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|0x0009: AGET  (r0 I:??[int, float, short, byte, char]) = (r10 I:??[int, float][] A[D('consumed' int[])]), (r1 I:??[int, short, byte, char])  (LINE:3004)\l0x000b: ARITH  (r0 I:int) = (r0 I:int) + (r7 I:int A[D('dxUnconsumed' int)]) \l0x000c: APUT  \l  (r10 I:??[int, float][] A[D('consumed' int[])])\l  (r1 I:??[int, short, byte, char])\l  (r0 I:??[int, float, short, byte, char])\l \l0x000e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:3005)\l0x000f: AGET  (r2 I:??[int, float, short, byte, char]) = (r10 I:??[int, float][] A[D('consumed' int[])]), (r0 I:??[int, short, byte, char]) \l0x0011: ARITH  (r2 I:int) = (r2 I:int) + (r8 I:int A[D('dyUnconsumed' int)]) \l0x0012: APUT  \l  (r10 I:??[int, float][] A[D('consumed' int[])])\l  (r0 I:??[int, short, byte, char])\l  (r2 I:??[int, float, short, byte, char])\l \l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.motion.widget.MotionLayout.onNestedScroll((r3 'this' I:androidx.constraintlayout.motion.widget.MotionLayout A[IMMUTABLE_TYPE, THIS]), (r4 I:android.view.View A[D('target' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('dxConsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('dyConsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('dxUnconsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('dyUnconsumed' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int[] A[D('consumed' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0007 \-\> B:16:0x0014, CROSS_EDGE: B:13:0x0005 \-\> B:15:0x0009, CROSS_EDGE: B:12:0x0003 \-\> B:15:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0016: r4 'target' Landroid\/view\/View;\l  \-1 \-0x0016: r5 'dxConsumed' I\l  \-1 \-0x0016: r6 'dyConsumed' I\l  \-1 \-0x0016: r7 'dxUnconsumed' I\l  \-1 \-0x0016: r8 'dyUnconsumed' I\l  \-1 \-0x0016: r9 'type' I\l  \-1 \-0x0016: r10 'consumed' [I\lMETHOD_PARAMETERS: [target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, type, consumed]\lMETHOD_OVERRIDE: [androidx.core.view.NestedScrollingParent3.onNestedScroll(android.view.View, int, int, int, int, int, int[]):void]\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_15 -> Node_16;
}

