digraph "CFG forandroidx.constraintlayout.motion.widget.MotionLayout.callTransformedTouchEvent(Landroid\/view\/View;Landroid\/view\/MotionEvent;FF)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|android.graphics.Matrix r0 = r5.getMatrix()\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|if (r0.isIdentity() == false) goto L6\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|r6.offsetLocation(r7, r8)\lboolean r1 = r5.onTouchEvent(r6)\lr6.offsetLocation(\-r7, \-r8)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|RETURN\l|return r1\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|android.view.MotionEvent r1 = android.view.MotionEvent.obtain(r6)\lr1.offsetLocation(r7, r8)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0020|if (r4.mInverseMatrix != null) goto L9\l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|r4.mInverseMatrix = new android.graphics.Matrix()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0029|r0.invert(r4.mInverseMatrix)\lr1.transform(r4.mInverseMatrix)\lboolean r2 = r5.onTouchEvent(r1)\lr1.recycle()\l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|RETURN\l|return r2\l}"];
MethodNode[shape=record,label="{private boolean androidx.constraintlayout.motion.widget.MotionLayout.callTransformedTouchEvent((r4v0 'this' androidx.constraintlayout.motion.widget.MotionLayout A[IMMUTABLE_TYPE, THIS]), (r5v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'event' android.view.MotionEvent A[D('event' android.view.MotionEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'offsetX' float A[D('offsetX' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'offsetY' float A[D('offsetY' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x003a \-\> B:12:?, CROSS_EDGE: B:18:0x0020 \-\> B:20:0x0029\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [view, event, offsetX, offsetY]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

