digraph "CFG forandroidx.constraintlayout.motion.widget.MotionLayout.scheduleTransitionTo(I)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0005|if (getCurrentState() != (\-1)) goto L6\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|transitionToState(r4)\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|int[] r0 = r3.mScheduledTransitionTo\l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|if (r0 != null) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|r3.mScheduledTransitionTo = new int[4]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0023|int[] r0 = r3.mScheduledTransitionTo\lint r1 = r3.mScheduledTransitions\lr3.mScheduledTransitions = r1 + 1\lr0[r1] = r4\l}"];
Node_26 [shape=record,label="{26\:\ 0x002d|RETURN\lORIG_RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015}"];
Node_23 [shape=record,label="{23\:\ 0x0018|if (r0.length \> r3.mScheduledTransitions) goto L9\l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|r3.mScheduledTransitionTo = java.util.Arrays.copyOf(r0, r0.length * 2)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.motion.widget.MotionLayout.scheduleTransitionTo((r3v0 'this' androidx.constraintlayout.motion.widget.MotionLayout A[IMMUTABLE_TYPE, THIS]), (r4v0 'id' int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0023 \-\> B:26:0x002d, CROSS_EDGE: B:24:0x001a \-\> B:25:0x0023, CROSS_EDGE: B:23:0x0018 \-\> B:25:0x0023\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [id]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_27;
Node_27 -> Node_15;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_15;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
}

