digraph "CFG forandroidx.constraintlayout.motion.widget.MotionLayout.applyViewTransition(ILandroidx\/constraintlayout\/motion\/widget\/MotionController;)Z" {
subgraph cluster_Region_1407844690 {
label = "R(2:1|(2:(1:4)|(1:6)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|androidx.constraintlayout.motion.widget.MotionScene androidx.constraintlayout.motion.widget.MotionScene r0 = r1.mScene\l}"];
subgraph cluster_Region_474436395 {
label = "R(2:(1:4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1854649007 {
label = "IF [B:11:0x0002] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1767076587 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|return r0.applyViewTransition(r2, r3)\l}"];
}
}
subgraph cluster_Region_1116420951 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0009|RETURN\l|return false\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.motion.widget.MotionLayout.applyViewTransition((r1v0 'this' androidx.constraintlayout.motion.widget.MotionLayout A[IMMUTABLE_TYPE, THIS]), (r2v0 'viewTransitionId' int A[D('viewTransitionId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'motionController' androidx.constraintlayout.motion.widget.MotionController A[D('motionController' androidx.constraintlayout.motion.widget.MotionController), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000a \-\> B:9:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [viewTransitionId, motionController]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_14 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
}

