digraph "CFG forandroidx.constraintlayout.motion.widget.ViewTransitionController.animate()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.ArrayList\<androidx.constraintlayout.motion.widget.ViewTransition$Animate\> r0 = r2.animations\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|java.util.Iterator r0 = r0.iterator()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|LOOP_START\lLOOP:0: B:6:0x0009\-\>B:8:0x000f\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|if (r0.hasNext() == false) goto L9\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|LOOP_END\lLOOP:0: B:6:0x0009\-\>B:8:0x000f\l|androidx.constraintlayout.motion.widget.ViewTransition$Animate r1 = r0.next()\lr1.mutate()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|r2.animations.removeAll(r2.removeList)\lr2.removeList.clear()\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|if (r2.animations.isEmpty() == false) goto L14\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|r2.animations = null\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|RETURN\lORIG_RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.constraintlayout.motion.widget.ViewTransitionController.animate((r2v0 'this' androidx.constraintlayout.motion.widget.ViewTransitionController A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x000f \-\> B:6:0x0009, CROSS_EDGE: B:12:0x0030 \-\> B:1:?, CROSS_EDGE: B:10:0x002b \-\> B:12:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_6;
Node_13 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_14 -> Node_1;
}

