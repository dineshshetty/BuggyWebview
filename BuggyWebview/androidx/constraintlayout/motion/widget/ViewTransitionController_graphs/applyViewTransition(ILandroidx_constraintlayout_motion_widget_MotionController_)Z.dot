digraph "CFG forandroidx.constraintlayout.motion.widget.ViewTransitionController.applyViewTransition(ILandroidx\/constraintlayout\/motion\/widget\/MotionController;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.util.Iterator r0 = r3.viewTransitions.iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|LOOP_START\lLOOP:0: B:3:0x0006\-\>B:6:0x0016\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|if (r0.hasNext() == false) goto L10\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|androidx.constraintlayout.motion.widget.ViewTransition r1 = r0.next()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|LOOP_END\lLOOP:0: B:3:0x0006\-\>B:6:0x0016\l|if (r1.getId() != r4) goto L2\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|r1.mKeyFrames.addAllFrames(r5)\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{boolean androidx.constraintlayout.motion.widget.ViewTransitionController.applyViewTransition((r3v0 'this' androidx.constraintlayout.motion.widget.ViewTransitionController A[IMMUTABLE_TYPE, THIS]), (r4v0 'viewTransitionId' int A[D('viewTransitionId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'motionController' androidx.constraintlayout.motion.widget.MotionController A[D('motionController' androidx.constraintlayout.motion.widget.MotionController), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:6:0x0016 \-\> B:3:0x0006, CROSS_EDGE: B:11:0x0021 \-\> B:1:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [viewTransitionId, motionController]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_13;
Node_5 -> Node_6;
Node_6 -> Node_3;
Node_6 -> Node_12[style=dashed];
Node_12 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_13 -> Node_10;
Node_10 -> Node_1;
}

