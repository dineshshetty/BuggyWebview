digraph "CFG forandroidx.constraintlayout.motion.widget.Debug.printStack(Ljava\/lang\/String;I)V" {
subgraph cluster_Region_2014424275 {
label = "R(2:1|(1:3))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|java.lang.StackTraceElement[] java.lang.StackTraceElement[] r0 = new java.lang.Throwable().getStackTrace()\ljava.lang.String java.lang.String r1 = \" \"\lint int r8 = java.lang.Math.min(r8, r0.length \- 1)\lint r2 = 1\l}"];
subgraph cluster_LoopRegion_655630268 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0013|LOOP_START\lLOOP:0: B:10:0x0013\-\>B:11:0x0015\lPHI: r1 r2 \l  PHI: (r1v1 's' java.lang.String) = (r1v0 's' java.lang.String), (r1v2 's' java.lang.String) binds: [B:9:0x0000, B:11:0x0015] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v3 'i' int) = (r2v2 'i' int), (r2v4 'i' int) binds: [B:9:0x0000, B:11:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \<= r8) goto L3\l}"];
subgraph cluster_Region_596949360 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0015|LOOP_END\lLOOP:0: B:10:0x0013\-\>B:11:0x0015\l|java.lang.StackTraceElement r3 = r0[r2]\ljava.lang.String java.lang.String r4 = \".(\" + r0[r2].getFileName() + \":\" + r0[r2].getLineNumber() + \") \"\ljava.lang.String r1 = r1 + \" \"\ljava.lang.System.out.println(r7 + r1 + r4 + r1)\lr2++\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x006f|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x006f}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static void androidx.constraintlayout.motion.widget.Debug.printStack((r7v0 'msg' java.lang.String A[D('msg' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0015 \-\> B:10:0x0013\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [msg, n]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_7 -> Node_9;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

