digraph "CFG forandroidx.constraintlayout.motion.widget.TouchResponse.getProgressDirection(FF)F" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|float r0 = r7.mMotionLayout.getProgress()\lr7.mMotionLayout.getAnchorDpDt(r7.mTouchAnchorId, r0, r7.mTouchAnchorX, r7.mTouchAnchorY, r7.mAnchorDpDt)\lfloat r1 = r7.mTouchDirectionX\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|if ((r1 \> 0.0f ? 1 : (r1 == 0.0f ? 0 : \-1)) == 0) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|float[] r4 = r7.mAnchorDpDt\l}"];
Node_5 [shape=record,label="{5\:\ 0x0025|if ((r4[0] \> 0.0f ? 1 : (r4[0] == 0.0f ? 0 : \-1)) != 0) goto L6\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|r4[0] = 1.0E\-7f\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|float r1 = (r1 * r8) \/ r4[0]\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|float[] r1 = r7.mAnchorDpDt\l}"];
Node_9 [shape=record,label="{9\:\ 0x0036|if ((r1[1] \> 0.0f ? 1 : (r1[1] == 0.0f ? 0 : \-1)) != 0) goto L12\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|r1[1] = 1.0E\-7f\l}"];
Node_11 [shape=record,label="{11\:\ 0x003a|float r1 = (r7.mTouchDirectionY * r9) \/ r1[1]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0042|RETURN\lORIG_RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{float androidx.constraintlayout.motion.widget.TouchResponse.getProgressDirection((r7v0 'this' androidx.constraintlayout.motion.widget.TouchResponse A[IMMUTABLE_TYPE, THIS]), (r8v0 'dx' float A[D('dx' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'dy' float A[D('dy' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0025 \-\> B:7:0x0029, CROSS_EDGE: B:11:0x003a \-\> B:12:0x0042, CROSS_EDGE: B:9:0x0036 \-\> B:11:0x003a\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [dx, dy]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_13;
Node_13 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

