digraph "CFG forandroidx.constraintlayout.motion.utils.ViewSpline.CustomSet.setup(I)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:android.util.SparseArray\<androidx.constraintlayout.widget.ConstraintAttribute\>) = (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet) androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mConstraintAttributeList android.util.SparseArray  (LINE:191)\l0x0002: INVOKE  (r0 I:int) = (r0 I:android.util.SparseArray) type: VIRTUAL call: android.util.SparseArray.size():int A[MD:():int (c)]\l0x0006: IGET  (r1 I:android.util.SparseArray\<androidx.constraintlayout.widget.ConstraintAttribute\>) = (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet) androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mConstraintAttributeList android.util.SparseArray  (LINE:192)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INVOKE  (r1 I:java.lang.Object) = (r1 I:android.util.SparseArray), (r2 I:int) type: VIRTUAL call: android.util.SparseArray.valueAt(int):java.lang.Object A[MD:(int):E (c)]\l0x000d: CHECK_CAST (r1 I:androidx.constraintlayout.widget.ConstraintAttribute) = (androidx.constraintlayout.widget.ConstraintAttribute) (r1 I:??[OBJECT, ARRAY]) \l0x000f: INVOKE  (r1 I:int) = (r1 I:androidx.constraintlayout.widget.ConstraintAttribute) type: VIRTUAL call: androidx.constraintlayout.widget.ConstraintAttribute.numberOfInterpolatedValues():int A[MD:():int (m)]\l0x0013: NEW_ARRAY  (r3 I:double[]) = (r0 I:int A[D('size' int), IMMUTABLE_TYPE]) type: double[]  (LINE:193)\l0x0015: NEW_ARRAY  (r4 I:float[]) = (r1 I:int A[D('dimensionality' int), IMMUTABLE_TYPE]) type: float[]  (LINE:194)\l0x0017: IPUT  (r4 I:float[]), (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet) androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mTempValues float[] \l0x0019: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:195)\l0x001a: NEW_ARRAY  (r4 I:int[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x001c: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001d: APUT  \l  (r4 I:??[int, float][])\l  (r5 I:??[int, short, byte, char])\l  (r1 I:??[int, float, short, byte, char] A[D('dimensionality' int)])\l \l0x001f: APUT  (r4 I:??[int, float][]), (r2 I:??[int, short, byte, char]), (r0 I:??[int, float, short, byte, char] A[D('size' int)]) \l0x0021: CONST_CLASS  (r2 I:java.lang.Class\<double\>) =  double.class \l0x0023: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.Class), (r4 I:int[]) type: STATIC call: java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object A[MD:(java.lang.Class\<?\>, int[]):java.lang.Object VARARG throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException (c)]\l0x0027: CHECK_CAST (r2 I:double[][]) = (double[][]) (r2 I:??[OBJECT, ARRAY]) \l0x0029: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:196)\l}"];
Node_16 [shape=record,label="{16\:\ 0x002a|LOOP_START\lLOOP:0: B:16:0x002a\-\>B:21:0x0059\l|0x002a: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:24:0x005c \l}"];
Node_17 [shape=record,label="{17\:\ 0x002c|0x002c: IGET  (r5 I:android.util.SparseArray\<androidx.constraintlayout.widget.ConstraintAttribute\>) = (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet) androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mConstraintAttributeList android.util.SparseArray  (LINE:198)\l0x002e: INVOKE  (r5 I:int) = (r5 I:android.util.SparseArray), (r4 I:int A[D('i' int)]) type: VIRTUAL call: android.util.SparseArray.keyAt(int):int A[MD:(int):int (c)]\l0x0032: IGET  (r6 I:android.util.SparseArray\<androidx.constraintlayout.widget.ConstraintAttribute\>) = (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet) androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mConstraintAttributeList android.util.SparseArray  (LINE:199)\l0x0034: INVOKE  (r6 I:java.lang.Object) = (r6 I:android.util.SparseArray), (r4 I:int A[D('i' int)]) type: VIRTUAL call: android.util.SparseArray.valueAt(int):java.lang.Object A[MD:(int):E (c)]\l0x0038: CHECK_CAST (r6 I:androidx.constraintlayout.widget.ConstraintAttribute) = (androidx.constraintlayout.widget.ConstraintAttribute) (r6 I:??[OBJECT, ARRAY]) \l0x003a: CAST (r7 I:double) = (double) (r5 I:int A[D('key' int)])  (LINE:201)\l0x003b: CONST  (r9 I:??[long, double]) = (4576918229304087675(0x3f847ae147ae147b, double:0.01) ??[long, double]) \l0x0040: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l0x0042: APUT  \l  (r3 I:??[long, double][] A[D('time' double[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l  (r7 I:??[long, double])\l \l0x0044: IGET  (r7 I:float[]) = (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet) androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mTempValues float[]  (LINE:202)\l0x0046: INVOKE  \l  (r6 I:androidx.constraintlayout.widget.ConstraintAttribute A[D('ca' androidx.constraintlayout.widget.ConstraintAttribute)])\l  (r7 I:float[])\l type: VIRTUAL call: androidx.constraintlayout.widget.ConstraintAttribute.getValuesToInterpolate(float[]):void A[MD:(float[]):void (m)]\l0x0049: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l}"];
Node_18 [shape=record,label="{18\:\ 0x004a|LOOP_START\lLOOP:1: B:18:0x004a\-\>B:20:0x004f\l|0x004a: IGET  (r8 I:float[]) = (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet) androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mTempValues float[] \l0x004c: ARRAY_LENGTH  (r9 I:int) = (r8 I:??[]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x004d|0x004d: IF  (r7 I:??[int, byte, short, char] A[D('k' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:25:0x0059 \l}"];
Node_20 [shape=record,label="{20\:\ 0x004f|LOOP_END\lLOOP:1: B:18:0x004a\-\>B:20:0x004f\l|0x004f: AGET  (r9 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][] A[D('values' double[][])]), (r4 I:??[int, short, byte, char] A[D('i' int)])  (LINE:204)\l0x0051: AGET  (r8 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r7 I:??[int, short, byte, char] A[D('k' int)]) \l0x0053: CAST (r10 I:double) = (double) (r8 I:float) \l0x0054: APUT  (r9 I:??[long, double][]), (r7 I:??[int, short, byte, char] A[D('k' int)]), (r10 I:??[long, double]) \l0x0056: ARITH  (r7 I:int) = (r7 I:int A[D('k' int)]) + (1 int)  (LINE:203)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0059|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0059|LOOP_END\lLOOP:0: B:16:0x002a\-\>B:21:0x0059\l|0x0059: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:196)\l}"];
Node_24 [shape=record,label="{24\:\ 0x005c|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x005c|0x005c: INVOKE  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit) = (r13 I:int A[D('curveType' int)]), (r3 I:double[] A[D('time' double[])]), (r2 I:double[][] A[D('values' double[][])]) type: STATIC call: androidx.constraintlayout.core.motion.utils.CurveFit.get(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit A[MD:(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit (m)] (LINE:208)\l0x0060: IPUT  \l  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit)\l  (r12 I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet)\l androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.mCurveFit androidx.constraintlayout.core.motion.utils.CurveFit \l}"];
Node_23 [shape=record,label="{23\:\ 0x0062|RETURN\l|0x0062: RETURN    (LINE:209)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.motion.utils.ViewSpline.CustomSet.setup((r12 'this' I:androidx.constraintlayout.motion.utils.ViewSpline$CustomSet A[IMMUTABLE_TYPE, THIS]), (r13 I:int A[D('curveType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x004f \-\> B:18:0x004a, BACK_EDGE: B:21:0x0059 \-\> B:16:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0032\-0x0059: r5 'key' I\l  0x003a\-0x0059: r6 'ca' Landroidx\/constraintlayout\/widget\/ConstraintAttribute;\l  0x004a\-0x0059: r7 'k' I\l  0x002a\-0x005c: r4 'i' I\l  0x0006\-0x0062: r0 'size' I\l  0x0013\-0x0062: r1 'dimensionality' I\l  0x0029\-0x0062: r2 'values' [[D\l  0x0015\-0x0062: r3 'time' [D\l  \-1 \-0x0062: r13 'curveType' I\lMETHOD_PARAMETERS: [curveType]\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.SplineSet.setup(int):void]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_18;
Node_25 -> Node_21;
Node_21 -> Node_16;
Node_24 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

