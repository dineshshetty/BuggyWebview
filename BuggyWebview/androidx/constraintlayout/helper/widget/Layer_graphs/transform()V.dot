digraph "CFG forandroidx.constraintlayout.helper.widget.Layer.transform()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r18.mContainer != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007}"];
Node_6 [shape=record,label="{6\:\ 0x0009|if (r18.mViews != null) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|reCacheViews()\l}"];
Node_8 [shape=record,label="{8\:\ 0x000e|calcCenters()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|if (java.lang.Float.isNaN(r18.mGroupRotateAngle) == false) goto L22\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|r1 = 0.0d\l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|PHI: r1 \l  PHI: (r1v7 'rad' double) = (r1v6 'rad' double), (r1v15 'rad' double) binds: [B:11:0x001c, B:10:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|float r3 = (float) java.lang.Math.sin(r1)\lfloat r4 = (float) java.lang.Math.cos(r1)\lfloat r5 = r18.mScaleX\lfloat r6 = r5 * r4\lfloat r7 = r18.mScaleY\lfloat r8 = (\-r7) * r3\lfloat r5 = r5 * r3\lfloat r7 = r7 * r4\lr9 = 0\l}"];
Node_13 [shape=record,label="{13\:\ 0x003b|LOOP_START\lLOOP:0: B:13:0x003b\-\>B:18:0x0093\lPHI: r1 r9 \l  PHI: (r1v8 'rad' double) = (r1v7 'rad' double), (r1v14 'rad' double) binds: [B:12:0x0023, B:18:0x0093] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 'i' int) = (r9v0 'i' int), (r9v2 'i' int) binds: [B:12:0x0023, B:18:0x0093] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_14 [shape=record,label="{14\:\ 0x003d|if (r9 \>= r18.mCount) goto L20\l}"];
Node_15 [shape=record,label="{15\:\ 0x003f|r10 = r18.mViews[r9]\lint r11 = (r10.getLeft() + r10.getRight()) \/ 2\lint r12 = (r10.getTop() + r10.getBottom()) \/ 2\lfloat r13 = ((float) r11) \- r18.mComputedCenterX\lfloat r14 = ((float) r12) \- r18.mComputedCenterY\lr16 = r1\lfloat r15 = (((r6 * r13) + (r8 * r14)) \- r13) + r18.mShiftX\lfloat r1 = (((r5 * r13) + (r7 * r14)) \- r14) + r18.mShiftY\lr10.setTranslationX(r15)\lr10.setTranslationY(r1)\lr10.setScaleY(r18.mScaleY)\lr10.setScaleX(r18.mScaleX)\l}"];
Node_16 [shape=record,label="{16\:\ 0x008c|if (java.lang.Float.isNaN(r18.mGroupRotateAngle) != false) goto L19\l}"];
Node_17 [shape=record,label="{17\:\ 0x008e|r10.setRotation(r18.mGroupRotateAngle)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0093|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0093|LOOP_END\lLOOP:0: B:13:0x003b\-\>B:18:0x0093\l|int r9 = r9 + 1\lr1 = r16\l}"];
Node_22 [shape=record,label="{22\:\ 0x0093|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0098|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0098|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|double r1 = java.lang.Math.toRadians((double) r18.mGroupRotateAngle)\l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.helper.widget.Layer.transform((r18v0 'this' androidx.constraintlayout.helper.widget.Layer A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x0093 \-\> B:13:0x003b, CROSS_EDGE: B:16:0x008c \-\> B:18:0x0093, CROSS_EDGE: B:19:0x0098 \-\> B:1:?, CROSS_EDGE: B:11:0x001c \-\> B:12:0x0023, CROSS_EDGE: B:6:0x0009 \-\> B:8:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_21;
Node_21 -> Node_18;
Node_18 -> Node_13;
Node_22 -> Node_18;
Node_20 -> Node_19;
Node_19 -> Node_1;
Node_11 -> Node_12;
}

