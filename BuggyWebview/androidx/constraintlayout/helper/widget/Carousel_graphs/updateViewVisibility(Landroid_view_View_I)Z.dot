digraph "CFG forandroidx.constraintlayout.helper.widget.Carousel.updateViewVisibility(Landroid\/view\/View;I)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.constraintlayout.motion.widget.MotionLayout r0 = r4.mMotionLayout\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 != null) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0006|r1 = false\lint[] r0 = r0.getConstraintSetIds()\lr2 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|LOOP_START\lLOOP:0: B:7:0x000c\-\>B:9:0x000f\lPHI: r1 r2 \l  PHI: (r1v1 'needsMotionSceneRebuild' boolean) = (r1v0 'needsMotionSceneRebuild' boolean), (r1v2 'needsMotionSceneRebuild' boolean) binds: [B:6:0x0006, B:9:0x000f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v2 'i' int) binds: [B:6:0x0006, B:9:0x000f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|if (r2 \>= r0.length) goto L9\l}"];
Node_9 [shape=record,label="{9\:\ 0x000f|LOOP_END\lLOOP:0: B:7:0x000c\-\>B:9:0x000f\l|r1 = r1 \| updateViewVisibility(r0[r2], r5, r6)\lint r2 = r2 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0019|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{private boolean androidx.constraintlayout.helper.widget.Carousel.updateViewVisibility((r4v0 'this' androidx.constraintlayout.helper.widget.Carousel A[IMMUTABLE_TYPE, THIS]), (r5v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'visibility' int A[D('visibility' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x000f \-\> B:7:0x000c, CROSS_EDGE: B:10:0x0019 \-\> B:1:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [view, visibility]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_11;
Node_9 -> Node_7;
Node_11 -> Node_10;
Node_10 -> Node_1;
}

