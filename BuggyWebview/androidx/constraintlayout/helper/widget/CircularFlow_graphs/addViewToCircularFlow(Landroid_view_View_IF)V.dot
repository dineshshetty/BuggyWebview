digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.addViewToCircularFlow(Landroid\/view\/View;IF)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (containsId(r5.getId()) == false) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|addView(r5)\lr4.mCountAngle = r4.mCountAngle + 1\lfloat[] r0 = getAngles()\lr4.mAngles = r0\lr0[r4.mCountAngle + (\-1)] = r7\lr4.mCountRadius = r4.mCountRadius + 1\lint[] r0 = getRadius()\lr4.mRadius = r0\lr0[r4.mCountRadius + (\-1)] = (int) (((float) r6) * r4.myContext.getResources().getDisplayMetrics().density)\lanchorReferences()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.helper.widget.CircularFlow.addViewToCircularFlow((r4v0 'this' androidx.constraintlayout.helper.widget.CircularFlow A[IMMUTABLE_TYPE, THIS]), (r5v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'radius' int A[D('radius' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'angle' float A[D('angle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0045 \-\> B:1:?\lMETHOD_PARAMETERS: [view, radius, angle]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

