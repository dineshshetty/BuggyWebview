digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.removeAngle([FI)[F" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('angles' float[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x000e  (LINE:362)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:9:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IGET  (r0 I:int) = (r1 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mCountAngle int \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:7:0x0009 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: INVOKE  (r0 I:float[]) = (r2 I:float[] A[D('angles' float[])]), (r3 I:int A[D('index' int)]) type: STATIC call: androidx.constraintlayout.helper.widget.CircularFlow.removeElementFromArray(float[], int):float[] A[MD:(float[], int):float[] (m)] (LINE:368)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:float[]) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x000e|RETURN\l|0x000e: RETURN  (r2 I:float[] A[D('angles' float[])])  (LINE:365)\l}"];
MethodNode[shape=record,label="{private float[] androidx.constraintlayout.helper.widget.CircularFlow.removeAngle((r1 'this' I:androidx.constraintlayout.helper.widget.CircularFlow A[IMMUTABLE_TYPE, THIS]), (r2 I:float[] A[D('angles' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x000e \-\> B:1:?, CROSS_EDGE: B:3:0x0002 \-\> B:9:0x000e, CROSS_EDGE: B:2:0x0000 \-\> B:9:0x000e\lDebug Info:\l  \-1 \-0x000e: r2 'angles' [F\l  \-1 \-0x000e: r3 'index' I\lMETHOD_PARAMETERS: [angles, index]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_9[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_1;
}

