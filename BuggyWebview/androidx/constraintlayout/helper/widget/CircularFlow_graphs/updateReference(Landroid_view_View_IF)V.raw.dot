digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.updateReference(Landroid\/view\/View;IF)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow), (r5 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.isUpdatable(android.view.View):boolean A[MD:(android.view.View):boolean (m)] (LINE:299)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0021 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:300)\l0x0008: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x000b: CONST_STR  (r1 I:java.lang.String) =  \"It was not possible to update radius and angle to view with id: \" \l0x000d: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0010: INVOKE  (r1 I:int) = (r5 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: android.view.View.getId():int A[MD:():int (c)]\l0x0014: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0017: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001b: CONST_STR  (r1 I:java.lang.String) =  \"CircularFlow\" \l0x001d: INVOKE  (r1 I:java.lang.String), (r0 I:java.lang.String) type: STATIC call: android.util.Log.e(java.lang.String, java.lang.String):int A[MD:(java.lang.String, java.lang.String):int (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|RETURN\l|0x0020: RETURN    (LINE:301)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: INVOKE  (r0 I:int) = (r5 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: android.view.View.getId():int A[MD:():int (c)] (LINE:303)\l0x0025: INVOKE  (r0 I:int) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow), (r0 I:int) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.indexFromId(int):int A[MD:(int):int (m)]\l0x0029: INVOKE  (r1 I:float[]) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.getAngles():float[] A[MD:():float[] (m)] (LINE:304)\l0x002d: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x002e|0x002e: IF  (r1 I:??[int, byte, short, char]) \<= (r0 I:??[int, byte, short, char] A[D('indexView' int)])  \-\> B:9:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0030|0x0030: INVOKE  (r1 I:float[]) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.getAngles():float[] A[MD:():float[] (m)] (LINE:305)\l0x0034: IPUT  (r1 I:float[]), (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mAngles float[] \l0x0036: APUT  \l  (r1 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('indexView' int)])\l  (r7 I:??[int, float, short, byte, char] A[D('angle' float)])\l  (LINE:306)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|0x0038: INVOKE  (r1 I:int[]) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.getRadius():int[] A[MD:():int[] (m)] (LINE:308)\l0x003c: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: IF  (r1 I:??[int, byte, short, char]) \<= (r0 I:??[int, byte, short, char] A[D('indexView' int)])  \-\> B:12:0x0057 \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: INVOKE  (r1 I:int[]) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.getRadius():int[] A[MD:():int[] (m)] (LINE:309)\l0x0043: IPUT  (r1 I:int[]), (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mRadius int[] \l0x0045: CAST (r2 I:float) = (float) (r6 I:int A[D('radius' int)])  (LINE:310)\l0x0046: IGET  (r3 I:android.content.Context) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.myContext android.content.Context \l0x0048: INVOKE  (r3 I:android.content.res.Resources) = (r3 I:android.content.Context) type: VIRTUAL call: android.content.Context.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (c)]\l0x004c: INVOKE  (r3 I:android.util.DisplayMetrics) = (r3 I:android.content.res.Resources) type: VIRTUAL call: android.content.res.Resources.getDisplayMetrics():android.util.DisplayMetrics A[MD:():android.util.DisplayMetrics (c)]\l0x0050: IGET  (r3 I:float) = (r3 I:android.util.DisplayMetrics) android.util.DisplayMetrics.density float \l0x0052: ARITH  (r2 I:float) = (r2 I:float) * (r3 I:float) \l0x0054: CAST (r2 I:int) = (int) (r2 I:float) \l0x0055: APUT  \l  (r1 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('indexView' int)])\l  (r2 I:??[int, float, short, byte, char])\l \l}"];
Node_12 [shape=record,label="{12\:\ 0x0057|0x0057: INVOKE  (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: DIRECT call: androidx.constraintlayout.helper.widget.CircularFlow.anchorReferences():void A[MD:():void (m)] (LINE:312)\l}"];
Node_13 [shape=record,label="{13\:\ 0x005a|RETURN\l|0x005a: RETURN    (LINE:313)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.helper.widget.CircularFlow.updateReference((r4 'this' I:androidx.constraintlayout.helper.widget.CircularFlow A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('radius' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('angle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x005a \-\> B:1:?, CROSS_EDGE: B:10:0x003d \-\> B:12:0x0057, CROSS_EDGE: B:7:0x002e \-\> B:9:0x0038\lDebug Info:\l  0x0029\-0x005a: r0 'indexView' I\l  \-1 \-0x005a: r5 'view' Landroid\/view\/View;\l  \-1 \-0x005a: r6 'radius' I\l  \-1 \-0x005a: r7 'angle' F\lMETHOD_PARAMETERS: [view, radius, angle]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

