digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.removeElementFromArray([FI)[F" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|float[] r0 = new float[r5.length + (\-1)]\lr1 = 0\lr2 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|LOOP_START\lLOOP:0: B:3:0x0007\-\>B:8:0x0014\lPHI: r1 r2 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:2:0x0000, B:8:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'k' int) = (r2v0 'k' int), (r2v2 'k' int) binds: [B:2:0x0000, B:8:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|if (r1 \>= r5.length) goto L9\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r1 != r6) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|r0[r2] = r5[r1]\lr2 = r2 + 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x0007\-\>B:8:0x0014\lPHI: r2 \l  PHI: (r2v2 'k' int) = (r2v1 'k' int), (r2v3 'k' int) binds: [B:12:0x0014, B:11:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r1 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0017|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static float[] androidx.constraintlayout.helper.widget.CircularFlow.removeElementFromArray((r5v0 'array' float[] A[D('array' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x0014 \-\> B:3:0x0007, CROSS_EDGE: B:5:0x000a \-\> B:8:0x0014\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [array, index]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_10;
Node_5 -> Node_7;
Node_5 -> Node_12[style=dashed];
Node_7 -> Node_11;
Node_11 -> Node_8;
Node_8 -> Node_3;
Node_12 -> Node_8;
Node_10 -> Node_9;
Node_9 -> Node_1;
}

