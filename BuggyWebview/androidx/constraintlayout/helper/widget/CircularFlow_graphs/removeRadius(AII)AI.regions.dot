digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.removeRadius([II)[I" {
subgraph cluster_Region_1583638984 {
label = "R(1:(2:(1:8)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_376570377 {
label = "R(2:(1:8)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_124645502 {
label = "IF [B:2:0x0000, B:3:0x0002, B:5:0x0006] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|if (r2 == null) goto L8\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|ADDED_TO_REGION\l|if (r3 \< 0) goto L8\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|ADDED_TO_REGION\l|if (r3 \>= r1.mCountRadius) goto L8\l}"];
subgraph cluster_Region_69428153 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x000e|RETURN\l|return r2\l}"];
}
}
subgraph cluster_Region_2037674204 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x000d|RETURN\l|return removeElementFromArray(r2, r3)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0009}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private int[] androidx.constraintlayout.helper.widget.CircularFlow.removeRadius((r1v0 'this' androidx.constraintlayout.helper.widget.CircularFlow A[IMMUTABLE_TYPE, THIS]), (r2v0 'radius' int[] A[D('radius' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x000e \-\> B:1:?, CROSS_EDGE: B:3:0x0002 \-\> B:9:0x000e, CROSS_EDGE: B:2:0x0000 \-\> B:9:0x000e\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [radius, index]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3[style=dashed];
Node_2 -> Node_9;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_5 -> Node_7[style=dashed];
Node_5 -> Node_9;
Node_9 -> Node_1;
Node_8 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_7 -> Node_8;
}

