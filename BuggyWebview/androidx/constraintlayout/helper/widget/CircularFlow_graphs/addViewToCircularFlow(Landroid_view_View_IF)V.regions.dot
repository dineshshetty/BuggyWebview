digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.addViewToCircularFlow(Landroid\/view\/View;IF)V" {
subgraph cluster_Region_887006324 {
label = "R(1:(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_715839766 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_28442612 {
label = "IF [B:3:0x0008] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|if (containsId(r5.getId()) != false) goto L3\l}"];
subgraph cluster_Region_1954408571 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1856877508 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x000b|addView(r5)\lr4.mCountAngle++\lfloat[] float[] r0 = getAngles()\lr4.mAngles = r0\lr0[r4.mCountAngle \- 1] = r7\lr4.mCountRadius++\lint[] int[] r0 = getRadius()\lr4.mRadius = r0\lr0[r4.mCountRadius \- 1] = (int) (r6 * r4.myContext.getResources().getDisplayMetrics().density)\lanchorReferences()\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0045}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.helper.widget.CircularFlow.addViewToCircularFlow((r4v0 'this' androidx.constraintlayout.helper.widget.CircularFlow A[IMMUTABLE_TYPE, THIS]), (r5v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'radius' int A[D('radius' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'angle' float A[D('angle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0045 \-\> B:1:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [view, radius, angle]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_6 -> Node_1;
}

