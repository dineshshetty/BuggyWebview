digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.removeView(Landroid\/view\/View;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = super.removeView(r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r0 != (\-1)) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|androidx.constraintlayout.widget.ConstraintSet r1 = new androidx.constraintlayout.widget.ConstraintSet()\lr1.clone(r4.mContainer)\lr1.clear(r5.getId(), 8)\lr1.applyTo(r4.mContainer)\lfloat[] r2 = r4.mAngles\l}"];
Node_6 [shape=record,label="{6\:\ 0x0023|if (r0 \>= r2.length) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|r4.mAngles = removeAngle(r2, r0)\lr4.mCountAngle = r4.mCountAngle + (\-1)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|int[] r2 = r4.mRadius\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|if (r0 \>= r2.length) goto L11\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|r4.mRadius = removeRadius(r2, r0)\lr4.mCountRadius = r4.mCountRadius + (\-1)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0042|anchorReferences()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0045|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.helper.widget.CircularFlow.removeView((r4v0 'this' androidx.constraintlayout.helper.widget.CircularFlow A[IMMUTABLE_TYPE, THIS]), (r5v0 'view' android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:12:0x0045 \-\> B:1:?, CROSS_EDGE: B:9:0x0034 \-\> B:11:0x0042, CROSS_EDGE: B:6:0x0023 \-\> B:8:0x0031\lMETHOD_PARAMETERS: [view]\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.widget.ConstraintHelper.removeView(android.view.View):int]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

