digraph "CFG forandroidx.constraintlayout.helper.widget.CircularFlow.addViewToCircularFlow(Landroid\/view\/View;IF)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r5 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: android.view.View.getId():int A[MD:():int (c)] (LINE:235)\l0x0004: INVOKE  (r0 I:boolean) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow), (r0 I:int) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.containsId(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|0x000a: RETURN    (LINE:236)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: INVOKE  (r4 I:androidx.constraintlayout.helper.widget.CircularFlow), (r5 I:android.view.View A[D('view' android.view.View)]) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.addView(android.view.View):void A[MD:(android.view.View):void (m)] (LINE:238)\l0x000e: IGET  (r0 I:int) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mCountAngle int  (LINE:239)\l0x0010: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0012: IPUT  (r0 I:int), (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mCountAngle int \l0x0014: INVOKE  (r0 I:float[]) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.getAngles():float[] A[MD:():float[] (m)] (LINE:240)\l0x0018: IPUT  (r0 I:float[]), (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mAngles float[] \l0x001a: IGET  (r1 I:int) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mCountAngle int  (LINE:241)\l0x001c: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x001e: APUT  \l  (r0 I:??[int, float][])\l  (r1 I:??[int, short, byte, char])\l  (r7 I:??[int, float, short, byte, char] A[D('angle' float)])\l \l0x0020: IGET  (r0 I:int) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mCountRadius int  (LINE:242)\l0x0022: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0024: IPUT  (r0 I:int), (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mCountRadius int \l0x0026: INVOKE  (r0 I:int[]) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: VIRTUAL call: androidx.constraintlayout.helper.widget.CircularFlow.getRadius():int[] A[MD:():int[] (m)] (LINE:243)\l0x002a: IPUT  (r0 I:int[]), (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mRadius int[] \l0x002c: IGET  (r1 I:int) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.mCountRadius int  (LINE:244)\l0x002e: ARITH  (r1 I:int) = (r1 I:int) + (\-1 int) \l0x0030: CAST (r2 I:float) = (float) (r6 I:int A[D('radius' int)]) \l0x0031: IGET  (r3 I:android.content.Context) = (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) androidx.constraintlayout.helper.widget.CircularFlow.myContext android.content.Context \l0x0033: INVOKE  (r3 I:android.content.res.Resources) = (r3 I:android.content.Context) type: VIRTUAL call: android.content.Context.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (c)]\l0x0037: INVOKE  (r3 I:android.util.DisplayMetrics) = (r3 I:android.content.res.Resources) type: VIRTUAL call: android.content.res.Resources.getDisplayMetrics():android.util.DisplayMetrics A[MD:():android.util.DisplayMetrics (c)]\l0x003b: IGET  (r3 I:float) = (r3 I:android.util.DisplayMetrics) android.util.DisplayMetrics.density float \l0x003d: ARITH  (r2 I:float) = (r2 I:float) * (r3 I:float) \l0x003f: CAST (r2 I:int) = (int) (r2 I:float) \l0x0040: APUT  (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0042: INVOKE  (r4 I:androidx.constraintlayout.helper.widget.CircularFlow) type: DIRECT call: androidx.constraintlayout.helper.widget.CircularFlow.anchorReferences():void A[MD:():void (m)] (LINE:245)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0045|RETURN\l|0x0045: RETURN    (LINE:246)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.helper.widget.CircularFlow.addViewToCircularFlow((r4 'this' I:androidx.constraintlayout.helper.widget.CircularFlow A[IMMUTABLE_TYPE, THIS]), (r5 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('radius' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('angle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0045 \-\> B:1:?\lDebug Info:\l  \-1 \-0x0045: r5 'view' Landroid\/view\/View;\l  \-1 \-0x0045: r6 'radius' I\l  \-1 \-0x0045: r7 'angle' F\lMETHOD_PARAMETERS: [view, radius, angle]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

