digraph "CFG forandroidx.constraintlayout.core.PriorityGoalRow.GoalVariableAccessor.isSmallerThan(Landroidx\/constraintlayout\/core\/SolverVariable;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = 8\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|LOOP_START\lLOOP:0: B:3:0x0002\-\>B:7:0x0014\lPHI: r0 \l  PHI: (r0v1 'i' int) = (r0v0 'i' int), (r0v2 'i' int) binds: [B:2:0x0000, B:7:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|if (r0 \< 0) goto L13\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|r2 = r6.goalStrengthVector[r0]\lr3 = r5.variable.goalStrengthVector[r0]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|if ((r3 \> r2 ? 1 : (r3 == r2 ? 0 : \-1)) != 0) goto L7\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x0002\-\>B:7:0x0014\l|int r0 = r0 + (\-1)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0017|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017}"];
Node_9 [shape=record,label="{9\:\ 0x0019|if ((r3 \> r2 ? 1 : (r3 == r2 ? 0 : \-1)) \>= 0) goto L12\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|RETURN\l|return false\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public final boolean androidx.constraintlayout.core.PriorityGoalRow.GoalVariableAccessor.isSmallerThan((r5v0 'this' androidx.constraintlayout.core.PriorityGoalRow$GoalVariableAccessor A[IMMUTABLE_TYPE, THIS]), (r6v0 'other' androidx.constraintlayout.core.SolverVariable A[D('other' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x0014 \-\> B:3:0x0002, CROSS_EDGE: B:12:0x001d \-\> B:1:?, CROSS_EDGE: B:13:0x001e \-\> B:1:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_14;
Node_7 -> Node_3;
Node_14 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_1;
Node_12 -> Node_1;
Node_15 -> Node_13;
Node_13 -> Node_1;
}

