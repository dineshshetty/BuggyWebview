digraph "CFG forandroidx.constraintlayout.core.Pools.SimplePool.releaseAll([Ljava\/lang\/Object;I)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: ARRAY_LENGTH  (r0 I:int) = (r6 I:??[] A[D('variables' T[])])  (LINE:133)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0001|0x0001: IF  (r7 I:??[int, byte, short, char] A[D('count' int)]) \<= (r0 I:??[int, byte, short, char])  \-\> B:20:0x0004 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|0x0003: ARRAY_LENGTH  (r7 I:int A[D('count' int)]) = (r6 I:??[] A[D('variables' T[])])  (LINE:134)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:136)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0005|LOOP_START\lLOOP:0: B:21:0x0005\-\>B:25:0x0016\l|0x0005: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r7 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:27:0x0019 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|0x0007: AGET  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][] A[D('variables' T[])]), (r0 I:??[int, short, byte, char] A[D('i' int)])  (LINE:137)\l0x0009: IGET  (r2 I:int) = (r5 I:androidx.constraintlayout.core.Pools$SimplePool A[D('this' androidx.constraintlayout.core.Pools$SimplePool\<T\>)]) androidx.constraintlayout.core.Pools.SimplePool.mPoolSize int  (LINE:143)\l0x000b: IGET  (r3 I:java.lang.Object[]) = (r5 I:androidx.constraintlayout.core.Pools$SimplePool A[D('this' androidx.constraintlayout.core.Pools$SimplePool\<T\>)]) androidx.constraintlayout.core.Pools.SimplePool.mPool java.lang.Object[] \l0x000d: ARRAY_LENGTH  (r4 I:int) = (r3 I:??[]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: IF  (r2 I:??[int, byte, short, char]) \>= (r4 I:??[int, byte, short, char])  \-\> B:29:0x0016 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: APUT  (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY] A[D('instance' T)])  (LINE:144)\l0x0012: ARITH  (r2 I:int) = (r2 I:int) + (1 int)  (LINE:145)\l0x0014: IPUT  \l  (r2 I:int)\l  (r5 I:androidx.constraintlayout.core.Pools$SimplePool A[D('this' androidx.constraintlayout.core.Pools$SimplePool\<T\>)])\l androidx.constraintlayout.core.Pools.SimplePool.mPoolSize int \l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|LOOP_END\lLOOP:0: B:21:0x0005\-\>B:25:0x0016\l|0x0016: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:136)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0019|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0019|RETURN\l|0x0019: RETURN    (LINE:148)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.Pools.SimplePool.releaseAll((r5 'this' I:androidx.constraintlayout.core.Pools$SimplePool\<T\> A[D('this' androidx.constraintlayout.core.Pools$SimplePool\<T\>), IMMUTABLE_TYPE, THIS]), (r6 I:T[] A[D('variables' T[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('count' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x0016 \-\> B:21:0x0005, CROSS_EDGE: B:23:0x000e \-\> B:25:0x0016, CROSS_EDGE: B:18:0x0001 \-\> B:20:0x0004\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: ([TT;I)V\lDebug Info:\l  0x0009\-0x0016: r1 'instance' Ljava\/lang\/Object;, signature: TT;\l  0x0005\-0x0019: r0 'i' I\l  0x0000\-0x0019: r5 'this' Landroidx\/constraintlayout\/core\/Pools$SimplePool;, signature: Landroidx\/constraintlayout\/core\/Pools$SimplePool\<TT;\>;\l  0x0000\-0x0019: r6 'variables' [Ljava\/lang\/Object;, signature: [TT;\l  \-1 \-0x0019: r7 'count' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.Pools.Pool.releaseAll(T[], int):void]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_28;
Node_28 -> Node_25;
Node_25 -> Node_21;
Node_29 -> Node_25;
Node_27 -> Node_26;
Node_26 -> Node_16;
}

