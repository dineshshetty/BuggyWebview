digraph "CFG forandroidx.constraintlayout.core.SolverVariable.updateReferencesWithNewDefinition(Landroidx\/constraintlayout\/core\/LinearSystem;Landroidx\/constraintlayout\/core\/ArrayRow;)V" {
subgraph cluster_Region_431168739 {
label = "R(3:1|(1:4)|6)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|int int r0 = r4.mClientEquationsCount\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_54117074 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0004|if (r1 \< r0) goto L4\l}"];
subgraph cluster_Region_1409687232 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0006|LOOP_END\lLOOP:0: B:12:0x0003\-\>B:14:0x0006\l|r4.mClientEquations[r1].updateFromRow(r5, r6, false)\lr1++\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0010|r4.mClientEquationsCount = 0\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0003|LOOP_START\lLOOP:0: B:12:0x0003\-\>B:14:0x0006\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:11:0x0000, B:14:0x0006] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0010|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0012}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void androidx.constraintlayout.core.SolverVariable.updateReferencesWithNewDefinition((r4v0 'this' androidx.constraintlayout.core.SolverVariable A[IMMUTABLE_TYPE, THIS]), (r5v0 'system' androidx.constraintlayout.core.LinearSystem A[D('system' androidx.constraintlayout.core.LinearSystem), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'definition' androidx.constraintlayout.core.ArrayRow A[D('definition' androidx.constraintlayout.core.ArrayRow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0006 \-\> B:12:0x0003\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_17[style=dashed];
Node_14 -> Node_12;
Node_15 -> Node_16;
Node_9 -> Node_11;
Node_12 -> Node_13;
Node_17 -> Node_15;
Node_16 -> Node_10;
}

