digraph "CFG forandroidx.constraintlayout.core.widgets.WidgetContainer.resetSolverVariables(Landroidx\/constraintlayout\/core\/Cache;)V" {
subgraph cluster_Region_2074052759 {
label = "R(2:1|(1:3))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|super.resetSolverVariables(r4)\lint int r0 = r3.mChildren.size()\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1398441040 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000a|LOOP_START\lLOOP:0: B:10:0x000a\-\>B:11:0x000c\lPHI: r1 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:9:0x0000, B:11:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r0) goto L3\l}"];
subgraph cluster_Region_123277968 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000c|LOOP_END\lLOOP:0: B:10:0x000a\-\>B:11:0x000c\l|androidx.constraintlayout.core.widgets.ConstraintWidget androidx.constraintlayout.core.widgets.ConstraintWidget r2 = r3.mChildren.get(r1)\lr2.resetSolverVariables(r4)\lr1++\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001a|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001a}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.widgets.WidgetContainer.resetSolverVariables((r3v0 'this' androidx.constraintlayout.core.widgets.WidgetContainer A[IMMUTABLE_TYPE, THIS]), (r4v0 'cache' androidx.constraintlayout.core.Cache A[D('cache' androidx.constraintlayout.core.Cache), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x000c \-\> B:10:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.widgets.ConstraintWidget.resetSolverVariables(androidx.constraintlayout.core.Cache):void]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_7 -> Node_9;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

