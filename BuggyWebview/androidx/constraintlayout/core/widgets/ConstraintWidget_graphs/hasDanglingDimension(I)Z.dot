digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintWidget.hasDanglingDimension(I)Z" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000}"];
Node_39 [shape=record,label="{39\:\ 0x0003|if (r6 != 0) goto L16\l}"];
Node_40 [shape=record,label="{40\:\ 0x0005}"];
Node_41 [shape=record,label="{41\:\ 0x0009|if (r5.mLeft.mTarget == null) goto L15\l}"];
Node_42 [shape=record,label="{42\:\ 0x000b|r3 = 1\l}"];
Node_44 [shape=record,label="{44\:\ 0x000e|PHI: r3 \l  PHI: (r3v10 int) = (r3v9 int), (r3v12 int) binds: [B:43:0x000d, B:42:0x000b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0012|if (r5.mRight.mTarget == null) goto L14\l}"];
Node_46 [shape=record,label="{46\:\ 0x0014|r4 = 1\l}"];
Node_48 [shape=record,label="{48\:\ 0x0017|PHI: r4 \l  PHI: (r4v13 int) = (r4v12 int), (r4v14 int) binds: [B:47:0x0016, B:46:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = r3 + r4\l}"];
Node_49 [shape=record,label="{49\:\ 0x0018|if (r3 \>= 2) goto L11\l}"];
Node_51 [shape=record,label="{51\:\ 0x001b|RETURN\lORIG_RETURN\l|return false\l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_70 [shape=record,label="{70\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_47 [shape=record,label="{47\:\ 0x0016|r4 = 0\l}"];
Node_43 [shape=record,label="{43\:\ 0x000d|r3 = 0\l}"];
Node_53 [shape=record,label="{53\:\ 0x001d}"];
Node_54 [shape=record,label="{54\:\ 0x0021|if (r5.mTop.mTarget == null) goto L31\l}"];
Node_55 [shape=record,label="{55\:\ 0x0023|r3 = 1\l}"];
Node_57 [shape=record,label="{57\:\ 0x0026|PHI: r3 \l  PHI: (r3v3 int) = (r3v2 int), (r3v6 int) binds: [B:56:0x0025, B:55:0x0023] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_58 [shape=record,label="{58\:\ 0x002a|if (r5.mBottom.mTarget == null) goto L30\l}"];
Node_59 [shape=record,label="{59\:\ 0x002c|r4 = 1\l}"];
Node_61 [shape=record,label="{61\:\ 0x002f|PHI: r4 \l  PHI: (r4v3 int) = (r4v2 int), (r4v9 int) binds: [B:60:0x002e, B:59:0x002c] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = r3 + r4\l}"];
Node_62 [shape=record,label="{62\:\ 0x0034|if (r5.mBaseline.mTarget == null) goto L29\l}"];
Node_63 [shape=record,label="{63\:\ 0x0036|r4 = 1\l}"];
Node_65 [shape=record,label="{65\:\ 0x0039|PHI: r4 \l  PHI: (r4v7 int) = (r4v6 int), (r4v8 int) binds: [B:64:0x0038, B:63:0x0036] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = r3 + r4\l}"];
Node_66 [shape=record,label="{66\:\ 0x003a|if (r3 \>= 2) goto L27\l}"];
Node_68 [shape=record,label="{68\:\ 0x003d|RETURN\lORIG_RETURN\l|return false\l}"];
Node_71 [shape=record,label="{71\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_64 [shape=record,label="{64\:\ 0x0038|r4 = 0\l}"];
Node_60 [shape=record,label="{60\:\ 0x002e|r4 = 0\l}"];
Node_56 [shape=record,label="{56\:\ 0x0025|r3 = 0\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.widgets.ConstraintWidget.hasDanglingDimension((r5v0 'this' androidx.constraintlayout.core.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]), (r6v0 'orientation' int A[D('orientation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:49:0x0018 \-\> B:52:0x001c, CROSS_EDGE: B:47:0x0016 \-\> B:48:0x0017, CROSS_EDGE: B:43:0x000d \-\> B:44:0x000e, CROSS_EDGE: B:69:0x003e \-\> B:37:?, CROSS_EDGE: B:66:0x003a \-\> B:69:0x003e, CROSS_EDGE: B:64:0x0038 \-\> B:65:0x0039, CROSS_EDGE: B:60:0x002e \-\> B:61:0x002f, CROSS_EDGE: B:56:0x0025 \-\> B:57:0x0026\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_53;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_51;
Node_49 -> Node_70[style=dashed];
Node_51 -> Node_37;
Node_70 -> Node_37;
Node_47 -> Node_48;
Node_43 -> Node_44;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_71[style=dashed];
Node_68 -> Node_37;
Node_71 -> Node_37;
Node_64 -> Node_65;
Node_60 -> Node_61;
Node_56 -> Node_57;
}

