digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintWidget.isSpreadHeight()Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mMatchConstraintDefaultHeight int  (LINE:345)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|0x0005: IGET  (r0 I:float) = (r3 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mDimensionRatio float \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: CMP_L  (r0 I:int) = (r0 I:float), (r2 I:float) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001d \l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|0x000c: IGET  (r0 I:int) = (r3 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mMatchConstraintMinHeight int \l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001d \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: IGET  (r0 I:int) = (r3 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mMatchConstraintMaxHeight int \l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001d \l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: IGET  (r0 I:androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour[]) = (r3 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mListDimensionBehaviors androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour[] \l0x0016: AGET  (r0 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]) \l0x0018: SGET  (r2 I:androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour) =  androidx.constraintlayout.core.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour \l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001d \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|RETURN\lORIG_RETURN\l|0x001d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.widgets.ConstraintWidget.isSpreadHeight((r3 'this' I:androidx.constraintlayout.core.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001a \-\> B:30:0x001e, CROSS_EDGE: B:25:0x0012 \-\> B:29:0x001d, CROSS_EDGE: B:23:0x000e \-\> B:29:0x001d, CROSS_EDGE: B:21:0x000a \-\> B:29:0x001d, CROSS_EDGE: B:19:0x0003 \-\> B:29:0x001d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_29;
Node_27 -> Node_31[style=dashed];
Node_31 -> Node_17;
Node_29 -> Node_17;
}

