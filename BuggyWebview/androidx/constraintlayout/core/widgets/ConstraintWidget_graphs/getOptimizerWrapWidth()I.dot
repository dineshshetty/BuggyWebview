digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintWidget.getOptimizerWrapWidth()I" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|int r0 = r3.mWidth\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|if (r3.mListDimensionBehaviors[0] != androidx.constraintlayout.core.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) goto L18\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b}"];
Node_24 [shape=record,label="{24\:\ 0x000e|if (r3.mMatchConstraintDefaultWidth != 1) goto L14\l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|int r0 = java.lang.Math.max(r3.mMatchConstraintMinWidth, r0)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0021|PHI: r0 \l  PHI: (r0v3 'w' int) = (r0v1 'w' int), (r0v2 'w' int), (r0v5 'w' int) binds: [B:29:0x0020, B:28:0x001b, B:25:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r3.mMatchConstraintMaxWidth\l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|if (r1 \<= 0) goto L13\l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|if (r1 \>= r0) goto L12\l}"];
Node_33 [shape=record,label="{33\:\ 0x0027}"];
Node_34 [shape=record,label="{34\:\ 0x0029|RETURN\lORIG_RETURN\l|return r3.mMatchConstraintMaxWidth\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017}"];
Node_27 [shape=record,label="{27\:\ 0x0019|if (r3.mMatchConstraintMinWidth \<= 0) goto L17\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|int r0 = r3.mMatchConstraintMinWidth\lr3.mWidth = r0\l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|r0 = 0\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.core.widgets.ConstraintWidget.getOptimizerWrapWidth((r3v0 'this' androidx.constraintlayout.core.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0025 \-\> B:34:0x0029, CROSS_EDGE: B:31:0x0023 \-\> B:34:0x0029, CROSS_EDGE: B:28:0x001b \-\> B:30:0x0021, CROSS_EDGE: B:29:0x0020 \-\> B:30:0x0021, CROSS_EDGE: B:22:0x0009 \-\> B:34:0x0029\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_35;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_36;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_20;
Node_37 -> Node_20;
Node_36 -> Node_20;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_35 -> Node_20;
}

