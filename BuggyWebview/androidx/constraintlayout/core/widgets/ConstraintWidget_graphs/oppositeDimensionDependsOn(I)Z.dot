digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintWidget.oppositeDimensionDependsOn(I)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000}"];
Node_17 [shape=record,label="{17\:\ 0x0002|if (r7 != 0) goto L11\l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|r2 = 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|PHI: r2 \l  PHI: (r2v1 'oppositeOrientation' int) = (r2v0 'oppositeOrientation' int), (r2v2 'oppositeOrientation' int) binds: [B:19:0x0006, B:18:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour[] r3 = r6.mListDimensionBehaviors\lr4 = r3[r7]\lr3 = r3[r2]\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|if (r4 != androidx.constraintlayout.core.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011}"];
Node_23 [shape=record,label="{23\:\ 0x0013|if (r3 != androidx.constraintlayout.core.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT) goto L10\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|RETURN\lORIG_RETURN\l|return false\l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|r2 = 0\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.widgets.ConstraintWidget.oppositeDimensionDependsOn((r6v0 'this' androidx.constraintlayout.core.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]), (r7v0 'orientation' int A[D('orientation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0013 \-\> B:26:0x0017, CROSS_EDGE: B:21:0x000f \-\> B:25:0x0016, CROSS_EDGE: B:19:0x0006 \-\> B:20:0x0007\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_27[style=dashed];
Node_27 -> Node_15;
Node_25 -> Node_15;
Node_19 -> Node_20;
}

