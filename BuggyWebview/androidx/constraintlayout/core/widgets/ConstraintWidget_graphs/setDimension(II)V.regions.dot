digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintWidget.setDimension(II)V" {
subgraph cluster_Region_84691343 {
label = "R(4:1|(1:3)|4|(1:(1:6)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|r1.mWidth = r2\lint int r0 = r1.mMinWidth\l}"];
subgraph cluster_IfRegion_715423534 {
label = "IF [B:13:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0004|if (r2 \< r0) goto L3\l}"];
subgraph cluster_Region_2098113389 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0006|r1.mWidth = r0\l}"];
}
}
Node_15 [shape=record,label="{15\:\ 0x0008|r1.mHeight = r3\lint int r0 = r1.mMinHeight\l}"];
subgraph cluster_Region_1759558399 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_906326462 {
label = "IF [B:16:0x000c] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000c|if (r3 \< r0) goto L6\l}"];
subgraph cluster_Region_1361184448 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000e|r1.mHeight = r0\l}"];
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0010|ORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.widgets.ConstraintWidget.setDimension((r1v0 'this' androidx.constraintlayout.core.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]), (r2v0 'w' int A[D('w' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'h' int A[D('h' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x000c \-\> B:18:0x0010, CROSS_EDGE: B:13:0x0004 \-\> B:15:0x0008\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_15[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_19[style=dashed];
Node_17 -> Node_18;
Node_10 -> Node_12;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

