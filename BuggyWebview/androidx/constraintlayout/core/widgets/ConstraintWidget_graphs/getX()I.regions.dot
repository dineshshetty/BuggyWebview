digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintWidget.getX()I" {
subgraph cluster_Region_990979843 {
label = "R(2:1|(2:(1:6)|(1:9)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|androidx.constraintlayout.core.widgets.ConstraintWidget androidx.constraintlayout.core.widgets.ConstraintWidget r0 = r2.mParent\l}"];
subgraph cluster_Region_2122394002 {
label = "R(2:(1:6)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1709163839 {
label = "IF [B:13:0x0002, B:15:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0002|if (r0 != null) goto L3\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|ADDED_TO_REGION\l|if ((r0 instanceof androidx.constraintlayout.core.widgets.ConstraintWidgetContainer) != false) goto L5\l}"];
subgraph cluster_Region_1705233630 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x000f|RETURN\l|return ((androidx.constraintlayout.core.widgets.ConstraintWidgetContainer) r0).mPaddingLeft + r2.f38mX\l}"];
}
}
subgraph cluster_Region_924840574 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0012|RETURN\l|return r2.f38mX\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0004}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0008}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0010}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.core.widgets.ConstraintWidget.getX((r2v0 'this' androidx.constraintlayout.core.widgets.ConstraintWidget A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0012 \-\> B:11:?, CROSS_EDGE: B:13:0x0002 \-\> B:18:0x0010\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_15 -> Node_16;
Node_15 -> Node_18[style=dashed];
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_18 -> Node_19;
}

