digraph "CFG forandroidx.constraintlayout.core.widgets.Flow.WidgetsList.getWidth()I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:androidx.constraintlayout.core.widgets.Flow$WidgetsList) androidx.constraintlayout.core.widgets.Flow.WidgetsList.mOrientation int  (LINE:406)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000e \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IGET  (r0 I:int) = (r2 I:androidx.constraintlayout.core.widgets.Flow$WidgetsList) androidx.constraintlayout.core.widgets.Flow.WidgetsList.mWidth int  (LINE:407)\l0x0006: IGET  (r1 I:androidx.constraintlayout.core.widgets.Flow) = (r2 I:androidx.constraintlayout.core.widgets.Flow$WidgetsList) androidx.constraintlayout.core.widgets.Flow.WidgetsList.this$0 androidx.constraintlayout.core.widgets.Flow \l0x0008: INVOKE  (r1 I:int) = (r1 I:androidx.constraintlayout.core.widgets.Flow) type: STATIC call: androidx.constraintlayout.core.widgets.Flow.access$000(androidx.constraintlayout.core.widgets.Flow):int A[MD:(androidx.constraintlayout.core.widgets.Flow):int (m)]\l0x000c: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:int) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000e|0x000e: IGET  (r0 I:int) = (r2 I:androidx.constraintlayout.core.widgets.Flow$WidgetsList) androidx.constraintlayout.core.widgets.Flow.WidgetsList.mWidth int  (LINE:409)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.core.widgets.Flow.WidgetsList.getWidth((r2 'this' I:androidx.constraintlayout.core.widgets.Flow$WidgetsList A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0010 \-\> B:9:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

