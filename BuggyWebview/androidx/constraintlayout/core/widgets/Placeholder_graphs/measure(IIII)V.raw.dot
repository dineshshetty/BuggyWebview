digraph "CFG forandroidx.constraintlayout.core.widgets.Placeholder.measure(IIII)V" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:31)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:32)\l0x0002: INVOKE  (r2 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.getPaddingLeft():int A[MD:():int (m)] (LINE:33)\l0x0006: INVOKE  (r3 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.getPaddingRight():int A[MD:():int (m)] (LINE:34)\l0x000a: INVOKE  (r4 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.getPaddingTop():int A[MD:():int (m)] (LINE:35)\l0x000e: INVOKE  (r5 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.getPaddingBottom():int A[MD:():int (m)] (LINE:36)\l0x0012: ARITH  (r6 I:int) = (r2 I:int A[D('paddingLeft' int)]) + (r3 I:int A[D('paddingRight' int)])  (LINE:38)\l0x0014: ARITH  (r0 I:int) = (r0 I:int A[D('width' int)]) + (r6 I:int) \l0x0015: ARITH  (r6 I:int) = (r4 I:int A[D('paddingTop' int)]) + (r5 I:int A[D('paddingBottom' int)])  (LINE:39)\l0x0017: ARITH  (r1 I:int) = (r1 I:int A[D('height' int)]) + (r6 I:int) \l0x0018: IGET  (r6 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) androidx.constraintlayout.core.widgets.Placeholder.mWidgetsCount int  (LINE:41)\l0x001a: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|0x001b: IF  (r6 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:28:0x002f \l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|0x001d: IGET  (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidget[]) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) androidx.constraintlayout.core.widgets.Placeholder.mWidgets androidx.constraintlayout.core.widgets.ConstraintWidget[]  (LINE:43)\l0x001f: AGET  (r6 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][]), (r7 I:??[int, short, byte, char]) \l0x0021: INVOKE  (r6 I:int) = (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidget) type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintWidget.getWidth():int A[MD:():int (m)]\l0x0025: ARITH  (r0 I:int) = (r0 I:int A[D('width' int)]) + (r6 I:int) \l0x0026: IGET  (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidget[]) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) androidx.constraintlayout.core.widgets.Placeholder.mWidgets androidx.constraintlayout.core.widgets.ConstraintWidget[]  (LINE:44)\l0x0028: AGET  (r6 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][]), (r7 I:??[int, short, byte, char]) \l0x002a: INVOKE  (r6 I:int) = (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidget) type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintWidget.getHeight():int A[MD:():int (m)]\l0x002e: ARITH  (r1 I:int) = (r1 I:int A[D('height' int)]) + (r6 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ 0x002f|0x002f: INVOKE  (r6 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.getMinWidth():int A[MD:():int (m)] (LINE:46)\l0x0033: INVOKE  (r0 I:int A[D('width' int)]) = (r6 I:int), (r0 I:int A[D('width' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0037: INVOKE  (r6 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.getMinHeight():int A[MD:():int (m)] (LINE:47)\l0x003b: INVOKE  (r1 I:int A[D('height' int)]) = (r6 I:int), (r1 I:int A[D('height' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x003f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:49)\l0x0040: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:50)\l0x0041: CONST  (r9 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char])  (LINE:52)\l0x0043: CONST  (r10 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0045|0x0045: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0049 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0047|0x0047: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('measuredWidth' int)]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('widthSize' int)])  (LINE:53)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0053|0x0053: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) != (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0057  (LINE:60)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0055|0x0055: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('measuredHeight' int)]) = (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('heightSize' int)])  (LINE:61)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0061|0x0061: INVOKE  \l  (r11 I:androidx.constraintlayout.core.widgets.Placeholder)\l  (r6 I:int A[D('measuredWidth' int)])\l  (r8 I:int A[D('measuredHeight' int)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.setMeasure(int, int):void A[MD:(int, int):void (m)] (LINE:68)\l0x0064: INVOKE  (r11 I:androidx.constraintlayout.core.widgets.Placeholder), (r6 I:int A[D('measuredWidth' int)]) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.setWidth(int):void A[MD:(int):void (m)] (LINE:69)\l0x0067: INVOKE  (r11 I:androidx.constraintlayout.core.widgets.Placeholder), (r8 I:int A[D('measuredHeight' int)]) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.setHeight(int):void A[MD:(int):void (m)] (LINE:70)\l0x006a: IGET  (r9 I:int) = (r11 I:androidx.constraintlayout.core.widgets.Placeholder) androidx.constraintlayout.core.widgets.Placeholder.mWidgetsCount int  (LINE:71)\l}"];
Node_42 [shape=record,label="{42\:\ 0x006c|0x006c: IF  (r9 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:44:0x006f \l}"];
Node_43 [shape=record,label="{43\:\ 0x006e|0x006e: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x006f|0x006f: INVOKE  (r11 I:androidx.constraintlayout.core.widgets.Placeholder), (r7 I:boolean) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Placeholder.needsCallbackFromSolver(boolean):void A[MD:(boolean):void (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0072|RETURN\l|0x0072: RETURN    (LINE:72)\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0057|0x0057: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x005e  (LINE:62)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0059|0x0059: INVOKE  (r8 I:int A[D('measuredHeight' int)]) = (r1 I:int A[D('height' int)]), (r15 I:int A[D('heightSize' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:63)\l}"];
Node_39 [shape=record,label="{39\:\ 0x005e|0x005e: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0061  (LINE:64)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0060|0x0060: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('measuredHeight' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('height' int)])  (LINE:65)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0049|0x0049: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0050  (LINE:54)\l}"];
Node_32 [shape=record,label="{32\:\ 0x004b|0x004b: INVOKE  (r6 I:int A[D('measuredWidth' int)]) = (r0 I:int A[D('width' int)]), (r13 I:int A[D('widthSize' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:55)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0050|0x0050: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0053  (LINE:56)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0052|0x0052: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('measuredWidth' int)]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('width' int)])  (LINE:57)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.widgets.Placeholder.measure((r11 'this' I:androidx.constraintlayout.core.widgets.Placeholder A[IMMUTABLE_TYPE, THIS]), (r12 I:int A[D('widthMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('widthSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('heightMode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:int A[D('heightSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:42:0x006c \-\> B:44:0x006f, CROSS_EDGE: B:38:0x0059 \-\> B:41:0x0061, CROSS_EDGE: B:40:0x0060 \-\> B:41:0x0061, CROSS_EDGE: B:39:0x005e \-\> B:41:0x0061, CROSS_EDGE: B:32:0x004b \-\> B:35:0x0053, CROSS_EDGE: B:34:0x0052 \-\> B:35:0x0053, CROSS_EDGE: B:33:0x0050 \-\> B:35:0x0053, CROSS_EDGE: B:26:0x001b \-\> B:28:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0072: r0 'width' I\l  0x0002\-0x0072: r1 'height' I\l  0x0006\-0x0072: r2 'paddingLeft' I\l  0x000a\-0x0072: r3 'paddingRight' I\l  0x000e\-0x0072: r4 'paddingTop' I\l  0x0012\-0x0072: r5 'paddingBottom' I\l  0x0040\-0x0072: r6 'measuredWidth' I\l  0x0041\-0x0072: r8 'measuredHeight' I\l  \-1 \-0x0072: r12 'widthMode' I\l  \-1 \-0x0072: r13 'widthSize' I\l  \-1 \-0x0072: r14 'heightMode' I\l  \-1 \-0x0072: r15 'heightSize' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.widgets.VirtualLayout.measure(int, int, int, int):void]\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_24;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_41;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_41;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_35;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_35;
}

