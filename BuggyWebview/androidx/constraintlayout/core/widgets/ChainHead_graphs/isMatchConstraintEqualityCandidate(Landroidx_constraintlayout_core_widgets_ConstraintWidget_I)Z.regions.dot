digraph "CFG forandroidx.constraintlayout.core.widgets.ChainHead.isMatchConstraintEqualityCandidate(Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;I)Z" {
subgraph cluster_Region_55436859 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0006|RETURN\l|return r2.getVisibility() != 8 && r2.mListDimensionBehaviors[r3] == androidx.constraintlayout.core.widgets.ConstraintWidget.DimensionBehaviour.MATCH_CONSTRAINT && (r2.mResolvedMatchConstraintDefault[r3] == 0 \|\| r2.mResolvedMatchConstraintDefault[r3] == 3)\l}"];
}
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0000}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0008}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000e|REMOVE\lADDED_TO_REGION\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0010}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0014|REMOVE\lADDED_TO_REGION\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0016}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x001b|REMOVE\lADDED_TO_REGION\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x001d|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x001f|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{private static boolean androidx.constraintlayout.core.widgets.ChainHead.isMatchConstraintEqualityCandidate((r2v0 'widget' androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'orientation' int A[D('orientation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001f \-\> B:26:0x0020, CROSS_EDGE: B:21:0x0014 \-\> B:24:0x001d, CROSS_EDGE: B:19:0x000e \-\> B:25:0x001f, CROSS_EDGE: B:17:0x0006 \-\> B:25:0x001f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_14;Node_17 -> Node_18;
Node_17 -> Node_25;
Node_14 -> Node_16;
Node_16 -> Node_17;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_15;
Node_25 -> Node_15;
}

