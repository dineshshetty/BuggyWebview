digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.Direct.solveVerticalMatchConstraint(ILandroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;Landroidx\/constraintlayout\/core\/widgets\/analyzer\/BasicMeasure$Measurer;Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|float r0 = r12.getVerticalBiasPercent()\lint r1 = r12.mTop.mTarget.getFinalValue() + r12.mTop.getMargin()\lint r2 = r12.mBottom.mTarget.getFinalValue() \- r12.mBottom.getMargin()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|if (r2 \< r1) goto L21\l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|int r3 = r12.getHeight()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0030|if (r12.getVisibility() == 8) goto L18\l}"];
Node_6 [shape=record,label="{6\:\ 0x0032}"];
Node_7 [shape=record,label="{7\:\ 0x0035|if (r12.mMatchConstraintDefaultHeight != 2) goto L15\l}"];
Node_8 [shape=record,label="{8\:\ 0x0037}"];
Node_9 [shape=record,label="{9\:\ 0x003a|if ((r10 instanceof androidx.constraintlayout.core.widgets.ConstraintWidgetContainer) == false) goto L14\l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|int r4 = r10.getHeight()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|PHI: r4 \l  PHI: (r4v10 'parentHeight' int) = (r4v9 'parentHeight' int), (r4v11 'parentHeight' int) binds: [B:11:0x0041, B:10:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = (int) ((r0 * 0.5f) * ((float) r4))\l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|PHI: r3 \l  PHI: (r3v5 'height' int) = (r3v2 'height' int), (r3v4 'height' int), (r3v8 'height' int) binds: [B:14:0x0052, B:15:0x0054, B:12:0x0049] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = java.lang.Math.max(r12.mMatchConstraintMinHeight, r3)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0060|if (r12.mMatchConstraintMaxHeight \<= 0) goto L18\l}"];
Node_19 [shape=record,label="{19\:\ 0x0062|int r3 = java.lang.Math.min(r12.mMatchConstraintMaxHeight, r3)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0041|int r4 = r10.getParent().getHeight()\l}"];
Node_13 [shape=record,label="{13\:\ 0x0050}"];
Node_14 [shape=record,label="{14\:\ 0x0052|if (r12.mMatchConstraintDefaultHeight != 0) goto L11\l}"];
Node_15 [shape=record,label="{15\:\ 0x0054|int r3 = r2 \- r1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0068|PHI: r3 \l  PHI: (r3v3 'height' int) = (r3v2 'height' int), (r3v6 'height' int), (r3v7 'height' int) binds: [B:5:0x0030, B:18:0x0060, B:19:0x0062] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = (r2 \- r1) \- r3\lint r5 = (int) ((((float) r4) * r0) + 0.5f)\lint r6 = r1 + r5\lint r7 = r6 + r3\lr12.setFinalVertical(r6, r7)\lverticalSolvingPass(r9 + 1, r12, r11)\l}"];
Node_21 [shape=record,label="{21\:\ 0x007c|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private static void androidx.constraintlayout.core.widgets.analyzer.Direct.solveVerticalMatchConstraint((r9v0 'level' int A[D('level' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'layout' androidx.constraintlayout.core.widgets.ConstraintWidget A[D('layout' androidx.constraintlayout.core.widgets.ConstraintWidget), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'measurer' androidx.constraintlayout.core.widgets.analyzer.BasicMeasure$Measurer A[D('measurer' androidx.constraintlayout.core.widgets.analyzer.BasicMeasure$Measurer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'widget' androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0060 \-\> B:20:0x0068, CROSS_EDGE: B:11:0x0041 \-\> B:12:0x0049, CROSS_EDGE: B:15:0x0054 \-\> B:17:0x0058, CROSS_EDGE: B:14:0x0052 \-\> B:17:0x0058, CROSS_EDGE: B:5:0x0030 \-\> B:20:0x0068, CROSS_EDGE: B:3:0x0022 \-\> B:21:0x007c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_22;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_20;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_13;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_12;
Node_12 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_11 -> Node_12;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_17;
Node_20 -> Node_21;
Node_21 -> Node_1;
Node_22 -> Node_1;
}

