digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.Direct.solveHorizontalMatchConstraint(ILandroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;Landroidx\/constraintlayout\/core\/widgets\/analyzer\/BasicMeasure$Measurer;Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;Z)V" {
subgraph cluster_Region_718280 {
label = "R(2:1|(1:(3:3|(3:(2:(1:9)(1:14)|10)(1:(1:17))|11|(1:13))|18))) | DECL_VAR: int parentWidth\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|float float r0 = r12.getHorizontalBiasPercent()\lint int r1 = r12.mLeft.mTarget.getFinalValue() + r12.mLeft.getMargin()\lint int r2 = r12.mRight.mTarget.getFinalValue() \- r12.mRight.getMargin()\l}"];
subgraph cluster_Region_1680434411 {
label = "R(1:(3:3|(3:(2:(1:9)(1:14)|10)(1:(1:17))|11|(1:13))|18))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2121324738 {
label = "IF [B:3:0x0022] THEN: R(3:3|(3:(2:(1:9)(1:14)|10)(1:(1:17))|11|(1:13))|18) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0022|if (r2 \>= r1) goto L3\l}"];
subgraph cluster_Region_2082453128 {
label = "R(3:3|(3:(2:(1:9)(1:14)|10)(1:(1:17))|11|(1:13))|18)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0024|int int r3 = r12.getWidth()\l}"];
subgraph cluster_IfRegion_1656327981 {
label = "IF [B:5:0x0030] THEN: R(3:(2:(1:9)(1:14)|10)(1:(1:17))|11|(1:13)) ELSE: null";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0030|if (r12.getVisibility() != 8) goto L5\l}"];
subgraph cluster_Region_758189959 {
label = "R(3:(2:(1:9)(1:14)|10)(1:(1:17))|11|(1:13))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1362015444 {
label = "IF [B:7:0x0035] THEN: R(2:(1:9)(1:14)|10) ELSE: R(1:(1:17))";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0035|if (r12.mMatchConstraintDefaultWidth == 2) goto L7\l}"];
subgraph cluster_Region_1414872278 {
label = "R(2:(1:9)(1:14)|10)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_727633461 {
label = "IF [B:9:0x003a] THEN: R(1:9) ELSE: R(1:14)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003a|if ((r10 instanceof androidx.constraintlayout.core.widgets.ConstraintWidgetContainer) != false) goto L9\l}"];
subgraph cluster_Region_454591761 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x003c|int r4 = r10.getWidth()\l}"];
}
subgraph cluster_Region_1055975551 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0041|int r4 = r10.getParent().getWidth()\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0049|PHI: r4 \l  PHI: (r4v10 'parentWidth' int) = (r4v9 'parentWidth' int), (r4v11 'parentWidth' int) binds: [B:11:0x0041, B:10:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = (int) (r12.getHorizontalBiasPercent() * 0.5f * r4)\l}"];
}
subgraph cluster_Region_75491721 {
label = "R(1:(1:17)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_714202828 {
label = "IF [B:14:0x0056] THEN: R(1:17) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0056|if (r12.mMatchConstraintDefaultWidth == 0) goto L17\l}"];
subgraph cluster_Region_2051146162 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0058|int r3 = r2 \- r1\l}"];
}
}
}
}
Node_17 [shape=record,label="{17\:\ 0x005c|PHI: r3 \l  PHI: (r3v5 'width' int) = (r3v2 'width' int), (r3v4 'width' int), (r3v8 'width' int) binds: [B:14:0x0056, B:15:0x0058, B:12:0x0049] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = java.lang.Math.max(r12.mMatchConstraintMinWidth, r3)\l}"];
subgraph cluster_IfRegion_238901086 {
label = "IF [B:18:0x0064] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0064|if (r12.mMatchConstraintMaxWidth \> 0) goto L13\l}"];
subgraph cluster_Region_739989343 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0066|int r3 = java.lang.Math.min(r12.mMatchConstraintMaxWidth, r3)\l}"];
}
}
}
}
Node_20 [shape=record,label="{20\:\ 0x006c|PHI: r3 \l  PHI: (r3v3 'width' int) = (r3v2 'width' int), (r3v6 'width' int), (r3v7 'width' int) binds: [B:5:0x0030, B:18:0x0064, B:19:0x0066] A[DONT_GENERATE, DONT_INLINE]\l|int int r4 = (r2 \- r1) \- r3\lint int r5 = (int) ((r4 * r0) + 0.5f)\lint int r6 = r1 + r5\lint int r7 = r6 + r3\lr12.setFinalHorizontal(r6, r7)\lhorizontalSolvingPass(r9 + 1, r12, r11, r13)\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x0032}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0037}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0054}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0080|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static void androidx.constraintlayout.core.widgets.analyzer.Direct.solveHorizontalMatchConstraint((r9v0 'level' int A[D('level' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'layout' androidx.constraintlayout.core.widgets.ConstraintWidget A[D('layout' androidx.constraintlayout.core.widgets.ConstraintWidget), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'measurer' androidx.constraintlayout.core.widgets.analyzer.BasicMeasure$Measurer A[D('measurer' androidx.constraintlayout.core.widgets.analyzer.BasicMeasure$Measurer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'widget' androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'isRtl' boolean A[D('isRtl' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0064 \-\> B:20:0x006c, CROSS_EDGE: B:11:0x0041 \-\> B:12:0x0049, CROSS_EDGE: B:15:0x0058 \-\> B:17:0x005c, CROSS_EDGE: B:14:0x0056 \-\> B:17:0x005c, CROSS_EDGE: B:5:0x0030 \-\> B:20:0x006c, CROSS_EDGE: B:3:0x0022 \-\> B:21:0x0080\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_22[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_20[style=dashed];
Node_7 -> Node_8;
Node_7 -> Node_13[style=dashed];
Node_9 -> Node_10;
Node_9 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_17;
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_20[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_0 -> Node_2;
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_13 -> Node_14;
Node_21 -> Node_1;
Node_22 -> Node_1;
}

