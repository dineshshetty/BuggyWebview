digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.RunGroup.traverseEnd(Landroidx\/constraintlayout\/core\/widgets\/analyzer\/DependencyNode;J)J" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: IGET  (r0 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun) = \l  (r11 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('node' androidx.constraintlayout.core.widgets.analyzer.DependencyNode)])\l androidx.constraintlayout.core.widgets.analyzer.DependencyNode.run androidx.constraintlayout.core.widgets.analyzer.WidgetRun  (LINE:89)\l0x0002: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('run' androidx.constraintlayout.core.widgets.analyzer.WidgetRun)]) androidx.constraintlayout.core.widgets.analyzer.HelperReferences  (LINE:90)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|0x0004: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0007 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|RETURN\l|0x0006: RETURN  (r12 I:long A[D('startPosition' long)])  (LINE:91)\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|0x0007: MOVE  (r1 I:??[long, double]) = (r12 I:??[long, double] A[D('startPosition' long)])  (LINE:93)\l0x0008: IGET  (r3 I:java.util.List\<androidx.constraintlayout.core.widgets.analyzer.Dependency\>) = \l  (r11 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('node' androidx.constraintlayout.core.widgets.analyzer.DependencyNode)])\l androidx.constraintlayout.core.widgets.analyzer.DependencyNode.dependencies java.util.List  (LINE:97)\l0x000a: INVOKE  (r3 I:int) = (r3 I:java.util.List) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l0x000e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:98)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|LOOP_START\lLOOP:0: B:29:0x000f\-\>B:36:0x0031\l|0x000f: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:41:0x0034 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: IGET  (r5 I:java.util.List\<androidx.constraintlayout.core.widgets.analyzer.Dependency\>) = \l  (r11 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('node' androidx.constraintlayout.core.widgets.analyzer.DependencyNode)])\l androidx.constraintlayout.core.widgets.analyzer.DependencyNode.dependencies java.util.List  (LINE:99)\l0x0013: INVOKE  (r5 I:java.lang.Object) = (r5 I:java.util.List), (r4 I:int A[D('i' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0017: CHECK_CAST (r5 I:androidx.constraintlayout.core.widgets.analyzer.Dependency) = (androidx.constraintlayout.core.widgets.analyzer.Dependency) (r5 I:??[OBJECT, ARRAY]) \l0x0019: INSTANCE_OF  (r6 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('dependency' androidx.constraintlayout.core.widgets.analyzer.Dependency)]) androidx.constraintlayout.core.widgets.analyzer.DependencyNode  (LINE:100)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001b|0x001b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0031 \l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|0x001d: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('dependency' androidx.constraintlayout.core.widgets.analyzer.Dependency)])  (LINE:101)\l0x001e: CHECK_CAST (r6 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode) = (androidx.constraintlayout.core.widgets.analyzer.DependencyNode) (r6 I:??[OBJECT, ARRAY]) \l0x0020: IGET  (r7 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun) = \l  (r6 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('nextNode' androidx.constraintlayout.core.widgets.analyzer.DependencyNode)])\l androidx.constraintlayout.core.widgets.analyzer.DependencyNode.run androidx.constraintlayout.core.widgets.analyzer.WidgetRun  (LINE:102)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0022|0x0022: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('run' androidx.constraintlayout.core.widgets.analyzer.WidgetRun)])  \-\> B:35:0x0025 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0025|0x0025: IGET  (r7 I:int) = \l  (r6 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('nextNode' androidx.constraintlayout.core.widgets.analyzer.DependencyNode)])\l androidx.constraintlayout.core.widgets.analyzer.DependencyNode.margin int  (LINE:106)\l0x0027: CAST (r7 I:long) = (long) (r7 I:int) \l0x0028: ARITH  (r7 I:long) = (r7 I:long) + (r12 I:long A[D('startPosition' long)]) \l0x0029: INVOKE  (r7 I:long) = \l  (r10 I:androidx.constraintlayout.core.widgets.analyzer.RunGroup)\l  (r6 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('nextNode' androidx.constraintlayout.core.widgets.analyzer.DependencyNode)])\l  (r7 I:long)\l type: DIRECT call: androidx.constraintlayout.core.widgets.analyzer.RunGroup.traverseEnd(androidx.constraintlayout.core.widgets.analyzer.DependencyNode, long):long A[MD:(androidx.constraintlayout.core.widgets.analyzer.DependencyNode, long):long (m)]\l0x002d: INVOKE  (r1 I:long A[D('position' long)]) = (r1 I:long A[D('position' long)]), (r7 I:long) type: STATIC call: java.lang.Math.min(long, long):long A[MD:(long, long):long (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0031|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0031|LOOP_END\lLOOP:0: B:29:0x000f\-\>B:36:0x0031\l|0x0031: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:98)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0031|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0031|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0034|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0034|0x0034: IGET  (r4 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('i' int)]) = \l  (r0 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun A[D('run' androidx.constraintlayout.core.widgets.analyzer.WidgetRun)])\l androidx.constraintlayout.core.widgets.analyzer.WidgetRun.end androidx.constraintlayout.core.widgets.analyzer.DependencyNode  (LINE:110)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0036|0x0036: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('node' androidx.constraintlayout.core.widgets.analyzer.DependencyNode)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:? \l}"];
Node_39 [shape=record,label="{39\:\ 0x0038|0x0038: INVOKE  (r4 I:long) = \l  (r0 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun A[D('run' androidx.constraintlayout.core.widgets.analyzer.WidgetRun)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.analyzer.WidgetRun.getWrapDimension():long A[MD:():long (m)] (LINE:112)\l0x003c: IGET  (r6 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode) = \l  (r0 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun A[D('run' androidx.constraintlayout.core.widgets.analyzer.WidgetRun)])\l androidx.constraintlayout.core.widgets.analyzer.WidgetRun.start androidx.constraintlayout.core.widgets.analyzer.DependencyNode  (LINE:113)\l0x003e: ARITH  (r7 I:long) = (r12 I:long A[D('startPosition' long)]) \- (r4 I:long A[D('dimension' long)]) \l0x0040: INVOKE  (r6 I:long) = \l  (r10 I:androidx.constraintlayout.core.widgets.analyzer.RunGroup)\l  (r6 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode)\l  (r7 I:long)\l type: DIRECT call: androidx.constraintlayout.core.widgets.analyzer.RunGroup.traverseEnd(androidx.constraintlayout.core.widgets.analyzer.DependencyNode, long):long A[MD:(androidx.constraintlayout.core.widgets.analyzer.DependencyNode, long):long (m)]\l0x0044: INVOKE  (r1 I:long A[D('position' long)]) = (r1 I:long A[D('position' long)]), (r6 I:long) type: STATIC call: java.lang.Math.min(long, long):long A[MD:(long, long):long (c)]\l0x0048: ARITH  (r6 I:long) = (r12 I:long A[D('startPosition' long)]) \- (r4 I:long A[D('dimension' long)])  (LINE:114)\l0x004a: IGET  (r8 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode) = \l  (r0 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun A[D('run' androidx.constraintlayout.core.widgets.analyzer.WidgetRun)])\l androidx.constraintlayout.core.widgets.analyzer.WidgetRun.start androidx.constraintlayout.core.widgets.analyzer.DependencyNode \l0x004c: IGET  (r8 I:int) = (r8 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode) androidx.constraintlayout.core.widgets.analyzer.DependencyNode.margin int \l0x004e: CAST (r8 I:long) = (long) (r8 I:int) \l0x004f: ARITH  (r6 I:long) = (r6 I:long) \- (r8 I:long) \l0x0050: INVOKE  (r1 I:long A[D('position' long)]) = (r1 I:long A[D('position' long)]), (r6 I:long) type: STATIC call: java.lang.Math.min(long, long):long A[MD:(long, long):long (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0054|RETURN\lORIG_RETURN\l|0x0054: RETURN  (r1 I:long A[D('position' long)])  (LINE:117)\l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x0054: RETURN  (r1 I:long A[D('position' long)]) A[SYNTHETIC] (LINE:117)\l}"];
MethodNode[shape=record,label="{private long androidx.constraintlayout.core.widgets.analyzer.RunGroup.traverseEnd((r10 'this' I:androidx.constraintlayout.core.widgets.analyzer.RunGroup A[IMMUTABLE_TYPE, THIS]), (r11 I:androidx.constraintlayout.core.widgets.analyzer.DependencyNode A[D('node' androidx.constraintlayout.core.widgets.analyzer.DependencyNode), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:long A[D('startPosition' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:36:0x0031 \-\> B:29:0x000f, CROSS_EDGE: B:33:0x0022 \-\> B:36:0x0031, CROSS_EDGE: B:31:0x001b \-\> B:36:0x0031, CROSS_EDGE: B:40:0x0054 \-\> B:24:?, CROSS_EDGE: B:38:0x0036 \-\> B:40:0x0054\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0031: r5 'dependency' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/Dependency;\l  0x0020\-0x0031: r6 'nextNode' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/DependencyNode;\l  0x000f\-0x0034: r4 'i' I\l  0x003c\-0x0054: r4 'dimension' J\l  0x0002\-0x0054: r0 'run' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetRun;\l  0x0008\-0x0054: r1 'position' J\l  0x000e\-0x0054: r3 'count' I\l  \-1 \-0x0054: r11 'node' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/DependencyNode;\l  \-1 \-0x0054: r12 'startPosition' J\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_24;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_41;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_43;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_44[style=dashed];
Node_35 -> Node_42;
Node_42 -> Node_36;
Node_36 -> Node_29;
Node_44 -> Node_36;
Node_43 -> Node_36;
Node_41 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_45;
Node_39 -> Node_40;
Node_40 -> Node_24;
Node_45 -> Node_24;
}

