digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.WidgetRun.getLimitedDimension(II)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('orientation' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0018  (LINE:235)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IGET  (r0 I:androidx.constraintlayout.core.widgets.ConstraintWidget) = (r3 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun) androidx.constraintlayout.core.widgets.analyzer.WidgetRun.widget androidx.constraintlayout.core.widgets.ConstraintWidget  (LINE:236)\l0x0004: IGET  (r0 I:int) = (r0 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mMatchConstraintMaxWidth int \l0x0006: IGET  (r1 I:androidx.constraintlayout.core.widgets.ConstraintWidget) = (r3 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun) androidx.constraintlayout.core.widgets.analyzer.WidgetRun.widget androidx.constraintlayout.core.widgets.ConstraintWidget  (LINE:237)\l0x0008: IGET  (r1 I:int) = (r1 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mMatchConstraintMinWidth int \l0x000a: INVOKE  (r2 I:int) = (r1 I:int A[D('min' int)]), (r4 I:int A[D('dimension' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)] (LINE:238)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: IF  (r0 I:??[int, byte, short, char] A[D('max' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:24:0x0014  (LINE:239)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|0x0010: INVOKE  (r2 I:int A[D('value' int)]) = (r0 I:int A[D('max' int)]), (r4 I:int A[D('dimension' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:240)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' int)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dimension' int)])  \-\> B:35:?  (LINE:242)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|0x0016: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dimension' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' int)])  (LINE:243)\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN  (r4 I:int A[D('dimension' int)]) A[SYNTHETIC] (LINE:256)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN  (r4 I:int A[D('dimension' int)]) A[SYNTHETIC] (LINE:256)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: IGET  (r0 I:androidx.constraintlayout.core.widgets.ConstraintWidget) = (r3 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun) androidx.constraintlayout.core.widgets.analyzer.WidgetRun.widget androidx.constraintlayout.core.widgets.ConstraintWidget  (LINE:246)\l0x001a: IGET  (r0 I:int) = (r0 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mMatchConstraintMaxHeight int \l0x001c: IGET  (r1 I:androidx.constraintlayout.core.widgets.ConstraintWidget) = (r3 I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun) androidx.constraintlayout.core.widgets.analyzer.WidgetRun.widget androidx.constraintlayout.core.widgets.ConstraintWidget  (LINE:247)\l0x001e: IGET  (r1 I:int) = (r1 I:androidx.constraintlayout.core.widgets.ConstraintWidget) androidx.constraintlayout.core.widgets.ConstraintWidget.mMatchConstraintMinHeight int \l0x0020: INVOKE  (r2 I:int) = (r1 I:int A[D('min' int)]), (r4 I:int A[D('dimension' int)]) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)] (LINE:248)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|0x0024: IF  (r0 I:??[int, byte, short, char] A[D('max' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:30:0x002a  (LINE:249)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0026|0x0026: INVOKE  (r2 I:int A[D('value' int)]) = (r0 I:int A[D('max' int)]), (r4 I:int A[D('dimension' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:250)\l}"];
Node_30 [shape=record,label="{30\:\ 0x002a|0x002a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('value' int)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('dimension' int)])  \-\> B:33:?  (LINE:252)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002c|0x002c: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dimension' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' int)])  (LINE:253)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002d|RETURN\lORIG_RETURN\l|0x002d: RETURN  (r4 I:int A[D('dimension' int)])  (LINE:256)\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN  (r4 I:int A[D('dimension' int)]) A[SYNTHETIC] (LINE:256)\l}"];
MethodNode[shape=record,label="{public final int androidx.constraintlayout.core.widgets.analyzer.WidgetRun.getLimitedDimension((r3 'this' I:androidx.constraintlayout.core.widgets.analyzer.WidgetRun A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('dimension' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('orientation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0014 \-\> B:32:0x002d, CROSS_EDGE: B:22:0x000e \-\> B:24:0x0014, CROSS_EDGE: B:31:0x002c \-\> B:32:0x002d, CROSS_EDGE: B:30:0x002a \-\> B:32:0x002d, CROSS_EDGE: B:28:0x0024 \-\> B:30:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0017: r0 'max' I\l  0x000a\-0x0017: r1 'min' I\l  0x000e\-0x0017: r2 'value' I\l  0x001c\-0x002d: r0 'max' I\l  0x0020\-0x002d: r1 'min' I\l  0x0024\-0x002d: r2 'value' I\l  \-1 \-0x002d: r4 'dimension' I\l  \-1 \-0x002d: r5 'orientation' I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_35;
Node_25 -> Node_34;
Node_34 -> Node_19;
Node_35 -> Node_19;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_32;
Node_32 -> Node_19;
Node_33 -> Node_19;
}

