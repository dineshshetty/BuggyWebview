digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.WidgetRun.getLimitedDimension(II)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|if (r5 != 0) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|int r0 = r3.widget.mMatchConstraintMaxWidth\lint r1 = r3.widget.mMatchConstraintMinWidth\lint r2 = java.lang.Math.max(r1, r4)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|if (r0 \<= 0) goto L5\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|int r2 = java.lang.Math.min(r0, r4)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|PHI: r2 \l  PHI: (r2v4 'value' int) = (r2v3 'value' int), (r2v5 'value' int) binds: [B:22:0x000e, B:23:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == r4) goto L9\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|int r0 = r3.widget.mMatchConstraintMaxHeight\lint r1 = r3.widget.mMatchConstraintMinHeight\lint r2 = java.lang.Math.max(r1, r4)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|if (r0 \<= 0) goto L13\l}"];
Node_29 [shape=record,label="{29\:\ 0x0026|int r2 = java.lang.Math.min(r0, r4)\l}"];
Node_30 [shape=record,label="{30\:\ 0x002a|PHI: r2 \l  PHI: (r2v1 'value' int) = (r2v0 'value' int), (r2v2 'value' int) binds: [B:28:0x0024, B:29:0x0026] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == r4) goto L16\l}"];
Node_31 [shape=record,label="{31\:\ 0x002c}"];
Node_32 [shape=record,label="{32\:\ 0x002d|RETURN\lORIG_RETURN\l|return r2\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
MethodNode[shape=record,label="{public final int androidx.constraintlayout.core.widgets.analyzer.WidgetRun.getLimitedDimension((r3v0 'this' androidx.constraintlayout.core.widgets.analyzer.WidgetRun A[IMMUTABLE_TYPE, THIS]), (r4v0 'dimension' int A[D('dimension' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'orientation' int A[D('orientation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0014 \-\> B:32:0x002d, CROSS_EDGE: B:22:0x000e \-\> B:24:0x0014, CROSS_EDGE: B:31:0x002c \-\> B:32:0x002d, CROSS_EDGE: B:30:0x002a \-\> B:32:0x002d, CROSS_EDGE: B:28:0x0024 \-\> B:30:0x002a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_35;
Node_25 -> Node_34;
Node_34 -> Node_19;
Node_35 -> Node_19;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_31 -> Node_32;
Node_32 -> Node_19;
Node_33 -> Node_19;
}

