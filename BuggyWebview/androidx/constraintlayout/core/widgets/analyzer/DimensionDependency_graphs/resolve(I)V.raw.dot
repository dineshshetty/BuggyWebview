digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.DimensionDependency.resolve(I)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r2 I:androidx.constraintlayout.core.widgets.analyzer.DimensionDependency) androidx.constraintlayout.core.widgets.analyzer.DimensionDependency.resolved boolean  (LINE:33)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0005 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:34)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:36)\l0x0006: IPUT  (r0 I:boolean), (r2 I:androidx.constraintlayout.core.widgets.analyzer.DimensionDependency) androidx.constraintlayout.core.widgets.analyzer.DimensionDependency.resolved boolean \l0x0008: IPUT  (r3 I:int A[D('value' int)]), (r2 I:androidx.constraintlayout.core.widgets.analyzer.DimensionDependency) androidx.constraintlayout.core.widgets.analyzer.DimensionDependency.value int  (LINE:37)\l0x000a: IGET  (r0 I:java.util.List\<androidx.constraintlayout.core.widgets.analyzer.Dependency\>) = (r2 I:androidx.constraintlayout.core.widgets.analyzer.DimensionDependency) androidx.constraintlayout.core.widgets.analyzer.DimensionDependency.dependencies java.util.List  (LINE:38)\l0x000c: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.List) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|LOOP_START\lLOOP:0: B:17:0x0010\-\>B:19:0x0016\l|0x0010: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0020 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|LOOP_END\lLOOP:0: B:17:0x0010\-\>B:19:0x0016\l|0x0016: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001a: CHECK_CAST (r1 I:androidx.constraintlayout.core.widgets.analyzer.Dependency) = (androidx.constraintlayout.core.widgets.analyzer.Dependency) (r1 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  \l  (r1 I:androidx.constraintlayout.core.widgets.analyzer.Dependency A[D('node' androidx.constraintlayout.core.widgets.analyzer.Dependency)])\l  (r1 I:androidx.constraintlayout.core.widgets.analyzer.Dependency A[D('node' androidx.constraintlayout.core.widgets.analyzer.Dependency)])\l type: INTERFACE call: androidx.constraintlayout.core.widgets.analyzer.Dependency.update(androidx.constraintlayout.core.widgets.analyzer.Dependency):void A[MD:(androidx.constraintlayout.core.widgets.analyzer.Dependency):void (m)] (LINE:39)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0020|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0020|RETURN\l|0x0020: RETURN    (LINE:41)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.widgets.analyzer.DimensionDependency.resolve((r2 'this' I:androidx.constraintlayout.core.widgets.analyzer.DimensionDependency A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('value' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0016 \-\> B:17:0x0010, CROSS_EDGE: B:20:0x0020 \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x001f: r1 'node' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/Dependency;\l  \-1 \-0x0020: r3 'value' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.widgets.analyzer.DependencyNode.resolve(int):void]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_12;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_17;
Node_21 -> Node_20;
Node_20 -> Node_12;
}

