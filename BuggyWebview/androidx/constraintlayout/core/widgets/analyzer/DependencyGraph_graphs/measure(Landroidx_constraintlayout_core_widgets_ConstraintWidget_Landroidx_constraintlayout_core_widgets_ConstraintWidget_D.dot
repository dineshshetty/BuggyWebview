digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.DependencyGraph.measure(Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget$DimensionBehaviour;ILandroidx\/constraintlayout\/core\/widgets\/ConstraintWidget$DimensionBehaviour;I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r2.mMeasure.horizontalBehavior = r4\lr2.mMeasure.verticalBehavior = r6\lr2.mMeasure.horizontalDimension = r5\lr2.mMeasure.verticalDimension = r7\lr2.mMeasurer.measure(r3, r2.mMeasure)\lr3.setWidth(r2.mMeasure.measuredWidth)\lr3.setHeight(r2.mMeasure.measuredHeight)\lr3.setHasBaseline(r2.mMeasure.measuredHasBaseline)\lr3.setBaselineDistance(r2.mMeasure.measuredBaseline)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0033|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.core.widgets.analyzer.DependencyGraph.measure((r2v0 'this' androidx.constraintlayout.core.widgets.analyzer.DependencyGraph A[IMMUTABLE_TYPE, THIS]), (r3v0 'widget' androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'horizontalBehavior' androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour A[D('horizontalBehavior' androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'horizontalDimension' int A[D('horizontalDimension' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'verticalBehavior' androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour A[D('verticalBehavior' androidx.constraintlayout.core.widgets.ConstraintWidget$DimensionBehaviour), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'verticalDimension' int A[D('verticalDimension' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

