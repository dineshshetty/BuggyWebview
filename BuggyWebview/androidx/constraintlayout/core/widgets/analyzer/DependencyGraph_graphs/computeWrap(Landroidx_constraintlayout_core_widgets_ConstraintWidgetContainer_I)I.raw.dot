digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.DependencyGraph.computeWrap(Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidgetContainer;I)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.util.ArrayList\<androidx.constraintlayout.core.widgets.analyzer.RunGroup\>) = (r7 I:androidx.constraintlayout.core.widgets.analyzer.DependencyGraph) androidx.constraintlayout.core.widgets.analyzer.DependencyGraph.mGroups java.util.ArrayList  (LINE:65)\l0x0002: INVOKE  (r0 I:int) = (r0 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l0x0006: CONST  (r1 I:??[long, double]) = (0 ??[long, double])  (LINE:66)\l0x0008: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:67)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|LOOP_START\lLOOP:0: B:3:0x0009\-\>B:4:0x000b\l|0x0009: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:7:0x001e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|LOOP_END\lLOOP:0: B:3:0x0009\-\>B:4:0x000b\l|0x000b: IGET  (r4 I:java.util.ArrayList\<androidx.constraintlayout.core.widgets.analyzer.RunGroup\>) = (r7 I:androidx.constraintlayout.core.widgets.analyzer.DependencyGraph) androidx.constraintlayout.core.widgets.analyzer.DependencyGraph.mGroups java.util.ArrayList  (LINE:68)\l0x000d: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r3 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0011: CHECK_CAST (r4 I:androidx.constraintlayout.core.widgets.analyzer.RunGroup) = (androidx.constraintlayout.core.widgets.analyzer.RunGroup) (r4 I:??[OBJECT, ARRAY]) \l0x0013: INVOKE  (r5 I:long) = \l  (r4 I:androidx.constraintlayout.core.widgets.analyzer.RunGroup A[D('run' androidx.constraintlayout.core.widgets.analyzer.RunGroup)])\l  (r8 I:androidx.constraintlayout.core.widgets.ConstraintWidgetContainer A[D('container' androidx.constraintlayout.core.widgets.ConstraintWidgetContainer)])\l  (r9 I:int A[D('orientation' int)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.analyzer.RunGroup.computeWrapSize(androidx.constraintlayout.core.widgets.ConstraintWidgetContainer, int):long A[MD:(androidx.constraintlayout.core.widgets.ConstraintWidgetContainer, int):long (m)] (LINE:69)\l0x0017: INVOKE  (r1 I:long A[D('wrapSize' long)]) = (r1 I:long A[D('wrapSize' long)]), (r5 I:long A[D('size' long)]) type: STATIC call: java.lang.Math.max(long, long):long A[MD:(long, long):long (c)] (LINE:70)\l0x001b: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:67)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|SYNTHETIC\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|0x001e: CAST (r3 I:int A[D('i' int)]) = (int) (r1 I:long A[D('wrapSize' long)])  (LINE:72)\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|RETURN\l|0x001f: RETURN  (r3 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private int androidx.constraintlayout.core.widgets.analyzer.DependencyGraph.computeWrap((r7 'this' I:androidx.constraintlayout.core.widgets.analyzer.DependencyGraph A[IMMUTABLE_TYPE, THIS]), (r8 I:androidx.constraintlayout.core.widgets.ConstraintWidgetContainer A[D('container' androidx.constraintlayout.core.widgets.ConstraintWidgetContainer), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('orientation' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x000b \-\> B:3:0x0009\lDebug Info:\l  0x0013\-0x001b: r4 'run' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/RunGroup;\l  0x0017\-0x001b: r5 'size' J\l  0x0009\-0x001e: r3 'i' I\l  0x0006\-0x001f: r0 'count' I\l  0x0008\-0x001f: r1 'wrapSize' J\l  \-1 \-0x001f: r8 'container' Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidgetContainer;\l  \-1 \-0x001f: r9 'orientation' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_3;
Node_7 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

