digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.WidgetGroup.intersectWith(Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetGroup;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:192)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0001|LOOP_START\lLOOP:0: B:17:0x0001\-\>B:23:0x0019\l|0x0001: IGET  (r1 I:java.util.ArrayList\<androidx.constraintlayout.core.widgets.ConstraintWidget\>) = (r3 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup) androidx.constraintlayout.core.widgets.analyzer.WidgetGroup.widgets java.util.ArrayList \l0x0003: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:27:0x001c \l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|0x0009: IGET  (r1 I:java.util.ArrayList\<androidx.constraintlayout.core.widgets.ConstraintWidget\>) = (r3 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup) androidx.constraintlayout.core.widgets.analyzer.WidgetGroup.widgets java.util.ArrayList  (LINE:193)\l0x000b: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.ArrayList), (r0 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x000f: CHECK_CAST (r1 I:androidx.constraintlayout.core.widgets.ConstraintWidget) = (androidx.constraintlayout.core.widgets.ConstraintWidget) (r1 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r2 I:boolean) = \l  (r4 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup A[D('group' androidx.constraintlayout.core.widgets.analyzer.WidgetGroup)])\l  (r1 I:androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget)])\l type: DIRECT call: androidx.constraintlayout.core.widgets.analyzer.WidgetGroup.contains(androidx.constraintlayout.core.widgets.ConstraintWidget):boolean A[MD:(androidx.constraintlayout.core.widgets.ConstraintWidget):boolean (m)] (LINE:194)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0019 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|LOOP_END\lLOOP:0: B:17:0x0001\-\>B:23:0x0019\l|0x0019: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:192)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|RETURN\l|0x0017: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:195)\l0x0018: RETURN  (r2 I:boolean) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x001c|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x001c|RETURN\l|0x001c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:198)\l0x001d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.widgets.analyzer.WidgetGroup.intersectWith((r3 'this' I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup A[IMMUTABLE_TYPE, THIS]), (r4 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup A[D('group' androidx.constraintlayout.core.widgets.analyzer.WidgetGroup), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0019 \-\> B:17:0x0001, CROSS_EDGE: B:25:0x001d \-\> B:15:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0019: r1 'widget' Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;\l  0x0001\-0x001c: r0 'i' I\l  \-1 \-0x001d: r4 'group' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetGroup;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_23;
Node_20 -> Node_26[style=dashed];
Node_23 -> Node_17;
Node_26 -> Node_21;
Node_21 -> Node_15;
Node_27 -> Node_24;
Node_24 -> Node_15;
}

