digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.Grouping.findGroup(Ljava\/util\/ArrayList;I)Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetGroup;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = \l  (r4 I:java.util.ArrayList A[D('horizontalDependencyLists' java.util.ArrayList\<androidx.constraintlayout.core.widgets.analyzer.WidgetGroup\>)])\l type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)] (LINE:356)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:357)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|LOOP_START\lLOOP:0: B:3:0x0005\-\>B:7:0x0012\l|0x0005: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:10:0x0015 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: INVOKE  (r2 I:java.lang.Object) = \l  (r4 I:java.util.ArrayList A[D('horizontalDependencyLists' java.util.ArrayList\<androidx.constraintlayout.core.widgets.analyzer.WidgetGroup\>)])\l  (r1 I:int A[D('i' int)])\l type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:358)\l0x000b: CHECK_CAST (r2 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup) = (androidx.constraintlayout.core.widgets.analyzer.WidgetGroup) (r2 I:??[OBJECT, ARRAY]) \l0x000d: IGET  (r3 I:int) = \l  (r2 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup A[D('group' androidx.constraintlayout.core.widgets.analyzer.WidgetGroup)])\l androidx.constraintlayout.core.widgets.analyzer.WidgetGroup.id int  (LINE:359)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|0x000f: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('groupId' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0012 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|LOOP_END\lLOOP:0: B:3:0x0005\-\>B:7:0x0012\l|0x0012: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:357)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|RETURN\l|0x0011: RETURN  \l  (r2 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup A[D('group' androidx.constraintlayout.core.widgets.analyzer.WidgetGroup)])\l  (LINE:360)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0015|RETURN\l|0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:363)\l0x0016: RETURN  (r1 I:androidx.constraintlayout.core.widgets.analyzer.WidgetGroup) \l}"];
MethodNode[shape=record,label="{private static androidx.constraintlayout.core.widgets.analyzer.WidgetGroup androidx.constraintlayout.core.widgets.analyzer.Grouping.findGroup((r4 I:java.util.ArrayList\<androidx.constraintlayout.core.widgets.analyzer.WidgetGroup\> A[D('horizontalDependencyLists' java.util.ArrayList\<androidx.constraintlayout.core.widgets.analyzer.WidgetGroup\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('groupId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x0012 \-\> B:3:0x0005, CROSS_EDGE: B:9:0x0016 \-\> B:1:?\lDebug Info:\l  0x000d\-0x0012: r2 'group' Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetGroup;\l  0x0005\-0x0015: r1 'i' I\l  0x0004\-0x0016: r0 'count' I\l  0x0000\-0x0016: r4 'horizontalDependencyLists' Ljava\/util\/ArrayList;, signature: Ljava\/util\/ArrayList\<Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetGroup;\>;\l  \-1 \-0x0016: r5 'groupId' I\lSIGNATURE: (Ljava\/util\/ArrayList\<Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetGroup;\>;I)Landroidx\/constraintlayout\/core\/widgets\/analyzer\/WidgetGroup;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_11[style=dashed];
Node_7 -> Node_3;
Node_11 -> Node_6;
Node_6 -> Node_1;
Node_10 -> Node_8;
Node_8 -> Node_1;
}

