digraph "CFG forandroidx.constraintlayout.core.widgets.analyzer.HelperReferences.update(Landroidx\/constraintlayout\/core\/widgets\/analyzer\/Dependency;)V" {
Node_25 [shape=record,label="{25\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0000|androidx.constraintlayout.core.widgets.Barrier r0 = (androidx.constraintlayout.core.widgets.Barrier) r8.widget\lint r1 = r0.getBarrierType()\lr2 = \-1\lr3 = 0\ljava.util.Iterator r4 = r8.start.targets.iterator()\l}"];
Node_28 [shape=record,label="{28\:\ 0x0012|LOOP_START\lLOOP:0: B:28:0x0012\-\>B:46:0x0012\lPHI: r2 r3 \l  PHI: (r2v1 'min' int) = (r2v0 'min' int), (r2v3 'min' int) binds: [B:27:0x0000, B:46:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'max' int) = (r3v0 'max' int), (r3v2 'max' int) binds: [B:27:0x0000, B:46:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|if (r4.hasNext() == false) goto L14\l}"];
Node_30 [shape=record,label="{30\:\ 0x0018|androidx.constraintlayout.core.widgets.analyzer.DependencyNode r5 = r4.next()\lint r6 = r5.value\l}"];
Node_31 [shape=record,label="{31\:\ 0x0021|if (r2 == (\-1)) goto L13\l}"];
Node_32 [shape=record,label="{32\:\ 0x0023|if (r6 \>= r2) goto L7\l}"];
Node_34 [shape=record,label="{34\:\ 0x0026|PHI: r2 \l  PHI: (r2v3 'min' int) = (r2v2 'min' int), (r2v1 'min' int) binds: [B:33:0x0025, B:32:0x0023] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r6) goto L12\l}"];
Node_44 [shape=record,label="{44\:\ 0x0028|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0028|r3 = r6\l}"];
Node_48 [shape=record,label="{48\:\ 0x0012|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0012|LOOP_END\lSYNTHETIC\lLOOP:0: B:28:0x0012\-\>B:46:0x0012\lPHI: r3 \l  PHI: (r3v2 'max' int) = (r3v1 'max' int), (r3v3 'max' int) binds: [B:47:0x0012, B:48:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0012|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0025|r2 = r6\l}"];
Node_45 [shape=record,label="{45\:\ 0x002a|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x002a|if (r1 == 0) goto L21\l}"];
Node_38 [shape=record,label="{38\:\ 0x002c}"];
Node_39 [shape=record,label="{39\:\ 0x002d|if (r1 != 2) goto L18\l}"];
Node_41 [shape=record,label="{41\:\ 0x0030|r8.start.resolve(r0.getMargin() + r3)\l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_26 [shape=record,label="{26\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x003b|r8.start.resolve(r0.getMargin() + r2)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0045|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.widgets.analyzer.HelperReferences.update((r8v0 'this' androidx.constraintlayout.core.widgets.analyzer.HelperReferences A[IMMUTABLE_TYPE, THIS]), (r9v0 'dependency' androidx.constraintlayout.core.widgets.analyzer.Dependency A[D('dependency' androidx.constraintlayout.core.widgets.analyzer.Dependency), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0028 \-\> B:28:0x0012, BACK_EDGE: B:34:0x0026 \-\> B:28:0x0012, CROSS_EDGE: B:32:0x0023 \-\> B:34:0x0026, CROSS_EDGE: B:31:0x0021 \-\> B:33:0x0025, CROSS_EDGE: B:42:0x003b \-\> B:43:0x0045, CROSS_EDGE: B:37:0x002a \-\> B:42:0x003b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.widgets.analyzer.Dependency.update(androidx.constraintlayout.core.widgets.analyzer.Dependency):void]\l}"];
MethodNode -> Node_25;Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_45;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_34 -> Node_44[style=dashed];
Node_34 -> Node_47;
Node_44 -> Node_35;
Node_35 -> Node_48;
Node_48 -> Node_46;
Node_46 -> Node_28;
Node_47 -> Node_46;
Node_33 -> Node_34;
Node_45 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_42;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_42[style=dashed];
Node_41 -> Node_49;
Node_49 -> Node_26;
Node_42 -> Node_43;
Node_43 -> Node_26;
}

