digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintWidgetContainer.updateChildrenFromSolver(Landroidx\/constraintlayout\/core\/LinearSystem;[Z)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:456)\l0x0001: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0002: APUT  \l  (r8 I:boolean[] A[D('flags' boolean[]), IMMUTABLE_TYPE])\l  (r0 I:??[int, short, byte, char])\l  (r1 I:boolean A[IMMUTABLE_TYPE])\l \l0x0004: CONST  (r0 I:??[int, float, short, byte, char]) = (64 ??[int, float, short, byte, char])  (LINE:457)\l0x0006: INVOKE  (r0 I:boolean) = (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidgetContainer), (r0 I:int) type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintWidgetContainer.optimizeFor(int):boolean A[MD:(int):boolean (m)]\l0x000a: INVOKE  \l  (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidgetContainer)\l  (r7 I:androidx.constraintlayout.core.LinearSystem A[D('system' androidx.constraintlayout.core.LinearSystem)])\l  (r0 I:boolean A[D('optimize' boolean)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintWidgetContainer.updateFromSolver(androidx.constraintlayout.core.LinearSystem, boolean):void A[MD:(androidx.constraintlayout.core.LinearSystem, boolean):void (m)] (LINE:458)\l0x000d: IGET  (r1 I:java.util.ArrayList\<androidx.constraintlayout.core.widgets.ConstraintWidget\>) = (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidgetContainer) androidx.constraintlayout.core.widgets.ConstraintWidgetContainer.mChildren java.util.ArrayList  (LINE:459)\l0x000f: INVOKE  (r1 I:int) = (r1 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l0x0013: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:460)\l0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:461)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0015|LOOP_START\lLOOP:0: B:15:0x0015\-\>B:19:0x0029\l|0x0015: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:21:0x002c \l}"];
Node_16 [shape=record,label="{16\:\ 0x0017|0x0017: IGET  (r4 I:java.util.ArrayList\<androidx.constraintlayout.core.widgets.ConstraintWidget\>) = (r6 I:androidx.constraintlayout.core.widgets.ConstraintWidgetContainer) androidx.constraintlayout.core.widgets.ConstraintWidgetContainer.mChildren java.util.ArrayList  (LINE:462)\l0x0019: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r3 I:int A[D('i' int)]) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x001d: CHECK_CAST (r4 I:androidx.constraintlayout.core.widgets.ConstraintWidget) = (androidx.constraintlayout.core.widgets.ConstraintWidget) (r4 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  \l  (r4 I:androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget)])\l  (r7 I:androidx.constraintlayout.core.LinearSystem A[D('system' androidx.constraintlayout.core.LinearSystem)])\l  (r0 I:boolean A[D('optimize' boolean)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintWidget.updateFromSolver(androidx.constraintlayout.core.LinearSystem, boolean):void A[MD:(androidx.constraintlayout.core.LinearSystem, boolean):void (m)] (LINE:463)\l0x0022: INVOKE  (r5 I:boolean) = \l  (r4 I:androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintWidget.hasDimensionOverride():boolean A[MD:():boolean (m)] (LINE:464)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0026|0x0026: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0029 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0028|0x0028: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('hasOverride' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:465)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0029|LOOP_END\lLOOP:0: B:15:0x0015\-\>B:19:0x0029\l|0x0029: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:461)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0029|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x002c|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x002c|RETURN\l|0x002c: RETURN  (r2 I:boolean A[D('hasOverride' boolean)])  (LINE:468)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.widgets.ConstraintWidgetContainer.updateChildrenFromSolver((r6 'this' I:androidx.constraintlayout.core.widgets.ConstraintWidgetContainer A[IMMUTABLE_TYPE, THIS]), (r7 I:androidx.constraintlayout.core.LinearSystem A[D('system' androidx.constraintlayout.core.LinearSystem), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean[] A[D('flags' boolean[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0029 \-\> B:15:0x0015, CROSS_EDGE: B:17:0x0026 \-\> B:19:0x0029\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0029: r4 'widget' Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;\l  0x0015\-0x002c: r3 'i' I\l  0x000a\-0x002c: r0 'optimize' Z\l  0x0013\-0x002c: r1 'count' I\l  0x0014\-0x002c: r2 'hasOverride' Z\l  \-1 \-0x002c: r7 'system' Landroidx\/constraintlayout\/core\/LinearSystem;\l  \-1 \-0x002c: r8 'flags' [Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_22;
Node_22 -> Node_19;
Node_19 -> Node_15;
Node_23 -> Node_19;
Node_21 -> Node_20;
Node_20 -> Node_13;
}

