digraph "CFG forandroidx.constraintlayout.core.widgets.HelperWidget.add(Landroidx\/constraintlayout\/core\/widgets\/ConstraintWidget;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|if (r4 == r3) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|if (r4 != null) goto L3\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|int r0 = r3.mWidgetsCount + 1\landroidx.constraintlayout.core.widgets.ConstraintWidget[] r1 = r3.mWidgets\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|if (r0 \<= r1.length) goto L6\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|r3.mWidgets = (androidx.constraintlayout.core.widgets.ConstraintWidget[]) java.util.Arrays.copyOf(r1, r1.length * 2)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|androidx.constraintlayout.core.widgets.ConstraintWidget[] r0 = r3.mWidgets\lint r1 = r3.mWidgetsCount\lr0[r1] = r4\lr3.mWidgetsCount = r1 + 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x0023|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.widgets.HelperWidget.add((r3v0 'this' androidx.constraintlayout.core.widgets.HelperWidget A[IMMUTABLE_TYPE, THIS]), (r4v0 'widget' androidx.constraintlayout.core.widgets.ConstraintWidget A[D('widget' androidx.constraintlayout.core.widgets.ConstraintWidget), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000c \-\> B:20:0x0019, CROSS_EDGE: B:22:0x0024 \-\> B:13:?, CROSS_EDGE: B:14:0x0000 \-\> B:22:0x0024\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.widgets.Helper.add(androidx.constraintlayout.core.widgets.ConstraintWidget):void]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_22;
Node_15 -> Node_17;
Node_15 -> Node_23[style=dashed];
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_23 -> Node_13;
Node_22 -> Node_13;
}

