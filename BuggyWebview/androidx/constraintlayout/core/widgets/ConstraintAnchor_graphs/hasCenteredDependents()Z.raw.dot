digraph "CFG forandroidx.constraintlayout.core.widgets.ConstraintAnchor.hasCenteredDependents()Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:java.util.HashSet\<androidx.constraintlayout.core.widgets.ConstraintAnchor\>) = (r5 I:androidx.constraintlayout.core.widgets.ConstraintAnchor) androidx.constraintlayout.core.widgets.ConstraintAnchor.mDependents java.util.HashSet  (LINE:57)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0006 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:boolean)  (LINE:58)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|0x0006: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.HashSet) type: VIRTUAL call: java.util.HashSet.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:60)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|LOOP_START\lLOOP:0: B:22:0x000a\-\>B:25:0x001e\l|0x000a: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0023 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0014: CHECK_CAST (r2 I:androidx.constraintlayout.core.widgets.ConstraintAnchor) = (androidx.constraintlayout.core.widgets.ConstraintAnchor) (r2 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r3 I:androidx.constraintlayout.core.widgets.ConstraintAnchor) = \l  (r2 I:androidx.constraintlayout.core.widgets.ConstraintAnchor A[D('anchor' androidx.constraintlayout.core.widgets.ConstraintAnchor)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintAnchor.getOpposite():androidx.constraintlayout.core.widgets.ConstraintAnchor A[MD:():androidx.constraintlayout.core.widgets.ConstraintAnchor (m)] (LINE:61)\l0x001a: INVOKE  (r4 I:boolean) = \l  (r3 I:androidx.constraintlayout.core.widgets.ConstraintAnchor A[D('opposite' androidx.constraintlayout.core.widgets.ConstraintAnchor)])\l type: VIRTUAL call: androidx.constraintlayout.core.widgets.ConstraintAnchor.isConnected():boolean A[MD:():boolean (m)] (LINE:62)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|LOOP_END\lLOOP:0: B:22:0x000a\-\>B:25:0x001e\l|0x001e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000a \l}"];
Node_30 [shape=record,label="{30\:\ 0x0020|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|RETURN\l|0x0020: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:63)\l0x0021: RETURN  (r0 I:boolean) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|RETURN\l|0x0023: RETURN  (r1 I:boolean)  (LINE:66)\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.widgets.ConstraintAnchor.hasCenteredDependents((r5 'this' I:androidx.constraintlayout.core.widgets.ConstraintAnchor A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0021 \-\> B:17:?, BACK_EDGE: B:25:0x001e \-\> B:22:0x000a, CROSS_EDGE: B:29:0x0023 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x0022: r2 'anchor' Landroidx\/constraintlayout\/core\/widgets\/ConstraintAnchor;\l  0x001a\-0x0022: r3 'opposite' Landroidx\/constraintlayout\/core\/widgets\/ConstraintAnchor;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_22;
Node_25 -> Node_30[style=dashed];
Node_30 -> Node_26;
Node_26 -> Node_17;
Node_31 -> Node_29;
Node_29 -> Node_17;
}

