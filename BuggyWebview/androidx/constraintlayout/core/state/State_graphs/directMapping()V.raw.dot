digraph "CFG forandroidx.constraintlayout.core.state.State.directMapping()V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.Object, androidx.constraintlayout.core.state.Reference\>) = (r4 I:androidx.constraintlayout.core.state.State) androidx.constraintlayout.core.state.State.mReferences java.util.HashMap  (LINE:275)\l0x0002: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.HashMap) type: VIRTUAL call: java.util.HashMap.keySet():java.util.Set A[MD:():java.util.Set\<K\> (c)]\l0x0006: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.util.Set) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|LOOP_START\lLOOP:0: B:18:0x000a\-\>B:27:0x000a\l|0x000a: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0024 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0014: INVOKE  (r2 I:androidx.constraintlayout.core.state.ConstraintReference) = (r4 I:androidx.constraintlayout.core.state.State), (r1 I:java.lang.Object A[D('key' java.lang.Object)]) type: VIRTUAL call: androidx.constraintlayout.core.state.State.constraints(java.lang.Object):androidx.constraintlayout.core.state.ConstraintReference A[MD:(java.lang.Object):androidx.constraintlayout.core.state.ConstraintReference (m)] (LINE:276)\l0x0018: INSTANCE_OF  (r3 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('ref' androidx.constraintlayout.core.state.Reference)]) androidx.constraintlayout.core.state.ConstraintReference  (LINE:277)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|0x001a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001d \l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001d|0x001d: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('ref' androidx.constraintlayout.core.state.Reference)])  (LINE:280)\l0x001e: CHECK_CAST (r3 I:androidx.constraintlayout.core.state.ConstraintReference) = (androidx.constraintlayout.core.state.ConstraintReference) (r3 I:??[OBJECT, ARRAY]) \l0x0020: INVOKE  \l  (r3 I:androidx.constraintlayout.core.state.ConstraintReference A[D('reference' androidx.constraintlayout.core.state.ConstraintReference)])\l  (r1 I:java.lang.Object A[D('key' java.lang.Object)])\l type: VIRTUAL call: androidx.constraintlayout.core.state.ConstraintReference.setView(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:281)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|LOOP_END\lSYNTHETIC\lLOOP:0: B:18:0x000a\-\>B:27:0x000a\l}"];
Node_28 [shape=record,label="{28\:\ 0x000a|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|RETURN\l|0x0024: RETURN    (LINE:283)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.state.State.directMapping((r4 'this' I:androidx.constraintlayout.core.state.State A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x001d \-\> B:18:0x000a, BACK_EDGE: B:21:0x001a \-\> B:18:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x0023: r1 'key' Ljava\/lang\/Object;\l  0x0018\-0x0023: r2 'ref' Landroidx\/constraintlayout\/core\/state\/Reference;\l  0x0020\-0x0023: r3 'reference' Landroidx\/constraintlayout\/core\/state\/ConstraintReference;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_26;
Node_20 -> Node_21;
Node_21 -> Node_25;
Node_21 -> Node_28[style=dashed];
Node_25 -> Node_23;
Node_23 -> Node_29;
Node_29 -> Node_27;
Node_27 -> Node_18;
Node_28 -> Node_27;
Node_26 -> Node_24;
Node_24 -> Node_16;
}

