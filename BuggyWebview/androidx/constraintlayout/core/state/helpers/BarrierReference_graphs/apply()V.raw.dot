digraph "CFG forandroidx.constraintlayout.core.state.helpers.BarrierReference.apply()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r3 I:androidx.constraintlayout.core.state.helpers.BarrierReference) type: VIRTUAL call: androidx.constraintlayout.core.state.helpers.BarrierReference.getHelperWidget():androidx.constraintlayout.core.widgets.HelperWidget A[MD:():androidx.constraintlayout.core.widgets.HelperWidget (m)] (LINE:59)\l0x0003: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:60)\l0x0004: SGET  (r1 I:int[]) =  androidx.constraintlayout.core.state.helpers.BarrierReference.1.$SwitchMap$androidx$constraintlayout$core$state$State$Direction int[]  (LINE:61)\l0x0006: IGET  (r2 I:androidx.constraintlayout.core.state.State$Direction) = (r3 I:androidx.constraintlayout.core.state.helpers.BarrierReference) androidx.constraintlayout.core.state.helpers.BarrierReference.mDirection androidx.constraintlayout.core.state.State$Direction \l0x0008: INVOKE  (r2 I:int) = (r2 I:androidx.constraintlayout.core.state.State$Direction) type: VIRTUAL call: androidx.constraintlayout.core.state.State.Direction.ordinal():int A[MD:():int (c)]\l0x000c: AGET  (r1 I:??[int, float, short, byte, char]) = (r1 I:??[int, float][]), (r2 I:??[int, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: SWITCH  (r1 I:??)\l case 1: goto B:9:0x0019\l case 2: goto B:9:0x0019\l case 3: goto B:7:0x0016\l case 4: goto B:7:0x0016\l case 5: goto B:6:0x0014\l case 6: goto B:5:0x0012\l default: goto B:9:0x0019 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, short, byte, char] A[D('direction' int)]) = (3 ??[int, float, short, byte, char])  (LINE:75)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, short, byte, char] A[D('direction' int)]) = (2 ??[int, float, short, byte, char])  (LINE:72)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('direction' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:69)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IGET  (r1 I:androidx.constraintlayout.core.widgets.Barrier) = (r3 I:androidx.constraintlayout.core.state.helpers.BarrierReference) androidx.constraintlayout.core.state.helpers.BarrierReference.mBarrierWidget androidx.constraintlayout.core.widgets.Barrier  (LINE:78)\l0x001b: INVOKE  (r1 I:androidx.constraintlayout.core.widgets.Barrier), (r0 I:int A[D('direction' int)]) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Barrier.setBarrierType(int):void A[MD:(int):void (m)]\l0x001e: IGET  (r1 I:androidx.constraintlayout.core.widgets.Barrier) = (r3 I:androidx.constraintlayout.core.state.helpers.BarrierReference) androidx.constraintlayout.core.state.helpers.BarrierReference.mBarrierWidget androidx.constraintlayout.core.widgets.Barrier  (LINE:79)\l0x0020: IGET  (r2 I:int) = (r3 I:androidx.constraintlayout.core.state.helpers.BarrierReference) androidx.constraintlayout.core.state.helpers.BarrierReference.mMargin int \l0x0022: INVOKE  (r1 I:androidx.constraintlayout.core.widgets.Barrier), (r2 I:int) type: VIRTUAL call: androidx.constraintlayout.core.widgets.Barrier.setMargin(int):void A[MD:(int):void (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:80)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.state.helpers.BarrierReference.apply((r3 'this' I:androidx.constraintlayout.core.state.helpers.BarrierReference A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0014 \-\> B:9:0x0019, CROSS_EDGE: B:7:0x0016 \-\> B:9:0x0019, CROSS_EDGE: B:3:0x000e \-\> B:9:0x0019\lDebug Info:\l  0x0004\-0x0035: r0 'direction' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.state.Reference.apply():void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_3 -> Node_9;
Node_5 -> Node_9;
Node_6 -> Node_9;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

