digraph "CFG forandroidx.constraintlayout.core.state.WidgetFrame.serializeAnchor(Ljava\/lang\/StringBuilder;Landroidx\/constraintlayout\/core\/widgets\/ConstraintAnchor$Type;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.constraintlayout.core.widgets.ConstraintAnchor r0 = r4.widget.getAnchor(r6)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r0 == null) goto L13\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000a|if (r0.mTarget != null) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|r5.append(\"Anchor\")\lr5.append(r6.name())\lr5.append(\": ['\")\ljava.lang.String r1 = r0.mTarget.getOwner().stringId\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|if (r1 != null) goto L11\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|java.lang.String r2 = \"#PARENT\"\l}"];
Node_11 [shape=record,label="{11\:\ 0x002c|PHI: r2 \l  PHI: (r2v1 java.lang.String) = (r2v0 java.lang.String), (r2v5 java.lang.String) binds: [B:10:0x002b, B:9:0x0028] A[DONT_GENERATE, DONT_INLINE]\l|r5.append(r2)\lr5.append(\"', '\")\lr5.append(r0.mTarget.getType().name())\lr5.append(\"', '\")\lr5.append(r0.mMargin)\lr5.append(\"'],n\")\l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x002b|r2 = r1\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ 0x004f|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.core.state.WidgetFrame.serializeAnchor((r4v0 'this' androidx.constraintlayout.core.state.WidgetFrame A[IMMUTABLE_TYPE, THIS]), (r5v0 'ret' java.lang.StringBuilder A[D('ret' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'type' androidx.constraintlayout.core.widgets.ConstraintAnchor$Type A[D('type' androidx.constraintlayout.core.widgets.ConstraintAnchor$Type), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x002b \-\> B:11:0x002c, CROSS_EDGE: B:13:0x004f \-\> B:1:?, CROSS_EDGE: B:3:0x0006 \-\> B:13:0x004f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_14[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_10 -> Node_11;
Node_14 -> Node_1;
Node_13 -> Node_1;
}

