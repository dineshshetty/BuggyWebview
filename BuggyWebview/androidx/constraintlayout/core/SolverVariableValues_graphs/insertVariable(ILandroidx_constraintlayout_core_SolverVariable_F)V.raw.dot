digraph "CFG forandroidx.constraintlayout.core.SolverVariableValues.insertVariable(ILandroidx\/constraintlayout\/core\/SolverVariable;F)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) type: DIRECT call: androidx.constraintlayout.core.SolverVariableValues.findEmptySlot():int A[MD:():int (m)] (LINE:308)\l0x0004: INVOKE  \l  (r4 I:androidx.constraintlayout.core.SolverVariableValues)\l  (r0 I:int A[D('availableSlot' int)])\l  (r6 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l  (r7 I:float A[D('value' float)])\l type: DIRECT call: androidx.constraintlayout.core.SolverVariableValues.addVariable(int, androidx.constraintlayout.core.SolverVariable, float):void A[MD:(int, androidx.constraintlayout.core.SolverVariable, float):void (m)] (LINE:309)\l0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:310)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0017 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.previous int[]  (LINE:311)\l0x000c: APUT  \l  (r2 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('availableSlot' int)])\l  (r5 I:??[int, float, short, byte, char] A[D('index' int)])\l \l0x000e: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.next int[]  (LINE:312)\l0x0010: AGET  (r3 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r5 I:??[int, short, byte, char] A[D('index' int)]) \l0x0012: APUT  \l  (r2 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('availableSlot' int)])\l  (r3 I:??[int, float, short, byte, char])\l \l0x0014: APUT  \l  (r2 I:??[int, float][])\l  (r5 I:??[int, short, byte, char] A[D('index' int)])\l  (r0 I:??[int, float, short, byte, char] A[D('availableSlot' int)])\l  (LINE:313)\l}"];
Node_23 [shape=record,label="{23\:\ 0x002c|0x002c: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.next int[]  (LINE:323)\l0x002e: AGET  (r3 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('availableSlot' int)]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0030|0x0030: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0038 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0032|0x0032: IGET  (r1 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.previous int[]  (LINE:324)\l0x0034: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('availableSlot' int)]) \l0x0036: APUT  \l  (r1 I:??[int, float][])\l  (r2 I:??[int, short, byte, char])\l  (r0 I:??[int, float, short, byte, char] A[D('availableSlot' int)])\l \l}"];
Node_26 [shape=record,label="{26\:\ 0x0038|0x0038: INVOKE  \l  (r4 I:androidx.constraintlayout.core.SolverVariableValues)\l  (r6 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l  (r0 I:int A[D('availableSlot' int)])\l type: DIRECT call: androidx.constraintlayout.core.SolverVariableValues.addToHashMap(androidx.constraintlayout.core.SolverVariable, int):void A[MD:(androidx.constraintlayout.core.SolverVariable, int):void (m)] (LINE:326)\l}"];
Node_27 [shape=record,label="{27\:\ 0x003b|RETURN\l|0x003b: RETURN    (LINE:327)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|0x0017: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.previous int[]  (LINE:315)\l0x0019: APUT  \l  (r2 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('availableSlot' int)])\l  (r1 I:??[int, float, short, byte, char])\l \l0x001b: IGET  (r2 I:int) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.mCount int  (LINE:316)\l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|0x001d: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:22:0x0028 \l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|0x001f: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.next int[]  (LINE:317)\l0x0021: IGET  (r3 I:int) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.head int \l0x0023: APUT  \l  (r2 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('availableSlot' int)])\l  (r3 I:??[int, float, short, byte, char])\l \l0x0025: IPUT  (r0 I:int A[D('availableSlot' int)]), (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.head int  (LINE:318)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0028|0x0028: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.next int[]  (LINE:320)\l0x002a: APUT  \l  (r2 I:??[int, float][])\l  (r0 I:??[int, short, byte, char] A[D('availableSlot' int)])\l  (r1 I:??[int, float, short, byte, char])\l \l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.core.SolverVariableValues.insertVariable((r4 'this' I:androidx.constraintlayout.core.SolverVariableValues A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0030 \-\> B:26:0x0038, CROSS_EDGE: B:21:0x001f \-\> B:23:0x002c, CROSS_EDGE: B:22:0x0028 \-\> B:23:0x002c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x003b: r0 'availableSlot' I\l  \-1 \-0x003b: r5 'index' I\l  \-1 \-0x003b: r6 'variable' Landroidx\/constraintlayout\/core\/SolverVariable;\l  \-1 \-0x003b: r7 'value' F\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_15;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_23;
}

