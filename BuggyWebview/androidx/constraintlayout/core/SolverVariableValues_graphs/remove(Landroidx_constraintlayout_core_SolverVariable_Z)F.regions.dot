digraph "CFG forandroidx.constraintlayout.core.SolverVariableValues.remove(Landroidx\/constraintlayout\/core\/SolverVariable;Z)F" {
subgraph cluster_Region_313919233 {
label = "R(2:1|(2:(1:3)|(9:5|(1:7)|8|(1:10)|11|(1:13)|14|(1:16)|17)))";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0000|int int r0 = indexOf(r8)\l}"];
subgraph cluster_Region_980958178 {
label = "R(2:(1:3)|(9:5|(1:7)|8|(1:10)|11|(1:13)|14|(1:16)|17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1963004731 {
label = "IF [B:22:0x0005] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0005|if (r0 == (\-1)) goto L3\l}"];
subgraph cluster_Region_1987963321 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0007|RETURN\l|return 0.0f\l}"];
}
}
subgraph cluster_Region_2060909779 {
label = "R(9:5|(1:7)|8|(1:10)|11|(1:13)|14|(1:16)|17)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0009|removeFromHashMap(r8)\lfloat r2 = r7.values[r0]\l}"];
subgraph cluster_IfRegion_586514864 {
label = "IF [B:26:0x0012] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0012|if (r7.head == r0) goto L7\l}"];
subgraph cluster_Region_5833952 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0014|r7.head = r7.next[r0]\l}"];
}
}
Node_28 [shape=record,label="{28\:\ 0x001a|r7.variables[r0] = \-1\lint[] int[] r3 = r7.previous\l}"];
subgraph cluster_IfRegion_2109495067 {
label = "IF [B:29:0x0022] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0022|if (r3[r0] != (\-1)) goto L10\l}"];
subgraph cluster_Region_809569307 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0024|int[] int[] r4 = r7.next\lr4[r3[r0]] = r4[r0]\l}"];
}
}
Node_31 [shape=record,label="{31\:\ 0x002c|int[] int[] r4 = r7.next\l}"];
subgraph cluster_IfRegion_1043850146 {
label = "IF [B:32:0x0030] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0030|if (r4[r0] != (\-1)) goto L13\l}"];
subgraph cluster_Region_1988206208 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0032|r3[r4[r0]] = r3[r0]\l}"];
}
}
Node_34 [shape=record,label="{34\:\ 0x0038|r7.mCount\-\-\lr8.usageInRowCount\-\-\l}"];
subgraph cluster_IfRegion_1914751066 {
label = "IF [B:35:0x0044] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0044|if (r9 != false) goto L16\l}"];
subgraph cluster_Region_918484530 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0046|r8.removeFromRow(r7.mRow)\l}"];
}
}
Node_37 [shape=record,label="{37\:\ 0x004b|RETURN\l|return r2\l}"];
}
}
}
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public float androidx.constraintlayout.core.SolverVariableValues.remove((r7v0 'this' androidx.constraintlayout.core.SolverVariableValues A[IMMUTABLE_TYPE, THIS]), (r8v0 'v' androidx.constraintlayout.core.SolverVariable A[D('v' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'removeFromDefinition' boolean A[D('removeFromDefinition' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x004b \-\> B:20:?, CROSS_EDGE: B:35:0x0044 \-\> B:37:0x004b, CROSS_EDGE: B:32:0x0030 \-\> B:34:0x0038, CROSS_EDGE: B:29:0x0022 \-\> B:31:0x002c, CROSS_EDGE: B:26:0x0012 \-\> B:28:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.ArrayRow.ArrayRowVariables.remove(androidx.constraintlayout.core.SolverVariable, boolean):float]\l}"];
MethodNode -> Node_19;Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_25[style=dashed];
Node_23 -> Node_20;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_28[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_31[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_32 -> Node_34[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_37[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_20;
Node_19 -> Node_21;
}

