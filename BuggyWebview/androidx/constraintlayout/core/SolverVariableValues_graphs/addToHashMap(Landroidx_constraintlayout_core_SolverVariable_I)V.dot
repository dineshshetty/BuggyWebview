digraph "CFG forandroidx.constraintlayout.core.SolverVariableValues.addToHashMap(Landroidx\/constraintlayout\/core\/SolverVariable;I)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|int r0 = r6.f13id % r5.HASH_SIZE\lint[] r1 = r5.keys\lr2 = r1[r0]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|if (r2 != (\-1)) goto L7\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|r1[r0] = r7\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|r5.nextKeys[r7] = \-1\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|LOOP_START\lLOOP:0: B:17:0x000f\-\>B:19:0x0015\lPHI: r2 \l  PHI: (r2v1 'key' int) = (r2v0 'key' int), (r2v2 'key' int) binds: [B:15:0x000a, B:19:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|int[] r1 = r5.nextKeys\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|if (r1[r2] == (\-1)) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|LOOP_END\lLOOP:0: B:17:0x000f\-\>B:19:0x0015\l|r2 = r1[r2]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|r1[r2] = r7\l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.core.SolverVariableValues.addToHashMap((r5v0 'this' androidx.constraintlayout.core.SolverVariableValues A[IMMUTABLE_TYPE, THIS]), (r6v0 'variable' androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0015 \-\> B:17:0x000f, CROSS_EDGE: B:20:0x0018 \-\> B:21:0x001a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_17;
Node_23 -> Node_20;
Node_20 -> Node_21;
}

