digraph "CFG forandroidx.constraintlayout.core.SolverVariableValues.increaseSize()V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.SIZE int  (LINE:199)\l0x0002: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x0004: IGET  (r1 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.variables int[]  (LINE:200)\l0x0006: INVOKE  (r1 I:int[]) = (r1 I:int[]), (r0 I:int A[D('size' int)]) type: STATIC call: java.util.Arrays.copyOf(int[], int):int[] A[MD:(int[], int):int[] (c)]\l0x000a: IPUT  (r1 I:int[]), (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.variables int[] \l0x000c: IGET  (r1 I:float[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.values float[]  (LINE:201)\l0x000e: INVOKE  (r1 I:float[]) = (r1 I:float[]), (r0 I:int A[D('size' int)]) type: STATIC call: java.util.Arrays.copyOf(float[], int):float[] A[MD:(float[], int):float[] (c)]\l0x0012: IPUT  (r1 I:float[]), (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.values float[] \l0x0014: IGET  (r1 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.previous int[]  (LINE:202)\l0x0016: INVOKE  (r1 I:int[]) = (r1 I:int[]), (r0 I:int A[D('size' int)]) type: STATIC call: java.util.Arrays.copyOf(int[], int):int[] A[MD:(int[], int):int[] (c)]\l0x001a: IPUT  (r1 I:int[]), (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.previous int[] \l0x001c: IGET  (r1 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.next int[]  (LINE:203)\l0x001e: INVOKE  (r1 I:int[]) = (r1 I:int[]), (r0 I:int A[D('size' int)]) type: STATIC call: java.util.Arrays.copyOf(int[], int):int[] A[MD:(int[], int):int[] (c)]\l0x0022: IPUT  (r1 I:int[]), (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.next int[] \l0x0024: IGET  (r1 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.nextKeys int[]  (LINE:204)\l0x0026: INVOKE  (r1 I:int[]) = (r1 I:int[]), (r0 I:int A[D('size' int)]) type: STATIC call: java.util.Arrays.copyOf(int[], int):int[] A[MD:(int[], int):int[] (c)]\l0x002a: IPUT  (r1 I:int[]), (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.nextKeys int[] \l0x002c: IGET  (r1 I:int) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.SIZE int  (LINE:205)\l}"];
Node_11 [shape=record,label="{11\:\ 0x002e|LOOP_START\lLOOP:0: B:11:0x002e\-\>B:12:0x0030\l|0x002e: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:15:0x003c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|LOOP_END\lLOOP:0: B:11:0x002e\-\>B:12:0x0030\l|0x0030: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.variables int[]  (LINE:206)\l0x0032: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0033: APUT  (r2 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[int, float, short, byte, char]) \l0x0035: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.nextKeys int[]  (LINE:207)\l0x0037: APUT  (r2 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[int, float, short, byte, char]) \l0x0039: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:205)\l}"];
Node_15 [shape=record,label="{15\:\ 0x003c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x003c|0x003c: IPUT  (r0 I:int A[D('size' int)]), (r4 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.SIZE int  (LINE:209)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003e|RETURN\l|0x003e: RETURN    (LINE:210)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.core.SolverVariableValues.increaseSize((r4 'this' I:androidx.constraintlayout.core.SolverVariableValues A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0030 \-\> B:11:0x002e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002e\-0x003c: r1 'i' I\l  0x0004\-0x003e: r0 'size' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

