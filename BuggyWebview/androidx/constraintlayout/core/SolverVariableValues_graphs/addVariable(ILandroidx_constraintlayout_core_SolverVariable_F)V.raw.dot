digraph "CFG forandroidx.constraintlayout.core.SolverVariableValues.addVariable(ILandroidx\/constraintlayout\/core\/SolverVariable;F)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:int[]) = (r2 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.variables int[]  (LINE:289)\l0x0002: IGET  (r1 I:int) = (r4 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)]) androidx.constraintlayout.core.SolverVariable.id int \l0x0004: APUT  (r0 I:??[int, float][]), (r3 I:??[int, short, byte, char] A[D('index' int)]), (r1 I:??[int, float, short, byte, char]) \l0x0006: IGET  (r0 I:float[]) = (r2 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.values float[]  (LINE:290)\l0x0008: APUT  \l  (r0 I:??[int, float][])\l  (r3 I:??[int, short, byte, char] A[D('index' int)])\l  (r5 I:??[int, float, short, byte, char] A[D('value' float)])\l \l0x000a: IGET  (r0 I:int[]) = (r2 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.previous int[]  (LINE:291)\l0x000c: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x000d: APUT  (r0 I:??[int, float][]), (r3 I:??[int, short, byte, char] A[D('index' int)]), (r1 I:??[int, float, short, byte, char]) \l0x000f: IGET  (r0 I:int[]) = (r2 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.next int[]  (LINE:292)\l0x0011: APUT  (r0 I:??[int, float][]), (r3 I:??[int, short, byte, char] A[D('index' int)]), (r1 I:??[int, float, short, byte, char]) \l0x0013: IGET  (r0 I:androidx.constraintlayout.core.ArrayRow) = (r2 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.mRow androidx.constraintlayout.core.ArrayRow  (LINE:293)\l0x0015: INVOKE  \l  (r4 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l  (r0 I:androidx.constraintlayout.core.ArrayRow)\l type: VIRTUAL call: androidx.constraintlayout.core.SolverVariable.addToRow(androidx.constraintlayout.core.ArrayRow):void A[MD:(androidx.constraintlayout.core.ArrayRow):void (m)]\l0x0018: IGET  (r0 I:int) = (r4 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)]) androidx.constraintlayout.core.SolverVariable.usageInRowCount int  (LINE:294)\l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x001c: IPUT  \l  (r0 I:int)\l  (r4 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l androidx.constraintlayout.core.SolverVariable.usageInRowCount int \l0x001e: IGET  (r0 I:int) = (r2 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.mCount int  (LINE:295)\l0x0020: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0022: IPUT  (r0 I:int), (r2 I:androidx.constraintlayout.core.SolverVariableValues) androidx.constraintlayout.core.SolverVariableValues.mCount int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|RETURN\l|0x0024: RETURN    (LINE:296)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.core.SolverVariableValues.addVariable((r2 'this' I:androidx.constraintlayout.core.SolverVariableValues A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0024: r3 'index' I\l  \-1 \-0x0024: r4 'variable' Landroidx\/constraintlayout\/core\/SolverVariable;\l  \-1 \-0x0024: r5 'value' F\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

