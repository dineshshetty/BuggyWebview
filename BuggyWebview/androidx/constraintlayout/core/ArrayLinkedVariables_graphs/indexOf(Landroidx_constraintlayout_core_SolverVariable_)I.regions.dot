digraph "CFG forandroidx.constraintlayout.core.ArrayLinkedVariables.indexOf(Landroidx\/constraintlayout\/core\/SolverVariable;)I" {
subgraph cluster_Region_1919378906 {
label = "R(1:(2:(1:3)|(3:5|(1:(2:(1:13)|(1:11)))|15)))";
node [shape=record,color=blue];
subgraph cluster_Region_2017930837 {
label = "R(2:(1:3)|(3:5|(1:(2:(1:13)|(1:11)))|15))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2102918740 {
label = "IF [B:3:0x0003] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r5.mHead == (\-1)) goto L3\l}"];
subgraph cluster_Region_76780552 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|RETURN\l|return \-1\l}"];
}
}
subgraph cluster_Region_1561161973 {
label = "R(3:5|(1:(2:(1:13)|(1:11)))|15)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0006|int int r0 = r5.mHead\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_1254305413 {
label = "LOOP:0: (1:(2:(1:13)|(1:11)))";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0009|LOOP_START\lLOOP:0: B:6:0x0009\-\>B:12:0x0018\lPHI: r0 r2 \l  PHI: (r0v2 'current' int) = (r0v1 'current' int), (r0v3 'current' int) binds: [B:5:0x0006, B:12:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'counter' int) = (r2v0 'counter' int), (r2v2 'counter' int) binds: [B:5:0x0006, B:12:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != (\-1)) goto L7\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|ADDED_TO_REGION\l|if (r2 \< r5.currentSize) goto L9\l}"];
subgraph cluster_Region_1301506293 {
label = "R(1:(2:(1:13)|(1:11)))";
node [shape=record,color=blue];
subgraph cluster_Region_208130708 {
label = "R(2:(1:13)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_42563436 {
label = "IF [B:10:0x0015] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0015|if (r5.mArrayIndices[r0] == r6.f13id) goto L12\l}"];
subgraph cluster_Region_875902224 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0017|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1385771348 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0018|LOOP_END\lLOOP:0: B:6:0x0009\-\>B:12:0x0018\l|r0 = r5.mArrayNextIndices[r0]\lr2++\l}"];
}
}
}
}
Node_13 [shape=record,label="{13\:\ 0x001f|RETURN\l|return \-1\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000b}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x000f}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0017|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x001f|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x001f|SYNTHETIC\lADDED_TO_REGION\l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.core.ArrayLinkedVariables.indexOf((r5v0 'this' androidx.constraintlayout.core.ArrayLinkedVariables A[IMMUTABLE_TYPE, THIS]), (r6v0 'variable' androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0017 \-\> B:1:?, BACK_EDGE: B:12:0x0018 \-\> B:6:0x0009, CROSS_EDGE: B:13:0x001f \-\> B:1:?, CROSS_EDGE: B:6:0x0009 \-\> B:13:0x001f\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.ArrayRow.ArrayRowVariables.indexOf(androidx.constraintlayout.core.SolverVariable):int]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_15[style=dashed];
Node_8 -> Node_9;
Node_8 -> Node_16[style=dashed];
Node_10 -> Node_12[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_1;
Node_12 -> Node_6;
Node_13 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_7 -> Node_8;
Node_9 -> Node_10;
Node_14 -> Node_11;
Node_16 -> Node_13;
Node_15 -> Node_13;
}

