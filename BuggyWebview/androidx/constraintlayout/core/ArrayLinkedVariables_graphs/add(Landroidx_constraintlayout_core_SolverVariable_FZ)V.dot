digraph "CFG forandroidx.constraintlayout.core.ArrayLinkedVariables.add(Landroidx\/constraintlayout\/core\/SolverVariable;FZ)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|float r0 = androidx.constraintlayout.core.ArrayLinkedVariables.epsilon\l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|if ((r12 \> (\-r0) ? 1 : (r12 == (\-r0) ? 0 : \-1)) \<= 0) goto L7\l}"];
Node_4 [shape=record,label="{4\:\ 0x0007}"];
Node_5 [shape=record,label="{5\:\ 0x0009|if ((r12 \> r0 ? 1 : (r12 == r0 ? 0 : \-1)) \>= 0) goto L7\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c}"];
Node_8 [shape=record,label="{8\:\ 0x0011|if (r10.mHead != (\-1)) goto L17\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|r10.mHead = 0\lr10.mArrayValues[0] = r12\lr10.mArrayIndices[0] = r11.f13id\lr10.mArrayNextIndices[r10.mHead] = \-1\lr11.usageInRowCount = r11.usageInRowCount + 1\lr11.addToRow(r10.mRow)\lr10.currentSize = r10.currentSize + 1\l}"];
Node_10 [shape=record,label="{10\:\ 0x0036|if (r10.mDidFillOnce != false) goto L16\l}"];
Node_11 [shape=record,label="{11\:\ 0x0038|int r0 = r10.mLast + 1\lr10.mLast = r0\lint[] r1 = r10.mArrayIndices\l}"];
Node_12 [shape=record,label="{12\:\ 0x0040|if (r0 \< r1.length) goto L15\l}"];
Node_13 [shape=record,label="{13\:\ 0x0042|r10.mDidFillOnce = true\lr10.mLast = r1.length \- 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0048|RETURN\lORIG_RETURN\l|return\l}"];
Node_82 [shape=record,label="{82\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_81 [shape=record,label="{81\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|int r0 = r10.mHead\lr4 = \-1\lr5 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x004d|LOOP_START\lLOOP:0: B:16:0x004d\-\>B:42:0x00a5\lPHI: r0 r4 r5 \l  PHI: (r0v3 'current' int) = (r0v2 'current' int), (r0v4 'current' int) binds: [B:15:0x0049, B:42:0x00a5] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'previous' int) = (r4v0 'previous' int), (r4v2 'previous' int) binds: [B:15:0x0049, B:42:0x00a5] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 'counter' int) = (r5v0 'counter' int), (r5v2 'counter' int) binds: [B:15:0x0049, B:42:0x00a5] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == (\-1)) goto L84\l}"];
Node_17 [shape=record,label="{17\:\ 0x004f}"];
Node_18 [shape=record,label="{18\:\ 0x0051|if (r5 \>= r10.currentSize) goto L49\l}"];
Node_19 [shape=record,label="{19\:\ 0x0053|r6 = r10.mArrayIndices[r0]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0059|if (r6 != r11.f13id) goto L23\l}"];
Node_39 [shape=record,label="{39\:\ 0x009c}"];
Node_40 [shape=record,label="{40\:\ 0x00a2|if (r10.mArrayIndices[r0] \>= r11.f13id) goto L28\l}"];
Node_41 [shape=record,label="{41\:\ 0x00a4|r4 = r0\l}"];
Node_77 [shape=record,label="{77\:\ 0x00a5|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x00a5|LOOP_END\lLOOP:0: B:16:0x004d\-\>B:42:0x00a5\lPHI: r4 \l  PHI: (r4v2 'previous' int) = (r4v1 'previous' int), (r4v3 'previous' int) binds: [B:78:0x00a5, B:77:0x00a5] A[DONT_GENERATE, DONT_INLINE]\l|r0 = r10.mArrayNextIndices[r0]\lint r5 = r5 + 1\l}"];
Node_78 [shape=record,label="{78\:\ 0x00a5|SYNTHETIC\l}"];
Node_75 [shape=record,label="{75\:\ 0x005b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x005b|float[] r1 = r10.mArrayValues\lfloat r2 = r1[r0] + r12\lfloat r7 = androidx.constraintlayout.core.ArrayLinkedVariables.epsilon\l}"];
Node_22 [shape=record,label="{22\:\ 0x0065|if ((r2 \> (\-r7) ? 1 : (r2 == (\-r7) ? 0 : \-1)) \<= 0) goto L35\l}"];
Node_23 [shape=record,label="{23\:\ 0x0067}"];
Node_24 [shape=record,label="{24\:\ 0x0069|if ((r2 \> r7 ? 1 : (r2 == r7 ? 0 : \-1)) \>= 0) goto L35\l}"];
Node_25 [shape=record,label="{25\:\ 0x006b|r2 = 0.0f\l}"];
Node_26 [shape=record,label="{26\:\ 0x006c|PHI: r2 \l  PHI: (r2v6 'v' float) = (r2v5 'v' float), (r2v5 'v' float), (r2v7 'v' float) binds: [B:22:0x0065, B:24:0x0069, B:25:0x006b] A[DONT_GENERATE, DONT_INLINE]\l|r1[r0] = r2\l}"];
Node_27 [shape=record,label="{27\:\ 0x0071|if ((r2 \> 0.0f ? 1 : (r2 == 0.0f ? 0 : \-1)) != 0) goto L48\l}"];
Node_28 [shape=record,label="{28\:\ 0x0073}"];
Node_29 [shape=record,label="{29\:\ 0x0075|if (r0 != r10.mHead) goto L47\l}"];
Node_30 [shape=record,label="{30\:\ 0x0077|r10.mHead = r10.mArrayNextIndices[r0]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0084|if (r13 == false) goto L42\l}"];
Node_33 [shape=record,label="{33\:\ 0x0086|r11.removeFromRow(r10.mRow)\l}"];
Node_34 [shape=record,label="{34\:\ 0x008b}"];
Node_35 [shape=record,label="{35\:\ 0x008d|if (r10.mDidFillOnce == false) goto L45\l}"];
Node_36 [shape=record,label="{36\:\ 0x008f|r10.mLast = r0\l}"];
Node_37 [shape=record,label="{37\:\ 0x0091|r11.usageInRowCount = r11.usageInRowCount \- 1\lr10.currentSize = r10.currentSize \- 1\l}"];
Node_38 [shape=record,label="{38\:\ 0x009b|RETURN\lORIG_RETURN\l|return\l}"];
Node_31 [shape=record,label="{31\:\ 0x007e|int[] r1 = r10.mArrayNextIndices\lr1[r4] = r1[r0]\l}"];
Node_83 [shape=record,label="{83\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_74 [shape=record,label="{74\:\ 0x00ac|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x00ac|int r6 = r10.mLast\lint r7 = r6 + 1\l}"];
Node_44 [shape=record,label="{44\:\ 0x00b2|if (r10.mDidFillOnce == false) goto L56\l}"];
Node_45 [shape=record,label="{45\:\ 0x00b4|int[] r8 = r10.mArrayIndices\l}"];
Node_46 [shape=record,label="{46\:\ 0x00b8|if (r8[r6] != (\-1)) goto L55\l}"];
Node_47 [shape=record,label="{47\:\ 0x00ba|int r7 = r10.mLast\l}"];
Node_48 [shape=record,label="{48\:\ 0x00bd|int r7 = r8.length\l}"];
Node_49 [shape=record,label="{49\:\ 0x00be|PHI: r7 \l  PHI: (r7v1 'availableIndice' int) = (r7v0 'availableIndice' int), (r7v6 'availableIndice' int), (r7v7 'availableIndice' int) binds: [B:44:0x00b2, B:48:0x00bd, B:47:0x00ba] A[DONT_GENERATE, DONT_INLINE]\l|int[] r6 = r10.mArrayIndices\l}"];
Node_50 [shape=record,label="{50\:\ 0x00c1|if (r7 \< r6.length) goto L69\l}"];
Node_51 [shape=record,label="{51\:\ 0x00c3}"];
Node_52 [shape=record,label="{52\:\ 0x00c6|if (r10.currentSize \>= r6.length) goto L69\l}"];
Node_53 [shape=record,label="{53\:\ 0x00c8|r6 = 0\l}"];
Node_54 [shape=record,label="{54\:\ 0x00c9|LOOP_START\lLOOP:1: B:54:0x00c9\-\>B:59:0x00d4\lPHI: r6 \l  PHI: (r6v11 'i' int) = (r6v10 'i' int), (r6v12 'i' int) binds: [B:53:0x00c8, B:59:0x00d4] A[DONT_GENERATE, DONT_INLINE]\l|int[] r8 = r10.mArrayIndices\l}"];
Node_55 [shape=record,label="{55\:\ 0x00cc|if (r6 \>= r8.length) goto L68\l}"];
Node_56 [shape=record,label="{56\:\ 0x00ce}"];
Node_57 [shape=record,label="{57\:\ 0x00d0|if (r8[r6] != (\-1)) goto L65\l}"];
Node_59 [shape=record,label="{59\:\ 0x00d4|LOOP_END\lLOOP:1: B:54:0x00c9\-\>B:59:0x00d4\l|int r6 = r6 + 1\l}"];
Node_79 [shape=record,label="{79\:\ 0x00d2|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x00d2|r7 = r6\l}"];
Node_80 [shape=record,label="{80\:\ 0x00d7|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x00d7|PHI: r7 \l  PHI: (r7v2 'availableIndice' int) = (r7v1 'availableIndice' int), (r7v1 'availableIndice' int), (r7v1 'availableIndice' int), (r7v5 'availableIndice' int) binds: [B:50:0x00c1, B:52:0x00c6, B:80:0x00d7, B:58:0x00d2] A[DONT_GENERATE, DONT_INLINE]\l|int[] r6 = r10.mArrayIndices\l}"];
Node_61 [shape=record,label="{61\:\ 0x00da|if (r7 \< r6.length) goto L72\l}"];
Node_62 [shape=record,label="{62\:\ 0x00dc|int r7 = r6.length\lint r6 = r10.ROW_SIZE * 2\lr10.ROW_SIZE = r6\lr10.mDidFillOnce = false\lr10.mLast = r7 + (\-1)\lr10.mArrayValues = java.util.Arrays.copyOf(r10.mArrayValues, r6)\lr10.mArrayIndices = java.util.Arrays.copyOf(r10.mArrayIndices, r10.ROW_SIZE)\lr10.mArrayNextIndices = java.util.Arrays.copyOf(r10.mArrayNextIndices, r10.ROW_SIZE)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0105|PHI: r7 \l  PHI: (r7v3 'availableIndice' int) = (r7v2 'availableIndice' int), (r7v4 'availableIndice' int) binds: [B:61:0x00da, B:62:0x00dc] A[DONT_GENERATE, DONT_INLINE]\l|r10.mArrayIndices[r7] = r11.f13id\lr10.mArrayValues[r7] = r12\l}"];
Node_64 [shape=record,label="{64\:\ 0x010f|if (r4 == (\-1)) goto L83\l}"];
Node_65 [shape=record,label="{65\:\ 0x0111|int[] r1 = r10.mArrayNextIndices\lr1[r7] = r1[r4]\lr1[r4] = r7\l}"];
Node_67 [shape=record,label="{67\:\ 0x0122|r11.usageInRowCount = r11.usageInRowCount + 1\lr11.addToRow(r10.mRow)\lr10.currentSize = r10.currentSize + 1\l}"];
Node_68 [shape=record,label="{68\:\ 0x0133|if (r10.mDidFillOnce != false) goto L78\l}"];
Node_69 [shape=record,label="{69\:\ 0x0135|r10.mLast = r10.mLast + 1\l}"];
Node_70 [shape=record,label="{70\:\ 0x013a|int r1 = r10.mLast\lint[] r2 = r10.mArrayIndices\l}"];
Node_71 [shape=record,label="{71\:\ 0x013f|if (r1 \< r2.length) goto L82\l}"];
Node_72 [shape=record,label="{72\:\ 0x0141|r10.mDidFillOnce = true\lr10.mLast = r2.length \- 1\l}"];
Node_73 [shape=record,label="{73\:\ 0x0147|RETURN\lORIG_RETURN\l|return\l}"];
Node_84 [shape=record,label="{84\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_66 [shape=record,label="{66\:\ 0x011a|r10.mArrayNextIndices[r7] = r10.mHead\lr10.mHead = r7\l}"];
Node_76 [shape=record,label="{76\:\ 0x00ac|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.ArrayLinkedVariables.add((r10v0 'this' androidx.constraintlayout.core.ArrayLinkedVariables A[IMMUTABLE_TYPE, THIS]), (r11v0 'variable' androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'value' float A[D('value' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'removeFromDefinition' boolean A[D('removeFromDefinition' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0048 \-\> B:1:?, CROSS_EDGE: B:12:0x0040 \-\> B:14:0x0048, CROSS_EDGE: B:10:0x0036 \-\> B:14:0x0048, CROSS_EDGE: B:38:0x009b \-\> B:1:?, CROSS_EDGE: B:35:0x008d \-\> B:37:0x0091, CROSS_EDGE: B:32:0x0084 \-\> B:34:0x008b, CROSS_EDGE: B:31:0x007e \-\> B:32:0x0084, CROSS_EDGE: B:27:0x0071 \-\> B:38:0x009b, CROSS_EDGE: B:24:0x0069 \-\> B:26:0x006c, CROSS_EDGE: B:22:0x0065 \-\> B:26:0x006c, BACK_EDGE: B:42:0x00a5 \-\> B:16:0x004d, CROSS_EDGE: B:40:0x00a2 \-\> B:42:0x00a5, CROSS_EDGE: B:73:0x0147 \-\> B:1:?, CROSS_EDGE: B:71:0x013f \-\> B:73:0x0147, CROSS_EDGE: B:68:0x0133 \-\> B:70:0x013a, CROSS_EDGE: B:66:0x011a \-\> B:67:0x0122, CROSS_EDGE: B:61:0x00da \-\> B:63:0x0105, BACK_EDGE: B:59:0x00d4 \-\> B:54:0x00c9, CROSS_EDGE: B:55:0x00cc \-\> B:60:0x00d7, CROSS_EDGE: B:52:0x00c6 \-\> B:60:0x00d7, CROSS_EDGE: B:50:0x00c1 \-\> B:60:0x00d7, CROSS_EDGE: B:48:0x00bd \-\> B:49:0x00be, CROSS_EDGE: B:44:0x00b2 \-\> B:49:0x00be, CROSS_EDGE: B:16:0x004d \-\> B:43:0x00ac, CROSS_EDGE: B:3:0x0005 \-\> B:7:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.ArrayRow.ArrayRowVariables.add(androidx.constraintlayout.core.SolverVariable, float, boolean):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_15;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_81;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_82;
Node_13 -> Node_14;
Node_14 -> Node_1;
Node_82 -> Node_1;
Node_81 -> Node_1;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_76;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_74;
Node_19 -> Node_20;
Node_20 -> Node_39;
Node_20 -> Node_75[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_78;
Node_41 -> Node_77;
Node_77 -> Node_42;
Node_42 -> Node_16;
Node_78 -> Node_42;
Node_75 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_83;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_1;
Node_31 -> Node_32;
Node_83 -> Node_1;
Node_74 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_49;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_49;
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_60;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_60;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_80;
Node_56 -> Node_57;
Node_57 -> Node_59;
Node_57 -> Node_79[style=dashed];
Node_59 -> Node_54;
Node_79 -> Node_58;
Node_58 -> Node_60;
Node_80 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_62[style=dashed];
Node_61 -> Node_63;
Node_62 -> Node_63;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_66;
Node_65 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_70;
Node_69 -> Node_70;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_84;
Node_72 -> Node_73;
Node_73 -> Node_1;
Node_84 -> Node_1;
Node_66 -> Node_67;
Node_76 -> Node_43;
}

