digraph "CFG forandroidx.constraintlayout.core.ArrayLinkedVariables.hasAtLeastOnePositiveVariable()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r4 I:androidx.constraintlayout.core.ArrayLinkedVariables) androidx.constraintlayout.core.ArrayLinkedVariables.mHead int  (LINE:470)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:471)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|LOOP_START\lLOOP:0: B:3:0x0003\-\>B:11:0x0015\l|0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:472)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('current' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001c \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: IGET  (r2 I:int) = (r4 I:androidx.constraintlayout.core.ArrayLinkedVariables) androidx.constraintlayout.core.ArrayLinkedVariables.currentSize int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r1 I:??[int, byte, short, char] A[D('counter' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:16:0x001c \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: IGET  (r2 I:float[]) = (r4 I:androidx.constraintlayout.core.ArrayLinkedVariables) androidx.constraintlayout.core.ArrayLinkedVariables.mArrayValues float[]  (LINE:473)\l0x000c: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('current' int)]) \l0x000e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: CMP_L  (r2 I:int) = (r2 I:float), (r3 I:float) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|0x0011: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:11:0x0015 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|LOOP_END\lLOOP:0: B:3:0x0003\-\>B:11:0x0015\l|0x0015: IGET  (r2 I:int[]) = (r4 I:androidx.constraintlayout.core.ArrayLinkedVariables) androidx.constraintlayout.core.ArrayLinkedVariables.mArrayNextIndices int[]  (LINE:476)\l0x0017: AGET  (r0 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('current' int)]) \l0x0019: ARITH  (r1 I:int) = (r1 I:int A[D('counter' int)]) + (1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0013|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|RETURN\l|0x0013: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:474)\l0x0014: RETURN  (r2 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x001c|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|0x001c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:478)\l0x001d: RETURN  (r2 I:boolean) A[SYNTHETIC]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:478)\l0x001d: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{boolean androidx.constraintlayout.core.ArrayLinkedVariables.hasAtLeastOnePositiveVariable((r4 'this' I:androidx.constraintlayout.core.ArrayLinkedVariables A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0015 \-\> B:3:0x0003, CROSS_EDGE: B:13:0x001d \-\> B:1:?, CROSS_EDGE: B:4:0x0004 \-\> B:12:0x001c\lDebug Info:\l  0x0002\-0x001d: r0 'current' I\l  0x0003\-0x001d: r1 'counter' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_16;
Node_7 -> Node_8;
Node_8 -> Node_11;
Node_8 -> Node_14[style=dashed];
Node_11 -> Node_3;
Node_14 -> Node_9;
Node_9 -> Node_1;
Node_16 -> Node_17;
Node_17 -> Node_1;
Node_15 -> Node_12;
Node_12 -> Node_1;
}

