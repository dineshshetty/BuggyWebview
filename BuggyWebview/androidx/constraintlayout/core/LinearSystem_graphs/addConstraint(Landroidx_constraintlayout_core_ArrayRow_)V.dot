digraph "CFG forandroidx.constraintlayout.core.LinearSystem.addConstraint(Landroidx\/constraintlayout\/core\/ArrayRow;)V" {
Node_48 [shape=record,label="{48\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x0000|if (r11 != null) goto L4\l}"];
Node_51 [shape=record,label="{51\:\ 0x0002|RETURN\l|return\l}"];
Node_49 [shape=record,label="{49\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_52 [shape=record,label="{52\:\ 0x0003|androidx.constraintlayout.core.Metrics r0 = androidx.constraintlayout.core.LinearSystem.sMetrics\l}"];
Node_53 [shape=record,label="{53\:\ 0x0007|if (r0 == null) goto L9\l}"];
Node_54 [shape=record,label="{54\:\ 0x0009|r0.constraints = r0.constraints + 1\l}"];
Node_55 [shape=record,label="{55\:\ 0x0010|if (r11.isSimpleDefinition == false) goto L9\l}"];
Node_56 [shape=record,label="{56\:\ 0x0012|androidx.constraintlayout.core.Metrics r0 = androidx.constraintlayout.core.LinearSystem.sMetrics\lr0.simpleconstraints = r0.simpleconstraints + 1\l}"];
Node_57 [shape=record,label="{57\:\ 0x0019}"];
Node_58 [shape=record,label="{58\:\ 0x001f|if ((r10.mNumRows + 1) \>= r10.mMaxRows) goto L47\l}"];
Node_59 [shape=record,label="{59\:\ 0x0021}"];
Node_60 [shape=record,label="{60\:\ 0x0026|if ((r10.mNumColumns + 1) \< r10.mMaxColumns) goto L13\l}"];
Node_62 [shape=record,label="{62\:\ 0x002b|r0 = false\l}"];
Node_63 [shape=record,label="{63\:\ 0x002e|if (r11.isSimpleDefinition != false) goto L43\l}"];
Node_64 [shape=record,label="{64\:\ 0x0030|r11.updateFromSystem(r10)\l}"];
Node_65 [shape=record,label="{65\:\ 0x0037|if (r11.isEmpty() == false) goto L18\l}"];
Node_66 [shape=record,label="{66\:\ 0x0039|RETURN\l|return\l}"];
Node_67 [shape=record,label="{67\:\ 0x003a|r11.ensurePositiveConstant()\l}"];
Node_68 [shape=record,label="{68\:\ 0x0041|if (r11.chooseSubject(r10) == false) goto L40\l}"];
Node_69 [shape=record,label="{69\:\ 0x0043|androidx.constraintlayout.core.SolverVariable r4 = createExtraVariable()\lr11.variable = r4\lint r5 = r10.mNumRows\laddRow(r11)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0052|if (r10.mNumRows != (r5 + 1)) goto L40\l}"];
Node_71 [shape=record,label="{71\:\ 0x0054|r0 = true\lr10.mTempGoal.initFromRow(r11)\loptimize(r10.mTempGoal, true)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0062|if (r4.definitionId != (\-1)) goto L40\l}"];
Node_73 [shape=record,label="{73\:\ 0x0064}"];
Node_74 [shape=record,label="{74\:\ 0x0066|if (r11.variable != r4) goto L32\l}"];
Node_75 [shape=record,label="{75\:\ 0x0068|androidx.constraintlayout.core.SolverVariable r6 = r11.pickPivot(r4)\l}"];
Node_76 [shape=record,label="{76\:\ 0x006c|if (r6 == null) goto L32\l}"];
Node_77 [shape=record,label="{77\:\ 0x006e|androidx.constraintlayout.core.Metrics r7 = androidx.constraintlayout.core.LinearSystem.sMetrics\l}"];
Node_78 [shape=record,label="{78\:\ 0x0070|if (r7 == null) goto L31\l}"];
Node_79 [shape=record,label="{79\:\ 0x0072|r7.pivots = r7.pivots + 1\l}"];
Node_80 [shape=record,label="{80\:\ 0x0077|r11.pivot(r6)\l}"];
Node_81 [shape=record,label="{81\:\ 0x007a}"];
Node_82 [shape=record,label="{82\:\ 0x007c|if (r11.isSimpleDefinition != false) goto L35\l}"];
Node_83 [shape=record,label="{83\:\ 0x007e|r11.variable.updateReferencesWithNewDefinition(r10, r11)\l}"];
Node_84 [shape=record,label="{84\:\ 0x0083}"];
Node_85 [shape=record,label="{85\:\ 0x0085|if (androidx.constraintlayout.core.LinearSystem.OPTIMIZED_ENGINE == false) goto L39\l}"];
Node_86 [shape=record,label="{86\:\ 0x0087|r10.mCache.optimizedArrayRowPool.release(r11)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0096|r10.mNumRows = r10.mNumRows \- 1\l}"];
Node_87 [shape=record,label="{87\:\ 0x008f|r10.mCache.arrayRowPool.release(r11)\l}"];
Node_89 [shape=record,label="{89\:\ 0x009b|PHI: r0 \l  PHI: (r0v5 'added' boolean) = (r0v3 'added' boolean), (r0v3 'added' boolean), (r0v6 'added' boolean), (r0v6 'added' boolean) binds: [B:68:0x0041, B:70:0x0052, B:72:0x0062, B:88:0x0096] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_90 [shape=record,label="{90\:\ 0x009f|if (r11.hasKeyVariable() != false) goto L43\l}"];
Node_91 [shape=record,label="{91\:\ 0x00a1|RETURN\l|return\l}"];
Node_92 [shape=record,label="{92\:\ 0x00a2|PHI: r0 \l  PHI: (r0v4 'added' boolean) = (r0v3 'added' boolean), (r0v5 'added' boolean) binds: [B:63:0x002e, B:90:0x009f] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != false) goto L46\l}"];
Node_93 [shape=record,label="{93\:\ 0x00a4|addRow(r11)\l}"];
Node_94 [shape=record,label="{94\:\ 0x00a7|RETURN\lORIG_RETURN\l|return\l}"];
Node_95 [shape=record,label="{95\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_61 [shape=record,label="{61\:\ 0x0028|increaseTableSize()\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.LinearSystem.addConstraint((r10v0 'this' androidx.constraintlayout.core.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r11v0 'row' androidx.constraintlayout.core.ArrayRow A[D('row' androidx.constraintlayout.core.ArrayRow), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:66:0x0039 \-\> B:49:?, CROSS_EDGE: B:91:0x00a1 \-\> B:49:?, CROSS_EDGE: B:94:0x00a7 \-\> B:49:?, CROSS_EDGE: B:92:0x00a2 \-\> B:94:0x00a7, CROSS_EDGE: B:87:0x008f \-\> B:88:0x0096, CROSS_EDGE: B:82:0x007c \-\> B:84:0x0083, CROSS_EDGE: B:78:0x0070 \-\> B:80:0x0077, CROSS_EDGE: B:76:0x006c \-\> B:81:0x007a, CROSS_EDGE: B:74:0x0066 \-\> B:81:0x007a, CROSS_EDGE: B:72:0x0062 \-\> B:89:0x009b, CROSS_EDGE: B:70:0x0052 \-\> B:89:0x009b, CROSS_EDGE: B:68:0x0041 \-\> B:89:0x009b, CROSS_EDGE: B:63:0x002e \-\> B:92:0x00a2, CROSS_EDGE: B:60:0x0026 \-\> B:62:0x002b, CROSS_EDGE: B:58:0x001f \-\> B:61:0x0028, CROSS_EDGE: B:55:0x0010 \-\> B:57:0x0019, CROSS_EDGE: B:53:0x0007 \-\> B:57:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_48;Node_48 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_49;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_57;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_61;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_92;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_67;
Node_66 -> Node_49;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_89;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_89;
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_89;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_81;
Node_75 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_81;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_84;
Node_83 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_87;
Node_86 -> Node_88;
Node_88 -> Node_89;
Node_87 -> Node_88;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_92;
Node_91 -> Node_49;
Node_92 -> Node_93[style=dashed];
Node_92 -> Node_95;
Node_93 -> Node_94;
Node_94 -> Node_49;
Node_95 -> Node_49;
Node_61 -> Node_62;
}

