digraph "CFG forandroidx.constraintlayout.core.LinearSystem.optimize(Landroidx\/constraintlayout\/core\/LinearSystem$Row;Z)I" {
Node_71 [shape=record,label="{71\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_73 [shape=record,label="{73\:\ 0x0000|androidx.constraintlayout.core.Metrics r0 = androidx.constraintlayout.core.LinearSystem.sMetrics\l}"];
Node_74 [shape=record,label="{74\:\ 0x0004|if (r0 == null) goto L4\l}"];
Node_75 [shape=record,label="{75\:\ 0x0006|r0.optimize = r0.optimize + 1\l}"];
Node_76 [shape=record,label="{76\:\ 0x000b|r0 = false\lr3 = 0\lr4 = 0\l}"];
Node_77 [shape=record,label="{77\:\ 0x000e|LOOP_START\lLOOP:0: B:77:0x000e\-\>B:79:0x0012\lPHI: r4 \l  PHI: (r4v1 'i' int) = (r4v0 'i' int), (r4v9 'i' int) binds: [B:76:0x000b, B:79:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_78 [shape=record,label="{78\:\ 0x0010|if (r4 \>= r13.mNumColumns) goto L8\l}"];
Node_79 [shape=record,label="{79\:\ 0x0012|LOOP_END\lLOOP:0: B:77:0x000e\-\>B:79:0x0012\l|r13.mAlreadyTestedCandidates[r4] = false\lint r4 = r4 + 1\l}"];
Node_124 [shape=record,label="{124\:\ 0x001a|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x001a|LOOP_START\lLOOP:1: B:80:0x001a\-\>B:131:0x001a\lPHI: r0 r3 \l  PHI: (r0v2 'done' boolean) = (r0v1 'done' boolean), (r0v3 'done' boolean) binds: [B:124:0x001a, B:131:0x001a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'tries' int) = (r3v0 'tries' int), (r3v2 'tries' int) binds: [B:124:0x001a, B:131:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != false) goto L65\l}"];
Node_81 [shape=record,label="{81\:\ 0x001c|androidx.constraintlayout.core.Metrics r4 = androidx.constraintlayout.core.LinearSystem.sMetrics\l}"];
Node_82 [shape=record,label="{82\:\ 0x001e|if (r4 == null) goto L13\l}"];
Node_83 [shape=record,label="{83\:\ 0x0020|r4.iterations = r4.iterations + 1\l}"];
Node_84 [shape=record,label="{84\:\ 0x0025|int r3 = r3 + 1\l}"];
Node_85 [shape=record,label="{85\:\ 0x002b|if (r3 \< (r13.mNumColumns * 2)) goto L15\l}"];
Node_87 [shape=record,label="{87\:\ 0x002e}"];
Node_88 [shape=record,label="{88\:\ 0x0033|if (r14.getKey() == null) goto L18\l}"];
Node_89 [shape=record,label="{89\:\ 0x0035|r13.mAlreadyTestedCandidates[r14.getKey().f13id] = true\l}"];
Node_90 [shape=record,label="{90\:\ 0x003f|androidx.constraintlayout.core.SolverVariable r4 = r14.getPivotCandidate(r13, r13.mAlreadyTestedCandidates)\l}"];
Node_91 [shape=record,label="{91\:\ 0x0045|if (r4 == null) goto L26\l}"];
Node_92 [shape=record,label="{92\:\ 0x0047}"];
Node_93 [shape=record,label="{93\:\ 0x004d|if (r13.mAlreadyTestedCandidates[r4.f13id] == false) goto L22\l}"];
Node_95 [shape=record,label="{95\:\ 0x0050|r13.mAlreadyTestedCandidates[r4.f13id] = true\l}"];
Node_125 [shape=record,label="{125\:\ 0x004f|SYNTHETIC\l}"];
Node_94 [shape=record,label="{94\:\ 0x004f|RETURN\l|return r3\l}"];
Node_72 [shape=record,label="{72\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_96 [shape=record,label="{96\:\ 0x0056|if (r4 == null) goto L27\l}"];
Node_127 [shape=record,label="{127\:\ 0x00b2|SYNTHETIC\l}"];
Node_121 [shape=record,label="{121\:\ 0x00b2|r0 = true\l}"];
Node_132 [shape=record,label="{132\:\ 0x001a|SYNTHETIC\l}"];
Node_131 [shape=record,label="{131\:\ 0x001a|LOOP_END\lSYNTHETIC\lLOOP:1: B:80:0x001a\-\>B:131:0x001a\lPHI: r0 \l  PHI: (r0v3 'done' boolean) = (r0v2 'done' boolean), (r0v2 'done' boolean), (r0v4 'done' boolean) binds: [B:133:0x001a, B:134:0x001a, B:132:0x001a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_130 [shape=record,label="{130\:\ 0x0058|SYNTHETIC\l}"];
Node_97 [shape=record,label="{97\:\ 0x0058|r5 = Float.MAX_VALUE\lr6 = \-1\lr7 = 0\l}"];
Node_98 [shape=record,label="{98\:\ 0x005d|LOOP_START\lLOOP:2: B:98:0x005d\-\>B:113:0x008e\lPHI: r5 r6 r7 \l  PHI: (r5v3 'min' float) = (r5v2 'min' float), (r5v4 'min' float) binds: [B:97:0x0058, B:113:0x008e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v1 'pivotRowIndex' int) = (r6v0 'pivotRowIndex' int), (r6v2 'pivotRowIndex' int) binds: [B:97:0x0058, B:113:0x008e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v1 'i' int) = (r7v0 'i' int), (r7v6 'i' int) binds: [B:97:0x0058, B:113:0x008e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_99 [shape=record,label="{99\:\ 0x005f|if (r7 \>= r13.mNumRows) goto L53\l}"];
Node_100 [shape=record,label="{100\:\ 0x0061|r8 = r13.mRows[r7]\landroidx.constraintlayout.core.SolverVariable r9 = r8.variable\l}"];
Node_101 [shape=record,label="{101\:\ 0x006b|if (r9.mType != androidx.constraintlayout.core.SolverVariable.Type.UNRESTRICTED) goto L37\l}"];
Node_103 [shape=record,label="{103\:\ 0x006e}"];
Node_104 [shape=record,label="{104\:\ 0x0070|if (r8.isSimpleDefinition == false) goto L39\l}"];
Node_106 [shape=record,label="{106\:\ 0x0073}"];
Node_107 [shape=record,label="{107\:\ 0x0077|if (r8.hasVariable(r4) == false) goto L50\l}"];
Node_108 [shape=record,label="{108\:\ 0x0079|float r10 = r8.variables.get(r4)\l}"];
Node_109 [shape=record,label="{109\:\ 0x0082|if ((r10 \> 0.0f ? 1 : (r10 == 0.0f ? 0 : \-1)) \>= 0) goto L49\l}"];
Node_110 [shape=record,label="{110\:\ 0x0084|float r11 = (\-r8.constantValue) \/ r10\l}"];
Node_111 [shape=record,label="{111\:\ 0x008a|if ((r11 \> r5 ? 1 : (r11 == r5 ? 0 : \-1)) \>= 0) goto L48\l}"];
Node_112 [shape=record,label="{112\:\ 0x008c|r5 = r11\lr6 = r7\l}"];
Node_136 [shape=record,label="{136\:\ 0x008e|SYNTHETIC\l}"];
Node_113 [shape=record,label="{113\:\ 0x008e|LOOP_END\lLOOP:2: B:98:0x005d\-\>B:113:0x008e\lPHI: r5 r6 \l  PHI: (r5v4 'min' float) = (r5v3 'min' float), (r5v3 'min' float), (r5v3 'min' float), (r5v3 'min' float), (r5v3 'min' float), (r5v5 'min' float) binds: [B:140:0x008e, B:141:0x008e, B:137:0x008e, B:138:0x008e, B:139:0x008e, B:136:0x008e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'pivotRowIndex' int) = (r6v1 'pivotRowIndex' int), (r6v1 'pivotRowIndex' int), (r6v1 'pivotRowIndex' int), (r6v1 'pivotRowIndex' int), (r6v1 'pivotRowIndex' int), (r6v3 'pivotRowIndex' int) binds: [B:140:0x008e, B:141:0x008e, B:137:0x008e, B:138:0x008e, B:139:0x008e, B:136:0x008e] A[DONT_GENERATE, DONT_INLINE]\l|int r7 = r7 + 1\l}"];
Node_139 [shape=record,label="{139\:\ 0x008e|SYNTHETIC\l}"];
Node_138 [shape=record,label="{138\:\ 0x008e|SYNTHETIC\l}"];
Node_137 [shape=record,label="{137\:\ 0x008e|SYNTHETIC\l}"];
Node_141 [shape=record,label="{141\:\ 0x008e|SYNTHETIC\l}"];
Node_140 [shape=record,label="{140\:\ 0x008e|SYNTHETIC\l}"];
Node_135 [shape=record,label="{135\:\ 0x0091|SYNTHETIC\l}"];
Node_114 [shape=record,label="{114\:\ 0x0091}"];
Node_115 [shape=record,label="{115\:\ 0x0092|if (r6 \<= (\-1)) goto L62\l}"];
Node_126 [shape=record,label="{126\:\ 0x0094|SYNTHETIC\l}"];
Node_116 [shape=record,label="{116\:\ 0x0094|r8 = r13.mRows[r6]\lr8.variable.definitionId = \-1\landroidx.constraintlayout.core.Metrics r7 = androidx.constraintlayout.core.LinearSystem.sMetrics\l}"];
Node_117 [shape=record,label="{117\:\ 0x009e|if (r7 == null) goto L60\l}"];
Node_118 [shape=record,label="{118\:\ 0x00a0|r7.pivots = r7.pivots + 1\l}"];
Node_119 [shape=record,label="{119\:\ 0x00a5|r8.pivot(r4)\lr8.variable.definitionId = r6\lr8.variable.updateReferencesWithNewDefinition(r13, r8)\l}"];
Node_134 [shape=record,label="{134\:\ 0x001a|SYNTHETIC\l}"];
Node_133 [shape=record,label="{133\:\ 0x001a|SYNTHETIC\l}"];
Node_129 [shape=record,label="{129\:\ 0x002d|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x002d|RETURN\l|return r3\l}"];
Node_128 [shape=record,label="{128\:\ 0x00b5|SYNTHETIC\l}"];
Node_123 [shape=record,label="{123\:\ 0x00b5|RETURN\l|return r3\l}"];
MethodNode[shape=record,label="{private final int androidx.constraintlayout.core.LinearSystem.optimize((r13v0 'this' androidx.constraintlayout.core.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r14v0 'goal' androidx.constraintlayout.core.LinearSystem$Row A[D('goal' androidx.constraintlayout.core.LinearSystem$Row), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'b' boolean A[D('b' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:79:0x0012 \-\> B:77:0x000e, CROSS_EDGE: B:94:0x004f \-\> B:72:?, BACK_EDGE: B:113:0x008e \-\> B:98:0x005d, CROSS_EDGE: B:111:0x008a \-\> B:113:0x008e, CROSS_EDGE: B:109:0x0082 \-\> B:113:0x008e, CROSS_EDGE: B:107:0x0077 \-\> B:113:0x008e, CROSS_EDGE: B:104:0x0070 \-\> B:113:0x008e, CROSS_EDGE: B:101:0x006b \-\> B:113:0x008e, BACK_EDGE: B:119:0x00a5 \-\> B:80:0x001a, CROSS_EDGE: B:117:0x009e \-\> B:119:0x00a5, BACK_EDGE: B:115:0x0092 \-\> B:80:0x001a, BACK_EDGE: B:121:0x00b2 \-\> B:80:0x001a, CROSS_EDGE: B:91:0x0045 \-\> B:96:0x0056, CROSS_EDGE: B:88:0x0033 \-\> B:90:0x003f, CROSS_EDGE: B:82:0x001e \-\> B:84:0x0025, CROSS_EDGE: B:123:0x00b5 \-\> B:72:?, CROSS_EDGE: B:74:0x0004 \-\> B:76:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_71;Node_71 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_76;
Node_75 -> Node_76;
Node_76 -> Node_77;
Node_77 -> Node_78;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_124;
Node_79 -> Node_77;
Node_124 -> Node_80;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_128;
Node_81 -> Node_82;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_84;
Node_83 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_87;
Node_85 -> Node_129[style=dashed];
Node_87 -> Node_88;
Node_88 -> Node_89[style=dashed];
Node_88 -> Node_90;
Node_89 -> Node_90;
Node_90 -> Node_91;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_96;
Node_92 -> Node_93;
Node_93 -> Node_95;
Node_93 -> Node_125[style=dashed];
Node_95 -> Node_96;
Node_125 -> Node_94;
Node_94 -> Node_72;
Node_96 -> Node_127;
Node_96 -> Node_130[style=dashed];
Node_127 -> Node_121;
Node_121 -> Node_132;
Node_132 -> Node_131;
Node_131 -> Node_80;
Node_130 -> Node_97;
Node_97 -> Node_98;
Node_98 -> Node_99;
Node_99 -> Node_100[style=dashed];
Node_99 -> Node_135;
Node_100 -> Node_101;
Node_101 -> Node_103;
Node_101 -> Node_140[style=dashed];
Node_103 -> Node_104;
Node_104 -> Node_106;
Node_104 -> Node_141[style=dashed];
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_137;
Node_108 -> Node_109;
Node_109 -> Node_110[style=dashed];
Node_109 -> Node_138;
Node_110 -> Node_111;
Node_111 -> Node_112[style=dashed];
Node_111 -> Node_139;
Node_112 -> Node_136;
Node_136 -> Node_113;
Node_113 -> Node_98;
Node_139 -> Node_113;
Node_138 -> Node_113;
Node_137 -> Node_113;
Node_141 -> Node_113;
Node_140 -> Node_113;
Node_135 -> Node_114;
Node_114 -> Node_115;
Node_115 -> Node_126[style=dashed];
Node_115 -> Node_133;
Node_126 -> Node_116;
Node_116 -> Node_117;
Node_117 -> Node_118[style=dashed];
Node_117 -> Node_119;
Node_118 -> Node_119;
Node_119 -> Node_134;
Node_134 -> Node_131;
Node_133 -> Node_131;
Node_129 -> Node_86;
Node_86 -> Node_72;
Node_128 -> Node_123;
Node_123 -> Node_72;
}

