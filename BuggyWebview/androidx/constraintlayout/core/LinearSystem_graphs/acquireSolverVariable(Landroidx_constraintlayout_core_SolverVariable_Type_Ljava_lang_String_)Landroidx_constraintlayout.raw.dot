digraph "CFG forandroidx.constraintlayout.core.LinearSystem.acquireSolverVariable(Landroidx\/constraintlayout\/core\/SolverVariable$Type;Ljava\/lang\/String;)Landroidx\/constraintlayout\/core\/SolverVariable;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:androidx.constraintlayout.core.Cache) = (r4 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mCache androidx.constraintlayout.core.Cache  (LINE:370)\l0x0002: IGET  (r0 I:androidx.constraintlayout.core.Pools$Pool\<androidx.constraintlayout.core.SolverVariable\>) = (r0 I:androidx.constraintlayout.core.Cache) androidx.constraintlayout.core.Cache.solverVariablePool androidx.constraintlayout.core.Pools$Pool \l0x0004: INVOKE  (r0 I:java.lang.Object) = (r0 I:androidx.constraintlayout.core.Pools$Pool) type: INTERFACE call: androidx.constraintlayout.core.Pools.Pool.acquire():java.lang.Object A[MD:():T (m)]\l0x0008: CHECK_CAST (r0 I:androidx.constraintlayout.core.SolverVariable) = (androidx.constraintlayout.core.SolverVariable) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('variable' androidx.constraintlayout.core.SolverVariable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0016  (LINE:371)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|0x000c: NEW_INSTANCE  (r1 I:androidx.constraintlayout.core.SolverVariable) =  androidx.constraintlayout.core.SolverVariable  (LINE:372)\l0x000e: INVOKE  \l  (r1 I:androidx.constraintlayout.core.SolverVariable)\l  (r5 I:androidx.constraintlayout.core.SolverVariable$Type A[D('type' androidx.constraintlayout.core.SolverVariable$Type)])\l  (r6 I:java.lang.String A[D('prefix' java.lang.String)])\l type: DIRECT call: androidx.constraintlayout.core.SolverVariable.\<init\>(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):void A[MD:(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):void (m)]\l0x0011: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('variable' androidx.constraintlayout.core.SolverVariable)]) = (r1 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  \l  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l  (r5 I:androidx.constraintlayout.core.SolverVariable$Type A[D('type' androidx.constraintlayout.core.SolverVariable$Type)])\l  (r6 I:java.lang.String A[D('prefix' java.lang.String)])\l type: VIRTUAL call: androidx.constraintlayout.core.SolverVariable.setType(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):void A[MD:(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):void (m)] (LINE:373)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|0x001c: IGET  (r1 I:int) = (r4 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mPoolVariablesCount int  (LINE:378)\l0x001e: SGET  (r2 I:int) =  androidx.constraintlayout.core.LinearSystem.POOL_SIZE int \l}"];
Node_18 [shape=record,label="{18\:\ 0x0020|0x0020: IF  (r1 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:20:0x0030 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|0x0022: ARITH  (r2 I:int) = (r2 I:int) * (2 int)  (LINE:379)\l0x0024: SPUT  (r2 I:int) androidx.constraintlayout.core.LinearSystem.POOL_SIZE int \l0x0026: IGET  (r1 I:androidx.constraintlayout.core.SolverVariable[]) = (r4 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mPoolVariables androidx.constraintlayout.core.SolverVariable[]  (LINE:380)\l0x0028: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r2 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x002c: CHECK_CAST (r1 I:androidx.constraintlayout.core.SolverVariable[]) = (androidx.constraintlayout.core.SolverVariable[]) (r1 I:??[OBJECT, ARRAY]) \l0x002e: IPUT  (r1 I:androidx.constraintlayout.core.SolverVariable[]), (r4 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mPoolVariables androidx.constraintlayout.core.SolverVariable[] \l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|0x0030: IGET  (r1 I:androidx.constraintlayout.core.SolverVariable[]) = (r4 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mPoolVariables androidx.constraintlayout.core.SolverVariable[]  (LINE:382)\l0x0032: IGET  (r2 I:int) = (r4 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mPoolVariablesCount int \l0x0034: ARITH  (r3 I:int) = (r2 I:int) + (1 int) \l0x0036: IPUT  (r3 I:int), (r4 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mPoolVariablesCount int \l0x0038: APUT  \l  (r1 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char])\l  (r0 I:??[OBJECT, ARRAY] A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l \l}"];
Node_21 [shape=record,label="{21\:\ 0x003a|RETURN\l|0x003a: RETURN  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])  (LINE:383)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|0x0016: INVOKE  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)]) type: VIRTUAL call: androidx.constraintlayout.core.SolverVariable.reset():void A[MD:():void (m)] (LINE:375)\l0x0019: INVOKE  \l  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l  (r5 I:androidx.constraintlayout.core.SolverVariable$Type A[D('type' androidx.constraintlayout.core.SolverVariable$Type)])\l  (r6 I:java.lang.String A[D('prefix' java.lang.String)])\l type: VIRTUAL call: androidx.constraintlayout.core.SolverVariable.setType(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):void A[MD:(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):void (m)] (LINE:376)\l}"];
MethodNode[shape=record,label="{private androidx.constraintlayout.core.SolverVariable androidx.constraintlayout.core.LinearSystem.acquireSolverVariable((r4 'this' I:androidx.constraintlayout.core.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r5 I:androidx.constraintlayout.core.SolverVariable$Type A[D('type' androidx.constraintlayout.core.SolverVariable$Type), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[D('prefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0020 \-\> B:20:0x0030, CROSS_EDGE: B:16:0x0016 \-\> B:17:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x003a: r0 'variable' Landroidx\/constraintlayout\/core\/SolverVariable;\l  \-1 \-0x003a: r5 'type' Landroidx\/constraintlayout\/core\/SolverVariable$Type;\l  \-1 \-0x003a: r6 'prefix' Ljava\/lang\/String;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

