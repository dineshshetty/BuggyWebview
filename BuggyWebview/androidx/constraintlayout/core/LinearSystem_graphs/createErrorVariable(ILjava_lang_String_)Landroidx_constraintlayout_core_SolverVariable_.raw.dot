digraph "CFG forandroidx.constraintlayout.core.LinearSystem.createErrorVariable(ILjava\/lang\/String;)Landroidx\/constraintlayout\/core\/SolverVariable;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: SGET  (r0 I:androidx.constraintlayout.core.Metrics) =  androidx.constraintlayout.core.LinearSystem.sMetrics androidx.constraintlayout.core.Metrics  (LINE:348)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000b \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: IGET  (r1 I:long) = (r0 I:androidx.constraintlayout.core.Metrics) androidx.constraintlayout.core.Metrics.errors long  (LINE:349)\l0x0006: CONST  (r3 I:??[long, double]) = (1 ??[long, double]) \l0x0008: ARITH  (r1 I:long) = (r1 I:long) + (r3 I:long) \l0x0009: IPUT  (r1 I:long), (r0 I:androidx.constraintlayout.core.Metrics) androidx.constraintlayout.core.Metrics.errors long \l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IGET  (r0 I:int) = (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mNumColumns int  (LINE:351)\l0x000d: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x000f: IGET  (r1 I:int) = (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mMaxColumns int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|0x0011: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:18:0x0016 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|0x0013: INVOKE  (r5 I:androidx.constraintlayout.core.LinearSystem) type: DIRECT call: androidx.constraintlayout.core.LinearSystem.increaseTableSize():void A[MD:():void (m)] (LINE:352)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|0x0016: SGET  (r0 I:androidx.constraintlayout.core.SolverVariable$Type) =  androidx.constraintlayout.core.SolverVariable.Type.ERROR androidx.constraintlayout.core.SolverVariable$Type  (LINE:354)\l0x0018: INVOKE  (r0 I:androidx.constraintlayout.core.SolverVariable) = \l  (r5 I:androidx.constraintlayout.core.LinearSystem)\l  (r0 I:androidx.constraintlayout.core.SolverVariable$Type)\l  (r7 I:java.lang.String A[D('prefix' java.lang.String)])\l type: DIRECT call: androidx.constraintlayout.core.LinearSystem.acquireSolverVariable(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):androidx.constraintlayout.core.SolverVariable A[MD:(androidx.constraintlayout.core.SolverVariable$Type, java.lang.String):androidx.constraintlayout.core.SolverVariable (m)]\l0x001c: IGET  (r1 I:int) = (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mVariablesID int  (LINE:355)\l0x001e: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0020: IPUT  (r1 I:int), (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mVariablesID int \l0x0022: IGET  (r2 I:int) = (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mNumColumns int  (LINE:356)\l0x0024: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0026: IPUT  (r2 I:int), (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mNumColumns int \l0x0028: IPUT  \l  (r1 I:int)\l  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l androidx.constraintlayout.core.SolverVariable.id int  (LINE:357)\l0x002a: IPUT  \l  (r6 I:int A[D('strength' int)])\l  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l androidx.constraintlayout.core.SolverVariable.strength int  (LINE:358)\l0x002c: IGET  (r1 I:androidx.constraintlayout.core.Cache) = (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mCache androidx.constraintlayout.core.Cache  (LINE:359)\l0x002e: IGET  (r1 I:androidx.constraintlayout.core.SolverVariable[]) = (r1 I:androidx.constraintlayout.core.Cache) androidx.constraintlayout.core.Cache.mIndexedVariables androidx.constraintlayout.core.SolverVariable[] \l0x0030: IGET  (r2 I:int) = (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mVariablesID int \l0x0032: APUT  \l  (r1 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char])\l  (r0 I:??[OBJECT, ARRAY] A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l \l0x0034: IGET  (r1 I:androidx.constraintlayout.core.LinearSystem$Row) = (r5 I:androidx.constraintlayout.core.LinearSystem) androidx.constraintlayout.core.LinearSystem.mGoal androidx.constraintlayout.core.LinearSystem$Row  (LINE:360)\l0x0036: INVOKE  \l  (r1 I:androidx.constraintlayout.core.LinearSystem$Row)\l  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l type: INTERFACE call: androidx.constraintlayout.core.LinearSystem.Row.addError(androidx.constraintlayout.core.SolverVariable):void A[MD:(androidx.constraintlayout.core.SolverVariable):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0039|RETURN\l|0x0039: RETURN  (r0 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])  (LINE:361)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.constraintlayout.core.SolverVariable androidx.constraintlayout.core.LinearSystem.createErrorVariable((r5 'this' I:androidx.constraintlayout.core.LinearSystem A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('strength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.String A[D('prefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0011 \-\> B:18:0x0016, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x0039: r0 'variable' Landroidx\/constraintlayout\/core\/SolverVariable;\l  \-1 \-0x0039: r6 'strength' I\l  \-1 \-0x0039: r7 'prefix' Ljava\/lang\/String;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

