digraph "CFG forandroidx.constraintlayout.core.LinearSystem.displaySystemInformation()V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|r1 = 0\lr2 = 0\l}"];
Node_27 [shape=record,label="{27\:\ 0x0003|LOOP_START\lLOOP:0: B:27:0x0003\-\>B:32:0x0014\lPHI: r1 r2 \l  PHI: (r1v1 'rowSize' int) = (r1v0 'rowSize' int), (r1v2 'rowSize' int) binds: [B:26:0x0000, B:32:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v6 'i' int) binds: [B:26:0x0000, B:32:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0005|if (r2 \>= r7.TABLE_SIZE) goto L10\l}"];
Node_29 [shape=record,label="{29\:\ 0x0007|androidx.constraintlayout.core.ArrayRow[] r3 = r7.mRows\l}"];
Node_30 [shape=record,label="{30\:\ 0x000b|if (r3[r2] == null) goto L9\l}"];
Node_31 [shape=record,label="{31\:\ 0x000d|int r1 = r1 + r3[r2].sizeInBytes()\l}"];
Node_43 [shape=record,label="{43\:\ 0x0014|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|LOOP_END\lLOOP:0: B:27:0x0003\-\>B:32:0x0014\lPHI: r1 \l  PHI: (r1v2 'rowSize' int) = (r1v1 'rowSize' int), (r1v3 'rowSize' int) binds: [B:44:0x0014, B:43:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 + 1\l}"];
Node_44 [shape=record,label="{44\:\ 0x0014|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0017|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|r2 = 0\lr3 = 0\l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|LOOP_START\lLOOP:1: B:34:0x0019\-\>B:39:0x002a\lPHI: r2 r3 \l  PHI: (r2v3 'actualRowSize' int) = (r2v2 'actualRowSize' int), (r2v4 'actualRowSize' int) binds: [B:33:0x0017, B:39:0x002a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'i' int) = (r3v1 'i' int), (r3v4 'i' int) binds: [B:33:0x0017, B:39:0x002a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|if (r3 \>= r7.mNumRows) goto L20\l}"];
Node_36 [shape=record,label="{36\:\ 0x001d|androidx.constraintlayout.core.ArrayRow[] r4 = r7.mRows\l}"];
Node_37 [shape=record,label="{37\:\ 0x0021|if (r4[r3] == null) goto L19\l}"];
Node_38 [shape=record,label="{38\:\ 0x0023|int r2 = r2 + r4[r3].sizeInBytes()\l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x002a|LOOP_END\lLOOP:1: B:34:0x0019\-\>B:39:0x002a\lPHI: r2 \l  PHI: (r2v4 'actualRowSize' int) = (r2v3 'actualRowSize' int), (r2v5 'actualRowSize' int) binds: [B:47:0x002a, B:46:0x002a] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = r3 + 1\l}"];
Node_47 [shape=record,label="{47\:\ 0x002a|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x002d|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x002d|java.io.PrintStream r3 = java.lang.System.out\ljava.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"Linear System \-\> Table size: \")\lr4.append(r7.TABLE_SIZE)\lr4.append(\" (\")\lint r5 = r7.TABLE_SIZE\lr4.append(getDisplaySize(r5 * r5))\lr4.append(\") \-\- row sizes: \")\lr4.append(getDisplaySize(r1))\lr4.append(\", actual size: \")\lr4.append(getDisplaySize(r2))\lr4.append(\" rows: \")\lr4.append(r7.mNumRows)\lr4.append(\"\/\")\lr4.append(r7.mMaxRows)\lr4.append(\" cols: \")\lr4.append(r7.mNumColumns)\lr4.append(\"\/\")\lr4.append(r7.mMaxColumns)\lr4.append(\" \")\lr4.append(0)\lr4.append(\" occupied cells, \")\lr4.append(getDisplaySize(0))\lr3.println(r4.toString())\l}"];
Node_41 [shape=record,label="{41\:\ 0x00a7|RETURN\l|return\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.constraintlayout.core.LinearSystem.displaySystemInformation((r7v0 'this' androidx.constraintlayout.core.LinearSystem A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0014 \-\> B:27:0x0003, CROSS_EDGE: B:30:0x000b \-\> B:32:0x0014, BACK_EDGE: B:39:0x002a \-\> B:34:0x0019, CROSS_EDGE: B:37:0x0021 \-\> B:39:0x002a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_42;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_44;
Node_31 -> Node_43;
Node_43 -> Node_32;
Node_32 -> Node_27;
Node_44 -> Node_32;
Node_42 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_45;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_47;
Node_38 -> Node_46;
Node_46 -> Node_39;
Node_39 -> Node_34;
Node_47 -> Node_39;
Node_45 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_25;
}

