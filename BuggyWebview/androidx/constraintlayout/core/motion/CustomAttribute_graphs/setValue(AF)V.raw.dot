digraph "CFG forandroidx.constraintlayout.core.motion.CustomAttribute.setValue([F)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: SGET  (r0 I:int[]) =  androidx.constraintlayout.core.motion.CustomAttribute.1.$SwitchMap$androidx$constraintlayout$core$motion$CustomAttribute$AttributeType int[]  (LINE:174)\l0x0002: IGET  (r1 I:androidx.constraintlayout.core.motion.CustomAttribute$AttributeType) = (r7 I:androidx.constraintlayout.core.motion.CustomAttribute) androidx.constraintlayout.core.motion.CustomAttribute.mType androidx.constraintlayout.core.motion.CustomAttribute$AttributeType \l0x0004: INVOKE  (r1 I:int) = (r1 I:androidx.constraintlayout.core.motion.CustomAttribute$AttributeType) type: VIRTUAL call: androidx.constraintlayout.core.motion.CustomAttribute.AttributeType.ordinal():int A[MD:():int (c)]\l0x0008: AGET  (r0 I:??[int, float, short, byte, char]) = (r0 I:??[int, float][]), (r1 I:??[int, short, byte, char]) \l0x000a: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: SWITCH  (r0 I:??)\l case 1: goto B:37:0x0053\l case 2: goto B:32:0x0045\l case 3: goto B:30:0x003d\l case 4: goto B:29:0x001a\l case 5: goto B:29:0x001a\l case 6: goto B:37:0x0053\l case 7: goto B:28:0x0015\l case 8: goto B:27:0x0010\l default: goto B:43:? \l}"];
Node_27 [shape=record,label="{27\:\ 0x0010|0x0010: AGET  (r0 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r2 I:??[int, short, byte, char])  (LINE:193)\l0x0012: IPUT  (r0 I:float), (r7 I:androidx.constraintlayout.core.motion.CustomAttribute) androidx.constraintlayout.core.motion.CustomAttribute.mFloatValue float \l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:197)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|0x0015: AGET  (r0 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r2 I:??[int, short, byte, char])  (LINE:180)\l0x0017: IPUT  (r0 I:float), (r7 I:androidx.constraintlayout.core.motion.CustomAttribute) androidx.constraintlayout.core.motion.CustomAttribute.mFloatValue float \l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:197)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001a|0x001a: AGET  (r0 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r2 I:??[int, short, byte, char])  (LINE:184)\l0x001c: AGET  (r1 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r1 I:??[int, short, byte, char]) \l0x001e: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x001f: AGET  (r2 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r2 I:??[int, short, byte, char]) \l0x0021: INVOKE  (r0 I:int) = (r0 I:float), (r1 I:float), (r2 I:float) type: STATIC call: androidx.constraintlayout.core.motion.CustomAttribute.hsvToRgb(float, float, float):int A[MD:(float, float, float):int (m)]\l0x0025: IPUT  (r0 I:int), (r7 I:androidx.constraintlayout.core.motion.CustomAttribute) androidx.constraintlayout.core.motion.CustomAttribute.mColorValue int \l0x0027: CONST  (r1 I:??[int, float, short, byte, char]) = (16777215(0xffffff, float:2.3509886E\-38) ??[int, float, short, byte, char])  (LINE:185)\l0x002a: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) & (r1 I:??[int, boolean, short, byte, char]) \l0x002b: CONST  (r1 I:??[int, float, short, byte, char]) = (1132396544(0x437f0000, float:255.0) ??[int, float, short, byte, char]) \l0x002d: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x002e: AGET  (r2 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r2 I:??[int, short, byte, char]) \l0x0030: ARITH  (r2 I:float) = (r2 I:float) * (r1 I:float) \l0x0032: CAST (r1 I:int) = (int) (r2 I:float) \l0x0033: INVOKE  (r1 I:int) = (r1 I:int) type: STATIC call: androidx.constraintlayout.core.motion.CustomAttribute.clamp(int):int A[MD:(int):int (m)]\l0x0037: ARITH  (r1 I:int) = (r1 I:int) \<\< (24 int) \l0x0039: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x003a: IPUT  (r0 I:int), (r7 I:androidx.constraintlayout.core.motion.CustomAttribute) androidx.constraintlayout.core.motion.CustomAttribute.mColorValue int \l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:197)\l}"];
Node_30 [shape=record,label="{30\:\ 0x003d|0x003d: NEW_INSTANCE  (r0 I:java.lang.RuntimeException) =  java.lang.RuntimeException  (LINE:188)\l0x003f: CONST_STR  (r1 I:java.lang.String) =  \"Color does not have a single color to interpolate\" \l0x0041: INVOKE  (r0 I:java.lang.RuntimeException), (r1 I:java.lang.String) type: DIRECT call: java.lang.RuntimeException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0044|0x0044: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0045|0x0045: AGET  (r0 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r2 I:??[int, short, byte, char])  (LINE:190)\l0x0047: CAST (r3 I:double) = (double) (r0 I:float) \l0x0048: CONST  (r5 I:??[long, double]) = (4602678819172646912(0x3fe0000000000000, double:0.5) ??[long, double]) \l0x004a: CMP_L  (r0 I:int) = (r3 I:double), (r5 I:double) \l}"];
Node_33 [shape=record,label="{33\:\ 0x004c|0x004c: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:35:0x004f \l}"];
Node_35 [shape=record,label="{35\:\ 0x004f|0x004f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0050|0x0050: IPUT  (r1 I:boolean), (r7 I:androidx.constraintlayout.core.motion.CustomAttribute) androidx.constraintlayout.core.motion.CustomAttribute.mBooleanValue boolean \l}"];
Node_42 [shape=record,label="{42\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:197)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0053|0x0053: AGET  (r0 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][] A[D('value' float[])]), (r2 I:??[int, short, byte, char])  (LINE:177)\l0x0055: CAST (r0 I:int) = (int) (r0 I:float) \l0x0056: IPUT  (r0 I:int), (r7 I:androidx.constraintlayout.core.motion.CustomAttribute) androidx.constraintlayout.core.motion.CustomAttribute.mIntegerValue int \l}"];
Node_38 [shape=record,label="{38\:\ 0x0059|RETURN\lORIG_RETURN\l|0x0059: RETURN    (LINE:197)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:197)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.CustomAttribute.setValue((r7 'this' I:androidx.constraintlayout.core.motion.CustomAttribute A[IMMUTABLE_TYPE, THIS]), (r8 I:float[] A[D('value' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0015 \-\> B:38:0x0059, CROSS_EDGE: B:29:0x001a \-\> B:38:0x0059, CROSS_EDGE: B:31:0x0044 \-\> B:23:?, CROSS_EDGE: B:36:0x0050 \-\> B:38:0x0059, CROSS_EDGE: B:33:0x004c \-\> B:36:0x0050, CROSS_EDGE: B:37:0x0053 \-\> B:38:0x0059, CROSS_EDGE: B:25:0x000c \-\> B:38:0x0059\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x006d: r8 'value' [F\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_28;
Node_25 -> Node_29;
Node_25 -> Node_30;
Node_25 -> Node_32;
Node_25 -> Node_37;
Node_25 -> Node_43;
Node_27 -> Node_39;
Node_39 -> Node_23;
Node_28 -> Node_40;
Node_40 -> Node_23;
Node_29 -> Node_41;
Node_41 -> Node_23;
Node_30 -> Node_31;
Node_31 -> Node_23;
Node_32 -> Node_33;
Node_33 -> Node_35;
Node_33 -> Node_36[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_42;
Node_42 -> Node_23;
Node_37 -> Node_38;
Node_38 -> Node_23;
Node_43 -> Node_23;
}

