digraph "CFG forandroidx.constraintlayout.core.motion.Motion.getPos(D)[D" {
subgraph cluster_Region_1134258109 {
label = "R(3:1|(2:3|(1:5))|7)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|r3.mSpline[0].getPos(r4, r3.mInterpolateData)\landroidx.constraintlayout.core.motion.utils.CurveFit androidx.constraintlayout.core.motion.utils.CurveFit r0 = r3.mArcSpline\l}"];
subgraph cluster_IfRegion_2052580010 {
label = "IF [B:12:0x000c] THEN: R(2:3|(1:5)) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000c|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_506923799 {
label = "R(2:3|(1:5))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x000e|double[] double[] r1 = r3.mInterpolateData\l}"];
subgraph cluster_IfRegion_109650403 {
label = "IF [B:14:0x0011] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0011|if (r1.length \> 0) goto L5\l}"];
subgraph cluster_Region_1042085704 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0013|r0.getPos(r4, r1)\l}"];
}
}
}
}
Node_17 [shape=record,label="{17\:\ 0x0018|RETURN\l|return r3.mInterpolateData\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0016}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public double[] androidx.constraintlayout.core.motion.Motion.getPos((r3v0 'this' androidx.constraintlayout.core.motion.Motion A[IMMUTABLE_TYPE, THIS]), (r4v0 'position' double A[D('position' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x0011 \-\> B:16:0x0016, CROSS_EDGE: B:12:0x000c \-\> B:16:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_16[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_16;
Node_17 -> Node_10;
Node_9 -> Node_11;
Node_16 -> Node_17;
}

