digraph "CFG forandroidx.constraintlayout.core.motion.Motion.buildKeyFrames([F[I[I)I" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:484)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0001|0x0001: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('keyFrames' float[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x006f \l}"];
Node_31 [shape=record,label="{31\:\ 0x0003|0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:485)\l0x0004: IGET  (r2 I:androidx.constraintlayout.core.motion.utils.CurveFit[]) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mSpline androidx.constraintlayout.core.motion.utils.CurveFit[]  (LINE:486)\l0x0006: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]) \l0x0008: INVOKE  (r2 I:double[]) = (r2 I:androidx.constraintlayout.core.motion.utils.CurveFit) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.CurveFit.getTimePoints():double[] A[MD:():double[] (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x000c|0x000c: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('mode' int[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0029  (LINE:487)\l}"];
Node_33 [shape=record,label="{33\:\ 0x000e|0x000e: IGET  (r3 I:java.util.ArrayList\<androidx.constraintlayout.core.motion.MotionPaths\>) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mMotionPaths java.util.ArrayList  (LINE:488)\l0x0010: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0014|LOOP_START\lLOOP:0: B:34:0x0014\-\>B:36:0x001a\l|0x0014: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0018|0x0018: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0028 \l}"];
Node_36 [shape=record,label="{36\:\ 0x001a|LOOP_END\lLOOP:0: B:34:0x0014\-\>B:36:0x001a\l|0x001a: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001e: CHECK_CAST (r4 I:androidx.constraintlayout.core.motion.MotionPaths) = (androidx.constraintlayout.core.motion.MotionPaths) (r4 I:??[OBJECT, ARRAY]) \l0x0020: ARITH  (r5 I:int) = (r1 I:int A[D('count' int)]) + (1 int)  (LINE:489)\l0x0022: IGET  (r6 I:int) = \l  (r4 I:androidx.constraintlayout.core.motion.MotionPaths A[D('keyFrame' androidx.constraintlayout.core.motion.MotionPaths)])\l androidx.constraintlayout.core.motion.MotionPaths.mMode int \l0x0024: APUT  \l  (r13 I:??[int, float][] A[D('mode' int[])])\l  (r1 I:??[int, short, byte, char])\l  (r6 I:??[int, float, short, byte, char])\l \l0x0026: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])  (LINE:490)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0028|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0028|0x0028: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:491)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0029|0x0029: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('pos' int[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x004b  (LINE:493)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002b|0x002b: IGET  (r3 I:java.util.ArrayList\<androidx.constraintlayout.core.motion.MotionPaths\>) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mMotionPaths java.util.ArrayList  (LINE:494)\l0x002d: INVOKE  (r3 I:java.util.Iterator) = (r3 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0031|LOOP_START\lLOOP:1: B:40:0x0031\-\>B:42:0x0037\l|0x0031: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0035|0x0035: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x004a \l}"];
Node_42 [shape=record,label="{42\:\ 0x0037|LOOP_END\lLOOP:1: B:40:0x0031\-\>B:42:0x0037\l|0x0037: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x003b: CHECK_CAST (r4 I:androidx.constraintlayout.core.motion.MotionPaths) = (androidx.constraintlayout.core.motion.MotionPaths) (r4 I:??[OBJECT, ARRAY]) \l0x003d: ARITH  (r5 I:int) = (r1 I:int A[D('count' int)]) + (1 int)  (LINE:495)\l0x003f: CONST  (r6 I:??[int, float, short, byte, char]) = (1120403456(0x42c80000, float:100.0) ??[int, float, short, byte, char]) \l0x0041: IGET  (r7 I:float) = \l  (r4 I:androidx.constraintlayout.core.motion.MotionPaths A[D('keyFrame' androidx.constraintlayout.core.motion.MotionPaths)])\l androidx.constraintlayout.core.motion.MotionPaths.position float \l0x0043: ARITH  (r7 I:float) = (r7 I:float) * (r6 I:float) \l0x0045: CAST (r6 I:int) = (int) (r7 I:float) \l0x0046: APUT  (r14 I:??[int, float][] A[D('pos' int[])]), (r1 I:??[int, short, byte, char]), (r6 I:??[int, float, short, byte, char]) \l0x0048: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])  (LINE:496)\l}"];
Node_52 [shape=record,label="{52\:\ 0x004a|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x004a|0x004a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:497)\l}"];
Node_44 [shape=record,label="{44\:\ 0x004b|0x004b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:499)\l}"];
Node_45 [shape=record,label="{45\:\ 0x004c|LOOP_START\lLOOP:2: B:45:0x004c\-\>B:47:0x004f\l|0x004c: ARRAY_LENGTH  (r4 I:int) = (r2 I:??[] A[D('time' double[])]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x004d|0x004d: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:53:0x006c \l}"];
Node_47 [shape=record,label="{47\:\ 0x004f|LOOP_END\lLOOP:2: B:45:0x004c\-\>B:47:0x004f\l|0x004f: IGET  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit[]) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mSpline androidx.constraintlayout.core.motion.utils.CurveFit[]  (LINE:500)\l0x0051: AGET  (r4 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]) \l0x0053: AGET  (r5 I:??[long, double]) = (r2 I:??[long, double][] A[D('time' double[])]), (r3 I:??[int, short, byte, char] A[D('i' int)]) \l0x0055: IGET  (r7 I:double[]) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mInterpolateData double[] \l0x0057: INVOKE  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit), (r5 I:double), (r7 I:double[]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.CurveFit.getPos(double, double[]):void A[MD:(double, double[]):void (m)]\l0x005a: IGET  (r4 I:androidx.constraintlayout.core.motion.MotionPaths) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mStartMotionPath androidx.constraintlayout.core.motion.MotionPaths  (LINE:501)\l0x005c: AGET  (r5 I:??[long, double]) = (r2 I:??[long, double][] A[D('time' double[])]), (r3 I:??[int, short, byte, char] A[D('i' int)]) \l0x005e: IGET  (r7 I:int[]) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mInterpolateVariables int[] \l0x0060: IGET  (r8 I:double[]) = (r11 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mInterpolateData double[] \l0x0062: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('keyFrames' float[])]) \l0x0063: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)]) \l0x0064: INVOKE  \l  (r4 I:androidx.constraintlayout.core.motion.MotionPaths)\l  (r5 I:double)\l  (r7 I:int[])\l  (r8 I:double[])\l  (r9 I:float[])\l  (r10 I:int)\l type: VIRTUAL call: androidx.constraintlayout.core.motion.MotionPaths.getCenter(double, int[], double[], float[], int):void A[MD:(double, int[], double[], float[], int):void (m)]\l0x0067: ARITH  (r1 I:int) = (r1 I:int A[D('count' int)]) + (2 int)  (LINE:502)\l0x0069: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:499)\l}"];
Node_53 [shape=record,label="{53\:\ 0x006c|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x006c|0x006c: ARITH  (r0 I:int) = (r1 I:int A[D('count' int)]) \/ (2 int)  (LINE:504)\l}"];
Node_49 [shape=record,label="{49\:\ 0x006e|RETURN\l|0x006e: RETURN  (r0 I:int) \l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x006f|RETURN\l|0x006f: RETURN  (r0 I:int)  (LINE:506)\l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.core.motion.Motion.buildKeyFrames((r11 'this' I:androidx.constraintlayout.core.motion.Motion A[IMMUTABLE_TYPE, THIS]), (r12 I:float[] A[D('keyFrames' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int[] A[D('mode' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int[] A[D('pos' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:36:0x001a \-\> B:34:0x0014, BACK_EDGE: B:42:0x0037 \-\> B:40:0x0031, BACK_EDGE: B:47:0x004f \-\> B:45:0x004c, CROSS_EDGE: B:38:0x0029 \-\> B:44:0x004b, CROSS_EDGE: B:32:0x000c \-\> B:38:0x0029, CROSS_EDGE: B:50:0x006f \-\> B:28:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0022: r1 'count' I\l  0x0020\-0x0026: r4 'keyFrame' Landroidx\/constraintlayout\/core\/motion\/MotionPaths;\l  0x0022\-0x0028: r5 'count' I\l  0x0028\-0x003f: r1 'count' I\l  0x003d\-0x0048: r4 'keyFrame' Landroidx\/constraintlayout\/core\/motion\/MotionPaths;\l  0x003f\-0x004a: r5 'count' I\l  0x004c\-0x006c: r3 'i' I\l  0x004a\-0x006f: r1 'count' I\l  0x000c\-0x006f: r2 'time' [D\l  \-1 \-0x006f: r12 'keyFrames' [F\l  \-1 \-0x006f: r13 'mode' [I\l  \-1 \-0x006f: r14 'pos' [I\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_50;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_38;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_51;
Node_36 -> Node_34;
Node_51 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_44;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_52;
Node_42 -> Node_40;
Node_52 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_53;
Node_47 -> Node_45;
Node_53 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_28;
Node_50 -> Node_28;
}

