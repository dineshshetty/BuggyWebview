digraph "CFG forandroidx.constraintlayout.core.motion.Motion.getKeyFrameInfo(I[I)I" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY])  (LINE:1560)\l0x0002: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('type' int)]) \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1561)\l0x0006: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:1562)\l0x0007: NEW_ARRAY  (r4 I:float[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: float[] \l0x0009: IGET  (r5 I:java.util.ArrayList\<androidx.constraintlayout.core.motion.key.MotionKey\>) = (r0 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mKeyList java.util.ArrayList  (LINE:1564)\l0x000b: INVOKE  (r12 I:java.util.Iterator) = (r5 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|LOOP_START\lLOOP:0: B:24:0x000f\-\>B:39:0x000f\l|0x000f: INVOKE  (r5 I:boolean) = (r12 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013|0x0013: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0098 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: INVOKE  (r5 I:java.lang.Object) = (r12 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0019: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY]) \l0x001a: CHECK_CAST (r13 I:androidx.constraintlayout.core.motion.key.MotionKey) = (androidx.constraintlayout.core.motion.key.MotionKey) (r13 I:??[OBJECT, ARRAY]) \l0x001c: IGET  (r5 I:int) = \l  (r13 I:androidx.constraintlayout.core.motion.key.MotionKey A[D('key' androidx.constraintlayout.core.motion.key.MotionKey)])\l androidx.constraintlayout.core.motion.key.MotionKey.mType int  (LINE:1565)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|0x001e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0024 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|0x0020: CONST  (r5 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0021|0x0021: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0024 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0024|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|0x0024: MOVE  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('cursor' int)])  (LINE:1568)\l0x0025: CONST  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1569)\l0x0026: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r15 I:??[int, float, short, byte, char])\l \l0x0028: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int)  (LINE:1571)\l0x002a: IGET  (r5 I:int) = \l  (r13 I:androidx.constraintlayout.core.motion.key.MotionKey A[D('key' androidx.constraintlayout.core.motion.key.MotionKey)])\l androidx.constraintlayout.core.motion.key.MotionKey.mType int \l0x002c: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x002e: CONST  (r16 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1572)\l0x0030: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int) \l0x0032: IGET  (r5 I:int) = \l  (r13 I:androidx.constraintlayout.core.motion.key.MotionKey A[D('key' androidx.constraintlayout.core.motion.key.MotionKey)])\l androidx.constraintlayout.core.motion.key.MotionKey.mFramePosition int \l0x0034: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x0036: IGET  (r5 I:int) = \l  (r13 I:androidx.constraintlayout.core.motion.key.MotionKey A[D('key' androidx.constraintlayout.core.motion.key.MotionKey)])\l androidx.constraintlayout.core.motion.key.MotionKey.mFramePosition int  (LINE:1574)\l0x0038: CAST (r5 I:float) = (float) (r5 I:int) \l0x0039: CONST  (r6 I:??[int, float, short, byte, char]) = (1120403456(0x42c80000, float:100.0) ??[int, float, short, byte, char]) \l0x003b: ARITH  (r11 I:float) = (r5 I:float) \/ (r6 I:float) \l0x003d: IGET  (r5 I:androidx.constraintlayout.core.motion.utils.CurveFit[]) = (r0 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mSpline androidx.constraintlayout.core.motion.utils.CurveFit[]  (LINE:1575)\l0x003f: AGET  (r5 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r15 I:??[int, short, byte, char]) \l0x0041: CAST (r6 I:double) = (double) (r11 I:float A[D('time' float)]) \l0x0042: IGET  (r8 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mInterpolateData double[] \l0x0044: INVOKE  (r5 I:androidx.constraintlayout.core.motion.utils.CurveFit), (r6 I:double), (r8 I:double[]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.CurveFit.getPos(double, double[]):void A[MD:(double, double[]):void (m)]\l0x0047: IGET  (r5 I:androidx.constraintlayout.core.motion.MotionPaths) = (r0 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mStartMotionPath androidx.constraintlayout.core.motion.MotionPaths  (LINE:1576)\l0x0049: CAST (r6 I:double) = (double) (r11 I:float A[D('time' float)]) \l0x004a: IGET  (r8 I:int[]) = (r0 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mInterpolateVariables int[] \l0x004c: IGET  (r9 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.Motion) androidx.constraintlayout.core.motion.Motion.mInterpolateData double[] \l0x004e: CONST  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0050: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('pos' float[])]) \l0x0051: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('time' float)]) \l0x0053: MOVE  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('time' float)]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0055: INVOKE  \l  (r5 I:androidx.constraintlayout.core.motion.MotionPaths)\l  (r6 I:double)\l  (r8 I:int[])\l  (r9 I:double[])\l  (r10 I:float[])\l  (r11 I:int)\l type: VIRTUAL call: androidx.constraintlayout.core.motion.MotionPaths.getCenter(double, int[], double[], float[], int):void A[MD:(double, int[], double[], float[], int):void (m)]\l0x0058: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int)  (LINE:1577)\l0x005a: AGET  (r5 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][] A[D('pos' float[])]), (r15 I:??[int, short, byte, char]) \l0x005c: INVOKE  (r5 I:int) = (r5 I:float) type: STATIC call: java.lang.Float.floatToIntBits(float):int A[MD:(float):int (c)]\l0x0060: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x0062: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int)  (LINE:1578)\l0x0064: AGET  (r5 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][] A[D('pos' float[])]), (r16 I:??[int, short, byte, char]) \l0x0066: INVOKE  (r5 I:int) = (r5 I:float) type: STATIC call: java.lang.Float.floatToIntBits(float):int A[MD:(float):int (c)]\l0x006a: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x006c: INSTANCE_OF  (r5 I:boolean) = (r13 I:??[OBJECT, ARRAY] A[D('key' androidx.constraintlayout.core.motion.key.MotionKey)]) androidx.constraintlayout.core.motion.key.MotionKeyPosition  (LINE:1579)\l}"];
Node_32 [shape=record,label="{32\:\ 0x006e|0x006e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x008d \l}"];
Node_33 [shape=record,label="{33\:\ 0x0070|0x0070: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('key' androidx.constraintlayout.core.motion.key.MotionKey)])  (LINE:1580)\l0x0071: CHECK_CAST (r5 I:androidx.constraintlayout.core.motion.key.MotionKeyPosition) = (androidx.constraintlayout.core.motion.key.MotionKeyPosition) (r5 I:??[OBJECT, ARRAY]) \l0x0073: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int)  (LINE:1581)\l0x0075: IGET  (r6 I:int) = \l  (r5 I:androidx.constraintlayout.core.motion.key.MotionKeyPosition A[D('kp' androidx.constraintlayout.core.motion.key.MotionKeyPosition)])\l androidx.constraintlayout.core.motion.key.MotionKeyPosition.mPositionType int \l0x0077: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r6 I:??[int, float, short, byte, char])\l \l0x0079: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int)  (LINE:1583)\l0x007b: IGET  (r6 I:float) = \l  (r5 I:androidx.constraintlayout.core.motion.key.MotionKeyPosition A[D('kp' androidx.constraintlayout.core.motion.key.MotionKeyPosition)])\l androidx.constraintlayout.core.motion.key.MotionKeyPosition.mPercentX float \l0x007d: INVOKE  (r6 I:int) = (r6 I:float) type: STATIC call: java.lang.Float.floatToIntBits(float):int A[MD:(float):int (c)]\l0x0081: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r6 I:??[int, float, short, byte, char])\l \l0x0083: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int)  (LINE:1584)\l0x0085: IGET  (r6 I:float) = \l  (r5 I:androidx.constraintlayout.core.motion.key.MotionKeyPosition A[D('kp' androidx.constraintlayout.core.motion.key.MotionKeyPosition)])\l androidx.constraintlayout.core.motion.key.MotionKeyPosition.mPercentY float \l0x0087: INVOKE  (r6 I:int) = (r6 I:float) type: STATIC call: java.lang.Float.floatToIntBits(float):int A[MD:(float):int (c)]\l0x008b: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r3 I:??[int, short, byte, char] A[D('cursor' int)])\l  (r6 I:??[int, float, short, byte, char])\l \l}"];
Node_34 [shape=record,label="{34\:\ 0x008d|0x008d: ARITH  (r3 I:int) = (r3 I:int A[D('cursor' int)]) + (1 int)  (LINE:1586)\l0x008f: ARITH  (r5 I:int) = (r3 I:int A[D('cursor' int)]) \- (r14 I:int A[D('len' int)])  (LINE:1587)\l0x0091: APUT  \l  (r21 I:??[int, float][] A[D('info' int[])])\l  (r14 I:??[int, short, byte, char] A[D('len' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x0094: ARITH  (r2 I:int) = (r2 I:int A[D('count' int)]) + (1 int) \l}"];
Node_41 [shape=record,label="{41\:\ 0x000f|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:24:0x000f\-\>B:39:0x000f\l}"];
Node_40 [shape=record,label="{40\:\ 0x000f|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0024|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0098|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0098|RETURN\l|0x0098: RETURN  (r2 I:int A[D('count' int)])  (LINE:1591)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.core.motion.Motion.getKeyFrameInfo((r19 'this' I:androidx.constraintlayout.core.motion.Motion A[IMMUTABLE_TYPE, THIS]), (r20 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:int[] A[D('info' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x008d \-\> B:24:0x000f, CROSS_EDGE: B:32:0x006e \-\> B:34:0x008d, BACK_EDGE: B:29:0x0021 \-\> B:24:0x000f, CROSS_EDGE: B:27:0x001e \-\> B:31:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003d\-0x0053: r11 'time' F\l  0x0073\-0x008d: r5 'kp' Landroidx\/constraintlayout\/core\/motion\/key\/MotionKeyPosition;\l  0x001c\-0x0094: r13 'key' Landroidx\/constraintlayout\/core\/motion\/key\/MotionKey;\l  0x0053\-0x0094: r18 'time' F\l  0x0025\-0x0098: r14 'len' I\l  0x0005\-0x0098: r2 'count' I\l  0x0006\-0x0098: r3 'cursor' I\l  0x0009\-0x0098: r4 'pos' [F\l  \-1 \-0x0098: r20 'type' I\l  \-1 \-0x0098: r21 'info' [I\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_37;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_38;
Node_28 -> Node_29;
Node_29 -> Node_36;
Node_29 -> Node_40[style=dashed];
Node_36 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_41;
Node_41 -> Node_39;
Node_39 -> Node_24;
Node_40 -> Node_39;
Node_38 -> Node_31;
Node_37 -> Node_35;
Node_35 -> Node_22;
}

