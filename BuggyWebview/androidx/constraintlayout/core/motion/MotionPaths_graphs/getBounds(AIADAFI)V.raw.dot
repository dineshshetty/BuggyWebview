digraph "CFG forandroidx.constraintlayout.core.motion.MotionPaths.getBounds([I[D[FI)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:float) = (r9 I:androidx.constraintlayout.core.motion.MotionPaths) androidx.constraintlayout.core.motion.MotionPaths.x float  (LINE:457)\l0x0002: IGET  (r1 I:float) = (r9 I:androidx.constraintlayout.core.motion.MotionPaths) androidx.constraintlayout.core.motion.MotionPaths.y float  (LINE:458)\l0x0004: IGET  (r2 I:float) = (r9 I:androidx.constraintlayout.core.motion.MotionPaths) androidx.constraintlayout.core.motion.MotionPaths.width float  (LINE:459)\l0x0006: IGET  (r3 I:float) = (r9 I:androidx.constraintlayout.core.motion.MotionPaths) androidx.constraintlayout.core.motion.MotionPaths.height float  (LINE:460)\l0x0008: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:461)\l0x0009: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:462)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|LOOP_START\lLOOP:0: B:3:0x000b\-\>B:12:0x001f\l|0x000b: ARRAY_LENGTH  (r7 I:int) = (r10 I:??[] A[D('toUse' int[])]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r6 I:??[int, byte, short, char] A[D('i' int)]) \>= (r7 I:??[int, byte, short, char])  \-\> B:15:0x0022 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: AGET  (r7 I:??[long, double]) = (r11 I:??[long, double][] A[D('data' double[])]), (r6 I:??[int, short, byte, char] A[D('i' int)])  (LINE:463)\l0x0010: CAST (r7 I:float) = (float) (r7 I:double) \l0x0011: AGET  (r8 I:??[int, float, short, byte, char]) = (r10 I:??[int, float][] A[D('toUse' int[])]), (r6 I:??[int, short, byte, char] A[D('i' int)])  (LINE:465)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: SWITCH  (r8 I:??)\l case 1: goto B:11:0x001d\l case 2: goto B:10:0x001b\l case 3: goto B:9:0x0019\l case 4: goto B:8:0x0017\l default: goto B:20:0x001f \l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_height' float)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:476)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f|LOOP_END\lLOOP:0: B:3:0x000b\-\>B:12:0x001f\l|0x001f: ARITH  (r6 I:int) = (r6 I:int A[D('i' int)]) + (1 int)  (LINE:462)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_width' float)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:473)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001f|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_y' float)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:470)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d|0x001d: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('v_x' float)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('value' float)])  (LINE:467)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001f|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|0x0022: APUT  \l  (r12 I:??[int, float][] A[D('point' float[])])\l  (r13 I:??[int, short, byte, char] A[D('offset' int)])\l  (r2 I:??[int, float, short, byte, char] A[D('v_width' float)])\l  (LINE:480)\l0x0024: ARITH  (r6 I:int) = (r13 I:int A[D('offset' int)]) + (1 int)  (LINE:481)\l0x0026: APUT  \l  (r12 I:??[int, float][] A[D('point' float[])])\l  (r6 I:??[int, short, byte, char])\l  (r3 I:??[int, float, short, byte, char] A[D('v_height' float)])\l \l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|RETURN\l|0x0028: RETURN    (LINE:482)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.constraintlayout.core.motion.MotionPaths.getBounds((r9 'this' I:androidx.constraintlayout.core.motion.MotionPaths A[IMMUTABLE_TYPE, THIS]), (r10 I:int[] A[D('toUse' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:double[] A[D('data' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:float[] A[D('point' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x001f \-\> B:3:0x000b, CROSS_EDGE: B:9:0x0019 \-\> B:12:0x001f, CROSS_EDGE: B:10:0x001b \-\> B:12:0x001f, CROSS_EDGE: B:11:0x001d \-\> B:12:0x001f, CROSS_EDGE: B:6:0x0013 \-\> B:12:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x001f: r7 'value' F\l  0x000b\-0x0022: r6 'i' I\l  0x0002\-0x0035: r0 'v_x' F\l  0x0004\-0x0035: r1 'v_y' F\l  0x0006\-0x0035: r2 'v_width' F\l  0x0008\-0x0035: r3 'v_height' F\l  0x0009\-0x0035: r4 'translationX' F\l  0x000a\-0x0035: r5 'translationY' F\l  \-1 \-0x0035: r10 'toUse' [I\l  \-1 \-0x0035: r11 'data' [D\l  \-1 \-0x0035: r12 'point' [F\l  \-1 \-0x0035: r13 'offset' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_9;
Node_6 -> Node_10;
Node_6 -> Node_11;
Node_6 -> Node_20;
Node_8 -> Node_17;
Node_17 -> Node_12;
Node_12 -> Node_3;
Node_9 -> Node_18;
Node_18 -> Node_12;
Node_10 -> Node_19;
Node_19 -> Node_12;
Node_11 -> Node_16;
Node_16 -> Node_12;
Node_20 -> Node_12;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

