digraph "CFG forandroidx.constraintlayout.core.motion.MotionPaths.getCustomData(Ljava\/lang\/String;[DI)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.String, androidx.constraintlayout.core.motion.CustomVariable\>) = (r7 I:androidx.constraintlayout.core.motion.MotionPaths) androidx.constraintlayout.core.motion.MotionPaths.customAttributes java.util.HashMap  (LINE:861)\l0x0002: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r8 I:java.lang.Object A[D('name' java.lang.String)]) type: VIRTUAL call: java.util.HashMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0006: CHECK_CAST (r0 I:androidx.constraintlayout.core.motion.CustomVariable) = (androidx.constraintlayout.core.motion.CustomVariable) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('a' androidx.constraintlayout.core.motion.CustomVariable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000c  (LINE:862)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|RETURN\l|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:863)\l0x000b: RETURN  (r1 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: INVOKE  (r1 I:int) = \l  (r0 I:androidx.constraintlayout.core.motion.CustomVariable A[D('a' androidx.constraintlayout.core.motion.CustomVariable)])\l type: VIRTUAL call: androidx.constraintlayout.core.motion.CustomVariable.numberOfInterpolatedValues():int A[MD:():int (m)] (LINE:864)\l0x0010: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|0x0011: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x001b \l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|0x0013: INVOKE  (r1 I:float) = \l  (r0 I:androidx.constraintlayout.core.motion.CustomVariable A[D('a' androidx.constraintlayout.core.motion.CustomVariable)])\l type: VIRTUAL call: androidx.constraintlayout.core.motion.CustomVariable.getValueToInterpolate():float A[MD:():float (m)] (LINE:865)\l0x0017: CAST (r3 I:double) = (double) (r1 I:float) \l0x0018: APUT  \l  (r9 I:??[long, double][] A[D('value' double[])])\l  (r10 I:??[int, short, byte, char] A[D('offset' int)])\l  (r3 I:??[long, double])\l \l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|RETURN\l|0x001a: RETURN  (r2 I:int)  (LINE:866)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: INVOKE  (r1 I:int) = \l  (r0 I:androidx.constraintlayout.core.motion.CustomVariable A[D('a' androidx.constraintlayout.core.motion.CustomVariable)])\l type: VIRTUAL call: androidx.constraintlayout.core.motion.CustomVariable.numberOfInterpolatedValues():int A[MD:():int (m)] (LINE:868)\l0x001f: NEW_ARRAY  (r2 I:float[]) = (r1 I:int A[D('N' int), IMMUTABLE_TYPE]) type: float[]  (LINE:869)\l0x0021: INVOKE  \l  (r0 I:androidx.constraintlayout.core.motion.CustomVariable A[D('a' androidx.constraintlayout.core.motion.CustomVariable)])\l  (r2 I:float[] A[D('f' float[])])\l type: VIRTUAL call: androidx.constraintlayout.core.motion.CustomVariable.getValuesToInterpolate(float[]):void A[MD:(float[]):void (m)] (LINE:870)\l0x0024: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:871)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|LOOP_START\lLOOP:0: B:11:0x0025\-\>B:12:0x0027\l|0x0025: IF  (r3 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char] A[D('N' int)])  \-\> B:14:0x0032 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|LOOP_END\lLOOP:0: B:11:0x0025\-\>B:12:0x0027\l|0x0027: ARITH  (r4 I:int) = (r10 I:int A[D('offset' int)]) + (1 int)  (LINE:872)\l0x0029: AGET  (r5 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][] A[D('f' float[])]), (r3 I:??[int, short, byte, char] A[D('i' int)]) \l0x002b: CAST (r5 I:double) = (double) (r5 I:float) \l0x002c: APUT  (r9 I:??[long, double][] A[D('value' double[])]), (r10 I:??[int, short, byte, char]), (r5 I:??[long, double]) \l0x002e: ARITH  (r3 I:int) = (r3 I:int A[D('i' int)]) + (1 int)  (LINE:871)\l0x0030: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('offset' int)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0032|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|RETURN\l|0x0032: RETURN  (r1 I:int A[D('N' int)])  (LINE:874)\l}"];
MethodNode[shape=record,label="{int androidx.constraintlayout.core.motion.MotionPaths.getCustomData((r7 'this' I:androidx.constraintlayout.core.motion.MotionPaths A[IMMUTABLE_TYPE, THIS]), (r8 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:double[] A[D('value' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x001a \-\> B:1:?, BACK_EDGE: B:12:0x0027 \-\> B:11:0x0025, CROSS_EDGE: B:13:0x0032 \-\> B:1:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0029: r10 'offset' I\l  0x0025\-0x0032: r3 'i' I\l  0x0029\-0x0032: r4 'offset' I\l  0x0008\-0x0032: r0 'a' Landroidx\/constraintlayout\/core\/motion\/CustomVariable;\l  0x001f\-0x0032: r1 'N' I\l  0x0021\-0x0032: r2 'f' [F\l  \-1 \-0x0032: r8 'name' Ljava\/lang\/String;\l  \-1 \-0x0032: r9 'value' [D\l  0x0032\-0x0032: r10 'offset' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_10;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_11;
Node_14 -> Node_13;
Node_13 -> Node_1;
}

