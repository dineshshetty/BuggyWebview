digraph "CFG forandroidx.constraintlayout.core.motion.MotionPaths.diff(FF)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (java.lang.Float.isNaN(r5) != false) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008}"];
Node_5 [shape=record,label="{5\:\ 0x000c|if (java.lang.Float.isNaN(r6) == false) goto L5\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f}"];
Node_8 [shape=record,label="{8\:\ 0x001a|if ((java.lang.Math.abs(r5 \- r6) \> 1.0E\-6f ? 1 : (java.lang.Math.abs(r5 \- r6) == 1.0E\-6f ? 0 : \-1)) \<= 0) goto L7\l}"];
Node_10 [shape=record,label="{10\:\ 0x001d|RETURN\lORIG_RETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ 0x001f}"];
Node_13 [shape=record,label="{13\:\ 0x0027|if (java.lang.Float.isNaN(r5) == java.lang.Float.isNaN(r6)) goto L12\l}"];
Node_15 [shape=record,label="{15\:\ 0x002a|RETURN\lORIG_RETURN\l|return false\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{private boolean androidx.constraintlayout.core.motion.MotionPaths.diff((r4v0 'this' androidx.constraintlayout.core.motion.MotionPaths A[IMMUTABLE_TYPE, THIS]), (r5v0 'a' float A[D('a' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'b' float A[D('b' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x001a \-\> B:11:0x001e, CROSS_EDGE: B:16:0x002b \-\> B:1:?, CROSS_EDGE: B:13:0x0027 \-\> B:16:0x002b, CROSS_EDGE: B:3:0x0006 \-\> B:12:0x001f\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_12[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_17[style=dashed];
Node_10 -> Node_1;
Node_17 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_18[style=dashed];
Node_15 -> Node_1;
Node_18 -> Node_1;
}

