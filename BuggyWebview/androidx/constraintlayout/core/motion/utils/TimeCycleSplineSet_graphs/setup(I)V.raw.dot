digraph "CFG forandroidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.setup(I)V" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.count int  (LINE:178)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x001d \l}"];
Node_36 [shape=record,label="{36\:\ 0x0004|0x0004: SGET  (r0 I:java.io.PrintStream) =  java.lang.System.err java.io.PrintStream  (LINE:179)\l0x0006: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0008: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x000b: CONST_STR  (r2 I:java.lang.String) =  \"Error no points added to \" \l0x000d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0010: IGET  (r2 I:java.lang.String) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mType java.lang.String \l0x0012: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0015: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0019: INVOKE  (r0 I:java.io.PrintStream), (r1 I:java.lang.String) type: VIRTUAL call: java.io.PrintStream.println(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x001c|RETURN\l|0x001c: RETURN    (LINE:180)\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x001d|0x001d: IGET  (r1 I:int[]) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mTimePoints int[]  (LINE:182)\l0x001f: IGET  (r2 I:float[][]) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mValues float[][] \l0x0021: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0022: ARITH  (r0 I:int) = (r0 I:int) \- (r3 I:int) \l0x0023: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: INVOKE  (r1 I:int[]), (r2 I:float[][]), (r4 I:int), (r0 I:int) type: STATIC call: androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.Sort.doubleQuickSort(int[], float[][], int, int):void A[MD:(int[], float[][], int, int):void (m)]\l0x0027: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:183)\l0x0028: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:184)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|LOOP_START\lLOOP:0: B:39:0x0029\-\>B:44:0x0038\l|0x0029: IGET  (r2 I:int[]) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mTimePoints int[] \l0x002b: ARRAY_LENGTH  (r5 I:int) = (r2 I:??[]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x002c|0x002c: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:58:0x003b \l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|0x002e: AGET  (r5 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:185)\l0x0030: ARITH  (r6 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int) \l0x0032: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r6 I:??[int, short, byte, char]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|0x0034: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0038 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0036|0x0036: ARITH  (r0 I:int) = (r0 I:int A[D('unique' int)]) + (1 int)  (LINE:186)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0038|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0038|LOOP_END\lLOOP:0: B:39:0x0029\-\>B:44:0x0038\l|0x0038: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:184)\l}"];
Node_60 [shape=record,label="{60\:\ 0x0038|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x003b|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x003b|0x003b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('unique' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x003e  (LINE:189)\l}"];
Node_46 [shape=record,label="{46\:\ 0x003d|0x003d: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('unique' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:190)\l}"];
Node_47 [shape=record,label="{47\:\ 0x003e|0x003e: NEW_ARRAY  (r1 I:double[]) = (r0 I:int A[D('unique' int), IMMUTABLE_TYPE]) type: double[]  (LINE:192)\l0x0040: CONST  (r2 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:193)\l0x0041: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0042: NEW_ARRAY  (r6 I:int[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0044: APUT  (r6 I:??[int, float][]), (r3 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x0046: APUT  (r6 I:??[int, float][]), (r4 I:??[int, short, byte, char]), (r0 I:??[int, float, short, byte, char] A[D('unique' int)]) \l0x0048: CONST_CLASS  (r2 I:java.lang.Class\<double\>) =  double.class \l0x004a: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.Class), (r6 I:int[]) type: STATIC call: java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object A[MD:(java.lang.Class\<?\>, int[]):java.lang.Object VARARG throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException (c)]\l0x004e: CHECK_CAST (r2 I:double[][]) = (double[][]) (r2 I:??[OBJECT, ARRAY]) \l0x0050: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:194)\l0x0051: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:196)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0052|LOOP_START\lLOOP:1: B:48:0x0052\-\>B:55:0x0090\l|0x0052: IGET  (r8 I:int) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.count int \l}"];
Node_49 [shape=record,label="{49\:\ 0x0054|0x0054: IF  (r7 I:??[int, byte, short, char] A[D('i' int)]) \>= (r8 I:??[int, byte, short, char])  \-\> B:61:0x0093 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0056|0x0056: IF  (r7 I:??[int, byte, short, char] A[D('i' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:54:0x0063  (LINE:197)\l}"];
Node_51 [shape=record,label="{51\:\ 0x0058|0x0058: IGET  (r8 I:int[]) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mTimePoints int[] \l0x005a: AGET  (r9 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r7 I:??[int, short, byte, char] A[D('i' int)]) \l0x005c: ARITH  (r10 I:int) = (r7 I:int A[D('i' int)]) + (\-1 int) \l0x005e: AGET  (r8 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r10 I:??[int, short, byte, char]) \l}"];
Node_52 [shape=record,label="{52\:\ 0x0060|0x0060: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0063 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0090|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0090|LOOP_END\lLOOP:1: B:48:0x0052\-\>B:55:0x0090\l|0x0090: ARITH  (r7 I:int) = (r7 I:int A[D('i' int)]) + (1 int)  (LINE:196)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0063|0x0063: IGET  (r8 I:int[]) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mTimePoints int[]  (LINE:200)\l0x0065: AGET  (r8 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r7 I:??[int, short, byte, char] A[D('i' int)]) \l0x0067: CAST (r8 I:double) = (double) (r8 I:int) \l0x0068: CONST  (r10 I:??[long, double]) = (4576918229304087675(0x3f847ae147ae147b, double:0.01) ??[long, double]) \l0x006d: ARITH  (r8 I:double) = (r8 I:double) * (r10 I:double) \l0x006f: APUT  \l  (r1 I:??[long, double][] A[D('time' double[])])\l  (r6 I:??[int, short, byte, char] A[D('k' int)])\l  (r8 I:??[long, double])\l \l0x0071: AGET  (r8 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][] A[D('values' double[][])]), (r6 I:??[int, short, byte, char] A[D('k' int)])  (LINE:201)\l0x0073: IGET  (r9 I:float[][]) = (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet) androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mValues float[][] \l0x0075: AGET  (r10 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY][]), (r7 I:??[int, short, byte, char] A[D('i' int)]) \l0x0077: AGET  (r10 I:??[int, float, short, byte, char]) = (r10 I:??[int, float][]), (r4 I:??[int, short, byte, char]) \l0x0079: CAST (r10 I:double) = (double) (r10 I:float) \l0x007a: APUT  (r8 I:??[long, double][]), (r4 I:??[int, short, byte, char]), (r10 I:??[long, double]) \l0x007c: AGET  (r8 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][] A[D('values' double[][])]), (r6 I:??[int, short, byte, char] A[D('k' int)])  (LINE:202)\l0x007e: AGET  (r10 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY][]), (r7 I:??[int, short, byte, char] A[D('i' int)]) \l0x0080: AGET  (r10 I:??[int, float, short, byte, char]) = (r10 I:??[int, float][]), (r3 I:??[int, short, byte, char]) \l0x0082: CAST (r10 I:double) = (double) (r10 I:float) \l0x0083: APUT  (r8 I:??[long, double][]), (r3 I:??[int, short, byte, char]), (r10 I:??[long, double]) \l0x0085: AGET  (r8 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][] A[D('values' double[][])]), (r6 I:??[int, short, byte, char] A[D('k' int)])  (LINE:203)\l0x0087: AGET  (r9 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY][]), (r7 I:??[int, short, byte, char] A[D('i' int)]) \l0x0089: AGET  (r9 I:??[int, float, short, byte, char]) = (r9 I:??[int, float][]), (r5 I:??[int, short, byte, char]) \l0x008b: CAST (r9 I:double) = (double) (r9 I:float) \l0x008c: APUT  (r8 I:??[long, double][]), (r5 I:??[int, short, byte, char]), (r9 I:??[long, double]) \l0x008e: ARITH  (r6 I:int) = (r6 I:int A[D('k' int)]) + (1 int)  (LINE:204)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0090|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0093|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0093|0x0093: INVOKE  (r3 I:androidx.constraintlayout.core.motion.utils.CurveFit) = (r13 I:int A[D('curveType' int)]), (r1 I:double[] A[D('time' double[])]), (r2 I:double[][] A[D('values' double[][])]) type: STATIC call: androidx.constraintlayout.core.motion.utils.CurveFit.get(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit A[MD:(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit (m)] (LINE:206)\l0x0097: IPUT  \l  (r3 I:androidx.constraintlayout.core.motion.utils.CurveFit)\l  (r12 I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet)\l androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.mCurveFit androidx.constraintlayout.core.motion.utils.CurveFit \l}"];
Node_57 [shape=record,label="{57\:\ 0x0099|RETURN\l|0x0099: RETURN    (LINE:207)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.setup((r12 'this' I:androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet A[IMMUTABLE_TYPE, THIS]), (r13 I:int A[D('curveType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:44:0x0038 \-\> B:39:0x0029, CROSS_EDGE: B:42:0x0034 \-\> B:44:0x0038, BACK_EDGE: B:55:0x0090 \-\> B:48:0x0052, CROSS_EDGE: B:52:0x0060 \-\> B:55:0x0090, CROSS_EDGE: B:50:0x0056 \-\> B:54:0x0063, CROSS_EDGE: B:57:0x0099 \-\> B:33:?, CROSS_EDGE: B:45:0x003b \-\> B:47:0x003e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0029\-0x003b: r1 'i' I\l  0x0052\-0x0093: r7 'i' I\l  0x0028\-0x0099: r0 'unique' I\l  0x0040\-0x0099: r1 'time' [D\l  0x0050\-0x0099: r2 'values' [[D\l  0x0051\-0x0099: r6 'k' I\l  \-1 \-0x0099: r13 'curveType' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.TimeCycleSplineSet.setup(int):void]\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_33;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_58;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_60;
Node_43 -> Node_59;
Node_59 -> Node_44;
Node_44 -> Node_39;
Node_60 -> Node_44;
Node_58 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_61;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_54;
Node_51 -> Node_52;
Node_52 -> Node_54;
Node_52 -> Node_63[style=dashed];
Node_63 -> Node_55;
Node_55 -> Node_48;
Node_54 -> Node_62;
Node_62 -> Node_55;
Node_61 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_33;
}

