digraph "CFG forandroidx.constraintlayout.core.motion.utils.MonotonicCurveFit.diff(DDDDDD)D" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: ARITH  (r0 I:double) = (r10 I:double A[D('x' double)]) * (r10 I:double A[D('x' double)])  (LINE:296)\l0x0002: CONST  (r2 I:??[long, double]) = (\-4604930618986332160(0xc018000000000000, double:\-6.0) ??[long, double])  (LINE:297)\l0x0004: ARITH  (r2 I:double) = (r2 I:double) * (r0 I:double A[D('x2' double)]) \l0x0006: ARITH  (r2 I:double) = (r2 I:double) * (r14 I:double A[D('y2' double)]) \l0x0008: CONST  (r4 I:??[long, double]) = (4618441417868443648(0x4018000000000000, double:6.0) ??[long, double]) \l0x000a: ARITH  (r6 I:double) = (r10 I:double A[D('x' double)]) * (r4 I:double) \l0x000c: ARITH  (r6 I:double) = (r6 I:double) * (r14 I:double A[D('y2' double)]) \l0x000e: ARITH  (r2 I:double) = (r2 I:double) + (r6 I:double) \l0x000f: ARITH  (r6 I:double) = (r0 I:double A[D('x2' double)]) * (r4 I:double) \l0x0011: ARITH  (r6 I:double) = (r6 I:double) * (r12 I:double A[D('y1' double)]) \l0x0013: ARITH  (r2 I:double) = (r2 I:double) + (r6 I:double) \l0x0014: ARITH  (r4 I:double) = (r4 I:double) * (r10 I:double A[D('x' double)]) \l0x0016: ARITH  (r4 I:double) = (r4 I:double) * (r12 I:double A[D('y1' double)]) \l0x0018: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0019: CONST  (r4 I:??[long, double]) = (4613937818241073152(0x4008000000000000, double:3.0) ??[long, double]) \l0x001b: ARITH  (r6 I:double) = (r8 I:double A[D('h' double)]) * (r4 I:double) \l0x001d: ARITH  (r6 I:double) = (r6 I:double) * (r18 I:double A[D('t2' double)]) \l0x001f: ARITH  (r6 I:double) = (r6 I:double) * (r0 I:double A[D('x2' double)]) \l0x0021: ARITH  (r2 I:double) = (r2 I:double) + (r6 I:double) \l0x0022: ARITH  (r4 I:double) = (r4 I:double) * (r8 I:double A[D('h' double)]) \l0x0024: ARITH  (r4 I:double) = (r4 I:double) * (r16 I:double A[D('t1' double)]) \l0x0026: ARITH  (r4 I:double) = (r4 I:double) * (r0 I:double A[D('x2' double)]) \l0x0028: ARITH  (r2 I:double) = (r2 I:double) + (r4 I:double) \l0x0029: CONST  (r4 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double]) \l0x002b: ARITH  (r4 I:double) = (r4 I:double) * (r8 I:double A[D('h' double)]) \l0x002d: ARITH  (r4 I:double) = (r4 I:double) * (r18 I:double A[D('t2' double)]) \l0x002f: ARITH  (r4 I:double) = (r4 I:double) * (r10 I:double A[D('x' double)]) \l0x0031: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0032: CONST  (r4 I:??[long, double]) = (4616189618054758400(0x4010000000000000, double:4.0) ??[long, double]) \l0x0034: ARITH  (r4 I:double) = (r4 I:double) * (r8 I:double A[D('h' double)]) \l0x0036: ARITH  (r4 I:double) = (r4 I:double) * (r16 I:double A[D('t1' double)]) \l0x0038: ARITH  (r4 I:double) = (r4 I:double) * (r10 I:double A[D('x' double)]) \l0x003a: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x003b: ARITH  (r4 I:double) = (r8 I:double A[D('h' double)]) * (r16 I:double A[D('t1' double)]) \l0x003d: ARITH  (r2 I:double) = (r2 I:double) + (r4 I:double) \l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|RETURN\l|0x003e: RETURN  (r2 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static double androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.diff((r8 I:double A[D('h' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:double A[D('y1' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:double A[D('y2' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16 I:double A[D('t1' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:double A[D('t2' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x003e: r0 'x2' D\l  \-1 \-0x003e: r8 'h' D\l  \-1 \-0x003e: r10 'x' D\l  \-1 \-0x003e: r12 'y1' D\l  \-1 \-0x003e: r14 'y2' D\l  \-1 \-0x003e: r16 't1' D\l  \-1 \-0x003e: r18 't2' D\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

