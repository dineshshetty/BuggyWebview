digraph "CFG forandroidx.constraintlayout.core.motion.utils.MonotonicCurveFit.getSlope(DI)D" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r30 I:??[OBJECT, ARRAY])  (LINE:251)\l0x0002: IGET  (r1 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit) androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.mT double[] \l0x0004: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[]) \l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:253)\l0x0006: AGET  (r4 I:??[long, double]) = (r1 I:??[long, double][]), (r3 I:??[int, short, byte, char]) \l0x0008: CMP_G  (r6 I:int) = (r31 I:double A[D('t' double)]), (r4 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:26:0x000f \l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: AGET  (r3 I:??[long, double]) = (r1 I:??[long, double][]), (r3 I:??[int, short, byte, char])  (LINE:254)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001e|0x001e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:258)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|LOOP_START\lLOOP:0: B:31:0x001f\-\>B:37:0x0061\l|0x001f: ARITH  (r5 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0021|0x0021: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r5 I:??[int, byte, short, char])  \-\> B:40:0x0064 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: IGET  (r5 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit) androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.mT double[]  (LINE:259)\l0x0025: ARITH  (r6 I:int) = (r1 I:int A[D('i' int)]) + (1 int) \l0x0027: AGET  (r6 I:??[long, double]) = (r5 I:??[long, double][]), (r6 I:??[int, short, byte, char]) \l0x0029: CMP_G  (r8 I:int) = (r3 I:double A[D('t' double)]), (r6 I:double) \l}"];
Node_34 [shape=record,label="{34\:\ 0x002b|0x002b: IF  (r8 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:37:0x0061 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0061|LOOP_END\lLOOP:0: B:31:0x001f\-\>B:37:0x0061\l|0x0061: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:258)\l}"];
Node_41 [shape=record,label="{41\:\ 0x002d|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x002d|0x002d: ARITH  (r6 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:260)\l0x002f: AGET  (r6 I:??[long, double]) = (r5 I:??[long, double][]), (r6 I:??[int, short, byte, char]) \l0x0031: AGET  (r8 I:??[long, double]) = (r5 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x0033: ARITH  (r6 I:double) = (r6 I:double) \- (r8 I:double) \l0x0034: AGET  (r8 I:??[long, double]) = (r5 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:261)\l0x0036: ARITH  (r8 I:double) = (r3 I:double A[D('t' double)]) \- (r8 I:double) \l0x0038: ARITH  (r8 I:double) = (r8 I:double) \/ (r6 I:double A[D('h' double)]) \l0x0039: IGET  (r5 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit) androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.mY double[][]  (LINE:262)\l0x003b: AGET  (r10 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x003d: AGET  (r22 I:??[long, double]) = (r10 I:??[long, double][]), (r33 I:??[int, short, byte, char] A[D('j' int)]) \l0x003f: ARITH  (r10 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:263)\l0x0041: AGET  (r5 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r10 I:??[int, short, byte, char]) \l0x0043: AGET  (r24 I:??[long, double]) = (r5 I:??[long, double][]), (r33 I:??[int, short, byte, char] A[D('j' int)]) \l0x0045: IGET  (r5 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit) androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.mTangent double[][]  (LINE:264)\l0x0047: AGET  (r10 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x0049: AGET  (r26 I:??[long, double]) = (r10 I:??[long, double][]), (r33 I:??[int, short, byte, char] A[D('j' int)]) \l0x004b: ARITH  (r10 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:265)\l0x004d: AGET  (r5 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r10 I:??[int, short, byte, char]) \l0x004f: AGET  (r28 I:??[long, double]) = (r5 I:??[long, double][]), (r33 I:??[int, short, byte, char] A[D('j' int)]) \l0x0051: MOVE  (r10 I:??[long, double]) = (r6 I:??[long, double] A[D('h' double)])  (LINE:266)\l0x0052: MOVE  (r12 I:??[long, double]) = (r8 I:??[long, double] A[D('x' double)]) \l0x0053: MOVE  (r14 I:??[long, double]) = (r22 I:??[long, double] A[D('y1' double)]) \l0x0055: MOVE  (r16 I:??[long, double]) = (r24 I:??[long, double] A[D('y2' double)]) \l0x0057: MOVE  (r18 I:??[long, double]) = (r26 I:??[long, double] A[D('t1' double)]) \l0x0059: MOVE  (r20 I:??[long, double]) = (r28 I:??[long, double] A[D('t2' double)]) \l0x005b: INVOKE  (r10 I:double) = (r10 I:double), (r12 I:double), (r14 I:double), (r16 I:double), (r18 I:double), (r20 I:double) type: STATIC call: androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.diff(double, double, double, double, double, double):double A[MD:(double, double, double, double, double, double):double (m)]\l0x005f: ARITH  (r10 I:double) = (r10 I:double) \/ (r6 I:double A[D('h' double)]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0060|RETURN\l|0x0060: RETURN  (r10 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0064|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0064|RETURN\l|0x0064: CONST  (r5 I:??[long, double]) = (0 ??[long, double])  (LINE:269)\l0x0066: RETURN  (r5 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: ARITH  (r3 I:int A[D('t' double)]) = (r2 I:int A[D('n' int)]) + (\-1 int)  (LINE:255)\l0x0011: AGET  (r3 I:??[long, double]) = (r1 I:??[long, double][]), (r3 I:??[int, short, byte, char]) \l0x0013: CMP_L  (r5 I:int) = (r31 I:double A[D('t' double)]), (r3 I:double) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: IF  (r5 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:29:0x001c \l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|0x0017: ARITH  (r3 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int)  (LINE:256)\l0x0019: AGET  (r3 I:??[long, double]) = (r1 I:??[long, double][]), (r3 I:??[int, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|0x001c: MOVE  (r3 I:??[long, double] A[D('t' double)]) = (r31 I:??[long, double] A[D('t' double)])  (LINE:255)\l}"];
MethodNode[shape=record,label="{public double androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.getSlope((r30 'this' I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit A[IMMUTABLE_TYPE, THIS]), (r31 I:double A[D('t' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r33 I:int A[D('j' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:37:0x0061 \-\> B:31:0x001f, CROSS_EDGE: B:39:0x0066 \-\> B:22:?, CROSS_EDGE: B:28:0x0017 \-\> B:30:0x001e, CROSS_EDGE: B:29:0x001c \-\> B:30:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r31 't' D\l  0x000e\-0x000f: r3 't' D\l  0x000f\-0x001b: r31 't' D\l  0x001b\-0x001c: r3 't' D\l  0x001c\-0x001e: r31 't' D\l  0x0034\-0x0061: r6 'h' D\l  0x0039\-0x0061: r8 'x' D\l  0x003f\-0x0061: r22 'y1' D\l  0x0045\-0x0061: r24 'y2' D\l  0x004b\-0x0061: r26 't1' D\l  0x0051\-0x0061: r28 't2' D\l  0x001f\-0x0064: r1 'i' I\l  0x0005\-0x0066: r2 'n' I\l  0x001e\-0x0066: r3 't' D\l  \-1 \-0x0066: r33 'j' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.CurveFit.getSlope(double, int):double]\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_34;
Node_34 -> Node_37;
Node_34 -> Node_41[style=dashed];
Node_37 -> Node_31;
Node_41 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_40 -> Node_38;
Node_38 -> Node_22;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_30;
}

