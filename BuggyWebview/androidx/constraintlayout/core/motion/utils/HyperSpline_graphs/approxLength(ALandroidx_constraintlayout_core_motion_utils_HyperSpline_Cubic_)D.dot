digraph "CFG forandroidx.constraintlayout.core.motion.utils.HyperSpline.approxLength([Landroidx\/constraintlayout\/core\/motion\/utils\/HyperSpline$Cubic;)D" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r0 = 0.0d\lint r2 = r14.length\ldouble[] r3 = new double[r14.length]\lr4 = 0.0d\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_START\lLOOP:0: B:3:0x0008\-\>B:12:0x0030\lPHI: r0 r4 \l  PHI: (r0v1 'sum' double) = (r0v0 'sum' double), (r0v3 'sum' double) binds: [B:2:0x0000, B:12:0x0030] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'i' double) = (r4v0 'i' double), (r4v5 'i' double) binds: [B:2:0x0000, B:12:0x0030] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|if ((r4 \> 1.0d ? 1 : (r4 == 1.0d ? 0 : \-1)) \>= 0) goto L15\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|r6 = 0.0d\lr8 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|LOOP_START\lLOOP:1: B:6:0x0011\-\>B:8:0x0014\lPHI: r6 r8 \l  PHI: (r6v3 's' double) = (r6v2 's' double), (r6v5 's' double) binds: [B:5:0x000e, B:8:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v5 'j' int) = (r8v4 'j' int), (r8v8 'j' int) binds: [B:5:0x000e, B:8:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|if (r8 \>= r14.length) goto L8\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_END\lLOOP:1: B:6:0x0011\-\>B:8:0x0014\l|r9 = r3[r8]\ldouble r11 = r14[r8].eval(r4)\lr3[r8] = r11\ldouble r9 = r9 \- r11\ldouble r6 = r6 + (r9 * r9)\lint r8 = r8 + 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025}"];
Node_10 [shape=record,label="{10\:\ 0x0029|if ((r4 \> 0.0d ? 1 : (r4 == 0.0d ? 0 : \-1)) \<= 0) goto L14\l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|double r0 = r0 + java.lang.Math.sqrt(r6)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|LOOP_END\lLOOP:0: B:3:0x0008\-\>B:12:0x0030\lPHI: r0 \l  PHI: (r0v3 'sum' double) = (r0v1 'sum' double), (r0v4 'sum' double) binds: [B:21:0x0030, B:20:0x0030] A[DONT_GENERATE, DONT_INLINE]\l|double r4 = r4 + 0.1d\l}"];
Node_21 [shape=record,label="{21\:\ 0x0030|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|r4 = 0.0d\lr8 = 0\l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|LOOP_START\lLOOP:2: B:14:0x003a\-\>B:16:0x003d\lPHI: r4 r8 \l  PHI: (r4v3 's' double) = (r4v2 's' double), (r4v4 's' double) binds: [B:13:0x0037, B:16:0x003d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r8v2 'j' int) = (r8v1 'j' int), (r8v3 'j' int) binds: [B:13:0x0037, B:16:0x003d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|if (r8 \>= r14.length) goto L20\l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|LOOP_END\lLOOP:2: B:14:0x003a\-\>B:16:0x003d\l|r9 = r3[r8]\ldouble r11 = r14[r8].eval(1.0d)\lr3[r8] = r11\ldouble r9 = r9 \- r11\ldouble r4 = r4 + (r9 * r9)\lint r8 = r8 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x004e}"];
Node_18 [shape=record,label="{18\:\ 0x0053|RETURN\l|return r0 + java.lang.Math.sqrt(r4)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public double androidx.constraintlayout.core.motion.utils.HyperSpline.approxLength((r13v0 'this' androidx.constraintlayout.core.motion.utils.HyperSpline A[IMMUTABLE_TYPE, THIS]), (r14v0 'curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x0014 \-\> B:6:0x0011, BACK_EDGE: B:12:0x0030 \-\> B:3:0x0008, CROSS_EDGE: B:10:0x0029 \-\> B:12:0x0030, BACK_EDGE: B:16:0x003d \-\> B:14:0x003a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_22;
Node_8 -> Node_6;
Node_22 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_21;
Node_11 -> Node_20;
Node_20 -> Node_12;
Node_12 -> Node_3;
Node_21 -> Node_12;
Node_19 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_14;
Node_23 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
}

