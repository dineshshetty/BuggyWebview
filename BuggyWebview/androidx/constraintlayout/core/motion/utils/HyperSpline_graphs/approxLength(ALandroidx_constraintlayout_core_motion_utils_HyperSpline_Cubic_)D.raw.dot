digraph "CFG forandroidx.constraintlayout.core.motion.utils.HyperSpline.approxLength([Landroidx\/constraintlayout\/core\/motion\/utils\/HyperSpline$Cubic;)D" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:122)\l0x0002: ARRAY_LENGTH  (r2 I:int) = (r14 I:??[] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])  (LINE:124)\l0x0003: ARRAY_LENGTH  (r3 I:int) = (r14 I:??[] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])  (LINE:125)\l0x0004: NEW_ARRAY  (r3 I:double[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0006: CONST  (r4 I:??[long, double]) = (0 ??[long, double])  (LINE:126)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|LOOP_START\lLOOP:0: B:3:0x0008\-\>B:12:0x0030\l|0x0008: CONST  (r6 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double]) \l0x000a: CMP_G  (r8 I:int) = (r4 I:double A[D('i' double)]), (r6 I:double) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r8 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:19:0x0037 \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: CONST  (r6 I:??[long, double]) = (0 ??[long, double])  (LINE:127)\l0x0010: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:128)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|LOOP_START\lLOOP:1: B:6:0x0011\-\>B:8:0x0014\l|0x0011: ARRAY_LENGTH  (r9 I:int) = (r14 I:??[] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|0x0012: IF  (r8 I:??[int, byte, short, char] A[D('j' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:22:0x0025 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|LOOP_END\lLOOP:1: B:6:0x0011\-\>B:8:0x0014\l|0x0014: AGET  (r9 I:??[long, double]) = (r3 I:??[long, double][] A[D('old' double[])]), (r8 I:??[int, short, byte, char] A[D('j' int)])  (LINE:129)\l0x0016: AGET  (r11 I:??[OBJECT, ARRAY]) = \l  (r14 I:??[OBJECT, ARRAY][] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])\l  (r8 I:??[int, short, byte, char] A[D('j' int)])\l  (LINE:130)\l0x0018: INVOKE  (r11 I:double) = (r11 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic), (r4 I:double A[D('i' double)]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic.eval(double):double A[MD:(double):double (m)]\l0x001c: APUT  \l  (r3 I:??[long, double][] A[D('old' double[])])\l  (r8 I:??[int, short, byte, char] A[D('j' int)])\l  (r11 I:??[long, double])\l \l0x001e: ARITH  (r9 I:double) = (r9 I:double A[D('tmp' double)]) \- (r11 I:double) \l0x001f: ARITH  (r11 I:double) = (r9 I:double A[D('tmp' double)]) * (r9 I:double A[D('tmp' double)])  (LINE:131)\l0x0021: ARITH  (r6 I:double) = (r6 I:double A[D('s' double)]) + (r11 I:double) \l0x0022: ARITH  (r8 I:int) = (r8 I:int A[D('j' int)]) + (1 int)  (LINE:128)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: CONST  (r8 I:??[long, double] A[D('j' int)]) = (0 ??[long, double])  (LINE:133)\l0x0027: CMP_L  (r10 I:int) = (r4 I:double A[D('i' double)]), (r8 I:double) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0029|0x0029: IF  (r10 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:21:0x0030 \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|0x002b: INVOKE  (r8 I:double) = (r6 I:double A[D('s' double)]) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)] (LINE:134)\l0x002f: ARITH  (r0 I:double) = (r0 I:double A[D('sum' double)]) + (r8 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|LOOP_END\lLOOP:0: B:3:0x0008\-\>B:12:0x0030\l|0x0030: CONST  (r6 I:??[long, double] A[D('s' double)]) = (4591870180066957722(0x3fb999999999999a, double:0.1) ??[long, double])  (LINE:126)\l0x0035: ARITH  (r4 I:double) = (r4 I:double A[D('i' double)]) + (r6 I:double) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0030|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0037|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0037|0x0037: CONST  (r4 I:??[long, double] A[D('i' double)]) = (0 ??[long, double])  (LINE:138)\l0x0039: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:139)\l}"];
Node_14 [shape=record,label="{14\:\ 0x003a|LOOP_START\lLOOP:2: B:14:0x003a\-\>B:16:0x003d\l|0x003a: ARRAY_LENGTH  (r9 I:int) = (r14 I:??[] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x003b|0x003b: IF  (r8 I:??[int, byte, short, char] A[D('j' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:23:0x004e \l}"];
Node_16 [shape=record,label="{16\:\ 0x003d|LOOP_END\lLOOP:2: B:14:0x003a\-\>B:16:0x003d\l|0x003d: AGET  (r9 I:??[long, double]) = (r3 I:??[long, double][] A[D('old' double[])]), (r8 I:??[int, short, byte, char] A[D('j' int)])  (LINE:140)\l0x003f: AGET  (r11 I:??[OBJECT, ARRAY]) = \l  (r14 I:??[OBJECT, ARRAY][] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])\l  (r8 I:??[int, short, byte, char] A[D('j' int)])\l  (LINE:141)\l0x0041: INVOKE  (r11 I:double) = (r11 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic), (r6 I:double) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic.eval(double):double A[MD:(double):double (m)]\l0x0045: APUT  \l  (r3 I:??[long, double][] A[D('old' double[])])\l  (r8 I:??[int, short, byte, char] A[D('j' int)])\l  (r11 I:??[long, double])\l \l0x0047: ARITH  (r9 I:double) = (r9 I:double A[D('tmp' double)]) \- (r11 I:double) \l0x0048: ARITH  (r11 I:double) = (r9 I:double A[D('tmp' double)]) * (r9 I:double A[D('tmp' double)])  (LINE:142)\l0x004a: ARITH  (r4 I:double) = (r4 I:double A[D('s' double)]) + (r11 I:double) \l0x004b: ARITH  (r8 I:int) = (r8 I:int A[D('j' int)]) + (1 int)  (LINE:139)\l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|0x004e: INVOKE  (r6 I:double) = (r4 I:double A[D('s' double)]) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)] (LINE:144)\l0x0052: ARITH  (r0 I:double) = (r0 I:double A[D('sum' double)]) + (r6 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0053|RETURN\l|0x0053: RETURN  (r0 I:double A[D('sum' double)])  (LINE:145)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public double androidx.constraintlayout.core.motion.utils.HyperSpline.approxLength((r13 'this' I:androidx.constraintlayout.core.motion.utils.HyperSpline A[IMMUTABLE_TYPE, THIS]), (r14 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] A[D('curve' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x0014 \-\> B:6:0x0011, BACK_EDGE: B:12:0x0030 \-\> B:3:0x0008, CROSS_EDGE: B:10:0x0029 \-\> B:12:0x0030, BACK_EDGE: B:16:0x003d \-\> B:14:0x003a\lDebug Info:\l  0x0016\-0x0022: r9 'tmp' D\l  0x0011\-0x0025: r8 'j' I\l  0x0010\-0x0030: r6 's' D\l  0x0008\-0x0037: r4 'i' D\l  0x003f\-0x004b: r9 'tmp' D\l  0x003a\-0x004e: r8 'j' I\l  0x0002\-0x0053: r0 'sum' D\l  0x0003\-0x0053: r2 'N' I\l  0x0006\-0x0053: r3 'old' [D\l  0x0039\-0x0053: r4 's' D\l  \-1 \-0x0053: r14 'curve' [Landroidx\/constraintlayout\/core\/motion\/utils\/HyperSpline$Cubic;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_19;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_22;
Node_8 -> Node_6;
Node_22 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_21;
Node_11 -> Node_20;
Node_20 -> Node_12;
Node_12 -> Node_3;
Node_21 -> Node_12;
Node_19 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_14;
Node_23 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
}

