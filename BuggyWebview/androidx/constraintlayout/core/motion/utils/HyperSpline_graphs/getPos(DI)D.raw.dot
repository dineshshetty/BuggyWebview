digraph "CFG forandroidx.constraintlayout.core.motion.utils.HyperSpline.getPos(DI)D" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:double) = (r9 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mTotalLength double  (LINE:112)\l0x0002: ARITH  (r0 I:double) = (r0 I:double) * (r10 I:double A[D('p' double)]) \l0x0004: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:113)\l0x0006: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:114)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|LOOP_START\lLOOP:0: B:3:0x0007\-\>B:7:0x0014\l|0x0007: IGET  (r5 I:double[]) = (r9 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCurveLength double[]  (LINE:115)\l0x0009: ARRAY_LENGTH  (r6 I:int) = (r5 I:??[]) \l0x000a: ARITH  (r6 I:int) = (r6 I:int) + (\-1 int) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|0x000c: IF  (r4 I:??[int, byte, short, char] A[D('k' int)]) \>= (r6 I:??[int, byte, short, char])  \-\> B:11:0x001a \l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: AGET  (r6 I:??[long, double]) = (r5 I:??[long, double][]), (r4 I:??[int, short, byte, char] A[D('k' int)]) \l0x0010: CMP_G  (r8 I:int) = (r6 I:double), (r0 I:double A[D('pos' double)]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|0x0012: IF  (r8 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:10:0x001a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x0007\-\>B:7:0x0014\l|0x0014: AGET  (r6 I:??[long, double]) = (r5 I:??[long, double][]), (r4 I:??[int, short, byte, char] A[D('k' int)])  (LINE:116)\l0x0016: ARITH  (r0 I:double) = (r0 I:double A[D('pos' double)]) \- (r6 I:double) \l0x0017: ARITH  (r4 I:int) = (r4 I:int A[D('k' int)]) + (1 int)  (LINE:115)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: IGET  (r6 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][]) = (r9 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCurve androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][]  (LINE:118)\l0x001c: AGET  (r6 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][]), (r12 I:??[int, short, byte, char] A[D('splineNumber' int)]) \l0x001e: AGET  (r6 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char] A[D('k' int)]) \l0x0020: AGET  (r7 I:??[long, double]) = (r5 I:??[long, double][]), (r4 I:??[int, short, byte, char] A[D('k' int)]) \l0x0022: ARITH  (r7 I:double) = (r0 I:double A[D('pos' double)]) \/ (r7 I:double) \l0x0024: INVOKE  (r5 I:double) = (r6 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic), (r7 I:double) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic.eval(double):double A[MD:(double):double (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|RETURN\l|0x0028: RETURN  (r5 I:double) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public double androidx.constraintlayout.core.motion.utils.HyperSpline.getPos((r9 'this' I:androidx.constraintlayout.core.motion.utils.HyperSpline A[IMMUTABLE_TYPE, THIS]), (r10 I:double A[D('p' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('splineNumber' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:7:0x0014 \-\> B:3:0x0007, CROSS_EDGE: B:4:0x000c \-\> B:8:0x001a\lDebug Info:\l  0x0004\-0x0028: r0 'pos' D\l  0x0006\-0x0028: r2 'sum' D\l  0x0007\-0x0028: r4 'k' I\l  \-1 \-0x0028: r10 'p' D\l  \-1 \-0x0028: r12 'splineNumber' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_3;
Node_10 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_11 -> Node_8;
}

