digraph "CFG forandroidx.constraintlayout.core.motion.utils.HyperSpline.calcNaturalCubic(I[D)[Landroidx\/constraintlayout\/core\/motion\/utils\/HyperSpline$Cubic;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|double[] r1 = new double[r22]\ldouble[] r2 = new double[r22]\ldouble[] r3 = new double[r22]\lint r0 = r22 + (\-1)\lr1[0] = 0.5d\lr4 = 1\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|LOOP_START\lLOOP:0: B:3:0x0010\-\>B:5:0x0014\lPHI: r4 \l  PHI: (r4v2 'i' int) = (r4v1 'i' int), (r4v24 'i' int) binds: [B:2:0x0000, B:5:0x0014] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|if (r4 \>= r0) goto L5\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x0010\-\>B:5:0x0014\l|r1[r4] = 1.0d \/ (4.0d \- r1[r4 + (\-1)])\lint r4 = r4 + 1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|int r4 = r0 + (\-1)\lr1[r0] = 1.0d \/ (2.0d \- r1[r4])\lr2[0] = ((r23[1] \- r23[0]) * 3.0d) * r1[0]\lr4 = 1\l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|LOOP_START\lLOOP:1: B:7:0x003d\-\>B:8:0x003f\lPHI: r4 \l  PHI: (r4v12 'i' int) = (r4v11 'i' int), (r4v23 'i' int) binds: [B:6:0x0021, B:8:0x003f] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r0) goto L9\l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|LOOP_END\lLOOP:1: B:7:0x003d\-\>B:8:0x003f\l|r2[r4] = (((r23[r4 + 1] \- r23[r4 + (\-1)]) * 3.0d) \- r2[r4 + (\-1)]) * r1[r4]\lint r4 = r4 + 1\l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0058|r2[r0] = (((r23[r0] \- r23[r0 + (\-1)]) * 3.0d) \- r2[r0 + (\-1)]) * r1[r0]\lr3[r0] = r2[r0]\lint r4 = r0 + (\-1)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0072|LOOP_START\lLOOP:2: B:10:0x0072\-\>B:11:0x0074\lPHI: r4 \l  PHI: (r4v20 'i' int) = (r4v19 'i' int), (r4v22 'i' int) binds: [B:9:0x0058, B:11:0x0074] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \< 0) goto L13\l}"];
Node_11 [shape=record,label="{11\:\ 0x0074|LOOP_END\lLOOP:2: B:10:0x0072\-\>B:11:0x0074\l|r3[r4] = r2[r4] \- (r1[r4] * r3[r4 + 1])\lint r4 = r4 + (\-1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0084|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0084|androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] r4 = new androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic[r0]\lr5 = 0\l}"];
Node_13 [shape=record,label="{13\:\ 0x0087|LOOP_START\lLOOP:3: B:13:0x0087\-\>B:14:0x0089\lPHI: r5 \l  PHI: (r5v1 'i' int) = (r5v0 'i' int), (r5v2 'i' int) binds: [B:12:0x0084, B:14:0x0089] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 \>= r0) goto L17\l}"];
Node_14 [shape=record,label="{14\:\ 0x0089|LOOP_END\lLOOP:3: B:13:0x0087\-\>B:14:0x0089\l|r4[r5] = new androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic((double) ((float) r23[r5]), r3[r5], (((r23[r5 + 1] \- r23[r5]) * 3.0d) \- (r3[r5] * 2.0d)) \- r3[r5 + 1], (((r23[r5] \- r23[r5 + 1]) * 2.0d) + r3[r5]) + r3[r5 + 1])\lint r5 = r5 + 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x00c4|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x00c4|RETURN\l|return r4\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] androidx.constraintlayout.core.motion.utils.HyperSpline.calcNaturalCubic((r22v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 'x' double[] A[D('x' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:5:0x0014 \-\> B:3:0x0010, BACK_EDGE: B:8:0x003f \-\> B:7:0x003d, BACK_EDGE: B:11:0x0074 \-\> B:10:0x0072, BACK_EDGE: B:14:0x0089 \-\> B:13:0x0087\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_3;
Node_16 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_7;
Node_17 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_10;
Node_18 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_13;
Node_19 -> Node_15;
Node_15 -> Node_1;
}

