digraph "CFG forandroidx.constraintlayout.core.motion.utils.HyperSpline.setup([[D)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r1 = r8[0].length\lr7.mDimensionality = r1\lint r2 = r8.length\lr7.mPoints = r2\lr7.mCtl = (double[][]) java.lang.reflect.Array.newInstance(double.class, new int[]\{r1, r2\})\lr7.mCurve = new androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic[r7.mDimensionality]\lr0 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|LOOP_START\lLOOP:0: B:3:0x0022\-\>B:9:0x0038\lPHI: r0 \l  PHI: (r0v7 'd' int) = (r0v6 'd' int), (r0v15 'd' int) binds: [B:2:0x0000, B:9:0x0038] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|if (r0 \>= r7.mDimensionality) goto L10\l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|r1 = 0\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|LOOP_START\lLOOP:1: B:6:0x0027\-\>B:8:0x002b\lPHI: r1 \l  PHI: (r1v9 'p' int) = (r1v8 'p' int), (r1v10 'p' int) binds: [B:5:0x0026, B:8:0x002b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|if (r1 \>= r7.mPoints) goto L8\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|LOOP_END\lLOOP:1: B:6:0x0027\-\>B:8:0x002b\l|r7.mCtl[r0][r1] = r8[r1][r0]\lint r1 = r1 + 1\l}"];
Node_24 [shape=record,label="{24\:\ 0x0038|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|LOOP_END\lLOOP:0: B:3:0x0022\-\>B:9:0x0038\l|int r0 = r0 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x003b|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|r0 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|LOOP_START\lLOOP:2: B:11:0x003c\-\>B:13:0x0040\lPHI: r0 \l  PHI: (r0v9 'd' int) = (r0v8 'd' int), (r0v14 'd' int) binds: [B:10:0x003b, B:13:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r7.mDimensionality\l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|if (r0 \>= r1) goto L15\l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|LOOP_END\lLOOP:2: B:11:0x003c\-\>B:13:0x0040\l|androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][] r1 = r7.mCurve\ldouble[][] r2 = r7.mCtl\lr1[r0] = calcNaturalCubic(r2[r0].length, r2[r0])\lint r0 = r0 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x0052|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|int r0 = r7.mPoints\lr7.mCurveLength = new double[r0 \- 1]\lr7.mTotalLength = 0.0d\landroidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] r0 = new androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic[r1]\lr1 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x0060|LOOP_START\lLOOP:3: B:15:0x0060\-\>B:21:0x0075\lPHI: r1 \l  PHI: (r1v5 'p' int) = (r1v4 'p' int), (r1v6 'p' int) binds: [B:14:0x0052, B:21:0x0075] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|if (r1 \>= r7.mCurveLength.length) goto L25\l}"];
Node_17 [shape=record,label="{17\:\ 0x0065|r2 = 0\l}"];
Node_18 [shape=record,label="{18\:\ 0x0066|LOOP_START\lLOOP:4: B:18:0x0066\-\>B:20:0x006a\lPHI: r2 \l  PHI: (r2v5 'd' int) = (r2v4 'd' int), (r2v8 'd' int) binds: [B:17:0x0065, B:20:0x006a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0068|if (r2 \>= r7.mDimensionality) goto L23\l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|LOOP_END\lLOOP:4: B:18:0x0066\-\>B:20:0x006a\l|r0[r2] = r7.mCurve[r2][r1]\lint r2 = r2 + 1\l}"];
Node_27 [shape=record,label="{27\:\ 0x0075|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0075|LOOP_END\lLOOP:3: B:15:0x0060\-\>B:21:0x0075\l|double r2 = r7.mTotalLength\ldouble[] r4 = r7.mCurveLength\ldouble r5 = approxLength(r0)\lr4[r1] = r5\lr7.mTotalLength = r2 + r5\lint r1 = r1 + 1\l}"];
Node_26 [shape=record,label="{26\:\ 0x0085|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0085|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.HyperSpline.setup((r7v0 'this' androidx.constraintlayout.core.motion.utils.HyperSpline A[IMMUTABLE_TYPE, THIS]), (r8v0 'points' double[][] A[D('points' double[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x002b \-\> B:6:0x0027, BACK_EDGE: B:9:0x0038 \-\> B:3:0x0022, BACK_EDGE: B:13:0x0040 \-\> B:11:0x003c, BACK_EDGE: B:20:0x006a \-\> B:18:0x0066, BACK_EDGE: B:21:0x0075 \-\> B:15:0x0060\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_23;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_24;
Node_8 -> Node_6;
Node_24 -> Node_9;
Node_9 -> Node_3;
Node_23 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_25;
Node_13 -> Node_11;
Node_25 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_27;
Node_20 -> Node_18;
Node_27 -> Node_21;
Node_21 -> Node_15;
Node_26 -> Node_22;
Node_22 -> Node_1;
}

