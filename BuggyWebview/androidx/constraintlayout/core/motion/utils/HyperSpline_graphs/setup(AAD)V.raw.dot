digraph "CFG forandroidx.constraintlayout.core.motion.utils.HyperSpline.setup([[D)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:48)\l0x0001: AGET  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY][] A[D('points' double[][])]), (r0 I:??[int, short, byte, char]) \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l0x0004: IPUT  (r1 I:int), (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mDimensionality int \l0x0006: ARRAY_LENGTH  (r2 I:int) = (r8 I:??[] A[D('points' double[][])])  (LINE:49)\l0x0007: IPUT  (r2 I:int), (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mPoints int \l0x0009: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:50)\l0x000a: NEW_ARRAY  (r3 I:int[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x000c: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: APUT  (r3 I:??[int, float][]), (r4 I:??[int, short, byte, char]), (r2 I:??[int, float, short, byte, char]) \l0x000f: APUT  (r3 I:??[int, float][]), (r0 I:??[int, short, byte, char]), (r1 I:??[int, float, short, byte, char]) \l0x0011: CONST_CLASS  (r0 I:java.lang.Class\<double\>) =  double.class \l0x0013: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.Class), (r3 I:int[]) type: STATIC call: java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object A[MD:(java.lang.Class\<?\>, int[]):java.lang.Object VARARG throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException (c)]\l0x0017: CHECK_CAST (r0 I:double[][]) = (double[][]) (r0 I:??[OBJECT, ARRAY]) \l0x0019: IPUT  (r0 I:double[][]), (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCtl double[][] \l0x001b: IGET  (r0 I:int) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mDimensionality int  (LINE:51)\l0x001d: NEW_ARRAY  (r0 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][]) = (r0 I:int A[IMMUTABLE_TYPE]) type: androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][] \l0x001f: IPUT  \l  (r0 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][])\l  (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline)\l androidx.constraintlayout.core.motion.utils.HyperSpline.mCurve androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][] \l0x0021: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:52)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|LOOP_START\lLOOP:0: B:3:0x0022\-\>B:9:0x0038\l|0x0022: IGET  (r1 I:int) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mDimensionality int \l}"];
Node_4 [shape=record,label="{4\:\ 0x0024|0x0024: IF  (r0 I:??[int, byte, short, char] A[D('d' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:23:0x003b \l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|0x0026: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:53)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|LOOP_START\lLOOP:1: B:6:0x0027\-\>B:8:0x002b\l|0x0027: IGET  (r2 I:int) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mPoints int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0029|0x0029: IF  (r1 I:??[int, byte, short, char] A[D('p' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:24:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|LOOP_END\lLOOP:1: B:6:0x0027\-\>B:8:0x002b\l|0x002b: IGET  (r2 I:double[][]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCtl double[][]  (LINE:54)\l0x002d: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('d' int)]) \l0x002f: AGET  (r3 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY][] A[D('points' double[][])]), (r1 I:??[int, short, byte, char] A[D('p' int)]) \l0x0031: AGET  (r5 I:??[long, double]) = (r3 I:??[long, double][]), (r0 I:??[int, short, byte, char] A[D('d' int)]) \l0x0033: APUT  (r2 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('p' int)]), (r5 I:??[long, double]) \l0x0035: ARITH  (r1 I:int) = (r1 I:int A[D('p' int)]) + (1 int)  (LINE:53)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0038|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|LOOP_END\lLOOP:0: B:3:0x0022\-\>B:9:0x0038\l|0x0038: ARITH  (r0 I:int) = (r0 I:int A[D('d' int)]) + (1 int)  (LINE:52)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003b|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x003b|0x003b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('d' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:58)\l}"];
Node_11 [shape=record,label="{11\:\ 0x003c|LOOP_START\lLOOP:2: B:11:0x003c\-\>B:13:0x0040\l|0x003c: IGET  (r1 I:int) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mDimensionality int \l}"];
Node_12 [shape=record,label="{12\:\ 0x003e|0x003e: IF  (r0 I:??[int, byte, short, char] A[D('d' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:25:0x0052 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0040|LOOP_END\lLOOP:2: B:11:0x003c\-\>B:13:0x0040\l|0x0040: IGET  (r1 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCurve androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][]  (LINE:59)\l0x0042: IGET  (r2 I:double[][]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCtl double[][] \l0x0044: AGET  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('d' int)]) \l0x0046: ARRAY_LENGTH  (r3 I:int) = (r3 I:??[]) \l0x0047: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('d' int)]) \l0x0049: INVOKE  (r2 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]) = (r3 I:int), (r2 I:double[]) type: STATIC call: androidx.constraintlayout.core.motion.utils.HyperSpline.calcNaturalCubic(int, double[]):androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] A[MD:(int, double[]):androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] (m)]\l0x004d: APUT  (r1 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('d' int)]), (r2 I:??[OBJECT, ARRAY]) \l0x004f: ARITH  (r0 I:int) = (r0 I:int A[D('d' int)]) + (1 int)  (LINE:58)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0052|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0052|0x0052: IGET  (r0 I:int A[D('d' int)]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mPoints int  (LINE:62)\l0x0054: ARITH  (r0 I:int) = (r0 I:int) \- (r4 I:int) \l0x0055: NEW_ARRAY  (r0 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0057: IPUT  (r0 I:double[]), (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCurveLength double[] \l0x0059: CONST  (r2 I:??[long, double]) = (0 ??[long, double])  (LINE:63)\l0x005b: IPUT  (r2 I:double), (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mTotalLength double \l0x005d: NEW_ARRAY  (r0 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]  (LINE:64)\l0x005f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:65)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0060|LOOP_START\lLOOP:3: B:15:0x0060\-\>B:21:0x0075\l|0x0060: IGET  (r2 I:double[]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCurveLength double[] \l0x0062: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|0x0063: IF  (r1 I:??[int, byte, short, char] A[D('p' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:26:0x0085 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0065|0x0065: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:66)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0066|LOOP_START\lLOOP:4: B:18:0x0066\-\>B:20:0x006a\l|0x0066: IGET  (r3 I:int) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mDimensionality int \l}"];
Node_19 [shape=record,label="{19\:\ 0x0068|0x0068: IF  (r2 I:??[int, byte, short, char] A[D('d' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:27:0x0075 \l}"];
Node_20 [shape=record,label="{20\:\ 0x006a|LOOP_END\lLOOP:4: B:18:0x0066\-\>B:20:0x006a\l|0x006a: IGET  (r3 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCurve androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[][]  (LINE:68)\l0x006c: AGET  (r3 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char] A[D('d' int)]) \l0x006e: AGET  (r3 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('p' int)]) \l0x0070: APUT  \l  (r0 I:??[OBJECT, ARRAY][] A[D('temp' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])\l  (r2 I:??[int, short, byte, char] A[D('d' int)])\l  (r3 I:??[OBJECT, ARRAY])\l \l0x0072: ARITH  (r2 I:int) = (r2 I:int A[D('d' int)]) + (1 int)  (LINE:66)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0075|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0075|LOOP_END\lLOOP:3: B:15:0x0060\-\>B:21:0x0075\l|0x0075: IGET  (r2 I:double A[D('d' int)]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mTotalLength double  (LINE:71)\l0x0077: IGET  (r4 I:double[]) = (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mCurveLength double[] \l0x0079: INVOKE  (r5 I:double) = \l  (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline)\l  (r0 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] A[D('temp' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])\l type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.HyperSpline.approxLength(androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]):double A[MD:(androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]):double (m)]\l0x007d: APUT  (r4 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('p' int)]), (r5 I:??[long, double]) \l0x007f: ARITH  (r2 I:double) = (r2 I:double) + (r5 I:double) \l0x0080: IPUT  (r2 I:double), (r7 I:androidx.constraintlayout.core.motion.utils.HyperSpline) androidx.constraintlayout.core.motion.utils.HyperSpline.mTotalLength double \l0x0082: ARITH  (r1 I:int) = (r1 I:int A[D('p' int)]) + (1 int)  (LINE:65)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0085|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0085|RETURN\l|0x0085: RETURN    (LINE:73)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.HyperSpline.setup((r7 'this' I:androidx.constraintlayout.core.motion.utils.HyperSpline A[IMMUTABLE_TYPE, THIS]), (r8 I:double[][] A[D('points' double[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x002b \-\> B:6:0x0027, BACK_EDGE: B:9:0x0038 \-\> B:3:0x0022, BACK_EDGE: B:13:0x0040 \-\> B:11:0x003c, BACK_EDGE: B:20:0x006a \-\> B:18:0x0066, BACK_EDGE: B:21:0x0075 \-\> B:15:0x0060\lDebug Info:\l  0x0027\-0x0038: r1 'p' I\l  0x0022\-0x003b: r0 'd' I\l  0x003c\-0x0052: r0 'd' I\l  0x0066\-0x0075: r2 'd' I\l  0x0060\-0x0085: r1 'p' I\l  0x005f\-0x0085: r0 'temp' [Landroidx\/constraintlayout\/core\/motion\/utils\/HyperSpline$Cubic;\l  \-1 \-0x0085: r8 'points' [[D\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_23;
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_24;
Node_8 -> Node_6;
Node_24 -> Node_9;
Node_9 -> Node_3;
Node_23 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_25;
Node_13 -> Node_11;
Node_25 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_27;
Node_20 -> Node_18;
Node_27 -> Node_21;
Node_21 -> Node_15;
Node_26 -> Node_22;
Node_22 -> Node_1;
}

