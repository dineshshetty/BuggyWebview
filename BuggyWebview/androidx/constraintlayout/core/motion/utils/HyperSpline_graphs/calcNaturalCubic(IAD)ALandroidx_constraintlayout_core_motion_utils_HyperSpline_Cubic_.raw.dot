digraph "CFG forandroidx.constraintlayout.core.motion.utils.HyperSpline.calcNaturalCubic(I[D)[Landroidx\/constraintlayout\/core\/motion\/utils\/HyperSpline$Cubic;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('n' int)])  (LINE:149)\l0x0002: NEW_ARRAY  (r1 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0004: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[]  (LINE:150)\l0x0006: NEW_ARRAY  (r3 I:double[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: double[]  (LINE:151)\l0x0008: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int)  (LINE:152)\l0x000a: CONST  (r4 I:??[long, double]) = (4602678819172646912(0x3fe0000000000000, double:0.5) ??[long, double])  (LINE:154)\l0x000c: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: APUT  (r1 I:??[long, double][] A[D('gamma' double[])]), (r6 I:??[int, short, byte, char]), (r4 I:??[long, double]) \l0x000f: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:155)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|LOOP_START\lLOOP:0: B:3:0x0010\-\>B:5:0x0014\l|0x0010: CONST  (r7 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0012|0x0012: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('n' int)])  \-\> B:16:0x0021 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|LOOP_END\lLOOP:0: B:3:0x0010\-\>B:5:0x0014\l|0x0014: CONST  (r9 I:??[long, double]) = (4616189618054758400(0x4010000000000000, double:4.0) ??[long, double])  (LINE:156)\l0x0016: ARITH  (r5 I:int) = (r4 I:int A[D('i' int)]) + (\-1 int) \l0x0018: AGET  (r11 I:??[long, double]) = (r1 I:??[long, double][] A[D('gamma' double[])]), (r5 I:??[int, short, byte, char]) \l0x001a: ARITH  (r9 I:double) = (r9 I:double) \- (r11 I:double) \l0x001b: ARITH  (r7 I:double) = (r7 I:double) \/ (r9 I:double) \l0x001c: APUT  \l  (r1 I:??[long, double][] A[D('gamma' double[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l  (r7 I:??[long, double])\l \l0x001e: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:155)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0021|0x0021: ARITH  (r4 I:int A[D('i' int)]) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:158)\l0x0023: AGET  (r4 I:??[long, double]) = (r1 I:??[long, double][] A[D('gamma' double[])]), (r4 I:??[int, short, byte, char]) \l0x0025: CONST  (r9 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double]) \l0x0027: ARITH  (r4 I:double) = (r9 I:double) \- (r4 I:double) \l0x0029: ARITH  (r7 I:double) = (r7 I:double) \/ (r4 I:double) \l0x002a: APUT  \l  (r1 I:??[long, double][] A[D('gamma' double[])])\l  (r0 I:??[int, short, byte, char] A[D('n' int)])\l  (r7 I:??[long, double])\l \l0x002c: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:160)\l0x002d: AGET  (r4 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r4 I:??[int, short, byte, char]) \l0x002f: AGET  (r7 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r6 I:??[int, short, byte, char]) \l0x0031: ARITH  (r4 I:double) = (r4 I:double) \- (r7 I:double) \l0x0032: CONST  (r7 I:??[long, double]) = (4613937818241073152(0x4008000000000000, double:3.0) ??[long, double]) \l0x0034: ARITH  (r4 I:double) = (r4 I:double) * (r7 I:double) \l0x0036: AGET  (r11 I:??[long, double]) = (r1 I:??[long, double][] A[D('gamma' double[])]), (r6 I:??[int, short, byte, char]) \l0x0038: ARITH  (r4 I:double) = (r4 I:double) * (r11 I:double) \l0x003a: APUT  (r2 I:??[long, double][] A[D('delta' double[])]), (r6 I:??[int, short, byte, char]), (r4 I:??[long, double]) \l0x003c: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:161)\l}"];
Node_7 [shape=record,label="{7\:\ 0x003d|LOOP_START\lLOOP:1: B:7:0x003d\-\>B:8:0x003f\l|0x003d: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('n' int)])  \-\> B:17:0x0058 \l}"];
Node_8 [shape=record,label="{8\:\ 0x003f|LOOP_END\lLOOP:1: B:7:0x003d\-\>B:8:0x003f\l|0x003f: ARITH  (r5 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:162)\l0x0041: AGET  (r5 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r5 I:??[int, short, byte, char]) \l0x0043: ARITH  (r11 I:int) = (r4 I:int A[D('i' int)]) + (\-1 int) \l0x0045: AGET  (r11 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r11 I:??[int, short, byte, char]) \l0x0047: ARITH  (r5 I:double) = (r5 I:double) \- (r11 I:double) \l0x0048: ARITH  (r5 I:double) = (r5 I:double) * (r7 I:double) \l0x004a: ARITH  (r11 I:int) = (r4 I:int A[D('i' int)]) + (\-1 int) \l0x004c: AGET  (r11 I:??[long, double]) = (r2 I:??[long, double][] A[D('delta' double[])]), (r11 I:??[int, short, byte, char]) \l0x004e: ARITH  (r5 I:double) = (r5 I:double) \- (r11 I:double) \l0x004f: AGET  (r11 I:??[long, double]) = (r1 I:??[long, double][] A[D('gamma' double[])]), (r4 I:??[int, short, byte, char] A[D('i' int)]) \l0x0051: ARITH  (r5 I:double) = (r5 I:double) * (r11 I:double) \l0x0053: APUT  \l  (r2 I:??[long, double][] A[D('delta' double[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l  (r5 I:??[long, double])\l \l0x0055: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:161)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0058|0x0058: AGET  (r4 I:??[long, double] A[D('i' int)]) = (r23 I:??[long, double][] A[D('x' double[])]), (r0 I:??[int, short, byte, char] A[D('n' int)])  (LINE:164)\l0x005a: ARITH  (r6 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int) \l0x005c: AGET  (r11 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r6 I:??[int, short, byte, char]) \l0x005e: ARITH  (r4 I:double) = (r4 I:double) \- (r11 I:double) \l0x005f: ARITH  (r4 I:double) = (r4 I:double) * (r7 I:double) \l0x0061: ARITH  (r6 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int) \l0x0063: AGET  (r11 I:??[long, double]) = (r2 I:??[long, double][] A[D('delta' double[])]), (r6 I:??[int, short, byte, char]) \l0x0065: ARITH  (r4 I:double) = (r4 I:double) \- (r11 I:double) \l0x0066: AGET  (r11 I:??[long, double]) = (r1 I:??[long, double][] A[D('gamma' double[])]), (r0 I:??[int, short, byte, char] A[D('n' int)]) \l0x0068: ARITH  (r4 I:double) = (r4 I:double) * (r11 I:double) \l0x006a: APUT  \l  (r2 I:??[long, double][] A[D('delta' double[])])\l  (r0 I:??[int, short, byte, char] A[D('n' int)])\l  (r4 I:??[long, double])\l \l0x006c: AGET  (r4 I:??[long, double]) = (r2 I:??[long, double][] A[D('delta' double[])]), (r0 I:??[int, short, byte, char] A[D('n' int)])  (LINE:166)\l0x006e: APUT  (r3 I:??[long, double][] A[D('D' double[])]), (r0 I:??[int, short, byte, char] A[D('n' int)]), (r4 I:??[long, double]) \l0x0070: ARITH  (r4 I:int) = (r0 I:int A[D('n' int)]) + (\-1 int)  (LINE:167)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0072|LOOP_START\lLOOP:2: B:10:0x0072\-\>B:11:0x0074\l|0x0072: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \< (0 ??[int, byte, short, char])  \-\> B:18:0x0084 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0074|LOOP_END\lLOOP:2: B:10:0x0072\-\>B:11:0x0074\l|0x0074: AGET  (r5 I:??[long, double]) = (r2 I:??[long, double][] A[D('delta' double[])]), (r4 I:??[int, short, byte, char] A[D('i' int)])  (LINE:168)\l0x0076: AGET  (r11 I:??[long, double]) = (r1 I:??[long, double][] A[D('gamma' double[])]), (r4 I:??[int, short, byte, char] A[D('i' int)]) \l0x0078: ARITH  (r13 I:int) = (r4 I:int A[D('i' int)]) + (1 int) \l0x007a: AGET  (r13 I:??[long, double]) = (r3 I:??[long, double][] A[D('D' double[])]), (r13 I:??[int, short, byte, char]) \l0x007c: ARITH  (r11 I:double) = (r11 I:double) * (r13 I:double) \l0x007e: ARITH  (r5 I:double) = (r5 I:double) \- (r11 I:double) \l0x007f: APUT  (r3 I:??[long, double][] A[D('D' double[])]), (r4 I:??[int, short, byte, char] A[D('i' int)]), (r5 I:??[long, double]) \l0x0081: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (\-1 int)  (LINE:167)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0084|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0084|0x0084: NEW_ARRAY  (r4 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] A[D('i' int)]) = (r0 I:int A[D('n' int), IMMUTABLE_TYPE]) type: androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[]  (LINE:171)\l0x0086: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:172)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0087|LOOP_START\lLOOP:3: B:13:0x0087\-\>B:14:0x0089\l|0x0087: IF  (r5 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('n' int)])  \-\> B:19:0x00c4 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0089|LOOP_END\lLOOP:3: B:13:0x0087\-\>B:14:0x0089\l|0x0089: NEW_INSTANCE  (r6 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic) =  androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic  (LINE:173)\l0x008b: AGET  (r11 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x008d: CAST (r11 I:float) = (float) (r11 I:double) \l0x008e: CAST (r12 I:double) = (double) (r11 I:float) \l0x008f: AGET  (r14 I:??[long, double]) = (r3 I:??[long, double][] A[D('D' double[])]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x0091: ARITH  (r11 I:int) = (r5 I:int A[D('i' int)]) + (1 int) \l0x0093: AGET  (r16 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r11 I:??[int, short, byte, char]) \l0x0095: AGET  (r18 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x0097: ARITH  (r16 I:double) = (r16 I:double) \- (r18 I:double) \l0x0099: ARITH  (r16 I:double) = (r16 I:double) * (r7 I:double) \l0x009b: AGET  (r18 I:??[long, double]) = (r3 I:??[long, double][] A[D('D' double[])]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x009d: ARITH  (r18 I:double) = (r18 I:double) * (r9 I:double) \l0x009f: ARITH  (r16 I:double) = (r16 I:double) \- (r18 I:double) \l0x00a1: ARITH  (r11 I:int) = (r5 I:int A[D('i' int)]) + (1 int) \l0x00a3: AGET  (r18 I:??[long, double]) = (r3 I:??[long, double][] A[D('D' double[])]), (r11 I:??[int, short, byte, char]) \l0x00a5: ARITH  (r16 I:double) = (r16 I:double) \- (r18 I:double) \l0x00a7: AGET  (r18 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x00a9: ARITH  (r11 I:int) = (r5 I:int A[D('i' int)]) + (1 int) \l0x00ab: AGET  (r20 I:??[long, double]) = (r23 I:??[long, double][] A[D('x' double[])]), (r11 I:??[int, short, byte, char]) \l0x00ad: ARITH  (r18 I:double) = (r18 I:double) \- (r20 I:double) \l0x00af: ARITH  (r18 I:double) = (r18 I:double) * (r9 I:double) \l0x00b1: AGET  (r20 I:??[long, double]) = (r3 I:??[long, double][] A[D('D' double[])]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x00b3: ARITH  (r18 I:double) = (r18 I:double) + (r20 I:double) \l0x00b5: ARITH  (r11 I:int) = (r5 I:int A[D('i' int)]) + (1 int) \l0x00b7: AGET  (r20 I:??[long, double]) = (r3 I:??[long, double][] A[D('D' double[])]), (r11 I:??[int, short, byte, char]) \l0x00b9: ARITH  (r18 I:double) = (r18 I:double) + (r20 I:double) \l0x00bb: MOVE  (r11 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x00bc: INVOKE  \l  (r11 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic)\l  (r12 I:double)\l  (r14 I:double)\l  (r16 I:double)\l  (r18 I:double)\l type: DIRECT call: androidx.constraintlayout.core.motion.utils.HyperSpline.Cubic.\<init\>(double, double, double, double):void A[MD:(double, double, double, double):void (m)]\l0x00bf: APUT  \l  (r4 I:??[OBJECT, ARRAY][] A[D('C' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])\l  (r5 I:??[int, short, byte, char] A[D('i' int)])\l  (r6 I:??[OBJECT, ARRAY])\l \l0x00c1: ARITH  (r5 I:int) = (r5 I:int A[D('i' int)]) + (1 int)  (LINE:172)\l}"];
Node_19 [shape=record,label="{19\:\ 0x00c4|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x00c4|RETURN\l|0x00c4: RETURN  \l  (r4 I:androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] A[D('C' androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[])])\l  (LINE:176)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static androidx.constraintlayout.core.motion.utils.HyperSpline$Cubic[] androidx.constraintlayout.core.motion.utils.HyperSpline.calcNaturalCubic((r22 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:double[] A[D('x' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:5:0x0014 \-\> B:3:0x0010, BACK_EDGE: B:8:0x003f \-\> B:7:0x003d, BACK_EDGE: B:11:0x0074 \-\> B:10:0x0072, BACK_EDGE: B:14:0x0089 \-\> B:13:0x0087\lDebug Info:\l  \-1 \-0x000a: r22 'n' I\l  0x0010\-0x0021: r4 'i' I\l  0x003d\-0x0058: r4 'i' I\l  0x0072\-0x0084: r4 'i' I\l  0x0087\-0x00c4: r5 'i' I\l  0x000a\-0x00c4: r0 'n' I\l  0x0004\-0x00c4: r1 'gamma' [D\l  0x0006\-0x00c4: r2 'delta' [D\l  0x0008\-0x00c4: r3 'D' [D\l  0x0086\-0x00c4: r4 'C' [Landroidx\/constraintlayout\/core\/motion\/utils\/HyperSpline$Cubic;\l  \-1 \-0x00c4: r23 'x' [D\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_16;
Node_5 -> Node_3;
Node_16 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_17;
Node_8 -> Node_7;
Node_17 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_18;
Node_11 -> Node_10;
Node_18 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_13;
Node_19 -> Node_15;
Node_15 -> Node_1;
}

