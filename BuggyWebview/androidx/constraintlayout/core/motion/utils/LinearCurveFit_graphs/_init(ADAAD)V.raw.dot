digraph "CFG forandroidx.constraintlayout.core.motion.utils.LinearCurveFit.\<init\>([D[[D)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r21 I:??[OBJECT, ARRAY])  (LINE:32)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r22 I:??[OBJECT, ARRAY] A[D('time' double[])]) \l0x0004: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r23 I:??[OBJECT, ARRAY] A[D('y' double[][])]) \l0x0006: INVOKE  (r21 I:androidx.constraintlayout.core.motion.utils.CurveFit) type: DIRECT call: androidx.constraintlayout.core.motion.utils.CurveFit.\<init\>():void A[MD:():void (m)]\l0x0009: CONST  (r3 I:??[long, double]) = (9221120237041090560(0x7ff8000000000000, double:NaN) ??[long, double])  (LINE:28)\l0x000b: IPUT  (r3 I:double), (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mTotalLength double \l0x000d: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:29)\l0x000e: IPUT  (r3 I:boolean), (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mExtrapolate boolean \l0x0010: ARRAY_LENGTH  (r3 I:int) = (r1 I:??[])  (LINE:33)\l0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:34)\l0x0012: AGET  (r5 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]) \l0x0014: ARRAY_LENGTH  (r5 I:int) = (r5 I:??[]) \l0x0015: NEW_ARRAY  (r6 I:double[]) = (r5 I:int A[D('dim' int), IMMUTABLE_TYPE]) type: double[]  (LINE:35)\l0x0017: IPUT  (r6 I:double[]), (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mSlopeTemp double[] \l0x0019: IPUT  (r1 I:double[]), (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[]  (LINE:36)\l0x001b: IPUT  (r2 I:double[][]), (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:37)\l0x001d: CONST  (r6 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:38)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IF  (r5 I:??[int, byte, short, char] A[D('dim' int)]) \<= (r6 I:??[int, byte, short, char])  \-\> B:13:0x0057 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: CONST  (r6 I:??[long, double]) = (0 ??[long, double])  (LINE:39)\l0x0022: CONST  (r8 I:??[long, double]) = (0 ??[long, double])  (LINE:40)\l0x0024: CONST  (r10 I:??[long, double]) = (0 ??[long, double]) \l0x0026: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:41)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0027|LOOP_START\lLOOP:0: B:5:0x0027\-\>B:11:0x0046\l|0x0027: ARRAY_LENGTH  (r13 I:int) = (r1 I:??[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IF  (r12 I:??[int, byte, short, char] A[D('i' int)]) \>= (r13 I:??[int, byte, short, char])  \-\> B:15:0x0050 \l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: AGET  (r13 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r12 I:??[int, short, byte, char] A[D('i' int)])  (LINE:42)\l0x002c: AGET  (r14 I:??[long, double]) = (r13 I:??[long, double][]), (r4 I:??[int, short, byte, char]) \l0x002e: AGET  (r13 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r12 I:??[int, short, byte, char] A[D('i' int)])  (LINE:43)\l0x0030: AGET  (r16 I:??[long, double]) = (r13 I:??[long, double][]), (r4 I:??[int, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|0x0032: IF  (r12 I:??[int, byte, short, char] A[D('i' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:10:0x0042  (LINE:44)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|0x0034: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)])  (LINE:45)\l0x0036: ARITH  (r4 I:double) = (r14 I:double A[D('px' double)]) \- (r8 I:double A[D('lastx' double)]) \l0x0038: MOVE  (r19 I:??[long, double]) = (r14 I:??[long, double] A[D('px' double)]) \l0x003a: ARITH  (r13 I:double) = (r16 I:double A[D('py' double)]) \- (r10 I:double A[D('lasty' double)]) \l0x003c: INVOKE  (r4 I:double) = (r4 I:double), (r13 I:double) type: STATIC call: java.lang.Math.hypot(double, double):double A[MD:(double, double):double (c)]\l0x0040: ARITH  (r6 I:double) = (r6 I:double A[D('sum' double)]) + (r4 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x0046|LOOP_END\lLOOP:0: B:5:0x0027\-\>B:11:0x0046\l|0x0046: MOVE  (r8 I:??[long, double] A[D('lastx' double)]) = (r19 I:??[long, double] A[D('px' double)])  (LINE:47)\l0x0048: MOVE  (r10 I:??[long, double] A[D('lasty' double)]) = (r16 I:??[long, double] A[D('py' double)])  (LINE:48)\l0x004a: ARITH  (r12 I:int) = (r12 I:int A[D('i' int)]) + (1 int)  (LINE:41)\l0x004c: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)]) \l0x004e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0042|0x0042: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)])  (LINE:44)\l0x0044: MOVE  (r19 I:??[long, double]) = (r14 I:??[long, double] A[D('px' double)]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0046|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0050|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0050|0x0050: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)]) \l0x0052: CONST  (r4 I:??[long, double]) = (0 ??[long, double])  (LINE:50)\l0x0054: IPUT  (r4 I:double), (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mTotalLength double \l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:52)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0057|0x0057: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dim' int)])  (LINE:38)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0059|RETURN\lORIG_RETURN\l|0x0059: RETURN    (LINE:52)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.LinearCurveFit.\<init\>((r21 'this' I:androidx.constraintlayout.core.motion.utils.LinearCurveFit A[IMMUTABLE_TYPE, THIS]), (r22 I:double[] A[D('time' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:double[][] A[D('y' double[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0046 \-\> B:5:0x0027, CROSS_EDGE: B:10:0x0042 \-\> B:11:0x0046, CROSS_EDGE: B:13:0x0057 \-\> B:14:0x0059\lDebug Info:\l  0x0015\-0x0036: r5 'dim' I\l  0x002e\-0x003a: r14 'px' D\l  0x0036\-0x0042: r18 'dim' I\l  0x003a\-0x0042: r19 'px' D\l  0x0042\-0x0046: r5 'dim' I\l  0x0042\-0x0046: r14 'px' D\l  0x0032\-0x004a: r16 'py' D\l  0x0046\-0x004a: r19 'px' D\l  0x0046\-0x0050: r18 'dim' I\l  0x0050\-0x0052: r5 'dim' I\l  0x0027\-0x0052: r12 'i' I\l  0x0022\-0x0057: r6 'sum' D\l  0x0024\-0x0057: r8 'lastx' D\l  0x0026\-0x0057: r10 'lasty' D\l  0x0052\-0x0057: r18 'dim' I\l  0x0057\-0x0059: r5 'dim' I\l  0x0011\-0x0059: r3 'N' I\l  0x0059\-0x0059: r18 'dim' I\l  \-1 \-0x0059: r22 'time' [D\l  \-1 \-0x0059: r23 'y' [[D\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_17;
Node_17 -> Node_11;
Node_11 -> Node_5;
Node_10 -> Node_16;
Node_16 -> Node_11;
Node_15 -> Node_12;
Node_12 -> Node_18;
Node_18 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

