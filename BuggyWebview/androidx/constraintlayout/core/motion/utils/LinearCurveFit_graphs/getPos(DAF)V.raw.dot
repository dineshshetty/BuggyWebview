digraph "CFG forandroidx.constraintlayout.core.motion.utils.LinearCurveFit.getPos(D[F)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY])  (LINE:158)\l0x0002: IGET  (r1 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[] \l0x0004: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[]) \l0x0005: IGET  (r3 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:159)\l0x0007: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: AGET  (r3 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]) \l0x000a: ARRAY_LENGTH  (r3 I:int) = (r3 I:??[]) \l0x000b: IGET  (r5 I:boolean) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mExtrapolate boolean  (LINE:160)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|0x000d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x006b \l}"];
Node_4 [shape=record,label="{4\:\ 0x000f|0x000f: AGET  (r5 I:??[long, double]) = (r1 I:??[long, double][]), (r4 I:??[int, short, byte, char])  (LINE:161)\l0x0011: CMP_G  (r7 I:int) = (r18 I:double A[D('t' double)]), (r5 I:double) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r7 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:10:0x0039 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: AGET  (r5 I:??[long, double]) = (r1 I:??[long, double][]), (r4 I:??[int, short, byte, char])  (LINE:162)\l0x0017: IGET  (r1 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mSlopeTemp double[] \l0x0019: INVOKE  (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit), (r5 I:double), (r1 I:double[]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.LinearCurveFit.getSlope(double, double[]):void A[MD:(double, double[]):void (m)]\l0x001c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:163)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|LOOP_START\lLOOP:0: B:7:0x001d\-\>B:8:0x001f\l|0x001d: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \>= (r3 I:??[int, byte, short, char] A[D('dim' int)])  \-\> B:44:0x0038 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|LOOP_END\lLOOP:0: B:7:0x001d\-\>B:8:0x001f\l|0x001f: IGET  (r5 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:164)\l0x0021: AGET  (r5 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]) \l0x0023: AGET  (r6 I:??[long, double]) = (r5 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('j' int)]) \l0x0025: IGET  (r5 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[] \l0x0027: AGET  (r8 I:??[long, double]) = (r5 I:??[long, double][]), (r4 I:??[int, short, byte, char]) \l0x0029: ARITH  (r8 I:double) = (r18 I:double A[D('t' double)]) \- (r8 I:double) \l0x002b: IGET  (r5 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mSlopeTemp double[] \l0x002d: AGET  (r10 I:??[long, double]) = (r5 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('j' int)]) \l0x002f: ARITH  (r8 I:double) = (r8 I:double) * (r10 I:double) \l0x0031: ARITH  (r6 I:double) = (r6 I:double) + (r8 I:double) \l0x0032: CAST (r5 I:float) = (float) (r6 I:double) \l0x0033: APUT  \l  (r20 I:??[int, float][] A[D('v' float[])])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x0035: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:163)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0038|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|RETURN\l|0x0038: RETURN    (LINE:166)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0039|0x0039: ARITH  (r4 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int)  (LINE:168)\l0x003b: AGET  (r4 I:??[long, double]) = (r1 I:??[long, double][]), (r4 I:??[int, short, byte, char]) \l0x003d: CMP_L  (r6 I:int) = (r18 I:double A[D('t' double)]), (r4 I:double) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003f|0x003f: IF  (r6 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:28:0x009b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: ARITH  (r4 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int)  (LINE:169)\l0x0043: AGET  (r4 I:??[long, double]) = (r1 I:??[long, double][]), (r4 I:??[int, short, byte, char]) \l0x0045: IGET  (r1 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mSlopeTemp double[] \l0x0047: INVOKE  (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit), (r4 I:double), (r1 I:double[]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.LinearCurveFit.getSlope(double, double[]):void A[MD:(double, double[]):void (m)]\l0x004a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:170)\l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|LOOP_START\lLOOP:1: B:13:0x004b\-\>B:14:0x004d\l|0x004b: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \>= (r3 I:??[int, byte, short, char] A[D('dim' int)])  \-\> B:45:0x006a \l}"];
Node_14 [shape=record,label="{14\:\ 0x004d|LOOP_END\lLOOP:1: B:13:0x004b\-\>B:14:0x004d\l|0x004d: IGET  (r4 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:171)\l0x004f: ARITH  (r5 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int) \l0x0051: AGET  (r4 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]) \l0x0053: AGET  (r5 I:??[long, double]) = (r4 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('j' int)]) \l0x0055: IGET  (r4 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[] \l0x0057: ARITH  (r7 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int) \l0x0059: AGET  (r7 I:??[long, double]) = (r4 I:??[long, double][]), (r7 I:??[int, short, byte, char]) \l0x005b: ARITH  (r7 I:double) = (r18 I:double A[D('t' double)]) \- (r7 I:double) \l0x005d: IGET  (r4 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mSlopeTemp double[] \l0x005f: AGET  (r9 I:??[long, double]) = (r4 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('j' int)]) \l0x0061: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l0x0063: ARITH  (r5 I:double) = (r5 I:double) + (r7 I:double) \l0x0064: CAST (r4 I:float) = (float) (r5 I:double) \l0x0065: APUT  \l  (r20 I:??[int, float][] A[D('v' float[])])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l  (r4 I:??[int, float, short, byte, char])\l \l0x0067: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:170)\l}"];
Node_45 [shape=record,label="{45\:\ 0x006a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x006a|RETURN\l|0x006a: RETURN    (LINE:173)\l}"];
Node_28 [shape=record,label="{28\:\ 0x009b|0x009b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:190)\l}"];
Node_29 [shape=record,label="{29\:\ 0x009c|LOOP_START\lLOOP:2: B:29:0x009c\-\>B:42:0x00eb\l|0x009c: ARITH  (r4 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x009e|0x009e: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:46:0x00ee \l}"];
Node_31 [shape=record,label="{31\:\ 0x00a0|0x00a0: IGET  (r4 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[]  (LINE:191)\l0x00a2: AGET  (r5 I:??[long, double]) = (r4 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x00a4: CMP_L  (r4 I:int) = (r18 I:double A[D('t' double)]), (r5 I:double) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00a6|0x00a6: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x00b7 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00a8|0x00a8: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:192)\l}"];
Node_34 [shape=record,label="{34\:\ 0x00a9|LOOP_START\lLOOP:3: B:34:0x00a9\-\>B:35:0x00ab\l|0x00a9: IF  (r4 I:??[int, byte, short, char] A[D('j' int)]) \>= (r3 I:??[int, byte, short, char] A[D('dim' int)])  \-\> B:48:0x00b7 \l}"];
Node_35 [shape=record,label="{35\:\ 0x00ab|LOOP_END\lLOOP:3: B:34:0x00a9\-\>B:35:0x00ab\l|0x00ab: IGET  (r5 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:193)\l0x00ad: AGET  (r5 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x00af: AGET  (r6 I:??[long, double]) = (r5 I:??[long, double][]), (r4 I:??[int, short, byte, char] A[D('j' int)]) \l0x00b1: CAST (r5 I:float) = (float) (r6 I:double) \l0x00b2: APUT  \l  (r20 I:??[int, float][] A[D('v' float[])])\l  (r4 I:??[int, short, byte, char] A[D('j' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x00b4: ARITH  (r4 I:int) = (r4 I:int A[D('j' int)]) + (1 int)  (LINE:192)\l}"];
Node_48 [shape=record,label="{48\:\ 0x00b7|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x00b7|0x00b7: IGET  (r4 I:double[] A[D('j' int)]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[]  (LINE:196)\l0x00b9: ARITH  (r5 I:int) = (r1 I:int A[D('i' int)]) + (1 int) \l0x00bb: AGET  (r5 I:??[long, double]) = (r4 I:??[long, double][]), (r5 I:??[int, short, byte, char]) \l0x00bd: CMP_G  (r7 I:int) = (r18 I:double A[D('t' double)]), (r5 I:double) \l}"];
Node_37 [shape=record,label="{37\:\ 0x00bf|0x00bf: IF  (r7 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:42:0x00eb \l}"];
Node_42 [shape=record,label="{42\:\ 0x00eb|LOOP_END\lLOOP:2: B:29:0x009c\-\>B:42:0x00eb\l|0x00eb: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:190)\l}"];
Node_47 [shape=record,label="{47\:\ 0x00c1|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x00c1|0x00c1: ARITH  (r5 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:197)\l0x00c3: AGET  (r5 I:??[long, double]) = (r4 I:??[long, double][]), (r5 I:??[int, short, byte, char]) \l0x00c5: AGET  (r7 I:??[long, double]) = (r4 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x00c7: ARITH  (r5 I:double) = (r5 I:double) \- (r7 I:double) \l0x00c8: AGET  (r7 I:??[long, double]) = (r4 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:198)\l0x00ca: ARITH  (r7 I:double) = (r18 I:double A[D('t' double)]) \- (r7 I:double) \l0x00cc: ARITH  (r7 I:double) = (r7 I:double) \/ (r5 I:double A[D('h' double)]) \l0x00cd: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:199)\l}"];
Node_39 [shape=record,label="{39\:\ 0x00ce|LOOP_START\lLOOP:4: B:39:0x00ce\-\>B:40:0x00d0\l|0x00ce: IF  (r4 I:??[int, byte, short, char] A[D('j' int)]) \>= (r3 I:??[int, byte, short, char] A[D('dim' int)])  \-\> B:49:0x00ea \l}"];
Node_40 [shape=record,label="{40\:\ 0x00d0|LOOP_END\lLOOP:4: B:39:0x00ce\-\>B:40:0x00d0\l|0x00d0: IGET  (r9 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:200)\l0x00d2: AGET  (r10 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x00d4: AGET  (r11 I:??[long, double]) = (r10 I:??[long, double][]), (r4 I:??[int, short, byte, char] A[D('j' int)]) \l0x00d6: ARITH  (r10 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:201)\l0x00d8: AGET  (r9 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY][]), (r10 I:??[int, short, byte, char]) \l0x00da: AGET  (r13 I:??[long, double]) = (r9 I:??[long, double][]), (r4 I:??[int, short, byte, char] A[D('j' int)]) \l0x00dc: CONST  (r9 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:203)\l0x00de: ARITH  (r9 I:double) = (r9 I:double) \- (r7 I:double A[D('x' double)]) \l0x00df: ARITH  (r9 I:double) = (r9 I:double) * (r11 I:double A[D('y1' double)]) \l0x00e1: ARITH  (r15 I:double) = (r13 I:double A[D('y2' double)]) * (r7 I:double A[D('x' double)]) \l0x00e3: ARITH  (r9 I:double) = (r9 I:double) + (r15 I:double) \l0x00e4: CAST (r9 I:float) = (float) (r9 I:double) \l0x00e5: APUT  \l  (r20 I:??[int, float][] A[D('v' float[])])\l  (r4 I:??[int, short, byte, char] A[D('j' int)])\l  (r9 I:??[int, float, short, byte, char])\l \l0x00e7: ARITH  (r4 I:int) = (r4 I:int A[D('j' int)]) + (1 int)  (LINE:199)\l}"];
Node_49 [shape=record,label="{49\:\ 0x00ea|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x00ea|RETURN\l|0x00ea: RETURN    (LINE:205)\l}"];
Node_46 [shape=record,label="{46\:\ 0x00ee|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x00ee|RETURN\l|0x00ee: RETURN    (LINE:208)\l}"];
Node_16 [shape=record,label="{16\:\ 0x006b|0x006b: AGET  (r5 I:??[long, double]) = (r1 I:??[long, double][]), (r4 I:??[int, short, byte, char])  (LINE:176)\l0x006d: CMP_G  (r7 I:int) = (r18 I:double A[D('t' double)]), (r5 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ 0x006f|0x006f: IF  (r7 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:22:0x0081 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0071|0x0071: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:177)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0072|LOOP_START\lLOOP:5: B:19:0x0072\-\>B:20:0x0074\l|0x0072: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \>= (r3 I:??[int, byte, short, char] A[D('dim' int)])  \-\> B:50:0x0080 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0074|LOOP_END\lLOOP:5: B:19:0x0072\-\>B:20:0x0074\l|0x0074: IGET  (r5 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:178)\l0x0076: AGET  (r5 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]) \l0x0078: AGET  (r6 I:??[long, double]) = (r5 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('j' int)]) \l0x007a: CAST (r5 I:float) = (float) (r6 I:double) \l0x007b: APUT  \l  (r20 I:??[int, float][] A[D('v' float[])])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l  (r5 I:??[int, float, short, byte, char])\l \l0x007d: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:177)\l}"];
Node_50 [shape=record,label="{50\:\ 0x0080|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0080|RETURN\l|0x0080: RETURN    (LINE:180)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0081|0x0081: ARITH  (r4 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int)  (LINE:182)\l0x0083: AGET  (r4 I:??[long, double]) = (r1 I:??[long, double][]), (r4 I:??[int, short, byte, char]) \l0x0085: CMP_L  (r1 I:int) = (r18 I:double A[D('t' double)]), (r4 I:double) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0087|0x0087: IF  (r1 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:28:0x009b \l}"];
Node_24 [shape=record,label="{24\:\ 0x0089|0x0089: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:183)\l}"];
Node_25 [shape=record,label="{25\:\ 0x008a|LOOP_START\lLOOP:6: B:25:0x008a\-\>B:26:0x008c\l|0x008a: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \>= (r3 I:??[int, byte, short, char] A[D('dim' int)])  \-\> B:51:0x009a \l}"];
Node_26 [shape=record,label="{26\:\ 0x008c|LOOP_END\lLOOP:6: B:25:0x008a\-\>B:26:0x008c\l|0x008c: IGET  (r4 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:184)\l0x008e: ARITH  (r5 I:int) = (r2 I:int A[D('n' int)]) + (\-1 int) \l0x0090: AGET  (r4 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]) \l0x0092: AGET  (r5 I:??[long, double]) = (r4 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('j' int)]) \l0x0094: CAST (r4 I:float) = (float) (r5 I:double) \l0x0095: APUT  \l  (r20 I:??[int, float][] A[D('v' float[])])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l  (r4 I:??[int, float, short, byte, char])\l \l0x0097: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (1 int)  (LINE:183)\l}"];
Node_51 [shape=record,label="{51\:\ 0x009a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x009a|RETURN\l|0x009a: RETURN    (LINE:186)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.LinearCurveFit.getPos((r17 'this' I:androidx.constraintlayout.core.motion.utils.LinearCurveFit A[IMMUTABLE_TYPE, THIS]), (r18 I:double A[D('t' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:float[] A[D('v' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x001f \-\> B:7:0x001d, BACK_EDGE: B:14:0x004d \-\> B:13:0x004b, CROSS_EDGE: B:15:0x006a \-\> B:1:?, BACK_EDGE: B:35:0x00ab \-\> B:34:0x00a9, BACK_EDGE: B:40:0x00d0 \-\> B:39:0x00ce, CROSS_EDGE: B:41:0x00ea \-\> B:1:?, BACK_EDGE: B:42:0x00eb \-\> B:29:0x009c, CROSS_EDGE: B:32:0x00a6 \-\> B:36:0x00b7, CROSS_EDGE: B:43:0x00ee \-\> B:1:?, BACK_EDGE: B:20:0x0074 \-\> B:19:0x0072, CROSS_EDGE: B:21:0x0080 \-\> B:1:?, BACK_EDGE: B:26:0x008c \-\> B:25:0x008a, CROSS_EDGE: B:27:0x009a \-\> B:1:?, CROSS_EDGE: B:23:0x0087 \-\> B:28:0x009b\lDebug Info:\l  0x001d\-0x0038: r1 'j' I\l  0x004b\-0x006a: r1 'j' I\l  0x0072\-0x0080: r1 'j' I\l  0x008a\-0x009a: r1 'j' I\l  0x00a9\-0x00b7: r4 'j' I\l  0x00d6\-0x00e7: r11 'y1' D\l  0x00dc\-0x00e7: r13 'y2' D\l  0x00ce\-0x00ea: r4 'j' I\l  0x00c8\-0x00eb: r5 'h' D\l  0x00cd\-0x00eb: r7 'x' D\l  0x009c\-0x00ee: r1 'i' I\l  0x0005\-0x00ee: r2 'n' I\l  0x000b\-0x00ee: r3 'dim' I\l  \-1 \-0x00ee: r18 't' D\l  \-1 \-0x00ee: r20 'v' [F\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.CurveFit.getPos(double, float[]):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_16;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_10;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_44;
Node_8 -> Node_7;
Node_44 -> Node_9;
Node_9 -> Node_1;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_28;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_45;
Node_14 -> Node_13;
Node_45 -> Node_15;
Node_15 -> Node_1;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_46;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_36;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_48;
Node_35 -> Node_34;
Node_48 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_42;
Node_37 -> Node_47[style=dashed];
Node_42 -> Node_29;
Node_47 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_49;
Node_40 -> Node_39;
Node_49 -> Node_41;
Node_41 -> Node_1;
Node_46 -> Node_43;
Node_43 -> Node_1;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_50;
Node_20 -> Node_19;
Node_50 -> Node_21;
Node_21 -> Node_1;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_51;
Node_26 -> Node_25;
Node_51 -> Node_27;
Node_27 -> Node_1;
}

