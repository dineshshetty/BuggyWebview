digraph "CFG forandroidx.constraintlayout.core.motion.utils.LinearCurveFit.getLength2D(D)D" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r34 I:??[OBJECT, ARRAY])  (LINE:62)\l0x0002: IGET  (r1 I:double) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mTotalLength double \l0x0004: INVOKE  (r1 I:boolean) = (r1 I:double) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)]\l0x0008: CONST  (r2 I:??[long, double]) = (0 ??[long, double]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x000c|RETURN\l|0x000c: RETURN  (r2 I:double)  (LINE:63)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: IGET  (r1 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[]  (LINE:65)\l0x000f: ARRAY_LENGTH  (r4 I:int) = (r1 I:??[]) \l0x0010: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:66)\l0x0011: AGET  (r6 I:??[long, double]) = (r1 I:??[long, double][]), (r5 I:??[int, short, byte, char]) \l0x0013: CMP_G  (r8 I:int) = (r35 I:double A[D('t' double)]), (r6 I:double) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: IF  (r8 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:8:0x0018 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|0x0017: RETURN  (r2 I:double)  (LINE:67)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0018|0x0018: ARITH  (r6 I:int) = (r4 I:int A[D('n' int)]) + (\-1 int)  (LINE:69)\l0x001a: AGET  (r6 I:??[long, double]) = (r1 I:??[long, double][]), (r6 I:??[int, short, byte, char]) \l0x001c: CMP_L  (r1 I:int) = (r35 I:double A[D('t' double)]), (r6 I:double) \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IF  (r1 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:12:0x0023 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0020|0x0020: IGET  (r1 I:double) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mTotalLength double  (LINE:70)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|RETURN\l|0x0022: RETURN  (r1 I:double) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0023|0x0023: CONST  (r6 I:??[long, double]) = (0 ??[long, double])  (LINE:72)\l0x0025: CONST  (r8 I:??[long, double]) = (0 ??[long, double])  (LINE:73)\l0x0027: CONST  (r10 I:??[long, double]) = (0 ??[long, double]) \l0x0029: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:75)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|LOOP_START\lLOOP:0: B:13:0x002a\-\>B:26:0x00a1\l|0x002a: ARITH  (r12 I:int) = (r4 I:int A[D('n' int)]) + (\-1 int) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r12 I:??[int, byte, short, char])  \-\> B:31:0x00a7 \l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: IGET  (r12 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:76)\l0x0030: AGET  (r13 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x0032: AGET  (r14 I:??[long, double]) = (r13 I:??[long, double][]), (r5 I:??[int, short, byte, char]) \l0x0034: AGET  (r12 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:77)\l0x0036: CONST  (r13 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0037: AGET  (r16 I:??[long, double]) = (r12 I:??[long, double][]), (r13 I:??[int, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0039|0x0039: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:18:0x0047  (LINE:78)\l}"];
Node_17 [shape=record,label="{17\:\ 0x003b|0x003b: ARITH  (r2 I:double) = (r14 I:double A[D('px' double)]) \- (r8 I:double A[D('last_x' double)])  (LINE:79)\l0x003d: MOVE  (r20 I:??[long, double]) = (r14 I:??[long, double] A[D('px' double)]) \l0x003f: ARITH  (r13 I:double) = (r16 I:double A[D('py' double)]) \- (r10 I:double A[D('last_y' double)]) \l0x0041: INVOKE  (r2 I:double) = (r2 I:double), (r13 I:double) type: STATIC call: java.lang.Math.hypot(double, double):double A[MD:(double, double):double (c)]\l0x0045: ARITH  (r6 I:double) = (r6 I:double A[D('sum' double)]) + (r2 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: MOVE  (r8 I:??[long, double] A[D('last_x' double)]) = (r20 I:??[long, double] A[D('px' double)])  (LINE:81)\l0x004b: MOVE  (r10 I:??[long, double] A[D('last_y' double)]) = (r16 I:??[long, double] A[D('py' double)])  (LINE:82)\l0x004d: IGET  (r2 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mT double[]  (LINE:83)\l0x004f: AGET  (r13 I:??[long, double]) = (r2 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x0051: CMP_L  (r3 I:int) = (r35 I:double A[D('t' double)]), (r13 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0053|0x0053: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0056 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0056|0x0056: ARITH  (r3 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:86)\l0x0058: AGET  (r13 I:??[long, double]) = (r2 I:??[long, double][]), (r3 I:??[int, short, byte, char]) \l0x005a: CMP_G  (r3 I:int) = (r35 I:double A[D('t' double)]), (r13 I:double) \l}"];
Node_23 [shape=record,label="{23\:\ 0x005c|0x005c: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:26:0x00a1 \l}"];
Node_26 [shape=record,label="{26\:\ 0x00a1|LOOP_END\lLOOP:0: B:13:0x002a\-\>B:26:0x00a1\l|0x00a1: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('n' int)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('n' int)])  (LINE:86)\l0x00a2: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:75)\l0x00a4: CONST  (r2 I:??[long, double]) = (0 ??[long, double]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x005e|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x005e|0x005e: ARITH  (r3 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:87)\l0x0060: AGET  (r13 I:??[long, double]) = (r2 I:??[long, double][]), (r3 I:??[int, short, byte, char]) \l0x0062: AGET  (r18 I:??[long, double]) = (r2 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x0064: ARITH  (r13 I:double) = (r13 I:double) \- (r18 I:double) \l0x0066: AGET  (r18 I:??[long, double]) = (r2 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:88)\l0x0068: ARITH  (r2 I:double) = (r35 I:double A[D('t' double)]) \- (r18 I:double) \l0x006a: ARITH  (r2 I:double) = (r2 I:double) \/ (r13 I:double A[D('h' double)]) \l0x006b: IGET  (r15 I:double[][]) = (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) androidx.constraintlayout.core.motion.utils.LinearCurveFit.mY double[][]  (LINE:89)\l0x006d: AGET  (r18 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l0x006f: AGET  (r22 I:??[long, double]) = (r18 I:??[long, double][]), (r5 I:??[int, short, byte, char]) \l0x0071: ARITH  (r18 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:90)\l0x0073: AGET  (r18 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY][]), (r18 I:??[int, short, byte, char]) \l0x0075: AGET  (r24 I:??[long, double]) = (r18 I:??[long, double][]), (r5 I:??[int, short, byte, char]) \l0x0077: AGET  (r5 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:91)\l0x0079: CONST  (r12 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x007a: AGET  (r18 I:??[long, double]) = (r5 I:??[long, double][]), (r12 I:??[int, short, byte, char]) \l0x007c: ARITH  (r5 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:92)\l0x007e: AGET  (r5 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]) \l0x0080: AGET  (r26 I:??[long, double]) = (r5 I:??[long, double][]), (r12 I:??[int, short, byte, char]) \l0x0082: CONST  (r28 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:94)\l0x0084: ARITH  (r30 I:double) = (r28 I:double) \- (r2 I:double A[D('x' double)]) \l0x0086: ARITH  (r30 I:double) = (r30 I:double) * (r18 I:double A[D('y1' double)]) \l0x0088: ARITH  (r32 I:double) = (r26 I:double A[D('y2' double)]) * (r2 I:double A[D('x' double)]) \l0x008a: ARITH  (r30 I:double) = (r30 I:double) + (r32 I:double) \l0x008c: MOVE  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('n' int)]) \l0x008d: ARITH  (r4 I:double A[D('n' int)]) = (r16 I:double A[D('py' double)]) \- (r30 I:double) \l0x008f: ARITH  (r28 I:double) = (r28 I:double) \- (r2 I:double A[D('x' double)])  (LINE:95)\l0x0091: ARITH  (r28 I:double) = (r28 I:double) * (r22 I:double A[D('x1' double)]) \l0x0093: ARITH  (r15 I:double) = (r24 I:double A[D('x2' double)]) * (r2 I:double A[D('x' double)]) \l0x0095: ARITH  (r28 I:double) = (r28 I:double) + (r15 I:double) \l0x0097: MOVE  (r30 I:??[long, double]) = (r2 I:??[long, double] A[D('x' double)]) \l0x0099: ARITH  (r2 I:double A[D('x' double)]) = (r20 I:double A[D('px' double)]) \- (r28 I:double) \l0x009b: INVOKE  (r15 I:double) = (r4 I:double A[D('py' double)]), (r2 I:double A[D('px' double)]) type: STATIC call: java.lang.Math.hypot(double, double):double A[MD:(double, double):double (c)] (LINE:96)\l0x009f: ARITH  (r6 I:double) = (r6 I:double A[D('sum' double)]) + (r15 I:double) \l}"];
Node_25 [shape=record,label="{25\:\ 0x00a0|RETURN\l|0x00a0: RETURN  (r6 I:double A[D('sum' double)])  (LINE:98)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0055|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0055|RETURN\l|0x0055: RETURN  (r6 I:double A[D('sum' double)])  (LINE:84)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0047|0x0047: MOVE  (r20 I:??[long, double] A[D('px' double)]) = (r14 I:??[long, double] A[D('px' double)])  (LINE:78)\l}"];
Node_31 [shape=record,label="{31\:\ 0x00a7|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x00a7|RETURN\l|0x00a7: CONST  (r1 I:??[long, double] A[D('i' int)]) = (0 ??[long, double])  (LINE:101)\l0x00a9: RETURN  (r1 I:double) \l}"];
MethodNode[shape=record,label="{private double androidx.constraintlayout.core.motion.utils.LinearCurveFit.getLength2D((r34 'this' I:androidx.constraintlayout.core.motion.utils.LinearCurveFit A[IMMUTABLE_TYPE, THIS]), (r35 I:double A[D('t' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0017 \-\> B:1:?, CROSS_EDGE: B:11:0x0022 \-\> B:1:?, CROSS_EDGE: B:21:0x0055 \-\> B:1:?, CROSS_EDGE: B:25:0x00a0 \-\> B:1:?, BACK_EDGE: B:26:0x00a1 \-\> B:13:0x002a, CROSS_EDGE: B:18:0x0047 \-\> B:19:0x0049, CROSS_EDGE: B:28:0x00a9 \-\> B:1:?\lDebug Info:\l  0x0034\-0x003f: r14 'px' D\l  0x003f\-0x0047: r20 'px' D\l  0x0047\-0x0049: r14 'px' D\l  0x0010\-0x008d: r4 'n' I\l  0x0039\-0x008f: r16 'py' D\l  0x006b\-0x0099: r2 'x' D\l  0x0049\-0x009b: r20 'px' D\l  0x009b\-0x00a1: r2 'px' D\l  0x008d\-0x00a1: r12 'n' I\l  0x0066\-0x00a1: r13 'h' D\l  0x007c\-0x00a1: r18 'y1' D\l  0x0071\-0x00a1: r22 'x1' D\l  0x0077\-0x00a1: r24 'x2' D\l  0x0082\-0x00a1: r26 'y2' D\l  0x0099\-0x00a1: r30 'x' D\l  0x008f\-0x00a1: r4 'py' D\l  0x00a1\-0x00a2: r4 'n' I\l  0x00a1\-0x00a2: r16 'py' D\l  0x00a1\-0x00a2: r20 'px' D\l  0x002a\-0x00a7: r1 'i' I\l  0x00a2\-0x00a7: r12 'n' I\l  0x00a7\-0x00a9: r4 'n' I\l  0x0025\-0x00a9: r6 'sum' D\l  0x0027\-0x00a9: r8 'last_x' D\l  0x0029\-0x00a9: r10 'last_y' D\l  \-1 \-0x00a9: r35 't' D\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_31;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_29[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_26;
Node_23 -> Node_30[style=dashed];
Node_26 -> Node_13;
Node_30 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_1;
Node_29 -> Node_21;
Node_21 -> Node_1;
Node_18 -> Node_19;
Node_31 -> Node_27;
Node_27 -> Node_1;
}

