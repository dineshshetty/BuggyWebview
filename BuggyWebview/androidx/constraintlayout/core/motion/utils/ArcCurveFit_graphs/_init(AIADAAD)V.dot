digraph "CFG forandroidx.constraintlayout.core.motion.utils.ArcCurveFit.\<init\>([I[D[[D)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r22.mExtrapolate = true\lr22.mTime = r24\lr22.mArcs = new androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc[r24.length \- 1]\lr3 = 1\lr4 = 1\lr5 = 0\l}"];
Node_3 [shape=record,label="{3\:\ 0x0015|LOOP_START\lLOOP:0: B:3:0x0015\-\>B:15:0x002f\lPHI: r3 r4 r5 \l  PHI: (r3v4 'mode' int) = (r3v3 'mode' int), (r3v8 'mode' int) binds: [B:2:0x0000, B:15:0x002f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v1 'last' int) = (r4v0 'last' int), (r4v4 'last' int) binds: [B:2:0x0000, B:15:0x002f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 'i' int) = (r5v0 'i' int), (r5v2 'i' int) binds: [B:2:0x0000, B:15:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|androidx.constraintlayout.core.motion.utils.ArcCurveFit$Arc[] r6 = r22.mArcs\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|if (r5 \>= r6.length) goto L18\l}"];
Node_5 [shape=record,label="{5\:\ 0x001a|r8 = 2\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|switch(r23[r5]) \{\l    case 0: goto L15;\l    case 1: goto L13;\l    case 2: goto L11;\l    case 3: goto L6;\l    default: goto L17;\l\}\l}"];
Node_8 [shape=record,label="{8\:\ 0x0021|if (r4 != 1) goto L7\l}"];
Node_10 [shape=record,label="{10\:\ 0x0024|r8 = 1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0025|PHI: r8 \l  PHI: (r8v3 int) = (r8v0 int), (r8v4 int) binds: [B:8:0x0021, B:10:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|r3 = r8\lr4 = r3\l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|LOOP_END\lLOOP:0: B:3:0x0015\-\>B:15:0x002f\lPHI: r3 r4 \l  PHI: (r3v8 'mode' int) = (r3v4 'mode' int), (r3v5 'mode' int), (r3v6 'mode' int), (r3v7 'mode' int), (r3v9 'mode' int) binds: [B:22:0x002f, B:18:0x002f, B:21:0x002f, B:20:0x002f, B:19:0x002f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'last' int) = (r4v1 'last' int), (r4v1 'last' int), (r4v2 'last' int), (r4v3 'last' int), (r4v5 'last' int) binds: [B:22:0x002f, B:18:0x002f, B:21:0x002f, B:20:0x002f, B:19:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|r8 = r3\lr6[r5] = new androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc(r8, r24[r5], r24[r5 + 1], r25[r5][0], r25[r5][1], r25[r5 + 1][0], r25[r5 + 1][1])\lint r5 = r5 + 1\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|r3 = 2\lr4 = 2\l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|r3 = 1\lr4 = 1\l}"];
Node_21 [shape=record,label="{21\:\ 0x002f|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|r3 = 3\l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002f|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0057|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.ArcCurveFit.\<init\>((r22v0 'this' androidx.constraintlayout.core.motion.utils.ArcCurveFit A[IMMUTABLE_TYPE, THIS]), (r23v0 'arcModes' int[] A[D('arcModes' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 'time' double[] A[D('time' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r25v0 'y' double[][] A[D('y' double[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:15:0x002f \-\> B:3:0x0015, CROSS_EDGE: B:8:0x0021 \-\> B:11:0x0025, CROSS_EDGE: B:12:0x0028 \-\> B:15:0x002f, CROSS_EDGE: B:13:0x002b \-\> B:15:0x002f, CROSS_EDGE: B:14:0x002e \-\> B:15:0x002f, CROSS_EDGE: B:6:0x001d \-\> B:15:0x002f\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_17;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_12;
Node_6 -> Node_13;
Node_6 -> Node_14;
Node_6 -> Node_22;
Node_8 -> Node_10;
Node_8 -> Node_11[style=dashed];
Node_10 -> Node_11;
Node_11 -> Node_19;
Node_19 -> Node_15;
Node_15 -> Node_3;
Node_12 -> Node_20;
Node_20 -> Node_15;
Node_13 -> Node_21;
Node_21 -> Node_15;
Node_14 -> Node_18;
Node_18 -> Node_15;
Node_22 -> Node_15;
Node_17 -> Node_16;
Node_16 -> Node_1;
}

