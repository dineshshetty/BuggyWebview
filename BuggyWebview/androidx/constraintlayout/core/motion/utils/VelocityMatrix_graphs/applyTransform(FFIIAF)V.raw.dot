digraph "CFG forandroidx.constraintlayout.core.motion.utils.VelocityMatrix.applyTransform(FFII[F)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY])  (LINE:97)\l0x0002: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('width' int)]) \l0x0004: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('height' int)]) \l0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: AGET  (r4 I:??[int, float, short, byte, char]) = (r21 I:??[int, float][] A[D('mAnchorDpDt' float[])]), (r3 I:??[int, short, byte, char]) \l0x0009: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:98)\l0x000a: AGET  (r6 I:??[int, float, short, byte, char]) = (r21 I:??[int, float][] A[D('mAnchorDpDt' float[])]), (r5 I:??[int, short, byte, char]) \l0x000c: CONST  (r7 I:??[int, float, short, byte, char]) = (1056964608(0x3f000000, float:0.5) ??[int, float, short, byte, char])  (LINE:99)\l0x000e: ARITH  (r8 I:float) = (r17 I:float A[D('locationX' float)]) \- (r7 I:float) \l0x0010: CONST  (r9 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char]) \l0x0012: ARITH  (r8 I:float) = (r8 I:float) * (r9 I:float) \l0x0014: ARITH  (r7 I:float) = (r18 I:float A[D('locationY' float)]) \- (r7 I:float)  (LINE:100)\l0x0016: ARITH  (r7 I:float) = (r7 I:float) * (r9 I:float) \l0x0018: IGET  (r9 I:float) = (r0 I:androidx.constraintlayout.core.motion.utils.VelocityMatrix) androidx.constraintlayout.core.motion.utils.VelocityMatrix.mDTranslateX float  (LINE:101)\l0x001a: ARITH  (r4 I:float) = (r4 I:float A[D('dx' float)]) + (r9 I:float) \l0x001b: IGET  (r9 I:float) = (r0 I:androidx.constraintlayout.core.motion.utils.VelocityMatrix) androidx.constraintlayout.core.motion.utils.VelocityMatrix.mDTranslateY float  (LINE:102)\l0x001d: ARITH  (r6 I:float) = (r6 I:float A[D('dy' float)]) + (r9 I:float) \l0x001e: IGET  (r9 I:float) = (r0 I:androidx.constraintlayout.core.motion.utils.VelocityMatrix) androidx.constraintlayout.core.motion.utils.VelocityMatrix.mDScaleX float  (LINE:103)\l0x0020: ARITH  (r9 I:float) = (r9 I:float) * (r8 I:float A[D('offx' float)]) \l0x0022: ARITH  (r4 I:float) = (r4 I:float A[D('dx' float)]) + (r9 I:float) \l0x0023: IGET  (r9 I:float) = (r0 I:androidx.constraintlayout.core.motion.utils.VelocityMatrix) androidx.constraintlayout.core.motion.utils.VelocityMatrix.mDScaleY float  (LINE:104)\l0x0025: ARITH  (r9 I:float) = (r9 I:float) * (r7 I:float A[D('offy' float)]) \l0x0027: ARITH  (r6 I:float) = (r6 I:float A[D('dy' float)]) + (r9 I:float) \l0x0028: IGET  (r9 I:float) = (r0 I:androidx.constraintlayout.core.motion.utils.VelocityMatrix) androidx.constraintlayout.core.motion.utils.VelocityMatrix.mRotate float  (LINE:105)\l0x002a: CAST (r9 I:double) = (double) (r9 I:float) \l0x002b: INVOKE  (r9 I:double) = (r9 I:double) type: STATIC call: java.lang.Math.toRadians(double):double A[MD:(double):double (c)]\l0x002f: CAST (r9 I:float) = (float) (r9 I:double) \l0x0030: IGET  (r10 I:float) = (r0 I:androidx.constraintlayout.core.motion.utils.VelocityMatrix) androidx.constraintlayout.core.motion.utils.VelocityMatrix.mDRotate float  (LINE:106)\l0x0032: CAST (r10 I:double) = (double) (r10 I:float) \l0x0033: INVOKE  (r10 I:double) = (r10 I:double) type: STATIC call: java.lang.Math.toRadians(double):double A[MD:(double):double (c)]\l0x0037: CAST (r10 I:float) = (float) (r10 I:double) \l0x0038: NEG  (r11 I:int) = (r1 I:int)  (LINE:107)\l0x0039: CAST (r11 I:float) = (float) (r11 I:int) \l0x003a: ARITH  (r11 I:float) = (r11 I:float) * (r8 I:float A[D('offx' float)]) \l0x003c: CAST (r11 I:double) = (double) (r11 I:float) \l0x003d: CAST (r13 I:double) = (double) (r9 I:float A[D('r' float)]) \l0x003e: INVOKE  (r13 I:double) = (r13 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)]\l0x0042: ARITH  (r11 I:double) = (r11 I:double) * (r13 I:double) \l0x0044: CAST (r13 I:float) = (float) (r2 I:int) \l0x0045: ARITH  (r13 I:float) = (r13 I:float) * (r7 I:float A[D('offy' float)]) \l0x0047: CAST (r13 I:double) = (double) (r13 I:float) \l0x0048: MOVE  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('dy' float)]) \l0x0049: CAST (r5 I:double) = (double) (r9 I:float A[D('r' float)]) \l0x004a: INVOKE  (r5 I:double) = (r5 I:double) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)]\l0x004e: ARITH  (r13 I:double) = (r13 I:double) * (r5 I:double) \l0x0050: ARITH  (r11 I:double) = (r11 I:double) \- (r13 I:double) \l0x0051: CAST (r5 I:float) = (float) (r11 I:double) \l0x0052: ARITH  (r5 I:float) = (r5 I:float) * (r10 I:float A[D('dr' float)]) \l0x0054: ARITH  (r4 I:float) = (r4 I:float A[D('dx' float)]) + (r5 I:float) \l0x0055: CAST (r5 I:float) = (float) (r1 I:int)  (LINE:108)\l0x0056: ARITH  (r5 I:float) = (r5 I:float) * (r8 I:float A[D('offx' float)]) \l0x0058: CAST (r5 I:double) = (double) (r5 I:float) \l0x0059: CAST (r11 I:double) = (double) (r9 I:float A[D('r' float)]) \l0x005a: INVOKE  (r11 I:double) = (r11 I:double) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)]\l0x005e: ARITH  (r5 I:double) = (r5 I:double) * (r11 I:double) \l0x0060: CAST (r11 I:float) = (float) (r2 I:int) \l0x0061: ARITH  (r11 I:float) = (r11 I:float) * (r7 I:float A[D('offy' float)]) \l0x0063: CAST (r11 I:double) = (double) (r11 I:float) \l0x0064: CAST (r13 I:double) = (double) (r9 I:float A[D('r' float)]) \l0x0065: INVOKE  (r13 I:double) = (r13 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)]\l0x0069: ARITH  (r11 I:double) = (r11 I:double) * (r13 I:double) \l0x006b: ARITH  (r5 I:double) = (r5 I:double) \- (r11 I:double) \l0x006c: CAST (r5 I:float) = (float) (r5 I:double) \l0x006d: ARITH  (r5 I:float) = (r5 I:float) * (r10 I:float A[D('dr' float)]) \l0x006f: ARITH  (r6 I:float) = (r15 I:float A[D('dy' float)]) + (r5 I:float) \l0x0071: APUT  \l  (r21 I:??[int, float][] A[D('mAnchorDpDt' float[])])\l  (r3 I:??[int, short, byte, char])\l  (r4 I:??[int, float, short, byte, char] A[D('dx' float)])\l  (LINE:109)\l0x0073: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:110)\l0x0074: APUT  \l  (r21 I:??[int, float][] A[D('mAnchorDpDt' float[])])\l  (r3 I:??[int, short, byte, char])\l  (r6 I:??[int, float, short, byte, char] A[D('dy' float)])\l \l}"];
Node_7 [shape=record,label="{7\:\ 0x0076|RETURN\l|0x0076: RETURN    (LINE:111)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.VelocityMatrix.applyTransform((r16 'this' I:androidx.constraintlayout.core.motion.utils.VelocityMatrix A[IMMUTABLE_TYPE, THIS]), (r17 I:float A[D('locationX' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:float A[D('locationY' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:int A[D('width' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21 I:float[] A[D('mAnchorDpDt' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0049: r6 'dy' F\l  0x0049\-0x0071: r15 'dy' F\l  0x0009\-0x0076: r4 'dx' F\l  0x0071\-0x0076: r6 'dy' F\l  0x0018\-0x0076: r7 'offy' F\l  0x0014\-0x0076: r8 'offx' F\l  0x0030\-0x0076: r9 'r' F\l  0x0038\-0x0076: r10 'dr' F\l  \-1 \-0x0076: r17 'locationX' F\l  \-1 \-0x0076: r18 'locationY' F\l  \-1 \-0x0076: r19 'width' I\l  \-1 \-0x0076: r20 'height' I\l  \-1 \-0x0076: r21 'mAnchorDpDt' [F\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

