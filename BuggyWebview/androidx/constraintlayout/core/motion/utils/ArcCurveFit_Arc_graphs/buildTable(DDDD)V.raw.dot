digraph "CFG forandroidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.buildTable(DDDD)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r27 I:??[OBJECT, ARRAY])  (LINE:397)\l0x0002: ARITH  (r1 I:double) = (r32 I:double A[D('x2' double)]) \- (r28 I:double A[D('x1' double)]) \l0x0004: ARITH  (r3 I:double) = (r30 I:double A[D('y1' double)]) \- (r34 I:double A[D('y2' double)])  (LINE:398)\l0x0006: CONST  (r5 I:??[long, double]) = (0 ??[long, double])  (LINE:399)\l0x0008: CONST  (r7 I:??[long, double]) = (0 ??[long, double]) \l0x000a: CONST  (r9 I:??[long, double]) = (0 ??[long, double])  (LINE:400)\l0x000c: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:401)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|LOOP_START\lLOOP:0: B:3:0x000d\-\>B:9:0x0049\l|0x000d: SGET  (r12 I:double[]) =  androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.ourPercent double[] \l0x000f: ARRAY_LENGTH  (r13 I:int) = (r12 I:??[]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: IF  (r11 I:??[int, byte, short, char] A[D('i' int)]) \>= (r13 I:??[int, byte, short, char])  \-\> B:26:0x0055 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r13 I:??[long, double]) = (4636033603912859648(0x4056800000000000, double:90.0) ??[long, double])  (LINE:402)\l0x0017: MOVE  (r15 I:??[long, double]) = (r9 I:??[long, double] A[D('dist' double)]) \l0x0018: CAST (r9 I:double A[D('dist' double)]) = (double) (r11 I:int A[D('i' int)]) \l0x0019: ARITH  (r9 I:double) = (r9 I:double) * (r13 I:double) \l0x001b: ARRAY_LENGTH  (r12 I:int) = (r12 I:??[]) \l0x001c: ARITH  (r12 I:int) = (r12 I:int) + (\-1 int) \l0x001e: CAST (r12 I:double) = (double) (r12 I:int) \l0x001f: ARITH  (r9 I:double) = (r9 I:double) \/ (r12 I:double) \l0x0020: INVOKE  (r9 I:double) = (r9 I:double) type: STATIC call: java.lang.Math.toRadians(double):double A[MD:(double):double (c)]\l0x0024: INVOKE  (r12 I:double) = (r9 I:double A[D('angle' double)]) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)] (LINE:403)\l0x0028: INVOKE  (r17 I:double) = (r9 I:double A[D('angle' double)]) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)] (LINE:404)\l0x002c: ARITH  (r19 I:double) = (r1 I:double A[D('a' double)]) * (r12 I:double A[D('s' double)])  (LINE:405)\l0x002e: ARITH  (r21 I:double) = (r3 I:double A[D('b' double)]) * (r17 I:double A[D('c' double)])  (LINE:406)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0030|0x0030: IF  (r11 I:??[int, byte, short, char] A[D('i' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:8:0x0045  (LINE:407)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0032|0x0032: MOVE  (r23 I:??[long, double]) = (r1 I:??[long, double] A[D('a' double)])  (LINE:408)\l0x0034: ARITH  (r1 I:double A[D('a' double)]) = (r19 I:double A[D('px' double)]) \- (r5 I:double A[D('lx' double)]) \l0x0036: MOVE  (r25 I:??[long, double]) = (r3 I:??[long, double] A[D('b' double)]) \l0x0038: ARITH  (r3 I:double A[D('b' double)]) = (r21 I:double A[D('py' double)]) \- (r7 I:double A[D('ly' double)]) \l0x003a: INVOKE  (r1 I:double) = (r1 I:double), (r3 I:double) type: STATIC call: java.lang.Math.hypot(double, double):double A[MD:(double, double):double (c)]\l0x003e: ARITH  (r1 I:double) = (r1 I:double) + (r15 I:double A[D('dist' double)]) \l0x003f: SGET  (r3 I:double[]) =  androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.ourPercent double[]  (LINE:409)\l0x0041: APUT  \l  (r3 I:??[long, double][])\l  (r11 I:??[int, short, byte, char] A[D('i' int)])\l  (r1 I:??[long, double] A[D('dist' double)])\l \l0x0043: MOVE  (r15 I:??[long, double]) = (r1 I:??[long, double] A[D('dist' double)]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0049|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0049|LOOP_END\lLOOP:0: B:3:0x000d\-\>B:9:0x0049\l|0x0049: MOVE  (r5 I:??[long, double] A[D('lx' double)]) = (r19 I:??[long, double] A[D('px' double)])  (LINE:411)\l0x004b: MOVE  (r7 I:??[long, double] A[D('ly' double)]) = (r21 I:??[long, double] A[D('py' double)])  (LINE:412)\l0x004d: ARITH  (r11 I:int) = (r11 I:int A[D('i' int)]) + (1 int)  (LINE:401)\l0x004f: MOVE  (r9 I:??[long, double]) = (r15 I:??[long, double] A[D('dist' double)]) \l0x0050: MOVE  (r1 I:??[long, double]) = (r23 I:??[long, double] A[D('a' double)]) \l0x0052: MOVE  (r3 I:??[long, double]) = (r25 I:??[long, double] A[D('b' double)]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0045|0x0045: MOVE  (r23 I:??[long, double] A[D('a' double)]) = (r1 I:??[long, double] A[D('a' double)])  (LINE:407)\l0x0047: MOVE  (r25 I:??[long, double]) = (r3 I:??[long, double] A[D('b' double)]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0049|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0055|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0055|0x0055: MOVE  (r23 I:??[long, double] A[D('a' double)]) = (r1 I:??[long, double] A[D('a' double)]) \l0x0057: MOVE  (r25 I:??[long, double]) = (r3 I:??[long, double] A[D('b' double)]) \l0x0059: MOVE  (r15 I:??[long, double]) = (r9 I:??[long, double] A[D('dist' double)]) \l0x005b: IPUT  (r9 I:double A[D('dist' double)]), (r0 I:androidx.constraintlayout.core.motion.utils.ArcCurveFit$Arc) androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.mArcDistance double \l0x005d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:417)\l}"];
Node_11 [shape=record,label="{11\:\ 0x005e|LOOP_START\lLOOP:1: B:11:0x005e\-\>B:13:0x0063\l|0x005e: SGET  (r2 I:double[]) =  androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.ourPercent double[] \l0x0060: ARRAY_LENGTH  (r3 I:int) = (r2 I:??[]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0061|0x0061: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:29:0x006b \l}"];
Node_13 [shape=record,label="{13\:\ 0x0063|LOOP_END\lLOOP:1: B:11:0x005e\-\>B:13:0x0063\l|0x0063: AGET  (r3 I:??[long, double]) = (r2 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:418)\l0x0065: ARITH  (r3 I:double) = (r3 I:double) \/ (r9 I:double A[D('dist' double)]) \l0x0066: APUT  (r2 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[long, double]) \l0x0068: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:417)\l}"];
Node_29 [shape=record,label="{29\:\ 0x006b|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x006b|0x006b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:420)\l}"];
Node_15 [shape=record,label="{15\:\ 0x006c|LOOP_START\lLOOP:2: B:15:0x006c\-\>B:24:0x00b9\l|0x006c: IGET  (r2 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.ArcCurveFit$Arc) androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.mLut double[] \l0x006e: ARRAY_LENGTH  (r3 I:int) = (r2 I:??[]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x006f|0x006f: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:30:0x00bc \l}"];
Node_17 [shape=record,label="{17\:\ 0x0071|0x0071: CAST (r3 I:double) = (double) (r1 I:int A[D('i' int)])  (LINE:421)\l0x0072: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[]) \l0x0073: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0075: CAST (r11 I:double) = (double) (r2 I:int) \l0x0076: ARITH  (r3 I:double) = (r3 I:double) \/ (r11 I:double) \l0x0077: SGET  (r2 I:double[]) =  androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.ourPercent double[]  (LINE:422)\l0x0079: INVOKE  (r2 I:int) = (r2 I:double[]), (r3 I:double A[D('pos' double)]) type: STATIC call: java.util.Arrays.binarySearch(double[], double):int A[MD:(double[], double):int (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x007d|0x007d: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:20:0x008c  (LINE:423)\l}"];
Node_19 [shape=record,label="{19\:\ 0x007f|0x007f: IGET  (r11 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.ArcCurveFit$Arc) androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.mLut double[]  (LINE:424)\l0x0081: CAST (r12 I:double) = (double) (r2 I:int A[D('index' int)]) \l0x0082: SGET  (r14 I:double[]) =  androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.ourPercent double[] \l0x0084: ARRAY_LENGTH  (r14 I:int) = (r14 I:??[]) \l0x0085: ARITH  (r14 I:int) = (r14 I:int) + (\-1 int) \l0x0087: CAST (r14 I:double) = (double) (r14 I:int) \l0x0088: ARITH  (r12 I:double) = (r12 I:double) \/ (r14 I:double) \l0x0089: APUT  (r11 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r12 I:??[long, double]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00b9|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x00b9|LOOP_END\lLOOP:2: B:15:0x006c\-\>B:24:0x00b9\l|0x00b9: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:420)\l}"];
Node_20 [shape=record,label="{20\:\ 0x008c|0x008c: CONST  (r11 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:425)\l}"];
Node_21 [shape=record,label="{21\:\ 0x008d|0x008d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0096 \l}"];
Node_22 [shape=record,label="{22\:\ 0x008f|0x008f: IGET  (r11 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.ArcCurveFit$Arc) androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.mLut double[]  (LINE:426)\l0x0091: CONST  (r12 I:??[long, double]) = (0 ??[long, double]) \l0x0093: APUT  (r11 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r12 I:??[long, double]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x00b9|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0096|0x0096: NEG  (r11 I:int) = (r2 I:int A[D('index' int)])  (LINE:428)\l0x0097: ARITH  (r11 I:int) = (r11 I:int) + (\-2 int) \l0x0099: NEG  (r12 I:int) = (r2 I:int A[D('index' int)])  (LINE:429)\l0x009a: ARITH  (r12 I:int) = (r12 I:int) + (\-1 int) \l0x009c: CAST (r13 I:double) = (double) (r11 I:int A[D('p1' int)])  (LINE:431)\l0x009d: SGET  (r15 I:double[]) =  androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.ourPercent double[] \l0x009f: AGET  (r16 I:??[long, double]) = (r15 I:??[long, double][]), (r11 I:??[int, short, byte, char] A[D('p1' int)]) \l0x00a1: ARITH  (r16 I:double) = (r3 I:double A[D('pos' double)]) \- (r16 I:double) \l0x00a3: AGET  (r18 I:??[long, double]) = (r15 I:??[long, double][]), (r12 I:??[int, short, byte, char] A[D('p2' int)]) \l0x00a5: AGET  (r20 I:??[long, double]) = (r15 I:??[long, double][]), (r11 I:??[int, short, byte, char] A[D('p1' int)]) \l0x00a7: ARITH  (r18 I:double) = (r18 I:double) \- (r20 I:double) \l0x00a9: ARITH  (r16 I:double) = (r16 I:double) \/ (r18 I:double) \l0x00ab: ARITH  (r13 I:double) = (r13 I:double) + (r16 I:double) \l0x00ad: ARRAY_LENGTH  (r15 I:int) = (r15 I:??[]) \l0x00ae: ARITH  (r15 I:int) = (r15 I:int) + (\-1 int) \l0x00b0: MOVE  (r16 I:??[long, double]) = (r3 I:??[long, double] A[D('pos' double)]) \l0x00b2: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l0x00b3: CAST (r2 I:double A[D('index' int)]) = (double) (r15 I:int) \l0x00b4: ARITH  (r13 I:double) = (r13 I:double) \/ (r2 I:double) \l0x00b5: IGET  (r2 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.ArcCurveFit$Arc) androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.mLut double[]  (LINE:433)\l0x00b7: APUT  (r2 I:??[long, double][]), (r1 I:??[int, short, byte, char] A[D('i' int)]), (r13 I:??[long, double] A[D('ans' double)]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x00b9|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x00bc|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x00bc|RETURN\l|0x00bc: RETURN    (LINE:436)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.core.motion.utils.ArcCurveFit.Arc.buildTable((r27 'this' I:androidx.constraintlayout.core.motion.utils.ArcCurveFit$Arc A[IMMUTABLE_TYPE, THIS]), (r28 I:double A[D('x1' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r30 I:double A[D('y1' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r32 I:double A[D('x2' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r34 I:double A[D('y2' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x0049 \-\> B:3:0x000d, CROSS_EDGE: B:8:0x0045 \-\> B:9:0x0049, BACK_EDGE: B:13:0x0063 \-\> B:11:0x005e, BACK_EDGE: B:24:0x00b9 \-\> B:15:0x006c, CROSS_EDGE: B:22:0x008f \-\> B:24:0x00b9, CROSS_EDGE: B:23:0x0096 \-\> B:24:0x00b9\lDebug Info:\l  0x000c\-0x0018: r9 'dist' D\l  0x0004\-0x0034: r1 'a' D\l  0x0006\-0x0038: r3 'b' D\l  0x0018\-0x003f: r15 'dist' D\l  0x0034\-0x0045: r23 'a' D\l  0x0038\-0x0045: r25 'b' D\l  0x003f\-0x0045: r1 'dist' D\l  0x0045\-0x0049: r1 'a' D\l  0x0045\-0x0049: r3 'b' D\l  0x0024\-0x004d: r9 'angle' D\l  0x0028\-0x004d: r12 's' D\l  0x002c\-0x004d: r17 'c' D\l  0x002e\-0x004d: r19 'px' D\l  0x0030\-0x004d: r21 'py' D\l  0x0045\-0x0055: r15 'dist' D\l  0x0049\-0x0055: r23 'a' D\l  0x0049\-0x0055: r25 'b' D\l  0x0055\-0x005a: r1 'a' D\l  0x0055\-0x005a: r3 'b' D\l  0x0055\-0x005a: r9 'dist' D\l  0x000d\-0x005a: r11 'i' I\l  0x005a\-0x005b: r15 'dist' D\l  0x005e\-0x006b: r1 'i' I\l  0x007d\-0x00b3: r2 'index' I\l  0x0077\-0x00b3: r3 'pos' D\l  0x00b3\-0x00b9: r4 'index' I\l  0x0099\-0x00b9: r11 'p1' I\l  0x009c\-0x00b9: r12 'p2' I\l  0x00b5\-0x00b9: r13 'ans' D\l  0x00b3\-0x00b9: r16 'pos' D\l  0x006c\-0x00bc: r1 'i' I\l  0x0008\-0x00bc: r5 'lx' D\l  0x000a\-0x00bc: r7 'ly' D\l  0x005b\-0x00bc: r9 'dist' D\l  0x005a\-0x00bc: r23 'a' D\l  0x005a\-0x00bc: r25 'b' D\l  \-1 \-0x00bc: r28 'x1' D\l  \-1 \-0x00bc: r30 'y1' D\l  \-1 \-0x00bc: r32 'x2' D\l  \-1 \-0x00bc: r34 'y2' D\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_26;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_28;
Node_28 -> Node_9;
Node_9 -> Node_3;
Node_8 -> Node_27;
Node_27 -> Node_9;
Node_26 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_29;
Node_13 -> Node_11;
Node_29 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_30;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_32;
Node_32 -> Node_24;
Node_24 -> Node_15;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_33;
Node_33 -> Node_24;
Node_23 -> Node_31;
Node_31 -> Node_24;
Node_30 -> Node_25;
Node_25 -> Node_1;
}

