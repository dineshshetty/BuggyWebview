digraph "CFG forandroidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.setup(I)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: IGET  (r0 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar) = (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline) androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mConstraintAttributeList androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar  (LINE:242)\l0x0002: INVOKE  (r0 I:int) = (r0 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.KeyFrameArray.CustomVar.size():int A[MD:():int (m)]\l0x0006: IGET  (r1 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar) = (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline) androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mConstraintAttributeList androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar  (LINE:243)\l0x0008: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INVOKE  (r1 I:androidx.constraintlayout.core.motion.CustomVariable) = (r1 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar), (r2 I:int) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.KeyFrameArray.CustomVar.valueAt(int):androidx.constraintlayout.core.motion.CustomVariable A[MD:(int):androidx.constraintlayout.core.motion.CustomVariable (m)]\l0x000d: INVOKE  (r1 I:int) = (r1 I:androidx.constraintlayout.core.motion.CustomVariable) type: VIRTUAL call: androidx.constraintlayout.core.motion.CustomVariable.numberOfInterpolatedValues():int A[MD:():int (m)]\l0x0011: NEW_ARRAY  (r3 I:double[]) = (r0 I:int A[D('size' int), IMMUTABLE_TYPE]) type: double[]  (LINE:244)\l0x0013: NEW_ARRAY  (r4 I:float[]) = (r1 I:int A[D('dimensionality' int), IMMUTABLE_TYPE]) type: float[]  (LINE:245)\l0x0015: IPUT  (r4 I:float[]), (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline) androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mTempValues float[] \l0x0017: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:246)\l0x0018: NEW_ARRAY  (r4 I:int[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x001a: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001b: APUT  \l  (r4 I:??[int, float][])\l  (r5 I:??[int, short, byte, char])\l  (r1 I:??[int, float, short, byte, char] A[D('dimensionality' int)])\l \l0x001d: APUT  (r4 I:??[int, float][]), (r2 I:??[int, short, byte, char]), (r0 I:??[int, float, short, byte, char] A[D('size' int)]) \l0x001f: CONST_CLASS  (r2 I:java.lang.Class\<double\>) =  double.class \l0x0021: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.lang.Class), (r4 I:int[]) type: STATIC call: java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object A[MD:(java.lang.Class\<?\>, int[]):java.lang.Object VARARG throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException (c)]\l0x0025: CHECK_CAST (r2 I:double[][]) = (double[][]) (r2 I:??[OBJECT, ARRAY]) \l0x0027: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:247)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0028|LOOP_START\lLOOP:0: B:16:0x0028\-\>B:21:0x0055\l|0x0028: IF  (r4 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:24:0x0058 \l}"];
Node_17 [shape=record,label="{17\:\ 0x002a|0x002a: IGET  (r5 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar) = (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline) androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mConstraintAttributeList androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar  (LINE:249)\l0x002c: INVOKE  (r5 I:int) = (r5 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar), (r4 I:int A[D('i' int)]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.KeyFrameArray.CustomVar.keyAt(int):int A[MD:(int):int (m)]\l0x0030: IGET  (r6 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar) = (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline) androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mConstraintAttributeList androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar  (LINE:250)\l0x0032: INVOKE  (r6 I:androidx.constraintlayout.core.motion.CustomVariable) = (r6 I:androidx.constraintlayout.core.motion.utils.KeyFrameArray$CustomVar), (r4 I:int A[D('i' int)]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.KeyFrameArray.CustomVar.valueAt(int):androidx.constraintlayout.core.motion.CustomVariable A[MD:(int):androidx.constraintlayout.core.motion.CustomVariable (m)]\l0x0036: CAST (r7 I:double) = (double) (r5 I:int A[D('key' int)])  (LINE:252)\l0x0037: CONST  (r9 I:??[long, double]) = (4576918229304087675(0x3f847ae147ae147b, double:0.01) ??[long, double]) \l0x003c: ARITH  (r7 I:double) = (r7 I:double) * (r9 I:double) \l0x003e: APUT  \l  (r3 I:??[long, double][] A[D('time' double[])])\l  (r4 I:??[int, short, byte, char] A[D('i' int)])\l  (r7 I:??[long, double])\l \l0x0040: IGET  (r7 I:float[]) = (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline) androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mTempValues float[]  (LINE:253)\l0x0042: INVOKE  \l  (r6 I:androidx.constraintlayout.core.motion.CustomVariable A[D('ca' androidx.constraintlayout.core.motion.CustomVariable)])\l  (r7 I:float[])\l type: VIRTUAL call: androidx.constraintlayout.core.motion.CustomVariable.getValuesToInterpolate(float[]):void A[MD:(float[]):void (m)]\l0x0045: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:254)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0046|LOOP_START\lLOOP:1: B:18:0x0046\-\>B:20:0x004b\l|0x0046: IGET  (r8 I:float[]) = (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline) androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mTempValues float[] \l0x0048: ARRAY_LENGTH  (r9 I:int) = (r8 I:??[]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0049|0x0049: IF  (r7 I:??[int, byte, short, char] A[D('k' int)]) \>= (r9 I:??[int, byte, short, char])  \-\> B:25:0x0055 \l}"];
Node_20 [shape=record,label="{20\:\ 0x004b|LOOP_END\lLOOP:1: B:18:0x0046\-\>B:20:0x004b\l|0x004b: AGET  (r9 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][] A[D('values' double[][])]), (r4 I:??[int, short, byte, char] A[D('i' int)])  (LINE:255)\l0x004d: AGET  (r8 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r7 I:??[int, short, byte, char] A[D('k' int)]) \l0x004f: CAST (r10 I:double) = (double) (r8 I:float) \l0x0050: APUT  (r9 I:??[long, double][]), (r7 I:??[int, short, byte, char] A[D('k' int)]), (r10 I:??[long, double]) \l0x0052: ARITH  (r7 I:int) = (r7 I:int A[D('k' int)]) + (1 int)  (LINE:254)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0055|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0055|LOOP_END\lLOOP:0: B:16:0x0028\-\>B:21:0x0055\l|0x0055: ARITH  (r4 I:int) = (r4 I:int A[D('i' int)]) + (1 int)  (LINE:247)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0058|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0058|0x0058: INVOKE  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit) = (r13 I:int A[D('curveType' int)]), (r3 I:double[] A[D('time' double[])]), (r2 I:double[][] A[D('values' double[][])]) type: STATIC call: androidx.constraintlayout.core.motion.utils.CurveFit.get(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit A[MD:(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit (m)] (LINE:259)\l0x005c: IPUT  \l  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit)\l  (r12 I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline)\l androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.mCurveFit androidx.constraintlayout.core.motion.utils.CurveFit \l}"];
Node_23 [shape=record,label="{23\:\ 0x005e|RETURN\l|0x005e: RETURN    (LINE:260)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.SplineSet.CustomSpline.setup((r12 'this' I:androidx.constraintlayout.core.motion.utils.SplineSet$CustomSpline A[IMMUTABLE_TYPE, THIS]), (r13 I:int A[D('curveType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x004b \-\> B:18:0x0046, BACK_EDGE: B:21:0x0055 \-\> B:16:0x0028\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0030\-0x0055: r5 'key' I\l  0x0036\-0x0055: r6 'ca' Landroidx\/constraintlayout\/core\/motion\/CustomVariable;\l  0x0046\-0x0055: r7 'k' I\l  0x0028\-0x0058: r4 'i' I\l  0x0006\-0x005e: r0 'size' I\l  0x0011\-0x005e: r1 'dimensionality' I\l  0x0027\-0x005e: r2 'values' [[D\l  0x0013\-0x005e: r3 'time' [D\l  \-1 \-0x005e: r13 'curveType' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.SplineSet.setup(int):void]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_18;
Node_25 -> Node_21;
Node_21 -> Node_16;
Node_24 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

