digraph "CFG forandroidx.constraintlayout.core.motion.utils.CurveFit.Constant.getSlope(D[D)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:89)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0001|LOOP_START\lLOOP:0: B:11:0x0001\-\>B:13:0x0006\l|0x0001: IGET  (r1 I:double[]) = (r3 I:androidx.constraintlayout.core.motion.utils.CurveFit$Constant) androidx.constraintlayout.core.motion.utils.CurveFit.Constant.mValue double[] \l0x0003: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:15:0x000d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|LOOP_END\lLOOP:0: B:11:0x0001\-\>B:13:0x0006\l|0x0006: CONST  (r1 I:??[long, double]) = (0 ??[long, double])  (LINE:90)\l0x0008: APUT  (r6 I:??[long, double][] A[D('v' double[])]), (r0 I:??[int, short, byte, char] A[D('i' int)]), (r1 I:??[long, double]) \l0x000a: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:89)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|RETURN\l|0x000d: RETURN    (LINE:92)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.CurveFit.Constant.getSlope((r3 'this' I:androidx.constraintlayout.core.motion.utils.CurveFit$Constant A[IMMUTABLE_TYPE, THIS]), (r4 I:double A[D('t' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:double[] A[D('v' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0006 \-\> B:11:0x0001\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000d: r0 'i' I\l  \-1 \-0x000d: r4 't' D\l  \-1 \-0x000d: r6 'v' [D\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.CurveFit.getSlope(double, double[]):void]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

