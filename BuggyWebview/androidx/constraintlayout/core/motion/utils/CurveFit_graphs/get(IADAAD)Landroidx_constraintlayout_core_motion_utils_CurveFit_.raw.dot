digraph "CFG forandroidx.constraintlayout.core.motion.utils.CurveFit.get(I[D[[D)Landroidx\/constraintlayout\/core\/motion\/utils\/CurveFit;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: ARRAY_LENGTH  (r0 I:int) = (r5 I:??[] A[D('time' double[])])  (LINE:32)\l0x0001: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0005 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: CONST  (r4 I:??[int, float, short, byte, char] A[D('type' int)]) = (2 ??[int, float, short, byte, char])  (LINE:33)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|0x0005: SWITCH  (r4 I:?? A[D('type' int)])\l case 0: goto B:22:0x0019\l case 1: goto B:18:0x0008\l case 2: goto B:20:0x000e\l default: goto B:18:0x0008  (LINE:35)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit) =  androidx.constraintlayout.core.motion.utils.LinearCurveFit  (LINE:41)\l0x000a: INVOKE  \l  (r0 I:androidx.constraintlayout.core.motion.utils.LinearCurveFit)\l  (r5 I:double[] A[D('time' double[])])\l  (r6 I:double[][] A[D('y' double[][])])\l type: DIRECT call: androidx.constraintlayout.core.motion.utils.LinearCurveFit.\<init\>(double[], double[][]):void A[MD:(double[], double[][]):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:androidx.constraintlayout.core.motion.utils.CurveFit) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: NEW_INSTANCE  (r0 I:androidx.constraintlayout.core.motion.utils.CurveFit$Constant) =  androidx.constraintlayout.core.motion.utils.CurveFit$Constant  (LINE:39)\l0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: AGET  (r2 I:??[long, double]) = (r5 I:??[long, double][] A[D('time' double[])]), (r1 I:??[int, short, byte, char]) \l0x0013: AGET  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][] A[D('y' double[][])]), (r1 I:??[int, short, byte, char]) \l0x0015: INVOKE  (r0 I:androidx.constraintlayout.core.motion.utils.CurveFit$Constant), (r2 I:double), (r1 I:double[]) type: DIRECT call: androidx.constraintlayout.core.motion.utils.CurveFit.Constant.\<init\>(double, double[]):void A[MD:(double, double[]):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:androidx.constraintlayout.core.motion.utils.CurveFit) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|0x0019: NEW_INSTANCE  (r0 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit) =  androidx.constraintlayout.core.motion.utils.MonotonicCurveFit  (LINE:37)\l0x001b: INVOKE  \l  (r0 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit)\l  (r5 I:double[] A[D('time' double[])])\l  (r6 I:double[][] A[D('y' double[][])])\l type: DIRECT call: androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.\<init\>(double[], double[][]):void A[MD:(double[], double[][]):void (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|RETURN\l|0x001e: RETURN  (r0 I:androidx.constraintlayout.core.motion.utils.CurveFit) \l}"];
MethodNode[shape=record,label="{public static androidx.constraintlayout.core.motion.utils.CurveFit androidx.constraintlayout.core.motion.utils.CurveFit.get((r4 I:int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:double[] A[D('time' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:double[][] A[D('y' double[][]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0018 \-\> B:13:?, CROSS_EDGE: B:23:0x001e \-\> B:13:?, CROSS_EDGE: B:15:0x0002 \-\> B:17:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0029: r4 'type' I\l  \-1 \-0x0029: r5 'time' [D\l  \-1 \-0x0029: r6 'y' [[D\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_20;
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

