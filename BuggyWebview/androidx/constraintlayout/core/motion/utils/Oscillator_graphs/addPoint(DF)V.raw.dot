digraph "CFG forandroidx.constraintlayout.core.motion.utils.Oscillator.addPoint(DF)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:float[]) = (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPeriod float[]  (LINE:61)\l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) + (1 int) \l0x0005: IGET  (r1 I:double[]) = (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[]  (LINE:62)\l0x0007: INVOKE  (r1 I:int) = (r1 I:double[]), (r6 I:double A[D('position' double)]) type: STATIC call: java.util.Arrays.binarySearch(double[], double):int A[MD:(double[], double):int (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x000b|0x000b: IF  (r1 I:??[int, byte, short, char] A[D('j' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:12:0x0010  (LINE:63)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|0x000d: NEG  (r2 I:int) = (r1 I:int A[D('j' int)])  (LINE:64)\l0x000e: ARITH  (r1 I:int A[D('j' int)]) = (r2 I:int) + (\-1 int) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|0x0010: IGET  (r2 I:double[]) = (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[]  (LINE:66)\l0x0012: INVOKE  (r2 I:double[]) = (r2 I:double[]), (r0 I:int A[D('len' int)]) type: STATIC call: java.util.Arrays.copyOf(double[], int):double[] A[MD:(double[], int):double[] (c)]\l0x0016: IPUT  (r2 I:double[]), (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[] \l0x0018: IGET  (r2 I:float[]) = (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPeriod float[]  (LINE:67)\l0x001a: INVOKE  (r2 I:float[]) = (r2 I:float[]), (r0 I:int A[D('len' int)]) type: STATIC call: java.util.Arrays.copyOf(float[], int):float[] A[MD:(float[], int):float[] (c)]\l0x001e: IPUT  (r2 I:float[]), (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPeriod float[] \l0x0020: NEW_ARRAY  (r2 I:double[]) = (r0 I:int A[D('len' int), IMMUTABLE_TYPE]) type: double[]  (LINE:68)\l0x0022: IPUT  (r2 I:double[]), (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mArea double[] \l0x0024: IGET  (r2 I:double[]) = (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[]  (LINE:69)\l0x0026: ARITH  (r3 I:int) = (r1 I:int A[D('j' int)]) + (1 int) \l0x0028: ARITH  (r4 I:int) = (r0 I:int A[D('len' int)]) \- (r1 I:int A[D('j' int)]) \l0x002a: ARITH  (r4 I:int) = (r4 I:int) + (\-1 int) \l0x002c: INVOKE  (r2 I:java.lang.Object), (r1 I:int A[D('j' int)]), (r2 I:java.lang.Object), (r3 I:int), (r4 I:int) type: STATIC call: java.lang.System.arraycopy(java.lang.Object, int, java.lang.Object, int, int):void A[MD:(java.lang.Object, int, java.lang.Object, int, int):void (c)]\l0x002f: IGET  (r2 I:double[]) = (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[]  (LINE:70)\l0x0031: APUT  \l  (r2 I:??[long, double][])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l  (r6 I:??[long, double] A[D('position' double)])\l \l0x0033: IGET  (r2 I:float[]) = (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPeriod float[]  (LINE:71)\l0x0035: APUT  \l  (r2 I:??[int, float][])\l  (r1 I:??[int, short, byte, char] A[D('j' int)])\l  (r8 I:??[int, float, short, byte, char] A[D('period' float)])\l \l0x0037: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:72)\l0x0038: IPUT  (r2 I:boolean), (r5 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mNormalized boolean \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|RETURN\l|0x003a: RETURN    (LINE:73)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.Oscillator.addPoint((r5 'this' I:androidx.constraintlayout.core.motion.utils.Oscillator A[IMMUTABLE_TYPE, THIS]), (r6 I:double A[D('position' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:float A[D('period' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000b \-\> B:12:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x003a: r0 'len' I\l  0x000b\-0x003a: r1 'j' I\l  \-1 \-0x003a: r6 'position' D\l  \-1 \-0x003a: r8 'period' F\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

