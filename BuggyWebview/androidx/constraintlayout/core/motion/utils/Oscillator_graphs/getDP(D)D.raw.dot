digraph "CFG forandroidx.constraintlayout.core.motion.utils.Oscillator.getDP(D)D" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY])  (LINE:148)\l0x0002: CONST  (r1 I:??[long, double]) = (0 ??[long, double]) \l0x0004: CMP_G  (r3 I:int) = (r19 I:double A[D('time' double)]), (r1 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: IF  (r3 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:21:0x000e \l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0008: CONST  (r3 I:??[long, double]) = (4532020583610935537(0x3ee4f8b588e368f1, double:1.0E\-5) ??[long, double])  (LINE:149)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|0x001c: IGET  (r5 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[]  (LINE:153)\l0x001e: INVOKE  (r5 I:int) = (r5 I:double[]), (r3 I:double A[D('time' double)]) type: STATIC call: java.util.Arrays.binarySearch(double[], double):int A[MD:(double[], double):int (c)]\l0x0022: CONST  (r6 I:??[long, double]) = (0 ??[long, double])  (LINE:154)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|0x0024: IF  (r5 I:??[int, byte, short, char] A[D('index' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:28:0x0027  (LINE:155)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0026|RETURN\l|0x0026: RETURN  (r1 I:double)  (LINE:156)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0027|0x0027: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:?  (LINE:158)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|0x0029: NEG  (r1 I:int) = (r5 I:int A[D('index' int)])  (LINE:159)\l0x002a: ARITH  (r5 I:int A[D('index' int)]) = (r1 I:int) + (\-1 int) \l0x002c: MOVE  (r1 I:??[long, double]) = (r3 I:??[long, double] A[D('time' double)])  (LINE:160)\l0x002d: IGET  (r8 I:float[]) = (r0 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPeriod float[]  (LINE:161)\l0x002f: AGET  (r9 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r5 I:??[int, short, byte, char] A[D('index' int)]) \l0x0031: ARITH  (r10 I:int) = (r5 I:int A[D('index' int)]) + (\-1 int) \l0x0033: AGET  (r10 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r10 I:??[int, short, byte, char]) \l0x0035: ARITH  (r9 I:float) = (r9 I:float) \- (r10 I:float) \l0x0036: CAST (r9 I:double) = (double) (r9 I:float) \l0x0037: IGET  (r11 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[] \l0x0039: AGET  (r12 I:??[long, double]) = (r11 I:??[long, double][]), (r5 I:??[int, short, byte, char] A[D('index' int)]) \l0x003b: ARITH  (r14 I:int) = (r5 I:int A[D('index' int)]) + (\-1 int) \l0x003d: AGET  (r14 I:??[long, double]) = (r11 I:??[long, double][]), (r14 I:??[int, short, byte, char]) \l0x003f: ARITH  (r12 I:double) = (r12 I:double) \- (r14 I:double) \l0x0040: ARITH  (r9 I:double) = (r9 I:double) \/ (r12 I:double) \l0x0041: ARITH  (r12 I:double) = (r9 I:double A[D('m' double)]) * (r1 I:double A[D('t' double)])  (LINE:162)\l0x0043: ARITH  (r14 I:int) = (r5 I:int A[D('index' int)]) + (\-1 int) \l0x0045: AGET  (r8 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r14 I:??[int, short, byte, char]) \l0x0047: CAST (r14 I:double) = (double) (r8 I:float) \l0x0048: ARITH  (r8 I:int) = (r5 I:int A[D('index' int)]) + (\-1 int) \l0x004a: AGET  (r16 I:??[long, double]) = (r11 I:??[long, double][]), (r8 I:??[int, short, byte, char]) \l0x004c: ARITH  (r16 I:double) = (r16 I:double) * (r9 I:double A[D('m' double)]) \l0x004e: ARITH  (r14 I:double) = (r14 I:double) \- (r16 I:double) \l0x0050: ARITH  (r6 I:double A[D('p' double)]) = (r12 I:double) + (r14 I:double) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0052|RETURN\lORIG_RETURN\l|0x0052: RETURN  (r6 I:double A[D('p' double)])  (LINE:164)\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0052: RETURN  (r6 I:double A[D('p' double)]) A[SYNTHETIC] (LINE:164)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|0x000e: CONST  (r3 I:??[long, double] A[D('time' double)]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:150)\l0x0010: CMP_L  (r5 I:int) = (r19 I:double A[D('time' double)]), (r3 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: IF  (r5 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:24:0x001a \l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: CONST  (r3 I:??[long, double]) = (4607182409792818153(0x3feffffde7210be9, double:0.999999) ??[long, double])  (LINE:151)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|0x001a: MOVE  (r3 I:??[long, double] A[D('time' double)]) = (r19 I:??[long, double] A[D('time' double)])  (LINE:150)\l}"];
MethodNode[shape=record,label="{double androidx.constraintlayout.core.motion.utils.Oscillator.getDP((r18 'this' I:androidx.constraintlayout.core.motion.utils.Oscillator A[IMMUTABLE_TYPE, THIS]), (r19 I:double A[D('time' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0052 \-\> B:17:?, CROSS_EDGE: B:28:0x0027 \-\> B:30:0x0052, CROSS_EDGE: B:23:0x0014 \-\> B:25:0x001c, CROSS_EDGE: B:24:0x001a \-\> B:25:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r19 'time' D\l  0x000d\-0x000e: r3 'time' D\l  0x000e\-0x0019: r19 'time' D\l  0x0019\-0x001a: r3 'time' D\l  0x001a\-0x001c: r19 'time' D\l  0x002d\-0x0052: r1 't' D\l  0x0041\-0x0052: r9 'm' D\l  0x001c\-0x0052: r3 'time' D\l  0x0022\-0x0052: r5 'index' I\l  0x0024\-0x0052: r6 'p' D\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_17;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_30 -> Node_17;
Node_31 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_25;
}

