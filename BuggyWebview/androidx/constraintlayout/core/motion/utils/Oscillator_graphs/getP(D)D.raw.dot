digraph "CFG forandroidx.constraintlayout.core.motion.utils.Oscillator.getP(D)D" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY])  (LINE:103)\l0x0002: CONST  (r1 I:??[long, double]) = (0 ??[long, double]) \l0x0004: CMP_G  (r3 I:int) = (r20 I:double A[D('time' double)]), (r1 I:double) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0006|0x0006: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:23:0x000b \l}"];
Node_22 [shape=record,label="{22\:\ 0x0008|0x0008: CONST  (r1 I:??[long, double]) = (0 ??[long, double])  (LINE:104)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0016|0x0016: IGET  (r3 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[]  (LINE:108)\l0x0018: INVOKE  (r3 I:int) = (r3 I:double[]), (r1 I:double A[D('time' double)]) type: STATIC call: java.util.Arrays.binarySearch(double[], double):int A[MD:(double[], double):int (c)]\l0x001c: CONST  (r4 I:??[long, double]) = (0 ??[long, double])  (LINE:109)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|0x001e: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:30:0x0025  (LINE:110)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|0x0020: CONST  (r4 I:??[long, double] A[D('p' double)]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:111)\l0x0022: MOVE  (r20 I:??[long, double]) = (r1 I:??[long, double] A[D('time' double)]) \l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x0073: RETURN  (r4 I:double A[D('p' double)]) A[SYNTHETIC] (LINE:120)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0025|0x0025: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0071  (LINE:112)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0027|0x0027: NEG  (r6 I:int) = (r3 I:int A[D('index' int)])  (LINE:113)\l0x0028: ARITH  (r3 I:int A[D('index' int)]) = (r6 I:int) + (\-1 int) \l0x002a: MOVE  (r6 I:??[long, double]) = (r1 I:??[long, double] A[D('time' double)])  (LINE:114)\l0x002b: IGET  (r8 I:float[]) = (r0 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPeriod float[]  (LINE:115)\l0x002d: AGET  (r9 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r3 I:??[int, short, byte, char] A[D('index' int)]) \l0x002f: ARITH  (r10 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x0031: AGET  (r10 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r10 I:??[int, short, byte, char]) \l0x0033: ARITH  (r9 I:float) = (r9 I:float) \- (r10 I:float) \l0x0034: CAST (r9 I:double) = (double) (r9 I:float) \l0x0035: IGET  (r11 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mPosition double[] \l0x0037: AGET  (r12 I:??[long, double]) = (r11 I:??[long, double][]), (r3 I:??[int, short, byte, char] A[D('index' int)]) \l0x0039: ARITH  (r14 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x003b: AGET  (r14 I:??[long, double]) = (r11 I:??[long, double][]), (r14 I:??[int, short, byte, char]) \l0x003d: ARITH  (r12 I:double) = (r12 I:double) \- (r14 I:double) \l0x003e: ARITH  (r9 I:double) = (r9 I:double) \/ (r12 I:double) \l0x003f: IGET  (r12 I:double[]) = (r0 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mArea double[]  (LINE:116)\l0x0041: ARITH  (r13 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x0043: AGET  (r13 I:??[long, double]) = (r12 I:??[long, double][]), (r13 I:??[int, short, byte, char]) \l0x0045: ARITH  (r12 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x0047: AGET  (r8 I:??[int, float, short, byte, char]) = (r8 I:??[int, float][]), (r12 I:??[int, short, byte, char]) \l0x0049: MOVE  (r20 I:??[long, double]) = (r1 I:??[long, double] A[D('time' double)]) \l0x004b: CAST (r0 I:double) = (double) (r8 I:float) \l0x004c: ARITH  (r2 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x004e: AGET  (r15 I:??[long, double]) = (r11 I:??[long, double][]), (r2 I:??[int, short, byte, char]) \l0x0050: ARITH  (r15 I:double) = (r15 I:double) * (r9 I:double A[D('m' double)]) \l0x0052: ARITH  (r0 I:double) = (r0 I:double) \- (r15 I:double) \l0x0053: ARITH  (r2 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x0055: AGET  (r15 I:??[long, double]) = (r11 I:??[long, double][]), (r2 I:??[int, short, byte, char]) \l0x0057: ARITH  (r15 I:double) = (r6 I:double A[D('t' double)]) \- (r15 I:double) \l0x0059: ARITH  (r0 I:double) = (r0 I:double) * (r15 I:double) \l0x005b: ARITH  (r13 I:double) = (r13 I:double) + (r0 I:double) \l0x005c: ARITH  (r0 I:double) = (r6 I:double A[D('t' double)]) * (r6 I:double A[D('t' double)]) \l0x005e: ARITH  (r2 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x0060: AGET  (r15 I:??[long, double]) = (r11 I:??[long, double][]), (r2 I:??[int, short, byte, char]) \l0x0062: ARITH  (r2 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x0064: AGET  (r17 I:??[long, double]) = (r11 I:??[long, double][]), (r2 I:??[int, short, byte, char]) \l0x0066: ARITH  (r15 I:double) = (r15 I:double) * (r17 I:double) \l0x0068: ARITH  (r0 I:double) = (r0 I:double) \- (r15 I:double) \l0x0069: ARITH  (r0 I:double) = (r0 I:double) * (r9 I:double A[D('m' double)]) \l0x006b: CONST  (r11 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double]) \l0x006d: ARITH  (r0 I:double) = (r0 I:double) \/ (r11 I:double) \l0x006e: ARITH  (r4 I:double A[D('p' double)]) = (r13 I:double) + (r0 I:double) \l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0073: RETURN  (r4 I:double A[D('p' double)]) A[SYNTHETIC] (LINE:120)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0071|0x0071: MOVE  (r20 I:??[long, double] A[D('time' double)]) = (r1 I:??[long, double] A[D('time' double)])  (LINE:112)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0073|RETURN\lORIG_RETURN\l|0x0073: RETURN  (r4 I:double A[D('p' double)])  (LINE:120)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|0x000b: CONST  (r1 I:??[long, double] A[D('time' double)]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:105)\l0x000d: CMP_L  (r3 I:int) = (r20 I:double A[D('time' double)]), (r1 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:26:0x0014 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|0x0011: CONST  (r1 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:106)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0014|0x0014: MOVE  (r1 I:??[long, double] A[D('time' double)]) = (r20 I:??[long, double] A[D('time' double)])  (LINE:105)\l}"];
MethodNode[shape=record,label="{double androidx.constraintlayout.core.motion.utils.Oscillator.getP((r19 'this' I:androidx.constraintlayout.core.motion.utils.Oscillator A[IMMUTABLE_TYPE, THIS]), (r20 I:double A[D('time' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0027 \-\> B:33:0x0073, CROSS_EDGE: B:32:0x0071 \-\> B:33:0x0073, CROSS_EDGE: B:25:0x0011 \-\> B:27:0x0016, CROSS_EDGE: B:26:0x0014 \-\> B:27:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000a: r20 'time' D\l  0x000a\-0x000b: r1 'time' D\l  0x000b\-0x0013: r20 'time' D\l  0x0013\-0x0014: r1 'time' D\l  0x0014\-0x0016: r20 'time' D\l  0x0016\-0x004b: r1 'time' D\l  0x002b\-0x0071: r6 't' D\l  0x003f\-0x0071: r9 'm' D\l  0x004b\-0x0071: r20 'time' D\l  0x0071\-0x0073: r1 'time' D\l  0x001c\-0x0073: r3 'index' I\l  0x001e\-0x0073: r4 'p' D\l  0x0073\-0x0073: r20 'time' D\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_34;
Node_34 -> Node_19;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_35;
Node_35 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_27;
}

