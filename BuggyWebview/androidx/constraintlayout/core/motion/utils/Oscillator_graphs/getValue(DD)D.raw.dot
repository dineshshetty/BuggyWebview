digraph "CFG forandroidx.constraintlayout.core.motion.utils.Oscillator.getValue(DD)D" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: INVOKE  (r0 I:double) = (r11 I:androidx.constraintlayout.core.motion.utils.Oscillator), (r12 I:double A[D('time' double)]) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.Oscillator.getP(double):double A[MD:(double):double (m)] (LINE:124)\l0x0004: ARITH  (r0 I:double) = (r0 I:double) + (r14 I:double A[D('phase' double)]) \l0x0005: IGET  (r2 I:int) = (r11 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mType int  (LINE:125)\l0x0007: CONST  (r3 I:??[long, double]) = (4616189618054758400(0x4010000000000000, double:4.0) ??[long, double]) \l0x0009: CONST  (r5 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double]) \l0x000b: CONST  (r7 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: SWITCH  (r2 I:??)\l case 1: goto B:38:0x0053\l case 2: goto B:36:0x0048\l case 3: goto B:34:0x0042\l case 4: goto B:32:0x003c\l case 5: goto B:30:0x0031\l case 6: goto B:28:0x0023\l case 7: goto B:26:0x0019\l default: goto B:24:0x0010 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: IGET  (r2 I:double) = (r11 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.PI2 double  (LINE:128)\l0x0012: ARITH  (r2 I:double) = (r2 I:double) * (r0 I:double A[D('angle' double)]) \l0x0014: INVOKE  (r2 I:double) = (r2 I:double) type: STATIC call: java.lang.Math.sin(double):double A[MD:(double):double (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|RETURN\l|0x0018: RETURN  (r2 I:double) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0019|0x0019: IGET  (r2 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit) = (r11 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.mCustomCurve androidx.constraintlayout.core.motion.utils.MonotonicCurveFit  (LINE:143)\l0x001b: ARITH  (r3 I:double) = (r0 I:double A[D('angle' double)]) % (r7 I:double) \l0x001d: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: INVOKE  (r2 I:double) = (r2 I:androidx.constraintlayout.core.motion.utils.MonotonicCurveFit), (r3 I:double), (r5 I:int) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.MonotonicCurveFit.getPos(double, int):double A[MD:(double, int):double (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0022|RETURN\l|0x0022: RETURN  (r2 I:double) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|0x0023: ARITH  (r9 I:double) = (r0 I:double A[D('angle' double)]) * (r3 I:double)  (LINE:140)\l0x0025: ARITH  (r9 I:double) = (r9 I:double) % (r3 I:double) \l0x0026: ARITH  (r9 I:double) = (r9 I:double) \- (r5 I:double) \l0x0027: INVOKE  (r2 I:double) = (r9 I:double) type: STATIC call: java.lang.Math.abs(double):double A[MD:(double):double (c)]\l0x002b: ARITH  (r2 I:double) = (r7 I:double) \- (r2 I:double) \l0x002d: ARITH  (r4 I:double) = (r2 I:double A[D('x' double)]) * (r2 I:double A[D('x' double)])  (LINE:141)\l0x002f: ARITH  (r7 I:double) = (r7 I:double) \- (r4 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0030|RETURN\l|0x0030: RETURN  (r7 I:double) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0031|0x0031: IGET  (r2 I:double A[D('x' double)]) = (r11 I:androidx.constraintlayout.core.motion.utils.Oscillator) androidx.constraintlayout.core.motion.utils.Oscillator.PI2 double  (LINE:138)\l0x0033: ARITH  (r4 I:double) = (r14 I:double A[D('phase' double)]) + (r0 I:double A[D('angle' double)]) \l0x0035: ARITH  (r2 I:double) = (r2 I:double) * (r4 I:double) \l0x0037: INVOKE  (r2 I:double) = (r2 I:double) type: STATIC call: java.lang.Math.cos(double):double A[MD:(double):double (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x003b|RETURN\l|0x003b: RETURN  (r2 I:double) \l}"];
Node_32 [shape=record,label="{32\:\ 0x003c|0x003c: ARITH  (r2 I:double) = (r0 I:double A[D('angle' double)]) * (r5 I:double)  (LINE:136)\l0x003e: ARITH  (r2 I:double) = (r2 I:double) + (r7 I:double) \l0x003f: ARITH  (r2 I:double) = (r2 I:double) % (r5 I:double) \l0x0040: ARITH  (r7 I:double) = (r7 I:double) \- (r2 I:double) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0041|RETURN\l|0x0041: RETURN  (r7 I:double) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0042|0x0042: ARITH  (r2 I:double) = (r0 I:double A[D('angle' double)]) * (r5 I:double)  (LINE:134)\l0x0044: ARITH  (r2 I:double) = (r2 I:double) + (r7 I:double) \l0x0045: ARITH  (r2 I:double) = (r2 I:double) % (r5 I:double) \l0x0046: ARITH  (r2 I:double) = (r2 I:double) \- (r7 I:double) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0047|RETURN\l|0x0047: RETURN  (r2 I:double) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0048|0x0048: ARITH  (r9 I:double) = (r0 I:double A[D('angle' double)]) * (r3 I:double)  (LINE:132)\l0x004a: ARITH  (r9 I:double) = (r9 I:double) + (r7 I:double) \l0x004b: ARITH  (r9 I:double) = (r9 I:double) % (r3 I:double) \l0x004c: ARITH  (r9 I:double) = (r9 I:double) \- (r5 I:double) \l0x004d: INVOKE  (r2 I:double) = (r9 I:double) type: STATIC call: java.lang.Math.abs(double):double A[MD:(double):double (c)]\l0x0051: ARITH  (r7 I:double) = (r7 I:double) \- (r2 I:double) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0052|RETURN\l|0x0052: RETURN  (r7 I:double) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0053|0x0053: CONST  (r2 I:??[long, double]) = (4602678819172646912(0x3fe0000000000000, double:0.5) ??[long, double])  (LINE:130)\l0x0055: ARITH  (r4 I:double) = (r0 I:double A[D('angle' double)]) % (r7 I:double) \l0x0057: ARITH  (r2 I:double) = (r2 I:double) \- (r4 I:double) \l0x0058: INVOKE  (r2 I:double) = (r2 I:double) type: STATIC call: java.lang.Math.signum(double):double A[MD:(double):double (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x005c|RETURN\l|0x005c: RETURN  (r2 I:double) \l}"];
MethodNode[shape=record,label="{public double androidx.constraintlayout.core.motion.utils.Oscillator.getValue((r11 'this' I:androidx.constraintlayout.core.motion.utils.Oscillator A[IMMUTABLE_TYPE, THIS]), (r12 I:double A[D('time' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:double A[D('phase' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0022 \-\> B:21:?, CROSS_EDGE: B:29:0x0030 \-\> B:21:?, CROSS_EDGE: B:31:0x003b \-\> B:21:?, CROSS_EDGE: B:33:0x0041 \-\> B:21:?, CROSS_EDGE: B:35:0x0047 \-\> B:21:?, CROSS_EDGE: B:37:0x0052 \-\> B:21:?, CROSS_EDGE: B:39:0x005c \-\> B:21:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002d\-0x0031: r2 'x' D\l  0x0005\-0x006f: r0 'angle' D\l  \-1 \-0x006f: r12 'time' D\l  \-1 \-0x006f: r14 'phase' D\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_26;
Node_23 -> Node_28;
Node_23 -> Node_30;
Node_23 -> Node_32;
Node_23 -> Node_34;
Node_23 -> Node_36;
Node_23 -> Node_38;
Node_24 -> Node_25;
Node_25 -> Node_21;
Node_26 -> Node_27;
Node_27 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_21;
Node_30 -> Node_31;
Node_31 -> Node_21;
Node_32 -> Node_33;
Node_33 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_21;
Node_36 -> Node_37;
Node_37 -> Node_21;
Node_38 -> Node_39;
Node_39 -> Node_21;
}

