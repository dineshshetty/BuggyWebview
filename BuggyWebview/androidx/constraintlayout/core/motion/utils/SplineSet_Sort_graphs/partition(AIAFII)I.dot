digraph "CFG forandroidx.constraintlayout.core.motion.utils.SplineSet.Sort.partition([I[FII)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|r0 = r4[r7]\lr1 = r6\lr2 = r6\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|LOOP_START\lLOOP:0: B:16:0x0004\-\>B:20:0x000f\lPHI: r1 r2 \l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:15:0x0000, B:20:0x000f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'j' int) = (r2v0 'j' int), (r2v2 'j' int) binds: [B:15:0x0000, B:20:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r7) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x0006}"];
Node_18 [shape=record,label="{18\:\ 0x0008|if (r4[r2] \> r0) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|swap(r4, r5, r1, r2)\lint r1 = r1 + 1\l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|LOOP_END\lLOOP:0: B:16:0x0004\-\>B:20:0x000f\lPHI: r1 \l  PHI: (r1v2 'i' int) = (r1v1 'i' int), (r1v3 'i' int) binds: [B:25:0x000f, B:24:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|swap(r4, r5, r1, r7)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|RETURN\l|return r1\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static int androidx.constraintlayout.core.motion.utils.SplineSet.Sort.partition((r4v0 'array' int[] A[D('array' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'value' float[] A[D('value' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'low' int A[D('low' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'hi' int A[D('hi' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x000f \-\> B:16:0x0004, CROSS_EDGE: B:18:0x0008 \-\> B:20:0x000f\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_24;
Node_24 -> Node_20;
Node_20 -> Node_16;
Node_25 -> Node_20;
Node_23 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_14;
}

