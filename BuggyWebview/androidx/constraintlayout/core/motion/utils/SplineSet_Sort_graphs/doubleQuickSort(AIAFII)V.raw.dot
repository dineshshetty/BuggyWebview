digraph "CFG forandroidx.constraintlayout.core.motion.utils.SplineSet.Sort.doubleQuickSort([I[FII)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: ARRAY_LENGTH  (r0 I:int) = (r5 I:??[] A[D('key' int[])])  (LINE:129)\l0x0001: ARITH  (r0 I:int) = (r0 I:int) + (10 int) \l0x0003: NEW_ARRAY  (r0 I:int[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:130)\l0x0006: ARITH  (r2 I:int) = (r1 I:int A[D('count' int)]) + (1 int)  (LINE:131)\l0x0008: APUT  \l  (r0 I:??[int, float][] A[D('stack' int[])])\l  (r1 I:??[int, short, byte, char] A[D('count' int)])\l  (r8 I:??[int, float, short, byte, char] A[D('hi' int)])\l \l0x000a: ARITH  (r1 I:int) = (r2 I:int A[D('count' int)]) + (1 int)  (LINE:132)\l0x000c: APUT  \l  (r0 I:??[int, float][] A[D('stack' int[])])\l  (r2 I:??[int, short, byte, char] A[D('count' int)])\l  (r7 I:??[int, float, short, byte, char] A[D('low' int)])\l \l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|LOOP_START\lLOOP:0: B:16:0x000e\-\>B:23:0x000e\l|0x000e: IF  (r1 I:??[int, byte, short, char] A[D('count' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:22:0x0033  (LINE:133)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: ARITH  (r1 I:int) = (r1 I:int A[D('count' int)]) + (\-1 int)  (LINE:134)\l0x0012: AGET  (r7 I:??[int, float, short, byte, char] A[D('low' int)]) = (r0 I:??[int, float][] A[D('stack' int[])]), (r1 I:??[int, short, byte, char] A[D('count' int)]) \l0x0014: ARITH  (r1 I:int) = (r1 I:int A[D('count' int)]) + (\-1 int)  (LINE:135)\l0x0016: AGET  (r8 I:??[int, float, short, byte, char] A[D('hi' int)]) = (r0 I:??[int, float][] A[D('stack' int[])]), (r1 I:??[int, short, byte, char] A[D('count' int)]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|0x0018: IF  (r7 I:??[int, byte, short, char] A[D('low' int)]) \>= (r8 I:??[int, byte, short, char] A[D('hi' int)])  \-\> B:24:0x000e  (LINE:136)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|0x001a: INVOKE  (r2 I:int) = \l  (r5 I:int[] A[D('key' int[])])\l  (r6 I:float[] A[D('value' float[])])\l  (r7 I:int A[D('low' int)])\l  (r8 I:int A[D('hi' int)])\l type: STATIC call: androidx.constraintlayout.core.motion.utils.SplineSet.Sort.partition(int[], float[], int, int):int A[MD:(int[], float[], int, int):int (m)] (LINE:137)\l0x001e: ARITH  (r3 I:int) = (r1 I:int A[D('count' int)]) + (1 int)  (LINE:138)\l0x0020: ARITH  (r4 I:int) = (r2 I:int A[D('p' int)]) + (\-1 int) \l0x0022: APUT  \l  (r0 I:??[int, float][] A[D('stack' int[])])\l  (r1 I:??[int, short, byte, char])\l  (r4 I:??[int, float, short, byte, char])\l \l0x0024: ARITH  (r1 I:int) = (r3 I:int A[D('count' int)]) + (1 int)  (LINE:139)\l0x0026: APUT  \l  (r0 I:??[int, float][] A[D('stack' int[])])\l  (r3 I:??[int, short, byte, char] A[D('count' int)])\l  (r7 I:??[int, float, short, byte, char] A[D('low' int)])\l \l0x0028: ARITH  (r3 I:int) = (r1 I:int A[D('count' int)]) + (1 int)  (LINE:140)\l0x002a: APUT  \l  (r0 I:??[int, float][] A[D('stack' int[])])\l  (r1 I:??[int, short, byte, char] A[D('count' int)])\l  (r8 I:??[int, float, short, byte, char] A[D('hi' int)])\l \l0x002c: ARITH  (r1 I:int) = (r3 I:int A[D('count' int)]) + (1 int)  (LINE:141)\l0x002e: ARITH  (r4 I:int) = (r2 I:int A[D('p' int)]) + (1 int) \l0x0030: APUT  \l  (r0 I:??[int, float][] A[D('stack' int[])])\l  (r3 I:??[int, short, byte, char])\l  (r4 I:??[int, float, short, byte, char])\l \l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|LOOP_END\lSYNTHETIC\lLOOP:0: B:16:0x000e\-\>B:23:0x000e\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0033|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0033|RETURN\l|0x0033: RETURN    (LINE:144)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void androidx.constraintlayout.core.motion.utils.SplineSet.Sort.doubleQuickSort((r5 I:int[] A[D('key' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:float[] A[D('value' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('low' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('hi' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x0018 \-\> B:16:0x000e, BACK_EDGE: B:19:0x001a \-\> B:16:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0008: r1 'count' I\l  0x0008\-0x000c: r2 'count' I\l  0x000c\-0x0020: r1 'count' I\l  0x0020\-0x0026: r3 'count' I\l  0x0026\-0x002a: r1 'count' I\l  0x002a\-0x002e: r3 'count' I\l  0x001e\-0x0032: r2 'p' I\l  0x0005\-0x0033: r0 'stack' [I\l  0x002e\-0x0033: r1 'count' I\l  \-1 \-0x0033: r5 'key' [I\l  \-1 \-0x0033: r6 'value' [F\l  \-1 \-0x0033: r7 'low' I\l  \-1 \-0x0033: r8 'hi' I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_21[style=dashed];
Node_18 -> Node_24;
Node_21 -> Node_19;
Node_19 -> Node_25;
Node_25 -> Node_23;
Node_23 -> Node_16;
Node_24 -> Node_23;
Node_22 -> Node_20;
Node_20 -> Node_14;
}

