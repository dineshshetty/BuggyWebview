digraph "CFG forandroidx.constraintlayout.core.motion.utils.SplineSet.setup(I)V" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|int r0 = r10.count\l}"];
Node_32 [shape=record,label="{32\:\ 0x0002|if (r0 != 0) goto L5\l}"];
Node_33 [shape=record,label="{33\:\ 0x0004|RETURN\l|return\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0005|androidx.constraintlayout.core.motion.utils.SplineSet.Sort.doubleQuickSort(r10.mTimePoints, r10.mValues, 0, r0 \- 1)\lr0 = 1\lr1 = 1\l}"];
Node_35 [shape=record,label="{35\:\ 0x0011|LOOP_START\lLOOP:0: B:35:0x0011\-\>B:40:0x0021\lPHI: r0 r1 \l  PHI: (r0v3 'unique' int A[IMMUTABLE_TYPE]) = (r0v2 'unique' int), (r0v4 'unique' int) binds: [B:34:0x0005, B:40:0x0021] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v2 'i' int) = (r1v1 'i' int), (r1v4 'i' int) binds: [B:34:0x0005, B:40:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0013|if (r1 \>= r10.count) goto L14\l}"];
Node_37 [shape=record,label="{37\:\ 0x0015|int[] r2 = r10.mTimePoints\l}"];
Node_38 [shape=record,label="{38\:\ 0x001d|if (r2[r1 + (\-1)] == r2[r1]) goto L13\l}"];
Node_39 [shape=record,label="{39\:\ 0x001f|int r0 = r0 + 1\l}"];
Node_53 [shape=record,label="{53\:\ 0x0021|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0021|LOOP_END\lLOOP:0: B:35:0x0011\-\>B:40:0x0021\lPHI: r0 \l  PHI: (r0v4 'unique' int) = (r0v3 'unique' int), (r0v5 'unique' int) binds: [B:54:0x0021, B:53:0x0021] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = r1 + 1\l}"];
Node_54 [shape=record,label="{54\:\ 0x0021|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0024|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0024|double[] r1 = new double[r0]\ldouble[][] r2 = (double[][]) java.lang.reflect.Array.newInstance(double.class, new int[]\{r0, 1\})\lr3 = 0\lr5 = 0\l}"];
Node_42 [shape=record,label="{42\:\ 0x0037|LOOP_START\lLOOP:1: B:42:0x0037\-\>B:49:0x0061\lPHI: r3 r5 \l  PHI: (r3v3 'k' int) = (r3v2 'k' int), (r3v5 'k' int) binds: [B:41:0x0024, B:49:0x0061] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v1 'i' int) = (r5v0 'i' int), (r5v2 'i' int) binds: [B:41:0x0024, B:49:0x0061] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0039|if (r5 \>= r10.count) goto L25\l}"];
Node_44 [shape=record,label="{44\:\ 0x003b|if (r5 \<= 0) goto L23\l}"];
Node_45 [shape=record,label="{45\:\ 0x003d|int[] r6 = r10.mTimePoints\l}"];
Node_46 [shape=record,label="{46\:\ 0x0045|if (r6[r5] != r6[r5 + (\-1)]) goto L23\l}"];
Node_57 [shape=record,label="{57\:\ 0x0061|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0061|LOOP_END\lLOOP:1: B:42:0x0037\-\>B:49:0x0061\lPHI: r3 \l  PHI: (r3v5 'k' int) = (r3v4 'k' int), (r3v3 'k' int) binds: [B:56:0x0061, B:57:0x0061] A[DONT_GENERATE, DONT_INLINE]\l|int r5 = r5 + 1\l}"];
Node_48 [shape=record,label="{48\:\ 0x0048|r1[r3] = ((double) r10.mTimePoints[r5]) * 0.01d\lr2[r3][0] = (double) r10.mValues[r5]\lint r3 = r3 + 1\l}"];
Node_56 [shape=record,label="{56\:\ 0x0061|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0064|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0064|r10.mCurveFit = androidx.constraintlayout.core.motion.utils.CurveFit.get(r11, r1, r2)\l}"];
Node_51 [shape=record,label="{51\:\ 0x006a|RETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.SplineSet.setup((r10v0 'this' androidx.constraintlayout.core.motion.utils.SplineSet A[IMMUTABLE_TYPE, THIS]), (r11v0 'curveType' int A[D('curveType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:40:0x0021 \-\> B:35:0x0011, CROSS_EDGE: B:38:0x001d \-\> B:40:0x0021, BACK_EDGE: B:49:0x0061 \-\> B:42:0x0037, CROSS_EDGE: B:46:0x0045 \-\> B:49:0x0061, CROSS_EDGE: B:44:0x003b \-\> B:48:0x0048, CROSS_EDGE: B:51:0x006a \-\> B:30:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.SplineSet.setup(int):void]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_30;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_52;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_54;
Node_39 -> Node_53;
Node_53 -> Node_40;
Node_40 -> Node_35;
Node_54 -> Node_40;
Node_52 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_55;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_48;
Node_45 -> Node_46;
Node_46 -> Node_48;
Node_46 -> Node_57[style=dashed];
Node_57 -> Node_49;
Node_49 -> Node_42;
Node_48 -> Node_56;
Node_56 -> Node_49;
Node_55 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_30;
}

