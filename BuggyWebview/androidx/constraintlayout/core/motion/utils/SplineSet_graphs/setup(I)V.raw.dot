digraph "CFG forandroidx.constraintlayout.core.motion.utils.SplineSet.setup(I)V" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.count int  (LINE:84)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0005 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:85)\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0005|0x0005: IGET  (r1 I:int[]) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.mTimePoints int[]  (LINE:88)\l0x0007: IGET  (r2 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.mValues float[] \l0x0009: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000a: ARITH  (r0 I:int) = (r0 I:int) \- (r3 I:int) \l0x000b: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INVOKE  (r1 I:int[]), (r2 I:float[]), (r4 I:int), (r0 I:int) type: STATIC call: androidx.constraintlayout.core.motion.utils.SplineSet.Sort.doubleQuickSort(int[], float[], int, int):void A[MD:(int[], float[], int, int):void (m)]\l0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:90)\l0x0010: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:92)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0011|LOOP_START\lLOOP:0: B:35:0x0011\-\>B:40:0x0021\l|0x0011: IGET  (r2 I:int) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.count int \l}"];
Node_36 [shape=record,label="{36\:\ 0x0013|0x0013: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:52:0x0024 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0015|0x0015: IGET  (r2 I:int[]) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.mTimePoints int[]  (LINE:93)\l0x0017: ARITH  (r5 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int) \l0x0019: AGET  (r5 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r5 I:??[int, short, byte, char]) \l0x001b: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('i' int)]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x001d|0x001d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0021 \l}"];
Node_39 [shape=record,label="{39\:\ 0x001f|0x001f: ARITH  (r0 I:int) = (r0 I:int A[D('unique' int)]) + (1 int)  (LINE:94)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0021|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0021|LOOP_END\lLOOP:0: B:35:0x0011\-\>B:40:0x0021\l|0x0021: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:92)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0021|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0024|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0024|0x0024: NEW_ARRAY  (r1 I:double[] A[D('i' int)]) = (r0 I:int A[D('unique' int), IMMUTABLE_TYPE]) type: double[]  (LINE:98)\l0x0026: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:99)\l0x0027: NEW_ARRAY  (r2 I:int[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0029: APUT  (r2 I:??[int, float][]), (r3 I:??[int, short, byte, char]), (r3 I:??[int, float, short, byte, char]) \l0x002b: APUT  (r2 I:??[int, float][]), (r4 I:??[int, short, byte, char]), (r0 I:??[int, float, short, byte, char] A[D('unique' int)]) \l0x002d: CONST_CLASS  (r3 I:java.lang.Class\<double\>) =  double.class \l0x002f: INVOKE  (r2 I:java.lang.Object) = (r3 I:java.lang.Class), (r2 I:int[]) type: STATIC call: java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object A[MD:(java.lang.Class\<?\>, int[]):java.lang.Object VARARG throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException (c)]\l0x0033: CHECK_CAST (r2 I:double[][]) = (double[][]) (r2 I:??[OBJECT, ARRAY]) \l0x0035: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:100)\l0x0036: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:101)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0037|LOOP_START\lLOOP:1: B:42:0x0037\-\>B:49:0x0061\l|0x0037: IGET  (r6 I:int) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.count int \l}"];
Node_43 [shape=record,label="{43\:\ 0x0039|0x0039: IF  (r5 I:??[int, byte, short, char] A[D('i' int)]) \>= (r6 I:??[int, byte, short, char])  \-\> B:55:0x0064 \l}"];
Node_44 [shape=record,label="{44\:\ 0x003b|0x003b: IF  (r5 I:??[int, byte, short, char] A[D('i' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:48:0x0048  (LINE:102)\l}"];
Node_45 [shape=record,label="{45\:\ 0x003d|0x003d: IGET  (r6 I:int[]) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.mTimePoints int[] \l0x003f: AGET  (r7 I:??[int, float, short, byte, char]) = (r6 I:??[int, float][]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x0041: ARITH  (r8 I:int) = (r5 I:int A[D('i' int)]) + (\-1 int) \l0x0043: AGET  (r6 I:??[int, float, short, byte, char]) = (r6 I:??[int, float][]), (r8 I:??[int, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0045|0x0045: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0048 \l}"];
Node_57 [shape=record,label="{57\:\ 0x0061|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0061|LOOP_END\lLOOP:1: B:42:0x0037\-\>B:49:0x0061\l|0x0061: ARITH  (r5 I:int) = (r5 I:int A[D('i' int)]) + (1 int)  (LINE:101)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0048|0x0048: IGET  (r6 I:int[]) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.mTimePoints int[]  (LINE:106)\l0x004a: AGET  (r6 I:??[int, float, short, byte, char]) = (r6 I:??[int, float][]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x004c: CAST (r6 I:double) = (double) (r6 I:int) \l0x004d: CONST  (r8 I:??[long, double]) = (4576918229304087675(0x3f847ae147ae147b, double:0.01) ??[long, double]) \l0x0052: ARITH  (r6 I:double) = (r6 I:double) * (r8 I:double) \l0x0054: APUT  \l  (r1 I:??[long, double][] A[D('time' double[])])\l  (r3 I:??[int, short, byte, char] A[D('k' int)])\l  (r6 I:??[long, double])\l \l0x0056: AGET  (r6 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][] A[D('values' double[][])]), (r3 I:??[int, short, byte, char] A[D('k' int)])  (LINE:107)\l0x0058: IGET  (r7 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet) androidx.constraintlayout.core.motion.utils.SplineSet.mValues float[] \l0x005a: AGET  (r7 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][]), (r5 I:??[int, short, byte, char] A[D('i' int)]) \l0x005c: CAST (r7 I:double) = (double) (r7 I:float) \l0x005d: APUT  (r6 I:??[long, double][]), (r4 I:??[int, short, byte, char]), (r7 I:??[long, double]) \l0x005f: ARITH  (r3 I:int) = (r3 I:int A[D('k' int)]) + (1 int)  (LINE:108)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0061|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x0064|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0064|0x0064: INVOKE  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit) = (r11 I:int A[D('curveType' int)]), (r1 I:double[] A[D('time' double[])]), (r2 I:double[][] A[D('values' double[][])]) type: STATIC call: androidx.constraintlayout.core.motion.utils.CurveFit.get(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit A[MD:(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit (m)] (LINE:110)\l0x0068: IPUT  \l  (r4 I:androidx.constraintlayout.core.motion.utils.CurveFit)\l  (r10 I:androidx.constraintlayout.core.motion.utils.SplineSet)\l androidx.constraintlayout.core.motion.utils.SplineSet.mCurveFit androidx.constraintlayout.core.motion.utils.CurveFit \l}"];
Node_51 [shape=record,label="{51\:\ 0x006a|RETURN\l|0x006a: RETURN    (LINE:111)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.SplineSet.setup((r10 'this' I:androidx.constraintlayout.core.motion.utils.SplineSet A[IMMUTABLE_TYPE, THIS]), (r11 I:int A[D('curveType' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:40:0x0021 \-\> B:35:0x0011, CROSS_EDGE: B:38:0x001d \-\> B:40:0x0021, BACK_EDGE: B:49:0x0061 \-\> B:42:0x0037, CROSS_EDGE: B:46:0x0045 \-\> B:49:0x0061, CROSS_EDGE: B:44:0x003b \-\> B:48:0x0048, CROSS_EDGE: B:51:0x006a \-\> B:30:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0024: r1 'i' I\l  0x0037\-0x0064: r5 'i' I\l  0x0010\-0x006a: r0 'unique' I\l  0x0026\-0x006a: r1 'time' [D\l  0x0035\-0x006a: r2 'values' [[D\l  0x0036\-0x006a: r3 'k' I\l  \-1 \-0x006a: r11 'curveType' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.SplineSet.setup(int):void]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_30;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_52;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_54;
Node_39 -> Node_53;
Node_53 -> Node_40;
Node_40 -> Node_35;
Node_54 -> Node_40;
Node_52 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_55;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_48;
Node_45 -> Node_46;
Node_46 -> Node_48;
Node_46 -> Node_57[style=dashed];
Node_57 -> Node_49;
Node_49 -> Node_42;
Node_48 -> Node_56;
Node_56 -> Node_49;
Node_55 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_30;
}

