digraph "CFG forandroidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.setup(F)V" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: IPUT  \l  (r11 I:float A[D('pathLength' float)])\l  (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator)\l androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPathLength float  (LINE:381)\l0x0002: IGET  (r0 I:double[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPosition double[]  (LINE:382)\l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0006: NEW_ARRAY  (r2 I:int[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: int[] \l0x0008: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0009: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x000a: APUT  (r2 I:??[int, float][]), (r3 I:??[int, short, byte, char]), (r4 I:??[int, float, short, byte, char]) \l0x000c: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: APUT  (r2 I:??[int, float][]), (r4 I:??[int, short, byte, char]), (r0 I:??[int, float, short, byte, char]) \l0x000f: CONST_CLASS  (r0 I:java.lang.Class\<double\>) =  double.class \l0x0011: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.Class), (r2 I:int[]) type: STATIC call: java.lang.reflect.Array.newInstance(java.lang.Class, int[]):java.lang.Object A[MD:(java.lang.Class\<?\>, int[]):java.lang.Object VARARG throws java.lang.IllegalArgumentException, java.lang.NegativeArraySizeException (c)]\l0x0015: CHECK_CAST (r0 I:double[][]) = (double[][]) (r0 I:??[OBJECT, ARRAY]) \l0x0017: IGET  (r2 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mValues float[]  (LINE:383)\l0x0019: ARRAY_LENGTH  (r5 I:int) = (r2 I:??[]) \l0x001a: ARITH  (r5 I:int) = (r5 I:int) + (r1 I:int) \l0x001b: NEW_ARRAY  (r5 I:double[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x001d: IPUT  (r5 I:double[]), (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mSplineValueCache double[] \l0x001f: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[])  (LINE:384)\l0x0020: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int) \l0x0021: NEW_ARRAY  (r2 I:double[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: double[] \l0x0023: IPUT  (r2 I:double[]), (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mSplineSlopeCache double[] \l0x0025: IGET  (r2 I:double[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPosition double[]  (LINE:385)\l0x0027: AGET  (r5 I:??[long, double]) = (r2 I:??[long, double][]), (r4 I:??[int, short, byte, char]) \l0x0029: CONST  (r7 I:??[long, double]) = (0 ??[long, double]) \l0x002b: CMP_L  (r2 I:int) = (r5 I:double), (r7 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ 0x002d|0x002d: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:24:0x0038 \l}"];
Node_23 [shape=record,label="{23\:\ 0x002f|0x002f: IGET  (r2 I:androidx.constraintlayout.core.motion.utils.Oscillator) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mOscillator androidx.constraintlayout.core.motion.utils.Oscillator  (LINE:386)\l0x0031: IGET  (r5 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPeriod float[] \l0x0033: AGET  (r5 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][]), (r4 I:??[int, short, byte, char]) \l0x0035: INVOKE  (r2 I:androidx.constraintlayout.core.motion.utils.Oscillator), (r7 I:double), (r5 I:float) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.Oscillator.addPoint(double, float):void A[MD:(double, float):void (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0038|0x0038: IGET  (r2 I:double[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPosition double[]  (LINE:388)\l0x003a: ARRAY_LENGTH  (r5 I:int) = (r2 I:??[]) \l0x003b: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int) \l0x003c: AGET  (r6 I:??[long, double]) = (r2 I:??[long, double][]), (r5 I:??[int, short, byte, char] A[D('last' int)])  (LINE:389)\l0x003e: CONST  (r8 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double]) \l0x0040: CMP_G  (r2 I:int) = (r6 I:double), (r8 I:double) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0042|0x0042: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:27:0x004d \l}"];
Node_26 [shape=record,label="{26\:\ 0x0044|0x0044: IGET  (r2 I:androidx.constraintlayout.core.motion.utils.Oscillator) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mOscillator androidx.constraintlayout.core.motion.utils.Oscillator  (LINE:390)\l0x0046: IGET  (r6 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPeriod float[] \l0x0048: AGET  (r6 I:??[int, float, short, byte, char]) = (r6 I:??[int, float][]), (r5 I:??[int, short, byte, char] A[D('last' int)]) \l0x004a: INVOKE  (r2 I:androidx.constraintlayout.core.motion.utils.Oscillator), (r8 I:double), (r6 I:float) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.Oscillator.addPoint(double, float):void A[MD:(double, float):void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x004d|0x004d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:393)\l}"];
Node_28 [shape=record,label="{28\:\ 0x004e|LOOP_START\lLOOP:0: B:28:0x004e\-\>B:30:0x0051\l|0x004e: ARRAY_LENGTH  (r6 I:int) = (r0 I:??[] A[D('splineValues' double[][])]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x004f|0x004f: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r6 I:??[int, byte, short, char])  \-\> B:36:0x007c \l}"];
Node_30 [shape=record,label="{30\:\ 0x0051|LOOP_END\lLOOP:0: B:28:0x004e\-\>B:30:0x0051\l|0x0051: AGET  (r6 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('splineValues' double[][])]), (r2 I:??[int, short, byte, char] A[D('i' int)])  (LINE:394)\l0x0053: IGET  (r7 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mOffset float[] \l0x0055: AGET  (r7 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][]), (r2 I:??[int, short, byte, char] A[D('i' int)]) \l0x0057: CAST (r7 I:double) = (double) (r7 I:float) \l0x0058: APUT  (r6 I:??[long, double][]), (r4 I:??[int, short, byte, char]), (r7 I:??[long, double]) \l0x005a: AGET  (r6 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('splineValues' double[][])]), (r2 I:??[int, short, byte, char] A[D('i' int)])  (LINE:395)\l0x005c: IGET  (r7 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPhase float[] \l0x005e: AGET  (r7 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][]), (r2 I:??[int, short, byte, char] A[D('i' int)]) \l0x0060: CAST (r7 I:double) = (double) (r7 I:float) \l0x0061: APUT  (r6 I:??[long, double][]), (r3 I:??[int, short, byte, char]), (r7 I:??[long, double]) \l0x0063: AGET  (r6 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][] A[D('splineValues' double[][])]), (r2 I:??[int, short, byte, char] A[D('i' int)])  (LINE:396)\l0x0065: IGET  (r7 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mValues float[] \l0x0067: AGET  (r7 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][]), (r2 I:??[int, short, byte, char] A[D('i' int)]) \l0x0069: CAST (r7 I:double) = (double) (r7 I:float) \l0x006a: APUT  (r6 I:??[long, double][]), (r1 I:??[int, short, byte, char]), (r7 I:??[long, double]) \l0x006c: IGET  (r6 I:androidx.constraintlayout.core.motion.utils.Oscillator) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mOscillator androidx.constraintlayout.core.motion.utils.Oscillator  (LINE:397)\l0x006e: IGET  (r7 I:double[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPosition double[] \l0x0070: AGET  (r8 I:??[long, double]) = (r7 I:??[long, double][]), (r2 I:??[int, short, byte, char] A[D('i' int)]) \l0x0072: IGET  (r7 I:float[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPeriod float[] \l0x0074: AGET  (r7 I:??[int, float, short, byte, char]) = (r7 I:??[int, float][]), (r2 I:??[int, short, byte, char] A[D('i' int)]) \l0x0076: INVOKE  (r6 I:androidx.constraintlayout.core.motion.utils.Oscillator), (r8 I:double), (r7 I:float) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.Oscillator.addPoint(double, float):void A[MD:(double, float):void (m)]\l0x0079: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:393)\l}"];
Node_36 [shape=record,label="{36\:\ 0x007c|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x007c|0x007c: IGET  (r1 I:androidx.constraintlayout.core.motion.utils.Oscillator) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mOscillator androidx.constraintlayout.core.motion.utils.Oscillator  (LINE:401)\l0x007e: INVOKE  (r1 I:androidx.constraintlayout.core.motion.utils.Oscillator) type: VIRTUAL call: androidx.constraintlayout.core.motion.utils.Oscillator.normalize():void A[MD:():void (m)]\l0x0081: IGET  (r1 I:double[]) = (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator) androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mPosition double[]  (LINE:402)\l0x0083: ARRAY_LENGTH  (r2 I:int) = (r1 I:??[]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0084|0x0084: IF  (r2 I:??[int, byte, short, char]) \<= (r3 I:??[int, byte, short, char])  \-\> B:34:0x008d \l}"];
Node_33 [shape=record,label="{33\:\ 0x0086|0x0086: INVOKE  (r1 I:androidx.constraintlayout.core.motion.utils.CurveFit) = (r4 I:int), (r1 I:double[]), (r0 I:double[][] A[D('splineValues' double[][])]) type: STATIC call: androidx.constraintlayout.core.motion.utils.CurveFit.get(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit A[MD:(int, double[], double[][]):androidx.constraintlayout.core.motion.utils.CurveFit (m)] (LINE:403)\l0x008a: IPUT  \l  (r1 I:androidx.constraintlayout.core.motion.utils.CurveFit)\l  (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator)\l androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mCurveFit androidx.constraintlayout.core.motion.utils.CurveFit \l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|0x0090: RETURN   A[SYNTHETIC] (LINE:407)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x008d|0x008d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:405)\l0x008e: IPUT  \l  (r1 I:androidx.constraintlayout.core.motion.utils.CurveFit)\l  (r10 I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator)\l androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.mCurveFit androidx.constraintlayout.core.motion.utils.CurveFit \l}"];
Node_35 [shape=record,label="{35\:\ 0x0090|RETURN\lORIG_RETURN\l|0x0090: RETURN    (LINE:407)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.motion.utils.KeyCycleOscillator.CycleOscillator.setup((r10 'this' I:androidx.constraintlayout.core.motion.utils.KeyCycleOscillator$CycleOscillator A[IMMUTABLE_TYPE, THIS]), (r11 I:float A[D('pathLength' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x0051 \-\> B:28:0x004e, CROSS_EDGE: B:34:0x008d \-\> B:35:0x0090, CROSS_EDGE: B:25:0x0042 \-\> B:27:0x004d, CROSS_EDGE: B:22:0x002d \-\> B:24:0x0038\lINLINE_NOT_NEEDED\lDebug Info:\l  0x004e\-0x007c: r2 'i' I\l  0x0017\-0x0090: r0 'splineValues' [[D\l  0x003c\-0x0090: r5 'last' I\l  \-1 \-0x0090: r11 'pathLength' F\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_36;
Node_30 -> Node_28;
Node_36 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_37;
Node_37 -> Node_20;
Node_34 -> Node_35;
Node_35 -> Node_20;
}

