digraph "CFG forandroidx.constraintlayout.core.motion.key.MotionKeyAttributes.setValue(II)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|switch(r2) \{\l    case 100: goto L12;\l    case 301: goto L10;\l    case 302: goto L8;\l    default: goto L2;\l\}\l}"];
Node_18 [shape=record,label="{18\:\ 0x0003}"];
Node_19 [shape=record,label="{19\:\ 0x0007|if (setValue(r2, r3) != false) goto L7\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009}"];
Node_21 [shape=record,label="{21\:\ 0x000d|RETURN\l|return super.setValue(r2, r3)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|r1.mVisibility = r3\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|r1.mCurveFit = r3\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|r1.mFramePosition = r3\l}"];
Node_25 [shape=record,label="{25\:\ 0x0016|RETURN\lORIG_RETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.motion.key.MotionKeyAttributes.setValue((r1v0 'this' androidx.constraintlayout.core.motion.key.MotionKeyAttributes A[IMMUTABLE_TYPE, THIS]), (r2v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'value' int A[D('value' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0017 \-\> B:16:?, CROSS_EDGE: B:22:0x000e \-\> B:25:0x0016, CROSS_EDGE: B:23:0x0011 \-\> B:25:0x0016, CROSS_EDGE: B:24:0x0014 \-\> B:25:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.TypedValues.setValue(int, int):boolean]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_17 -> Node_22;
Node_17 -> Node_23;
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_27;
Node_20 -> Node_21;
Node_21 -> Node_16;
Node_27 -> Node_16;
Node_22 -> Node_28;
Node_28 -> Node_16;
Node_23 -> Node_29;
Node_29 -> Node_16;
Node_24 -> Node_25;
Node_25 -> Node_16;
}

