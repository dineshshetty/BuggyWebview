digraph "CFG forandroidx.constraintlayout.core.motion.key.MotionKeyTimeCycle.setValue(II)Z" {
subgraph cluster_Region_1251394825 {
label = "R(1:1)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_1746267502 {
label = "Switch: 3
 case 100 -> R(2:7|8)
 case androidx.constraintlayout.core.motion.utils.TypedValues.CycleType.TYPE_WAVE_SHAPE :int -> R(2:5|6)
 case default -> R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|switch(r2) \{\l    case 100: goto L7;\l    case 421: goto L5;\l    default: goto L2;\l\}\l}"];
subgraph cluster_Region_1010476878 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000b|r1.mFramePosition = r3\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|RETURN\lORIG_RETURN\l|return true\l}"];
}
subgraph cluster_Region_1783259474 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0008|r1.mWaveShape = r3\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
subgraph cluster_Region_378036127 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0007|RETURN\l|return super.setValue(r2, r3)\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0003}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.core.motion.key.MotionKeyTimeCycle.setValue((r1v0 'this' androidx.constraintlayout.core.motion.key.MotionKeyTimeCycle A[IMMUTABLE_TYPE, THIS]), (r2v0 'type' int A[D('type' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'value' int A[D('value' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000f \-\> B:11:?, CROSS_EDGE: B:16:0x000b \-\> B:17:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.motion.utils.TypedValues.setValue(int, int):boolean]\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_12 -> Node_15;
Node_12 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_15 -> Node_19;
Node_19 -> Node_11;
Node_14 -> Node_11;
Node_10 -> Node_12;
Node_13 -> Node_14;
}

