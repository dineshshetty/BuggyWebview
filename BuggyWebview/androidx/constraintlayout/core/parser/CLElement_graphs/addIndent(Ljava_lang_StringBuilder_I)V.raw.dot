digraph "CFG forandroidx.constraintlayout.core.parser.CLElement.addIndent(Ljava\/lang\/StringBuilder;I)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:86)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0001|LOOP_START\lLOOP:0: B:10:0x0001\-\>B:11:0x0003\l|0x0001: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r4 I:??[int, byte, short, char] A[D('indent' int)])  \-\> B:13:0x000b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0003|LOOP_END\lLOOP:0: B:10:0x0001\-\>B:11:0x0003\l|0x0003: CONST  (r1 I:??[int, float, short, byte, char]) = (32 ??[int, float, short, byte, char])  (LINE:87)\l0x0005: INVOKE  (r3 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder)]), (r1 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0008: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:86)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\l|0x000b: RETURN    (LINE:89)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.core.parser.CLElement.addIndent((r2 'this' I:androidx.constraintlayout.core.parser.CLElement A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.StringBuilder A[D('builder' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('indent' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0003 \-\> B:10:0x0001\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000b: r0 'i' I\l  \-1 \-0x000b: r3 'builder' Ljava\/lang\/StringBuilder;\l  \-1 \-0x000b: r4 'indent' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_10;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

