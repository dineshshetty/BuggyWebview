digraph "CFG forandroidx.constraintlayout.core.parser.CLContainer.get(I)Landroidx\/constraintlayout\/core\/parser\/CLElement;" {
subgraph cluster_Region_887141175 {
label = "R(1:(2:(1:5)|(2:7|8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1454354720 {
label = "R(2:(1:5)|(2:7|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1389555973 {
label = "IF [B:11:0x0000, B:13:0x0008] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|if (r4 \>= 0) goto L2\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|ADDED_TO_REGION\l|if (r4 \< r3.mElements.size()) goto L4\l}"];
subgraph cluster_Region_55079205 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0012|RETURN\l|return r3.mElements.get(r4)\l}"];
}
}
subgraph cluster_Region_838861680 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0013}"];
Node_17 [shape=record,label="{17\:\ 0x0029|throw new androidx.constraintlayout.core.parser.CLParsingException(\"no element at index \" + r4, r3)\l}"];
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0002}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x000a}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.constraintlayout.core.parser.CLElement androidx.constraintlayout.core.parser.CLContainer.get((r3v0 'this' androidx.constraintlayout.core.parser.CLContainer A[IMMUTABLE_TYPE, THIS]), (r4v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0029 \-\> B:10:?, CROSS_EDGE: B:11:0x0000 \-\> B:16:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Landroidx\/constraintlayout\/core\/parser\/CLParsingException;]\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_11 -> Node_16[style=dashed];
Node_13 -> Node_14;
Node_13 -> Node_16[style=dashed];
Node_15 -> Node_10;
Node_16 -> Node_17;
Node_17 -> Node_10;
Node_9 -> Node_11;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

