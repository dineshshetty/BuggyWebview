digraph "CFG forandroidx.constraintlayout.core.parser.CLKey.toFormattedJSON(II)Ljava\/lang\/String;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:61)\l0x0002: INVOKE  (r1 I:java.lang.String) = (r6 I:androidx.constraintlayout.core.parser.CLKey) type: VIRTUAL call: androidx.constraintlayout.core.parser.CLKey.getDebugName():java.lang.String A[MD:():java.lang.String (m)]\l0x0006: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: DIRECT call: java.lang.StringBuilder.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l0x0009: INVOKE  \l  (r6 I:androidx.constraintlayout.core.parser.CLKey)\l  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)])\l  (r7 I:int A[D('indent' int)])\l type: VIRTUAL call: androidx.constraintlayout.core.parser.CLKey.addIndent(java.lang.StringBuilder, int):void A[MD:(java.lang.StringBuilder, int):void (m)] (LINE:62)\l0x000c: INVOKE  (r1 I:java.lang.String) = (r6 I:androidx.constraintlayout.core.parser.CLKey) type: VIRTUAL call: androidx.constraintlayout.core.parser.CLKey.content():java.lang.String A[MD:():java.lang.String (m)] (LINE:63)\l0x0010: IGET  (r2 I:java.util.ArrayList\<androidx.constraintlayout.core.parser.CLElement\>) = (r6 I:androidx.constraintlayout.core.parser.CLKey) androidx.constraintlayout.core.parser.CLKey.mElements java.util.ArrayList  (LINE:64)\l0x0012: INVOKE  (r2 I:int) = (r2 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|0x0016: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:34:0x006d \l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|0x0018: INVOKE  \l  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)])\l  (r1 I:java.lang.String A[D('content' java.lang.String)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)] (LINE:65)\l0x001b: CONST_STR  (r2 I:java.lang.String) =  \": \"  (LINE:66)\l0x001d: INVOKE  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0020: SGET  (r2 I:java.util.ArrayList\<java.lang.String\>) =  androidx.constraintlayout.core.parser.CLKey.sections java.util.ArrayList  (LINE:67)\l0x0022: INVOKE  (r2 I:boolean) = (r2 I:java.util.ArrayList), (r1 I:java.lang.Object A[D('content' java.lang.String)]) type: VIRTUAL call: java.util.ArrayList.contains(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|0x0026: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0029 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0028|0x0028: CONST  (r8 I:??[int, float, short, byte, char] A[D('forceIndent' int)]) = (3 ??[int, float, short, byte, char])  (LINE:68)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0029|0x0029: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:70)\l}"];
Node_26 [shape=record,label="{26\:\ 0x002a|0x002a: IF  (r8 I:??[int, byte, short, char] A[D('forceIndent' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:28:0x003e \l}"];
Node_27 [shape=record,label="{27\:\ 0x002c|0x002c: IGET  (r3 I:java.util.ArrayList\<androidx.constraintlayout.core.parser.CLElement\>) = (r6 I:androidx.constraintlayout.core.parser.CLKey) androidx.constraintlayout.core.parser.CLKey.mElements java.util.ArrayList  (LINE:71)\l0x002e: INVOKE  (r2 I:java.lang.Object) = (r3 I:java.util.ArrayList), (r2 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0032: CHECK_CAST (r2 I:androidx.constraintlayout.core.parser.CLElement) = (androidx.constraintlayout.core.parser.CLElement) (r2 I:??[OBJECT, ARRAY]) \l0x0034: ARITH  (r3 I:int) = (r8 I:int A[D('forceIndent' int)]) + (\-1 int) \l0x0036: INVOKE  (r2 I:java.lang.String) = (r2 I:androidx.constraintlayout.core.parser.CLElement), (r7 I:int A[D('indent' int)]), (r3 I:int) type: VIRTUAL call: androidx.constraintlayout.core.parser.CLElement.toFormattedJSON(int, int):java.lang.String A[MD:(int, int):java.lang.String (m)]\l0x003a: INVOKE  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0068|0x0068: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:80)\l}"];
Node_33 [shape=record,label="{33\:\ 0x006c|RETURN\l|0x006c: RETURN  (r2 I:java.lang.String) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x003e|0x003e: IGET  (r3 I:java.util.ArrayList\<androidx.constraintlayout.core.parser.CLElement\>) = (r6 I:androidx.constraintlayout.core.parser.CLKey) androidx.constraintlayout.core.parser.CLKey.mElements java.util.ArrayList  (LINE:73)\l0x0040: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.util.ArrayList), (r2 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0044: CHECK_CAST (r3 I:androidx.constraintlayout.core.parser.CLElement) = (androidx.constraintlayout.core.parser.CLElement) (r3 I:??[OBJECT, ARRAY]) \l0x0046: INVOKE  (r3 I:java.lang.String) = (r3 I:androidx.constraintlayout.core.parser.CLElement) type: VIRTUAL call: androidx.constraintlayout.core.parser.CLElement.toJSON():java.lang.String A[MD:():java.lang.String (m)]\l0x004a: INVOKE  (r4 I:int) = (r3 I:java.lang.String A[D('val' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:74)\l0x004e: ARITH  (r4 I:int) = (r4 I:int) + (r7 I:int A[D('indent' int)]) \l0x004f: SGET  (r5 I:int) =  androidx.constraintlayout.core.parser.CLKey.MAX_LINE int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0051|0x0051: IF  (r4 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char])  \-\> B:31:0x0057 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0053|0x0053: INVOKE  \l  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)])\l  (r3 I:java.lang.String A[D('val' java.lang.String)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)] (LINE:75)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0057|0x0057: IGET  (r4 I:java.util.ArrayList\<androidx.constraintlayout.core.parser.CLElement\>) = (r6 I:androidx.constraintlayout.core.parser.CLKey) androidx.constraintlayout.core.parser.CLKey.mElements java.util.ArrayList  (LINE:77)\l0x0059: INVOKE  (r2 I:java.lang.Object) = (r4 I:java.util.ArrayList), (r2 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x005d: CHECK_CAST (r2 I:androidx.constraintlayout.core.parser.CLElement) = (androidx.constraintlayout.core.parser.CLElement) (r2 I:??[OBJECT, ARRAY]) \l0x005f: ARITH  (r4 I:int) = (r8 I:int A[D('forceIndent' int)]) + (\-1 int) \l0x0061: INVOKE  (r2 I:java.lang.String) = (r2 I:androidx.constraintlayout.core.parser.CLElement), (r7 I:int A[D('indent' int)]), (r4 I:int) type: VIRTUAL call: androidx.constraintlayout.core.parser.CLElement.toFormattedJSON(int, int):java.lang.String A[MD:(int, int):java.lang.String (m)]\l0x0065: INVOKE  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x006d|0x006d: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:82)\l0x006f: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0072: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:java.lang.String A[D('content' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0075: CONST_STR  (r3 I:java.lang.String) =  \": \<\> \" \l0x0077: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x007a: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x007e|RETURN\l|0x007e: RETURN  (r2 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.constraintlayout.core.parser.CLKey.toFormattedJSON((r6 'this' I:androidx.constraintlayout.core.parser.CLKey A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('indent' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('forceIndent' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0053 \-\> B:32:0x0068, CROSS_EDGE: B:31:0x0057 \-\> B:32:0x0068, CROSS_EDGE: B:23:0x0026 \-\> B:25:0x0029, CROSS_EDGE: B:35:0x007e \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x004a\-0x0068: r3 'val' Ljava\/lang\/String;\l  0x0009\-0x007e: r0 'json' Ljava\/lang\/StringBuilder;\l  0x0010\-0x007e: r1 'content' Ljava\/lang\/String;\l  \-1 \-0x007e: r7 'indent' I\l  \-1 \-0x007e: r8 'forceIndent' I\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.parser.CLElement.toFormattedJSON(int, int):java.lang.String]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_34;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_34 -> Node_35;
Node_35 -> Node_19;
}

