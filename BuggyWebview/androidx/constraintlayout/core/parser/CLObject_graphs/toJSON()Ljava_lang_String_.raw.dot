digraph "CFG forandroidx.constraintlayout.core.parser.CLObject.toJSON()Ljava\/lang\/String;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:31)\l0x0002: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0004: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0007: INVOKE  (r2 I:java.lang.String) = (r5 I:androidx.constraintlayout.core.parser.CLObject) type: VIRTUAL call: androidx.constraintlayout.core.parser.CLObject.getDebugName():java.lang.String A[MD:():java.lang.String (m)]\l0x000b: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x000e: CONST_STR  (r2 I:java.lang.String) =  \"\{ \" \l0x0010: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0013: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0017: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: DIRECT call: java.lang.StringBuilder.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l0x001a: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:32)\l0x001b: IGET  (r2 I:java.util.ArrayList\<androidx.constraintlayout.core.parser.CLElement\>) = (r5 I:androidx.constraintlayout.core.parser.CLObject) androidx.constraintlayout.core.parser.CLObject.mElements java.util.ArrayList  (LINE:33)\l0x001d: INVOKE  (r2 I:java.util.Iterator) = (r2 I:java.util.ArrayList) type: VIRTUAL call: java.util.ArrayList.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0021|LOOP_START\lLOOP:0: B:18:0x0021\-\>B:24:0x0036\l|0x0021: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|0x0025: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x003e \l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|0x0027: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002b: CHECK_CAST (r3 I:androidx.constraintlayout.core.parser.CLElement) = (androidx.constraintlayout.core.parser.CLElement) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x002d|0x002d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0035  (LINE:34)\l}"];
Node_22 [shape=record,label="{22\:\ 0x002f|0x002f: CONST_STR  (r4 I:java.lang.String) =  \", \"  (LINE:35)\l0x0031: INVOKE  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0036|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0036|LOOP_END\lLOOP:0: B:18:0x0021\-\>B:24:0x0036\l|0x0036: INVOKE  (r4 I:java.lang.String) = (r3 I:androidx.constraintlayout.core.parser.CLElement A[D('element' androidx.constraintlayout.core.parser.CLElement)]) type: VIRTUAL call: androidx.constraintlayout.core.parser.CLElement.toJSON():java.lang.String A[MD:():java.lang.String (m)] (LINE:39)\l0x003a: INVOKE  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0035|0x0035: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('first' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:37)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0036|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x003e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x003e|0x003e: CONST_STR  (r2 I:java.lang.String) =  \" \}\"  (LINE:41)\l0x0040: INVOKE  (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0043: INVOKE  (r2 I:java.lang.String) = (r0 I:java.lang.StringBuilder A[D('json' java.lang.StringBuilder)]) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:42)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0047|RETURN\l|0x0047: RETURN  (r2 I:java.lang.String) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.String androidx.constraintlayout.core.parser.CLObject.toJSON((r5 'this' I:androidx.constraintlayout.core.parser.CLObject A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0036 \-\> B:18:0x0021, CROSS_EDGE: B:23:0x0035 \-\> B:24:0x0036\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002d\-0x003d: r3 'element' Landroidx\/constraintlayout\/core\/parser\/CLElement;\l  0x001a\-0x0047: r0 'json' Ljava\/lang\/StringBuilder;\l  0x001b\-0x0047: r1 'first' Z\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.parser.CLElement.toJSON():java.lang.String]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_27;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_29;
Node_29 -> Node_24;
Node_24 -> Node_18;
Node_23 -> Node_28;
Node_28 -> Node_24;
Node_27 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_16;
}

