digraph "CFG forandroidx.constraintlayout.core.PriorityGoalRow.getPivotCandidate(Landroidx\/constraintlayout\/core\/LinearSystem;[Z)Landroidx\/constraintlayout\/core\/SolverVariable;" {
subgraph cluster_Region_863758341 {
label = "R(3:1|(3:4|(2:6|(1:(1:10)(0))(1:(1:16)(0)))(0)|12)|(2:(1:22)|(1:25)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = \-1\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_48086550 {
label = "LOOP:0: (3:4|(2:6|(1:(1:10)(0))(1:(1:16)(0)))(0)|12)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0005|if (r1 \< r5.numGoals) goto L4\l}"];
subgraph cluster_Region_958559928 {
label = "R(3:4|(2:6|(1:(1:10)(0))(1:(1:16)(0)))(0)|12)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0007|androidx.constraintlayout.core.SolverVariable r2 = r5.arrayGoals[r1]\l}"];
subgraph cluster_IfRegion_668336455 {
label = "IF [B:6:0x000f] THEN: R(2:6|(1:(1:10)(0))(1:(1:16)(0))) ELSE: R(0)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000f|if (r7[r2.f13id] == false) goto L6\l}"];
subgraph cluster_Region_1728724148 {
label = "R(2:6|(1:(1:10)(0))(1:(1:16)(0)))";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0012|r5.accessor.init(r2)\l}"];
subgraph cluster_IfRegion_1295296138 {
label = "IF [B:9:0x0017] THEN: R(1:(1:10)(0)) ELSE: R(1:(1:16)(0))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0017|if (r0 == (\-1)) goto L8\l}"];
subgraph cluster_Region_896866209 {
label = "R(1:(1:10)(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_661849177 {
label = "IF [B:11:0x001f] THEN: R(1:10) ELSE: R(0)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x001f|if (r5.accessor.isNegative() != false) goto L10\l}"];
subgraph cluster_Region_336628003 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0021|r0 = r1\l}"];
}
subgraph cluster_Region_1759806905 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
subgraph cluster_Region_1095439052 {
label = "R(1:(1:16)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_560157929 {
label = "IF [B:14:0x002d] THEN: R(1:16) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x002d|if (r5.accessor.isSmallerThan(r5.arrayGoals[r0]) != false) goto L16\l}"];
subgraph cluster_Region_1601209986 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x002f|r0 = r1\l}"];
}
subgraph cluster_Region_1545526619 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
subgraph cluster_Region_1676692301 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_16 [shape=record,label="{16\:\ 0x0030|LOOP_END\lLOOP:0: B:3:0x0002\-\>B:16:0x0030\lPHI: r0 \l  PHI: (r0v2 'pivot' int) = (r0v1 'pivot' int), (r0v1 'pivot' int), (r0v3 'pivot' int), (r0v1 'pivot' int), (r0v4 'pivot' int) binds: [B:27:0x0030, B:26:0x0030, B:23:0x0030, B:24:0x0030, B:25:0x0030] A[DONT_GENERATE, DONT_INLINE]\l|r1++\l}"];
}
}
subgraph cluster_Region_796251079 {
label = "R(2:(1:22)|(1:25))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2054980305 {
label = "IF [B:17:0x0033] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0033|if (r0 == (\-1)) goto L22\l}"];
subgraph cluster_Region_909207959 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0035|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1781876012 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x003b|RETURN\l|return r5.arrayGoals[r0]\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x0002|LOOP_START\lLOOP:0: B:3:0x0002\-\>B:16:0x0030\lPHI: r0 r1 \l  PHI: (r0v1 'pivot' int) = (r0v0 'pivot' int), (r0v2 'pivot' int) binds: [B:2:0x0000, B:16:0x0030] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v5 'i' int) binds: [B:2:0x0000, B:16:0x0030] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0019}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0030|SYNTHETIC\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0030|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0023}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0030|SYNTHETIC\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0030|SYNTHETIC\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0030|SYNTHETIC\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0033|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0037}"];
MethodNode[shape=record,label="{public androidx.constraintlayout.core.SolverVariable androidx.constraintlayout.core.PriorityGoalRow.getPivotCandidate((r5v0 'this' androidx.constraintlayout.core.PriorityGoalRow A[IMMUTABLE_TYPE, THIS]), (r6v0 'system' androidx.constraintlayout.core.LinearSystem A[D('system' androidx.constraintlayout.core.LinearSystem), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'avoid' boolean[] A[D('avoid' boolean[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:16:0x0030 \-\> B:3:0x0002, CROSS_EDGE: B:11:0x001f \-\> B:16:0x0030, CROSS_EDGE: B:15:0x002f \-\> B:16:0x0030, CROSS_EDGE: B:14:0x002d \-\> B:16:0x0030, CROSS_EDGE: B:6:0x000f \-\> B:16:0x0030, CROSS_EDGE: B:21:0x003b \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.constraintlayout.core.LinearSystem.Row.getPivotCandidate(androidx.constraintlayout.core.LinearSystem, boolean[]):androidx.constraintlayout.core.SolverVariable]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_22[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_27[style=dashed];
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_9 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_11 -> Node_24[style=dashed];
Node_12 -> Node_25;
Node_14 -> Node_15;
Node_14 -> Node_26[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_3;
Node_17 -> Node_18;
Node_17 -> Node_20[style=dashed];
Node_18 -> Node_1;
Node_21 -> Node_1;
Node_0 -> Node_2;
Node_3 -> Node_4;
Node_10 -> Node_11;
Node_25 -> Node_16;
Node_24 -> Node_16;
Node_13 -> Node_14;
Node_23 -> Node_16;
Node_26 -> Node_16;
Node_27 -> Node_16;
Node_22 -> Node_17;
Node_20 -> Node_21;
}

