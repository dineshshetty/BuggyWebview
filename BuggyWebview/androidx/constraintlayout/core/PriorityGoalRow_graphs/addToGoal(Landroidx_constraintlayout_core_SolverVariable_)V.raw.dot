digraph "CFG forandroidx.constraintlayout.core.PriorityGoalRow.addToGoal(Landroidx\/constraintlayout\/core\/SolverVariable;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.numGoals int  (LINE:197)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0004: IGET  (r2 I:androidx.constraintlayout.core.SolverVariable[]) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.arrayGoals androidx.constraintlayout.core.SolverVariable[] \l0x0006: ARRAY_LENGTH  (r3 I:int) = (r2 I:??[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char]) \<= (r3 I:??[int, byte, short, char])  \-\> B:5:0x001f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0009|0x0009: ARRAY_LENGTH  (r0 I:int) = (r2 I:??[])  (LINE:198)\l0x000a: ARITH  (r0 I:int) = (r0 I:int) * (2 int) \l0x000c: INVOKE  (r0 I:java.lang.Object[]) = (r2 I:java.lang.Object[]), (r0 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x0010: CHECK_CAST (r0 I:androidx.constraintlayout.core.SolverVariable[]) = (androidx.constraintlayout.core.SolverVariable[]) (r0 I:??[OBJECT, ARRAY]) \l0x0012: IPUT  (r0 I:androidx.constraintlayout.core.SolverVariable[]), (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.arrayGoals androidx.constraintlayout.core.SolverVariable[] \l0x0014: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[])  (LINE:199)\l0x0015: ARITH  (r2 I:int) = (r2 I:int) * (2 int) \l0x0017: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:java.lang.Object[]), (r2 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x001b: CHECK_CAST (r0 I:androidx.constraintlayout.core.SolverVariable[]) = (androidx.constraintlayout.core.SolverVariable[]) (r0 I:??[OBJECT, ARRAY]) \l0x001d: IPUT  (r0 I:androidx.constraintlayout.core.SolverVariable[]), (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.sortArray androidx.constraintlayout.core.SolverVariable[] \l}"];
Node_5 [shape=record,label="{5\:\ 0x001f|0x001f: IGET  (r0 I:androidx.constraintlayout.core.SolverVariable[]) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.arrayGoals androidx.constraintlayout.core.SolverVariable[]  (LINE:201)\l0x0021: IGET  (r2 I:int) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.numGoals int \l0x0023: APUT  \l  (r0 I:??[OBJECT, ARRAY][])\l  (r2 I:??[int, short, byte, char])\l  (r6 I:??[OBJECT, ARRAY] A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l \l0x0025: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int)  (LINE:202)\l0x0026: IPUT  (r2 I:int), (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.numGoals int \l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|0x0028: IF  (r2 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:17:0x005e  (LINE:204)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002a|0x002a: ARITH  (r2 I:int) = (r2 I:int) \- (r1 I:int) \l0x002b: AGET  (r0 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]) \l0x002d: IGET  (r0 I:int) = (r0 I:androidx.constraintlayout.core.SolverVariable) androidx.constraintlayout.core.SolverVariable.id int \l0x002f: IGET  (r2 I:int) = (r6 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)]) androidx.constraintlayout.core.SolverVariable.id int \l}"];
Node_8 [shape=record,label="{8\:\ 0x0031|0x0031: IF  (r0 I:??[int, byte, short, char]) \<= (r2 I:??[int, byte, short, char])  \-\> B:17:0x005e \l}"];
Node_9 [shape=record,label="{9\:\ 0x0033|0x0033: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:205)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|LOOP_START\lLOOP:0: B:10:0x0034\-\>B:12:0x0038\l|0x0034: IGET  (r2 I:int) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.numGoals int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0036|0x0036: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:19:0x0043 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|LOOP_END\lLOOP:0: B:10:0x0034\-\>B:12:0x0038\l|0x0038: IGET  (r2 I:androidx.constraintlayout.core.SolverVariable[]) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.sortArray androidx.constraintlayout.core.SolverVariable[]  (LINE:206)\l0x003a: IGET  (r3 I:androidx.constraintlayout.core.SolverVariable[]) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.arrayGoals androidx.constraintlayout.core.SolverVariable[] \l0x003c: AGET  (r3 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('i' int)]) \l0x003e: APUT  (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[OBJECT, ARRAY]) \l0x0040: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:205)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0043|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: IGET  (r0 I:androidx.constraintlayout.core.SolverVariable[] A[D('i' int)]) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.sortArray androidx.constraintlayout.core.SolverVariable[]  (LINE:208)\l0x0045: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0046: NEW_INSTANCE  (r4 I:androidx.constraintlayout.core.PriorityGoalRow$1) =  androidx.constraintlayout.core.PriorityGoalRow$1 \l0x0048: INVOKE  (r4 I:androidx.constraintlayout.core.PriorityGoalRow$1), (r5 I:androidx.constraintlayout.core.PriorityGoalRow) type: DIRECT call: androidx.constraintlayout.core.PriorityGoalRow.1.\<init\>(androidx.constraintlayout.core.PriorityGoalRow):void A[MD:(androidx.constraintlayout.core.PriorityGoalRow):void (m)]\l0x004b: INVOKE  (r0 I:java.lang.Object[]), (r3 I:int), (r2 I:int), (r4 I:java.util.Comparator) type: STATIC call: java.util.Arrays.sort(java.lang.Object[], int, int, java.util.Comparator):void A[MD:\<T\>:(T[], int, int, java.util.Comparator\<? super T\>):void (c)]\l0x004e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:214)\l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|LOOP_START\lLOOP:1: B:14:0x004f\-\>B:16:0x0053\l|0x004f: IGET  (r2 I:int) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.numGoals int \l}"];
Node_15 [shape=record,label="{15\:\ 0x0051|0x0051: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:20:0x005e \l}"];
Node_16 [shape=record,label="{16\:\ 0x0053|LOOP_END\lLOOP:1: B:14:0x004f\-\>B:16:0x0053\l|0x0053: IGET  (r2 I:androidx.constraintlayout.core.SolverVariable[]) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.arrayGoals androidx.constraintlayout.core.SolverVariable[]  (LINE:215)\l0x0055: IGET  (r3 I:androidx.constraintlayout.core.SolverVariable[]) = (r5 I:androidx.constraintlayout.core.PriorityGoalRow) androidx.constraintlayout.core.PriorityGoalRow.sortArray androidx.constraintlayout.core.SolverVariable[] \l0x0057: AGET  (r3 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('i' int)]) \l0x0059: APUT  (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('i' int)]), (r3 I:??[OBJECT, ARRAY]) \l0x005b: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:214)\l}"];
Node_20 [shape=record,label="{20\:\ 0x005e|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: IPUT  \l  (r1 I:boolean)\l  (r6 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l androidx.constraintlayout.core.SolverVariable.inGoal boolean  (LINE:219)\l0x0060: INVOKE  \l  (r6 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable)])\l  (r5 I:androidx.constraintlayout.core.ArrayRow)\l type: VIRTUAL call: androidx.constraintlayout.core.SolverVariable.addToRow(androidx.constraintlayout.core.ArrayRow):void A[MD:(androidx.constraintlayout.core.ArrayRow):void (m)] (LINE:220)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0063|RETURN\l|0x0063: RETURN    (LINE:221)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void androidx.constraintlayout.core.PriorityGoalRow.addToGoal((r5 'this' I:androidx.constraintlayout.core.PriorityGoalRow A[IMMUTABLE_TYPE, THIS]), (r6 I:androidx.constraintlayout.core.SolverVariable A[D('variable' androidx.constraintlayout.core.SolverVariable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0038 \-\> B:10:0x0034, BACK_EDGE: B:16:0x0053 \-\> B:14:0x004f, CROSS_EDGE: B:8:0x0031 \-\> B:17:0x005e, CROSS_EDGE: B:6:0x0028 \-\> B:17:0x005e, CROSS_EDGE: B:3:0x0007 \-\> B:5:0x001f\lDebug Info:\l  0x0034\-0x0043: r0 'i' I\l  0x004f\-0x005e: r0 'i' I\l  \-1 \-0x0063: r6 'variable' Landroidx\/constraintlayout\/core\/SolverVariable;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_17;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_19;
Node_12 -> Node_10;
Node_19 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_14;
Node_20 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
}

