digraph "CFG forandroidx.constraintlayout.widget.ConstraintSet.createVerticalChain(IIII[I[FI)V" {
subgraph cluster_Region_853342282 {
label = "R(1:(2:(1:25)|(1:(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1013950822 {
label = "R(2:(1:25)|(1:(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_694724990 {
label = "IF [B:30:0x0009] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0009|if (r17.length \< 2) goto L24\l}"];
subgraph cluster_Region_1007097597 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x0084|throw new java.lang.IllegalArgumentException(\"must have 2 or more widgets in a chain\")\l}"];
}
}
subgraph cluster_Region_1775024031 {
label = "R(1:(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22)))";
node [shape=record,color=blue];
subgraph cluster_Region_682166105 {
label = "R(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1155954795 {
label = "IF [B:31:0x000b, B:33:0x000f] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x000b|if (r18 != null) goto L4\l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|ADDED_TO_REGION\l|if (r18.length != r17.length) goto L6\l}"];
subgraph cluster_Region_1087520500 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0017|throw new java.lang.IllegalArgumentException(\"must have 2 or more widgets in a chain\")\l}"];
}
}
subgraph cluster_Region_802985239 {
label = "R(4:(1:11)|12|(3:15|(1:17)(0)|19)|22)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1286478142 {
label = "IF [B:38:0x0019] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0019|if (r18 != null) goto L11\l}"];
subgraph cluster_Region_744315965 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x001b|get(r17[0]).layout.verticalWeight = r18[0]\l}"];
}
}
Node_40 [shape=record,label="{40\:\ 0x0027|get(r17[0]).layout.verticalChainStyle = r19\lconnect(r17[0], 3, r13, r14, 0)\lint r10 = 1\l}"];
subgraph cluster_LoopRegion_749183406 {
label = "LOOP:0: (3:15|(1:17)(0)|19)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0040|if (r10 \< r17.length) goto L15\l}"];
subgraph cluster_Region_1679153829 {
label = "R(3:15|(1:17)(0)|19)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0042|int r11 = r17[r10]\lconnect(r17[r10], 3, r17[r10 \- 1], 4, 0)\lconnect(r17[r10 \- 1], 4, r17[r10], 3, 0)\l}"];
subgraph cluster_IfRegion_1527729405 {
label = "IF [B:44:0x005d] THEN: R(1:17) ELSE: R(0)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x005d|if (r18 != null) goto L17\l}"];
subgraph cluster_Region_1852470833 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x005f|get(r17[r10]).layout.verticalWeight = r18[r10]\l}"];
}
subgraph cluster_Region_175893750 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_46 [shape=record,label="{46\:\ 0x006b|LOOP_END\lLOOP:0: B:41:0x003f\-\>B:46:0x006b\l|r10++\l}"];
}
}
Node_47 [shape=record,label="{47\:\ 0x006e|connect(r17[r17.length \- 1], 4, r15, r16, 0)\l}"];
}
}
}
}
}
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0000}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x000d}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0012}"];
Node_28 [shape=record,color=red,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0018}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x003f|LOOP_START\lLOOP:0: B:41:0x003f\-\>B:46:0x006b\lPHI: r10 \l  PHI: (r10v1 'i' int) = (r10v0 'i' int), (r10v2 'i' int) binds: [B:40:0x0027, B:46:0x006b] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x006b|SYNTHETIC\l}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x006b|SYNTHETIC\l}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x006e|SYNTHETIC\l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x007c}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x007d}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.widget.ConstraintSet.createVerticalChain((r12v0 'this' androidx.constraintlayout.widget.ConstraintSet A[IMMUTABLE_TYPE, THIS]), (r13v0 'topId' int A[D('topId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'topSide' int A[D('topSide' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'bottomId' int A[D('bottomId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 'bottomSide' int A[D('bottomSide' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'chainIds' int[] A[D('chainIds' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'weights' float[] A[D('weights' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'style' int A[D('style' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x006b \-\> B:41:0x003f, CROSS_EDGE: B:44:0x005d \-\> B:46:0x006b, CROSS_EDGE: B:48:0x007c \-\> B:28:?, CROSS_EDGE: B:38:0x0019 \-\> B:40:0x0027, CROSS_EDGE: B:31:0x000b \-\> B:37:0x0018, CROSS_EDGE: B:50:0x0084 \-\> B:28:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [topId, topSide, bottomId, bottomSide, chainIds, weights, style]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_27;Node_30 -> Node_31[style=dashed];
Node_30 -> Node_49;
Node_50 -> Node_28;
Node_31 -> Node_32;
Node_31 -> Node_37[style=dashed];
Node_33 -> Node_35;
Node_33 -> Node_37[style=dashed];
Node_36 -> Node_28;
Node_38 -> Node_39;
Node_38 -> Node_40[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_42 -> Node_51[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_44 -> Node_53[style=dashed];
Node_45 -> Node_52;
Node_46 -> Node_41;
Node_47 -> Node_48;
Node_27 -> Node_29;
Node_29 -> Node_30;
Node_32 -> Node_33;
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_41 -> Node_42;
Node_52 -> Node_46;
Node_53 -> Node_46;
Node_51 -> Node_47;
Node_48 -> Node_28;
Node_49 -> Node_50;
}

