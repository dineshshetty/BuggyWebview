digraph "CFG forandroidx.constraintlayout.widget.ConstraintSet.createHorizontalChain(IIII[I[FIII)V" {
subgraph cluster_Region_1895845551 {
label = "R(1:(2:(1:25)|(1:(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1436801890 {
label = "R(2:(1:25)|(1:(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1301052416 {
label = "IF [B:30:0x0009] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0009|if (r17.length \< 2) goto L24\l}"];
subgraph cluster_Region_1121081502 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x008a|throw new java.lang.IllegalArgumentException(\"must have 2 or more widgets in a chain\")\l}"];
}
}
subgraph cluster_Region_827589469 {
label = "R(1:(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22)))";
node [shape=record,color=blue];
subgraph cluster_Region_2053617374 {
label = "R(2:(1:7)|(4:(1:11)|12|(3:15|(1:17)(0)|19)|22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1411754478 {
label = "IF [B:31:0x000b, B:33:0x000f] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x000b|if (r18 != null) goto L4\l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|ADDED_TO_REGION\l|if (r18.length != r17.length) goto L6\l}"];
subgraph cluster_Region_73604444 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0017|throw new java.lang.IllegalArgumentException(\"must have 2 or more widgets in a chain\")\l}"];
}
}
subgraph cluster_Region_1205540681 {
label = "R(4:(1:11)|12|(3:15|(1:17)(0)|19)|22)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_364689510 {
label = "IF [B:38:0x0019] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0019|if (r18 != null) goto L11\l}"];
subgraph cluster_Region_1378499913 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x001b|get(r17[0]).layout.horizontalWeight = r18[0]\l}"];
}
}
Node_40 [shape=record,label="{40\:\ 0x0027|get(r17[0]).layout.horizontalChainStyle = r19\lconnect(r17[0], r20, r13, r14, \-1)\lint r10 = 1\l}"];
subgraph cluster_LoopRegion_634048560 {
label = "LOOP:0: (3:15|(1:17)(0)|19)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0041|if (r10 \< r17.length) goto L15\l}"];
subgraph cluster_Region_423406153 {
label = "R(3:15|(1:17)(0)|19)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0043|int r11 = r17[r10]\lconnect(r17[r10], r20, r17[r10 \- 1], r21, \-1)\lconnect(r17[r10 \- 1], r21, r17[r10], r20, \-1)\l}"];
subgraph cluster_IfRegion_725193787 {
label = "IF [B:44:0x0062] THEN: R(1:17) ELSE: R(0)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x0062|if (r18 != null) goto L17\l}"];
subgraph cluster_Region_1610086123 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x0064|get(r17[r10]).layout.horizontalWeight = r18[r10]\l}"];
}
subgraph cluster_Region_934082045 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_46 [shape=record,label="{46\:\ 0x0070|LOOP_END\lLOOP:0: B:41:0x0040\-\>B:46:0x0070\l|r10++\l}"];
}
}
Node_47 [shape=record,label="{47\:\ 0x0073|connect(r17[r17.length \- 1], r21, r15, r16, \-1)\l}"];
}
}
}
}
}
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0000}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x000d}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0012}"];
Node_28 [shape=record,color=red,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0018}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0040|LOOP_START\lLOOP:0: B:41:0x0040\-\>B:46:0x0070\lPHI: r10 \l  PHI: (r10v1 'i' int) = (r10v0 'i' int), (r10v2 'i' int) binds: [B:40:0x0027, B:46:0x0070] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x0070|SYNTHETIC\l}"];
Node_53 [shape=record,color=red,label="{53\:\ 0x0070|SYNTHETIC\l}"];
Node_51 [shape=record,color=red,label="{51\:\ 0x0073|SYNTHETIC\l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x0082}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x0083}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.widget.ConstraintSet.createHorizontalChain((r12v0 'this' androidx.constraintlayout.widget.ConstraintSet A[IMMUTABLE_TYPE, THIS]), (r13v0 'leftId' int A[D('leftId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14v0 'leftSide' int A[D('leftSide' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15v0 'rightId' int A[D('rightId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r16v0 'rightSide' int A[D('rightSide' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'chainIds' int[] A[D('chainIds' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'weights' float[] A[D('weights' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'style' int A[D('style' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20v0 'left' int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r21v0 'right' int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0070 \-\> B:41:0x0040, CROSS_EDGE: B:44:0x0062 \-\> B:46:0x0070, CROSS_EDGE: B:48:0x0082 \-\> B:28:?, CROSS_EDGE: B:38:0x0019 \-\> B:40:0x0027, CROSS_EDGE: B:31:0x000b \-\> B:37:0x0018, CROSS_EDGE: B:50:0x008a \-\> B:28:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [leftId, leftSide, rightId, rightSide, chainIds, weights, style, left, right]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_27;Node_30 -> Node_31[style=dashed];
Node_30 -> Node_49;
Node_50 -> Node_28;
Node_31 -> Node_32;
Node_31 -> Node_37[style=dashed];
Node_33 -> Node_35;
Node_33 -> Node_37[style=dashed];
Node_36 -> Node_28;
Node_38 -> Node_39;
Node_38 -> Node_40[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_42 -> Node_43;
Node_42 -> Node_51[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_44 -> Node_53[style=dashed];
Node_45 -> Node_52;
Node_46 -> Node_41;
Node_47 -> Node_48;
Node_27 -> Node_29;
Node_29 -> Node_30;
Node_32 -> Node_33;
Node_35 -> Node_36;
Node_37 -> Node_38;
Node_41 -> Node_42;
Node_52 -> Node_46;
Node_53 -> Node_46;
Node_51 -> Node_47;
Node_48 -> Node_28;
Node_49 -> Node_50;
}

