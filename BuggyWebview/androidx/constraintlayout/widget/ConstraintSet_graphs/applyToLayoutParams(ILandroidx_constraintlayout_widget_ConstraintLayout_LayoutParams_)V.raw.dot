digraph "CFG forandroidx.constraintlayout.widget.ConstraintSet.applyToLayoutParams(ILandroidx\/constraintlayout\/widget\/ConstraintLayout$LayoutParams;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IGET  (r0 I:java.util.HashMap\<java.lang.Integer, androidx.constraintlayout.widget.ConstraintSet$Constraint\>) = (r2 I:androidx.constraintlayout.widget.ConstraintSet) androidx.constraintlayout.widget.ConstraintSet.mConstraints java.util.HashMap  (LINE:2355)\l0x0002: INVOKE  (r1 I:java.lang.Integer) = (r3 I:int A[D('id' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.HashMap), (r1 I:java.lang.Object) type: VIRTUAL call: java.util.HashMap.containsKey(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:? \l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|0x000c: IGET  (r0 I:java.util.HashMap\<java.lang.Integer, androidx.constraintlayout.widget.ConstraintSet$Constraint\>) = (r2 I:androidx.constraintlayout.widget.ConstraintSet) androidx.constraintlayout.widget.ConstraintSet.mConstraints java.util.HashMap  (LINE:2356)\l0x000e: INVOKE  (r1 I:java.lang.Integer) = (r3 I:int A[D('id' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0012: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.HashMap), (r1 I:java.lang.Object) type: VIRTUAL call: java.util.HashMap.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)]\l0x0016: CHECK_CAST (r0 I:androidx.constraintlayout.widget.ConstraintSet$Constraint) = (androidx.constraintlayout.widget.ConstraintSet$Constraint) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('constraint' androidx.constraintlayout.widget.ConstraintSet$Constraint)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:?  (LINE:2357)\l}"];
Node_16 [shape=record,label="{16\:\ 0x001a|0x001a: INVOKE  \l  (r0 I:androidx.constraintlayout.widget.ConstraintSet$Constraint A[D('constraint' androidx.constraintlayout.widget.ConstraintSet$Constraint)])\l  (r4 I:androidx.constraintlayout.widget.ConstraintLayout$LayoutParams A[D('layoutParams' androidx.constraintlayout.widget.ConstraintLayout$LayoutParams)])\l type: VIRTUAL call: androidx.constraintlayout.widget.ConstraintSet.Constraint.applyTo(androidx.constraintlayout.widget.ConstraintLayout$LayoutParams):void A[MD:(androidx.constraintlayout.widget.ConstraintLayout$LayoutParams):void (m)] (LINE:2358)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001d|RETURN\lORIG_RETURN\l|0x001d: RETURN    (LINE:2361)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x001d: RETURN   A[SYNTHETIC] (LINE:2361)\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|0x001d: RETURN   A[SYNTHETIC] (LINE:2361)\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.widget.ConstraintSet.applyToLayoutParams((r2 'this' I:androidx.constraintlayout.widget.ConstraintSet A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.constraintlayout.widget.ConstraintLayout$LayoutParams A[D('layoutParams' androidx.constraintlayout.widget.ConstraintLayout$LayoutParams), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0018 \-\> B:17:0x001d, CROSS_EDGE: B:13:0x000a \-\> B:17:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x001d: r0 'constraint' Landroidx\/constraintlayout\/widget\/ConstraintSet$Constraint;\l  \-1 \-0x001d: r3 'id' I\l  \-1 \-0x001d: r4 'layoutParams' Landroidx\/constraintlayout\/widget\/ConstraintLayout$LayoutParams;\lMETHOD_PARAMETERS: [id, layoutParams]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_18 -> Node_11;
}

