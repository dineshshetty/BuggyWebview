digraph "CFG forandroidx.constraintlayout.widget.ConstraintLayoutStates.needsToChange(IFF)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|int r0 = r5.mCurrentStateId\l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r0 == r6) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|RETURN\l|return true\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006}"];
Node_6 [shape=record,label="{6\:\ 0x0008|if (r6 != (\-1)) goto L17\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|java.lang.Object r0 = r5.mStateList.valueAt(0)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|PHI: r0 \l  PHI: (r0v2 androidx.constraintlayout.widget.ConstraintLayoutStates$State) = (r0v1 androidx.constraintlayout.widget.ConstraintLayoutStates$State), (r0v5 androidx.constraintlayout.widget.ConstraintLayoutStates$State) binds: [B:8:0x0011, B:7:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|androidx.constraintlayout.widget.ConstraintLayoutStates$State r0 = r0\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|if (r5.mCurrentConstraintNumber == (\-1)) goto L13\l}"];
Node_11 [shape=record,label="{11\:\ 0x001d}"];
Node_12 [shape=record,label="{12\:\ 0x002b|if (r0.mVariants.get(r5.mCurrentConstraintNumber).match(r7, r8) == false) goto L13\l}"];
Node_13 [shape=record,label="{13\:\ 0x002d|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ 0x002e}"];
Node_15 [shape=record,label="{15\:\ 0x0034|if (r5.mCurrentConstraintNumber != r0.findMatch(r7, r8)) goto L16\l}"];
Node_16 [shape=record,label="{16\:\ 0x0036|RETURN\l|return false\l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|RETURN\l|return true\l}"];
Node_8 [shape=record,label="{8\:\ 0x0011|java.lang.Object r0 = r5.mStateList.get(r0)\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.widget.ConstraintLayoutStates.needsToChange((r5v0 'this' androidx.constraintlayout.widget.ConstraintLayoutStates A[IMMUTABLE_TYPE, THIS]), (r6v0 'id' int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'width' float A[D('width' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'height' float A[D('height' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002d \-\> B:1:?, CROSS_EDGE: B:16:0x0036 \-\> B:1:?, CROSS_EDGE: B:17:0x0037 \-\> B:1:?, CROSS_EDGE: B:10:0x001b \-\> B:14:0x002e, CROSS_EDGE: B:8:0x0011 \-\> B:9:0x0017\lMETHOD_PARAMETERS: [id, width, height]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_1;
Node_17 -> Node_1;
Node_8 -> Node_9;
}

