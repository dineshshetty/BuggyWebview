digraph "CFG forandroidx.constraintlayout.widget.ConstraintSet.WriteXmlEngine.writeCircle(IFI)V" {
subgraph cluster_Region_451398560 {
label = "R(1:(2:(1:3)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_985301461 {
label = "R(2:(1:3)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1625811837 {
label = "IF [B:10:0x0001] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0001|if (r4 == (\-1)) goto L3\l}"];
subgraph cluster_Region_1916571764 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0003|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1485523419 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|r3.writer.write(\"circle\")\lr3.writer.write(\":[\")\lr3.writer.write(getName(r4))\ljava.io.Writer java.io.Writer r0 = r3.writer\lr0.write(\", \" + r5)\ljava.io.Writer java.io.Writer r0 = r3.writer\lr0.write(r6 + \"]\")\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0000}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0047}"];
MethodNode[shape=record,label="{void androidx.constraintlayout.widget.ConstraintSet.WriteXmlEngine.writeCircle((r3v0 'this' androidx.constraintlayout.widget.ConstraintSet$WriteXmlEngine A[IMMUTABLE_TYPE, THIS]), (r4v0 'circleConstraint' int A[D('circleConstraint' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'circleAngle' float A[D('circleAngle' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'circleRadius' int A[D('circleRadius' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0047 \-\> B:8:?\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [circleConstraint, circleAngle, circleRadius]\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_7;Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_7 -> Node_9;
Node_9 -> Node_10;
Node_13 -> Node_8;
}

