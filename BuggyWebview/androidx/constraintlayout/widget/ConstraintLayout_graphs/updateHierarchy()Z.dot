digraph "CFG forandroidx.constraintlayout.widget.ConstraintLayout.updateHierarchy()Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|int r0 = getChildCount()\lr1 = false\lr2 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|LOOP_START\lLOOP:0: B:16:0x0006\-\>B:20:0x0014\lPHI: r2 \l  PHI: (r2v1 'i' int) = (r2v0 'i' int), (r2v2 'i' int) binds: [B:15:0x0000, B:20:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r0) goto L12\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|android.view.View r3 = getChildAt(r2)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|if (r3.isLayoutRequested() == false) goto L5\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|LOOP_END\lLOOP:0: B:16:0x0006\-\>B:20:0x0014\l|int r2 = r2 + 1\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|r1 = androidx.constraintlayout.widget.ConstraintLayout.USE_CONSTRAINTS_HELPER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|PHI: r1 \l  PHI: (r1v1 'recompute' boolean) = (r1v0 'recompute' boolean), (r1v2 'recompute' boolean) binds: [B:25:0x0017, B:19:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x0019|setChildrenConstraints()\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|RETURN\l|return r1\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private boolean androidx.constraintlayout.widget.ConstraintLayout.updateHierarchy((r5v0 'this' androidx.constraintlayout.widget.ConstraintLayout A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0017 \-\> B:23:0x001c, BACK_EDGE: B:20:0x0014 \-\> B:16:0x0006, CROSS_EDGE: B:16:0x0006 \-\> B:21:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_25;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_24[style=dashed];
Node_20 -> Node_16;
Node_24 -> Node_19;
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_25 -> Node_21;
}

