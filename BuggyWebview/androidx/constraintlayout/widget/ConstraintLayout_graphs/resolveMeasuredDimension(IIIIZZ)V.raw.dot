digraph "CFG forandroidx.constraintlayout.widget.ConstraintLayout.resolveMeasuredDimension(IIIIZZ)V" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1611)\l0x0001: IGET  (r1 I:androidx.constraintlayout.widget.ConstraintLayout$Measurer) = (r8 I:androidx.constraintlayout.widget.ConstraintLayout) androidx.constraintlayout.widget.ConstraintLayout.mMeasurer androidx.constraintlayout.widget.ConstraintLayout$Measurer  (LINE:1612)\l0x0003: IGET  (r1 I:int) = (r1 I:androidx.constraintlayout.widget.ConstraintLayout$Measurer) androidx.constraintlayout.widget.ConstraintLayout.Measurer.paddingHeight int \l0x0005: IGET  (r2 I:androidx.constraintlayout.widget.ConstraintLayout$Measurer) = (r8 I:androidx.constraintlayout.widget.ConstraintLayout) androidx.constraintlayout.widget.ConstraintLayout.mMeasurer androidx.constraintlayout.widget.ConstraintLayout$Measurer  (LINE:1613)\l0x0007: IGET  (r2 I:int) = (r2 I:androidx.constraintlayout.widget.ConstraintLayout$Measurer) androidx.constraintlayout.widget.ConstraintLayout.Measurer.paddingWidth int \l0x0009: ARITH  (r3 I:int) = (r11 I:int A[D('measuredWidth' int)]) + (r2 I:int A[D('widthPadding' int)])  (LINE:1615)\l0x000b: ARITH  (r4 I:int) = (r12 I:int A[D('measuredHeight' int)]) + (r1 I:int A[D('heightPadding' int)])  (LINE:1616)\l0x000d: INVOKE  (r5 I:int) = (r3 I:int A[D('androidLayoutWidth' int)]), (r9 I:int A[D('widthMeasureSpec' int)]), (r0 I:int A[D('childState' int)]) type: STATIC call: androidx.constraintlayout.widget.ConstraintLayout.resolveSizeAndState(int, int, int):int A[MD:(int, int, int):int (s)] (LINE:1618)\l0x0011: ARITH  (r6 I:int) = (r0 I:int A[D('childState' int)]) \<\< (16 int)  (LINE:1619)\l0x0013: INVOKE  (r6 I:int) = (r4 I:int A[D('androidLayoutHeight' int)]), (r10 I:int A[D('heightMeasureSpec' int)]), (r6 I:int) type: STATIC call: androidx.constraintlayout.widget.ConstraintLayout.resolveSizeAndState(int, int, int):int A[MD:(int, int, int):int (s)]\l0x0017: CONST  (r7 I:??[int, float, short, byte, char]) = (16777215(0xffffff, float:2.3509886E\-38) ??[int, float, short, byte, char])  (LINE:1621)\l0x001a: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('resolvedWidthSize' int)]) & (r7 I:??[int, boolean, short, byte, char]) \l0x001b: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char] A[D('resolvedHeightSize' int)]) & (r7 I:??[int, boolean, short, byte, char])  (LINE:1622)\l0x001c: IGET  (r7 I:int) = (r8 I:androidx.constraintlayout.widget.ConstraintLayout) androidx.constraintlayout.widget.ConstraintLayout.mMaxWidth int  (LINE:1623)\l0x001e: INVOKE  (r5 I:int A[D('resolvedWidthSize' int)]) = (r7 I:int), (r5 I:int A[D('resolvedWidthSize' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x0022: IGET  (r7 I:int) = (r8 I:androidx.constraintlayout.widget.ConstraintLayout) androidx.constraintlayout.widget.ConstraintLayout.mMaxHeight int  (LINE:1624)\l0x0024: INVOKE  (r6 I:int A[D('resolvedHeightSize' int)]) = (r7 I:int), (r6 I:int A[D('resolvedHeightSize' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x0028: CONST  (r7 I:??[int, float, short, byte, char]) = (16777216(0x1000000, float:2.3509887E\-38) ??[int, float, short, byte, char])  (LINE:1625)\l}"];
Node_12 [shape=record,label="{12\:\ 0x002a|0x002a: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isWidthMeasuredTooSmall' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x002d \l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('resolvedWidthSize' int)]) \| (r7 I:??[int, boolean, short, byte, char])  (LINE:1626)\l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|0x002d: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isHeightMeasuredTooSmall' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0030  (LINE:1628)\l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|0x002f: ARITH  (r6 I:??[int, boolean]) = (r6 I:??[int, boolean, short, byte, char] A[D('resolvedHeightSize' int)]) \| (r7 I:??[int, boolean, short, byte, char])  (LINE:1629)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0030|0x0030: INVOKE  \l  (r8 I:androidx.constraintlayout.widget.ConstraintLayout)\l  (r5 I:int A[D('resolvedWidthSize' int)])\l  (r6 I:int A[D('resolvedHeightSize' int)])\l type: VIRTUAL call: androidx.constraintlayout.widget.ConstraintLayout.setMeasuredDimension(int, int):void A[MD:(int, int):void (s)] (LINE:1631)\l0x0033: IPUT  (r5 I:int A[D('resolvedWidthSize' int)]), (r8 I:androidx.constraintlayout.widget.ConstraintLayout) androidx.constraintlayout.widget.ConstraintLayout.mLastMeasureWidth int  (LINE:1632)\l0x0035: IPUT  (r6 I:int A[D('resolvedHeightSize' int)]), (r8 I:androidx.constraintlayout.widget.ConstraintLayout) androidx.constraintlayout.widget.ConstraintLayout.mLastMeasureHeight int  (LINE:1633)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0037|RETURN\l|0x0037: RETURN    (LINE:1634)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.widget.ConstraintLayout.resolveMeasuredDimension((r8 'this' I:androidx.constraintlayout.widget.ConstraintLayout A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('measuredWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('measuredHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[D('isWidthMeasuredTooSmall' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[D('isHeightMeasuredTooSmall' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x002d \-\> B:16:0x0030, CROSS_EDGE: B:12:0x002a \-\> B:14:0x002d\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [widthMeasureSpec, heightMeasureSpec, measuredWidth, measuredHeight, isWidthMeasuredTooSmall, isHeightMeasuredTooSmall]\lDebug Info:\l  0x0001\-0x0037: r0 'childState' I\l  0x0005\-0x0037: r1 'heightPadding' I\l  0x0009\-0x0037: r2 'widthPadding' I\l  0x000b\-0x0037: r3 'androidLayoutWidth' I\l  0x000d\-0x0037: r4 'androidLayoutHeight' I\l  0x0011\-0x0037: r5 'resolvedWidthSize' I\l  0x0017\-0x0037: r6 'resolvedHeightSize' I\l  \-1 \-0x0037: r9 'widthMeasureSpec' I\l  \-1 \-0x0037: r10 'heightMeasureSpec' I\l  \-1 \-0x0037: r11 'measuredWidth' I\l  \-1 \-0x0037: r12 'measuredHeight' I\l  \-1 \-0x0037: r13 'isWidthMeasuredTooSmall' Z\l  \-1 \-0x0037: r14 'isHeightMeasuredTooSmall' Z\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_10;
}

