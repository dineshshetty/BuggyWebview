digraph "CFG forandroidx.constraintlayout.widget.StateSet.needsToChange(IFF)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r5 I:androidx.constraintlayout.widget.StateSet) androidx.constraintlayout.widget.StateSet.mCurrentStateId int  (LINE:143)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('id' int)])  \-\> B:23:0x0006 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:boolean)  (LINE:144)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:147)\l0x0007: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|0x0008: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('id' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0011 \l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|0x000a: IGET  (r0 I:android.util.SparseArray\<androidx.constraintlayout.widget.StateSet$State\>) = (r5 I:androidx.constraintlayout.widget.StateSet) androidx.constraintlayout.widget.StateSet.mStateList android.util.SparseArray \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:android.util.SparseArray), (r3 I:int) type: VIRTUAL call: android.util.SparseArray.valueAt(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|0x0017: CHECK_CAST (r0 I:androidx.constraintlayout.widget.StateSet$State) = (androidx.constraintlayout.widget.StateSet$State) (r0 I:??[OBJECT, ARRAY]) \l0x0019: IGET  (r4 I:int) = (r5 I:androidx.constraintlayout.widget.StateSet) androidx.constraintlayout.widget.StateSet.mCurrentConstraintNumber int  (LINE:149)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x002e \l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|0x001d: IGET  (r2 I:java.util.ArrayList\<androidx.constraintlayout.widget.StateSet$Variant\>) = (r0 I:androidx.constraintlayout.widget.StateSet$State A[D('state' androidx.constraintlayout.widget.StateSet$State)]) androidx.constraintlayout.widget.StateSet.State.mVariants java.util.ArrayList  (LINE:150)\l0x001f: IGET  (r4 I:int) = (r5 I:androidx.constraintlayout.widget.StateSet) androidx.constraintlayout.widget.StateSet.mCurrentConstraintNumber int \l0x0021: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.ArrayList), (r4 I:int) type: VIRTUAL call: java.util.ArrayList.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0025: CHECK_CAST (r2 I:androidx.constraintlayout.widget.StateSet$Variant) = (androidx.constraintlayout.widget.StateSet$Variant) (r2 I:??[OBJECT, ARRAY]) \l0x0027: INVOKE  (r2 I:boolean) = \l  (r2 I:androidx.constraintlayout.widget.StateSet$Variant)\l  (r7 I:float A[D('width' float)])\l  (r8 I:float A[D('height' float)])\l type: VIRTUAL call: androidx.constraintlayout.widget.StateSet.Variant.match(float, float):boolean A[MD:(float, float):boolean (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x002b|0x002b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x002e \l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|RETURN\l|0x002d: RETURN  (r3 I:boolean)  (LINE:151)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|0x002e: IGET  (r2 I:int) = (r5 I:androidx.constraintlayout.widget.StateSet) androidx.constraintlayout.widget.StateSet.mCurrentConstraintNumber int  (LINE:155)\l0x0030: INVOKE  (r4 I:int) = \l  (r0 I:androidx.constraintlayout.widget.StateSet$State A[D('state' androidx.constraintlayout.widget.StateSet$State)])\l  (r7 I:float A[D('width' float)])\l  (r8 I:float A[D('height' float)])\l type: VIRTUAL call: androidx.constraintlayout.widget.StateSet.State.findMatch(float, float):int A[MD:(float, float):int (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|0x0034: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0037 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0036|RETURN\l|0x0036: RETURN  (r3 I:boolean)  (LINE:156)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0037|RETURN\l|0x0037: RETURN  (r1 I:boolean)  (LINE:158)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|0x0011: IGET  (r4 I:android.util.SparseArray\<androidx.constraintlayout.widget.StateSet$State\>) = (r5 I:androidx.constraintlayout.widget.StateSet) androidx.constraintlayout.widget.StateSet.mStateList android.util.SparseArray \l0x0013: INVOKE  (r0 I:java.lang.Object) = (r4 I:android.util.SparseArray), (r0 I:int) type: VIRTUAL call: android.util.SparseArray.get(int):java.lang.Object A[MD:(int):E (c)]\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.widget.StateSet.needsToChange((r5 'this' I:androidx.constraintlayout.widget.StateSet A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:float A[D('width' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:float A[D('height' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x002d \-\> B:19:?, CROSS_EDGE: B:34:0x0036 \-\> B:19:?, CROSS_EDGE: B:35:0x0037 \-\> B:19:?, CROSS_EDGE: B:28:0x001b \-\> B:32:0x002e, CROSS_EDGE: B:26:0x0011 \-\> B:27:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0037: r0 'state' Landroidx\/constraintlayout\/widget\/StateSet$State;\l  \-1 \-0x0037: r6 'id' I\l  \-1 \-0x0037: r7 'width' F\l  \-1 \-0x0037: r8 'height' F\lMETHOD_PARAMETERS: [id, width, height]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_19;
Node_35 -> Node_19;
Node_26 -> Node_27;
}

