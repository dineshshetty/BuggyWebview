digraph "CFG forandroidx.constraintlayout.widget.StateSet.updateConstraints(IIFF)I" {
Node_31 [shape=record,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0000}"];
Node_34 [shape=record,label="{34\:\ 0x0001|if (r4 != r5) goto L22\l}"];
Node_35 [shape=record,label="{35\:\ 0x0003|if (r5 != (\-1)) goto L21\l}"];
Node_36 [shape=record,label="{36\:\ 0x0005|androidx.constraintlayout.widget.StateSet$State r1 = r3.mStateList.valueAt(0)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0019|PHI: r1 \l  PHI: (r1v6 'state' androidx.constraintlayout.widget.StateSet$State) = (r1v5 'state' androidx.constraintlayout.widget.StateSet$State), (r1v9 'state' androidx.constraintlayout.widget.StateSet$State) binds: [B:37:0x000f, B:36:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 != null) goto L8\l}"];
Node_39 [shape=record,label="{39\:\ 0x001b|RETURN\l|return \-1\l}"];
Node_32 [shape=record,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x001c}"];
Node_41 [shape=record,label="{41\:\ 0x001e|if (r3.mCurrentConstraintNumber == (\-1)) goto L13\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020}"];
Node_43 [shape=record,label="{43\:\ 0x002c|if (r1.mVariants.get(r4).match(r6, r7) == false) goto L13\l}"];
Node_44 [shape=record,label="{44\:\ 0x002e|RETURN\l|return r4\l}"];
Node_45 [shape=record,label="{45\:\ 0x002f|int r2 = r1.findMatch(r6, r7)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0033|if (r4 != r2) goto L16\l}"];
Node_47 [shape=record,label="{47\:\ 0x0035|RETURN\l|return r4\l}"];
Node_48 [shape=record,label="{48\:\ 0x0036|if (r2 != (\-1)) goto L19\l}"];
Node_49 [shape=record,label="{49\:\ 0x0038}"];
Node_60 [shape=record,label="{60\:\ ?|SYNTHETIC\lRETURN\l|return r1.mConstraintID\l}"];
Node_50 [shape=record,label="{50\:\ 0x003b}"];
Node_51 [shape=record,label="{51\:\ 0x0045|RETURN\lORIG_RETURN\l|return r1.mVariants.get(r2).mConstraintID\l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|androidx.constraintlayout.widget.StateSet$State r1 = r3.mStateList.get(r3.mCurrentStateId)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0046|androidx.constraintlayout.widget.StateSet$State r1 = r3.mStateList.get(r5)\l}"];
Node_53 [shape=record,label="{53\:\ 0x004e|if (r1 != null) goto L25\l}"];
Node_54 [shape=record,label="{54\:\ 0x0050|RETURN\l|return \-1\l}"];
Node_55 [shape=record,label="{55\:\ 0x0051|int r2 = r1.findMatch(r6, r7)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0055|if (r2 != (\-1)) goto L29\l}"];
Node_57 [shape=record,label="{57\:\ 0x0057}"];
Node_61 [shape=record,label="{61\:\ ?|SYNTHETIC\lRETURN\l|return r1.mConstraintID\l}"];
Node_58 [shape=record,label="{58\:\ 0x005a}"];
Node_59 [shape=record,label="{59\:\ 0x0064|RETURN\lORIG_RETURN\l|return r1.mVariants.get(r2).mConstraintID\l}"];
MethodNode[shape=record,label="{public int androidx.constraintlayout.widget.StateSet.updateConstraints((r3v0 'this' androidx.constraintlayout.widget.StateSet A[IMMUTABLE_TYPE, THIS]), (r4v0 'currentId' int A[D('currentId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'id' int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'width' float A[D('width' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'height' float A[D('height' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:44:0x002e \-\> B:32:?, CROSS_EDGE: B:47:0x0035 \-\> B:32:?, CROSS_EDGE: B:51:0x0045 \-\> B:32:?, CROSS_EDGE: B:50:0x003b \-\> B:51:0x0045, CROSS_EDGE: B:41:0x001e \-\> B:45:0x002f, CROSS_EDGE: B:37:0x000f \-\> B:38:0x0019, CROSS_EDGE: B:54:0x0050 \-\> B:32:?, CROSS_EDGE: B:59:0x0064 \-\> B:32:?, CROSS_EDGE: B:58:0x005a \-\> B:59:0x0064\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [currentId, id, width, height]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_31;Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_52;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_32;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_45;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_32;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_32;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_60;
Node_60 -> Node_32;
Node_50 -> Node_51;
Node_51 -> Node_32;
Node_37 -> Node_38;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_55;
Node_54 -> Node_32;
Node_55 -> Node_56;
Node_56 -> Node_57[style=dashed];
Node_56 -> Node_58;
Node_57 -> Node_61;
Node_61 -> Node_32;
Node_58 -> Node_59;
Node_59 -> Node_32;
}

