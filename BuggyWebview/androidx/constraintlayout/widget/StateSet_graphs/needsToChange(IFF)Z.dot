digraph "CFG forandroidx.constraintlayout.widget.StateSet.needsToChange(IFF)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|int r0 = r5.mCurrentStateId\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|if (r0 == r6) goto L5\l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|RETURN\l|return true\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0006}"];
Node_24 [shape=record,label="{24\:\ 0x0008|if (r6 != (\-1)) goto L17\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|java.lang.Object r0 = r5.mStateList.valueAt(0)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|PHI: r0 \l  PHI: (r0v2 androidx.constraintlayout.widget.StateSet$State) = (r0v1 androidx.constraintlayout.widget.StateSet$State), (r0v5 androidx.constraintlayout.widget.StateSet$State) binds: [B:26:0x0011, B:25:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|androidx.constraintlayout.widget.StateSet$State r0 = r0\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|if (r5.mCurrentConstraintNumber == (\-1)) goto L13\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d}"];
Node_30 [shape=record,label="{30\:\ 0x002b|if (r0.mVariants.get(r5.mCurrentConstraintNumber).match(r7, r8) == false) goto L13\l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|RETURN\l|return false\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e}"];
Node_33 [shape=record,label="{33\:\ 0x0034|if (r5.mCurrentConstraintNumber != r0.findMatch(r7, r8)) goto L16\l}"];
Node_34 [shape=record,label="{34\:\ 0x0036|RETURN\l|return false\l}"];
Node_35 [shape=record,label="{35\:\ 0x0037|RETURN\l|return true\l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|java.lang.Object r0 = r5.mStateList.get(r0)\l}"];
MethodNode[shape=record,label="{public boolean androidx.constraintlayout.widget.StateSet.needsToChange((r5v0 'this' androidx.constraintlayout.widget.StateSet A[IMMUTABLE_TYPE, THIS]), (r6v0 'id' int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'width' float A[D('width' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'height' float A[D('height' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x002d \-\> B:19:?, CROSS_EDGE: B:34:0x0036 \-\> B:19:?, CROSS_EDGE: B:35:0x0037 \-\> B:19:?, CROSS_EDGE: B:28:0x001b \-\> B:32:0x002e, CROSS_EDGE: B:26:0x0011 \-\> B:27:0x0017\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [id, width, height]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_19;
Node_35 -> Node_19;
Node_26 -> Node_27;
}

