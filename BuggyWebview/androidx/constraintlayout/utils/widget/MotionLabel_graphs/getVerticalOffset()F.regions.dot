digraph "CFG forandroidx.constraintlayout.utils.widget.MotionLabel.getVerticalOffset()F" {
subgraph cluster_Region_19053649 {
label = "R(4:2|4|7|8)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0008|float r0 = java.lang.Float.isNaN(r7.mBaseTextSize) ? 1.0f : r7.mTextSize \/ r7.mBaseTextSize\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|PHI: r0 \l  PHI: (r0v4 'scale' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|android.graphics.Paint$FontMetrics android.graphics.Paint.FontMetrics r2 = r7.mPaint.getFontMetrics()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0028|PHI: r3 \l  PHI: (r3v3 float A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|float float r3 = ((java.lang.Float.isNaN(r7.mFloatHeight) ? getMeasuredHeight() : r7.mFloatHeight) \- getPaddingTop()) \- getPaddingBottom()\lfloat float r4 = (r2.descent \- r2.ascent) * r0\l}"];
Node_11 [shape=record,label="{11\:\ 0x004a|RETURN\l|return (((r3 \- r4) * (1.0f \- r7.mTextPanY)) \/ 2.0f) \- (r2.ascent * r0)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000a}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001e}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0020}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0026}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
MethodNode[shape=record,label="{private float androidx.constraintlayout.utils.widget.MotionLabel.getVerticalOffset((r7v0 'this' androidx.constraintlayout.utils.widget.MotionLabel A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0026 \-\> B:10:0x0028, CROSS_EDGE: B:5:0x000d \-\> B:6:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5;
Node_6 -> Node_7;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_6;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

