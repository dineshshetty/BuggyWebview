digraph "CFG forandroidx.constraintlayout.utils.widget.MotionLabel.onMeasure(II)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r13 I:int A[D('widthMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getMode(int):int A[MD:(int):int (c)] (LINE:639)\l0x0004: INVOKE  (r1 I:int) = (r14 I:int A[D('heightMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getMode(int):int A[MD:(int):int (c)] (LINE:640)\l0x0008: INVOKE  (r2 I:int) = (r13 I:int A[D('widthMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getSize(int):int A[MD:(int):int (c)] (LINE:641)\l0x000c: INVOKE  (r3 I:int) = (r14 I:int A[D('heightMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getSize(int):int A[MD:(int):int (c)] (LINE:642)\l0x0010: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('widthSize' int)])  (LINE:643)\l0x0011: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('heightSize' int)])  (LINE:644)\l0x0012: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:646)\l0x0013: IPUT  (r6 I:boolean), (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mAutoSize boolean \l0x0015: INVOKE  (r7 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) type: VIRTUAL call: androidx.constraintlayout.utils.widget.MotionLabel.getPaddingLeft():int A[MD:():int (c)] (LINE:648)\l0x0019: IPUT  (r7 I:int), (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingLeft int \l0x001b: INVOKE  (r7 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) type: VIRTUAL call: androidx.constraintlayout.utils.widget.MotionLabel.getPaddingRight():int A[MD:():int (c)] (LINE:649)\l0x001f: IPUT  (r7 I:int), (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingRight int \l0x0021: INVOKE  (r7 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) type: VIRTUAL call: androidx.constraintlayout.utils.widget.MotionLabel.getPaddingTop():int A[MD:():int (c)] (LINE:650)\l0x0025: IPUT  (r7 I:int), (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingTop int \l0x0027: INVOKE  (r7 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) type: VIRTUAL call: androidx.constraintlayout.utils.widget.MotionLabel.getPaddingBottom():int A[MD:():int (c)] (LINE:651)\l0x002b: IPUT  (r7 I:int), (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingBottom int \l0x002d: CONST  (r7 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:652)\l}"];
Node_3 [shape=record,label="{3\:\ 0x002f|0x002f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x003c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0031|0x0031: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x0034 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0034|0x0034: IGET  (r6 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mAutoSizeTextType int  (LINE:670)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0079 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0038|0x0038: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:671)\l0x0039: IPUT  (r6 I:boolean), (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mAutoSize boolean \l}"];
Node_19 [shape=record,label="{19\:\ 0x0079|0x0079: INVOKE  (r12 I:androidx.constraintlayout.utils.widget.MotionLabel), (r4 I:int A[D('width' int)]), (r5 I:int A[D('height' int)]) type: VIRTUAL call: androidx.constraintlayout.utils.widget.MotionLabel.setMeasuredDimension(int, int):void A[MD:(int, int):void (c)] (LINE:676)\l}"];
Node_20 [shape=record,label="{20\:\ 0x007c|RETURN\l|0x007c: RETURN    (LINE:677)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|0x003c: IGET  (r8 I:android.text.TextPaint) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaint android.text.TextPaint  (LINE:653)\l0x003e: IGET  (r9 I:java.lang.String) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mText java.lang.String \l0x0040: INVOKE  (r10 I:int) = (r9 I:java.lang.String) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x0044: IGET  (r11 I:android.graphics.Rect) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mTextBounds android.graphics.Rect \l0x0046: INVOKE  (r8 I:android.text.TextPaint), (r9 I:java.lang.String), (r6 I:int), (r10 I:int), (r11 I:android.graphics.Rect) type: VIRTUAL call: android.text.TextPaint.getTextBounds(java.lang.String, int, int, android.graphics.Rect):void A[MD:(java.lang.String, int, int, android.graphics.Rect):void (c)]\l0x0049: CONST  (r6 I:??[int, float, short, byte, char]) = (1065353048(0x3f7fff58, float:0.99999) ??[int, float, short, byte, char])  (LINE:655)\l}"];
Node_10 [shape=record,label="{10\:\ 0x004c|0x004c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0057 \l}"];
Node_11 [shape=record,label="{11\:\ 0x004e|0x004e: IGET  (r8 I:android.graphics.Rect) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mTextBounds android.graphics.Rect  (LINE:656)\l0x0050: INVOKE  (r8 I:int) = (r8 I:android.graphics.Rect) type: VIRTUAL call: android.graphics.Rect.width():int A[MD:():int (c)]\l0x0054: CAST (r8 I:float) = (float) (r8 I:int) \l0x0055: ARITH  (r8 I:float) = (r8 I:float) + (r6 I:float) \l0x0056: CAST (r4 I:int A[D('width' int)]) = (int) (r8 I:float) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0057|0x0057: IGET  (r8 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingLeft int  (LINE:658)\l0x0059: IGET  (r9 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingRight int \l0x005b: ARITH  (r8 I:int) = (r8 I:int) + (r9 I:int) \l0x005c: ARITH  (r4 I:int) = (r4 I:int A[D('width' int)]) + (r8 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x005d|0x005d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) == (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0079  (LINE:660)\l}"];
Node_14 [shape=record,label="{14\:\ 0x005f|0x005f: IGET  (r7 I:android.text.TextPaint) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaint android.text.TextPaint  (LINE:661)\l0x0061: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0062: INVOKE  (r7 I:int) = (r7 I:android.text.TextPaint), (r8 I:android.graphics.Paint$FontMetricsInt) type: VIRTUAL call: android.text.TextPaint.getFontMetricsInt(android.graphics.Paint$FontMetricsInt):int A[MD:(android.graphics.Paint$FontMetricsInt):int (c)]\l0x0066: CAST (r7 I:float) = (float) (r7 I:int) \l0x0067: ARITH  (r7 I:float) = (r7 I:float) + (r6 I:float) \l0x0068: CAST (r6 I:int) = (int) (r7 I:float) \l0x0069: CONST  (r7 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char])  (LINE:662)\l}"];
Node_15 [shape=record,label="{15\:\ 0x006b|0x006b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0072 \l}"];
Node_16 [shape=record,label="{16\:\ 0x006d|0x006d: INVOKE  (r5 I:int A[D('height' int)]) = (r5 I:int A[D('height' int)]), (r6 I:int A[D('desired' int)]) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)] (LINE:663)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0073|0x0073: IGET  (r7 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingTop int  (LINE:667)\l0x0075: IGET  (r8 I:int) = (r12 I:androidx.constraintlayout.utils.widget.MotionLabel) androidx.constraintlayout.utils.widget.MotionLabel.mPaddingBottom int \l0x0077: ARITH  (r7 I:int) = (r7 I:int) + (r8 I:int) \l0x0078: ARITH  (r5 I:int) = (r5 I:int A[D('height' int)]) + (r7 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0072|0x0072: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('height' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('desired' int)])  (LINE:665)\l}"];
MethodNode[shape=record,label="{protected void androidx.constraintlayout.utils.widget.MotionLabel.onMeasure((r12 'this' I:androidx.constraintlayout.utils.widget.MotionLabel A[IMMUTABLE_TYPE, THIS]), (r13 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x0036 \-\> B:19:0x0079, CROSS_EDGE: B:18:0x0073 \-\> B:19:0x0079, CROSS_EDGE: B:17:0x0072 \-\> B:18:0x0073, CROSS_EDGE: B:13:0x005d \-\> B:19:0x0079, CROSS_EDGE: B:10:0x004c \-\> B:12:0x0057, CROSS_EDGE: B:3:0x002f \-\> B:9:0x003c\lDebug Info:\l  0x0069\-0x0079: r6 'desired' I\l  0x0004\-0x007c: r0 'widthMode' I\l  0x0008\-0x007c: r1 'heightMode' I\l  0x000c\-0x007c: r2 'widthSize' I\l  0x0010\-0x007c: r3 'heightSize' I\l  0x0011\-0x007c: r4 'width' I\l  0x0012\-0x007c: r5 'height' I\l  \-1 \-0x007c: r13 'widthMeasureSpec' I\l  \-1 \-0x007c: r14 'heightMeasureSpec' I\lMETHOD_PARAMETERS: [widthMeasureSpec, heightMeasureSpec]\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_6;
Node_4 -> Node_9[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_19;
Node_8 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_19;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_17 -> Node_18;
}

