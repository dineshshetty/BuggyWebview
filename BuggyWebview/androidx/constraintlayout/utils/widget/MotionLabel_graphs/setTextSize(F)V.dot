digraph "CFG forandroidx.constraintlayout.utils.widget.MotionLabel.setTextSize(F)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r3.mTextSize = r4\ljava.lang.String r0 = androidx.constraintlayout.utils.widget.MotionLabel.TAG\ljava.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(androidx.constraintlayout.motion.widget.Debug.getLoc())\lr1.append(\"  \")\lr1.append(r4)\lr1.append(\" \/ \")\lr1.append(r3.mBaseTextSize)\landroid.util.Log.v(r0, r1.toString())\landroid.text.TextPaint r0 = r3.mPaint\l}"];
Node_3 [shape=record,label="{3\:\ 0x0031|if (java.lang.Float.isNaN(r3.mBaseTextSize) == false) goto L11\l}"];
Node_4 [shape=record,label="{4\:\ 0x0033|r1 = r4\l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|PHI: r1 \l  PHI: (r1v5 float) = (r1v4 float), (r1v7 float) binds: [B:5:0x0035, B:4:0x0033] A[DONT_GENERATE, DONT_INLINE]\l|r0.setTextSize(r1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0040|if (java.lang.Float.isNaN(r3.mBaseTextSize) == false) goto L10\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|r0 = 1.0f\l}"];
Node_10 [shape=record,label="{10\:\ 0x004a|PHI: r0 \l  PHI: (r0v6 float) = (r0v5 float), (r0v7 float) binds: [B:9:0x0045, B:8:0x0042] A[DONT_GENERATE, DONT_INLINE]\l|buildShape(r0)\lrequestLayout()\linvalidate()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0053|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0045|float r0 = r3.mTextSize \/ r3.mBaseTextSize\l}"];
Node_5 [shape=record,label="{5\:\ 0x0035|float r1 = r3.mBaseTextSize\l}"];
MethodNode[shape=record,label="{public void androidx.constraintlayout.utils.widget.MotionLabel.setTextSize((r3v0 'this' androidx.constraintlayout.utils.widget.MotionLabel A[IMMUTABLE_TYPE, THIS]), (r4v0 'size' float A[D('size' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0045 \-\> B:10:0x004a, CROSS_EDGE: B:5:0x0035 \-\> B:6:0x0037\lINLINE_NOT_NEEDED\lMETHOD_PARAMETERS: [size]\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

