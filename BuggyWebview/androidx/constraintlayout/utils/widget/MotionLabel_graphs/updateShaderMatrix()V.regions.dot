digraph "CFG forandroidx.constraintlayout.utils.widget.MotionLabel.updateShaderMatrix()V" {
subgraph cluster_Region_1192343818 {
label = "R(11:2|5|8|11|13|14|17|22|(1:24)|(1:27)|28)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|float r1 = java.lang.Float.isNaN(r17.mBackgroundPanX) ? 0.0f : r17.mBackgroundPanX\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|float r3 = java.lang.Float.isNaN(r17.mBackgroundPanY) ? 0.0f : r17.mBackgroundPanY\l}"];
Node_11 [shape=record,label="{11\:\ 0x0021|float r4 = java.lang.Float.isNaN(r17.mZoom) ? 1.0f : r17.mZoom\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|float r2 = java.lang.Float.isNaN(r17.mRotate) ? 0.0f : r17.mRotate\l}"];
Node_18 [shape=record,label="{18\:\ 0x0033|PHI: r2 \l  PHI: (r2v1 'rota' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r17.mTextShaderMatrix.reset()\lfloat float r5 = r17.mTextBackgroundBitmap.getWidth()\lfloat float r6 = r17.mTextBackgroundBitmap.getHeight()\l}"];
Node_19 [shape=record,label="{19\:\ 0x004c|float r7 = java.lang.Float.isNaN(r17.mTextureWidth) ? r17.mFloatWidth : r17.mTextureWidth\l}"];
Node_23 [shape=record,label="{23\:\ 0x0059|float r8 = java.lang.Float.isNaN(r17.mTextureHeight) ? r17.mFloatHeight : r17.mTextureHeight\l}"];
Node_30 [shape=record,label="{30\:\ 0x006d|PHI: r9 \l  PHI: (r9v3 float A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|float float r9 = (r5 * r8 \< r6 * r7 ? r7 \/ r5 : r8 \/ r6) * r4\lr17.mTextShaderMatrix.postScale(r9, r9)\lfloat float r10 = r7 \- (r9 * r5)\lfloat float r11 = r8 \- (r9 * r6)\l}"];
subgraph cluster_IfRegion_2018396668 {
label = "IF [B:31:0x0084] THEN: R(1:24) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0084|if (java.lang.Float.isNaN(r17.mTextureHeight) == false) goto L24\l}"];
subgraph cluster_Region_1795152256 {
label = "R(1:24)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0086|float r11 = r17.mTextureHeight \/ 2.0f\l}"];
}
}
subgraph cluster_IfRegion_1656566610 {
label = "IF [B:34:0x0090] THEN: R(1:27) ELSE: null";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0090|if (java.lang.Float.isNaN(r17.mTextureWidth) == false) goto L27\l}"];
subgraph cluster_Region_1677585784 {
label = "R(1:27)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0092|float r10 = r17.mTextureWidth \/ 2.0f\l}"];
}
}
Node_36 [shape=record,label="{36\:\ 0x0096|PHI: r10 \l  PHI: (r10v4 'gapx' float) = (r10v3 'gapx' float), (r10v5 'gapx' float) binds: [B:34:0x0090, B:35:0x0092] A[DONT_GENERATE, DONT_INLINE]\l|float float r12 = (((r1 * r10) + r7) \- (r9 * r5)) * 0.5f\lfloat float r15 = (((r3 * r11) + r8) \- (r9 * r6)) * 0.5f\lr17.mTextShaderMatrix.postTranslate(r12, r15)\lfloat float r1 = r7 \/ 2.0f\lr17.mTextShaderMatrix.postRotate(r2, r1, r8 \/ 2.0f)\lr17.mTextShader.setLocalMatrix(r17.mTextShaderMatrix)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000b}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x000f|PHI: r1 \l  PHI: (r1v3 'panX' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0017}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x001b|PHI: r3 \l  PHI: (r3v3 'panY' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0023}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0028|PHI: r4 \l  PHI: (r4v3 'zoom' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0031}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x004e}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0053|PHI: r7 \l  PHI: (r7v3 'sw' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x005b}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0060|PHI: r8 \l  PHI: (r8v3 'sh' float) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0066}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0068}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x008a|PHI: r11 \l  PHI: (r11v2 'gapy' float) = (r11v1 'gapy' float), (r11v3 'gapy' float) binds: [B:31:0x0084, B:32:0x0086] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x00c0}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x006b}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x005e}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0051}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0026}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0019}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x000d}"];
MethodNode[shape=record,label="{private void androidx.constraintlayout.utils.widget.MotionLabel.updateShaderMatrix((r17v0 'this' androidx.constraintlayout.utils.widget.MotionLabel A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0090 \-\> B:36:0x0096, CROSS_EDGE: B:31:0x0084 \-\> B:33:0x008a, CROSS_EDGE: B:29:0x006b \-\> B:30:0x006d, CROSS_EDGE: B:25:0x005e \-\> B:26:0x0060, CROSS_EDGE: B:21:0x0051 \-\> B:22:0x0053, CROSS_EDGE: B:15:0x002e \-\> B:18:0x0033, CROSS_EDGE: B:13:0x0026 \-\> B:14:0x0028, CROSS_EDGE: B:9:0x0019 \-\> B:10:0x001b, CROSS_EDGE: B:5:0x000d \-\> B:6:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5;
Node_7 -> Node_8;
Node_7 -> Node_9;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_15 -> Node_17;
Node_15 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_23 -> Node_24;
Node_23 -> Node_25;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_33[style=dashed];
Node_32 -> Node_33;
Node_34 -> Node_35;
Node_34 -> Node_36[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_17 -> Node_18;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_33 -> Node_34;
Node_37 -> Node_1;
Node_29 -> Node_30;
Node_25 -> Node_26;
Node_21 -> Node_22;
Node_13 -> Node_14;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

