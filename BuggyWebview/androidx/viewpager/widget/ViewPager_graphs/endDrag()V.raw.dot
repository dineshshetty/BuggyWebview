digraph "CFG forandroidx.viewpager.widget.ViewPager.endDrag()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2659)\l0x0001: IPUT  (r0 I:boolean), (r1 I:androidx.viewpager.widget.ViewPager) androidx.viewpager.widget.ViewPager.mIsBeingDragged boolean \l0x0003: IPUT  (r0 I:boolean), (r1 I:androidx.viewpager.widget.ViewPager) androidx.viewpager.widget.ViewPager.mIsUnableToDrag boolean  (LINE:2660)\l0x0005: IGET  (r0 I:android.view.VelocityTracker) = (r1 I:androidx.viewpager.widget.ViewPager) androidx.viewpager.widget.ViewPager.mVelocityTracker android.view.VelocityTracker  (LINE:2662)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|0x0009: INVOKE  (r0 I:android.view.VelocityTracker) type: VIRTUAL call: android.view.VelocityTracker.recycle():void A[MD:():void (c)] (LINE:2663)\l0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2664)\l0x000d: IPUT  (r0 I:android.view.VelocityTracker), (r1 I:androidx.viewpager.widget.ViewPager) androidx.viewpager.widget.ViewPager.mVelocityTracker android.view.VelocityTracker \l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN    (LINE:2666)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN   A[SYNTHETIC] (LINE:2666)\l}"];
MethodNode[shape=record,label="{private void androidx.viewpager.widget.ViewPager.endDrag((r1 'this' I:androidx.viewpager.widget.ViewPager A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0007 \-\> B:12:0x000f\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

