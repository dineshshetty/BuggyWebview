digraph "CFG forandroidx.viewpager.widget.ViewPager.ViewPositionComparator.compare(Landroid\/view\/View;Landroid\/view\/View;)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|androidx.viewpager.widget.ViewPager$LayoutParams r0 = (androidx.viewpager.widget.ViewPager.LayoutParams) r5.getLayoutParams()\landroidx.viewpager.widget.ViewPager$LayoutParams r1 = (androidx.viewpager.widget.ViewPager.LayoutParams) r6.getLayoutParams()\l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|if (r0.isDecor == r1.isDecor) goto L8\l}"];
Node_16 [shape=record,label="{16\:\ 0x0012}"];
Node_17 [shape=record,label="{17\:\ 0x0014|if (r0.isDecor == false) goto L7\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|RETURN\lORIG_RETURN\l|return \-1\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a}"];
Node_22 [shape=record,label="{22\:\ 0x001f|RETURN\l|return r0.position \- r1.position\l}"];
MethodNode[shape=record,label="{public int androidx.viewpager.widget.ViewPager.ViewPositionComparator.compare((r4v0 'this' androidx.viewpager.widget.ViewPager$ViewPositionComparator A[IMMUTABLE_TYPE, THIS]), (r5v0 'lhs' android.view.View A[D('lhs' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'rhs' android.view.View A[D('rhs' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0018 \-\> B:20:0x0019, CROSS_EDGE: B:22:0x001f \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lREPLACED_BY: androidx.viewpager.widget.ViewPager.ViewPositionComparator.compare(android.view.View, android.view.View):int\lBRIDGED_BY: androidx.viewpager.widget.ViewPager.ViewPositionComparator.compare(android.view.View, android.view.View):int\lMETHOD_OVERRIDE: [ClspMth\{java.util.Comparator.compare(T, T):int\}]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_13;
Node_19 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

