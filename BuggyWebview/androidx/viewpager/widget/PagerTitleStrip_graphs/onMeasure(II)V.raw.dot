digraph "CFG forandroidx.viewpager.widget.PagerTitleStrip.onMeasure(II)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r11 I:int A[D('widthMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getMode(int):int A[MD:(int):int (c)] (LINE:420)\l0x0004: CONST  (r1 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:421)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('widthMode' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0060 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: INVOKE  (r2 I:int) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) type: VIRTUAL call: androidx.viewpager.widget.PagerTitleStrip.getPaddingTop():int A[MD:():int (s)] (LINE:425)\l0x000c: INVOKE  (r3 I:int) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) type: VIRTUAL call: androidx.viewpager.widget.PagerTitleStrip.getPaddingBottom():int A[MD:():int (s)]\l0x0010: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0011: CONST  (r3 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char])  (LINE:426)\l0x0012: INVOKE  (r4 I:int) = (r12 I:int A[D('heightMeasureSpec' int)]), (r2 I:int A[D('heightPadding' int)]), (r3 I:int) type: STATIC call: androidx.viewpager.widget.PagerTitleStrip.getChildMeasureSpec(int, int, int):int A[MD:(int, int, int):int (c)]\l0x0016: INVOKE  (r5 I:int) = (r11 I:int A[D('widthMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getSize(int):int A[MD:(int):int (c)] (LINE:429)\l0x001a: CAST (r6 I:float) = (float) (r5 I:int A[D('widthSize' int)])  (LINE:430)\l0x001b: CONST  (r7 I:??[int, float, short, byte, char]) = (1045220557(0x3e4ccccd, float:0.2) ??[int, float, short, byte, char]) \l0x001e: ARITH  (r6 I:float) = (r6 I:float) * (r7 I:float) \l0x0020: CAST (r6 I:int) = (int) (r6 I:float) \l0x0021: INVOKE  (r3 I:int) = (r11 I:int A[D('widthMeasureSpec' int)]), (r6 I:int A[D('widthPadding' int)]), (r3 I:int) type: STATIC call: androidx.viewpager.widget.PagerTitleStrip.getChildMeasureSpec(int, int, int):int A[MD:(int, int, int):int (c)] (LINE:431)\l0x0025: IGET  (r7 I:android.widget.TextView) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) androidx.viewpager.widget.PagerTitleStrip.mPrevText android.widget.TextView  (LINE:434)\l0x0027: INVOKE  (r7 I:android.widget.TextView), (r3 I:int A[D('childWidthSpec' int)]), (r4 I:int A[D('childHeightSpec' int)]) type: VIRTUAL call: android.widget.TextView.measure(int, int):void A[MD:(int, int):void (c)]\l0x002a: IGET  (r7 I:android.widget.TextView) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) androidx.viewpager.widget.PagerTitleStrip.mCurrText android.widget.TextView  (LINE:435)\l0x002c: INVOKE  (r7 I:android.widget.TextView), (r3 I:int A[D('childWidthSpec' int)]), (r4 I:int A[D('childHeightSpec' int)]) type: VIRTUAL call: android.widget.TextView.measure(int, int):void A[MD:(int, int):void (c)]\l0x002f: IGET  (r7 I:android.widget.TextView) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) androidx.viewpager.widget.PagerTitleStrip.mNextText android.widget.TextView  (LINE:436)\l0x0031: INVOKE  (r7 I:android.widget.TextView), (r3 I:int A[D('childWidthSpec' int)]), (r4 I:int A[D('childHeightSpec' int)]) type: VIRTUAL call: android.widget.TextView.measure(int, int):void A[MD:(int, int):void (c)]\l0x0034: INVOKE  (r7 I:int) = (r12 I:int A[D('heightMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getMode(int):int A[MD:(int):int (c)] (LINE:439)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0038|0x0038: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('heightMode' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003f  (LINE:440)\l}"];
Node_18 [shape=record,label="{18\:\ 0x003a|0x003a: INVOKE  (r1 I:int) = (r12 I:int A[D('heightMeasureSpec' int)]) type: STATIC call: android.view.View.MeasureSpec.getSize(int):int A[MD:(int):int (c)] (LINE:441)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: IGET  (r8 I:android.widget.TextView A[D('minHeight' int)]) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) androidx.viewpager.widget.PagerTitleStrip.mCurrText android.widget.TextView  (LINE:448)\l0x0052: INVOKE  (r8 I:int) = (r8 I:android.widget.TextView) type: VIRTUAL call: android.widget.TextView.getMeasuredState():int A[MD:():int (c)]\l0x0056: ARITH  (r9 I:int) = (r8 I:int A[D('childState' int)]) \<\< (16 int)  (LINE:449)\l0x0058: INVOKE  (r9 I:int) = (r1 I:int A[D('height' int)]), (r12 I:int A[D('heightMeasureSpec' int)]), (r9 I:int) type: STATIC call: android.view.View.resolveSizeAndState(int, int, int):int A[MD:(int, int, int):int (c)]\l0x005c: INVOKE  \l  (r10 I:androidx.viewpager.widget.PagerTitleStrip)\l  (r5 I:int A[D('widthSize' int)])\l  (r9 I:int A[D('measuredHeight' int)])\l type: VIRTUAL call: androidx.viewpager.widget.PagerTitleStrip.setMeasuredDimension(int, int):void A[MD:(int, int):void (s)] (LINE:451)\l}"];
Node_21 [shape=record,label="{21\:\ 0x005f|RETURN\l|0x005f: RETURN    (LINE:452)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x003f|0x003f: IGET  (r1 I:android.widget.TextView A[D('height' int)]) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) androidx.viewpager.widget.PagerTitleStrip.mCurrText android.widget.TextView  (LINE:443)\l0x0041: INVOKE  (r1 I:int) = (r1 I:android.widget.TextView) type: VIRTUAL call: android.widget.TextView.getMeasuredHeight():int A[MD:():int (c)]\l0x0045: INVOKE  (r8 I:int) = (r10 I:androidx.viewpager.widget.PagerTitleStrip) type: VIRTUAL call: androidx.viewpager.widget.PagerTitleStrip.getMinHeight():int A[MD:():int (m)] (LINE:444)\l0x0049: ARITH  (r9 I:int) = (r1 I:int A[D('textHeight' int)]) + (r2 I:int A[D('heightPadding' int)])  (LINE:445)\l0x004b: INVOKE  (r9 I:int) = (r8 I:int A[D('minHeight' int)]), (r9 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x004f: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('textHeight' int)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0060|0x0060: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException A[D('height' int)]) =  java.lang.IllegalStateException  (LINE:422)\l0x0062: CONST_STR  (r2 I:java.lang.String) =  \"Must measure with an exact width\" \l0x0064: INVOKE  (r1 I:java.lang.IllegalStateException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0067|0x0067: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected void androidx.viewpager.widget.PagerTitleStrip.onMeasure((r10 'this' I:androidx.viewpager.widget.PagerTitleStrip A[IMMUTABLE_TYPE, THIS]), (r11 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:19:0x003f \-\> B:20:0x0050, CROSS_EDGE: B:23:0x0067 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003e\-0x003f: r1 'height' I\l  0x0049\-0x0050: r8 'minHeight' I\l  0x0045\-0x0050: r1 'textHeight' I\l  0x0050\-0x0060: r1 'height' I\l  0x0011\-0x0060: r2 'heightPadding' I\l  0x0025\-0x0060: r3 'childWidthSpec' I\l  0x0016\-0x0060: r4 'childHeightSpec' I\l  0x001a\-0x0060: r5 'widthSize' I\l  0x0021\-0x0060: r6 'widthPadding' I\l  0x0038\-0x0060: r7 'heightMode' I\l  0x0056\-0x0060: r8 'childState' I\l  0x005c\-0x0060: r9 'measuredHeight' I\l  0x0004\-0x0067: r0 'widthMode' I\l  \-1 \-0x0067: r11 'widthMeasureSpec' I\l  \-1 \-0x0067: r12 'heightMeasureSpec' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_19 -> Node_20;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

