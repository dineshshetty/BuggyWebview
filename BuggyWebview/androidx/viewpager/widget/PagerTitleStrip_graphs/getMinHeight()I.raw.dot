digraph "CFG forandroidx.viewpager.widget.PagerTitleStrip.getMinHeight()I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:463)\l0x0001: INVOKE  (r1 I:android.graphics.drawable.Drawable) = (r2 I:androidx.viewpager.widget.PagerTitleStrip) type: VIRTUAL call: androidx.viewpager.widget.PagerTitleStrip.getBackground():android.graphics.drawable.Drawable A[MD:():android.graphics.drawable.Drawable (s)] (LINE:464)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('bg' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:?  (LINE:465)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: INVOKE  (r0 I:int A[D('minHeight' int)]) = (r1 I:android.graphics.drawable.Drawable A[D('bg' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicHeight():int A[MD:():int (c)] (LINE:466)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\lORIG_RETURN\l|0x000b: RETURN  (r0 I:int A[D('minHeight' int)])  (LINE:468)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000b: RETURN  (r0 I:int A[D('minHeight' int)]) A[SYNTHETIC] (LINE:468)\l}"];
MethodNode[shape=record,label="{public int androidx.viewpager.widget.PagerTitleStrip.getMinHeight((r2 'this' I:androidx.viewpager.widget.PagerTitleStrip A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0005 \-\> B:12:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x000b: r0 'minHeight' I\l  0x0005\-0x000b: r1 'bg' Landroid\/graphics\/drawable\/Drawable;\lMETHOD_OVERRIDE: [androidx.viewpager.widget.PagerTitleStrip.getMinHeight():int]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

