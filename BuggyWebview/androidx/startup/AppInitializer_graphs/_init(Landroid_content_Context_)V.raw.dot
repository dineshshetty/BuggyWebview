digraph "CFG forandroidx.startup.AppInitializer.\<init\>(Landroid\/content\/Context;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r1 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:73)\l0x0003: INVOKE  (r0 I:android.content.Context) = (r2 I:android.content.Context A[D('context' android.content.Context)]) type: VIRTUAL call: android.content.Context.getApplicationContext():android.content.Context A[MD:():android.content.Context (c)] (LINE:74)\l0x0007: IPUT  (r0 I:android.content.Context), (r1 I:androidx.startup.AppInitializer) androidx.startup.AppInitializer.mContext android.content.Context \l0x0009: NEW_INSTANCE  (r0 I:java.util.HashSet) =  java.util.HashSet  (LINE:75)\l0x000b: INVOKE  (r0 I:java.util.HashSet) type: DIRECT call: java.util.HashSet.\<init\>():void A[MD:():void (c)]\l0x000e: IPUT  \l  (r0 I:java.util.Set\<java.lang.Class\<? extends androidx.startup.Initializer\<?\>\>\>)\l  (r1 I:androidx.startup.AppInitializer)\l androidx.startup.AppInitializer.mDiscovered java.util.Set \l0x0010: NEW_INSTANCE  (r0 I:java.util.HashMap) =  java.util.HashMap  (LINE:76)\l0x0012: INVOKE  (r0 I:java.util.HashMap) type: DIRECT call: java.util.HashMap.\<init\>():void A[MD:():void (c)]\l0x0015: IPUT  (r0 I:java.util.Map\<java.lang.Class\<?\>, java.lang.Object\>), (r1 I:androidx.startup.AppInitializer) androidx.startup.AppInitializer.mInitialized java.util.Map \l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\l|0x0017: RETURN    (LINE:77)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void androidx.startup.AppInitializer.\<init\>((r1 'this' I:androidx.startup.AppInitializer A[IMMUTABLE_TYPE, THIS]), (r2 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0017: r2 'context' Landroid\/content\/Context;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

