digraph "CFG forandroidx.appcompat.text.AllCapsTransformationMethod.getTransformation(Ljava\/lang\/CharSequence;Landroid\/view\/View;)Ljava\/lang\/CharSequence;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('source' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x000d  (LINE:43)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: INVOKE  (r0 I:java.lang.String) = (r3 I:java.lang.CharSequence A[D('source' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0006: IGET  (r1 I:java.util.Locale) = (r2 I:androidx.appcompat.text.AllCapsTransformationMethod) androidx.appcompat.text.AllCapsTransformationMethod.mLocale java.util.Locale \l0x0008: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String), (r1 I:java.util.Locale) type: VIRTUAL call: java.lang.String.toUpperCase(java.util.Locale):java.lang.String A[MD:(java.util.Locale):java.lang.String (c)]\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000e: RETURN  (r0 I:java.lang.CharSequence) A[SYNTHETIC]\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: RETURN  (r0 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence androidx.appcompat.text.AllCapsTransformationMethod.getTransformation((r2 'this' I:androidx.appcompat.text.AllCapsTransformationMethod A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('source' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.view.View A[D('view' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:11:0x000d \-\> B:12:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r3 'source' Ljava\/lang\/CharSequence;\l  \-1 \-0x000e: r4 'view' Landroid\/view\/View;\lMETHOD_OVERRIDE: [ClspMth\{android.text.method.TransformationMethod.getTransformation(java.lang.CharSequence, android.view.View):java.lang.CharSequence\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_8;
}

