digraph "CFG forandroidx.appcompat.widget.ResourceManagerInternal.getTintList(Landroid\/content\/Context;I)Landroid\/content\/res\/ColorStateList;" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: MONITOR_ENTER  (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0019, blocks: (B:22:0x0001, B:24:0x0007, B:30:0x0014, B:27:0x000d), top: B:36:0x0001 \}\lCatch: all \-\> 0x0019\l|0x0001: INVOKE  (r0 I:android.content.res.ColorStateList) = \l  (r2 I:androidx.appcompat.widget.ResourceManagerInternal)\l  (r3 I:android.content.Context A[D('context' android.content.Context)])\l  (r4 I:int A[D('resId' int)])\l type: DIRECT call: androidx.appcompat.widget.ResourceManagerInternal.getTintListFromCache(android.content.Context, int):android.content.res.ColorStateList A[Catch: all \-\> 0x0019, MD:(android.content.Context, int):android.content.res.ColorStateList (m), TRY_ENTER] (LINE:384)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tint' android.content.res.ColorStateList)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0017  (LINE:386)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|TryCatch #0 \{all \-\> 0x0019, blocks: (B:22:0x0001, B:24:0x0007, B:30:0x0014, B:27:0x000d), top: B:36:0x0001 \}\lCatch: all \-\> 0x0019\l|0x0007: IGET  (r1 I:androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks) = (r2 I:androidx.appcompat.widget.ResourceManagerInternal) androidx.appcompat.widget.ResourceManagerInternal.mHooks androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks A[Catch: all \-\> 0x0019] (LINE:388)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000d \l}"];
Node_26 [shape=record,label="{26\:\ 0x000b|0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: GOTO  \-\> 0x0011 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|0x0011: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('tint' android.content.res.ColorStateList)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tint' android.content.res.ColorStateList)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0017  (LINE:390)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0014|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0019, blocks: (B:22:0x0001, B:24:0x0007, B:30:0x0014, B:27:0x000d), top: B:36:0x0001 \}\lCatch: all \-\> 0x0019\l|0x0014: INVOKE  \l  (r2 I:androidx.appcompat.widget.ResourceManagerInternal)\l  (r3 I:android.content.Context A[D('context' android.content.Context)])\l  (r4 I:int A[D('resId' int)])\l  (r0 I:android.content.res.ColorStateList A[D('tint' android.content.res.ColorStateList)])\l type: DIRECT call: androidx.appcompat.widget.ResourceManagerInternal.addTintListToCache(android.content.Context, int, android.content.res.ColorStateList):void A[Catch: all \-\> 0x0019, MD:(android.content.Context, int, android.content.res.ColorStateList):void (m), TRY_LEAVE] (LINE:391)\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|TryCatch #0 \{all \-\> 0x0019, blocks: (B:22:0x0001, B:24:0x0007, B:30:0x0014, B:27:0x000d), top: B:36:0x0001 \}\lCatch: all \-\> 0x0019\l|0x000d: INVOKE  (r1 I:android.content.res.ColorStateList) = \l  (r1 I:androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks)\l  (r3 I:android.content.Context A[D('context' android.content.Context)])\l  (r4 I:int A[D('resId' int)])\l type: INTERFACE call: androidx.appcompat.widget.ResourceManagerInternal.ResourceManagerHooks.getTintListForDrawableRes(android.content.Context, int):android.content.res.ColorStateList A[Catch: all \-\> 0x0019, MD:(android.content.Context, int):android.content.res.ColorStateList (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0017|0x0017: MONITOR_EXIT  (r2 I:??[OBJECT, ARRAY])  (LINE:394)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0018|RETURN\l|0x0018: RETURN  (r0 I:android.content.res.ColorStateList A[D('tint' android.content.res.ColorStateList)]) \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0019|ExcHandler: all \-\> 0x0019\l|0x0019: MOVE_EXCEPTION  (r3 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0019] (LINE:383)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|0x001b: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized android.content.res.ColorStateList androidx.appcompat.widget.ResourceManagerInternal.getTintList((r2 'this' I:androidx.appcompat.widget.ResourceManagerInternal A[IMMUTABLE_TYPE, THIS]), (r3 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('resId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x001b \-\> B:20:?, CROSS_EDGE: B:29:0x0012 \-\> B:31:0x0017, CROSS_EDGE: B:27:0x000d \-\> B:28:0x0011, CROSS_EDGE: B:23:0x0005 \-\> B:31:0x0017, CROSS_EDGE: B:36:0x0001 \-\> B:33:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0019: r0 'tint' Landroid\/content\/res\/ColorStateList;\l  \-1 \-0x0019: r3 'context' Landroid\/content\/Context;\l  \-1 \-0x0019: r4 'resId' I\lTryCatch #0 \{all \-\> 0x0019, blocks: (B:22:0x0001, B:24:0x0007, B:30:0x0014, B:27:0x000d), top: B:36:0x0001 \}\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_36;
Node_36 -> Node_22;
Node_36 -> Node_33;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_30 -> Node_37;
Node_37 -> Node_33;
Node_27 -> Node_28;
Node_31 -> Node_32;
Node_32 -> Node_20;
Node_33 -> Node_35;
Node_35 -> Node_20;
}

