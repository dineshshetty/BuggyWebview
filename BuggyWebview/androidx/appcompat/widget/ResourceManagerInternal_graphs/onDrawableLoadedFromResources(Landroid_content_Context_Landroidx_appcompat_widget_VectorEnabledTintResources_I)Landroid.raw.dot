digraph "CFG forandroidx.appcompat.widget.ResourceManagerInternal.onDrawableLoadedFromResources(Landroid\/content\/Context;Landroidx\/appcompat\/widget\/VectorEnabledTintResources;I)Landroid\/graphics\/drawable\/Drawable;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: MONITOR_ENTER  (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0018, blocks: (B:21:0x0001, B:23:0x0007, B:25:0x000e), top: B:34:0x0001 \}\lCatch: all \-\> 0x0018\l|0x0001: INVOKE  (r0 I:android.graphics.drawable.Drawable) = \l  (r2 I:androidx.appcompat.widget.ResourceManagerInternal)\l  (r3 I:android.content.Context A[D('context' android.content.Context)])\l  (r5 I:int A[D('resId' int)])\l type: DIRECT call: androidx.appcompat.widget.ResourceManagerInternal.loadDrawableFromDelegates(android.content.Context, int):android.graphics.drawable.Drawable A[Catch: all \-\> 0x0018, MD:(android.content.Context, int):android.graphics.drawable.Drawable (m), TRY_ENTER] (LINE:356)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drawable' android.graphics.drawable.Drawable)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000c  (LINE:357)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|TryCatch #0 \{all \-\> 0x0018, blocks: (B:21:0x0001, B:23:0x0007, B:25:0x000e), top: B:34:0x0001 \}\lCatch: all \-\> 0x0018\l|0x0007: INVOKE  (r1 I:android.graphics.drawable.Drawable) = \l  (r4 I:androidx.appcompat.widget.VectorEnabledTintResources A[D('resources' androidx.appcompat.widget.VectorEnabledTintResources)])\l  (r5 I:int A[D('resId' int)])\l type: VIRTUAL call: androidx.appcompat.widget.VectorEnabledTintResources.getDrawableCanonical(int):android.graphics.drawable.Drawable A[Catch: all \-\> 0x0018, MD:(int):android.graphics.drawable.Drawable throws android.content.res.Resources$NotFoundException (m)] (LINE:358)\l0x000b: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('drawable' android.graphics.drawable.Drawable)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('drawable' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0015  (LINE:360)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0018, blocks: (B:21:0x0001, B:23:0x0007, B:25:0x000e), top: B:34:0x0001 \}\lCatch: all \-\> 0x0018\l|0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:361)\l0x000f: INVOKE  (r1 I:android.graphics.drawable.Drawable) = \l  (r2 I:androidx.appcompat.widget.ResourceManagerInternal)\l  (r3 I:android.content.Context A[D('context' android.content.Context)])\l  (r5 I:int A[D('resId' int)])\l  (r1 I:boolean)\l  (r0 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)])\l type: DIRECT call: androidx.appcompat.widget.ResourceManagerInternal.tintDrawable(android.content.Context, int, boolean, android.graphics.drawable.Drawable):android.graphics.drawable.Drawable A[Catch: all \-\> 0x0018, MD:(android.content.Context, int, boolean, android.graphics.drawable.Drawable):android.graphics.drawable.Drawable (m), TRY_LEAVE]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: MONITOR_EXIT  (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0014|RETURN\l|0x0014: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|0x0015: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:363)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|0x0016: MONITOR_EXIT  (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:android.graphics.drawable.Drawable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|ExcHandler: all \-\> 0x0018\l|0x0018: MOVE_EXCEPTION  (r3 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0018] (LINE:355)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|0x001a: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public synchronized android.graphics.drawable.Drawable androidx.appcompat.widget.ResourceManagerInternal.onDrawableLoadedFromResources((r2 'this' I:androidx.appcompat.widget.ResourceManagerInternal A[IMMUTABLE_TYPE, THIS]), (r3 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:androidx.appcompat.widget.VectorEnabledTintResources A[D('resources' androidx.appcompat.widget.VectorEnabledTintResources), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('resId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x001a \-\> B:19:?, CROSS_EDGE: B:30:0x0017 \-\> B:19:?, CROSS_EDGE: B:22:0x0005 \-\> B:24:0x000c, CROSS_EDGE: B:34:0x0001 \-\> B:31:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x0018: r0 'drawable' Landroid\/graphics\/drawable\/Drawable;\l  \-1 \-0x0018: r3 'context' Landroid\/content\/Context;\l  \-1 \-0x0018: r4 'resources' Landroidx\/appcompat\/widget\/VectorEnabledTintResources;\l  \-1 \-0x0018: r5 'resId' I\lTryCatch #0 \{all \-\> 0x0018, blocks: (B:21:0x0001, B:23:0x0007, B:25:0x000e), top: B:34:0x0001 \}\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_34;
Node_34 -> Node_21;
Node_34 -> Node_31;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_28;
Node_25 -> Node_26;
Node_25 -> Node_35;
Node_26 -> Node_27;
Node_27 -> Node_19;
Node_35 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_19;
Node_31 -> Node_33;
Node_33 -> Node_19;
}

