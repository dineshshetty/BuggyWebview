digraph "CFG forandroidx.appcompat.widget.ResourceManagerInternal.checkVectorDrawableSetup(Landroid\/content\/Context;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0002|if (r3.mHasCheckedVectorDrawableSetup == false) goto L5\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|r3.mHasCheckedVectorDrawableSetup = true\landroid.graphics.drawable.Drawable r0 = getDrawable(r4, androidx.appcompat.resources.C0054R.C0055drawable.abc_vector_test)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|if (r0 == null) goto L10\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010}"];
Node_20 [shape=record,label="{20\:\ 0x0014|if (isVectorDrawable(r0) == false) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|RETURN\l|return\l}"];
Node_22 [shape=record,label="{22\:\ 0x0017|r3.mHasCheckedVectorDrawableSetup = false\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|throw new java.lang.IllegalStateException(\"This app has been built with an incorrect configuration. Please configure your build for VectorDrawableCompat.\")\l}"];
MethodNode[shape=record,label="{private void androidx.appcompat.widget.ResourceManagerInternal.checkVectorDrawableSetup((r3v0 'this' androidx.appcompat.widget.ResourceManagerInternal A[IMMUTABLE_TYPE, THIS]), (r4v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0016 \-\> B:13:?, CROSS_EDGE: B:23:0x0021 \-\> B:13:?, CROSS_EDGE: B:18:0x000e \-\> B:22:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

