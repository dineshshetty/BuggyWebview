digraph "CFG forandroidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.suggestedSizeFitsInSpace(ILandroid\/graphics\/RectF;)Z" {
subgraph cluster_Region_1102815573 {
label = "R(5:1|(1:5)|7|9|10) | DECL_VAR: java.lang.CharSequence transformedText\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.CharSequence java.lang.CharSequence r0 = r9.mTextView.getText()\landroid.text.method.TransformationMethod android.text.method.TransformationMethod r1 = r9.mTextView.getTransformationMethod()\l}"];
subgraph cluster_IfRegion_283083578 {
label = "IF [B:3:0x000c, B:5:0x0014] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x000c|if (r1 != null) goto L3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|ADDED_TO_REGION\l|if ((r2 = r1.getTransformation(r0, r9.mTextView)) != null) goto L5\l}"];
subgraph cluster_Region_637344814 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0016|r0 = r2\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x001c|int r2 = android.os.Build.VERSION.SDK_INT \>= 16 ? androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.Api16Impl.getMaxLines(r9.mTextView) : \-1\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|PHI: r2 \l  PHI: (r2v2 'maxLines' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|initTempTextPaint(r10)\landroid.text.Layout$Alignment android.text.Layout.Alignment r3 = (android.text.Layout.Alignment) invokeAndReturnWithDefault(r9.mTextView, \"getLayoutAlignment\", android.text.Layout.Alignment.ALIGN_NORMAL)\landroid.text.StaticLayout android.text.StaticLayout r5 = createLayout(r0, r3, java.lang.Math.round(r11.right), r2)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|RETURN\l|return (r2 == \-1 \|\| (r5.getLineCount() \<= r2 && r5.getLineEnd(r5.getLineCount() \- 1) == r0.length())) && ((float) r5.getHeight()) \<= r11.bottom\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x000e}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0017|PHI: r0 \l  PHI: (r0v2 'text' java.lang.CharSequence) = (r0v1 'text' java.lang.CharSequence), (r0v1 'text' java.lang.CharSequence), (r0v3 'text' java.lang.CharSequence) binds: [B:3:0x000c, B:5:0x0014, B:6:0x0016] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x001e}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0043}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0047|REMOVE\lADDED_TO_REGION\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0049}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0056|REMOVE\lADDED_TO_REGION\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0058|RETURN\lADDED_TO_REGION\l|return false\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0059}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0062|REMOVE\lADDED_TO_REGION\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0064}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0065}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0025}"];
MethodNode[shape=record,label="{private boolean androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.suggestedSizeFitsInSpace((r9v0 'this' androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper A[IMMUTABLE_TYPE, THIS]), (r10v0 'suggestedSizeInPx' int A[D('suggestedSizeInPx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'availableSpace' android.graphics.RectF A[D('availableSpace' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0064 \-\> B:1:?, CROSS_EDGE: B:21:0x0065 \-\> B:1:?, CROSS_EDGE: B:14:0x0047 \-\> B:17:0x0058, CROSS_EDGE: B:12:0x0041 \-\> B:18:0x0059, CROSS_EDGE: B:10:0x0025 \-\> B:11:0x0026, CROSS_EDGE: B:5:0x0014 \-\> B:7:0x0017, CROSS_EDGE: B:3:0x000c \-\> B:7:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_7[style=dashed];
Node_6 -> Node_7;
Node_8 -> Node_9;
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_18;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_7 -> Node_8;
Node_9 -> Node_11;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_1;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_1;
Node_21 -> Node_1;
Node_10 -> Node_11;
}

