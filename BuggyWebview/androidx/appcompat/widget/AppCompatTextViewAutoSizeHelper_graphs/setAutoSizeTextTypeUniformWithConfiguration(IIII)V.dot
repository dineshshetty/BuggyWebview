digraph "CFG forandroidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.setAutoSizeTextTypeUniformWithConfiguration(IIII)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (supportsAutoSizeText() == false) goto L9\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|android.util.DisplayMetrics r0 = r5.mContext.getResources().getDisplayMetrics()\lfloat r1 = android.util.TypedValue.applyDimension(r9, (float) r6, r0)\lfloat r2 = android.util.TypedValue.applyDimension(r9, (float) r7, r0)\lfloat r3 = android.util.TypedValue.applyDimension(r9, (float) r8, r0)\lvalidateAndSetAutoSizeTextTypeUniformConfiguration(r1, r2, r3)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0026|if (setupAutoSizeText() == false) goto L8\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|autoSizeText()\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|RETURN\lORIG_RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.setAutoSizeTextTypeUniformWithConfiguration((r5v0 'this' androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper A[IMMUTABLE_TYPE, THIS]), (r6v0 'autoSizeMinTextSize' int A[D('autoSizeMinTextSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'autoSizeMaxTextSize' int A[D('autoSizeMaxTextSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'autoSizeStepGranularity' int A[D('autoSizeStepGranularity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'unit' int A[D('unit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0026 \-\> B:7:0x002b, CROSS_EDGE: B:3:0x0004 \-\> B:7:0x002b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/lang\/IllegalArgumentException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_8;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_9 -> Node_1;
Node_8 -> Node_1;
}

