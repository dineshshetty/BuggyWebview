digraph "CFG forandroidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.findLargestTextSizeWhichFits(Landroid\/graphics\/RectF;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int[]) = (r6 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mAutoSizeTextSizesInPx int[]  (LINE:699)\l0x0002: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sizesCount' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0027  (LINE:700)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:704)\l0x0006: ARITH  (r2 I:int) = (r1 I:int A[D('bestSizeIndex' int)]) + (1 int)  (LINE:705)\l0x0008: ARITH  (r3 I:int) = (r0 I:int A[D('sizesCount' int)]) + (\-1 int)  (LINE:706)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|LOOP_START\lLOOP:0: B:5:0x000a\-\>B:17:0x000a\l|0x000a: IF  (r2 I:??[int, byte, short, char] A[D('lowIndex' int)]) \> (r3 I:??[int, byte, short, char] A[D('highIndex' int)])  \-\> B:15:0x0022  (LINE:708)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: ARITH  (r4 I:int) = (r2 I:int A[D('lowIndex' int)]) + (r3 I:int A[D('highIndex' int)])  (LINE:709)\l0x000e: ARITH  (r4 I:int) = (r4 I:int) \/ (2 int) \l0x0010: IGET  (r5 I:int[]) = (r6 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mAutoSizeTextSizesInPx int[]  (LINE:710)\l0x0012: AGET  (r5 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][]), (r4 I:??[int, short, byte, char] A[D('sizeToTryIndex' int)]) \l0x0014: INVOKE  (r5 I:boolean) = \l  (r6 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper)\l  (r5 I:int)\l  (r7 I:android.graphics.RectF A[D('availableSpace' android.graphics.RectF)])\l type: DIRECT call: androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.suggestedSizeFitsInSpace(int, android.graphics.RectF):boolean A[MD:(int, android.graphics.RectF):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|0x0018: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001e \l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: ARITH  (r3 I:int A[D('highIndex' int)]) = (r4 I:int A[D('sizeToTryIndex' int)]) + (\-1 int)  (LINE:714)\l0x0020: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestSizeIndex' int)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('highIndex' int)])  (LINE:715)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|LOOP_END\lSYNTHETIC\lLOOP:0: B:5:0x000a\-\>B:17:0x000a\l}"];
Node_16 [shape=record,label="{16\:\ 0x001a|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|0x001a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('bestSizeIndex' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lowIndex' int)])  (LINE:711)\l0x001b: ARITH  (r2 I:int A[D('lowIndex' int)]) = (r4 I:int A[D('sizeToTryIndex' int)]) + (1 int)  (LINE:712)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: IGET  (r4 I:int[] A[D('sizeToTryIndex' int)]) = (r6 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mAutoSizeTextSizesInPx int[]  (LINE:719)\l0x0024: AGET  (r4 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('bestSizeIndex' int)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|RETURN\l|0x0026: RETURN  (r4 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|0x0027: NEW_INSTANCE  (r1 I:java.lang.IllegalStateException A[D('bestSizeIndex' int)]) =  java.lang.IllegalStateException  (LINE:701)\l0x0029: CONST_STR  (r2 I:java.lang.String) =  \"No available text sizes to choose from.\" \l0x002b: INVOKE  (r1 I:java.lang.IllegalStateException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002e|0x002e: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private int androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.findLargestTextSizeWhichFits((r6 'this' I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper A[IMMUTABLE_TYPE, THIS]), (r7 I:android.graphics.RectF A[D('availableSpace' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x001a \-\> B:5:0x000a, BACK_EDGE: B:9:0x001e \-\> B:5:0x000a, CROSS_EDGE: B:13:0x002e \-\> B:1:?\lDebug Info:\l  0x0010\-0x0022: r4 'sizeToTryIndex' I\l  0x0006\-0x0027: r1 'bestSizeIndex' I\l  0x0008\-0x0027: r2 'lowIndex' I\l  0x000a\-0x0027: r3 'highIndex' I\l  0x0003\-0x002e: r0 'sizesCount' I\l  \-1 \-0x002e: r7 'availableSpace' Landroid\/graphics\/RectF;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_7;
Node_7 -> Node_14;
Node_7 -> Node_16[style=dashed];
Node_14 -> Node_9;
Node_9 -> Node_18;
Node_18 -> Node_17;
Node_17 -> Node_5;
Node_16 -> Node_8;
Node_8 -> Node_19;
Node_19 -> Node_17;
Node_15 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

