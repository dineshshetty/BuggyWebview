digraph "CFG forandroidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.suggestedSizeFitsInSpace(ILandroid\/graphics\/RectF;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:android.widget.TextView) = (r9 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mTextView android.widget.TextView  (LINE:753)\l0x0002: INVOKE  (r0 I:java.lang.CharSequence) = (r0 I:android.widget.TextView) type: VIRTUAL call: android.widget.TextView.getText():java.lang.CharSequence A[MD:():java.lang.CharSequence (c)]\l0x0006: IGET  (r1 I:android.widget.TextView) = (r9 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mTextView android.widget.TextView  (LINE:754)\l0x0008: INVOKE  (r1 I:android.text.method.TransformationMethod) = (r1 I:android.widget.TextView) type: VIRTUAL call: android.widget.TextView.getTransformationMethod():android.text.method.TransformationMethod A[MD:():android.text.method.TransformationMethod (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('transformationMethod' android.text.method.TransformationMethod)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017  (LINE:755)\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IGET  (r2 I:android.widget.TextView) = (r9 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mTextView android.widget.TextView  (LINE:756)\l0x0010: INVOKE  (r2 I:java.lang.CharSequence) = \l  (r1 I:android.text.method.TransformationMethod A[D('transformationMethod' android.text.method.TransformationMethod)])\l  (r0 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)])\l  (r2 I:android.view.View)\l type: INTERFACE call: android.text.method.TransformationMethod.getTransformation(java.lang.CharSequence, android.view.View):java.lang.CharSequence A[MD:(java.lang.CharSequence, android.view.View):java.lang.CharSequence (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('transformedText' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017  (LINE:757)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('text' java.lang.CharSequence)]) = (r2 I:??[OBJECT, ARRAY] A[D('transformedText' java.lang.CharSequence)])  (LINE:758)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|0x0017: SGET  (r2 I:int A[D('transformedText' java.lang.CharSequence)]) =  android.os.Build.VERSION.SDK_INT int  (LINE:762)\l0x0019: CONST  (r3 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l0x001b: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|0x001c: IF  (r2 I:??[int, byte, short, char]) \< (r3 I:??[int, byte, short, char])  \-\> B:10:0x0025 \l}"];
Node_9 [shape=record,label="{9\:\ 0x001e|0x001e: IGET  (r2 I:android.widget.TextView) = (r9 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mTextView android.widget.TextView \l0x0020: INVOKE  (r2 I:int) = (r2 I:android.widget.TextView) type: STATIC call: androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.Api16Impl.getMaxLines(android.widget.TextView):int A[MD:(android.widget.TextView):int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0026|0x0026: INVOKE  (r9 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper), (r10 I:int A[D('suggestedSizeInPx' int)]) type: VIRTUAL call: androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.initTempTextPaint(int):void A[MD:(int):void (m)] (LINE:763)\l0x0029: IGET  (r3 I:android.widget.TextView) = (r9 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper) androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.mTextView android.widget.TextView  (LINE:766)\l0x002b: SGET  (r5 I:android.text.Layout$Alignment) =  android.text.Layout.Alignment.ALIGN_NORMAL android.text.Layout$Alignment \l0x002d: CONST_STR  (r6 I:java.lang.String) =  \"getLayoutAlignment\" \l0x002f: INVOKE  (r3 I:java.lang.Object) = (r3 I:java.lang.Object), (r6 I:java.lang.String), (r5 I:java.lang.Object) type: STATIC call: androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.invokeAndReturnWithDefault(java.lang.Object, java.lang.String, java.lang.Object):java.lang.Object A[MD:\<T\>:(java.lang.Object, java.lang.String, T):T (m)]\l0x0033: CHECK_CAST (r3 I:android.text.Layout$Alignment) = (android.text.Layout$Alignment) (r3 I:??[OBJECT, ARRAY]) \l0x0035: IGET  (r5 I:float) = (r11 I:android.graphics.RectF A[D('availableSpace' android.graphics.RectF)]) android.graphics.RectF.right float  (LINE:768)\l0x0037: INVOKE  (r5 I:int) = (r5 I:float) type: STATIC call: java.lang.Math.round(float):int A[MD:(float):int (c)]\l0x003b: INVOKE  (r5 I:android.text.StaticLayout) = \l  (r9 I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper)\l  (r0 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)])\l  (r3 I:android.text.Layout$Alignment A[D('alignment' android.text.Layout$Alignment)])\l  (r5 I:int)\l  (r2 I:int A[D('maxLines' int)])\l type: VIRTUAL call: androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.createLayout(java.lang.CharSequence, android.text.Layout$Alignment, int, int):android.text.StaticLayout A[MD:(java.lang.CharSequence, android.text.Layout$Alignment, int, int):android.text.StaticLayout (m)]\l0x003f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:771)\l0x0040: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0041|0x0041: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('maxLines' int)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0059 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: INVOKE  (r4 I:int) = (r5 I:android.text.StaticLayout A[D('layout' android.text.StaticLayout)]) type: VIRTUAL call: android.text.StaticLayout.getLineCount():int A[MD:():int (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0047|0x0047: IF  (r4 I:??[int, byte, short, char]) \> (r2 I:??[int, byte, short, char] A[D('maxLines' int)])  \-\> B:17:0x0058 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0049|0x0049: INVOKE  (r4 I:int) = (r5 I:android.text.StaticLayout A[D('layout' android.text.StaticLayout)]) type: VIRTUAL call: android.text.StaticLayout.getLineCount():int A[MD:():int (c)] (LINE:772)\l0x004d: ARITH  (r4 I:int) = (r4 I:int) \- (r7 I:int) \l0x004e: INVOKE  (r4 I:int) = (r5 I:android.text.StaticLayout A[D('layout' android.text.StaticLayout)]), (r4 I:int) type: VIRTUAL call: android.text.StaticLayout.getLineEnd(int):int A[MD:(int):int (c)]\l0x0052: INVOKE  (r8 I:int) = (r0 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0056|0x0056: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0059 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0058|RETURN\l|0x0058: RETURN  (r6 I:boolean)  (LINE:773)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0059|0x0059: INVOKE  (r4 I:int) = (r5 I:android.text.StaticLayout A[D('layout' android.text.StaticLayout)]) type: VIRTUAL call: android.text.StaticLayout.getHeight():int A[MD:():int (c)] (LINE:777)\l0x005d: CAST (r4 I:float) = (float) (r4 I:int) \l0x005e: IGET  (r8 I:float) = (r11 I:android.graphics.RectF A[D('availableSpace' android.graphics.RectF)]) android.graphics.RectF.bottom float \l0x0060: CMP_L  (r4 I:int) = (r4 I:float), (r8 I:float) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0062|0x0062: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:21:0x0065 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0064|RETURN\l|0x0064: RETURN  (r6 I:boolean)  (LINE:778)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0065|RETURN\l|0x0065: RETURN  (r7 I:boolean)  (LINE:781)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0025|0x0025: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
MethodNode[shape=record,label="{private boolean androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper.suggestedSizeFitsInSpace((r9 'this' I:androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper A[IMMUTABLE_TYPE, THIS]), (r10 I:int A[D('suggestedSizeInPx' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:android.graphics.RectF A[D('availableSpace' android.graphics.RectF), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0064 \-\> B:1:?, CROSS_EDGE: B:21:0x0065 \-\> B:1:?, CROSS_EDGE: B:14:0x0047 \-\> B:17:0x0058, CROSS_EDGE: B:12:0x0041 \-\> B:18:0x0059, CROSS_EDGE: B:10:0x0025 \-\> B:11:0x0026, CROSS_EDGE: B:5:0x0014 \-\> B:7:0x0017, CROSS_EDGE: B:3:0x000c \-\> B:7:0x0017\lDebug Info:\l  0x0014\-0x0017: r2 'transformedText' Ljava\/lang\/CharSequence;\l  0x0006\-0x0065: r0 'text' Ljava\/lang\/CharSequence;\l  0x000c\-0x0065: r1 'transformationMethod' Landroid\/text\/method\/TransformationMethod;\l  0x0026\-0x0065: r2 'maxLines' I\l  0x0035\-0x0065: r3 'alignment' Landroid\/text\/Layout$Alignment;\l  0x003f\-0x0065: r5 'layout' Landroid\/text\/StaticLayout;\l  \-1 \-0x0065: r10 'suggestedSizeInPx' I\l  \-1 \-0x0065: r11 'availableSpace' Landroid\/graphics\/RectF;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_1;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_1;
Node_21 -> Node_1;
Node_10 -> Node_11;
}

