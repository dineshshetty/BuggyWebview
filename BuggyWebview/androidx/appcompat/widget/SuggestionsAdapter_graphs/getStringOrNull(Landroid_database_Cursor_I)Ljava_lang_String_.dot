digraph "CFG forandroidx.appcompat.widget.SuggestionsAdapter.getStringOrNull(Landroid\/database\/Cursor;I)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r5 != (\-1)) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|RETURN\l|return null\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x000a, blocks: (B:5:0x0005), top: B:10:0x0005 \}\lCatch: Exception \-\> 0x000a\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|RETURN\l|return r4.getString(r5)\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|ExcHandler: Exception \-\> 0x000a\l|java.lang.Exception r1 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x000b|android.util.Log.e(androidx.appcompat.widget.SuggestionsAdapter.LOG_TAG, \"unexpected error retrieving valid column from cursor, did the remote process die?\", r1)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0012|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static java.lang.String androidx.appcompat.widget.SuggestionsAdapter.getStringOrNull((r4v0 'cursor' android.database.Cursor A[D('cursor' android.database.Cursor), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'col' int A[D('col' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0009 \-\> B:1:?, CROSS_EDGE: B:9:0x0012 \-\> B:1:?, CROSS_EDGE: B:10:0x0005 \-\> B:7:0x000a\lINLINE_NOT_NEEDED\lTryCatch #0 \{Exception \-\> 0x000a, blocks: (B:5:0x0005), top: B:10:0x0005 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_1;
Node_10 -> Node_5;
Node_10 -> Node_7;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_1;
Node_11 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

