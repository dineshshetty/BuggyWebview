digraph "CFG forandroidx.appcompat.widget.SuggestionsAdapter.convertToString(Landroid\/database\/Cursor;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:414)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0001|0x0001: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('cursor' android.database.Cursor)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0004 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:java.lang.CharSequence)  (LINE:415)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0004|0x0004: CONST_STR  (r1 I:java.lang.String) =  \"suggest_intent_query\"  (LINE:418)\l0x0006: INVOKE  (r1 I:java.lang.String) = (r4 I:android.database.Cursor A[D('cursor' android.database.Cursor)]), (r1 I:java.lang.String) type: STATIC call: androidx.appcompat.widget.SuggestionsAdapter.getColumnString(android.database.Cursor, java.lang.String):java.lang.String A[MD:(android.database.Cursor, java.lang.String):java.lang.String (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('query' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000d  (LINE:419)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|0x000c: RETURN  (r1 I:java.lang.CharSequence A[D('query' java.lang.String)])  (LINE:420)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000d|0x000d: IGET  (r2 I:android.app.SearchableInfo) = (r3 I:androidx.appcompat.widget.SuggestionsAdapter) androidx.appcompat.widget.SuggestionsAdapter.mSearchable android.app.SearchableInfo  (LINE:423)\l0x000f: INVOKE  (r2 I:boolean) = (r2 I:android.app.SearchableInfo) type: VIRTUAL call: android.app.SearchableInfo.shouldRewriteQueryFromData():boolean A[MD:():boolean (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001e \l}"];
Node_10 [shape=record,label="{10\:\ 0x0015|0x0015: CONST_STR  (r2 I:java.lang.String) =  \"suggest_intent_data\"  (LINE:424)\l0x0017: INVOKE  (r2 I:java.lang.String) = (r4 I:android.database.Cursor A[D('cursor' android.database.Cursor)]), (r2 I:java.lang.String) type: STATIC call: androidx.appcompat.widget.SuggestionsAdapter.getColumnString(android.database.Cursor, java.lang.String):java.lang.String A[MD:(android.database.Cursor, java.lang.String):java.lang.String (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('data' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001e  (LINE:425)\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|RETURN\l|0x001d: RETURN  (r2 I:java.lang.CharSequence A[D('data' java.lang.String)])  (LINE:426)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: IGET  (r2 I:android.app.SearchableInfo A[D('data' java.lang.String)]) = (r3 I:androidx.appcompat.widget.SuggestionsAdapter) androidx.appcompat.widget.SuggestionsAdapter.mSearchable android.app.SearchableInfo  (LINE:430)\l0x0020: INVOKE  (r2 I:boolean) = (r2 I:android.app.SearchableInfo) type: VIRTUAL call: android.app.SearchableInfo.shouldRewriteQueryFromText():boolean A[MD:():boolean (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|0x0026: CONST_STR  (r2 I:java.lang.String) =  \"suggest_text_1\"  (LINE:431)\l0x0028: INVOKE  (r2 I:java.lang.String) = (r4 I:android.database.Cursor A[D('cursor' android.database.Cursor)]), (r2 I:java.lang.String) type: STATIC call: androidx.appcompat.widget.SuggestionsAdapter.getColumnString(android.database.Cursor, java.lang.String):java.lang.String A[MD:(android.database.Cursor, java.lang.String):java.lang.String (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x002c|0x002c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('text1' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f  (LINE:432)\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|RETURN\l|0x002e: RETURN  (r2 I:java.lang.CharSequence A[D('text1' java.lang.String)])  (LINE:433)\l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|RETURN\l|0x002f: RETURN  (r0 I:java.lang.CharSequence)  (LINE:437)\l}"];
MethodNode[shape=record,label="{public java.lang.CharSequence androidx.appcompat.widget.SuggestionsAdapter.convertToString((r3 'this' I:androidx.appcompat.widget.SuggestionsAdapter A[IMMUTABLE_TYPE, THIS]), (r4 I:android.database.Cursor A[D('cursor' android.database.Cursor), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000c \-\> B:1:?, CROSS_EDGE: B:12:0x001d \-\> B:1:?, CROSS_EDGE: B:17:0x002e \-\> B:1:?, CROSS_EDGE: B:18:0x002f \-\> B:1:?, CROSS_EDGE: B:14:0x0024 \-\> B:18:0x002f, CROSS_EDGE: B:9:0x0013 \-\> B:13:0x001e\lDebug Info:\l  0x001b\-0x001e: r2 'data' Ljava\/lang\/String;\l  0x002c\-0x002f: r2 'text1' Ljava\/lang\/String;\l  0x000a\-0x002f: r1 'query' Ljava\/lang\/String;\l  \-1 \-0x002f: r4 'cursor' Landroid\/database\/Cursor;\lMETHOD_OVERRIDE: [androidx.cursoradapter.widget.CursorAdapter.convertToString(android.database.Cursor):java.lang.CharSequence, androidx.cursoradapter.widget.CursorFilter.CursorFilterClient.convertToString(android.database.Cursor):java.lang.CharSequence]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_13;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_18;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_1;
Node_18 -> Node_1;
}

