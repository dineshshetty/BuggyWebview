digraph "CFG forandroidx.appcompat.widget.Toolbar.setLogoDescription(Ljava\/lang\/CharSequence;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:java.lang.CharSequence A[D('description' java.lang.CharSequence)]) type: STATIC call: android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (c)] (LINE:698)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0009 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: INVOKE  (r1 I:androidx.appcompat.widget.Toolbar) type: DIRECT call: androidx.appcompat.widget.Toolbar.ensureLogoView():void A[MD:():void (m)] (LINE:699)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|0x0009: IGET  (r0 I:android.widget.ImageView) = (r1 I:androidx.appcompat.widget.Toolbar) androidx.appcompat.widget.Toolbar.mLogoView android.widget.ImageView  (LINE:701)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|0x000d: INVOKE  (r0 I:android.widget.ImageView), (r2 I:java.lang.CharSequence A[D('description' java.lang.CharSequence)]) type: VIRTUAL call: android.widget.ImageView.setContentDescription(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (c)] (LINE:702)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: RETURN    (LINE:704)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0010: RETURN   A[SYNTHETIC] (LINE:704)\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.Toolbar.setLogoDescription((r1 'this' I:androidx.appcompat.widget.Toolbar A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.CharSequence A[D('description' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x000b \-\> B:18:0x0010, CROSS_EDGE: B:13:0x0004 \-\> B:15:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r2 'description' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_11;
Node_19 -> Node_11;
}

