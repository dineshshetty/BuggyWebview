digraph "CFG forandroidx.appcompat.widget.AppCompatTextClassifierHelper.getTextClassifier()Landroid\/view\/textclassifier\/TextClassifier;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:android.view.textclassifier.TextClassifier) = (r1 I:androidx.appcompat.widget.AppCompatTextClassifierHelper) androidx.appcompat.widget.AppCompatTextClassifierHelper.mTextClassifier android.view.textclassifier.TextClassifier  (LINE:63)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IGET  (r0 I:android.widget.TextView) = (r1 I:androidx.appcompat.widget.AppCompatTextClassifierHelper) androidx.appcompat.widget.AppCompatTextClassifierHelper.mTextView android.widget.TextView  (LINE:64)\l0x0006: INVOKE  (r0 I:android.view.textclassifier.TextClassifier) = (r0 I:android.widget.TextView) type: STATIC call: androidx.appcompat.widget.AppCompatTextClassifierHelper.Api26Impl.getTextClassifier(android.widget.TextView):android.view.textclassifier.TextClassifier A[MD:(android.widget.TextView):android.view.textclassifier.TextClassifier (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:android.view.textclassifier.TextClassifier) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:android.view.textclassifier.TextClassifier)  (LINE:66)\l}"];
MethodNode[shape=record,label="{public android.view.textclassifier.TextClassifier androidx.appcompat.widget.AppCompatTextClassifierHelper.getTextClassifier((r1 'this' I:androidx.appcompat.widget.AppCompatTextClassifierHelper A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000b \-\> B:8:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

