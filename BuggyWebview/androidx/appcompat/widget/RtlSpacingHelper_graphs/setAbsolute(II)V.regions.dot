digraph "CFG forandroidx.appcompat.widget.RtlSpacingHelper.setAbsolute(II)V" {
subgraph cluster_Region_901030362 {
label = "R(3:1|(1:3)|(1:(1:5)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|r1.mIsRelative = false\l}"];
subgraph cluster_IfRegion_1791935742 {
label = "IF [B:12:0x0005] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0005|if (r2 != Integer.MIN_VALUE) goto L3\l}"];
subgraph cluster_Region_1430274096 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0007|r1.mExplicitLeft = r2\lr1.mLeft = r2\l}"];
}
}
subgraph cluster_Region_592638760 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_871906537 {
label = "IF [B:14:0x000b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000b|if (r3 != Integer.MIN_VALUE) goto L5\l}"];
subgraph cluster_Region_797828956 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000d|r1.mExplicitRight = r3\lr1.mRight = r3\l}"];
}
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0011|ORIG_RETURN\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.RtlSpacingHelper.setAbsolute((r1v0 'this' androidx.appcompat.widget.RtlSpacingHelper A[IMMUTABLE_TYPE, THIS]), (r2v0 'left' int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'right' int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x000b \-\> B:16:0x0011, CROSS_EDGE: B:12:0x0005 \-\> B:14:0x000b\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
Node_15 -> Node_16;
Node_9 -> Node_11;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

