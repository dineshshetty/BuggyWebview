digraph "CFG forandroidx.appcompat.widget.RtlSpacingHelper.setDirection(Z)V" {
subgraph cluster_Region_2015064925 {
label = "R(1:(2:(1:3)|(2:5|(1:25)(1:(5:9|(1:11)|12|(1:14)|15)(5:17|(1:19)|20|(1:22)|23)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1281623237 {
label = "R(2:(1:3)|(2:5|(1:25)(1:(5:9|(1:11)|12|(1:14)|15)(5:17|(1:19)|20|(1:22)|23))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1049196244 {
label = "IF [B:34:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0002|if (r3 == r2.mIsRtl) goto L3\l}"];
subgraph cluster_Region_2130624862 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0004|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1574749255 {
label = "R(2:5|(1:25)(1:(5:9|(1:11)|12|(1:14)|15)(5:17|(1:19)|20|(1:22)|23)))";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0005|r2.mIsRtl = r3\l}"];
subgraph cluster_IfRegion_829595925 {
label = "IF [B:37:0x0009] THEN: R(1:25) ELSE: R(1:(5:9|(1:11)|12|(1:14)|15)(5:17|(1:19)|20|(1:22)|23))";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0009|if (r2.mIsRelative != true) goto L25\l}"];
subgraph cluster_Region_1144544825 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0035|r2.mLeft = r2.mExplicitLeft\lr2.mRight = r2.mExplicitRight\l}"];
}
subgraph cluster_Region_1287947217 {
label = "R(1:(5:9|(1:11)|12|(1:14)|15)(5:17|(1:19)|20|(1:22)|23)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2004982002 {
label = "IF [B:39:0x000d] THEN: R(5:9|(1:11)|12|(1:14)|15) ELSE: R(5:17|(1:19)|20|(1:22)|23) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x000d|if (r3 != false) goto L9\l}"];
subgraph cluster_Region_1829242105 {
label = "R(5:9|(1:11)|12|(1:14)|15)";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x000f|int int r1 = r2.mEnd\l}"];
subgraph cluster_IfRegion_1150144080 {
label = "IF [B:41:0x0011] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0011|if (r1 == Integer.MIN_VALUE) goto L11\l}"];
subgraph cluster_Region_580645515 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0014|int r1 = r2.mExplicitLeft\l}"];
}
}
Node_44 [shape=record,label="{44\:\ 0x0016|PHI: r1 \l  PHI: (r1v7 int) = (r1v6 int), (r1v11 int) binds: [B:41:0x0011, B:43:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|r2.mLeft = r1\lint int r1 = r2.mStart\l}"];
subgraph cluster_IfRegion_1941448492 {
label = "IF [B:45:0x001a] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x001a|if (r1 == Integer.MIN_VALUE) goto L14\l}"];
subgraph cluster_Region_1580916702 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x001d|int r1 = r2.mExplicitRight\l}"];
}
}
Node_48 [shape=record,label="{48\:\ 0x001f|PHI: r1 \l  PHI: (r1v9 int) = (r1v8 int), (r1v10 int) binds: [B:45:0x001a, B:47:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|r2.mRight = r1\l}"];
}
subgraph cluster_Region_1461668100 {
label = "R(5:17|(1:19)|20|(1:22)|23)";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x0022|int int r1 = r2.mStart\l}"];
subgraph cluster_IfRegion_1944557412 {
label = "IF [B:50:0x0024] THEN: R(1:19) ELSE: null";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x0024|if (r1 == Integer.MIN_VALUE) goto L19\l}"];
subgraph cluster_Region_1651427292 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x0027|int r1 = r2.mExplicitLeft\l}"];
}
}
Node_53 [shape=record,label="{53\:\ 0x0029|PHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v5 int) binds: [B:50:0x0024, B:52:0x0027] A[DONT_GENERATE, DONT_INLINE]\l|r2.mLeft = r1\lint int r1 = r2.mEnd\l}"];
subgraph cluster_IfRegion_2035051563 {
label = "IF [B:54:0x002d] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x002d|if (r1 == Integer.MIN_VALUE) goto L22\l}"];
subgraph cluster_Region_1412843712 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x0030|int r1 = r2.mExplicitRight\l}"];
}
}
Node_57 [shape=record,label="{57\:\ 0x0032|PHI: r1 \l  PHI: (r1v3 int) = (r1v2 int), (r1v4 int) binds: [B:54:0x002d, B:56:0x0030] A[DONT_GENERATE, DONT_INLINE]\l|r2.mRight = r1\l}"];
}
}
}
}
}
}
}
Node_31 [shape=record,color=red,label="{31\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0000}"];
Node_32 [shape=record,color=red,label="{32\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x000b}"];
Node_60 [shape=record,color=red,label="{60\:\ ?|SYNTHETIC\l}"];
Node_61 [shape=record,color=red,label="{61\:\ ?|SYNTHETIC\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x003d|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.RtlSpacingHelper.setDirection((r2v0 'this' androidx.appcompat.widget.RtlSpacingHelper A[IMMUTABLE_TYPE, THIS]), (r3v0 'isRtl' boolean A[D('isRtl' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:59:0x003d \-\> B:32:?, CROSS_EDGE: B:45:0x001a \-\> B:48:0x001f, CROSS_EDGE: B:41:0x0011 \-\> B:44:0x0016, CROSS_EDGE: B:57:0x0032 \-\> B:59:0x003d, CROSS_EDGE: B:54:0x002d \-\> B:57:0x0032, CROSS_EDGE: B:50:0x0024 \-\> B:53:0x0029, CROSS_EDGE: B:58:0x0035 \-\> B:59:0x003d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_31;Node_34 -> Node_35;
Node_34 -> Node_36[style=dashed];
Node_35 -> Node_32;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_58;
Node_58 -> Node_59;
Node_39 -> Node_40;
Node_39 -> Node_49[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_43;
Node_41 -> Node_44[style=dashed];
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_47;
Node_45 -> Node_48[style=dashed];
Node_47 -> Node_48;
Node_48 -> Node_60;
Node_49 -> Node_50;
Node_50 -> Node_52;
Node_50 -> Node_53[style=dashed];
Node_52 -> Node_53;
Node_53 -> Node_54;
Node_54 -> Node_56;
Node_54 -> Node_57[style=dashed];
Node_56 -> Node_57;
Node_57 -> Node_61;
Node_31 -> Node_33;
Node_33 -> Node_34;
Node_38 -> Node_39;
Node_60 -> Node_32;
Node_61 -> Node_32;
Node_59 -> Node_32;
}

