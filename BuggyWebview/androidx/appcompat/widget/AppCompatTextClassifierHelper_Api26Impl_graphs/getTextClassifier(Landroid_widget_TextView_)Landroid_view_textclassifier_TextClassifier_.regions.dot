digraph "CFG forandroidx.appcompat.widget.AppCompatTextClassifierHelper.Api26Impl.getTextClassifier(Landroid\/widget\/TextView;)Landroid\/view\/textclassifier\/TextClassifier;" {
subgraph cluster_Region_963325481 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0001|android.view.textclassifier.TextClassificationManager android.view.textclassifier.TextClassificationManager r0 = (android.view.textclassifier.TextClassificationManager) r2.getContext().getSystemService(android.view.textclassifier.TextClassificationManager.class)\l}"];
subgraph cluster_Region_1202035636 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1152787018 {
label = "IF [B:11:0x000d] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000d|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1853606981 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0013|RETURN\l|return r0.getTextClassifier()\l}"];
}
}
subgraph cluster_Region_23083851 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0016|RETURN\l|return android.view.textclassifier.TextClassifier.NO_OP\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000f}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0014}"];
MethodNode[shape=record,label="{static android.view.textclassifier.TextClassifier androidx.appcompat.widget.AppCompatTextClassifierHelper.Api26Impl.getTextClassifier((r2v0 'textView' android.widget.TextView A[D('textView' android.widget.TextView), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0016 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

