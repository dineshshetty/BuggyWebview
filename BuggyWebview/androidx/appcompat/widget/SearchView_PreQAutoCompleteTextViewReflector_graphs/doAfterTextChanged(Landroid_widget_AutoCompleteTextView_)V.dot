digraph "CFG forandroidx.appcompat.widget.SearchView.PreQAutoCompleteTextViewReflector.doAfterTextChanged(Landroid\/widget\/AutoCompleteTextView;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|preApi29Check()\ljava.lang.reflect.Method r0 = r2.mDoAfterTextChanged\l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|if (r0 == null) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007}"];
Node_22 [shape=record,label="{22\:\ 0x0008|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x000e, blocks: (B:18:0x0008), top: B:22:0x0008 \}\lCatch: Exception \-\> 0x000e\l|r0.invoke(r3, new java.lang.Object[0])     \/\/ Catch: java.lang.Exception \-\> Le\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|ExcHandler: Exception \-\> 0x000e\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|RETURN\lORIG_RETURN\l|return\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{void androidx.appcompat.widget.SearchView.PreQAutoCompleteTextViewReflector.doAfterTextChanged((r2v0 'this' androidx.appcompat.widget.SearchView$PreQAutoCompleteTextViewReflector A[IMMUTABLE_TYPE, THIS]), (r3v0 'view' android.widget.AutoCompleteTextView A[D('view' android.widget.AutoCompleteTextView), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x000e \-\> B:21:0x000f, CROSS_EDGE: B:22:0x0008 \-\> B:20:0x000e, CROSS_EDGE: B:16:0x0005 \-\> B:21:0x000f\lINLINE_NOT_NEEDED\lTryCatch #0 \{Exception \-\> 0x000e, blocks: (B:18:0x0008), top: B:22:0x0008 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_22;
Node_22 -> Node_18;
Node_22 -> Node_20;
Node_18 -> Node_23;
Node_18 -> Node_25;
Node_23 -> Node_20;
Node_25 -> Node_14;
Node_20 -> Node_21;
Node_21 -> Node_14;
Node_24 -> Node_14;
}

