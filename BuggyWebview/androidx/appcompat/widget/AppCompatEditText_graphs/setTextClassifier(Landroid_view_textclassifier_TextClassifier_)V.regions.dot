digraph "CFG forandroidx.appcompat.widget.AppCompatEditText.setTextClassifier(Landroid\/view\/textclassifier\/TextClassifier;)V" {
subgraph cluster_Region_1498950697 {
label = "R(1:(1:8)(1:5)) | DECL_VAR: androidx.appcompat.widget.AppCompatTextClassifierHelper null\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1416816392 {
label = "IF [B:14:0x0004, B:16:0x0008] THEN: R(1:8) ELSE: R(1:5)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0004|if (android.os.Build.VERSION.SDK_INT \>= 28) goto L8\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|ADDED_TO_REGION\l|if ((r0 = r2.mTextClassifierHelper) == null) goto L8\l}"];
subgraph cluster_Region_341704751 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x000f|super.setTextClassifier(r3)\l}"];
}
subgraph cluster_Region_1546109189 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000b|r0.setTextClassifier(r3)\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0006}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000e}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0012}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.AppCompatEditText.setTextClassifier((r2v0 'this' androidx.appcompat.widget.AppCompatEditText A[IMMUTABLE_TYPE, THIS]), (r3v0 'textClassifier' android.view.textclassifier.TextClassifier A[D('textClassifier' android.view.textclassifier.TextClassifier), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:21:0x0012 \-\> B:12:?, CROSS_EDGE: B:14:0x0004 \-\> B:20:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.widget.TextView.setTextClassifier(android.view.textclassifier.TextClassifier):void\}]\l}"];
MethodNode -> Node_11;Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_16 -> Node_18[style=dashed];
Node_16 -> Node_20;
Node_20 -> Node_21;
Node_18 -> Node_19;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_15 -> Node_16;
Node_19 -> Node_12;
Node_21 -> Node_12;
}

