digraph "CFG forandroidx.appcompat.widget.ShareActionProvider.updateIntent(Landroid\/content\/Intent;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:411)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:5:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, short, byte, char]) = (134742016(0x8080000, float:4.092601E\-34) ??[int, float, short, byte, char])  (LINE:413)\l0x0008: INVOKE  (r3 I:android.content.Intent A[D('intent' android.content.Intent)]), (r0 I:int) type: VIRTUAL call: android.content.Intent.addFlags(int):android.content.Intent A[MD:(int):android.content.Intent (c)]\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN   A[SYNTHETIC] (LINE:419)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, short, byte, char]) = (524288(0x80000, float:7.34684E\-40) ??[int, float, short, byte, char])  (LINE:417)\l0x000e: INVOKE  (r3 I:android.content.Intent A[D('intent' android.content.Intent)]), (r0 I:int) type: VIRTUAL call: android.content.Intent.addFlags(int):android.content.Intent A[MD:(int):android.content.Intent (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: RETURN    (LINE:419)\l}"];
MethodNode[shape=record,label="{void androidx.appcompat.widget.ShareActionProvider.updateIntent((r2 'this' I:androidx.appcompat.widget.ShareActionProvider A[IMMUTABLE_TYPE, THIS]), (r3 I:android.content.Intent A[D('intent' android.content.Intent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000c \-\> B:6:0x0011\lDebug Info:\l  \-1 \-0x0011: r3 'intent' Landroid\/content\/Intent;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

