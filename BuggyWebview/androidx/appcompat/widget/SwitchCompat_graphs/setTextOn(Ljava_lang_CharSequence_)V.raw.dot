digraph "CFG forandroidx.appcompat.widget.SwitchCompat.setTextOn(Ljava\/lang\/CharSequence;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r1 I:androidx.appcompat.widget.SwitchCompat), (r2 I:java.lang.CharSequence A[D('textOn' java.lang.CharSequence)]) type: DIRECT call: androidx.appcompat.widget.SwitchCompat.setTextOnInternal(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (m)] (LINE:826)\l0x0003: INVOKE  (r1 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.requestLayout():void A[MD:():void (s)] (LINE:827)\l0x0006: INVOKE  (r0 I:boolean) = (r1 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.isChecked():boolean A[MD:():boolean (c)] (LINE:828)\l}"];
Node_10 [shape=record,label="{10\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x000c|0x000c: INVOKE  (r1 I:androidx.appcompat.widget.SwitchCompat) type: DIRECT call: androidx.appcompat.widget.SwitchCompat.setOnStateDescriptionOnRAndAbove():void A[MD:():void (m)] (LINE:831)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN    (LINE:833)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN   A[SYNTHETIC] (LINE:833)\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.SwitchCompat.setTextOn((r1 'this' I:androidx.appcompat.widget.SwitchCompat A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.CharSequence A[D('textOn' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000a \-\> B:12:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r2 'textOn' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

