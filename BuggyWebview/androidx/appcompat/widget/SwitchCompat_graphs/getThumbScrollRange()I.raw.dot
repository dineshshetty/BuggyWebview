digraph "CFG forandroidx.appcompat.widget.SwitchCompat.getThumbScrollRange()I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:android.graphics.drawable.Drawable) = (r4 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mTrackDrawable android.graphics.drawable.Drawable  (LINE:1431)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0026 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: IGET  (r1 I:android.graphics.Rect) = (r4 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mTempRect android.graphics.Rect  (LINE:1432)\l0x0006: INVOKE  (r0 I:android.graphics.drawable.Drawable), (r1 I:android.graphics.Rect A[D('padding' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getPadding(android.graphics.Rect):boolean A[MD:(android.graphics.Rect):boolean (c)] (LINE:1433)\l0x0009: IGET  (r0 I:android.graphics.drawable.Drawable) = (r4 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mThumbDrawable android.graphics.drawable.Drawable  (LINE:1436)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0012 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: INVOKE  (r0 I:android.graphics.Rect) = (r0 I:android.graphics.drawable.Drawable) type: STATIC call: androidx.appcompat.widget.DrawableUtils.getOpticalBounds(android.graphics.drawable.Drawable):android.graphics.Rect A[MD:(android.graphics.drawable.Drawable):android.graphics.Rect (m)] (LINE:1437)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|0x0014: IGET  (r2 I:int) = (r4 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchWidth int  (LINE:1442)\l0x0016: IGET  (r3 I:int) = (r4 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mThumbWidth int \l0x0018: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0019: IGET  (r3 I:int) = (r1 I:android.graphics.Rect A[D('padding' android.graphics.Rect)]) android.graphics.Rect.left int \l0x001b: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001c: IGET  (r3 I:int) = (r1 I:android.graphics.Rect A[D('padding' android.graphics.Rect)]) android.graphics.Rect.right int \l0x001e: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001f: IGET  (r3 I:int) = (r0 I:android.graphics.Rect A[D('insets' android.graphics.Rect)]) android.graphics.Rect.left int \l0x0021: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0022: IGET  (r3 I:int) = (r0 I:android.graphics.Rect A[D('insets' android.graphics.Rect)]) android.graphics.Rect.right int \l0x0024: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|RETURN\l|0x0025: RETURN  (r2 I:int) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: SGET  (r0 I:android.graphics.Rect A[D('insets' android.graphics.Rect)]) =  androidx.appcompat.widget.DrawableUtils.INSETS_NONE android.graphics.Rect  (LINE:1439)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|RETURN\l|0x0026: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('insets' android.graphics.Rect)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1445)\l0x0027: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private int androidx.appcompat.widget.SwitchCompat.getThumbScrollRange((r4 'this' I:androidx.appcompat.widget.SwitchCompat A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0012 \-\> B:20:0x0014, CROSS_EDGE: B:23:0x0027 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0012: r0 'insets' Landroid\/graphics\/Rect;\l  0x0014\-0x0026: r0 'insets' Landroid\/graphics\/Rect;\l  0x0006\-0x0026: r1 'padding' Landroid\/graphics\/Rect;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_19 -> Node_20;
Node_22 -> Node_13;
}

