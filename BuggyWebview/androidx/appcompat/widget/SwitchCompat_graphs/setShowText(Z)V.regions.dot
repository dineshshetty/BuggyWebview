digraph "CFG forandroidx.appcompat.widget.SwitchCompat.setShowText(Z)V" {
subgraph cluster_Region_1406731385 {
label = "R(1:(1:(2:3|(1:(1:5)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1729860246 {
label = "R(1:(2:3|(1:(1:5))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1636104784 {
label = "IF [B:13:0x0002] THEN: R(2:3|(1:(1:5))) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0002|if (r1.mShowText != r2) goto L3\l}"];
subgraph cluster_Region_1655396251 {
label = "R(2:3|(1:(1:5)))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0004|r1.mShowText = r2\lrequestLayout()\l}"];
subgraph cluster_Region_2034924923 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1115607014 {
label = "IF [B:15:0x0009] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0009|if (r2 != false) goto L5\l}"];
subgraph cluster_Region_74378115 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x000b|setupEmojiCompatLoadCallback()\l}"];
}
}
}
}
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0000}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000e|ORIG_RETURN\l}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.SwitchCompat.setShowText((r1v0 'this' androidx.appcompat.widget.SwitchCompat A[IMMUTABLE_TYPE, THIS]), (r2v0 'showText' boolean A[D('showText' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0009 \-\> B:17:0x000e, CROSS_EDGE: B:13:0x0002 \-\> B:17:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_13 -> Node_14;
Node_13 -> Node_18[style=dashed];
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_19[style=dashed];
Node_16 -> Node_17;
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_18 -> Node_11;
}

