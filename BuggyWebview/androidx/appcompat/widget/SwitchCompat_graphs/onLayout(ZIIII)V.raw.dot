digraph "CFG forandroidx.appcompat.widget.SwitchCompat.onLayout(ZIIII)V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: INVOKE  \l  (r8 I:android.widget.CompoundButton)\l  (r9 I:boolean A[D('changed' boolean)])\l  (r10 I:int A[D('left' int)])\l  (r11 I:int A[D('top' int)])\l  (r12 I:int A[D('right' int)])\l  (r13 I:int A[D('bottom' int)])\l type: SUPER call: android.widget.CompoundButton.onLayout(boolean, int, int, int, int):void A[MD:(boolean, int, int, int, int):void (s)] (LINE:1206)\l0x0003: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1208)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1209)\l0x0005: IGET  (r2 I:android.graphics.drawable.Drawable) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mThumbDrawable android.graphics.drawable.Drawable  (LINE:1210)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002f \l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|0x0009: IGET  (r2 I:android.graphics.Rect) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mTempRect android.graphics.Rect  (LINE:1211)\l0x000b: IGET  (r3 I:android.graphics.drawable.Drawable) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mTrackDrawable android.graphics.drawable.Drawable  (LINE:1212)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000d|0x000d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0013 \l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: INVOKE  (r3 I:android.graphics.drawable.Drawable), (r2 I:android.graphics.Rect A[D('trackPadding' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getPadding(android.graphics.Rect):boolean A[MD:(android.graphics.Rect):boolean (c)] (LINE:1213)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|0x0016: IGET  (r3 I:android.graphics.drawable.Drawable) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mThumbDrawable android.graphics.drawable.Drawable  (LINE:1218)\l0x0018: INVOKE  (r3 I:android.graphics.Rect) = (r3 I:android.graphics.drawable.Drawable) type: STATIC call: androidx.appcompat.widget.DrawableUtils.getOpticalBounds(android.graphics.drawable.Drawable):android.graphics.Rect A[MD:(android.graphics.drawable.Drawable):android.graphics.Rect (m)]\l0x001c: IGET  (r4 I:int) = (r3 I:android.graphics.Rect A[D('insets' android.graphics.Rect)]) android.graphics.Rect.left int  (LINE:1219)\l0x001e: IGET  (r5 I:int) = (r2 I:android.graphics.Rect A[D('trackPadding' android.graphics.Rect)]) android.graphics.Rect.left int \l0x0020: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x0021: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: INVOKE  (r0 I:int A[D('opticalInsetLeft' int)]) = (r5 I:int), (r4 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x0026: IGET  (r4 I:int) = (r3 I:android.graphics.Rect A[D('insets' android.graphics.Rect)]) android.graphics.Rect.right int  (LINE:1220)\l0x0028: IGET  (r6 I:int) = (r2 I:android.graphics.Rect A[D('trackPadding' android.graphics.Rect)]) android.graphics.Rect.right int \l0x002a: ARITH  (r4 I:int) = (r4 I:int) \- (r6 I:int) \l0x002b: INVOKE  (r1 I:int A[D('opticalInsetRight' int)]) = (r5 I:int), (r4 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|0x0013: INVOKE  (r2 I:android.graphics.Rect A[D('trackPadding' android.graphics.Rect)]) type: VIRTUAL call: android.graphics.Rect.setEmpty():void A[MD:():void (c)] (LINE:1215)\l}"];
Node_29 [shape=record,label="{29\:\ 0x002f|0x002f: INVOKE  (r2 I:boolean) = (r8 I:android.view.View) type: STATIC call: androidx.appcompat.widget.ViewUtils.isLayoutRtl(android.view.View):boolean A[MD:(android.view.View):boolean (m)] (LINE:1225)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0033|0x0033: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0040 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0035|0x0035: INVOKE  (r2 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getPaddingLeft():int A[MD:():int (s)] (LINE:1226)\l0x0039: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('opticalInsetLeft' int)]) \l0x003a: IGET  (r3 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchWidth int  (LINE:1227)\l0x003c: ARITH  (r3 I:int) = (r3 I:int) + (r2 I:int A[D('switchLeft' int)]) \l0x003d: ARITH  (r3 I:int) = (r3 I:int) \- (r0 I:int A[D('opticalInsetLeft' int)]) \l0x003e: ARITH  (r3 I:int) = (r3 I:int) \- (r1 I:int A[D('opticalInsetRight' int)]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0051|0x0051: INVOKE  (r4 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getGravity():int A[MD:():int (s)] (LINE:1235)\l0x0055: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (112(0x70, float:1.57E\-43) ??[int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0057|0x0057: SWITCH  (r4 I:??)\l case 16: goto B:37:0x0070\l case 80: goto B:36:0x0062\l default: goto B:35:0x005a \l}"];
Node_35 [shape=record,label="{35\:\ 0x005a|0x005a: INVOKE  (r5 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getPaddingTop():int A[MD:():int (s)] (LINE:1238)\l0x005e: IGET  (r4 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchHeight int  (LINE:1239)\l0x0060: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int A[D('switchTop' int)]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0089|0x0089: IPUT  (r2 I:int A[D('switchLeft' int)]), (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchLeft int  (LINE:1254)\l0x008b: IPUT  (r5 I:int A[D('switchTop' int)]), (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchTop int  (LINE:1255)\l0x008d: IPUT  (r4 I:int A[D('switchBottom' int)]), (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchBottom int  (LINE:1256)\l0x008f: IPUT  (r3 I:int A[D('switchRight' int)]), (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchRight int  (LINE:1257)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0091|RETURN\l|0x0091: RETURN    (LINE:1258)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0062|0x0062: INVOKE  (r4 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getHeight():int A[MD:():int (s)] (LINE:1249)\l0x0066: INVOKE  (r5 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getPaddingBottom():int A[MD:():int (s)]\l0x006a: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x006b: IGET  (r5 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchHeight int  (LINE:1250)\l0x006d: ARITH  (r5 I:int) = (r4 I:int A[D('switchBottom' int)]) \- (r5 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0070|0x0070: INVOKE  (r4 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getPaddingTop():int A[MD:():int (s)] (LINE:1243)\l0x0074: INVOKE  (r5 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getHeight():int A[MD:():int (s)]\l0x0078: ARITH  (r4 I:int) = (r4 I:int) + (r5 I:int) \l0x0079: INVOKE  (r5 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getPaddingBottom():int A[MD:():int (s)]\l0x007d: ARITH  (r4 I:int) = (r4 I:int) \- (r5 I:int) \l0x007e: ARITH  (r4 I:int) = (r4 I:int) \/ (2 int) \l0x0080: IGET  (r5 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchHeight int \l0x0082: ARITH  (r6 I:int) = (r5 I:int) \/ (2 int) \l0x0084: ARITH  (r4 I:int) = (r4 I:int) \- (r6 I:int) \l0x0085: ARITH  (r5 I:int) = (r5 I:int) + (r4 I:int A[D('switchTop' int)])  (LINE:1245)\l0x0086: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('switchBottom' int)])  (LINE:1246)\l0x0087: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('switchBottom' int)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('switchTop' int)]) \l0x0088: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('switchTop' int)]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0040|0x0040: INVOKE  (r2 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getWidth():int A[MD:():int (s)] (LINE:1229)\l0x0044: INVOKE  (r3 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) type: VIRTUAL call: androidx.appcompat.widget.SwitchCompat.getPaddingRight():int A[MD:():int (s)]\l0x0048: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x0049: ARITH  (r3 I:int) = (r2 I:int) \- (r1 I:int A[D('opticalInsetRight' int)]) \l0x004b: IGET  (r2 I:int) = (r8 I:androidx.appcompat.widget.SwitchCompat) androidx.appcompat.widget.SwitchCompat.mSwitchWidth int  (LINE:1230)\l0x004d: ARITH  (r2 I:int) = (r3 I:int A[D('switchRight' int)]) \- (r2 I:int) \l0x004f: ARITH  (r2 I:int) = (r2 I:int) + (r0 I:int A[D('opticalInsetLeft' int)]) \l0x0050: ARITH  (r2 I:int) = (r2 I:int) + (r1 I:int A[D('opticalInsetRight' int)]) \l}"];
MethodNode[shape=record,label="{protected void androidx.appcompat.widget.SwitchCompat.onLayout((r8 'this' I:androidx.appcompat.widget.SwitchCompat A[IMMUTABLE_TYPE, THIS]), (r9 I:boolean A[D('changed' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('top' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('bottom' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:36:0x0062 \-\> B:38:0x0089, CROSS_EDGE: B:37:0x0070 \-\> B:38:0x0089, CROSS_EDGE: B:32:0x0040 \-\> B:33:0x0051, CROSS_EDGE: B:27:0x0013 \-\> B:28:0x0016, CROSS_EDGE: B:23:0x0007 \-\> B:29:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x002f: r2 'trackPadding' Landroid\/graphics\/Rect;\l  0x001c\-0x002f: r3 'insets' Landroid\/graphics\/Rect;\l  0x003a\-0x0040: r2 'switchLeft' I\l  0x003f\-0x0040: r3 'switchRight' I\l  0x0061\-0x0062: r4 'switchBottom' I\l  0x005e\-0x0062: r5 'switchTop' I\l  0x006b\-0x0070: r4 'switchBottom' I\l  0x006f\-0x0070: r5 'switchTop' I\l  0x0085\-0x0089: r4 'switchTop' I\l  0x0086\-0x0089: r5 'switchBottom' I\l  0x0004\-0x009b: r0 'opticalInsetLeft' I\l  0x0005\-0x009b: r1 'opticalInsetRight' I\l  0x0051\-0x009b: r2 'switchLeft' I\l  0x004b\-0x009b: r3 'switchRight' I\l  0x0089\-0x009b: r4 'switchBottom' I\l  0x0089\-0x009b: r5 'switchTop' I\l  \-1 \-0x009b: r9 'changed' Z\l  \-1 \-0x009b: r10 'left' I\l  \-1 \-0x009b: r11 'top' I\l  \-1 \-0x009b: r12 'right' I\l  \-1 \-0x009b: r13 'bottom' I\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onLayout(boolean, int, int, int, int):void\}]\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_34 -> Node_36;
Node_34 -> Node_37;
Node_35 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_21;
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_32 -> Node_33;
}

