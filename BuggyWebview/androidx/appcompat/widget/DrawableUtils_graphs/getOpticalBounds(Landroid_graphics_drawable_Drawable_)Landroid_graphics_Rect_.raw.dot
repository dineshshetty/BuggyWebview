digraph "CFG forandroidx.appcompat.widget.DrawableUtils.getOpticalBounds(Landroid\/graphics\/drawable\/Drawable;)Landroid\/graphics\/Rect;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:65)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (29 ??[int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:18:0x0018 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: INVOKE  (r0 I:android.graphics.Insets) = (r6 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: STATIC call: androidx.appcompat.widget.DrawableUtils.Api29Impl.getOpticalInsets(android.graphics.drawable.Drawable):android.graphics.Insets A[MD:(android.graphics.drawable.Drawable):android.graphics.Insets (m)] (LINE:66)\l0x000a: NEW_INSTANCE  (r1 I:android.graphics.Rect) =  android.graphics.Rect  (LINE:67)\l0x000c: IGET  (r2 I:int) = (r0 I:android.graphics.Insets A[D('insets' android.graphics.Insets)]) android.graphics.Insets.left int \l0x000e: IGET  (r3 I:int) = (r0 I:android.graphics.Insets A[D('insets' android.graphics.Insets)]) android.graphics.Insets.top int \l0x0010: IGET  (r4 I:int) = (r0 I:android.graphics.Insets A[D('insets' android.graphics.Insets)]) android.graphics.Insets.right int \l0x0012: IGET  (r5 I:int) = (r0 I:android.graphics.Insets A[D('insets' android.graphics.Insets)]) android.graphics.Insets.bottom int \l0x0014: INVOKE  (r1 I:android.graphics.Rect), (r2 I:int), (r3 I:int), (r4 I:int), (r5 I:int) type: DIRECT call: android.graphics.Rect.\<init\>(int, int, int, int):void A[MD:(int, int, int, int):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|RETURN\l|0x0017: RETURN  (r1 I:android.graphics.Rect) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|0x0018: SGET  (r0 I:int A[D('insets' android.graphics.Insets)]) =  android.os.Build.VERSION.SDK_INT int  (LINE:73)\l0x001a: CONST  (r1 I:??[int, float, short, byte, char]) = (18 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|0x001c: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:22:0x0027 \l}"];
Node_20 [shape=record,label="{20\:\ 0x001e|0x001e: INVOKE  (r0 I:android.graphics.drawable.Drawable) = (r6 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable)]) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.unwrap(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable A[MD:\<T extends android.graphics.drawable.Drawable\>:(android.graphics.drawable.Drawable):T extends android.graphics.drawable.Drawable (m)] (LINE:74)\l0x0022: INVOKE  (r0 I:android.graphics.Rect) = (r0 I:android.graphics.drawable.Drawable) type: STATIC call: androidx.appcompat.widget.DrawableUtils.Api18Impl.getOpticalInsets(android.graphics.drawable.Drawable):android.graphics.Rect A[MD:(android.graphics.drawable.Drawable):android.graphics.Rect (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|RETURN\l|0x0026: RETURN  (r0 I:android.graphics.Rect) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0027|0x0027: SGET  (r0 I:android.graphics.Rect) =  androidx.appcompat.widget.DrawableUtils.INSETS_NONE android.graphics.Rect  (LINE:79)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0029|RETURN\l|0x0029: RETURN  (r0 I:android.graphics.Rect) \l}"];
MethodNode[shape=record,label="{public static android.graphics.Rect androidx.appcompat.widget.DrawableUtils.getOpticalBounds((r6 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0026 \-\> B:13:?, CROSS_EDGE: B:23:0x0029 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0018: r0 'insets' Landroid\/graphics\/Insets;\l  \-1 \-0x0029: r6 'drawable' Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

