digraph "CFG forandroidx.appcompat.widget.DrawableUtils.Api18Impl.getOpticalInsets(Landroid\/graphics\/drawable\/Drawable;)Landroid\/graphics\/Rect;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:241)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (29 ??[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:32:0x0037 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|0x0006: SGET  (r0 I:boolean) =  androidx.appcompat.widget.DrawableUtils.Api18Impl.sReflectionSuccessful boolean \l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0037 \l}"];
Node_34 [shape=record,label="{34\:\ 0x000a|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|TRY_ENTER\lTryCatch #2 \{IllegalAccessException \-\> 0x0036, InvocationTargetException \-\> 0x0034, blocks: (B:24:0x000a, B:26:0x0015), top: B:34:0x000a \}\lCatch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036\l|0x000a: SGET  (r0 I:java.lang.reflect.Method) =  androidx.appcompat.widget.DrawableUtils.Api18Impl.sGetOpticalInsets java.lang.reflect.Method A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036, TRY_ENTER] (LINE:243)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: NEW_ARRAY  (r1 I:java.lang.Object[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036]\l0x000f: INVOKE  (r0 I:java.lang.Object) = \l  (r0 I:java.lang.reflect.Method)\l  (r6 I:java.lang.Object A[D('drawable' android.graphics.drawable.Drawable)])\l  (r1 I:java.lang.Object[])\l type: VIRTUAL call: java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[]):java.lang.Object A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036, MD:(java.lang.Object, java.lang.Object[]):java.lang.Object VARARG throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('insets' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0037  (LINE:244)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|TRY_LEAVE\lTryCatch #2 \{IllegalAccessException \-\> 0x0036, InvocationTargetException \-\> 0x0034, blocks: (B:24:0x000a, B:26:0x0015), top: B:34:0x000a \}\lCatch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036\l|0x0015: NEW_INSTANCE  (r1 I:android.graphics.Rect) =  android.graphics.Rect A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036] (LINE:245)\l0x0017: SGET  (r2 I:java.lang.reflect.Field) =  androidx.appcompat.widget.DrawableUtils.Api18Impl.sLeft java.lang.reflect.Field A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036]\l0x0019: INVOKE  (r2 I:int) = (r2 I:java.lang.reflect.Field), (r0 I:java.lang.Object A[D('insets' java.lang.Object)]) type: VIRTUAL call: java.lang.reflect.Field.getInt(java.lang.Object):int A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036, MD:(java.lang.Object):int throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)] (LINE:246)\l0x001d: SGET  (r3 I:java.lang.reflect.Field) =  androidx.appcompat.widget.DrawableUtils.Api18Impl.sTop java.lang.reflect.Field A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036]\l0x001f: INVOKE  (r3 I:int) = (r3 I:java.lang.reflect.Field), (r0 I:java.lang.Object A[D('insets' java.lang.Object)]) type: VIRTUAL call: java.lang.reflect.Field.getInt(java.lang.Object):int A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036, MD:(java.lang.Object):int throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)] (LINE:247)\l0x0023: SGET  (r4 I:java.lang.reflect.Field) =  androidx.appcompat.widget.DrawableUtils.Api18Impl.sRight java.lang.reflect.Field A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036]\l0x0025: INVOKE  (r4 I:int) = (r4 I:java.lang.reflect.Field), (r0 I:java.lang.Object A[D('insets' java.lang.Object)]) type: VIRTUAL call: java.lang.reflect.Field.getInt(java.lang.Object):int A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036, MD:(java.lang.Object):int throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)] (LINE:248)\l0x0029: SGET  (r5 I:java.lang.reflect.Field) =  androidx.appcompat.widget.DrawableUtils.Api18Impl.sBottom java.lang.reflect.Field A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036]\l0x002b: INVOKE  (r5 I:int) = (r5 I:java.lang.reflect.Field), (r0 I:java.lang.Object A[D('insets' java.lang.Object)]) type: VIRTUAL call: java.lang.reflect.Field.getInt(java.lang.Object):int A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036, MD:(java.lang.Object):int throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException (c)] (LINE:249)\l0x002f: INVOKE  (r1 I:android.graphics.Rect), (r2 I:int), (r3 I:int), (r4 I:int), (r5 I:int) type: DIRECT call: android.graphics.Rect.\<init\>(int, int, int, int):void A[Catch: InvocationTargetException \-\> 0x0034, IllegalAccessException \-\> 0x0036, MD:(int, int, int, int):void (c), TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0032|RETURN\l|0x0032: RETURN  (r1 I:android.graphics.Rect)  (LINE:245)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ 0x0036|ExcHandler: IllegalAccessException \-\> 0x0036\l|0x0036: MOVE_EXCEPTION  (r0 I:java.lang.IllegalAccessException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: IllegalAccessException \-\> 0x0036] (LINE:252)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0034|ExcHandler: InvocationTargetException \-\> 0x0034\l|0x0034: MOVE_EXCEPTION  (r0 I:java.lang.reflect.InvocationTargetException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: InvocationTargetException \-\> 0x0034] (LINE:254)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0037|0x0037: SGET  (r0 I:android.graphics.Rect) =  androidx.appcompat.widget.DrawableUtils.INSETS_NONE android.graphics.Rect  (LINE:258)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0039|RETURN\l|0x0039: RETURN  (r0 I:android.graphics.Rect) \l}"];
MethodNode[shape=record,label="{static android.graphics.Rect androidx.appcompat.widget.DrawableUtils.Api18Impl.getOpticalInsets((r6 I:android.graphics.drawable.Drawable A[D('drawable' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0032 \-\> B:19:?, CROSS_EDGE: B:31:0x0036 \-\> B:32:0x0037, CROSS_EDGE: B:29:0x0034 \-\> B:32:0x0037, CROSS_EDGE: B:25:0x0013 \-\> B:32:0x0037, CROSS_EDGE: B:34:0x000a \-\> B:31:0x0036, CROSS_EDGE: B:34:0x000a \-\> B:29:0x0034, CROSS_EDGE: B:21:0x0004 \-\> B:32:0x0037\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0033: r0 'insets' Ljava\/lang\/Object;\l  \-1 \-0x0039: r6 'drawable' Landroid\/graphics\/drawable\/Drawable;\lTryCatch #2 \{IllegalAccessException \-\> 0x0036, InvocationTargetException \-\> 0x0034, blocks: (B:24:0x000a, B:26:0x0015), top: B:34:0x000a \}\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_32;
Node_22 -> Node_23;
Node_23 -> Node_32;
Node_23 -> Node_34[style=dashed];
Node_34 -> Node_24;
Node_34 -> Node_31;
Node_34 -> Node_29;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_32;
Node_26 -> Node_27;
Node_26 -> Node_35;
Node_27 -> Node_19;
Node_35 -> Node_31;
Node_35 -> Node_29;
Node_31 -> Node_32;
Node_29 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_19;
}

