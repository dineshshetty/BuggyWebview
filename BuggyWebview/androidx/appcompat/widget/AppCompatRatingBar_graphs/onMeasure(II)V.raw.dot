digraph "CFG forandroidx.appcompat.widget.AppCompatRatingBar.onMeasure(II)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: MONITOR_ENTER  (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0024, blocks: (B:16:0x0001, B:18:0x000c), top: B:24:0x0001 \}\lCatch: all \-\> 0x0024\l|0x0001: INVOKE  (r4 I:android.widget.RatingBar), (r5 I:int A[D('widthMeasureSpec' int)]), (r6 I:int A[D('heightMeasureSpec' int)]) type: SUPER call: android.widget.RatingBar.onMeasure(int, int):void A[Catch: all \-\> 0x0024, MD:(int, int):void (c), TRY_ENTER] (LINE:61)\l0x0004: IGET  (r0 I:androidx.appcompat.widget.AppCompatProgressBarHelper) = (r4 I:androidx.appcompat.widget.AppCompatRatingBar) androidx.appcompat.widget.AppCompatRatingBar.mAppCompatProgressBarHelper androidx.appcompat.widget.AppCompatProgressBarHelper A[Catch: all \-\> 0x0024] (LINE:63)\l0x0006: INVOKE  (r0 I:android.graphics.Bitmap) = (r0 I:androidx.appcompat.widget.AppCompatProgressBarHelper) type: VIRTUAL call: androidx.appcompat.widget.AppCompatProgressBarHelper.getSampleTile():android.graphics.Bitmap A[Catch: all \-\> 0x0024, MD:():android.graphics.Bitmap (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('sampleTile' android.graphics.Bitmap)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0022  (LINE:64)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0024, blocks: (B:16:0x0001, B:18:0x000c), top: B:24:0x0001 \}\lCatch: all \-\> 0x0024\l|0x000c: INVOKE  (r1 I:int) = (r0 I:android.graphics.Bitmap A[D('sampleTile' android.graphics.Bitmap)]) type: VIRTUAL call: android.graphics.Bitmap.getWidth():int A[Catch: all \-\> 0x0024, MD:():int (c)] (LINE:65)\l0x0010: INVOKE  (r2 I:int) = (r4 I:androidx.appcompat.widget.AppCompatRatingBar) type: VIRTUAL call: androidx.appcompat.widget.AppCompatRatingBar.getNumStars():int A[Catch: all \-\> 0x0024, MD:():int (c)]\l0x0014: ARITH  (r1 I:int) = (r1 I:int) * (r2 I:int) A[Catch: all \-\> 0x0024]\l0x0016: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:66)\l0x0017: INVOKE  (r2 I:int) = (r1 I:int A[D('width' int)]), (r5 I:int A[D('widthMeasureSpec' int)]), (r2 I:int) type: STATIC call: android.view.View.resolveSizeAndState(int, int, int):int A[Catch: all \-\> 0x0024, MD:(int, int, int):int (c)]\l0x001b: INVOKE  (r3 I:int) = (r4 I:androidx.appcompat.widget.AppCompatRatingBar) type: VIRTUAL call: androidx.appcompat.widget.AppCompatRatingBar.getMeasuredHeight():int A[Catch: all \-\> 0x0024, MD:():int (s)] (LINE:67)\l0x001f: INVOKE  (r4 I:androidx.appcompat.widget.AppCompatRatingBar), (r2 I:int), (r3 I:int) type: VIRTUAL call: androidx.appcompat.widget.AppCompatRatingBar.setMeasuredDimension(int, int):void A[Catch: all \-\> 0x0024, MD:(int, int):void (s), TRY_LEAVE] (LINE:66)\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|0x0022: MONITOR_EXIT  (r4 I:??[OBJECT, ARRAY])  (LINE:69)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0023|RETURN\l|0x0023: RETURN   \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|ExcHandler: all \-\> 0x0024\l|0x0024: MOVE_EXCEPTION  (r5 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0024] (LINE:60)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|0x0026: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{protected synchronized void androidx.appcompat.widget.AppCompatRatingBar.onMeasure((r4 'this' I:androidx.appcompat.widget.AppCompatRatingBar A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('widthMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('heightMeasureSpec' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:23:0x0026 \-\> B:14:?, CROSS_EDGE: B:17:0x000a \-\> B:19:0x0022, CROSS_EDGE: B:24:0x0001 \-\> B:21:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x0022: r1 'width' I\l  0x000a\-0x0024: r0 'sampleTile' Landroid\/graphics\/Bitmap;\l  \-1 \-0x0024: r5 'widthMeasureSpec' I\l  \-1 \-0x0024: r6 'heightMeasureSpec' I\lTryCatch #0 \{all \-\> 0x0024, blocks: (B:16:0x0001, B:18:0x000c), top: B:24:0x0001 \}\lMETHOD_OVERRIDE: [ClspMth\{android.view.View.onMeasure(int, int):void\}]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_24;
Node_24 -> Node_16;
Node_24 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_18 -> Node_25;
Node_25 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_21 -> Node_23;
Node_23 -> Node_14;
}

