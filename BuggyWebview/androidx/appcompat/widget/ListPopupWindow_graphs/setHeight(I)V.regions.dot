digraph "CFG forandroidx.appcompat.widget.ListPopupWindow.setHeight(I)V" {
subgraph cluster_Region_174574134 {
label = "R(1:(2:(1:7)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1882338188 {
label = "R(2:(1:7)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1938243105 {
label = "IF [B:14:0x0000, B:16:0x0003, B:18:0x0006] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|if (r3 \< 0) goto L2\l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|ADDED_TO_REGION\l|if ((\-2) != r3) goto L4\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|ADDED_TO_REGION\l|if ((\-1) != r3) goto L6\l}"];
subgraph cluster_Region_912783811 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0010|throw new java.lang.IllegalArgumentException(\"Invalid height. Must be a positive value, MATCH_PARENT, or WRAP_CONTENT.\")\l}"];
}
}
subgraph cluster_Region_40215363 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0011|r2.mDropDownHeight = r3\l}"];
}
}
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0002}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0005}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0009}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0013}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.ListPopupWindow.setHeight((r2v0 'this' androidx.appcompat.widget.ListPopupWindow A[IMMUTABLE_TYPE, THIS]), (r3v0 'height' int A[D('height' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0013 \-\> B:13:?, CROSS_EDGE: B:16:0x0003 \-\> B:22:0x0011, CROSS_EDGE: B:14:0x0000 \-\> B:22:0x0011\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_14 -> Node_22[style=dashed];
Node_16 -> Node_17;
Node_16 -> Node_22[style=dashed];
Node_18 -> Node_20;
Node_18 -> Node_22[style=dashed];
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_12 -> Node_14;
Node_15 -> Node_16;
Node_17 -> Node_18;
Node_20 -> Node_21;
Node_23 -> Node_13;
}

