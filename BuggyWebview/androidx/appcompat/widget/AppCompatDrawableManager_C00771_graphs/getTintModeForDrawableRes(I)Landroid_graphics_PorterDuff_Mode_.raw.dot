digraph "CFG forandroidx.appcompat.widget.AppCompatDrawableManager.1.getTintModeForDrawableRes(I)Landroid\/graphics\/PorterDuff$Mode;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:450)\l0x0001: SGET  (r1 I:int) =  androidx.appcompat.R.drawable.abc_switch_thumb_material int  (LINE:452)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0003|0x0003: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('resId' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: SGET  (r0 I:android.graphics.PorterDuff$Mode A[D('mode' android.graphics.PorterDuff$Mode)]) =  android.graphics.PorterDuff.Mode.MULTIPLY android.graphics.PorterDuff$Mode  (LINE:453)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|RETURN\lORIG_RETURN\l|0x0007: RETURN  (r0 I:android.graphics.PorterDuff$Mode A[D('mode' android.graphics.PorterDuff$Mode)])  (LINE:456)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0007: RETURN  (r0 I:android.graphics.PorterDuff$Mode A[D('mode' android.graphics.PorterDuff$Mode)]) A[SYNTHETIC] (LINE:456)\l}"];
MethodNode[shape=record,label="{public android.graphics.PorterDuff$Mode androidx.appcompat.widget.AppCompatDrawableManager.1.getTintModeForDrawableRes((r2 'this' I:androidx.appcompat.widget.AppCompatDrawableManager$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('resId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0003 \-\> B:12:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0007: r0 'mode' Landroid\/graphics\/PorterDuff$Mode;\l  \-1 \-0x0007: r3 'resId' I\lMETHOD_OVERRIDE: [androidx.appcompat.widget.ResourceManagerInternal.ResourceManagerHooks.getTintModeForDrawableRes(int):android.graphics.PorterDuff$Mode]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

