digraph "CFG forandroidx.appcompat.widget.ListPopupWindow.PopupDataSetObserver.onChanged()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:androidx.appcompat.widget.ListPopupWindow) = (r1 I:androidx.appcompat.widget.ListPopupWindow$PopupDataSetObserver) androidx.appcompat.widget.ListPopupWindow.PopupDataSetObserver.this$0 androidx.appcompat.widget.ListPopupWindow  (LINE:1351)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:androidx.appcompat.widget.ListPopupWindow) type: VIRTUAL call: androidx.appcompat.widget.ListPopupWindow.isShowing():boolean A[MD:():boolean (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IGET  (r0 I:androidx.appcompat.widget.ListPopupWindow) = (r1 I:androidx.appcompat.widget.ListPopupWindow$PopupDataSetObserver) androidx.appcompat.widget.ListPopupWindow.PopupDataSetObserver.this$0 androidx.appcompat.widget.ListPopupWindow  (LINE:1353)\l0x000a: INVOKE  (r0 I:androidx.appcompat.widget.ListPopupWindow) type: VIRTUAL call: androidx.appcompat.widget.ListPopupWindow.show():void A[MD:():void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: RETURN    (LINE:1355)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x000d: RETURN   A[SYNTHETIC] (LINE:1355)\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.ListPopupWindow.PopupDataSetObserver.onChanged((r1 'this' I:androidx.appcompat.widget.ListPopupWindow$PopupDataSetObserver A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0006 \-\> B:12:0x000d\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [ClspMth\{android.database.DataSetObserver.onChanged():void\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

