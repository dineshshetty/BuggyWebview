digraph "CFG forandroidx.appcompat.widget.ResourcesWrapper.getValueForDensity(IILandroid\/util\/TypedValue;Z)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IGET  (r0 I:android.content.res.Resources) = (r1 I:androidx.appcompat.widget.ResourcesWrapper) androidx.appcompat.widget.ResourcesWrapper.mResources android.content.res.Resources  (LINE:242)\l0x0002: INVOKE  \l  (r0 I:android.content.res.Resources)\l  (r2 I:int A[D('id' int)])\l  (r3 I:int A[D('density' int)])\l  (r4 I:android.util.TypedValue A[D('outValue' android.util.TypedValue)])\l  (r5 I:boolean A[D('resolveRefs' boolean)])\l type: STATIC call: androidx.appcompat.resources.Compatibility.Api15Impl.getValueForDensity(android.content.res.Resources, int, int, android.util.TypedValue, boolean):void A[MD:(android.content.res.Resources, int, int, android.util.TypedValue, boolean):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0005|RETURN\l|0x0005: RETURN    (LINE:243)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.ResourcesWrapper.getValueForDensity((r1 'this' I:androidx.appcompat.widget.ResourcesWrapper A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('id' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('density' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:android.util.TypedValue A[D('outValue' android.util.TypedValue), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('resolveRefs' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0005: r2 'id' I\l  \-1 \-0x0005: r3 'density' I\l  \-1 \-0x0005: r4 'outValue' Landroid\/util\/TypedValue;\l  \-1 \-0x0005: r5 'resolveRefs' Z\lEXCEPTIONS:[Landroid\/content\/res\/Resources$NotFoundException;]\lMETHOD_OVERRIDE: [ClspMth\{android.content.res.Resources.getValueForDensity(int, int, android.util.TypedValue, boolean):void throws android.content.res.Resources$NotFoundException\}]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

