digraph "CFG forandroidx.appcompat.widget.AppCompatTextView.setTypeface(Landroid\/graphics\/Typeface;I)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r3 I:androidx.appcompat.widget.AppCompatTextView) androidx.appcompat.widget.AppCompatTextView.mIsSetTypefaceProcessing boolean  (LINE:759)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0005 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:764)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0005|0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:766)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('tf' android.graphics.Typeface)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0012  (LINE:767)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0008|0x0008: IF  (r5 I:??[int, byte, short, char] A[D('style' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:31:0x0012 \l}"];
Node_30 [shape=record,label="{30\:\ 0x000a|0x000a: INVOKE  (r1 I:android.content.Context) = (r3 I:androidx.appcompat.widget.AppCompatTextView) type: VIRTUAL call: androidx.appcompat.widget.AppCompatTextView.getContext():android.content.Context A[MD:():android.content.Context (s)] (LINE:768)\l0x000e: INVOKE  (r0 I:android.graphics.Typeface A[D('finalTypeface' android.graphics.Typeface)]) = \l  (r1 I:android.content.Context)\l  (r4 I:android.graphics.Typeface A[D('tf' android.graphics.Typeface)])\l  (r5 I:int A[D('style' int)])\l type: STATIC call: androidx.core.graphics.TypefaceCompat.create(android.content.Context, android.graphics.Typeface, int):android.graphics.Typeface A[MD:(android.content.Context, android.graphics.Typeface, int):android.graphics.Typeface (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:771)\l0x0013: IPUT  (r1 I:boolean), (r3 I:androidx.appcompat.widget.AppCompatTextView) androidx.appcompat.widget.AppCompatTextView.mIsSetTypefaceProcessing boolean \l}"];
Node_32 [shape=record,label="{32\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('finalTypeface' android.graphics.Typeface)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0019  (LINE:773)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0017|0x0017: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('finalTypeface' android.graphics.Typeface)]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001a|0x001a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x001b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_36 [shape=record,label="{36\:\ 0x001b|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0022, blocks: (B:36:0x001b), top: B:42:0x001b \}\lCatch: all \-\> 0x0022\l|0x001b: INVOKE  (r3 I:android.widget.TextView), (r1 I:android.graphics.Typeface), (r5 I:int A[D('style' int)]) type: SUPER call: android.widget.TextView.setTypeface(android.graphics.Typeface, int):void A[Catch: all \-\> 0x0022, MD:(android.graphics.Typeface, int):void (c), TRY_ENTER, TRY_LEAVE]\l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|0x001e: IPUT  (r2 I:boolean), (r3 I:androidx.appcompat.widget.AppCompatTextView) androidx.appcompat.widget.AppCompatTextView.mIsSetTypefaceProcessing boolean  (LINE:775)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0021|RETURN\l|0x0021: RETURN    (LINE:778)\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_39 [shape=record,label="{39\:\ 0x0022|ExcHandler: all \-\> 0x0022\l|0x0022: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0022] (LINE:775)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|0x0023: IPUT  (r2 I:boolean), (r3 I:androidx.appcompat.widget.AppCompatTextView) androidx.appcompat.widget.AppCompatTextView.mIsSetTypefaceProcessing boolean \l}"];
Node_41 [shape=record,label="{41\:\ 0x0025|0x0025: THROW  (r1 I:java.lang.Throwable)  (LINE:776)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0019|0x0019: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('tf' android.graphics.Typeface)]) \l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.AppCompatTextView.setTypeface((r3 'this' I:androidx.appcompat.widget.AppCompatTextView A[IMMUTABLE_TYPE, THIS]), (r4 I:android.graphics.Typeface A[D('tf' android.graphics.Typeface), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('style' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:38:0x0021 \-\> B:23:?, CROSS_EDGE: B:41:0x0025 \-\> B:23:?, CROSS_EDGE: B:42:0x001b \-\> B:39:0x0022, CROSS_EDGE: B:34:0x0019 \-\> B:35:0x001a, CROSS_EDGE: B:29:0x0008 \-\> B:31:0x0012, CROSS_EDGE: B:28:0x0006 \-\> B:31:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0025: r0 'finalTypeface' Landroid\/graphics\/Typeface;\l  \-1 \-0x0025: r4 'tf' Landroid\/graphics\/Typeface;\l  \-1 \-0x0025: r5 'style' I\lTryCatch #0 \{all \-\> 0x0022, blocks: (B:36:0x001b), top: B:42:0x001b \}\lMETHOD_OVERRIDE: [ClspMth\{android.widget.TextView.setTypeface(android.graphics.Typeface, int):void\}]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_23;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_35 -> Node_42;
Node_42 -> Node_36;
Node_42 -> Node_39;
Node_36 -> Node_37;
Node_36 -> Node_43;
Node_37 -> Node_38;
Node_38 -> Node_23;
Node_43 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_23;
Node_34 -> Node_35;
}

