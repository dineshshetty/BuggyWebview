digraph "CFG forandroidx.appcompat.widget.AbsActionBarView.measureChildView(Landroid\/view\/View;III)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r2.measure(android.view.View.MeasureSpec.makeMeasureSpec(r3, Integer.MIN_VALUE), r4)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|RETURN\l|return java.lang.Math.max(0, (r3 \- r2.getMeasuredWidth()) \- r5)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected int androidx.appcompat.widget.AbsActionBarView.measureChildView((r1v0 'this' androidx.appcompat.widget.AbsActionBarView A[IMMUTABLE_TYPE, THIS]), (r2v0 'child' android.view.View A[D('child' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'availableWidth' int A[D('availableWidth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'childSpecHeight' int A[D('childSpecHeight' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'spacing' int A[D('spacing' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

