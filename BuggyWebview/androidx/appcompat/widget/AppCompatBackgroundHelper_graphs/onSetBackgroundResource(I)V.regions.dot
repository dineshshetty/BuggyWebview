digraph "CFG forandroidx.appcompat.widget.AppCompatBackgroundHelper.onSetBackgroundResource(I)V" {
subgraph cluster_Region_1976133870 {
label = "R(3:1|(1:3)(1:7)|4) | DECL_VAR: android.content.res.ColorStateList null\l";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|r2.mBackgroundResId = r3\landroidx.appcompat.widget.AppCompatDrawableManager androidx.appcompat.widget.AppCompatDrawableManager r0 = r2.mDrawableManager\l}"];
subgraph cluster_IfRegion_717173508 {
label = "IF [B:11:0x0004] THEN: R(1:3) ELSE: R(1:7)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1527077000 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0006|android.content.res.ColorStateList r0 = r0.getTintList(r2.mView.getContext(), r3)\l}"];
}
subgraph cluster_Region_717104568 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0011|r0 = null\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0012|PHI: r0 \l  PHI: (r0v2 android.content.res.ColorStateList) = (r0v1 android.content.res.ColorStateList), (r0v3 android.content.res.ColorStateList) binds: [B:13:0x0011, B:12:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|setInternalBackgroundTint(r0)\lapplySupportBackgroundTint()\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0018}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.AppCompatBackgroundHelper.onSetBackgroundResource((r2v0 'this' androidx.appcompat.widget.AppCompatBackgroundHelper A[IMMUTABLE_TYPE, THIS]), (r3v0 'resId' int A[D('resId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:14:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_8 -> Node_10;
Node_15 -> Node_9;
}

