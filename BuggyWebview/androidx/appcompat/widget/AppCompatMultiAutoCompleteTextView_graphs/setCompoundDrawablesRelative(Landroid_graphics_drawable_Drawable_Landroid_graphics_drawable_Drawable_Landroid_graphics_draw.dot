digraph "CFG forandroidx.appcompat.widget.AppCompatMultiAutoCompleteTextView.setCompoundDrawablesRelative(Landroid\/graphics\/drawable\/Drawable;Landroid\/graphics\/drawable\/Drawable;Landroid\/graphics\/drawable\/Drawable;Landroid\/graphics\/drawable\/Drawable;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|super.setCompoundDrawablesRelative(r2, r3, r4, r5)\landroidx.appcompat.widget.AppCompatTextHelper r0 = r1.mTextHelper\l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|if (r0 == null) goto L6\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|r0.onSetCompoundDrawables()\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|RETURN\lORIG_RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView.setCompoundDrawablesRelative((r1v0 'this' androidx.appcompat.widget.AppCompatMultiAutoCompleteTextView A[IMMUTABLE_TYPE, THIS]), (r2v0 'start' android.graphics.drawable.Drawable A[D('start' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'top' android.graphics.drawable.Drawable A[D('top' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'end' android.graphics.drawable.Drawable A[D('end' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'bottom' android.graphics.drawable.Drawable A[D('bottom' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0005 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.widget.TextView.setCompoundDrawablesRelative(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable):void\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

