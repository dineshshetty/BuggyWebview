digraph "CFG forandroidx.appcompat.widget.TintContextWrapper.setTheme(I)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:android.content.res.Resources$Theme) = (r2 I:androidx.appcompat.widget.TintContextWrapper) androidx.appcompat.widget.TintContextWrapper.mTheme android.content.res.Resources$Theme  (LINE:113)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: INVOKE  (r2 I:android.content.ContextWrapper), (r3 I:int A[D('resid' int)]) type: SUPER call: android.content.ContextWrapper.setTheme(int):void A[MD:(int):void (c)] (LINE:114)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000c: RETURN   A[SYNTHETIC] (LINE:118)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|0x0008: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:116)\l0x0009: INVOKE  (r0 I:android.content.res.Resources$Theme), (r3 I:int A[D('resid' int)]), (r1 I:boolean) type: VIRTUAL call: android.content.res.Resources.Theme.applyStyle(int, boolean):void A[MD:(int, boolean):void (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: RETURN    (LINE:118)\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.TintContextWrapper.setTheme((r2 'this' I:androidx.appcompat.widget.TintContextWrapper A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('resid' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:14:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r3 'resid' I\lMETHOD_OVERRIDE: [ClspMth\{android.content.Context.setTheme(int):void\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

