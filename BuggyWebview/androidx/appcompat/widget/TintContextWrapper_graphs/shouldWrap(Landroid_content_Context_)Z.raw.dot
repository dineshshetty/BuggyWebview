digraph "CFG forandroidx.appcompat.widget.TintContextWrapper.shouldWrap(Landroid\/content\/Context;)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('context' android.content.Context)]) androidx.appcompat.widget.TintContextWrapper  (LINE:78)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0024 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0005|0x0005: INVOKE  (r0 I:android.content.res.Resources) = (r3 I:android.content.Context A[D('context' android.content.Context)]) type: VIRTUAL call: android.content.Context.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (c)] (LINE:79)\l0x0009: INSTANCE_OF  (r0 I:boolean) = (r0 I:??[OBJECT, ARRAY]) androidx.appcompat.widget.TintResources \l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0024 \l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: INVOKE  (r0 I:android.content.res.Resources) = (r3 I:android.content.Context A[D('context' android.content.Context)]) type: VIRTUAL call: android.content.Context.getResources():android.content.res.Resources A[MD:():android.content.res.Resources (c)] (LINE:80)\l0x0011: INSTANCE_OF  (r0 I:boolean) = (r0 I:??[OBJECT, ARRAY]) androidx.appcompat.widget.VectorEnabledTintResources \l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0016 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:85)\l0x0018: CONST  (r2 I:??[int, float, short, byte, char]) = (21 ??[int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: IF  (r0 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:30:0x0022 \l}"];
Node_28 [shape=record,label="{28\:\ 0x001c|0x001c: INVOKE  (r0 I:boolean) =  type: STATIC call: androidx.appcompat.widget.VectorEnabledTintResources.shouldBeUsed():boolean A[MD:():boolean (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:? \l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|RETURN\lORIG_RETURN\l|0x0022: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0023: RETURN  (r1 I:boolean) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0024|RETURN\l|0x0024: RETURN  (r1 I:boolean)  (LINE:83)\l}"];
MethodNode[shape=record,label="{private static boolean androidx.appcompat.widget.TintContextWrapper.shouldWrap((r3 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0020 \-\> B:31:0x0023, CROSS_EDGE: B:27:0x001a \-\> B:30:0x0022, CROSS_EDGE: B:32:0x0024 \-\> B:18:?, CROSS_EDGE: B:22:0x000b \-\> B:32:0x0024, CROSS_EDGE: B:20:0x0003 \-\> B:32:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0024: r3 'context' Landroid\/content\/Context;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_32;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_32[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_30;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_33 -> Node_18;
Node_30 -> Node_18;
Node_32 -> Node_18;
}

