digraph "CFG forandroidx.appcompat.widget.LinearLayoutCompat.setDividerDrawable(Landroid\/graphics\/drawable\/Drawable;)V" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0002|if (r3 != r2.mDivider) goto L5\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|RETURN\l|return\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|r2.mDivider = r3\lr0 = false\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|if (r3 == null) goto L12\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|r2.mDividerWidth = r3.getIntrinsicWidth()\lr2.mDividerHeight = r3.getIntrinsicHeight()\l}"];
Node_22 [shape=record,label="{22\:\ 0x001b|if (r3 != null) goto L10\l}"];
Node_23 [shape=record,label="{23\:\ 0x001d|r0 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x001e|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v3 boolean) binds: [B:22:0x001b, B:23:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|setWillNotDraw(r0)\lrequestLayout()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0024|RETURN\l|return\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|r2.mDividerWidth = 0\lr2.mDividerHeight = 0\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.LinearLayoutCompat.setDividerDrawable((r2v0 'this' androidx.appcompat.widget.LinearLayoutCompat A[IMMUTABLE_TYPE, THIS]), (r3v0 'divider' android.graphics.drawable.Drawable A[D('divider' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0024 \-\> B:14:?, CROSS_EDGE: B:22:0x001b \-\> B:24:0x001e, CROSS_EDGE: B:21:0x0017 \-\> B:22:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
Node_21 -> Node_22;
}

