digraph "CFG forandroidx.appcompat.widget.AppCompatProgressBarHelper.loadFromAttributes(Landroid\/util\/AttributeSet;I)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|androidx.appcompat.widget.TintTypedArray r0 = androidx.appcompat.widget.TintTypedArray.obtainStyledAttributes(r5.mView.getContext(), r6, androidx.appcompat.widget.AppCompatProgressBarHelper.TINT_ATTRS, r7, 0)\landroid.graphics.drawable.Drawable r1 = r0.getDrawableIfKnown(0)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|if (r1 == null) goto L4\l}"];
Node_14 [shape=record,label="{14\:\ 0x0013|r5.mView.setIndeterminateDrawable(tileifyIndeterminate(r1))\l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|android.graphics.drawable.Drawable r1 = r0.getDrawableIfKnown(1)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0021|if (r1 == null) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x0023|r5.mView.setProgressDrawable(tileify(r1, false))\l}"];
Node_18 [shape=record,label="{18\:\ 0x002c|r0.recycle()\l}"];
Node_19 [shape=record,label="{19\:\ 0x002f|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.AppCompatProgressBarHelper.loadFromAttributes((r5v0 'this' androidx.appcompat.widget.AppCompatProgressBarHelper A[IMMUTABLE_TYPE, THIS]), (r6v0 'attrs' android.util.AttributeSet A[D('attrs' android.util.AttributeSet), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'defStyleAttr' int A[D('defStyleAttr' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0021 \-\> B:18:0x002c, CROSS_EDGE: B:13:0x0011 \-\> B:15:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.appcompat.widget.AppCompatProgressBarHelper.loadFromAttributes(android.util.AttributeSet, int):void]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

