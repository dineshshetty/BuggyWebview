digraph "CFG forandroidx.appcompat.widget.SearchView.setQueryRefinementEnabled(Z)V" {
subgraph cluster_Region_894136116 {
label = "R(2:1|(1:(1:6)))";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|r2.mQueryRefinement = r3\landroidx.cursoradapter.widget.CursorAdapter androidx.cursoradapter.widget.CursorAdapter r0 = r2.mSuggestionsAdapter\l}"];
subgraph cluster_Region_221549191 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_173745437 {
label = "IF [B:14:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0006|if ((r0 instanceof androidx.appcompat.widget.SuggestionsAdapter) != false) goto L3\l}"];
subgraph cluster_Region_1171125499 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000f|PHI: r1 \l  PHI: (r1v2 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|((androidx.appcompat.widget.SuggestionsAdapter) r0).setQueryRefinement(r3 ? 2 : 1)\l}"];
}
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0008}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000a}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000c}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0012|ORIG_RETURN\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x000e}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.SearchView.setQueryRefinementEnabled((r2v0 'this' androidx.appcompat.widget.SearchView A[IMMUTABLE_TYPE, THIS]), (r3v0 'enable' boolean A[D('enable' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x000e \-\> B:19:0x000f, CROSS_EDGE: B:14:0x0006 \-\> B:20:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_21[style=dashed];
Node_19 -> Node_20;
Node_11 -> Node_13;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_16 -> Node_18;
Node_17 -> Node_19;
Node_20 -> Node_12;
Node_18 -> Node_19;
Node_21 -> Node_12;
}

