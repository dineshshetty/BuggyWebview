digraph "CFG forandroidx.appcompat.widget.SearchView.setQuery(Ljava\/lang\/CharSequence;Z)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: IGET  (r0 I:androidx.appcompat.widget.SearchView$SearchAutoComplete) = (r2 I:androidx.appcompat.widget.SearchView) androidx.appcompat.widget.SearchView.mSearchSrcTextView androidx.appcompat.widget.SearchView$SearchAutoComplete  (LINE:579)\l0x0002: INVOKE  \l  (r0 I:androidx.appcompat.widget.SearchView$SearchAutoComplete)\l  (r3 I:java.lang.CharSequence A[D('query' java.lang.CharSequence)])\l type: VIRTUAL call: androidx.appcompat.widget.SearchView.SearchAutoComplete.setText(java.lang.CharSequence):void A[MD:(java.lang.CharSequence):void (s)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('query' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0012  (LINE:580)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: IGET  (r0 I:androidx.appcompat.widget.SearchView$SearchAutoComplete) = (r2 I:androidx.appcompat.widget.SearchView) androidx.appcompat.widget.SearchView.mSearchSrcTextView androidx.appcompat.widget.SearchView$SearchAutoComplete  (LINE:581)\l0x0009: INVOKE  (r1 I:int) = (r0 I:androidx.appcompat.widget.SearchView$SearchAutoComplete) type: VIRTUAL call: androidx.appcompat.widget.SearchView.SearchAutoComplete.length():int A[MD:():int (s)]\l0x000d: INVOKE  (r0 I:androidx.appcompat.widget.SearchView$SearchAutoComplete), (r1 I:int) type: VIRTUAL call: androidx.appcompat.widget.SearchView.SearchAutoComplete.setSelection(int):void A[MD:(int):void (s)]\l0x0010: IPUT  (r3 I:java.lang.CharSequence A[D('query' java.lang.CharSequence)]), (r2 I:androidx.appcompat.widget.SearchView) androidx.appcompat.widget.SearchView.mUserQuery java.lang.CharSequence  (LINE:582)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|0x0012: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('submit' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:?  (LINE:586)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: INVOKE  (r0 I:boolean) = (r3 I:java.lang.CharSequence A[D('query' java.lang.CharSequence)]) type: STATIC call: android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:? \l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|0x001a: INVOKE  (r2 I:androidx.appcompat.widget.SearchView) type: VIRTUAL call: androidx.appcompat.widget.SearchView.onSubmitQuery():void A[MD:():void (m)] (LINE:587)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|RETURN\lORIG_RETURN\l|0x001d: RETURN    (LINE:589)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x001d: RETURN   A[SYNTHETIC] (LINE:589)\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|0x001d: RETURN   A[SYNTHETIC] (LINE:589)\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.widget.SearchView.setQuery((r2 'this' I:androidx.appcompat.widget.SearchView A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('query' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[D('submit' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0018 \-\> B:21:0x001d, CROSS_EDGE: B:17:0x0012 \-\> B:21:0x001d, CROSS_EDGE: B:15:0x0005 \-\> B:17:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001d: r3 'query' Ljava\/lang\/CharSequence;\l  \-1 \-0x001d: r4 'submit' Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_22;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_23 -> Node_13;
Node_22 -> Node_13;
}

