digraph "CFG forandroidx.appcompat.widget.SearchView.launchIntent(Landroid\/content\/Intent;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|if (r4 != null) goto L4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{RuntimeException \-\> 0x000b, blocks: (B:16:0x0003), top: B:21:0x0003 \}\lCatch: RuntimeException \-\> 0x000b\l|getContext().startActivity(r4)     \/\/ Catch: java.lang.RuntimeException \-\> Lb\l}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|ExcHandler: RuntimeException \-\> 0x000b\l|java.lang.RuntimeException r0 = move\-exception\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Failed launch activity: \")\lr1.append(r4)\landroid.util.Log.e(androidx.appcompat.widget.SearchView.LOG_TAG, r1.toString(), r0)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|RETURN\lORIG_RETURN\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.appcompat.widget.SearchView.launchIntent((r3v0 'this' androidx.appcompat.widget.SearchView A[IMMUTABLE_TYPE, THIS]), (r4v0 'intent' android.content.Intent A[D('intent' android.content.Intent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0022 \-\> B:13:?, CROSS_EDGE: B:19:0x000c \-\> B:20:0x0022, CROSS_EDGE: B:21:0x0003 \-\> B:18:0x000b\lINLINE_NOT_NEEDED\lTryCatch #0 \{RuntimeException \-\> 0x000b, blocks: (B:16:0x0003), top: B:21:0x0003 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_13;
Node_21 -> Node_16;
Node_21 -> Node_18;
Node_16 -> Node_22;
Node_16 -> Node_23;
Node_22 -> Node_18;
Node_23 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_13;
}

