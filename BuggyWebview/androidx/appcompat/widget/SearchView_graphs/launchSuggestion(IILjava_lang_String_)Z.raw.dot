digraph "CFG forandroidx.appcompat.widget.SearchView.launchSuggestion(IILjava\/lang\/String;)Z" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:androidx.cursoradapter.widget.CursorAdapter) = (r3 I:androidx.appcompat.widget.SearchView) androidx.appcompat.widget.SearchView.mSuggestionsAdapter androidx.cursoradapter.widget.CursorAdapter  (LINE:1493)\l0x0002: INVOKE  (r0 I:android.database.Cursor) = (r0 I:androidx.cursoradapter.widget.CursorAdapter) type: VIRTUAL call: androidx.cursoradapter.widget.CursorAdapter.getCursor():android.database.Cursor A[MD:():android.database.Cursor (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('c' android.database.Cursor)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0017  (LINE:1494)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: INVOKE  (r1 I:boolean) = (r0 I:android.database.Cursor A[D('c' android.database.Cursor)]), (r4 I:int A[D('position' int)]) type: INTERFACE call: android.database.Cursor.moveToPosition(int):boolean A[MD:(int):boolean (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000c|0x000c: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|0x000e: INVOKE  (r1 I:android.content.Intent) = \l  (r3 I:androidx.appcompat.widget.SearchView)\l  (r0 I:android.database.Cursor A[D('c' android.database.Cursor)])\l  (r5 I:int A[D('actionKey' int)])\l  (r6 I:java.lang.String A[D('actionMsg' java.lang.String)])\l type: DIRECT call: androidx.appcompat.widget.SearchView.createIntentFromSuggestion(android.database.Cursor, int, java.lang.String):android.content.Intent A[MD:(android.database.Cursor, int, java.lang.String):android.content.Intent (m)] (LINE:1496)\l0x0012: INVOKE  (r3 I:androidx.appcompat.widget.SearchView), (r1 I:android.content.Intent A[D('intent' android.content.Intent)]) type: DIRECT call: androidx.appcompat.widget.SearchView.launchIntent(android.content.Intent):void A[MD:(android.content.Intent):void (m)] (LINE:1499)\l0x0015: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1501)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\l|0x0016: RETURN  (r2 I:boolean) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0017: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('intent' android.content.Intent)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) A[SYNTHETIC] (LINE:1503)\l0x0018: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('intent' android.content.Intent)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1503)\l0x0018: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{private boolean androidx.appcompat.widget.SearchView.launchSuggestion((r3 'this' I:androidx.appcompat.widget.SearchView A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('position' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('actionKey' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.String A[D('actionMsg' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0018 \-\> B:12:?, CROSS_EDGE: B:14:0x0006 \-\> B:19:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0017: r1 'intent' Landroid\/content\/Intent;\l  0x0006\-0x0018: r0 'c' Landroid\/database\/Cursor;\l  \-1 \-0x0018: r4 'position' I\l  \-1 \-0x0018: r5 'actionKey' I\l  \-1 \-0x0018: r6 'actionMsg' Ljava\/lang\/String;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_12;
Node_21 -> Node_12;
Node_19 -> Node_12;
}

