digraph "CFG forandroidx.appcompat.app.AppCompatDelegateImpl.mapNightMode(Landroid\/content\/Context;I)I" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:2435)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|0x0001: SWITCH  (r5 I:?? A[D('mode' int)])\l case \-100: goto B:33:0x0038\l case \-1: goto B:32:0x0037\l case 0: goto B:25:0x0015\l case 1: goto B:32:0x0037\l case 2: goto B:32:0x0037\l case 3: goto B:23:0x000c\l default: goto B:21:0x0004 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:2458)\l0x0006: CONST_STR  (r1 I:java.lang.String) =  \"Unknown value set for night mode. Please use one of the MODE_NIGHT values from AppCompatDelegate.\" \l0x0008: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|0x000c: INVOKE  (r0 I:androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager) = \l  (r3 I:androidx.appcompat.app.AppCompatDelegateImpl)\l  (r4 I:android.content.Context A[D('context' android.content.Context)])\l type: DIRECT call: androidx.appcompat.app.AppCompatDelegateImpl.getAutoBatteryNightModeManager(android.content.Context):androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager A[MD:(android.content.Context):androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager (m)] (LINE:2453)\l0x0010: INVOKE  (r0 I:int) = (r0 I:androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager) type: VIRTUAL call: androidx.appcompat.app.AppCompatDelegateImpl.AutoNightModeManager.getApplyableNightMode():int A[MD:():int (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|0x0015: SGET  (r1 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:2442)\l0x0017: CONST  (r2 I:??[int, float, short, byte, char]) = (23 ??[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0019|0x0019: IF  (r1 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:30:0x002e \l}"];
Node_27 [shape=record,label="{27\:\ 0x001b|0x001b: INVOKE  (r1 I:android.content.Context) = (r4 I:android.content.Context A[D('context' android.content.Context)]) type: VIRTUAL call: android.content.Context.getApplicationContext():android.content.Context A[MD:():android.content.Context (c)] (LINE:2443)\l0x001f: CONST_STR  (r2 I:java.lang.String) =  \"uimode\"  (LINE:2444)\l0x0021: INVOKE  (r1 I:java.lang.Object) = (r1 I:android.content.Context), (r2 I:java.lang.String) type: VIRTUAL call: android.content.Context.getSystemService(java.lang.String):java.lang.Object A[MD:(java.lang.String):java.lang.Object (c)]\l0x0025: CHECK_CAST (r1 I:android.app.UiModeManager) = (android.app.UiModeManager) (r1 I:??[OBJECT, ARRAY]) \l0x0027: INVOKE  (r2 I:int) = (r1 I:android.app.UiModeManager A[D('uiModeManager' android.app.UiModeManager)]) type: VIRTUAL call: android.app.UiModeManager.getNightMode():int A[MD:():int (c)] (LINE:2445)\l}"];
Node_28 [shape=record,label="{28\:\ 0x002b|0x002b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x002e \l}"];
Node_29 [shape=record,label="{29\:\ 0x002d|RETURN\l|0x002d: RETURN  (r0 I:int)  (LINE:2448)\l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|0x002e: INVOKE  (r0 I:androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager) = \l  (r3 I:androidx.appcompat.app.AppCompatDelegateImpl)\l  (r4 I:android.content.Context A[D('context' android.content.Context)])\l type: DIRECT call: androidx.appcompat.app.AppCompatDelegateImpl.getAutoTimeNightModeManager(android.content.Context):androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager A[MD:(android.content.Context):androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager (m)] (LINE:2451)\l0x0032: INVOKE  (r0 I:int) = (r0 I:androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager) type: VIRTUAL call: androidx.appcompat.app.AppCompatDelegateImpl.AutoNightModeManager.getApplyableNightMode():int A[MD:():int (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0036|RETURN\l|0x0036: RETURN  (r0 I:int) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0037|RETURN\l|0x0037: RETURN  (r5 I:int A[D('mode' int)])  (LINE:2440)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0038|RETURN\l|0x0038: RETURN  (r0 I:int)  (LINE:2456)\l}"];
MethodNode[shape=record,label="{int androidx.appcompat.app.AppCompatDelegateImpl.mapNightMode((r3 'this' I:androidx.appcompat.app.AppCompatDelegateImpl A[IMMUTABLE_TYPE, THIS]), (r4 I:android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('mode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0014 \-\> B:18:?, CROSS_EDGE: B:29:0x002d \-\> B:18:?, CROSS_EDGE: B:31:0x0036 \-\> B:18:?, CROSS_EDGE: B:26:0x0019 \-\> B:30:0x002e, CROSS_EDGE: B:32:0x0037 \-\> B:18:?, CROSS_EDGE: B:33:0x0038 \-\> B:18:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0027\-0x002e: r1 'uiModeManager' Landroid\/app\/UiModeManager;\l  \-1 \-0x0053: r4 'context' Landroid\/content\/Context;\l  \-1 \-0x0053: r5 'mode' I\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_20 -> Node_23;
Node_20 -> Node_25;
Node_20 -> Node_32;
Node_20 -> Node_33;
Node_21 -> Node_22;
Node_22 -> Node_18;
Node_23 -> Node_24;
Node_24 -> Node_18;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_18;
Node_30 -> Node_31;
Node_31 -> Node_18;
Node_32 -> Node_18;
Node_33 -> Node_18;
}

