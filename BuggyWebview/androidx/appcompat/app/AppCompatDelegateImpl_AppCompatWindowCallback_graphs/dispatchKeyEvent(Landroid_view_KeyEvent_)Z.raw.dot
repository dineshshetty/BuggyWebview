digraph "CFG forandroidx.appcompat.app.AppCompatDelegateImpl.AppCompatWindowCallback.dispatchKeyEvent(Landroid\/view\/KeyEvent;)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback) androidx.appcompat.app.AppCompatDelegateImpl.AppCompatWindowCallback.mDispatchKeyEventBypassEnabled boolean  (LINE:3101)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|0x0004: INVOKE  (r0 I:android.view.Window$Callback) = (r1 I:androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback) type: VIRTUAL call: androidx.appcompat.app.AppCompatDelegateImpl.AppCompatWindowCallback.getWrapped():android.view.Window$Callback A[MD:():android.view.Window$Callback (m)] (LINE:3102)\l0x0008: INVOKE  (r0 I:boolean) = (r0 I:android.view.Window$Callback), (r2 I:android.view.KeyEvent A[D('event' android.view.KeyEvent)]) type: INTERFACE call: android.view.Window.Callback.dispatchKeyEvent(android.view.KeyEvent):boolean A[MD:(android.view.KeyEvent):boolean (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: IGET  (r0 I:androidx.appcompat.app.AppCompatDelegateImpl) = (r1 I:androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback) androidx.appcompat.app.AppCompatDelegateImpl.AppCompatWindowCallback.this$0 androidx.appcompat.app.AppCompatDelegateImpl  (LINE:3105)\l0x000f: INVOKE  (r0 I:boolean) = (r0 I:androidx.appcompat.app.AppCompatDelegateImpl), (r2 I:android.view.KeyEvent A[D('event' android.view.KeyEvent)]) type: VIRTUAL call: androidx.appcompat.app.AppCompatDelegateImpl.dispatchKeyEvent(android.view.KeyEvent):boolean A[MD:(android.view.KeyEvent):boolean (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x001e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|0x0015: INVOKE  (r0 I:boolean) = (r1 I:androidx.appcompat.view.WindowCallbackWrapper), (r2 I:android.view.KeyEvent A[D('event' android.view.KeyEvent)]) type: SUPER call: androidx.appcompat.view.WindowCallbackWrapper.dispatchKeyEvent(android.view.KeyEvent):boolean A[MD:(android.view.KeyEvent):boolean (m)] (LINE:3106)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x001c \l}"];
Node_26 [shape=record,label="{26\:\ 0x001c|SYNTHETIC\lRETURN\l|0x001c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:3105)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001f: RETURN  (r0 I:boolean)  (LINE:3105)\l}"];
MethodNode[shape=record,label="{public boolean androidx.appcompat.app.AppCompatDelegateImpl.AppCompatWindowCallback.dispatchKeyEvent((r1 'this' I:androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback A[IMMUTABLE_TYPE, THIS]), (r2 I:android.view.KeyEvent A[D('event' android.view.KeyEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:28:0x001f \-\> B:16:?, CROSS_EDGE: B:27:0x001e \-\> B:28:0x001f, CROSS_EDGE: B:22:0x0013 \-\> B:27:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001f: r2 'event' Landroid\/view\/KeyEvent;\lMETHOD_OVERRIDE: [ClspMth\{android.view.Window.Callback.dispatchKeyEvent(android.view.KeyEvent):boolean\}]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_27;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_16;
Node_27 -> Node_16;
}

