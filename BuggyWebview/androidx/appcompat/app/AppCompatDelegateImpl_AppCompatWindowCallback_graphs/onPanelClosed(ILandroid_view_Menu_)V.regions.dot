digraph "CFG forandroidx.appcompat.app.AppCompatDelegateImpl.AppCompatWindowCallback.onPanelClosed(ILandroid\/view\/Menu;)V" {
subgraph cluster_Region_1417715704 {
label = "R(1:(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
subgraph cluster_Region_1169089475 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_280059991 {
label = "IF [B:11:0x0002] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|if (r1.mOnPanelClosedBypassEnabled != false) goto L3\l}"];
subgraph cluster_Region_178947441 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0004|getWrapped().onPanelClosed(r2, r3)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1518711939 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000c|super.onPanelClosed(r2, r3)\landroidx.appcompat.app.AppCompatDelegateImpl.this.onPanelClosed(r2)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0014}"];
MethodNode[shape=record,label="{public void androidx.appcompat.app.AppCompatDelegateImpl.AppCompatWindowCallback.onPanelClosed((r1v0 'this' androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback A[IMMUTABLE_TYPE, THIS]), (r2v0 'featureId' int A[D('featureId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'menu' android.view.Menu A[D('menu' android.view.Menu), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0014 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.view.Window.Callback.onPanelClosed(int, android.view.Menu):void\}]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_15 -> Node_9;
}

