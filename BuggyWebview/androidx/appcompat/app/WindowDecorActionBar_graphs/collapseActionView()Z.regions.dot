digraph "CFG forandroidx.appcompat.app.WindowDecorActionBar.collapseActionView()Z" {
subgraph cluster_Region_1925713152 {
label = "R(2:1|(2:(2:5|6)|(1:8)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|androidx.appcompat.widget.DecorToolbar androidx.appcompat.widget.DecorToolbar r0 = r1.mDecorToolbar\l}"];
subgraph cluster_Region_1871596922 {
label = "R(2:(2:5|6)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1064375040 {
label = "IF [B:3:0x0002, B:5:0x0008] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r0 != null) goto L3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|ADDED_TO_REGION\l|if (r0.hasExpandedActionView() != false) goto L5\l}"];
subgraph cluster_Region_1310899698 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x000a|r1.mDecorToolbar.collapseActionView()\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1093835686 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0004}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x0011|RETURN\lORIG_RETURN\lADDED_TO_REGION\l|return false\l}"];
MethodNode[shape=record,label="{public boolean androidx.appcompat.app.WindowDecorActionBar.collapseActionView((r1v0 'this' androidx.appcompat.app.WindowDecorActionBar A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0012 \-\> B:1:?, CROSS_EDGE: B:3:0x0002 \-\> B:8:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.appcompat.app.ActionBar.collapseActionView():boolean]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_8[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_10[style=dashed];
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_10 -> Node_1;
Node_0 -> Node_2;
Node_4 -> Node_5;
Node_8 -> Node_1;
}

