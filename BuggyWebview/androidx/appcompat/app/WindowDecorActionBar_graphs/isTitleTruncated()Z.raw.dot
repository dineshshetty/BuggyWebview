digraph "CFG forandroidx.appcompat.app.WindowDecorActionBar.isTitleTruncated()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:androidx.appcompat.widget.DecorToolbar) = (r1 I:androidx.appcompat.app.WindowDecorActionBar) androidx.appcompat.app.WindowDecorActionBar.mDecorToolbar androidx.appcompat.widget.DecorToolbar  (LINE:934)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000c \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r0 I:androidx.appcompat.widget.DecorToolbar) type: INTERFACE call: androidx.appcompat.widget.DecorToolbar.isTitleTruncated():boolean A[MD:():boolean (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000c \l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|SYNTHETIC\lRETURN\l|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.appcompat.app.WindowDecorActionBar.isTitleTruncated((r1 'this' I:androidx.appcompat.app.WindowDecorActionBar A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x000c \-\> B:8:0x000d, CROSS_EDGE: B:3:0x0002 \-\> B:7:0x000c\lMETHOD_OVERRIDE: [androidx.appcompat.app.ActionBar.isTitleTruncated():boolean]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_1;
}

