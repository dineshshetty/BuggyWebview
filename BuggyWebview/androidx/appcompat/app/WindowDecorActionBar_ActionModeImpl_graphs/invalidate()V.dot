digraph "CFG forandroidx.appcompat.app.WindowDecorActionBar.ActionModeImpl.invalidate()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0004|if (r2.this$0.mActionMode == r2) goto L5\l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|r2.mMenu.stopDispatchingItemsChanged()\l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x001a, blocks: (B:6:0x000c), top: B:12:0x000c \}\lCatch: all \-\> 0x001a\l|r2.mCallback.onPrepareActionMode(r2, r2.mMenu)     \/\/ Catch: java.lang.Throwable \-\> L1a\l}"];
Node_7 [shape=record,label="{7\:\ 0x0013|DONT_GENERATE\l|androidx.appcompat.view.menu.MenuBuilder r0 = r2.mMenu\lr0.startDispatchingItemsChanged()\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|ExcHandler: all \-\> 0x001a\l|java.lang.Throwable r0 = move\-exception\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|FINALLY_INSNS\l|r2.mMenu.startDispatchingItemsChanged()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|throw r0\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.app.WindowDecorActionBar.ActionModeImpl.invalidate((r2v0 'this' androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0019 \-\> B:1:?, CROSS_EDGE: B:11:0x0020 \-\> B:1:?, CROSS_EDGE: B:12:0x000c \-\> B:9:0x001a\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x001a, blocks: (B:6:0x000c), top: B:12:0x000c \}\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.appcompat.view.ActionMode.invalidate():void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_12;
Node_12 -> Node_6;
Node_12 -> Node_9;
Node_6 -> Node_7;
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_13 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
}

