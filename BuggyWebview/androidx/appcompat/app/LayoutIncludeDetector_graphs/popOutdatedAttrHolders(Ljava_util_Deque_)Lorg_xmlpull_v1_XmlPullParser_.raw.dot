digraph "CFG forandroidx.appcompat.app.LayoutIncludeDetector.popOutdatedAttrHolders(Ljava\/util\/Deque;)Lorg\/xmlpull\/v1\/XmlPullParser;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|LOOP_START\lLOOP:0: B:14:0x0000\-\>B:18:0x0018\l|0x0000: INVOKE  (r0 I:boolean) = \l  (r2 I:java.util.Deque A[D('xmlParserStack' java.util.Deque\<java.lang.ref.WeakReference\<org.xmlpull.v1.XmlPullParser\>\>)])\l type: INTERFACE call: java.util.Deque.isEmpty():boolean A[MD:():boolean (s)] (LINE:95)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001d \l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:java.util.Deque A[D('xmlParserStack' java.util.Deque\<java.lang.ref.WeakReference\<org.xmlpull.v1.XmlPullParser\>\>)])\l type: INTERFACE call: java.util.Deque.peek():java.lang.Object A[MD:():E (c)] (LINE:96)\l0x000a: CHECK_CAST (r0 I:java.lang.ref.WeakReference) = (java.lang.ref.WeakReference) (r0 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.lang.ref.WeakReference) type: VIRTUAL call: java.lang.ref.WeakReference.get():java.lang.Object A[MD:():T (c)]\l0x0010: CHECK_CAST (r0 I:org.xmlpull.v1.XmlPullParser) = (org.xmlpull.v1.XmlPullParser) (r0 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r1 I:boolean) = (r0 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)]) type: STATIC call: androidx.appcompat.app.LayoutIncludeDetector.isParserOutdated(org.xmlpull.v1.XmlPullParser):boolean A[MD:(org.xmlpull.v1.XmlPullParser):boolean (m)] (LINE:97)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0016|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|LOOP_END\lLOOP:0: B:14:0x0000\-\>B:18:0x0018\l|0x0018: INVOKE  \l  (r2 I:java.util.Deque A[D('xmlParserStack' java.util.Deque\<java.lang.ref.WeakReference\<org.xmlpull.v1.XmlPullParser\>\>)])\l type: INTERFACE call: java.util.Deque.pop():java.lang.Object A[MD:():E (c)] (LINE:98)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001c|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:org.xmlpull.v1.XmlPullParser A[D('parser' org.xmlpull.v1.XmlPullParser)])  (LINE:100)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001d|RETURN\l|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('parser' org.xmlpull.v1.XmlPullParser)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:103)\l0x001e: RETURN  (r0 I:org.xmlpull.v1.XmlPullParser) \l}"];
MethodNode[shape=record,label="{private static org.xmlpull.v1.XmlPullParser androidx.appcompat.app.LayoutIncludeDetector.popOutdatedAttrHolders((r2 I:java.util.Deque\<java.lang.ref.WeakReference\<org.xmlpull.v1.XmlPullParser\>\> A[D('xmlParserStack' java.util.Deque\<java.lang.ref.WeakReference\<org.xmlpull.v1.XmlPullParser\>\>), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x0018 \-\> B:14:0x0000, CROSS_EDGE: B:21:0x001e \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x001b: r0 'parser' Lorg\/xmlpull\/v1\/XmlPullParser;\l  0x001c\-0x001d: r0 'parser' Lorg\/xmlpull\/v1\/XmlPullParser;\l  0x0000\-0x001e: r2 'xmlParserStack' Ljava\/util\/Deque;, signature: Ljava\/util\/Deque\<Ljava\/lang\/ref\/WeakReference\<Lorg\/xmlpull\/v1\/XmlPullParser;\>;\>;\lSIGNATURE: (Ljava\/util\/Deque\<Ljava\/lang\/ref\/WeakReference\<Lorg\/xmlpull\/v1\/XmlPullParser;\>;\>;)Lorg\/xmlpull\/v1\/XmlPullParser;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_14;
Node_23 -> Node_19;
Node_19 -> Node_13;
Node_22 -> Node_20;
Node_20 -> Node_13;
}

