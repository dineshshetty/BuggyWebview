digraph "CFG forandroidx.appcompat.app.AppCompatViewInflater.createViewByPrefix(Landroid\/content\/Context;Ljava\/lang\/String;Ljava\/lang\/String;)Landroid\/view\/View;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|androidx.collection.SimpleArrayMap\<java.lang.String, java.lang.reflect.Constructor\<? extends android.view.View\>\> r0 = androidx.appcompat.app.AppCompatViewInflater.sConstructorMap\ljava.lang.reflect.Constructor r1 = r0.get(r7)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|if (r1 != null) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|if (r8 == null) goto L4\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|r2 = r7\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|TryCatch #0 \{Exception \-\> 0x0043, blocks: (B:20:0x000c, B:22:0x001d, B:23:0x0036), top: B:28:0x000c \}\lCatch: Exception \-\> 0x0043\lPHI: r2 \l  PHI: (r2v3 java.lang.String) = (r2v2 java.lang.String), (r2v6 java.lang.String) binds: [B:20:0x000c, B:21:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|r1 = java.lang.Class.forName(r2, false, r6.getClassLoader()).asSubclass(android.view.View.class).getConstructor(androidx.appcompat.app.AppCompatViewInflater.sConstructorSignature)     \/\/ Catch: java.lang.Exception \-\> L43\lr0.put(r7, r1)     \/\/ Catch: java.lang.Exception \-\> L43\l}"];
Node_28 [shape=record,label="{28\:\ 0x000c|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|TRY_ENTER\lTryCatch #0 \{Exception \-\> 0x0043, blocks: (B:20:0x000c, B:22:0x001d, B:23:0x0036), top: B:28:0x000c \}\lCatch: Exception \-\> 0x0043\l|java.lang.StringBuilder r2 = new java.lang.StringBuilder()     \/\/ Catch: java.lang.Exception \-\> L43\lr2.append(r8)     \/\/ Catch: java.lang.Exception \-\> L43\lr2.append(r7)     \/\/ Catch: java.lang.Exception \-\> L43\ljava.lang.String r2 = r2.toString()     \/\/ Catch: java.lang.Exception \-\> L43\l}"];
Node_25 [shape=record,label="{25\:\ 0x0043|ExcHandler: Exception \-\> 0x0043\l}"];
Node_26 [shape=record,label="{26\:\ 0x0044|RETURN\l|return null\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0036|TRY_LEAVE\lTryCatch #0 \{Exception \-\> 0x0043, blocks: (B:20:0x000c, B:22:0x001d, B:23:0x0036), top: B:28:0x000c \}\lCatch: Exception \-\> 0x0043\lPHI: r1 \l  PHI: (r1v2 'constructor' java.lang.reflect.Constructor\<? extends android.view.View\>) = (r1v1 'constructor' java.lang.reflect.Constructor\<? extends android.view.View\>), (r1v3 'constructor' java.lang.reflect.Constructor\<? extends android.view.View\>) binds: [B:18:0x0008, B:22:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|r1.setAccessible(true)     \/\/ Catch: java.lang.Exception \-\> L43\l}"];
Node_24 [shape=record,label="{24\:\ 0x0042|RETURN\l|return r1.newInstance(r5.mConstructorArgs)\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
MethodNode[shape=record,label="{private android.view.View androidx.appcompat.app.AppCompatViewInflater.createViewByPrefix((r5v0 'this' androidx.appcompat.app.AppCompatViewInflater A[IMMUTABLE_TYPE, THIS]), (r6v0 'context' android.content.Context A[D('context' android.content.Context), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'name' java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'prefix' java.lang.String A[D('prefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0045 \-\> B:16:?, CROSS_EDGE: B:20:0x000c \-\> B:22:0x001d, CROSS_EDGE: B:28:0x000c \-\> B:25:0x0043, CROSS_EDGE: B:18:0x0008 \-\> B:23:0x0036\lINLINE_NOT_NEEDED\lTryCatch #0 \{Exception \-\> 0x0043, blocks: (B:20:0x000c, B:22:0x001d, B:23:0x0036), top: B:28:0x000c \}\lTYPE_VARS: EMPTY\lEXCEPTIONS:[Ljava\/lang\/ClassNotFoundException;, Landroid\/view\/InflateException;]\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_21;
Node_19 -> Node_28[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_28 -> Node_20;
Node_28 -> Node_25;
Node_20 -> Node_22;
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_23 -> Node_24;
Node_23 -> Node_29;
Node_24 -> Node_16;
Node_29 -> Node_25;
}

