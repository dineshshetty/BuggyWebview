digraph "CFG forandroidx.appcompat.app.AppCompatDelegate.addActiveDelegate(Landroidx\/appcompat\/app\/AppCompatDelegate;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object r0 = androidx.appcompat.app.AppCompatDelegate.sActivityDelegatesLock\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|monitor\-enter(r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0003|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_4 [shape=record,label="{4\:\ 0x0003|TRY_ENTER\lTryCatch #0 \{, blocks: (B:4:0x0003, B:5:0x0010), top: B:10:0x0003 \}\lCatch: all \-\> 0x0012\l|removeDelegateFromActives(r3)     \/\/ Catch: java.lang.Throwable \-\> L12\landroidx.appcompat.app.AppCompatDelegate.sActivityDelegates.add(new java.lang.ref.WeakReference\<\>(r3))     \/\/ Catch: java.lang.Throwable \-\> L12\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|TryCatch #0 \{, blocks: (B:4:0x0003, B:5:0x0010), top: B:10:0x0003 \}\lCatch: all \-\> 0x0012\l|monitor\-exit(r0)     \/\/ Catch: java.lang.Throwable \-\> L12\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|REMOVE\lExcHandler: all \-\> 0x0012\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_8 [shape=record,label="{8\:\ 0x0013|TRY_LEAVE\lREMOVE\lCatch: all \-\> 0x0012\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|REMOVE\l|throw r1\l}"];
MethodNode[shape=record,label="{static void androidx.appcompat.app.AppCompatDelegate.addActiveDelegate((r3v0 'delegate' androidx.appcompat.app.AppCompatDelegate A[D('delegate' androidx.appcompat.app.AppCompatDelegate), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0014 \-\> B:1:?, CROSS_EDGE: B:10:0x0003 \-\> B:7:0x0012\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_10;
Node_10 -> Node_4;
Node_10 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_5 -> Node_11;
Node_6 -> Node_1;
Node_11 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

