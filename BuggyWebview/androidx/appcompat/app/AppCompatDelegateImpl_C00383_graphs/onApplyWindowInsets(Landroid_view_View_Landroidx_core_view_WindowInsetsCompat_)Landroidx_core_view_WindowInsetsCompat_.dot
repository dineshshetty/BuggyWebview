digraph "CFG forandroidx.appcompat.app.AppCompatDelegateImpl.3.onApplyWindowInsets(Landroid\/view\/View;Landroidx\/core\/view\/WindowInsetsCompat;)Landroidx\/core\/view\/WindowInsetsCompat;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|int r0 = r7.getSystemWindowInsetTop()\lint r1 = androidx.appcompat.app.AppCompatDelegateImpl.this.updateStatusGuard(r7, null)\l}"];
Node_10 [shape=record,label="{10\:\ 0x000b|if (r0 == r1) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|androidx.core.view.WindowInsetsCompat r7 = r7.replaceSystemWindowInsets(r7.getSystemWindowInsetLeft(), r1, r7.getSystemWindowInsetRight(), r7.getSystemWindowInsetBottom())\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|PHI: r7 \l  PHI: (r7v1 'insets' androidx.core.view.WindowInsetsCompat) = (r7v0 'insets' androidx.core.view.WindowInsetsCompat), (r7v2 'insets' androidx.core.view.WindowInsetsCompat) binds: [B:10:0x000b, B:11:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0022|RETURN\l|return androidx.core.view.ViewCompat.onApplyWindowInsets(r6, r7)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.core.view.WindowInsetsCompat androidx.appcompat.app.AppCompatDelegateImpl.3.onApplyWindowInsets((r5v0 'this' androidx.appcompat.app.AppCompatDelegateImpl$3 A[IMMUTABLE_TYPE, THIS]), (r6v0 'v' android.view.View A[D('v' android.view.View), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'insets' androidx.core.view.WindowInsetsCompat A[D('insets' androidx.core.view.WindowInsetsCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000b \-\> B:12:0x001e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [androidx.core.view.OnApplyWindowInsetsListener.onApplyWindowInsets(android.view.View, androidx.core.view.WindowInsetsCompat):androidx.core.view.WindowInsetsCompat]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

