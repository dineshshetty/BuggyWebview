digraph "CFG forandroidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.computeConstantSize()V" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1051)\l0x0001: IPUT  (r0 I:boolean), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mCheckedConstantSize boolean \l0x0003: INVOKE  (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) type: DIRECT call: androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.createAllFutures():void A[MD:():void (m)] (LINE:1052)\l0x0006: IGET  (r0 I:int) = (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mNumChildren int  (LINE:1053)\l0x0008: IGET  (r1 I:android.graphics.drawable.Drawable[]) = (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mDrawables android.graphics.drawable.Drawable[]  (LINE:1054)\l0x000a: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:1055)\l0x000b: IPUT  (r2 I:int), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantHeight int \l0x000d: IPUT  (r2 I:int), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantWidth int \l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1056)\l0x0010: IPUT  (r2 I:int), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantMinimumHeight int \l0x0012: IPUT  (r2 I:int), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantMinimumWidth int \l0x0014: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1057)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|LOOP_START\lLOOP:0: B:24:0x0015\-\>B:37:0x0041\l|0x0015: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:39:0x0044 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|0x0017: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r1 I:??[OBJECT, ARRAY][] A[D('drawables' android.graphics.drawable.Drawable[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:1058)\l0x0019: INVOKE  (r4 I:int) = (r3 I:android.graphics.drawable.Drawable A[D('dr' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicWidth():int A[MD:():int (c)] (LINE:1059)\l0x001d: IGET  (r5 I:int) = (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantWidth int  (LINE:1060)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|0x001f: IF  (r4 I:??[int, byte, short, char] A[D('s' int)]) \<= (r5 I:??[int, byte, short, char])  \-\> B:28:0x0023 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: IPUT  (r4 I:int A[D('s' int)]), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantWidth int \l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|0x0023: INVOKE  (r4 I:int A[D('s' int)]) = (r3 I:android.graphics.drawable.Drawable A[D('dr' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getIntrinsicHeight():int A[MD:():int (c)] (LINE:1061)\l0x0027: IGET  (r5 I:int) = (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantHeight int  (LINE:1062)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|0x0029: IF  (r4 I:??[int, byte, short, char] A[D('s' int)]) \<= (r5 I:??[int, byte, short, char])  \-\> B:31:0x002d \l}"];
Node_30 [shape=record,label="{30\:\ 0x002b|0x002b: IPUT  (r4 I:int A[D('s' int)]), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantHeight int \l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|0x002d: INVOKE  (r4 I:int A[D('s' int)]) = (r3 I:android.graphics.drawable.Drawable A[D('dr' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getMinimumWidth():int A[MD:():int (c)] (LINE:1063)\l0x0031: IGET  (r5 I:int) = (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantMinimumWidth int  (LINE:1064)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0033|0x0033: IF  (r4 I:??[int, byte, short, char] A[D('s' int)]) \<= (r5 I:??[int, byte, short, char])  \-\> B:34:0x0037 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0035|0x0035: IPUT  (r4 I:int A[D('s' int)]), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantMinimumWidth int \l}"];
Node_34 [shape=record,label="{34\:\ 0x0037|0x0037: INVOKE  (r4 I:int A[D('s' int)]) = (r3 I:android.graphics.drawable.Drawable A[D('dr' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.getMinimumHeight():int A[MD:():int (c)] (LINE:1065)\l0x003b: IGET  (r5 I:int) = (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantMinimumHeight int  (LINE:1066)\l}"];
Node_35 [shape=record,label="{35\:\ 0x003d|0x003d: IF  (r4 I:??[int, byte, short, char] A[D('s' int)]) \<= (r5 I:??[int, byte, short, char])  \-\> B:41:0x0041 \l}"];
Node_36 [shape=record,label="{36\:\ 0x003f|0x003f: IPUT  (r4 I:int A[D('s' int)]), (r6 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mConstantMinimumHeight int \l}"];
Node_40 [shape=record,label="{40\:\ 0x0041|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0041|LOOP_END\lLOOP:0: B:24:0x0015\-\>B:37:0x0041\l|0x0041: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:1057)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0041|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0044|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0044|RETURN\l|0x0044: RETURN    (LINE:1068)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{protected void androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.computeConstantSize((r6 'this' I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:37:0x0041 \-\> B:24:0x0015, CROSS_EDGE: B:35:0x003d \-\> B:37:0x0041, CROSS_EDGE: B:32:0x0033 \-\> B:34:0x0037, CROSS_EDGE: B:29:0x0029 \-\> B:31:0x002d, CROSS_EDGE: B:26:0x001f \-\> B:28:0x0023\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0041: r3 'dr' Landroid\/graphics\/drawable\/Drawable;\l  0x001d\-0x0041: r4 's' I\l  0x0015\-0x0044: r2 'i' I\l  0x0008\-0x0044: r0 'count' I\l  0x000a\-0x0044: r1 'drawables' [Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_39;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_40;
Node_40 -> Node_37;
Node_37 -> Node_24;
Node_41 -> Node_37;
Node_39 -> Node_38;
Node_38 -> Node_22;
}

