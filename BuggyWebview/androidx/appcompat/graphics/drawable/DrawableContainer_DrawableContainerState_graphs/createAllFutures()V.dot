digraph "CFG forandroidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.createAllFutures()V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|android.util.SparseArray\<android.graphics.drawable.Drawable$ConstantState\> r0 = r6.mDrawableFutures\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|if (r0 == null) goto L10\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|int r0 = r0.size()\lr1 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|LOOP_START\lLOOP:0: B:16:0x0009\-\>B:17:0x000b\lPHI: r1 \l  PHI: (r1v1 'keyIndex' int) = (r1v0 'keyIndex' int), (r1v3 'keyIndex' int) binds: [B:15:0x0004, B:17:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L6\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|LOOP_END\lLOOP:0: B:16:0x0009\-\>B:17:0x000b\l|int r2 = r6.mDrawableFutures.keyAt(r1)\landroid.graphics.drawable.Drawable$ConstantState r3 = r6.mDrawableFutures.valueAt(r1)\lr6.mDrawables[r2] = prepareDrawable(r3.newDrawable(r6.mSourceRes))\lint r1 = r1 + 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x002a|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x002a|r6.mDrawableFutures = null\l}"];
Node_19 [shape=record,label="{19\:\ 0x002d|RETURN\lORIG_RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return\l}"];
MethodNode[shape=record,label="{private void androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.createAllFutures((r6v0 'this' androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:17:0x000b \-\> B:16:0x0009, CROSS_EDGE: B:14:0x0002 \-\> B:19:0x002d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_21;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_16;
Node_20 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_21 -> Node_12;
}

