digraph "CFG forandroidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.canApplyTheme()Z" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r7 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mNumChildren int  (LINE:920)\l0x0002: IGET  (r1 I:android.graphics.drawable.Drawable[]) = (r7 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mDrawables android.graphics.drawable.Drawable[]  (LINE:921)\l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:922)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0005|LOOP_START\lLOOP:0: B:26:0x0005\-\>B:37:0x0024\l|0x0005: IF  (r2 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('count' int)])  \-\> B:42:0x0027 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0007|0x0007: AGET  (r3 I:??[OBJECT, ARRAY]) = \l  (r1 I:??[OBJECT, ARRAY][] A[D('drawables' android.graphics.drawable.Drawable[])])\l  (r2 I:??[int, short, byte, char] A[D('i' int)])\l  (LINE:923)\l0x0009: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:924)\l}"];
Node_28 [shape=record,label="{28\:\ 0x000a|0x000a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('d' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0013 \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: INVOKE  (r5 I:boolean) = (r3 I:android.graphics.drawable.Drawable A[D('d' android.graphics.drawable.Drawable)]) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.canApplyTheme(android.graphics.drawable.Drawable):boolean A[MD:(android.graphics.drawable.Drawable):boolean (m)] (LINE:925)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|0x0010: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0024 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0012|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|RETURN\l|0x0012: RETURN  (r4 I:boolean)  (LINE:926)\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0024|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0024|LOOP_END\lLOOP:0: B:26:0x0005\-\>B:37:0x0024\l|0x0024: ARITH  (r2 I:int) = (r2 I:int A[D('i' int)]) + (1 int)  (LINE:922)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0013|0x0013: IGET  (r5 I:android.util.SparseArray\<android.graphics.drawable.Drawable$ConstantState\>) = (r7 I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState) androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.mDrawableFutures android.util.SparseArray  (LINE:929)\l0x0015: INVOKE  (r5 I:java.lang.Object) = (r5 I:android.util.SparseArray), (r2 I:int A[D('i' int)]) type: VIRTUAL call: android.util.SparseArray.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0019: CHECK_CAST (r5 I:android.graphics.drawable.Drawable$ConstantState) = (android.graphics.drawable.Drawable$ConstantState) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|0x001b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('future' android.graphics.drawable.Drawable$ConstantState)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0024  (LINE:930)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001d|0x001d: INVOKE  (r6 I:boolean) = (r5 I:android.graphics.drawable.Drawable$ConstantState A[D('future' android.graphics.drawable.Drawable$ConstantState)]) type: STATIC call: androidx.appcompat.graphics.drawable.DrawableContainer.Api21Impl.canApplyTheme(android.graphics.drawable.Drawable$ConstantState):boolean A[MD:(android.graphics.drawable.Drawable$ConstantState):boolean (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0021|0x0021: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0024 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0023|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0023|RETURN\l|0x0023: RETURN  (r4 I:boolean)  (LINE:931)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0024|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0024|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0027|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0027|RETURN\l|0x0027: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:935)\l0x0028: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.appcompat.graphics.drawable.DrawableContainer.DrawableContainerState.canApplyTheme((r7 'this' I:androidx.appcompat.graphics.drawable.DrawableContainer$DrawableContainerState A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:37:0x0024 \-\> B:26:0x0005, CROSS_EDGE: B:36:0x0023 \-\> B:24:?, CROSS_EDGE: B:35:0x0021 \-\> B:37:0x0024, CROSS_EDGE: B:33:0x001b \-\> B:37:0x0024, CROSS_EDGE: B:39:0x0028 \-\> B:24:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0024: r3 'd' Landroid\/graphics\/drawable\/Drawable;\l  0x001b\-0x0024: r5 'future' Landroid\/graphics\/drawable\/Drawable$ConstantState;\l  0x0005\-0x0027: r2 'i' I\l  0x0002\-0x0028: r0 'count' I\l  0x0004\-0x0028: r1 'drawables' [Landroid\/graphics\/drawable\/Drawable;\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.ConstantState.canApplyTheme():boolean\}]\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_42;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_32;
Node_29 -> Node_30;
Node_30 -> Node_40[style=dashed];
Node_30 -> Node_43;
Node_40 -> Node_31;
Node_31 -> Node_24;
Node_43 -> Node_37;
Node_37 -> Node_26;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_44;
Node_34 -> Node_35;
Node_35 -> Node_41[style=dashed];
Node_35 -> Node_45;
Node_41 -> Node_36;
Node_36 -> Node_24;
Node_45 -> Node_37;
Node_44 -> Node_37;
Node_42 -> Node_38;
Node_38 -> Node_24;
}

