digraph "CFG forandroidx.appcompat.graphics.drawable.DrawerArrowDrawable.setColor(I)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:android.graphics.Paint) = (r1 I:androidx.appcompat.graphics.drawable.DrawerArrowDrawable) androidx.appcompat.graphics.drawable.DrawerArrowDrawable.mPaint android.graphics.Paint  (LINE:216)\l0x0002: INVOKE  (r0 I:int) = (r0 I:android.graphics.Paint) type: VIRTUAL call: android.graphics.Paint.getColor():int A[MD:():int (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0006|0x0006: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('color' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IGET  (r0 I:android.graphics.Paint) = (r1 I:androidx.appcompat.graphics.drawable.DrawerArrowDrawable) androidx.appcompat.graphics.drawable.DrawerArrowDrawable.mPaint android.graphics.Paint  (LINE:217)\l0x000a: INVOKE  (r0 I:android.graphics.Paint), (r2 I:int A[D('color' int)]) type: VIRTUAL call: android.graphics.Paint.setColor(int):void A[MD:(int):void (c)]\l0x000d: INVOKE  (r1 I:androidx.appcompat.graphics.drawable.DrawerArrowDrawable) type: VIRTUAL call: androidx.appcompat.graphics.drawable.DrawerArrowDrawable.invalidateSelf():void A[MD:():void (c)] (LINE:218)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|RETURN\lORIG_RETURN\l|0x0010: RETURN    (LINE:220)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0010: RETURN   A[SYNTHETIC] (LINE:220)\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.graphics.drawable.DrawerArrowDrawable.setColor((r1 'this' I:androidx.appcompat.graphics.drawable.DrawerArrowDrawable A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('color' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0006 \-\> B:12:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r2 'color' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

