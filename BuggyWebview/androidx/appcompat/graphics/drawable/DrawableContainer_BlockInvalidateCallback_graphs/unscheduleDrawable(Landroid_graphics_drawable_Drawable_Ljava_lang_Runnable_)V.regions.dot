digraph "CFG forandroidx.appcompat.graphics.drawable.DrawableContainer.BlockInvalidateCallback.unscheduleDrawable(Landroid\/graphics\/drawable\/Drawable;Ljava\/lang\/Runnable;)V" {
subgraph cluster_Region_1736524051 {
label = "R(2:1|(1:(1:3)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|android.graphics.drawable.Drawable$Callback android.graphics.drawable.Drawable.Callback r0 = r1.mCallback\l}"];
subgraph cluster_Region_1828180112 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_113640839 {
label = "IF [B:10:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0002|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_2145089893 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|r0.unscheduleDrawable(r2, r3)\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0007|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.graphics.drawable.DrawableContainer.BlockInvalidateCallback.unscheduleDrawable((r1v0 'this' androidx.appcompat.graphics.drawable.DrawableContainer$BlockInvalidateCallback A[IMMUTABLE_TYPE, THIS]), (r2v0 'who' android.graphics.drawable.Drawable A[D('who' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'what' java.lang.Runnable A[D('what' java.lang.Runnable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.Callback.unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable):void\}]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

