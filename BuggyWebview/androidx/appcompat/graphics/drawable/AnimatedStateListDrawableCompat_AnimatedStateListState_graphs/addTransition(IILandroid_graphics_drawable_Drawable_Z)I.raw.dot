digraph "CFG forandroidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.addTransition(IILandroid\/graphics\/drawable\/Drawable;Z)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY])  (LINE:654)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('anim' android.graphics.drawable.Drawable)]) \l0x0004: INVOKE  (r2 I:int) = (r0 I:androidx.appcompat.graphics.drawable.StateListDrawable$StateListState), (r1 I:android.graphics.drawable.Drawable) type: SUPER call: androidx.appcompat.graphics.drawable.StateListDrawable.StateListState.addChild(android.graphics.drawable.Drawable):int A[MD:(android.graphics.drawable.Drawable):int (m)]\l0x0008: INVOKE  (r3 I:long) = (r17 I:int A[D('fromId' int)]), (r18 I:int A[D('toId' int)]) type: STATIC call: androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.generateTransitionKey(int, int):long A[MD:(int, int):long (m)] (LINE:655)\l0x000c: CONST  (r5 I:??[long, double]) = (0 ??[long, double])  (LINE:656)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r20 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('reversible' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0015  (LINE:657)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: CONST  (r5 I:??[long, double] A[D('reversibleBit' long)]) = (8589934592(0x200000000, double:4.243991582E\-314) ??[long, double])  (LINE:658)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0015|0x0015: IGET  (r7 I:androidx.collection.LongSparseArray\<java.lang.Long\>) = (r0 I:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState) androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.mTransitions androidx.collection.LongSparseArray  (LINE:660)\l0x0017: CAST (r8 I:long) = (long) (r2 I:int A[D('pos' int)]) \l0x0018: ARITH  (r8 I:long) = (r8 I:long) \| (r5 I:long A[D('reversibleBit' long)]) \l0x0019: INVOKE  (r8 I:java.lang.Long) = (r8 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l0x001d: INVOKE  (r7 I:androidx.collection.LongSparseArray), (r3 I:long A[D('keyFromTo' long)]), (r8 I:java.lang.Object) type: VIRTUAL call: androidx.collection.LongSparseArray.append(long, java.lang.Object):void A[MD:(long, E):void (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IF  (r20 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('reversible' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x003c  (LINE:661)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0022|0x0022: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fromId' int)])  (LINE:662)\l0x0024: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('toId' int)]) \l0x0026: INVOKE  (r9 I:long) = (r8 I:int), (r7 I:int) type: STATIC call: androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.generateTransitionKey(int, int):long A[MD:(int, int):long (m)]\l0x002a: IGET  (r11 I:androidx.collection.LongSparseArray\<java.lang.Long\>) = (r0 I:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState) androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.mTransitions androidx.collection.LongSparseArray  (LINE:663)\l0x002c: CAST (r12 I:long) = (long) (r2 I:int A[D('pos' int)]) \l0x002d: CONST  (r14 I:??[long, double]) = (4294967296(0x100000000, double:2.121995791E\-314) ??[long, double]) \l0x0032: ARITH  (r12 I:long) = (r12 I:long) \| (r14 I:long) \l0x0033: ARITH  (r12 I:long) = (r12 I:long) \| (r5 I:long A[D('reversibleBit' long)]) \l0x0034: INVOKE  (r12 I:java.lang.Long) = (r12 I:long) type: STATIC call: java.lang.Long.valueOf(long):java.lang.Long A[MD:(long):java.lang.Long (c)]\l0x0038: INVOKE  (r11 I:androidx.collection.LongSparseArray), (r9 I:long A[D('keyToFrom' long)]), (r12 I:java.lang.Object) type: VIRTUAL call: androidx.collection.LongSparseArray.append(long, java.lang.Object):void A[MD:(long, E):void (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0040|RETURN\l|0x0040: RETURN  (r2 I:int A[D('pos' int)])  (LINE:665)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x003c|0x003c: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fromId' int)])  (LINE:661)\l0x003e: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('toId' int)]) \l}"];
MethodNode[shape=record,label="{int androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat.AnimatedStateListState.addTransition((r16 'this' I:androidx.appcompat.graphics.drawable.AnimatedStateListDrawableCompat$AnimatedStateListState A[IMMUTABLE_TYPE, THIS]), (r17 I:int A[D('fromId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('toId' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:android.graphics.drawable.Drawable A[D('anim' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:boolean A[D('reversible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x003c \-\> B:9:0x0040, CROSS_EDGE: B:3:0x000e \-\> B:5:0x0015\lDebug Info:\l  0x002a\-0x003c: r9 'keyToFrom' J\l  0x0008\-0x0040: r2 'pos' I\l  0x000c\-0x0040: r3 'keyFromTo' J\l  0x000e\-0x0040: r5 'reversibleBit' J\l  \-1 \-0x0040: r17 'fromId' I\l  \-1 \-0x0040: r18 'toId' I\l  \-1 \-0x0040: r19 'anim' Landroid\/graphics\/drawable\/Drawable;\l  \-1 \-0x0040: r20 'reversible' Z\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_9;
Node_9 -> Node_1;
Node_8 -> Node_9;
}

