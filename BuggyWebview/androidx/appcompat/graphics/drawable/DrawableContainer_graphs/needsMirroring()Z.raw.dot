digraph "CFG forandroidx.appcompat.graphics.drawable.DrawableContainer.needsMirroring()Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:androidx.appcompat.graphics.drawable.DrawableContainer) type: VIRTUAL call: androidx.appcompat.graphics.drawable.DrawableContainer.isAutoMirrored():boolean A[MD:():boolean (m)] (LINE:103)\l0x0004: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r2 I:android.graphics.drawable.Drawable) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.getLayoutDirection(android.graphics.drawable.Drawable):int A[MD:(android.graphics.drawable.Drawable):int (m)] (LINE:104)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000e \l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x000f: RETURN  (r1 I:boolean) A[SYNTHETIC] (LINE:103)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|RETURN\lORIG_RETURN\l|0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: RETURN  (r1 I:boolean)  (LINE:103)\l}"];
MethodNode[shape=record,label="{private boolean androidx.appcompat.graphics.drawable.DrawableContainer.needsMirroring((r2 'this' I:androidx.appcompat.graphics.drawable.DrawableContainer A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000b \-\> B:18:0x000f, CROSS_EDGE: B:13:0x0005 \-\> B:17:0x000e\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_17;
Node_15 -> Node_19[style=dashed];
Node_19 -> Node_11;
Node_17 -> Node_11;
}

