digraph "CFG forandroidx.appcompat.graphics.drawable.StateListDrawable.onStateChange([I)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r4 I:androidx.appcompat.graphics.drawable.DrawableContainer), (r5 I:int[] A[D('stateSet' int[])]) type: SUPER call: androidx.appcompat.graphics.drawable.DrawableContainer.onStateChange(int[]):boolean A[MD:(int[]):boolean (m)] (LINE:114)\l0x0004: IGET  (r1 I:androidx.appcompat.graphics.drawable.StateListDrawable$StateListState) = (r4 I:androidx.appcompat.graphics.drawable.StateListDrawable) androidx.appcompat.graphics.drawable.StateListDrawable.mStateListState androidx.appcompat.graphics.drawable.StateListDrawable$StateListState  (LINE:115)\l0x0006: INVOKE  (r1 I:int) = (r1 I:androidx.appcompat.graphics.drawable.StateListDrawable$StateListState), (r5 I:int[] A[D('stateSet' int[])]) type: VIRTUAL call: androidx.appcompat.graphics.drawable.StateListDrawable.StateListState.indexOfStateSet(int[]):int A[MD:(int[]):int (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: IF  (r1 I:??[int, byte, short, char] A[D('idx' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:18:0x0014  (LINE:120)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|0x000c: IGET  (r2 I:androidx.appcompat.graphics.drawable.StateListDrawable$StateListState) = (r4 I:androidx.appcompat.graphics.drawable.StateListDrawable) androidx.appcompat.graphics.drawable.StateListDrawable.mStateListState androidx.appcompat.graphics.drawable.StateListDrawable$StateListState  (LINE:121)\l0x000e: SGET  (r3 I:int[]) =  android.util.StateSet.WILD_CARD int[] \l0x0010: INVOKE  (r1 I:int A[D('idx' int)]) = (r2 I:androidx.appcompat.graphics.drawable.StateListDrawable$StateListState), (r3 I:int[]) type: VIRTUAL call: androidx.appcompat.graphics.drawable.StateListDrawable.StateListState.indexOfStateSet(int[]):int A[MD:(int[]):int (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: INVOKE  (r2 I:boolean) = (r4 I:androidx.appcompat.graphics.drawable.StateListDrawable), (r1 I:int A[D('idx' int)]) type: VIRTUAL call: androidx.appcompat.graphics.drawable.StateListDrawable.selectDrawable(int):boolean A[MD:(int):boolean (m)] (LINE:123)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001f \l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('changed' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001d \l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|SYNTHETIC\lRETURN\l|0x001d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: RETURN  (r2 I:boolean) A[SYNTHETIC]\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0020: RETURN  (r2 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.appcompat.graphics.drawable.StateListDrawable.onStateChange((r4 'this' I:androidx.appcompat.graphics.drawable.StateListDrawable A[IMMUTABLE_TYPE, THIS]), (r5 I:int[] A[D('stateSet' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:23:0x001f \-\> B:24:0x0020, CROSS_EDGE: B:19:0x0018 \-\> B:23:0x001f, CROSS_EDGE: B:16:0x000a \-\> B:18:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0020: r0 'changed' Z\l  0x000a\-0x0020: r1 'idx' I\l  \-1 \-0x0020: r5 'stateSet' [I\lMETHOD_OVERRIDE: [ClspMth\{android.graphics.drawable.Drawable.onStateChange(int[]):boolean\}]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_22;
Node_20 -> Node_23[style=dashed];
Node_22 -> Node_14;
Node_23 -> Node_14;
}

