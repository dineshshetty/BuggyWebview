digraph "CFG forandroidx.appcompat.view.ViewPropertyAnimatorCompatSet.play(Landroidx\/core\/view\/ViewPropertyAnimatorCompat;)Landroidx\/appcompat\/view\/ViewPropertyAnimatorCompatSet;" {
Node_6 [shape=record,label="{6\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.view.ViewPropertyAnimatorCompatSet) androidx.appcompat.view.ViewPropertyAnimatorCompatSet.mIsStarted boolean  (LINE:53)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0009 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0004|0x0004: IGET  (r0 I:java.util.ArrayList\<androidx.core.view.ViewPropertyAnimatorCompat\>) = (r1 I:androidx.appcompat.view.ViewPropertyAnimatorCompatSet) androidx.appcompat.view.ViewPropertyAnimatorCompatSet.mAnimators java.util.ArrayList  (LINE:54)\l0x0006: INVOKE  (r0 I:java.util.ArrayList), (r2 I:java.lang.Object A[D('animator' androidx.core.view.ViewPropertyAnimatorCompat)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|RETURN\l|0x0009: RETURN  (r1 I:androidx.appcompat.view.ViewPropertyAnimatorCompatSet)  (LINE:56)\l}"];
Node_7 [shape=record,label="{7\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.appcompat.view.ViewPropertyAnimatorCompatSet androidx.appcompat.view.ViewPropertyAnimatorCompatSet.play((r1 'this' I:androidx.appcompat.view.ViewPropertyAnimatorCompatSet A[IMMUTABLE_TYPE, THIS]), (r2 I:androidx.core.view.ViewPropertyAnimatorCompat A[D('animator' androidx.core.view.ViewPropertyAnimatorCompat), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0002 \-\> B:11:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0009: r2 'animator' Landroidx\/core\/view\/ViewPropertyAnimatorCompat;\l}"];
MethodNode -> Node_6;Node_6 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_7;
}

