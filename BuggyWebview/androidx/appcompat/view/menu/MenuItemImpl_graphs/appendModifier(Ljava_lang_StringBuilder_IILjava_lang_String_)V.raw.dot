digraph "CFG forandroidx.appcompat.view.menu.MenuItemImpl.appendModifier(Ljava\/lang\/StringBuilder;IILjava\/lang\/String;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r0 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('modifiers' int)]) & (r3 I:??[int, boolean, short, byte, char] A[D('flag' int)])  (LINE:406)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('flag' int)])  \-\> B:13:? \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: INVOKE  \l  (r1 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r4 I:java.lang.String A[D('label' java.lang.String)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)] (LINE:407)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|RETURN\lORIG_RETURN\l|0x0007: RETURN    (LINE:409)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0007: RETURN   A[SYNTHETIC] (LINE:409)\l}"];
MethodNode[shape=record,label="{private static void androidx.appcompat.view.menu.MenuItemImpl.appendModifier((r1 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('modifiers' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('flag' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[D('label' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0007\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r1 'sb' Ljava\/lang\/StringBuilder;\l  \-1 \-0x0007: r2 'modifiers' I\l  \-1 \-0x0007: r3 'flag' I\l  \-1 \-0x0007: r4 'label' Ljava\/lang\/String;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

