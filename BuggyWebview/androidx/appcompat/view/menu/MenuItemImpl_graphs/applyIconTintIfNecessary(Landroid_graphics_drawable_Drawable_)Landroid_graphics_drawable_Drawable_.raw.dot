digraph "CFG forandroidx.appcompat.view.menu.MenuItemImpl.applyIconTintIfNecessary(Landroid\/graphics\/drawable\/Drawable;)Landroid\/graphics\/drawable\/Drawable;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('icon' android.graphics.drawable.Drawable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002b  (LINE:576)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0002|0x0002: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mNeedToApplyIconTint boolean \l}"];
Node_21 [shape=record,label="{21\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002b \l}"];
Node_22 [shape=record,label="{22\:\ 0x0006|0x0006: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mHasIconTint boolean \l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000e \l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mHasIconTintMode boolean \l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002b \l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|0x000e: INVOKE  (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)]) = (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)]) type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.wrap(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable A[MD:(android.graphics.drawable.Drawable):android.graphics.drawable.Drawable (m)] (LINE:577)\l0x0012: INVOKE  (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)]) = (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)]) type: VIRTUAL call: android.graphics.drawable.Drawable.mutate():android.graphics.drawable.Drawable A[MD:():android.graphics.drawable.Drawable (c)] (LINE:578)\l0x0016: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mHasIconTint boolean  (LINE:580)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001f \l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|0x001a: IGET  (r0 I:android.content.res.ColorStateList) = (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mIconTintList android.content.res.ColorStateList  (LINE:581)\l0x001c: INVOKE  \l  (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)])\l  (r0 I:android.content.res.ColorStateList)\l type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.setTintList(android.graphics.drawable.Drawable, android.content.res.ColorStateList):void A[MD:(android.graphics.drawable.Drawable, android.content.res.ColorStateList):void (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|0x001f: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mHasIconTintMode boolean  (LINE:584)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0028 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0023|0x0023: IGET  (r0 I:android.graphics.PorterDuff$Mode) = (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mIconTintMode android.graphics.PorterDuff$Mode  (LINE:585)\l0x0025: INVOKE  \l  (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)])\l  (r0 I:android.graphics.PorterDuff$Mode)\l type: STATIC call: androidx.core.graphics.drawable.DrawableCompat.setTintMode(android.graphics.drawable.Drawable, android.graphics.PorterDuff$Mode):void A[MD:(android.graphics.drawable.Drawable, android.graphics.PorterDuff$Mode):void (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0028|0x0028: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:588)\l0x0029: IPUT  (r0 I:boolean), (r1 I:androidx.appcompat.view.menu.MenuItemImpl) androidx.appcompat.view.menu.MenuItemImpl.mNeedToApplyIconTint boolean \l}"];
Node_33 [shape=record,label="{33\:\ 0x002b|RETURN\l|0x002b: RETURN  (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable)])  (LINE:591)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private android.graphics.drawable.Drawable androidx.appcompat.view.menu.MenuItemImpl.applyIconTintIfNecessary((r1 'this' I:androidx.appcompat.view.menu.MenuItemImpl A[IMMUTABLE_TYPE, THIS]), (r2 I:android.graphics.drawable.Drawable A[D('icon' android.graphics.drawable.Drawable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0021 \-\> B:32:0x0028, CROSS_EDGE: B:27:0x0018 \-\> B:29:0x001f, CROSS_EDGE: B:25:0x000c \-\> B:33:0x002b, CROSS_EDGE: B:23:0x0008 \-\> B:26:0x000e, CROSS_EDGE: B:21:0x0004 \-\> B:33:0x002b, CROSS_EDGE: B:19:0x0000 \-\> B:33:0x002b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002b: r2 'icon' Landroid\/graphics\/drawable\/Drawable;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_33;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_33;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_18;
}

