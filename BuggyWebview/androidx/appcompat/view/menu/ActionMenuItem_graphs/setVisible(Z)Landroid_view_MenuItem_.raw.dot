digraph "CFG forandroidx.appcompat.view.menu.ActionMenuItem.setVisible(Z)Landroid\/view\/MenuItem;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:androidx.appcompat.view.menu.ActionMenuItem) androidx.appcompat.view.menu.ActionMenuItem.mFlags int  (LINE:295)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (8 ??[int, float, short, byte, char]) \l0x0004: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) & (r1 I:??[int, boolean, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|0x0005: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('visible' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0008 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) \| (r1 I:??[int, boolean, short, byte, char]) \l0x0009: IPUT  (r0 I:int), (r2 I:androidx.appcompat.view.menu.ActionMenuItem) androidx.appcompat.view.menu.ActionMenuItem.mFlags int \l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|0x000b: RETURN  (r2 I:android.view.MenuItem)  (LINE:296)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public android.view.MenuItem androidx.appcompat.view.menu.ActionMenuItem.setVisible((r2 'this' I:androidx.appcompat.view.menu.ActionMenuItem A[IMMUTABLE_TYPE, THIS]), (r3 I:boolean A[D('visible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0005 \-\> B:12:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r3 'visible' Z\lMETHOD_OVERRIDE: [ClspMth\{android.view.MenuItem.setVisible(boolean):android.view.MenuItem\}]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

