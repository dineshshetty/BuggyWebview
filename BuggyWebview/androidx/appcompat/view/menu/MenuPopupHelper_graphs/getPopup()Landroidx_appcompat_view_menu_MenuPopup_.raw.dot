digraph "CFG forandroidx.appcompat.view.menu.MenuPopupHelper.getPopup()Landroidx\/appcompat\/view\/menu\/MenuPopup;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:androidx.appcompat.view.menu.MenuPopup) = (r1 I:androidx.appcompat.view.menu.MenuPopupHelper) androidx.appcompat.view.menu.MenuPopupHelper.mPopup androidx.appcompat.view.menu.MenuPopup  (LINE:164)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: INVOKE  (r0 I:androidx.appcompat.view.menu.MenuPopup) = (r1 I:androidx.appcompat.view.menu.MenuPopupHelper) type: DIRECT call: androidx.appcompat.view.menu.MenuPopupHelper.createPopup():androidx.appcompat.view.menu.MenuPopup A[MD:():androidx.appcompat.view.menu.MenuPopup (m)] (LINE:165)\l0x0008: IPUT  (r0 I:androidx.appcompat.view.menu.MenuPopup), (r1 I:androidx.appcompat.view.menu.MenuPopupHelper) androidx.appcompat.view.menu.MenuPopupHelper.mPopup androidx.appcompat.view.menu.MenuPopup \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: IGET  (r0 I:androidx.appcompat.view.menu.MenuPopup) = (r1 I:androidx.appcompat.view.menu.MenuPopupHelper) androidx.appcompat.view.menu.MenuPopupHelper.mPopup androidx.appcompat.view.menu.MenuPopup  (LINE:167)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:androidx.appcompat.view.menu.MenuPopup) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public androidx.appcompat.view.menu.MenuPopup androidx.appcompat.view.menu.MenuPopupHelper.getPopup((r1 'this' I:androidx.appcompat.view.menu.MenuPopupHelper A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

