digraph "CFG forandroidx.appcompat.view.menu.MenuBuilder.isShortcutKey(ILandroid\/view\/KeyEvent;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:androidx.appcompat.view.menu.MenuItemImpl) = \l  (r1 I:androidx.appcompat.view.menu.MenuBuilder)\l  (r2 I:int A[D('keyCode' int)])\l  (r3 I:android.view.KeyEvent A[D('event' android.view.KeyEvent)])\l type: VIRTUAL call: androidx.appcompat.view.menu.MenuBuilder.findItemWithShortcutForKey(int, android.view.KeyEvent):androidx.appcompat.view.menu.MenuItemImpl A[MD:(int, android.view.KeyEvent):androidx.appcompat.view.menu.MenuItemImpl (m)] (LINE:759)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|SYNTHETIC\lRETURN\l|0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0009: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\lORIG_RETURN\l|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.appcompat.view.menu.MenuBuilder.isShortcutKey((r1 'this' I:androidx.appcompat.view.menu.MenuBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('keyCode' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:android.view.KeyEvent A[D('event' android.view.KeyEvent), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:14:0x0009\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0009: r2 'keyCode' I\l  \-1 \-0x0009: r3 'event' Landroid\/view\/KeyEvent;\lMETHOD_OVERRIDE: [ClspMth\{android.view.Menu.isShortcutKey(int, android.view.KeyEvent):boolean\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_9;
}

