digraph "CFG forandroidx.appcompat.view.menu.MenuBuilder.setShortcutsVisible(Z)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r1 I:androidx.appcompat.view.menu.MenuBuilder) androidx.appcompat.view.menu.MenuBuilder.mShortcutsVisible boolean  (LINE:805)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('shortcutsVisible' boolean)])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN    (LINE:806)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r1 I:androidx.appcompat.view.menu.MenuBuilder), (r2 I:boolean A[D('shortcutsVisible' boolean)]) type: DIRECT call: androidx.appcompat.view.menu.MenuBuilder.setShortcutsVisibleInner(boolean):void A[MD:(boolean):void (m)] (LINE:809)\l0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:810)\l0x0009: INVOKE  (r1 I:androidx.appcompat.view.menu.MenuBuilder), (r0 I:boolean) type: VIRTUAL call: androidx.appcompat.view.menu.MenuBuilder.onItemsChanged(boolean):void A[MD:(boolean):void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|0x000c: RETURN    (LINE:811)\l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.view.menu.MenuBuilder.setShortcutsVisible((r1 'this' I:androidx.appcompat.view.menu.MenuBuilder A[IMMUTABLE_TYPE, THIS]), (r2 I:boolean A[D('shortcutsVisible' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 'shortcutsVisible' Z\lMETHOD_OVERRIDE: [androidx.appcompat.view.menu.MenuBuilder.setShortcutsVisible(boolean):void]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

