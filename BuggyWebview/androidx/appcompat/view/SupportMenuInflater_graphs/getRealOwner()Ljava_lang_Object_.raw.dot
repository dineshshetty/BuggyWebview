digraph "CFG forandroidx.appcompat.view.SupportMenuInflater.getRealOwner()Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r1 I:androidx.appcompat.view.SupportMenuInflater) androidx.appcompat.view.SupportMenuInflater.mRealOwner java.lang.Object  (LINE:224)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000c \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IGET  (r0 I:android.content.Context) = (r1 I:androidx.appcompat.view.SupportMenuInflater) androidx.appcompat.view.SupportMenuInflater.mContext android.content.Context  (LINE:225)\l0x0006: INVOKE  (r0 I:java.lang.Object) = (r1 I:androidx.appcompat.view.SupportMenuInflater), (r0 I:java.lang.Object) type: DIRECT call: androidx.appcompat.view.SupportMenuInflater.findRealOwner(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):java.lang.Object (m)]\l0x000a: IPUT  (r0 I:java.lang.Object), (r1 I:androidx.appcompat.view.SupportMenuInflater) androidx.appcompat.view.SupportMenuInflater.mRealOwner java.lang.Object \l}"];
Node_12 [shape=record,label="{12\:\ 0x000c|0x000c: IGET  (r0 I:java.lang.Object) = (r1 I:androidx.appcompat.view.SupportMenuInflater) androidx.appcompat.view.SupportMenuInflater.mRealOwner java.lang.Object  (LINE:227)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.lang.Object) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{java.lang.Object androidx.appcompat.view.SupportMenuInflater.getRealOwner((r1 'this' I:androidx.appcompat.view.SupportMenuInflater A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000c\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

