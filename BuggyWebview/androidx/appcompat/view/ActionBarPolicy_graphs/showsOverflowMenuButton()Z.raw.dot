digraph "CFG forandroidx.appcompat.view.ActionBarPolicy.showsOverflowMenuButton()Z" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:int) =  android.os.Build.VERSION.SDK_INT int  (LINE:78)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (19 ??[int, float, short, byte, char]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0005|0x0005: IF  (r0 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char])  \-\> B:12:0x0008 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:boolean)  (LINE:79)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: IGET  (r0 I:android.content.Context) = (r3 I:androidx.appcompat.view.ActionBarPolicy) androidx.appcompat.view.ActionBarPolicy.mContext android.content.Context  (LINE:81)\l0x000a: INVOKE  (r0 I:android.view.ViewConfiguration) = (r0 I:android.content.Context) type: STATIC call: android.view.ViewConfiguration.get(android.content.Context):android.view.ViewConfiguration A[MD:(android.content.Context):android.view.ViewConfiguration (c)]\l0x000e: INVOKE  (r0 I:boolean) = (r0 I:android.view.ViewConfiguration) type: VIRTUAL call: android.view.ViewConfiguration.hasPermanentMenuKey():boolean A[MD:():boolean (c)]\l0x0012: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) ^ (r1 I:??[int, boolean, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean androidx.appcompat.view.ActionBarPolicy.showsOverflowMenuButton((r3 'this' I:androidx.appcompat.view.ActionBarPolicy A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0013 \-\> B:8:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

