digraph "CFG forandroidx.appcompat.view.WindowCallbackWrapper.\<init\>(Landroid\/view\/Window$Callback;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r2 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:51)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0003|0x0003: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('wrapped' android.view.Window$Callback)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0008  (LINE:52)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: IPUT  \l  (r3 I:android.view.Window$Callback A[D('wrapped' android.view.Window$Callback)])\l  (r2 I:androidx.appcompat.view.WindowCallbackWrapper)\l androidx.appcompat.view.WindowCallbackWrapper.mWrapped android.view.Window$Callback  (LINE:55)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|RETURN\l|0x0007: RETURN    (LINE:56)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:53)\l0x000a: CONST_STR  (r1 I:java.lang.String) =  \"Window callback may not be null\" \l0x000c: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void androidx.appcompat.view.WindowCallbackWrapper.\<init\>((r2 'this' I:androidx.appcompat.view.WindowCallbackWrapper A[IMMUTABLE_TYPE, THIS]), (r3 I:android.view.Window$Callback A[D('wrapped' android.view.Window$Callback), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r3 'wrapped' Landroid\/view\/Window$Callback;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

