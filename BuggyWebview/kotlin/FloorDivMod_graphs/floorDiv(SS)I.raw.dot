digraph "CFG forkotlin.NumbersKt__FloorDivModKt.floorDiv(SS)I" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: ARITH  (r0 I:int) = (r2 I:int A[D('$this$floorDiv' short)]) \/ (r3 I:int A[D('other' short)])  (LINE:98)\l0x0002: ARITH  (r1 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('$this$floorDiv' short)]) ^ (r3 I:??[int, boolean, short, byte, char] A[D('other' short)]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0004|0x0004: IF  (r1 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:18:? \l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: ARITH  (r1 I:int) = (r0 I:int) * (r3 I:int A[D('other' short)]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$floorDiv' short)])  \-\> B:19:? \l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: RETURN  (r0 I:int) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x000c: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|0x000c: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{private static final int kotlin.NumbersKt__FloorDivModKt.floorDiv((r2 I:short A[D('$this$floorDiv' short), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:short A[D('other' short), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0008 \-\> B:17:0x000c, CROSS_EDGE: B:13:0x0004 \-\> B:17:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 '$this$floorDiv' S\l  \-1 \-0x000c: r3 'other' S\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_18 -> Node_11;
}

