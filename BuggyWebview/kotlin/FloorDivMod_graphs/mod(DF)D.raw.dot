digraph "CFG forkotlin.NumbersKt__FloorDivModKt.mod(DF)D" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CAST (r0 I:double) = (double) (r13 I:float A[D('other' float)])  (LINE:316)\l0x0001: ARITH  (r2 I:double) = (r11 I:double A[D('$this$mod' double)]) % (r0 I:double) \l0x0003: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0004: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: CONST  (r6 I:??[long, double]) = (0 ??[long, double]) \l0x0007: CMP_G  (r8 I:int) = (r2 I:double), (r6 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|0x0009: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x000d \l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:? \l}"];
Node_23 [shape=record,label="{23\:\ 0x0010|0x0010: INVOKE  (r6 I:double) = (r2 I:double) type: STATIC call: java.lang.Math.signum(double):double A[MD:(double):double (c)]\l0x0014: INVOKE  (r8 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.signum(double):double A[MD:(double):double (c)]\l0x0018: CMP_G  (r10 I:int) = (r6 I:double), (r8 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|0x001a: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x001d \l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|0x001d: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|0x001e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:? \l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|0x0020: ARITH  (r2 I:double) = (r2 I:double) + (r0 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0021|RETURN\lORIG_RETURN\l|0x0021: RETURN  (r2 I:double) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN  (r2 I:double) A[SYNTHETIC]\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN  (r2 I:double) A[SYNTHETIC]\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static final double kotlin.NumbersKt__FloorDivModKt.mod((r11 I:double A[D('$this$mod' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:float A[D('other' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001e \-\> B:29:0x0021, CROSS_EDGE: B:24:0x001a \-\> B:27:0x001e, CROSS_EDGE: B:22:0x000e \-\> B:29:0x0021, CROSS_EDGE: B:21:0x000d \-\> B:22:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0021: r11 '$this$mod' D\l  \-1 \-0x0021: r13 'other' F\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_31 -> Node_17;
Node_30 -> Node_17;
Node_21 -> Node_22;
}

