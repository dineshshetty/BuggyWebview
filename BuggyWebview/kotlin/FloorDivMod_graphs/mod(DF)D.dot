digraph "CFG forkotlin.NumbersKt__FloorDivModKt.mod(DF)D" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|double r0 = (double) r13\ldouble r2 = r11 % r0\lr4 = true\l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|if ((r2 \> 0.0d ? 1 : (r2 == 0.0d ? 0 : \-1)) != 0) goto L14\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|r6 = true\l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|PHI: r6 \l  PHI: (r6v2 boolean) = (r6v1 boolean), (r6v4 boolean) binds: [B:21:0x000d, B:20:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != false) goto L13\l}"];
Node_23 [shape=record,label="{23\:\ 0x0010}"];
Node_24 [shape=record,label="{24\:\ 0x001a|if ((java.lang.Math.signum(r2) \> java.lang.Math.signum(r0) ? 1 : (java.lang.Math.signum(r2) == java.lang.Math.signum(r0) ? 0 : \-1)) != 0) goto L7\l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|r4 = false\l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|PHI: r4 \l  PHI: (r4v1 boolean) = (r4v0 boolean), (r4v2 boolean) binds: [B:24:0x001a, B:26:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 != false) goto L12\l}"];
Node_28 [shape=record,label="{28\:\ 0x0020}"];
Node_29 [shape=record,label="{29\:\ 0x0021|RETURN\lORIG_RETURN\l|return r2 + r0\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|r6 = false\l}"];
MethodNode[shape=record,label="{private static final double kotlin.NumbersKt__FloorDivModKt.mod((r11v0 '$this$mod' double A[D('$this$mod' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'other' float A[D('other' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001e \-\> B:29:0x0021, CROSS_EDGE: B:24:0x001a \-\> B:27:0x001e, CROSS_EDGE: B:22:0x000e \-\> B:29:0x0021, CROSS_EDGE: B:21:0x000d \-\> B:22:0x000e\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_27[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_17;
Node_31 -> Node_17;
Node_30 -> Node_17;
Node_21 -> Node_22;
}

