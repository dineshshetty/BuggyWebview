digraph "CFG forkotlin.NumbersKt__FloorDivModKt.floorDiv(IJ)J" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CAST (r0 I:long) = (long) (r9 I:int A[D('$this$floorDiv' int)])  (LINE:199)\l0x0001: ARITH  (r2 I:long) = (r0 I:long) \/ (r10 I:long A[D('other' long)]) \l0x0003: ARITH  (r4 I:long) = (r0 I:long) ^ (r10 I:long A[D('other' long)]) \l0x0005: CONST  (r6 I:??[long, double]) = (0 ??[long, double]) \l0x0007: CMP_L  (r8 I:int) = (r4 I:long), (r6 I:long) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|0x0009: IF  (r8 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:18:? \l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: ARITH  (r4 I:long) = (r2 I:long) * (r10 I:long A[D('other' long)]) \l0x000d: CMP_L  (r6 I:int) = (r4 I:long), (r0 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:? \l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|0x0011: CONST  (r0 I:??[long, double]) = (\-1 ??[long, double]) \l0x0013: ARITH  (r2 I:long) = (r2 I:long) + (r0 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|RETURN\lORIG_RETURN\l|0x0014: RETURN  (r2 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0014: RETURN  (r2 I:long) A[SYNTHETIC]\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lRETURN\l|0x0014: RETURN  (r2 I:long) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{private static final long kotlin.NumbersKt__FloorDivModKt.floorDiv((r9 I:int A[D('$this$floorDiv' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('other' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:17:0x0014, CROSS_EDGE: B:13:0x0009 \-\> B:17:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0014: r9 '$this$floorDiv' I\l  \-1 \-0x0014: r10 'other' J\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_18 -> Node_11;
}

