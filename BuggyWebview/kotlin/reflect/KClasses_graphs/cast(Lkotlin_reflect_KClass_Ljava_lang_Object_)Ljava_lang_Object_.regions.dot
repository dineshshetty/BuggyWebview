digraph "CFG forkotlin.reflect.KClasses.cast(Lkotlin\/reflect\/KClass;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_391620146 {
label = "R(2:1|(2:(2:6|7)|(2:3|4)))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\l}"];
subgraph cluster_Region_281660544 {
label = "R(2:(2:6|7)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1163957572 {
label = "IF [B:3:0x0009] THEN: R(2:6|7) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r4.isInstance(r5) == false) goto L6\l}"];
subgraph cluster_Region_723520828 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0011}"];
Node_7 [shape=record,label="{7\:\ 0x002d|throw new java.lang.ClassCastException(\"Value cannot be cast to \" + r4.getQualifiedName())\l}"];
}
}
subgraph cluster_Region_23873628 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x000b|kotlin.jvm.internal.Intrinsics.checkNotNull(r5, \"null cannot be cast to non\-null type T of kotlin.reflect.KClasses.cast\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|RETURN\l|return r5\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final T kotlin.reflect.KClasses.cast((r4v0 kotlin.reflect.KClass\<T\> A[D('$this$cast' kotlin.reflect.KClass), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'value' java.lang.Object A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x002d \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r5v0, resolved type: java.lang.Object\}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/reflect\/KClass\<TT;\>;Ljava\/lang\/Object;)TT;\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_0 -> Node_2;
}

