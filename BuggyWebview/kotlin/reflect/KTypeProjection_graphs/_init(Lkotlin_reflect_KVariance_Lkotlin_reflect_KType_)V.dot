digraph "CFG forkotlin.reflect.KTypeProjection.\<init\>(Lkotlin\/reflect\/KVariance;Lkotlin\/reflect\/KType;)V" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|r4.variance = r5\lr4.type = r6\lr0 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|if (r5 != null) goto L18\l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|r2 = true\l}"];
Node_27 [shape=record,label="{27\:\ 0x000f|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v4 boolean) binds: [B:26:0x000e, B:25:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|if (r6 != null) goto L17\l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|r3 = true\l}"];
Node_30 [shape=record,label="{30\:\ 0x0014|PHI: r3 \l  PHI: (r3v1 boolean) = (r3v0 boolean), (r3v2 boolean) binds: [B:29:0x0013, B:28:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 != r3) goto L7\l}"];
Node_32 [shape=record,label="{32\:\ 0x0017|r0 = false\l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v4 boolean) binds: [B:30:0x0014, B:32:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != false) goto L16\l}"];
Node_34 [shape=record,label="{34\:\ 0x001a}"];
Node_35 [shape=record,label="{35\:\ 0x001b|if (r5 != null) goto L15\l}"];
Node_36 [shape=record,label="{36\:\ 0x001d|java.lang.String r1 = \"Star projection must have no type specified.\"\l}"];
Node_38 [shape=record,label="{38\:\ 0x0036|PHI: r1 \l  PHI: (r1v3 java.lang.String) = (r1v2 java.lang.String), (r1v5 java.lang.String) binds: [B:37:0x0020, B:36:0x001d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0040|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0020|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"The projection variance \")\lr1.append(r5)\lr1.append(\" requires type to be specified.\")\ljava.lang.String r1 = r1.toString()\l}"];
Node_41 [shape=record,label="{41\:\ 0x0042|RETURN\l|return\l}"];
Node_29 [shape=record,label="{29\:\ 0x0013|r3 = false\l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|r2 = false\l}"];
MethodNode[shape=record,label="{public void kotlin.reflect.KTypeProjection.\<init\>((r4v0 'this' kotlin.reflect.KTypeProjection A[IMMUTABLE_TYPE, THIS]), (r5v0 'variance' kotlin.reflect.KVariance A[D('variance' kotlin.reflect.KVariance), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'type' kotlin.reflect.KType A[D('type' kotlin.reflect.KType), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0020 \-\> B:38:0x0036, CROSS_EDGE: B:41:0x0042 \-\> B:22:?, CROSS_EDGE: B:30:0x0014 \-\> B:33:0x0018, CROSS_EDGE: B:29:0x0013 \-\> B:30:0x0014, CROSS_EDGE: B:26:0x000e \-\> B:27:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_33[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_22;
Node_37 -> Node_38;
Node_41 -> Node_22;
Node_29 -> Node_30;
Node_26 -> Node_27;
}

