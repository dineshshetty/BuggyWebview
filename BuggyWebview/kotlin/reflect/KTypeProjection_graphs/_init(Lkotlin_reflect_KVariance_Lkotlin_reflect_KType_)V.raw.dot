digraph "CFG forkotlin.reflect.KTypeProjection.\<init\>(Lkotlin\/reflect\/KVariance;Lkotlin\/reflect\/KType;)V" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: INVOKE  (r4 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:22)\l0x0003: IPUT  (r5 I:kotlin.reflect.KVariance A[D('variance' kotlin.reflect.KVariance)]), (r4 I:kotlin.reflect.KTypeProjection) kotlin.reflect.KTypeProjection.variance kotlin.reflect.KVariance  (LINE:27)\l0x0005: IPUT  (r6 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType)]), (r4 I:kotlin.reflect.KTypeProjection) kotlin.reflect.KTypeProjection.type kotlin.reflect.KType  (LINE:31)\l0x0008: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:35)\l0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('variance' kotlin.reflect.KVariance)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000e \l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000f|0x000f: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('type' kotlin.reflect.KType)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0013 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|0x0011: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0017 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0017|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|0x0018: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0042 \l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001b|0x001b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('variance' kotlin.reflect.KVariance)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0020  (LINE:36)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001d|0x001d: CONST_STR  (r1 I:java.lang.String) =  \"Star projection must have no type specified.\"  (LINE:37)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0036|0x0037: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('$i$a$\-require\-KTypeProjection$1' int)]) =  java.lang.IllegalArgumentException  (LINE:35)\l0x0039: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003d: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0040|0x0040: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0020|0x0020: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:39)\l0x0022: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"The projection variance \" \l0x0027: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:java.lang.Object A[D('variance' kotlin.reflect.KVariance)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x002d: CONST_STR  (r2 I:java.lang.String) =  \" requires type to be specified.\" \l0x002f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0032: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0042|RETURN\l|0x0042: RETURN    (LINE:23)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0013|0x0013: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|0x000e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlin.reflect.KTypeProjection.\<init\>((r4 'this' I:kotlin.reflect.KTypeProjection A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlin.reflect.KVariance A[D('variance' kotlin.reflect.KVariance), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0020 \-\> B:38:0x0036, CROSS_EDGE: B:41:0x0042 \-\> B:22:?, CROSS_EDGE: B:30:0x0014 \-\> B:33:0x0018, CROSS_EDGE: B:29:0x0013 \-\> B:30:0x0014, CROSS_EDGE: B:26:0x000e \-\> B:27:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x0037: r0 '$i$a$\-require\-KTypeProjection$1' I\l  \-1 \-0x0042: r5 'variance' Lkotlin\/reflect\/KVariance;\l  \-1 \-0x0042: r6 'type' Lkotlin\/reflect\/KType;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_33[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_22;
Node_37 -> Node_38;
Node_41 -> Node_22;
Node_29 -> Node_30;
Node_26 -> Node_27;
}

