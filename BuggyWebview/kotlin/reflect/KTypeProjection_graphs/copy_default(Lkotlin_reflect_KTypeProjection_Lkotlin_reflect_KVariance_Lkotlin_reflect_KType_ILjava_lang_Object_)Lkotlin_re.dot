digraph "CFG forkotlin.reflect.KTypeProjection.copy$default(Lkotlin\/reflect\/KTypeProjection;Lkotlin\/reflect\/KVariance;Lkotlin\/reflect\/KType;ILjava\/lang\/Object;)Lkotlin\/reflect\/KTypeProjection;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000}"];
Node_13 [shape=record,label="{13\:\ 0x0002|if ((r3 & 1) == 0) goto L4\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|kotlin.reflect.KVariance r1 = r0.variance\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|PHI: r1 \l  PHI: (r1v1 kotlin.reflect.KVariance) = (r1v0 kotlin.reflect.KVariance), (r1v2 kotlin.reflect.KVariance) binds: [B:13:0x0002, B:14:0x0004] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|if ((r3 & 2) == 0) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|kotlin.reflect.KType r2 = r0.type\l}"];
Node_18 [shape=record,label="{18\:\ 0x000c|PHI: r2 \l  PHI: (r2v1 kotlin.reflect.KType) = (r2v0 kotlin.reflect.KType), (r2v2 kotlin.reflect.KType) binds: [B:16:0x0008, B:17:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|RETURN\l|return r0.copy(r1, r2)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ kotlin.reflect.KTypeProjection kotlin.reflect.KTypeProjection.copy$default((r0v0 kotlin.reflect.KTypeProjection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 kotlin.reflect.KVariance A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 kotlin.reflect.KType A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:16:0x0008 \-\> B:18:0x000c, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x0006\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

