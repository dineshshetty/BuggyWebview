digraph "CFG forkotlin.reflect.TypeVariableImpl.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) java.lang.reflect.TypeVariable  (LINE:121)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r0 I:java.lang.String) = (r2 I:kotlin.reflect.TypeVariableImpl) type: VIRTUAL call: kotlin.reflect.TypeVariableImpl.getName():java.lang.String A[MD:():java.lang.String (m)]\l0x0008: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0009: CHECK_CAST (r1 I:java.lang.reflect.TypeVariable) = (java.lang.reflect.TypeVariable) (r1 I:??[OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.reflect.TypeVariable) type: INTERFACE call: java.lang.reflect.TypeVariable.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x000f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.reflect.GenericDeclaration) = (r2 I:kotlin.reflect.TypeVariableImpl) type: VIRTUAL call: kotlin.reflect.TypeVariableImpl.getGenericDeclaration():java.lang.reflect.GenericDeclaration A[MD:():java.lang.reflect.GenericDeclaration (m)]\l0x0019: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x001a: CHECK_CAST (r1 I:java.lang.reflect.TypeVariable) = (java.lang.reflect.TypeVariable) (r1 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r1 I:java.lang.reflect.GenericDeclaration) = (r1 I:java.lang.reflect.TypeVariable) type: INTERFACE call: java.lang.reflect.TypeVariable.getGenericDeclaration():java.lang.reflect.GenericDeclaration A[MD:():D extends java.lang.reflect.GenericDeclaration (c)]\l0x0020: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|0x0024: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0028 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|SYNTHETIC\lRETURN\l|0x0026: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0029: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|RETURN\lORIG_RETURN\l|0x0028: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0029: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.reflect.TypeVariableImpl.equals((r2 'this' I:kotlin.reflect.TypeVariableImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0028 \-\> B:10:0x0029, CROSS_EDGE: B:5:0x0013 \-\> B:9:0x0028, CROSS_EDGE: B:3:0x0002 \-\> B:9:0x0028\lDebug Info:\l  \-1 \-0x0029: r3 'other' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_1;
Node_9 -> Node_1;
}

