digraph "CFG forkotlin.reflect.TypeVariableImpl.getBounds()[Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.reflect.KTypeParameter) = (r10 I:kotlin.reflect.TypeVariableImpl) kotlin.reflect.TypeVariableImpl.typeParameter kotlin.reflect.KTypeParameter  (LINE:116)\l0x0002: INVOKE  (r0 I:java.util.List) = (r0 I:kotlin.reflect.KTypeParameter) type: INTERFACE call: kotlin.reflect.KTypeParameter.getUpperBounds():java.util.List A[MD:():java.util.List\<kotlin.reflect.KType\> (m)]\l0x0006: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:230)\l0x000b: CONST  (r3 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l0x000d: INVOKE  (r3 I:int) = (r0 I:java.lang.Iterable A[D('$this$map$iv' java.lang.Iterable)]), (r3 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l0x0011: INVOKE  (r2 I:java.util.ArrayList), (r3 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0014: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x0016: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$map$iv' java.lang.Iterable)]) \l0x0017: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: INVOKE  (r5 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$mapTo$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:231)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|LOOP_START\lLOOP:0: B:3:0x001c\-\>B:5:0x0022\l|0x001c: INVOKE  (r6 I:boolean) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x0033 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0022|LOOP_END\lLOOP:0: B:3:0x001c\-\>B:5:0x0022\l|0x0022: INVOKE  (r6 I:java.lang.Object) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0026: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('item$iv$iv' java.lang.Object)])  (LINE:232)\l0x0027: CHECK_CAST (r7 I:kotlin.reflect.KType) = (kotlin.reflect.KType) (r7 I:??[OBJECT, ARRAY]) \l0x0029: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002a: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:116)\l0x002b: INVOKE  (r7 I:java.lang.reflect.Type A[D('it' kotlin.reflect.KType)]) = (r7 I:kotlin.reflect.KType A[D('it' kotlin.reflect.KType)]), (r9 I:boolean) type: STATIC call: kotlin.reflect.TypesJVMKt.access$computeJavaType(kotlin.reflect.KType, boolean):java.lang.reflect.Type A[MD:(kotlin.reflect.KType, boolean):java.lang.reflect.Type (m)]\l0x002f: INVOKE  \l  (r2 I:java.util.Collection A[D('destination$iv$iv' java.util.Collection)])\l  (r7 I:java.lang.Object A[D('it' kotlin.reflect.KType)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0033|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0033|0x0034: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY] A[D('destination$iv$iv' java.util.Collection)]) \l0x0037: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x0039: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY])  (LINE:116)\l0x003a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:237)\l0x003e: NEW_ARRAY  (r3 I:java.lang.reflect.Type[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.reflect.Type[] \l0x0040: INVOKE  (r3 I:java.lang.Object[]) = (r2 I:java.util.Collection A[D('thisCollection$iv' java.util.Collection)]), (r3 I:java.lang.Object[]) type: INTERFACE call: java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] A[MD:\<T\>:(T[]):T[] (c)]\l0x0044: CONST_STR  (r4 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray\>\" \l0x0046: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0049: CHECK_CAST (r3 I:java.lang.reflect.Type[]) = (java.lang.reflect.Type[]) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x004b|RETURN\l|0x004b: RETURN  (r3 I:java.lang.reflect.Type[])  (LINE:116)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.reflect.Type[] kotlin.reflect.TypeVariableImpl.getBounds((r10 'this' I:kotlin.reflect.TypeVariableImpl A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lBACK_EDGE: B:5:0x0022 \-\> B:3:0x001c\lDebug Info:\l  0x0029\-0x002f: r7 'it' Lkotlin\/reflect\/KType;\l  0x002a\-0x002f: r8 '$i$a$\-map\-TypeVariableImpl$getBounds$1' I\l  0x0026\-0x0033: r6 'item$iv$iv' Ljava\/lang\/Object;\l  0x0016\-0x0034: r2 'destination$iv$iv' Ljava\/util\/Collection;\l  0x0017\-0x0034: r3 '$this$mapTo$iv$iv' Ljava\/lang\/Iterable;\l  0x0018\-0x0034: r4 '$i$f$mapTo' I\l  0x0008\-0x0037: r0 '$this$map$iv' Ljava\/lang\/Iterable;\l  0x0009\-0x0037: r1 '$i$f$map' I\l  0x003a\-0x0049: r0 '$this$toTypedArray$iv' Ljava\/util\/Collection;\l  0x003b\-0x0049: r1 '$i$f$toTypedArray' I\l  0x003d\-0x0049: r2 'thisCollection$iv' Ljava\/util\/Collection;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [116=4]\}\lMETHOD_OVERRIDE: [ClspMth\{java.lang.reflect.TypeVariable.getBounds():java.lang.reflect.Type[]\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_8;
Node_5 -> Node_3;
Node_8 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

