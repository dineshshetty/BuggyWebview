digraph "CFG forkotlin.reflect.TypesJVMKt.typeToString(Ljava\/lang\/reflect\/Type;)Ljava\/lang\/String;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('type' java.lang.reflect.Type)]) java.lang.Class  (LINE:223)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0049 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('type' java.lang.reflect.Type)])  (LINE:224)\l0x0005: CHECK_CAST (r0 I:java.lang.Class) = (java.lang.Class) (r0 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.isArray():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003b \l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: SGET  (r0 I:kotlin.reflect.TypesJVMKt$typeToString$unwrap$1) =  kotlin.reflect.TypesJVMKt$typeToString$unwrap$1.INSTANCE kotlin.reflect.TypesJVMKt$typeToString$unwrap$1  (LINE:225)\l0x000f: CHECK_CAST (r0 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r0 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r4 I:java.lang.Object A[D('type' java.lang.reflect.Type)]), (r0 I:kotlin.jvm.functions.Function1) type: STATIC call: kotlin.sequences.SequencesKt.generateSequence(java.lang.Object, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:\<T\>:(T, kotlin.jvm.functions.Function1\<? super T, ? extends T\>):kotlin.sequences.Sequence\<T\> (m)]\l0x0015: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:226)\l0x0017: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x001a: INVOKE  (r2 I:java.lang.Object) = (r0 I:kotlin.sequences.Sequence A[D('unwrap' kotlin.sequences.Sequence)]) type: STATIC call: kotlin.sequences.SequencesKt.last(kotlin.sequences.Sequence):java.lang.Object A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):T (m)]\l0x001e: CHECK_CAST (r2 I:java.lang.Class) = (java.lang.Class) (r2 I:??[OBJECT, ARRAY]) \l0x0020: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getName():java.lang.String A[MD:():java.lang.String (c)]\l0x0024: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0027: CONST_STR  (r2 I:java.lang.String) =  \"[]\" \l0x0029: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l0x002b: INVOKE  (r3 I:int) = (r0 I:kotlin.sequences.Sequence A[D('unwrap' kotlin.sequences.Sequence)]) type: STATIC call: kotlin.sequences.SequencesKt.count(kotlin.sequences.Sequence):int A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):int (m)]\l0x002f: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.CharSequence), (r3 I:int) type: STATIC call: kotlin.text.StringsKt.repeat(java.lang.CharSequence, int):java.lang.String A[MD:(java.lang.CharSequence, int):java.lang.String (m)]\l0x0033: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0036: INVOKE  (r0 I:java.lang.String A[D('unwrap' kotlin.sequences.Sequence)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|0x0043: CONST_STR  (r1 I:java.lang.String) =  \"\{n        if (type.isArrâ€¦   \} else type.namen    \}\"  (LINE:227)\l0x0045: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x004d: RETURN  (r0 I:java.lang.String) A[SYNTHETIC]\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|0x003b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('type' java.lang.reflect.Type)])  (LINE:227)\l0x003c: CHECK_CAST (r0 I:java.lang.Class) = (java.lang.Class) (r0 I:??[OBJECT, ARRAY]) \l0x003e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Class) type: VIRTUAL call: java.lang.Class.getName():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0049|0x0049: INVOKE  (r0 I:java.lang.String) = (r4 I:java.lang.Object A[D('type' java.lang.reflect.Type)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:228)\l}"];
Node_22 [shape=record,label="{22\:\ 0x004d|RETURN\lORIG_RETURN\l|0x004d: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.reflect.TypesJVMKt.typeToString((r4 I:java.lang.reflect.Type A[D('type' java.lang.reflect.Type), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x003b \-\> B:20:0x0042, CROSS_EDGE: B:21:0x0049 \-\> B:22:0x004d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x003a: r0 'unwrap' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x004d: r4 'type' Ljava\/lang\/reflect\/Type;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

