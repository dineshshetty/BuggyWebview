digraph "CFG forkotlin.reflect.TypesJVMKt.computeJavaType(Lkotlin\/reflect\/KType;Z)Ljava\/lang\/reflect\/Type;" {
Node_45 [shape=record,label="{45\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x0000|kotlin.reflect.KClassifier r0 = r8.getClassifier()\l}"];
Node_48 [shape=record,label="{48\:\ 0x0006|if ((r0 instanceof kotlin.reflect.KTypeParameter) == false) goto L6\l}"];
Node_49 [shape=record,label="{49\:\ 0x0008}"];
Node_50 [shape=record,label="{50\:\ 0x0012|RETURN\l|return new kotlin.reflect.TypeVariableImpl((kotlin.reflect.KTypeParameter) r0)\l}"];
Node_46 [shape=record,label="{46\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_51 [shape=record,label="{51\:\ 0x0013}"];
Node_52 [shape=record,label="{52\:\ 0x0015|if ((r0 instanceof kotlin.reflect.KClass) == false) goto L43\l}"];
Node_53 [shape=record,label="{53\:\ 0x0017|kotlin.reflect.KClass r1 = (kotlin.reflect.KClass) r0\l}"];
Node_54 [shape=record,label="{54\:\ 0x001a|if (r9 == false) goto L42\l}"];
Node_55 [shape=record,label="{55\:\ 0x001c|java.lang.Class r1 = kotlin.jvm.JvmClassMapping.getJavaObjectType(r1)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0025|PHI: r1 \l  PHI: (r1v6 'jClass' java.lang.Class) = (r1v5 'jClass' java.lang.Class), (r1v7 'jClass' java.lang.Class) binds: [B:56:0x0021, B:55:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|java.util.List r2 = r8.getArguments()\l}"];
Node_58 [shape=record,label="{58\:\ 0x002d|if (r2.isEmpty() == false) goto L15\l}"];
Node_59 [shape=record,label="{59\:\ 0x002f}"];
Node_60 [shape=record,label="{60\:\ 0x0032|RETURN\l|return r1\l}"];
Node_61 [shape=record,label="{61\:\ 0x0033}"];
Node_62 [shape=record,label="{62\:\ 0x0037|if (r1.isArray() == false) goto L40\l}"];
Node_63 [shape=record,label="{63\:\ 0x0039}"];
Node_64 [shape=record,label="{64\:\ 0x0041|if (r1.getComponentType().isPrimitive() == false) goto L21\l}"];
Node_65 [shape=record,label="{65\:\ 0x0043}"];
Node_66 [shape=record,label="{66\:\ 0x0046|RETURN\l|return r1\l}"];
Node_67 [shape=record,label="{67\:\ 0x0047|kotlin.reflect.KTypeProjection r3 = (kotlin.reflect.KTypeProjection) kotlin.collections.CollectionsKt.singleOrNull(r2)\l}"];
Node_68 [shape=record,label="{68\:\ 0x004d|if (r3 == null) goto L38\l}"];
Node_69 [shape=record,label="{69\:\ 0x004f|kotlin.reflect.KVariance r4 = r3.component1()\lkotlin.reflect.KType r3 = r3.component2()\l}"];
Node_70 [shape=record,label="{70\:\ 0x0057|if (r4 != null) goto L37\l}"];
Node_71 [shape=record,label="{71\:\ 0x0059|r5 = \-1\l}"];
Node_73 [shape=record,label="{73\:\ 0x0063|PHI: r5 \l  PHI: (r5v3 int) = (r5v2 int), (r5v7 int) binds: [B:72:0x005b, B:71:0x0059] A[DONT_GENERATE, DONT_INLINE]\l|switch(r5) \{\l    case \-1: goto L35;\l    case 0: goto L27;\l    case 1: goto L35;\l    case 2: goto L29;\l    case 3: goto L29;\l    default: goto L27;\l\}\l}"];
Node_74 [shape=record,label="{74\:\ 0x0066}"];
Node_75 [shape=record,label="{75\:\ 0x006b|throw new kotlin.NoWhenBranchMatchedException()\l}"];
Node_76 [shape=record,label="{76\:\ 0x006c|kotlin.jvm.internal.Intrinsics.checkNotNull(r3)\ljava.lang.reflect.Type r5 = computeJavaType$default(r3, false, 1, null)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0078|if ((r5 instanceof java.lang.Class) == false) goto L33\l}"];
Node_78 [shape=record,label="{78\:\ 0x007a}"];
Node_88 [shape=record,label="{88\:\ ?|SYNTHETIC\lRETURN\l|return r1\l}"];
Node_79 [shape=record,label="{79\:\ 0x007e}"];
Node_89 [shape=record,label="{89\:\ ?|SYNTHETIC\lRETURN\l|return new kotlin.reflect.TypesJVM(r5)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0086}"];
Node_81 [shape=record,label="{81\:\ 0x0089|RETURN\lORIG_RETURN\l|return r1\l}"];
Node_72 [shape=record,label="{72\:\ 0x005b|r5 = kotlin.reflect.TypesJVMKt.WhenMappings.$EnumSwitchMapping$0[r4.ordinal()]\l}"];
Node_82 [shape=record,label="{82\:\ 0x008a|java.lang.StringBuilder r4 = new java.lang.StringBuilder()\lr4.append(\"kotlin.Array must have exactly one type argument: \")\lr4.append(r8)\l}"];
Node_83 [shape=record,label="{83\:\ 0x00a0|throw new java.lang.IllegalArgumentException(r4.toString())\l}"];
Node_84 [shape=record,label="{84\:\ 0x00a1}"];
Node_85 [shape=record,label="{85\:\ 0x00a5|RETURN\l|return createPossiblyInnerType(r1, r2)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0021|java.lang.Class r1 = kotlin.jvm.JvmClassMapping.getJavaClass(r1)\l}"];
Node_86 [shape=record,label="{86\:\ 0x00a6|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Unsupported type classifier: \")\lr2.append(r8)\l}"];
Node_87 [shape=record,label="{87\:\ 0x00bc|throw new java.lang.UnsupportedOperationException(r2.toString())\l}"];
MethodNode[shape=record,label="{public static final java.lang.reflect.Type kotlin.reflect.TypesJVMKt.computeJavaType((r8v0 '$this$computeJavaType' kotlin.reflect.KType A[D('$this$computeJavaType' kotlin.reflect.KType), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'forceWrapper' boolean A[D('forceWrapper' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:60:0x0032 \-\> B:46:?, CROSS_EDGE: B:66:0x0046 \-\> B:46:?, CROSS_EDGE: B:75:0x006b \-\> B:46:?, CROSS_EDGE: B:81:0x0089 \-\> B:46:?, CROSS_EDGE: B:79:0x007e \-\> B:81:0x0089, CROSS_EDGE: B:80:0x0086 \-\> B:81:0x0089, CROSS_EDGE: B:72:0x005b \-\> B:73:0x0063, CROSS_EDGE: B:83:0x00a0 \-\> B:46:?, CROSS_EDGE: B:85:0x00a5 \-\> B:46:?, CROSS_EDGE: B:56:0x0021 \-\> B:57:0x0025, CROSS_EDGE: B:87:0x00bc \-\> B:46:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_45;Node_45 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_51;
Node_49 -> Node_50;
Node_50 -> Node_46;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_86;
Node_53 -> Node_54;
Node_54 -> Node_55[style=dashed];
Node_54 -> Node_56;
Node_55 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_61;
Node_59 -> Node_60;
Node_60 -> Node_46;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_84;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_67;
Node_65 -> Node_66;
Node_66 -> Node_46;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_82;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_72;
Node_71 -> Node_73;
Node_73 -> Node_74;
Node_73 -> Node_76;
Node_73 -> Node_80;
Node_74 -> Node_75;
Node_75 -> Node_46;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_88;
Node_88 -> Node_46;
Node_79 -> Node_89;
Node_89 -> Node_46;
Node_80 -> Node_81;
Node_81 -> Node_46;
Node_72 -> Node_73;
Node_82 -> Node_83;
Node_83 -> Node_46;
Node_84 -> Node_85;
Node_85 -> Node_46;
Node_56 -> Node_57;
Node_86 -> Node_87;
Node_87 -> Node_46;
}

