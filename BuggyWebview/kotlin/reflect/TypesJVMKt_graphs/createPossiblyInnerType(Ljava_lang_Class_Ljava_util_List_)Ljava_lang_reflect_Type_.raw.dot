digraph "CFG forkotlin.reflect.TypesJVMKt.createPossiblyInnerType(Ljava\/lang\/Class;Ljava\/util\/List;)Ljava\/lang\/reflect\/Type;" {
Node_27 [shape=record,label="{27\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Class) = (r12 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getDeclaringClass():java.lang.Class A[MD:():java.lang.Class\<?\> (c)] (LINE:68)\l0x0004: CONST  (r1 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0041 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:69)\l0x0009: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('arguments' java.util.List)]) \l0x000a: CHECK_CAST (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:??[OBJECT, ARRAY]) \l0x000c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:231)\l0x000f: INVOKE  (r1 I:int) = (r2 I:java.lang.Iterable A[D('$this$map$iv' java.lang.Iterable)]), (r1 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l0x0013: INVOKE  (r4 I:java.util.ArrayList), (r1 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0016: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x0017: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x0019: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$map$iv' java.lang.Iterable)]) \l0x001a: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: INVOKE  (r6 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$mapTo$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:232)\l}"];
Node_32 [shape=record,label="{32\:\ 0x001f|LOOP_START\lLOOP:0: B:32:0x001f\-\>B:34:0x0025\l|0x001f: INVOKE  (r7 I:boolean) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:51:0x0035 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0025|LOOP_END\lLOOP:0: B:32:0x001f\-\>B:34:0x0025\l|0x0025: INVOKE  (r7 I:java.lang.Object) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0029: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('item$iv$iv' java.lang.Object)])  (LINE:233)\l0x002a: CHECK_CAST (r8 I:kotlin.reflect.KTypeProjection) = (kotlin.reflect.KTypeProjection) (r8 I:??[OBJECT, ARRAY]) \l0x002c: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002d: INVOKE  (r8 I:java.lang.reflect.Type A[D('p0' kotlin.reflect.KTypeProjection)]) = (r8 I:kotlin.reflect.KTypeProjection A[D('p0' kotlin.reflect.KTypeProjection)]) type: STATIC call: kotlin.reflect.TypesJVMKt.getJavaType(kotlin.reflect.KTypeProjection):java.lang.reflect.Type A[MD:(kotlin.reflect.KTypeProjection):java.lang.reflect.Type (m)] (LINE:69)\l0x0031: INVOKE  \l  (r1 I:java.util.Collection A[D('destination$iv$iv' java.util.Collection)])\l  (r8 I:java.lang.Object A[D('p0' kotlin.reflect.KTypeProjection)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x0035|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0035|0x0036: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY] A[D('destination$iv$iv' java.util.Collection)]) \l0x0039: NEW_INSTANCE  (r2 I:kotlin.reflect.ParameterizedTypeImpl A[D('$this$map$iv' java.lang.Iterable)]) =  kotlin.reflect.ParameterizedTypeImpl  (LINE:69)\l0x003b: INVOKE  \l  (r2 I:kotlin.reflect.ParameterizedTypeImpl)\l  (r12 I:java.lang.Class A[D('jClass' java.lang.Class)])\l  (r0 I:java.lang.reflect.Type)\l  (r1 I:java.util.List)\l type: DIRECT call: kotlin.reflect.ParameterizedTypeImpl.\<init\>(java.lang.Class, java.lang.reflect.Type, java.util.List):void A[MD:(java.lang.Class\<?\>, java.lang.reflect.Type, java.util.List\<? extends java.lang.reflect.Type\>):void (m)]\l0x003e: CHECK_CAST (r2 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0040|RETURN\l|0x0040: RETURN  (r2 I:java.lang.reflect.Type) \l}"];
Node_28 [shape=record,label="{28\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0041|0x0041: INVOKE  (r2 I:int) = (r12 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getModifiers():int A[MD:():int (c)] (LINE:70)\l0x0045: INVOKE  (r2 I:boolean) = (r2 I:int) type: STATIC call: java.lang.reflect.Modifier.isStatic(int):boolean A[MD:(int):boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0049|0x0049: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0086 \l}"];
Node_39 [shape=record,label="{39\:\ 0x004b|0x004b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('ownerClass' java.lang.Class)])  (LINE:71)\l0x004c: CHECK_CAST (r2 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r2 I:??[OBJECT, ARRAY]) \l0x004e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('arguments' java.util.List)]) \l0x004f: CHECK_CAST (r3 I:java.lang.Iterable) = (java.lang.Iterable) (r3 I:??[OBJECT, ARRAY]) \l0x0051: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0052: NEW_INSTANCE  (r5 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:235)\l0x0054: INVOKE  (r1 I:int) = (r3 I:java.lang.Iterable A[D('$this$map$iv' java.lang.Iterable)]), (r1 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l0x0058: INVOKE  (r5 I:java.util.ArrayList), (r1 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x005b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY]) \l0x005c: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x005e: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$map$iv' java.lang.Iterable)]) \l0x005f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0060: INVOKE  (r7 I:java.util.Iterator) = (r5 I:java.lang.Iterable A[D('$this$mapTo$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:236)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0064|LOOP_START\lLOOP:1: B:40:0x0064\-\>B:42:0x006a\l|0x0064: INVOKE  (r8 I:boolean) = (r7 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0068|0x0068: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x007a \l}"];
Node_42 [shape=record,label="{42\:\ 0x006a|LOOP_END\lLOOP:1: B:40:0x0064\-\>B:42:0x006a\l|0x006a: INVOKE  (r8 I:java.lang.Object) = (r7 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x006e: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('item$iv$iv' java.lang.Object)])  (LINE:237)\l0x006f: CHECK_CAST (r9 I:kotlin.reflect.KTypeProjection) = (kotlin.reflect.KTypeProjection) (r9 I:??[OBJECT, ARRAY]) \l0x0071: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0072: INVOKE  (r9 I:java.lang.reflect.Type A[D('p0' kotlin.reflect.KTypeProjection)]) = (r9 I:kotlin.reflect.KTypeProjection A[D('p0' kotlin.reflect.KTypeProjection)]) type: STATIC call: kotlin.reflect.TypesJVMKt.getJavaType(kotlin.reflect.KTypeProjection):java.lang.reflect.Type A[MD:(kotlin.reflect.KTypeProjection):java.lang.reflect.Type (m)] (LINE:71)\l0x0076: INVOKE  \l  (r1 I:java.util.Collection A[D('destination$iv$iv' java.util.Collection)])\l  (r9 I:java.lang.Object A[D('p0' kotlin.reflect.KTypeProjection)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x007a|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x007a|0x007b: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY] A[D('destination$iv$iv' java.util.Collection)]) \l0x007e: NEW_INSTANCE  (r3 I:kotlin.reflect.ParameterizedTypeImpl A[D('$this$map$iv' java.lang.Iterable)]) =  kotlin.reflect.ParameterizedTypeImpl  (LINE:71)\l0x0080: INVOKE  \l  (r3 I:kotlin.reflect.ParameterizedTypeImpl)\l  (r12 I:java.lang.Class A[D('jClass' java.lang.Class)])\l  (r2 I:java.lang.reflect.Type)\l  (r1 I:java.util.List)\l type: DIRECT call: kotlin.reflect.ParameterizedTypeImpl.\<init\>(java.lang.Class, java.lang.reflect.Type, java.util.List):void A[MD:(java.lang.Class\<?\>, java.lang.reflect.Type, java.util.List\<? extends java.lang.reflect.Type\>):void (m)]\l0x0083: CHECK_CAST (r3 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x0085|RETURN\l|0x0085: RETURN  (r3 I:java.lang.reflect.Type) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0086|0x0086: INVOKE  (r2 I:java.lang.reflect.TypeVariable[]) = (r12 I:java.lang.Class A[D('jClass' java.lang.Class)]) type: VIRTUAL call: java.lang.Class.getTypeParameters():java.lang.reflect.TypeVariable[] A[MD:():java.lang.reflect.TypeVariable\<java.lang.Class\<T\>\>[] (c)] (LINE:73)\l0x008a: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[]) \l0x008d: INVOKE  (r3 I:int) = (r13 I:java.util.List A[D('arguments' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:76)\l0x0091: INVOKE  (r3 I:java.util.List) = (r13 I:java.util.List A[D('arguments' java.util.List)]), (r2 I:int A[D('n' int)]), (r3 I:int) type: INTERFACE call: java.util.List.subList(int, int):java.util.List A[MD:(int, int):java.util.List\<E\> (c)]\l0x0095: INVOKE  (r3 I:java.lang.reflect.Type) = (r0 I:java.lang.Class A[D('ownerClass' java.lang.Class)]), (r3 I:java.util.List) type: STATIC call: kotlin.reflect.TypesJVMKt.createPossiblyInnerType(java.lang.Class, java.util.List):java.lang.reflect.Type A[MD:(java.lang.Class\<?\>, java.util.List\<kotlin.reflect.KTypeProjection\>):java.lang.reflect.Type (m)]\l0x0099: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:77)\l0x009a: INVOKE  (r4 I:java.util.List) = (r13 I:java.util.List A[D('arguments' java.util.List)]), (r4 I:int), (r2 I:int A[D('n' int)]) type: INTERFACE call: java.util.List.subList(int, int):java.util.List A[MD:(int, int):java.util.List\<E\> (c)]\l0x009e: CHECK_CAST (r4 I:java.lang.Iterable) = (java.lang.Iterable) (r4 I:??[OBJECT, ARRAY]) \l0x00a0: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a1: NEW_INSTANCE  (r6 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:239)\l0x00a3: INVOKE  (r1 I:int) = (r4 I:java.lang.Iterable A[D('$this$map$iv' java.lang.Iterable)]), (r1 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l0x00a7: INVOKE  (r6 I:java.util.ArrayList), (r1 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x00aa: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x00ab: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x00ad: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$map$iv' java.lang.Iterable)]) \l0x00ae: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00af: INVOKE  (r8 I:java.util.Iterator) = (r6 I:java.lang.Iterable A[D('$this$mapTo$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:240)\l}"];
Node_46 [shape=record,label="{46\:\ 0x00b3|LOOP_START\lLOOP:2: B:46:0x00b3\-\>B:48:0x00b9\l|0x00b3: INVOKE  (r9 I:boolean) = (r8 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x00b7|0x00b7: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x00c9 \l}"];
Node_48 [shape=record,label="{48\:\ 0x00b9|LOOP_END\lLOOP:2: B:46:0x00b3\-\>B:48:0x00b9\l|0x00b9: INVOKE  (r9 I:java.lang.Object) = (r8 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x00bd: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('item$iv$iv' java.lang.Object)])  (LINE:241)\l0x00be: CHECK_CAST (r10 I:kotlin.reflect.KTypeProjection) = (kotlin.reflect.KTypeProjection) (r10 I:??[OBJECT, ARRAY]) \l0x00c0: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00c1: INVOKE  (r10 I:java.lang.reflect.Type A[D('p0' kotlin.reflect.KTypeProjection)]) = (r10 I:kotlin.reflect.KTypeProjection A[D('p0' kotlin.reflect.KTypeProjection)]) type: STATIC call: kotlin.reflect.TypesJVMKt.getJavaType(kotlin.reflect.KTypeProjection):java.lang.reflect.Type A[MD:(kotlin.reflect.KTypeProjection):java.lang.reflect.Type (m)] (LINE:77)\l0x00c5: INVOKE  \l  (r1 I:java.util.Collection A[D('destination$iv$iv' java.util.Collection)])\l  (r10 I:java.lang.Object A[D('p0' kotlin.reflect.KTypeProjection)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x00c9|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x00c9|0x00ca: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY] A[D('destination$iv$iv' java.util.Collection)]) \l0x00cd: NEW_INSTANCE  (r4 I:kotlin.reflect.ParameterizedTypeImpl A[D('$this$map$iv' java.lang.Iterable)]) =  kotlin.reflect.ParameterizedTypeImpl  (LINE:74)\l0x00cf: INVOKE  \l  (r4 I:kotlin.reflect.ParameterizedTypeImpl)\l  (r12 I:java.lang.Class A[D('jClass' java.lang.Class)])\l  (r3 I:java.lang.reflect.Type)\l  (r1 I:java.util.List)\l type: DIRECT call: kotlin.reflect.ParameterizedTypeImpl.\<init\>(java.lang.Class, java.lang.reflect.Type, java.util.List):void A[MD:(java.lang.Class\<?\>, java.lang.reflect.Type, java.util.List\<? extends java.lang.reflect.Type\>):void (m)]\l0x00d2: CHECK_CAST (r4 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r4 I:??[OBJECT, ARRAY]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x00d4|RETURN\l|0x00d4: RETURN  (r4 I:java.lang.reflect.Type) \l}"];
MethodNode[shape=record,label="{private static final java.lang.reflect.Type kotlin.reflect.TypesJVMKt.createPossiblyInnerType((r12 I:java.lang.Class\<?\> A[D('jClass' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.util.List\<kotlin.reflect.KTypeProjection\> A[D('arguments' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x0025 \-\> B:32:0x001f, BACK_EDGE: B:42:0x006a \-\> B:40:0x0064, CROSS_EDGE: B:44:0x0085 \-\> B:28:?, BACK_EDGE: B:48:0x00b9 \-\> B:46:0x00b3, CROSS_EDGE: B:50:0x00d4 \-\> B:28:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002c\-0x0031: r8 'p0' Lkotlin\/reflect\/KTypeProjection;\l  0x002d\-0x0031: r9 '$i$a$\-map\-TypesJVMKt$createPossiblyInnerType$ownerClass$1' I\l  0x0029\-0x0035: r7 'item$iv$iv' Ljava\/lang\/Object;\l  0x0019\-0x0036: r1 'destination$iv$iv' Ljava\/util\/Collection;\l  0x001a\-0x0036: r4 '$this$mapTo$iv$iv' Ljava\/lang\/Iterable;\l  0x001b\-0x0036: r5 '$i$f$mapTo' I\l  0x000c\-0x0039: r2 '$this$map$iv' Ljava\/lang\/Iterable;\l  0x000d\-0x0039: r3 '$i$f$map' I\l  0x0071\-0x0076: r9 'p0' Lkotlin\/reflect\/KTypeProjection;\l  0x0072\-0x0076: r10 '$i$a$\-map\-TypesJVMKt$createPossiblyInnerType$1' I\l  0x006e\-0x007a: r8 'item$iv$iv' Ljava\/lang\/Object;\l  0x005e\-0x007b: r1 'destination$iv$iv' Ljava\/util\/Collection;\l  0x005f\-0x007b: r5 '$this$mapTo$iv$iv' Ljava\/lang\/Iterable;\l  0x0060\-0x007b: r6 '$i$f$mapTo' I\l  0x0051\-0x007e: r3 '$this$map$iv' Ljava\/lang\/Iterable;\l  0x0052\-0x007e: r4 '$i$f$map' I\l  0x00c0\-0x00c5: r10 'p0' Lkotlin\/reflect\/KTypeProjection;\l  0x00c1\-0x00c5: r11 '$i$a$\-map\-TypesJVMKt$createPossiblyInnerType$2' I\l  0x00bd\-0x00c9: r9 'item$iv$iv' Ljava\/lang\/Object;\l  0x00ad\-0x00ca: r1 'destination$iv$iv' Ljava\/util\/Collection;\l  0x00ae\-0x00ca: r6 '$this$mapTo$iv$iv' Ljava\/lang\/Iterable;\l  0x00af\-0x00ca: r7 '$i$f$mapTo' I\l  0x00a0\-0x00cd: r4 '$this$map$iv' Ljava\/lang\/Iterable;\l  0x00a1\-0x00cd: r5 '$i$f$map' I\l  0x0041\-0x00d4: r0 'ownerClass' Ljava\/lang\/Class;\l  0x008b\-0x00d4: r2 'n' I\l  \-1 \-0x00d4: r12 'jClass' Ljava\/lang\/Class;\l  \-1 \-0x00d4: r13 'arguments' Ljava\/util\/List;\lSIGNATURE: (Ljava\/lang\/Class\<*\>;Ljava\/util\/List\<Lkotlin\/reflect\/KTypeProjection;\>;)Ljava\/lang\/reflect\/Type;\l}"];
MethodNode -> Node_27;Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_37;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_51;
Node_34 -> Node_32;
Node_51 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_28;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_45;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_52;
Node_42 -> Node_40;
Node_52 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_28;
Node_45 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_53;
Node_48 -> Node_46;
Node_53 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_28;
}

