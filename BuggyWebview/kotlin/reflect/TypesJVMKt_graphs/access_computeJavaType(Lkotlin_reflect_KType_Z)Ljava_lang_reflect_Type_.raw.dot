digraph "CFG forkotlin.reflect.TypesJVMKt.access$computeJavaType(Lkotlin\/reflect\/KType;Z)Ljava\/lang\/reflect\/Type;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.reflect.Type) = (r1 I:kotlin.reflect.KType A[D('$receiver' kotlin.reflect.KType)]), (r2 I:boolean A[D('forceWrapper' boolean)]) type: STATIC call: kotlin.reflect.TypesJVMKt.computeJavaType(kotlin.reflect.KType, boolean):java.lang.reflect.Type A[MD:(kotlin.reflect.KType, boolean):java.lang.reflect.Type (m)] (LINE:1)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:java.lang.reflect.Type) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ java.lang.reflect.Type kotlin.reflect.TypesJVMKt.access$computeJavaType((r1 I:kotlin.reflect.KType A[D('$receiver' kotlin.reflect.KType), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[D('forceWrapper' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: INVOKE  (r1 I:kotlin.reflect.KType A[D('$receiver' kotlin.reflect.KType)]), (r2 I:boolean A[D('forceWrapper' boolean)]) type: STATIC call: kotlin.reflect.TypesJVMKt.computeJavaType(kotlin.reflect.KType, boolean):java.lang.reflect.Type\lDebug Info:\l  \-1 \-0x0004: r1 '$receiver' Lkotlin\/reflect\/KType;\l  \-1 \-0x0004: r2 'forceWrapper' Z\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

