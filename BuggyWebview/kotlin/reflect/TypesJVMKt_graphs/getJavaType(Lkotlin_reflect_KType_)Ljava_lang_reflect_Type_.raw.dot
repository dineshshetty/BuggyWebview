digraph "CFG forkotlin.reflect.TypesJVMKt.getJavaType(Lkotlin\/reflect\/KType;)Ljava\/lang\/reflect\/Type;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$javaType' kotlin.reflect.KType)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('$this$javaType' kotlin.reflect.KType)]) kotlin.jvm.internal.KTypeBase  (LINE:28)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0014 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$javaType' kotlin.reflect.KType)])  (LINE:30)\l0x000a: CHECK_CAST (r0 I:kotlin.jvm.internal.KTypeBase) = (kotlin.jvm.internal.KTypeBase) (r0 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:java.lang.reflect.Type) = (r0 I:kotlin.jvm.internal.KTypeBase) type: INTERFACE call: kotlin.jvm.internal.KTypeBase.getJavaType():java.lang.reflect.Type A[MD:():java.lang.reflect.Type (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0014 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|0x0012: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:230)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:java.lang.reflect.Type A[D('it' java.lang.reflect.Type)])  (LINE:30)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' java.lang.reflect.Type)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:33)\l0x0015: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0016: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: INVOKE  (r0 I:java.lang.reflect.Type) = \l  (r3 I:kotlin.reflect.KType A[D('$this$javaType' kotlin.reflect.KType)])\l  (r0 I:boolean)\l  (r1 I:int)\l  (r2 I:java.lang.Object)\l type: STATIC call: kotlin.reflect.TypesJVMKt.computeJavaType$default(kotlin.reflect.KType, boolean, int, java.lang.Object):java.lang.reflect.Type A[MD:(kotlin.reflect.KType, boolean, int, java.lang.Object):java.lang.reflect.Type (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001b|RETURN\l|0x001b: RETURN  (r0 I:java.lang.reflect.Type) \l}"];
MethodNode[shape=record,label="{public static final java.lang.reflect.Type kotlin.reflect.TypesJVMKt.getJavaType((r3 I:kotlin.reflect.KType A[D('$this$javaType' kotlin.reflect.KType), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001b \-\> B:11:?, CROSS_EDGE: B:13:0x0007 \-\> B:18:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0014: r0 'it' Ljava\/lang\/reflect\/Type;\l  0x0013\-0x0014: r1 '$i$a$\-let\-TypesJVMKt$javaType$1' I\l  \-1 \-0x001b: r3 '$this$javaType' Lkotlin\/reflect\/KType;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

