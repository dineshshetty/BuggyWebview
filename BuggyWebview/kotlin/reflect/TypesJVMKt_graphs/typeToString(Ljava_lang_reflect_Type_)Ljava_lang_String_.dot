digraph "CFG forkotlin.reflect.TypesJVMKt.typeToString(Ljava\/lang\/reflect\/Type;)Ljava\/lang\/String;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0002|if ((r4 instanceof java.lang.Class) == false) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x0004}"];
Node_17 [shape=record,label="{17\:\ 0x000b|if (((java.lang.Class) r4).isArray() == false) goto L9\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|kotlin.sequences.Sequence r0 = kotlin.sequences.SequencesKt.generateSequence(r4, kotlin.reflect.TypesJVMKt$typeToString$unwrap$1.INSTANCE)\ljava.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(((java.lang.Class) kotlin.sequences.SequencesKt.last(r0)).getName())\lr1.append(kotlin.text.StringsKt.repeat(\"[]\", kotlin.sequences.SequencesKt.count(r0)))\ljava.lang.String r0 = r1.toString()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0042|PHI: r0 \l  PHI: (r0v8 java.lang.String) = (r0v7 java.lang.String), (r0v12 java.lang.String) binds: [B:19:0x003b, B:18:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"\{n        if (type.isArrâ€¦   \} else type.namen    \}\")\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x003b|java.lang.String r0 = ((java.lang.Class) r4).getName()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0049}"];
Node_22 [shape=record,label="{22\:\ 0x004d|RETURN\lORIG_RETURN\l|return r4.toString()\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.reflect.TypesJVMKt.typeToString((r4v0 'type' java.lang.reflect.Type A[D('type' java.lang.reflect.Type), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x003b \-\> B:20:0x0042, CROSS_EDGE: B:21:0x0049 \-\> B:22:0x004d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_19 -> Node_20;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

