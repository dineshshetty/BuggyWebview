digraph "CFG forkotlin.reflect.TypesJVMKt.getJavaType(Lkotlin\/reflect\/KTypeProjection;)Ljava\/lang\/reflect\/Type;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.reflect.KVariance) = (r5 I:kotlin.reflect.KTypeProjection A[D('$this$javaType' kotlin.reflect.KTypeProjection)]) type: VIRTUAL call: kotlin.reflect.KTypeProjection.getVariance():kotlin.reflect.KVariance A[MD:():kotlin.reflect.KVariance (m)] (LINE:84)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000f \l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|0x0006: SGET  (r0 I:kotlin.reflect.WildcardTypeImpl$Companion) =  kotlin.reflect.WildcardTypeImpl.Companion kotlin.reflect.WildcardTypeImpl$Companion \l0x0008: INVOKE  (r0 I:kotlin.reflect.WildcardTypeImpl) = (r0 I:kotlin.reflect.WildcardTypeImpl$Companion) type: VIRTUAL call: kotlin.reflect.WildcardTypeImpl.Companion.getSTAR():kotlin.reflect.WildcardTypeImpl A[MD:():kotlin.reflect.WildcardTypeImpl (m)]\l0x000c: CHECK_CAST (r0 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.lang.reflect.Type) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: INVOKE  (r1 I:kotlin.reflect.KType) = (r5 I:kotlin.reflect.KTypeProjection A[D('$this$javaType' kotlin.reflect.KTypeProjection)]) type: VIRTUAL call: kotlin.reflect.KTypeProjection.getType():kotlin.reflect.KType A[MD:():kotlin.reflect.KType (m)] (LINE:85)\l0x0013: INVOKE  (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0016: SGET  (r2 I:int[]) =  kotlin.reflect.TypesJVMKt.WhenMappings.$EnumSwitchMapping$0 int[]  (LINE:87)\l0x0018: INVOKE  (r3 I:int) = (r0 I:kotlin.reflect.KVariance A[D('variance' kotlin.reflect.KVariance)]) type: VIRTUAL call: kotlin.reflect.KVariance.ordinal():int A[MD:():int (c)]\l0x001c: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r3 I:??[int, short, byte, char]) \l0x001e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|0x0020: SWITCH  (r2 I:??)\l case 1: goto B:28:0x003a\l case 2: goto B:27:0x0035\l case 3: goto B:26:0x0029\l default: goto B:24:0x0023 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0023|0x0023: NEW_INSTANCE  (r2 I:kotlin.NoWhenBranchMatchedException) =  kotlin.NoWhenBranchMatchedException  (LINE:93)\l0x0025: INVOKE  (r2 I:kotlin.NoWhenBranchMatchedException) type: DIRECT call: kotlin.NoWhenBranchMatchedException.\<init\>():void A[MD:():void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0028|0x0028: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0029|0x0029: NEW_INSTANCE  (r2 I:kotlin.reflect.WildcardTypeImpl) =  kotlin.reflect.WildcardTypeImpl \l0x002b: INVOKE  (r4 I:java.lang.reflect.Type) = (r1 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType)]), (r4 I:boolean) type: STATIC call: kotlin.reflect.TypesJVMKt.computeJavaType(kotlin.reflect.KType, boolean):java.lang.reflect.Type A[MD:(kotlin.reflect.KType, boolean):java.lang.reflect.Type (m)]\l0x002f: INVOKE  (r2 I:kotlin.reflect.WildcardTypeImpl), (r4 I:java.lang.reflect.Type), (r3 I:java.lang.reflect.Type) type: DIRECT call: kotlin.reflect.WildcardTypeImpl.\<init\>(java.lang.reflect.Type, java.lang.reflect.Type):void A[MD:(java.lang.reflect.Type, java.lang.reflect.Type):void (m)]\l0x0032: CHECK_CAST (r2 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x0045: RETURN  (r2 I:java.lang.reflect.Type) A[SYNTHETIC] (LINE:87)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0035|0x0035: INVOKE  (r2 I:java.lang.reflect.Type) = (r1 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType)]), (r4 I:boolean) type: STATIC call: kotlin.reflect.TypesJVMKt.computeJavaType(kotlin.reflect.KType, boolean):java.lang.reflect.Type A[MD:(kotlin.reflect.KType, boolean):java.lang.reflect.Type (m)] (LINE:90)\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0045: RETURN  (r2 I:java.lang.reflect.Type) A[SYNTHETIC] (LINE:87)\l}"];
Node_28 [shape=record,label="{28\:\ 0x003a|0x003a: NEW_INSTANCE  (r2 I:kotlin.reflect.WildcardTypeImpl) =  kotlin.reflect.WildcardTypeImpl  (LINE:92)\l0x003c: INVOKE  (r4 I:java.lang.reflect.Type) = (r1 I:kotlin.reflect.KType A[D('type' kotlin.reflect.KType)]), (r4 I:boolean) type: STATIC call: kotlin.reflect.TypesJVMKt.computeJavaType(kotlin.reflect.KType, boolean):java.lang.reflect.Type A[MD:(kotlin.reflect.KType, boolean):java.lang.reflect.Type (m)]\l0x0040: INVOKE  (r2 I:kotlin.reflect.WildcardTypeImpl), (r3 I:java.lang.reflect.Type), (r4 I:java.lang.reflect.Type) type: DIRECT call: kotlin.reflect.WildcardTypeImpl.\<init\>(java.lang.reflect.Type, java.lang.reflect.Type):void A[MD:(java.lang.reflect.Type, java.lang.reflect.Type):void (m)]\l0x0043: CHECK_CAST (r2 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0045|RETURN\lORIG_RETURN\l|0x0045: RETURN  (r2 I:java.lang.reflect.Type)  (LINE:87)\l}"];
MethodNode[shape=record,label="{private static final java.lang.reflect.Type kotlin.reflect.TypesJVMKt.getJavaType((r5 I:kotlin.reflect.KTypeProjection A[D('$this$javaType' kotlin.reflect.KTypeProjection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0028 \-\> B:17:?, CROSS_EDGE: B:29:0x0045 \-\> B:17:?, CROSS_EDGE: B:27:0x0035 \-\> B:29:0x0045, CROSS_EDGE: B:28:0x003a \-\> B:29:0x0045\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x004f: r0 'variance' Lkotlin\/reflect\/KVariance;\l  0x0016\-0x004f: r1 'type' Lkotlin\/reflect\/KType;\l  \-1 \-0x004f: r5 '$this$javaType' Lkotlin\/reflect\/KTypeProjection;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_26;
Node_23 -> Node_27;
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_17;
Node_26 -> Node_30;
Node_30 -> Node_17;
Node_27 -> Node_31;
Node_31 -> Node_17;
Node_28 -> Node_29;
Node_29 -> Node_17;
}

