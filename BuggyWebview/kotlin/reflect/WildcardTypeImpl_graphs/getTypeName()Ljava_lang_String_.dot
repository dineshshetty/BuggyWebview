digraph "CFG forkotlin.reflect.WildcardTypeImpl.getTypeName()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0001}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r2.lowerBound == null) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"? super \")\ljava.lang.String r1 = kotlin.reflect.TypesJVMKt.typeToString(r2.lowerBound)\lr0.append(r1)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return r0.toString()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|java.lang.reflect.Type r0 = r2.upperBound\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|if (r0 == null) goto L12\l}"];
Node_7 [shape=record,label="{7\:\ 0x0021}"];
Node_8 [shape=record,label="{8\:\ 0x0027|if (kotlin.jvm.internal.Intrinsics.areEqual(r0, java.lang.Object.class) != false) goto L12\l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(\"? extends \")\ljava.lang.String r1 = kotlin.reflect.TypesJVMKt.typeToString(r2.upperBound)\lr0.append(r1)\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0.toString()\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|RETURN\lORIG_RETURN\l|return \"?\"\l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.reflect.WildcardTypeImpl.getTypeName((r2v0 'this' kotlin.reflect.WildcardTypeImpl A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:9:0x0029 \-\> B:11:0x0043, CROSS_EDGE: B:10:0x0041 \-\> B:11:0x0043, CROSS_EDGE: B:6:0x001f \-\> B:10:0x0041\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{java.lang.reflect.Type.getTypeName():java.lang.String\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_12;
Node_12 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_13;
Node_13 -> Node_1;
Node_10 -> Node_1;
}

