digraph "CFG forkotlin.reflect.WildcardTypeImpl.hashCode()I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.reflect.Type[]) = (r2 I:kotlin.reflect.WildcardTypeImpl) type: VIRTUAL call: kotlin.reflect.WildcardTypeImpl.getUpperBounds():java.lang.reflect.Type[] A[MD:():java.lang.reflect.Type[] (m)] (LINE:174)\l0x0004: INVOKE  (r0 I:int) = (r0 I:java.lang.Object[]) type: STATIC call: java.util.Arrays.hashCode(java.lang.Object[]):int A[MD:(java.lang.Object[]):int (c)]\l0x0008: INVOKE  (r1 I:java.lang.reflect.Type[]) = (r2 I:kotlin.reflect.WildcardTypeImpl) type: VIRTUAL call: kotlin.reflect.WildcardTypeImpl.getLowerBounds():java.lang.reflect.Type[] A[MD:():java.lang.reflect.Type[] (m)]\l0x000c: INVOKE  (r1 I:int) = (r1 I:java.lang.Object[]) type: STATIC call: java.util.Arrays.hashCode(java.lang.Object[]):int A[MD:(java.lang.Object[]):int (c)]\l0x0010: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) ^ (r1 I:??[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public int kotlin.reflect.WildcardTypeImpl.hashCode((r2 'this' I:kotlin.reflect.WildcardTypeImpl A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

