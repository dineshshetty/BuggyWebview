digraph "CFG forkotlin.reflect.WildcardTypeImpl.getUpperBounds()[Ljava\/lang\/reflect\/Type;" {
subgraph cluster_Region_1373152080 {
label = "R(4:1|(1:3)|4|5)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.reflect.Type[] java.lang.reflect.Type[] r0 = new java.lang.reflect.Type[1]\ljava.lang.reflect.Type java.lang.Class r1 = r3.upperBound\l}"];
subgraph cluster_IfRegion_1598995513 {
label = "IF [B:3:0x0005] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0005|if (r1 == null) goto L3\l}"];
subgraph cluster_Region_1256255347 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0007|java.lang.reflect.Type r1 = java.lang.Object.class\l}"];
}
}
Node_5 [shape=record,label="{5\:\ 0x000b|PHI: r1 \l  PHI: (r1v1 java.lang.reflect.Type) = (r1v0 java.lang.reflect.Type), (r1v3 java.lang.Class) binds: [B:3:0x0005, B:4:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|r0[0] = r1\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|RETURN\l|return r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.reflect.Type[] kotlin.reflect.WildcardTypeImpl.getUpperBounds((r3v0 'this' kotlin.reflect.WildcardTypeImpl A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:3:0x0005 \-\> B:5:0x000b\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [ClspMth\{java.lang.reflect.WildcardType.getUpperBounds():java.lang.reflect.Type[]\}]\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_0 -> Node_2;
}

