digraph "CFG forkotlin.reflect.WildcardTypeImpl.getUpperBounds()[Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:159)\l0x0001: NEW_ARRAY  (r0 I:java.lang.reflect.Type[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.reflect.Type[] \l0x0003: IGET  (r1 I:java.lang.reflect.Type) = (r3 I:kotlin.reflect.WildcardTypeImpl) kotlin.reflect.WildcardTypeImpl.upperBound java.lang.reflect.Type \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0007|0x0007: CONST_CLASS  (r1 I:java.lang.Class\<java.lang.Object\>) =  java.lang.Object.class \l0x0009: CHECK_CAST (r1 I:java.lang.reflect.Type) = (java.lang.reflect.Type) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x000b|0x000b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: APUT  (r0 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.lang.reflect.Type[]) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.reflect.Type[] kotlin.reflect.WildcardTypeImpl.getUpperBounds((r3 'this' I:kotlin.reflect.WildcardTypeImpl A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:3:0x0005 \-\> B:5:0x000b\lMETHOD_OVERRIDE: [ClspMth\{java.lang.reflect.WildcardType.getUpperBounds():java.lang.reflect.Type[]\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

