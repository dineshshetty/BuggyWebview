digraph "CFG forkotlin.reflect.WildcardTypeImpl.getLowerBounds()[Ljava\/lang\/reflect\/Type;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.reflect.Type) = (r3 I:kotlin.reflect.WildcardTypeImpl) kotlin.reflect.WildcardTypeImpl.lowerBound java.lang.reflect.Type  (LINE:162)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: NEW_ARRAY  (r1 I:java.lang.reflect.Type[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.lang.reflect.Type[]  (LINE:230)\l0x0008: CHECK_CAST (r1 I:java.lang.Object[]) = (java.lang.Object[]) (r1 I:??[OBJECT, ARRAY]) \l0x000a: CHECK_CAST (r1 I:java.lang.reflect.Type[]) = (java.lang.reflect.Type[]) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x0013: RETURN  (r1 I:java.lang.reflect.Type[]) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:162)\l0x000e: NEW_ARRAY  (r2 I:java.lang.reflect.Type[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: java.lang.reflect.Type[] \l0x0010: APUT  (r2 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r0 I:??[OBJECT, ARRAY]) \l0x0012: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: RETURN  (r1 I:java.lang.reflect.Type[]) \l}"];
MethodNode[shape=record,label="{public java.lang.reflect.Type[] kotlin.reflect.WildcardTypeImpl.getLowerBounds((r3 'this' I:kotlin.reflect.WildcardTypeImpl A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:5:0x000d \-\> B:6:0x0013\lDebug Info:\l  0x0006\-0x000a: r0 '$i$f$emptyArray' I\lMETHOD_OVERRIDE: [ClspMth\{java.lang.reflect.WildcardType.getLowerBounds():java.lang.reflect.Type[]\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

