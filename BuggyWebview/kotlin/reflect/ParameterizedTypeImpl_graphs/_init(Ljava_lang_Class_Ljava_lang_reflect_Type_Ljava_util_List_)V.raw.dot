digraph "CFG forkotlin.reflect.ParameterizedTypeImpl.\<init\>(Ljava\/lang\/Class;Ljava\/lang\/reflect\/Type;Ljava\/util\/List;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"rawType\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('rawType' java.lang.Class)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"typeArguments\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('typeArguments' java.util.List)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r5 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:183)\l0x000d: IPUT  (r6 I:java.lang.Class\<?\> A[D('rawType' java.lang.Class)]), (r5 I:kotlin.reflect.ParameterizedTypeImpl) kotlin.reflect.ParameterizedTypeImpl.rawType java.lang.Class  (LINE:185)\l0x000f: IPUT  (r7 I:java.lang.reflect.Type A[D('ownerType' java.lang.reflect.Type)]), (r5 I:kotlin.reflect.ParameterizedTypeImpl) kotlin.reflect.ParameterizedTypeImpl.ownerType java.lang.reflect.Type  (LINE:186)\l0x0011: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('typeArguments' java.util.List)])  (LINE:189)\l0x0012: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$toTypedArray$iv' java.util.Collection)])  (LINE:231)\l0x0017: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:233)\l0x0018: NEW_ARRAY  (r3 I:java.lang.reflect.Type[]) = (r3 I:int A[IMMUTABLE_TYPE]) type: java.lang.reflect.Type[] \l0x001a: INVOKE  (r3 I:java.lang.Object[]) = (r2 I:java.util.Collection A[D('thisCollection$iv' java.util.Collection)]), (r3 I:java.lang.Object[]) type: INTERFACE call: java.util.Collection.toArray(java.lang.Object[]):java.lang.Object[] A[MD:\<T\>:(T[]):T[] (c)]\l0x001e: CONST_STR  (r4 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray\>\" \l0x0020: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0023: CHECK_CAST (r3 I:java.lang.reflect.Type[]) = (java.lang.reflect.Type[]) (r3 I:??[OBJECT, ARRAY]) \l0x0025: IPUT  (r3 I:java.lang.reflect.Type[]), (r5 I:kotlin.reflect.ParameterizedTypeImpl) kotlin.reflect.ParameterizedTypeImpl.typeArguments java.lang.reflect.Type[]  (LINE:189)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0027|RETURN\l|0x0027: RETURN    (LINE:184)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.reflect.ParameterizedTypeImpl.\<init\>((r5 'this' I:kotlin.reflect.ParameterizedTypeImpl A[IMMUTABLE_TYPE, THIS]), (r6 I:java.lang.Class\<?\> A[D('rawType' java.lang.Class), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.reflect.Type A[D('ownerType' java.lang.reflect.Type), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.List\<? extends java.lang.reflect.Type\> A[D('typeArguments' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  0x0014\-0x0023: r0 '$this$toTypedArray$iv' Ljava\/util\/Collection;\l  0x0015\-0x0023: r1 '$i$f$toTypedArray' I\l  0x0017\-0x0023: r2 'thisCollection$iv' Ljava\/util\/Collection;\l  \-1 \-0x0027: r6 'rawType' Ljava\/lang\/Class;\l  \-1 \-0x0027: r7 'ownerType' Ljava\/lang\/reflect\/Type;\l  \-1 \-0x0027: r8 'typeArguments' Ljava\/util\/List;\lSIGNATURE: (Ljava\/lang\/Class\<*\>;Ljava\/lang\/reflect\/Type;Ljava\/util\/List\<+Ljava\/lang\/reflect\/Type;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

