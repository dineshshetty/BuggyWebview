digraph "CFG forkotlin.reflect.ParameterizedTypeImpl.equals(Ljava\/lang\/Object;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) java.lang.reflect.ParameterizedType  (LINE:212)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IGET  (r0 I:java.lang.Class\<?\>) = (r2 I:kotlin.reflect.ParameterizedTypeImpl) kotlin.reflect.ParameterizedTypeImpl.rawType java.lang.Class \l0x0006: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0007: CHECK_CAST (r1 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r1 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r1 I:java.lang.reflect.Type) = (r1 I:java.lang.reflect.ParameterizedType) type: INTERFACE call: java.lang.reflect.ParameterizedType.getRawType():java.lang.reflect.Type A[MD:():java.lang.reflect.Type (c)]\l0x000d: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IGET  (r0 I:java.lang.reflect.Type) = (r2 I:kotlin.reflect.ParameterizedTypeImpl) kotlin.reflect.ParameterizedTypeImpl.ownerType java.lang.reflect.Type \l0x0015: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0016: CHECK_CAST (r1 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r1 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r1 I:java.lang.reflect.Type) = (r1 I:java.lang.reflect.ParameterizedType) type: INTERFACE call: java.lang.reflect.ParameterizedType.getOwnerType():java.lang.reflect.Type A[MD:():java.lang.reflect.Type (c)]\l0x001c: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_8 [shape=record,label="{8\:\ 0x0022|0x0022: INVOKE  (r0 I:java.lang.reflect.Type[]) = (r2 I:kotlin.reflect.ParameterizedTypeImpl) type: VIRTUAL call: kotlin.reflect.ParameterizedTypeImpl.getActualTypeArguments():java.lang.reflect.Type[] A[MD:():java.lang.reflect.Type[] (m)] (LINE:213)\l0x0026: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0027: CHECK_CAST (r1 I:java.lang.reflect.ParameterizedType) = (java.lang.reflect.ParameterizedType) (r1 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r1 I:java.lang.reflect.Type[]) = (r1 I:java.lang.reflect.ParameterizedType) type: INTERFACE call: java.lang.reflect.ParameterizedType.getActualTypeArguments():java.lang.reflect.Type[] A[MD:():java.lang.reflect.Type[] (c)]\l0x002d: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object[]), (r1 I:java.lang.Object[]) type: STATIC call: java.util.Arrays.equals(java.lang.Object[], java.lang.Object[]):boolean A[MD:(java.lang.Object[], java.lang.Object[]):boolean (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0035 \l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|SYNTHETIC\lRETURN\l|0x0033: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0036: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0035|RETURN\lORIG_RETURN\l|0x0035: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0036: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.reflect.ParameterizedTypeImpl.equals((r2 'this' I:kotlin.reflect.ParameterizedTypeImpl A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0035 \-\> B:12:0x0036, CROSS_EDGE: B:7:0x0020 \-\> B:11:0x0035, CROSS_EDGE: B:5:0x0011 \-\> B:11:0x0035, CROSS_EDGE: B:3:0x0002 \-\> B:11:0x0035\lDebug Info:\l  \-1 \-0x0036: r3 'other' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_1;
Node_11 -> Node_1;
}

