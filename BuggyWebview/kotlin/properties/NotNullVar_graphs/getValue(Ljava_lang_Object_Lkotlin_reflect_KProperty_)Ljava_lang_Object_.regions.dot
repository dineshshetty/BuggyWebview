digraph "CFG forkotlin.properties.NotNullVar.getValue(Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty;)Ljava\/lang\/Object;" {
subgraph cluster_Region_932293362 {
label = "R(2:1|(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"property\")\lT T r0 = r3.value\l}"];
subgraph cluster_Region_1112456228 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_33553886 {
label = "IF [B:10:0x0007] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0007|if (r0 != null) goto L3\l}"];
subgraph cluster_Region_1270404773 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0009|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_450584399 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000a}"];
Node_13 [shape=record,label="{13\:\ 0x0029|throw new java.lang.IllegalStateException(\"Property \" + r5.getName() + \" should be initialized before get.\")\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public T kotlin.properties.NotNullVar.getValue((r3v0 'this' kotlin.properties.NotNullVar\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'thisRef' java.lang.Object A[D('thisRef' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'property' kotlin.reflect.KProperty\<?\> A[D('property' kotlin.reflect.KProperty), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0029 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty\<*\>;)TT;\lMETHOD_OVERRIDE: [kotlin.properties.ReadOnlyProperty.getValue(T, kotlin.reflect.KProperty\<?\>):V]\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_12[style=dashed];
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

