digraph "CFG forkotlin.properties.NotNullVar.setValue(Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty;Ljava\/lang\/Object;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"property\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('property' kotlin.reflect.KProperty)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"value\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('value' java.lang.Object)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: IPUT  (r4 I:T A[D('value' java.lang.Object)]), (r1 I:kotlin.properties.NotNullVar) kotlin.properties.NotNullVar.value java.lang.Object  (LINE:66)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|0x000c: RETURN    (LINE:67)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.properties.NotNullVar.setValue((r1 'this' I:kotlin.properties.NotNullVar\<T\> A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[D('thisRef' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.reflect.KProperty\<?\> A[D('property' kotlin.reflect.KProperty), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:T A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r2 'thisRef' Ljava\/lang\/Object;\l  \-1 \-0x000c: r3 'property' Lkotlin\/reflect\/KProperty;\l  \-1 \-0x000c: r4 'value' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: (Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty\<*\>;TT;)V\lMETHOD_OVERRIDE: [kotlin.properties.ReadWriteProperty.setValue(T, kotlin.reflect.KProperty\<?\>, V):void]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

