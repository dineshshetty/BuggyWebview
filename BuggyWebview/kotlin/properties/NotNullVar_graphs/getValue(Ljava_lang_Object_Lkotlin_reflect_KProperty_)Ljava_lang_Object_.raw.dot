digraph "CFG forkotlin.properties.NotNullVar.getValue(Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty;)Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"property\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('property' kotlin.reflect.KProperty)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:T) = (r3 I:kotlin.properties.NotNullVar) kotlin.properties.NotNullVar.value java.lang.Object  (LINE:62)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|RETURN\l|0x0009: RETURN  (r0 I:T) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException \l0x000c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000e: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0011: CONST_STR  (r2 I:java.lang.String) =  \"Property \" \l0x0013: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0016: INVOKE  (r2 I:java.lang.String) = (r5 I:kotlin.reflect.KProperty A[D('property' kotlin.reflect.KProperty)]) type: INTERFACE call: kotlin.reflect.KProperty.getName():java.lang.String A[MD:():java.lang.String (m)]\l0x001a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001d: CONST_STR  (r2 I:java.lang.String) =  \" should be initialized before get.\" \l0x001f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0022: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0026: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0029|0x0029: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.properties.NotNullVar.getValue((r3 'this' I:kotlin.properties.NotNullVar\<T\> A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object A[D('thisRef' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.reflect.KProperty\<?\> A[D('property' kotlin.reflect.KProperty), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0029 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty\<*\>;)TT;\lDebug Info:\l  \-1 \-0x0029: r4 'thisRef' Ljava\/lang\/Object;\l  \-1 \-0x0029: r5 'property' Lkotlin\/reflect\/KProperty;\lMETHOD_OVERRIDE: [kotlin.properties.ReadOnlyProperty.getValue(T, kotlin.reflect.KProperty\<?\>):V]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

