digraph "CFG forkotlin.properties.ObservableProperty.setValue(Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty;Ljava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"property\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('property' kotlin.reflect.KProperty)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:V) = (r2 I:kotlin.properties.ObservableProperty) kotlin.properties.ObservableProperty.value java.lang.Object  (LINE:36)\l0x0007: INVOKE  (r1 I:boolean) = \l  (r2 I:kotlin.properties.ObservableProperty)\l  (r4 I:kotlin.reflect.KProperty A[D('property' kotlin.reflect.KProperty)])\l  (r0 I:java.lang.Object A[D('oldValue' java.lang.Object)])\l  (r5 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: kotlin.properties.ObservableProperty.beforeChange(kotlin.reflect.KProperty, java.lang.Object, java.lang.Object):boolean A[MD:(kotlin.reflect.KProperty\<?\>, V, V):boolean (m)] (LINE:37)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|RETURN\l|0x000d: RETURN    (LINE:38)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|0x000e: IPUT  (r5 I:V A[D('value' java.lang.Object)]), (r2 I:kotlin.properties.ObservableProperty) kotlin.properties.ObservableProperty.value java.lang.Object  (LINE:40)\l0x0010: INVOKE  \l  (r2 I:kotlin.properties.ObservableProperty)\l  (r4 I:kotlin.reflect.KProperty A[D('property' kotlin.reflect.KProperty)])\l  (r0 I:java.lang.Object A[D('oldValue' java.lang.Object)])\l  (r5 I:java.lang.Object A[D('value' java.lang.Object)])\l type: VIRTUAL call: kotlin.properties.ObservableProperty.afterChange(kotlin.reflect.KProperty, java.lang.Object, java.lang.Object):void A[MD:(kotlin.reflect.KProperty\<?\>, V, V):void (m)] (LINE:41)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|RETURN\l|0x0013: RETURN    (LINE:42)\l}"];
MethodNode[shape=record,label="{public void kotlin.properties.ObservableProperty.setValue((r2 'this' I:kotlin.properties.ObservableProperty\<V\> A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('thisRef' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.reflect.KProperty\<?\> A[D('property' kotlin.reflect.KProperty), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:V A[D('value' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0013 \-\> B:1:?\lDebug Info:\l  0x0007\-0x0013: r0 'oldValue' Ljava\/lang\/Object;\l  \-1 \-0x0013: r3 'thisRef' Ljava\/lang\/Object;\l  \-1 \-0x0013: r4 'property' Lkotlin\/reflect\/KProperty;\l  \-1 \-0x0013: r5 'value' Ljava\/lang\/Object;\lTYPE_VARS: [V]\lSIGNATURE: (Ljava\/lang\/Object;Lkotlin\/reflect\/KProperty\<*\>;TV;)V\lMETHOD_OVERRIDE: [kotlin.properties.ReadWriteProperty.setValue(T, kotlin.reflect.KProperty\<?\>, V):void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

