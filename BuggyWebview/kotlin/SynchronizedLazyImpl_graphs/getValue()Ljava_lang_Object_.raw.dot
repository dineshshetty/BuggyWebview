digraph "CFG forkotlin.SynchronizedLazyImpl.getValue()Ljava\/lang\/Object;" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.Object) = (r6 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl._value java.lang.Object  (LINE:63)\l0x0002: SGET  (r1 I:kotlin.UNINITIALIZED_VALUE) =  kotlin.UNINITIALIZED_VALUE.INSTANCE kotlin.UNINITIALIZED_VALUE  (LINE:64)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('_v1' java.lang.Object)]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0007 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:T A[D('_v1' java.lang.Object)])  (LINE:66)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0007|0x0007: IGET  (r1 I:java.lang.Object) = (r6 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl.lock java.lang.Object  (LINE:69)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|0x0009: MONITOR_ENTER  (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|0x000a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x000b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_28 [shape=record,label="{28\:\ 0x000b|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0025, blocks: (B:28:0x000b, B:31:0x0013), top: B:38:0x000b \}\lCatch: all \-\> 0x0025\l|0x000b: IGET  (r3 I:java.lang.Object) = (r6 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl._value java.lang.Object A[Catch: all \-\> 0x0025, TRY_ENTER] (LINE:70)\l0x000d: SGET  (r4 I:kotlin.UNINITIALIZED_VALUE) =  kotlin.UNINITIALIZED_VALUE.INSTANCE kotlin.UNINITIALIZED_VALUE A[Catch: all \-\> 0x0025] (LINE:71)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|0x000f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('_v2' java.lang.Object)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0013 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('_v2' java.lang.Object)])  (LINE:72)\l0x0012: GOTO  \-\> 0x0022 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0023|0x0023: MONITOR_EXIT  (r1 I:??[OBJECT, ARRAY])  (LINE:69)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|RETURN\l|0x0024: RETURN  (r4 I:T) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0013|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0025, blocks: (B:28:0x000b, B:31:0x0013), top: B:38:0x000b \}\lCatch: all \-\> 0x0025\l|0x0013: IGET  (r4 I:kotlin.jvm.functions.Function0\<? extends T\>) = (r6 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl.initializer kotlin.jvm.functions.Function0 A[Catch: all \-\> 0x0025] (LINE:74)\l0x0015: INVOKE  (r4 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[Catch: all \-\> 0x0025, MD:(java.lang.Object):void (m)]\l0x0018: INVOKE  (r4 I:java.lang.Object) = (r4 I:kotlin.jvm.functions.Function0) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[Catch: all \-\> 0x0025, MD:():R (m)]\l0x001c: IPUT  (r4 I:java.lang.Object A[D('typedValue' java.lang.Object)]), (r6 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl._value java.lang.Object A[Catch: all \-\> 0x0025] (LINE:75)\l0x001e: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:76)\l0x001f: IPUT  (r5 I:kotlin.jvm.functions.Function0\<? extends T\>), (r6 I:kotlin.SynchronizedLazyImpl) kotlin.SynchronizedLazyImpl.initializer kotlin.jvm.functions.Function0 A[Catch: all \-\> 0x0025, TRY_LEAVE]\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_35 [shape=record,label="{35\:\ 0x0025|ExcHandler: all \-\> 0x0025\l|0x0025: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0025]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0027|0x0027: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.SynchronizedLazyImpl.getValue((r6 'this' I:kotlin.SynchronizedLazyImpl\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x0024 \-\> B:21:?, CROSS_EDGE: B:31:0x0013 \-\> B:33:0x0023, CROSS_EDGE: B:37:0x0027 \-\> B:21:?, CROSS_EDGE: B:38:0x000b \-\> B:35:0x0025\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0025, blocks: (B:28:0x000b, B:31:0x0013), top: B:38:0x000b \}\lTYPE_VARS: [T]\lSIGNATURE: ()TT;\lDebug Info:\l  0x001c\-0x0022: r4 'typedValue' Ljava\/lang\/Object;\l  0x000b\-0x0023: r2 '$i$a$\-synchronized\-SynchronizedLazyImpl$value$1' I\l  0x000d\-0x0023: r3 '_v2' Ljava\/lang\/Object;\l  0x0002\-0x0027: r0 '_v1' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlin.Lazy.getValue():T]\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_21;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_38;
Node_38 -> Node_28;
Node_38 -> Node_35;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_21;
Node_31 -> Node_33;
Node_31 -> Node_39;
Node_39 -> Node_35;
Node_35 -> Node_37;
Node_37 -> Node_21;
}

