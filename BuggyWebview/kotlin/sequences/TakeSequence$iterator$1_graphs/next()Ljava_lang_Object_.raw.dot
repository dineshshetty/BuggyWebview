digraph "CFG forkotlin.sequences.TakeSequence$iterator$1.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r1 I:kotlin.sequences.TakeSequence$iterator$1) kotlin.sequences.TakeSequence$iterator$1.left int  (LINE:414)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int)  (LINE:416)\l0x0006: IPUT  (r0 I:int), (r1 I:kotlin.sequences.TakeSequence$iterator$1) kotlin.sequences.TakeSequence$iterator$1.left int \l0x0008: IGET  (r0 I:java.util.Iterator\<T\>) = (r1 I:kotlin.sequences.TakeSequence$iterator$1) kotlin.sequences.TakeSequence$iterator$1.iterator java.util.Iterator  (LINE:417)\l0x000a: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:T) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException  (LINE:415)\l0x0011: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.sequences.TakeSequence$iterator$1.next((r1 'this' I:kotlin.sequences.TakeSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x0014 \-\> B:1:?\lTYPE_VARS: EMPTY\lSIGNATURE: ()TT;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.next():E\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

