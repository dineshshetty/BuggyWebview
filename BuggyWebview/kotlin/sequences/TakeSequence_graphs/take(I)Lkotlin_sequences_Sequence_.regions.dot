digraph "CFG forkotlin.sequences.TakeSequence.take(I)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_178282834 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0002|RETURN\l|return r3 \>= r2.count ? r2 : new kotlin.sequences.TakeSequence(r2.sequence, r3)\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0004}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0008}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0011|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.TakeSequence.take((r2v0 'this' kotlin.sequences.TakeSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:14:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)Lkotlin\/sequences\/Sequence\<TT;\>;\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.take(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

