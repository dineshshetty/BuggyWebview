digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.generateSequence(Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"nextFunction\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('nextFunction' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('seed' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000c  (LINE:659)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: SGET  (r0 I:kotlin.sequences.EmptySequence) =  kotlin.sequences.EmptySequence.INSTANCE kotlin.sequences.EmptySequence  (LINE:660)\l0x0009: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:kotlin.sequences.GeneratorSequence) =  kotlin.sequences.GeneratorSequence  (LINE:662)\l0x000e: NEW_INSTANCE  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2) =  kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2 \l0x0010: INVOKE  \l  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2)\l  (r2 I:java.lang.Object A[D('seed' java.lang.Object)])\l type: DIRECT call: kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2.\<init\>(java.lang.Object):void A[MD:(T):void (m)]\l0x0013: CHECK_CAST (r1 I:kotlin.jvm.functions.Function0) = (kotlin.jvm.functions.Function0) (r1 I:??[OBJECT, ARRAY]) \l0x0015: INVOKE  \l  (r0 I:kotlin.sequences.GeneratorSequence)\l  (r1 I:kotlin.jvm.functions.Function0)\l  (r3 I:kotlin.jvm.functions.Function1 A[D('nextFunction' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlin.sequences.GeneratorSequence.\<init\>(kotlin.jvm.functions.Function0, kotlin.jvm.functions.Function1):void A[MD:(kotlin.jvm.functions.Function0\<? extends T\>, kotlin.jvm.functions.Function1\<? super T, ? extends T\>):void (m)]\l0x0018: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt__SequencesKt.generateSequence((r2 I:T A[D('seed' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, ? extends T\> A[D('nextFunction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:14:0x001a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001a: r2 'seed' Ljava\/lang\/Object;\l  \-1 \-0x001a: r3 'nextFunction' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TT;\>;)Lkotlin\/sequences\/Sequence\<TT;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

