digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.generateSequence(Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_346112566 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"nextFunction\")\l}"];
subgraph cluster_Region_1237333801 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1368456106 {
label = "IF [B:11:0x0005] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0005|if (r2 == null) goto L3\l}"];
subgraph cluster_Region_838198827 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.sequences.EmptySequence.INSTANCE\l}"];
}
}
subgraph cluster_Region_794534609 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x001a|RETURN\lORIG_RETURN\l|return new kotlin.sequences.GeneratorSequence(new kotlin.sequences.SequencesKt__SequencesKt$generateSequence$2(r2), r3)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0007}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000c}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt__SequencesKt.generateSequence((r2v0 T A[D('seed' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'nextFunction' kotlin.jvm.functions.Function1\<? super T, ? extends T\> A[D('nextFunction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:14:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TT;\>;)Lkotlin\/sequences\/Sequence\<TT;\>;\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_15 -> Node_9;
Node_14 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_15;
Node_13 -> Node_14;
}

