digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.sequenceOf([Ljava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('elements' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r1 I:??[] A[D('elements' java.lang.Object[])])  (LINE:37)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x000a \l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0012 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: INVOKE  (r0 I:kotlin.sequences.Sequence) =  type: STATIC call: kotlin.sequences.SequencesKt.emptySequence():kotlin.sequences.Sequence A[MD:\<T\>:():kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x0016: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) A[SYNTHETIC]\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r1 I:java.lang.Object[] A[D('elements' java.lang.Object[])]) type: STATIC call: kotlin.collections.ArraysKt.asSequence(java.lang.Object[]):kotlin.sequences.Sequence A[MD:\<T\>:(T[]):kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|RETURN\lORIG_RETURN\l|0x0016: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) \l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt__SequencesKt.sequenceOf((r1 I:T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0012 \-\> B:20:0x0016, CROSS_EDGE: B:16:0x000a \-\> B:17:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0016: r1 'elements' [Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;)Lkotlin\/sequences\/Sequence\<TT;\>;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
Node_16 -> Node_17;
}

