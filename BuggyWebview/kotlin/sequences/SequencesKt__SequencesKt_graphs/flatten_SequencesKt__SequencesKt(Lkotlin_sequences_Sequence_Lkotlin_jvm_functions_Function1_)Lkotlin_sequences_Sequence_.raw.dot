digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.flatten$SequencesKt__SequencesKt(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$flatten' kotlin.sequences.Sequence)]) kotlin.sequences.TransformingSequence  (LINE:95)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$flatten' kotlin.sequences.Sequence)])  (LINE:96)\l0x0005: CHECK_CAST (r0 I:kotlin.sequences.TransformingSequence) = (kotlin.sequences.TransformingSequence) (r0 I:??[OBJECT, ARRAY]) \l0x0007: INVOKE  (r0 I:kotlin.sequences.Sequence) = \l  (r0 I:kotlin.sequences.TransformingSequence)\l  (r3 I:kotlin.jvm.functions.Function1 A[D('iterator' kotlin.jvm.functions.Function1)])\l type: VIRTUAL call: kotlin.sequences.TransformingSequence.flatten$kotlin_stdlib(kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:\<E\>:(kotlin.jvm.functions.Function1\<? super R, ? extends java.util.Iterator\<? extends E\>\>):kotlin.sequences.Sequence\<E\> (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:kotlin.sequences.Sequence\<R\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:kotlin.sequences.FlatteningSequence) =  kotlin.sequences.FlatteningSequence  (LINE:98)\l0x000e: SGET  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$flatten$3) =  kotlin.sequences.SequencesKt__SequencesKt$flatten$3.INSTANCE kotlin.sequences.SequencesKt__SequencesKt$flatten$3 \l0x0010: CHECK_CAST (r1 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r1 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  \l  (r0 I:kotlin.sequences.FlatteningSequence)\l  (r2 I:kotlin.sequences.Sequence A[D('$this$flatten' kotlin.sequences.Sequence)])\l  (r1 I:kotlin.jvm.functions.Function1)\l  (r3 I:kotlin.jvm.functions.Function1 A[D('iterator' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlin.sequences.FlatteningSequence.\<init\>(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, kotlin.jvm.functions.Function1\<? super T, ? extends R\>, kotlin.jvm.functions.Function1\<? super R, ? extends java.util.Iterator\<? extends E\>\>):void (m)]\l0x0015: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|RETURN\l|0x0017: RETURN  (r0 I:kotlin.sequences.Sequence\<R\>) \l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<R\> kotlin.sequences.SequencesKt__SequencesKt.flatten$SequencesKt__SequencesKt((r2 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$flatten' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.util.Iterator\<? extends R\>\> A[D('iterator' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0017 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0017: r2 '$this$flatten' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0017: r3 'iterator' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/util\/Iterator\<+TR;\>;\>;)Lkotlin\/sequences\/Sequence\<TR;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

