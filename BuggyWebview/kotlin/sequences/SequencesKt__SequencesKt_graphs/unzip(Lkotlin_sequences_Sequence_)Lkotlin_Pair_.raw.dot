digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.unzip(Lkotlin\/sequences\/Sequence;)Lkotlin\/Pair;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$unzip' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:111)\l0x0007: INVOKE  (r0 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x000a: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:112)\l0x000c: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x000f: INVOKE  (r2 I:java.util.Iterator) = (r5 I:kotlin.sequences.Sequence A[D('$this$unzip' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:113)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|LOOP_START\lLOOP:0: B:12:0x0013\-\>B:14:0x0019\l|0x0013: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x002e \l}"];
Node_14 [shape=record,label="{14\:\ 0x0019|LOOP_END\lLOOP:0: B:12:0x0013\-\>B:14:0x0019\l|0x0019: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001d: CHECK_CAST (r3 I:kotlin.Pair) = (kotlin.Pair) (r3 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r4 I:java.lang.Object) = (r3 I:kotlin.Pair A[D('pair' kotlin.Pair)]) type: VIRTUAL call: kotlin.Pair.getFirst():java.lang.Object A[MD:():A (m)] (LINE:114)\l0x0023: INVOKE  (r0 I:java.util.ArrayList A[D('listT' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0026: INVOKE  (r4 I:java.lang.Object) = (r3 I:kotlin.Pair A[D('pair' kotlin.Pair)]) type: VIRTUAL call: kotlin.Pair.getSecond():java.lang.Object A[MD:():B (m)] (LINE:115)\l0x002a: INVOKE  (r1 I:java.util.ArrayList A[D('listR' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x002e|0x002e: INVOKE  (r2 I:kotlin.Pair) = (r0 I:java.lang.Object A[D('listT' java.util.ArrayList)]), (r1 I:java.lang.Object A[D('listR' java.util.ArrayList)]) type: STATIC call: kotlin.TuplesKt.to(java.lang.Object, java.lang.Object):kotlin.Pair A[MD:\<A, B\>:(A, B):kotlin.Pair\<A, B\> (m)] (LINE:117)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0032|RETURN\l|0x0032: RETURN  (r2 I:kotlin.Pair\<java.util.List\<T\>, java.util.List\<R\>\>) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.util.List\<T\>, java.util.List\<R\>\> kotlin.sequences.SequencesKt__SequencesKt.unzip((r5 I:kotlin.sequences.Sequence\<? extends kotlin.Pair\<? extends T, ? extends R\>\> A[D('$this$unzip' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0019 \-\> B:12:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x002e: r3 'pair' Lkotlin\/Pair;\l  0x000a\-0x0032: r0 'listT' Ljava\/util\/ArrayList;\l  0x000f\-0x0032: r1 'listR' Ljava\/util\/ArrayList;\l  \-1 \-0x0032: r5 '$this$unzip' Lkotlin\/sequences\/Sequence;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+Lkotlin\/Pair\<+TT;+TR;\>;\>;)Lkotlin\/Pair\<Ljava\/util\/List\<TT;\>;Ljava\/util\/List\<TR;\>;\>;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

