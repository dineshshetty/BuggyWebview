digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt.orEmpty(Lkotlin\/sequences\/Sequence;)Lkotlin\/sequences\/Sequence;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$orEmpty' kotlin.sequences.Sequence)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0007  (LINE:56)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: INVOKE  (r0 I:kotlin.sequences.Sequence) =  type: STATIC call: kotlin.sequences.SequencesKt.emptySequence():kotlin.sequences.Sequence A[MD:\<T\>:():kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0008: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) A[SYNTHETIC]\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$orEmpty' kotlin.sequences.Sequence)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|RETURN\lORIG_RETURN\l|0x0008: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) \l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt__SequencesKt.orEmpty((r1 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$orEmpty' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0007 \-\> B:12:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0008: r1 '$this$orEmpty' Lkotlin\/sequences\/Sequence;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;)Lkotlin\/sequences\/Sequence\<TT;\>;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_8;
}

