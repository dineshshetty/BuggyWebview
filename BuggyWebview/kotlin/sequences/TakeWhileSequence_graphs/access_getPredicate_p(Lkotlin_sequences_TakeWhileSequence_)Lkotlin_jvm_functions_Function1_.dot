digraph "CFG forkotlin.sequences.TakeWhileSequence.access$getPredicate$p(Lkotlin\/sequences\/TakeWhileSequence;)Lkotlin\/jvm\/functions\/Function1;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000}"];
Node_7 [shape=record,label="{7\:\ 0x0002|RETURN\l|return r1.predicate\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ kotlin.jvm.functions.Function1 kotlin.sequences.TakeWhileSequence.access$getPredicate$p((r1v0 '$this' kotlin.sequences.TakeWhileSequence A[D('$this' kotlin.sequences.TakeWhileSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE: 0x0000: IGET  (r1 I:kotlin.sequences.TakeWhileSequence A[D('$this' kotlin.sequences.TakeWhileSequence)]) kotlin.sequences.TakeWhileSequence.predicate kotlin.jvm.functions.Function1\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

