digraph "CFG forkotlin.sequences.TakeWhileSequence.iterator()Ljava\/util\/Iterator;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.sequences.TakeWhileSequence$iterator$1) =  kotlin.sequences.TakeWhileSequence$iterator$1  (LINE:435)\l0x0002: INVOKE  (r0 I:kotlin.sequences.TakeWhileSequence$iterator$1), (r1 I:kotlin.sequences.TakeWhileSequence) type: DIRECT call: kotlin.sequences.TakeWhileSequence$iterator$1.\<init\>(kotlin.sequences.TakeWhileSequence):void A[MD:(kotlin.sequences.TakeWhileSequence\<T\>):void (m)]\l0x0005: CHECK_CAST (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:java.util.Iterator\<T\>)  (LINE:471)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.Iterator\<T\> kotlin.sequences.TakeWhileSequence.iterator((r1 'this' I:kotlin.sequences.TakeWhileSequence\<T\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: ()Ljava\/util\/Iterator\<TT;\>;\lMETHOD_OVERRIDE: [kotlin.sequences.Sequence.iterator():java.util.Iterator\<T\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

