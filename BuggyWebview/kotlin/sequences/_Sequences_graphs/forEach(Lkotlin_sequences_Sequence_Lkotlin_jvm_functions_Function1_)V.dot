digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.forEach(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"action\")\ljava.util.Iterator r1 = r3.iterator()\l}"];
Node_11 [shape=record,label="{11\:\ 0x000f|LOOP_START\lLOOP:0: B:11:0x000f\-\>B:13:0x0015\l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|if (r1.hasNext() == false) goto L5\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|LOOP_END\lLOOP:0: B:11:0x000f\-\>B:13:0x0015\l|java.lang.Object r2 = (T) r1.next()\lr4.invoke(r2)\l}"];
Node_15 [shape=record,label="{15\:\ 0x001d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x001d|RETURN\l|return\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void kotlin.sequences.SequencesKt___SequencesKt.forEach((r3v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$forEach' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'action' kotlin.jvm.functions.Function1\<? super T, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0015 \-\> B:11:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Lkotlin\/Unit;\>;)V\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r2v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

