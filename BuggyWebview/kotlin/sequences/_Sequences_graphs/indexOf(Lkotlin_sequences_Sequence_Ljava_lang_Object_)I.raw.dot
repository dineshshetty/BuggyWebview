digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.indexOf(Lkotlin\/sequences\/Sequence;Ljava\/lang\/Object;)I" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$indexOf' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:189)\l0x0006: INVOKE  (r1 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$indexOf' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:190)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|LOOP_START\lLOOP:0: B:19:0x000a\-\>B:27:0x0020\l|0x000a: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0024 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|0x0010: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|0x0014: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:24:0x0019  (LINE:191)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|0x0016: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: INVOKE  (r3 I:boolean) = (r5 I:java.lang.Object A[D('element' java.lang.Object)]), (r2 I:java.lang.Object A[D('item' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:192)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|0x001d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0020 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|LOOP_END\lLOOP:0: B:19:0x000a\-\>B:27:0x0020\l|0x0021: ARITH  (r0 I:int) = (r0 I:int A[D('index' int)]) + (1 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x001f|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|RETURN\l|0x001f: RETURN  (r0 I:int A[D('index' int)])  (LINE:193)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|RETURN\l|0x0024: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:196)\l0x0025: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.sequences.SequencesKt___SequencesKt.indexOf((r4 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$indexOf' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:T A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0020 \-\> B:19:0x000a, CROSS_EDGE: B:22:0x0014 \-\> B:24:0x0019, CROSS_EDGE: B:29:0x0025 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x0021: r2 'item' Ljava\/lang\/Object;\l  0x0006\-0x0025: r0 'index' I\l  \-1 \-0x0025: r4 '$this$indexOf' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0025: r5 'element' Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TT;)I\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_30[style=dashed];
Node_27 -> Node_19;
Node_30 -> Node_26;
Node_26 -> Node_17;
Node_31 -> Node_28;
Node_28 -> Node_17;
}

