digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.firstNotNullOfOrNull(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$firstNotNullOfOrNull' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r3 I:kotlin.sequences.Sequence A[D('$this$firstNotNullOfOrNull' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:152)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|LOOP_START\lLOOP:0: B:15:0x000e\-\>B:18:0x001c\l|0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001f \l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0018: INVOKE  (r2 I:java.lang.Object) = \l  (r4 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r1 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:153)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|LOOP_END\lLOOP:0: B:15:0x000e\-\>B:18:0x001c\l|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000e  (LINE:154)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|RETURN\l|0x001e: RETURN  (r2 I:R A[D('result' java.lang.Object)])  (LINE:155)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|RETURN\l|0x001f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:158)\l0x0020: RETURN  (r0 I:R) \l}"];
MethodNode[shape=record,label="{private static final R kotlin.sequences.SequencesKt___SequencesKt.firstNotNullOfOrNull((r3 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$firstNotNullOfOrNull' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x001c \-\> B:15:0x000e, CROSS_EDGE: B:21:0x0020 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x001f: r1 'element' Ljava\/lang\/Object;\l  0x001c\-0x001f: r2 'result' Ljava\/lang\/Object;\l  \-1 \-0x0020: r3 '$this$firstNotNullOfOrNull' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0020: r4 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TR;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_15;
Node_18 -> Node_23[style=dashed];
Node_23 -> Node_19;
Node_19 -> Node_13;
Node_22 -> Node_20;
Node_20 -> Node_13;
}

