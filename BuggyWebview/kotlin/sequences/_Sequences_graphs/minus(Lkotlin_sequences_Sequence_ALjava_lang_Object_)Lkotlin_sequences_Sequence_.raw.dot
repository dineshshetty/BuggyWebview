digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.minus(Lkotlin\/sequences\/Sequence;[Ljava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$minus' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0007: INVOKE  (r2 I:java.lang.Object A[D('elements' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: ARRAY_LENGTH  (r0 I:int) = (r2 I:??[] A[D('elements' java.lang.Object[])])  (LINE:2621)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000f \l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0013 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|RETURN\l|0x0012: RETURN  (r1 I:kotlin.sequences.Sequence\<T\> A[D('$this$minus' kotlin.sequences.Sequence)]) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: NEW_INSTANCE  (r0 I:kotlin.sequences.SequencesKt___SequencesKt$minus$2) =  kotlin.sequences.SequencesKt___SequencesKt$minus$2  (LINE:2622)\l0x0015: INVOKE  \l  (r0 I:kotlin.sequences.SequencesKt___SequencesKt$minus$2)\l  (r2 I:java.lang.Object[] A[D('elements' java.lang.Object[])])\l  (r1 I:kotlin.sequences.Sequence A[D('$this$minus' kotlin.sequences.Sequence)])\l type: DIRECT call: kotlin.sequences.SequencesKt___SequencesKt$minus$2.\<init\>(java.lang.Object[], kotlin.sequences.Sequence):void A[MD:(T[], kotlin.sequences.Sequence\<? extends T\>):void (m)]\l0x0018: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|RETURN\l|0x001a: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt___SequencesKt.minus((r1 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$minus' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001a \-\> B:11:?, CROSS_EDGE: B:15:0x000f \-\> B:16:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001a: r1 '$this$minus' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x001a: r2 'elements' [Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;[TT;)Lkotlin\/sequences\/Sequence\<TT;\>;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

