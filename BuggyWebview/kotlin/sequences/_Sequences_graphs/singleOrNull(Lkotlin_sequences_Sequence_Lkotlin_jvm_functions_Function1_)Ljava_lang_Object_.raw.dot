digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.singleOrNull(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$singleOrNull' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:381)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:382)\l0x000d: INVOKE  (r3 I:java.util.Iterator) = (r7 I:kotlin.sequences.Sequence A[D('$this$singleOrNull' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:383)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|LOOP_START\lLOOP:0: B:22:0x0011\-\>B:35:0x0011\l|0x0011: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l0x0015: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002e \l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|0x0018: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001c: INVOKE  (r6 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:384)\l0x0020: CHECK_CAST (r6 I:java.lang.Boolean) = (java.lang.Boolean) (r6 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r6 I:boolean) = (r6 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0026|0x0026: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0011 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0028|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x002b  (LINE:385)\l}"];
Node_28 [shape=record,label="{28\:\ 0x002b|0x002b: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('single' java.lang.Object)]) = (r4 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)])  (LINE:386)\l0x002c: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('found' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:387)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0011|LOOP_END\lSYNTHETIC\lLOOP:0: B:22:0x0011\-\>B:35:0x0011\l}"];
Node_34 [shape=record,label="{34\:\ 0x002a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|RETURN\l|0x002a: RETURN  (r5 I:T) \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0011|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x002e|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x002e|0x002e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0031  (LINE:390)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0030|RETURN\l|0x0030: RETURN  (r5 I:T) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0031|RETURN\l|0x0031: RETURN  (r1 I:T A[D('single' java.lang.Object)])  (LINE:391)\l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.singleOrNull((r7 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$singleOrNull' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x0026 \-\> B:22:0x0011, BACK_EDGE: B:28:0x002b \-\> B:22:0x0011, CROSS_EDGE: B:30:0x0030 \-\> B:20:?, CROSS_EDGE: B:31:0x0031 \-\> B:20:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x002d: r4 'element' Ljava\/lang\/Object;\l  0x000b\-0x0031: r0 '$i$f$singleOrNull' I\l  0x000c\-0x0031: r1 'single' Ljava\/lang\/Object;\l  0x000d\-0x0031: r2 'found' Z\l  \-1 \-0x0031: r7 '$this$singleOrNull' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0031: r8 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_33;
Node_24 -> Node_25;
Node_25 -> Node_32[style=dashed];
Node_25 -> Node_36;
Node_32 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_34[style=dashed];
Node_28 -> Node_37;
Node_37 -> Node_35;
Node_35 -> Node_22;
Node_34 -> Node_27;
Node_27 -> Node_20;
Node_36 -> Node_35;
Node_33 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_20;
Node_31 -> Node_20;
}

