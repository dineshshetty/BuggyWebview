digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.filterNotNullTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;)Ljava\/util\/Collection;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"destination\")\ljava.util.Iterator r0 = r2.iterator()\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|LOOP_START\lLOOP:0: B:17:0x000e\-\>B:25:0x000e\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|if (r0.hasNext() == false) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|java.lang.Object r1 = r0.next()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|if (r1 == null) goto L10\l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|r3.add(r1)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|LOOP_END\lSYNTHETIC\lLOOP:0: B:17:0x000e\-\>B:25:0x000e\l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\l|return r3\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super T\> kotlin.sequences.SequencesKt___SequencesKt.filterNotNullTo((r2v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$filterNotNullTo' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'destination' C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0018 \-\> B:17:0x000e, BACK_EDGE: B:21:0x001a \-\> B:17:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [C extends java.util.Collection\<? super T\>, T]\lSIGNATURE: \<C::Ljava\/util\/Collection\<\-TT;\>;T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TC;)TC;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_24[style=dashed];
Node_20 -> Node_26;
Node_24 -> Node_21;
Node_21 -> Node_27;
Node_27 -> Node_25;
Node_25 -> Node_17;
Node_26 -> Node_25;
Node_23 -> Node_22;
Node_22 -> Node_15;
}

