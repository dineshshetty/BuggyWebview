digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.flatMapIndexedSequenceTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/Collection;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$flatMapIndexedTo' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"destination\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('destination' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x000c: INVOKE  (r6 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:921)\l0x0010: INVOKE  (r1 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$flatMapIndexedTo' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:922)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0014|LOOP_START\lLOOP:0: B:16:0x0014\-\>B:21:0x0025\l|0x0014: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|0x0018: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0034 \l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|0x001a: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001e: ARITH  (r3 I:int) = (r0 I:int A[D('index' int)]) + (1 int)  (LINE:923)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|0x0020: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:25:0x0025 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|0x0022: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0025|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|LOOP_END\lLOOP:0: B:16:0x0014\-\>B:21:0x0025\l|0x0025: INVOKE  (r0 I:java.lang.Integer) = (r0 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0029: INVOKE  (r0 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function2 A[D('transform' kotlin.jvm.functions.Function2)])\l  (r0 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x002d: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l0x002f: INVOKE  \l  (r5 I:java.util.Collection A[D('destination' java.util.Collection)])\l  (r0 I:kotlin.sequences.Sequence A[D('list' kotlin.sequences.Sequence)])\l type: STATIC call: kotlin.collections.CollectionsKt.addAll(java.util.Collection, kotlin.sequences.Sequence):boolean A[MD:\<T\>:(java.util.Collection\<? super T\>, kotlin.sequences.Sequence\<? extends T\>):boolean (m)] (LINE:924)\l0x0032: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('list' kotlin.sequences.Sequence)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0034|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0034|RETURN\l|0x0034: RETURN  (r5 I:C extends java.util.Collection\<? super R\> A[D('destination' java.util.Collection)])  (LINE:926)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final C extends java.util.Collection\<? super R\> kotlin.sequences.SequencesKt___SequencesKt.flatMapIndexedSequenceTo((r4 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$flatMapIndexedTo' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:C extends java.util.Collection\<? super R\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super T, ? extends kotlin.sequences.Sequence\<? extends R\>\> A[D('transform' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0025 \-\> B:16:0x0014, CROSS_EDGE: B:19:0x0020 \-\> B:21:0x0025\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0020: r0 'index' I\l  0x001e\-0x0034: r2 'element' Ljava\/lang\/Object;\l  0x0020\-0x0034: r3 'index' I\l  0x002f\-0x0034: r0 'list' Lkotlin\/sequences\/Sequence;\l  0x0034\-0x0034: r0 'index' I\l  \-1 \-0x0034: r4 '$this$flatMapIndexedTo' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0034: r5 'destination' Ljava\/util\/Collection;\l  \-1 \-0x0034: r6 'transform' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [R, C extends java.util.Collection\<? super R\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TR;\>;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TC;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-TT;+Lkotlin\/sequences\/Sequence\<+TR;\>;\>;)TC;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_21 -> Node_16;
Node_25 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

