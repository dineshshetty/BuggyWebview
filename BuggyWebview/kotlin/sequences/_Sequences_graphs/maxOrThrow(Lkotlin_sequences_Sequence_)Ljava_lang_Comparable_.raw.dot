digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.maxOrThrow(Lkotlin\/sequences\/Sequence;)Ljava\/lang\/Comparable;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$max' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$max' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:1363)\l0x0009: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1364)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002a \l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1365)\l0x0013: CHECK_CAST (r1 I:java.lang.Comparable) = (java.lang.Comparable) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|LOOP_START\lLOOP:0: B:23:0x0015\-\>B:33:0x0015\l|0x0015: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1366)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0029 \l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|0x001b: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1367)\l0x001f: CHECK_CAST (r2 I:java.lang.Comparable) = (java.lang.Comparable) (r2 I:??[OBJECT, ARRAY]) \l0x0021: INVOKE  (r3 I:int) = (r1 I:java.lang.Comparable A[D('max' java.lang.Comparable)]), (r2 I:java.lang.Object A[D('e' java.lang.Comparable)]) type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)] (LINE:1368)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0025|0x0025: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:34:0x0015 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0027|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|0x0027: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('max' java.lang.Comparable)]) = (r2 I:??[OBJECT, ARRAY] A[D('e' java.lang.Comparable)]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0015|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|LOOP_END\lSYNTHETIC\lLOOP:0: B:23:0x0015\-\>B:33:0x0015\l}"];
Node_34 [shape=record,label="{34\:\ 0x0015|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0029|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0029|RETURN\l|0x0029: RETURN  (r1 I:T extends java.lang.Comparable\<? super T\> A[D('max' java.lang.Comparable)])  (LINE:1370)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x002a|0x002a: NEW_INSTANCE  (r1 I:java.util.NoSuchElementException A[D('max' java.lang.Comparable)]) =  java.util.NoSuchElementException  (LINE:1364)\l0x002c: INVOKE  (r1 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x002f|0x002f: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T extends java.lang.Comparable\<? super T\> kotlin.sequences.SequencesKt___SequencesKt.maxOrThrow((r4 I:kotlin.sequences.Sequence\<? extends T extends java.lang.Comparable\<? super T\>\> A[D('$this$max' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x0025 \-\> B:23:0x0015, BACK_EDGE: B:27:0x0027 \-\> B:23:0x0015, CROSS_EDGE: B:30:0x002f \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0021\-0x0028: r2 'e' Ljava\/lang\/Comparable;\l  0x0015\-0x002a: r1 'max' Ljava\/lang\/Comparable;\l  0x0009\-0x002f: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x002f: r4 '$this$max' Lkotlin\/sequences\/Sequence;\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\lSIGNATURE: \<T::Ljava\/lang\/Comparable\<\-TT;\>;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;)TT;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_32;
Node_25 -> Node_26;
Node_26 -> Node_31[style=dashed];
Node_26 -> Node_34;
Node_31 -> Node_27;
Node_27 -> Node_35;
Node_35 -> Node_33;
Node_33 -> Node_23;
Node_34 -> Node_33;
Node_32 -> Node_28;
Node_28 -> Node_19;
Node_29 -> Node_30;
Node_30 -> Node_19;
}

