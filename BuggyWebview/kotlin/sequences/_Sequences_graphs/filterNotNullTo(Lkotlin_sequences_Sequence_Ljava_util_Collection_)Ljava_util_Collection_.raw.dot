digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.filterNotNullTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;)Ljava\/util\/Collection;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$filterNotNullTo' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"destination\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('destination' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r2 I:kotlin.sequences.Sequence A[D('$this$filterNotNullTo' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:519)\l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|LOOP_START\lLOOP:0: B:17:0x000e\-\>B:25:0x000e\l|0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x001e \l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|0x0018: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('element' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000e \l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|0x001a: INVOKE  \l  (r3 I:java.util.Collection A[D('destination' java.util.Collection)])\l  (r1 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|LOOP_END\lSYNTHETIC\lLOOP:0: B:17:0x000e\-\>B:25:0x000e\l}"];
Node_26 [shape=record,label="{26\:\ 0x000e|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|RETURN\l|0x001e: RETURN  (r3 I:C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection)])  (LINE:520)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super T\> kotlin.sequences.SequencesKt___SequencesKt.filterNotNullTo((r2 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$filterNotNullTo' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0018 \-\> B:17:0x000e, BACK_EDGE: B:21:0x001a \-\> B:17:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x001e: r1 'element' Ljava\/lang\/Object;\l  \-1 \-0x001e: r2 '$this$filterNotNullTo' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x001e: r3 'destination' Ljava\/util\/Collection;\lTYPE_VARS: [C extends java.util.Collection\<? super T\>, T]\lSIGNATURE: \<C::Ljava\/util\/Collection\<\-TT;\>;T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TC;)TC;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_24[style=dashed];
Node_20 -> Node_26;
Node_24 -> Node_21;
Node_21 -> Node_27;
Node_27 -> Node_25;
Node_25 -> Node_17;
Node_26 -> Node_25;
Node_23 -> Node_22;
Node_22 -> Node_15;
}

