digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.minOrThrow(Lkotlin\/sequences\/Sequence;)F" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\ljava.util.Iterator r0 = r3.iterator()\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|if (r0.hasNext() == false) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|float r1 = r0.next().floatValue()\l}"];
Node_17 [shape=record,label="{17\:\ 0x0019|LOOP_START\lLOOP:0: B:17:0x0019\-\>B:19:0x001f\lPHI: r1 \l  PHI: (r1v5 'min' float) = (r1v4 'min' float), (r1v6 'min' float) binds: [B:16:0x000f, B:19:0x001f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|if (r0.hasNext() == false) goto L7\l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|LOOP_END\lLOOP:0: B:17:0x0019\-\>B:19:0x001f\l|float r2 = r0.next().floatValue()\lfloat r1 = java.lang.Math.min(r1, r2)\l}"];
Node_23 [shape=record,label="{23\:\ 0x002e|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|RETURN\l|return r1\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x002f}"];
Node_22 [shape=record,label="{22\:\ 0x0034|throw new java.util.NoSuchElementException()\l}"];
MethodNode[shape=record,label="{public static final float kotlin.sequences.SequencesKt___SequencesKt.minOrThrow((r3v0 kotlin.sequences.Sequence\<java.lang.Float\> A[D('$this$min' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x001f \-\> B:17:0x0019, CROSS_EDGE: B:22:0x0034 \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<Ljava\/lang\/Float;\>;)F\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_17;
Node_23 -> Node_20;
Node_20 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

