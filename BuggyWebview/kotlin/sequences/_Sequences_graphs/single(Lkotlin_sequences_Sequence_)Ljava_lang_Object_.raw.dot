digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.single(Lkotlin\/sequences\/Sequence;)Ljava\/lang\/Object;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$single' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$single' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:331)\l0x0009: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:332)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0022 \l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:334)\l0x0013: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:335)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x001a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:T A[D('single' java.lang.Object)])  (LINE:337)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x001a|0x001a: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:336)\l0x001c: CONST_STR  (r3 I:java.lang.String) =  \"Sequence has more than one element.\" \l0x001e: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|0x0021: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|0x0022: NEW_INSTANCE  (r1 I:java.util.NoSuchElementException A[D('single' java.lang.Object)]) =  java.util.NoSuchElementException  (LINE:333)\l0x0024: CONST_STR  (r2 I:java.lang.String) =  \"Sequence is empty.\" \l0x0026: INVOKE  (r1 I:java.util.NoSuchElementException), (r2 I:java.lang.String) type: DIRECT call: java.util.NoSuchElementException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0029|0x0029: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.single((r4 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$single' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0021 \-\> B:12:?, CROSS_EDGE: B:21:0x0029 \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0022: r1 'single' Ljava\/lang\/Object;\l  0x0009\-0x0029: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x0029: r4 '$this$single' Lkotlin\/sequences\/Sequence;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;)TT;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

