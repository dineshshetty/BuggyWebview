digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.joinTo(Lkotlin\/sequences\/Sequence;Ljava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Appendable;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$joinTo' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"buffer\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('buffer' java.lang.Appendable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"separator\" \l0x000c: INVOKE  (r6 I:java.lang.Object A[D('separator' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0011: INVOKE  (r7 I:java.lang.Object A[D('prefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"postfix\" \l0x0016: INVOKE  (r8 I:java.lang.Object A[D('postfix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0019: CONST_STR  (r0 I:java.lang.String) =  \"truncated\" \l0x001b: INVOKE  (r10 I:java.lang.Object A[D('truncated' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001e: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r7 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)] (LINE:2881)\l0x0021: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2882)\l0x0022: INVOKE  (r1 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$joinTo' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:2883)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0026|LOOP_START\lLOOP:0: B:25:0x0026\-\>B:34:0x003e\l|0x0026: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x002a|0x002a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0042 \l}"];
Node_27 [shape=record,label="{27\:\ 0x002c|0x002c: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0030: ARITH  (r0 I:int) = (r0 I:int A[D('count' int)]) + (1 int)  (LINE:2884)\l0x0032: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0033|0x0033: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \<= (r3 I:??[int, byte, short, char])  \-\> B:30:0x0038 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0035|0x0035: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r6 I:java.lang.CharSequence A[D('separator' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0038|0x0038: IF  (r9 I:??[int, byte, short, char] A[D('limit' int)]) \< (0 ??[int, byte, short, char])  \-\> B:42:0x003e  (LINE:2885)\l}"];
Node_31 [shape=record,label="{31\:\ 0x003a|0x003a: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \> (r9 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:41:0x0042 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0042|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0042|0x0042: IF  (r9 I:??[int, byte, short, char] A[D('limit' int)]) \< (0 ??[int, byte, short, char])  \-\> B:38:0x0049  (LINE:2889)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0044|0x0044: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \<= (r9 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:38:0x0049 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0046|0x0046: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r10 I:java.lang.CharSequence A[D('truncated' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0049|0x0049: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r8 I:java.lang.CharSequence A[D('postfix' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)] (LINE:2890)\l}"];
Node_39 [shape=record,label="{39\:\ 0x004c|RETURN\l|0x004c: RETURN  (r5 I:A extends java.lang.Appendable A[D('buffer' java.lang.Appendable)])  (LINE:2891)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x003e|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x003e|LOOP_END\lLOOP:0: B:25:0x0026\-\>B:34:0x003e\l|0x003e: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r2 I:java.lang.Object A[D('element' java.lang.Object)])\l  (r11 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l type: STATIC call: kotlin.text.StringsKt.appendElement(java.lang.Appendable, java.lang.Object, kotlin.jvm.functions.Function1):void A[MD:\<T\>:(java.lang.Appendable, T, kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\>):void (m)] (LINE:2886)\l}"];
Node_42 [shape=record,label="{42\:\ 0x003e|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final A extends java.lang.Appendable kotlin.sequences.SequencesKt___SequencesKt.joinTo((r4 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$joinTo' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:A extends java.lang.Appendable A[D('buffer' java.lang.Appendable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[D('separator' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.CharSequence A[D('postfix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.CharSequence A[D('truncated' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x003e \-\> B:25:0x0026, CROSS_EDGE: B:36:0x0044 \-\> B:38:0x0049, CROSS_EDGE: B:35:0x0042 \-\> B:38:0x0049, CROSS_EDGE: B:30:0x0038 \-\> B:34:0x003e, CROSS_EDGE: B:28:0x0033 \-\> B:30:0x0038, CROSS_EDGE: B:26:0x002a \-\> B:35:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0030\-0x0042: r2 'element' Ljava\/lang\/Object;\l  0x0022\-0x004c: r0 'count' I\l  \-1 \-0x004c: r4 '$this$joinTo' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x004c: r5 'buffer' Ljava\/lang\/Appendable;\l  \-1 \-0x004c: r6 'separator' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r7 'prefix' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r8 'postfix' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r9 'limit' I\l  \-1 \-0x004c: r10 'truncated' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r11 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [A extends java.lang.Appendable, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;A::Ljava\/lang\/Appendable;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TA;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/CharSequence;\>;)TA;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_40;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_42;
Node_31 -> Node_41;
Node_31 -> Node_43[style=dashed];
Node_41 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_43 -> Node_34;
Node_34 -> Node_25;
Node_42 -> Node_34;
Node_40 -> Node_35;
}

