digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.maxOrNull(Lkotlin\/sequences\/Sequence;)Ljava\/lang\/Double;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\ljava.util.Iterator r0 = r5.iterator()\l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|if (r0.hasNext() != false) goto L5\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|RETURN\l|return null\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|double r1 = r0.next().doubleValue()\l}"];
Node_20 [shape=record,label="{20\:\ 0x001b|LOOP_START\lLOOP:0: B:20:0x001b\-\>B:22:0x0021\lPHI: r1 \l  PHI: (r1v4 'max' double) = (r1v3 'max' double), (r1v5 'max' double) binds: [B:19:0x0011, B:22:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|if (r0.hasNext() == false) goto L9\l}"];
Node_22 [shape=record,label="{22\:\ 0x0021|LOOP_END\lLOOP:0: B:20:0x001b\-\>B:22:0x0021\l|double r3 = r0.next().doubleValue()\ldouble r1 = java.lang.Math.max(r1, r3)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0030|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0030}"];
Node_24 [shape=record,label="{24\:\ 0x0034|RETURN\l|return java.lang.Double.valueOf(r1)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Double kotlin.sequences.SequencesKt___SequencesKt.maxOrNull((r5v0 kotlin.sequences.Sequence\<java.lang.Double\> A[D('$this$maxOrNull' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x0021 \-\> B:20:0x001b, CROSS_EDGE: B:24:0x0034 \-\> B:14:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<Ljava\/lang\/Double;\>;)Ljava\/lang\/Double;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_20;
Node_25 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_14;
}

