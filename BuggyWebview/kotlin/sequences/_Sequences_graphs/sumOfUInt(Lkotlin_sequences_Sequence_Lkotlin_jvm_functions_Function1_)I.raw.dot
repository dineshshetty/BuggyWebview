digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.sumOfUInt(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)I" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$sumOf' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:2522)\l0x000b: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l0x000f: INVOKE  (r1 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$sumOf' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:2523)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|LOOP_START\lLOOP:0: B:11:0x0013\-\>B:13:0x0019\l|0x0013: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x002d \l}"];
Node_13 [shape=record,label="{13\:\ 0x0019|LOOP_END\lLOOP:0: B:11:0x0013\-\>B:13:0x0019\l|0x0019: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001d: INVOKE  (r3 I:java.lang.Object) = \l  (r5 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)])\l  (r2 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:2524)\l0x0021: CHECK_CAST (r3 I:kotlin.UInt) = (kotlin.UInt) (r3 I:??[OBJECT, ARRAY]) \l0x0023: INVOKE  (r3 I:int) = (r3 I:kotlin.UInt) type: VIRTUAL call: kotlin.UInt.unbox\-impl():int A[MD:():int (m)]\l0x0027: ARITH  (r3 I:int) = (r3 I:int) + (r0 I:int A[D('sum' int)]) \l0x0028: INVOKE  (r0 I:int A[D('sum' int)]) = (r3 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|RETURN\l|0x002d: RETURN  (r0 I:int A[D('sum' int)])  (LINE:2526)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final int kotlin.sequences.SequencesKt___SequencesKt.sumOfUInt((r4 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$sumOf' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super T, kotlin.UInt\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0019 \-\> B:11:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x002c: r2 'element' Ljava\/lang\/Object;\l  0x000f\-0x002d: r0 'sum' I\l  \-1 \-0x002d: r4 '$this$sumOf' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x002d: r5 'selector' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Lkotlin\/UInt;\>;)I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

