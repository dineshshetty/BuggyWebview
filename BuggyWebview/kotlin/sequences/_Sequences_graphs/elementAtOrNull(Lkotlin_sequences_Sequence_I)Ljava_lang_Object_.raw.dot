digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.elementAtOrNull(Lkotlin\/sequences\/Sequence;I)Ljava\/lang\/Object;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$elementAtOrNull' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:66)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|0x0006: IF  (r6 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:20:0x0009 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:T)  (LINE:67)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|0x0009: INVOKE  (r1 I:java.util.Iterator) = (r5 I:kotlin.sequences.Sequence A[D('$this$elementAtOrNull' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:68)\l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:69)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|LOOP_START\lLOOP:0: B:21:0x000e\-\>B:26:0x001d\l|0x000e: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:70)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x001f \l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:71)\l0x0018: ARITH  (r4 I:int) = (r2 I:int A[D('count' int)]) + (1 int)  (LINE:72)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|0x001a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('count' int)])  \-\> B:26:0x001d \l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|LOOP_END\lLOOP:0: B:21:0x000e\-\>B:26:0x001d\l|0x001d: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])  (LINE:72)\l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|RETURN\l|0x001c: RETURN  (r3 I:T A[D('element' java.lang.Object)])  (LINE:73)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001f|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|RETURN\l|0x001f: RETURN  (r0 I:T)  (LINE:75)\l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.elementAtOrNull((r5 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$elementAtOrNull' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001c \-\> B:16:?, BACK_EDGE: B:26:0x001d \-\> B:21:0x000e, CROSS_EDGE: B:27:0x001f \-\> B:16:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x001a: r2 'count' I\l  0x0018\-0x001f: r3 'element' Ljava\/lang\/Object;\l  0x001a\-0x001f: r4 'count' I\l  0x000d\-0x001f: r1 'iterator' Ljava\/util\/Iterator;\l  0x001f\-0x001f: r2 'count' I\l  \-1 \-0x001f: r5 '$this$elementAtOrNull' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x001f: r6 'index' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;I)TT;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_28;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_29[style=dashed];
Node_26 -> Node_21;
Node_29 -> Node_25;
Node_25 -> Node_16;
Node_28 -> Node_27;
Node_27 -> Node_16;
}

