digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.associateByTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"destination\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"keySelector\")\ljava.util.Iterator r1 = r4.iterator()\l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|LOOP_START\lLOOP:0: B:11:0x0014\-\>B:13:0x001a\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|if (r1.hasNext() == false) goto L5\l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|LOOP_END\lLOOP:0: B:11:0x0014\-\>B:13:0x001a\l|java.lang.Object r2 = (T) r1.next()\lr5.put(r6.invoke(r2), r2)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0026|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|RETURN\l|return r5\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final M extends java.util.Map\<? super K, ? super T\> kotlin.sequences.SequencesKt___SequencesKt.associateByTo((r4v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$associateByTo' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'destination' M extends java.util.Map\<? super K, ? super T\> A[D('destination' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'keySelector' kotlin.jvm.functions.Function1\<? super T, ? extends K\> A[D('keySelector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x001a \-\> B:11:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: [T, K, M extends java.util.Map\<? super K, ? super T\>]\lSIGNATURE: \<T:Ljava\/lang\/Object;K:Ljava\/lang\/Object;M::Ljava\/util\/Map\<\-TK;\-TT;\>;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TM;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TK;\>;)TM;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

