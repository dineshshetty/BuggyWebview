digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.first(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"predicate\")\ljava.util.Iterator r1 = r4.iterator()\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|LOOP_START\lLOOP:0: B:15:0x000f\-\>B:18:0x0023\l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|if (r1.hasNext() == false) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|java.lang.Object r2 = r1.next()\l}"];
Node_18 [shape=record,label="{18\:\ 0x0023|LOOP_END\lLOOP:0: B:15:0x000f\-\>B:18:0x0023\l|if (r5.invoke(r2).booleanValue() == false) goto L2\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|RETURN\l|return r2\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0026}"];
Node_21 [shape=record,label="{21\:\ 0x002d|throw new java.util.NoSuchElementException(\"Sequence contains no element matching the predicate.\")\l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.first((r4v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$first' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x0023 \-\> B:15:0x000f, CROSS_EDGE: B:21:0x002d \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r2v2, types: [T, java.lang.Object]\}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_15;
Node_18 -> Node_22[style=dashed];
Node_22 -> Node_19;
Node_19 -> Node_13;
Node_23 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

