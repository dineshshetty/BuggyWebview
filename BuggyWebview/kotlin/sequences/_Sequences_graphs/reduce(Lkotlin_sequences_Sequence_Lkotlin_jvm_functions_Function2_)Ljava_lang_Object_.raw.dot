digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.reduce(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$reduce' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('operation' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$reduce' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:2184)\l0x000f: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2185)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0029 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0015|0x0015: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2186)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0019|LOOP_START\lLOOP:0: B:17:0x0019\-\>B:19:0x001f\l|0x0019: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2187)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|0x001d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0028 \l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|LOOP_END\lLOOP:0: B:17:0x0019\-\>B:19:0x001f\l|0x001f: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2188)\l0x0023: INVOKE  (r2 I:java.lang.Object A[D('accumulator' java.lang.Object)]) = \l  (r5 I:kotlin.jvm.functions.Function2 A[D('operation' kotlin.jvm.functions.Function2)])\l  (r2 I:java.lang.Object A[D('accumulator' java.lang.Object)])\l  (r3 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0028|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0028|RETURN\l|0x0028: RETURN  (r2 I:S A[D('accumulator' java.lang.Object)])  (LINE:2190)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0029|0x0029: NEW_INSTANCE  (r2 I:java.lang.UnsupportedOperationException A[D('accumulator' java.lang.Object)]) =  java.lang.UnsupportedOperationException  (LINE:2185)\l0x002b: CONST_STR  (r3 I:java.lang.String) =  \"Empty sequence can't be reduced.\" \l0x002d: INVOKE  (r2 I:java.lang.UnsupportedOperationException), (r3 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0030|0x0030: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final S kotlin.sequences.SequencesKt___SequencesKt.reduce((r4 I:kotlin.sequences.Sequence\<? extends T extends S\> A[D('$this$reduce' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function2\<? super S, ? super T extends S, ? extends S\> A[D('operation' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x001f \-\> B:17:0x0019, CROSS_EDGE: B:22:0x0030 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0029: r2 'accumulator' Ljava\/lang\/Object;\l  0x000b\-0x0030: r0 '$i$f$reduce' I\l  0x000f\-0x0030: r1 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x0030: r4 '$this$reduce' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0030: r5 'operation' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [S, T extends S]\lSIGNATURE: \<S:Ljava\/lang\/Object;T::TS;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function2\<\-TS;\-TT;+TS;\>;)TS;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_17;
Node_23 -> Node_20;
Node_20 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

