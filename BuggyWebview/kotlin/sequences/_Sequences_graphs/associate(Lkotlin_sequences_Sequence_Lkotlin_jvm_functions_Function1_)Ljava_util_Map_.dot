digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.associate(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"transform\")\ljava.util.Map r1 = (java.util.Map\<K, V\>) new java.util.LinkedHashMap()\ljava.util.Iterator r4 = r8.iterator()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|LOOP_START\lLOOP:0: B:12:0x0018\-\>B:14:0x001e\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|if (r4.hasNext() == false) goto L5\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|LOOP_END\lLOOP:0: B:12:0x0018\-\>B:14:0x001e\l|java.lang.Object r5 = (T) r4.next()\lkotlin.Pair r6 = r9.invoke(r5)\lr1.put(r6.getFirst(), r6.getSecond())\l}"];
Node_17 [shape=record,label="{17\:\ 0x0035|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0035|RETURN\l|return r1\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.sequences.SequencesKt___SequencesKt.associate((r8v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$associate' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'transform' kotlin.jvm.functions.Function1\<? super T, ? extends kotlin.Pair\<? extends K, ? extends V\>\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x001e \-\> B:12:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [T, V, K]\lSIGNATURE: \<T:Ljava\/lang\/Object;K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Lkotlin\/Pair\<+TK;+TV;\>;\>;)Ljava\/util\/Map\<TK;TV;\>;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r5v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_16;
Node_16 -> Node_10;
}

