digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.chunked(Lkotlin\/sequences\/Sequence;ILkotlin\/jvm\/functions\/Function1;)Lkotlin\/sequences\/Sequence;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$chunked' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:2591)\l0x000b: INVOKE  (r0 I:kotlin.sequences.Sequence) = \l  (r1 I:kotlin.sequences.Sequence A[D('$this$chunked' kotlin.sequences.Sequence)])\l  (r2 I:int A[D('size' int)])\l  (r2 I:int A[D('size' int)])\l  (r0 I:boolean)\l  (r3 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l type: STATIC call: kotlin.sequences.SequencesKt.windowed(kotlin.sequences.Sequence, int, int, boolean, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:\<T, R\>:(kotlin.sequences.Sequence\<? extends T\>, int, int, boolean, kotlin.jvm.functions.Function1\<? super java.util.List\<? extends T\>, ? extends R\>):kotlin.sequences.Sequence\<R\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:kotlin.sequences.Sequence\<R\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<R\> kotlin.sequences.SequencesKt___SequencesKt.chunked((r1 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$chunked' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1\<? super java.util.List\<? extends T\>, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r1 '$this$chunked' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x000f: r2 'size' I\l  \-1 \-0x000f: r3 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/List\<+TT;\>;+TR;\>;)Lkotlin\/sequences\/Sequence\<TR;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

