digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.find(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"predicate\")\ljava.util.Iterator r2 = r5.iterator()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|LOOP_START\lLOOP:0: B:16:0x0010\-\>B:19:0x0024\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|if (r2.hasNext() == false) goto L9\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|java.lang.Object r3 = r2.next()\l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|LOOP_END\lLOOP:0: B:16:0x0010\-\>B:19:0x0024\l|if (r6.invoke(r3).booleanValue() == false) goto L2\l}"];
Node_23 [shape=record,label="{23\:\ 0x0028|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|RETURN\lORIG_RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static final T kotlin.sequences.SequencesKt___SequencesKt.find((r5v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$find' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0024 \-\> B:16:0x0010, CROSS_EDGE: B:21:0x0027 \-\> B:22:0x0028\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r3v2, types: [T, java.lang.Object]\}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_24;
Node_18 -> Node_19;
Node_19 -> Node_16;
Node_19 -> Node_23[style=dashed];
Node_23 -> Node_25;
Node_25 -> Node_14;
Node_24 -> Node_21;
Node_21 -> Node_14;
}

