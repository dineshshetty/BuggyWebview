digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.single(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
subgraph cluster_Region_170877556 {
label = "R(3:1|(2:4|(1:(2:(1:13)|(1:8)))(0))|(2:(1:20)|(1:18)))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"predicate\")\lT r1 = null\lboolean r2 = false\ljava.util.Iterator r3 = r6.iterator()\l\l}"];
subgraph cluster_LoopRegion_1024385619 {
label = "LOOP:0: (2:4|(1:(2:(1:13)|(1:8)))(0))";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0015|java.lang.Object \lif (r3.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_1545797653 {
label = "R(2:4|(1:(2:(1:13)|(1:8)))(0))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0017|java.lang.Object r4 = r3.next()\l}"];
subgraph cluster_IfRegion_1549015067 {
label = "IF [B:27:0x0025] THEN: R(1:(2:(1:13)|(1:8))) ELSE: R(0)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0025|if (r7.invoke(r4).booleanValue() != false) goto L6\l}"];
subgraph cluster_Region_1850570176 {
label = "R(1:(2:(1:13)|(1:8)))";
node [shape=record,color=blue];
subgraph cluster_Region_605752864 {
label = "R(2:(1:13)|(1:8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_834199121 {
label = "IF [B:28:0x0027] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0027|if (r2 != false) goto L11\l}"];
subgraph cluster_Region_1618776350 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0033|throw new java.lang.IllegalArgumentException(\"Sequence contains more than one matching element.\")\l}"];
}
}
subgraph cluster_Region_1010185159 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0029|r1 = r4\lr2 = true\l}"];
}
}
}
subgraph cluster_Region_471128522 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
subgraph cluster_Region_426921213 {
label = "R(2:(1:20)|(1:18))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1089808080 {
label = "IF [B:32:0x0034] THEN: R(1:20) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0034|if (r2 == false) goto L19\l}"];
subgraph cluster_Region_1701067773 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x003e|throw new java.util.NoSuchElementException(\"Sequence contains no element matching the predicate.\")\l}"];
}
}
subgraph cluster_Region_1994705698 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0036|RETURN\l|return r1\l}"];
}
}
}
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0011|LOOP_START\lLOOP:0: B:24:0x0011\-\>B:39:0x0011\lPHI: r1 r2 \l  PHI: (r1v1 T) = (r1v0 T), (r1v2 T) binds: [B:23:0x0000, B:39:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'found' boolean) = (r2v0 'found' boolean), (r2v2 'found' boolean) binds: [B:23:0x0000, B:39:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0027|SYNTHETIC\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0011|SYNTHETIC\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0011|LOOP_END\lSYNTHETIC\lLOOP:0: B:24:0x0011\-\>B:39:0x0011\lPHI: r1 r2 \l  PHI: (r1v2 T) = (r1v1 T), (r1v3 T) binds: [B:40:0x0011, B:41:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 'found' boolean) = (r2v1 'found' boolean), (r2v3 'found' boolean) binds: [B:40:0x0011, B:41:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x002c|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x002c}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0011|SYNTHETIC\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0034|SYNTHETIC\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0037}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.single((r6v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$single' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0025 \-\> B:24:0x0011, BACK_EDGE: B:29:0x0029 \-\> B:24:0x0011, CROSS_EDGE: B:33:0x0036 \-\> B:22:?, CROSS_EDGE: B:35:0x003e \-\> B:22:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r4v2, resolved type: java.lang.Object\}\l}"];
MethodNode -> Node_21;Node_23 -> Node_24;
Node_25 -> Node_26;
Node_25 -> Node_37[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_36;
Node_27 -> Node_40[style=dashed];
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_38;
Node_31 -> Node_22;
Node_29 -> Node_41;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_35 -> Node_22;
Node_33 -> Node_22;
Node_21 -> Node_23;
Node_24 -> Node_25;
Node_36 -> Node_28;
Node_41 -> Node_39;
Node_39 -> Node_24;
Node_38 -> Node_30;
Node_30 -> Node_31;
Node_40 -> Node_39;
Node_37 -> Node_32;
Node_34 -> Node_35;
}

