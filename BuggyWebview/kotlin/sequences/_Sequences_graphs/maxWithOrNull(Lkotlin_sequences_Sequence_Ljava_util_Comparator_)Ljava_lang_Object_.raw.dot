digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.maxWithOrNull(Lkotlin\/sequences\/Sequence;Ljava\/util\/Comparator;)Ljava\/lang\/Object;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$maxWithOrNull' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"comparator\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('comparator' java.util.Comparator)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence A[D('$this$maxWithOrNull' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:1702)\l0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1703)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0016 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|RETURN\l|0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: RETURN  (r1 I:T) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|0x0016: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1704)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|LOOP_START\lLOOP:0: B:25:0x001a\-\>B:33:0x001a\l|0x001a: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1705)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001e|0x001e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x002c \l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|0x0020: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1706)\l0x0024: INVOKE  (r3 I:int) = \l  (r5 I:java.util.Comparator A[D('comparator' java.util.Comparator)])\l  (r1 I:java.lang.Object A[D('max' java.lang.Object)])\l  (r2 I:java.lang.Object A[D('e' java.lang.Object)])\l type: INTERFACE call: java.util.Comparator.compare(java.lang.Object, java.lang.Object):int A[MD:(T, T):int (c)] (LINE:1707)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0028|0x0028: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:34:0x001a \l}"];
Node_31 [shape=record,label="{31\:\ 0x002a|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x002a|0x002a: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('max' java.lang.Object)]) = (r2 I:??[OBJECT, ARRAY] A[D('e' java.lang.Object)]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001a|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x001a|LOOP_END\lSYNTHETIC\lLOOP:0: B:25:0x001a\-\>B:33:0x001a\l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002c|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002c|RETURN\l|0x002c: RETURN  (r1 I:T A[D('max' java.lang.Object)])  (LINE:1709)\l}"];
MethodNode[shape=record,label="{public static final T kotlin.sequences.SequencesKt___SequencesKt.maxWithOrNull((r4 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$maxWithOrNull' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.Comparator\<? super T\> A[D('comparator' java.util.Comparator), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x0028 \-\> B:25:0x001a, BACK_EDGE: B:29:0x002a \-\> B:25:0x001a, CROSS_EDGE: B:30:0x002c \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x002b: r2 'e' Ljava\/lang\/Object;\l  0x000e\-0x002c: r0 'iterator' Ljava\/util\/Iterator;\l  0x001a\-0x002c: r1 'max' Ljava\/lang\/Object;\l  \-1 \-0x002c: r4 '$this$maxWithOrNull' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x002c: r5 'comparator' Ljava\/util\/Comparator;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Ljava\/util\/Comparator\<\-TT;\>;)TT;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_31[style=dashed];
Node_28 -> Node_34;
Node_31 -> Node_29;
Node_29 -> Node_35;
Node_35 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_33;
Node_32 -> Node_30;
Node_30 -> Node_19;
}

