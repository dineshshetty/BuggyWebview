digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.count(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)I" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$count' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1246)\l0x000c: INVOKE  (r2 I:java.util.Iterator) = (r5 I:kotlin.sequences.Sequence A[D('$this$count' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:1247)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|LOOP_START\lLOOP:0: B:21:0x0010\-\>B:32:0x0010\l|0x0010: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|0x0014: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x002e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|0x0016: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001a: INVOKE  (r4 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r3 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x001e: CHECK_CAST (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:??[OBJECT, ARRAY]) \l0x0020: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|0x0024: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0010 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0026|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0026|0x0026: ARITH  (r1 I:int) = (r1 I:int A[D('count' int)]) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0028|0x0028: IF  (r1 I:??[int, byte, short, char] A[D('count' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:34:0x0010 \l}"];
Node_31 [shape=record,label="{31\:\ 0x002a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|0x002a: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwCountOverflow():void A[MD:():void (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0010|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0010|LOOP_END\lSYNTHETIC\lLOOP:0: B:21:0x0010\-\>B:32:0x0010\l}"];
Node_34 [shape=record,label="{34\:\ 0x0010|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0010|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x002e|RETURN\l|0x002e: RETURN  (r1 I:int A[D('count' int)])  (LINE:1248)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.sequences.SequencesKt___SequencesKt.count((r5 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$count' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0024 \-\> B:21:0x0010, BACK_EDGE: B:26:0x0028 \-\> B:21:0x0010, BACK_EDGE: B:27:0x002a \-\> B:21:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x002d: r3 'element' Ljava\/lang\/Object;\l  0x000b\-0x002e: r0 '$i$f$count' I\l  0x000c\-0x002e: r1 'count' I\l  \-1 \-0x002e: r5 '$this$count' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x002e: r6 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)I\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_24;
Node_24 -> Node_29[style=dashed];
Node_24 -> Node_33;
Node_29 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_31[style=dashed];
Node_26 -> Node_34;
Node_31 -> Node_27;
Node_27 -> Node_35;
Node_35 -> Node_32;
Node_32 -> Node_21;
Node_34 -> Node_32;
Node_33 -> Node_32;
Node_30 -> Node_28;
Node_28 -> Node_19;
}

