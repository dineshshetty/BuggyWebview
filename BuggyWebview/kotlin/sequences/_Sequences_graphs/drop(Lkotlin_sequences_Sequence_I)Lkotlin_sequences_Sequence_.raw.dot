digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.drop(Lkotlin\/sequences\/Sequence;I)Lkotlin\/sequences\/Sequence;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$drop' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0005|0x0005: IF  (r4 I:??[int, byte, short, char] A[D('n' int)]) \< (0 ??[int, byte, short, char])  \-\> B:23:0x0009  (LINE:404)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|0x0007: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0025 \l}"];
Node_25 [shape=record,label="{25\:\ 0x000d|0x000d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0011  (LINE:406)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$drop' kotlin.sequences.Sequence)]) \l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) A[SYNTHETIC] (LINE:405)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|0x0011: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('$this$drop' kotlin.sequences.Sequence)]) kotlin.sequences.DropTakeSequence  (LINE:407)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x001d \l}"];
Node_29 [shape=record,label="{29\:\ 0x0015|0x0015: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$drop' kotlin.sequences.Sequence)]) \l0x0016: CHECK_CAST (r0 I:kotlin.sequences.DropTakeSequence) = (kotlin.sequences.DropTakeSequence) (r0 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:kotlin.sequences.DropTakeSequence), (r4 I:int A[D('n' int)]) type: INTERFACE call: kotlin.sequences.DropTakeSequence.drop(int):kotlin.sequences.Sequence A[MD:(int):kotlin.sequences.Sequence\<T\> (m)]\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) A[SYNTHETIC] (LINE:405)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:kotlin.sequences.DropSequence) =  kotlin.sequences.DropSequence  (LINE:408)\l0x001f: INVOKE  \l  (r0 I:kotlin.sequences.DropSequence)\l  (r3 I:kotlin.sequences.Sequence A[D('$this$drop' kotlin.sequences.Sequence)])\l  (r4 I:int A[D('n' int)])\l type: DIRECT call: kotlin.sequences.DropSequence.\<init\>(kotlin.sequences.Sequence, int):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, int):void (m)]\l0x0022: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>)  (LINE:405)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|0x0025: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3113)\l0x0026: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:404)\l0x0028: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x002b: CONST_STR  (r2 I:java.lang.String) =  \"Requested element count \" \l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0030: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('n' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0033: CONST_STR  (r2 I:java.lang.String) =  \" is less than zero.\" \l0x0035: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0038: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SequencesKt___SequencesKt$drop$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003c: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0042: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0045|0x0045: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt___SequencesKt.drop((r3 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$drop' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0015 \-\> B:31:0x0024, CROSS_EDGE: B:30:0x001d \-\> B:31:0x0024, CROSS_EDGE: B:33:0x0045 \-\> B:19:?, CROSS_EDGE: B:23:0x0009 \-\> B:24:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0026\-0x003c: r0 '$i$a$\-require\-SequencesKt___SequencesKt$drop$1' I\l  \-1 \-0x0045: r3 '$this$drop' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0045: r4 'n' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;I)Lkotlin\/sequences\/Sequence\<TT;\>;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_32;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_34;
Node_34 -> Node_19;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_35;
Node_35 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_23 -> Node_24;
}

