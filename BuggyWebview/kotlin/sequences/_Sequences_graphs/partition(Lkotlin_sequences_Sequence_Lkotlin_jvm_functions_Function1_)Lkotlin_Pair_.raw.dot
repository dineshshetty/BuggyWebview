digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.partition(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)Lkotlin\/Pair;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$partition' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:2698)\l0x000d: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0010: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:2699)\l0x0012: INVOKE  (r2 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0015: INVOKE  (r3 I:java.util.Iterator) = (r6 I:kotlin.sequences.Sequence A[D('$this$partition' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:2700)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|LOOP_START\lLOOP:0: B:20:0x0019\-\>B:31:0x0019\l|0x0019: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|0x001d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0037 \l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|0x001f: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0023: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:2701)\l0x0027: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x002d|0x002d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0033 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0033|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0033|0x0033: INVOKE  (r2 I:java.util.ArrayList A[D('second' java.util.ArrayList)]), (r4 I:java.lang.Object A[D('element' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:2704)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0019|LOOP_END\lSYNTHETIC\lLOOP:0: B:20:0x0019\-\>B:31:0x0019\l}"];
Node_30 [shape=record,label="{30\:\ 0x002f|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x002f|0x002f: INVOKE  (r1 I:java.util.ArrayList A[D('first' java.util.ArrayList)]), (r4 I:java.lang.Object A[D('element' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:2702)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0019|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0037|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0037|0x0037: NEW_INSTANCE  (r3 I:kotlin.Pair) =  kotlin.Pair  (LINE:2707)\l0x0039: INVOKE  \l  (r3 I:kotlin.Pair)\l  (r1 I:java.lang.Object A[D('first' java.util.ArrayList)])\l  (r2 I:java.lang.Object A[D('second' java.util.ArrayList)])\l type: DIRECT call: kotlin.Pair.\<init\>(java.lang.Object, java.lang.Object):void A[MD:(A, B):void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x003c|RETURN\l|0x003c: RETURN  (r3 I:kotlin.Pair\<java.util.List\<T\>, java.util.List\<T\>\>) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.util.List\<T\>, java.util.List\<T\>\> kotlin.sequences.SequencesKt___SequencesKt.partition((r6 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$partition' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x002f \-\> B:20:0x0019, BACK_EDGE: B:25:0x0033 \-\> B:20:0x0019\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0023\-0x0037: r4 'element' Ljava\/lang\/Object;\l  0x000b\-0x003c: r0 '$i$f$partition' I\l  0x0010\-0x003c: r1 'first' Ljava\/util\/ArrayList;\l  0x0015\-0x003c: r2 'second' Ljava\/util\/ArrayList;\l  \-1 \-0x003c: r6 '$this$partition' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x003c: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)Lkotlin\/Pair\<Ljava\/util\/List\<TT;\>;Ljava\/util\/List\<TT;\>;\>;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_28;
Node_23 -> Node_30[style=dashed];
Node_28 -> Node_25;
Node_25 -> Node_32;
Node_32 -> Node_31;
Node_31 -> Node_20;
Node_30 -> Node_24;
Node_24 -> Node_33;
Node_33 -> Node_31;
Node_29 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_18;
}

