digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.joinToString(Lkotlin\/sequences\/Sequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('$this$joinToString' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"separator\" \l0x0007: INVOKE  (r10 I:java.lang.Object A[D('separator' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x000c: INVOKE  (r11 I:java.lang.Object A[D('prefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"postfix\" \l0x0011: INVOKE  (r12 I:java.lang.Object A[D('postfix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"truncated\" \l0x0016: INVOKE  (r14 I:java.lang.Object A[D('truncated' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0019: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:2905)\l0x001b: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x001e: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001f: CHECK_CAST (r2 I:java.lang.Appendable) = (java.lang.Appendable) (r2 I:??[OBJECT, ARRAY]) \l0x0021: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$joinToString' kotlin.sequences.Sequence)]) \l0x0022: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('separator' java.lang.CharSequence)]) \l0x0023: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('prefix' java.lang.CharSequence)]) \l0x0024: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('postfix' java.lang.CharSequence)]) \l0x0025: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)]) \l0x0026: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('truncated' java.lang.CharSequence)]) \l0x0027: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY] A[D('transform' kotlin.jvm.functions.Function1)]) \l0x0028: INVOKE  (r0 I:java.lang.Appendable) = \l  (r1 I:kotlin.sequences.Sequence)\l  (r2 I:java.lang.Appendable)\l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.lang.CharSequence)\l  (r5 I:java.lang.CharSequence)\l  (r6 I:int)\l  (r7 I:java.lang.CharSequence)\l  (r8 I:kotlin.jvm.functions.Function1)\l type: STATIC call: kotlin.sequences.SequencesKt.joinTo(kotlin.sequences.Sequence, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1):java.lang.Appendable A[MD:\<T, A extends java.lang.Appendable\>:(kotlin.sequences.Sequence\<? extends T\>, A extends java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\>):A extends java.lang.Appendable (m)]\l0x002c: CHECK_CAST (r0 I:java.lang.StringBuilder) = (java.lang.StringBuilder) (r0 I:??[OBJECT, ARRAY]) \l0x002e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0032: CONST_STR  (r1 I:java.lang.String) =  \"joinTo(StringBuilder(), â€¦ed, transform).toString()\" \l0x0034: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0037|RETURN\l|0x0037: RETURN  (r0 I:java.lang.String) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.sequences.SequencesKt___SequencesKt.joinToString((r9 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$joinToString' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.CharSequence A[D('separator' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.CharSequence A[D('postfix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.lang.CharSequence A[D('truncated' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0037: r9 '$this$joinToString' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0037: r10 'separator' Ljava\/lang\/CharSequence;\l  \-1 \-0x0037: r11 'prefix' Ljava\/lang\/CharSequence;\l  \-1 \-0x0037: r12 'postfix' Ljava\/lang\/CharSequence;\l  \-1 \-0x0037: r13 'limit' I\l  \-1 \-0x0037: r14 'truncated' Ljava\/lang\/CharSequence;\l  \-1 \-0x0037: r15 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/CharSequence;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

