digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.indexOfLast(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function1;)I" {
subgraph cluster_Region_1676745342 {
label = "R(3:1|(4:4|(1:6)|(1:9)(0)|11)|14)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"predicate\")\lint r1 = \-1\lint r2 = 0\ljava.util.Iterator java.util.Iterator\<? extends T\> r3 = r6.iterator()\l}"];
subgraph cluster_LoopRegion_119701996 {
label = "LOOP:0: (4:4|(1:6)|(1:9)(0)|11)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0015|if (r3.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_1961334484 {
label = "R(4:4|(1:6)|(1:9)(0)|11)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0017|java.lang.Object java.lang.Object r4 = (T) r3.next()\l}"];
subgraph cluster_IfRegion_1818973429 {
label = "IF [B:22:0x001b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x001b|if (r2 \< 0) goto L6\l}"];
subgraph cluster_Region_2097065378 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x001d|kotlin.collections.CollectionsKt.throwIndexOverflow()\l}"];
}
}
subgraph cluster_IfRegion_1643981847 {
label = "IF [B:25:0x002a] THEN: R(1:9) ELSE: R(0)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x002a|if (r7.invoke(r4).booleanValue() != false) goto L9\l}"];
subgraph cluster_Region_215833755 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x002c|r1 = r2\l}"];
}
subgraph cluster_Region_2029925270 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_27 [shape=record,label="{27\:\ 0x002d|LOOP_END\lLOOP:0: B:19:0x0011\-\>B:27:0x002d\lPHI: r1 \l  PHI: (r1v2 'lastIndex' int) = (r1v1 'lastIndex' int), (r1v3 'lastIndex' int) binds: [B:31:0x002d, B:30:0x002d] A[DONT_GENERATE, DONT_INLINE]\l|r2++\l}"];
}
}
Node_28 [shape=record,label="{28\:\ 0x0031|RETURN\l|return r1\l}"];
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0011|LOOP_START\lLOOP:0: B:19:0x0011\-\>B:27:0x002d\lPHI: r1 r2 \l  PHI: (r1v1 'lastIndex' int) = (r1v0 'lastIndex' int), (r1v2 'lastIndex' int) binds: [B:18:0x0000, B:27:0x002d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'index' int) = (r2v0 'index' int), (r2v2 'index' int) binds: [B:18:0x0000, B:27:0x002d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0020}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x002d|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x002d|SYNTHETIC\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0031|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.sequences.SequencesKt___SequencesKt.indexOfLast((r6v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$indexOfLast' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x002d \-\> B:19:0x0011, CROSS_EDGE: B:25:0x002a \-\> B:27:0x002d, CROSS_EDGE: B:22:0x001b \-\> B:24:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)I\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r4v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_29[style=dashed];
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_25 -> Node_26;
Node_25 -> Node_31[style=dashed];
Node_26 -> Node_30;
Node_27 -> Node_19;
Node_28 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_24 -> Node_25;
Node_30 -> Node_27;
Node_31 -> Node_27;
Node_29 -> Node_28;
}

