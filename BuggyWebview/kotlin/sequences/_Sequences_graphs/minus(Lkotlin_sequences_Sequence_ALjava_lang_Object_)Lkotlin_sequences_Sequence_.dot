digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.minus(Lkotlin\/sequences\/Sequence;[Ljava\/lang\/Object;)Lkotlin\/sequences\/Sequence;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"elements\")\l}"];
Node_13 [shape=record,label="{13\:\ 0x000b|if (r2.length != 0) goto L9\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|r0 = true\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v7 boolean) binds: [B:15:0x000f, B:14:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|RETURN\l|return r1\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013}"];
Node_19 [shape=record,label="{19\:\ 0x001a|RETURN\l|return new kotlin.sequences.SequencesKt___SequencesKt$minus$2()\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|r0 = false\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt___SequencesKt.minus((r1v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$minus' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'elements' T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001a \-\> B:11:?, CROSS_EDGE: B:15:0x000f \-\> B:16:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;[TT;)Lkotlin\/sequences\/Sequence\<TT;\>;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r1v0, resolved type: kotlin.sequences.Sequence\<? extends T\>\}\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

