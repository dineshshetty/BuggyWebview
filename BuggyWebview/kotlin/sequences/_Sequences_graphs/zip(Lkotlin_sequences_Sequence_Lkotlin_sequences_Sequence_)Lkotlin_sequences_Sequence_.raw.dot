digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.zip(Lkotlin\/sequences\/Sequence;Lkotlin\/sequences\/Sequence;)Lkotlin\/sequences\/Sequence;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$zip' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('other' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: NEW_INSTANCE  (r0 I:kotlin.sequences.MergingSequence) =  kotlin.sequences.MergingSequence  (LINE:2816)\l0x000c: SGET  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zip$1) =  kotlin.sequences.SequencesKt___SequencesKt$zip$1.INSTANCE kotlin.sequences.SequencesKt___SequencesKt$zip$1 \l0x000e: CHECK_CAST (r1 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r1 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  \l  (r0 I:kotlin.sequences.MergingSequence)\l  (r2 I:kotlin.sequences.Sequence A[D('$this$zip' kotlin.sequences.Sequence)])\l  (r3 I:kotlin.sequences.Sequence A[D('other' kotlin.sequences.Sequence)])\l  (r1 I:kotlin.jvm.functions.Function2)\l type: DIRECT call: kotlin.sequences.MergingSequence.\<init\>(kotlin.sequences.Sequence, kotlin.sequences.Sequence, kotlin.jvm.functions.Function2):void A[MD:(kotlin.sequences.Sequence\<? extends T1\>, kotlin.sequences.Sequence\<? extends T2\>, kotlin.jvm.functions.Function2\<? super T1, ? super T2, ? extends V\>):void (m)]\l0x0013: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|0x0015: RETURN  (r0 I:kotlin.sequences.Sequence\<kotlin.Pair\<T, R\>\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<kotlin.Pair\<T, R\>\> kotlin.sequences.SequencesKt___SequencesKt.zip((r2 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$zip' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.sequences.Sequence\<? extends R\> A[D('other' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r2 '$this$zip' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0015: r3 'other' Lkotlin\/sequences\/Sequence;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/sequences\/Sequence\<+TR;\>;)Lkotlin\/sequences\/Sequence\<Lkotlin\/Pair\<TT;TR;\>;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

