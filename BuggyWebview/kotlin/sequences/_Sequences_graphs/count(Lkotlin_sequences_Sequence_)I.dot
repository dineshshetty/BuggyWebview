digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.count(Lkotlin\/sequences\/Sequence;)I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lr0 = 0\ljava.util.Iterator r1 = r3.iterator()\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|LOOP_START\lLOOP:0: B:17:0x000a\-\>B:25:0x000a\lPHI: r0 \l  PHI: (r0v2 'count' int) = (r0v1 'count' int), (r0v3 'count' int) binds: [B:16:0x0000, B:25:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|if (r1.hasNext() == false) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|r1.next()\lint r0 = r0 + 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|if (r0 \>= 0) goto L10\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|kotlin.collections.CollectionsKt.throwCountOverflow()\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|LOOP_END\lSYNTHETIC\lLOOP:0: B:17:0x000a\-\>B:25:0x000a\l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x001c|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|RETURN\l|return r0\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.sequences.SequencesKt___SequencesKt.count((r3v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$count' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0016 \-\> B:17:0x000a, BACK_EDGE: B:21:0x0018 \-\> B:17:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;)I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_24;
Node_19 -> Node_20;
Node_20 -> Node_23[style=dashed];
Node_20 -> Node_26;
Node_23 -> Node_21;
Node_21 -> Node_27;
Node_27 -> Node_25;
Node_25 -> Node_17;
Node_26 -> Node_25;
Node_24 -> Node_22;
Node_22 -> Node_15;
}

