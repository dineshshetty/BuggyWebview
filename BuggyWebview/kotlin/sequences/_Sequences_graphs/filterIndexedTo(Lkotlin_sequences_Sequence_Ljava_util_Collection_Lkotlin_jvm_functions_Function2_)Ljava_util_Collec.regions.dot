digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.filterIndexedTo(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/Collection;" {
subgraph cluster_Region_1344540836 {
label = "R(3:1|(4:4|(1:6)|(1:9)(0)|11)|14)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"destination\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"predicate\")\lint r3 = 0\ljava.util.Iterator java.util.Iterator\<? extends T\> r4 = r10.iterator()\l}"];
subgraph cluster_LoopRegion_911821526 {
label = "LOOP:0: (4:4|(1:6)|(1:9)(0)|11)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x001b|if (r4.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_1563960867 {
label = "R(4:4|(1:6)|(1:9)(0)|11)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x001d|java.lang.Object java.lang.Object r5 = (T) r4.next()\lint int r6 = r3 + 1\l}"];
subgraph cluster_IfRegion_1166703911 {
label = "IF [B:23:0x0023] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0023|if (r3 \< 0) goto L6\l}"];
subgraph cluster_Region_1286051376 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0025|kotlin.collections.CollectionsKt.throwIndexOverflow()\l}"];
}
}
subgraph cluster_IfRegion_1183368083 {
label = "IF [B:26:0x0038] THEN: R(1:9) ELSE: R(0)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0038|if (r12.invoke(java.lang.Integer.valueOf(r3), r5).booleanValue() != false) goto L9\l}"];
subgraph cluster_Region_709651200 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x003a|r11.add(r5)\l}"];
}
subgraph cluster_Region_789580228 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_28 [shape=record,label="{28\:\ 0x003d|LOOP_END\lLOOP:0: B:20:0x0017\-\>B:28:0x003d\l|r3 = r6\l}"];
}
}
Node_30 [shape=record,label="{30\:\ 0x0040|RETURN\l|return r11\l}"];
}
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0017|LOOP_START\lLOOP:0: B:20:0x0017\-\>B:28:0x003d\lPHI: r3 \l  PHI: (r3v1 'index' int) = (r3v0 'index' int), (r3v2 'index' int) binds: [B:19:0x0000, B:28:0x003d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0028}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x003d|SYNTHETIC\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x003d|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0040|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super T\> kotlin.sequences.SequencesKt___SequencesKt.filterIndexedTo((r10v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$filterIndexedTo' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'destination' C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'predicate' kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x003d \-\> B:20:0x0017, CROSS_EDGE: B:26:0x0038 \-\> B:28:0x003d, CROSS_EDGE: B:23:0x0023 \-\> B:25:0x0028\lINLINE_NOT_NEEDED\lTYPE_VARS: [C extends java.util.Collection\<? super T\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TT;\>;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TC;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-TT;Ljava\/lang\/Boolean;\>;)TC;\l}"];
MethodNode -> Node_17;Node_19 -> Node_20;
Node_21 -> Node_22;
Node_21 -> Node_31[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_25[style=dashed];
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_26 -> Node_33[style=dashed];
Node_27 -> Node_32;
Node_28 -> Node_20;
Node_30 -> Node_18;
Node_17 -> Node_19;
Node_20 -> Node_21;
Node_25 -> Node_26;
Node_32 -> Node_28;
Node_33 -> Node_28;
Node_31 -> Node_30;
}

