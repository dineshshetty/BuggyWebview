digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.reduceIndexed(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function3;)Ljava\/lang\/Object;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$reduceIndexed' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('operation' kotlin.jvm.functions.Function3)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:java.util.Iterator) = (r6 I:kotlin.sequences.Sequence A[D('$this$reduceIndexed' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:2208)\l0x000f: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2209)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0036 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0015|0x0015: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:2210)\l0x0016: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2211)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001a|LOOP_START\lLOOP:0: B:22:0x001a\-\>B:27:0x0027\l|0x001a: INVOKE  (r4 I:boolean) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2212)\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|0x001e: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0035 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|0x0020: ARITH  (r4 I:int) = (r2 I:int A[D('index' int)]) + (1 int)  (LINE:2213)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|0x0022: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:33:0x0027 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|0x0024: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0027|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|LOOP_END\lLOOP:0: B:22:0x001a\-\>B:27:0x0027\l|0x0027: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x002b: INVOKE  (r5 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002f: INVOKE  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)]) = \l  (r7 I:kotlin.jvm.functions.Function3 A[D('operation' kotlin.jvm.functions.Function3)])\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)])\l  (r5 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)]\l0x0033: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0035|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0035|RETURN\l|0x0035: RETURN  (r3 I:S A[D('accumulator' java.lang.Object)])  (LINE:2215)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0036|0x0036: NEW_INSTANCE  (r2 I:java.lang.UnsupportedOperationException A[D('index' int)]) =  java.lang.UnsupportedOperationException  (LINE:2209)\l0x0038: CONST_STR  (r3 I:java.lang.String) =  \"Empty sequence can't be reduced.\" \l0x003a: INVOKE  (r2 I:java.lang.UnsupportedOperationException), (r3 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x003d|0x003d: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final S kotlin.sequences.SequencesKt___SequencesKt.reduceIndexed((r6 I:kotlin.sequences.Sequence\<? extends T extends S\> A[D('$this$reduceIndexed' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super S, ? super T extends S, ? extends S\> A[D('operation' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0027 \-\> B:22:0x001a, CROSS_EDGE: B:25:0x0022 \-\> B:27:0x0027, CROSS_EDGE: B:30:0x003d \-\> B:18:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x0022: r2 'index' I\l  0x0022\-0x0035: r4 'index' I\l  0x0035\-0x0036: r2 'index' I\l  0x001a\-0x0036: r3 'accumulator' Ljava\/lang\/Object;\l  0x000b\-0x003d: r0 '$i$f$reduceIndexed' I\l  0x000f\-0x003d: r1 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x003d: r6 '$this$reduceIndexed' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x003d: r7 'operation' Lkotlin\/jvm\/functions\/Function3;\lTYPE_VARS: [S, T extends S]\lSIGNATURE: \<S:Ljava\/lang\/Object;T::TS;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function3\<\-Ljava\/lang\/Integer;\-TS;\-TT;+TS;\>;)TS;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_32;
Node_32 -> Node_27;
Node_27 -> Node_22;
Node_33 -> Node_27;
Node_31 -> Node_28;
Node_28 -> Node_18;
Node_29 -> Node_30;
Node_30 -> Node_18;
}

