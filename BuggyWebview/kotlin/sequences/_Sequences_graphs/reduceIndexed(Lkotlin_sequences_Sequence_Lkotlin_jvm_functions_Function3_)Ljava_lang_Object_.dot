digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.reduceIndexed(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function3;)Ljava\/lang\/Object;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"operation\")\ljava.util.Iterator r1 = r6.iterator()\l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|if (r1.hasNext() == false) goto L15\l}"];
Node_21 [shape=record,label="{21\:\ 0x0015|r2 = 1\ljava.lang.Object r3 = r1.next()\l}"];
Node_22 [shape=record,label="{22\:\ 0x001a|LOOP_START\lLOOP:0: B:22:0x001a\-\>B:27:0x0027\lPHI: r2 r3 \l  PHI: (r2v3 'index' int) = (r2v2 'index' int), (r2v5 'index' int) binds: [B:21:0x0015, B:27:0x0027] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'accumulator' java.lang.Object) = (r3v1 'accumulator' T extends S), (r3v3 'accumulator' java.lang.Object) binds: [B:21:0x0015, B:27:0x0027] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|if (r1.hasNext() == false) goto L12\l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|int r4 = r2 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|if (r2 \>= 0) goto L11\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|kotlin.collections.CollectionsKt.throwIndexOverflow()\l}"];
Node_32 [shape=record,label="{32\:\ 0x0027|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|LOOP_END\lLOOP:0: B:22:0x001a\-\>B:27:0x0027\l|java.lang.Object r3 = r3\ljava.lang.Object r3 = (S) r7.invoke(java.lang.Integer.valueOf(r2), r3, (T) r1.next())\lr2 = r4\l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0035|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0035|RETURN\l|return (S) r3\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0036}"];
Node_30 [shape=record,label="{30\:\ 0x003d|throw new java.lang.UnsupportedOperationException(\"Empty sequence can't be reduced.\")\l}"];
MethodNode[shape=record,label="{public static final S kotlin.sequences.SequencesKt___SequencesKt.reduceIndexed((r6v0 kotlin.sequences.Sequence\<? extends T extends S\> A[D('$this$reduceIndexed' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'operation' kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super S, ? super T extends S, ? extends S\> A[D('operation' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:27:0x0027 \-\> B:22:0x001a, CROSS_EDGE: B:25:0x0022 \-\> B:27:0x0027, CROSS_EDGE: B:30:0x003d \-\> B:18:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [S, T extends S]\lSIGNATURE: \<S:Ljava\/lang\/Object;T::TS;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function3\<\-Ljava\/lang\/Integer;\-TS;\-TT;+TS;\>;)TS;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r5v0. Raw type applied. Possible types: T extends S, ? super T extends S\}\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_29;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_31;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_33;
Node_26 -> Node_32;
Node_32 -> Node_27;
Node_27 -> Node_22;
Node_33 -> Node_27;
Node_31 -> Node_28;
Node_28 -> Node_18;
Node_29 -> Node_30;
Node_30 -> Node_18;
}

