digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.drop(Lkotlin\/sequences\/Sequence;I)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_1878278410 {
label = "R(2:1|(2:(1:5)|(2:15|16)))";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\l}"];
subgraph cluster_Region_1598089813 {
label = "R(2:(1:5)|(2:15|16))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_489545244 {
label = "IF [B:24:0x000a] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r4 \>= 0) == true) goto L5\l}"];
subgraph cluster_Region_1673110527 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x000d|RETURN\l|return r4 == 0 ? r3 : r3 instanceof kotlin.sequences.DropTakeSequence ? ((kotlin.sequences.DropTakeSequence) r3).drop(r4) : new kotlin.sequences.DropSequence(r3, r4)\l}"];
}
}
subgraph cluster_Region_780685971 {
label = "R(2:15|16)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0025}"];
Node_33 [shape=record,label="{33\:\ 0x0045|throw new java.lang.IllegalArgumentException((\"Requested element count \" + r4 + \" is less than zero.\").toString())\l}"];
}
}
}
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0005}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0007}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000f}"];
Node_34 [shape=record,color=red,label="{34\:\ ?|SYNTHETIC\l}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0011}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0013}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0015}"];
Node_35 [shape=record,color=red,label="{35\:\ ?|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x001d}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0024|ORIG_RETURN\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0009}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<T\> kotlin.sequences.SequencesKt___SequencesKt.drop((r3v0 kotlin.sequences.Sequence\<? extends T\> A[D('$this$drop' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0015 \-\> B:31:0x0024, CROSS_EDGE: B:30:0x001d \-\> B:31:0x0024, CROSS_EDGE: B:33:0x0045 \-\> B:19:?, CROSS_EDGE: B:23:0x0009 \-\> B:24:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;I)Lkotlin\/sequences\/Sequence\<TT;\>;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r3v0, resolved type: kotlin.sequences.Sequence\<? extends T\>\}\l}"];
MethodNode -> Node_18;Node_20 -> Node_21;
Node_24 -> Node_25;
Node_24 -> Node_32[style=dashed];
Node_25 -> Node_26;
Node_25 -> Node_27;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_18 -> Node_20;
Node_21 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_26 -> Node_34;
Node_34 -> Node_19;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_30;
Node_29 -> Node_35;
Node_35 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_23 -> Node_24;
}

