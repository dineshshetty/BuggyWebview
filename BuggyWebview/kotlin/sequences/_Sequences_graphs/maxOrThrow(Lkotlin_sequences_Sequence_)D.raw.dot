digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.maxOrThrow(Lkotlin\/sequences\/Sequence;)D" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$max' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Iterator) = (r5 I:kotlin.sequences.Sequence A[D('$this$max' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:1319)\l0x0009: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1320)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x002f \l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1321)\l0x0013: CHECK_CAST (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:??[OBJECT, ARRAY]) \l0x0015: INVOKE  (r1 I:double) = (r1 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.doubleValue():double A[MD:():double (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0019|LOOP_START\lLOOP:0: B:17:0x0019\-\>B:19:0x001f\l|0x0019: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1322)\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|0x001d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x002e \l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|LOOP_END\lLOOP:0: B:17:0x0019\-\>B:19:0x001f\l|0x001f: INVOKE  (r3 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1323)\l0x0023: CHECK_CAST (r3 I:java.lang.Number) = (java.lang.Number) (r3 I:??[OBJECT, ARRAY]) \l0x0025: INVOKE  (r3 I:double) = (r3 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.doubleValue():double A[MD:():double (c)]\l0x0029: INVOKE  (r1 I:double A[D('max' double)]) = (r1 I:double A[D('max' double)]), (r3 I:double A[D('e' double)]) type: STATIC call: java.lang.Math.max(double, double):double A[MD:(double, double):double (c)] (LINE:1324)\l}"];
Node_23 [shape=record,label="{23\:\ 0x002e|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|RETURN\l|0x002e: RETURN  (r1 I:double A[D('max' double)])  (LINE:1326)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x002f|0x002f: NEW_INSTANCE  (r1 I:java.util.NoSuchElementException A[D('max' double)]) =  java.util.NoSuchElementException  (LINE:1320)\l0x0031: INVOKE  (r1 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0034|0x0034: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final double kotlin.sequences.SequencesKt___SequencesKt.maxOrThrow((r5 I:kotlin.sequences.Sequence\<java.lang.Double\> A[D('$this$max' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x001f \-\> B:17:0x0019, CROSS_EDGE: B:22:0x0034 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0029\-0x002d: r3 'e' D\l  0x0019\-0x002f: r1 'max' D\l  0x0009\-0x0034: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x0034: r5 '$this$max' Lkotlin\/sequences\/Sequence;\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<Ljava\/lang\/Double;\>;)D\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_17;
Node_23 -> Node_20;
Node_20 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

