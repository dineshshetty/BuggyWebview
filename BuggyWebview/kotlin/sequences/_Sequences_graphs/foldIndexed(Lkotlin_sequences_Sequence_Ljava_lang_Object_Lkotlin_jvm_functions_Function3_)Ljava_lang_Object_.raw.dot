digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.foldIndexed(Lkotlin\/sequences\/Sequence;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function3;)Ljava\/lang\/Object;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$foldIndexed' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('operation' kotlin.jvm.functions.Function3)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1279)\l0x000c: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('initial' java.lang.Object)])  (LINE:1280)\l0x000d: INVOKE  (r3 I:java.util.Iterator) = (r6 I:kotlin.sequences.Sequence A[D('$this$foldIndexed' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:1281)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|LOOP_START\lLOOP:0: B:16:0x0011\-\>B:21:0x0022\l|0x0011: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|0x0015: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x002c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0017|0x0017: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001b: ARITH  (r5 I:int) = (r1 I:int A[D('index' int)]) + (1 int) \l}"];
Node_19 [shape=record,label="{19\:\ 0x001d|0x001d: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:25:0x0022 \l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|0x001f: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0022|LOOP_END\lLOOP:0: B:16:0x0011\-\>B:21:0x0022\l|0x0022: INVOKE  (r1 I:java.lang.Integer) = (r1 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0026: INVOKE  (r2 I:java.lang.Object A[D('accumulator' java.lang.Object)]) = \l  (r8 I:kotlin.jvm.functions.Function3 A[D('operation' kotlin.jvm.functions.Function3)])\l  (r1 I:java.lang.Object)\l  (r2 I:java.lang.Object A[D('accumulator' java.lang.Object)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)]\l0x002a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002c|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002c|RETURN\l|0x002c: RETURN  (r2 I:R A[D('accumulator' java.lang.Object)])  (LINE:1282)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final R kotlin.sequences.SequencesKt___SequencesKt.foldIndexed((r6 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$foldIndexed' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:R A[D('initial' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super R, ? super T, ? extends R\> A[D('operation' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0022 \-\> B:16:0x0011, CROSS_EDGE: B:19:0x001d \-\> B:21:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x001d: r1 'index' I\l  0x001b\-0x002b: r4 'element' Ljava\/lang\/Object;\l  0x001d\-0x002c: r5 'index' I\l  0x000b\-0x002c: r0 '$i$f$foldIndexed' I\l  0x002c\-0x002c: r1 'index' I\l  0x000d\-0x002c: r2 'accumulator' Ljava\/lang\/Object;\l  \-1 \-0x002c: r6 '$this$foldIndexed' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x002c: r7 'initial' Ljava\/lang\/Object;\l  \-1 \-0x002c: r8 'operation' Lkotlin\/jvm\/functions\/Function3;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TR;Lkotlin\/jvm\/functions\/Function3\<\-Ljava\/lang\/Integer;\-TR;\-TT;+TR;\>;)TR;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_21 -> Node_16;
Node_25 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

