digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt.toCollection(Lkotlin\/sequences\/Sequence;Ljava\/util\/Collection;)Ljava\/util\/Collection;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$toCollection' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"destination\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('destination' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r2 I:kotlin.sequences.Sequence A[D('$this$toCollection' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:787)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|LOOP_START\lLOOP:0: B:11:0x000e\-\>B:13:0x0014\l|0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x001c \l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|LOOP_END\lLOOP:0: B:11:0x000e\-\>B:13:0x0014\l|0x0014: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0018: INVOKE  \l  (r3 I:java.util.Collection A[D('destination' java.util.Collection)])\l  (r1 I:java.lang.Object A[D('item' java.lang.Object)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:788)\l}"];
Node_15 [shape=record,label="{15\:\ 0x001c|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|RETURN\l|0x001c: RETURN  (r3 I:C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection)])  (LINE:790)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super T\> kotlin.sequences.SequencesKt___SequencesKt.toCollection((r2 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$toCollection' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:13:0x0014 \-\> B:11:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x001c: r1 'item' Ljava\/lang\/Object;\l  \-1 \-0x001c: r2 '$this$toCollection' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x001c: r3 'destination' Ljava\/util\/Collection;\lTYPE_VARS: [C extends java.util.Collection\<? super T\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TT;\>;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;TC;)TC;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_13 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

