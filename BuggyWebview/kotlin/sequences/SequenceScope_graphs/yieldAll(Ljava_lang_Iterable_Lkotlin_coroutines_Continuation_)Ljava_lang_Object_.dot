digraph "CFG forkotlin.sequences.SequenceScope.yieldAll(Ljava\/lang\/Iterable;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0002|if ((r3 instanceof java.util.Collection) == false) goto L8\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004}"];
Node_18 [shape=record,label="{18\:\ 0x000b|if (((java.util.Collection) r3).isEmpty() == false) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x000d}"];
Node_20 [shape=record,label="{20\:\ 0x000f|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|java.lang.Object r0 = yieldAll(r3.iterator(), r4)\l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|if (r0 != kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()) goto L11\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|RETURN\l|return r0\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f}"];
Node_25 [shape=record,label="{25\:\ 0x0021|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.sequences.SequenceScope.yieldAll((r2v0 'this' kotlin.sequences.SequenceScope\<T\> A[IMMUTABLE_TYPE, THIS]), (r3v0 java.lang.Iterable\<? extends T\> A[D('elements' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001e \-\> B:14:?, CROSS_EDGE: B:25:0x0021 \-\> B:14:?, CROSS_EDGE: B:16:0x0002 \-\> B:21:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

