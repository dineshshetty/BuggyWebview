digraph "CFG forkotlin.sequences.SequenceScope.yieldAll(Lkotlin\/sequences\/Sequence;Lkotlin\/coroutines\/Continuation;)Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.Iterator) = (r3 I:kotlin.sequences.Sequence A[D('sequence' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:90)\l0x0004: INVOKE  (r0 I:java.lang.Object) = \l  (r2 I:kotlin.sequences.SequenceScope)\l  (r0 I:java.util.Iterator)\l  (r4 I:kotlin.coroutines.Continuation A[D('$completion' kotlin.coroutines.Continuation)])\l type: VIRTUAL call: kotlin.sequences.SequenceScope.yieldAll(java.util.Iterator, kotlin.coroutines.Continuation):java.lang.Object A[MD:(java.util.Iterator\<? extends T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l0x0008: INVOKE  (r1 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000f \l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.lang.Object) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|0x000f: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:java.lang.Object) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.sequences.SequenceScope.yieldAll((r2 'this' I:kotlin.sequences.SequenceScope\<T\> A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlin.sequences.Sequence\<? extends T\> A[D('sequence' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\> A[D('$completion' kotlin.coroutines.Continuation), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0011 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0011: r3 'sequence' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0011: r4 '$completion' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/Unit;\>;)Ljava\/lang\/Object;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

