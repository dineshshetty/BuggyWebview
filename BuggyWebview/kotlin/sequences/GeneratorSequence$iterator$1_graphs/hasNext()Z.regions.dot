digraph "CFG forkotlin.sequences.GeneratorSequence$iterator$1.hasNext()Z" {
subgraph cluster_Region_829518147 {
label = "R(2:(1:3)|5)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1502555219 {
label = "IF [B:3:0x0002] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r2.nextState \< 0) goto L3\l}"];
subgraph cluster_Region_251475930 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0004|calcNext()\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x000a|RETURN\l|return r2.nextState == 1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0007}"];
Node_8 [shape=record,color=red,label="{8\:\ 0x000d|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean kotlin.sequences.GeneratorSequence$iterator$1.hasNext((r2v0 'this' kotlin.sequences.GeneratorSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:6:0x000a \-\> B:9:0x000e, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_5[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_8;
Node_6 -> Node_10;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_5 -> Node_6;
Node_8 -> Node_1;
Node_10 -> Node_1;
}

