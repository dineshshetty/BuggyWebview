digraph "CFG forkotlin.sequences.GeneratorSequence$iterator$1.calcNext()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int  (LINE:591)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0010 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:kotlin.sequences.GeneratorSequence\<T\>) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.this$0 kotlin.sequences.GeneratorSequence \l0x0007: INVOKE  (r0 I:kotlin.jvm.functions.Function0) = (r0 I:kotlin.sequences.GeneratorSequence) type: STATIC call: kotlin.sequences.GeneratorSequence.access$getGetInitialValue$p(kotlin.sequences.GeneratorSequence):kotlin.jvm.functions.Function0 A[MD:(kotlin.sequences.GeneratorSequence):kotlin.jvm.functions.Function0 (m)]\l0x000b: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function0) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[MD:():R (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001f|0x001f: IPUT  (r0 I:T), (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextItem java.lang.Object \l}"];
Node_7 [shape=record,label="{7\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0025  (LINE:592)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0023|0x0023: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|0x0026: IPUT  (r0 I:int), (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l}"];
Node_11 [shape=record,label="{11\:\ 0x0028|RETURN\l|0x0028: RETURN    (LINE:593)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0025|0x0025: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: IGET  (r0 I:kotlin.sequences.GeneratorSequence\<T\>) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.this$0 kotlin.sequences.GeneratorSequence \l0x0012: INVOKE  (r0 I:kotlin.jvm.functions.Function1) = (r0 I:kotlin.sequences.GeneratorSequence) type: STATIC call: kotlin.sequences.GeneratorSequence.access$getGetNextValue$p(kotlin.sequences.GeneratorSequence):kotlin.jvm.functions.Function1 A[MD:(kotlin.sequences.GeneratorSequence):kotlin.jvm.functions.Function1 (m)]\l0x0016: IGET  (r1 I:T) = (r2 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextItem java.lang.Object \l0x0018: INVOKE  (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x001b: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function1), (r1 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
MethodNode[shape=record,label="{private final void kotlin.sequences.GeneratorSequence$iterator$1.calcNext((r2 'this' I:kotlin.sequences.GeneratorSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:9:0x0025 \-\> B:10:0x0026, CROSS_EDGE: B:5:0x0010 \-\> B:6:0x001f\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_9 -> Node_10;
Node_5 -> Node_6;
}

