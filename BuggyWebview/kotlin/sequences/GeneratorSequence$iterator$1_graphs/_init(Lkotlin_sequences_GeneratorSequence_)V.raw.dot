digraph "CFG forkotlin.sequences.GeneratorSequence$iterator$1.\<init\>(Lkotlin\/sequences\/GeneratorSequence;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IPUT  \l  (r2 I:kotlin.sequences.GeneratorSequence\<T\> A[D('$receiver' kotlin.sequences.GeneratorSequence)])\l  (r1 I:kotlin.sequences.GeneratorSequence$iterator$1)\l kotlin.sequences.GeneratorSequence$iterator$1.this$0 kotlin.sequences.GeneratorSequence \l0x0002: INVOKE  (r1 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:586)\l0x0005: CONST  (r0 I:??[int, float, short, byte, char]) = (\-2 ??[int, float, short, byte, char])  (LINE:588)\l0x0006: IPUT  (r0 I:int), (r1 I:kotlin.sequences.GeneratorSequence$iterator$1) kotlin.sequences.GeneratorSequence$iterator$1.nextState int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:586)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void kotlin.sequences.GeneratorSequence$iterator$1.\<init\>((r1 'this' I:kotlin.sequences.GeneratorSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.sequences.GeneratorSequence\<T\> A[D('$receiver' kotlin.sequences.GeneratorSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0008: r2 '$receiver' Lkotlin\/sequences\/GeneratorSequence;\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/sequences\/GeneratorSequence\<TT;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

