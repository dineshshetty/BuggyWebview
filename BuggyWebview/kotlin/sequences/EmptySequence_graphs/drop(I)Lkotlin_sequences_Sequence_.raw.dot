digraph "CFG forkotlin.sequences.EmptySequence.drop(I)Lkotlin\/sequences\/Sequence;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: INVOKE  (r0 I:kotlin.sequences.EmptySequence) = (r1 I:kotlin.sequences.EmptySequence), (r2 I:int A[D('n' int)]) type: VIRTUAL call: kotlin.sequences.EmptySequence.drop(int):kotlin.sequences.EmptySequence A[MD:(int):kotlin.sequences.EmptySequence (m)] (LINE:44)\l0x0004: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0006|RETURN\l|0x0006: RETURN  (r0 I:kotlin.sequences.Sequence) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ kotlin.sequences.Sequence kotlin.sequences.EmptySequence.drop((r1 'this' I:kotlin.sequences.EmptySequence A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0006: r2 'n' I\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.drop(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

