digraph "CFG forkotlin.sequences.SubSequence$iterator$1.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r2 I:kotlin.sequences.SubSequence$iterator$1) type: DIRECT call: kotlin.sequences.SubSequence$iterator$1.drop():void A[MD:():void (m)] (LINE:379)\l0x0003: IGET  (r0 I:int) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.position int  (LINE:380)\l0x0005: IGET  (r1 I:kotlin.sequences.SubSequence\<T\>) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.this$0 kotlin.sequences.SubSequence \l0x0007: INVOKE  (r1 I:int) = (r1 I:kotlin.sequences.SubSequence) type: STATIC call: kotlin.sequences.SubSequence.access$getEndIndex$p(kotlin.sequences.SubSequence):int A[MD:(kotlin.sequences.SubSequence):int (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000b|0x000b: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000d|0x000d: IGET  (r0 I:java.util.Iterator\<T\>) = (r2 I:kotlin.sequences.SubSequence$iterator$1) kotlin.sequences.SubSequence$iterator$1.iterator java.util.Iterator \l0x000f: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0017 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0015|SYNTHETIC\lRETURN\l|0x0015: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0018: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.sequences.SubSequence$iterator$1.hasNext((r2 'this' I:kotlin.sequences.SubSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x0017 \-\> B:8:0x0018, CROSS_EDGE: B:3:0x000b \-\> B:7:0x0017\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_1;
Node_7 -> Node_1;
}

