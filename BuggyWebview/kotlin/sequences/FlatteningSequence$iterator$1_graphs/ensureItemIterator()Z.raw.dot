digraph "CFG forkotlin.sequences.FlatteningSequence$iterator$1.ensureItemIterator()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.util.Iterator\<? extends E\>) = (r5 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator  (LINE:307)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x000e \l}"];
Node_6 [shape=record,label="{6\:\ 0x000c|0x000c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0014 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:308)\l0x0012: IPUT  (r0 I:java.util.Iterator\<? extends E\>), (r5 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator \l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0014|LOOP_START\lLOOP:0: B:10:0x0014\-\>B:16:0x0041\l|0x0014: IGET  (r0 I:java.util.Iterator\<? extends E\>) = (r5 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator  (LINE:310)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|0x0016: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0046 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|0x0018: IGET  (r0 I:java.util.Iterator\<T\>) = (r5 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.iterator java.util.Iterator  (LINE:311)\l0x001a: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001e|0x001e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0021 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0021|0x0021: IGET  (r0 I:java.util.Iterator\<T\>) = (r5 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.iterator java.util.Iterator  (LINE:314)\l0x0023: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0027: IGET  (r3 I:kotlin.sequences.FlatteningSequence\<T, R, E\>) = (r5 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.this$0 kotlin.sequences.FlatteningSequence  (LINE:315)\l0x0029: INVOKE  (r3 I:kotlin.jvm.functions.Function1) = (r3 I:kotlin.sequences.FlatteningSequence) type: STATIC call: kotlin.sequences.FlatteningSequence.access$getIterator$p(kotlin.sequences.FlatteningSequence):kotlin.jvm.functions.Function1 A[MD:(kotlin.sequences.FlatteningSequence):kotlin.jvm.functions.Function1 (m)]\l0x002d: IGET  (r4 I:kotlin.sequences.FlatteningSequence\<T, R, E\>) = (r5 I:kotlin.sequences.FlatteningSequence$iterator$1) kotlin.sequences.FlatteningSequence$iterator$1.this$0 kotlin.sequences.FlatteningSequence \l0x002f: INVOKE  (r4 I:kotlin.jvm.functions.Function1) = (r4 I:kotlin.sequences.FlatteningSequence) type: STATIC call: kotlin.sequences.FlatteningSequence.access$getTransformer$p(kotlin.sequences.FlatteningSequence):kotlin.jvm.functions.Function1 A[MD:(kotlin.sequences.FlatteningSequence):kotlin.jvm.functions.Function1 (m)]\l0x0033: INVOKE  (r4 I:java.lang.Object) = (r4 I:kotlin.jvm.functions.Function1), (r0 I:java.lang.Object A[D('element' java.lang.Object)]) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0037: INVOKE  (r3 I:java.lang.Object) = (r3 I:kotlin.jvm.functions.Function1), (r4 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x003b: CHECK_CAST (r3 I:java.util.Iterator) = (java.util.Iterator) (r3 I:??[OBJECT, ARRAY]) \l0x003d: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator A[D('nextItemIterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:316)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0041|LOOP_END\lLOOP:0: B:10:0x0014\-\>B:16:0x0041\l|0x0041: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0014 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0043|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|0x0043: IPUT  \l  (r3 I:java.util.Iterator\<? extends E\> A[D('nextItemIterator' java.util.Iterator)])\l  (r5 I:kotlin.sequences.FlatteningSequence$iterator$1)\l kotlin.sequences.FlatteningSequence$iterator$1.itemIterator java.util.Iterator  (LINE:317)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0045|RETURN\l|0x0045: RETURN  (r1 I:boolean)  (LINE:318)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0020|RETURN\l|0x0020: RETURN  (r2 I:boolean)  (LINE:312)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0046|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0046|RETURN\l|0x0046: RETURN  (r1 I:boolean)  (LINE:322)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private final boolean kotlin.sequences.FlatteningSequence$iterator$1.ensureItemIterator((r5 'this' I:kotlin.sequences.FlatteningSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:16:0x0041 \-\> B:10:0x0014, CROSS_EDGE: B:18:0x0045 \-\> B:1:?, CROSS_EDGE: B:19:0x0046 \-\> B:1:?, CROSS_EDGE: B:8:0x000f \-\> B:10:0x0014, CROSS_EDGE: B:7:0x000e \-\> B:8:0x000f, CROSS_EDGE: B:3:0x0004 \-\> B:7:0x000e\lDebug Info:\l  0x0027\-0x0046: r0 'element' Ljava\/lang\/Object;\l  0x003d\-0x0046: r3 'nextItemIterator' Ljava\/util\/Iterator;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_7;
Node_6 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_23;
Node_9 -> Node_23;
Node_23 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_21;
Node_12 -> Node_13;
Node_13 -> Node_15;
Node_13 -> Node_22[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_10;
Node_16 -> Node_20[style=dashed];
Node_20 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_22 -> Node_14;
Node_14 -> Node_1;
Node_21 -> Node_19;
Node_19 -> Node_1;
Node_7 -> Node_8;
}

