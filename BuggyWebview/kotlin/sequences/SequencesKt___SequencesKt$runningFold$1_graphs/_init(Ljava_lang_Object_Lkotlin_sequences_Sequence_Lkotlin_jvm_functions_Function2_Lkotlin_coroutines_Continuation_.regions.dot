digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt$runningFold$1.\<init\>(Ljava\/lang\/Object;Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function2;Lkotlin\/coroutines\/Continuation;)V" {
subgraph cluster_Region_1991375854 {
label = "R(2:1|(1:1))";
node [shape=record,color=blue];
Node_InsnContainer_1105157994 [shape=record,label="{|super(2, r5)\l}"];
subgraph cluster_Region_1719446612 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0000|r1.$initial = r2\lr1.$this_runningFold = r3\lr1.$operation = r4\l}"];
}
}
Node_4 [shape=record,color=red,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x000a}"];
Node_5 [shape=record,color=red,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.\<init\>((r1v0 'this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[IMMUTABLE_TYPE, THIS]), (r2v0 R A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function2\<? super R, ? super T, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.coroutines.Continuation\<? super kotlin.sequences.SequencesKt___SequencesKt$runningFold$1\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l \-\> 'super' call moved to the top of the method (can break code semantics)\l DEBUG: \l \-\> Multi\-variable search result rejected for r3v0, resolved type: kotlin.sequences.Sequence\<? extends T\>\l \-\> Multi\-variable search result rejected for r4v0, resolved type: kotlin.jvm.functions.Function2\<? super R, ? super T, ? extends R\>\}\lSIGNATURE: (TR;Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function2\<\-TR;\-TT;+TR;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/sequences\/SequencesKt___SequencesKt$runningFold$1;\>;)V\l}"];
MethodNode -> Node_4;Node_6 -> Node_7;
Node_4 -> Node_6;
Node_7 -> Node_5;
}

