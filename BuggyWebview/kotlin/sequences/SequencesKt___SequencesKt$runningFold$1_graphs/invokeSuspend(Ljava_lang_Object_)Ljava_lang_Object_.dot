digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt$runningFold$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_26 [shape=record,label="{26\:\ 0x0006|switch(r8.label) \{\l    case 0: goto L19;\l    case 1: goto L17;\l    case 2: goto L6;\l    default: goto L3;\l\}\l}"];
Node_27 [shape=record,label="{27\:\ 0x0009}"];
Node_28 [shape=record,label="{28\:\ 0x0010|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0011|r1 = r8\ljava.util.Iterator r2 = (java.util.Iterator) r1.L$2\ljava.lang.Object r3 = r1.L$1\lkotlin.sequences.SequenceScope r4 = (kotlin.sequences.SequenceScope) r1.L$0\lkotlin.ResultKt.throwOnFailure(r9)\l}"];
Node_45 [shape=record,label="{45\:\ 0x004d|SYNTHETIC\lPHI: r1 r2 r3 r4 \l  PHI: (r1v4 kotlin.sequences.SequencesKt___SequencesKt$runningFold$1) = (r1v2 kotlin.sequences.SequencesKt___SequencesKt$runningFold$1), (r1v5 kotlin.sequences.SequencesKt___SequencesKt$runningFold$1) binds: [B:34:0x0042, B:29:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v6 java.util.Iterator) = (r2v3 java.util.Iterator), (r2v8 java.util.Iterator) binds: [B:34:0x0042, B:29:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 'accumulator' java.lang.Object) = (r3v2 'accumulator' java.lang.Object), (r3v6 'accumulator' java.lang.Object) binds: [B:34:0x0042, B:29:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v5 '$this$sequence' kotlin.sequences.SequenceScope) = (r4v4 '$this$sequence' kotlin.sequences.SequenceScope), (r4v7 '$this$sequence' kotlin.sequences.SequenceScope) binds: [B:34:0x0042, B:29:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_35 [shape=record,label="{35\:\ 0x004d|LOOP_START\lLOOP:0: B:35:0x004d\-\>B:38:0x006d\lPHI: r3 \l  PHI: (r3v4 'accumulator' java.lang.Object) = (r3v3 'accumulator' java.lang.Object), (r3v5 'accumulator' java.lang.Object) binds: [B:45:0x004d, B:38:0x006d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0051|if (r2.hasNext() == false) goto L14\l}"];
Node_37 [shape=record,label="{37\:\ 0x0053|java.lang.Object r5 = r2.next()\ljava.lang.Object r3 = r1.$operation.invoke(r3, r5)\lr5 = r1\lr1.L$0 = r4\lr1.L$1 = r3\lr1.L$2 = r2\lr1.label = 2\l}"];
Node_38 [shape=record,label="{38\:\ 0x006d|LOOP_END\lLOOP:0: B:35:0x004d\-\>B:38:0x006d\l|if (r4.yield(r3, (kotlin.coroutines.Continuation) r5) != r0) goto L8\l}"];
Node_44 [shape=record,label="{44\:\ 0x006f|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x006f|RETURN\l|return r0\l}"];
Node_43 [shape=record,label="{43\:\ 0x0071|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0071}"];
Node_42 [shape=record,label="{42\:\ 0x0073|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_30 [shape=record,label="{30\:\ 0x0020|r1 = r8\lkotlin.sequences.SequenceScope r2 = (kotlin.sequences.SequenceScope) r1.L$0\lkotlin.ResultKt.throwOnFailure(r9)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0042|PHI: r1 r2 \l  PHI: (r1v2 kotlin.sequences.SequencesKt___SequencesKt$runningFold$1) = (r1v1 kotlin.sequences.SequencesKt___SequencesKt$runningFold$1), (r1v3 kotlin.sequences.SequencesKt___SequencesKt$runningFold$1) binds: [B:32:0x003f, B:30:0x0020] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 '$this$sequence' kotlin.sequences.SequenceScope) = (r2v1 '$this$sequence' kotlin.sequences.SequenceScope), (r2v5 '$this$sequence' kotlin.sequences.SequenceScope) binds: [B:32:0x003f, B:30:0x0020] A[DONT_GENERATE, DONT_INLINE]\l|R r3 = r1.$initial\ljava.util.Iterator r4 = r1.$this_runningFold.iterator()\lr4 = r2\lr2 = r4\l}"];
Node_31 [shape=record,label="{31\:\ 0x0029|kotlin.ResultKt.throwOnFailure(r9)\lr1 = r8\lkotlin.sequences.SequenceScope r2 = (kotlin.sequences.SequenceScope) r1.L$0\lr1.L$0 = r2\lr1.label = 1\l}"];
Node_32 [shape=record,label="{32\:\ 0x003f|if (r2.yield(r1.$initial, r1) != r0) goto L18\l}"];
Node_33 [shape=record,label="{33\:\ 0x0041|RETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.invokeSuspend((r8v0 'this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[IMMUTABLE_TYPE, THIS]), (r9v0 '$result' java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:39:0x006f \-\> B:24:?, BACK_EDGE: B:38:0x006d \-\> B:35:0x004d, CROSS_EDGE: B:42:0x0073 \-\> B:24:?, CROSS_EDGE: B:34:0x0042 \-\> B:35:0x004d, CROSS_EDGE: B:33:0x0041 \-\> B:24:?, CROSS_EDGE: B:32:0x003f \-\> B:34:0x0042\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [2285=4]\}\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_29;
Node_26 -> Node_30;
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_24;
Node_29 -> Node_45;
Node_45 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_43;
Node_37 -> Node_38;
Node_38 -> Node_35;
Node_38 -> Node_44[style=dashed];
Node_44 -> Node_39;
Node_39 -> Node_24;
Node_43 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_24;
Node_30 -> Node_34;
Node_34 -> Node_45;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_24;
}

