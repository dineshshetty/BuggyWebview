digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt$runningFold$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_23 [shape=record,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0004: IGET  (r1 I:int) = (r8 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1) kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.label int  (LINE:2285)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0006|0x0006: SWITCH  (r1 I:??)\l case 0: goto B:31:0x0029\l case 1: goto B:30:0x0020\l case 2: goto B:29:0x0011\l default: goto B:27:0x0009 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0009|0x0009: NEW_INSTANCE  (r9 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:2292)\l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000d: INVOKE  (r9 I:java.lang.IllegalStateException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0010|0x0010: THROW  (r9 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x0011|0x0011: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY])  (LINE:2285)\l0x0012: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$2 java.lang.Object \l0x0014: CHECK_CAST (r2 I:java.util.Iterator) = (java.util.Iterator) (r2 I:??[OBJECT, ARRAY]) \l0x0016: IGET  (r3 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$1 java.lang.Object \l0x0018: IGET  (r4 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0 java.lang.Object \l0x001a: CHECK_CAST (r4 I:kotlin.sequences.SequenceScope) = (kotlin.sequences.SequenceScope) (r4 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r9 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x004d|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x004d|LOOP_START\lLOOP:0: B:35:0x004d\-\>B:38:0x006d\l|0x004d: INVOKE  (r5 I:boolean) = (r2 I:java.util.Iterator A[D('$this$sequence' kotlin.sequences.SequenceScope)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0051|0x0051: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0071 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0053|0x0053: INVOKE  (r5 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0057: IGET  (r6 I:kotlin.jvm.functions.Function2\<R, T, R\>) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$operation kotlin.jvm.functions.Function2  (LINE:2289)\l0x0059: INVOKE  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)]) = \l  (r6 I:kotlin.jvm.functions.Function2)\l  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)])\l  (r5 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x005d: MOVE  (r5 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])  (LINE:2290)\l0x005e: CHECK_CAST (r5 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r5 I:??[OBJECT, ARRAY]) \l0x0060: IPUT  \l  (r4 I:java.lang.Object A[D('$this$sequence' kotlin.sequences.SequenceScope)])\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0 java.lang.Object \l0x0062: IPUT  \l  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)])\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$1 java.lang.Object \l0x0064: IPUT  \l  (r2 I:java.lang.Object)\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$2 java.lang.Object \l0x0066: CONST  (r6 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0067: IPUT  \l  (r6 I:int)\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.label int \l0x0069: INVOKE  (r5 I:java.lang.Object) = \l  (r4 I:kotlin.sequences.SequenceScope A[D('$this$sequence' kotlin.sequences.SequenceScope)])\l  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)])\l  (r5 I:kotlin.coroutines.Continuation)\l type: VIRTUAL call: kotlin.sequences.SequenceScope.yield(java.lang.Object, kotlin.coroutines.Continuation):java.lang.Object A[MD:(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x006d|LOOP_END\lLOOP:0: B:35:0x004d\-\>B:38:0x006d\l|0x006d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x004d \l}"];
Node_44 [shape=record,label="{44\:\ 0x006f|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x006f|RETURN\l|0x006f: RETURN  (r0 I:java.lang.Object)  (LINE:2285)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0071|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0071|0x0071: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:2292)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0073|RETURN\l|0x0073: RETURN  (r0 I:java.lang.Object) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0020|0x0020: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)]) = (r8 I:??[OBJECT, ARRAY]) \l0x0021: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0 java.lang.Object \l0x0023: CHECK_CAST (r2 I:kotlin.sequences.SequenceScope) = (kotlin.sequences.SequenceScope) (r2 I:??[OBJECT, ARRAY]) \l0x0025: INVOKE  (r9 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0042|0x0042: IGET  (r3 I:R) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$initial java.lang.Object  (LINE:2287)\l0x0044: IGET  (r4 I:kotlin.sequences.Sequence\<T\>) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$this_runningFold kotlin.sequences.Sequence  (LINE:2288)\l0x0046: INVOKE  (r4 I:java.util.Iterator) = (r4 I:kotlin.sequences.Sequence) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)]\l0x004a: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x004b: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$sequence' kotlin.sequences.SequenceScope)]) \l0x004c: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('$this$sequence' kotlin.sequences.SequenceScope)]) = (r7 I:??[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0029|0x0029: INVOKE  (r9 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x002c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x002d: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0 java.lang.Object \l0x002f: CHECK_CAST (r2 I:kotlin.sequences.SequenceScope) = (kotlin.sequences.SequenceScope) (r2 I:??[OBJECT, ARRAY]) \l0x0031: IGET  (r3 I:R) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.$initial java.lang.Object  (LINE:2286)\l0x0033: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)]) \l0x0034: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x0036: IPUT  \l  (r2 I:java.lang.Object A[D('$this$sequence' kotlin.sequences.SequenceScope)])\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.L$0 java.lang.Object \l0x0038: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0039: IPUT  \l  (r5 I:int)\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$runningFold$1)])\l kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.label int \l0x003b: INVOKE  (r3 I:java.lang.Object) = \l  (r2 I:kotlin.sequences.SequenceScope A[D('$this$sequence' kotlin.sequences.SequenceScope)])\l  (r3 I:java.lang.Object)\l  (r4 I:kotlin.coroutines.Continuation)\l type: VIRTUAL call: kotlin.sequences.SequenceScope.yield(java.lang.Object, kotlin.coroutines.Continuation):java.lang.Object A[MD:(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x003f|0x003f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0042 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0041|RETURN\l|0x0041: RETURN  (r0 I:java.lang.Object)  (LINE:2285)\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.sequences.SequencesKt___SequencesKt$runningFold$1.invokeSuspend((r8 'this' I:kotlin.sequences.SequencesKt___SequencesKt$runningFold$1 A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:39:0x006f \-\> B:24:?, BACK_EDGE: B:38:0x006d \-\> B:35:0x004d, CROSS_EDGE: B:42:0x0073 \-\> B:24:?, CROSS_EDGE: B:34:0x0042 \-\> B:35:0x004d, CROSS_EDGE: B:33:0x0041 \-\> B:24:?, CROSS_EDGE: B:32:0x003f \-\> B:34:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0020: r1 'this' Lkotlin\/sequences\/SequencesKt___SequencesKt$runningFold$1;\l  0x0018\-0x0020: r3 'accumulator' Ljava\/lang\/Object;\l  0x001c\-0x0020: r4 '$this$sequence' Lkotlin\/sequences\/SequenceScope;\l  0x0012\-0x0020: r9 '$result' Ljava\/lang\/Object;\l  0x0021\-0x0029: r1 'this' Lkotlin\/sequences\/SequencesKt___SequencesKt$runningFold$1;\l  0x0025\-0x0029: r2 '$this$sequence' Lkotlin\/sequences\/SequenceScope;\l  0x0021\-0x0029: r9 '$result' Ljava\/lang\/Object;\l  0x0031\-0x004d: r2 '$this$sequence' Lkotlin\/sequences\/SequenceScope;\l  0x0057\-0x005d: r5 'element' Ljava\/lang\/Object;\l  0x002d\-0x007d: r1 'this' Lkotlin\/sequences\/SequencesKt___SequencesKt$runningFold$1;\l  0x0044\-0x007d: r3 'accumulator' Ljava\/lang\/Object;\l  0x004d\-0x007d: r4 '$this$sequence' Lkotlin\/sequences\/SequenceScope;\l  0x002d\-0x007d: r9 '$result' Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [2285=4]\}\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_23;Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_29;
Node_26 -> Node_30;
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_24;
Node_29 -> Node_45;
Node_45 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_43;
Node_37 -> Node_38;
Node_38 -> Node_35;
Node_38 -> Node_44[style=dashed];
Node_44 -> Node_39;
Node_39 -> Node_24;
Node_43 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_24;
Node_30 -> Node_34;
Node_34 -> Node_45;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_24;
}

