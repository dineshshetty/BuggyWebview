digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1.\<init\>(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function2;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/coroutines\/Continuation;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|r1.$source = r2\lr1.$transform = r3\lr1.$iterator = r4\lsuper(2, r5)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void kotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1.\<init\>((r1v0 'this' kotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1 A[IMMUTABLE_TYPE, THIS]), (r2v0 kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super T, ? extends C\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function1\<? super C, ? extends java.util.Iterator\<? extends R\>\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 kotlin.coroutines.Continuation\<? super kotlin.sequences.SequencesKt__SequencesKt$flatMapIndexed$1\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | TYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r2v0, resolved type: kotlin.sequences.Sequence\<? extends T\>\l \-\> Multi\-variable search result rejected for r3v0, resolved type: kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super T, ? extends C\>\l \-\> Multi\-variable search result rejected for r4v0, resolved type: kotlin.jvm.functions.Function1\<? super C, ? extends java.util.Iterator\<? extends R\>\>\}\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-TT;+TC;\>;Lkotlin\/jvm\/functions\/Function1\<\-TC;+Ljava\/util\/Iterator\<+TR;\>;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/sequences\/SequencesKt__SequencesKt$flatMapIndexed$1;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

