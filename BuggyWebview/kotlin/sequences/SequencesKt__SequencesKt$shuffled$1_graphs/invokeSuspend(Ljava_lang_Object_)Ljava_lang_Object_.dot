digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt$shuffled$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|switch(r9.label) \{\l    case 0: goto L20;\l    case 1: goto L6;\l    default: goto L3;\l\}\l}"];
Node_4 [shape=record,label="{4\:\ 0x0009}"];
Node_5 [shape=record,label="{5\:\ 0x0010|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|r1 = r9\ljava.util.List r2 = (java.util.List) r1.L$1\lkotlin.sequences.SequenceScope r3 = (kotlin.sequences.SequenceScope) r1.L$0\lkotlin.ResultKt.throwOnFailure(r10)\l}"];
Node_21 [shape=record,label="{21\:\ 0x002f|SYNTHETIC\lPHI: r1 r2 r3 \l  PHI: (r1v2 kotlin.sequences.SequencesKt__SequencesKt$shuffled$1) = (r1v1 kotlin.sequences.SequencesKt__SequencesKt$shuffled$1), (r1v3 kotlin.sequences.SequencesKt__SequencesKt$shuffled$1) binds: [B:7:0x001e, B:6:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v3 'buffer' java.util.List) = (r2v2 'buffer' java.util.List), (r2v5 'buffer' java.util.List) binds: [B:7:0x001e, B:6:0x0011] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 '$this$sequence' kotlin.sequences.SequenceScope) = (r3v2 '$this$sequence' kotlin.sequences.SequenceScope), (r3v5 '$this$sequence' kotlin.sequences.SequenceScope) binds: [B:7:0x001e, B:6:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|LOOP_START\lLOOP:0: B:8:0x002f\-\>B:14:0x0062\l}"];
Node_9 [shape=record,label="{9\:\ 0x0038|if ((r2.isEmpty() ^ true) == false) goto L17\l}"];
Node_10 [shape=record,label="{10\:\ 0x003a|int r4 = r1.$random.nextInt(r2.size())\ljava.lang.Object r6 = kotlin.collections.CollectionsKt.removeLast(r2)\l}"];
Node_11 [shape=record,label="{11\:\ 0x004c|if (r4 \>= r2.size()) goto L13\l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|r6 = r2.set(r4, r6)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0054|PHI: r6 \l  PHI: (r6v2 'last' java.lang.Object) = (r6v1 'last' java.lang.Object), (r6v5 'last' java.lang.Object) binds: [B:11:0x004c, B:12:0x004e] A[DONT_GENERATE, DONT_INLINE]\l|r4 = r6\lr1.L$0 = r3\lr1.L$1 = r2\lr1.label = 1\l}"];
Node_14 [shape=record,label="{14\:\ 0x0062|LOOP_END\lLOOP:0: B:8:0x002f\-\>B:14:0x0062\l|if (r3.yield(r4, r1) != r0) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x0064|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0064|RETURN\l|return r0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0066|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0066}"];
Node_18 [shape=record,label="{18\:\ 0x0068|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_7 [shape=record,label="{7\:\ 0x001e|kotlin.ResultKt.throwOnFailure(r10)\lr1 = r9\lkotlin.sequences.SequenceScope r2 = (kotlin.sequences.SequenceScope) r1.L$0\ljava.util.List r3 = kotlin.sequences.SequencesKt.toMutableList(r1.$this_shuffled)\lr3 = r2\lr2 = r3\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.sequences.SequencesKt__SequencesKt$shuffled$1.invokeSuspend((r9v0 'this' kotlin.sequences.SequencesKt__SequencesKt$shuffled$1 A[IMMUTABLE_TYPE, THIS]), (r10v0 '$result' java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0064 \-\> B:1:?, BACK_EDGE: B:14:0x0062 \-\> B:8:0x002f, CROSS_EDGE: B:11:0x004c \-\> B:13:0x0054, CROSS_EDGE: B:18:0x0068 \-\> B:1:?, CROSS_EDGE: B:7:0x001e \-\> B:8:0x002f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_21;
Node_21 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_20;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_8;
Node_14 -> Node_19[style=dashed];
Node_19 -> Node_15;
Node_15 -> Node_1;
Node_20 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_1;
Node_7 -> Node_21;
}

