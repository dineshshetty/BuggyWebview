digraph "CFG forkotlin.sequences.SubSequence.take(I)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r4 I:kotlin.sequences.SubSequence) type: DIRECT call: kotlin.sequences.SubSequence.getCount():int A[MD:():int (m)] (LINE:363)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r5 I:??[int, byte, short, char] A[D('n' int)]) \< (r0 I:??[int, byte, short, char])  \-\> B:13:0x000a \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x0007: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0017: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:kotlin.sequences.SubSequence) =  kotlin.sequences.SubSequence \l0x000c: IGET  (r1 I:kotlin.sequences.Sequence\<T\>) = (r4 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.sequence kotlin.sequences.Sequence \l0x000e: IGET  (r2 I:int) = (r4 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.startIndex int \l0x0010: ARITH  (r3 I:int) = (r2 I:int) + (r5 I:int A[D('n' int)]) \l0x0012: INVOKE  (r0 I:kotlin.sequences.SubSequence), (r1 I:kotlin.sequences.Sequence), (r2 I:int), (r3 I:int) type: DIRECT call: kotlin.sequences.SubSequence.\<init\>(kotlin.sequences.Sequence, int, int):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, int, int):void (m)]\l0x0015: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) \l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.SubSequence.take((r4 'this' I:kotlin.sequences.SubSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000a \-\> B:14:0x0017\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)Lkotlin\/sequences\/Sequence\<TT;\>;\lDebug Info:\l  \-1 \-0x0017: r5 'n' I\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.take(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

