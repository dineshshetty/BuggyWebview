digraph "CFG forkotlin.sequences.SubSequence.\<init\>(Lkotlin\/sequences\/Sequence;II)V" {
subgraph cluster_Region_658838460 {
label = "R(2:1|(2:(2:18|19)|(1:(2:(2:15|16)|(1:(2:(1:11)|(2:13|14)))))))";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"sequence\")\lr3.sequence = r4\lr3.startIndex = r5\lr3.endIndex = r6\l}"];
subgraph cluster_Region_608954158 {
label = "R(2:(2:18|19)|(1:(2:(2:15|16)|(1:(2:(1:11)|(2:13|14))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_28576693 {
label = "IF [B:28:0x0016] THEN: R(2:18|19) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0016|PHI: r2 \l  PHI: (r2v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r5 \>= 0) == false) goto L18\l}"];
subgraph cluster_Region_1391847359 {
label = "R(2:18|19)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0067}"];
Node_43 [shape=record,label="{43\:\ 0x0082|throw new java.lang.IllegalArgumentException((\"startIndex should be non\-negative, but is \" + r5).toString())\l}"];
}
}
subgraph cluster_Region_1570952878 {
label = "R(1:(2:(2:15|16)|(1:(2:(1:11)|(2:13|14)))))";
node [shape=record,color=blue];
subgraph cluster_Region_648755363 {
label = "R(2:(2:15|16)|(1:(2:(1:11)|(2:13|14))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_132347488 {
label = "IF [B:32:0x001d] THEN: R(2:15|16) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x001d|PHI: r2 \l  PHI: (r2v4 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r6 \>= 0) == false) goto L15\l}"];
subgraph cluster_Region_2052501820 {
label = "R(2:15|16)";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x004b}"];
Node_41 [shape=record,label="{41\:\ 0x0066|throw new java.lang.IllegalArgumentException((\"endIndex should be non\-negative, but is \" + r6).toString())\l}"];
}
}
subgraph cluster_Region_822747006 {
label = "R(1:(2:(1:11)|(2:13|14)))";
node [shape=record,color=blue];
subgraph cluster_Region_1310410716 {
label = "R(2:(1:11)|(2:13|14))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1389852681 {
label = "IF [B:36:0x0023] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0023|PHI: r0 \l  PHI: (r0v8 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r6 \>= r5) != false) goto L11\l}"];
subgraph cluster_Region_491256894 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0026|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_2086134023 {
label = "R(2:13|14)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0027}"];
Node_39 [shape=record,label="{39\:\ 0x004a|throw new java.lang.IllegalArgumentException((\"endIndex should be not less than startIndex, but was \" + r6 + \" \< \" + r5).toString())\l}"];
}
}
}
}
}
}
}
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0011}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0013}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0018}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x001a}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x001f}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0022}"];
Node_23 [shape=record,color=red,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x001c}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0015}"];
MethodNode[shape=record,label="{public void kotlin.sequences.SubSequence.\<init\>((r3v0 'this' kotlin.sequences.SubSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'sequence' kotlin.sequences.Sequence\<? extends T\> A[D('sequence' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'startIndex' int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'endIndex' int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x004a \-\> B:23:?, CROSS_EDGE: B:33:0x001f \-\> B:36:0x0023, CROSS_EDGE: B:41:0x0066 \-\> B:23:?, CROSS_EDGE: B:31:0x001c \-\> B:32:0x001d, CROSS_EDGE: B:43:0x0082 \-\> B:23:?, CROSS_EDGE: B:27:0x0015 \-\> B:28:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<+TT;\>;II)V\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r4v0, resolved type: kotlin.sequences.Sequence\<? extends T\>\}\l}"];
MethodNode -> Node_22;Node_24 -> Node_25;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_23;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_23;
Node_36 -> Node_37;
Node_36 -> Node_38[style=dashed];
Node_37 -> Node_23;
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_22 -> Node_24;
Node_25 -> Node_26;
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_33 -> Node_35;
Node_33 -> Node_36;
Node_35 -> Node_36;
Node_31 -> Node_32;
Node_27 -> Node_28;
}

