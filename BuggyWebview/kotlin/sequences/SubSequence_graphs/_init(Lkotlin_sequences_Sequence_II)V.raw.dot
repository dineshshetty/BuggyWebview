digraph "CFG forkotlin.sequences.SubSequence.\<init\>(Lkotlin\/sequences\/Sequence;II)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"sequence\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('sequence' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r3 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:348)\l0x0008: IPUT  (r4 I:kotlin.sequences.Sequence\<T\> A[D('sequence' kotlin.sequences.Sequence)]), (r3 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.sequence kotlin.sequences.Sequence  (LINE:349)\l0x000a: IPUT  (r5 I:int A[D('startIndex' int)]), (r3 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.startIndex int  (LINE:350)\l0x000c: IPUT  (r6 I:int A[D('endIndex' int)]), (r3 I:kotlin.sequences.SubSequence) kotlin.sequences.SubSequence.endIndex int  (LINE:351)\l0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:355)\l0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|0x0011: IF  (r5 I:??[int, byte, short, char] A[D('startIndex' int)]) \< (0 ??[int, byte, short, char])  \-\> B:27:0x0015 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|0x0016: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0067 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|0x0018: IF  (r6 I:??[int, byte, short, char] A[D('endIndex' int)]) \< (0 ??[int, byte, short, char])  \-\> B:31:0x001c  (LINE:356)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001a|0x001a: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x004b \l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|0x001f: IF  (r6 I:??[int, byte, short, char] A[D('endIndex' int)]) \< (r5 I:??[int, byte, short, char] A[D('startIndex' int)])  \-\> B:35:0x0022  (LINE:357)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|0x0022: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0027 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0026|RETURN\l|0x0026: RETURN    (LINE:348)\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0027|0x0027: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:681)\l0x0028: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:357)\l0x002a: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x002d: CONST_STR  (r2 I:java.lang.String) =  \"endIndex should be not less than startIndex, but was \" \l0x002f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0032: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:int A[D('endIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0035: CONST_STR  (r2 I:java.lang.String) =  \" \< \" \l0x0037: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003a: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x003d: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SubSequence$3' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0041: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0043: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0047: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x004a|0x004a: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_40 [shape=record,label="{40\:\ 0x004b|0x004b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:681)\l0x004c: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:356)\l0x004e: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0051: CONST_STR  (r2 I:java.lang.String) =  \"endIndex should be non\-negative, but is \" \l0x0053: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0056: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:int A[D('endIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0059: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SubSequence$2' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005d: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005f: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0063: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0066|0x0066: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|0x001c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0067|0x0067: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:681)\l0x0068: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:355)\l0x006a: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x006d: CONST_STR  (r2 I:java.lang.String) =  \"startIndex should be non\-negative, but is \" \l0x006f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0072: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0075: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-SubSequence$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0079: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007b: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x007f: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0082|0x0082: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.SubSequence.\<init\>((r3 'this' I:kotlin.sequences.SubSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r4 I:kotlin.sequences.Sequence\<? extends T\> A[D('sequence' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x004a \-\> B:23:?, CROSS_EDGE: B:33:0x001f \-\> B:36:0x0023, CROSS_EDGE: B:41:0x0066 \-\> B:23:?, CROSS_EDGE: B:31:0x001c \-\> B:32:0x001d, CROSS_EDGE: B:43:0x0082 \-\> B:23:?, CROSS_EDGE: B:27:0x0015 \-\> B:28:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x0041: r0 '$i$a$\-require\-SubSequence$3' I\l  0x004c\-0x005d: r0 '$i$a$\-require\-SubSequence$2' I\l  0x0068\-0x0079: r0 '$i$a$\-require\-SubSequence$1' I\l  \-1 \-0x0082: r4 'sequence' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0082: r5 'startIndex' I\l  \-1 \-0x0082: r6 'endIndex' I\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<+TT;\>;II)V\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_42;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_35;
Node_33 -> Node_36[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_23;
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_40 -> Node_41;
Node_41 -> Node_23;
Node_31 -> Node_32;
Node_42 -> Node_43;
Node_43 -> Node_23;
Node_27 -> Node_28;
}

