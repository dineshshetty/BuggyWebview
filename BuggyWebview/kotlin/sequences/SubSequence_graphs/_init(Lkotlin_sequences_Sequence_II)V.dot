digraph "CFG forkotlin.sequences.SubSequence.\<init\>(Lkotlin\/sequences\/Sequence;II)V" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"sequence\")\lr3.sequence = r4\lr3.startIndex = r5\lr3.endIndex = r6\lr0 = true\l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|if (r5 \< 0) goto L20\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|r2 = true\l}"];
Node_28 [shape=record,label="{28\:\ 0x0016|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v9 boolean) binds: [B:27:0x0015, B:26:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L18\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|if (r6 \< 0) goto L17\l}"];
Node_30 [shape=record,label="{30\:\ 0x001a|r2 = true\l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|PHI: r2 \l  PHI: (r2v4 boolean) = (r2v3 boolean), (r2v8 boolean) binds: [B:31:0x001c, B:30:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L15\l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|if (r6 \< r5) goto L9\l}"];
Node_35 [shape=record,label="{35\:\ 0x0022|r0 = false\l}"];
Node_36 [shape=record,label="{36\:\ 0x0023|PHI: r0 \l  PHI: (r0v8 boolean) = (r0v1 boolean), (r0v12 boolean) binds: [B:33:0x001f, B:35:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L13\l}"];
Node_37 [shape=record,label="{37\:\ 0x0026|RETURN\l|return\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0027|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"endIndex should be not less than startIndex, but was \")\lr1.append(r6)\lr1.append(\" \< \")\lr1.append(r5)\l}"];
Node_39 [shape=record,label="{39\:\ 0x004a|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_40 [shape=record,label="{40\:\ 0x004b|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"endIndex should be non\-negative, but is \")\lr1.append(r6)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0066|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|r2 = false\l}"];
Node_42 [shape=record,label="{42\:\ 0x0067|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"startIndex should be non\-negative, but is \")\lr1.append(r5)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0082|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|r2 = false\l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.SubSequence.\<init\>((r3v0 'this' kotlin.sequences.SubSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'sequence' kotlin.sequences.Sequence\<? extends T\> A[D('sequence' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'startIndex' int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'endIndex' int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:39:0x004a \-\> B:23:?, CROSS_EDGE: B:33:0x001f \-\> B:36:0x0023, CROSS_EDGE: B:41:0x0066 \-\> B:23:?, CROSS_EDGE: B:31:0x001c \-\> B:32:0x001d, CROSS_EDGE: B:43:0x0082 \-\> B:23:?, CROSS_EDGE: B:27:0x0015 \-\> B:28:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<+TT;\>;II)V\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r4v0, resolved type: kotlin.sequences.Sequence\<? extends T\>\}\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_42;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_40;
Node_33 -> Node_35;
Node_33 -> Node_36[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_23;
Node_38 -> Node_39;
Node_39 -> Node_23;
Node_40 -> Node_41;
Node_41 -> Node_23;
Node_31 -> Node_32;
Node_42 -> Node_43;
Node_43 -> Node_23;
Node_27 -> Node_28;
}

