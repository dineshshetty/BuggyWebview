digraph "CFG forkotlin.sequences.SubSequence.drop(I)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_995766085 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|return r5 \>= getCount() ? kotlin.sequences.SequencesKt.emptySequence() : new kotlin.sequences.SubSequence(r4.sequence, r4.startIndex + r5, r4.endIndex)\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0006}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|SYNTHETIC\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x000b}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0019|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.SubSequence.drop((r4v0 'this' kotlin.sequences.SubSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r5v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000b \-\> B:14:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)Lkotlin\/sequences\/Sequence\<TT;\>;\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.drop(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_13;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

