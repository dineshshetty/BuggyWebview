digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.\<init\>(Lkotlin\/sequences\/Sequence;Lkotlin\/jvm\/functions\/Function2;Lkotlin\/coroutines\/Continuation;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: IPUT  (r2 I:kotlin.sequences.Sequence\<T\>), (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2) kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$this_zipWithNext kotlin.sequences.Sequence \l0x0002: IPUT  (r3 I:kotlin.jvm.functions.Function2\<T, T, R\>), (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2) kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$transform kotlin.jvm.functions.Function2 \l0x0004: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0005: INVOKE  (r1 I:kotlin.coroutines.jvm.internal.RestrictedSuspendLambda), (r0 I:int), (r4 I:kotlin.coroutines.Continuation) type: DIRECT call: kotlin.coroutines.jvm.internal.RestrictedSuspendLambda.\<init\>(int, kotlin.coroutines.Continuation):void A[MD:(int, kotlin.coroutines.Continuation\<java.lang.Object\>):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0008|RETURN\l|0x0008: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.\<init\>((r1 'this' I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.sequences.Sequence\<? extends T\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function2\<? super T, ? super T, ? extends R\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.coroutines.Continuation\<? super kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2\> A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/sequences\/Sequence\<+TT;\>;Lkotlin\/jvm\/functions\/Function2\<\-TT;\-TT;+TR;\>;Lkotlin\/coroutines\/Continuation\<\-Lkotlin\/sequences\/SequencesKt___SequencesKt$zipWithNext$2;\>;)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

