digraph "CFG forkotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0004: IGET  (r1 I:int) = (r10 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2) kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.label int  (LINE:2858)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0006|0x0006: SWITCH  (r1 I:??)\l case 0: goto B:31:0x0020\l case 1: goto B:30:0x0011\l default: goto B:28:0x0009 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0009|0x0009: NEW_INSTANCE  (r11 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:2867)\l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000d: INVOKE  (r11 I:java.lang.IllegalStateException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|0x0010: THROW  (r11 I:java.lang.Throwable) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0011|0x0011: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY])  (LINE:2858)\l0x0012: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$2 java.lang.Object \l0x0014: IGET  (r3 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$1 java.lang.Object \l0x0016: CHECK_CAST (r3 I:java.util.Iterator) = (java.util.Iterator) (r3 I:??[OBJECT, ARRAY]) \l0x0018: IGET  (r4 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0 java.lang.Object \l0x001a: CHECK_CAST (r4 I:kotlin.sequences.SequenceScope) = (kotlin.sequences.SequenceScope) (r4 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r11 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x003e|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x003e|LOOP_START\lLOOP:0: B:36:0x003e\-\>B:41:0x0061\l|0x003e: INVOKE  (r5 I:boolean) = (r3 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2862)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0042|0x0042: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0064 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0044|0x0044: INVOKE  (r5 I:java.lang.Object) = (r3 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2863)\l0x0048: IGET  (r6 I:kotlin.jvm.functions.Function2\<T, T, R\>) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$transform kotlin.jvm.functions.Function2  (LINE:2864)\l0x004a: INVOKE  (r6 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function2)\l  (r2 I:java.lang.Object A[D('current' java.lang.Object)])\l  (r5 I:java.lang.Object A[D('next' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x004e: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)]) \l0x004f: CHECK_CAST (r7 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r7 I:??[OBJECT, ARRAY]) \l0x0051: IPUT  \l  (r4 I:java.lang.Object A[D('$this$result' kotlin.sequences.SequenceScope)])\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0 java.lang.Object \l0x0053: IPUT  \l  (r3 I:java.lang.Object A[D('iterator' java.util.Iterator)])\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$1 java.lang.Object \l0x0055: IPUT  \l  (r5 I:java.lang.Object A[D('next' java.lang.Object)])\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$2 java.lang.Object \l0x0057: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0058: IPUT  \l  (r8 I:int)\l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.label int \l0x005a: INVOKE  (r2 I:java.lang.Object A[D('current' java.lang.Object)]) = \l  (r4 I:kotlin.sequences.SequenceScope A[D('$this$result' kotlin.sequences.SequenceScope)])\l  (r6 I:java.lang.Object)\l  (r7 I:kotlin.coroutines.Continuation)\l type: VIRTUAL call: kotlin.sequences.SequenceScope.yield(java.lang.Object, kotlin.coroutines.Continuation):java.lang.Object A[MD:(T, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x005e|0x005e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('current' java.lang.Object)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0061 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0061|LOOP_END\lLOOP:0: B:36:0x003e\-\>B:41:0x0061\l|0x0061: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('next' java.lang.Object)])  (LINE:2864)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0060|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0060|RETURN\l|0x0060: RETURN  (r0 I:java.lang.Object)  (LINE:2858)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0064|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0064|0x0064: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit  (LINE:2867)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0066|RETURN\l|0x0066: RETURN  (r0 I:java.lang.Object) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0020|0x0020: INVOKE  (r11 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0023: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY]) \l0x0024: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.L$0 java.lang.Object \l0x0026: CHECK_CAST (r2 I:kotlin.sequences.SequenceScope) = (kotlin.sequences.SequenceScope) (r2 I:??[OBJECT, ARRAY]) \l0x0028: IGET  (r3 I:kotlin.sequences.Sequence\<T\>) = \l  (r1 I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[D('this' kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2)])\l kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.$this_zipWithNext kotlin.sequences.Sequence  (LINE:2859)\l0x002a: INVOKE  (r3 I:java.util.Iterator) = (r3 I:kotlin.sequences.Sequence) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)]\l0x002e: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2860)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0032|0x0032: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0037 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|0x0034: SGET  (r0 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_34 [shape=record,label="{34\:\ 0x0036|RETURN\l|0x0036: RETURN  (r0 I:java.lang.Object) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0037|0x0037: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2861)\l0x003b: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x003c: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$result' kotlin.sequences.SequenceScope)]) \l0x003d: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('$this$result' kotlin.sequences.SequenceScope)]) = (r9 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2.invokeSuspend((r10 'this' I:kotlin.sequences.SequencesKt___SequencesKt$zipWithNext$2 A[IMMUTABLE_TYPE, THIS]), (r11 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x0060 \-\> B:25:?, BACK_EDGE: B:41:0x0061 \-\> B:36:0x003e, CROSS_EDGE: B:44:0x0066 \-\> B:25:?, CROSS_EDGE: B:34:0x0036 \-\> B:25:?, CROSS_EDGE: B:35:0x0037 \-\> B:36:0x003e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0020: r1 'this' Lkotlin\/sequences\/SequencesKt___SequencesKt$zipWithNext$2;\l  0x0014\-0x0020: r2 'next' Ljava\/lang\/Object;\l  0x0018\-0x0020: r3 'iterator' Ljava\/util\/Iterator;\l  0x001c\-0x0020: r4 '$this$result' Lkotlin\/sequences\/SequenceScope;\l  0x0012\-0x0020: r11 '$result' Ljava\/lang\/Object;\l  0x0028\-0x003e: r2 '$this$result' Lkotlin\/sequences\/SequenceScope;\l  0x003e\-0x005e: r2 'current' Ljava\/lang\/Object;\l  0x0048\-0x0062: r5 'next' Ljava\/lang\/Object;\l  0x0062\-0x0063: r2 'next' Ljava\/lang\/Object;\l  0x0024\-0x006f: r1 'this' Lkotlin\/sequences\/SequencesKt___SequencesKt$zipWithNext$2;\l  0x0063\-0x006f: r2 'current' Ljava\/lang\/Object;\l  0x002e\-0x006f: r3 'iterator' Ljava\/util\/Iterator;\l  0x003e\-0x006f: r4 '$this$result' Lkotlin\/sequences\/SequenceScope;\l  0x0024\-0x006f: r11 '$result' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_30;
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_25;
Node_30 -> Node_47;
Node_47 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_45;
Node_38 -> Node_39;
Node_39 -> Node_41;
Node_39 -> Node_46[style=dashed];
Node_41 -> Node_36;
Node_46 -> Node_40;
Node_40 -> Node_25;
Node_45 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_25;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_25;
Node_35 -> Node_47;
}

