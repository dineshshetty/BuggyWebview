digraph "CFG forkotlin.sequences.MergingSequence$iterator$1.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.sequences.MergingSequence\<T1, T2, V\>) = (r3 I:kotlin.sequences.MergingSequence$iterator$1) kotlin.sequences.MergingSequence$iterator$1.this$0 kotlin.sequences.MergingSequence  (LINE:277)\l0x0002: INVOKE  (r0 I:kotlin.jvm.functions.Function2) = (r0 I:kotlin.sequences.MergingSequence) type: STATIC call: kotlin.sequences.MergingSequence.access$getTransform$p(kotlin.sequences.MergingSequence):kotlin.jvm.functions.Function2 A[MD:(kotlin.sequences.MergingSequence):kotlin.jvm.functions.Function2 (m)]\l0x0006: IGET  (r1 I:java.util.Iterator\<T1\>) = (r3 I:kotlin.sequences.MergingSequence$iterator$1) kotlin.sequences.MergingSequence$iterator$1.iterator1 java.util.Iterator \l0x0008: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x000c: IGET  (r2 I:java.util.Iterator\<T2\>) = (r3 I:kotlin.sequences.MergingSequence$iterator$1) kotlin.sequences.MergingSequence$iterator$1.iterator2 java.util.Iterator \l0x000e: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0012: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function2), (r1 I:java.lang.Object), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0016|RETURN\l|0x0016: RETURN  (r0 I:V) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public V kotlin.sequences.MergingSequence$iterator$1.next((r3 'this' I:kotlin.sequences.MergingSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lTYPE_VARS: EMPTY\lSIGNATURE: ()TV;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.next():E\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

