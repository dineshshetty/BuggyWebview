digraph "CFG forkotlin.sequences.DropWhileSequence$iterator$1.drop()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|LOOP_START\lLOOP:0: B:2:0x0000\-\>B:5:0x001e\l|0x0000: IGET  (r0 I:java.util.Iterator\<T\>) = (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.iterator java.util.Iterator  (LINE:529)\l0x0002: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0026 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: IGET  (r0 I:java.util.Iterator\<T\>) = (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.iterator java.util.Iterator  (LINE:530)\l0x000a: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x000e: IGET  (r1 I:kotlin.sequences.DropWhileSequence\<T\>) = (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.this$0 kotlin.sequences.DropWhileSequence  (LINE:531)\l0x0010: INVOKE  (r1 I:kotlin.jvm.functions.Function1) = (r1 I:kotlin.sequences.DropWhileSequence) type: STATIC call: kotlin.sequences.DropWhileSequence.access$getPredicate$p(kotlin.sequences.DropWhileSequence):kotlin.jvm.functions.Function1 A[MD:(kotlin.sequences.DropWhileSequence):kotlin.jvm.functions.Function1 (m)]\l0x0014: INVOKE  (r1 I:java.lang.Object) = (r1 I:kotlin.jvm.functions.Function1), (r0 I:java.lang.Object A[D('item' java.lang.Object)]) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0018: CHECK_CAST (r1 I:java.lang.Boolean) = (java.lang.Boolean) (r1 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x001e|LOOP_END\lLOOP:0: B:2:0x0000\-\>B:5:0x001e\l|0x001e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:2:0x0000 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x0020|0x0020: IPUT  (r0 I:T A[D('item' java.lang.Object)]), (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.nextItem java.lang.Object  (LINE:532)\l0x0022: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:533)\l0x0023: IPUT  (r1 I:int), (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.dropState int \l}"];
Node_7 [shape=record,label="{7\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:534)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0026|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x0026|0x0026: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('item' java.lang.Object)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:537)\l0x0027: IPUT  (r0 I:int), (r2 I:kotlin.sequences.DropWhileSequence$iterator$1) kotlin.sequences.DropWhileSequence$iterator$1.dropState int \l}"];
Node_9 [shape=record,label="{9\:\ 0x0029|RETURN\l|0x0029: RETURN    (LINE:538)\l}"];
MethodNode[shape=record,label="{private final void kotlin.sequences.DropWhileSequence$iterator$1.drop((r2 'this' I:kotlin.sequences.DropWhileSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:5:0x001e \-\> B:2:0x0000, CROSS_EDGE: B:9:0x0029 \-\> B:1:?\lDebug Info:\l  0x000e\-0x0026: r0 'item' Ljava\/lang\/Object;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_2;
Node_5 -> Node_11[style=dashed];
Node_11 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_10 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

