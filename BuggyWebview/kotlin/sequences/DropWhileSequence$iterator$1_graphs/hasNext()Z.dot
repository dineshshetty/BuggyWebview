digraph "CFG forkotlin.sequences.DropWhileSequence$iterator$1.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000}"];
Node_3 [shape=record,label="{3\:\ 0x0003|if (r2.dropState != (\-1)) goto L4\l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|drop()\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008}"];
Node_6 [shape=record,label="{6\:\ 0x000b|if (r2.dropState == 1) goto L11\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d}"];
Node_8 [shape=record,label="{8\:\ 0x0013|if (r2.iterator.hasNext() == false) goto L8\l}"];
Node_10 [shape=record,label="{10\:\ 0x0016|RETURN\lORIG_RETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean kotlin.sequences.DropWhileSequence$iterator$1.hasNext((r2v0 'this' kotlin.sequences.DropWhileSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:8:0x0013 \-\> B:11:0x0017, CROSS_EDGE: B:6:0x000b \-\> B:11:0x0017, CROSS_EDGE: B:3:0x0003 \-\> B:5:0x0008\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_12;
Node_7 -> Node_8;
Node_8 -> Node_10;
Node_8 -> Node_13[style=dashed];
Node_10 -> Node_1;
Node_13 -> Node_1;
Node_12 -> Node_1;
}

