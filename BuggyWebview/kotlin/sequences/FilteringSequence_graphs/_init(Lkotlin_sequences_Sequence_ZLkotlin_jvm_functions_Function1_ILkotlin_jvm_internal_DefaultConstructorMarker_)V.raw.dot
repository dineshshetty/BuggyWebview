digraph "CFG forkotlin.sequences.FilteringSequence.\<init\>(Lkotlin\/sequences\/Sequence;ZLkotlin\/jvm\/functions\/Function1;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:157)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:159)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  \l  (r0 I:kotlin.sequences.FilteringSequence)\l  (r1 I:kotlin.sequences.Sequence)\l  (r2 I:boolean)\l  (r3 I:kotlin.jvm.functions.Function1)\l type: DIRECT call: kotlin.sequences.FilteringSequence.\<init\>(kotlin.sequences.Sequence, boolean, kotlin.jvm.functions.Function1):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, boolean, kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\>):void (m)] (LINE:157)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:198)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlin.sequences.FilteringSequence.\<init\>((r0 'this' I:kotlin.sequences.FilteringSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlin.sequences.Sequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

