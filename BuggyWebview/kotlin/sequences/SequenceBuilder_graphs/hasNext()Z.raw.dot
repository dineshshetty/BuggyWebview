digraph "CFG forkotlin.sequences.SequenceBuilderIterator.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|LOOP_START\lLOOP:0: B:2:0x0000\-\>B:14:0x0021\l|0x0001: IGET  (r0 I:int) = (r3 I:kotlin.sequences.SequenceBuilderIterator) kotlin.sequences.SequenceBuilderIterator.state int  (LINE:110)\l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0005|0x0005: SWITCH  (r0 I:??)\l case 0: goto B:20:0x0021\l case 1: goto B:9:0x0010\l case 2: goto B:17:0x000f\l case 3: goto B:17:0x000f\l case 4: goto B:16:0x000d\l default: goto B:15:0x0008 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0010|0x0010: IGET  (r0 I:java.util.Iterator\<? extends T\>) = (r3 I:kotlin.sequences.SequenceBuilderIterator) kotlin.sequences.SequenceBuilderIterator.nextIterator java.util.Iterator  (LINE:113)\l0x0012: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0015: INVOKE  (r0 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001f \l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: IPUT  (r1 I:java.util.Iterator\<? extends T\>), (r3 I:kotlin.sequences.SequenceBuilderIterator) kotlin.sequences.SequenceBuilderIterator.nextIterator java.util.Iterator  (LINE:117)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0021|LOOP_END\lLOOP:0: B:2:0x0000\-\>B:14:0x0021\l|0x0021: CONST  (r0 I:??[int, float, short, byte, char]) = (5 ??[int, float, short, byte, char])  (LINE:124)\l0x0022: IPUT  (r0 I:int), (r3 I:kotlin.sequences.SequenceBuilderIterator) kotlin.sequences.SequenceBuilderIterator.state int \l0x0024: IGET  (r0 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\>) = (r3 I:kotlin.sequences.SequenceBuilderIterator) kotlin.sequences.SequenceBuilderIterator.nextStep kotlin.coroutines.Continuation  (LINE:125)\l0x0026: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0029: IPUT  (r1 I:kotlin.coroutines.Continuation\<? super kotlin.Unit\>), (r3 I:kotlin.sequences.SequenceBuilderIterator) kotlin.sequences.SequenceBuilderIterator.nextStep kotlin.coroutines.Continuation  (LINE:126)\l0x002b: SGET  (r1 I:kotlin.Result$Companion) =  kotlin.Result.Companion kotlin.Result$Companion  (LINE:127)\l0x002d: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l0x002f: INVOKE  (r1 I:java.lang.Object) = (r1 I:java.lang.Object) type: STATIC call: kotlin.Result.constructor\-impl(java.lang.Object):java.lang.Object A[MD:\<T\>:(java.lang.Object):java.lang.Object (m)]\l0x0033: INVOKE  (r0 I:kotlin.coroutines.Continuation A[D('step' kotlin.coroutines.Continuation)]), (r1 I:java.lang.Object) type: INTERFACE call: kotlin.coroutines.Continuation.resumeWith(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001b|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|0x001b: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:114)\l0x001c: IPUT  (r0 I:int), (r3 I:kotlin.sequences.SequenceBuilderIterator) kotlin.sequences.SequenceBuilderIterator.state int \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|RETURN\l|0x001e: RETURN  (r2 I:boolean)  (LINE:115)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|SYNTHETIC\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r0 I:java.lang.Throwable) = (r3 I:kotlin.sequences.SequenceBuilderIterator) type: DIRECT call: kotlin.sequences.SequenceBuilderIterator.exceptionalState():java.lang.Throwable A[MD:():java.lang.Throwable (m)] (LINE:121)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|SYNTHETIC\l}"];
Node_6 [shape=record,label="{6\:\ 0x000d|RETURN\l|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:119)\l0x000e: RETURN  (r0 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|SYNTHETIC\l}"];
Node_8 [shape=record,label="{8\:\ 0x000f|RETURN\l|0x000f: RETURN  (r2 I:boolean)  (LINE:120)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0021|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public boolean kotlin.sequences.SequenceBuilderIterator.hasNext((r3 'this' I:kotlin.sequences.SequenceBuilderIterator\<T\> A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:7:0x000e \-\> B:1:?, CROSS_EDGE: B:8:0x000f \-\> B:1:?, CROSS_EDGE: B:12:0x001e \-\> B:1:?, BACK_EDGE: B:14:0x0021 \-\> B:2:0x0000, CROSS_EDGE: B:3:0x0005 \-\> B:14:0x0021\lDebug Info:\l  0x0029\-0x0036: r0 'step' Lkotlin\/coroutines\/Continuation;\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_9;
Node_3 -> Node_15;
Node_3 -> Node_16;
Node_3 -> Node_17;
Node_3 -> Node_20;
Node_9 -> Node_10;
Node_10 -> Node_13;
Node_10 -> Node_18[style=dashed];
Node_13 -> Node_19;
Node_19 -> Node_14;
Node_14 -> Node_2;
Node_18 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_15 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_16 -> Node_6;
Node_6 -> Node_1;
Node_17 -> Node_8;
Node_8 -> Node_1;
Node_20 -> Node_14;
}

