digraph "CFG forkotlin.sequences.TakeWhileSequence$iterator$1.next()Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:kotlin.sequences.TakeWhileSequence$iterator$1) kotlin.sequences.TakeWhileSequence$iterator$1.nextState int  (LINE:453)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: INVOKE  (r3 I:kotlin.sequences.TakeWhileSequence$iterator$1) type: DIRECT call: kotlin.sequences.TakeWhileSequence$iterator$1.calcNext():void A[MD:():void (m)] (LINE:454)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IGET  (r0 I:int) = (r3 I:kotlin.sequences.TakeWhileSequence$iterator$1) kotlin.sequences.TakeWhileSequence$iterator$1.nextState int  (LINE:455)\l}"];
Node_6 [shape=record,label="{6\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0015 \l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|0x000c: IGET  (r0 I:T) = (r3 I:kotlin.sequences.TakeWhileSequence$iterator$1) kotlin.sequences.TakeWhileSequence$iterator$1.nextItem java.lang.Object  (LINE:458)\l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:461)\l0x0010: IPUT  (r2 I:T), (r3 I:kotlin.sequences.TakeWhileSequence$iterator$1) kotlin.sequences.TakeWhileSequence$iterator$1.nextItem java.lang.Object \l0x0012: IPUT  (r1 I:int), (r3 I:kotlin.sequences.TakeWhileSequence$iterator$1) kotlin.sequences.TakeWhileSequence$iterator$1.nextState int  (LINE:462)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:T A[D('result' java.lang.Object)])  (LINE:463)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException A[D('result' java.lang.Object)]) =  java.util.NoSuchElementException  (LINE:456)\l0x0017: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x001a|0x001a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public T kotlin.sequences.TakeWhileSequence$iterator$1.next((r3 'this' I:kotlin.sequences.TakeWhileSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x001a \-\> B:1:?, CROSS_EDGE: B:3:0x0003 \-\> B:5:0x0008\lDebug Info:\l  0x000f\-0x0015: r0 'result' Ljava\/lang\/Object;\lTYPE_VARS: EMPTY\lSIGNATURE: ()TT;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.next():E\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

