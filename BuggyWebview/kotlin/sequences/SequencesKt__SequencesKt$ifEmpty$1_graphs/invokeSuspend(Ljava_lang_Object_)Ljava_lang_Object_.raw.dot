digraph "CFG forkotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: INVOKE  (r0 I:java.lang.Object) =  type: STATIC call: kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED():java.lang.Object A[MD:():java.lang.Object (m)]\l0x0004: IGET  (r1 I:int) = (r6 I:kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1) kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.label int  (LINE:66)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0006|0x0006: SWITCH  (r1 I:??)\l case 0: goto B:30:0x001b\l case 1: goto B:29:0x0016\l case 2: goto B:28:0x0011\l default: goto B:26:0x0009 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0009|0x0009: NEW_INSTANCE  (r7 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:73)\l0x000b: CONST_STR  (r0 I:java.lang.String) =  \"call to 'resume' before 'invoke' with coroutine\" \l0x000d: INVOKE  (r7 I:java.lang.IllegalStateException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0010|0x0010: THROW  (r7 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|0x0011: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY])  (LINE:66)\l0x0012: INVOKE  (r7 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0055|0x0055: SGET  (r1 I:kotlin.Unit) =  kotlin.Unit.INSTANCE kotlin.Unit \l}"];
Node_43 [shape=record,label="{43\:\ 0x0057|RETURN\l|0x0057: RETURN  (r1 I:java.lang.Object) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0016|0x0016: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)]) = (r6 I:??[OBJECT, ARRAY]) \l0x0017: INVOKE  (r7 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x001b|0x001b: INVOKE  (r7 I:java.lang.Object A[D('$result' java.lang.Object)]) type: STATIC call: kotlin.ResultKt.throwOnFailure(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x001e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY]) \l0x001f: IGET  (r2 I:java.lang.Object) = \l  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])\l kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.L$0 java.lang.Object \l0x0021: CHECK_CAST (r2 I:kotlin.sequences.SequenceScope) = (kotlin.sequences.SequenceScope) (r2 I:??[OBJECT, ARRAY]) \l0x0023: IGET  (r3 I:kotlin.sequences.Sequence\<T\>) = \l  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])\l kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.$this_ifEmpty kotlin.sequences.Sequence  (LINE:67)\l0x0025: INVOKE  (r3 I:java.util.Iterator) = (r3 I:kotlin.sequences.Sequence) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)]\l0x0029: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:68)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|0x002d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x003e \l}"];
Node_32 [shape=record,label="{32\:\ 0x002f|0x002f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])  (LINE:69)\l0x0030: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x0032: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0033: IPUT  \l  (r5 I:int)\l  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])\l kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.label int \l0x0035: INVOKE  (r2 I:java.lang.Object A[D('$this$sequence' kotlin.sequences.SequenceScope)]) = \l  (r2 I:kotlin.sequences.SequenceScope A[D('$this$sequence' kotlin.sequences.SequenceScope)])\l  (r3 I:java.util.Iterator A[D('iterator' java.util.Iterator)])\l  (r4 I:kotlin.coroutines.Continuation)\l type: VIRTUAL call: kotlin.sequences.SequenceScope.yieldAll(java.util.Iterator, kotlin.coroutines.Continuation):java.lang.Object A[MD:(java.util.Iterator\<? extends T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0039|0x0039: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$sequence' kotlin.sequences.SequenceScope)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x003c \l}"];
Node_34 [shape=record,label="{34\:\ 0x003b|RETURN\l|0x003b: RETURN  (r0 I:java.lang.Object)  (LINE:66)\l}"];
Node_35 [shape=record,label="{35\:\ 0x003c|0x003c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])  (LINE:69)\l}"];
Node_37 [shape=record,label="{37\:\ 0x003e|0x003e: IGET  (r3 I:kotlin.jvm.functions.Function0\<kotlin.sequences.Sequence\<T\>\>) = \l  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])\l kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.$defaultValue kotlin.jvm.functions.Function0  (LINE:71)\l0x0040: INVOKE  (r3 I:java.lang.Object) = (r3 I:kotlin.jvm.functions.Function0) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[MD:():R (m)]\l0x0044: CHECK_CAST (r3 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r3 I:??[OBJECT, ARRAY]) \l0x0046: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)]) \l0x0047: CHECK_CAST (r4 I:kotlin.coroutines.Continuation) = (kotlin.coroutines.Continuation) (r4 I:??[OBJECT, ARRAY]) \l0x0049: CONST  (r5 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x004a: IPUT  \l  (r5 I:int)\l  (r1 I:kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])\l kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.label int \l0x004c: INVOKE  (r2 I:java.lang.Object A[D('$this$sequence' kotlin.sequences.SequenceScope)]) = \l  (r2 I:kotlin.sequences.SequenceScope A[D('$this$sequence' kotlin.sequences.SequenceScope)])\l  (r3 I:kotlin.sequences.Sequence)\l  (r4 I:kotlin.coroutines.Continuation)\l type: VIRTUAL call: kotlin.sequences.SequenceScope.yieldAll(kotlin.sequences.Sequence, kotlin.coroutines.Continuation):java.lang.Object A[MD:(kotlin.sequences.Sequence\<? extends T\>, kotlin.coroutines.Continuation\<? super kotlin.Unit\>):java.lang.Object (m)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0050|0x0050: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$sequence' kotlin.sequences.SequenceScope)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0053 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0052|RETURN\l|0x0052: RETURN  (r0 I:java.lang.Object)  (LINE:66)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0053|0x0053: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('this' kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1)])  (LINE:71)\l}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1.invokeSuspend((r6 'this' I:kotlin.sequences.SequencesKt__SequencesKt$ifEmpty$1 A[IMMUTABLE_TYPE, THIS]), (r7 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:43:0x0057 \-\> B:23:?, CROSS_EDGE: B:29:0x0016 \-\> B:42:0x0055, CROSS_EDGE: B:34:0x003b \-\> B:23:?, CROSS_EDGE: B:35:0x003c \-\> B:42:0x0055, CROSS_EDGE: B:39:0x0052 \-\> B:23:?, CROSS_EDGE: B:40:0x0053 \-\> B:42:0x0055\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0016: r0 'this' Lkotlin\/sequences\/SequencesKt__SequencesKt$ifEmpty$1;\l  0x0012\-0x0016: r7 '$result' Ljava\/lang\/Object;\l  0x0017\-0x001b: r0 'this' Lkotlin\/sequences\/SequencesKt__SequencesKt$ifEmpty$1;\l  0x0017\-0x001b: r7 '$result' Ljava\/lang\/Object;\l  0x0023\-0x0039: r2 '$this$sequence' Lkotlin\/sequences\/SequenceScope;\l  0x0029\-0x0039: r3 'iterator' Ljava\/util\/Iterator;\l  0x001f\-0x003d: r1 'this' Lkotlin\/sequences\/SequencesKt__SequencesKt$ifEmpty$1;\l  0x003d\-0x003e: r0 'this' Lkotlin\/sequences\/SequencesKt__SequencesKt$ifEmpty$1;\l  0x003e\-0x0050: r2 '$this$sequence' Lkotlin\/sequences\/SequenceScope;\l  0x003e\-0x0054: r1 'this' Lkotlin\/sequences\/SequencesKt__SequencesKt$ifEmpty$1;\l  0x0054\-0x0061: r0 'this' Lkotlin\/sequences\/SequencesKt__SequencesKt$ifEmpty$1;\l  0x001f\-0x0061: r7 '$result' Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [66=4]\}\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_28;
Node_25 -> Node_29;
Node_25 -> Node_30;
Node_26 -> Node_27;
Node_27 -> Node_23;
Node_28 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_23;
Node_29 -> Node_42;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_23;
Node_35 -> Node_42;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_23;
Node_40 -> Node_42;
}

