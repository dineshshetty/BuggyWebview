digraph "CFG forkotlin.sequences.DropSequence.drop(I)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r4 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.count int  (LINE:486)\l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (r5 I:int A[D('n' int)]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:681)\l0x0004: NEW_INSTANCE  (r2 I:kotlin.sequences.DropSequence) =  kotlin.sequences.DropSequence  (LINE:486)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char] A[D('n1' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:13:0x000f \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x0009: CHECK_CAST (r3 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r3 I:??[OBJECT, ARRAY]) \l0x000b: INVOKE  (r2 I:kotlin.sequences.DropSequence), (r3 I:kotlin.sequences.Sequence), (r5 I:int A[D('n' int)]) type: DIRECT call: kotlin.sequences.DropSequence.\<init\>(kotlin.sequences.Sequence, int):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, int):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0014|0x0014: CHECK_CAST (r2 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|RETURN\l|0x0016: RETURN  (r2 I:kotlin.sequences.Sequence\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|0x000f: IGET  (r3 I:kotlin.sequences.Sequence\<T\>) = (r4 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.sequence kotlin.sequences.Sequence \l0x0011: INVOKE  (r2 I:kotlin.sequences.DropSequence), (r3 I:kotlin.sequences.Sequence), (r0 I:int A[D('n1' int)]) type: DIRECT call: kotlin.sequences.DropSequence.\<init\>(kotlin.sequences.Sequence, int):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, int):void (m)]\l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.DropSequence.drop((r4 'this' I:kotlin.sequences.DropSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r5 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000f \-\> B:14:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)Lkotlin\/sequences\/Sequence\<TT;\>;\lDebug Info:\l  0x0003\-0x0014: r0 'n1' I\l  0x0004\-0x0014: r1 '$i$a$\-let\-DropSequence$drop$1' I\l  \-1 \-0x0016: r5 'n' I\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.drop(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

