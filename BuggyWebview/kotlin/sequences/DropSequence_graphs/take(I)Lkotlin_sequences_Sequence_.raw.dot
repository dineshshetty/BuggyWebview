digraph "CFG forkotlin.sequences.DropSequence.take(I)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r5 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.count int  (LINE:487)\l0x0002: ARITH  (r1 I:int) = (r0 I:int) + (r6 I:int A[D('n' int)]) \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:681)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: IF  (r1 I:??[int, byte, short, char] A[D('n1' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:13:0x0012  (LINE:487)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: NEW_INSTANCE  (r0 I:kotlin.sequences.TakeSequence) =  kotlin.sequences.TakeSequence \l0x0009: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY]) \l0x000a: CHECK_CAST (r3 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r3 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:kotlin.sequences.TakeSequence), (r3 I:kotlin.sequences.Sequence), (r6 I:int A[D('n' int)]) type: DIRECT call: kotlin.sequences.TakeSequence.\<init\>(kotlin.sequences.Sequence, int):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, int):void (m)]\l0x000f: CHECK_CAST (r0 I:kotlin.sequences.DropTakeSequence) = (kotlin.sequences.DropTakeSequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|0x001c: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|RETURN\l|0x001e: RETURN  (r0 I:kotlin.sequences.Sequence\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0012|0x0012: NEW_INSTANCE  (r3 I:kotlin.sequences.SubSequence) =  kotlin.sequences.SubSequence \l0x0014: IGET  (r4 I:kotlin.sequences.Sequence\<T\>) = (r5 I:kotlin.sequences.DropSequence) kotlin.sequences.DropSequence.sequence kotlin.sequences.Sequence \l0x0016: INVOKE  (r3 I:kotlin.sequences.SubSequence), (r4 I:kotlin.sequences.Sequence), (r0 I:int), (r1 I:int A[D('n1' int)]) type: DIRECT call: kotlin.sequences.SubSequence.\<init\>(kotlin.sequences.Sequence, int, int):void A[MD:(kotlin.sequences.Sequence\<? extends T\>, int, int):void (m)]\l0x0019: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x001a: CHECK_CAST (r0 I:kotlin.sequences.DropTakeSequence) = (kotlin.sequences.DropTakeSequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.DropSequence.take((r5 'this' I:kotlin.sequences.DropSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0012 \-\> B:14:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)Lkotlin\/sequences\/Sequence\<TT;\>;\lDebug Info:\l  0x0004\-0x001c: r1 'n1' I\l  0x0005\-0x001c: r2 '$i$a$\-let\-DropSequence$take$1' I\l  \-1 \-0x001e: r6 'n' I\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.take(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

