digraph "CFG forkotlin.sequences.DropSequence.drop(I)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|int r0 = r4.count + r5\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|if (r0 \>= 0) goto L7\l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|kotlin.sequences.DropSequence r2 = new kotlin.sequences.DropSequence(r4, r5)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0014|PHI: r2 \l  PHI: (r2v2 kotlin.sequences.DropSequence) = (r2v1 kotlin.sequences.DropSequence), (r2v4 kotlin.sequences.DropSequence) binds: [B:13:0x000f, B:12:0x0008] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|RETURN\l|return r2\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|kotlin.sequences.DropSequence r2 = new kotlin.sequences.DropSequence(r4.sequence, r0)\l}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.DropSequence.drop((r4v0 'this' kotlin.sequences.DropSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r5v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000f \-\> B:14:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)Lkotlin\/sequences\/Sequence\<TT;\>;\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.drop(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

