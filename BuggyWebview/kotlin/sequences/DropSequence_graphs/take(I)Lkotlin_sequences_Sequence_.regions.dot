digraph "CFG forkotlin.sequences.DropSequence.take(I)Lkotlin\/sequences\/Sequence;" {
subgraph cluster_Region_919545970 {
label = "R(2:1|5)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|int int r0 = r5.count\lint int r1 = r0 + r6\l}"];
Node_15 [shape=record,label="{15\:\ 0x001e|RETURN\l|return r1 \< 0 ? new kotlin.sequences.TakeSequence(r5, r6) : new kotlin.sequences.SubSequence(r5.sequence, r0, r1)\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0005}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0007}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001c|PHI: r0 \l  PHI: (r0v3 kotlin.sequences.Sequence\<T\> A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0012}"];
MethodNode[shape=record,label="{public kotlin.sequences.Sequence\<T\> kotlin.sequences.DropSequence.take((r5v0 'this' kotlin.sequences.DropSequence\<T\> A[IMMUTABLE_TYPE, THIS]), (r6v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0012 \-\> B:14:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: (I)Lkotlin\/sequences\/Sequence\<TT;\>;\lMETHOD_OVERRIDE: [kotlin.sequences.DropTakeSequence.take(int):kotlin.sequences.Sequence\<T\>]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_13 -> Node_14;
}

