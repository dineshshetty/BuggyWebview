digraph "CFG forkotlin.ranges.RangesKt___RangesKt.downTo(BI)Lkotlin\/ranges\/IntProgression;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: SGET  (r0 I:kotlin.ranges.IntProgression$Companion) =  kotlin.ranges.IntProgression.Companion kotlin.ranges.IntProgression$Companion  (LINE:670)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0003: INVOKE  (r0 I:kotlin.ranges.IntProgression) = \l  (r0 I:kotlin.ranges.IntProgression$Companion)\l  (r2 I:int A[D('$this$downTo' byte)])\l  (r3 I:int A[D('to' int)])\l  (r1 I:int)\l type: VIRTUAL call: kotlin.ranges.IntProgression.Companion.fromClosedRange(int, int, int):kotlin.ranges.IntProgression A[MD:(int, int, int):kotlin.ranges.IntProgression (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0007|RETURN\l|0x0007: RETURN  (r0 I:kotlin.ranges.IntProgression) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.IntProgression kotlin.ranges.RangesKt___RangesKt.downTo((r2 I:byte A[D('$this$downTo' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('to' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0007: r2 '$this$downTo' B\l  \-1 \-0x0007: r3 'to' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

