digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(BBB)B" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IF  (r4 I:??[int, byte, short, char] A[D('minimumValue' byte)]) \> (r5 I:??[int, byte, short, char] A[D('maximumValue' byte)])  \-\> B:18:0x0009  (LINE:1207)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r3 I:??[int, byte, short, char] A[D('$this$coerceIn' byte)]) \>= (r4 I:??[int, byte, short, char] A[D('minimumValue' byte)])  \-\> B:15:0x0005  (LINE:1208)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|RETURN\l|0x0004: RETURN  (r4 I:byte A[D('minimumValue' byte)]) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r3 I:??[int, byte, short, char] A[D('$this$coerceIn' byte)]) \<= (r5 I:??[int, byte, short, char] A[D('maximumValue' byte)])  \-\> B:17:0x0008  (LINE:1209)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|RETURN\l|0x0007: RETURN  (r5 I:byte A[D('maximumValue' byte)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|RETURN\l|0x0008: RETURN  (r3 I:byte A[D('$this$coerceIn' byte)])  (LINE:1210)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:1207)\l0x000b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Cannot coerce value to an empty range: maximum \" \l0x0012: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0015: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('maximumValue' byte)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0018: CONST_STR  (r2 I:java.lang.String) =  \" is less than minimum \" \l0x001a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('minimumValue' byte)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0020: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0025: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0029: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|0x002c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final byte kotlin.ranges.RangesKt___RangesKt.coerceIn((r3 I:byte A[D('$this$coerceIn' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte A[D('minimumValue' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte A[D('maximumValue' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0007 \-\> B:11:?, CROSS_EDGE: B:17:0x0008 \-\> B:11:?, CROSS_EDGE: B:19:0x002c \-\> B:11:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002c: r3 '$this$coerceIn' B\l  \-1 \-0x002c: r4 'minimumValue' B\l  \-1 \-0x002c: r5 'maximumValue' B\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

