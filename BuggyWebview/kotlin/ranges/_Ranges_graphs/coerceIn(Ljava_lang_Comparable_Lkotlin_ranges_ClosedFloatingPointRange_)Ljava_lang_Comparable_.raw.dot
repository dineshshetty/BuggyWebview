digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(Ljava\/lang\/Comparable;Lkotlin\/ranges\/ClosedFloatingPointRange;)Ljava\/lang\/Comparable;" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$coerceIn' java.lang.Comparable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('range' kotlin.ranges.ClosedFloatingPointRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:1292)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0045 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0011|0x0011: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.getStart():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)] (LINE:1295)\l0x0015: INVOKE  (r0 I:boolean) = \l  (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)])\l  (r3 I:java.lang.Comparable A[D('$this$coerceIn' java.lang.Comparable)])\l  (r0 I:java.lang.Comparable)\l type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean A[MD:(T extends java.lang.Comparable\<? super T\>, T extends java.lang.Comparable\<? super T\>):boolean (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002a \l}"];
Node_26 [shape=record,label="{26\:\ 0x001b|0x001b: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.getStart():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l0x001f: INVOKE  (r0 I:boolean) = \l  (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)])\l  (r0 I:java.lang.Comparable)\l  (r3 I:java.lang.Comparable A[D('$this$coerceIn' java.lang.Comparable)])\l type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean A[MD:(T extends java.lang.Comparable\<? super T\>, T extends java.lang.Comparable\<? super T\>):boolean (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002a \l}"];
Node_28 [shape=record,label="{28\:\ 0x0025|0x0025: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.getStart():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x0044: RETURN  (r0 I:T extends java.lang.Comparable\<? super T\>) A[SYNTHETIC] (LINE:1293)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x002a|0x002a: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.getEndInclusive():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)] (LINE:1297)\l0x002e: INVOKE  (r0 I:boolean) = \l  (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)])\l  (r0 I:java.lang.Comparable)\l  (r3 I:java.lang.Comparable A[D('$this$coerceIn' java.lang.Comparable)])\l type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean A[MD:(T extends java.lang.Comparable\<? super T\>, T extends java.lang.Comparable\<? super T\>):boolean (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0032|0x0032: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0043 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0034|0x0034: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.getEndInclusive():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l0x0038: INVOKE  (r0 I:boolean) = \l  (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)])\l  (r3 I:java.lang.Comparable A[D('$this$coerceIn' java.lang.Comparable)])\l  (r0 I:java.lang.Comparable)\l type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(java.lang.Comparable, java.lang.Comparable):boolean A[MD:(T extends java.lang.Comparable\<? super T\>, T extends java.lang.Comparable\<? super T\>):boolean (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x003c|0x003c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0043 \l}"];
Node_33 [shape=record,label="{33\:\ 0x003e|0x003e: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedFloatingPointRange A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: INTERFACE call: kotlin.ranges.ClosedFloatingPointRange.getEndInclusive():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0044: RETURN  (r0 I:T extends java.lang.Comparable\<? super T\>) A[SYNTHETIC] (LINE:1293)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0043|0x0043: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$coerceIn' java.lang.Comparable)])  (LINE:1298)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0044|RETURN\lORIG_RETURN\l|0x0044: RETURN  (r0 I:T extends java.lang.Comparable\<? super T\>)  (LINE:1293)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0045|0x0045: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:1292)\l0x0047: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0049: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x004c: CONST_STR  (r2 I:java.lang.String) =  \"Cannot coerce value to an empty range: \" \l0x004e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0051: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object A[D('range' kotlin.ranges.ClosedFloatingPointRange)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0054: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0056: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0059: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005d: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0060|0x0060: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T extends java.lang.Comparable\<? super T\> kotlin.ranges.RangesKt___RangesKt.coerceIn((r3 I:T extends java.lang.Comparable\<? super T\> A[D('$this$coerceIn' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.ranges.ClosedFloatingPointRange\<T extends java.lang.Comparable\<? super T\>\> A[D('range' kotlin.ranges.ClosedFloatingPointRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x003e \-\> B:35:0x0044, CROSS_EDGE: B:34:0x0043 \-\> B:35:0x0044, CROSS_EDGE: B:30:0x0032 \-\> B:34:0x0043, CROSS_EDGE: B:25:0x0019 \-\> B:29:0x002a, CROSS_EDGE: B:37:0x0060 \-\> B:21:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0060: r3 '$this$coerceIn' Ljava\/lang\/Comparable;\l  \-1 \-0x0060: r4 'range' Lkotlin\/ranges\/ClosedFloatingPointRange;\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\lSIGNATURE: \<T::Ljava\/lang\/Comparable\<\-TT;\>;\>(TT;Lkotlin\/ranges\/ClosedFloatingPointRange\<TT;\>;)TT;\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_36;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_38;
Node_38 -> Node_21;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_34;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_39;
Node_39 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_21;
Node_36 -> Node_37;
Node_37 -> Node_21;
}

