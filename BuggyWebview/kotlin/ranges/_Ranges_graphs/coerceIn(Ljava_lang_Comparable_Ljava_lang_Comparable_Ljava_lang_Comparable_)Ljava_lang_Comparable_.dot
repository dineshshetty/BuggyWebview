digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Ljava\/lang\/Comparable;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\l}"];
Node_27 [shape=record,label="{27\:\ 0x0005|if (r4 == null) goto L16\l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|if (r5 == null) goto L16\l}"];
Node_29 [shape=record,label="{29\:\ 0x0009}"];
Node_30 [shape=record,label="{30\:\ 0x000d|if (r4.compareTo(r5) \> 0) goto L14\l}"];
Node_31 [shape=record,label="{31\:\ 0x000f}"];
Node_32 [shape=record,label="{32\:\ 0x0013|if (r3.compareTo(r4) \>= 0) goto L10\l}"];
Node_33 [shape=record,label="{33\:\ 0x0015|RETURN\l|return r4\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0016}"];
Node_35 [shape=record,label="{35\:\ 0x001a|if (r3.compareTo(r5) \<= 0) goto L13\l}"];
Node_36 [shape=record,label="{36\:\ 0x001c|RETURN\l|return r5\l}"];
Node_47 [shape=record,label="{47\:\ 0x0053|RETURN\l|return r3\l}"];
Node_37 [shape=record,label="{37\:\ 0x001d|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot coerce value to an empty range: maximum \")\lr1.append(r5)\lr1.append(\" is less than minimum \")\lr1.append(r4)\lr1.append('.')\l}"];
Node_38 [shape=record,label="{38\:\ 0x0040|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
Node_39 [shape=record,label="{39\:\ 0x0041|if (r4 == null) goto L20\l}"];
Node_40 [shape=record,label="{40\:\ 0x0043}"];
Node_41 [shape=record,label="{41\:\ 0x0047|if (r3.compareTo(r4) \>= 0) goto L20\l}"];
Node_42 [shape=record,label="{42\:\ 0x0049|RETURN\l|return r4\l}"];
Node_43 [shape=record,label="{43\:\ 0x004a|if (r5 == null) goto L13\l}"];
Node_44 [shape=record,label="{44\:\ 0x004c}"];
Node_45 [shape=record,label="{45\:\ 0x0050|if (r3.compareTo(r5) \<= 0) goto L13\l}"];
Node_46 [shape=record,label="{46\:\ 0x0052|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{public static final T extends java.lang.Comparable\<? super T\> kotlin.ranges.RangesKt___RangesKt.coerceIn((r3v0 T extends java.lang.Comparable\<? super T\> A[D('$this$coerceIn' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 T extends java.lang.Comparable\<? super T\> A[D('minimumValue' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 T extends java.lang.Comparable\<? super T\> A[D('maximumValue' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:36:0x001c \-\> B:25:?, CROSS_EDGE: B:47:0x0053 \-\> B:25:?, CROSS_EDGE: B:38:0x0040 \-\> B:25:?, CROSS_EDGE: B:42:0x0049 \-\> B:25:?, CROSS_EDGE: B:46:0x0052 \-\> B:25:?, CROSS_EDGE: B:45:0x0050 \-\> B:47:0x0053, CROSS_EDGE: B:43:0x004a \-\> B:47:0x0053, CROSS_EDGE: B:39:0x0041 \-\> B:43:0x004a, CROSS_EDGE: B:27:0x0005 \-\> B:39:0x0041\lINLINE_NOT_NEEDED\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\lSIGNATURE: \<T::Ljava\/lang\/Comparable\<\-TT;\>;\>(TT;TT;TT;)TT;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_39;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_37;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_47;
Node_36 -> Node_25;
Node_47 -> Node_25;
Node_37 -> Node_38;
Node_38 -> Node_25;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_43;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_25;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_47;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_25;
}

