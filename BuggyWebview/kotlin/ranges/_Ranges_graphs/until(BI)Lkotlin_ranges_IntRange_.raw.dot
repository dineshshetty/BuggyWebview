digraph "CFG forkotlin.ranges.RangesKt___RangesKt.until(BI)Lkotlin\/ranges\/IntRange;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char])  (LINE:935)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r3 I:??[int, byte, short, char] A[D('to' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:14:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|0x0004: SGET  (r0 I:kotlin.ranges.IntRange$Companion) =  kotlin.ranges.IntRange.Companion kotlin.ranges.IntRange$Companion \l0x0006: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r0 I:kotlin.ranges.IntRange$Companion) type: VIRTUAL call: kotlin.ranges.IntRange.Companion.getEMPTY():kotlin.ranges.IntRange A[MD:():kotlin.ranges.IntRange (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:kotlin.ranges.IntRange) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:936)\l0x000d: ARITH  (r1 I:int) = (r3 I:int A[D('to' int)]) + (\-1 int) \l0x000f: INVOKE  (r0 I:kotlin.ranges.IntRange), (r2 I:int A[D('$this$until' byte)]), (r1 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:kotlin.ranges.IntRange) \l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.IntRange kotlin.ranges.RangesKt___RangesKt.until((r2 I:byte A[D('$this$until' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('to' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0012 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r2 '$this$until' B\l  \-1 \-0x0012: r3 'to' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

