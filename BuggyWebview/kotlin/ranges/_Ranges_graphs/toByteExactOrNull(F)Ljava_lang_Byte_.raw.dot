digraph "CFG forkotlin.ranges.RangesKt___RangesKt.toByteExactOrNull(F)Ljava\/lang\/Byte;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:825)\l0x0001: CONST  (r1 I:??[int, float, short, byte, char]) = (1123942400(0x42fe0000, float:127.0) ??[int, float, short, byte, char]) \l0x0003: CMP_G  (r1 I:int) = (r2 I:float A[D('$this$toByteExactOrNull' float)]), (r1 I:float) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r1 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:19:0x000e \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1023410176(0xffffffffc3000000, float:\-128.0) ??[int, float, short, byte, char]) \l0x0009: CMP_G  (r1 I:int) = (r1 I:float), (r2 I:float A[D('$this$toByteExactOrNull' float)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|0x000b: IF  (r1 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:19:0x000e \l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0017 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: CAST (r0 I:int) = (int) (r2 I:float A[D('$this$toByteExactOrNull' float)]) \l0x0011: CAST (r0 I:byte) = (byte) (r0 I:int) \l0x0012: INVOKE  (r0 I:java.lang.Byte) = (r0 I:byte) type: STATIC call: java.lang.Byte.valueOf(byte):java.lang.Byte A[MD:(byte):java.lang.Byte (c)]\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0018: RETURN  (r0 I:java.lang.Byte) A[SYNTHETIC]\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0017|RETURN\lORIG_RETURN\l|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: RETURN  (r0 I:java.lang.Byte) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Byte kotlin.ranges.RangesKt___RangesKt.toByteExactOrNull((r2 I:float A[D('$this$toByteExactOrNull' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0017 \-\> B:22:0x0018, CROSS_EDGE: B:17:0x000b \-\> B:19:0x000e, CROSS_EDGE: B:15:0x0005 \-\> B:19:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0018: r2 '$this$toByteExactOrNull' F\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_13;
}

