digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(ILkotlin\/ranges\/ClosedRange;)I" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"range\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('range' kotlin.ranges.ClosedRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INSTANCE_OF  (r0 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('range' kotlin.ranges.ClosedRange)]) kotlin.ranges.ClosedFloatingPointRange  (LINE:1329)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x001d \l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|0x0009: INVOKE  (r0 I:java.lang.Integer) = (r3 I:int A[D('$this$coerceIn' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:1330)\l0x000d: CHECK_CAST (r0 I:java.lang.Comparable) = (java.lang.Comparable) (r0 I:??[OBJECT, ARRAY]) \l0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('range' kotlin.ranges.ClosedRange)]) \l0x0010: CHECK_CAST (r1 I:kotlin.ranges.ClosedFloatingPointRange) = (kotlin.ranges.ClosedFloatingPointRange) (r1 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r0 I:java.lang.Comparable) = (r0 I:java.lang.Comparable), (r1 I:kotlin.ranges.ClosedFloatingPointRange) type: STATIC call: kotlin.ranges.RangesKt.coerceIn(java.lang.Comparable, kotlin.ranges.ClosedFloatingPointRange):java.lang.Comparable A[MD:\<T extends java.lang.Comparable\<? super T\>\>:(T extends java.lang.Comparable\<? super T\>, kotlin.ranges.ClosedFloatingPointRange\<T extends java.lang.Comparable\<? super T\>\>):T extends java.lang.Comparable\<? super T\> (m)]\l0x0016: CHECK_CAST (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r0 I:int) = (r0 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:int) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|0x001d: INVOKE  (r0 I:boolean) = (r4 I:kotlin.ranges.ClosedRange A[D('range' kotlin.ranges.ClosedRange)]) type: INTERFACE call: kotlin.ranges.ClosedRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:1332)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0054 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|0x0024: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange A[D('range' kotlin.ranges.ClosedRange)]) type: INTERFACE call: kotlin.ranges.ClosedRange.getStart():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)] (LINE:1334)\l0x0028: CHECK_CAST (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:??[OBJECT, ARRAY]) \l0x002a: INVOKE  (r0 I:int) = (r0 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x002e|0x002e: IF  (r3 I:??[int, byte, short, char] A[D('$this$coerceIn' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:31:0x003b \l}"];
Node_30 [shape=record,label="{30\:\ 0x0030|0x0030: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange A[D('range' kotlin.ranges.ClosedRange)]) type: INTERFACE call: kotlin.ranges.ClosedRange.getStart():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l0x0034: CHECK_CAST (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:??[OBJECT, ARRAY]) \l0x0036: INVOKE  (r0 I:int) = (r0 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x0053: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:1333)\l}"];
Node_31 [shape=record,label="{31\:\ 0x003b|0x003b: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange A[D('range' kotlin.ranges.ClosedRange)]) type: INTERFACE call: kotlin.ranges.ClosedRange.getEndInclusive():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)] (LINE:1335)\l0x003f: CHECK_CAST (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:??[OBJECT, ARRAY]) \l0x0041: INVOKE  (r0 I:int) = (r0 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0045|0x0045: IF  (r3 I:??[int, byte, short, char] A[D('$this$coerceIn' int)]) \<= (r0 I:??[int, byte, short, char])  \-\> B:34:0x0052 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0047|0x0047: INVOKE  (r0 I:java.lang.Comparable) = (r4 I:kotlin.ranges.ClosedRange A[D('range' kotlin.ranges.ClosedRange)]) type: INTERFACE call: kotlin.ranges.ClosedRange.getEndInclusive():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l0x004b: CHECK_CAST (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:??[OBJECT, ARRAY]) \l0x004d: INVOKE  (r0 I:int) = (r0 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0053: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:1333)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0052|0x0052: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$coerceIn' int)])  (LINE:1336)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0053|RETURN\lORIG_RETURN\l|0x0053: RETURN  (r0 I:int)  (LINE:1333)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0054|0x0054: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:1332)\l0x0056: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0058: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x005b: CONST_STR  (r2 I:java.lang.String) =  \"Cannot coerce value to an empty range: \" \l0x005d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0060: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:java.lang.Object A[D('range' kotlin.ranges.ClosedRange)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0063: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0065: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0068: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x006c: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x006f|0x006f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.ranges.RangesKt___RangesKt.coerceIn((r3 I:int A[D('$this$coerceIn' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.ranges.ClosedRange\<java.lang.Integer\> A[D('range' kotlin.ranges.ClosedRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0053 \-\> B:21:?, CROSS_EDGE: B:33:0x0047 \-\> B:35:0x0053, CROSS_EDGE: B:34:0x0052 \-\> B:35:0x0053, CROSS_EDGE: B:37:0x006f \-\> B:21:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x006f: r3 '$this$coerceIn' I\l  \-1 \-0x006f: r4 'range' Lkotlin\/ranges\/ClosedRange;\lSIGNATURE: (ILkotlin\/ranges\/ClosedRange\<Ljava\/lang\/Integer;\>;)I\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_21;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_36;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_38;
Node_38 -> Node_21;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_39;
Node_39 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_21;
Node_36 -> Node_37;
Node_37 -> Node_21;
}

