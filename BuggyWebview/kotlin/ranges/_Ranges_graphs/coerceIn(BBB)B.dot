digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(BBB)B" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|if (r4 \> r5) goto L8\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|if (r3 \>= r4) goto L5\l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|RETURN\l|return r4\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|if (r3 \<= r5) goto L7\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|RETURN\l|return r5\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|RETURN\l|return r3\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot coerce value to an empty range: maximum \")\lr1.append(r5)\lr1.append(\" is less than minimum \")\lr1.append(r4)\lr1.append('.')\l}"];
Node_19 [shape=record,label="{19\:\ 0x002c|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static final byte kotlin.ranges.RangesKt___RangesKt.coerceIn((r3v0 '$this$coerceIn' byte A[D('$this$coerceIn' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'minimumValue' byte A[D('minimumValue' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'maximumValue' byte A[D('maximumValue' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0007 \-\> B:11:?, CROSS_EDGE: B:17:0x0008 \-\> B:11:?, CROSS_EDGE: B:19:0x002c \-\> B:11:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

