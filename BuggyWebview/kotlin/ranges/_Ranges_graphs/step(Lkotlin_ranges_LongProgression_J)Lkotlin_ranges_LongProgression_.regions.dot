digraph "CFG forkotlin.ranges.RangesKt___RangesKt.step(Lkotlin\/ranges\/LongProgression;J)Lkotlin\/ranges\/LongProgression;" {
subgraph cluster_Region_514948659 {
label = "R(3:1|4|8)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"\<this\>\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|PHI: r2 \l  PHI: (r2v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.ranges.RangesKt.checkStepIsPositive(r12 \> 0, java.lang.Long.valueOf(r12))\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|RETURN\l|return kotlin.ranges.LongProgression.Companion.fromClosedRange(r11.getFirst(), r11.getLast(), r11.getStep() \> 0 ? r12 : \-r12)\l}"];
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0009}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000b}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0027}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0029}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x002d|PHI: r9 \l  PHI: (r9v2 long A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x002b}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x000d}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.LongProgression kotlin.ranges.RangesKt___RangesKt.step((r11v0 '$this$step' kotlin.ranges.LongProgression A[D('$this$step' kotlin.ranges.LongProgression), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'step' long A[D('step' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x002b \-\> B:22:0x002d, CROSS_EDGE: B:17:0x000d \-\> B:18:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_18 -> Node_19;
Node_23 -> Node_13;
Node_12 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

