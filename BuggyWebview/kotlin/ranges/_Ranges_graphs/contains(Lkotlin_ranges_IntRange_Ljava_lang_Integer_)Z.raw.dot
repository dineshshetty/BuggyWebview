digraph "CFG forkotlin.ranges.RangesKt___RangesKt.contains(Lkotlin\/ranges\/IntRange;Ljava\/lang\/Integer;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$contains' kotlin.ranges.IntRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0005|0x0005: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('element' java.lang.Integer)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0013  (LINE:296)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: INVOKE  (r0 I:int) = (r2 I:java.lang.Integer A[D('element' java.lang.Integer)]) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x000b: INVOKE  (r0 I:boolean) = (r1 I:kotlin.ranges.IntRange A[D('$this$contains' kotlin.ranges.IntRange)]), (r0 I:int) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0013 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|SYNTHETIC\lRETURN\l|0x0011: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0014: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static final boolean kotlin.ranges.RangesKt___RangesKt.contains((r1 I:kotlin.ranges.IntRange A[D('$this$contains' kotlin.ranges.IntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Integer A[D('element' java.lang.Integer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0013 \-\> B:18:0x0014, CROSS_EDGE: B:13:0x0005 \-\> B:17:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0014: r1 '$this$contains' Lkotlin\/ranges\/IntRange;\l  \-1 \-0x0014: r2 'element' Ljava\/lang\/Integer;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_11;
}

