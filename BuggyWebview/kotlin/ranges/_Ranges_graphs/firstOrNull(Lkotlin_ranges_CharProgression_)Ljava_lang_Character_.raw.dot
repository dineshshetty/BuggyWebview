digraph "CFG forkotlin.ranges.RangesKt___RangesKt.firstOrNull(Lkotlin\/ranges\/CharProgression;)Ljava\/lang\/Character;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$firstOrNull' kotlin.ranges.CharProgression)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:boolean) = (r1 I:kotlin.ranges.CharProgression A[D('$this$firstOrNull' kotlin.ranges.CharProgression)]) type: VIRTUAL call: kotlin.ranges.CharProgression.isEmpty():boolean A[MD:():boolean (m)] (LINE:75)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|SYNTHETIC\lRETURN\l|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: RETURN  (r0 I:java.lang.Character) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|0x000d: INVOKE  (r0 I:char) = (r1 I:kotlin.ranges.CharProgression A[D('$this$firstOrNull' kotlin.ranges.CharProgression)]) type: VIRTUAL call: kotlin.ranges.CharProgression.getFirst():char A[MD:():char (m)]\l0x0011: INVOKE  (r0 I:java.lang.Character) = (r0 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|RETURN\lORIG_RETURN\l|0x0015: RETURN  (r0 I:java.lang.Character) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Character kotlin.ranges.RangesKt___RangesKt.firstOrNull((r1 I:kotlin.ranges.CharProgression A[D('$this$firstOrNull' kotlin.ranges.CharProgression), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000d \-\> B:14:0x0015\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r1 '$this$firstOrNull' Lkotlin\/ranges\/CharProgression;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

