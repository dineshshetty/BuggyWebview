digraph "CFG forkotlin.ranges.RangesKt___RangesKt.coerceIn(Ljava\/lang\/Comparable;Lkotlin\/ranges\/ClosedRange;)Ljava\/lang\/Comparable;" {
subgraph cluster_Region_1020501279 {
label = "R(2:1|(2:(1:4)|(1:(2:(1:9)|(2:18|19)))))";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"range\")\l}"];
subgraph cluster_Region_1314537813 {
label = "R(2:(1:4)|(1:(2:(1:9)|(2:18|19))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_855384891 {
label = "IF [B:23:0x000c] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x000c|if ((r4 instanceof kotlin.ranges.ClosedFloatingPointRange) != false) goto L3\l}"];
subgraph cluster_Region_579418369 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0015|RETURN\l|return (T) kotlin.ranges.RangesKt.coerceIn((java.lang.Comparable) r3, (kotlin.ranges.ClosedFloatingPointRange) r4)\l}"];
}
}
subgraph cluster_Region_34763562 {
label = "R(1:(2:(1:9)|(2:18|19)))";
node [shape=record,color=blue];
subgraph cluster_Region_517917396 {
label = "R(2:(1:9)|(2:18|19))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1307101135 {
label = "IF [B:27:0x001a] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x001a|if (r4.isEmpty() != true) goto L8\l}"];
subgraph cluster_Region_641908290 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0025|RETURN\l|return r3.compareTo(r4.getStart()) \< 0 ? r4.getStart() : r3.compareTo(r4.getEndInclusive()) \> 0 ? r4.getEndInclusive() : r3\l}"];
}
}
subgraph cluster_Region_928514691 {
label = "R(2:18|19)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x003d}"];
Node_37 [shape=record,label="{37\:\ 0x0058|throw new java.lang.IllegalArgumentException(\"Cannot coerce value to an empty range: \" + r4 + '.')\l}"];
}
}
}
}
}
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x000e}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0016}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x001d}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0027}"];
Node_38 [shape=record,color=red,label="{38\:\ ?|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x002c}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0034}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0036}"];
Node_39 [shape=record,color=red,label="{39\:\ ?|SYNTHETIC\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x003b}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x003c|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static final T extends java.lang.Comparable\<? super T\> kotlin.ranges.RangesKt___RangesKt.coerceIn((r3v0 T extends java.lang.Comparable\<? super T\> A[D('$this$coerceIn' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'range' kotlin.ranges.ClosedRange\<T extends java.lang.Comparable\<? super T\>\> A[D('range' kotlin.ranges.ClosedRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x003c \-\> B:21:?, CROSS_EDGE: B:33:0x0036 \-\> B:35:0x003c, CROSS_EDGE: B:34:0x003b \-\> B:35:0x003c, CROSS_EDGE: B:37:0x0058 \-\> B:21:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\lSIGNATURE: \<T::Ljava\/lang\/Comparable\<\-TT;\>;\>(TT;Lkotlin\/ranges\/ClosedRange\<TT;\>;)TT;\l}"];
MethodNode -> Node_20;Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_26[style=dashed];
Node_25 -> Node_21;
Node_27 -> Node_28;
Node_27 -> Node_36[style=dashed];
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_36 -> Node_37;
Node_37 -> Node_21;
Node_20 -> Node_22;
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_28 -> Node_29;
Node_30 -> Node_38;
Node_38 -> Node_21;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_32 -> Node_34;
Node_33 -> Node_39;
Node_39 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_21;
}

