digraph "CFG forkotlin.ranges.RangesKt___RangesKt.until(JJ)Lkotlin\/ranges\/LongRange;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST  (r0 I:??[long, double]) = (\-9223372036854775808 ??[long, double])  (LINE:965)\l0x0002: CMP_L  (r2 I:int) = (r5 I:long A[D('to' long)]), (r0 I:long) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:14:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: SGET  (r0 I:kotlin.ranges.LongRange$Companion) =  kotlin.ranges.LongRange.Companion kotlin.ranges.LongRange$Companion \l0x0008: INVOKE  (r0 I:kotlin.ranges.LongRange) = (r0 I:kotlin.ranges.LongRange$Companion) type: VIRTUAL call: kotlin.ranges.LongRange.Companion.getEMPTY():kotlin.ranges.LongRange A[MD:():kotlin.ranges.LongRange (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|RETURN\l|0x000c: RETURN  (r0 I:kotlin.ranges.LongRange) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:kotlin.ranges.LongRange) =  kotlin.ranges.LongRange  (LINE:966)\l0x000f: CONST  (r1 I:??[long, double]) = (1 ??[long, double]) \l0x0011: ARITH  (r1 I:long) = (r5 I:long A[D('to' long)]) \- (r1 I:long) \l0x0013: INVOKE  (r0 I:kotlin.ranges.LongRange), (r3 I:long A[D('$this$until' long)]), (r1 I:long) type: DIRECT call: kotlin.ranges.LongRange.\<init\>(long, long):void A[MD:(long, long):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|RETURN\l|0x0016: RETURN  (r0 I:kotlin.ranges.LongRange) \l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.LongRange kotlin.ranges.RangesKt___RangesKt.until((r3 I:long A[D('$this$until' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:long A[D('to' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0016 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0016: r3 '$this$until' J\l  \-1 \-0x0016: r5 'to' J\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

