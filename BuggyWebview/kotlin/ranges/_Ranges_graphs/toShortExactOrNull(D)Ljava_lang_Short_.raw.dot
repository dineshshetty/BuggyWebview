digraph "CFG forkotlin.ranges.RangesKt___RangesKt.toShortExactOrNull(D)Ljava\/lang\/Short;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:857)\l0x0001: CONST  (r1 I:??[long, double]) = (4674736138332667904(0x40dfffc000000000, double:32767.0) ??[long, double]) \l0x0006: CMP_G  (r3 I:int) = (r4 I:double A[D('$this$toShortExactOrNull' double)]), (r1 I:double) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: IF  (r3 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:19:0x0011 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: CONST  (r1 I:??[long, double]) = (\-4548635623644200960(0xc0e0000000000000, double:\-32768.0) ??[long, double]) \l0x000c: CMP_G  (r3 I:int) = (r1 I:double), (r4 I:double A[D('$this$toShortExactOrNull' double)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|0x000e: IF  (r3 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:19:0x0011 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001a \l}"];
Node_20 [shape=record,label="{20\:\ 0x0013|0x0013: CAST (r0 I:int) = (int) (r4 I:double A[D('$this$toShortExactOrNull' double)]) \l0x0014: CAST (r0 I:short) = (short) (r0 I:int) \l0x0015: INVOKE  (r0 I:java.lang.Short) = (r0 I:short) type: STATIC call: java.lang.Short.valueOf(short):java.lang.Short A[MD:(short):java.lang.Short (c)]\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:java.lang.Short) A[SYNTHETIC]\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: RETURN  (r0 I:java.lang.Short) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Short kotlin.ranges.RangesKt___RangesKt.toShortExactOrNull((r4 I:double A[D('$this$toShortExactOrNull' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001a \-\> B:22:0x001b, CROSS_EDGE: B:17:0x000e \-\> B:19:0x0011, CROSS_EDGE: B:15:0x0008 \-\> B:19:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001b: r4 '$this$toShortExactOrNull' D\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_13;
}

