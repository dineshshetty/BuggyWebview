digraph "CFG forkotlin.ranges.LongRange.contains(J)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INVOKE  (r0 I:long) = (r3 I:kotlin.ranges.LongRange) type: VIRTUAL call: kotlin.ranges.LongRange.getFirst():long A[MD:():long (m)] (LINE:79)\l0x0004: CMP_L  (r2 I:int) = (r0 I:long), (r4 I:long A[D('value' long)]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0006|0x0006: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:17:0x0012 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: INVOKE  (r0 I:long) = (r3 I:kotlin.ranges.LongRange) type: VIRTUAL call: kotlin.ranges.LongRange.getLast():long A[MD:():long (m)]\l0x000c: CMP_L  (r2 I:int) = (r4 I:long A[D('value' long)]), (r0 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|0x000e: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:17:0x0012 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|SYNTHETIC\lRETURN\l|0x0010: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0013: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.LongRange.contains((r3 'this' I:kotlin.ranges.LongRange A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('value' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0012 \-\> B:18:0x0013, CROSS_EDGE: B:13:0x0006 \-\> B:17:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0013: r4 'value' J\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_11;
Node_17 -> Node_11;
}

