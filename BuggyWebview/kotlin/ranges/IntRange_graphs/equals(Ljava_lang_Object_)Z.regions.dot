digraph "CFG forkotlin.ranges.IntRange.equals(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_825137793 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0002|RETURN\l|return (r3 instanceof kotlin.ranges.IntRange) && ((isEmpty() && ((kotlin.ranges.IntRange) r3).isEmpty()) \|\| (getFirst() == ((kotlin.ranges.IntRange) r3).getFirst() && getLast() == ((kotlin.ranges.IntRange) r3).getLast()))\l}"];
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0000}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0004}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0008|REMOVE\lADDED_TO_REGION\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x000a}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0011|REMOVE\lADDED_TO_REGION\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x002d|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0013}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x001e|REMOVE\lADDED_TO_REGION\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0020}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x002b|REMOVE\lADDED_TO_REGION\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x002f|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.IntRange.equals((r2v0 'this' kotlin.ranges.IntRange A[IMMUTABLE_TYPE, THIS]), (r3v0 'other' java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x002f \-\> B:30:0x0030, CROSS_EDGE: B:25:0x001e \-\> B:29:0x002f, CROSS_EDGE: B:23:0x0011 \-\> B:28:0x002d, CROSS_EDGE: B:21:0x0008 \-\> B:24:0x0013, CROSS_EDGE: B:19:0x0002 \-\> B:29:0x002f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.ranges.IntProgression.equals(java.lang.Object):boolean]\l}"];
MethodNode -> Node_16;Node_19 -> Node_20;
Node_19 -> Node_29;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_23 -> Node_28;
Node_28 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_29;
Node_29 -> Node_17;
}

