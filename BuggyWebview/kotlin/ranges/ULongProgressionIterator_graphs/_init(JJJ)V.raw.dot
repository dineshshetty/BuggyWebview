digraph "CFG forkotlin.ranges.ULongProgressionIterator.\<init\>(JJJ)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r5 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:115)\l0x0003: IPUT  (r8 I:long A[D('last' long)]), (r5 I:kotlin.ranges.ULongProgressionIterator) kotlin.ranges.ULongProgressionIterator.finalElement long  (LINE:117)\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:118)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r2 I:??[long, double]) = (0 ??[long, double]) \l0x0009: CMP_L  (r4 I:int) = (r10 I:long A[D('step' long)]), (r2 I:long) \l0x000b: INVOKE  (r2 I:int) = (r6 I:long A[D('first' long)]), (r8 I:long A[D('last' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|0x000f: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:21:0x0014 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|0x0011: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:23:0x0017 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|0x0018: IPUT  (r0 I:boolean), (r5 I:kotlin.ranges.ULongProgressionIterator) kotlin.ranges.ULongProgressionIterator.hasNext boolean \l0x001a: INVOKE  (r0 I:long) = (r10 I:long A[D('step' long)]) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)] (LINE:119)\l0x001e: IPUT  (r0 I:long), (r5 I:kotlin.ranges.ULongProgressionIterator) kotlin.ranges.ULongProgressionIterator.step long \l0x0020: IGET  (r0 I:boolean) = (r5 I:kotlin.ranges.ULongProgressionIterator) kotlin.ranges.ULongProgressionIterator.hasNext boolean  (LINE:120)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0026 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|0x0024: MOVE  (r0 I:??[long, double]) = (r6 I:??[long, double] A[D('first' long)]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0027|0x0027: IPUT  (r0 I:long), (r5 I:kotlin.ranges.ULongProgressionIterator) kotlin.ranges.ULongProgressionIterator.next long \l}"];
Node_29 [shape=record,label="{29\:\ 0x0029|RETURN\l|0x0029: RETURN    (LINE:116)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0026|0x0026: MOVE  (r0 I:??[long, double]) = (r8 I:??[long, double] A[D('last' long)]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:23:0x0017 \l}"];
MethodNode[shape=record,label="{private void kotlin.ranges.ULongProgressionIterator.\<init\>((r5 'this' I:kotlin.ranges.ULongProgressionIterator A[IMMUTABLE_TYPE, THIS]), (r6 I:long A[D('first' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('last' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('step' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0026 \-\> B:28:0x0027, CROSS_EDGE: B:19:0x0011 \-\> B:24:0x0018, CROSS_EDGE: B:21:0x0014 \-\> B:23:0x0017, CROSS_EDGE: B:21:0x0014 \-\> B:24:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0029: r6 'first' J\l  \-1 \-0x0029: r8 'last' J\l  \-1 \-0x0029: r10 'step' J\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_23;
Node_19 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_27 -> Node_28;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
}

