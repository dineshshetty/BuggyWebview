digraph "CFG forkotlin.ranges.UIntRange.contains(Ljava\/lang\/Comparable;)Z" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('value' java.lang.Comparable)])  (LINE:17)\l0x0001: CHECK_CAST (r0 I:kotlin.UInt) = (kotlin.UInt) (r0 I:??[OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:int) = (r0 I:kotlin.UInt) type: VIRTUAL call: kotlin.UInt.unbox\-impl():int A[MD:():int (m)]\l0x0007: INVOKE  (r0 I:boolean) = (r1 I:kotlin.ranges.UIntRange), (r0 I:int) type: VIRTUAL call: kotlin.ranges.UIntRange.contains\-WZ4Q5Ns(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|RETURN\l|0x000b: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ boolean kotlin.ranges.UIntRange.contains((r1 'this' I:kotlin.ranges.UIntRange A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.UInt A[D('value' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000b: r2 'value' Ljava\/lang\/Comparable;\lMETHOD_OVERRIDE: [kotlin.ranges.ClosedRange.contains(T extends java.lang.Comparable\<? super T\>):boolean]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

