digraph "CFG forkotlin.ranges.UIntProgressionIterator.\<init\>(III)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r3 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:115)\l0x0003: IPUT  (r5 I:int A[D('last' int)]), (r3 I:kotlin.ranges.UIntProgressionIterator) kotlin.ranges.UIntProgressionIterator.finalElement int  (LINE:117)\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:118)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r2 I:int) = (r4 I:int A[D('first' int)]), (r5 I:int A[D('last' int)]) type: STATIC call: kotlin.UnsignedKt.uintCompare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: IF  (r6 I:??[int, byte, short, char] A[D('step' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:21:0x0010 \l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|0x000d: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:23:0x0013 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|0x0013: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|0x0014: IPUT  (r0 I:boolean), (r3 I:kotlin.ranges.UIntProgressionIterator) kotlin.ranges.UIntProgressionIterator.hasNext boolean \l0x0016: INVOKE  (r0 I:int) = (r6 I:int A[D('step' int)]) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)] (LINE:119)\l0x001a: IPUT  (r0 I:int), (r3 I:kotlin.ranges.UIntProgressionIterator) kotlin.ranges.UIntProgressionIterator.step int \l0x001c: IGET  (r0 I:boolean) = (r3 I:kotlin.ranges.UIntProgressionIterator) kotlin.ranges.UIntProgressionIterator.hasNext boolean  (LINE:120)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|0x001e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0022 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|0x0020: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('first' int)]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|0x0023: IPUT  (r0 I:int), (r3 I:kotlin.ranges.UIntProgressionIterator) kotlin.ranges.UIntProgressionIterator.next int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:116)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0022|0x0022: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('last' int)]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|0x0010: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:23:0x0013 \l}"];
MethodNode[shape=record,label="{private void kotlin.ranges.UIntProgressionIterator.\<init\>((r3 'this' I:kotlin.ranges.UIntProgressionIterator A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('first' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('last' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0022 \-\> B:28:0x0023, CROSS_EDGE: B:19:0x000d \-\> B:24:0x0014, CROSS_EDGE: B:21:0x0010 \-\> B:23:0x0013, CROSS_EDGE: B:21:0x0010 \-\> B:24:0x0014\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r4 'first' I\l  \-1 \-0x0025: r5 'last' I\l  \-1 \-0x0025: r6 'step' I\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_23;
Node_19 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_27 -> Node_28;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
}

