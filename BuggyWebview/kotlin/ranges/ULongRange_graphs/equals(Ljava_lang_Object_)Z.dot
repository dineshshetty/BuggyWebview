digraph "CFG forkotlin.ranges.ULongRange.equals(Ljava\/lang\/Object;)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000}"];
Node_19 [shape=record,label="{19\:\ 0x0002|if ((r6 instanceof kotlin.ranges.ULongRange) == false) goto L13\l}"];
Node_20 [shape=record,label="{20\:\ 0x0004}"];
Node_21 [shape=record,label="{21\:\ 0x0008|if (isEmpty() == false) goto L9\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a}"];
Node_23 [shape=record,label="{23\:\ 0x0011|if (((kotlin.ranges.ULongRange) r6).isEmpty() != false) goto L7\l}"];
Node_28 [shape=record,label="{28\:\ 0x0031|SYNTHETIC\lRETURN\l|return true\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013}"];
Node_25 [shape=record,label="{25\:\ 0x0020|if ((m1380getFirstsVKNKU() \> ((kotlin.ranges.ULongRange) r6).m1380getFirstsVKNKU() ? 1 : (m1380getFirstsVKNKU() == ((kotlin.ranges.ULongRange) r6).m1380getFirstsVKNKU() ? 0 : \-1)) != 0) goto L13\l}"];
Node_26 [shape=record,label="{26\:\ 0x0022}"];
Node_27 [shape=record,label="{27\:\ 0x002f|if ((m1381getLastsVKNKU() \> ((kotlin.ranges.ULongRange) r6).m1381getLastsVKNKU() ? 1 : (m1381getLastsVKNKU() == ((kotlin.ranges.ULongRange) r6).m1381getLastsVKNKU() ? 0 : \-1)) != 0) goto L13\l}"];
Node_29 [shape=record,label="{29\:\ 0x0033|RETURN\lORIG_RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.ULongRange.equals((r5v0 'this' kotlin.ranges.ULongRange A[IMMUTABLE_TYPE, THIS]), (r6v0 'other' java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0033 \-\> B:30:0x0034, CROSS_EDGE: B:25:0x0020 \-\> B:29:0x0033, CROSS_EDGE: B:23:0x0011 \-\> B:28:0x0031, CROSS_EDGE: B:21:0x0008 \-\> B:24:0x0013, CROSS_EDGE: B:19:0x0002 \-\> B:29:0x0033\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [kotlin.ranges.ULongProgression.equals(java.lang.Object):boolean]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_28 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_17;
}

