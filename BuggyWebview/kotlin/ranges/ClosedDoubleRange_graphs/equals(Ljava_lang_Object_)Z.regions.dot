digraph "CFG forkotlin.ranges.ClosedDoubleRange.equals(Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_953007563 {
label = "R(2:(1:(2:(1:7)|(1:(1:(1:17)))))|20)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1381084934 {
label = "IF [B:26:0x0004] THEN: R(1:(2:(1:7)|(1:(1:(1:17))))) ELSE: null";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0004|if ((r8 instanceof kotlin.ranges.ClosedDoubleRange) != false) goto L3\l}"];
subgraph cluster_Region_1037791903 {
label = "R(1:(2:(1:7)|(1:(1:(1:17)))))";
node [shape=record,color=blue];
subgraph cluster_Region_2066256479 {
label = "R(2:(1:7)|(1:(1:(1:17))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_777931540 {
label = "IF [B:28:0x000a, B:30:0x0013] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x000a|if (isEmpty() == true) goto L5\l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|ADDED_TO_REGION\l|if (((kotlin.ranges.ClosedDoubleRange) r8).isEmpty() == true) goto L7\l}"];
subgraph cluster_Region_1898506310 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
subgraph cluster_Region_385954678 {
label = "R(1:(1:(1:17)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_671412643 {
label = "IF [B:35:0x0023] THEN: R(1:(1:17)) ELSE: null";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0023|PHI: r0 \l  PHI: (r0v6 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r7._start == ((kotlin.ranges.ClosedDoubleRange) r8)._start) != false) goto L13\l}"];
subgraph cluster_Region_1952323932 {
label = "R(1:(1:17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1115858249 {
label = "IF [B:40:0x0033] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0033|PHI: r0 \l  PHI: (r0v11 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r7._endInclusive == ((kotlin.ranges.ClosedDoubleRange) r8)._endInclusive) != false) goto L17\l}"];
subgraph cluster_Region_1552327916 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
}
}
}
}
}
}
Node_42 [shape=record,label="{42\:\ 0x0036|RETURN\lORIG_RETURN\l|return false\l}"];
}
Node_23 [shape=record,color=red,label="{23\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0000}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0006}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x000c}"];
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0015}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x001e}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0020}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0025}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x002e}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0030}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0032}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0022}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.ClosedDoubleRange.equals((r7v0 'this' kotlin.ranges.ClosedDoubleRange A[IMMUTABLE_TYPE, THIS]), (r8v0 'other' java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x0033 \-\> B:43:0x0037, CROSS_EDGE: B:39:0x0032 \-\> B:40:0x0033, CROSS_EDGE: B:35:0x0023 \-\> B:42:0x0036, CROSS_EDGE: B:34:0x0022 \-\> B:35:0x0023, CROSS_EDGE: B:30:0x0013 \-\> B:43:0x0037, CROSS_EDGE: B:28:0x000a \-\> B:31:0x0015, CROSS_EDGE: B:26:0x0004 \-\> B:42:0x0036\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_23;Node_26 -> Node_27;
Node_26 -> Node_42[style=dashed];
Node_28 -> Node_29;
Node_28 -> Node_31[style=dashed];
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_44;
Node_44 -> Node_24;
Node_35 -> Node_36;
Node_35 -> Node_42[style=dashed];
Node_40 -> Node_42[style=dashed];
Node_40 -> Node_45;
Node_45 -> Node_24;
Node_42 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_39;
Node_38 -> Node_40;
Node_39 -> Node_40;
Node_34 -> Node_35;
}

