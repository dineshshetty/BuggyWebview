digraph "CFG forkotlin.ranges.ClosedDoubleRange.lessThanOrEquals(Ljava\/lang\/Comparable;Ljava\/lang\/Comparable;)Z" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('a' java.lang.Comparable)])  (LINE:64)\l0x0001: CHECK_CAST (r0 I:java.lang.Number) = (java.lang.Number) (r0 I:??[OBJECT, ARRAY]) \l0x0003: INVOKE  (r0 I:double) = (r0 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.doubleValue():double A[MD:():double (c)]\l0x0007: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('b' java.lang.Comparable)]) \l0x0008: CHECK_CAST (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:??[OBJECT, ARRAY]) \l0x000a: INVOKE  (r2 I:double) = (r2 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.doubleValue():double A[MD:():double (c)]\l0x000e: INVOKE  (r0 I:boolean) = (r4 I:kotlin.ranges.ClosedDoubleRange), (r0 I:double), (r2 I:double) type: VIRTUAL call: kotlin.ranges.ClosedDoubleRange.lessThanOrEquals(double, double):boolean A[MD:(double, double):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ boolean kotlin.ranges.ClosedDoubleRange.lessThanOrEquals((r4 'this' I:kotlin.ranges.ClosedDoubleRange A[IMMUTABLE_TYPE, THIS]), (r5 I:java.lang.Double A[D('a' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Double A[D('b' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r5 'a' Ljava\/lang\/Comparable;\l  \-1 \-0x0012: r6 'b' Ljava\/lang\/Comparable;\lMETHOD_OVERRIDE: [kotlin.ranges.ClosedFloatingPointRange.lessThanOrEquals(T extends java.lang.Comparable\<? super T\>, T extends java.lang.Comparable\<? super T\>):boolean]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

