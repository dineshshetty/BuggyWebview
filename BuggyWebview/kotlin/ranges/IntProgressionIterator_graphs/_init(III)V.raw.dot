digraph "CFG forkotlin.ranges.IntProgressionIterator.\<init\>(III)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r2 I:kotlin.collections.IntIterator) type: DIRECT call: kotlin.collections.IntIterator.\<init\>():void A[MD:():void (m)] (LINE:38)\l0x0003: IPUT  (r5 I:int A[D('step' int)]), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.step int \l0x0005: IPUT  (r4 I:int A[D('last' int)]), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.finalElement int  (LINE:39)\l0x0007: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:40)\l0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: IF  (r5 I:??[int, byte, short, char] A[D('step' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:21:0x000e \l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|0x000b: IF  (r3 I:??[int, byte, short, char] A[D('first' int)]) \> (r4 I:??[int, byte, short, char] A[D('last' int)])  \-\> B:23:0x0011 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|0x0012: IPUT  (r0 I:boolean), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.hasNext boolean \l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0018  (LINE:41)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|0x0016: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('first' int)]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0019|0x0019: IPUT  (r0 I:int), (r2 I:kotlin.ranges.IntProgressionIterator) kotlin.ranges.IntProgressionIterator.next int \l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|RETURN\l|0x001b: RETURN    (LINE:38)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('last' int)]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|0x000e: IF  (r3 I:??[int, byte, short, char] A[D('first' int)]) \< (r4 I:??[int, byte, short, char] A[D('last' int)])  \-\> B:23:0x0011 \l}"];
MethodNode[shape=record,label="{public void kotlin.ranges.IntProgressionIterator.\<init\>((r2 'this' I:kotlin.ranges.IntProgressionIterator A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('first' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('last' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0018 \-\> B:28:0x0019, CROSS_EDGE: B:19:0x000b \-\> B:24:0x0012, CROSS_EDGE: B:21:0x000e \-\> B:23:0x0011, CROSS_EDGE: B:21:0x000e \-\> B:24:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001b: r3 'first' I\l  \-1 \-0x001b: r4 'last' I\l  \-1 \-0x001b: r5 'step' I\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_23;
Node_19 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_27 -> Node_28;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
}

