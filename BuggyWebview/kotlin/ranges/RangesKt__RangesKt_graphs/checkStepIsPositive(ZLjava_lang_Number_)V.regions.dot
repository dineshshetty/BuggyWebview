digraph "CFG forkotlin.ranges.RangesKt__RangesKt.checkStepIsPositive(ZLjava\/lang\/Number;)V" {
subgraph cluster_Region_2066712502 {
label = "R(2:1|(1:(2:5|6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"step\")\l}"];
subgraph cluster_Region_20368845 {
label = "R(1:(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1286662629 {
label = "IF [B:10:0x0005] THEN: R(2:5|6) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0005|if (r3 == false) goto L5\l}"];
subgraph cluster_Region_590001612 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0008}"];
Node_13 [shape=record,label="{13\:\ 0x0023|throw new java.lang.IllegalArgumentException(\"Step must be positive, was: \" + r4 + '.')\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0007}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void kotlin.ranges.RangesKt__RangesKt.checkStepIsPositive((r3v0 'isPositive' boolean A[D('isPositive' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'step' java.lang.Number A[D('step' java.lang.Number), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0023 \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
Node_7 -> Node_9;
Node_11 -> Node_8;
}

