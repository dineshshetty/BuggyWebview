digraph "CFG forkotlin.ranges.URangesKt___URangesKt.coerceIn\-sambcqE(JJJ)J" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0004|if (kotlin.UnsignedUtils.ulongCompare(r5, r7) \> 0) goto L11\l}"];
Node_17 [shape=record,label="{17\:\ 0x0006}"];
Node_18 [shape=record,label="{18\:\ 0x000a|if (kotlin.UnsignedUtils.ulongCompare(r3, r5) \>= 0) goto L7\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|RETURN\l|return r5\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x000d}"];
Node_21 [shape=record,label="{21\:\ 0x0011|if (kotlin.UnsignedUtils.ulongCompare(r3, r7) \<= 0) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x0013|RETURN\l|return r7\l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|RETURN\l|return r3\l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Cannot coerce value to an empty range: maximum \")\lr1.append(kotlin.ULong.m361toStringimpl(r7))\lr1.append(\" is less than minimum \")\lr1.append(kotlin.ULong.m361toStringimpl(r5))\lr1.append('.')\l}"];
Node_25 [shape=record,label="{25\:\ 0x0040|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public static final long kotlin.ranges.URangesKt___URangesKt.coerceIn\-sambcqE((r3v0 '$this$coerceIn_u2dsambcqE' long A[D('$this$coerceIn_u2dsambcqE' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'minimumValue' long A[D('minimumValue' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'maximumValue' long A[D('maximumValue' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0013 \-\> B:14:?, CROSS_EDGE: B:23:0x0014 \-\> B:14:?, CROSS_EDGE: B:25:0x0040 \-\> B:14:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_14;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_14;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

