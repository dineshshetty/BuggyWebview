digraph "CFG forkotlin.ranges.URangesKt___URangesKt.coerceAtMost\-Kr8caGY(BB)B" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: ARITH  (r0 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('$this$coerceAtMost_u2dKr8caGY' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char])  (LINE:502)\l0x0002: ARITH  (r1 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char] A[D('maximumValue' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0004: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:13:0x000c \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('maximumValue' byte)]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000d: RETURN  (r0 I:byte) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000c|0x000c: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$coerceAtMost_u2dKr8caGY' byte)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: RETURN  (r0 I:byte) \l}"];
MethodNode[shape=record,label="{public static final byte kotlin.ranges.URangesKt___URangesKt.coerceAtMost\-Kr8caGY((r2 I:byte A[D('$this$coerceAtMost_u2dKr8caGY' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:byte A[D('maximumValue' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000c \-\> B:14:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r2 '$this$coerceAtMost_u2dKr8caGY' B\l  \-1 \-0x000d: r3 'maximumValue' B\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

