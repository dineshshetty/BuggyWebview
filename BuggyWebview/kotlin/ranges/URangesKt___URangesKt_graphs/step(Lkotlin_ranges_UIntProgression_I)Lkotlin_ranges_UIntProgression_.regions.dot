digraph "CFG forkotlin.ranges.URangesKt___URangesKt.step(Lkotlin\/ranges\/UIntProgression;I)Lkotlin\/ranges\/UIntProgression;" {
subgraph cluster_Region_1025670120 {
label = "R(3:1|4|8)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.ranges.RangesKt.checkStepIsPositive(r5 \> 0, java.lang.Integer.valueOf(r5))\l}"];
Node_23 [shape=record,label="{23\:\ 0x002a|RETURN\l|return kotlin.ranges.UIntProgression.Companion.m1375fromClosedRangeNkh28Cs(r4.m1373getFirstpVg5ArA(), r4.m1374getLastpVg5ArA(), r4.getStep() \> 0 ? r5 : \-r5)\l}"];
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0005}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0007}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0021}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0023}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0026|PHI: r3 \l  PHI: (r3v2 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0025}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0009}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.UIntProgression kotlin.ranges.URangesKt___URangesKt.step((r4v0 '$this$step' kotlin.ranges.UIntProgression A[D('$this$step' kotlin.ranges.UIntProgression), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'step' int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0025 \-\> B:22:0x0026, CROSS_EDGE: B:17:0x0009 \-\> B:18:0x000a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_18 -> Node_19;
Node_23 -> Node_13;
Node_12 -> Node_14;
Node_15 -> Node_16;
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

