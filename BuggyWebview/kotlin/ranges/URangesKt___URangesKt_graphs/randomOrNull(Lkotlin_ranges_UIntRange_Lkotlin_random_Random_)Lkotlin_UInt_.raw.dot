digraph "CFG forkotlin.ranges.URangesKt___URangesKt.randomOrNull(Lkotlin\/ranges\/UIntRange;Lkotlin\/random\/Random;)Lkotlin\/UInt;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$randomOrNull' kotlin.ranges.UIntRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"random\" \l0x0007: INVOKE  (r2 I:java.lang.Object A[D('random' kotlin.random.Random)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r1 I:kotlin.ranges.UIntRange A[D('$this$randomOrNull' kotlin.ranges.UIntRange)]) type: VIRTUAL call: kotlin.ranges.UIntRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:186)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0012 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|RETURN\l|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:187)\l0x0011: RETURN  (r0 I:kotlin.UInt) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|0x0012: INVOKE  (r0 I:int) = \l  (r2 I:kotlin.random.Random A[D('random' kotlin.random.Random)])\l  (r1 I:kotlin.ranges.UIntRange A[D('$this$randomOrNull' kotlin.ranges.UIntRange)])\l type: STATIC call: kotlin.random.URandomKt.nextUInt(kotlin.random.Random, kotlin.ranges.UIntRange):int A[MD:(kotlin.random.Random, kotlin.ranges.UIntRange):int (m)] (LINE:188)\l0x0016: INVOKE  (r0 I:kotlin.UInt) = (r0 I:int) type: STATIC call: kotlin.UInt.box\-impl(int):kotlin.UInt A[MD:(int):kotlin.UInt (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|RETURN\l|0x001a: RETURN  (r0 I:kotlin.UInt) \l}"];
MethodNode[shape=record,label="{public static final kotlin.UInt kotlin.ranges.URangesKt___URangesKt.randomOrNull((r1 I:kotlin.ranges.UIntRange A[D('$this$randomOrNull' kotlin.ranges.UIntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.random.Random A[D('random' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001a \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001a: r1 '$this$randomOrNull' Lkotlin\/ranges\/UIntRange;\l  \-1 \-0x001a: r2 'random' Lkotlin\/random\/Random;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

