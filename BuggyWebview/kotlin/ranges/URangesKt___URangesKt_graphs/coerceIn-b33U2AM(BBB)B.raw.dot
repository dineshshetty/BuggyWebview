digraph "CFG forkotlin.ranges.URangesKt___URangesKt.coerceIn\-b33U2AM(BBB)B" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: ARITH  (r0 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('minimumValue' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char])  (LINE:560)\l0x0002: ARITH  (r1 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('maximumValue' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0004: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:24:0x0021 \l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|0x000a: ARITH  (r0 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char] A[D('$this$coerceIn_u2db33U2AM' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char])  (LINE:561)\l0x000c: ARITH  (r1 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char] A[D('minimumValue' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x000e: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: IF  (r0 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:20:0x0015 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|RETURN\l|0x0014: RETURN  (r4 I:byte A[D('minimumValue' byte)]) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0015|0x0015: ARITH  (r0 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char] A[D('$this$coerceIn_u2db33U2AM' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char])  (LINE:562)\l0x0017: ARITH  (r1 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char] A[D('maximumValue' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0019: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|0x001d: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:23:0x0020 \l}"];
Node_22 [shape=record,label="{22\:\ 0x001f|RETURN\l|0x001f: RETURN  (r5 I:byte A[D('maximumValue' byte)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|RETURN\l|0x0020: RETURN  (r3 I:byte A[D('$this$coerceIn_u2db33U2AM' byte)])  (LINE:563)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0021|0x0021: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:560)\l0x0023: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0028: CONST_STR  (r2 I:java.lang.String) =  \"Cannot coerce value to an empty range: maximum \" \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002d: INVOKE  (r2 I:java.lang.String) = (r5 I:byte A[D('maximumValue' byte)]) type: STATIC call: kotlin.UByte.toString\-impl(byte):java.lang.String A[MD:(byte):java.lang.String (m)]\l0x0031: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0034: CONST_STR  (r2 I:java.lang.String) =  \" is less than minimum \" \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0039: INVOKE  (r2 I:java.lang.String) = (r4 I:byte A[D('minimumValue' byte)]) type: STATIC call: kotlin.UByte.toString\-impl(byte):java.lang.String A[MD:(byte):java.lang.String (m)]\l0x003d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0040: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0042: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0045: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0049: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x004c|0x004c: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final byte kotlin.ranges.URangesKt___URangesKt.coerceIn\-b33U2AM((r3 I:byte A[D('$this$coerceIn_u2db33U2AM' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte A[D('minimumValue' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:byte A[D('maximumValue' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x001f \-\> B:14:?, CROSS_EDGE: B:23:0x0020 \-\> B:14:?, CROSS_EDGE: B:25:0x004c \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x004c: r3 '$this$coerceIn_u2db33U2AM' B\l  \-1 \-0x004c: r4 'minimumValue' B\l  \-1 \-0x004c: r5 'maximumValue' B\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_14;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_14;
Node_23 -> Node_14;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

