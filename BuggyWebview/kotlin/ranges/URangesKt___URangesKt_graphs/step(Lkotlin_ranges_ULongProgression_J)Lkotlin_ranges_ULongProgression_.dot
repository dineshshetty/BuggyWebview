digraph "CFG forkotlin.ranges.URangesKt___URangesKt.step(Lkotlin\/ranges\/ULongProgression;J)Lkotlin\/ranges\/ULongProgression;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"\<this\>\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x0009|if ((r12 \> 0 ? 1 : (r12 == 0 ? 0 : \-1)) \<= 0) goto L11\l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|r2 = true\l}"];
Node_18 [shape=record,label="{18\:\ 0x000e|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v1 boolean), (r2v4 boolean) binds: [B:17:0x000d, B:16:0x000b] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.ranges.RangesKt.checkStepIsPositive(r2, java.lang.Long.valueOf(r12))\lkotlin.ranges.ULongProgression$Companion r4 = kotlin.ranges.ULongProgression.Companion\llong r5 = r11.m1380getFirstsVKNKU()\llong r7 = r11.m1381getLastsVKNKU()\l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|if ((r11.getStep() \> 0 ? 1 : (r11.getStep() == 0 ? 0 : \-1)) \<= 0) goto L10\l}"];
Node_20 [shape=record,label="{20\:\ 0x0029|r9 = r12\l}"];
Node_22 [shape=record,label="{22\:\ 0x002d|PHI: r9 \l  PHI: (r9v2 long) = (r9v1 long), (r9v3 long) binds: [B:21:0x002b, B:20:0x0029] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|RETURN\l|return r4.m1382fromClosedRange7ftBX0g(r5, r7, r9)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|r9 = \-r12\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|r2 = false\l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.ULongProgression kotlin.ranges.URangesKt___URangesKt.step((r11v0 '$this$step' kotlin.ranges.ULongProgression A[D('$this$step' kotlin.ranges.ULongProgression), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'step' long A[D('step' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x002b \-\> B:22:0x002d, CROSS_EDGE: B:17:0x000d \-\> B:18:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

