digraph "CFG forkotlin.ranges.URangesKt___URangesKt.step(Lkotlin\/ranges\/UIntProgression;I)Lkotlin\/ranges\/UIntProgression;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$step' kotlin.ranges.UIntProgression)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r5 I:??[int, byte, short, char] A[D('step' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:17:0x0009  (LINE:352)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: INVOKE  (r1 I:java.lang.Integer) = (r5 I:int A[D('step' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x000e: CHECK_CAST (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:boolean), (r1 I:java.lang.Number) type: STATIC call: kotlin.ranges.RangesKt.checkStepIsPositive(boolean, java.lang.Number):void A[MD:(boolean, java.lang.Number):void (m)]\l0x0013: SGET  (r0 I:kotlin.ranges.UIntProgression$Companion) =  kotlin.ranges.UIntProgression.Companion kotlin.ranges.UIntProgression$Companion  (LINE:353)\l0x0015: INVOKE  (r1 I:int) = (r4 I:kotlin.ranges.UIntProgression A[D('$this$step' kotlin.ranges.UIntProgression)]) type: VIRTUAL call: kotlin.ranges.UIntProgression.getFirst\-pVg5ArA():int A[MD:():int (m)]\l0x0019: INVOKE  (r2 I:int) = (r4 I:kotlin.ranges.UIntProgression A[D('$this$step' kotlin.ranges.UIntProgression)]) type: VIRTUAL call: kotlin.ranges.UIntProgression.getLast\-pVg5ArA():int A[MD:():int (m)]\l0x001d: INVOKE  (r3 I:int) = (r4 I:kotlin.ranges.UIntProgression A[D('$this$step' kotlin.ranges.UIntProgression)]) type: VIRTUAL call: kotlin.ranges.UIntProgression.getStep():int A[MD:():int (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|0x0021: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:21:0x0025 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0023|0x0023: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('step' int)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|0x0026: INVOKE  (r0 I:kotlin.ranges.UIntProgression) = (r0 I:kotlin.ranges.UIntProgression$Companion), (r1 I:int), (r2 I:int), (r3 I:int) type: VIRTUAL call: kotlin.ranges.UIntProgression.Companion.fromClosedRange\-Nkh28Cs(int, int, int):kotlin.ranges.UIntProgression A[MD:(int, int, int):kotlin.ranges.UIntProgression (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x002a|RETURN\l|0x002a: RETURN  (r0 I:kotlin.ranges.UIntProgression) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0025|0x0025: NEG  (r3 I:int) = (r5 I:int A[D('step' int)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlin.ranges.UIntProgression kotlin.ranges.URangesKt___URangesKt.step((r4 I:kotlin.ranges.UIntProgression A[D('$this$step' kotlin.ranges.UIntProgression), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0025 \-\> B:22:0x0026, CROSS_EDGE: B:17:0x0009 \-\> B:18:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002a: r4 '$this$step' Lkotlin\/ranges\/UIntProgression;\l  \-1 \-0x002a: r5 'step' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

