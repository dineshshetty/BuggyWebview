digraph "CFG forkotlin.ranges.CharProgression.\<init\>(CCI)V" {
subgraph cluster_Region_1109800984 {
label = "R(1:(2:(1:11)|(1:(2:(1:9)|(1:5)))))";
node [shape=record,color=blue];
subgraph cluster_Region_319167793 {
label = "R(2:(1:11)|(1:(2:(1:9)|(1:5))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_951774125 {
label = "IF [B:15:0x0004] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0004|if (r5 == 0) goto L10\l}"];
subgraph cluster_Region_706259530 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0026|throw new java.lang.IllegalArgumentException(\"Step must be non\-zero.\")\l}"];
}
}
subgraph cluster_Region_1502454249 {
label = "R(1:(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_2051129468 {
label = "R(2:(1:9)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_357153562 {
label = "IF [B:17:0x0008] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0008|if (r5 == Integer.MIN_VALUE) goto L8\l}"];
subgraph cluster_Region_2053900547 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x001e|throw new java.lang.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\l}"];
}
}
subgraph cluster_Region_1314549070 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000b|r2.first = r3\lr2.last = (char) kotlin.internal.progressionUtil.getProgressionLastElement((int) r3, (int) r4, r5)\lr2.step = r5\l}"];
}
}
}
}
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0000}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0006}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0016}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0017}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x001f}"];
MethodNode[shape=record,label="{public void kotlin.ranges.CharProgression.\<init\>((r2v0 'this' kotlin.ranges.CharProgression A[IMMUTABLE_TYPE, THIS]), (r3v0 'start' char A[D('start' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'endInclusive' char A[D('endInclusive' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'step' int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001e \-\> B:13:?, CROSS_EDGE: B:23:0x0026 \-\> B:13:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_23 -> Node_13;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_21 -> Node_13;
Node_18 -> Node_19;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_16 -> Node_17;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

