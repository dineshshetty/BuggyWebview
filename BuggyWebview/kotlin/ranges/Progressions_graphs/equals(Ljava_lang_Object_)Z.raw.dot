digraph "CFG forkotlin.ranges.CharProgression.equals(Ljava\/lang\/Object;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) kotlin.ranges.CharProgression  (LINE:53)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0030 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r2 I:kotlin.ranges.CharProgression) type: VIRTUAL call: kotlin.ranges.CharProgression.isEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0013 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x000b: CHECK_CAST (r0 I:kotlin.ranges.CharProgression) = (kotlin.ranges.CharProgression) (r0 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.CharProgression) type: VIRTUAL call: kotlin.ranges.CharProgression.isEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x002e \l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|SYNTHETIC\lRETURN\l|0x002e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0031: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: IGET  (r0 I:char) = (r2 I:kotlin.ranges.CharProgression) kotlin.ranges.CharProgression.first char  (LINE:54)\l0x0015: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0016: CHECK_CAST (r1 I:kotlin.ranges.CharProgression) = (kotlin.ranges.CharProgression) (r1 I:??[OBJECT, ARRAY]) \l0x0018: IGET  (r1 I:char) = (r1 I:kotlin.ranges.CharProgression) kotlin.ranges.CharProgression.first char \l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0030 \l}"];
Node_28 [shape=record,label="{28\:\ 0x001c|0x001c: IGET  (r0 I:char) = (r2 I:kotlin.ranges.CharProgression) kotlin.ranges.CharProgression.last char \l0x001e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x001f: CHECK_CAST (r1 I:kotlin.ranges.CharProgression) = (kotlin.ranges.CharProgression) (r1 I:??[OBJECT, ARRAY]) \l0x0021: IGET  (r1 I:char) = (r1 I:kotlin.ranges.CharProgression) kotlin.ranges.CharProgression.last char \l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0030 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0025|0x0025: IGET  (r0 I:int) = (r2 I:kotlin.ranges.CharProgression) kotlin.ranges.CharProgression.step int \l0x0027: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0028: CHECK_CAST (r1 I:kotlin.ranges.CharProgression) = (kotlin.ranges.CharProgression) (r1 I:??[OBJECT, ARRAY]) \l0x002a: IGET  (r1 I:int) = (r1 I:kotlin.ranges.CharProgression) kotlin.ranges.CharProgression.step int \l}"];
Node_31 [shape=record,label="{31\:\ 0x002c|0x002c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0030 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0030|RETURN\lORIG_RETURN\l|0x0030: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0031: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.CharProgression.equals((r2 'this' I:kotlin.ranges.CharProgression A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0030 \-\> B:34:0x0031, CROSS_EDGE: B:29:0x0023 \-\> B:33:0x0030, CROSS_EDGE: B:27:0x001a \-\> B:33:0x0030, CROSS_EDGE: B:25:0x0011 \-\> B:32:0x002e, CROSS_EDGE: B:23:0x0008 \-\> B:26:0x0013, CROSS_EDGE: B:21:0x0002 \-\> B:33:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0031: r3 'other' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [kotlin.ranges.CharProgression.equals(java.lang.Object):boolean]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_33;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_26;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_32;
Node_32 -> Node_19;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_33;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_33;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_33 -> Node_19;
}

