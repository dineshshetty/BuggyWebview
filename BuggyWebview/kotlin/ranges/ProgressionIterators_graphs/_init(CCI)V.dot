digraph "CFG forkotlin.ranges.CharProgressionIterator.\<init\>(CCI)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|r3.step = r6\lr3.finalElement = r5\lr0 = true\lint r2 = kotlin.jvm.internal.Intrinsics.compare(r4, r5)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|if (r6 \<= 0) goto L12\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|if (r2 \> 0) goto L4\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|r0 = false\l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v5 boolean), (r0v0 boolean) binds: [B:21:0x0012, B:23:0x0015, B:19:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|r3.hasNext = r0\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|if (r0 == false) goto L11\l}"];
Node_26 [shape=record,label="{26\:\ 0x001a|r0 = r4\l}"];
Node_28 [shape=record,label="{28\:\ 0x001d|PHI: r0 \l  PHI: (r0v3 char) = (r0v2 char), (r0v4 char) binds: [B:27:0x001c, B:26:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|r3.next = r0\l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|RETURN\l|return\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x001c|r0 = r5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|if (r2 \< 0) goto L4\l}"];
MethodNode[shape=record,label="{public void kotlin.ranges.CharProgressionIterator.\<init\>((r3v0 'this' kotlin.ranges.CharProgressionIterator A[IMMUTABLE_TYPE, THIS]), (r4v0 'first' char A[D('first' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'last' char A[D('last' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'step' int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x001c \-\> B:28:0x001d, CROSS_EDGE: B:19:0x000f \-\> B:24:0x0016, CROSS_EDGE: B:21:0x0012 \-\> B:23:0x0015, CROSS_EDGE: B:21:0x0012 \-\> B:24:0x0016\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_23;
Node_19 -> Node_24[style=dashed];
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_16;
Node_27 -> Node_28;
Node_21 -> Node_23;
Node_21 -> Node_24[style=dashed];
}

