digraph "CFG forkotlin.ranges.ComparableRange.equals(Ljava\/lang\/Object;)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) kotlin.ranges.ComparableRange  (LINE:20)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0037 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0004|0x0004: INVOKE  (r0 I:boolean) = (r2 I:kotlin.ranges.ComparableRange) type: VIRTUAL call: kotlin.ranges.ComparableRange.isEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0013 \l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x000b: CHECK_CAST (r0 I:kotlin.ranges.ComparableRange) = (kotlin.ranges.ComparableRange) (r0 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.ComparableRange) type: VIRTUAL call: kotlin.ranges.ComparableRange.isEmpty():boolean A[MD:():boolean (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0035 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0035|SYNTHETIC\lRETURN\l|0x0035: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0038: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:20)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: INVOKE  (r0 I:java.lang.Comparable) = (r2 I:kotlin.ranges.ComparableRange) type: VIRTUAL call: kotlin.ranges.ComparableRange.getStart():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)] (LINE:21)\l0x0017: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0018: CHECK_CAST (r1 I:kotlin.ranges.ComparableRange) = (kotlin.ranges.ComparableRange) (r1 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:java.lang.Comparable) = (r1 I:kotlin.ranges.ComparableRange) type: VIRTUAL call: kotlin.ranges.ComparableRange.getStart():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l0x001e: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|0x0022: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0037 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|0x0024: INVOKE  (r0 I:java.lang.Comparable) = (r2 I:kotlin.ranges.ComparableRange) type: VIRTUAL call: kotlin.ranges.ComparableRange.getEndInclusive():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l0x0028: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0029: CHECK_CAST (r1 I:kotlin.ranges.ComparableRange) = (kotlin.ranges.ComparableRange) (r1 I:??[OBJECT, ARRAY]) \l0x002b: INVOKE  (r1 I:java.lang.Comparable) = (r1 I:kotlin.ranges.ComparableRange) type: VIRTUAL call: kotlin.ranges.ComparableRange.getEndInclusive():java.lang.Comparable A[MD:():T extends java.lang.Comparable\<? super T\> (m)]\l0x002f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0033|0x0033: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0037 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0037|RETURN\lORIG_RETURN\l|0x0037: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0038: RETURN  (r0 I:boolean)  (LINE:20)\l}"];
MethodNode[shape=record,label="{public boolean kotlin.ranges.ComparableRange.equals((r2 'this' I:kotlin.ranges.ComparableRange\<T extends java.lang.Comparable\<? super T\>\> A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0037 \-\> B:30:0x0038, CROSS_EDGE: B:25:0x0022 \-\> B:29:0x0037, CROSS_EDGE: B:23:0x0011 \-\> B:28:0x0035, CROSS_EDGE: B:21:0x0008 \-\> B:24:0x0013, CROSS_EDGE: B:19:0x0002 \-\> B:29:0x0037\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0038: r3 'other' Ljava\/lang\/Object;\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_28 -> Node_17;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_29;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_29 -> Node_17;
}

