digraph "CFG forkotlin.ranges.LongProgression.\<init\>(JJJ)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r3 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:139)\l0x0004: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:147)\l0x0006: CMP_L  (r2 I:int) = (r8 I:long A[D('step' long)]), (r0 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0024 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: CONST  (r0 I:??[long, double]) = (\-9223372036854775808 ??[long, double])  (LINE:148)\l0x000c: CMP_L  (r2 I:int) = (r8 I:long A[D('step' long)]), (r0 I:long) \l}"];
Node_17 [shape=record,label="{17\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x001c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|0x0011: IPUT  (r4 I:long A[D('start' long)]), (r3 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.first long  (LINE:154)\l0x0013: INVOKE  (r0 I:long) = (r4 I:long A[D('start' long)]), (r6 I:long A[D('endInclusive' long)]), (r8 I:long A[D('step' long)]) type: STATIC call: kotlin.internal.ProgressionUtilKt.getProgressionLastElement(long, long, long):long A[MD:(long, long, long):long (m)] (LINE:159)\l0x0017: IPUT  (r0 I:long), (r3 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.last long \l0x0019: IPUT  (r8 I:long A[D('step' long)]), (r3 I:kotlin.ranges.LongProgression) kotlin.ranges.LongProgression.step long  (LINE:164)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001b|RETURN\l|0x001b: RETURN    (LINE:140)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|0x001c: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:148)\l0x001e: CONST_STR  (r1 I:java.lang.String) =  \"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\" \l0x0020: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0023|0x0023: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0024|0x0024: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:147)\l0x0026: CONST_STR  (r1 I:java.lang.String) =  \"Step must be non\-zero.\" \l0x0028: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x002b|0x002b: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.ranges.LongProgression.\<init\>((r3 'this' I:kotlin.ranges.LongProgression A[IMMUTABLE_TYPE, THIS]), (r4 I:long A[D('start' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:long A[D('endInclusive' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('step' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0023 \-\> B:13:?, CROSS_EDGE: B:23:0x002b \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002b: r4 'start' J\l  \-1 \-0x002b: r6 'endInclusive' J\l  \-1 \-0x002b: r8 'step' J\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

