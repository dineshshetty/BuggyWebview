digraph "CFG forkotlin.ranges.LongProgression.\<init\>(JJJ)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000}"];
Node_15 [shape=record,label="{15\:\ 0x0008|if ((r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1)) == 0) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x000a}"];
Node_17 [shape=record,label="{17\:\ 0x000e|if ((r8 \> Long.MIN_VALUE ? 1 : (r8 == Long.MIN_VALUE ? 0 : \-1)) == 0) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|r3.first = r4\lr3.last = kotlin.internal.progressionUtil.getProgressionLastElement(r4, r6, r8)\lr3.step = r8\l}"];
Node_19 [shape=record,label="{19\:\ 0x001b|RETURN\l|return\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c}"];
Node_21 [shape=record,label="{21\:\ 0x0023|throw new java.lang.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\l}"];
Node_22 [shape=record,label="{22\:\ 0x0024}"];
Node_23 [shape=record,label="{23\:\ 0x002b|throw new java.lang.IllegalArgumentException(\"Step must be non\-zero.\")\l}"];
MethodNode[shape=record,label="{public void kotlin.ranges.LongProgression.\<init\>((r3v0 'this' kotlin.ranges.LongProgression A[IMMUTABLE_TYPE, THIS]), (r4v0 'start' long A[D('start' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'endInclusive' long A[D('endInclusive' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'step' long A[D('step' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0023 \-\> B:13:?, CROSS_EDGE: B:23:0x002b \-\> B:13:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

