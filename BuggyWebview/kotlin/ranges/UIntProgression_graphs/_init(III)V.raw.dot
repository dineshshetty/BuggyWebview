digraph "CFG forkotlin.ranges.UIntProgression.\<init\>(III)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r2 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:50)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('step' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001e  (LINE:59)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char])  (LINE:60)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('step' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0016 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: IPUT  (r3 I:int A[D('start' int)]), (r2 I:kotlin.ranges.UIntProgression) kotlin.ranges.UIntProgression.first int  (LINE:66)\l0x000d: INVOKE  (r0 I:int) = (r3 I:int A[D('start' int)]), (r4 I:int A[D('endInclusive' int)]), (r5 I:int A[D('step' int)]) type: STATIC call: kotlin.internal.UProgressionUtilKt.getProgressionLastElement\-Nkh28Cs(int, int, int):int A[MD:(int, int, int):int (m)] (LINE:71)\l0x0011: IPUT  (r0 I:int), (r2 I:kotlin.ranges.UIntProgression) kotlin.ranges.UIntProgression.last int \l0x0013: IPUT  (r5 I:int A[D('step' int)]), (r2 I:kotlin.ranges.UIntProgression) kotlin.ranges.UIntProgression.step int  (LINE:76)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|RETURN\l|0x0015: RETURN    (LINE:53)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|0x0016: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:60)\l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\" \l0x001a: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|0x001d: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|0x001e: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:59)\l0x0020: CONST_STR  (r1 I:java.lang.String) =  \"Step must be non\-zero.\" \l0x0022: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0025|0x0025: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private void kotlin.ranges.UIntProgression.\<init\>((r2 'this' I:kotlin.ranges.UIntProgression A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('start' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('endInclusive' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x001d \-\> B:13:?, CROSS_EDGE: B:23:0x0025 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r3 'start' I\l  \-1 \-0x0025: r4 'endInclusive' I\l  \-1 \-0x0025: r5 'step' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

