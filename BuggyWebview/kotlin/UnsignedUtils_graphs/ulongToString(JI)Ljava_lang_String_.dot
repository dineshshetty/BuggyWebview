digraph "CFG forkotlin.UnsignedKt.ulongToString(JI)Ljava\/lang\/String;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0006|if ((r8 \> 0 ? 1 : (r8 == 0 ? 0 : \-1)) \< 0) goto L6\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|java.lang.String r1 = java.lang.Long.toString(r8, kotlin.text.CharsKt.checkRadix(r10))\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"toString(this, checkRadix(radix))\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|RETURN\l|return r1\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|long r1 = ((r8 \>\>\> 1) \/ ((long) r10)) \<\< 1\llong r3 = r8 \- (((long) r10) * r1)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0023|if ((r3 \> ((long) r10) ? 1 : (r3 == ((long) r10) ? 0 : \-1)) \< 0) goto L9\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|long r3 = r3 \- ((long) r10)\llong r1 = r1 + 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x002a|PHI: r1 r3 \l  PHI: (r1v3 'quotient' long) = (r1v2 'quotient' long), (r1v4 'quotient' long) binds: [B:18:0x0023, B:19:0x0025] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 'rem' long) = (r3v3 'rem' long), (r3v5 'rem' long) binds: [B:18:0x0023, B:19:0x0025] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.StringBuilder r5 = new java.lang.StringBuilder()\ljava.lang.String r6 = java.lang.Long.toString(r1, kotlin.text.CharsKt.checkRadix(r10))\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r6, \"toString(this, checkRadix(radix))\")\lr5.append(r6)\ljava.lang.String r6 = java.lang.Long.toString(r3, kotlin.text.CharsKt.checkRadix(r10))\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r6, \"toString(this, checkRadix(radix))\")\lr5.append(r6)\l}"];
Node_21 [shape=record,label="{21\:\ 0x004f|RETURN\l|return r5.toString()\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.UnsignedKt.ulongToString((r8v0 'v' long A[D('v' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'base' int A[D('base' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x004f \-\> B:12:?, CROSS_EDGE: B:18:0x0023 \-\> B:20:0x002a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_12;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

