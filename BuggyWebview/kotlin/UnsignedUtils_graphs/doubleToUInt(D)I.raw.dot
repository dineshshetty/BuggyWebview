digraph "CFG forkotlin.UnsignedKt.doubleToUInt(D)I" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0001|0x0001: INVOKE  (r0 I:boolean) = (r5 I:double A[D('v' double)]) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)] (LINE:66)\l0x0005: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x000b \l}"];
Node_24 [shape=record,label="{24\:\ 0x0009|SYNTHETIC\lRETURN\l|0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0041: RETURN  (r1 I:int) A[SYNTHETIC] (LINE:71)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|0x000b: INVOKE  (r3 I:double) = (r2 I:int) type: STATIC call: kotlin.UnsignedKt.uintToDouble(int):double A[MD:(int):double (m)] (LINE:67)\l0x000f: CMP_G  (r0 I:int) = (r5 I:double A[D('v' double)]), (r3 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0011|0x0011: IF  (r0 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:28:0x0015 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0013|SYNTHETIC\lRETURN\l|0x0013: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0041: RETURN  (r1 I:int) A[SYNTHETIC] (LINE:71)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0015|0x0015: INVOKE  (r2 I:double) = (r1 I:int) type: STATIC call: kotlin.UnsignedKt.uintToDouble(int):double A[MD:(int):double (m)] (LINE:68)\l0x0019: CMP_L  (r0 I:int) = (r5 I:double A[D('v' double)]), (r2 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|0x001b: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:31:0x001e \l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|0x001e: CONST  (r0 I:??[long, double]) = (4746794007244308480(0x41dfffffffc00000, double:2.147483647E9) ??[long, double])  (LINE:69)\l0x0023: CMP_G  (r2 I:int) = (r5 I:double A[D('v' double)]), (r0 I:double) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0025|0x0025: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:34:0x002d \l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|0x0027: CAST (r0 I:int) = (int) (r5 I:double A[D('v' double)]) \l0x0028: INVOKE  (r1 I:int) = (r0 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x0041: RETURN  (r1 I:int) A[SYNTHETIC] (LINE:71)\l}"];
Node_34 [shape=record,label="{34\:\ 0x002d|0x002d: CONST  (r0 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char])  (LINE:70)\l0x0030: CAST (r1 I:double) = (double) (r0 I:int) \l0x0031: ARITH  (r1 I:double) = (r5 I:double A[D('v' double)]) \- (r1 I:double) \l0x0033: CAST (r1 I:int) = (int) (r1 I:double) \l0x0034: INVOKE  (r1 I:int) = (r1 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l0x0038: INVOKE  (r0 I:int) = (r0 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l0x003c: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int) \l0x003d: INVOKE  (r1 I:int) = (r1 I:int) type: STATIC call: kotlin.UInt.constructor\-impl(int):int A[MD:(int):int (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0041|RETURN\lORIG_RETURN\l|0x0041: RETURN  (r1 I:int)  (LINE:71)\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0041: RETURN  (r1 I:int) A[SYNTHETIC] (LINE:71)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.UnsignedKt.doubleToUInt((r5 I:double A[D('v' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0013 \-\> B:35:0x0041, CROSS_EDGE: B:33:0x0027 \-\> B:35:0x0041, CROSS_EDGE: B:34:0x002d \-\> B:35:0x0041, CROSS_EDGE: B:29:0x001b \-\> B:35:0x0041\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0041: r5 'v' D\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_21;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_39[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_38;
Node_38 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_21;
Node_39 -> Node_21;
}

