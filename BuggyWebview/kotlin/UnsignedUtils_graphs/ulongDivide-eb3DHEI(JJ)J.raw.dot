digraph "CFG forkotlin.UnsignedKt.ulongDivide\-eb3DHEI(JJ)J" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: MOVE  (r0 I:??[long, double]) = (r13 I:??[long, double] A[D('v1' long)])  (LINE:23)\l0x0001: MOVE  (r2 I:??[long, double]) = (r15 I:??[long, double] A[D('v2' long)])  (LINE:24)\l0x0002: CONST  (r4 I:??[long, double]) = (0 ??[long, double])  (LINE:25)\l0x0004: CMP_L  (r6 I:int) = (r2 I:long A[D('divisor' long)]), (r4 I:long) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:30:0x0016 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|0x0008: INVOKE  (r6 I:int) = (r13 I:long A[D('v1' long)]), (r15 I:long A[D('v2' long)]) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)] (LINE:26)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000c|0x000c: IF  (r6 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:27:0x000f \l}"];
Node_27 [shape=record,label="{27\:\ 0x000f|0x000f: CONST  (r4 I:??[long, double]) = (1 ??[long, double]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|0x0011: INVOKE  (r4 I:long) = (r4 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0015|RETURN\l|0x0015: RETURN  (r4 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|0x0016: CMP_L  (r6 I:int) = (r0 I:long A[D('dividend' long)]), (r4 I:long)  (LINE:30)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0018|0x0018: IF  (r6 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:34:0x0021 \l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: ARITH  (r4 I:long) = (r0 I:long A[D('dividend' long)]) \/ (r2 I:long A[D('divisor' long)])  (LINE:31)\l0x001c: INVOKE  (r4 I:long) = (r4 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0020|RETURN\l|0x0020: RETURN  (r4 I:long) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|0x0021: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:35)\l0x0022: ARITH  (r5 I:long) = (r0 I:long A[D('dividend' long)]) \>\>\> (r4 I:long) \l0x0024: ARITH  (r5 I:long) = (r5 I:long) \/ (r2 I:long A[D('divisor' long)]) \l0x0025: ARITH  (r5 I:long) = (r5 I:long) \<\< (r4 I:long) \l0x0026: ARITH  (r7 I:long) = (r5 I:long A[D('quotient' long)]) * (r2 I:long A[D('divisor' long)])  (LINE:36)\l0x0028: ARITH  (r7 I:long) = (r0 I:long A[D('dividend' long)]) \- (r7 I:long) \l0x002a: INVOKE  (r9 I:long) = (r7 I:long A[D('rem' long)]) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)] (LINE:37)\l0x002e: INVOKE  (r11 I:long) = (r2 I:long A[D('divisor' long)]) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0032: INVOKE  (r9 I:int) = (r9 I:long), (r11 I:long) type: STATIC call: kotlin.UnsignedKt.ulongCompare(long, long):int A[MD:(long, long):int (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0036|0x0036: IF  (r9 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:37:0x0039 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0039|0x0039: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x003a|0x003a: CAST (r9 I:long) = (long) (r4 I:int) \l0x003b: ARITH  (r9 I:long) = (r9 I:long) + (r5 I:long A[D('quotient' long)]) \l0x003c: INVOKE  (r9 I:long) = (r9 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0040|RETURN\l|0x0040: RETURN  (r9 I:long) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.UnsignedKt.ulongDivide\-eb3DHEI((r13 I:long A[D('v1' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:long A[D('v2' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x000c \-\> B:28:0x0011, CROSS_EDGE: B:33:0x0020 \-\> B:21:?, CROSS_EDGE: B:39:0x0040 \-\> B:21:?, CROSS_EDGE: B:35:0x0036 \-\> B:38:0x003a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0040: r0 'dividend' J\l  0x0002\-0x0040: r2 'divisor' J\l  0x0026\-0x0040: r5 'quotient' J\l  0x002a\-0x0040: r7 'rem' J\l  \-1 \-0x0040: r13 'v1' J\l  \-1 \-0x0040: r15 'v2' J\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_30;
Node_24 -> Node_25;
Node_25 -> Node_27;
Node_25 -> Node_28[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_21;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_38[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_21;
}

