digraph "CFG forkotlin.UnsignedKt.doubleToULong(D)J" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0001}"];
Node_23 [shape=record,label="{23\:\ 0x0009|if (java.lang.Double.isNaN(r7) == false) goto L6\l}"];
Node_24 [shape=record,label="{24\:\ 0x000b}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x000d}"];
Node_26 [shape=record,label="{26\:\ 0x0013|if ((r7 \> ulongToDouble(0) ? 1 : (r7 == ulongToDouble(0) ? 0 : \-1)) \> 0) goto L10\l}"];
Node_27 [shape=record,label="{27\:\ 0x0015}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return 0\l}"];
Node_28 [shape=record,label="{28\:\ 0x0017}"];
Node_29 [shape=record,label="{29\:\ 0x001d|if ((r7 \> ulongToDouble(\-1) ? 1 : (r7 == ulongToDouble(\-1) ? 0 : \-1)) \< 0) goto L12\l}"];
Node_31 [shape=record,label="{31\:\ 0x0020}"];
Node_32 [shape=record,label="{32\:\ 0x0024|if ((r7 \> 9.223372036854776E18d ? 1 : (r7 == 9.223372036854776E18d ? 0 : \-1)) \>= 0) goto L16\l}"];
Node_33 [shape=record,label="{33\:\ 0x0026}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.ULong.m316constructorimpl((long) r7)\l}"];
Node_34 [shape=record,label="{34\:\ 0x002c}"];
Node_35 [shape=record,label="{35\:\ 0x003a|RETURN\lORIG_RETURN\l|return kotlin.ULong.m316constructorimpl(kotlin.ULong.m316constructorimpl((long) (r7 \- 9.223372036854776E18d)) + Long.MIN_VALUE)\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public static final long kotlin.UnsignedKt.doubleToULong((r7v0 'v' double A[D('v' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0015 \-\> B:35:0x003a, CROSS_EDGE: B:33:0x0026 \-\> B:35:0x003a, CROSS_EDGE: B:34:0x002c \-\> B:35:0x003a, CROSS_EDGE: B:29:0x001d \-\> B:35:0x003a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_36;
Node_36 -> Node_21;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_37;
Node_37 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_39[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_38;
Node_38 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_21;
Node_39 -> Node_21;
}

