digraph "CFG forkotlin.UnsignedKt.doubleToULong(D)J" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0001|0x0001: INVOKE  (r0 I:boolean) = (r7 I:double A[D('v' double)]) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)] (LINE:75)\l0x0005: CONST  (r1 I:??[long, double]) = (\-1 ??[long, double]) \l0x0007: CONST  (r3 I:??[long, double]) = (0 ??[long, double]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x000d \l}"];
Node_24 [shape=record,label="{24\:\ 0x000b|0x000b: MOVE  (r1 I:??[long, double]) = (r3 I:??[long, double]) \l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|0x003a: RETURN  (r1 I:long) A[SYNTHETIC] (LINE:82)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x000d|0x000d: INVOKE  (r5 I:double) = (r3 I:long) type: STATIC call: kotlin.UnsignedKt.ulongToDouble(long):double A[MD:(long):double (m)] (LINE:76)\l0x0011: CMP_G  (r0 I:int) = (r7 I:double A[D('v' double)]), (r5 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: IF  (r0 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:28:0x0017 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0015|0x0015: MOVE  (r1 I:??[long, double]) = (r3 I:??[long, double]) \l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|0x003a: RETURN  (r1 I:long) A[SYNTHETIC] (LINE:82)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0017|0x0017: INVOKE  (r3 I:double) = (r1 I:long) type: STATIC call: kotlin.UnsignedKt.ulongToDouble(long):double A[MD:(long):double (m)] (LINE:77)\l0x001b: CMP_L  (r0 I:int) = (r7 I:double A[D('v' double)]), (r3 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|0x001d: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:31:0x0020 \l}"];
Node_31 [shape=record,label="{31\:\ 0x0020|0x0020: CONST  (r0 I:??[long, double]) = (4890909195324358656(0x43e0000000000000, double:9.223372036854776E18) ??[long, double])  (LINE:78)\l0x0022: CMP_G  (r2 I:int) = (r7 I:double A[D('v' double)]), (r0 I:double) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0024|0x0024: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:34:0x002c \l}"];
Node_33 [shape=record,label="{33\:\ 0x0026|0x0026: CAST (r0 I:long) = (long) (r7 I:double A[D('v' double)]) \l0x0027: INVOKE  (r1 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x003a: RETURN  (r1 I:long) A[SYNTHETIC] (LINE:82)\l}"];
Node_34 [shape=record,label="{34\:\ 0x002c|0x002c: ARITH  (r0 I:double) = (r7 I:double A[D('v' double)]) \- (r0 I:double)  (LINE:81)\l0x002e: CAST (r0 I:long) = (long) (r0 I:double) \l0x002f: INVOKE  (r0 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l0x0033: CONST  (r2 I:??[long, double]) = (\-9223372036854775808 ??[long, double]) \l0x0035: ARITH  (r0 I:long) = (r0 I:long) + (r2 I:long) \l0x0036: INVOKE  (r1 I:long) = (r0 I:long) type: STATIC call: kotlin.ULong.constructor\-impl(long):long A[MD:(long):long (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x003a|RETURN\lORIG_RETURN\l|0x003a: RETURN  (r1 I:long)  (LINE:82)\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x003a: RETURN  (r1 I:long) A[SYNTHETIC] (LINE:82)\l}"];
MethodNode[shape=record,label="{public static final long kotlin.UnsignedKt.doubleToULong((r7 I:double A[D('v' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0015 \-\> B:35:0x003a, CROSS_EDGE: B:33:0x0026 \-\> B:35:0x003a, CROSS_EDGE: B:34:0x002c \-\> B:35:0x003a, CROSS_EDGE: B:29:0x001d \-\> B:35:0x003a\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x003a: r7 'v' D\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_36;
Node_36 -> Node_21;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_37;
Node_37 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_31;
Node_29 -> Node_39[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_38;
Node_38 -> Node_21;
Node_34 -> Node_35;
Node_35 -> Node_21;
Node_39 -> Node_21;
}

