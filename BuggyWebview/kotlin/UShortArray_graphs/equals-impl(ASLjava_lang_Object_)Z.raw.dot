digraph "CFG forkotlin.UShortArray.equals\-impl([SLjava\/lang\/Object;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY]) kotlin.UShortArray \l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0006 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|RETURN\l|0x0005: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x0007: CHECK_CAST (r0 I:kotlin.UShortArray) = (kotlin.UShortArray) (r0 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:short[]) = (r0 I:kotlin.UShortArray) type: VIRTUAL call: kotlin.UShortArray.unbox\-impl():short[] A[MD:():short[] (m)]\l0x000d: INVOKE  (r0 I:boolean) = (r2 I:java.lang.Object), (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0014 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|RETURN\l|0x0013: RETURN  (r1 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|RETURN\l|0x0014: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0015: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static boolean kotlin.UShortArray.equals\-impl((r2 I:short[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:17:0x0013 \-\> B:11:?, CROSS_EDGE: B:19:0x0015 \-\> B:11:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_11;
}

