digraph "CFG forkotlin.Triple.hashCode()I" {
subgraph cluster_Region_310883507 {
label = "R(4:1|4|7|11)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|A A r0 = r4.first\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r2 = (r0 == null ? 0 : r0.hashCode()) * 31\lB B r3 = r4.second\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|PHI: r3 \l  PHI: (r3v2 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r0 = (r2 + (r3 == null ? 0 : r3.hashCode())) * 31\lC C r3 = r4.third\l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|RETURN\l|return r0 + (r3 != null ? r3.hashCode() : 0)\l}"];
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0003}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0005}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x000f}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0011}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x001c}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x001f}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0023|PHI: r1 \l  PHI: (r1v1 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0013}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0007}"];
MethodNode[shape=record,label="{public int kotlin.Triple.hashCode((r4v0 'this' kotlin.Triple\<A, B, C\> A[IMMUTABLE_TYPE, THIS]))  | CROSS_EDGE: B:27:0x001c \-\> B:30:0x0023, CROSS_EDGE: B:25:0x0013 \-\> B:26:0x0017, CROSS_EDGE: B:21:0x0007 \-\> B:22:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: [A, B, C]\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_22 -> Node_23;
Node_26 -> Node_27;
Node_31 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_23 -> Node_24;
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_27 -> Node_29;
Node_27 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_25 -> Node_26;
Node_21 -> Node_22;
}

