digraph "CFG forkotlin.concurrent.ThreadsKt.getOrSet(Ljava\/lang\/ThreadLocal;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
subgraph cluster_Region_500794155 {
label = "R(2:1|(2:(2:3|4)|(1:6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"default\")\ljava.lang.Object T r0 = r3.get()\l}"];
subgraph cluster_Region_1252292088 {
label = "R(2:(2:3|4)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_874966158 {
label = "IF [B:10:0x000e] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000e|if (r0 == null) goto L3\l}"];
subgraph cluster_Region_891271523 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0010|java.lang.Object T r0 = r4.invoke()\lr3.set(r0)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0019|RETURN\lORIG_RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_337328216 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final T kotlin.concurrent.ThreadsKt.getOrSet((r3v0 java.lang.ThreadLocal\<T\> A[D('$this$getOrSet' java.lang.ThreadLocal), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 kotlin.jvm.functions.Function0\<? extends T\> A[D('default' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000e \-\> B:12:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/ThreadLocal\<TT;\>;Lkotlin\/jvm\/functions\/Function0\<+TT;\>;)TT;\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_12 -> Node_8;
Node_13 -> Node_8;
Node_7 -> Node_9;
}

