digraph "CFG forkotlin.concurrent.ThreadsKt.thread(ZZLjava\/lang\/ClassLoader;Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Thread;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"block\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('block' kotlin.jvm.functions.Function0)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1) =  kotlin.concurrent.ThreadsKt$thread$thread$1  (LINE:28)\l0x0007: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1)\l  (r7 I:kotlin.jvm.functions.Function0 A[D('block' kotlin.jvm.functions.Function0)])\l type: DIRECT call: kotlin.concurrent.ThreadsKt$thread$thread$1.\<init\>(kotlin.jvm.functions.Function0):void A[MD:(kotlin.jvm.functions.Function0\<kotlin.Unit\>):void (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isDaemon' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0010  (LINE:33)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:34)\l0x000d: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1 A[D('thread' kotlin.concurrent.ThreadsKt$thread$thread$1)])\l  (r1 I:boolean)\l type: VIRTUAL call: kotlin.concurrent.ThreadsKt$thread$thread$1.setDaemon(boolean):void A[MD:(boolean):void (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: IF  (r6 I:??[int, byte, short, char] A[D('priority' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:22:0x0015  (LINE:35)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|0x0012: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1 A[D('thread' kotlin.concurrent.ThreadsKt$thread$thread$1)])\l  (r6 I:int A[D('priority' int)])\l type: VIRTUAL call: kotlin.concurrent.ThreadsKt$thread$thread$1.setPriority(int):void A[MD:(int):void (c)] (LINE:36)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('name' java.lang.String)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x001a  (LINE:37)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|0x0017: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1 A[D('thread' kotlin.concurrent.ThreadsKt$thread$thread$1)])\l  (r5 I:java.lang.String A[D('name' java.lang.String)])\l type: VIRTUAL call: kotlin.concurrent.ThreadsKt$thread$thread$1.setName(java.lang.String):void A[MD:(java.lang.String):void (c)] (LINE:38)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001a|0x001a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('contextClassLoader' java.lang.ClassLoader)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x001f  (LINE:39)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|0x001c: INVOKE  \l  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1 A[D('thread' kotlin.concurrent.ThreadsKt$thread$thread$1)])\l  (r4 I:java.lang.ClassLoader A[D('contextClassLoader' java.lang.ClassLoader)])\l type: VIRTUAL call: kotlin.concurrent.ThreadsKt$thread$thread$1.setContextClassLoader(java.lang.ClassLoader):void A[MD:(java.lang.ClassLoader):void (c)] (LINE:40)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|0x001f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('start' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0024  (LINE:41)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|0x0021: INVOKE  (r0 I:kotlin.concurrent.ThreadsKt$thread$thread$1 A[D('thread' kotlin.concurrent.ThreadsKt$thread$thread$1)]) type: VIRTUAL call: kotlin.concurrent.ThreadsKt$thread$thread$1.start():void A[MD:():void (c)] (LINE:42)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|0x0024: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('thread' kotlin.concurrent.ThreadsKt$thread$thread$1)])  (LINE:43)\l0x0025: CHECK_CAST (r1 I:java.lang.Thread) = (java.lang.Thread) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0027|RETURN\l|0x0027: RETURN  (r1 I:java.lang.Thread) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.Thread kotlin.concurrent.ThreadsKt.thread((r2 I:boolean A[D('start' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[D('isDaemon' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.ClassLoader A[D('contextClassLoader' java.lang.ClassLoader), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('priority' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function0\<kotlin.Unit\> A[D('block' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x001f \-\> B:28:0x0024, CROSS_EDGE: B:24:0x001a \-\> B:26:0x001f, CROSS_EDGE: B:22:0x0015 \-\> B:24:0x001a, CROSS_EDGE: B:20:0x0010 \-\> B:22:0x0015, CROSS_EDGE: B:18:0x000a \-\> B:20:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0027: r0 'thread' Lkotlin\/concurrent\/ThreadsKt$thread$thread$1;\l  \-1 \-0x0027: r2 'start' Z\l  \-1 \-0x0027: r3 'isDaemon' Z\l  \-1 \-0x0027: r4 'contextClassLoader' Ljava\/lang\/ClassLoader;\l  \-1 \-0x0027: r5 'name' Ljava\/lang\/String;\l  \-1 \-0x0027: r6 'priority' I\l  \-1 \-0x0027: r7 'block' Lkotlin\/jvm\/functions\/Function0;\lSIGNATURE: (ZZLjava\/lang\/ClassLoader;Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function0\<Lkotlin\/Unit;\>;)Ljava\/lang\/Thread;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_16;
}

