digraph "CFG forkotlin.concurrent.ThreadsKt.thread$default(ZZLjava\/lang\/ClassLoader;Ljava\/lang\/String;ILkotlin\/jvm\/functions\/Function0;ILjava\/lang\/Object;)Ljava\/lang\/Thread;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: ARITH  (r13 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:20)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0002|0x0002: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0007 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0004|0x0004: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:21)\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0008|0x0008: ARITH  (r6 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x000a|0x000a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x000f \l}"];
Node_32 [shape=record,label="{32\:\ 0x000c|0x000c: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:22)\l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0010|0x0010: ARITH  (r6 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char]) \l0x0012: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0013|0x0013: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0017 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0015|0x0015: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:23)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0018|0x0018: ARITH  (r6 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (8 ??[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x001a|0x001a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x001e \l}"];
Node_40 [shape=record,label="{40\:\ 0x001c|0x001c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:24)\l}"];
Node_42 [shape=record,label="{42\:\ 0x001f|0x001f: ARITH  (r6 I:??[int, boolean]) = (r12 I:??[int, boolean, short, byte, char]) & (16 ??[int, float, short, byte, char]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0021|0x0021: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0026 \l}"];
Node_44 [shape=record,label="{44\:\ 0x0023|0x0023: CONST  (r10 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:25)\l0x0024: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0027|0x0027: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r6 I:java.lang.Thread) = \l  (r0 I:boolean)\l  (r1 I:boolean)\l  (r2 I:java.lang.ClassLoader)\l  (r3 I:java.lang.String)\l  (r4 I:int)\l  (r5 I:kotlin.jvm.functions.Function0)\l type: STATIC call: kotlin.concurrent.ThreadsKt.thread(boolean, boolean, java.lang.ClassLoader, java.lang.String, int, kotlin.jvm.functions.Function0):java.lang.Thread A[MD:(boolean, boolean, java.lang.ClassLoader, java.lang.String, int, kotlin.jvm.functions.Function0\<kotlin.Unit\>):java.lang.Thread (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x002c|RETURN\l|0x002c: RETURN  (r6 I:java.lang.Thread) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ 0x0026|0x0026: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:20)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001e|0x001e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY])  (LINE:20)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0017|0x0017: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY])  (LINE:20)\l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|0x000f: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:20)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0007|0x0007: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:20)\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ java.lang.Thread kotlin.concurrent.ThreadsKt.thread$default((r6 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.ClassLoader A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function0 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_GENERATE\lMETHOD_CANDIDATE_FOR_INLINE\lCROSS_EDGE: B:45:0x0026 \-\> B:46:0x0027, CROSS_EDGE: B:41:0x001e \-\> B:42:0x001f, CROSS_EDGE: B:37:0x0017 \-\> B:38:0x0018, CROSS_EDGE: B:33:0x000f \-\> B:34:0x0010, CROSS_EDGE: B:29:0x0007 \-\> B:30:0x0008\lINLINE: 0x0028: INVOKE  \l  (wrap: boolean : ?: TERNARYnull = ((wrap: int : 0x0000: ARITH  (r13v1 int A[REMOVE]) = (r12v0 int) & (1 int)) != (0 int)) ? true : (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]))\l  (wrap: boolean : ?: TERNARYnull = ((wrap: int : 0x0008: ARITH  (r6v1 int A[REMOVE]) = (r12v0 int) & (2 int)) != (0 int)) ? false : (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]))\l  (wrap: java.lang.ClassLoader : ?: TERNARYnull = ((wrap: int : 0x0010: ARITH  (r6v2 int A[REMOVE]) = (r12v0 int) & (4 int)) != (0 int)) ? (null java.lang.ClassLoader) : (r8 I:??[OBJECT, ARRAY]))\l  (wrap: java.lang.String : ?: TERNARYnull = ((wrap: int : 0x0018: ARITH  (r6v3 int A[REMOVE]) = (r12v0 int) & (8 int)) != (0 int)) ? (null java.lang.String) : (r9 I:??[OBJECT, ARRAY]))\l  (wrap: int : ?: TERNARYnull = ((wrap: int : 0x001f: ARITH  (r6v4 int A[REMOVE]) = (r12v0 int) & (16 int)) != (0 int)) ? (\-1 int) : (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]))\l  (r11 I:kotlin.jvm.functions.Function0)\l type: STATIC call: kotlin.concurrent.ThreadsKt.thread(boolean, boolean, java.lang.ClassLoader, java.lang.String, int, kotlin.jvm.functions.Function0):java.lang.Thread\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [20=6]\}\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_25;
Node_45 -> Node_46;
Node_41 -> Node_42;
Node_37 -> Node_38;
Node_33 -> Node_34;
Node_29 -> Node_30;
}

