digraph "CFG forkotlin.concurrent.LocksKt.read(Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$read' java.util.concurrent.locks.ReentrantReadWriteLock)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"action\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function0)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock) = \l  (r3 I:java.util.concurrent.locks.ReentrantReadWriteLock A[D('$this$read' java.util.concurrent.locks.ReentrantReadWriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.readLock():java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[MD:():java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock (c)] (LINE:35)\l0x000f: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[D('rl' java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock():void A[MD:():void (c)] (LINE:36)\l0x0013: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:38)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0014|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0022, blocks: (B:3:0x0014), top: B:9:0x0014 \}\lCatch: all \-\> 0x0022\l|0x0014: INVOKE  (r2 I:java.lang.Object) = (r4 I:kotlin.jvm.functions.Function0 A[D('action' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[Catch: all \-\> 0x0022, MD:():R (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x0018|0x0018: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x001b: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[D('rl' java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock():void A[MD:():void (c)] (LINE:40)\l0x001e: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0021|RETURN\l|0x0021: RETURN  (r2 I:T)  (LINE:38)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x0022|ExcHandler: all \-\> 0x0022\l|0x0022: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0022] (LINE:40)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0023|0x0023: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x0026: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[D('rl' java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock():void A[MD:():void (c)]\l0x0029: INVOKE  (r1 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002c|0x002c: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final T kotlin.concurrent.LocksKt.read((r3 I:java.util.concurrent.locks.ReentrantReadWriteLock A[D('$this$read' java.util.concurrent.locks.ReentrantReadWriteLock), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function0\<? extends T\> A[D('action' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x002c \-\> B:1:?, CROSS_EDGE: B:9:0x0014 \-\> B:6:0x0022\lDebug Info:\l  0x000f\-0x002c: r0 'rl' Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock$ReadLock;\l  \-1 \-0x002c: r3 '$this$read' Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;\l  \-1 \-0x002c: r4 'action' Lkotlin\/jvm\/functions\/Function0;\lTYPE_VARS: [T]\lTryCatch #0 \{all \-\> 0x0022, blocks: (B:3:0x0014), top: B:9:0x0014 \}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;Lkotlin\/jvm\/functions\/Function0\<+TT;\>;)TT;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_9;
Node_9 -> Node_3;
Node_9 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_10;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_10 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_1;
}

