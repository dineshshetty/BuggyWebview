digraph "CFG forkotlin.concurrent.LocksKt.write(Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$write' java.util.concurrent.locks.ReentrantReadWriteLock)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"action\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function0)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INVOKE  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock) = \l  (r8 I:java.util.concurrent.locks.ReentrantReadWriteLock A[D('$this$write' java.util.concurrent.locks.ReentrantReadWriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.readLock():java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[MD:():java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock (c)] (LINE:60)\l0x000f: INVOKE  (r1 I:int) = \l  (r8 I:java.util.concurrent.locks.ReentrantReadWriteLock A[D('$this$write' java.util.concurrent.locks.ReentrantReadWriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount():int A[MD:():int (c)] (LINE:62)\l0x0013: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x001b \l}"];
Node_4 [shape=record,label="{4\:\ 0x0016|0x0016: INVOKE  (r1 I:int) = \l  (r8 I:java.util.concurrent.locks.ReentrantReadWriteLock A[D('$this$write' java.util.concurrent.locks.ReentrantReadWriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount():int A[MD:():int (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|0x001c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:63)\l}"];
Node_7 [shape=record,label="{7\:\ 0x001d|LOOP_START\lLOOP:0: B:7:0x001d\-\>B:8:0x001f\l|0x001d: IF  (r3 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('readCount' int)])  \-\> B:24:0x0027 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|LOOP_END\lLOOP:0: B:7:0x001d\-\>B:8:0x001f\l|0x001f: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:75)\l0x0021: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[D('rl' java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.unlock():void A[MD:():void (c)] (LINE:63)\l0x0024: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0027|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x0027|0x0027: INVOKE  (r3 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock) = \l  (r8 I:java.util.concurrent.locks.ReentrantReadWriteLock A[D('$this$write' java.util.concurrent.locks.ReentrantReadWriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.writeLock():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock A[MD:():java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock (c)] (LINE:65)\l0x002b: INVOKE  \l  (r3 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock A[D('wl' java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.lock():void A[MD:():void (c)] (LINE:66)\l0x002f: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:68)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0030|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_10 [shape=record,label="{10\:\ 0x0030|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0049, blocks: (B:10:0x0030), top: B:22:0x0030 \}\lCatch: all \-\> 0x0049\l|0x0030: INVOKE  (r5 I:java.lang.Object) = (r9 I:kotlin.jvm.functions.Function0 A[D('action' kotlin.jvm.functions.Function0)]) type: INTERFACE call: kotlin.jvm.functions.Function0.invoke():java.lang.Object A[Catch: all \-\> 0x0049, MD:():R (m), TRY_ENTER, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: INVOKE  (r4 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|LOOP_START\lLOOP:1: B:12:0x0038\-\>B:13:0x003a\l|0x0038: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('readCount' int)])  \-\> B:25:0x0042 \l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|LOOP_END\lLOOP:1: B:12:0x0038\-\>B:13:0x003a\l|0x003a: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003b: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:75)\l0x003c: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[D('rl' java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock():void A[MD:():void (c)] (LINE:70)\l0x003f: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0042|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: INVOKE  \l  (r3 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock A[D('wl' java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void A[MD:():void (c)] (LINE:71)\l0x0045: INVOKE  (r4 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0048|RETURN\l|0x0048: RETURN  (r5 I:T)  (LINE:68)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_16 [shape=record,label="{16\:\ 0x0049|ExcHandler: all \-\> 0x0049\l|0x0049: MOVE_EXCEPTION  (r5 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0049] (LINE:70)\l}"];
Node_17 [shape=record,label="{17\:\ 0x004a|0x004a: INVOKE  (r4 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x004d|LOOP_START\lLOOP:2: B:18:0x004d\-\>B:19:0x004f\l|0x004d: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('readCount' int)])  \-\> B:26:0x0057 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004f|LOOP_END\lLOOP:2: B:18:0x004d\-\>B:19:0x004f\l|0x004f: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0050: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:75)\l0x0051: INVOKE  \l  (r0 I:java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock A[D('rl' java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.lock():void A[MD:():void (c)] (LINE:70)\l0x0054: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0057|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0057|0x0057: INVOKE  \l  (r3 I:java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock A[D('wl' java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock)])\l type: VIRTUAL call: java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.unlock():void A[MD:():void (c)] (LINE:71)\l0x005a: INVOKE  (r4 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x005d|0x005d: THROW  (r5 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x001b|0x001b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static final T kotlin.concurrent.LocksKt.write((r8 I:java.util.concurrent.locks.ReentrantReadWriteLock A[D('$this$write' java.util.concurrent.locks.ReentrantReadWriteLock), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function0\<? extends T\> A[D('action' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x001f \-\> B:7:0x001d, BACK_EDGE: B:13:0x003a \-\> B:12:0x0038, BACK_EDGE: B:19:0x004f \-\> B:18:0x004d, CROSS_EDGE: B:21:0x005d \-\> B:1:?, CROSS_EDGE: B:22:0x0030 \-\> B:16:0x0049, CROSS_EDGE: B:5:0x001b \-\> B:6:0x001c\lDebug Info:\l  0x0020\-0x0024: r4 'it' I\l  0x0021\-0x0024: r5 '$i$a$\-repeat\-LocksKt$write$2' I\l  0x003b\-0x003f: r6 'it' I\l  0x003c\-0x003f: r7 '$i$a$\-repeat\-LocksKt$write$3' I\l  0x0050\-0x0054: r6 'it' I\l  0x0051\-0x0054: r7 '$i$a$\-repeat\-LocksKt$write$3' I\l  0x000f\-0x005d: r0 'rl' Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock$ReadLock;\l  0x001c\-0x005d: r1 'readCount' I\l  0x002b\-0x005d: r3 'wl' Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock$WriteLock;\l  \-1 \-0x005d: r8 '$this$write' Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;\l  \-1 \-0x005d: r9 'action' Lkotlin\/jvm\/functions\/Function0;\lTYPE_VARS: [T]\lTryCatch #0 \{all \-\> 0x0049, blocks: (B:10:0x0030), top: B:22:0x0030 \}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/concurrent\/locks\/ReentrantReadWriteLock;Lkotlin\/jvm\/functions\/Function0\<+TT;\>;)TT;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_24;
Node_8 -> Node_7;
Node_24 -> Node_9;
Node_9 -> Node_22;
Node_22 -> Node_10;
Node_22 -> Node_16;
Node_10 -> Node_11;
Node_10 -> Node_23;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_25;
Node_13 -> Node_12;
Node_25 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_23 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_26;
Node_19 -> Node_18;
Node_26 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_1;
Node_5 -> Node_6;
}

