digraph "CFG forkotlin.concurrent.TimersKt.timer$default(Ljava\/lang\/String;ZJJLkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Ljava\/util\/Timer;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r14 I:??[int, boolean]) = (r13 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:93)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0005 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('name' java.lang.String)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0005|0x0005: ARITH  (r14 I:??[int, boolean]) = (r13 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0007|0x0007: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('daemon' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_8 [shape=record,label="{8\:\ 0x000a|0x000a: ARITH  (r13 I:??[int, boolean]) = (r13 I:??[int, boolean, short, byte, char]) & (4 ??[int, float, short, byte, char]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x000c|0x000c: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0010 \l}"];
Node_10 [shape=record,label="{10\:\ 0x000e|0x000e: CONST  (r8 I:??[long, double] A[D('initialDelay' long)]) = (0 ??[long, double]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0010|0x0010: CONST_STR  (r13 I:java.lang.String) =  \"action\" \l0x0012: INVOKE  (r12 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function1)]), (r13 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0015: INVOKE  (r13 I:java.util.Timer) = (r6 I:java.lang.String A[D('name' java.lang.String)]), (r7 I:boolean A[D('daemon' boolean)]) type: STATIC call: kotlin.concurrent.TimersKt.timer(java.lang.String, boolean):java.util.Timer A[MD:(java.lang.String, boolean):java.util.Timer (m)] (LINE:94)\l0x0019: NEW_INSTANCE  (r14 I:kotlin.concurrent.TimersKt$timerTask$1) =  kotlin.concurrent.TimersKt$timerTask$1  (LINE:95)\l0x001b: INVOKE  \l  (r14 I:kotlin.concurrent.TimersKt$timerTask$1)\l  (r12 I:kotlin.jvm.functions.Function1 A[D('action' kotlin.jvm.functions.Function1)])\l type: DIRECT call: kotlin.concurrent.TimersKt$timerTask$1.\<init\>(kotlin.jvm.functions.Function1):void A[MD:(kotlin.jvm.functions.Function1\<? super java.util.TimerTask, kotlin.Unit\>):void (m)]\l0x001e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY]) \l0x001f: CHECK_CAST (r1 I:java.util.TimerTask) = (java.util.TimerTask) (r1 I:??[OBJECT, ARRAY]) \l0x0021: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('timer' java.util.Timer)]) \l0x0022: MOVE  (r2 I:??[long, double]) = (r8 I:??[long, double] A[D('initialDelay' long)]) \l0x0023: MOVE  (r4 I:??[long, double]) = (r10 I:??[long, double] A[D('period' long)]) \l0x0024: INVOKE  (r0 I:java.util.Timer), (r1 I:java.util.TimerTask), (r2 I:long), (r4 I:long) type: VIRTUAL call: java.util.Timer.schedule(java.util.TimerTask, long, long):void A[MD:(java.util.TimerTask, long, long):void (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|RETURN\l|0x0027: RETURN  (r13 I:java.util.Timer A[D('timer' java.util.Timer)])  (LINE:96)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.util.Timer kotlin.concurrent.TimersKt.timer$default((r6 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:boolean A[D('daemon' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:long A[D('initialDelay' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:long A[D('period' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlin.jvm.functions.Function1 A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:9:0x000c \-\> B:11:0x0010, CROSS_EDGE: B:6:0x0007 \-\> B:8:0x000a, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0005\lDebug Info:\l  \-1 \-0x0027: r6 'name' Ljava\/lang\/String;\l  \-1 \-0x0027: r7 'daemon' Z\l  \-1 \-0x0027: r8 'initialDelay' J\l  \-1 \-0x0027: r10 'period' J\l  \-1 \-0x0027: r12 'action' Lkotlin\/jvm\/functions\/Function1;\l  0x0019\-0x0027: r13 'timer' Ljava\/util\/Timer;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

