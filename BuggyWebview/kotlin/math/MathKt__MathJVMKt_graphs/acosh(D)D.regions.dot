digraph "CFG forkotlin.math.MathKt__MathJVMKt.acosh(D)D" {
subgraph cluster_Region_727878599 {
label = "R(1:(2:(1:3)|(1:(2:(1:8)|(2:9|(2:(1:12)|(3:13|(1:15)|17)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_1453815892 {
label = "R(2:(1:3)|(1:(2:(1:8)|(2:9|(2:(1:12)|(3:13|(1:15)|17))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_141313015 {
label = "IF [B:22:0x0005] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0005|if (r8 \< 1.0d) goto L3\l}"];
subgraph cluster_Region_521639198 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0007|SYNTHETIC\lRETURN\l|return Double.NaN\l}"];
}
}
subgraph cluster_Region_546576776 {
label = "R(1:(2:(1:8)|(2:9|(2:(1:12)|(3:13|(1:15)|17)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1293725718 {
label = "R(2:(1:8)|(2:9|(2:(1:12)|(3:13|(1:15)|17))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_663040441 {
label = "IF [B:25:0x000e] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x000e|if (r8 \> kotlin.math.MathJVM.upper_taylor_2_bound) goto L7\l}"];
subgraph cluster_Region_77201202 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.log(r8) + kotlin.math.MathJVM.LN2\l}"];
}
}
subgraph cluster_Region_1642434903 {
label = "R(2:9|(2:(1:12)|(3:13|(1:15)|17)))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0018|double double r0 = 1\l}"];
subgraph cluster_Region_79822448 {
label = "R(2:(1:12)|(3:13|(1:15)|17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1222745032 {
label = "IF [B:28:0x0020] THEN: R(1:12) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0020|if ((r8 \- r0) \>= kotlin.math.MathJVM.taylor_n_bound) goto L11\l}"];
subgraph cluster_Region_428686284 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.log(java.lang.Math.sqrt((r8 * r8) \- r0) + r8)\l}"];
}
}
subgraph cluster_Region_1328519130 {
label = "R(3:13|(1:15)|17)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x002f|double double r0 = java.lang.Math.sqrt(r8 \- r0)\ldouble r2 = r0\l}"];
subgraph cluster_IfRegion_42850369 {
label = "IF [B:31:0x003a] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x003a|if (r0 \>= kotlin.math.MathJVM.taylor_2_bound) goto L15\l}"];
subgraph cluster_Region_1190538243 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x003c|r2 \-= ((r0 * r0) * r0) \/ 12\l}"];
}
}
Node_34 [shape=record,label="{34\:\ 0x004e|RETURN\lORIG_RETURN\l|return java.lang.Math.sqrt(2.0d) * r2\l}"];
}
}
}
}
}
}
}
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0001}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x000a}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0010}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0022}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0045|PHI: r2 \l  PHI: (r2v4 'result' double) = (r2v3 'result' double), (r2v5 'result' double) binds: [B:31:0x003a, B:32:0x003c] A[DONT_GENERATE, DONT_INLINE]\l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.acosh((r8v0 'x' double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0010 \-\> B:34:0x004e, CROSS_EDGE: B:29:0x0022 \-\> B:34:0x004e, CROSS_EDGE: B:33:0x0045 \-\> B:34:0x004e, CROSS_EDGE: B:31:0x003a \-\> B:33:0x0045\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_19;Node_22 -> Node_23;
Node_22 -> Node_24[style=dashed];
Node_23 -> Node_20;
Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_36 -> Node_20;
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_30[style=dashed];
Node_37 -> Node_20;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_33[style=dashed];
Node_32 -> Node_33;
Node_34 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22;
Node_24 -> Node_25;
Node_26 -> Node_36;
Node_29 -> Node_37;
Node_33 -> Node_34;
}

