digraph "CFG forkotlin.math.MathKt__MathJVMKt.truncate(D)D" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0001|0x0001: INVOKE  (r0 I:boolean) = (r3 I:double A[D('x' double)]) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)] (LINE:405)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x001e \l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|0x0007: INVOKE  (r0 I:boolean) = (r3 I:double A[D('x' double)]) type: STATIC call: java.lang.Double.isInfinite(double):boolean A[MD:(double):boolean (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000e \l}"];
Node_22 [shape=record,label="{22\:\ 0x000e|0x000e: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:406)\l0x0010: CMP_L  (r2 I:int) = (r3 I:double A[D('x' double)]), (r0 I:double) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:25:0x0019 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|0x0014: INVOKE  (r0 I:double) = (r3 I:double A[D('x' double)]) type: STATIC call: java.lang.Math.floor(double):double A[MD:(double):double (c)]\l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:double) A[SYNTHETIC] (LINE:408)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|0x0019: INVOKE  (r0 I:double) = (r3 I:double A[D('x' double)]) type: STATIC call: java.lang.Math.ceil(double):double A[MD:(double):double (c)] (LINE:407)\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:double) A[SYNTHETIC] (LINE:408)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001e|0x001e: MOVE  (r0 I:??[long, double]) = (r3 I:??[long, double] A[D('x' double)])  (LINE:405)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: RETURN  (r0 I:double)  (LINE:408)\l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.truncate((r3 I:double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0019 \-\> B:27:0x001f, CROSS_EDGE: B:26:0x001e \-\> B:27:0x001f, CROSS_EDGE: B:18:0x0005 \-\> B:26:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001f: r3 'x' D\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_26;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_26[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_28;
Node_28 -> Node_16;
Node_25 -> Node_29;
Node_29 -> Node_16;
Node_26 -> Node_27;
Node_27 -> Node_16;
}

