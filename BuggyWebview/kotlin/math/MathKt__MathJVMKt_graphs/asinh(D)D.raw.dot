digraph "CFG forkotlin.math.MathKt__MathJVMKt.asinh(D)D" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0001|0x0001: SGET  (r0 I:double) =  kotlin.math.Constants.taylor_n_bound double  (LINE:173)\l0x0003: CMP_L  (r2 I:int) = (r7 I:double A[D('x' double)]), (r0 I:double) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0005|0x0005: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:35:0x0038 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|0x0007: SGET  (r0 I:double) =  kotlin.math.Constants.upper_taylor_n_bound double  (LINE:174)\l0x0009: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000a: CMP_L  (r3 I:int) = (r7 I:double A[D('x' double)]), (r0 I:double) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:34:0x002a \l}"];
Node_30 [shape=record,label="{30\:\ 0x000e|0x000e: SGET  (r0 I:double) =  kotlin.math.Constants.upper_taylor_2_bound double  (LINE:175)\l0x0010: CMP_L  (r3 I:int) = (r7 I:double A[D('x' double)]), (r0 I:double) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:33:0x001c \l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|0x0014: INVOKE  (r0 I:double) = (r7 I:double A[D('x' double)]) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)] (LINE:177)\l0x0018: SGET  (r2 I:double) =  kotlin.math.Constants.LN2 double \l0x001a: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l}"];
Node_42 [shape=record,label="{42\:\ 0x005a|RETURN\lORIG_RETURN\l|0x005a: RETURN  (r0 I:double A[D('result' double)])  (LINE:195)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|0x001c: CONST  (r0 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char])  (LINE:180)\l0x001d: CAST (r0 I:double) = (double) (r0 I:int) \l0x001e: ARITH  (r3 I:double) = (r7 I:double A[D('x' double)]) * (r0 I:double) \l0x0020: CAST (r5 I:double) = (double) (r2 I:int) \l0x0021: ARITH  (r0 I:double) = (r0 I:double) * (r7 I:double A[D('x' double)]) \l0x0023: ARITH  (r5 I:double) = (r5 I:double) \/ (r0 I:double) \l0x0024: ARITH  (r3 I:double) = (r3 I:double) + (r5 I:double) \l0x0025: INVOKE  (r0 I:double) = (r3 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l}"];
Node_43 [shape=record,label="{43\:\ ?|SYNTHETIC\lRETURN\l|0x005a: RETURN  (r0 I:double A[D('result' double)]) A[SYNTHETIC] (LINE:195)\l}"];
Node_34 [shape=record,label="{34\:\ 0x002a|0x002a: ARITH  (r0 I:double) = (r7 I:double A[D('x' double)]) * (r7 I:double A[D('x' double)])  (LINE:183)\l0x002c: CAST (r2 I:double) = (double) (r2 I:int) \l0x002d: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l0x002e: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x0032: ARITH  (r0 I:double) = (r0 I:double) + (r7 I:double A[D('x' double)]) \l0x0033: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l}"];
Node_44 [shape=record,label="{44\:\ ?|SYNTHETIC\lRETURN\l|0x005a: RETURN  (r0 I:double A[D('result' double)]) A[SYNTHETIC] (LINE:195)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0038|0x0038: SGET  (r0 I:double) =  kotlin.math.Constants.taylor_n_bound double  (LINE:185)\l0x003a: NEG  (r0 I:double) = (r0 I:double) \l0x003b: CMP_G  (r2 I:int) = (r7 I:double A[D('x' double)]), (r0 I:double) \l}"];
Node_36 [shape=record,label="{36\:\ 0x003d|0x003d: IF  (r2 I:??[int, byte, short, char]) \> (0 ??[int, byte, short, char])  \-\> B:38:0x0046 \l}"];
Node_37 [shape=record,label="{37\:\ 0x003f|0x003f: NEG  (r0 I:double) = (r7 I:double A[D('x' double)]) \l0x0040: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: kotlin.math.MathKt.asinh(double):double A[MD:(double):double (m)]\l0x0044: NEG  (r0 I:double) = (r0 I:double) \l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x005a: RETURN  (r0 I:double A[D('result' double)]) A[SYNTHETIC] (LINE:195)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0046|0x0046: MOVE  (r0 I:??[long, double]) = (r7 I:??[long, double] A[D('x' double)])  (LINE:188)\l0x0047: INVOKE  (r2 I:double) = (r7 I:double A[D('x' double)]) type: STATIC call: java.lang.Math.abs(double):double A[MD:(double):double (c)] (LINE:189)\l0x004b: SGET  (r4 I:double) =  kotlin.math.Constants.taylor_2_bound double \l0x004d: CMP_L  (r6 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_39 [shape=record,label="{39\:\ 0x004f|0x004f: IF  (r6 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:47:? \l}"];
Node_40 [shape=record,label="{40\:\ 0x0051|0x0051: ARITH  (r2 I:double) = (r7 I:double A[D('x' double)]) * (r7 I:double A[D('x' double)])  (LINE:191)\l0x0053: ARITH  (r2 I:double) = (r2 I:double) * (r7 I:double A[D('x' double)]) \l0x0055: CONST  (r4 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char]) \l0x0056: CAST (r4 I:double) = (double) (r4 I:int) \l0x0057: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l0x0058: ARITH  (r0 I:double) = (r0 I:double A[D('result' double)]) \- (r2 I:double) \l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x005a: RETURN  (r0 I:double A[D('result' double)]) A[SYNTHETIC] (LINE:195)\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x005a: RETURN  (r0 I:double A[D('result' double)]) A[SYNTHETIC] (LINE:195)\l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.asinh((r7 I:double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x001c \-\> B:42:0x005a, CROSS_EDGE: B:34:0x002a \-\> B:42:0x005a, CROSS_EDGE: B:37:0x003f \-\> B:42:0x005a, CROSS_EDGE: B:40:0x0051 \-\> B:42:0x005a, CROSS_EDGE: B:39:0x004f \-\> B:42:0x005a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0047\-0x005a: r0 'result' D\l  \-1 \-0x005a: r7 'x' D\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_42;
Node_42 -> Node_25;
Node_33 -> Node_43;
Node_43 -> Node_25;
Node_34 -> Node_44;
Node_44 -> Node_25;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_45;
Node_45 -> Node_25;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_47;
Node_40 -> Node_46;
Node_46 -> Node_25;
Node_47 -> Node_25;
}

