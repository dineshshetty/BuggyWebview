digraph "CFG forkotlin.math.MathKt__MathJVMKt.acosh(D)D" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0001|0x0001: CONST  (r0 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:211)\l0x0003: CMP_G  (r2 I:int) = (r8 I:double A[D('x' double)]), (r0 I:double) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0005|0x0005: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:24:0x000a \l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|SYNTHETIC\lRETURN\l|0x0007: CONST  (r0 I:??[long, double]) = (9221120237041090560(0x7ff8000000000000, double:NaN) ??[long, double]) \l0x004e: RETURN  (r0 I:double A[D('y' double)]) A[SYNTHETIC] (LINE:231)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a|0x000a: SGET  (r0 I:double) =  kotlin.math.Constants.upper_taylor_2_bound double  (LINE:213)\l0x000c: CMP_L  (r2 I:int) = (r8 I:double A[D('x' double)]), (r0 I:double) \l}"];
Node_25 [shape=record,label="{25\:\ 0x000e|0x000e: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:27:0x0018 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|0x0010: INVOKE  (r0 I:double) = (r8 I:double A[D('x' double)]) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)] (LINE:215)\l0x0014: SGET  (r2 I:double) =  kotlin.math.Constants.LN2 double \l0x0016: ARITH  (r0 I:double) = (r0 I:double) + (r2 I:double) \l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|0x004e: RETURN  (r0 I:double A[D('y' double)]) A[SYNTHETIC] (LINE:231)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|0x0018: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:217)\l0x0019: CAST (r0 I:double) = (double) (r0 I:int) \l0x001a: ARITH  (r2 I:double) = (r8 I:double A[D('x' double)]) \- (r0 I:double) \l0x001c: SGET  (r4 I:double) =  kotlin.math.Constants.taylor_n_bound double \l0x001e: CMP_L  (r6 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|0x0020: IF  (r6 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:30:0x002f \l}"];
Node_29 [shape=record,label="{29\:\ 0x0022|0x0022: ARITH  (r2 I:double) = (r8 I:double A[D('x' double)]) * (r8 I:double A[D('x' double)])  (LINE:218)\l0x0024: ARITH  (r2 I:double) = (r2 I:double) \- (r0 I:double) \l0x0025: INVOKE  (r0 I:double) = (r2 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x0029: ARITH  (r0 I:double) = (r0 I:double) + (r8 I:double A[D('x' double)]) \l0x002a: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|0x004e: RETURN  (r0 I:double A[D('y' double)]) A[SYNTHETIC] (LINE:231)\l}"];
Node_30 [shape=record,label="{30\:\ 0x002f|0x002f: ARITH  (r0 I:double) = (r8 I:double A[D('x' double)]) \- (r0 I:double)  (LINE:221)\l0x0031: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x0035: MOVE  (r2 I:??[long, double]) = (r0 I:??[long, double] A[D('y' double)])  (LINE:223)\l0x0036: SGET  (r4 I:double) =  kotlin.math.Constants.taylor_2_bound double  (LINE:224)\l0x0038: CMP_L  (r6 I:int) = (r0 I:double A[D('y' double)]), (r4 I:double) \l}"];
Node_31 [shape=record,label="{31\:\ 0x003a|0x003a: IF  (r6 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:33:0x0045 \l}"];
Node_32 [shape=record,label="{32\:\ 0x003c|0x003c: ARITH  (r4 I:double) = (r0 I:double A[D('y' double)]) * (r0 I:double A[D('y' double)])  (LINE:226)\l0x003e: ARITH  (r4 I:double) = (r4 I:double) * (r0 I:double A[D('y' double)]) \l0x0040: CONST  (r6 I:??[int, float, short, byte, char]) = (12 ??[int, float, short, byte, char]) \l0x0042: CAST (r6 I:double) = (double) (r6 I:int) \l0x0043: ARITH  (r4 I:double) = (r4 I:double) \/ (r6 I:double) \l0x0044: ARITH  (r2 I:double) = (r2 I:double A[D('result' double)]) \- (r4 I:double) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0045|0x0045: CONST  (r4 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double])  (LINE:229)\l0x0047: INVOKE  (r4 I:double) = (r4 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)]\l0x004b: ARITH  (r4 I:double) = (r4 I:double) * (r2 I:double A[D('result' double)]) \l0x004d: MOVE  (r0 I:??[long, double] A[D('y' double)]) = (r4 I:??[long, double]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x004e|RETURN\lORIG_RETURN\l|0x004e: RETURN  (r0 I:double A[D('y' double)])  (LINE:231)\l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.acosh((r8 I:double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0010 \-\> B:34:0x004e, CROSS_EDGE: B:29:0x0022 \-\> B:34:0x004e, CROSS_EDGE: B:33:0x0045 \-\> B:34:0x004e, CROSS_EDGE: B:31:0x003a \-\> B:33:0x0045\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0035\-0x004e: r0 'y' D\l  0x0036\-0x004e: r2 'result' D\l  \-1 \-0x004e: r8 'x' D\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_20;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_36;
Node_36 -> Node_20;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_37;
Node_37 -> Node_20;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_20;
}

