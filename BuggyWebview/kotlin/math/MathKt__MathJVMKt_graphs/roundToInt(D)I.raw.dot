digraph "CFG forkotlin.math.MathKt__MathJVMKt.roundToInt(D)I" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0001|0x0001: INVOKE  (r0 I:boolean) = (r3 I:double A[D('$this$roundToInt' double)]) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)] (LINE:602)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0023 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: CONST  (r0 I:??[long, double]) = (4746794007244308480(0x41dfffffffc00000, double:2.147483647E9) ??[long, double])  (LINE:603)\l0x000c: CMP_L  (r2 I:int) = (r3 I:double A[D('$this$roundToInt' double)]), (r0 I:double) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|0x000e: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:23:0x0014 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|SYNTHETIC\lRETURN\l|0x0010: CONST  (r0 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char]) \l0x0022: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:606)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: CONST  (r0 I:??[long, double]) = (\-4476578029606273024(0xc1e0000000000000, double:\-2.147483648E9) ??[long, double])  (LINE:604)\l0x0016: CMP_G  (r2 I:int) = (r3 I:double A[D('$this$roundToInt' double)]), (r0 I:double) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|0x0018: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:26:0x001d \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|SYNTHETIC\lRETURN\l|0x001a: CONST  (r0 I:??[int, float, short, byte, char]) = (\-2147483648(0xffffffff80000000, float:\-0.0) ??[int, float, short, byte, char]) \l0x0022: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:606)\l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|0x001d: INVOKE  (r0 I:long) = (r3 I:double A[D('$this$roundToInt' double)]) type: STATIC call: java.lang.Math.round(double):long A[MD:(double):long (c)] (LINE:605)\l0x0021: CAST (r0 I:int) = (int) (r0 I:long) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0022|RETURN\lORIG_RETURN\l|0x0022: RETURN  (r0 I:int)  (LINE:606)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:602)\l0x0025: CONST_STR  (r1 I:java.lang.String) =  \"Cannot round NaN value.\" \l0x0027: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x002a|0x002a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.math.MathKt__MathJVMKt.roundToInt((r3 I:double A[D('$this$roundToInt' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001a \-\> B:27:0x0022, CROSS_EDGE: B:26:0x001d \-\> B:27:0x0022, CROSS_EDGE: B:29:0x002a \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002a: r3 '$this$roundToInt' D\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_17;
Node_26 -> Node_27;
Node_27 -> Node_17;
Node_28 -> Node_29;
Node_29 -> Node_17;
}

