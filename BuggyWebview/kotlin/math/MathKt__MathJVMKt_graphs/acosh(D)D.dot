digraph "CFG forkotlin.math.MathKt__MathJVMKt.acosh(D)D" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0001}"];
Node_22 [shape=record,label="{22\:\ 0x0005|if ((r8 \> 1.0d ? 1 : (r8 == 1.0d ? 0 : \-1)) \>= 0) goto L5\l}"];
Node_23 [shape=record,label="{23\:\ 0x0007|SYNTHETIC\lRETURN\l|return Double.NaN\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000a}"];
Node_25 [shape=record,label="{25\:\ 0x000e|if ((r8 \> kotlin.math.MathJVM.upper_taylor_2_bound ? 1 : (r8 == kotlin.math.MathJVM.upper_taylor_2_bound ? 0 : \-1)) \<= 0) goto L9\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.log(r8) + kotlin.math.MathJVM.LN2\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|double r0 = (double) 1\l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|if (((r8 \- r0) \> kotlin.math.MathJVM.taylor_n_bound ? 1 : ((r8 \- r0) == kotlin.math.MathJVM.taylor_n_bound ? 0 : \-1)) \< 0) goto L13\l}"];
Node_29 [shape=record,label="{29\:\ 0x0022}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return java.lang.Math.log(java.lang.Math.sqrt((r8 * r8) \- r0) + r8)\l}"];
Node_30 [shape=record,label="{30\:\ 0x002f|double r0 = java.lang.Math.sqrt(r8 \- r0)\lr2 = r0\l}"];
Node_31 [shape=record,label="{31\:\ 0x003a|if ((r0 \> kotlin.math.MathJVM.taylor_2_bound ? 1 : (r0 == kotlin.math.MathJVM.taylor_2_bound ? 0 : \-1)) \< 0) goto L16\l}"];
Node_32 [shape=record,label="{32\:\ 0x003c|double r2 = r2 \- (((r0 * r0) * r0) \/ ((double) 12))\l}"];
Node_33 [shape=record,label="{33\:\ 0x0045|PHI: r2 \l  PHI: (r2v4 'result' double) = (r2v3 'result' double), (r2v5 'result' double) binds: [B:31:0x003a, B:32:0x003c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x004e|RETURN\lORIG_RETURN\l|return java.lang.Math.sqrt(2.0d) * r2\l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.acosh((r8v0 'x' double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0010 \-\> B:34:0x004e, CROSS_EDGE: B:29:0x0022 \-\> B:34:0x004e, CROSS_EDGE: B:33:0x0045 \-\> B:34:0x004e, CROSS_EDGE: B:31:0x003a \-\> B:33:0x0045\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_20;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_36;
Node_36 -> Node_20;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_37;
Node_37 -> Node_20;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_20;
}

