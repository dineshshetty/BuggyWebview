digraph "CFG forkotlin.math.MathKt__MathJVMKt.roundToInt(D)I" {
subgraph cluster_Region_699624121 {
label = "R(1:(2:(1:13)|(1:(2:(1:5)|(1:(2:(1:9)|(1:11)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_384660990 {
label = "R(2:(1:13)|(1:(2:(1:5)|(1:(2:(1:9)|(1:11))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1677716391 {
label = "IF [B:19:0x0005] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0005|if (java.lang.Double.isNaN(r3) != false) goto L12\l}"];
subgraph cluster_Region_1034332487 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x002a|throw new java.lang.IllegalArgumentException(\"Cannot round NaN value.\")\l}"];
}
}
subgraph cluster_Region_267578088 {
label = "R(1:(2:(1:5)|(1:(2:(1:9)|(1:11)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1926052973 {
label = "R(2:(1:5)|(1:(2:(1:9)|(1:11))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1861440320 {
label = "IF [B:21:0x000e] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x000e|if (r3 \> 2.147483647E9d) goto L5\l}"];
subgraph cluster_Region_1712792392 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0010|SYNTHETIC\lRETURN\l|return Integer.MAX_VALUE\l}"];
}
}
subgraph cluster_Region_2125078728 {
label = "R(1:(2:(1:9)|(1:11)))";
node [shape=record,color=blue];
subgraph cluster_Region_1696552228 {
label = "R(2:(1:9)|(1:11))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_293761940 {
label = "IF [B:24:0x0018] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0018|if (r3 \< (\-2.147483648E9d)) goto L9\l}"];
subgraph cluster_Region_1313873807 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x001a|SYNTHETIC\lRETURN\l|return Integer.MIN_VALUE\l}"];
}
}
subgraph cluster_Region_1641269997 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0022|RETURN\lORIG_RETURN\l|return (int) java.lang.Math.round(r3)\l}"];
}
}
}
}
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0001}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0007}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0014}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x001d}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0023}"];
MethodNode[shape=record,label="{public static final int kotlin.math.MathKt__MathJVMKt.roundToInt((r3v0 '$this$roundToInt' double A[D('$this$roundToInt' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001a \-\> B:27:0x0022, CROSS_EDGE: B:26:0x001d \-\> B:27:0x0022, CROSS_EDGE: B:29:0x002a \-\> B:17:?\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_16;Node_19 -> Node_20[style=dashed];
Node_19 -> Node_28;
Node_29 -> Node_17;
Node_21 -> Node_22;
Node_21 -> Node_23[style=dashed];
Node_22 -> Node_17;
Node_24 -> Node_25;
Node_24 -> Node_26[style=dashed];
Node_25 -> Node_17;
Node_27 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_20 -> Node_21;
Node_23 -> Node_24;
Node_26 -> Node_27;
Node_28 -> Node_29;
}

