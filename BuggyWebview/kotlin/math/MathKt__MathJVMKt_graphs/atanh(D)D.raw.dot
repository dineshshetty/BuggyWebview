digraph "CFG forkotlin.math.MathKt__MathJVMKt.atanh(D)D" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: INVOKE  (r0 I:double) = (r7 I:double A[D('x' double)]) type: STATIC call: java.lang.Math.abs(double):double A[MD:(double):double (c)] (LINE:246)\l0x0004: SGET  (r2 I:double) =  kotlin.math.Constants.taylor_n_bound double \l0x0006: CMP_G  (r4 I:int) = (r0 I:double), (r2 I:double) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:19:0x001e \l}"];
Node_15 [shape=record,label="{15\:\ 0x000a|0x000a: MOVE  (r0 I:??[long, double]) = (r7 I:??[long, double] A[D('x' double)])  (LINE:247)\l0x000b: INVOKE  (r2 I:double) = (r7 I:double A[D('x' double)]) type: STATIC call: java.lang.Math.abs(double):double A[MD:(double):double (c)] (LINE:248)\l0x000f: SGET  (r4 I:double) =  kotlin.math.Constants.taylor_2_bound double \l0x0011: CMP_L  (r6 I:int) = (r2 I:double), (r4 I:double) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0013|0x0013: IF  (r6 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:21:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x0015|0x0015: ARITH  (r2 I:double) = (r7 I:double A[D('x' double)]) * (r7 I:double A[D('x' double)])  (LINE:249)\l0x0017: ARITH  (r2 I:double) = (r2 I:double) * (r7 I:double A[D('x' double)]) \l0x0019: CONST  (r4 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x001a: CAST (r4 I:double) = (double) (r4 I:int) \l0x001b: ARITH  (r2 I:double) = (r2 I:double) \/ (r4 I:double) \l0x001c: ARITH  (r0 I:double) = (r0 I:double A[D('result' double)]) + (r2 I:double) \l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|RETURN\lORIG_RETURN\l|0x001d: RETURN  (r0 I:double A[D('result' double)])  (LINE:251)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x001d: RETURN  (r0 I:double A[D('result' double)]) A[SYNTHETIC] (LINE:251)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|0x001e: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('result' double)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:253)\l0x001f: CAST (r0 I:double) = (double) (r0 I:int) \l0x0020: ARITH  (r2 I:double) = (r0 I:double) + (r7 I:double A[D('x' double)]) \l0x0022: ARITH  (r0 I:double) = (r0 I:double) \- (r7 I:double A[D('x' double)]) \l0x0023: ARITH  (r2 I:double) = (r2 I:double) \/ (r0 I:double) \l0x0024: INVOKE  (r0 I:double) = (r2 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x0028: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0029: CAST (r2 I:double) = (double) (r2 I:int) \l0x002a: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l}"];
Node_20 [shape=record,label="{20\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:double) \l}"];
MethodNode[shape=record,label="{public static final double kotlin.math.MathKt__MathJVMKt.atanh((r7 I:double A[D('x' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0013 \-\> B:18:0x001d, CROSS_EDGE: B:20:0x002b \-\> B:12:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x001e: r0 'result' D\l  \-1 \-0x002b: r7 'x' D\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_21;
Node_17 -> Node_18;
Node_18 -> Node_12;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
}

