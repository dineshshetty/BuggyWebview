digraph "CFG forkotlin.math.MathKt__MathJVMKt.getSign(I)I" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0001|if (r1 \>= 0) goto L4\l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|SYNTHETIC\lRETURN\l|return \-1\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|if (r1 \<= 0) goto L6\l}"];
Node_15 [shape=record,label="{15\:\ 0x0007|SYNTHETIC\lRETURN\l|return 1\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|RETURN\lORIG_RETURN\l|return 0\l}"];
MethodNode[shape=record,label="{public static final int kotlin.math.MathKt__MathJVMKt.getSign((r1v0 '$this$sign' int A[D('$this$sign' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0007 \-\> B:17:0x000a, CROSS_EDGE: B:16:0x0009 \-\> B:17:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_11;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_11;
Node_16 -> Node_11;
}

