digraph "CFG forkotlin.math.MathKt__MathJVMKt.log(FF)F" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:849)\l0x0001: CMP_G  (r0 I:int) = (r5 I:float A[D('base' float)]), (r0 I:float) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|0x0003: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:27:0x001e \l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: CONST  (r0 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x0007: CMP_G  (r0 I:int) = (r5 I:float A[D('base' float)]), (r0 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000d \l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|0x000b: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0011 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|0x0011: CAST (r0 I:double) = (double) (r4 I:float A[D('x' float)])  (LINE:850)\l0x0012: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x0016: CAST (r2 I:double) = (double) (r5 I:float A[D('base' float)]) \l0x0017: INVOKE  (r2 I:double) = (r2 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x001b: ARITH  (r0 I:double) = (r0 I:double) \/ (r2 I:double) \l0x001c: CAST (r0 I:float) = (float) (r0 I:double) \l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|RETURN\l|0x001d: RETURN  (r0 I:float) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x001e: CONST  (r0 I:??[int, float, short, byte, char]) = (2143289344(0x7fc00000, float:NaN) ??[int, float, short, byte, char]) A[SYNTHETIC] (LINE:849)\l0x0020: RETURN  (r0 I:float) A[SYNTHETIC]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|0x000d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: CONST  (r0 I:??[int, float, short, byte, char]) = (2143289344(0x7fc00000, float:NaN) ??[int, float, short, byte, char])  (LINE:849)\l0x0020: RETURN  (r0 I:float) \l}"];
MethodNode[shape=record,label="{public static final float kotlin.math.MathKt__MathJVMKt.log((r4 I:float A[D('x' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:float A[D('base' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:28:0x0020 \-\> B:16:?, CROSS_EDGE: B:22:0x000d \-\> B:23:0x000e, CROSS_EDGE: B:18:0x0003 \-\> B:27:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0020: r4 'x' F\l  \-1 \-0x0020: r5 'base' F\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_29[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_16;
Node_29 -> Node_16;
Node_22 -> Node_23;
Node_27 -> Node_16;
}

