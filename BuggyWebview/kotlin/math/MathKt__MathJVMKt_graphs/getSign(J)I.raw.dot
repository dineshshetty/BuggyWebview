digraph "CFG forkotlin.math.MathKt__MathJVMKt.getSign(J)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0001|0x0001: CONST  (r0 I:??[long, double]) = (0 ??[long, double])  (LINE:1252)\l0x0003: CMP_L  (r2 I:int) = (r3 I:long A[D('$this$sign' long)]), (r0 I:long) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:17:0x0009 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|SYNTHETIC\lRETURN\l|0x0007: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0010: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:1255)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: CMP_L  (r2 I:int) = (r3 I:long A[D('$this$sign' long)]), (r0 I:long)  (LINE:1253)\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:20:0x000f \l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|SYNTHETIC\lRETURN\l|0x000d: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0010: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:1255)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1254)\l0x0010: RETURN  (r0 I:int)  (LINE:1255)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.math.MathKt__MathJVMKt.getSign((r3 I:long A[D('$this$sign' long), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x000d \-\> B:21:0x0010, CROSS_EDGE: B:20:0x000f \-\> B:21:0x0010\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0010: r3 '$this$sign' J\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_13;
Node_20 -> Node_13;
}

