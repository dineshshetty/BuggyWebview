digraph "CFG forkotlin.math.MathKt__MathJVMKt.roundToLong(D)J" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:double A[D('$this$roundToLong' double)]) type: STATIC call: java.lang.Double.isNaN(double):boolean A[MD:(double):boolean (c)] (LINE:620)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r0 I:long) = (r2 I:double A[D('$this$roundToLong' double)]) type: STATIC call: java.lang.Math.round(double):long A[MD:(double):long (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:long) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x000d: CONST_STR  (r1 I:java.lang.String) =  \"Cannot round NaN value.\" \l0x000f: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|0x0012: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final long kotlin.math.MathKt__MathJVMKt.roundToLong((r2 I:double A[D('$this$roundToLong' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0012 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r2 '$this$roundToLong' D\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

