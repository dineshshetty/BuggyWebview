digraph "CFG forkotlin.math.Constants.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.math.Constants) =  kotlin.math.Constants \l0x0002: INVOKE  (r0 I:kotlin.math.Constants) type: DIRECT call: kotlin.math.Constants.\<init\>():void A[MD:():void (m)]\l0x0005: SPUT  (r0 I:kotlin.math.Constants) kotlin.math.Constants.INSTANCE kotlin.math.Constants \l0x0007: CONST  (r0 I:??[long, double]) = (4611686018427387904(0x4000000000000000, double:2.0) ??[long, double])  (LINE:24)\l0x0009: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.log(double):double A[MD:(double):double (c)]\l0x000d: SPUT  (r0 I:double) kotlin.math.Constants.LN2 double \l0x000f: CONST  (r0 I:??[long, double]) = (4607182418800017408(0x3ff0000000000000, double:1.0) ??[long, double])  (LINE:27)\l0x0011: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.ulp(double):double A[MD:(double):double (c)]\l0x0015: SPUT  (r0 I:double) kotlin.math.Constants.epsilon double \l0x0017: INVOKE  (r0 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)] (LINE:29)\l0x001b: SPUT  (r0 I:double) kotlin.math.Constants.taylor_2_bound double \l0x001d: INVOKE  (r2 I:double) = (r0 I:double) type: STATIC call: java.lang.Math.sqrt(double):double A[MD:(double):double (c)] (LINE:31)\l0x0021: SPUT  (r2 I:double) kotlin.math.Constants.taylor_n_bound double \l0x0023: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:33)\l0x0024: CAST (r4 I:double) = (double) (r4 I:int) \l0x0025: ARITH  (r0 I:double) = (r4 I:double) \/ (r0 I:double) \l0x0027: SPUT  (r0 I:double) kotlin.math.Constants.upper_taylor_2_bound double \l0x0029: ARITH  (r4 I:double) = (r4 I:double) \/ (r2 I:double)  (LINE:35)\l0x002a: SPUT  (r4 I:double) kotlin.math.Constants.upper_taylor_n_bound double \l}"];
Node_7 [shape=record,label="{7\:\ 0x002c|RETURN\l|0x002c: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.math.Constants.\<clinit\>()  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

