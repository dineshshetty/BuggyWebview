digraph "CFG forkotlin.io.LinesSequence$iterator$1.hasNext()Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:java.lang.String) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String  (LINE:79)\l0x0002: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IGET  (r0 I:boolean) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.done boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IGET  (r0 I:kotlin.io.LinesSequence) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.this$0 kotlin.io.LinesSequence  (LINE:80)\l0x000b: INVOKE  (r0 I:java.io.BufferedReader) = (r0 I:kotlin.io.LinesSequence) type: STATIC call: kotlin.io.LinesSequence.access$getReader$p(kotlin.io.LinesSequence):java.io.BufferedReader A[MD:(kotlin.io.LinesSequence):java.io.BufferedReader (m)]\l0x000f: INVOKE  (r0 I:java.lang.String) = (r0 I:java.io.BufferedReader) type: VIRTUAL call: java.io.BufferedReader.readLine():java.lang.String A[MD:():java.lang.String throws java.io.IOException (c)]\l0x0013: IPUT  (r0 I:java.lang.String), (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0019  (LINE:81)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0017|0x0017: IPUT  (r1 I:boolean), (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.done boolean \l}"];
Node_9 [shape=record,label="{9\:\ 0x0019|0x0019: IGET  (r0 I:java.lang.String) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String  (LINE:83)\l}"];
Node_10 [shape=record,label="{10\:\ 0x001b|0x001b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001e \l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|RETURN\lORIG_RETURN\l|0x001e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001f: RETURN  (r1 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public boolean kotlin.io.LinesSequence$iterator$1.hasNext((r2 'this' I:kotlin.io.LinesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x001b \-\> B:13:0x001f, CROSS_EDGE: B:7:0x0015 \-\> B:9:0x0019, CROSS_EDGE: B:5:0x0007 \-\> B:9:0x0019, CROSS_EDGE: B:3:0x0003 \-\> B:9:0x0019\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_9;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_12;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_1;
Node_14 -> Node_1;
}

