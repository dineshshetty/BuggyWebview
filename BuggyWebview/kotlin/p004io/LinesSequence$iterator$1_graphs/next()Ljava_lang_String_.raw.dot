digraph "CFG forkotlin.io.LinesSequence$iterator$1.next()Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r2 I:kotlin.io.LinesSequence$iterator$1) type: VIRTUAL call: kotlin.io.LinesSequence$iterator$1.hasNext():boolean A[MD:():boolean (m)] (LINE:87)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000f \l}"];
Node_4 [shape=record,label="{4\:\ 0x0006|0x0006: IGET  (r0 I:java.lang.String) = (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String  (LINE:90)\l0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:91)\l0x0009: IPUT  (r1 I:java.lang.String), (r2 I:kotlin.io.LinesSequence$iterator$1) kotlin.io.LinesSequence$iterator$1.nextValue java.lang.String \l0x000b: INVOKE  (r0 I:java.lang.Object A[D('answer' java.lang.String)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)] (LINE:92)\l}"];
Node_5 [shape=record,label="{5\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.lang.String A[D('answer' java.lang.String)]) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException A[D('answer' java.lang.String)]) =  java.util.NoSuchElementException  (LINE:88)\l0x0011: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.io.LinesSequence$iterator$1.next((r2 'this' I:kotlin.io.LinesSequence$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.next():E\}]\lCROSS_EDGE: B:7:0x0014 \-\> B:1:?\lDebug Info:\l  0x0008\-0x000f: r0 'answer' Ljava\/lang\/String;\lBRIDGED_BY: kotlin.io.LinesSequence$iterator$1.next():java.lang.String\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_1;
}

