digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.\<init\>(Lkotlin\/io\/FileTreeWalk$FileTreeWalkIterator;Ljava\/io\/File;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"rootFile\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('rootFile' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IPUT  \l  (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator A[D('this$0' kotlin.io.FileTreeWalk$FileTreeWalkIterator)])\l  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState)\l kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.this$0 kotlin.io.FileTreeWalk$FileTreeWalkIterator  (LINE:196)\l0x0007: INVOKE  (r2 I:kotlin.io.FileTreeWalk$WalkState), (r4 I:java.io.File A[D('rootFile' java.io.File)]) type: DIRECT call: kotlin.io.FileTreeWalk.WalkState.\<init\>(java.io.File):void A[MD:(java.io.File):void (m)]\l0x000c: INVOKE  (r0 I:boolean) = (r4 I:java.io.File A[D('rootFile' java.io.File)]) type: VIRTUAL call: java.io.File.isFile():boolean A[MD:():boolean (c)] (LINE:201)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0014 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|RETURN\l|0x0013: RETURN    (LINE:196)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:274)\l0x0016: NEW_INSTANCE  (r0 I:java.lang.AssertionError A[D('$i$a$\-assert\-FileTreeWalk$FileTreeWalkIterator$SingleFileState$1' int)]) =  java.lang.AssertionError \l0x0018: CONST_STR  (r1 I:java.lang.String) =  \"rootFile must be verified to be file beforehand.\" \l0x001a: INVOKE  (r0 I:java.lang.AssertionError), (r1 I:java.lang.Object) type: DIRECT call: java.lang.AssertionError.\<init\>(java.lang.Object):void A[MD:(java.lang.Object):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|0x001d: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public void kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.\<init\>((r2 'this' I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator A[D('this$0' kotlin.io.FileTreeWalk$FileTreeWalkIterator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.io.File A[D('rootFile' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001d \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0016: r0 '$i$a$\-assert\-FileTreeWalk$FileTreeWalkIterator$SingleFileState$1' I\l  \-1 \-0x001d: r3 'this$0' Lkotlin\/io\/FileTreeWalk$FileTreeWalkIterator;\l  \-1 \-0x001d: r4 'rootFile' Ljava\/io\/File;\lSIGNATURE: (Ljava\/io\/File;)V\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

