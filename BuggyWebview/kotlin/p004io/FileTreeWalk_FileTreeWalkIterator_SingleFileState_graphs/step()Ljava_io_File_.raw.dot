digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.step()Ljava\/io\/File;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.visited boolean  (LINE:205)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0006 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|RETURN\l|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: RETURN  (r0 I:java.io.File) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:206)\l0x0007: IPUT  (r0 I:boolean), (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.visited boolean \l0x0009: INVOKE  (r0 I:java.io.File) = (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.getRoot():java.io.File A[MD:():java.io.File (m)] (LINE:207)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:java.io.File) \l}"];
MethodNode[shape=record,label="{public java.io.File kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.step((r1 'this' I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000d \-\> B:9:?\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlin.io.FileTreeWalk.WalkState.step():java.io.File]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

