digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.\<init\>(Lkotlin\/io\/FileTreeWalk$FileTreeWalkIterator;Ljava\/io\/File;)V" {
subgraph cluster_Region_792301759 {
label = "R(2:1|(2:1|(1:(1:6))))";
node [shape=record,color=blue];
Node_InsnContainer_808135004 [shape=record,label="{|super(r4)\l}"];
subgraph cluster_Region_530253517 {
label = "R(2:1|(1:(1:6)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"rootFile\")\lr2.this$0 = r3\l}"];
subgraph cluster_Region_371311519 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1979585932 {
label = "IF [B:10:0x0010] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0010|if (r4.isFile() != true) goto L5\l}"];
subgraph cluster_Region_485929894 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001d|throw new java.lang.AssertionError(\"rootFile must be verified to be file beforehand.\")\l}"];
}
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x0013}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0014}"];
MethodNode[shape=record,label="{public void kotlin.io.FileTreeWalk.FileTreeWalkIterator.SingleFileState.\<init\>((r2v0 'this' kotlin.io.FileTreeWalk$FileTreeWalkIterator$SingleFileState A[IMMUTABLE_TYPE, THIS]), (r3v0 'this$0' kotlin.io.FileTreeWalk$FileTreeWalkIterator A[D('this$0' kotlin.io.FileTreeWalk$FileTreeWalkIterator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'rootFile' java.io.File A[D('rootFile' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001d \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> 'super' call moved to the top of the method (can break code semantics)\}\lSIGNATURE: (Ljava\/io\/File;)V\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_13 -> Node_8;
Node_7 -> Node_9;
Node_11 -> Node_8;
Node_12 -> Node_13;
}

