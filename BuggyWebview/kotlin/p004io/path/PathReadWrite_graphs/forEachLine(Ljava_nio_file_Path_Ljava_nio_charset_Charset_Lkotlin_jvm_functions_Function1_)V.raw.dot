digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.forEachLine(Ljava\/nio\/file\/Path;Ljava\/nio\/charset\/Charset;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r12 I:java.lang.Object A[D('$this$forEachLine' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x0007: INVOKE  (r13 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"action\" \l0x000c: INVOKE  (r14 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: INVOKE  (r0 I:java.io.BufferedReader) = \l  (r12 I:java.nio.file.Path A[D('$this$forEachLine' java.nio.file.Path)])\l  (r13 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: STATIC call: java.nio.file.Files.newBufferedReader(java.nio.file.Path, java.nio.charset.Charset):java.io.BufferedReader A[MD:(java.nio.file.Path, java.nio.charset.Charset):java.io.BufferedReader throws java.io.IOException (c)] (LINE:202)\l0x0013: CONST_STR  (r1 I:java.lang.String) =  \"newBufferedReader(this, charset)\" \l0x0015: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0018: CHECK_CAST (r0 I:java.io.Reader) = (java.io.Reader) (r0 I:??[OBJECT, ARRAY]) \l0x001a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$useLines$iv' java.io.Reader)])  (LINE:328)\l0x001c: CHECK_CAST (r2 I:java.io.BufferedReader) = (java.io.BufferedReader) (r2 I:??[OBJECT, ARRAY]) \l0x001e: CHECK_CAST (r2 I:java.io.Closeable) = (java.io.Closeable) (r2 I:??[OBJECT, ARRAY]) \l0x0020: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0021|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x0021|TRY_ENTER\lTryCatch #0 \{all \-\> 0x004d, blocks: (B:3:0x0021, B:4:0x0030, B:6:0x0036, B:7:0x003e), top: B:15:0x0021 \}\lCatch: all \-\> 0x004d\l|0x0021: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x0022: CHECK_CAST (r4 I:java.io.BufferedReader) = (java.io.BufferedReader) (r4 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x004d]\l0x0024: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:329)\l0x0025: INVOKE  (r6 I:kotlin.sequences.Sequence) = (r4 I:java.io.BufferedReader A[D('it$iv' java.io.BufferedReader)]) type: STATIC call: kotlin.io.TextStreamsKt.lineSequence(java.io.BufferedReader):kotlin.sequences.Sequence A[Catch: all \-\> 0x004d, MD:(java.io.BufferedReader):kotlin.sequences.Sequence\<java.lang.String\> (m)] (LINE:328)\l0x0029: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002a: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('it' kotlin.sequences.Sequence)])  (LINE:202)\l0x002b: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002c: INVOKE  (r10 I:java.util.Iterator) = (r8 I:kotlin.sequences.Sequence A[D('$this$forEach$iv' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[Catch: all \-\> 0x004d, MD:():java.util.Iterator\<T\> (m)] (LINE:330)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0030|LOOP_START\lTryCatch #0 \{all \-\> 0x004d, blocks: (B:3:0x0021, B:4:0x0030, B:6:0x0036, B:7:0x003e), top: B:15:0x0021 \}\lLOOP:0: B:4:0x0030\-\>B:6:0x0036\lCatch: all \-\> 0x004d\l|0x0030: INVOKE  (r11 I:boolean) = (r10 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[Catch: all \-\> 0x004d, MD:():boolean (c)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0034|0x0034: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x003e \l}"];
Node_6 [shape=record,label="{6\:\ 0x0036|LOOP_END\lTryCatch #0 \{all \-\> 0x004d, blocks: (B:3:0x0021, B:4:0x0030, B:6:0x0036, B:7:0x003e), top: B:15:0x0021 \}\lLOOP:0: B:4:0x0030\-\>B:6:0x0036\lCatch: all \-\> 0x004d\l|0x0036: INVOKE  (r11 I:java.lang.Object) = (r10 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[Catch: all \-\> 0x004d, MD:():E (c)]\l0x003a: INVOKE  \l  (r14 I:kotlin.jvm.functions.Function1 A[D('action' kotlin.jvm.functions.Function1)])\l  (r11 I:java.lang.Object A[D('element$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x004d, MD:(P1):R (m)]\l0x003d: GOTO  \-\> 0x0030 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003e|SYNTHETIC\l}"];
Node_7 [shape=record,label="{7\:\ 0x003e|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x004d, blocks: (B:3:0x0021, B:4:0x0030, B:6:0x0036, B:7:0x003e), top: B:15:0x0021 \}\lCatch: all \-\> 0x004d\l|0x0040: SGET  (r6 I:kotlin.Unit A[D('it' kotlin.sequences.Sequence)]) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x004d, TRY_LEAVE]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0042|0x0042: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)] (LINE:328)\l0x0045: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0046: INVOKE  (r2 I:java.io.Closeable), (r4 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x0049: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x004c|RETURN\l|0x004c: RETURN    (LINE:203)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_10 [shape=record,label="{10\:\ 0x004d|ExcHandler: all \-\> 0x004d\l|0x004d: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x004d] (LINE:328)\l}"];
Node_17 [shape=record,label="{17\:\ 0x004e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x004e|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x004f, blocks: (B:11:0x004e), top: B:17:0x004e \}\lCatch: all \-\> 0x004f\l|0x004e: THROW  (r4 I:java.lang.Throwable) A[Catch: all \-\> 0x004f, TRY_ENTER, TRY_LEAVE]\l}"];
Node_18 [shape=record,label="{18\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_12 [shape=record,label="{12\:\ 0x004f|ExcHandler: all \-\> 0x004f\l|0x004f: MOVE_EXCEPTION  (r5 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x004f]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0050|0x0050: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x0053: INVOKE  (r2 I:java.io.Closeable), (r4 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x0056: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0059|0x0059: THROW  (r5 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final void kotlin.io.path.PathsKt__PathReadWriteKt.forEachLine((r12 I:java.nio.file.Path A[D('$this$forEachLine' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:kotlin.jvm.functions.Function1\<? super java.lang.String, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:6:0x0036 \-\> B:4:0x0030, CROSS_EDGE: B:11:0x004e \-\> B:1:?, CROSS_EDGE: B:14:0x0059 \-\> B:1:?, CROSS_EDGE: B:17:0x004e \-\> B:12:0x004f, CROSS_EDGE: B:15:0x0021 \-\> B:10:0x004d\lTryCatch #0 \{all \-\> 0x004d, blocks: (B:3:0x0021, B:4:0x0030, B:6:0x0036, B:7:0x003e), top: B:15:0x0021 \}, TryCatch #1 \{all \-\> 0x004f, blocks: (B:11:0x004e), top: B:17:0x004e \}\lSIGNATURE: (Ljava\/nio\/file\/Path;Ljava\/nio\/charset\/Charset;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/String;Lkotlin\/Unit;\>;)V\lDebug Info:\l  0x003a\-0x003e: r11 'element$iv' Ljava\/lang\/Object;\l  0x002b\-0x003f: r8 '$this$forEach$iv' Lkotlin\/sequences\/Sequence;\l  0x002c\-0x003f: r9 '$i$f$forEach' I\l  0x0029\-0x0040: r6 'it' Lkotlin\/sequences\/Sequence;\l  0x002a\-0x0040: r7 '$i$a$\-useLines\-PathsKt__PathReadWriteKt$forEachLine$1' I\l  0x0024\-0x0042: r4 'it$iv' Ljava\/io\/BufferedReader;\l  0x0025\-0x0042: r5 '$i$a$\-use\-TextStreamsKt$useLines$1$iv' I\l  0x001a\-0x004c: r0 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x001b\-0x004c: r1 '$i$f$useLines' I\l  0x004d\-0x004e: r0 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x004d\-0x004e: r1 '$i$f$useLines' I\l  \-1 \-0x004e: r12 '$this$forEachLine' Ljava\/nio\/file\/Path;\l  \-1 \-0x004e: r13 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x004e: r14 'action' Lkotlin\/jvm\/functions\/Function1;\l  0x004f\-0x0059: r0 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x004f\-0x0059: r1 '$i$f$useLines' I\l  0x004f\-0x0059: r12 '$this$forEachLine' Ljava\/nio\/file\/Path;\l  0x004f\-0x0059: r13 'charset' Ljava\/nio\/charset\/Charset;\l  0x004f\-0x0059: r14 'action' Lkotlin\/jvm\/functions\/Function1;\lEXCEPTIONS:[Ljava\/io\/IOException;]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [328=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_15;
Node_15 -> Node_3;
Node_15 -> Node_10;
Node_3 -> Node_4;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_19;
Node_6 -> Node_4;
Node_19 -> Node_7;
Node_7 -> Node_8;
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_16 -> Node_10;
Node_10 -> Node_17;
Node_17 -> Node_11;
Node_17 -> Node_12;
Node_11 -> Node_1;
Node_11 -> Node_18;
Node_18 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

