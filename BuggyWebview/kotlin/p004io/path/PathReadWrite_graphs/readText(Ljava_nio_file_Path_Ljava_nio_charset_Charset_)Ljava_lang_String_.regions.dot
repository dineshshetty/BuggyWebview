digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.readText(Ljava\/nio\/file\/Path;Ljava\/nio\/charset\/Charset;)Ljava\/lang\/String;" {
subgraph cluster_Region_531331776 {
label = "R(2:1|(3:3|4|5))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"charset\")\ljava.io.Closeable java.io.InputStreamReader r2 = new java.io.InputStreamReader(java.nio.file.Files.newInputStream(r4, (java.nio.file.OpenOption[]) java.util.Arrays.copyOf(new java.nio.file.OpenOption[0], 0)), r5)\l}"];
subgraph cluster_TryCatchRegion_1302264771 {
label = "Try: R(3:3|4|5) finally: R(1:8)";
node [shape=record,color=blue];
subgraph cluster_Region_852784149 {
label = "R(3:3|4|5)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001e|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x002e, blocks: (B:3:0x001e), top: B:13:0x001e \}\lCatch: all \-\> 0x002e\l|java.io.InputStreamReader java.io.InputStreamReader r0 = r2     \/\/ Catch: java.lang.Throwable \-\> L2e\ljava.lang.String java.lang.String r3 = kotlin.p004io.TextStreamsKt.readText(r0)     \/\/ Catch: java.lang.Throwable \-\> L2e\l}"];
Node_4 [shape=record,label="{4\:\ 0x0029|kotlin.p004io.Closeable.closeFinally(r2, null)\l}"];
Node_5 [shape=record,label="{5\:\ 0x002d|RETURN\l|return r3\l}"];
}
subgraph cluster_Region_753413420 {
label = "R(1:8) | ExcHandler: all \-\> 0x002e\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002e|ExcHandler: all \-\> 0x002e\l}"];
}
}
}
subgraph cluster_Region_753413420 {
label = "R(1:8) | ExcHandler: all \-\> 0x002e\l";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x002e|ExcHandler: all \-\> 0x002e\l}"];
}
subgraph cluster_Region_288586953 {
label = "R(3:12|13|14) | ExcHandler: all \-\> 0x0030\l";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0030|DONT_GENERATE\lFINALLY_INSNS\lExcHandler: all \-\> 0x0030\l|java.lang.Throwable r1 = move\-exception\l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|DONT_GENERATE\lFINALLY_INSNS\l|kotlin.p004io.Closeable.closeFinally(r2, r0)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0034|DONT_GENERATE\lFINALLY_INSNS\l|throw r1\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x002f|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x002f|TRY_ENTER\lTRY_LEAVE\lDONT_GENERATE\lFINALLY_INSNS\lTryCatch #0 \{all \-\> 0x0030, blocks: (B:7:0x002f), top: B:11:0x002f \}\lCatch: all \-\> 0x0030\l|throw r0     \/\/ Catch: java.lang.Throwable \-\> L30\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.path.PathsKt__PathReadWriteKt.readText((r4v0 '$this$readText' java.nio.file.Path A[D('$this$readText' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'charset' java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x002f \-\> B:1:?, CROSS_EDGE: B:10:0x0034 \-\> B:1:?, CROSS_EDGE: B:11:0x002f \-\> B:8:0x0030, CROSS_EDGE: B:13:0x001e \-\> B:6:0x002e\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0030, blocks: (B:7:0x002f), top: B:11:0x002f \}, TryCatch #1 \{all \-\> 0x002e, blocks: (B:3:0x001e), top: B:13:0x001e \}\lEXCEPTIONS:[Ljava\/io\/IOException;]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Finally have unexpected throw blocks count: 2, expect 1\}\l}"];
MethodNode -> Node_0;Node_2 -> Node_13;
Node_3 -> Node_4;
Node_3 -> Node_14;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_11;
Node_6 -> Node_11;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_0 -> Node_2;
Node_13 -> Node_3;
Node_13 -> Node_6;
Node_14 -> Node_6;
Node_11 -> Node_7;
Node_11 -> Node_8;
Node_7 -> Node_1;
Node_7 -> Node_12;
Node_12 -> Node_8;
}

