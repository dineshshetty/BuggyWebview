digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.writeLines(Ljava\/nio\/file\/Path;Lkotlin\/sequences\/Sequence;Ljava\/nio\/charset\/Charset;[Ljava\/nio\/file\/OpenOption;)Ljava\/nio\/file\/Path;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$writeLines' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"lines\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('lines' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x000c: INVOKE  (r4 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"options\" \l0x0011: INVOKE  (r5 I:java.lang.Object A[D('options' java.nio.file.OpenOption[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: INVOKE  (r0 I:java.lang.Iterable) = (r3 I:kotlin.sequences.Sequence A[D('lines' kotlin.sequences.Sequence)]) type: STATIC call: kotlin.sequences.SequencesKt.asIterable(kotlin.sequences.Sequence):java.lang.Iterable A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):java.lang.Iterable\<T\> (m)] (LINE:296)\l0x0018: ARRAY_LENGTH  (r1 I:int) = (r5 I:??[] A[D('options' java.nio.file.OpenOption[])]) \l0x0019: INVOKE  (r1 I:java.lang.Object[]) = (r5 I:java.lang.Object[] A[D('options' java.nio.file.OpenOption[])]), (r1 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x001d: CHECK_CAST (r1 I:java.nio.file.OpenOption[]) = (java.nio.file.OpenOption[]) (r1 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r0 I:java.nio.file.Path) = \l  (r2 I:java.nio.file.Path A[D('$this$writeLines' java.nio.file.Path)])\l  (r0 I:java.lang.Iterable)\l  (r4 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l  (r1 I:java.nio.file.OpenOption[])\l type: STATIC call: java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption[]):java.nio.file.Path A[MD:(java.nio.file.Path, java.lang.Iterable\<? extends java.lang.CharSequence\>, java.nio.charset.Charset, java.nio.file.OpenOption[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x0023: CONST_STR  (r1 I:java.lang.String) =  \"write(this, lines.asIterable(), charset, *options)\" \l0x0025: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|RETURN\l|0x0028: RETURN  (r0 I:java.nio.file.Path) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.nio.file.Path kotlin.io.path.PathsKt__PathReadWriteKt.writeLines((r2 I:java.nio.file.Path A[D('$this$writeLines' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.sequences.Sequence\<? extends java.lang.CharSequence\> A[D('lines' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.file.OpenOption[] A[D('options' java.nio.file.OpenOption[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0028: r2 '$this$writeLines' Ljava\/nio\/file\/Path;\l  \-1 \-0x0028: r3 'lines' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0028: r4 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x0028: r5 'options' [Ljava\/nio\/file\/OpenOption;\lEXCEPTIONS:[Ljava\/io\/IOException;]\lSIGNATURE: (Ljava\/nio\/file\/Path;Lkotlin\/sequences\/Sequence\<+Ljava\/lang\/CharSequence;\>;Ljava\/nio\/charset\/Charset;[Ljava\/nio\/file\/OpenOption;)Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

