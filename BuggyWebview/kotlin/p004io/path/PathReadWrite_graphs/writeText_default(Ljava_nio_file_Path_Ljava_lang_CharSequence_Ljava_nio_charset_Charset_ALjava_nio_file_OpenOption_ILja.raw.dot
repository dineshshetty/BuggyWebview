digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.writeText$default(Ljava\/nio\/file\/Path;Ljava\/lang\/CharSequence;Ljava\/nio\/charset\/Charset;[Ljava\/nio\/file\/OpenOption;ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:170)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r2 I:java.nio.charset.Charset) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: INVOKE  \l  (r0 I:java.nio.file.Path)\l  (r1 I:java.lang.CharSequence)\l  (r2 I:java.nio.charset.Charset)\l  (r3 I:java.nio.file.OpenOption[])\l type: STATIC call: kotlin.io.path.PathsKt.writeText(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, java.nio.file.OpenOption[]):void A[MD:(java.nio.file.Path, java.lang.CharSequence, java.nio.charset.Charset, java.nio.file.OpenOption[]):void VARARG throws java.io.IOException (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|RETURN\l|0x0009: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ void kotlin.io.path.PathsKt__PathReadWriteKt.writeText$default((r0 I:java.nio.file.Path A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.CharSequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.charset.Charset A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.nio.file.OpenOption[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

