digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.bufferedReader$default(Ljava\/nio\/file\/Path;Ljava\/nio\/charset\/Charset;I[Ljava\/nio\/file\/OpenOption;ILjava\/lang\/Object;)Ljava\/io\/BufferedReader;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r6 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:45)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r2 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)]) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset  (LINE:46)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:45)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x000c \l}"];
Node_7 [shape=record,label="{7\:\ 0x000a|0x000a: CONST  (r3 I:??[int, float, short, byte, char] A[D('bufferSize' int)]) = (8192(0x2000, float:1.148E\-41) ??[int, float, short, byte, char])  (LINE:47)\l}"];
Node_8 [shape=record,label="{8\:\ 0x000c|0x000c: CONST_STR  (r5 I:java.lang.String) =  \"\<this\>\"  (LINE:45)\l0x000e: INVOKE  (r1 I:java.lang.Object A[D('$this$bufferedReader_u24default' java.nio.file.Path)]), (r5 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0011: CONST_STR  (r5 I:java.lang.String) =  \"charset\" \l0x0013: INVOKE  (r2 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r5 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0016: CONST_STR  (r5 I:java.lang.String) =  \"options\" \l0x0018: INVOKE  (r4 I:java.lang.Object A[D('options' java.nio.file.OpenOption[])]), (r5 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001b: NEW_INSTANCE  (r5 I:java.io.BufferedReader) =  java.io.BufferedReader  (LINE:50)\l0x001d: NEW_INSTANCE  (r6 I:java.io.InputStreamReader) =  java.io.InputStreamReader  (LINE:51)\l0x001f: ARRAY_LENGTH  (r0 I:int) = (r4 I:??[] A[D('options' java.nio.file.OpenOption[])])  (LINE:52)\l0x0020: INVOKE  (r0 I:java.lang.Object[]) = (r4 I:java.lang.Object[] A[D('options' java.nio.file.OpenOption[])]), (r0 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x0024: CHECK_CAST (r0 I:java.nio.file.OpenOption[]) = (java.nio.file.OpenOption[]) (r0 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r0 I:java.io.InputStream) = (r1 I:java.nio.file.Path A[D('$this$bufferedReader_u24default' java.nio.file.Path)]), (r0 I:java.nio.file.OpenOption[]) type: STATIC call: java.nio.file.Files.newInputStream(java.nio.file.Path, java.nio.file.OpenOption[]):java.io.InputStream A[MD:(java.nio.file.Path, java.nio.file.OpenOption[]):java.io.InputStream VARARG throws java.io.IOException (c)]\l0x002b: INVOKE  \l  (r6 I:java.io.InputStreamReader)\l  (r0 I:java.io.InputStream)\l  (r2 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: DIRECT call: java.io.InputStreamReader.\<init\>(java.io.InputStream, java.nio.charset.Charset):void A[MD:(java.io.InputStream, java.nio.charset.Charset):void (c)] (LINE:51)\l0x002e: CHECK_CAST (r6 I:java.io.Reader) = (java.io.Reader) (r6 I:??[OBJECT, ARRAY]) \l0x0031: INVOKE  (r5 I:java.io.BufferedReader), (r6 I:java.io.Reader), (r3 I:int A[D('bufferSize' int)]) type: DIRECT call: java.io.BufferedReader.\<init\>(java.io.Reader, int):void A[MD:(java.io.Reader, int):void (c)] (LINE:50)\l}"];
Node_9 [shape=record,label="{9\:\ 0x0034|RETURN\l|0x0034: RETURN  (r5 I:java.io.BufferedReader) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.io.BufferedReader kotlin.io.path.PathsKt__PathReadWriteKt.bufferedReader$default((r1 I:java.nio.file.Path A[D('$this$bufferedReader_u24default' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('bufferSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.file.OpenOption[] A[D('options' java.nio.file.OpenOption[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:6:0x0008 \-\> B:8:0x000c, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lDebug Info:\l  \-1 \-0x0034: r1 '$this$bufferedReader_u24default' Ljava\/nio\/file\/Path;\l  \-1 \-0x0034: r2 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x0034: r3 'bufferSize' I\l  \-1 \-0x0034: r4 'options' [Ljava\/nio\/file\/OpenOption;\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

