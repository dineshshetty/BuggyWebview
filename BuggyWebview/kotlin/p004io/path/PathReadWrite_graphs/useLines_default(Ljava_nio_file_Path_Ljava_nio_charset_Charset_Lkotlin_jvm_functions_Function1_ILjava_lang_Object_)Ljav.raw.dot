digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.useLines$default(Ljava\/nio\/file\/Path;Ljava\/nio\/charset\/Charset;Lkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r8 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:263)\l0x0001: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) & (r8 I:??[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)]) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: CONST_STR  (r7 I:java.lang.String) =  \"\<this\>\" \l0x0008: INVOKE  (r4 I:java.lang.Object A[D('$this$useLines_u24default' java.nio.file.Path)]), (r7 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: CONST_STR  (r7 I:java.lang.String) =  \"charset\" \l0x000d: INVOKE  (r5 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r7 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0010: CONST_STR  (r7 I:java.lang.String) =  \"block\" \l0x0012: INVOKE  (r6 I:java.lang.Object A[D('block' kotlin.jvm.functions.Function1)]), (r7 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0015: INVOKE  (r7 I:java.io.BufferedReader) = \l  (r4 I:java.nio.file.Path A[D('$this$useLines_u24default' java.nio.file.Path)])\l  (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: STATIC call: java.nio.file.Files.newBufferedReader(java.nio.file.Path, java.nio.charset.Charset):java.io.BufferedReader A[MD:(java.nio.file.Path, java.nio.charset.Charset):java.io.BufferedReader throws java.io.IOException (c)] (LINE:264)\l0x0019: CHECK_CAST (r7 I:java.io.Closeable) = (java.io.Closeable) (r7 I:??[OBJECT, ARRAY]) \l0x001b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001c|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x001c|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0037, blocks: (B:6:0x001c), top: B:14:0x001c \}\lCatch: all \-\> 0x0037\l|0x001c: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x001d: CHECK_CAST (r1 I:java.io.BufferedReader) = (java.io.BufferedReader) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0037]\l0x001f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:327)\l0x0020: CONST_STR  (r3 I:java.lang.String) =  \"it\"  (LINE:264)\l0x0022: INVOKE  (r1 I:java.lang.Object A[D('it' java.io.BufferedReader)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[Catch: all \-\> 0x0037, MD:(java.lang.Object, java.lang.String):void (m)]\l0x0025: INVOKE  (r3 I:kotlin.sequences.Sequence) = (r1 I:java.io.BufferedReader A[D('it' java.io.BufferedReader)]) type: STATIC call: kotlin.io.TextStreamsKt.lineSequence(java.io.BufferedReader):kotlin.sequences.Sequence A[Catch: all \-\> 0x0037, MD:(java.io.BufferedReader):kotlin.sequences.Sequence\<java.lang.String\> (m)]\l0x0029: INVOKE  (r3 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1)]), (r3 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0037, MD:(P1):R (m), TRY_LEAVE]\l}"];
Node_7 [shape=record,label="{7\:\ 0x002d|0x002d: INVOKE  (r8 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x0030: INVOKE  (r7 I:java.io.Closeable), (r0 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x0033: INVOKE  (r8 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x0036|RETURN\l|0x0036: RETURN  (r3 I:java.lang.Object) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_9 [shape=record,label="{9\:\ 0x0037|ExcHandler: all \-\> 0x0037\l|0x0037: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0037]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0038|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_10 [shape=record,label="{10\:\ 0x0038|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0039, blocks: (B:10:0x0038), top: B:16:0x0038 \}\lCatch: all \-\> 0x0039\l|0x0038: THROW  (r0 I:java.lang.Throwable) A[Catch: all \-\> 0x0039, TRY_ENTER, TRY_LEAVE]\l}"];
Node_17 [shape=record,label="{17\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_11 [shape=record,label="{11\:\ 0x0039|ExcHandler: all \-\> 0x0039\l|0x0039: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0039]\l}"];
Node_12 [shape=record,label="{12\:\ 0x003a|0x003a: INVOKE  (r8 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x003d: INVOKE  (r7 I:java.io.Closeable), (r0 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x0040: INVOKE  (r8 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0043|0x0043: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.lang.Object kotlin.io.path.PathsKt__PathReadWriteKt.useLines$default((r4 I:java.nio.file.Path A[D('$this$useLines_u24default' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0038 \-\> B:1:?, CROSS_EDGE: B:13:0x0043 \-\> B:1:?, CROSS_EDGE: B:16:0x0038 \-\> B:11:0x0039, CROSS_EDGE: B:14:0x001c \-\> B:9:0x0037, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lDebug Info:\l  0x001f\-0x002d: r1 'it' Ljava\/io\/BufferedReader;\l  0x0020\-0x002d: r2 '$i$a$\-use\-PathsKt__PathReadWriteKt$useLines$1' I\l  \-1 \-0x0038: r4 '$this$useLines_u24default' Ljava\/nio\/file\/Path;\l  \-1 \-0x0038: r5 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x0038: r6 'block' Lkotlin\/jvm\/functions\/Function1;\l  0x0039\-0x0043: r4 '$this$useLines_u24default' Ljava\/nio\/file\/Path;\l  0x0039\-0x0043: r5 'charset' Ljava\/nio\/charset\/Charset;\l  0x0039\-0x0043: r6 'block' Lkotlin\/jvm\/functions\/Function1;\lTryCatch #0 \{all \-\> 0x0037, blocks: (B:6:0x001c), top: B:14:0x001c \}, TryCatch #1 \{all \-\> 0x0039, blocks: (B:10:0x0038), top: B:16:0x0038 \}\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_14;
Node_14 -> Node_6;
Node_14 -> Node_9;
Node_6 -> Node_7;
Node_6 -> Node_15;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_15 -> Node_9;
Node_9 -> Node_16;
Node_16 -> Node_10;
Node_16 -> Node_11;
Node_10 -> Node_1;
Node_10 -> Node_17;
Node_17 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

