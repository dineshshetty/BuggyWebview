digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.writeLines(Ljava\/nio\/file\/Path;Lkotlin\/sequences\/Sequence;Ljava\/nio\/charset\/Charset;[Ljava\/nio\/file\/OpenOption;)Ljava\/nio\/file\/Path;" {
subgraph cluster_Region_1399280117 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"lines\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"charset\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"options\")\ljava.nio.file.Path java.nio.file.Path r0 = java.nio.file.Files.write(r2, kotlin.sequences.SequencesKt.asIterable(r3), r4, (java.nio.file.OpenOption[]) java.util.Arrays.copyOf(r5, r5.length))\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"write(this, lines.asIterable(), charset, *options)\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|RETURN\l|return r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.nio.file.Path kotlin.io.path.PathsKt__PathReadWriteKt.writeLines((r2v0 '$this$writeLines' java.nio.file.Path A[D('$this$writeLines' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'lines' kotlin.sequences.Sequence\<? extends java.lang.CharSequence\> A[D('lines' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'charset' java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'options' java.nio.file.OpenOption[] A[D('options' java.nio.file.OpenOption[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lEXCEPTIONS:[Ljava\/io\/IOException;]\lSIGNATURE: (Ljava\/nio\/file\/Path;Lkotlin\/sequences\/Sequence\<+Ljava\/lang\/CharSequence;\>;Ljava\/nio\/charset\/Charset;[Ljava\/nio\/file\/OpenOption;)Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_1;
Node_0 -> Node_2;
}

