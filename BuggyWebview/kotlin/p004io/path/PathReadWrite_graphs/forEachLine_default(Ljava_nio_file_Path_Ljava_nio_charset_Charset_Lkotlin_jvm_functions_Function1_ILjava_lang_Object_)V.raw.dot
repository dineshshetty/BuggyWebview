digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.forEachLine$default(Ljava\/nio\/file\/Path;Ljava\/nio\/charset\/Charset;Lkotlin\/jvm\/functions\/Function1;ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r15 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:200)\l0x0001: ARITH  (r14 I:??[int, boolean]) = (r14 I:??[int, boolean, short, byte, char]) & (r15 I:??[int, boolean, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r12 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)]) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: CONST_STR  (r14 I:java.lang.String) =  \"\<this\>\" \l0x0008: INVOKE  (r11 I:java.lang.Object A[D('$this$forEachLine_u24default' java.nio.file.Path)]), (r14 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: CONST_STR  (r14 I:java.lang.String) =  \"charset\" \l0x000d: INVOKE  (r12 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r14 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0010: CONST_STR  (r14 I:java.lang.String) =  \"action\" \l0x0012: INVOKE  (r13 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function1)]), (r14 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0015: INVOKE  (r14 I:java.io.BufferedReader) = \l  (r11 I:java.nio.file.Path A[D('$this$forEachLine_u24default' java.nio.file.Path)])\l  (r12 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: STATIC call: java.nio.file.Files.newBufferedReader(java.nio.file.Path, java.nio.charset.Charset):java.io.BufferedReader A[MD:(java.nio.file.Path, java.nio.charset.Charset):java.io.BufferedReader throws java.io.IOException (c)] (LINE:202)\l0x0019: CONST_STR  (r0 I:java.lang.String) =  \"newBufferedReader(this, charset)\" \l0x001b: INVOKE  (r14 I:java.lang.Object), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001e: CHECK_CAST (r14 I:java.io.Reader) = (java.io.Reader) (r14 I:??[OBJECT, ARRAY]) \l0x0020: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('$this$useLines$iv' java.io.Reader)])  (LINE:328)\l0x0022: CHECK_CAST (r1 I:java.io.BufferedReader) = (java.io.BufferedReader) (r1 I:??[OBJECT, ARRAY]) \l0x0024: CHECK_CAST (r1 I:java.io.Closeable) = (java.io.Closeable) (r1 I:??[OBJECT, ARRAY]) \l0x0026: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0027|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x0027|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0052, blocks: (B:6:0x0027, B:7:0x0036, B:9:0x003c, B:10:0x0044), top: B:18:0x0027 \}\lCatch: all \-\> 0x0052\l|0x0027: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x0028: CHECK_CAST (r3 I:java.io.BufferedReader) = (java.io.BufferedReader) (r3 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0052]\l0x002a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:329)\l0x002b: INVOKE  (r5 I:kotlin.sequences.Sequence) = (r3 I:java.io.BufferedReader A[D('it$iv' java.io.BufferedReader)]) type: STATIC call: kotlin.io.TextStreamsKt.lineSequence(java.io.BufferedReader):kotlin.sequences.Sequence A[Catch: all \-\> 0x0052, MD:(java.io.BufferedReader):kotlin.sequences.Sequence\<java.lang.String\> (m)] (LINE:328)\l0x002f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0030: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('it' kotlin.sequences.Sequence)])  (LINE:202)\l0x0031: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0032: INVOKE  (r9 I:java.util.Iterator) = (r7 I:kotlin.sequences.Sequence A[D('$this$forEach$iv' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[Catch: all \-\> 0x0052, MD:():java.util.Iterator\<T\> (m)] (LINE:330)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|LOOP_START\lTryCatch #0 \{all \-\> 0x0052, blocks: (B:6:0x0027, B:7:0x0036, B:9:0x003c, B:10:0x0044), top: B:18:0x0027 \}\lLOOP:0: B:7:0x0036\-\>B:9:0x003c\lCatch: all \-\> 0x0052\l|0x0036: INVOKE  (r10 I:boolean) = (r9 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[Catch: all \-\> 0x0052, MD:():boolean (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003a|0x003a: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0044 \l}"];
Node_9 [shape=record,label="{9\:\ 0x003c|LOOP_END\lTryCatch #0 \{all \-\> 0x0052, blocks: (B:6:0x0027, B:7:0x0036, B:9:0x003c, B:10:0x0044), top: B:18:0x0027 \}\lLOOP:0: B:7:0x0036\-\>B:9:0x003c\lCatch: all \-\> 0x0052\l|0x003c: INVOKE  (r10 I:java.lang.Object) = (r9 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[Catch: all \-\> 0x0052, MD:():E (c)]\l0x0040: INVOKE  \l  (r13 I:kotlin.jvm.functions.Function1 A[D('action' kotlin.jvm.functions.Function1)])\l  (r10 I:java.lang.Object A[D('element$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0052, MD:(P1):R (m)]\l0x0043: GOTO  \-\> 0x0036 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0044|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0044|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0052, blocks: (B:6:0x0027, B:7:0x0036, B:9:0x003c, B:10:0x0044), top: B:18:0x0027 \}\lCatch: all \-\> 0x0052\l|0x0046: SGET  (r5 I:kotlin.Unit A[D('it' kotlin.sequences.Sequence)]) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x0052, TRY_LEAVE]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: INVOKE  (r15 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)] (LINE:328)\l0x004b: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x004e: INVOKE  (r15 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0051|RETURN\l|0x0051: RETURN    (LINE:203)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_13 [shape=record,label="{13\:\ 0x0052|ExcHandler: all \-\> 0x0052\l|0x0052: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0052] (LINE:328)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0053|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_14 [shape=record,label="{14\:\ 0x0053|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0054, blocks: (B:14:0x0053), top: B:20:0x0053 \}\lCatch: all \-\> 0x0054\l|0x0053: THROW  (r2 I:java.lang.Throwable) A[Catch: all \-\> 0x0054, TRY_ENTER, TRY_LEAVE]\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_15 [shape=record,label="{15\:\ 0x0054|ExcHandler: all \-\> 0x0054\l|0x0054: MOVE_EXCEPTION  (r3 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0054]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0055|0x0055: INVOKE  (r15 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x0058: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x005b: INVOKE  (r15 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x005e|0x005e: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ void kotlin.io.path.PathsKt__PathReadWriteKt.forEachLine$default((r11 I:java.nio.file.Path A[D('$this$forEachLine_u24default' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.jvm.functions.Function1 A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lBACK_EDGE: B:9:0x003c \-\> B:7:0x0036, CROSS_EDGE: B:14:0x0053 \-\> B:1:?, CROSS_EDGE: B:17:0x005e \-\> B:1:?, CROSS_EDGE: B:20:0x0053 \-\> B:15:0x0054, CROSS_EDGE: B:18:0x0027 \-\> B:13:0x0052, CROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lDebug Info:\l  0x0040\-0x0044: r10 'element$iv' Ljava\/lang\/Object;\l  0x0031\-0x0045: r7 '$this$forEach$iv' Lkotlin\/sequences\/Sequence;\l  0x0032\-0x0045: r8 '$i$f$forEach' I\l  0x002f\-0x0046: r5 'it' Lkotlin\/sequences\/Sequence;\l  0x0030\-0x0046: r6 '$i$a$\-useLines\-PathsKt__PathReadWriteKt$forEachLine$1' I\l  0x002a\-0x0048: r3 'it$iv' Ljava\/io\/BufferedReader;\l  0x002b\-0x0048: r4 '$i$a$\-use\-TextStreamsKt$useLines$1$iv' I\l  0x0021\-0x0051: r0 '$i$f$useLines' I\l  0x0020\-0x0051: r14 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x0052\-0x0053: r0 '$i$f$useLines' I\l  \-1 \-0x0053: r11 '$this$forEachLine_u24default' Ljava\/nio\/file\/Path;\l  \-1 \-0x0053: r12 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x0053: r13 'action' Lkotlin\/jvm\/functions\/Function1;\l  0x0052\-0x0053: r14 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x0054\-0x005e: r0 '$i$f$useLines' I\l  0x0054\-0x005e: r11 '$this$forEachLine_u24default' Ljava\/nio\/file\/Path;\l  0x0054\-0x005e: r12 'charset' Ljava\/nio\/charset\/Charset;\l  0x0054\-0x005e: r13 'action' Lkotlin\/jvm\/functions\/Function1;\l  0x0054\-0x005e: r14 '$this$useLines$iv' Ljava\/io\/Reader;\lTryCatch #0 \{all \-\> 0x0052, blocks: (B:6:0x0027, B:7:0x0036, B:9:0x003c, B:10:0x0044), top: B:18:0x0027 \}, TryCatch #1 \{all \-\> 0x0054, blocks: (B:14:0x0053), top: B:20:0x0053 \}\lEXCEPTIONS:[Ljava\/io\/IOException;]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [328=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_18;
Node_18 -> Node_6;
Node_18 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_22;
Node_9 -> Node_7;
Node_22 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_19;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_19 -> Node_13;
Node_13 -> Node_20;
Node_20 -> Node_14;
Node_20 -> Node_15;
Node_14 -> Node_1;
Node_14 -> Node_21;
Node_21 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_1;
}

