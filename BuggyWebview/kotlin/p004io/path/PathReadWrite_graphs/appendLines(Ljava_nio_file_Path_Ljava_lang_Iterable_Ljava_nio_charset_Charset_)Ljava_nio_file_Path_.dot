digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.appendLines(Ljava\/nio\/file\/Path;Ljava\/lang\/Iterable;Ljava\/nio\/charset\/Charset;)Ljava\/nio\/file\/Path;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"lines\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"charset\")\ljava.nio.file.Path r0 = java.nio.file.Files.write(r3, r4, r5, new java.nio.file.OpenOption[]\{java.nio.file.StandardOpenOption.APPEND\})\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"write(this, lines, charsâ€¦tandardOpenOption.APPEND)\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.nio.file.Path kotlin.io.path.PathsKt__PathReadWriteKt.appendLines((r3v0 '$this$appendLines' java.nio.file.Path A[D('$this$appendLines' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'lines' java.lang.Iterable\<? extends java.lang.CharSequence\> A[D('lines' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'charset' java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lEXCEPTIONS:[Ljava\/io\/IOException;]\lSIGNATURE: (Ljava\/nio\/file\/Path;Ljava\/lang\/Iterable\<+Ljava\/lang\/CharSequence;\>;Ljava\/nio\/charset\/Charset;)Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

