digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.writeText(Ljava\/nio\/file\/Path;Ljava\/lang\/CharSequence;Ljava\/nio\/charset\/Charset;[Ljava\/nio\/file\/OpenOption;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$writeText' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"text\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('text' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x000c: INVOKE  (r5 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"options\" \l0x0011: INVOKE  (r6 I:java.lang.Object A[D('options' java.nio.file.OpenOption[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: ARRAY_LENGTH  (r0 I:int) = (r6 I:??[] A[D('options' java.nio.file.OpenOption[])])  (LINE:171)\l0x0015: INVOKE  (r0 I:java.lang.Object[]) = (r6 I:java.lang.Object[] A[D('options' java.nio.file.OpenOption[])]), (r0 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x0019: CHECK_CAST (r0 I:java.nio.file.OpenOption[]) = (java.nio.file.OpenOption[]) (r0 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r0 I:java.io.OutputStream) = (r3 I:java.nio.file.Path A[D('$this$writeText' java.nio.file.Path)]), (r0 I:java.nio.file.OpenOption[]) type: STATIC call: java.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption[]):java.io.OutputStream A[MD:(java.nio.file.Path, java.nio.file.OpenOption[]):java.io.OutputStream VARARG throws java.io.IOException (c)]\l0x001f: CONST_STR  (r1 I:java.lang.String) =  \"newOutputStream(this, *options)\" \l0x0021: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0024: NEW_INSTANCE  (r1 I:java.io.OutputStreamWriter) =  java.io.OutputStreamWriter \l0x0026: INVOKE  \l  (r1 I:java.io.OutputStreamWriter)\l  (r0 I:java.io.OutputStream)\l  (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: DIRECT call: java.io.OutputStreamWriter.\<init\>(java.io.OutputStream, java.nio.charset.Charset):void A[MD:(java.io.OutputStream, java.nio.charset.Charset):void (c)]\l0x0029: CHECK_CAST (r1 I:java.io.Closeable) = (java.io.Closeable) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x002b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_3 [shape=record,label="{3\:\ 0x002b|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0037, blocks: (B:3:0x002b), top: B:11:0x002b \}\lCatch: all \-\> 0x0037\l|0x002b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x002c: CHECK_CAST (r0 I:java.io.OutputStreamWriter) = (java.io.OutputStreamWriter) (r0 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0037]\l0x002e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:327)\l0x002f: INVOKE  \l  (r0 I:java.io.OutputStreamWriter A[D('it' java.io.OutputStreamWriter)])\l  (r4 I:java.lang.CharSequence A[D('text' java.lang.CharSequence)])\l type: VIRTUAL call: java.io.OutputStreamWriter.append(java.lang.CharSequence):java.io.Writer A[Catch: all \-\> 0x0037, MD:(java.lang.CharSequence):java.io.Writer throws java.io.IOException (c), TRY_LEAVE] (LINE:171)\l}"];
Node_4 [shape=record,label="{4\:\ 0x0032|0x0032: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' java.io.OutputStreamWriter)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0033: INVOKE  (r1 I:java.io.Closeable), (r0 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0036|RETURN\l|0x0036: RETURN    (LINE:172)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_6 [shape=record,label="{6\:\ 0x0037|ExcHandler: all \-\> 0x0037\l|0x0037: MOVE_EXCEPTION  (r0 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0037] (LINE:171)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0038|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_7 [shape=record,label="{7\:\ 0x0038|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0039, blocks: (B:7:0x0038), top: B:13:0x0038 \}\lCatch: all \-\> 0x0039\l|0x0038: THROW  (r0 I:java.lang.Throwable) A[Catch: all \-\> 0x0039, TRY_ENTER, TRY_LEAVE]\l}"];
Node_14 [shape=record,label="{14\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_8 [shape=record,label="{8\:\ 0x0039|ExcHandler: all \-\> 0x0039\l|0x0039: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0039]\l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: INVOKE  (r1 I:java.io.Closeable), (r0 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x003d|0x003d: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final void kotlin.io.path.PathsKt__PathReadWriteKt.writeText((r3 I:java.nio.file.Path A[D('$this$writeText' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.CharSequence A[D('text' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.nio.file.OpenOption[] A[D('options' java.nio.file.OpenOption[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0038 \-\> B:1:?, CROSS_EDGE: B:10:0x003d \-\> B:1:?, CROSS_EDGE: B:13:0x0038 \-\> B:8:0x0039, CROSS_EDGE: B:11:0x002b \-\> B:6:0x0037\lDebug Info:\l  0x002e\-0x0032: r0 'it' Ljava\/io\/OutputStreamWriter;\l  0x002f\-0x0032: r2 '$i$a$\-use\-PathsKt__PathReadWriteKt$writeText$1' I\l  \-1 \-0x0038: r3 '$this$writeText' Ljava\/nio\/file\/Path;\l  \-1 \-0x0038: r4 'text' Ljava\/lang\/CharSequence;\l  \-1 \-0x0038: r5 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x0038: r6 'options' [Ljava\/nio\/file\/OpenOption;\l  0x0039\-0x003d: r3 '$this$writeText' Ljava\/nio\/file\/Path;\l  0x0039\-0x003d: r4 'text' Ljava\/lang\/CharSequence;\l  0x0039\-0x003d: r5 'charset' Ljava\/nio\/charset\/Charset;\l  0x0039\-0x003d: r6 'options' [Ljava\/nio\/file\/OpenOption;\lTryCatch #0 \{all \-\> 0x0037, blocks: (B:3:0x002b), top: B:11:0x002b \}, TryCatch #1 \{all \-\> 0x0039, blocks: (B:7:0x0038), top: B:13:0x0038 \}\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_11;
Node_11 -> Node_3;
Node_11 -> Node_6;
Node_3 -> Node_4;
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_12 -> Node_6;
Node_6 -> Node_13;
Node_13 -> Node_7;
Node_13 -> Node_8;
Node_7 -> Node_1;
Node_7 -> Node_14;
Node_14 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
}

