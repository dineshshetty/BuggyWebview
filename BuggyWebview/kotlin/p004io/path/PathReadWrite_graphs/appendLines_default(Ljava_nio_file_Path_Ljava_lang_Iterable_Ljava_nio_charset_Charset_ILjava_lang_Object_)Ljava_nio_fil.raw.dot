digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.appendLines$default(Ljava\/nio\/file\/Path;Ljava\/lang\/Iterable;Ljava\/nio\/charset\/Charset;ILjava\/lang\/Object;)Ljava\/nio\/file\/Path;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:308)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0006 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: SGET  (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)]) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: CONST_STR  (r4 I:java.lang.String) =  \"\<this\>\" \l0x0008: INVOKE  (r1 I:java.lang.Object A[D('$this$appendLines_u24default' java.nio.file.Path)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: CONST_STR  (r4 I:java.lang.String) =  \"lines\" \l0x000d: INVOKE  (r2 I:java.lang.Object A[D('lines' java.lang.Iterable)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0010: CONST_STR  (r4 I:java.lang.String) =  \"charset\" \l0x0012: INVOKE  (r3 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0015: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:309)\l0x0016: NEW_ARRAY  (r4 I:java.nio.file.OpenOption[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.nio.file.OpenOption[] \l0x0018: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: SGET  (r0 I:java.nio.file.StandardOpenOption) =  java.nio.file.StandardOpenOption.APPEND java.nio.file.StandardOpenOption \l0x001b: CHECK_CAST (r0 I:java.nio.file.OpenOption) = (java.nio.file.OpenOption) (r0 I:??[OBJECT, ARRAY]) \l0x001d: APUT  (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]), (r0 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r4 I:java.nio.file.Path) = \l  (r1 I:java.nio.file.Path A[D('$this$appendLines_u24default' java.nio.file.Path)])\l  (r2 I:java.lang.Iterable A[D('lines' java.lang.Iterable)])\l  (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l  (r4 I:java.nio.file.OpenOption[])\l type: STATIC call: java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption[]):java.nio.file.Path A[MD:(java.nio.file.Path, java.lang.Iterable\<? extends java.lang.CharSequence\>, java.nio.charset.Charset, java.nio.file.OpenOption[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x0023: CONST_STR  (r5 I:java.lang.String) =  \"write(this, lines, charsâ€¦tandardOpenOption.APPEND)\" \l0x0025: INVOKE  (r4 I:java.lang.Object), (r5 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0028|RETURN\l|0x0028: RETURN  (r4 I:java.nio.file.Path) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.nio.file.Path kotlin.io.path.PathsKt__PathReadWriteKt.appendLines$default((r1 I:java.nio.file.Path A[D('$this$appendLines_u24default' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.Iterable A[D('lines' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:3:0x0002 \-\> B:5:0x0006\lDebug Info:\l  \-1 \-0x0028: r1 '$this$appendLines_u24default' Ljava\/nio\/file\/Path;\l  \-1 \-0x0028: r2 'lines' Ljava\/lang\/Iterable;\l  \-1 \-0x0028: r3 'charset' Ljava\/nio\/charset\/Charset;\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

