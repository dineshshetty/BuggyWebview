digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.bufferedWriter(Ljava\/nio\/file\/Path;Ljava\/nio\/charset\/Charset;I[Ljava\/nio\/file\/OpenOption;)Ljava\/io\/BufferedWriter;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$bufferedWriter' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"options\" \l0x000c: INVOKE  (r6 I:java.lang.Object A[D('options' java.nio.file.OpenOption[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: NEW_INSTANCE  (r0 I:java.io.BufferedWriter) =  java.io.BufferedWriter  (LINE:88)\l0x0011: NEW_INSTANCE  (r1 I:java.io.OutputStreamWriter) =  java.io.OutputStreamWriter  (LINE:89)\l0x0013: ARRAY_LENGTH  (r2 I:int) = (r6 I:??[] A[D('options' java.nio.file.OpenOption[])])  (LINE:90)\l0x0014: INVOKE  (r2 I:java.lang.Object[]) = (r6 I:java.lang.Object[] A[D('options' java.nio.file.OpenOption[])]), (r2 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x0018: CHECK_CAST (r2 I:java.nio.file.OpenOption[]) = (java.nio.file.OpenOption[]) (r2 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r2 I:java.io.OutputStream) = (r3 I:java.nio.file.Path A[D('$this$bufferedWriter' java.nio.file.Path)]), (r2 I:java.nio.file.OpenOption[]) type: STATIC call: java.nio.file.Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption[]):java.io.OutputStream A[MD:(java.nio.file.Path, java.nio.file.OpenOption[]):java.io.OutputStream VARARG throws java.io.IOException (c)]\l0x001f: INVOKE  \l  (r1 I:java.io.OutputStreamWriter)\l  (r2 I:java.io.OutputStream)\l  (r4 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: DIRECT call: java.io.OutputStreamWriter.\<init\>(java.io.OutputStream, java.nio.charset.Charset):void A[MD:(java.io.OutputStream, java.nio.charset.Charset):void (c)] (LINE:89)\l0x0022: CHECK_CAST (r1 I:java.io.Writer) = (java.io.Writer) (r1 I:??[OBJECT, ARRAY]) \l0x0025: INVOKE  (r0 I:java.io.BufferedWriter), (r1 I:java.io.Writer), (r5 I:int A[D('bufferSize' int)]) type: DIRECT call: java.io.BufferedWriter.\<init\>(java.io.Writer, int):void A[MD:(java.io.Writer, int):void (c)] (LINE:88)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0028|RETURN\l|0x0028: RETURN  (r0 I:java.io.BufferedWriter) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.io.BufferedWriter kotlin.io.path.PathsKt__PathReadWriteKt.bufferedWriter((r3 I:java.nio.file.Path A[D('$this$bufferedWriter' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('bufferSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.nio.file.OpenOption[] A[D('options' java.nio.file.OpenOption[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0028: r3 '$this$bufferedWriter' Ljava\/nio\/file\/Path;\l  \-1 \-0x0028: r4 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x0028: r5 'bufferSize' I\l  \-1 \-0x0028: r6 'options' [Ljava\/nio\/file\/OpenOption;\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

