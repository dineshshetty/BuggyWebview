digraph "CFG forkotlin.io.path.PathsKt__PathReadWriteKt.appendLines(Ljava\/nio\/file\/Path;Ljava\/lang\/Iterable;Ljava\/nio\/charset\/Charset;)Ljava\/nio\/file\/Path;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$appendLines' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"lines\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('lines' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x000c: INVOKE  (r5 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:309)\l0x0010: NEW_ARRAY  (r0 I:java.nio.file.OpenOption[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.nio.file.OpenOption[] \l0x0012: SGET  (r1 I:java.nio.file.StandardOpenOption) =  java.nio.file.StandardOpenOption.APPEND java.nio.file.StandardOpenOption \l0x0014: CHECK_CAST (r1 I:java.nio.file.OpenOption) = (java.nio.file.OpenOption) (r1 I:??[OBJECT, ARRAY]) \l0x0016: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: APUT  (r0 I:??[OBJECT, ARRAY][]), (r2 I:??[int, short, byte, char]), (r1 I:??[OBJECT, ARRAY]) \l0x0019: INVOKE  (r0 I:java.nio.file.Path) = \l  (r3 I:java.nio.file.Path A[D('$this$appendLines' java.nio.file.Path)])\l  (r4 I:java.lang.Iterable A[D('lines' java.lang.Iterable)])\l  (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l  (r0 I:java.nio.file.OpenOption[])\l type: STATIC call: java.nio.file.Files.write(java.nio.file.Path, java.lang.Iterable, java.nio.charset.Charset, java.nio.file.OpenOption[]):java.nio.file.Path A[MD:(java.nio.file.Path, java.lang.Iterable\<? extends java.lang.CharSequence\>, java.nio.charset.Charset, java.nio.file.OpenOption[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x001d: CONST_STR  (r1 I:java.lang.String) =  \"write(this, lines, charsâ€¦tandardOpenOption.APPEND)\" \l0x001f: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:java.nio.file.Path) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.nio.file.Path kotlin.io.path.PathsKt__PathReadWriteKt.appendLines((r3 I:java.nio.file.Path A[D('$this$appendLines' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Iterable\<? extends java.lang.CharSequence\> A[D('lines' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0022: r3 '$this$appendLines' Ljava\/nio\/file\/Path;\l  \-1 \-0x0022: r4 'lines' Ljava\/lang\/Iterable;\l  \-1 \-0x0022: r5 'charset' Ljava\/nio\/charset\/Charset;\lEXCEPTIONS:[Ljava\/io\/IOException;]\lSIGNATURE: (Ljava\/nio\/file\/Path;Ljava\/lang\/Iterable\<+Ljava\/lang\/CharSequence;\>;Ljava\/nio\/charset\/Charset;)Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

