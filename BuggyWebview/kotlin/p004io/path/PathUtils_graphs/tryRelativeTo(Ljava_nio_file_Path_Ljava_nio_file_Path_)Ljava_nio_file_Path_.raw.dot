digraph "CFG forkotlin.io.path.PathRelativizer.tryRelativeTo(Ljava\/nio\/file\/Path;Ljava\/nio\/file\/Path;)Ljava\/nio\/file\/Path;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"path\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('path' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"base\" \l0x0007: INVOKE  (r11 I:java.lang.Object A[D('base' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.nio.file.Path) = (r11 I:java.nio.file.Path A[D('base' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.normalize():java.nio.file.Path A[MD:():java.nio.file.Path (c)] (LINE:163)\l0x000e: INVOKE  (r1 I:java.nio.file.Path) = (r10 I:java.nio.file.Path A[D('path' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.normalize():java.nio.file.Path A[MD:():java.nio.file.Path (c)] (LINE:164)\l0x0012: INVOKE  (r2 I:java.nio.file.Path) = (r0 I:java.nio.file.Path A[D('bn' java.nio.file.Path)]), (r1 I:java.nio.file.Path A[D('pn' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.relativize(java.nio.file.Path):java.nio.file.Path A[MD:(java.nio.file.Path):java.nio.file.Path (c)] (LINE:165)\l0x0016: INVOKE  (r3 I:int) = (r0 I:java.nio.file.Path A[D('bn' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.getNameCount():int A[MD:():int (c)] (LINE:167)\l0x001a: INVOKE  (r4 I:int) = (r1 I:java.nio.file.Path A[D('pn' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.getNameCount():int A[MD:():int (c)]\l0x001e: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x0022: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x0024|LOOP_START\lLOOP:0: B:3:0x0024\-\>B:8:0x003e\l|0x0024: IF  (r5 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:24:0x0049 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0026|0x0026: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l0x0029: INVOKE  (r7 I:java.nio.file.Path) = (r0 I:java.nio.file.Path A[D('bn' java.nio.file.Path)]), (r6 I:int A[D('i' int)]) type: INTERFACE call: java.nio.file.Path.getName(int):java.nio.file.Path A[MD:(int):java.nio.file.Path (c)] (LINE:168)\l0x002d: SGET  (r8 I:java.nio.file.Path) =  kotlin.io.path.PathRelativizer.parentPath java.nio.file.Path \l0x002f: INVOKE  (r7 I:boolean) = (r7 I:java.lang.Object), (r8 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_5 [shape=record,label="{5\:\ 0x0033|0x0033: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:7:0x0036 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0036|0x0036: INVOKE  (r7 I:java.nio.file.Path) = (r1 I:java.nio.file.Path A[D('pn' java.nio.file.Path)]), (r6 I:int A[D('i' int)]) type: INTERFACE call: java.nio.file.Path.getName(int):java.nio.file.Path A[MD:(int):java.nio.file.Path (c)] (LINE:169)\l0x003a: INVOKE  (r7 I:boolean) = (r7 I:java.lang.Object), (r8 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x003e|LOOP_END\lLOOP:0: B:3:0x0024\-\>B:8:0x003e\l|0x003e: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0041 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0041|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0041|0x0041: NEW_INSTANCE  (r3 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x0043: CONST_STR  (r4 I:java.lang.String) =  \"Unable to compute relative path\" \l0x0045: INVOKE  (r3 I:java.lang.IllegalArgumentException), (r4 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0048|0x0048: THROW  (r3 I:java.lang.Throwable) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0049|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0049|0x0049: INVOKE  (r3 I:boolean) = (r1 I:java.lang.Object A[D('pn' java.nio.file.Path)]), (r0 I:java.lang.Object A[D('bn' java.nio.file.Path)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:172)\l}"];
Node_13 [shape=record,label="{13\:\ 0x004d|0x004d: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0059 \l}"];
Node_14 [shape=record,label="{14\:\ 0x004f|0x004f: SGET  (r3 I:java.nio.file.Path) =  kotlin.io.path.PathRelativizer.emptyPath java.nio.file.Path \l0x0051: INVOKE  (r3 I:boolean) = (r0 I:java.lang.Object A[D('bn' java.nio.file.Path)]), (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0055|0x0055: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0059 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0057|0x0057: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('pn' java.nio.file.Path)])  (LINE:173)\l}"];
Node_21 [shape=record,label="{21\:\ 0x008e|0x008e: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('rnString' java.lang.String)]) = (r4 I:??[OBJECT, ARRAY])  (LINE:172)\l0x008f: CONST_STR  (r4 I:java.lang.String) =  \"r\"  (LINE:182)\l0x0091: INVOKE  (r3 I:java.lang.Object A[D('r' java.nio.file.Path)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0094|RETURN\l|0x0094: RETURN  (r3 I:java.nio.file.Path A[D('r' java.nio.file.Path)]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0059|0x0059: INVOKE  (r3 I:java.lang.String) = (r2 I:java.lang.Object A[D('rn' java.nio.file.Path)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:175)\l0x005d: INVOKE  (r5 I:java.nio.file.FileSystem) = (r2 I:java.nio.file.Path A[D('rn' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.getFileSystem():java.nio.file.FileSystem A[MD:():java.nio.file.FileSystem (c)] (LINE:177)\l0x0061: INVOKE  (r5 I:java.lang.String) = (r5 I:java.nio.file.FileSystem) type: VIRTUAL call: java.nio.file.FileSystem.getSeparator():java.lang.String A[MD:():java.lang.String (c)]\l0x0065: CONST_STR  (r6 I:java.lang.String) =  \"rn.fileSystem.separator\" \l0x0067: INVOKE  (r5 I:java.lang.Object), (r6 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x006a: CONST  (r6 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x006b: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x006c: INVOKE  (r5 I:boolean) = \l  (r3 I:java.lang.String A[D('rnString' java.lang.String)])\l  (r5 I:java.lang.String)\l  (r4 I:boolean)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt.endsWith$default(java.lang.String, java.lang.String, boolean, int, java.lang.Object):boolean A[MD:(java.lang.String, java.lang.String, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0070|0x0070: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x008d \l}"];
Node_19 [shape=record,label="{19\:\ 0x0072|0x0072: INVOKE  (r5 I:java.nio.file.FileSystem) = (r2 I:java.nio.file.Path A[D('rn' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.getFileSystem():java.nio.file.FileSystem A[MD:():java.nio.file.FileSystem (c)] (LINE:178)\l0x0076: INVOKE  (r6 I:java.nio.file.FileSystem) = (r2 I:java.nio.file.Path A[D('rn' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.getFileSystem():java.nio.file.FileSystem A[MD:():java.nio.file.FileSystem (c)]\l0x007a: INVOKE  (r6 I:java.lang.String) = (r6 I:java.nio.file.FileSystem) type: VIRTUAL call: java.nio.file.FileSystem.getSeparator():java.lang.String A[MD:():java.lang.String (c)]\l0x007e: INVOKE  (r6 I:int) = (r6 I:java.lang.String) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x0082: INVOKE  (r6 I:java.lang.String) = (r3 I:java.lang.String A[D('rnString' java.lang.String)]), (r6 I:int) type: STATIC call: kotlin.text.StringsKt.dropLast(java.lang.String, int):java.lang.String A[MD:(java.lang.String, int):java.lang.String (m)]\l0x0086: NEW_ARRAY  (r4 I:java.lang.String[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x0088: INVOKE  (r4 I:java.nio.file.Path) = (r5 I:java.nio.file.FileSystem), (r6 I:java.lang.String), (r4 I:java.lang.String[]) type: VIRTUAL call: java.nio.file.FileSystem.getPath(java.lang.String, java.lang.String[]):java.nio.file.Path A[MD:(java.lang.String, java.lang.String[]):java.nio.file.Path VARARG (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x008d|0x008d: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('rn' java.nio.file.Path)])  (LINE:180)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0049|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public final java.nio.file.Path kotlin.io.path.PathRelativizer.tryRelativeTo((r9 'this' I:kotlin.io.path.PathRelativizer A[IMMUTABLE_TYPE, THIS]), (r10 I:java.nio.file.Path A[D('path' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.nio.file.Path A[D('base' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:8:0x003e \-\> B:3:0x0024, CROSS_EDGE: B:22:0x0094 \-\> B:1:?, CROSS_EDGE: B:19:0x0072 \-\> B:21:0x008e, CROSS_EDGE: B:20:0x008d \-\> B:21:0x008e, CROSS_EDGE: B:13:0x004d \-\> B:17:0x0059, CROSS_EDGE: B:3:0x0024 \-\> B:12:0x0049\lDebug Info:\l  0x0027\-0x0049: r6 'i' I\l  0x005d\-0x008e: r3 'rnString' Ljava\/lang\/String;\l  0x000e\-0x0094: r0 'bn' Ljava\/nio\/file\/Path;\l  0x0012\-0x0094: r1 'pn' Ljava\/nio\/file\/Path;\l  0x0016\-0x0094: r2 'rn' Ljava\/nio\/file\/Path;\l  0x008f\-0x0094: r3 'r' Ljava\/nio\/file\/Path;\l  \-1 \-0x0094: r10 'path' Ljava\/nio\/file\/Path;\l  \-1 \-0x0094: r11 'base' Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_24;
Node_4 -> Node_5;
Node_5 -> Node_7;
Node_5 -> Node_23[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_3[style=dashed];
Node_8 -> Node_25;
Node_25 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_23 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_1;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_24 -> Node_12;
}

