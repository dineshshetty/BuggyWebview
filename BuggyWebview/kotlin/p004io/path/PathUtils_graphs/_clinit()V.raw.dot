digraph "CFG forkotlin.io.path.PathRelativizer.\<clinit\>()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.io.path.PathRelativizer) =  kotlin.io.path.PathRelativizer \l0x0002: INVOKE  (r0 I:kotlin.io.path.PathRelativizer) type: DIRECT call: kotlin.io.path.PathRelativizer.\<init\>():void A[MD:():void (m)]\l0x0005: SPUT  (r0 I:kotlin.io.path.PathRelativizer) kotlin.io.path.PathRelativizer.INSTANCE kotlin.io.path.PathRelativizer \l0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:158)\l0x0008: NEW_ARRAY  (r1 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[] \l0x000a: CONST_STR  (r2 I:java.lang.String) =  \"\" \l0x000c: INVOKE  (r1 I:java.nio.file.Path) = (r2 I:java.lang.String), (r1 I:java.lang.String[]) type: STATIC call: java.nio.file.Paths.get(java.lang.String, java.lang.String[]):java.nio.file.Path A[MD:(java.lang.String, java.lang.String[]):java.nio.file.Path VARARG (c)]\l0x0010: SPUT  (r1 I:java.nio.file.Path) kotlin.io.path.PathRelativizer.emptyPath java.nio.file.Path \l0x0012: NEW_ARRAY  (r0 I:java.lang.String[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.String[]  (LINE:159)\l0x0014: CONST_STR  (r1 I:java.lang.String) =  \"..\" \l0x0016: INVOKE  (r0 I:java.nio.file.Path) = (r1 I:java.lang.String), (r0 I:java.lang.String[]) type: STATIC call: java.nio.file.Paths.get(java.lang.String, java.lang.String[]):java.nio.file.Path A[MD:(java.lang.String, java.lang.String[]):java.nio.file.Path VARARG (c)]\l0x001a: SPUT  (r0 I:java.nio.file.Path) kotlin.io.path.PathRelativizer.parentPath java.nio.file.Path \l}"];
Node_3 [shape=record,label="{3\:\ 0x001c|RETURN\l|0x001c: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.io.path.PathRelativizer.\<clinit\>()  | USE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

