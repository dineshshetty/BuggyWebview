digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.getName(Ljava\/nio\/file\/Path;)Ljava\/lang\/String;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$name' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.nio.file.Path) = (r1 I:java.nio.file.Path A[D('$this$name' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.getFileName():java.nio.file.Path A[MD:():java.nio.file.Path (c)] (LINE:27)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000d \l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:? \l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: CONST_STR  (r0 I:java.lang.String) =  \"\" \l0x0015: RETURN  (r0 I:java.lang.String) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0015: RETURN  (r0 I:java.lang.String) A[SYNTHETIC]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|0x000d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.path.PathsKt__PathUtilsKt.getName((r1 I:java.nio.file.Path A[D('$this$name' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0011 \-\> B:18:0x0015, CROSS_EDGE: B:15:0x000d \-\> B:16:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r1 '$this$name' Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_15 -> Node_16;
}

