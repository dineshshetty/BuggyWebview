digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.fileAttributesView(Ljava\/nio\/file\/Path;[Ljava\/nio\/file\/LinkOption;)Ljava\/nio\/file\/attribute\/FileAttributeView;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"options\")\lkotlin.jvm.internal.Intrinsics.reifiedOperationMarker(4, \"V\")\ljava.nio.file.attribute.FileAttributeView r2 = (V) java.nio.file.Files.getFileAttributeView(r4, java.nio.file.attribute.FileAttributeView.class, (java.nio.file.LinkOption[]) java.util.Arrays.copyOf(r5, r5.length))\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|if (r2 == null) goto L6\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022}"];
Node_13 [shape=record,label="{13\:\ 0x0025|RETURN\l|return r2\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0026|kotlin.jvm.internal.Intrinsics.reifiedOperationMarker(4, \"V\")\lkotlin.p004io.path.PathsKt.fileAttributeViewNotAvailable(r4, java.nio.file.attribute.FileAttributeView.class)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0036|throw new kotlin.ExceptionsH()\l}"];
MethodNode[shape=record,label="{private static final \/* synthetic *\/ V extends java.nio.file.attribute.FileAttributeView kotlin.io.path.PathsKt__PathUtilsKt.fileAttributesView((r4v0 '$this$fileAttributesView' java.nio.file.Path A[D('$this$fileAttributesView' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'options' java.nio.file.LinkOption[] A[D('options' java.nio.file.LinkOption[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0036 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [V extends java.nio.file.attribute.FileAttributeView]\lSIGNATURE: \<V::Ljava\/nio\/file\/attribute\/FileAttributeView;\>(Ljava\/nio\/file\/Path;[Ljava\/nio\/file\/LinkOption;)TV;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

