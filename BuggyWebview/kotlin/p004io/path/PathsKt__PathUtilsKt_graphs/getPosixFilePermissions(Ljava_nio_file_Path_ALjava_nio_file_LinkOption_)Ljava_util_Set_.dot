digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.getPosixFilePermissions(Ljava\/nio\/file\/Path;[Ljava\/nio\/file\/LinkOption;)Ljava\/util\/Set;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"options\")\ljava.util.Set r0 = java.nio.file.Files.getPosixFilePermissions(r2, (java.nio.file.LinkOption[]) java.util.Arrays.copyOf(r3, r3.length))\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"getPosixFilePermissions(this, *options)\")\l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|RETURN\l|return r0\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.util.Set\<java.nio.file.attribute.PosixFilePermission\> kotlin.io.path.PathsKt__PathUtilsKt.getPosixFilePermissions((r2v0 '$this$getPosixFilePermissions' java.nio.file.Path A[D('$this$getPosixFilePermissions' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'options' java.nio.file.LinkOption[] A[D('options' java.nio.file.LinkOption[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lEXCEPTIONS:[Ljava\/io\/IOException;]\lSIGNATURE: (Ljava\/nio\/file\/Path;[Ljava\/nio\/file\/LinkOption;)Ljava\/util\/Set\<Ljava\/nio\/file\/attribute\/PosixFilePermission;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

