digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.moveTo(Ljava\/nio\/file\/Path;Ljava\/nio\/file\/Path;Z)Ljava\/nio\/file\/Path;" {
subgraph cluster_Region_1276687458 {
label = "R(3:1|4|5)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"target\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|PHI: r1 \l  PHI: (r1v2 java.nio.file.CopyOption[] A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|java.nio.file.CopyOption[] r0 = r5 ? new java.nio.file.CopyOption[]\{java.nio.file.StandardCopyOption.REPLACE_EXISTING\} : new java.nio.file.CopyOption[0]\ljava.nio.file.Path java.nio.file.Path r1 = java.nio.file.Files.move(r3, r4, (java.nio.file.CopyOption[]) java.util.Arrays.copyOf(r0, r0.length))\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"move(this, target, *options)\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|RETURN\l|return r1\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x000b}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000d}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0017}"];
MethodNode[shape=record,label="{private static final java.nio.file.Path kotlin.io.path.PathsKt__PathUtilsKt.moveTo((r3v0 '$this$moveTo' java.nio.file.Path A[D('$this$moveTo' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'target' java.nio.file.Path A[D('target' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'overwrite' boolean A[D('overwrite' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0017 \-\> B:14:0x001b\lINLINE_NOT_NEEDED\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_11 -> Node_12;
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_13 -> Node_14;
}

