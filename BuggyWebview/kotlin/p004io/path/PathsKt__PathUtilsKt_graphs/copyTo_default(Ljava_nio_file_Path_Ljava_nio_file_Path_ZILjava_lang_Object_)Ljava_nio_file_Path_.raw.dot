digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.copyTo$default(Ljava\/nio\/file\/Path;Ljava\/nio\/file\/Path;ZILjava\/lang\/Object;)Ljava\/nio\/file\/Path;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:218)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0005 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('overwrite' boolean)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0005|0x0005: CONST_STR  (r4 I:java.lang.String) =  \"\<this\>\" \l0x0007: INVOKE  (r1 I:java.lang.Object A[D('$this$copyTo_u24default' java.nio.file.Path)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r4 I:java.lang.String) =  \"target\" \l0x000c: INVOKE  (r2 I:java.lang.Object A[D('target' java.nio.file.Path)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:219)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('overwrite' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x001c \l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|0x0012: CONST  (r5 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0013: NEW_ARRAY  (r5 I:java.nio.file.CopyOption[]) = (r5 I:int A[IMMUTABLE_TYPE]) type: java.nio.file.CopyOption[] \l0x0015: SGET  (r0 I:java.nio.file.StandardCopyOption) =  java.nio.file.StandardCopyOption.REPLACE_EXISTING java.nio.file.StandardCopyOption \l0x0017: CHECK_CAST (r0 I:java.nio.file.CopyOption) = (java.nio.file.CopyOption) (r0 I:??[OBJECT, ARRAY]) \l0x0019: APUT  (r5 I:??[OBJECT, ARRAY][]), (r4 I:??[int, short, byte, char]), (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0020|0x0020: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$i$f$emptyArray' int)])  (LINE:219)\l0x0021: ARRAY_LENGTH  (r5 I:int) = (r4 I:??[] A[D('options' java.nio.file.CopyOption[])])  (LINE:220)\l0x0022: INVOKE  (r5 I:java.lang.Object[]) = (r4 I:java.lang.Object[] A[D('options' java.nio.file.CopyOption[])]), (r5 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x0026: CHECK_CAST (r5 I:java.nio.file.CopyOption[]) = (java.nio.file.CopyOption[]) (r5 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r5 I:java.nio.file.Path) = \l  (r1 I:java.nio.file.Path A[D('$this$copyTo_u24default' java.nio.file.Path)])\l  (r2 I:java.nio.file.Path A[D('target' java.nio.file.Path)])\l  (r5 I:java.nio.file.CopyOption[])\l type: STATIC call: java.nio.file.Files.copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]):java.nio.file.Path A[MD:(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x002c: CONST_STR  (r0 I:java.lang.String) =  \"copy(this, target, *options)\" \l0x002e: INVOKE  (r5 I:java.lang.Object), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|RETURN\l|0x0031: RETURN  (r5 I:java.nio.file.Path) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|0x001c: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: NEW_ARRAY  (r4 I:java.nio.file.CopyOption[]) = (r4 I:int A[IMMUTABLE_TYPE]) type: java.nio.file.CopyOption[]  (LINE:1000)\l0x001f: MOVE  (r5 I:??[OBJECT, ARRAY] A[D('$i$f$emptyArray' int)]) = (r4 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.nio.file.Path kotlin.io.path.PathsKt__PathUtilsKt.copyTo$default((r1 I:java.nio.file.Path A[D('$this$copyTo_u24default' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.file.Path A[D('target' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[D('overwrite' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:19:0x001c \-\> B:20:0x0020, CROSS_EDGE: B:14:0x0002 \-\> B:16:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0020: r5 '$i$f$emptyArray' I\l  \-1 \-0x0031: r1 '$this$copyTo_u24default' Ljava\/nio\/file\/Path;\l  \-1 \-0x0031: r2 'target' Ljava\/nio\/file\/Path;\l  \-1 \-0x0031: r3 'overwrite' Z\l  0x0021\-0x0031: r4 'options' [Ljava\/nio\/file\/CopyOption;\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
}

