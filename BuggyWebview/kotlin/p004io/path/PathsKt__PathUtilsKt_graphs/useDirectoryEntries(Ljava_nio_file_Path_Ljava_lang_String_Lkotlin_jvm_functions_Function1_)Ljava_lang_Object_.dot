digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.useDirectoryEntries(Ljava\/nio\/file\/Path;Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"glob\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"block\")\ljava.io.Closeable r0 = java.nio.file.Files.newDirectoryStream(r5, r6)\lr1 = 1\l}"];
Node_26 [shape=record,label="{26\:\ 0x0016|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0035, blocks: (B:18:0x0016), top: B:26:0x0016 \}\lCatch: all \-\> 0x0035\l|java.nio.file.DirectoryStream r2 = r0     \/\/ Catch: java.lang.Throwable \-\> L35\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r2, \"it\")     \/\/ Catch: java.lang.Throwable \-\> L35\ljava.lang.Object r4 = r7.invoke(kotlin.collections.CollectionsKt.asSequence(r2))     \/\/ Catch: java.lang.Throwable \-\> L35\l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|kotlin.jvm.internal.InlineMarker.finallyStart(1)\lkotlin.p004io.Closeable.closeFinally(r0, null)\lkotlin.jvm.internal.InlineMarker.finallyEnd(1)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0034|RETURN\l|return r4\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0035|ExcHandler: all \-\> 0x0035\l|java.lang.Throwable r2 = move\-exception\l}"];
Node_28 [shape=record,label="{28\:\ 0x0036|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0036|TRY_ENTER\lTRY_LEAVE\lDONT_GENERATE\lFINALLY_INSNS\lTryCatch #1 \{all \-\> 0x0037, blocks: (B:22:0x0036), top: B:28:0x0036 \}\lCatch: all \-\> 0x0037\l|throw r2     \/\/ Catch: java.lang.Throwable \-\> L37\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x0037|DONT_GENERATE\lFINALLY_INSNS\lExcHandler: all \-\> 0x0037\l|java.lang.Throwable r3 = move\-exception\l}"];
Node_24 [shape=record,label="{24\:\ 0x0038|DONT_GENERATE\lFINALLY_INSNS\l|kotlin.jvm.internal.InlineMarker.finallyStart(r1)\lkotlin.p004io.Closeable.closeFinally(r0, r2)\lkotlin.jvm.internal.InlineMarker.finallyEnd(r1)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0041|DONT_GENERATE\lFINALLY_INSNS\l|throw r3\l}"];
MethodNode[shape=record,label="{private static final T kotlin.io.path.PathsKt__PathUtilsKt.useDirectoryEntries((r5v0 '$this$useDirectoryEntries' java.nio.file.Path A[D('$this$useDirectoryEntries' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'glob' java.lang.String A[D('glob' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'block' kotlin.jvm.functions.Function1\<? super kotlin.sequences.Sequence\<? extends java.nio.file.Path\>, ? extends T\> A[D('block' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0036 \-\> B:16:?, CROSS_EDGE: B:25:0x0041 \-\> B:16:?, CROSS_EDGE: B:28:0x0036 \-\> B:23:0x0037, CROSS_EDGE: B:26:0x0016 \-\> B:21:0x0035\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0035, blocks: (B:18:0x0016), top: B:26:0x0016 \}, TryCatch #1 \{all \-\> 0x0037, blocks: (B:22:0x0036), top: B:28:0x0036 \}\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/nio\/file\/Path;Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/sequences\/Sequence\<+Ljava\/nio\/file\/Path;\>;+TT;\>;)TT;\lEXCEPTIONS:[Ljava\/io\/IOException;]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Finally have unexpected throw blocks count: 2, expect 1\}\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_26;
Node_26 -> Node_18;
Node_26 -> Node_21;
Node_18 -> Node_19;
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_27 -> Node_21;
Node_21 -> Node_28;
Node_28 -> Node_22;
Node_28 -> Node_23;
Node_22 -> Node_16;
Node_22 -> Node_29;
Node_29 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_16;
}

