digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.createTempFile$default(Ljava\/lang\/String;Ljava\/lang\/String;[Ljava\/nio\/file\/attribute\/FileAttribute;ILjava\/lang\/Object;)Ljava\/nio\/file\/Path;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:877)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x0005 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('prefix' java.lang.String)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000a \l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('suffix' java.lang.String)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: CONST_STR  (r3 I:java.lang.String) =  \"attributes\" \l0x000c: INVOKE  (r2 I:java.lang.Object A[D('attributes' java.nio.file.attribute.FileAttribute[])]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: ARRAY_LENGTH  (r3 I:int) = (r2 I:??[] A[D('attributes' java.nio.file.attribute.FileAttribute[])])  (LINE:878)\l0x0010: INVOKE  (r3 I:java.lang.Object[]) = (r2 I:java.lang.Object[] A[D('attributes' java.nio.file.attribute.FileAttribute[])]), (r3 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x0014: CHECK_CAST (r3 I:java.nio.file.attribute.FileAttribute[]) = (java.nio.file.attribute.FileAttribute[]) (r3 I:??[OBJECT, ARRAY]) \l0x0016: INVOKE  (r3 I:java.nio.file.Path) = \l  (r0 I:java.lang.String A[D('prefix' java.lang.String)])\l  (r1 I:java.lang.String A[D('suffix' java.lang.String)])\l  (r3 I:java.nio.file.attribute.FileAttribute[])\l type: STATIC call: java.nio.file.Files.createTempFile(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]):java.nio.file.Path A[MD:(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute\<?\>[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x001a: CONST_STR  (r4 I:java.lang.String) =  \"createTempFile(prefix, suffix, *attributes)\" \l0x001c: INVOKE  (r3 I:java.lang.Object), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|RETURN\l|0x001f: RETURN  (r3 I:java.nio.file.Path) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.nio.file.Path kotlin.io.path.PathsKt__PathUtilsKt.createTempFile$default((r0 I:java.lang.String A[D('prefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1 I:java.lang.String A[D('suffix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.file.attribute.FileAttribute[] A[D('attributes' java.nio.file.attribute.FileAttribute[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:16:0x0007 \-\> B:18:0x000a, CROSS_EDGE: B:13:0x0002 \-\> B:15:0x0005\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001f: r0 'prefix' Ljava\/lang\/String;\l  \-1 \-0x001f: r1 'suffix' Ljava\/lang\/String;\l  \-1 \-0x001f: r2 'attributes' [Ljava\/nio\/file\/attribute\/FileAttribute;\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

