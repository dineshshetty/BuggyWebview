digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.getExtension(Ljava\/nio\/file\/Path;)Ljava\/lang\/String;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$extension' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.nio.file.Path) = (r3 I:java.nio.file.Path A[D('$this$extension' java.nio.file.Path)]) type: INTERFACE call: java.nio.file.Path.getFileName():java.nio.file.Path A[MD:():java.nio.file.Path (c)] (LINE:45)\l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"\" \l}"];
Node_11 [shape=record,label="{11\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000e \l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|0x000e: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0012: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0014: INVOKE  (r1 I:java.lang.String) = (r0 I:java.lang.String), (r2 I:char), (r1 I:java.lang.String) type: STATIC call: kotlin.text.StringsKt.substringAfterLast(java.lang.String, char, java.lang.String):java.lang.String A[MD:(java.lang.String, char, java.lang.String):java.lang.String (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0018|RETURN\lORIG_RETURN\l|0x0018: RETURN  (r1 I:java.lang.String) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0018: RETURN  (r1 I:java.lang.String) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.path.PathsKt__PathUtilsKt.getExtension((r3 I:java.nio.file.Path A[D('$this$extension' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x000b \-\> B:14:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0018: r3 '$this$extension' Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_13;
Node_11 -> Node_15[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_9;
Node_15 -> Node_9;
}

