digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.getInvariantSeparatorsPathString(Ljava\/nio\/file\/Path;)Ljava\/lang\/String;" {
subgraph cluster_Region_1388053416 {
label = "R(2:1|(2:(1:7)|(2:3|4)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\ljava.lang.String java.lang.String r0 = r7.getFileSystem().getSeparator()\l}"];
subgraph cluster_Region_1656359921 {
label = "R(2:(1:7)|(2:3|4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_187209677 {
label = "IF [B:11:0x0013] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0013|if (kotlin.jvm.internal.Intrinsics.areEqual(r0, \"\/\") == true) goto L6\l}"];
subgraph cluster_Region_1389454312 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x002d|RETURN\lORIG_RETURN\l|return r7.toString()\l}"];
}
}
subgraph cluster_Region_217564999 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0015|java.lang.String java.lang.String r1 = r7.toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"separator\")\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.text.StringsKt.replace$default(r1, r0, \"\/\", false, 4, (java.lang.Object) null)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0029}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.path.PathsKt__PathUtilsKt.getInvariantSeparatorsPathString((r7v0 '$this$invariantSeparatorsPathString' java.nio.file.Path A[D('$this$invariantSeparatorsPathString' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0029 \-\> B:14:0x002d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_14 -> Node_9;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_13 -> Node_14;
}

