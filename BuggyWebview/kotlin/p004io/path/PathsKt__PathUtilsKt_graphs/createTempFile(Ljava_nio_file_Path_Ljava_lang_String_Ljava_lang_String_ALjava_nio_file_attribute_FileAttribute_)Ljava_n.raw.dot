digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.createTempFile(Ljava\/nio\/file\/Path;Ljava\/lang\/String;Ljava\/lang\/String;[Ljava\/nio\/file\/attribute\/FileAttribute;)Ljava\/nio\/file\/Path;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"attributes\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('attributes' java.nio.file.attribute.FileAttribute[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0005|0x0005: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('directory' java.nio.file.Path)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0018  (LINE:898)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0007|0x0007: ARRAY_LENGTH  (r0 I:int) = (r5 I:??[] A[D('attributes' java.nio.file.attribute.FileAttribute[])])  (LINE:899)\l0x0008: INVOKE  (r0 I:java.lang.Object[]) = (r5 I:java.lang.Object[] A[D('attributes' java.nio.file.attribute.FileAttribute[])]), (r0 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x000c: CHECK_CAST (r0 I:java.nio.file.attribute.FileAttribute[]) = (java.nio.file.attribute.FileAttribute[]) (r0 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:java.nio.file.Path) = \l  (r2 I:java.nio.file.Path A[D('directory' java.nio.file.Path)])\l  (r3 I:java.lang.String A[D('prefix' java.lang.String)])\l  (r4 I:java.lang.String A[D('suffix' java.lang.String)])\l  (r0 I:java.nio.file.attribute.FileAttribute[])\l type: STATIC call: java.nio.file.Files.createTempFile(java.nio.file.Path, java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]):java.nio.file.Path A[MD:(java.nio.file.Path, java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute\<?\>[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x0012: CONST_STR  (r1 I:java.lang.String) =  \"createTempFile(directoryâ€¦fix, suffix, *attributes)\" \l0x0014: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0028: RETURN  (r0 I:java.nio.file.Path) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0018|0x0018: ARRAY_LENGTH  (r0 I:int) = (r5 I:??[] A[D('attributes' java.nio.file.attribute.FileAttribute[])])  (LINE:901)\l0x0019: INVOKE  (r0 I:java.lang.Object[]) = (r5 I:java.lang.Object[] A[D('attributes' java.nio.file.attribute.FileAttribute[])]), (r0 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x001d: CHECK_CAST (r0 I:java.nio.file.attribute.FileAttribute[]) = (java.nio.file.attribute.FileAttribute[]) (r0 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r0 I:java.nio.file.Path) = \l  (r3 I:java.lang.String A[D('prefix' java.lang.String)])\l  (r4 I:java.lang.String A[D('suffix' java.lang.String)])\l  (r0 I:java.nio.file.attribute.FileAttribute[])\l type: STATIC call: java.nio.file.Files.createTempFile(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute[]):java.nio.file.Path A[MD:(java.lang.String, java.lang.String, java.nio.file.attribute.FileAttribute\<?\>[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x0023: CONST_STR  (r1 I:java.lang.String) =  \"createTempFile(prefix, suffix, *attributes)\" \l0x0025: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0028|RETURN\lORIG_RETURN\l|0x0028: RETURN  (r0 I:java.nio.file.Path) \l}"];
MethodNode[shape=record,label="{public static final java.nio.file.Path kotlin.io.path.PathsKt__PathUtilsKt.createTempFile((r2 I:java.nio.file.Path A[D('directory' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[D('prefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.String A[D('suffix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.file.attribute.FileAttribute\<?\>[] A[D('attributes' java.nio.file.attribute.FileAttribute[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0018 \-\> B:14:0x0028\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0028: r2 'directory' Ljava\/nio\/file\/Path;\l  \-1 \-0x0028: r3 'prefix' Ljava\/lang\/String;\l  \-1 \-0x0028: r4 'suffix' Ljava\/lang\/String;\l  \-1 \-0x0028: r5 'attributes' [Ljava\/nio\/file\/attribute\/FileAttribute;\lEXCEPTIONS:[Ljava\/io\/IOException;]\lSIGNATURE: (Ljava\/nio\/file\/Path;Ljava\/lang\/String;Ljava\/lang\/String;[Ljava\/nio\/file\/attribute\/FileAttribute\<*\>;)Ljava\/nio\/file\/Path;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

