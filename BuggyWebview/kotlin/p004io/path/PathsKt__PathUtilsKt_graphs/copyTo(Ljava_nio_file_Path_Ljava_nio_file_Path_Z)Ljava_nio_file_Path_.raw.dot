digraph "CFG forkotlin.io.path.PathsKt__PathUtilsKt.copyTo(Ljava\/nio\/file\/Path;Ljava\/nio\/file\/Path;Z)Ljava\/nio\/file\/Path;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$copyTo' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"target\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('target' java.nio.file.Path)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:219)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000b|0x000b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('overwrite' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0017 \l}"];
Node_12 [shape=record,label="{12\:\ 0x000d|0x000d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000e: NEW_ARRAY  (r1 I:java.nio.file.CopyOption[]) = (r1 I:int A[IMMUTABLE_TYPE]) type: java.nio.file.CopyOption[] \l0x0010: SGET  (r2 I:java.nio.file.StandardCopyOption) =  java.nio.file.StandardCopyOption.REPLACE_EXISTING java.nio.file.StandardCopyOption \l0x0012: CHECK_CAST (r2 I:java.nio.file.CopyOption) = (java.nio.file.CopyOption) (r2 I:??[OBJECT, ARRAY]) \l0x0014: APUT  (r1 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]), (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|0x001b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$i$f$emptyArray' int)])  (LINE:219)\l0x001c: ARRAY_LENGTH  (r1 I:int) = (r0 I:??[] A[D('options' java.nio.file.CopyOption[])])  (LINE:220)\l0x001d: INVOKE  (r1 I:java.lang.Object[]) = (r0 I:java.lang.Object[] A[D('options' java.nio.file.CopyOption[])]), (r1 I:int) type: STATIC call: java.util.Arrays.copyOf(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (c)]\l0x0021: CHECK_CAST (r1 I:java.nio.file.CopyOption[]) = (java.nio.file.CopyOption[]) (r1 I:??[OBJECT, ARRAY]) \l0x0023: INVOKE  (r1 I:java.nio.file.Path) = \l  (r3 I:java.nio.file.Path A[D('$this$copyTo' java.nio.file.Path)])\l  (r4 I:java.nio.file.Path A[D('target' java.nio.file.Path)])\l  (r1 I:java.nio.file.CopyOption[])\l type: STATIC call: java.nio.file.Files.copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]):java.nio.file.Path A[MD:(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]):java.nio.file.Path VARARG throws java.io.IOException (c)]\l0x0027: CONST_STR  (r2 I:java.lang.String) =  \"copy(this, target, *options)\" \l0x0029: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|RETURN\l|0x002c: RETURN  (r1 I:java.nio.file.Path) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0017|0x0017: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: NEW_ARRAY  (r0 I:java.nio.file.CopyOption[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.nio.file.CopyOption[]  (LINE:1000)\l0x001a: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('$i$f$emptyArray' int)]) = (r0 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{private static final java.nio.file.Path kotlin.io.path.PathsKt__PathUtilsKt.copyTo((r3 I:java.nio.file.Path A[D('$this$copyTo' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.nio.file.Path A[D('target' java.nio.file.Path), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('overwrite' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0017 \-\> B:14:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x001b: r1 '$i$f$emptyArray' I\l  0x001c\-0x002c: r0 'options' [Ljava\/nio\/file\/CopyOption;\l  \-1 \-0x002c: r3 '$this$copyTo' Ljava\/nio\/file\/Path;\l  \-1 \-0x002c: r4 'target' Ljava\/nio\/file\/Path;\l  \-1 \-0x002c: r5 'overwrite' Z\lEXCEPTIONS:[Ljava\/io\/IOException;]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

