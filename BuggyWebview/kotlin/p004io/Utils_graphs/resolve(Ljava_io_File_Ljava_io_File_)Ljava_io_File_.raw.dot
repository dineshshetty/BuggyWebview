digraph "CFG forkotlin.io.FilesKt__UtilsKt.resolve(Ljava\/io\/File;Ljava\/io\/File;)Ljava\/io\/File;" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$resolve' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"relative\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('relative' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r7 I:java.io.File A[D('relative' java.io.File)]) type: STATIC call: kotlin.io.FilesKt.isRooted(java.io.File):boolean A[MD:(java.io.File):boolean (m)] (LINE:437)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0011 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|RETURN\l|0x0010: RETURN  (r7 I:java.io.File A[D('relative' java.io.File)])  (LINE:438)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|0x0011: INVOKE  (r0 I:java.lang.String) = (r6 I:java.io.File A[D('$this$resolve' java.io.File)]) type: VIRTUAL call: java.io.File.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:439)\l0x0015: CONST_STR  (r1 I:java.lang.String) =  \"this.toString()\" \l0x0017: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('baseName' java.lang.String)])  (LINE:440)\l0x001b: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  (r1 I:int) = (r1 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0021: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0022|0x0022: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0026 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|0x0024: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0027|0x0027: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0051 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0029|0x0029: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('baseName' java.lang.String)]) \l0x002a: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x002c: SGET  (r3 I:char) =  java.io.File.separatorChar char \l0x002e: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x002f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0030: INVOKE  (r1 I:boolean) = (r1 I:java.lang.CharSequence), (r3 I:char), (r2 I:boolean), (r4 I:int), (r5 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.endsWith$default(java.lang.CharSequence, char, boolean, int, java.lang.Object):boolean A[MD:(java.lang.CharSequence, char, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0034|0x0034: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0037 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0037|0x0037: NEW_INSTANCE  (r1 I:java.io.File) =  java.io.File \l0x0039: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x003b: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x003e: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String A[D('baseName' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0041: SGET  (r3 I:char) =  java.io.File.separatorChar char \l0x0043: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0046: INVOKE  (r2 I:java.lang.StringBuilder), (r7 I:java.lang.Object A[D('relative' java.io.File)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x0049: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004d: INVOKE  (r1 I:java.io.File), (r2 I:java.lang.String) type: DIRECT call: java.io.File.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0065: RETURN  (r1 I:java.io.File) A[SYNTHETIC]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0051|0x0051: NEW_INSTANCE  (r1 I:java.io.File) =  java.io.File \l0x0053: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0055: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0058: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String A[D('baseName' java.lang.String)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005b: INVOKE  (r2 I:java.lang.StringBuilder), (r7 I:java.lang.Object A[D('relative' java.io.File)]) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x005e: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0062: INVOKE  (r1 I:java.io.File), (r2 I:java.lang.String) type: DIRECT call: java.io.File.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0065|RETURN\lORIG_RETURN\l|0x0065: RETURN  (r1 I:java.io.File) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0026|0x0026: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.io.File kotlin.io.FilesKt__UtilsKt.resolve((r6 I:java.io.File A[D('$this$resolve' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.io.File A[D('relative' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0065 \-\> B:18:?, CROSS_EDGE: B:31:0x0051 \-\> B:32:0x0065, CROSS_EDGE: B:26:0x0027 \-\> B:31:0x0051, CROSS_EDGE: B:25:0x0026 \-\> B:26:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x0065: r0 'baseName' Ljava\/lang\/String;\l  \-1 \-0x0065: r6 '$this$resolve' Ljava\/io\/File;\l  \-1 \-0x0065: r7 'relative' Ljava\/io\/File;\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_18;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_31[style=dashed];
Node_30 -> Node_33;
Node_33 -> Node_18;
Node_31 -> Node_32;
Node_32 -> Node_18;
Node_25 -> Node_26;
}

