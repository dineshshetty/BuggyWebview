digraph "CFG forkotlin.io.FilesKt__UtilsKt.deleteRecursively(Ljava\/io\/File;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$deleteRecursively' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:kotlin.io.FileTreeWalk) = (r10 I:java.io.File A[D('$this$deleteRecursively' java.io.File)]) type: STATIC call: kotlin.io.FilesKt.walkBottomUp(java.io.File):kotlin.io.FileTreeWalk A[MD:(java.io.File):kotlin.io.FileTreeWalk (m)] (LINE:347)\l0x0009: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('initial$iv' boolean)])  (LINE:475)\l0x000e: INVOKE  (r4 I:java.util.Iterator) = (r0 I:kotlin.sequences.Sequence A[D('$this$fold$iv' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:476)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|LOOP_START\lLOOP:0: B:21:0x0012\-\>B:30:0x0032\l|0x0012: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0035 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|0x0018: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001c: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x001d: CHECK_CAST (r6 I:java.io.File) = (java.io.File) (r6 I:??[OBJECT, ARRAY]) \l0x001f: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('accumulator$iv' boolean)]) \l0x0020: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: INVOKE  (r9 I:boolean) = (r6 I:java.io.File A[D('it' java.io.File)]) type: VIRTUAL call: java.io.File.delete():boolean A[MD:():boolean (c)] (LINE:347)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0025|0x0025: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x002d \l}"];
Node_25 [shape=record,label="{25\:\ 0x0027|0x0027: INVOKE  (r9 I:boolean) = (r6 I:java.io.File A[D('it' java.io.File)]) type: VIRTUAL call: java.io.File.exists():boolean A[MD:():boolean (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x002b|0x002b: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0031 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0031|0x0031: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0032|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0032|LOOP_END\lLOOP:0: B:21:0x0012\-\>B:30:0x0032\l|0x0032: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('accumulator$iv' boolean)]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x002d|0x002d: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('res' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0031 \l}"];
Node_28 [shape=record,label="{28\:\ 0x002f|0x002f: CONST  (r9 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0032|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0035|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0035|RETURN\l|0x0035: RETURN  (r3 I:boolean A[D('accumulator$iv' boolean)])  (LINE:347)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.io.FilesKt__UtilsKt.deleteRecursively((r10 I:java.io.File A[D('$this$deleteRecursively' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x0032 \-\> B:21:0x0012, CROSS_EDGE: B:29:0x0031 \-\> B:30:0x0032, CROSS_EDGE: B:26:0x002b \-\> B:29:0x0031, CROSS_EDGE: B:24:0x0025 \-\> B:27:0x002d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0032: r6 'it' Ljava\/io\/File;\l  0x0020\-0x0032: r7 'res' Z\l  0x0021\-0x0032: r8 '$i$a$\-fold\-FilesKt__UtilsKt$deleteRecursively$1' I\l  0x001c\-0x0033: r5 'element$iv' Ljava\/lang\/Object;\l  0x000b\-0x0035: r0 '$this$fold$iv' Lkotlin\/sequences\/Sequence;\l  0x000c\-0x0035: r1 'initial$iv' Z\l  0x000d\-0x0035: r2 '$i$f$fold' I\l  0x000e\-0x0035: r3 'accumulator$iv' Z\l  \-1 \-0x0035: r10 '$this$deleteRecursively' Ljava\/io\/File;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_33;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_29 -> Node_34;
Node_34 -> Node_30;
Node_30 -> Node_21;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_35;
Node_35 -> Node_30;
Node_33 -> Node_32;
Node_32 -> Node_19;
}

