digraph "CFG forkotlin.io.FilesKt__UtilsKt.getInvariantSeparatorsPath(Ljava\/io\/File;)Ljava\/lang\/String;" {
subgraph cluster_Region_449758491 {
label = "R(2:1|(2:(2:3|4)|(2:6|7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"\<this\>\")\l}"];
subgraph cluster_Region_1974375254 {
label = "R(2:(2:3|4)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_923985890 {
label = "IF [B:11:0x000b] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000b|if (java.io.File.separatorChar != '\/') goto L3\l}"];
subgraph cluster_Region_1241993105 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000d|java.lang.String java.lang.String r3 = r9.getPath()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r3, \"path\")\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.text.StringsKt.replace$default(r3, java.io.File.separatorChar, '\/', false, 4, (java.lang.Object) null)\l}"];
}
}
subgraph cluster_Region_1760410228 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0020|java.lang.String java.lang.String r0 = r9.getPath()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"path\")\l}"];
Node_14 [shape=record,label="{14\:\ 0x0027|RETURN\lORIG_RETURN\l|return r0\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.FilesKt__UtilsKt.getInvariantSeparatorsPath((r9v0 '$this$invariantSeparatorsPath' java.io.File A[D('$this$invariantSeparatorsPath' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0020 \-\> B:14:0x0027\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_13[style=dashed];
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
Node_8 -> Node_10;
}

