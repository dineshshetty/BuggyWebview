digraph "CFG forkotlin.io.FileTreeWalk.maxDepth(I)Lkotlin\/io\/FileTreeWalk;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r9 I:??[int, byte, short, char] A[D('depth' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:12:0x0014  (LINE:248)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: NEW_INSTANCE  (r7 I:kotlin.io.FileTreeWalk) =  kotlin.io.FileTreeWalk  (LINE:250)\l0x0004: IGET  (r1 I:java.io.File) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.start java.io.File \l0x0006: IGET  (r2 I:kotlin.io.FileWalkDirection) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.direction kotlin.io.FileWalkDirection \l0x0008: IGET  (r3 I:kotlin.jvm.functions.Function1\<java.io.File, java.lang.Boolean\>) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.onEnter kotlin.jvm.functions.Function1 \l0x000a: IGET  (r4 I:kotlin.jvm.functions.Function1\<java.io.File, kotlin.Unit\>) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.onLeave kotlin.jvm.functions.Function1 \l0x000c: IGET  (r5 I:kotlin.jvm.functions.Function2\<java.io.File, java.io.IOException, kotlin.Unit\>) = (r8 I:kotlin.io.FileTreeWalk) kotlin.io.FileTreeWalk.onFail kotlin.jvm.functions.Function2 \l0x000e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x000f: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('depth' int)]) \l0x0010: INVOKE  \l  (r0 I:kotlin.io.FileTreeWalk)\l  (r1 I:java.io.File)\l  (r2 I:kotlin.io.FileWalkDirection)\l  (r3 I:kotlin.jvm.functions.Function1)\l  (r4 I:kotlin.jvm.functions.Function1)\l  (r5 I:kotlin.jvm.functions.Function2)\l  (r6 I:int)\l type: DIRECT call: kotlin.io.FileTreeWalk.\<init\>(java.io.File, kotlin.io.FileWalkDirection, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2, int):void A[MD:(java.io.File, kotlin.io.FileWalkDirection, kotlin.jvm.functions.Function1\<? super java.io.File, java.lang.Boolean\>, kotlin.jvm.functions.Function1\<? super java.io.File, kotlin.Unit\>, kotlin.jvm.functions.Function2\<? super java.io.File, ? super java.io.IOException, kotlin.Unit\>, int):void (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0013|RETURN\l|0x0013: RETURN  (r7 I:kotlin.io.FileTreeWalk) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|0x0014: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:249)\l0x0016: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0018: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x001b: CONST_STR  (r2 I:java.lang.String) =  \"depth must be positive, but was \" \l0x001d: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0020: INVOKE  (r1 I:java.lang.StringBuilder), (r9 I:int A[D('depth' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0023: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0025: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0028: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x002c: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|0x002f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final kotlin.io.FileTreeWalk kotlin.io.FileTreeWalk.maxDepth((r8 'this' I:kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, THIS]), (r9 I:int A[D('depth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002f \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002f: r9 'depth' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

