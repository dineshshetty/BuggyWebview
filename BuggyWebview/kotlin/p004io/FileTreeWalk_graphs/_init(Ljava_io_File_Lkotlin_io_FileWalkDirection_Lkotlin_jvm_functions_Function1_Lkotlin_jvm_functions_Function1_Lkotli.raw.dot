digraph "CFG forkotlin.io.FileTreeWalk.\<init\>(Ljava\/io\/File;Lkotlin\/io\/FileWalkDirection;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function2;IILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: ARITH  (r15 I:??[int, boolean]) = (r14 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:37)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0002|0x0002: IF  (r15 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0008 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0004|0x0004: SGET  (r9 I:kotlin.io.FileWalkDirection) =  kotlin.io.FileWalkDirection.TOP_DOWN kotlin.io.FileWalkDirection  (LINE:39)\l0x0006: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: ARITH  (r9 I:??[int, boolean]) = (r14 I:??[int, boolean, short, byte, char]) & (32 ??[int, float, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|0x000b: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0014 \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: CONST  (r13 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char])  (LINE:43)\l0x0010: CONST  (r6 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY]) \l0x0016: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY]) \l0x0017: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY]) \l0x0018: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY]) \l0x0019: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  \l  (r0 I:kotlin.io.FileTreeWalk)\l  (r1 I:java.io.File)\l  (r2 I:kotlin.io.FileWalkDirection)\l  (r3 I:kotlin.jvm.functions.Function1)\l  (r4 I:kotlin.jvm.functions.Function1)\l  (r5 I:kotlin.jvm.functions.Function2)\l  (r6 I:int)\l type: DIRECT call: kotlin.io.FileTreeWalk.\<init\>(java.io.File, kotlin.io.FileWalkDirection, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function2, int):void A[MD:(java.io.File, kotlin.io.FileWalkDirection, kotlin.jvm.functions.Function1\<? super java.io.File, java.lang.Boolean\>, kotlin.jvm.functions.Function1\<? super java.io.File, kotlin.Unit\>, kotlin.jvm.functions.Function2\<? super java.io.File, ? super java.io.IOException, kotlin.Unit\>, int):void (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x001d|RETURN\l|0x001d: RETURN    (LINE:252)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:37)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY])  (LINE:37)\l}"];
MethodNode[shape=record,label="{\/* synthetic *\/ void kotlin.io.FileTreeWalk.\<init\>((r7 'this' I:kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, THIS]), (r8 I:java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.io.FileWalkDirection A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function1 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlin.jvm.functions.Function2 A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:21:0x0014 \-\> B:22:0x0015, CROSS_EDGE: B:17:0x0008 \-\> B:18:0x0009\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_21 -> Node_22;
Node_17 -> Node_18;
}

