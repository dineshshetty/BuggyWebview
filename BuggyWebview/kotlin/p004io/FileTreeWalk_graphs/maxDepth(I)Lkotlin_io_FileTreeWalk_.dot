digraph "CFG forkotlin.io.FileTreeWalk.maxDepth(I)Lkotlin\/io\/FileTreeWalk;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|if (r9 \<= 0) goto L5\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002}"];
Node_11 [shape=record,label="{11\:\ 0x0013|RETURN\l|return new kotlin.p004io.FileTreeWalk(r8.start, r8.direction, r8.onEnter, r8.onLeave, r8.onFail, r9)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0014|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"depth must be positive, but was \")\lr1.append(r9)\lr1.append('.')\l}"];
Node_13 [shape=record,label="{13\:\ 0x002f|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public final kotlin.io.FileTreeWalk kotlin.io.FileTreeWalk.maxDepth((r8v0 'this' kotlin.io.FileTreeWalk A[IMMUTABLE_TYPE, THIS]), (r9v0 'depth' int A[D('depth' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x002f \-\> B:8:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_12;
Node_10 -> Node_11;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

