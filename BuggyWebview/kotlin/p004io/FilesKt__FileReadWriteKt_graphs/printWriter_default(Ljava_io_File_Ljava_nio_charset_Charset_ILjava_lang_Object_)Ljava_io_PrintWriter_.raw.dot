digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.printWriter$default(Ljava\/io\/File;Ljava\/nio\/charset\/Charset;ILjava\/lang\/Object;)Ljava\/io\/PrintWriter;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: ARITH  (r4 I:??[int, boolean]) = (r4 I:??[int, boolean, short, byte, char]) & (1 ??[boolean, int, float, short, byte, char])  (LINE:53)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0006 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: SGET  (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)]) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: CONST_STR  (r4 I:java.lang.String) =  \"\<this\>\" \l0x0008: INVOKE  (r2 I:java.lang.Object A[D('$this$printWriter_u24default' java.io.File)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: CONST_STR  (r4 I:java.lang.String) =  \"charset\" \l0x000d: INVOKE  (r3 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0010: NEW_INSTANCE  (r4 I:java.io.PrintWriter) =  java.io.PrintWriter  (LINE:54)\l0x0012: CONST  (r5 I:??[int, float, short, byte, char]) = (8192(0x2000, float:1.148E\-41) ??[int, float, short, byte, char]) \l0x0014: NEW_INSTANCE  (r0 I:java.io.OutputStreamWriter) =  java.io.OutputStreamWriter \l0x0016: NEW_INSTANCE  (r1 I:java.io.FileOutputStream) =  java.io.FileOutputStream \l0x0018: INVOKE  (r1 I:java.io.FileOutputStream), (r2 I:java.io.File A[D('$this$printWriter_u24default' java.io.File)]) type: DIRECT call: java.io.FileOutputStream.\<init\>(java.io.File):void A[MD:(java.io.File):void throws java.io.FileNotFoundException (c)]\l0x001b: CHECK_CAST (r1 I:java.io.OutputStream) = (java.io.OutputStream) (r1 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  \l  (r0 I:java.io.OutputStreamWriter)\l  (r1 I:java.io.OutputStream)\l  (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: DIRECT call: java.io.OutputStreamWriter.\<init\>(java.io.OutputStream, java.nio.charset.Charset):void A[MD:(java.io.OutputStream, java.nio.charset.Charset):void (c)]\l0x0020: CHECK_CAST (r0 I:java.io.Writer) = (java.io.Writer) (r0 I:??[OBJECT, ARRAY]) \l0x0022: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.io.BufferedWriter \l}"];
Node_17 [shape=record,label="{17\:\ 0x0024|0x0024: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0029 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|0x0026: CHECK_CAST (r0 I:java.io.BufferedWriter) = (java.io.BufferedWriter) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x002f|0x002f: CHECK_CAST (r0 I:java.io.Writer) = (java.io.Writer) (r0 I:??[OBJECT, ARRAY]) \l0x0031: INVOKE  (r4 I:java.io.PrintWriter), (r0 I:java.io.Writer) type: DIRECT call: java.io.PrintWriter.\<init\>(java.io.Writer):void A[MD:(java.io.Writer):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0034|RETURN\l|0x0034: RETURN  (r4 I:java.io.PrintWriter) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0029|0x0029: NEW_INSTANCE  (r1 I:java.io.BufferedWriter) =  java.io.BufferedWriter \l0x002b: INVOKE  (r1 I:java.io.BufferedWriter), (r0 I:java.io.Writer), (r5 I:int) type: DIRECT call: java.io.BufferedWriter.\<init\>(java.io.Writer, int):void A[MD:(java.io.Writer, int):void (c)]\l0x002e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.io.PrintWriter kotlin.io.FilesKt__FileReadWriteKt.printWriter$default((r2 I:java.io.File A[D('$this$printWriter_u24default' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:19:0x0029 \-\> B:20:0x002f, CROSS_EDGE: B:14:0x0002 \-\> B:16:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0034: r2 '$this$printWriter_u24default' Ljava\/io\/File;\l  \-1 \-0x0034: r3 'charset' Ljava\/nio\/charset\/Charset;\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
}

