digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.readText(Ljava\/io\/File;Ljava\/nio\/charset\/Charset;)Ljava\/lang\/String;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$readText' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: NEW_INSTANCE  (r0 I:java.io.InputStreamReader) =  java.io.InputStreamReader  (LINE:125)\l0x000c: NEW_INSTANCE  (r1 I:java.io.FileInputStream) =  java.io.FileInputStream \l0x000e: INVOKE  (r1 I:java.io.FileInputStream), (r4 I:java.io.File A[D('$this$readText' java.io.File)]) type: DIRECT call: java.io.FileInputStream.\<init\>(java.io.File):void A[MD:(java.io.File):void throws java.io.FileNotFoundException (c)]\l0x0011: CHECK_CAST (r1 I:java.io.InputStream) = (java.io.InputStream) (r1 I:??[OBJECT, ARRAY]) \l0x0013: INVOKE  \l  (r0 I:java.io.InputStreamReader)\l  (r1 I:java.io.InputStream)\l  (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: DIRECT call: java.io.InputStreamReader.\<init\>(java.io.InputStream, java.nio.charset.Charset):void A[MD:(java.io.InputStream, java.nio.charset.Charset):void (c)]\l0x0016: CHECK_CAST (r0 I:java.io.Closeable) = (java.io.Closeable) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0028, blocks: (B:18:0x0018), top: B:26:0x0018 \}\lCatch: all \-\> 0x0028\l|0x0018: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x0019: CHECK_CAST (r1 I:java.io.InputStreamReader) = (java.io.InputStreamReader) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0028]\l0x001b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:234)\l0x001c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('it' java.io.InputStreamReader)])  (LINE:125)\l0x001d: CHECK_CAST (r3 I:java.io.Reader) = (java.io.Reader) (r3 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0028]\l0x001f: INVOKE  (r3 I:java.lang.String) = (r3 I:java.io.Reader) type: STATIC call: kotlin.io.TextStreamsKt.readText(java.io.Reader):java.lang.String A[Catch: all \-\> 0x0028, MD:(java.io.Reader):java.lang.String (m), TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0023|0x0023: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' java.io.InputStreamReader)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: INVOKE  (r0 I:java.io.Closeable), (r1 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0027|RETURN\l|0x0027: RETURN  (r3 I:java.lang.String) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x0028|ExcHandler: all \-\> 0x0028\l|0x0028: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0028]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0029|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x002a, blocks: (B:22:0x0029), top: B:28:0x0029 \}\lCatch: all \-\> 0x002a\l|0x0029: THROW  (r1 I:java.lang.Throwable) A[Catch: all \-\> 0x002a, TRY_ENTER, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x002a|ExcHandler: all \-\> 0x002a\l|0x002a: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x002a]\l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|0x002b: INVOKE  (r0 I:java.io.Closeable), (r1 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x002e|0x002e: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.io.FilesKt__FileReadWriteKt.readText((r4 I:java.io.File A[D('$this$readText' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0029 \-\> B:16:?, CROSS_EDGE: B:25:0x002e \-\> B:16:?, CROSS_EDGE: B:28:0x0029 \-\> B:23:0x002a, CROSS_EDGE: B:26:0x0018 \-\> B:21:0x0028\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x0023: r1 'it' Ljava\/io\/InputStreamReader;\l  0x001c\-0x0023: r2 '$i$a$\-use\-FilesKt__FileReadWriteKt$readText$1' I\l  \-1 \-0x0029: r4 '$this$readText' Ljava\/io\/File;\l  \-1 \-0x0029: r5 'charset' Ljava\/nio\/charset\/Charset;\l  0x002a\-0x002e: r4 '$this$readText' Ljava\/io\/File;\l  0x002a\-0x002e: r5 'charset' Ljava\/nio\/charset\/Charset;\lTryCatch #0 \{all \-\> 0x0028, blocks: (B:18:0x0018), top: B:26:0x0018 \}, TryCatch #1 \{all \-\> 0x002a, blocks: (B:22:0x0029), top: B:28:0x0029 \}\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_26;
Node_26 -> Node_18;
Node_26 -> Node_21;
Node_18 -> Node_19;
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_27 -> Node_21;
Node_21 -> Node_28;
Node_28 -> Node_22;
Node_28 -> Node_23;
Node_22 -> Node_16;
Node_22 -> Node_29;
Node_29 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_16;
}

