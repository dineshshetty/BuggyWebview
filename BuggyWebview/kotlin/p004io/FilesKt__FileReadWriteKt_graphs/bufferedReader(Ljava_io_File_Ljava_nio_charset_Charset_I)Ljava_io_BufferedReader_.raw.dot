digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.bufferedReader(Ljava\/io\/File;Ljava\/nio\/charset\/Charset;I)Ljava\/io\/BufferedReader;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$bufferedReader' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: NEW_INSTANCE  (r0 I:java.io.InputStreamReader) =  java.io.InputStreamReader  (LINE:31)\l0x000c: NEW_INSTANCE  (r1 I:java.io.FileInputStream) =  java.io.FileInputStream \l0x000e: INVOKE  (r1 I:java.io.FileInputStream), (r2 I:java.io.File A[D('$this$bufferedReader' java.io.File)]) type: DIRECT call: java.io.FileInputStream.\<init\>(java.io.File):void A[MD:(java.io.File):void throws java.io.FileNotFoundException (c)]\l0x0011: CHECK_CAST (r1 I:java.io.InputStream) = (java.io.InputStream) (r1 I:??[OBJECT, ARRAY]) \l0x0013: INVOKE  \l  (r0 I:java.io.InputStreamReader)\l  (r1 I:java.io.InputStream)\l  (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: DIRECT call: java.io.InputStreamReader.\<init\>(java.io.InputStream, java.nio.charset.Charset):void A[MD:(java.io.InputStream, java.nio.charset.Charset):void (c)]\l0x0016: CHECK_CAST (r0 I:java.io.Reader) = (java.io.Reader) (r0 I:??[OBJECT, ARRAY]) \l0x0018: INSTANCE_OF  (r1 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.io.BufferedReader \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|0x001a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x001f \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|0x001c: CHECK_CAST (r0 I:java.io.BufferedReader) = (java.io.BufferedReader) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0025: RETURN  (r0 I:java.io.BufferedReader) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x001f|0x001f: NEW_INSTANCE  (r1 I:java.io.BufferedReader) =  java.io.BufferedReader \l0x0021: INVOKE  (r1 I:java.io.BufferedReader), (r0 I:java.io.Reader), (r4 I:int A[D('bufferSize' int)]) type: DIRECT call: java.io.BufferedReader.\<init\>(java.io.Reader, int):void A[MD:(java.io.Reader, int):void (c)]\l0x0024: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0025|RETURN\lORIG_RETURN\l|0x0025: RETURN  (r0 I:java.io.BufferedReader) \l}"];
MethodNode[shape=record,label="{private static final java.io.BufferedReader kotlin.io.FilesKt__FileReadWriteKt.bufferedReader((r2 I:java.io.File A[D('$this$bufferedReader' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('bufferSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x001f \-\> B:14:0x0025\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r2 '$this$bufferedReader' Ljava\/io\/File;\l  \-1 \-0x0025: r3 'charset' Ljava\/nio\/charset\/Charset;\l  \-1 \-0x0025: r4 'bufferSize' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

