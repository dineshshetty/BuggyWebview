digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.forEachBlock(Ljava\/io\/File;ILkotlin\/jvm\/functions\/Function2;)V" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$forEachBlock' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"action\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, short, byte, char]) = (512(0x200, float:7.17E\-43) ??[int, float, short, byte, char])  (LINE:165)\l0x000c: INVOKE  (r0 I:int) = (r7 I:int A[D('blockSize' int)]), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0010: NEW_ARRAY  (r0 I:byte[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0012: NEW_INSTANCE  (r1 I:java.io.FileInputStream) =  java.io.FileInputStream \l0x0014: INVOKE  (r1 I:java.io.FileInputStream), (r6 I:java.io.File A[D('$this$forEachBlock' java.io.File)]) type: DIRECT call: java.io.FileInputStream.\<init\>(java.io.File):void A[MD:(java.io.File):void throws java.io.FileNotFoundException (c)] (LINE:167)\l0x0017: CHECK_CAST (r1 I:java.io.Closeable) = (java.io.Closeable) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0019|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0034, blocks: (B:24:0x0019, B:25:0x001d, B:27:0x0025, B:30:0x002c), top: B:37:0x0019 \}\lCatch: all \-\> 0x0034\l|0x0019: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x001a: CHECK_CAST (r2 I:java.io.FileInputStream) = (java.io.FileInputStream) (r2 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0034]\l0x001c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x001d|LOOP_START\lTryCatch #0 \{all \-\> 0x0034, blocks: (B:24:0x0019, B:25:0x001d, B:27:0x0025, B:30:0x002c), top: B:37:0x0019 \}\lLOOP:0: B:25:0x001d\-\>B:30:0x002c\lCatch: all \-\> 0x0034\l|0x001d: INVOKE  (r4 I:int) = (r2 I:java.io.FileInputStream A[D('input' java.io.FileInputStream)]), (r0 I:byte[] A[D('arr' byte[])]) type: VIRTUAL call: java.io.FileInputStream.read(byte[]):int A[Catch: all \-\> 0x0034, MD:(byte[]):int throws java.io.IOException (c)] (LINE:169)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0021|0x0021: IF  (r4 I:??[int, byte, short, char] A[D('size' int)]) \> (0 ??[int, byte, short, char])  \-\> B:30:0x002c  (LINE:170)\l}"];
Node_30 [shape=record,label="{30\:\ 0x002c|TRY_ENTER\lTRY_LEAVE\lLOOP_END\lTryCatch #0 \{all \-\> 0x0034, blocks: (B:24:0x0019, B:25:0x001d, B:27:0x0025, B:30:0x002c), top: B:37:0x0019 \}\lLOOP:0: B:25:0x001d\-\>B:30:0x002c\lCatch: all \-\> 0x0034\l|0x002c: INVOKE  (r5 I:java.lang.Integer) = (r4 I:int A[D('size' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[Catch: all \-\> 0x0034, MD:(int):java.lang.Integer (c), TRY_ENTER] (LINE:173)\l0x0030: INVOKE  \l  (r8 I:kotlin.jvm.functions.Function2 A[D('action' kotlin.jvm.functions.Function2)])\l  (r0 I:java.lang.Object A[D('arr' byte[])])\l  (r5 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0034, MD:(P1, P2):R (m), TRY_LEAVE]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0025|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0025|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0034, blocks: (B:24:0x0019, B:25:0x001d, B:27:0x0025, B:30:0x002c), top: B:37:0x0019 \}\lCatch: all \-\> 0x0034\l|0x0025: SGET  (r2 I:kotlin.Unit A[D('input' java.io.FileInputStream)]) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x0034, TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0027|0x0027: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:167)\l0x0028: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|RETURN\l|0x002b: RETURN    (LINE:177)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_32 [shape=record,label="{32\:\ 0x0034|ExcHandler: all \-\> 0x0034\l|0x0034: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0034] (LINE:167)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0035|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_33 [shape=record,label="{33\:\ 0x0035|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0036, blocks: (B:33:0x0035), top: B:39:0x0035 \}\lCatch: all \-\> 0x0036\l|0x0035: THROW  (r2 I:java.lang.Throwable) A[Catch: all \-\> 0x0036, TRY_ENTER, TRY_LEAVE]\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_34 [shape=record,label="{34\:\ 0x0036|ExcHandler: all \-\> 0x0036\l|0x0036: MOVE_EXCEPTION  (r3 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0036]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0037|0x0037: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x003a|0x003a: THROW  (r3 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final void kotlin.io.FilesKt__FileReadWriteKt.forEachBlock((r6 I:java.io.File A[D('$this$forEachBlock' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('blockSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function2\<? super byte[], ? super java.lang.Integer, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0035 \-\> B:22:?, CROSS_EDGE: B:36:0x003a \-\> B:22:?, CROSS_EDGE: B:39:0x0035 \-\> B:34:0x0036, BACK_EDGE: B:30:0x002c \-\> B:25:0x001d, CROSS_EDGE: B:37:0x0019 \-\> B:32:0x0034\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0034, blocks: (B:24:0x0019, B:25:0x001d, B:27:0x0025, B:30:0x002c), top: B:37:0x0019 \}, TryCatch #1 \{all \-\> 0x0036, blocks: (B:33:0x0035), top: B:39:0x0035 \}\lSIGNATURE: (Ljava\/io\/File;ILkotlin\/jvm\/functions\/Function2\<\-[B\-Ljava\/lang\/Integer;Lkotlin\/Unit;\>;)V\lDebug Info:\l  0x0021\-0x0024: r4 'size' I\l  0x001c\-0x0025: r2 'input' Ljava\/io\/FileInputStream;\l  0x001d\-0x0025: r3 '$i$a$\-use\-FilesKt__FileReadWriteKt$forEachBlock$1' I\l  0x002c\-0x0034: r2 'input' Ljava\/io\/FileInputStream;\l  0x002c\-0x0034: r3 '$i$a$\-use\-FilesKt__FileReadWriteKt$forEachBlock$1' I\l  0x002c\-0x0034: r4 'size' I\l  0x0012\-0x0035: r0 'arr' [B\l  \-1 \-0x0035: r6 '$this$forEachBlock' Ljava\/io\/File;\l  \-1 \-0x0035: r7 'blockSize' I\l  \-1 \-0x0035: r8 'action' Lkotlin\/jvm\/functions\/Function2;\l  0x0036\-0x003a: r0 'arr' [B\l  0x0036\-0x003a: r6 '$this$forEachBlock' Ljava\/io\/File;\l  0x0036\-0x003a: r7 'blockSize' I\l  0x0036\-0x003a: r8 'action' Lkotlin\/jvm\/functions\/Function2;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_37;
Node_37 -> Node_24;
Node_37 -> Node_32;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_30;
Node_26 -> Node_41[style=dashed];
Node_30 -> Node_25;
Node_41 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_38;
Node_28 -> Node_29;
Node_29 -> Node_22;
Node_38 -> Node_32;
Node_32 -> Node_39;
Node_39 -> Node_33;
Node_39 -> Node_34;
Node_33 -> Node_22;
Node_33 -> Node_40;
Node_40 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_22;
}

