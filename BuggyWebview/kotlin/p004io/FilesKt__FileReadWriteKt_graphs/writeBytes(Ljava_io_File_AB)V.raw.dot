digraph "CFG forkotlin.io.FilesKt__FileReadWriteKt.writeBytes(Ljava\/io\/File;[B)V" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$writeBytes' java.io.File)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"array\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('array' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: NEW_INSTANCE  (r0 I:java.io.FileOutputStream) =  java.io.FileOutputStream  (LINE:108)\l0x000c: INVOKE  (r0 I:java.io.FileOutputStream), (r3 I:java.io.File A[D('$this$writeBytes' java.io.File)]) type: DIRECT call: java.io.FileOutputStream.\<init\>(java.io.File):void A[MD:(java.io.File):void throws java.io.FileNotFoundException (c)]\l0x000f: CHECK_CAST (r0 I:java.io.Closeable) = (java.io.Closeable) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0011|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x001f, blocks: (B:18:0x0011), top: B:28:0x0011 \}\lCatch: all \-\> 0x001f\l|0x0011: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x0012: CHECK_CAST (r1 I:java.io.FileOutputStream) = (java.io.FileOutputStream) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x001f]\l0x0014: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:234)\l0x0015: INVOKE  (r1 I:java.io.FileOutputStream A[D('it' java.io.FileOutputStream)]), (r4 I:byte[] A[D('array' byte[])]) type: VIRTUAL call: java.io.FileOutputStream.write(byte[]):void A[Catch: all \-\> 0x001f, MD:(byte[]):void throws java.io.IOException (c)] (LINE:108)\l0x0018: SGET  (r1 I:kotlin.Unit A[D('it' java.io.FileOutputStream)]) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x001f, TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|0x001a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: INVOKE  (r0 I:java.io.Closeable), (r1 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001e|RETURN\l|0x001e: RETURN   \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x001f|ExcHandler: all \-\> 0x001f\l|0x001f: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x001f]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0021, blocks: (B:22:0x0020), top: B:26:0x0020 \}\lCatch: all \-\> 0x0021\l|0x0020: THROW  (r1 I:java.lang.Throwable) A[Catch: all \-\> 0x0021, TRY_ENTER, TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|ExcHandler: all \-\> 0x0021\l|0x0021: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0021]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|0x0022: INVOKE  (r0 I:java.io.Closeable), (r1 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|0x0025: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final void kotlin.io.FilesKt__FileReadWriteKt.writeBytes((r3 I:java.io.File A[D('$this$writeBytes' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x0020 \-\> B:16:?, CROSS_EDGE: B:25:0x0025 \-\> B:16:?, CROSS_EDGE: B:26:0x0020 \-\> B:23:0x0021, CROSS_EDGE: B:28:0x0011 \-\> B:21:0x001f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x0018: r1 'it' Ljava\/io\/FileOutputStream;\l  0x0015\-0x0018: r2 '$i$a$\-use\-FilesKt__FileReadWriteKt$writeBytes$1' I\l  \-1 \-0x0020: r3 '$this$writeBytes' Ljava\/io\/File;\l  \-1 \-0x0020: r4 'array' [B\l  0x0021\-0x0025: r3 '$this$writeBytes' Ljava\/io\/File;\l  0x0021\-0x0025: r4 'array' [B\lTryCatch #0 \{all \-\> 0x0021, blocks: (B:22:0x0020), top: B:26:0x0020 \}, TryCatch #1 \{all \-\> 0x001f, blocks: (B:18:0x0011), top: B:28:0x0011 \}\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_28;
Node_28 -> Node_18;
Node_28 -> Node_21;
Node_18 -> Node_19;
Node_18 -> Node_29;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_29 -> Node_21;
Node_21 -> Node_26;
Node_26 -> Node_22;
Node_26 -> Node_23;
Node_22 -> Node_16;
Node_22 -> Node_27;
Node_27 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_16;
}

