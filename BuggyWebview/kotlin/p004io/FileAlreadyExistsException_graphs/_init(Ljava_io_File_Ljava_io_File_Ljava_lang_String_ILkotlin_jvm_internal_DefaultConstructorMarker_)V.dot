digraph "CFG forkotlin.io.FileAlreadyExistsException.\<init\>(Ljava\/io\/File;Ljava\/io\/File;Ljava\/lang\/String;ILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000}"];
Node_13 [shape=record,label="{13\:\ 0x0003|if ((r5 & 2) == 0) goto L4\l}"];
Node_14 [shape=record,label="{14\:\ 0x0005|r3 = null\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|PHI: r3 \l  PHI: (r3v1 java.io.File) = (r3v0 java.io.File), (r3v2 java.io.File) binds: [B:13:0x0003, B:14:0x0005] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|if ((r5 & 4) == 0) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|r4 = null\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|PHI: r4 \l  PHI: (r4v1 java.lang.String) = (r4v0 java.lang.String), (r4v2 java.lang.String) binds: [B:16:0x0008, B:17:0x000a] A[DONT_GENERATE, DONT_INLINE]\l|this(r2, r3, r4)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|RETURN\l|return\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* synthetic *\/ void kotlin.io.FileAlreadyExistsException.\<init\>((r1v0 'this' kotlin.io.FileAlreadyExistsException A[IMMUTABLE_TYPE, THIS]), (r2v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.io.File A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:16:0x0008 \-\> B:18:0x000b, CROSS_EDGE: B:13:0x0003 \-\> B:15:0x0006\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

