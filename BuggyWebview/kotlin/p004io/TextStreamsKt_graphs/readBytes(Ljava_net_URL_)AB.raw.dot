digraph "CFG forkotlin.io.TextStreamsKt.readBytes(Ljava\/net\/URL;)[B" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$readBytes' java.net.URL)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.io.InputStream) = (r4 I:java.net.URL A[D('$this$readBytes' java.net.URL)]) type: VIRTUAL call: java.net.URL.openStream():java.io.InputStream A[MD:():java.io.InputStream throws java.io.IOException (c)] (LINE:150)\l0x0009: CHECK_CAST (r0 I:java.io.Closeable) = (java.io.Closeable) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000b|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:18:0x000b), top: B:26:0x000b \}\lCatch: all \-\> 0x001d\l|0x000b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x000c: CHECK_CAST (r1 I:java.io.InputStream) = (java.io.InputStream) (r1 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x001d]\l0x000e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:157)\l0x000f: CONST_STR  (r3 I:java.lang.String) =  \"it\"  (LINE:150)\l0x0011: INVOKE  (r1 I:java.lang.Object A[D('it' java.io.InputStream)]), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[Catch: all \-\> 0x001d, MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: INVOKE  (r3 I:byte[]) = (r1 I:java.io.InputStream A[D('it' java.io.InputStream)]) type: STATIC call: kotlin.io.ByteStreamsKt.readBytes(java.io.InputStream):byte[] A[Catch: all \-\> 0x001d, MD:(java.io.InputStream):byte[] (m), TRY_LEAVE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|0x0018: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' java.io.InputStream)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: INVOKE  (r0 I:java.io.Closeable), (r1 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|RETURN\l|0x001c: RETURN  (r3 I:byte[]) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_21 [shape=record,label="{21\:\ 0x001d|ExcHandler: all \-\> 0x001d\l|0x001d: MOVE_EXCEPTION  (r1 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x001d]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_22 [shape=record,label="{22\:\ 0x001e|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x001f, blocks: (B:22:0x001e), top: B:28:0x001e \}\lCatch: all \-\> 0x001f\l|0x001e: THROW  (r1 I:java.lang.Throwable) A[Catch: all \-\> 0x001f, TRY_ENTER, TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_23 [shape=record,label="{23\:\ 0x001f|ExcHandler: all \-\> 0x001f\l|0x001f: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x001f]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0020|0x0020: INVOKE  (r0 I:java.io.Closeable), (r1 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0023|0x0023: THROW  (r2 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final byte[] kotlin.io.TextStreamsKt.readBytes((r4 I:java.net.URL A[D('$this$readBytes' java.net.URL), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:22:0x001e \-\> B:16:?, CROSS_EDGE: B:25:0x0023 \-\> B:16:?, CROSS_EDGE: B:28:0x001e \-\> B:23:0x001f, CROSS_EDGE: B:26:0x000b \-\> B:21:0x001d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x0018: r1 'it' Ljava\/io\/InputStream;\l  0x000f\-0x0018: r2 '$i$a$\-use\-TextStreamsKt$readBytes$1' I\l  \-1 \-0x001e: r4 '$this$readBytes' Ljava\/net\/URL;\l  0x001f\-0x0023: r4 '$this$readBytes' Ljava\/net\/URL;\lTryCatch #0 \{all \-\> 0x001d, blocks: (B:18:0x000b), top: B:26:0x000b \}, TryCatch #1 \{all \-\> 0x001f, blocks: (B:22:0x001e), top: B:28:0x001e \}\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_26;
Node_26 -> Node_18;
Node_26 -> Node_21;
Node_18 -> Node_19;
Node_18 -> Node_27;
Node_19 -> Node_20;
Node_20 -> Node_16;
Node_27 -> Node_21;
Node_21 -> Node_28;
Node_28 -> Node_22;
Node_28 -> Node_23;
Node_22 -> Node_16;
Node_22 -> Node_29;
Node_29 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_16;
}

