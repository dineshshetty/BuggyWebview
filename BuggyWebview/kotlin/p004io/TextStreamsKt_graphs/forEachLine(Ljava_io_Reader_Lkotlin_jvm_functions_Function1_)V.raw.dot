digraph "CFG forkotlin.io.TextStreamsKt.forEachLine(Ljava\/io\/Reader;Lkotlin\/jvm\/functions\/Function1;)V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r12 I:java.lang.Object A[D('$this$forEachLine' java.io.Reader)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"action\" \l0x0007: INVOKE  (r13 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('$this$forEachLine' java.io.Reader)])  (LINE:33)\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('$this$useLines$iv' java.io.Reader)]) java.io.BufferedReader  (LINE:153)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0014 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0010|0x0010: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$useLines$iv' java.io.Reader)]) \l0x0011: CHECK_CAST (r2 I:java.io.BufferedReader) = (java.io.BufferedReader) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x001b|0x001b: CHECK_CAST (r2 I:java.io.Closeable) = (java.io.Closeable) (r2 I:??[OBJECT, ARRAY]) \l0x001d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x001e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|TRY_ENTER\lTryCatch #0 \{all \-\> 0x0043, blocks: (B:31:0x001e, B:32:0x002d, B:34:0x0033, B:35:0x003b), top: B:43:0x001e \}\lCatch: all \-\> 0x0043\l|0x001e: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x001f: CHECK_CAST (r4 I:java.io.BufferedReader) = (java.io.BufferedReader) (r4 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0043]\l0x0021: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:154)\l0x0022: INVOKE  (r6 I:kotlin.sequences.Sequence) = (r4 I:java.io.BufferedReader A[D('it$iv' java.io.BufferedReader)]) type: STATIC call: kotlin.io.TextStreamsKt.lineSequence(java.io.BufferedReader):kotlin.sequences.Sequence A[Catch: all \-\> 0x0043, MD:(java.io.BufferedReader):kotlin.sequences.Sequence\<java.lang.String\> (m)] (LINE:153)\l0x0026: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('it' kotlin.sequences.Sequence)])  (LINE:33)\l0x0028: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0029: INVOKE  (r10 I:java.util.Iterator) = (r8 I:kotlin.sequences.Sequence A[D('$this$forEach$iv' kotlin.sequences.Sequence)]) type: INTERFACE call: kotlin.sequences.Sequence.iterator():java.util.Iterator A[Catch: all \-\> 0x0043, MD:():java.util.Iterator\<T\> (m)] (LINE:155)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002d|LOOP_START\lTryCatch #0 \{all \-\> 0x0043, blocks: (B:31:0x001e, B:32:0x002d, B:34:0x0033, B:35:0x003b), top: B:43:0x001e \}\lLOOP:0: B:32:0x002d\-\>B:34:0x0033\lCatch: all \-\> 0x0043\l|0x002d: INVOKE  (r11 I:boolean) = (r10 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[Catch: all \-\> 0x0043, MD:():boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0031|0x0031: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x003b \l}"];
Node_34 [shape=record,label="{34\:\ 0x0033|LOOP_END\lTryCatch #0 \{all \-\> 0x0043, blocks: (B:31:0x001e, B:32:0x002d, B:34:0x0033, B:35:0x003b), top: B:43:0x001e \}\lLOOP:0: B:32:0x002d\-\>B:34:0x0033\lCatch: all \-\> 0x0043\l|0x0033: INVOKE  (r11 I:java.lang.Object) = (r10 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[Catch: all \-\> 0x0043, MD:():E (c)]\l0x0037: INVOKE  \l  (r13 I:kotlin.jvm.functions.Function1 A[D('action' kotlin.jvm.functions.Function1)])\l  (r11 I:java.lang.Object A[D('element$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0043, MD:(P1):R (m)]\l0x003a: GOTO  \-\> 0x002d \l}"];
Node_47 [shape=record,label="{47\:\ 0x003b|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x003b|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x0043, blocks: (B:31:0x001e, B:32:0x002d, B:34:0x0033, B:35:0x003b), top: B:43:0x001e \}\lCatch: all \-\> 0x0043\l|0x003d: SGET  (r6 I:kotlin.Unit A[D('it' kotlin.sequences.Sequence)]) =  kotlin.Unit.INSTANCE kotlin.Unit A[Catch: all \-\> 0x0043, TRY_LEAVE]\l}"];
Node_36 [shape=record,label="{36\:\ 0x003f|0x003f: INVOKE  (r2 I:java.io.Closeable), (r3 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)] (LINE:153)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0042|RETURN\l|0x0042: RETURN    (LINE:33)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_38 [shape=record,label="{38\:\ 0x0043|ExcHandler: all \-\> 0x0043\l|0x0043: MOVE_EXCEPTION  (r3 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0043] (LINE:153)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0044|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_39 [shape=record,label="{39\:\ 0x0044|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0045, blocks: (B:39:0x0044), top: B:45:0x0044 \}\lCatch: all \-\> 0x0045\l|0x0044: THROW  (r3 I:java.lang.Throwable) A[Catch: all \-\> 0x0045, TRY_ENTER, TRY_LEAVE]\l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_40 [shape=record,label="{40\:\ 0x0045|ExcHandler: all \-\> 0x0045\l|0x0045: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0045]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0046|0x0046: INVOKE  (r2 I:java.io.Closeable), (r3 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0049|0x0049: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|0x0014: NEW_INSTANCE  (r2 I:java.io.BufferedReader) =  java.io.BufferedReader \l0x0016: CONST  (r3 I:??[int, float, short, byte, char]) = (8192(0x2000, float:1.148E\-41) ??[int, float, short, byte, char]) \l0x0018: INVOKE  (r2 I:java.io.BufferedReader), (r0 I:java.io.Reader A[D('$this$useLines$iv' java.io.Reader)]), (r3 I:int) type: DIRECT call: java.io.BufferedReader.\<init\>(java.io.Reader, int):void A[MD:(java.io.Reader, int):void (c)]\l}"];
MethodNode[shape=record,label="{public static final void kotlin.io.TextStreamsKt.forEachLine((r12 I:java.io.Reader A[D('$this$forEachLine' java.io.Reader), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.jvm.functions.Function1\<? super java.lang.String, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | BACK_EDGE: B:34:0x0033 \-\> B:32:0x002d, CROSS_EDGE: B:39:0x0044 \-\> B:25:?, CROSS_EDGE: B:42:0x0049 \-\> B:25:?, CROSS_EDGE: B:45:0x0044 \-\> B:40:0x0045, CROSS_EDGE: B:43:0x001e \-\> B:38:0x0043, CROSS_EDGE: B:29:0x0014 \-\> B:30:0x001b\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0043, blocks: (B:31:0x001e, B:32:0x002d, B:34:0x0033, B:35:0x003b), top: B:43:0x001e \}, TryCatch #1 \{all \-\> 0x0045, blocks: (B:39:0x0044), top: B:45:0x0044 \}\lSIGNATURE: (Ljava\/io\/Reader;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/String;Lkotlin\/Unit;\>;)V\lDebug Info:\l  0x0037\-0x003b: r11 'element$iv' Ljava\/lang\/Object;\l  0x0028\-0x003c: r8 '$this$forEach$iv' Lkotlin\/sequences\/Sequence;\l  0x0029\-0x003c: r9 '$i$f$forEach' I\l  0x0026\-0x003d: r6 'it' Lkotlin\/sequences\/Sequence;\l  0x0027\-0x003d: r7 '$i$a$\-useLines\-TextStreamsKt$forEachLine$1' I\l  0x0021\-0x003f: r4 'it$iv' Ljava\/io\/BufferedReader;\l  0x0022\-0x003f: r5 '$i$a$\-use\-TextStreamsKt$useLines$1$iv' I\l  0x000b\-0x0042: r0 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x000c\-0x0042: r1 '$i$f$useLines' I\l  0x0043\-0x0044: r0 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x0043\-0x0044: r1 '$i$f$useLines' I\l  \-1 \-0x0044: r12 '$this$forEachLine' Ljava\/io\/Reader;\l  \-1 \-0x0044: r13 'action' Lkotlin\/jvm\/functions\/Function1;\l  0x0045\-0x0049: r0 '$this$useLines$iv' Ljava\/io\/Reader;\l  0x0045\-0x0049: r1 '$i$f$useLines' I\l  0x0045\-0x0049: r12 '$this$forEachLine' Ljava\/io\/Reader;\l  0x0045\-0x0049: r13 'action' Lkotlin\/jvm\/functions\/Function1;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [153=4]\}\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_30 -> Node_43;
Node_43 -> Node_31;
Node_43 -> Node_38;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_47;
Node_34 -> Node_32;
Node_47 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_44;
Node_36 -> Node_37;
Node_37 -> Node_25;
Node_44 -> Node_38;
Node_38 -> Node_45;
Node_45 -> Node_39;
Node_45 -> Node_40;
Node_39 -> Node_25;
Node_39 -> Node_46;
Node_46 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_25;
Node_29 -> Node_30;
}

