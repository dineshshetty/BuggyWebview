digraph "CFG forkotlin.io.TextStreamsKt.useLines(Ljava\/io\/Reader;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$useLines' java.io.Reader)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"block\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('block' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INSTANCE_OF  (r1 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('$this$useLines' java.io.Reader)]) java.io.BufferedReader  (LINE:53)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0013 \l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$useLines' java.io.Reader)]) \l0x0010: CHECK_CAST (r1 I:java.io.BufferedReader) = (java.io.BufferedReader) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|0x001a: CHECK_CAST (r1 I:java.io.Closeable) = (java.io.Closeable) (r1 I:??[OBJECT, ARRAY]) \l0x001c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x001e|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_26 [shape=record,label="{26\:\ 0x001e|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x0034, blocks: (B:26:0x001e), top: B:34:0x001e \}\lCatch: all \-\> 0x0034\l|0x001e: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) A[TRY_ENTER]\l0x001f: CHECK_CAST (r4 I:java.io.BufferedReader) = (java.io.BufferedReader) (r4 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x0034]\l0x0021: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:157)\l0x0022: INVOKE  (r6 I:kotlin.sequences.Sequence) = (r4 I:java.io.BufferedReader A[D('it' java.io.BufferedReader)]) type: STATIC call: kotlin.io.TextStreamsKt.lineSequence(java.io.BufferedReader):kotlin.sequences.Sequence A[Catch: all \-\> 0x0034, MD:(java.io.BufferedReader):kotlin.sequences.Sequence\<java.lang.String\> (m)] (LINE:53)\l0x0026: INVOKE  (r6 I:java.lang.Object) = (r8 I:kotlin.jvm.functions.Function1 A[D('block' kotlin.jvm.functions.Function1)]), (r6 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[Catch: all \-\> 0x0034, MD:(P1):R (m), TRY_LEAVE]\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|0x002a: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x002d: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x0030: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0033|RETURN\l|0x0033: RETURN  (r6 I:T) \l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_29 [shape=record,label="{29\:\ 0x0034|ExcHandler: all \-\> 0x0034\l|0x0034: MOVE_EXCEPTION  (r2 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0034]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0035|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_30 [shape=record,label="{30\:\ 0x0035|TRY_ENTER\lTRY_LEAVE\lTryCatch #1 \{all \-\> 0x0036, blocks: (B:30:0x0035), top: B:36:0x0035 \}\lCatch: all \-\> 0x0036\l|0x0035: THROW  (r2 I:java.lang.Throwable) A[Catch: all \-\> 0x0036, TRY_ENTER, TRY_LEAVE]\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ 0x0036|ExcHandler: all \-\> 0x0036\l|0x0036: MOVE_EXCEPTION  (r4 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x0036]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0037|0x0037: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyStart(int):void A[MD:(int):void (m)]\l0x003a: INVOKE  (r1 I:java.io.Closeable), (r2 I:java.lang.Throwable) type: STATIC call: kotlin.io.CloseableKt.closeFinally(java.io.Closeable, java.lang.Throwable):void A[MD:(java.io.Closeable, java.lang.Throwable):void (m)]\l0x003d: INVOKE  (r3 I:int) type: STATIC call: kotlin.jvm.internal.InlineMarker.finallyEnd(int):void A[MD:(int):void (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0040|0x0040: THROW  (r4 I:java.lang.Throwable) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0013|0x0013: NEW_INSTANCE  (r1 I:java.io.BufferedReader) =  java.io.BufferedReader \l0x0015: CONST  (r2 I:??[int, float, short, byte, char]) = (8192(0x2000, float:1.148E\-41) ??[int, float, short, byte, char]) \l0x0017: INVOKE  (r1 I:java.io.BufferedReader), (r7 I:java.io.Reader A[D('$this$useLines' java.io.Reader)]), (r2 I:int) type: DIRECT call: java.io.BufferedReader.\<init\>(java.io.Reader, int):void A[MD:(java.io.Reader, int):void (c)]\l}"];
MethodNode[shape=record,label="{public static final T kotlin.io.TextStreamsKt.useLines((r7 I:java.io.Reader A[D('$this$useLines' java.io.Reader), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super kotlin.sequences.Sequence\<java.lang.String\>, ? extends T\> A[D('block' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:30:0x0035 \-\> B:20:?, CROSS_EDGE: B:33:0x0040 \-\> B:20:?, CROSS_EDGE: B:36:0x0035 \-\> B:31:0x0036, CROSS_EDGE: B:34:0x001e \-\> B:29:0x0034, CROSS_EDGE: B:24:0x0013 \-\> B:25:0x001a\lINLINE_NOT_NEEDED\lTryCatch #0 \{all \-\> 0x0034, blocks: (B:26:0x001e), top: B:34:0x001e \}, TryCatch #1 \{all \-\> 0x0036, blocks: (B:30:0x0035), top: B:36:0x0035 \}\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/io\/Reader;Lkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/sequences\/Sequence\<Ljava\/lang\/String;\>;+TT;\>;)TT;\lDebug Info:\l  0x0021\-0x002a: r4 'it' Ljava\/io\/BufferedReader;\l  0x0022\-0x002a: r5 '$i$a$\-use\-TextStreamsKt$useLines$1' I\l  0x000b\-0x0035: r0 '$i$f$useLines' I\l  \-1 \-0x0035: r7 '$this$useLines' Ljava\/io\/Reader;\l  \-1 \-0x0035: r8 'block' Lkotlin\/jvm\/functions\/Function1;\l  0x0036\-0x0040: r0 '$i$f$useLines' I\l  0x0036\-0x0040: r7 '$this$useLines' Ljava\/io\/Reader;\l  0x0036\-0x0040: r8 'block' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_34;
Node_34 -> Node_26;
Node_34 -> Node_29;
Node_26 -> Node_27;
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_20;
Node_35 -> Node_29;
Node_29 -> Node_36;
Node_36 -> Node_30;
Node_36 -> Node_31;
Node_30 -> Node_20;
Node_30 -> Node_37;
Node_37 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_20;
Node_24 -> Node_25;
}

