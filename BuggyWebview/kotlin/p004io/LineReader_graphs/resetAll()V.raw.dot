digraph "CFG forkotlin.io.LineReader.resetAll()V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:java.nio.charset.CharsetDecoder) =  kotlin.io.LineReader.decoder java.nio.charset.CharsetDecoder  (LINE:288)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000a \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: CONST_STR  (r0 I:java.lang.String) =  \"decoder\" \l0x0006: INVOKE  (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.throwUninitializedPropertyAccessException(java.lang.String):void A[MD:(java.lang.String):void (m)]\l0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: INVOKE  (r0 I:java.nio.charset.CharsetDecoder) type: VIRTUAL call: java.nio.charset.CharsetDecoder.reset():java.nio.charset.CharsetDecoder A[MD:():java.nio.charset.CharsetDecoder (c)]\l0x000d: SGET  (r0 I:java.nio.ByteBuffer) =  kotlin.io.LineReader.byteBuf java.nio.ByteBuffer  (LINE:289)\l0x000f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:java.nio.ByteBuffer), (r1 I:int) type: VIRTUAL call: java.nio.ByteBuffer.position(int):java.nio.Buffer A[MD:(int):java.nio.Buffer (c)]\l0x0013: SGET  (r0 I:java.lang.StringBuilder) =  kotlin.io.LineReader.sb java.lang.StringBuilder  (LINE:290)\l0x0015: INVOKE  (r0 I:java.lang.StringBuilder), (r1 I:int) type: VIRTUAL call: java.lang.StringBuilder.setLength(int):void A[MD:(int):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0018|RETURN\l|0x0018: RETURN    (LINE:291)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlin.io.LineReader.resetAll((r2 'this' I:kotlin.io.LineReader A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000a\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

