digraph "CFG forkotlin.io.LineReader.updateCharset(Ljava\/nio\/charset\/Charset;)V" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: INVOKE  (r0 I:java.nio.charset.CharsetDecoder) = (r6 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)]) type: VIRTUAL call: java.nio.charset.Charset.newDecoder():java.nio.charset.CharsetDecoder A[MD:():java.nio.charset.CharsetDecoder (c)] (LINE:275)\l0x0004: CONST_STR  (r1 I:java.lang.String) =  \"charset.newDecoder()\" \l0x0006: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0009: SPUT  (r0 I:java.nio.charset.CharsetDecoder) kotlin.io.LineReader.decoder java.nio.charset.CharsetDecoder \l0x000b: SGET  (r0 I:java.nio.ByteBuffer) =  kotlin.io.LineReader.byteBuf java.nio.ByteBuffer  (LINE:277)\l0x000d: INVOKE  (r0 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.clear():java.nio.Buffer A[MD:():java.nio.Buffer (c)]\l0x0010: SGET  (r1 I:java.nio.CharBuffer) =  kotlin.io.LineReader.charBuf java.nio.CharBuffer  (LINE:278)\l0x0012: INVOKE  (r1 I:java.nio.CharBuffer) type: VIRTUAL call: java.nio.CharBuffer.clear():java.nio.Buffer A[MD:():java.nio.Buffer (c)]\l0x0015: CONST  (r2 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:279)\l0x0017: CAST (r3 I:byte) = (byte) (r2 I:int) \l0x0018: INVOKE  (r0 I:java.nio.ByteBuffer), (r3 I:byte) type: VIRTUAL call: java.nio.ByteBuffer.put(byte):java.nio.ByteBuffer A[MD:(byte):java.nio.ByteBuffer (c)]\l0x001b: INVOKE  (r0 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.ByteBuffer.flip():java.nio.Buffer A[MD:():java.nio.Buffer (c)] (LINE:280)\l0x001e: SGET  (r3 I:java.nio.charset.CharsetDecoder) =  kotlin.io.LineReader.decoder java.nio.charset.CharsetDecoder  (LINE:281)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0020|0x0020: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0028 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0022|0x0022: CONST_STR  (r3 I:java.lang.String) =  \"decoder\" \l0x0024: INVOKE  (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.throwUninitializedPropertyAccessException(java.lang.String):void A[MD:(java.lang.String):void (m)]\l0x0027: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0028|0x0028: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0029: INVOKE  (r3 I:java.nio.charset.CharsetDecoder), (r0 I:java.nio.ByteBuffer), (r1 I:java.nio.CharBuffer), (r4 I:boolean) type: VIRTUAL call: java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer, java.nio.CharBuffer, boolean):java.nio.charset.CoderResult A[MD:(java.nio.ByteBuffer, java.nio.CharBuffer, boolean):java.nio.charset.CoderResult (c)]\l0x002c: INVOKE  (r0 I:int) = (r1 I:java.nio.CharBuffer) type: VIRTUAL call: java.nio.CharBuffer.position():int A[MD:():int (c)] (LINE:282)\l0x0030: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0031|0x0031: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003a \l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|0x0033: INVOKE  (r0 I:char) = (r1 I:java.nio.CharBuffer), (r4 I:int) type: VIRTUAL call: java.nio.CharBuffer.get(int):char A[MD:(int):char (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0037|0x0037: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x003a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0039|0x0039: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x003a|0x003a: SPUT  (r4 I:boolean) kotlin.io.LineReader.directEOL boolean \l0x003c: INVOKE  (r5 I:kotlin.io.LineReader) type: DIRECT call: kotlin.io.LineReader.resetAll():void A[MD:():void (m)] (LINE:283)\l}"];
Node_23 [shape=record,label="{23\:\ 0x003f|RETURN\l|0x003f: RETURN    (LINE:284)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final void kotlin.io.LineReader.updateCharset((r5 'this' I:kotlin.io.LineReader A[IMMUTABLE_TYPE, THIS]), (r6 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0037 \-\> B:22:0x003a, CROSS_EDGE: B:18:0x0031 \-\> B:22:0x003a, CROSS_EDGE: B:15:0x0020 \-\> B:17:0x0028\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x003f: r6 'charset' Ljava\/nio\/charset\/Charset;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_22;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_13;
}

