digraph "CFG forkotlin.io.LineReader.decode(Z)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|LOOP_START\lLOOP:0: B:15:0x0000\-\>B:24:0x002f\l|java.nio.charset.CharsetDecoder r0 = kotlin.p004io.LineReader.decoder\l}"];
Node_16 [shape=record,label="{16\:\ 0x0003|if (r0 != null) goto L4\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|kotlin.jvm.internal.Intrinsics.throwUninitializedPropertyAccessException(\"decoder\")\lr0 = null\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|PHI: r0 \l  PHI: (r0v1 java.nio.charset.CharsetDecoder) = (r0v0 java.nio.charset.CharsetDecoder), (r0v4 java.nio.charset.CharsetDecoder) binds: [B:16:0x0003, B:17:0x0005] A[DONT_GENERATE, DONT_INLINE]\l|java.nio.ByteBuffer r1 = kotlin.p004io.LineReader.byteBuf\ljava.nio.CharBuffer r2 = kotlin.p004io.LineReader.charBuf\ljava.nio.charset.CoderResult r0 = r0.decode(r1, r2, r8)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"decoder.decode(byteBuf, charBuf, endOfInput)\")\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|if (r0.isError() == false) goto L7\l}"];
Node_20 [shape=record,label="{20\:\ 0x001e|resetAll()\lr0.throwException()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|int r1 = r2.position()\l}"];
Node_22 [shape=record,label="{22\:\ 0x002c|if (r0.isOverflow() != false) goto L9\l}"];
Node_24 [shape=record,label="{24\:\ 0x002f|LOOP_END\lLOOP:0: B:15:0x0000\-\>B:24:0x002f\l|java.lang.StringBuilder r3 = kotlin.p004io.LineReader.f202sb\lchar[] r4 = kotlin.p004io.LineReader.chars\lr3.append(r4, 0, r1 + (\-1))\lr2.position(0)\lr2.limit(32)\lr2.put(r4[r1 + (\-1)])\l}"];
Node_25 [shape=record,label="{25\:\ 0x002e|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002e|RETURN\l|return r1\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final int kotlin.io.LineReader.decode((r7v0 'this' kotlin.io.LineReader A[IMMUTABLE_TYPE, THIS]), (r8v0 'endOfInput' boolean A[D('endOfInput' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x002f \-\> B:15:0x0000, CROSS_EDGE: B:19:0x001c \-\> B:21:0x0024, CROSS_EDGE: B:16:0x0003 \-\> B:18:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_25[style=dashed];
Node_24 -> Node_15;
Node_25 -> Node_23;
Node_23 -> Node_14;
}

