digraph "CFG forkotlin.io.LineReader.readLine(Ljava\/io\/InputStream;Ljava\/nio\/charset\/Charset;)Ljava\/lang\/String;" {
Node_72 [shape=record,label="{72\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_74 [shape=record,label="{74\:\ 0x0000|0x0000: MONITOR_ENTER  (r11 I:??[OBJECT, ARRAY]) \l}"];
Node_134 [shape=record,label="{134\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_75 [shape=record,label="{75\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0001: CONST_STR  (r0 I:java.lang.String) =  \"inputStream\" A[TRY_ENTER]\l0x0003: INVOKE  (r12 I:java.lang.Object A[D('inputStream' java.io.InputStream)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[Catch: all \-\> 0x00d1, MD:(java.lang.Object, java.lang.String):void (m)]\l0x0006: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x0008: INVOKE  (r13 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[Catch: all \-\> 0x00d1, MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: SGET  (r0 I:java.nio.charset.CharsetDecoder) =  kotlin.io.LineReader.decoder java.nio.charset.CharsetDecoder A[Catch: all \-\> 0x00d1] (LINE:191)\l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_76 [shape=record,label="{76\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:81:0x0022 \l}"];
Node_77 [shape=record,label="{77\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x0018 \l}"];
Node_78 [shape=record,label="{78\:\ 0x0012|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0012: CONST_STR  (r0 I:java.lang.String) =  \"decoder\" \l0x0014: INVOKE  (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.throwUninitializedPropertyAccessException(java.lang.String):void A[Catch: all \-\> 0x00d1, MD:(java.lang.String):void (m)]\l0x0017: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0018|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0018: INVOKE  (r0 I:java.nio.charset.Charset) = (r0 I:java.nio.charset.CharsetDecoder) type: VIRTUAL call: java.nio.charset.CharsetDecoder.charset():java.nio.charset.Charset A[Catch: all \-\> 0x00d1, MD:():java.nio.charset.Charset (c)]\l0x001c: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r13 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[Catch: all \-\> 0x00d1, MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_80 [shape=record,label="{80\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:82:0x0025 \l}"];
Node_82 [shape=record,label="{82\:\ 0x0025|0x0025: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:192)\l0x0026: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:193)\l}"];
Node_83 [shape=record,label="{83\:\ 0x0027|LOOP_START\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lLOOP:0: B:83:0x0027\-\>B:141:0x0027\lCatch: all \-\> 0x00d1\l|0x0028: INVOKE  (r3 I:int) = (r12 I:java.io.InputStream A[D('inputStream' java.io.InputStream)]) type: VIRTUAL call: java.io.InputStream.read():int A[Catch: all \-\> 0x00d1, MD:():int throws java.io.IOException (c)] (LINE:195)\l0x002c: CONST  (r4 I:??[int, float, short, byte, char]) = (32 ??[int, float, short, byte, char])  (LINE:196)\l0x002e: CONST  (r5 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l0x0030: CONST  (r6 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0031: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0032: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_84 [shape=record,label="{84\:\ 0x0033|0x0033: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('readByte' int)]) != (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:95:0x004f \l}"];
Node_95 [shape=record,label="{95\:\ 0x004f|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x004f: SGET  (r6 I:byte[]) =  kotlin.io.LineReader.bytes byte[] A[Catch: all \-\> 0x00d1] (LINE:205)\l0x0051: ARITH  (r9 I:int) = (r0 I:int A[D('nBytes' int)]) + (1 int) A[Catch: all \-\> 0x00d1]\l0x0053: CAST (r10 I:byte) = (byte) (r3 I:int A[D('readByte' int)]) A[Catch: all \-\> 0x00d1]\l0x0054: APUT  (r6 I:byte[] A[IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char]), (r10 I:byte A[IMMUTABLE_TYPE]) A[Catch: all \-\> 0x00d1]\l}"];
Node_96 [shape=record,label="{96\:\ 0x0056|0x0056: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('readByte' int)]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:136:0x0061  (LINE:208)\l}"];
Node_97 [shape=record,label="{97\:\ 0x0058|0x0058: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nBytes' int)]) == (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:137:0x0061 \l}"];
Node_98 [shape=record,label="{98\:\ 0x005a|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x005a: SGET  (r0 I:boolean) =  kotlin.io.LineReader.directEOL boolean A[Catch: all \-\> 0x00d1]\l}"];
Node_99 [shape=record,label="{99\:\ 0x005c|0x005c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:140:0x005f \l}"];
Node_138 [shape=record,label="{138\:\ 0x005e|SYNTHETIC\l}"];
Node_100 [shape=record,label="{100\:\ 0x005e|0x005e: GOTO  \-\> 0x0061 \l}"];
Node_102 [shape=record,label="{102\:\ 0x0061|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0061: SGET  (r0 I:java.nio.ByteBuffer) =  kotlin.io.LineReader.byteBuf java.nio.ByteBuffer A[Catch: all \-\> 0x00d1] (LINE:210)\l0x0063: INVOKE  (r0 I:java.nio.ByteBuffer), (r9 I:int A[D('nBytes' int)]) type: VIRTUAL call: java.nio.ByteBuffer.limit(int):java.nio.Buffer A[Catch: all \-\> 0x00d1, MD:(int):java.nio.Buffer (c)]\l0x0066: SGET  (r6 I:java.nio.CharBuffer) =  kotlin.io.LineReader.charBuf java.nio.CharBuffer A[Catch: all \-\> 0x00d1] (LINE:211)\l0x0068: INVOKE  (r6 I:java.nio.CharBuffer), (r2 I:int A[D('nChars' int)]) type: VIRTUAL call: java.nio.CharBuffer.position(int):java.nio.Buffer A[Catch: all \-\> 0x00d1, MD:(int):java.nio.Buffer (c)]\l0x006b: INVOKE  (r6 I:int) = (r11 I:kotlin.io.LineReader), (r8 I:boolean) type: DIRECT call: kotlin.io.LineReader.decode(boolean):int A[Catch: all \-\> 0x00d1, MD:(boolean):int (m)] (LINE:212)\l0x006f: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nChars' int)]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_103 [shape=record,label="{103\:\ 0x0070|0x0070: IF  (r2 I:??[int, byte, short, char] A[D('nChars' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:129:0x00cb  (LINE:214)\l}"];
Node_104 [shape=record,label="{104\:\ 0x0072|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0072: SGET  (r6 I:char[]) =  kotlin.io.LineReader.chars char[] A[Catch: all \-\> 0x00d1]\l0x0074: ARITH  (r10 I:int) = (r2 I:int A[D('nChars' int)]) + (\-1 int) A[Catch: all \-\> 0x00d1]\l0x0076: AGET  (r6 I:char A[IMMUTABLE_TYPE]) = (r6 I:char[] A[IMMUTABLE_TYPE]), (r10 I:??[int, short, byte, char]) A[Catch: all \-\> 0x00d1]\l}"];
Node_105 [shape=record,label="{105\:\ 0x0078|0x0078: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:129:0x00cb \l}"];
Node_139 [shape=record,label="{139\:\ 0x007a|SYNTHETIC\l}"];
Node_106 [shape=record,label="{106\:\ 0x007a|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x007a: INVOKE  (r0 I:java.nio.ByteBuffer), (r8 I:int) type: VIRTUAL call: java.nio.ByteBuffer.position(int):java.nio.Buffer A[Catch: all \-\> 0x00d1, MD:(int):java.nio.Buffer (c)] (LINE:215)\l0x007d: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nChars' int)])  (LINE:216)\l0x007e: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nBytes' int)]) \l}"];
Node_107 [shape=record,label="{107\:\ 0x007f|0x007f: IF  (r1 I:??[int, byte, short, char] A[D('nChars' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:115:0x0097  (LINE:223)\l}"];
Node_108 [shape=record,label="{108\:\ 0x0081|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0081: SGET  (r2 I:char[]) =  kotlin.io.LineReader.chars char[] A[Catch: all \-\> 0x00d1]\l0x0083: ARITH  (r3 I:int) = (r1 I:int A[D('nChars' int)]) + (\-1 int) A[Catch: all \-\> 0x00d1]\l0x0085: AGET  (r3 I:char A[IMMUTABLE_TYPE]) = (r2 I:char[] A[IMMUTABLE_TYPE]), (r3 I:??[int, short, byte, char]) A[Catch: all \-\> 0x00d1]\l}"];
Node_109 [shape=record,label="{109\:\ 0x0087|0x0087: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:115:0x0097 \l}"];
Node_110 [shape=record,label="{110\:\ 0x0089|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0089: ARITH  (r1 I:int) = (r1 I:int A[D('nChars' int)]) + (\-1 int) A[Catch: all \-\> 0x00d1] (LINE:224)\l}"];
Node_111 [shape=record,label="{111\:\ 0x008b|0x008b: IF  (r1 I:??[int, byte, short, char] A[D('nChars' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:115:0x0097  (LINE:225)\l}"];
Node_112 [shape=record,label="{112\:\ 0x008d|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x008d: ARITH  (r3 I:int) = (r1 I:int A[D('nChars' int)]) + (\-1 int) A[Catch: all \-\> 0x00d1]\l0x008f: AGET  (r2 I:char A[IMMUTABLE_TYPE]) = (r2 I:char[] A[IMMUTABLE_TYPE]), (r3 I:??[int, short, byte, char]) A[Catch: all \-\> 0x00d1]\l0x0091: CONST  (r3 I:??[int, float, short, byte, char]) = (13 ??[int, float, short, byte, char]) \l}"];
Node_113 [shape=record,label="{113\:\ 0x0093|0x0093: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:115:0x0097 \l}"];
Node_114 [shape=record,label="{114\:\ 0x0095|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0095: ARITH  (r1 I:int) = (r1 I:int A[D('nChars' int)]) + (\-1 int) A[Catch: all \-\> 0x00d1]\l}"];
Node_115 [shape=record,label="{115\:\ 0x0097|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0097: SGET  (r2 I:java.lang.StringBuilder) =  kotlin.io.LineReader.sb java.lang.StringBuilder A[Catch: all \-\> 0x00d1] (LINE:228)\l0x0099: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x009a: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x00d1]\l0x009c: INVOKE  (r3 I:int) = (r3 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.length():int A[Catch: all \-\> 0x00d1, MD:():int (c)]\l}"];
Node_116 [shape=record,label="{116\:\ 0x00a0|0x00a0: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:118:0x00a3 \l}"];
Node_117 [shape=record,label="{117\:\ 0x00a2|0x00a2: GOTO  \-\> 0x00a4 \l}"];
Node_119 [shape=record,label="{119\:\ 0x00a4|0x00a4: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:123:0x00af \l}"];
Node_120 [shape=record,label="{120\:\ 0x00a6|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x00a6: NEW_INSTANCE  (r2 I:java.lang.String) =  java.lang.String A[Catch: all \-\> 0x00d1]\l0x00a8: SGET  (r3 I:char[]) =  kotlin.io.LineReader.chars char[] A[Catch: all \-\> 0x00d1]\l0x00aa: INVOKE  (r2 I:java.lang.String), (r3 I:char[]), (r8 I:int), (r1 I:int A[D('nChars' int)]) type: DIRECT call: java.lang.String.\<init\>(char[], int, int):void A[Catch: all \-\> 0x00d1, MD:(char[], int, int):void (c), TRY_LEAVE]\l}"];
Node_121 [shape=record,label="{121\:\ 0x00ad|0x00ad: MONITOR_EXIT  (r11 I:??[OBJECT, ARRAY]) \l}"];
Node_122 [shape=record,label="{122\:\ 0x00ae|RETURN\l|0x00ae: RETURN  (r2 I:java.lang.String) \l}"];
Node_73 [shape=record,label="{73\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_123 [shape=record,label="{123\:\ 0x00af|TRY_ENTER\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x00af: SGET  (r3 I:char[]) =  kotlin.io.LineReader.chars char[] A[Catch: all \-\> 0x00d1, TRY_ENTER] (LINE:230)\l0x00b1: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:char[]), (r8 I:int), (r1 I:int A[D('nChars' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(char[], int, int):java.lang.StringBuilder A[Catch: all \-\> 0x00d1, MD:(char[], int, int):java.lang.StringBuilder (c)]\l0x00b4: INVOKE  (r3 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[Catch: all \-\> 0x00d1, MD:():java.lang.String (c)] (LINE:232)\l0x00b8: CONST_STR  (r5 I:java.lang.String) =  \"sb.toString()\" \l0x00ba: INVOKE  (r3 I:java.lang.Object), (r5 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[Catch: all \-\> 0x00d1, MD:(java.lang.Object, java.lang.String):void (m)]\l0x00bd: INVOKE  (r5 I:int) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.length():int A[Catch: all \-\> 0x00d1, MD:():int (c)] (LINE:233)\l}"];
Node_124 [shape=record,label="{124\:\ 0x00c1|0x00c1: IF  (r5 I:??[int, byte, short, char]) \<= (r4 I:??[int, byte, short, char])  \-\> B:126:0x00c6 \l}"];
Node_125 [shape=record,label="{125\:\ 0x00c3|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x00c3: INVOKE  (r11 I:kotlin.io.LineReader) type: DIRECT call: kotlin.io.LineReader.trimStringBuilder():void A[Catch: all \-\> 0x00d1, MD:():void (m)]\l}"];
Node_126 [shape=record,label="{126\:\ 0x00c6|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x00c6: INVOKE  (r2 I:java.lang.StringBuilder), (r8 I:int) type: VIRTUAL call: java.lang.StringBuilder.setLength(int):void A[Catch: all \-\> 0x00d1, MD:(int):void (c), TRY_LEAVE] (LINE:234)\l}"];
Node_127 [shape=record,label="{127\:\ 0x00c9|0x00c9: MONITOR_EXIT  (r11 I:??[OBJECT, ARRAY])  (LINE:235)\l}"];
Node_128 [shape=record,label="{128\:\ 0x00ca|RETURN\l|0x00ca: RETURN  (r3 I:java.lang.String A[D('result' java.lang.String)]) \l}"];
Node_118 [shape=record,label="{118\:\ 0x00a3|0x00a3: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_129 [shape=record,label="{129\:\ 0x00cb|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x00cb: INVOKE  (r0 I:int) = (r11 I:kotlin.io.LineReader) type: DIRECT call: kotlin.io.LineReader.compactBytes():int A[Catch: all \-\> 0x00d1, MD:():int (m), TRY_ENTER, TRY_LEAVE] (LINE:219)\l}"];
Node_142 [shape=record,label="{142\:\ 0x0027|SYNTHETIC\l}"];
Node_141 [shape=record,label="{141\:\ 0x0027|LOOP_END\lSYNTHETIC\lLOOP:0: B:83:0x0027\-\>B:141:0x0027\l}"];
Node_140 [shape=record,label="{140\:\ 0x005f|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x005f|0x005f: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('nBytes' int)]) \l0x0060: GOTO  \-\> 0x0027 \l}"];
Node_143 [shape=record,label="{143\:\ 0x0027|SYNTHETIC\l}"];
Node_137 [shape=record,label="{137\:\ 0x0061|SYNTHETIC\l}"];
Node_136 [shape=record,label="{136\:\ 0x0061|SYNTHETIC\l}"];
Node_135 [shape=record,label="{135\:\ 0x0035|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0035|TRY_LEAVE\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0035: SGET  (r6 I:java.lang.StringBuilder) =  kotlin.io.LineReader.sb java.lang.StringBuilder A[Catch: all \-\> 0x00d1] (LINE:198)\l0x0037: CHECK_CAST (r6 I:java.lang.CharSequence) = (java.lang.CharSequence) (r6 I:??[OBJECT, ARRAY]) A[Catch: all \-\> 0x00d1]\l0x0039: INVOKE  (r6 I:int) = (r6 I:java.lang.CharSequence) type: INTERFACE call: java.lang.CharSequence.length():int A[Catch: all \-\> 0x00d1, MD:():int (c), TRY_LEAVE]\l}"];
Node_86 [shape=record,label="{86\:\ 0x003d|0x003d: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x0041 \l}"];
Node_87 [shape=record,label="{87\:\ 0x003f|0x003f: CONST  (r6 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_89 [shape=record,label="{89\:\ 0x0042|0x0042: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x004a \l}"];
Node_90 [shape=record,label="{90\:\ 0x0044|0x0044: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nBytes' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x004a \l}"];
Node_91 [shape=record,label="{91\:\ 0x0046|0x0046: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nChars' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:94:0x004a \l}"];
Node_92 [shape=record,label="{92\:\ 0x0048|0x0048: MONITOR_EXIT  (r11 I:??[OBJECT, ARRAY])  (LINE:199)\l}"];
Node_93 [shape=record,label="{93\:\ 0x0049|RETURN\l|0x0049: RETURN  (r1 I:java.lang.String) \l}"];
Node_94 [shape=record,label="{94\:\ 0x004a|TRY_ENTER\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x004a: INVOKE  (r1 I:int) = (r11 I:kotlin.io.LineReader), (r0 I:int A[D('nBytes' int)]), (r2 I:int A[D('nChars' int)]) type: DIRECT call: kotlin.io.LineReader.decodeEndOfInput(int, int):int A[Catch: all \-\> 0x00d1, MD:(int, int):int (m), TRY_ENTER] (LINE:201)\l0x004e: GOTO  \-\> 0x007f  (LINE:202)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0041|0x0041: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x0022|TryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|0x0022: INVOKE  (r11 I:kotlin.io.LineReader), (r13 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)]) type: DIRECT call: kotlin.io.LineReader.updateCharset(java.nio.charset.Charset):void A[Catch: all \-\> 0x00d1, MD:(java.nio.charset.Charset):void (m)]\l}"];
Node_131 [shape=record,label="{131\:\ 0x00d1|ExcHandler: all \-\> 0x00d1\l|0x00d1: MOVE_EXCEPTION  (r12 I:java.lang.Throwable A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: all \-\> 0x00d1] (LINE:190)\l}"];
Node_133 [shape=record,label="{133\:\ 0x00d3|0x00d3: THROW  (r12 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final synchronized java.lang.String kotlin.io.LineReader.readLine((r11 'this' I:kotlin.io.LineReader A[IMMUTABLE_TYPE, THIS]), (r12 I:java.io.InputStream A[D('inputStream' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:122:0x00ae \-\> B:73:?, CROSS_EDGE: B:128:0x00ca \-\> B:73:?, CROSS_EDGE: B:124:0x00c1 \-\> B:126:0x00c6, CROSS_EDGE: B:118:0x00a3 \-\> B:119:0x00a4, CROSS_EDGE: B:113:0x0093 \-\> B:115:0x0097, CROSS_EDGE: B:111:0x008b \-\> B:115:0x0097, CROSS_EDGE: B:109:0x0087 \-\> B:115:0x0097, CROSS_EDGE: B:107:0x007f \-\> B:115:0x0097, CROSS_EDGE: B:90:0x0044 \-\> B:94:0x004a, CROSS_EDGE: B:89:0x0042 \-\> B:94:0x004a, CROSS_EDGE: B:88:0x0041 \-\> B:89:0x0042, CROSS_EDGE: B:106:0x007a \-\> B:107:0x007f, BACK_EDGE: B:129:0x00cb \-\> B:83:0x0027, CROSS_EDGE: B:103:0x0070 \-\> B:129:0x00cb, BACK_EDGE: B:101:0x005f \-\> B:83:0x0027, CROSS_EDGE: B:97:0x0058 \-\> B:102:0x0061, CROSS_EDGE: B:96:0x0056 \-\> B:102:0x0061, CROSS_EDGE: B:80:0x0020 \-\> B:82:0x0025, CROSS_EDGE: B:77:0x0010 \-\> B:79:0x0018, CROSS_EDGE: B:76:0x000e \-\> B:81:0x0022, CROSS_EDGE: B:133:0x00d3 \-\> B:73:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0027\-0x004e: r2 'nChars' I\l  0x004e\-0x004f: r1 'nChars' I\l  0x0026\-0x0053: r0 'nBytes' I\l  0x004f\-0x007f: r2 'nChars' I\l  0x002c\-0x007f: r3 'readByte' I\l  0x0053\-0x007f: r9 'nBytes' I\l  0x007f\-0x00cb: r0 'nBytes' I\l  0x007f\-0x00cb: r1 'nChars' I\l  0x00bd\-0x00cb: r3 'result' Ljava\/lang\/String;\l  0x00cb\-0x00cf: r3 'readByte' I\l  0x00cb\-0x00cf: r9 'nBytes' I\l  0x00cf\-0x00d1: r0 'nBytes' I\l  0x00cb\-0x00d1: r2 'nChars' I\l  \-1 \-0x00d1: r12 'inputStream' Ljava\/io\/InputStream;\l  \-1 \-0x00d1: r13 'charset' Ljava\/nio\/charset\/Charset;\lTryCatch #0 \{all \-\> 0x00d1, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\l}"];
MethodNode -> Node_72;Node_72 -> Node_74;
Node_74 -> Node_134;
Node_134 -> Node_75;
Node_134 -> Node_131;
Node_75 -> Node_76;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_81;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_79;
Node_79 -> Node_80;
Node_80 -> Node_81[style=dashed];
Node_80 -> Node_82;
Node_82 -> Node_83;
Node_83 -> Node_84;
Node_84 -> Node_95;
Node_84 -> Node_135[style=dashed];
Node_95 -> Node_96;
Node_96 -> Node_97[style=dashed];
Node_96 -> Node_136;
Node_97 -> Node_98[style=dashed];
Node_97 -> Node_137;
Node_98 -> Node_99;
Node_99 -> Node_138[style=dashed];
Node_99 -> Node_140;
Node_138 -> Node_100;
Node_100 -> Node_102;
Node_102 -> Node_103;
Node_103 -> Node_104[style=dashed];
Node_103 -> Node_129;
Node_104 -> Node_105;
Node_105 -> Node_129;
Node_105 -> Node_139[style=dashed];
Node_139 -> Node_106;
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_115;
Node_108 -> Node_109;
Node_109 -> Node_110[style=dashed];
Node_109 -> Node_115;
Node_110 -> Node_111;
Node_111 -> Node_112[style=dashed];
Node_111 -> Node_115;
Node_112 -> Node_113;
Node_113 -> Node_114[style=dashed];
Node_113 -> Node_115;
Node_114 -> Node_115;
Node_115 -> Node_116;
Node_116 -> Node_117[style=dashed];
Node_116 -> Node_118;
Node_117 -> Node_119;
Node_119 -> Node_120[style=dashed];
Node_119 -> Node_123;
Node_120 -> Node_121;
Node_121 -> Node_122;
Node_122 -> Node_73;
Node_123 -> Node_124;
Node_124 -> Node_125[style=dashed];
Node_124 -> Node_126;
Node_125 -> Node_126;
Node_126 -> Node_127;
Node_127 -> Node_128;
Node_128 -> Node_73;
Node_118 -> Node_119;
Node_129 -> Node_142;
Node_142 -> Node_141;
Node_141 -> Node_83;
Node_140 -> Node_101;
Node_101 -> Node_143;
Node_143 -> Node_141;
Node_137 -> Node_102;
Node_136 -> Node_102;
Node_135 -> Node_85;
Node_85 -> Node_86;
Node_86 -> Node_87[style=dashed];
Node_86 -> Node_88;
Node_87 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_94;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_94;
Node_91 -> Node_92[style=dashed];
Node_91 -> Node_94;
Node_92 -> Node_93;
Node_93 -> Node_73;
Node_94 -> Node_107;
Node_88 -> Node_89;
Node_81 -> Node_82;
Node_131 -> Node_133;
Node_133 -> Node_73;
}

