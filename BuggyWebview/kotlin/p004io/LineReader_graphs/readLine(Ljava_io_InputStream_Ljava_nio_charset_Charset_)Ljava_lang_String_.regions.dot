digraph "CFG forkotlin.io.LineReader.readLine(Ljava\/io\/InputStream;Ljava\/nio\/charset\/Charset;)Ljava\/lang\/String;" {
subgraph cluster_Region_1612696646 {
label = "R(1:(1:(9:3|(1:(1:6))|67|9|(2:10|(1:(2:(1:64)|(1:65)))(4:12|(1:52)|19|(2:(2:24|1)|(1:48))))|(2:26|(1:32))|33|(1:47)(0)|(2:(1:39)|(4:41|(1:43)|44|46))))) | DECL_VAR: boolean null, int nChars\l";
node [shape=record,color=blue];
subgraph cluster_Region_1588782597 {
label = "R(1:(9:3|(1:(1:6))|67|9|(2:10|(1:(2:(1:64)|(1:65)))(4:12|(1:52)|19|(2:(2:24|1)|(1:48))))|(2:26|(1:32))|33|(1:47)(0)|(2:(1:39)|(4:41|(1:43)|44|46))))";
node [shape=record,color=blue];
subgraph cluster_Region_679192853 {
label = "R(9:3|(1:(1:6))|67|9|(2:10|(1:(2:(1:64)|(1:65)))(4:12|(1:52)|19|(2:(2:24|1)|(1:48))))|(2:26|(1:32))|33|(1:47)(0)|(2:(1:39)|(4:41|(1:43)|44|46)))";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x0001|TRY_ENTER\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"inputStream\")     \/\/ Catch: java.lang.Throwable \-\> Ld1\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"charset\")     \/\/ Catch: java.lang.Throwable \-\> Ld1\ljava.nio.charset.CharsetDecoder java.nio.charset.CharsetDecoder r0 = kotlin.p004io.LineReader.decoder     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
subgraph cluster_IfRegion_130204285 {
label = "IF [B:76:0x000e] THEN: R(1:(1:6)) ELSE: null";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x000e|if (r0 != null) goto L5\l}"];
subgraph cluster_Region_1527374651 {
label = "R(1:(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2039142215 {
label = "IF [B:77:0x0010] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_77 [shape=record,label="{77\:\ 0x0010|if (r0 == null) goto L6\l}"];
subgraph cluster_Region_599132694 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_78 [shape=record,label="{78\:\ 0x0012|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|kotlin.jvm.internal.Intrinsics.throwUninitializedPropertyAccessException(\"decoder\")     \/\/ Catch: java.lang.Throwable \-\> Ld1\lr0 = null\l}"];
}
}
}
}
Node_81 [shape=record,label="{81\:\ 0x0022|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|updateCharset(r13)     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
Node_82 [shape=record,label="{82\:\ 0x0025|int r0 = 0\lint r2 = 0\l}"];
subgraph cluster_LoopRegion_2113573487 {
label = "LOOP:0: (2:10|(1:(2:(1:64)|(1:65)))(4:12|(1:52)|19|(2:(2:24|1)|(1:48))))";
node [shape=record,color=blue];
subgraph cluster_Region_1233024951 {
label = "R(2:10|(1:(2:(1:64)|(1:65)))(4:12|(1:52)|19|(2:(2:24|1)|(1:48))))";
node [shape=record,color=blue];
Node_83 [shape=record,label="{83\:\ 0x0027|LOOP_START\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lLOOP:0: B:83:0x0027\-\>B:141:0x0027\lCatch: all \-\> 0x00d1\lPHI: r0 r2 \l  PHI: (r0v4 'nBytes' int) = (r0v3 'nBytes' int), (r0v5 'nBytes' int) binds: [B:82:0x0025, B:141:0x0027] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'nChars' int) = (r2v0 'nChars' int), (r2v6 'nChars' int) binds: [B:82:0x0025, B:141:0x0027] A[DONT_GENERATE, DONT_INLINE]\l|int int r3 = r12.read()     \/\/ Catch: java.lang.Throwable \-\> Ld1\lr7 = true\l}"];
subgraph cluster_IfRegion_347127164 {
label = "IF [B:84:0x0033] THEN: R(1:(2:(1:64)|(1:65))) ELSE: R(4:12|(1:52)|19|(2:(2:24|1)|(1:48)))";
node [shape=record,color=blue];
Node_84 [shape=record,label="{84\:\ 0x0033|if (r3 == (\-1)) goto L56\l}"];
subgraph cluster_Region_1662590058 {
label = "R(1:(2:(1:64)|(1:65)))";
node [shape=record,color=blue];
subgraph cluster_Region_710036674 {
label = "R(2:(1:64)|(1:65))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_251224055 {
label = "IF [B:89:0x0042, B:90:0x0044, B:91:0x0046] THEN: R(1:64) ELSE: null";
node [shape=record,color=blue];
Node_89 [shape=record,label="{89\:\ 0x0042|PHI: r6 \l  PHI: (r6v5 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((kotlin.p004io.LineReader.f202sb.length() == 0) == true) goto L61\l}"];
Node_90 [shape=record,label="{90\:\ 0x0044|ADDED_TO_REGION\l|if (r0 == 0) goto L62\l}"];
Node_91 [shape=record,label="{91\:\ 0x0046|ADDED_TO_REGION\l|if (r2 == 0) goto L63\l}"];
subgraph cluster_Region_1045848712 {
label = "R(1:64)";
node [shape=record,color=blue];
Node_93 [shape=record,label="{93\:\ 0x0049|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_568754560 {
label = "R(1:65)";
node [shape=record,color=blue];
Node_94 [shape=record,label="{94\:\ 0x004a|TRY_ENTER\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|int r1 = decodeEndOfInput(r0, r2)     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
}
}
}
subgraph cluster_Region_1242751012 {
label = "R(4:12|(1:52)|19|(2:(2:24|1)|(1:48)))";
node [shape=record,color=blue];
Node_95 [shape=record,label="{95\:\ 0x004f|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|int int r9 = r0 + 1     \/\/ Catch: java.lang.Throwable \-\> Ld1\lkotlin.p004io.LineReader.bytes[r0] = (byte) r3     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
subgraph cluster_IfRegion_333299905 {
label = "IF [B:96:0x0056, B:97:0x0058, B:99:0x005c] THEN: R(1:52) ELSE: null";
node [shape=record,color=blue];
Node_96 [shape=record,label="{96\:\ 0x0056|if (r3 != 10) goto L14\l}"];
Node_97 [shape=record,label="{97\:\ 0x0058|ADDED_TO_REGION\l|if (r9 != 32) goto L15\l}"];
Node_99 [shape=record,label="{99\:\ 0x005c|ADDED_TO_REGION\l|if (kotlin.p004io.LineReader.directEOL != false) goto L51\l}"];
subgraph cluster_Region_532264791 {
label = "R(1:52)";
node [shape=record,color=blue];
Node_101 [shape=record,label="{101\:\ 0x005f|r0 = r9\l}"];
}
}
Node_102 [shape=record,label="{102\:\ 0x0061|ADDED_TO_REGION\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|java.nio.ByteBuffer java.nio.ByteBuffer r0 = kotlin.p004io.LineReader.byteBuf     \/\/ Catch: java.lang.Throwable \-\> Ld1\lr0.limit(r9)     \/\/ Catch: java.lang.Throwable \-\> Ld1\lkotlin.p004io.LineReader.charBuf.position(r2)     \/\/ Catch: java.lang.Throwable \-\> Ld1\lr2 = decode(false)     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
subgraph cluster_Region_395765447 {
label = "R(2:(2:24|1)|(1:48))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_407102782 {
label = "IF [B:103:0x0070, B:105:0x0078] THEN: R(2:24|1) ELSE: null";
node [shape=record,color=blue];
Node_103 [shape=record,label="{103\:\ 0x0070|if (r2 \> 0) goto L21\l}"];
Node_105 [shape=record,label="{105\:\ 0x0078|ADDED_TO_REGION\l|if (kotlin.p004io.LineReader.chars[r2 \- 1] == 'n') goto L23\l}"];
subgraph cluster_Region_1551959846 {
label = "R(2:24|1)";
node [shape=record,color=blue];
Node_106 [shape=record,label="{106\:\ 0x007a|EDGE_INSN: B:106:0x007a\-\>B:107:0x007f ?: BREAK  \lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|r0.position(0)     \/\/ Catch: java.lang.Throwable \-\> Ld1\lr1 = r2\l}"];
Node_InsnContainer_1011302931 [shape=record,label="{|break\l}"];
}
}
subgraph cluster_Region_214755938 {
label = "R(1:48)";
node [shape=record,color=blue];
Node_129 [shape=record,label="{129\:\ 0x00cb|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|int r0 = compactBytes()     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
}
}
}
}
}
}
subgraph cluster_IfRegion_80428293 {
label = "IF [B:107:0x007f] THEN: R(2:26|(1:32)) ELSE: null";
node [shape=record,color=blue];
Node_107 [shape=record,label="{107\:\ 0x007f|EDGE_INSN: B:106:0x007a\-\>B:107:0x007f ?: BREAK  \lPHI: r1 \l  PHI: (r1v2 'nChars' int) = (r1v1 'nChars' int), (r1v6 'nChars' int) binds: [B:94:0x004a, B:106:0x007a] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \> 0) goto L26\l}"];
subgraph cluster_Region_1661693548 {
label = "R(2:26|(1:32))";
node [shape=record,color=blue];
Node_108 [shape=record,label="{108\:\ 0x0081|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|char[] char[] r2 = kotlin.p004io.LineReader.chars     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
subgraph cluster_IfRegion_502451592 {
label = "IF [B:109:0x0087, B:111:0x008b, B:113:0x0093] THEN: R(1:32) ELSE: null";
node [shape=record,color=blue];
Node_109 [shape=record,label="{109\:\ 0x0087|if (r2[r1 \- 1] == 'n') goto L28\l}"];
Node_111 [shape=record,label="{111\:\ 0x008b|ADDED_TO_REGION\l|if ((r1 \- 1) \> 0) goto L30\l}"];
Node_113 [shape=record,label="{113\:\ 0x0093|ADDED_TO_REGION\l|if (r2[r1 \- 1] == 'r') goto L32\l}"];
subgraph cluster_Region_2101893413 {
label = "R(1:32)";
node [shape=record,color=blue];
Node_114 [shape=record,label="{114\:\ 0x0095|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|r1\-\-\l}"];
}
}
}
}
Node_115 [shape=record,label="{115\:\ 0x0097|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\lPHI: r1 \l  PHI: (r1v3 'nChars' int) = (r1v2 'nChars' int), (r1v2 'nChars' int), (r1v4 'nChars' int), (r1v4 'nChars' int), (r1v5 'nChars' int) binds: [B:107:0x007f, B:109:0x0087, B:111:0x008b, B:113:0x0093, B:114:0x0095] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.StringBuilder java.lang.StringBuilder r2 = kotlin.p004io.LineReader.f202sb     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
subgraph cluster_IfRegion_1820475565 {
label = "IF [B:116:0x00a0] THEN: R(1:47) ELSE: R(0)";
node [shape=record,color=blue];
Node_116 [shape=record,label="{116\:\ 0x00a0|if (r2.length() != 0) goto L47\l}"];
subgraph cluster_Region_1202802091 {
label = "R(1:47)";
node [shape=record,color=blue];
Node_118 [shape=record,label="{118\:\ 0x00a3|r7 = false\l}"];
}
subgraph cluster_Region_151280950 {
label = "R(0)";
node [shape=record,color=blue];
}
}
subgraph cluster_Region_696529423 {
label = "R(2:(1:39)|(4:41|(1:43)|44|46))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_794143478 {
label = "IF [B:119:0x00a4] THEN: R(1:39) ELSE: null";
node [shape=record,color=blue];
Node_119 [shape=record,label="{119\:\ 0x00a4|PHI: r7 \l  PHI: (r7v2 boolean) = (r7v1 boolean), (r7v0 boolean) binds: [B:118:0x00a3, B:117:0x00a2] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == true) goto L37\l}"];
subgraph cluster_Region_1915459852 {
label = "R(1:39)";
node [shape=record,color=blue];
Node_122 [shape=record,label="{122\:\ 0x00ae|RETURN\l|return new java.lang.String(kotlin.p004io.LineReader.chars, 0, r1)\l}"];
}
}
subgraph cluster_Region_295984692 {
label = "R(4:41|(1:43)|44|46)";
node [shape=record,color=blue];
Node_123 [shape=record,label="{123\:\ 0x00af|TRY_ENTER\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|r2.append(kotlin.p004io.LineReader.chars, 0, r1)     \/\/ Catch: java.lang.Throwable \-\> Ld1\ljava.lang.String java.lang.String r3 = r2.toString()     \/\/ Catch: java.lang.Throwable \-\> Ld1\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r3, \"sb.toString()\")     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
subgraph cluster_IfRegion_1547011518 {
label = "IF [B:124:0x00c1] THEN: R(1:43) ELSE: null";
node [shape=record,color=blue];
Node_124 [shape=record,label="{124\:\ 0x00c1|if (r2.length() \> 32) goto L43\l}"];
subgraph cluster_Region_1500354450 {
label = "R(1:43)";
node [shape=record,color=blue];
Node_125 [shape=record,label="{125\:\ 0x00c3|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|trimStringBuilder()     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
}
}
Node_126 [shape=record,label="{126\:\ 0x00c6|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l|r2.setLength(0)     \/\/ Catch: java.lang.Throwable \-\> Ld1\l}"];
Node_128 [shape=record,label="{128\:\ 0x00ca|RETURN\l|return r3\l}"];
}
}
}
}
}
Node_72 [shape=record,color=red,label="{72\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_74 [shape=record,color=red,label="{74\:\ 0x0000}"];
Node_134 [shape=record,color=red,label="{134\:\ 0x0001|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x0018|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\lPHI: r0 \l  PHI: (r0v11 java.nio.charset.CharsetDecoder) = (r0v2 java.nio.charset.CharsetDecoder), (r0v15 java.nio.charset.CharsetDecoder) binds: [B:77:0x0010, B:78:0x0012] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x0020|if (kotlin.jvm.internal.Intrinsics.areEqual(r0.charset(), r13) == false) goto L67\l}"];
Node_98 [shape=record,color=red,label="{98\:\ 0x005a|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l}"];
Node_138 [shape=record,color=red,label="{138\:\ 0x005e|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_100 [shape=record,color=red,label="{100\:\ 0x005e|ADDED_TO_REGION\l}"];
Node_104 [shape=record,color=red,label="{104\:\ 0x0072|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l}"];
Node_139 [shape=record,color=red,label="{139\:\ 0x007a|SYNTHETIC\l}"];
Node_110 [shape=record,color=red,label="{110\:\ 0x0089|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l}"];
Node_112 [shape=record,color=red,label="{112\:\ 0x008d|TryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l}"];
Node_117 [shape=record,color=red,label="{117\:\ 0x00a2}"];
Node_120 [shape=record,color=red,label="{120\:\ 0x00a6|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l}"];
Node_121 [shape=record,color=red,label="{121\:\ 0x00ad|DONT_GENERATE\l}"];
Node_73 [shape=record,color=red,label="{73\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_127 [shape=record,color=red,label="{127\:\ 0x00c9|DONT_GENERATE\l}"];
Node_142 [shape=record,color=red,label="{142\:\ 0x0027|SYNTHETIC\l}"];
Node_141 [shape=record,color=red,label="{141\:\ 0x0027|LOOP_END\lSYNTHETIC\lLOOP:0: B:83:0x0027\-\>B:141:0x0027\lPHI: r0 r2 \l  PHI: (r0v5 'nBytes' int) = (r0v7 'nBytes' int), (r0v10 'nBytes' int) binds: [B:142:0x0027, B:143:0x0027] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v6 'nChars' int) = (r2v7 'nChars' int), (r2v1 'nChars' int) binds: [B:142:0x0027, B:143:0x0027] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_140 [shape=record,color=red,label="{140\:\ 0x005f|SYNTHETIC\l}"];
Node_143 [shape=record,color=red,label="{143\:\ 0x0027|SYNTHETIC\l}"];
Node_137 [shape=record,color=red,label="{137\:\ 0x0061|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_136 [shape=record,color=red,label="{136\:\ 0x0061|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_135 [shape=record,color=red,label="{135\:\ 0x0035|SYNTHETIC\l}"];
Node_85 [shape=record,color=red,label="{85\:\ 0x0035|TRY_LEAVE\lTryCatch #0 \{, blocks: (B:75:0x0001, B:78:0x0012, B:79:0x0018, B:83:0x0027, B:85:0x0035, B:94:0x004a, B:108:0x0081, B:110:0x0089, B:112:0x008d, B:114:0x0095, B:115:0x0097, B:120:0x00a6, B:123:0x00af, B:125:0x00c3, B:126:0x00c6, B:95:0x004f, B:98:0x005a, B:102:0x0061, B:104:0x0072, B:106:0x007a, B:129:0x00cb, B:81:0x0022), top: B:134:0x0001 \}\lCatch: all \-\> 0x00d1\l}"];
Node_86 [shape=record,color=red,label="{86\:\ 0x003d}"];
Node_87 [shape=record,color=red,label="{87\:\ 0x003f}"];
Node_92 [shape=record,color=red,label="{92\:\ 0x0048|DONT_GENERATE\l}"];
Node_88 [shape=record,color=red,label="{88\:\ 0x0041}"];
Node_131 [shape=record,color=red,label="{131\:\ 0x00d1|REMOVE\lExcHandler: all \-\> 0x00d1\l}"];
Node_133 [shape=record,color=red,label="{133\:\ 0x00d3|REMOVE\l|throw r12\l}"];
MethodNode[shape=record,label="{public final synchronized java.lang.String kotlin.io.LineReader.readLine((r11v0 'this' kotlin.io.LineReader A[IMMUTABLE_TYPE, THIS]), (r12v0 'inputStream' java.io.InputStream A[D('inputStream' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'charset' java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:122:0x00ae \-\> B:73:?, CROSS_EDGE: B:128:0x00ca \-\> B:73:?, CROSS_EDGE: B:124:0x00c1 \-\> B:126:0x00c6, CROSS_EDGE: B:118:0x00a3 \-\> B:119:0x00a4, CROSS_EDGE: B:113:0x0093 \-\> B:115:0x0097, CROSS_EDGE: B:111:0x008b \-\> B:115:0x0097, CROSS_EDGE: B:109:0x0087 \-\> B:115:0x0097, CROSS_EDGE: B:107:0x007f \-\> B:115:0x0097, CROSS_EDGE: B:90:0x0044 \-\> B:94:0x004a, CROSS_EDGE: B:89:0x0042 \-\> B:94:0x004a, CROSS_EDGE: B:88:0x0041 \-\> B:89:0x0042, CROSS_EDGE: B:106:0x007a \-\> B:107:0x007f, BACK_EDGE: B:129:0x00cb \-\> B:83:0x0027, CROSS_EDGE: B:103:0x0070 \-\> B:129:0x00cb, BACK_EDGE: B:101:0x005f \-\> B:83:0x0027, CROSS_EDGE: B:97:0x0058 \-\> B:102:0x0061, CROSS_EDGE: B:96:0x0056 \-\> B:102:0x0061, CROSS_EDGE: B:80:0x0020 \-\> B:82:0x0025, CROSS_EDGE: B:77:0x0010 \-\> B:79:0x0018, CROSS_EDGE: B:76:0x000e \-\> B:81:0x0022, CROSS_EDGE: B:133:0x00d3 \-\> B:73:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Code restructure failed: missing block: B:80:0x0020, code lost:\l    if (kotlin.jvm.internal.Intrinsics.areEqual(r0.charset(), r13) == false) goto L67;\l\}\l}"];
MethodNode -> Node_72;Node_75 -> Node_76;
Node_76 -> Node_77;
Node_76 -> Node_81[style=dashed];
Node_77 -> Node_78;
Node_77 -> Node_79[style=dashed];
Node_78 -> Node_79;
Node_81 -> Node_82;
Node_82 -> Node_83;
Node_83 -> Node_84;
Node_84 -> Node_95[style=dashed];
Node_84 -> Node_135;
Node_89 -> Node_90;
Node_89 -> Node_94[style=dashed];
Node_90 -> Node_91;
Node_90 -> Node_94[style=dashed];
Node_91 -> Node_92;
Node_91 -> Node_94[style=dashed];
Node_93 -> Node_73;
Node_94 -> Node_107;
Node_95 -> Node_96;
Node_96 -> Node_97;
Node_96 -> Node_136[style=dashed];
Node_97 -> Node_98;
Node_97 -> Node_137[style=dashed];
Node_99 -> Node_138[style=dashed];
Node_99 -> Node_140;
Node_101 -> Node_143;
Node_102 -> Node_103;
Node_103 -> Node_104;
Node_103 -> Node_129[style=dashed];
Node_105 -> Node_129[style=dashed];
Node_105 -> Node_139;
Node_106 -> Node_107;
Node_129 -> Node_142;
Node_107 -> Node_108;
Node_107 -> Node_115[style=dashed];
Node_108 -> Node_109;
Node_109 -> Node_110;
Node_109 -> Node_115[style=dashed];
Node_111 -> Node_112;
Node_111 -> Node_115[style=dashed];
Node_113 -> Node_114;
Node_113 -> Node_115[style=dashed];
Node_114 -> Node_115;
Node_115 -> Node_116;
Node_116 -> Node_117[style=dashed];
Node_116 -> Node_118;
Node_118 -> Node_119;
Node_119 -> Node_120;
Node_119 -> Node_123[style=dashed];
Node_122 -> Node_73;
Node_123 -> Node_124;
Node_124 -> Node_125;
Node_124 -> Node_126[style=dashed];
Node_125 -> Node_126;
Node_126 -> Node_127;
Node_128 -> Node_73;
Node_72 -> Node_74;
Node_74 -> Node_134;
Node_134 -> Node_75;
Node_134 -> Node_131;
Node_79 -> Node_80;
Node_80 -> Node_81;
Node_80 -> Node_82[style=dashed];
Node_98 -> Node_99;
Node_138 -> Node_100;
Node_100 -> Node_102;
Node_104 -> Node_105;
Node_139 -> Node_106;
Node_110 -> Node_111;
Node_112 -> Node_113;
Node_117 -> Node_119;
Node_120 -> Node_121;
Node_121 -> Node_122;
Node_127 -> Node_128;
Node_142 -> Node_141;
Node_141 -> Node_83;
Node_140 -> Node_101;
Node_143 -> Node_141;
Node_137 -> Node_102;
Node_136 -> Node_102;
Node_135 -> Node_85;
Node_85 -> Node_86;
Node_86 -> Node_87;
Node_86 -> Node_88;
Node_87 -> Node_89;
Node_92 -> Node_93;
Node_88 -> Node_89;
Node_131 -> Node_133;
Node_133 -> Node_73;
}

