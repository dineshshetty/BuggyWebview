digraph "CFG forkotlin.io.LineReader.decodeEndOfInput(II)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: SGET  (r0 I:java.nio.ByteBuffer) =  kotlin.io.LineReader.byteBuf java.nio.ByteBuffer  (LINE:264)\l0x0002: INVOKE  (r0 I:java.nio.ByteBuffer), (r6 I:int A[D('nBytes' int)]) type: VIRTUAL call: java.nio.ByteBuffer.limit(int):java.nio.Buffer A[MD:(int):java.nio.Buffer (c)]\l0x0005: SGET  (r1 I:java.nio.CharBuffer) =  kotlin.io.LineReader.charBuf java.nio.CharBuffer  (LINE:265)\l0x0007: INVOKE  (r1 I:java.nio.CharBuffer), (r7 I:int A[D('nChars' int)]) type: VIRTUAL call: java.nio.CharBuffer.position(int):java.nio.Buffer A[MD:(int):java.nio.Buffer (c)]\l0x000a: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:266)\l0x000b: INVOKE  (r1 I:int) = (r5 I:kotlin.io.LineReader), (r1 I:boolean) type: DIRECT call: kotlin.io.LineReader.decode(boolean):int A[MD:(boolean):int (m)]\l0x000f: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: SGET  (r4 I:java.nio.charset.CharsetDecoder) =  kotlin.io.LineReader.decoder java.nio.charset.CharsetDecoder  (LINE:268)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0013|0x0013: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x001b \l}"];
Node_11 [shape=record,label="{11\:\ 0x0015|0x0015: CONST_STR  (r4 I:java.lang.String) =  \"decoder\" \l0x0017: INVOKE  (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.throwUninitializedPropertyAccessException(java.lang.String):void A[MD:(java.lang.String):void (m)]\l0x001a: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001b|0x001b: INVOKE  (r4 I:java.nio.charset.CharsetDecoder) type: VIRTUAL call: java.nio.charset.CharsetDecoder.reset():java.nio.charset.CharsetDecoder A[MD:():java.nio.charset.CharsetDecoder (c)]\l0x001e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:269)\l0x001f: INVOKE  (r0 I:java.nio.ByteBuffer), (r4 I:int) type: VIRTUAL call: java.nio.ByteBuffer.position(int):java.nio.Buffer A[MD:(int):java.nio.Buffer (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0023|RETURN\l|0x0023: RETURN  (r1 I:int)  (LINE:266)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private final int kotlin.io.LineReader.decodeEndOfInput((r5 'this' I:kotlin.io.LineReader A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('nBytes' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('nChars' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0013 \-\> B:12:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0023: r2 'it' I\l  0x0011\-0x0023: r3 '$i$a$\-also\-LineReader$decodeEndOfInput$1' I\l  \-1 \-0x0023: r6 'nBytes' I\l  \-1 \-0x0023: r7 'nChars' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

