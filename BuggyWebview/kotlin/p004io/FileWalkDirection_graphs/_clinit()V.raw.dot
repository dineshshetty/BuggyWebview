digraph "CFG forkotlin.io.FileWalkDirection.\<clinit\>()V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.io.FileWalkDirection) =  kotlin.io.FileWalkDirection  (LINE:22)\l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"TOP_DOWN\" \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:kotlin.io.FileWalkDirection), (r1 I:java.lang.String), (r2 I:int) type: DIRECT call: kotlin.io.FileWalkDirection.\<init\>(java.lang.String, int):void A[MD:(java.lang.String, int):void (m)]\l0x0008: SPUT  (r0 I:kotlin.io.FileWalkDirection) kotlin.io.FileWalkDirection.TOP_DOWN kotlin.io.FileWalkDirection \l0x000a: NEW_INSTANCE  (r0 I:kotlin.io.FileWalkDirection) =  kotlin.io.FileWalkDirection  (LINE:24)\l0x000c: CONST_STR  (r1 I:java.lang.String) =  \"BOTTOM_UP\" \l0x000e: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000f: INVOKE  (r0 I:kotlin.io.FileWalkDirection), (r1 I:java.lang.String), (r2 I:int) type: DIRECT call: kotlin.io.FileWalkDirection.\<init\>(java.lang.String, int):void A[MD:(java.lang.String, int):void (m)]\l0x0012: SPUT  (r0 I:kotlin.io.FileWalkDirection) kotlin.io.FileWalkDirection.BOTTOM_UP kotlin.io.FileWalkDirection \l0x0014: INVOKE  (r0 I:kotlin.io.FileWalkDirection[]) =  type: STATIC call: kotlin.io.FileWalkDirection.$values():kotlin.io.FileWalkDirection[] A[MD:():kotlin.io.FileWalkDirection[] (m)]\l0x0018: SPUT  (r0 I:kotlin.io.FileWalkDirection[]) kotlin.io.FileWalkDirection.$VALUES kotlin.io.FileWalkDirection[] \l}"];
Node_7 [shape=record,label="{7\:\ 0x001a|RETURN\l|0x001a: RETURN   \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{static void kotlin.io.FileWalkDirection.\<clinit\>()  | DONT_GENERATE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

