digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.directoryState(Ljava\/io\/File;)Lkotlin\/io\/FileTreeWalk$DirectoryState;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.io.FileTreeWalk) = (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.this$0 kotlin.io.FileTreeWalk  (LINE:89)\l0x0002: INVOKE  (r0 I:kotlin.io.FileWalkDirection) = (r0 I:kotlin.io.FileTreeWalk) type: STATIC call: kotlin.io.FileTreeWalk.access$getDirection$p(kotlin.io.FileTreeWalk):kotlin.io.FileWalkDirection A[MD:(kotlin.io.FileTreeWalk):kotlin.io.FileWalkDirection (m)]\l0x0006: SGET  (r1 I:int[]) =  kotlin.io.FileTreeWalk.FileTreeWalkIterator.WhenMappings.$EnumSwitchMapping$0 int[] \l0x0008: INVOKE  (r0 I:int) = (r0 I:kotlin.io.FileWalkDirection) type: VIRTUAL call: kotlin.io.FileWalkDirection.ordinal():int A[MD:():int (c)]\l0x000c: AGET  (r0 I:??[int, float, short, byte, char]) = (r1 I:??[int, float][]), (r0 I:??[int, short, byte, char]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x000e|0x000e: SWITCH  (r0 I:??)\l case 1: goto B:17:0x001f\l case 2: goto B:16:0x0017\l default: goto B:14:0x0011 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|0x0011: NEW_INSTANCE  (r0 I:kotlin.NoWhenBranchMatchedException) =  kotlin.NoWhenBranchMatchedException  (LINE:91)\l0x0013: INVOKE  (r0 I:kotlin.NoWhenBranchMatchedException) type: DIRECT call: kotlin.NoWhenBranchMatchedException.\<init\>():void A[MD:():void (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0017|0x0017: NEW_INSTANCE  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState) =  kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState \l0x0019: INVOKE  \l  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$BottomUpDirectoryState)\l  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator)\l  (r3 I:java.io.File A[D('root' java.io.File)])\l type: DIRECT call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.BottomUpDirectoryState.\<init\>(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File):void A[MD:(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File):void (m)]\l0x001c: CHECK_CAST (r0 I:kotlin.io.FileTreeWalk$DirectoryState) = (kotlin.io.FileTreeWalk$DirectoryState) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|0x0026: RETURN  (r0 I:kotlin.io.FileTreeWalk$DirectoryState) A[SYNTHETIC] (LINE:89)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|0x001f: NEW_INSTANCE  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) =  kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState  (LINE:90)\l0x0021: INVOKE  \l  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState)\l  (r2 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator)\l  (r3 I:java.io.File A[D('root' java.io.File)])\l type: DIRECT call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.\<init\>(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File):void A[MD:(kotlin.io.FileTreeWalk$FileTreeWalkIterator, java.io.File):void (m)]\l0x0024: CHECK_CAST (r0 I:kotlin.io.FileTreeWalk$DirectoryState) = (kotlin.io.FileTreeWalk$DirectoryState) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|RETURN\lORIG_RETURN\l|0x0026: RETURN  (r0 I:kotlin.io.FileTreeWalk$DirectoryState)  (LINE:89)\l}"];
MethodNode[shape=record,label="{private final kotlin.io.FileTreeWalk$DirectoryState kotlin.io.FileTreeWalk.FileTreeWalkIterator.directoryState((r2 'this' I:kotlin.io.FileTreeWalk$FileTreeWalkIterator A[IMMUTABLE_TYPE, THIS]), (r3 I:java.io.File A[D('root' java.io.File), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:18:0x0026 \-\> B:11:?, CROSS_EDGE: B:17:0x001f \-\> B:18:0x0026\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002f: r3 'root' Ljava\/io\/File;\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14;
Node_13 -> Node_16;
Node_13 -> Node_17;
Node_14 -> Node_15;
Node_15 -> Node_11;
Node_16 -> Node_19;
Node_19 -> Node_11;
Node_17 -> Node_18;
Node_18 -> Node_11;
}

