digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.computeNext()V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:java.io.File) = (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) type: DIRECT call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.gotoNext():java.io.File A[MD:():java.io.File (m)] (LINE:80)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nextFile' java.io.File)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000a  (LINE:81)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|0x0006: INVOKE  (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator), (r0 I:java.lang.Object A[D('nextFile' java.io.File)]) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.setNext(java.lang.Object):void A[MD:(T):void (m)] (LINE:82)\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x000d: RETURN   A[SYNTHETIC] (LINE:85)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000a|0x000a: INVOKE  (r1 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.done():void A[MD:():void (m)] (LINE:84)\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|RETURN\lORIG_RETURN\l|0x000d: RETURN    (LINE:85)\l}"];
MethodNode[shape=record,label="{protected void kotlin.io.FileTreeWalk.FileTreeWalkIterator.computeNext((r1 'this' I:kotlin.io.FileTreeWalk$FileTreeWalkIterator A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000a \-\> B:14:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x000d: r0 'nextFile' Ljava\/io\/File;\lMETHOD_OVERRIDE: [kotlin.collections.AbstractIterator.computeNext():void]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

