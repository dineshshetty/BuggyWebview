digraph "CFG forkotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.step()Ljava\/io\/File;" {
Node_39 [shape=record,label="{39\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.rootVisited boolean  (LINE:166)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x002c \l}"];
Node_43 [shape=record,label="{43\:\ 0x0005|0x0005: IGET  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.this$0 kotlin.io.FileTreeWalk$FileTreeWalkIterator  (LINE:168)\l0x0007: IGET  (r0 I:kotlin.io.FileTreeWalk) = (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.this$0 kotlin.io.FileTreeWalk \l0x0009: INVOKE  (r0 I:kotlin.jvm.functions.Function1) = (r0 I:kotlin.io.FileTreeWalk) type: STATIC call: kotlin.io.FileTreeWalk.access$getOnEnter$p(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function1 A[MD:(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function1 (m)]\l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_44 [shape=record,label="{44\:\ 0x000f|0x000f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0022 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0011|0x0011: INVOKE  (r4 I:java.io.File) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.getRoot():java.io.File A[MD:():java.io.File (m)]\l0x0015: INVOKE  (r0 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function1), (r4 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0019: CHECK_CAST (r0 I:java.lang.Boolean) = (java.lang.Boolean) (r0 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x001f|0x001f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0022 \l}"];
Node_47 [shape=record,label="{47\:\ 0x0021|0x0021: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x0022|0x0022: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0025 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0024|RETURN\l|0x0024: RETURN  (r1 I:java.io.File)  (LINE:169)\l}"];
Node_40 [shape=record,label="{40\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x0025|0x0025: IPUT  (r3 I:boolean), (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.rootVisited boolean  (LINE:172)\l0x0027: INVOKE  (r0 I:java.io.File) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.getRoot():java.io.File A[MD:():java.io.File (m)] (LINE:173)\l}"];
Node_51 [shape=record,label="{51\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:java.io.File) \l}"];
Node_52 [shape=record,label="{52\:\ 0x002c|0x002c: IGET  (r0 I:java.io.File[]) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileList java.io.File[]  (LINE:174)\l}"];
Node_53 [shape=record,label="{53\:\ 0x002e|0x002e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x004b \l}"];
Node_54 [shape=record,label="{54\:\ 0x0030|0x0030: IGET  (r2 I:int) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileIndex int \l0x0032: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0035: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0036|0x0036: IF  (r2 I:??[int, byte, short, char]) \>= (r0 I:??[int, byte, short, char])  \-\> B:57:0x0039 \l}"];
Node_57 [shape=record,label="{57\:\ 0x0039|0x0039: IGET  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.this$0 kotlin.io.FileTreeWalk$FileTreeWalkIterator  (LINE:190)\l0x003b: IGET  (r0 I:kotlin.io.FileTreeWalk) = (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.this$0 kotlin.io.FileTreeWalk \l0x003d: INVOKE  (r0 I:kotlin.jvm.functions.Function1) = (r0 I:kotlin.io.FileTreeWalk) type: STATIC call: kotlin.io.FileTreeWalk.access$getOnLeave$p(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function1 A[MD:(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function1 (m)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0041|0x0041: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x004a \l}"];
Node_59 [shape=record,label="{59\:\ 0x0043|0x0043: INVOKE  (r2 I:java.io.File) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.getRoot():java.io.File A[MD:():java.io.File (m)]\l0x0047: INVOKE  (r0 I:kotlin.jvm.functions.Function1), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x004a|RETURN\l|0x004a: RETURN  (r1 I:java.io.File)  (LINE:191)\l}"];
Node_61 [shape=record,label="{61\:\ 0x004b|0x004b: IGET  (r0 I:java.io.File[]) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileList java.io.File[]  (LINE:175)\l}"];
Node_62 [shape=record,label="{62\:\ 0x004d|0x004d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0097 \l}"];
Node_63 [shape=record,label="{63\:\ 0x004f|0x004f: INVOKE  (r0 I:java.io.File) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.getRoot():java.io.File A[MD:():java.io.File (m)] (LINE:177)\l0x0053: INVOKE  (r0 I:java.io.File[]) = (r0 I:java.io.File) type: VIRTUAL call: java.io.File.listFiles():java.io.File[] A[MD:():java.io.File[] (c)]\l0x0057: IPUT  (r0 I:java.io.File[]), (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileList java.io.File[] \l}"];
Node_64 [shape=record,label="{64\:\ 0x0059|0x0059: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x007b  (LINE:178)\l}"];
Node_65 [shape=record,label="{65\:\ 0x005b|0x005b: IGET  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.this$0 kotlin.io.FileTreeWalk$FileTreeWalkIterator  (LINE:179)\l0x005d: IGET  (r0 I:kotlin.io.FileTreeWalk) = (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.this$0 kotlin.io.FileTreeWalk \l0x005f: INVOKE  (r0 I:kotlin.jvm.functions.Function2) = (r0 I:kotlin.io.FileTreeWalk) type: STATIC call: kotlin.io.FileTreeWalk.access$getOnFail$p(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function2 A[MD:(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function2 (m)]\l}"];
Node_66 [shape=record,label="{66\:\ 0x0063|0x0063: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x007b \l}"];
Node_67 [shape=record,label="{67\:\ 0x0065|0x0065: INVOKE  (r2 I:java.io.File) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.getRoot():java.io.File A[MD:():java.io.File (m)]\l0x0069: NEW_INSTANCE  (r9 I:kotlin.io.AccessDeniedException) =  kotlin.io.AccessDeniedException \l0x006b: INVOKE  (r4 I:java.io.File) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.getRoot():java.io.File A[MD:():java.io.File (m)]\l0x006f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0070: CONST  (r7 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0071: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0072: CONST_STR  (r6 I:java.lang.String) =  \"Cannot list files in a directory\" \l0x0074: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY]) \l0x0075: INVOKE  \l  (r3 I:kotlin.io.AccessDeniedException)\l  (r4 I:java.io.File)\l  (r5 I:java.io.File)\l  (r6 I:java.lang.String)\l  (r7 I:int)\l  (r8 I:kotlin.jvm.internal.DefaultConstructorMarker)\l type: DIRECT call: kotlin.io.AccessDeniedException.\<init\>(java.io.File, java.io.File, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker):void A[MD:(java.io.File, java.io.File, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker):void (m)]\l0x0078: INVOKE  (r0 I:kotlin.jvm.functions.Function2), (r2 I:java.lang.Object), (r9 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l}"];
Node_68 [shape=record,label="{68\:\ 0x007b|0x007b: IGET  (r0 I:java.io.File[]) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileList java.io.File[]  (LINE:181)\l}"];
Node_69 [shape=record,label="{69\:\ 0x007d|0x007d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x0085 \l}"];
Node_70 [shape=record,label="{70\:\ 0x007f|0x007f: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0082: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x0083|0x0083: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0097 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0085|0x0085: IGET  (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.this$0 kotlin.io.FileTreeWalk$FileTreeWalkIterator  (LINE:182)\l0x0087: IGET  (r0 I:kotlin.io.FileTreeWalk) = (r0 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator) kotlin.io.FileTreeWalk.FileTreeWalkIterator.this$0 kotlin.io.FileTreeWalk \l0x0089: INVOKE  (r0 I:kotlin.jvm.functions.Function1) = (r0 I:kotlin.io.FileTreeWalk) type: STATIC call: kotlin.io.FileTreeWalk.access$getOnLeave$p(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function1 A[MD:(kotlin.io.FileTreeWalk):kotlin.jvm.functions.Function1 (m)]\l}"];
Node_73 [shape=record,label="{73\:\ 0x008d|0x008d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x0096 \l}"];
Node_74 [shape=record,label="{74\:\ 0x008f|0x008f: INVOKE  (r2 I:java.io.File) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) type: VIRTUAL call: kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.getRoot():java.io.File A[MD:():java.io.File (m)]\l0x0093: INVOKE  (r0 I:kotlin.jvm.functions.Function1), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
Node_75 [shape=record,label="{75\:\ 0x0096|RETURN\l|0x0096: RETURN  (r1 I:java.io.File)  (LINE:183)\l}"];
Node_76 [shape=record,label="{76\:\ 0x0097|0x0097: IGET  (r0 I:java.io.File[]) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileList java.io.File[]  (LINE:187)\l0x0099: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x009c: IGET  (r1 I:int) = (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileIndex int \l0x009e: ARITH  (r2 I:int) = (r1 I:int) + (1 int) \l0x00a0: IPUT  (r2 I:int), (r10 I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState) kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.fileIndex int \l0x00a2: AGET  (r0 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]) \l}"];
Node_77 [shape=record,label="{77\:\ 0x00a4|RETURN\l|0x00a4: RETURN  (r0 I:java.io.File) \l}"];
MethodNode[shape=record,label="{public java.io.File kotlin.io.FileTreeWalk.FileTreeWalkIterator.TopDownDirectoryState.step((r10 'this' I:kotlin.io.FileTreeWalk$FileTreeWalkIterator$TopDownDirectoryState A[IMMUTABLE_TYPE, THIS]))  | INCONSISTENT_CODE\lUSE_LINES_HINTS\lCROSS_EDGE: B:51:0x002b \-\> B:40:?, CROSS_EDGE: B:46:0x001f \-\> B:48:0x0022, CROSS_EDGE: B:44:0x000f \-\> B:48:0x0022, CROSS_EDGE: B:60:0x004a \-\> B:40:?, CROSS_EDGE: B:58:0x0041 \-\> B:60:0x004a, CROSS_EDGE: B:75:0x0096 \-\> B:40:?, CROSS_EDGE: B:73:0x008d \-\> B:75:0x0096, CROSS_EDGE: B:77:0x00a4 \-\> B:40:?, CROSS_EDGE: B:69:0x007d \-\> B:72:0x0085, CROSS_EDGE: B:66:0x0063 \-\> B:68:0x007b, CROSS_EDGE: B:64:0x0059 \-\> B:68:0x007b, CROSS_EDGE: B:62:0x004d \-\> B:76:0x0097, CROSS_EDGE: B:53:0x002e \-\> B:61:0x004b\lINLINE_NOT_NEEDED\lMETHOD_OVERRIDE: [kotlin.io.FileTreeWalk.WalkState.step():java.io.File]\l}"];
MethodNode -> Node_39;Node_39 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_52;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_48;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_40;
Node_50 -> Node_51;
Node_51 -> Node_40;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_61;
Node_54 -> Node_55;
Node_55 -> Node_57;
Node_55 -> Node_61[style=dashed];
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_60;
Node_60 -> Node_40;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_76;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_68;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_72;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_76;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_75;
Node_74 -> Node_75;
Node_75 -> Node_40;
Node_76 -> Node_77;
Node_77 -> Node_40;
}

