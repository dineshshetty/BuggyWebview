digraph "CFG forkotlin.io.FilesKt__FilePathComponentsKt.getRootLength$FilesKt__FilePathComponentsKt(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$getRootLength' java.lang.String)])  (LINE:28)\l0x0001: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x0003: SGET  (r1 I:char) =  java.io.File.separatorChar char \l0x0005: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r4 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0008: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:int) = (r0 I:java.lang.CharSequence), (r1 I:char), (r2 I:int), (r3 I:boolean), (r4 I:int), (r5 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int (m)]\l0x000d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:29)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0046 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0010|0x0010: INVOKE  (r2 I:int) = (r10 I:java.lang.String A[D('$this$getRootLength' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:30)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|0x0014: IF  (r2 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:16:0x0045 \l}"];
Node_6 [shape=record,label="{6\:\ 0x0016|0x0016: INVOKE  (r2 I:char) = (r10 I:java.lang.String A[D('$this$getRootLength' java.lang.String)]), (r1 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l0x001a: SGET  (r3 I:char) =  java.io.File.separatorChar char \l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0045 \l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|0x001e: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$getRootLength' java.lang.String)])  (LINE:34)\l0x001f: CHECK_CAST (r4 I:java.lang.CharSequence) = (java.lang.CharSequence) (r4 I:??[OBJECT, ARRAY]) \l0x0021: SGET  (r5 I:char) =  java.io.File.separatorChar char \l0x0023: CONST  (r6 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0024: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: CONST  (r8 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0026: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: INVOKE  (r0 I:int A[D('first' int)]) = (r4 I:java.lang.CharSequence), (r5 I:char), (r6 I:int), (r7 I:boolean), (r8 I:int), (r9 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int (m)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|0x002b: IF  (r0 I:??[int, byte, short, char] A[D('first' int)]) \< (0 ??[int, byte, short, char])  \-\> B:16:0x0045  (LINE:35)\l}"];
Node_10 [shape=record,label="{10\:\ 0x002d|0x002d: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$getRootLength' java.lang.String)])  (LINE:36)\l0x002e: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l0x0030: SGET  (r3 I:char) =  java.io.File.separatorChar char \l0x0032: ARITH  (r4 I:int) = (r0 I:int A[D('first' int)]) + (1 int) \l0x0034: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0035: CONST  (r6 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x0036: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0037: INVOKE  (r0 I:int A[D('first' int)]) = (r2 I:java.lang.CharSequence), (r3 I:char), (r4 I:int), (r5 I:boolean), (r6 I:int), (r7 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, char, int, boolean, int, java.lang.Object):int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x003b|0x003b: IF  (r0 I:??[int, byte, short, char] A[D('first' int)]) \< (0 ??[int, byte, short, char])  \-\> B:14:0x0040  (LINE:37)\l}"];
Node_12 [shape=record,label="{12\:\ 0x003d|0x003d: ARITH  (r1 I:int) = (r0 I:int A[D('first' int)]) + (1 int)  (LINE:38)\l}"];
Node_13 [shape=record,label="{13\:\ 0x003f|RETURN\l|0x003f: RETURN  (r1 I:int) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0040|0x0040: INVOKE  (r1 I:int) = (r10 I:java.lang.String A[D('$this$getRootLength' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:40)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|RETURN\l|0x0044: RETURN  (r1 I:int) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0045|RETURN\l|0x0045: RETURN  (r1 I:int)  (LINE:43)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0046|0x0046: CONST  (r2 I:??[int, float, short, byte, char]) = (58 ??[int, float, short, byte, char])  (LINE:46)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0048|0x0048: IF  (r0 I:??[int, byte, short, char] A[D('first' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:23:0x0054 \l}"];
Node_19 [shape=record,label="{19\:\ 0x004a|0x004a: ARITH  (r3 I:int) = (r0 I:int A[D('first' int)]) + (\-1 int) \l0x004c: INVOKE  (r3 I:char) = (r10 I:java.lang.String A[D('$this$getRootLength' java.lang.String)]), (r3 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0050|0x0050: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0054 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0052|0x0052: ARITH  (r0 I:int) = (r0 I:int A[D('first' int)]) + (r1 I:int)  (LINE:47)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|RETURN\l|0x0053: RETURN  (r0 I:int A[D('first' int)])  (LINE:48)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0054|0x0054: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:51)\l0x0055: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0056|0x0056: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0068 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0058|0x0058: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$getRootLength' java.lang.String)]) \l0x0059: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x005b: CONST  (r4 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x005c: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x005d: INVOKE  (r1 I:boolean) = (r1 I:java.lang.CharSequence), (r2 I:char), (r3 I:boolean), (r4 I:int), (r5 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.endsWith$default(java.lang.CharSequence, char, boolean, int, java.lang.Object):boolean A[MD:(java.lang.CharSequence, char, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0061|0x0061: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0068 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0063|0x0063: INVOKE  (r1 I:int) = (r10 I:java.lang.String A[D('$this$getRootLength' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:52)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0067|RETURN\l|0x0067: RETURN  (r1 I:int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0068|RETURN\l|0x0068: RETURN  (r3 I:int)  (LINE:53)\l}"];
MethodNode[shape=record,label="{private static final int kotlin.io.FilesKt__FilePathComponentsKt.getRootLength$FilesKt__FilePathComponentsKt((r10 I:java.lang.String A[D('$this$getRootLength' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0044 \-\> B:1:?, CROSS_EDGE: B:16:0x0045 \-\> B:1:?, CROSS_EDGE: B:7:0x001c \-\> B:16:0x0045, CROSS_EDGE: B:5:0x0014 \-\> B:16:0x0045, CROSS_EDGE: B:22:0x0053 \-\> B:1:?, CROSS_EDGE: B:28:0x0067 \-\> B:1:?, CROSS_EDGE: B:29:0x0068 \-\> B:1:?, CROSS_EDGE: B:24:0x0056 \-\> B:29:0x0068, CROSS_EDGE: B:18:0x0048 \-\> B:23:0x0054\lDebug Info:\l  0x000d\-0x0068: r0 'first' I\l  \-1 \-0x0068: r10 '$this$getRootLength' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_17;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_16;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_16;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_16;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_14 -> Node_15;
Node_15 -> Node_1;
Node_16 -> Node_1;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_22;
Node_22 -> Node_1;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_29;
Node_27 -> Node_28;
Node_28 -> Node_1;
Node_29 -> Node_1;
}

