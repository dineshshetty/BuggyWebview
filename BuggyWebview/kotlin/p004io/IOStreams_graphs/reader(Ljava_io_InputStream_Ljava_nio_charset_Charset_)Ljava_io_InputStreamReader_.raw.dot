digraph "CFG forkotlin.io.ByteStreamsKt.reader(Ljava\/io\/InputStream;Ljava\/nio\/charset\/Charset;)Ljava\/io\/InputStreamReader;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$reader' java.io.InputStream)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"charset\" \l0x0007: INVOKE  (r2 I:java.lang.Object A[D('charset' java.nio.charset.Charset)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: NEW_INSTANCE  (r0 I:java.io.InputStreamReader) =  java.io.InputStreamReader  (LINE:76)\l0x000c: INVOKE  \l  (r0 I:java.io.InputStreamReader)\l  (r1 I:java.io.InputStream A[D('$this$reader' java.io.InputStream)])\l  (r2 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset)])\l type: DIRECT call: java.io.InputStreamReader.\<init\>(java.io.InputStream, java.nio.charset.Charset):void A[MD:(java.io.InputStream, java.nio.charset.Charset):void (c)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:java.io.InputStreamReader) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.io.InputStreamReader kotlin.io.ByteStreamsKt.reader((r1 I:java.io.InputStream A[D('$this$reader' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r1 '$this$reader' Ljava\/io\/InputStream;\l  \-1 \-0x000f: r2 'charset' Ljava\/nio\/charset\/Charset;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

