digraph "CFG forkotlin.io.ByteStreamsKt.readBytes(Ljava\/io\/InputStream;I)[B" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$readBytes' java.io.InputStream)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:java.io.ByteArrayOutputStream) =  java.io.ByteArrayOutputStream  (LINE:123)\l0x0007: INVOKE  (r1 I:int) = (r5 I:java.io.InputStream A[D('$this$readBytes' java.io.InputStream)]) type: VIRTUAL call: java.io.InputStream.available():int A[MD:():int throws java.io.IOException (c)]\l0x000b: INVOKE  (r1 I:int) = (r6 I:int A[D('estimatedSize' int)]), (r1 I:int) type: STATIC call: java.lang.Math.max(int, int):int A[MD:(int, int):int (c)]\l0x000f: INVOKE  (r0 I:java.io.ByteArrayOutputStream), (r1 I:int) type: DIRECT call: java.io.ByteArrayOutputStream.\<init\>(int):void A[MD:(int):void (c)]\l0x0012: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('buffer' java.io.ByteArrayOutputStream)])  (LINE:124)\l0x0013: CHECK_CAST (r1 I:java.io.OutputStream) = (java.io.OutputStream) (r1 I:??[OBJECT, ARRAY]) \l0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0017: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: INVOKE  \l  (r5 I:java.io.InputStream A[D('$this$readBytes' java.io.InputStream)])\l  (r1 I:java.io.OutputStream)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:java.lang.Object)\l type: STATIC call: kotlin.io.ByteStreamsKt.copyTo$default(java.io.InputStream, java.io.OutputStream, int, int, java.lang.Object):long A[MD:(java.io.InputStream, java.io.OutputStream, int, int, java.lang.Object):long (m)]\l0x001b: INVOKE  (r1 I:byte[]) = (r0 I:java.io.ByteArrayOutputStream A[D('buffer' java.io.ByteArrayOutputStream)]) type: VIRTUAL call: java.io.ByteArrayOutputStream.toByteArray():byte[] A[MD:():byte[] (c)] (LINE:125)\l0x001f: CONST_STR  (r2 I:java.lang.String) =  \"buffer.toByteArray()\" \l0x0021: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0024|RETURN\l|0x0024: RETURN  (r1 I:byte[]) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final byte[] kotlin.io.ByteStreamsKt.readBytes((r5 I:java.io.InputStream A[D('$this$readBytes' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('estimatedSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=Use readBytes() overload without estimatedSize parameter, replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=readBytes(), imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{errorSince=1.5, warningSince=1.3\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0024: r0 'buffer' Ljava\/io\/ByteArrayOutputStream;\l  \-1 \-0x0024: r5 '$this$readBytes' Ljava\/io\/InputStream;\l  \-1 \-0x0024: r6 'estimatedSize' I\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

