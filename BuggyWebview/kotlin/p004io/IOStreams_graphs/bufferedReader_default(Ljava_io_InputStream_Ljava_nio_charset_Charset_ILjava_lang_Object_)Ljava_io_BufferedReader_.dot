digraph "CFG forkotlin.io.ByteStreamsKt.bufferedReader$default(Ljava\/io\/InputStream;Ljava\/nio\/charset\/Charset;ILjava\/lang\/Object;)Ljava\/io\/BufferedReader;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0002|if ((r3 & 1) == 0) goto L4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|java.nio.charset.Charset r2 = kotlin.text.Charsets.UTF_8\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|PHI: r2 \l  PHI: (r2v1 'charset' java.nio.charset.Charset) = (r2v0 'charset' java.nio.charset.Charset), (r2v2 'charset' java.nio.charset.Charset) binds: [B:14:0x0002, B:15:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"charset\")\ljava.io.Reader r3 = new java.io.InputStreamReader(r1, r2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|if ((r3 instanceof java.io.BufferedReader) == false) goto L9\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return (java.io.BufferedReader) r3\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020}"];
Node_20 [shape=record,label="{20\:\ 0x0026|RETURN\lORIG_RETURN\l|return new java.io.BufferedReader(r3, 8192)\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.io.BufferedReader kotlin.io.ByteStreamsKt.bufferedReader$default((r1v0 '$this$bufferedReader_u24default' java.io.InputStream A[D('$this$bufferedReader_u24default' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'charset' java.nio.charset.Charset A[D('charset' java.nio.charset.Charset), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:19:0x0020 \-\> B:20:0x0026, CROSS_EDGE: B:14:0x0002 \-\> B:16:0x0006\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
}

