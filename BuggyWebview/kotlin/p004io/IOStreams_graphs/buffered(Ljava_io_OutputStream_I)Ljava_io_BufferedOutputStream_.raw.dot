digraph "CFG forkotlin.io.ByteStreamsKt.buffered(Ljava\/io\/OutputStream;I)Ljava\/io\/BufferedOutputStream;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$buffered' java.io.OutputStream)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INSTANCE_OF  (r0 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('$this$buffered' java.io.OutputStream)]) java.io.BufferedOutputStream  (LINE:88)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$buffered' java.io.OutputStream)]) \l0x000a: CHECK_CAST (r0 I:java.io.BufferedOutputStream) = (java.io.BufferedOutputStream) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0012: RETURN  (r0 I:java.io.BufferedOutputStream) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:java.io.BufferedOutputStream) =  java.io.BufferedOutputStream \l0x000f: INVOKE  \l  (r0 I:java.io.BufferedOutputStream)\l  (r1 I:java.io.OutputStream A[D('$this$buffered' java.io.OutputStream)])\l  (r2 I:int A[D('bufferSize' int)])\l type: DIRECT call: java.io.BufferedOutputStream.\<init\>(java.io.OutputStream, int):void A[MD:(java.io.OutputStream, int):void (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: RETURN  (r0 I:java.io.BufferedOutputStream) \l}"];
MethodNode[shape=record,label="{private static final java.io.BufferedOutputStream kotlin.io.ByteStreamsKt.buffered((r1 I:java.io.OutputStream A[D('$this$buffered' java.io.OutputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('bufferSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000d \-\> B:14:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r1 '$this$buffered' Ljava\/io\/OutputStream;\l  \-1 \-0x0012: r2 'bufferSize' I\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

