digraph "CFG forkotlin.io.ByteStreamsKt.buffered$default(Ljava\/io\/InputStream;IILjava\/lang\/Object;)Ljava\/io\/BufferedInputStream;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0002|if ((r2 & 1) == 0) goto L4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|r1 = 8192\l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|PHI: r1 \l  PHI: (r1v1 'bufferSize' int) = (r1v0 'bufferSize' int), (r1v2 'bufferSize' int) binds: [B:14:0x0002, B:15:0x0004] A[DONT_GENERATE, DONT_INLINE]\l|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, \"\<this\>\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|if ((r0 instanceof java.io.BufferedInputStream) == false) goto L9\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|return (java.io.BufferedInputStream) r0\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0013}"];
Node_20 [shape=record,label="{20\:\ 0x0018|RETURN\lORIG_RETURN\l|return new java.io.BufferedInputStream(r0, r1)\l}"];
MethodNode[shape=record,label="{static \/* synthetic *\/ java.io.BufferedInputStream kotlin.io.ByteStreamsKt.buffered$default((r0v0 '$this$buffered_u24default' java.io.InputStream A[D('$this$buffered_u24default' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r1v0 'bufferSize' int A[D('bufferSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:19:0x0013 \-\> B:20:0x0018, CROSS_EDGE: B:14:0x0002 \-\> B:16:0x0006\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
Node_20 -> Node_12;
}

