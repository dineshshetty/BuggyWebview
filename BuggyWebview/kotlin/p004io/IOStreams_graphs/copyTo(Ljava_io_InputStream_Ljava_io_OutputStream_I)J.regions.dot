digraph "CFG forkotlin.io.ByteStreamsKt.copyTo(Ljava\/io\/InputStream;Ljava\/io\/OutputStream;I)J" {
subgraph cluster_Region_1033678646 {
label = "R(3:1|(1:3)|5)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"out\")\llong r0 = 0\lbyte[] byte[] r2 = new byte[r8]\lint int r3 = r6.read(r2)\l}"];
subgraph cluster_LoopRegion_1786769317 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0012|LOOP_START\lLOOP:0: B:10:0x0012\-\>B:11:0x0014\lPHI: r0 r3 \l  PHI: (r0v3 'bytesCopied' long) = (r0v2 'bytesCopied' long), (r0v4 'bytesCopied' long) binds: [B:9:0x0000, B:11:0x0014] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'bytes' int) = (r3v0 'bytes' int), (r3v2 'bytes' int) binds: [B:9:0x0000, B:11:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= 0) goto L3\l}"];
subgraph cluster_Region_627484657 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0014|LOOP_END\lLOOP:0: B:10:0x0012\-\>B:11:0x0014\l|r7.write(r2, 0, r3)\lr0 += r3\lint r3 = r6.read(r2)\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x001f|RETURN\l|return r0\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001f|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final long kotlin.io.ByteStreamsKt.copyTo((r6v0 '$this$copyTo' java.io.InputStream A[D('$this$copyTo' java.io.InputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'out' java.io.OutputStream A[D('out' java.io.OutputStream), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'bufferSize' int A[D('bufferSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0014 \-\> B:10:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_12 -> Node_8;
Node_7 -> Node_9;
Node_13 -> Node_12;
}

