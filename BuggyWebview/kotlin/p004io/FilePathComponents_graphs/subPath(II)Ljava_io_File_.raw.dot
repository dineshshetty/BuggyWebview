digraph "CFG forkotlin.io.FilePathComponents.subPath(II)Ljava\/io\/File;" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IF  (r12 I:??[int, byte, short, char] A[D('beginIndex' int)]) \< (0 ??[int, byte, short, char])  \-\> B:18:0x002f  (LINE:117)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0002|0x0002: IF  (r12 I:??[int, byte, short, char] A[D('beginIndex' int)]) \> (r13 I:??[int, byte, short, char] A[D('endIndex' int)])  \-\> B:18:0x002f \l}"];
Node_14 [shape=record,label="{14\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = (r11 I:kotlin.io.FilePathComponents) type: VIRTUAL call: kotlin.io.FilePathComponents.getSize():int A[MD:():int (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0008|0x0008: IF  (r13 I:??[int, byte, short, char] A[D('endIndex' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|0x000a: NEW_INSTANCE  (r0 I:java.io.File) =  java.io.File  (LINE:120)\l0x000c: IGET  (r1 I:java.util.List\<java.io.File\>) = (r11 I:kotlin.io.FilePathComponents) kotlin.io.FilePathComponents.segments java.util.List \l0x000e: INVOKE  (r1 I:java.util.List) = (r1 I:java.util.List), (r12 I:int A[D('beginIndex' int)]), (r13 I:int A[D('endIndex' int)]) type: INTERFACE call: java.util.List.subList(int, int):java.util.List A[MD:(int, int):java.util.List\<E\> (c)]\l0x0012: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x0013: CHECK_CAST (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:??[OBJECT, ARRAY]) \l0x0015: SGET  (r1 I:java.lang.String) =  java.io.File.separator java.lang.String \l0x0017: CONST_STR  (r3 I:java.lang.String) =  \"separator\" \l0x0019: INVOKE  (r1 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x001d: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l0x001f: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: CONST  (r9 I:??[int, float, short, byte, char]) = (62 ??[int, float, short, byte, char]) \l0x0026: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: INVOKE  (r1 I:java.lang.String) = \l  (r2 I:java.lang.Iterable)\l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.lang.CharSequence)\l  (r5 I:java.lang.CharSequence)\l  (r6 I:int)\l  (r7 I:java.lang.CharSequence)\l  (r8 I:kotlin.jvm.functions.Function1)\l  (r9 I:int)\l  (r10 I:java.lang.Object)\l type: STATIC call: kotlin.collections.CollectionsKt.joinToString$default(java.lang.Iterable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String A[MD:(java.lang.Iterable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String (m)]\l0x002b: INVOKE  (r0 I:java.io.File), (r1 I:java.lang.String) type: DIRECT call: java.io.File.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x002e|RETURN\l|0x002e: RETURN  (r0 I:java.io.File) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:118)\l0x0031: INVOKE  (r0 I:java.lang.IllegalArgumentException) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>():void A[MD:():void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final java.io.File kotlin.io.FilePathComponents.subPath((r11 'this' I:kotlin.io.FilePathComponents A[IMMUTABLE_TYPE, THIS]), (r12 I:int A[D('beginIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0034 \-\> B:11:?, CROSS_EDGE: B:13:0x0002 \-\> B:18:0x002f, CROSS_EDGE: B:12:0x0000 \-\> B:18:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0034: r12 'beginIndex' I\l  \-1 \-0x0034: r13 'endIndex' I\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_18;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_18;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_17;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

