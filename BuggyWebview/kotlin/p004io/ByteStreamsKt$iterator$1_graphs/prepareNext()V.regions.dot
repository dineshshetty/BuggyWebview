digraph "CFG forkotlin.io.ByteStreamsKt$iterator$1.prepareNext()V" {
subgraph cluster_Region_242697407 {
label = "R(1:(1:(2:5|8)))";
node [shape=record,color=blue];
subgraph cluster_Region_1130125498 {
label = "R(1:(2:5|8))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_935167600 {
label = "IF [B:3:0x0002, B:5:0x0006] THEN: R(2:5|8) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0002|if (r3.nextPrepared == false) goto L3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|ADDED_TO_REGION\l|if (r3.finished == false) goto L5\l}"];
subgraph cluster_Region_762838003 {
label = "R(2:5|8)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0008|int int r0 = r2.read()\lr3.nextByte = r0\lr3.nextPrepared = true\l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|PHI: r1 \l  PHI: (r1v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|r3.finished = r0 == \-1\l}"];
}
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,color=red,label="{2\:\ 0x0000}"];
Node_4 [shape=record,color=red,label="{4\:\ 0x0004}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0014}"];
Node_9 [shape=record,color=red,label="{9\:\ 0x0017}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x001a|ORIG_RETURN\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return\l}"];
MethodNode[shape=record,label="{private final void kotlin.io.ByteStreamsKt$iterator$1.prepareNext((r3v0 'this' kotlin.io.ByteStreamsKt$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0014 \-\> B:10:0x0018, CROSS_EDGE: B:5:0x0006 \-\> B:11:0x001a, CROSS_EDGE: B:3:0x0002 \-\> B:11:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_5 -> Node_6;
Node_5 -> Node_13[style=dashed];
Node_6 -> Node_7;
Node_10 -> Node_11;
Node_0 -> Node_2;
Node_2 -> Node_3;
Node_4 -> Node_5;
Node_7 -> Node_9;
Node_7 -> Node_10;
Node_9 -> Node_10;
Node_11 -> Node_1;
Node_13 -> Node_1;
Node_12 -> Node_1;
}

