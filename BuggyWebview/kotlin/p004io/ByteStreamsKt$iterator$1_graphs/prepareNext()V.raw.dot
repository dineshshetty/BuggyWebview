digraph "CFG forkotlin.io.ByteStreamsKt$iterator$1.prepareNext()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:boolean) = (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.nextPrepared boolean  (LINE:25)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:? \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IGET  (r0 I:boolean) = (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.finished boolean \l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:? \l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|0x0008: IGET  (r0 I:java.io.BufferedInputStream) = (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.$this_iterator java.io.BufferedInputStream  (LINE:26)\l0x000a: INVOKE  (r0 I:int) = (r0 I:java.io.BufferedInputStream) type: VIRTUAL call: java.io.BufferedInputStream.read():int A[MD:():int throws java.io.IOException (c)]\l0x000e: IPUT  (r0 I:int), (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.nextByte int \l0x0010: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:27)\l0x0011: IPUT  (r1 I:boolean), (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.nextPrepared boolean \l0x0013: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:28)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x0017 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0017|0x0017: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x0018|0x0018: IPUT  (r1 I:boolean), (r3 I:kotlin.io.ByteStreamsKt$iterator$1) kotlin.io.ByteStreamsKt$iterator$1.finished boolean \l}"];
Node_11 [shape=record,label="{11\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: RETURN    (LINE:30)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN   A[SYNTHETIC] (LINE:30)\l}"];
Node_12 [shape=record,label="{12\:\ ?|SYNTHETIC\lRETURN\l|0x001a: RETURN   A[SYNTHETIC] (LINE:30)\l}"];
MethodNode[shape=record,label="{private final void kotlin.io.ByteStreamsKt$iterator$1.prepareNext((r3 'this' I:kotlin.io.ByteStreamsKt$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:7:0x0014 \-\> B:10:0x0018, CROSS_EDGE: B:5:0x0006 \-\> B:11:0x001a, CROSS_EDGE: B:3:0x0002 \-\> B:11:0x001a\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_12;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_13;
Node_6 -> Node_7;
Node_7 -> Node_9;
Node_7 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_1;
Node_13 -> Node_1;
Node_12 -> Node_1;
}

