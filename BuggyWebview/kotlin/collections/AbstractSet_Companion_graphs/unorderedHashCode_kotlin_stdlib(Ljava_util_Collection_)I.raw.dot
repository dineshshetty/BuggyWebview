digraph "CFG forkotlin.collections.AbstractSet.Companion.unorderedHashCode$kotlin_stdlib(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"c\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('c' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:35)\l0x0006: INVOKE  (r1 I:java.util.Iterator) = (r5 I:java.util.Collection A[D('c' java.util.Collection)]) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:36)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_START\lLOOP:0: B:3:0x000a\-\>B:9:0x001c\l|0x000a: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x001e \l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|0x0010: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|0x0014: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('element' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001b  (LINE:37)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|0x0016: INVOKE  (r3 I:int) = (r2 I:java.lang.Object A[D('element' java.lang.Object)]) type: VIRTUAL call: java.lang.Object.hashCode():int A[MD:():int (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|LOOP_END\lLOOP:0: B:3:0x000a\-\>B:9:0x001c\l|0x001c: ARITH  (r0 I:int) = (r0 I:int A[D('hashCode' int)]) + (r3 I:int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|0x001b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|RETURN\l|0x001e: RETURN  (r0 I:int A[D('hashCode' int)])  (LINE:39)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final int kotlin.collections.AbstractSet.Companion.unorderedHashCode$kotlin_stdlib((r4 'this' I:kotlin.collections.AbstractSet$Companion A[IMMUTABLE_TYPE, THIS]), (r5 I:java.util.Collection\<?\> A[D('c' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x001c \-\> B:3:0x000a, CROSS_EDGE: B:8:0x001b \-\> B:9:0x001c\lDebug Info:\l  0x0014\-0x001d: r2 'element' Ljava\/lang\/Object;\l  0x0006\-0x001e: r0 'hashCode' I\l  \-1 \-0x001e: r5 'c' Ljava\/util\/Collection;\lSIGNATURE: (Ljava\/util\/Collection\<*\>;)I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_13;
Node_13 -> Node_9;
Node_9 -> Node_3;
Node_8 -> Node_12;
Node_12 -> Node_9;
Node_11 -> Node_10;
Node_10 -> Node_1;
}

