digraph "CFG forkotlin.collections.AbstractSet.Companion.unorderedHashCode$kotlin_stdlib(Ljava\/util\/Collection;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"c\")\lr0 = 0\ljava.util.Iterator r1 = r5.iterator()\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|LOOP_START\lLOOP:0: B:3:0x000a\-\>B:9:0x001c\lPHI: r0 \l  PHI: (r0v2 'hashCode' int) = (r0v1 'hashCode' int), (r0v3 'hashCode' int) binds: [B:2:0x0000, B:9:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|if (r1.hasNext() == false) goto L11\l}"];
Node_5 [shape=record,label="{5\:\ 0x0010|java.lang.Object r2 = r1.next()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0014|if (r2 == null) goto L9\l}"];
Node_7 [shape=record,label="{7\:\ 0x0016|int r3 = r2.hashCode()\l}"];
Node_13 [shape=record,label="{13\:\ 0x001c|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|LOOP_END\lLOOP:0: B:3:0x000a\-\>B:9:0x001c\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:12:0x001c, B:13:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = r0 + r3\l}"];
Node_8 [shape=record,label="{8\:\ 0x001b|r3 = 0\l}"];
Node_12 [shape=record,label="{12\:\ 0x001c|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x001e|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final int kotlin.collections.AbstractSet.Companion.unorderedHashCode$kotlin_stdlib((r4v0 'this' kotlin.collections.AbstractSet$Companion A[IMMUTABLE_TYPE, THIS]), (r5v0 'c' java.util.Collection\<?\> A[D('c' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:9:0x001c \-\> B:3:0x000a, CROSS_EDGE: B:8:0x001b \-\> B:9:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Ljava\/util\/Collection\<*\>;)I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_11;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_13;
Node_13 -> Node_9;
Node_9 -> Node_3;
Node_8 -> Node_12;
Node_12 -> Node_9;
Node_11 -> Node_10;
Node_10 -> Node_1;
}

