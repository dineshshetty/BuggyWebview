digraph "CFG forkotlin.collections.AbstractMap.implFindEntry(Ljava\/lang\/Object;)Ljava\/util\/Map$Entry;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|java.lang.Iterable r0 = entrySet()\ljava.util.Iterator r2 = r0.iterator()\l}"];
Node_16 [shape=record,label="{16\:\ 0x000b|LOOP_START\lLOOP:0: B:16:0x000b\-\>B:19:0x0021\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|if (r2.hasNext() == false) goto L10\l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|java.lang.Object r3 = r2.next()\ljava.util.Map$Entry r4 = (java.util.Map.Entry) r3\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|LOOP_END\lLOOP:0: B:16:0x000b\-\>B:19:0x0021\l|if (kotlin.jvm.internal.Intrinsics.areEqual(r4.getKey(), r8) == false) goto L2\l}"];
Node_24 [shape=record,label="{24\:\ 0x0025|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025|PHI: r3 \l  PHI: (r3v2 'element$iv' java.lang.Object) = (r3v1 'element$iv' java.lang.Object), (r3v4 'element$iv' java.lang.Object) binds: [B:21:0x0024, B:24:0x0025] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0027|RETURN\l|return (java.util.Map.Entry) r3\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0024|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|r3 = null\l}"];
MethodNode[shape=record,label="{private final java.util.Map$Entry\<K, V\> kotlin.collections.AbstractMap.implFindEntry((r7v0 'this' kotlin.collections.AbstractMap\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r8v0 K A[D('key' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0021 \-\> B:16:0x000b, CROSS_EDGE: B:21:0x0024 \-\> B:22:0x0025\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: (TK;)Ljava\/util\/Map$Entry\<TK;TV;\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_16;
Node_19 -> Node_24[style=dashed];
Node_24 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_14;
Node_25 -> Node_21;
Node_21 -> Node_22;
}

