digraph "CFG forkotlin.collections.AbstractMap.equals(Ljava\/lang\/Object;)Z" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:56)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0001|0x0001: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.Object)]) != (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0004 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x0004|0x0004: INSTANCE_OF  (r1 I:boolean) = (r9 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) java.util.Map  (LINE:57)\l0x0006: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0007|0x0007: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x000a \l}"];
Node_35 [shape=record,label="{35\:\ 0x0009|RETURN\l|0x0009: RETURN  (r2 I:boolean) \l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r8 I:kotlin.collections.AbstractMap) type: VIRTUAL call: kotlin.collections.AbstractMap.size():int A[MD:():int (m)] (LINE:58)\l0x000e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x000f: CHECK_CAST (r3 I:java.util.Map) = (java.util.Map) (r3 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r3 I:int) = (r3 I:java.util.Map) type: INTERFACE call: java.util.Map.size():int A[MD:():int (c)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x0018 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0017|RETURN\l|0x0017: RETURN  (r2 I:boolean) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0018|0x0018: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)])  (LINE:60)\l0x0019: CHECK_CAST (r1 I:java.util.Map) = (java.util.Map) (r1 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r1 I:java.util.Set) = (r1 I:java.util.Map) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)]\l0x001f: CHECK_CAST (r1 I:java.lang.Iterable) = (java.lang.Iterable) (r1 I:??[OBJECT, ARRAY]) \l0x0021: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: INSTANCE_OF  (r4 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) java.util.Collection  (LINE:157)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0024|0x0024: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0030 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0026|0x0026: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) \l0x0027: CHECK_CAST (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r4 I:boolean) = (r4 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x002d|0x002d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0030 \l}"];
Node_54 [shape=record,label="{54\:\ ?|SYNTHETIC\lRETURN\l|0x004b: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:60)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0030|0x0030: INVOKE  (r4 I:java.util.Iterator) = (r1 I:java.lang.Iterable A[D('$this$all$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:158)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0034|LOOP_START\lLOOP:0: B:45:0x0034\-\>B:48:0x0046\l|0x0034: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0038|0x0038: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x004b \l}"];
Node_47 [shape=record,label="{47\:\ 0x003a|0x003a: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x003e: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x003f: CHECK_CAST (r6 I:java.util.Map$Entry) = (java.util.Map$Entry) (r6 I:??[OBJECT, ARRAY]) \l0x0041: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0042: INVOKE  (r6 I:boolean A[D('it' java.util.Map$Entry)]) = (r8 I:kotlin.collections.AbstractMap), (r6 I:java.util.Map$Entry A[D('it' java.util.Map$Entry)]) type: VIRTUAL call: kotlin.collections.AbstractMap.containsEntry$kotlin_stdlib(java.util.Map$Entry):boolean A[MD:(java.util.Map$Entry\<?, ?\>):boolean (m)] (LINE:60)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0046|LOOP_END\lLOOP:0: B:45:0x0034\-\>B:48:0x0046\l|0x0046: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.util.Map$Entry)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0034 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0048|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0048|RETURN\lORIG_RETURN\l|0x0048: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x004b: RETURN  (r0 I:boolean)  (LINE:60)\l}"];
Node_53 [shape=record,label="{53\:\ 0x004b|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ ?|SYNTHETIC\lRETURN\l|0x004b: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:60)\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractMap.equals((r8 'this' I:kotlin.collections.AbstractMap\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r9 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:35:0x0009 \-\> B:29:?, CROSS_EDGE: B:38:0x0017 \-\> B:29:?, BACK_EDGE: B:48:0x0046 \-\> B:45:0x0034, CROSS_EDGE: B:51:0x004b \-\> B:29:?, CROSS_EDGE: B:46:0x0038 \-\> B:51:0x004b, CROSS_EDGE: B:42:0x002d \-\> B:51:0x004b, CROSS_EDGE: B:40:0x0024 \-\> B:44:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0041\-0x0046: r6 'it' Ljava\/util\/Map$Entry;\l  0x0042\-0x0046: r7 '$i$a$\-all\-AbstractMap$equals$1' I\l  0x003e\-0x004a: r5 'element$iv' Ljava\/lang\/Object;\l  0x0021\-0x004b: r1 '$this$all$iv' Ljava\/lang\/Iterable;\l  0x0022\-0x004b: r3 '$i$f$all' I\l  \-1 \-0x004b: r9 'other' Ljava\/lang\/Object;\lTYPE_VARS: [V, K]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Map.equals(java.lang.Object):boolean\}]\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_33;
Node_32 -> Node_29;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_36;
Node_35 -> Node_29;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_29;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_44;
Node_41 -> Node_42;
Node_42 -> Node_44;
Node_42 -> Node_54[style=dashed];
Node_54 -> Node_29;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_53;
Node_47 -> Node_48;
Node_48 -> Node_45;
Node_48 -> Node_52[style=dashed];
Node_52 -> Node_49;
Node_49 -> Node_29;
Node_53 -> Node_55;
Node_55 -> Node_29;
}

