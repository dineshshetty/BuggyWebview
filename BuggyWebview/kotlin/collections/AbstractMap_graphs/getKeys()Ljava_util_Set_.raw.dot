digraph "CFG forkotlin.collections.AbstractMap.getKeys()Ljava\/util\/Set;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:java.util.Set\<? extends K\>) = (r1 I:kotlin.collections.AbstractMap) kotlin.collections.AbstractMap._keys java.util.Set  (LINE:84)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000d \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: NEW_INSTANCE  (r0 I:kotlin.collections.AbstractMap$keys$1) =  kotlin.collections.AbstractMap$keys$1  (LINE:85)\l0x0006: INVOKE  (r0 I:kotlin.collections.AbstractMap$keys$1), (r1 I:kotlin.collections.AbstractMap) type: DIRECT call: kotlin.collections.AbstractMap$keys$1.\<init\>(kotlin.collections.AbstractMap):void A[MD:(kotlin.collections.AbstractMap\<K, ? extends V\>):void (m)]\l0x0009: CHECK_CAST (r0 I:java.util.Set) = (java.util.Set) (r0 I:??[OBJECT, ARRAY]) \l0x000b: IPUT  (r0 I:java.util.Set\<? extends K\>), (r1 I:kotlin.collections.AbstractMap) kotlin.collections.AbstractMap._keys java.util.Set \l}"];
Node_12 [shape=record,label="{12\:\ 0x000d|0x000d: IGET  (r0 I:java.util.Set\<? extends K\>) = (r1 I:kotlin.collections.AbstractMap) kotlin.collections.AbstractMap._keys java.util.Set  (LINE:99)\l0x000f: INVOKE  (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:java.util.Set\<K\>) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.Set\<K\> kotlin.collections.AbstractMap.getKeys((r1 'this' I:kotlin.collections.AbstractMap\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: ()Ljava\/util\/Set\<TK;\>;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

