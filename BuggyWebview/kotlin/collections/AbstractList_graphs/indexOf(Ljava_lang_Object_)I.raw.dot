digraph "CFG forkotlin.collections.AbstractList.indexOf(Ljava\/lang\/Object;)I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:27)\l0x0001: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:158)\l0x0005: INVOKE  (r3 I:java.util.Iterator) = (r0 I:java.util.List A[D('$this$indexOfFirst$iv' java.util.List)]) type: INTERFACE call: java.util.List.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:159)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0009|LOOP_START\lLOOP:0: B:17:0x0009\-\>B:22:0x001c\l|0x0009: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0020 \l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0013: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('item$iv' java.lang.Object)])  (LINE:160)\l0x0014: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  (r5 I:boolean A[D('it' java.lang.Object)]) = (r5 I:java.lang.Object A[D('it' java.lang.Object)]), (r8 I:java.lang.Object A[D('element' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:27)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|0x0019: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001c \l}"];
Node_22 [shape=record,label="{22\:\ 0x001c|LOOP_END\lLOOP:0: B:17:0x0009\-\>B:22:0x001c\l|0x001d: ARITH  (r2 I:int) = (r2 I:int A[D('index$iv' int)]) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0022|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x0022: RETURN  (r2 I:int A[D('index$iv' int)]) A[SYNTHETIC] (LINE:27)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|0x0020: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:164)\l0x0021: CONST  (r2 I:??[int, float, short, byte, char] A[D('index$iv' int)]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|RETURN\lORIG_RETURN\l|0x0022: RETURN  (r2 I:int A[D('index$iv' int)])  (LINE:27)\l}"];
MethodNode[shape=record,label="{public int kotlin.collections.AbstractList.indexOf((r7 'this' I:kotlin.collections.AbstractList\<E\> A[IMMUTABLE_TYPE, THIS]), (r8 I:E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:22:0x001c \-\> B:17:0x0009, CROSS_EDGE: B:23:0x0020 \-\> B:24:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;)I\lDebug Info:\l  0x0014\-0x0019: r5 'it' Ljava\/lang\/Object;\l  0x0015\-0x0019: r6 '$i$a$\-indexOfFirst\-AbstractList$indexOf$1' I\l  0x0013\-0x001d: r4 'item$iv' Ljava\/lang\/Object;\l  0x0003\-0x0022: r0 '$this$indexOfFirst$iv' Ljava\/util\/List;\l  0x0004\-0x0022: r1 '$i$f$indexOfFirst' I\l  0x0005\-0x0022: r2 'index$iv' I\l  \-1 \-0x0022: r8 'element' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [ClspMth\{java.util.List.indexOf(java.lang.Object):int\}]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_26;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_25[style=dashed];
Node_22 -> Node_17;
Node_25 -> Node_27;
Node_27 -> Node_15;
Node_26 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_15;
}

