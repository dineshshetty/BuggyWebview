digraph "CFG forkotlin.collections.CollectionsKt__CollectionsKt.listOf([Ljava\/lang\/Object;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('elements' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r1 I:??[] A[D('elements' java.lang.Object[])])  (LINE:77)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:13:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|0x0008: INVOKE  (r0 I:java.util.List) = (r1 I:java.lang.Object[] A[D('elements' java.lang.Object[])]) type: STATIC call: kotlin.collections.ArraysKt.asList(java.lang.Object[]):java.util.List A[MD:\<T\>:(T[]):java.util.List\<T\> (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN  (r0 I:java.util.List\<T\>) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000d|0x000d: INVOKE  (r0 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: RETURN  (r0 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt__CollectionsKt.listOf((r1 I:T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000d \-\> B:14:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0011: r1 'elements' [Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

