digraph "CFG forkotlin.collections.CollectionsKt__CollectionsKt.binarySearch(Ljava\/util\/List;Ljava\/lang\/Comparable;II)I" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$binarySearch' java.util.List)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:int) = (r5 I:java.util.List A[D('$this$binarySearch' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:314)\l0x0009: INVOKE  (r0 I:int), (r7 I:int A[D('fromIndex' int)]), (r8 I:int A[D('toIndex' int)]) type: STATIC call: kotlin.collections.CollectionsKt__CollectionsKt.rangeCheck$CollectionsKt__CollectionsKt(int, int, int):void A[MD:(int, int, int):void (m)]\l0x000c: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fromIndex' int)])  (LINE:316)\l0x000d: ARITH  (r1 I:int) = (r8 I:int A[D('toIndex' int)]) + (\-1 int)  (LINE:317)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|LOOP_START\lLOOP:0: B:22:0x000f\-\>B:35:0x000f\l|0x000f: IF  (r0 I:??[int, byte, short, char] A[D('low' int)]) \> (r1 I:??[int, byte, short, char] A[D('high' int)])  \-\> B:31:0x002a  (LINE:319)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: ARITH  (r2 I:int) = (r0 I:int A[D('low' int)]) + (r1 I:int A[D('high' int)])  (LINE:320)\l0x0013: ARITH  (r2 I:int) = (r2 I:int) \>\>\> (1 int) \l0x0015: INVOKE  (r3 I:java.lang.Object) = (r5 I:java.util.List A[D('$this$binarySearch' java.util.List)]), (r2 I:int A[D('mid' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:321)\l0x0019: CHECK_CAST (r3 I:java.lang.Comparable) = (java.lang.Comparable) (r3 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r4 I:int) = \l  (r3 I:java.lang.Comparable A[D('midVal' java.lang.Comparable)])\l  (r6 I:java.lang.Comparable A[D('element' java.lang.Comparable)])\l type: STATIC call: kotlin.comparisons.ComparisonsKt.compareValues(java.lang.Comparable, java.lang.Comparable):int A[MD:\<T extends java.lang.Comparable\<?\>\>:(T extends java.lang.Comparable\<?\>, T extends java.lang.Comparable\<?\>):int (m)] (LINE:322)\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f|0x001f: IF  (r4 I:??[int, byte, short, char] A[D('cmp' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:32:0x0024  (LINE:324)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0024|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|0x0024: IF  (r4 I:??[int, byte, short, char] A[D('cmp' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:33:0x0029  (LINE:326)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0026|0x0026: ARITH  (r1 I:int A[D('high' int)]) = (r2 I:int A[D('mid' int)]) + (\-1 int)  (LINE:327)\l}"];
Node_36 [shape=record,label="{36\:\ 0x000f|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:22:0x000f\-\>B:35:0x000f\l}"];
Node_33 [shape=record,label="{33\:\ 0x0029|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0029|RETURN\l|0x0029: RETURN  (r2 I:int A[D('mid' int)])  (LINE:329)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|0x0021: ARITH  (r0 I:int A[D('low' int)]) = (r2 I:int A[D('mid' int)]) + (1 int)  (LINE:325)\l}"];
Node_37 [shape=record,label="{37\:\ 0x000f|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x002a|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x002a|0x002a: ARITH  (r2 I:int A[D('mid' int)]) = (r0 I:int A[D('low' int)]) + (1 int)  (LINE:331)\l0x002c: NEG  (r2 I:int) = (r2 I:int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x002d|RETURN\l|0x002d: RETURN  (r2 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt__CollectionsKt.binarySearch((r5 I:java.util.List\<? extends T extends java.lang.Comparable\<? super T\>\> A[D('$this$binarySearch' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:T extends java.lang.Comparable\<? super T\> A[D('element' java.lang.Comparable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x0021 \-\> B:22:0x000f, BACK_EDGE: B:27:0x0026 \-\> B:22:0x000f, CROSS_EDGE: B:30:0x002d \-\> B:20:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x002a: r2 'mid' I\l  0x001b\-0x002a: r3 'midVal' Ljava\/lang\/Comparable;\l  0x001f\-0x002a: r4 'cmp' I\l  0x000d\-0x002d: r0 'low' I\l  0x000f\-0x002d: r1 'high' I\l  \-1 \-0x002d: r5 '$this$binarySearch' Ljava\/util\/List;\l  \-1 \-0x002d: r6 'element' Ljava\/lang\/Comparable;\l  \-1 \-0x002d: r7 'fromIndex' I\l  \-1 \-0x002d: r8 'toIndex' I\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\lSIGNATURE: \<T::Ljava\/lang\/Comparable\<\-TT;\>;\>(Ljava\/util\/List\<+TT;\>;TT;II)I\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_31;
Node_23 -> Node_24;
Node_24 -> Node_32;
Node_24 -> Node_34[style=dashed];
Node_32 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_33;
Node_27 -> Node_36;
Node_36 -> Node_35;
Node_35 -> Node_22;
Node_33 -> Node_28;
Node_28 -> Node_20;
Node_34 -> Node_25;
Node_25 -> Node_37;
Node_37 -> Node_35;
Node_31 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_20;
}

