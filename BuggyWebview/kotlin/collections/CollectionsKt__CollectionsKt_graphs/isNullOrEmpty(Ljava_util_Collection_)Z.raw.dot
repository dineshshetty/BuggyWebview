digraph "CFG forkotlin.collections.CollectionsKt__CollectionsKt.isNullOrEmpty(Ljava\/util\/Collection;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0001|0x0001: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$isNullOrEmpty' java.util.Collection)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x000c  (LINE:243)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0003|0x0003: INVOKE  (r0 I:boolean) = (r1 I:java.util.Collection A[D('$this$isNullOrEmpty' java.util.Collection)]) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x000a \l}"];
Node_16 [shape=record,label="{16\:\ 0x000a|SYNTHETIC\lRETURN\l|0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000d: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x000c|RETURN\lORIG_RETURN\l|0x000c: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static final boolean kotlin.collections.CollectionsKt__CollectionsKt.isNullOrEmpty((r1 I:java.util.Collection\<? extends T\> A[D('$this$isNullOrEmpty' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000c \-\> B:18:0x000d, CROSS_EDGE: B:12:0x0001 \-\> B:17:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r1 '$this$isNullOrEmpty' Ljava\/util\/Collection;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<+TT;\>;)Z\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_17;
Node_13 -> Node_14;
Node_14 -> Node_16;
Node_14 -> Node_17[style=dashed];
Node_16 -> Node_11;
Node_17 -> Node_11;
}

