digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt.minBy([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1742895833 {
label = "R(2:1|(2:(1:5)|(2:7|(2:(1:21)|(3:9|(2:12|(1:15)(0))|20)))))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"selector\")\l}"];
subgraph cluster_Region_1229596246 {
label = "R(2:(1:5)|(2:7|(2:(1:21)|(3:9|(2:12|(1:15)(0))|20))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1353484515 {
label = "IF [B:32:0x0015] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0015|PHI: r3 \l  PHI: (r3v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r11.length == 0) == true) goto L5\l}"];
subgraph cluster_Region_973324495 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0017|RETURN\lORIG_RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_941616723 {
label = "R(2:7|(2:(1:21)|(3:9|(2:12|(1:15)(0))|20)))";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0019|T r3 = r11[0]\lint int r5 = kotlin.collections.ArraysKt.getLastIndex(r11)\l}"];
subgraph cluster_Region_1321419236 {
label = "R(2:(1:21)|(3:9|(2:12|(1:15)(0))|20))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_175484701 {
label = "IF [B:35:0x001f] THEN: R(1:21) ELSE: null";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x001f|if (r5 == 0) goto L21\l}"];
subgraph cluster_Region_483505932 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_1306508675 {
label = "R(3:9|(2:12|(1:15)(0))|20)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0022|java.lang.Comparable java.lang.Comparable r6 = r12.invoke(r3)\lkotlin.collections.IntIterator ?? r4 = new kotlin.ranges.IntRange(1, r5).iterator()\l}"];
subgraph cluster_LoopRegion_1613876469 {
label = "LOOP:0: (2:12|(1:15)(0))";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0035|if (r4.hasNext() != false) goto L12\l}"];
subgraph cluster_Region_1353860821 {
label = "R(2:12|(1:15)(0))";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0037|int int r7 = r4.nextInt()\lT r8 = r11[r7]\ljava.lang.Comparable R r9 = r12.invoke(r8)\l}"];
subgraph cluster_IfRegion_1909029911 {
label = "IF [B:41:0x0047] THEN: R(1:15) ELSE: R(0)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0047|if (r6.compareTo(r9) \> 0) goto L14\l}"];
subgraph cluster_Region_925470145 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0049|r3 = r8\lr6 = r9\l}"];
}
subgraph cluster_Region_1453569788 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
}
}
}
}
}
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0010}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0012}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0031|LOOP_START\lLOOP:0: B:38:0x0031\-\>B:47:0x0031\lPHI: r3 r6 \l  PHI: (r3v4 T) = (r3v3 T), (r3v5 T) binds: [B:37:0x0022, B:47:0x0031] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'minValue$iv' java.lang.Comparable) = (r6v1 'minValue$iv' java.lang.Comparable), (r6v3 'minValue$iv' java.lang.Comparable) binds: [B:37:0x0022, B:47:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0049|SYNTHETIC\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x0031|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x0031|LOOP_END\lSYNTHETIC\lLOOP:0: B:38:0x0031\-\>B:47:0x0031\lPHI: r3 r6 \l  PHI: (r3v5 T) = (r3v4 T), (r3v6 T) binds: [B:48:0x0031, B:49:0x0031] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v3 'minValue$iv' java.lang.Comparable) = (r6v2 'minValue$iv' java.lang.Comparable), (r6v4 'minValue$iv' java.lang.Comparable) binds: [B:48:0x0031, B:49:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_48 [shape=record,color=red,label="{48\:\ 0x0031|SYNTHETIC\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x004d|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0014}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ T kotlin.collections.ArraysKt___ArraysJvmKt.minBy((r11v0 T[] A[D('$this$minBy' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'selector' kotlin.jvm.functions.Function1\<? super T, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=Use minByOrNull instead., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this.minByOrNull(selector), imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{errorSince=1.5, hiddenSince=1.6, warningSince=1.4\}\}\}\lINLINE_NOT_NEEDED\lBACK_EDGE: B:41:0x0047 \-\> B:38:0x0031, BACK_EDGE: B:42:0x0049 \-\> B:38:0x0031, CROSS_EDGE: B:39:0x0035 \-\> B:44:0x004d, CROSS_EDGE: B:35:0x001f \-\> B:44:0x004d, CROSS_EDGE: B:31:0x0014 \-\> B:32:0x0015\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R::Ljava\/lang\/Comparable\<\-TR;\>;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TT;\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r4v1, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_26;Node_28 -> Node_29;
Node_32 -> Node_33;
Node_32 -> Node_34[style=dashed];
Node_33 -> Node_27;
Node_34 -> Node_35;
Node_35 -> Node_37[style=dashed];
Node_35 -> Node_50;
Node_50 -> Node_27;
Node_37 -> Node_38;
Node_39 -> Node_40;
Node_39 -> Node_45[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_46;
Node_41 -> Node_48[style=dashed];
Node_42 -> Node_49;
Node_51 -> Node_27;
Node_26 -> Node_28;
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_38 -> Node_39;
Node_46 -> Node_42;
Node_49 -> Node_47;
Node_47 -> Node_38;
Node_48 -> Node_47;
Node_45 -> Node_51;
Node_31 -> Node_32;
}

