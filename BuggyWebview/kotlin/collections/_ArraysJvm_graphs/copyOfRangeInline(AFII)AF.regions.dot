digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt.copyOfRangeInline([FII)[F" {
subgraph cluster_Region_1765693314 {
label = "R(2:1|(2:(1:4)|(1:(2:(2:10|11)|(2:8|9)))))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\l}"];
subgraph cluster_Region_1655870716 {
label = "R(2:(1:4)|(1:(2:(2:10|11)|(2:8|9))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2141396048 {
label = "IF [B:15:0x000c] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000c|if (kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(1, 3, 0) != false) goto L3\l}"];
subgraph cluster_Region_1684665569 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.collections.ArraysKt.copyOfRange(r3, r4, r5)\l}"];
}
}
subgraph cluster_Region_2146446761 {
label = "R(1:(2:(2:10|11)|(2:8|9)))";
node [shape=record,color=blue];
subgraph cluster_Region_152261599 {
label = "R(2:(2:10|11)|(2:8|9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1857392433 {
label = "IF [B:18:0x0014] THEN: R(2:10|11) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0014|if (r5 \> r3.length) goto L10\l}"];
subgraph cluster_Region_1171300602 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0020}"];
Node_22 [shape=record,label="{22\:\ 0x003f|throw new java.lang.IndexOutOfBoundsException(\"toIndex: \" + r5 + \", size: \" + r3.length)\l}"];
}
}
subgraph cluster_Region_1195508074 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0016|float[] float[] r0 = java.util.Arrays.copyOfRange(r3, r4, r5)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"\{n        if (toIndex \> â€¦fromIndex, toIndex)n    \}\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|RETURN\lORIG_RETURN\l|return r0\l}"];
}
}
}
}
}
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000e}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0013}"];
MethodNode[shape=record,label="{private static final float[] kotlin.collections.ArraysKt___ArraysJvmKt.copyOfRangeInline((r3v0 '$this$copyOfRange' float[] A[D('$this$copyOfRange' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'fromIndex' int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'toIndex' int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0016 \-\> B:20:0x001f, CROSS_EDGE: B:22:0x003f \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_12;Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_17[style=dashed];
Node_23 -> Node_13;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_13;
Node_19 -> Node_20;
Node_20 -> Node_13;
Node_12 -> Node_14;
Node_16 -> Node_23;
Node_17 -> Node_18;
}

