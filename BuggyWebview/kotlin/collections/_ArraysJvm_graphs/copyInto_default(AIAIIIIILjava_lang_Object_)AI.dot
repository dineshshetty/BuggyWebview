digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt.copyInto$default([I[IIIIILjava\/lang\/Object;)[I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000}"];
Node_16 [shape=record,label="{16\:\ 0x0003|if ((r6 & 2) == 0) goto L4\l}"];
Node_17 [shape=record,label="{17\:\ 0x0005|r3 = 0\l}"];
Node_18 [shape=record,label="{18\:\ 0x0006|PHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:16:0x0003, B:17:0x0005] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|if ((r6 & 4) == 0) goto L7\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|r4 = 0\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|PHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:19:0x0008, B:20:0x000a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|if ((r6 & 8) == 0) goto L10\l}"];
Node_23 [shape=record,label="{23\:\ 0x000f|int r5 = r1.length\l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|PHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:22:0x000d, B:23:0x000f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|RETURN\l|return kotlin.collections.ArraysKt.copyInto(r1, r2, r3, r4, r5)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static \/* synthetic *\/ int[] kotlin.collections.ArraysKt___ArraysJvmKt.copyInto$default((r1v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 int[] A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:22:0x000d \-\> B:24:0x0010, CROSS_EDGE: B:19:0x0008 \-\> B:21:0x000b, CROSS_EDGE: B:16:0x0003 \-\> B:18:0x0006\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_14;
}

