digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt.copyOfRangeInline([BII)[B" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$copyOfRange' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1683)\l0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0008: INVOKE  (r0 I:boolean) = (r0 I:int), (r1 I:int), (r2 I:int) type: STATIC call: kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(int, int, int):boolean A[MD:(int, int, int):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0013 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|0x000e: INVOKE  (r0 I:byte[]) = (r3 I:byte[] A[D('$this$copyOfRange' byte[])]), (r4 I:int A[D('fromIndex' int)]), (r5 I:int A[D('toIndex' int)]) type: STATIC call: kotlin.collections.ArraysKt.copyOfRange(byte[], int, int):byte[] A[MD:(byte[], int, int):byte[] (m)] (LINE:1684)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:byte[]) A[SYNTHETIC] (LINE:1683)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|0x0013: ARRAY_LENGTH  (r0 I:int) = (r3 I:??[] A[D('$this$copyOfRange' byte[])])  (LINE:1686)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0014|0x0014: IF  (r5 I:??[int, byte, short, char] A[D('toIndex' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:21:0x0020 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0016|0x0016: INVOKE  (r0 I:byte[]) = (r3 I:byte[] A[D('$this$copyOfRange' byte[])]), (r4 I:int A[D('fromIndex' int)]), (r5 I:int A[D('toIndex' int)]) type: STATIC call: java.util.Arrays.copyOfRange(byte[], int, int):byte[] A[MD:(byte[], int, int):byte[] (c)] (LINE:1687)\l0x001a: CONST_STR  (r1 I:java.lang.String) =  \"\{n        if (toIndex \> â€¦fromIndex, toIndex)n    \}\"  (LINE:1685)\l0x001c: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: RETURN  (r0 I:byte[])  (LINE:1683)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0020|0x0020: NEW_INSTANCE  (r0 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException  (LINE:1686)\l0x0022: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0024: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0027: CONST_STR  (r2 I:java.lang.String) =  \"toIndex: \" \l0x0029: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002c: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('toIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x002f: CONST_STR  (r2 I:java.lang.String) =  \", size: \" \l0x0031: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0034: ARRAY_LENGTH  (r2 I:int) = (r3 I:??[] A[D('$this$copyOfRange' byte[])]) \l0x0035: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0038: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003c: INVOKE  (r0 I:java.lang.IndexOutOfBoundsException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x003f|0x003f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final byte[] kotlin.collections.ArraysKt___ArraysJvmKt.copyOfRangeInline((r3 I:byte[] A[D('$this$copyOfRange' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0016 \-\> B:20:0x001f, CROSS_EDGE: B:22:0x003f \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x003f: r3 '$this$copyOfRange' [B\l  \-1 \-0x003f: r4 'fromIndex' I\l  \-1 \-0x003f: r5 'toIndex' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_21;
Node_19 -> Node_20;
Node_20 -> Node_13;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

