digraph "CFG forkotlin.collections.ArrayDeque.addAll(ILjava\/util\/Collection;)Z" {
Node_39 [shape=record,label="{39\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"elements\")\lkotlin.collections.AbstractList.Companion.checkPositionIndex$kotlin_stdlib(r12, size())\l}"];
Node_42 [shape=record,label="{42\:\ 0x0013|if (r13.isEmpty() == false) goto L5\l}"];
Node_43 [shape=record,label="{43\:\ 0x0015|RETURN\l|return false\l}"];
Node_40 [shape=record,label="{40\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x0016}"];
Node_45 [shape=record,label="{45\:\ 0x001a|if (r12 != size()) goto L9\l}"];
Node_46 [shape=record,label="{46\:\ 0x001c}"];
Node_47 [shape=record,label="{47\:\ 0x0020|RETURN\l|return addAll(r13)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0021|ensureCapacity(size() + r13.size())\lint r0 = positiveMod(r11.head + size())\lint r2 = positiveMod(r11.head + r12)\lint r3 = r13.size()\l}"];
Node_49 [shape=record,label="{49\:\ 0x004a|if (r12 \>= ((size() + 1) \>\> 1)) goto L25\l}"];
Node_50 [shape=record,label="{50\:\ 0x004c|int r4 = r11.head\lint r6 = r4 \- r3\l}"];
Node_51 [shape=record,label="{51\:\ 0x0050|if (r2 \< r4) goto L21\l}"];
Node_52 [shape=record,label="{52\:\ 0x0052|if (r6 \< 0) goto L17\l}"];
Node_53 [shape=record,label="{53\:\ 0x0054|java.lang.Object[] r1 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r1, r1, r6, r4, r2)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0092|PHI: r6 \l  PHI: (r6v9 'shiftedHead' int) = (r6v8 'shiftedHead' int), (r6v8 'shiftedHead' int), (r6v10 'shiftedHead' int), (r6v10 'shiftedHead' int), (r6v8 'shiftedHead' int) binds: [B:61:0x0086, B:60:0x007e, B:57:0x0068, B:56:0x0064, B:53:0x0054] A[DONT_GENERATE, DONT_INLINE]\l|r11.head = r6\lcopyCollectionElements(negativeMod(r2 \- r3), r13)\l}"];
Node_77 [shape=record,label="{77\:\ 0x00ea|RETURN\l|return true\l}"];
Node_54 [shape=record,label="{54\:\ 0x005a|java.lang.Object[] r7 = r11.elementData\lint r6 = r6 + r7.length\lint r8 = r2 \- r4\lint r9 = r7.length \- r6\l}"];
Node_55 [shape=record,label="{55\:\ 0x0062|if (r9 \< r8) goto L20\l}"];
Node_56 [shape=record,label="{56\:\ 0x0064|kotlin.collections.ArraysKt.copyInto(r7, r7, r6, r4, r2)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0068|kotlin.collections.ArraysKt.copyInto(r7, r7, r6, r4, r4 + r9)\ljava.lang.Object[] r4 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r4, r4, 0, r11.head + r9, r2)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0076|java.lang.Object[] r7 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r7, r7, r6, r4, r7.length)\l}"];
Node_59 [shape=record,label="{59\:\ 0x007c|if (r3 \< r2) goto L24\l}"];
Node_60 [shape=record,label="{60\:\ 0x007e|java.lang.Object[] r4 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r4, r4, r4.length \- r3, 0, r2)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0086|java.lang.Object[] r4 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r4, r4, r4.length \- r3, 0, r3)\ljava.lang.Object[] r4 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r4, r4, 0, r3, r2)\l}"];
Node_63 [shape=record,label="{63\:\ 0x009e|int r4 = r2 + r3\l}"];
Node_64 [shape=record,label="{64\:\ 0x00a0|if (r2 \>= r0) goto L35\l}"];
Node_65 [shape=record,label="{65\:\ 0x00a2|int r6 = r0 + r3\ljava.lang.Object[] r7 = r11.elementData\l}"];
Node_66 [shape=record,label="{66\:\ 0x00a7|if (r6 \> r7.length) goto L31\l}"];
Node_67 [shape=record,label="{67\:\ 0x00a9|kotlin.collections.ArraysKt.copyInto(r7, r7, r4, r2, r0)\l}"];
Node_76 [shape=record,label="{76\:\ 0x00e7|copyCollectionElements(r2, r13)\l}"];
Node_68 [shape=record,label="{68\:\ 0x00ad}"];
Node_69 [shape=record,label="{69\:\ 0x00ae|if (r4 \< r7.length) goto L34\l}"];
Node_70 [shape=record,label="{70\:\ 0x00b0|kotlin.collections.ArraysKt.copyInto(r7, r7, r4 \- r7.length, r2, r0)\l}"];
Node_71 [shape=record,label="{71\:\ 0x00b7|int r6 = (r0 + r3) \- r7.length\lkotlin.collections.ArraysKt.copyInto(r7, r7, 0, r0 \- r6, r0)\ljava.lang.Object[] r1 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r1, r1, r4, r2, r0 \- r6)\l}"];
Node_72 [shape=record,label="{72\:\ 0x00c8|java.lang.Object[] r6 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r6, r6, r3, 0, r0)\ljava.lang.Object[] r6 = r11.elementData\l}"];
Node_73 [shape=record,label="{73\:\ 0x00d0|if (r4 \< r6.length) goto L38\l}"];
Node_74 [shape=record,label="{74\:\ 0x00d2|kotlin.collections.ArraysKt.copyInto(r6, r6, r4 \- r6.length, r2, r6.length)\l}"];
Node_75 [shape=record,label="{75\:\ 0x00da|kotlin.collections.ArraysKt.copyInto(r6, r6, 0, r6.length \- r3, r6.length)\ljava.lang.Object[] r1 = r11.elementData\lkotlin.collections.ArraysKt.copyInto(r1, r1, r4, r2, r1.length \- r3)\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.ArrayDeque.addAll((r11v0 'this' kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r12v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'elements' java.util.Collection\<? extends E\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:47:0x0020 \-\> B:40:?, CROSS_EDGE: B:77:0x00ea \-\> B:40:?, CROSS_EDGE: B:56:0x0064 \-\> B:62:0x0092, CROSS_EDGE: B:57:0x0068 \-\> B:62:0x0092, CROSS_EDGE: B:60:0x007e \-\> B:62:0x0092, CROSS_EDGE: B:61:0x0086 \-\> B:62:0x0092, CROSS_EDGE: B:76:0x00e7 \-\> B:77:0x00ea, CROSS_EDGE: B:70:0x00b0 \-\> B:76:0x00e7, CROSS_EDGE: B:71:0x00b7 \-\> B:76:0x00e7, CROSS_EDGE: B:74:0x00d2 \-\> B:76:0x00e7, CROSS_EDGE: B:75:0x00da \-\> B:76:0x00e7\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (ILjava\/util\/Collection\<+TE;\>;)Z\lMETHOD_OVERRIDE: [ClspMth\{java.util.List.addAll(int, java.util.Collection\<? extends E\>):boolean\}, ClspMth\{java.util.AbstractList.addAll(int, java.util.Collection\<? extends E\>):boolean\}]\l}"];
MethodNode -> Node_39;Node_39 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_43 -> Node_40;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_48;
Node_46 -> Node_47;
Node_47 -> Node_40;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_63;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_58;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_62;
Node_62 -> Node_77;
Node_77 -> Node_40;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_57;
Node_56 -> Node_62;
Node_57 -> Node_62;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_62;
Node_61 -> Node_62;
Node_63 -> Node_64;
Node_64 -> Node_65[style=dashed];
Node_64 -> Node_72;
Node_65 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_68;
Node_67 -> Node_76;
Node_76 -> Node_77;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_71;
Node_70 -> Node_76;
Node_71 -> Node_76;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_75;
Node_74 -> Node_76;
Node_75 -> Node_76;
}

