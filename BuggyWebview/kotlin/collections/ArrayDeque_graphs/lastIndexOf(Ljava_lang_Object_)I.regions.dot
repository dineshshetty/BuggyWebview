digraph "CFG forkotlin.collections.ArrayDeque.lastIndexOf(Ljava\/lang\/Object;)I" {
subgraph cluster_Region_1567738451 {
label = "R(3:1|(2:3|(2:(1:(1:8)(0))|12))(1:(4:16|(1:(2:(1:23)|(1:20)))|25|(2:(1:(1:30)(0))|34)))|14)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0000|int int r0 = positiveMod(r5.head + size())\lint int r1 = r5.head\l}"];
subgraph cluster_IfRegion_1918443257 {
label = "IF [B:38:0x000e] THEN: R(2:3|(2:(1:(1:8)(0))|12)) ELSE: R(1:(4:16|(1:(2:(1:23)|(1:20)))|25|(2:(1:(1:30)(0))|34)))";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x000e|if (r1 \< r0) goto L3\l}"];
subgraph cluster_Region_714861374 {
label = "R(2:3|(2:(1:(1:8)(0))|12))";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0010|int int r3 = r0 \- 1\l}"];
subgraph cluster_IfRegion_313328543 {
label = "IF [B:40:0x0012] THEN: R(2:(1:(1:8)(0))|12) ELSE: null";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0012|if (r1 \<= r3) goto L5\l}"];
subgraph cluster_Region_1337788885 {
label = "R(2:(1:(1:8)(0))|12)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_817791553 {
label = "LOOP:0: (1:(1:8)(0))";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x001c|if (kotlin.jvm.internal.Intrinsics.areEqual(r6, r5.elementData[r3]) == false) goto L7\l}"];
subgraph cluster_Region_127300083 {
label = "R(1:(1:8)(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1778600670 {
label = "IF [B:45:0x0023] THEN: R(1:8) ELSE: R(0)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x0023|if (r3 != r1) goto L8\l}"];
subgraph cluster_Region_1565218709 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_46 [shape=record,label="{46\:\ 0x0025|LOOP_END\lLOOP:0: B:41:0x0014\-\>B:46:0x0025\l|r3\-\-\l}"];
}
subgraph cluster_Region_1178275238 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_44 [shape=record,label="{44\:\ 0x0022|RETURN\l|return r3 \- r5.head\l}"];
}
}
}
subgraph cluster_Region_1952782369 {
label = "R(1:(4:16|(1:(2:(1:23)|(1:20)))|25|(2:(1:(1:30)(0))|34))) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_243189017 {
label = "IF [B:47:0x0028] THEN: R(4:16|(1:(2:(1:23)|(1:20)))|25|(2:(1:(1:30)(0))|34)) ELSE: null | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_47 [shape=record,label="{47\:\ 0x0028|if (r1 \> r0) goto L16\l}"];
subgraph cluster_Region_1569633751 {
label = "R(4:16|(1:(2:(1:23)|(1:20)))|25|(2:(1:(1:30)(0))|34))";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x002a|int int r1 = r0 \- 1\l}"];
subgraph cluster_LoopRegion_1738200649 {
label = "LOOP:1: (1:(2:(1:23)|(1:20)))";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x002c|LOOP_START\lLOOP:1: B:49:0x002c\-\>B:54:0x0040\lPHI: r1 \l  PHI: (r1v3 'index' int) = (r1v2 'index' int), (r1v8 'index' int) binds: [B:48:0x002a, B:54:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|if ((\-1) \< r1) goto L18\l}"];
subgraph cluster_Region_76877079 {
label = "R(1:(2:(1:23)|(1:20)))";
node [shape=record,color=blue];
subgraph cluster_Region_809037215 {
label = "R(2:(1:23)|(1:20))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1930609858 {
label = "IF [B:51:0x0036] THEN: R(1:23) ELSE: null";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ 0x0036|if (kotlin.jvm.internal.Intrinsics.areEqual(r6, r5.elementData[r1]) == true) goto L21\l}"];
subgraph cluster_Region_156860612 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x003f|RETURN\l|return (r5.elementData.length + r1) \- r5.head\l}"];
}
}
subgraph cluster_Region_1116432964 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x0040|LOOP_END\lLOOP:1: B:49:0x002c\-\>B:54:0x0040\l|r1\-\-\l}"];
}
}
}
}
Node_55 [shape=record,label="{55\:\ 0x0043|int int r1 = kotlin.collections.ArraysKt.getLastIndex(r5.elementData)\lint int r3 = r5.head\l}"];
subgraph cluster_IfRegion_1614607018 {
label = "IF [B:56:0x004b] THEN: R(2:(1:(1:30)(0))|34) ELSE: null";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x004b|if (r3 \<= r1) goto L27\l}"];
subgraph cluster_Region_1516586961 {
label = "R(2:(1:(1:30)(0))|34)";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_99425979 {
label = "LOOP:2: (1:(1:30)(0))";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0055|if (kotlin.jvm.internal.Intrinsics.areEqual(r6, r5.elementData[r1]) == false) goto L29\l}"];
subgraph cluster_Region_787513347 {
label = "R(1:(1:30)(0))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1089991010 {
label = "IF [B:61:0x005c] THEN: R(1:30) ELSE: R(0)";
node [shape=record,color=blue];
Node_61 [shape=record,label="{61\:\ 0x005c|if (r1 != r3) goto L30\l}"];
subgraph cluster_Region_2038201995 {
label = "R(1:30)";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x005e|LOOP_END\lLOOP:2: B:57:0x004d\-\>B:62:0x005e\l|r1\-\-\l}"];
}
subgraph cluster_Region_1921524204 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_60 [shape=record,label="{60\:\ 0x005b|RETURN\l|return r1 \- r5.head\l}"];
}
}
}
}
}
}
Node_63 [shape=record,label="{63\:\ 0x0061|RETURN\l|return \-1\l}"];
}
Node_35 [shape=record,color=red,label="{35\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0014|LOOP_START\lLOOP:0: B:41:0x0014\-\>B:46:0x0025\lPHI: r3 \l  PHI: (r3v6 'index' int) = (r3v5 'index' int), (r3v7 'index' int) binds: [B:40:0x0012, B:46:0x0025] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x0061|SYNTHETIC\l}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x001e|SYNTHETIC\l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x001e}"];
Node_36 [shape=record,color=red,label="{36\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_50 [shape=record,color=red,label="{50\:\ 0x002e}"];
Node_66 [shape=record,color=red,label="{66\:\ 0x0038|SYNTHETIC\l}"];
Node_52 [shape=record,color=red,label="{52\:\ 0x0038}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x0043|SYNTHETIC\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x004d|LOOP_START\lLOOP:2: B:57:0x004d\-\>B:62:0x005e\lPHI: r1 \l  PHI: (r1v6 'index' int) = (r1v5 'index' int), (r1v7 'index' int) binds: [B:56:0x004b, B:62:0x005e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_69 [shape=record,color=red,label="{69\:\ 0x0061|SYNTHETIC\l}"];
Node_68 [shape=record,color=red,label="{68\:\ 0x0057|SYNTHETIC\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0057}"];
MethodNode[shape=record,label="{public int kotlin.collections.ArrayDeque.lastIndexOf((r5v0 'this' kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r6v0 'element' java.lang.Object A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:46:0x0025 \-\> B:41:0x0014, CROSS_EDGE: B:63:0x0061 \-\> B:36:?, CROSS_EDGE: B:40:0x0012 \-\> B:63:0x0061, CROSS_EDGE: B:53:0x003f \-\> B:36:?, BACK_EDGE: B:54:0x0040 \-\> B:49:0x002c, CROSS_EDGE: B:60:0x005b \-\> B:36:?, BACK_EDGE: B:62:0x005e \-\> B:57:0x004d, CROSS_EDGE: B:61:0x005c \-\> B:63:0x0061, CROSS_EDGE: B:56:0x004b \-\> B:63:0x0061, CROSS_EDGE: B:47:0x0028 \-\> B:63:0x0061\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [ClspMth\{java.util.AbstractList.lastIndexOf(java.lang.Object):int\}, ClspMth\{java.util.List.lastIndexOf(java.lang.Object):int\}]\l}"];
MethodNode -> Node_35;Node_37 -> Node_38;
Node_38 -> Node_39;
Node_38 -> Node_47[style=dashed];
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_40 -> Node_63[style=dashed];
Node_42 -> Node_45;
Node_42 -> Node_65[style=dashed];
Node_45 -> Node_46;
Node_45 -> Node_64[style=dashed];
Node_46 -> Node_41;
Node_44 -> Node_36;
Node_47 -> Node_48;
Node_47 -> Node_63[style=dashed];
Node_48 -> Node_49;
Node_49 -> Node_50;
Node_49 -> Node_67[style=dashed];
Node_51 -> Node_54[style=dashed];
Node_51 -> Node_66;
Node_53 -> Node_36;
Node_54 -> Node_49;
Node_55 -> Node_56;
Node_56 -> Node_57;
Node_56 -> Node_63[style=dashed];
Node_58 -> Node_61;
Node_58 -> Node_68[style=dashed];
Node_61 -> Node_62;
Node_61 -> Node_69[style=dashed];
Node_62 -> Node_57;
Node_60 -> Node_36;
Node_63 -> Node_36;
Node_35 -> Node_37;
Node_41 -> Node_42;
Node_64 -> Node_63;
Node_65 -> Node_43;
Node_43 -> Node_44;
Node_50 -> Node_51;
Node_66 -> Node_52;
Node_52 -> Node_53;
Node_67 -> Node_55;
Node_57 -> Node_58;
Node_69 -> Node_63;
Node_68 -> Node_59;
Node_59 -> Node_60;
}

