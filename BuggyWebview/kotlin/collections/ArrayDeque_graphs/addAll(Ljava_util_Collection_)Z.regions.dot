digraph "CFG forkotlin.collections.ArrayDeque.addAll(Ljava\/util\/Collection;)Z" {
subgraph cluster_Region_1758665391 {
label = "R(2:1|(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"elements\")\l}"];
subgraph cluster_Region_1750809070 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1433898433 {
label = "IF [B:11:0x0009] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0009|if (r3.isEmpty() == true) goto L3\l}"];
subgraph cluster_Region_995662540 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1261365610 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000d|ensureCapacity(size() + r3.size())\lcopyCollectionElements(positiveMod(r2.head + size()), r3)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|RETURN\l|return true\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.ArrayDeque.addAll((r2v0 'this' kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'elements' java.util.Collection\<? extends E\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0028 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Ljava\/util\/Collection\<+TE;\>;)Z\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.addAll(java.util.Collection\<? extends E\>):boolean\}]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
}

