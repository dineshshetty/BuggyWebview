digraph "CFG forkotlin.collections.ArrayDeque.internalStructure$kotlin_stdlib(Lkotlin\/jvm\/functions\/Function2;)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"structure\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('structure' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:int) = (r4 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int  (LINE:579)\l0x0007: INVOKE  (r1 I:int) = (r4 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)]\l0x000b: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000c: INVOKE  (r0 I:int) = (r4 I:kotlin.collections.ArrayDeque), (r0 I:int) type: DIRECT call: kotlin.collections.ArrayDeque.positiveMod(int):int A[MD:(int):int (m)]\l0x0010: INVOKE  (r1 I:boolean) = (r4 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.isEmpty():boolean A[MD:():boolean (m)] (LINE:580)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0020 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0016|0x0016: IGET  (r1 I:int) = (r4 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int \l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|0x0018: IF  (r1 I:??[int, byte, short, char]) \>= (r0 I:??[int, byte, short, char] A[D('tail' int)])  \-\> B:18:0x001b \l}"];
Node_18 [shape=record,label="{18\:\ 0x001b|0x001b: IGET  (r2 I:java.lang.Object[]) = (r4 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[] \l0x001d: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[]) \l0x001e: ARITH  (r1 I:int) = (r1 I:int) \- (r2 I:int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|0x0022: INVOKE  (r2 I:java.lang.Integer) = (r1 I:int A[D('head' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:581)\l0x0026: INVOKE  (r3 I:java.lang.Object[]) = (r4 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.toArray():java.lang.Object[] A[MD:():java.lang.Object[] (m)]\l0x002a: INVOKE  \l  (r5 I:kotlin.jvm.functions.Function2 A[D('structure' kotlin.jvm.functions.Function2)])\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002d|RETURN\l|0x002d: RETURN    (LINE:582)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|0x0020: IGET  (r1 I:int) = (r4 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int \l}"];
MethodNode[shape=record,label="{public final void kotlin.collections.ArrayDeque.internalStructure$kotlin_stdlib((r4 'this' I:kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r5 I:kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Object[], kotlin.Unit\> A[D('structure' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0020 \-\> B:20:0x0022, CROSS_EDGE: B:14:0x0014 \-\> B:19:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x002d: r0 'tail' I\l  0x0022\-0x002d: r1 'head' I\l  \-1 \-0x002d: r5 'structure' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-[Ljava\/lang\/Object;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_19;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_19 -> Node_20;
}

