digraph "CFG forkotlin.collections.ArrayDeque.filterInPlace(Lkotlin\/jvm\/functions\/Function1;)Z" {
Node_47 [shape=record,label="{47\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_49 [shape=record,label="{49\:\ 0x0000}"];
Node_50 [shape=record,label="{50\:\ 0x0006|if (isEmpty() != false) goto L45\l}"];
Node_51 [shape=record,label="{51\:\ 0x0008}"];
Node_52 [shape=record,label="{52\:\ 0x000b|if (r10.elementData.length != 0) goto L44\l}"];
Node_53 [shape=record,label="{53\:\ 0x000d|r1 = true\l}"];
Node_55 [shape=record,label="{55\:\ 0x0010|PHI: r1 \l  PHI: (r1v4 boolean) = (r1v3 boolean), (r1v8 boolean) binds: [B:54:0x000f, B:53:0x000d] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L7\l}"];
Node_57 [shape=record,label="{57\:\ 0x0014|int r1 = positiveMod(r10.head + size())\lint r2 = r10.head\lr3 = false\l}"];
Node_58 [shape=record,label="{58\:\ 0x0025|if (r10.head \>= r1) goto L24\l}"];
Node_59 [shape=record,label="{59\:\ 0x0027|int r4 = r10.head\l}"];
Node_60 [shape=record,label="{60\:\ 0x0029|LOOP_START\lLOOP:0: B:60:0x0029\-\>B:65:0x0044\lPHI: r2 r3 r4 \l  PHI: (r2v11 'newTail' int) = (r2v2 'newTail' int), (r2v12 'newTail' int) binds: [B:59:0x0027, B:65:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v8 'modified' boolean) = (r3v0 'modified' boolean), (r3v10 'modified' boolean) binds: [B:59:0x0027, B:65:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v11 'index' int) = (r4v10 'index' int), (r4v13 'index' int) binds: [B:59:0x0027, B:65:0x0044] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r1) goto L18\l}"];
Node_61 [shape=record,label="{61\:\ 0x002b|r6 = r10.elementData[r4]\l}"];
Node_62 [shape=record,label="{62\:\ 0x0039|if (r11.invoke(r6).booleanValue() == false) goto L16\l}"];
Node_63 [shape=record,label="{63\:\ 0x003b|r10.elementData[r2] = r6\lr2 = r2 + 1\l}"];
Node_87 [shape=record,label="{87\:\ 0x0044|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0044|LOOP_END\lLOOP:0: B:60:0x0029\-\>B:65:0x0044\lPHI: r2 r3 \l  PHI: (r2v12 'newTail' int) = (r2v11 'newTail' int), (r2v13 'newTail' int) binds: [B:86:0x0044, B:87:0x0044] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v10 'modified' boolean) = (r3v9 'modified' boolean), (r3v8 'modified' boolean) binds: [B:86:0x0044, B:87:0x0044] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r4 + 1\l}"];
Node_64 [shape=record,label="{64\:\ 0x0043|r3 = true\l}"];
Node_86 [shape=record,label="{86\:\ 0x0044|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0047|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0047|kotlin.collections.ArraysKt.fill(r10.elementData, null, r2, r1)\l}"];
Node_81 [shape=record,label="{81\:\ 0x0098|PHI: r2 r3 \l  PHI: (r2v10 'newTail' int) = (r2v5 'newTail' int), (r2v11 'newTail' int) binds: [B:91:0x0098, B:66:0x0047] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v7 'modified' boolean) = (r3v2 'modified' boolean), (r3v8 'modified' boolean) binds: [B:91:0x0098, B:66:0x0047] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 == false) goto L22\l}"];
Node_82 [shape=record,label="{82\:\ 0x009a|r10.size = negativeMod(r2 \- r10.head)\l}"];
Node_83 [shape=record,label="{83\:\ 0x00a4|RETURN\l|return r3\l}"];
Node_48 [shape=record,label="{48\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_67 [shape=record,label="{67\:\ 0x004d|int r4 = r10.head\lint r6 = r10.elementData.length\l}"];
Node_68 [shape=record,label="{68\:\ 0x0052|LOOP_START\lLOOP:1: B:68:0x0052\-\>B:73:0x006f\lPHI: r2 r3 r4 \l  PHI: (r2v3 'newTail' int) = (r2v2 'newTail' int), (r2v8 'newTail' int) binds: [B:67:0x004d, B:73:0x006f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'modified' boolean) = (r3v0 'modified' boolean), (r3v6 'modified' boolean) binds: [B:67:0x004d, B:73:0x006f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v2 'index' int) = (r4v1 'index' int), (r4v6 'index' int) binds: [B:67:0x004d, B:73:0x006f] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r6) goto L33\l}"];
Node_69 [shape=record,label="{69\:\ 0x0054|java.lang.Object[] r7 = r10.elementData\lr8 = r7[r4]\lr7[r4] = null\l}"];
Node_70 [shape=record,label="{70\:\ 0x0064|if (r11.invoke(r8).booleanValue() == false) goto L31\l}"];
Node_71 [shape=record,label="{71\:\ 0x0066|r10.elementData[r2] = r8\lr2 = r2 + 1\l}"];
Node_90 [shape=record,label="{90\:\ 0x006f|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x006f|LOOP_END\lLOOP:1: B:68:0x0052\-\>B:73:0x006f\lPHI: r2 r3 \l  PHI: (r2v8 'newTail' int) = (r2v3 'newTail' int), (r2v9 'newTail' int) binds: [B:89:0x006f, B:90:0x006f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v6 'modified' boolean) = (r3v5 'modified' boolean), (r3v1 'modified' boolean) binds: [B:89:0x006f, B:90:0x006f] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r4 + 1\l}"];
Node_72 [shape=record,label="{72\:\ 0x006e|r3 = true\l}"];
Node_89 [shape=record,label="{89\:\ 0x006f|SYNTHETIC\l}"];
Node_88 [shape=record,label="{88\:\ 0x0072|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0072|int r2 = positiveMod(r2)\lr4 = 0\l}"];
Node_75 [shape=record,label="{75\:\ 0x0077|LOOP_START\lLOOP:2: B:75:0x0077\-\>B:80:0x0095\lPHI: r2 r3 r4 \l  PHI: (r2v5 'newTail' int) = (r2v4 'newTail' int), (r2v6 'newTail' int) binds: [B:74:0x0072, B:80:0x0095] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'modified' boolean) = (r3v1 'modified' boolean), (r3v4 'modified' boolean) binds: [B:74:0x0072, B:80:0x0095] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'index' int) = (r4v3 'index' int), (r4v5 'index' int) binds: [B:74:0x0072, B:80:0x0095] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \>= r1) goto L43\l}"];
Node_76 [shape=record,label="{76\:\ 0x0079|java.lang.Object[] r6 = r10.elementData\lr7 = r6[r4]\lr6[r4] = null\l}"];
Node_77 [shape=record,label="{77\:\ 0x0089|if (r11.invoke(r7).booleanValue() == false) goto L41\l}"];
Node_78 [shape=record,label="{78\:\ 0x008b|r10.elementData[r2] = r7\lint r2 = incremented(r2)\l}"];
Node_93 [shape=record,label="{93\:\ 0x0095|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x0095|LOOP_END\lLOOP:2: B:75:0x0077\-\>B:80:0x0095\lPHI: r2 r3 \l  PHI: (r2v6 'newTail' int) = (r2v5 'newTail' int), (r2v7 'newTail' int) binds: [B:92:0x0095, B:93:0x0095] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 'modified' boolean) = (r3v3 'modified' boolean), (r3v2 'modified' boolean) binds: [B:92:0x0095, B:93:0x0095] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r4 + 1\l}"];
Node_79 [shape=record,label="{79\:\ 0x0094|r3 = true\l}"];
Node_92 [shape=record,label="{92\:\ 0x0095|SYNTHETIC\l}"];
Node_91 [shape=record,label="{91\:\ 0x0098|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x000f|r1 = false\l}"];
Node_84 [shape=record,label="{84\:\ 0x00a5|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{private final boolean kotlin.collections.ArrayDeque.filterInPlace((r10v0 'this' kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r11v0 kotlin.jvm.functions.Function1\<? super E, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:65:0x0044 \-\> B:60:0x0029, CROSS_EDGE: B:64:0x0043 \-\> B:65:0x0044, CROSS_EDGE: B:81:0x0098 \-\> B:83:0x00a4, BACK_EDGE: B:73:0x006f \-\> B:68:0x0052, CROSS_EDGE: B:72:0x006e \-\> B:73:0x006f, BACK_EDGE: B:80:0x0095 \-\> B:75:0x0077, CROSS_EDGE: B:79:0x0094 \-\> B:80:0x0095, CROSS_EDGE: B:75:0x0077 \-\> B:81:0x0098, CROSS_EDGE: B:84:0x00a5 \-\> B:48:?, CROSS_EDGE: B:54:0x000f \-\> B:55:0x0010, CROSS_EDGE: B:50:0x0006 \-\> B:84:0x00a5\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function1\<\-TE;Ljava\/lang\/Boolean;\>;)Z\l}"];
MethodNode -> Node_47;Node_47 -> Node_49;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_84;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_54;
Node_53 -> Node_55;
Node_55 -> Node_57;
Node_55 -> Node_84[style=dashed];
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_67;
Node_59 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_85;
Node_61 -> Node_62;
Node_62 -> Node_63[style=dashed];
Node_62 -> Node_64;
Node_63 -> Node_87;
Node_87 -> Node_65;
Node_65 -> Node_60;
Node_64 -> Node_86;
Node_86 -> Node_65;
Node_85 -> Node_66;
Node_66 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_83;
Node_82 -> Node_83;
Node_83 -> Node_48;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_88;
Node_69 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_72;
Node_71 -> Node_90;
Node_90 -> Node_73;
Node_73 -> Node_68;
Node_72 -> Node_89;
Node_89 -> Node_73;
Node_88 -> Node_74;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_91;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_93;
Node_93 -> Node_80;
Node_80 -> Node_75;
Node_79 -> Node_92;
Node_92 -> Node_80;
Node_91 -> Node_81;
Node_54 -> Node_55;
Node_84 -> Node_48;
}

