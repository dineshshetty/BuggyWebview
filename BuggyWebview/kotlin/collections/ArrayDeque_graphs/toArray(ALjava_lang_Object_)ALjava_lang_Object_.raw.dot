digraph "CFG forkotlin.collections.ArrayDeque.toArray([Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"array\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('array' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r10 I:??[] A[D('array' java.lang.Object[])])  (LINE:535)\l0x0006: INVOKE  (r1 I:int) = (r9 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r0 I:??[int, byte, short, char]) \< (r1 I:??[int, byte, short, char])  \-\> B:21:0x000e \l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|0x000c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('array' java.lang.Object[])]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: CONST_STR  (r1 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.Array\<kotlin.Any?\>\" \l0x0018: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001c: IGET  (r1 I:int) = (r9 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int  (LINE:537)\l0x001e: INVOKE  (r2 I:int) = (r9 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)]\l0x0022: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x0023: INVOKE  (r1 I:int) = (r9 I:kotlin.collections.ArrayDeque), (r1 I:int) type: DIRECT call: kotlin.collections.ArrayDeque.positiveMod(int):int A[MD:(int):int (m)]\l0x0027: IGET  (r5 I:int) = (r9 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int  (LINE:538)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0029|0x0029: IF  (r5 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char] A[D('tail' int)])  \-\> B:25:0x0036 \l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|0x002b: IGET  (r2 I:java.lang.Object[]) = (r9 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:539)\l0x002d: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002e: CONST  (r7 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x002f: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0030: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('dest' java.lang.Object[])]) \l0x0031: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('tail' int)]) \l0x0032: INVOKE  \l  (r2 I:java.lang.Object[])\l  (r3 I:java.lang.Object[])\l  (r4 I:int)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:int)\l  (r8 I:java.lang.Object)\l type: STATIC call: kotlin.collections.ArraysKt.copyInto$default(java.lang.Object[], java.lang.Object[], int, int, int, int, java.lang.Object):java.lang.Object[] A[MD:(java.lang.Object[], java.lang.Object[], int, int, int, int, java.lang.Object):java.lang.Object[] (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0053|0x0053: ARRAY_LENGTH  (r2 I:int) = (r0 I:??[] A[D('dest' java.lang.Object[])])  (LINE:544)\l0x0054: INVOKE  (r3 I:int) = (r9 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0058|0x0058: IF  (r2 I:??[int, byte, short, char]) \<= (r3 I:??[int, byte, short, char])  \-\> B:31:0x0061 \l}"];
Node_30 [shape=record,label="{30\:\ 0x005a|0x005a: INVOKE  (r2 I:int) = (r9 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)] (LINE:545)\l0x005e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x005f: APUT  (r0 I:??[OBJECT, ARRAY][] A[D('dest' java.lang.Object[])]), (r2 I:??[int, short, byte, char]), (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0061|RETURN\l|0x0061: RETURN  (r0 I:T[] A[D('dest' java.lang.Object[])])  (LINE:549)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0036|0x0036: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY])  (LINE:540)\l0x0037: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x0039: INVOKE  (r2 I:boolean) = (r2 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l0x003d: ARITH  (r2 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x003f|0x003f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0053 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0041|0x0041: IGET  (r2 I:java.lang.Object[]) = (r9 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:541)\l0x0043: IGET  (r3 I:int) = (r9 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int \l0x0045: ARRAY_LENGTH  (r4 I:int) = (r2 I:??[]) \l0x0046: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0047: INVOKE  \l  (r2 I:java.lang.Object[])\l  (r0 I:java.lang.Object[] A[D('dest' java.lang.Object[])])\l  (r5 I:int)\l  (r3 I:int)\l  (r4 I:int)\l type: STATIC call: kotlin.collections.ArraysKt.copyInto(java.lang.Object[], java.lang.Object[], int, int, int):java.lang.Object[] A[MD:\<T\>:(T[], T[], int, int, int):T[] (m)]\l0x004a: IGET  (r2 I:java.lang.Object[]) = (r9 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:542)\l0x004c: ARRAY_LENGTH  (r3 I:int) = (r2 I:??[]) \l0x004d: IGET  (r4 I:int) = (r9 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int \l0x004f: ARITH  (r3 I:int) = (r3 I:int) \- (r4 I:int) \l0x0050: INVOKE  \l  (r2 I:java.lang.Object[])\l  (r0 I:java.lang.Object[] A[D('dest' java.lang.Object[])])\l  (r3 I:int)\l  (r5 I:int)\l  (r1 I:int A[D('tail' int)])\l type: STATIC call: kotlin.collections.ArraysKt.copyInto(java.lang.Object[], java.lang.Object[], int, int, int):java.lang.Object[] A[MD:\<T\>:(T[], T[], int, int, int):T[] (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|0x000e: INVOKE  (r0 I:int) = (r9 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)]\l0x0012: INVOKE  (r0 I:java.lang.Object[]) = (r10 I:java.lang.Object[] A[D('array' java.lang.Object[])]), (r0 I:int) type: STATIC call: kotlin.collections.ArraysKt.arrayOfNulls(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (m)]\l}"];
MethodNode[shape=record,label="{public T[] kotlin.collections.ArrayDeque.toArray((r9 'this' I:kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r10 I:T[] A[D('array' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:29:0x0058 \-\> B:31:0x0061, CROSS_EDGE: B:27:0x0041 \-\> B:28:0x0053, CROSS_EDGE: B:26:0x003f \-\> B:28:0x0053, CROSS_EDGE: B:21:0x000e \-\> B:22:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [T, E]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;)[TT;\lDebug Info:\l  0x001c\-0x0061: r0 'dest' [Ljava\/lang\/Object;\l  0x0027\-0x0061: r1 'tail' I\l  \-1 \-0x0061: r10 'array' [Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [ClspMth\{\<T\> java.util.Collection.toArray(T[]):T[]\}]\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_17;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_28;
Node_21 -> Node_22;
}

