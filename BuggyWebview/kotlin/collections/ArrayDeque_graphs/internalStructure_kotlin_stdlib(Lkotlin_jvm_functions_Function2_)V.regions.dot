digraph "CFG forkotlin.collections.ArrayDeque.internalStructure$kotlin_stdlib(Lkotlin\/jvm\/functions\/Function2;)V" {
subgraph cluster_Region_412122552 {
label = "R(3:1|2|6) | DECL_VAR: int null\l";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"structure\")\lint int r0 = positiveMod(r4.head + size())\l}"];
Node_14 [shape=record,label="{14\:\ 0x0014|int r1 = (isEmpty() \|\| (r1 = r4.head) \< r0) ? r4.head : r1 \- r4.elementData.length\l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|PHI: r1 \l  PHI: (r1v3 'head' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|r5.invoke(java.lang.Integer.valueOf(r1), toArray())\l}"];
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0016}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0018|REMOVE\lADDED_TO_REGION\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x001b}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x002d}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0020}"];
MethodNode[shape=record,label="{public final void kotlin.collections.ArrayDeque.internalStructure$kotlin_stdlib((r4v0 'this' kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r5v0 'structure' kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Object[], kotlin.Unit\> A[D('structure' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0020 \-\> B:20:0x0022, CROSS_EDGE: B:14:0x0014 \-\> B:19:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-[Ljava\/lang\/Object;Lkotlin\/Unit;\>;)V\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r3v0. Raw type applied. Possible types: ? super java.lang.Object[]\}\l}"];
MethodNode -> Node_11;Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_19;
Node_20 -> Node_21;
Node_11 -> Node_13;
Node_15 -> Node_16;
Node_16 -> Node_18;
Node_16 -> Node_19;
Node_18 -> Node_20;
Node_21 -> Node_12;
Node_19 -> Node_20;
}

