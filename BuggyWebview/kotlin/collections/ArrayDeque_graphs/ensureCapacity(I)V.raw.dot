digraph "CFG forkotlin.collections.ArrayDeque.ensureCapacity(I)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: IF  (r3 I:??[int, byte, short, char] A[D('minCapacity' int)]) \< (0 ??[int, byte, short, char])  \-\> B:26:0x0022  (LINE:59)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: IGET  (r0 I:java.lang.Object[]) = (r2 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:60)\l0x0004: ARRAY_LENGTH  (r1 I:int) = (r0 I:??[]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|0x0005: IF  (r3 I:??[int, byte, short, char] A[D('minCapacity' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:20:0x0008 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|RETURN\l|0x0007: RETURN   \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0008: SGET  (r1 I:java.lang.Object[]) =  kotlin.collections.ArrayDeque.emptyElementData java.lang.Object[]  (LINE:61)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000a|0x000a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0017 \l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:62)\l0x000e: INVOKE  (r0 I:int) = (r3 I:int A[D('minCapacity' int)]), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0012: NEW_ARRAY  (r0 I:java.lang.Object[]) = (r0 I:int A[IMMUTABLE_TYPE]) type: java.lang.Object[] \l0x0014: IPUT  (r0 I:java.lang.Object[]), (r2 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[] \l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|RETURN\l|0x0016: RETURN    (LINE:63)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|0x0017: SGET  (r1 I:kotlin.collections.ArrayDeque$Companion) =  kotlin.collections.ArrayDeque.Companion kotlin.collections.ArrayDeque$Companion  (LINE:66)\l0x0019: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x001a: INVOKE  (r0 I:int) = (r1 I:kotlin.collections.ArrayDeque$Companion), (r0 I:int), (r3 I:int A[D('minCapacity' int)]) type: VIRTUAL call: kotlin.collections.ArrayDeque.Companion.newCapacity$kotlin_stdlib(int, int):int A[MD:(int, int):int (m)]\l0x001e: INVOKE  (r2 I:kotlin.collections.ArrayDeque), (r0 I:int A[D('newCapacity' int)]) type: DIRECT call: kotlin.collections.ArrayDeque.copyElements(int):void A[MD:(int):void (m)] (LINE:67)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|RETURN\l|0x0021: RETURN    (LINE:68)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('newCapacity' int)]) =  java.lang.IllegalStateException  (LINE:59)\l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"Deque is too big.\" \l0x0026: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0029|0x0029: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final void kotlin.collections.ArrayDeque.ensureCapacity((r2 'this' I:kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('minCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0016 \-\> B:15:?, CROSS_EDGE: B:25:0x0021 \-\> B:15:?, CROSS_EDGE: B:27:0x0029 \-\> B:15:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001e\-0x0022: r0 'newCapacity' I\l  \-1 \-0x0029: r3 'minCapacity' I\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_15;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_15;
Node_24 -> Node_25;
Node_25 -> Node_15;
Node_26 -> Node_27;
Node_27 -> Node_15;
}

