digraph "CFG forkotlin.collections.ArrayDeque.\<init\>(I)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000}"];
Node_14 [shape=record,label="{14\:\ 0x0004|if (r4 != 0) goto L7\l}"];
Node_15 [shape=record,label="{15\:\ 0x0006|java.lang.Object[] r0 = kotlin.collections.ArrayDeque.emptyElementData\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|PHI: r0 \l  PHI: (r0v2 java.lang.Object[]) = (r0v1 java.lang.Object[]), (r0v3 java.lang.Object[]) binds: [B:17:0x000b, B:15:0x0006] A[DONT_GENERATE, DONT_INLINE]\l|r3.elementData = r0\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|RETURN\l|return\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0009|if (r4 \<= 0) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x000b|java.lang.Object[] r0 = new java.lang.Object[r4]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Illegal Capacity: \")\lr1.append(r4)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|throw new java.lang.IllegalArgumentException(r1.toString())\l}"];
MethodNode[shape=record,label="{public void kotlin.collections.ArrayDeque.\<init\>((r3v0 'this' kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'initialCapacity' int A[D('initialCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x000b \-\> B:18:0x000d, CROSS_EDGE: B:21:0x0026 \-\> B:12:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_20;
Node_17 -> Node_18;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

