digraph "CFG forkotlin.collections.ArrayDeque.ensureCapacity(I)V" {
subgraph cluster_Region_1106127891 {
label = "R(1:(2:(1:13)|(2:2|(2:(1:4)|(1:(2:(2:8|9)|(1:10)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_20463113 {
label = "R(2:(1:13)|(2:2|(2:(1:4)|(1:(2:(2:8|9)|(1:10))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1814660244 {
label = "IF [B:16:0x0000] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0000|if (r3 \< 0) goto L12\l}"];
subgraph cluster_Region_559834948 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0029|throw new java.lang.IllegalStateException(\"Deque is too big.\")\l}"];
}
}
subgraph cluster_Region_75246547 {
label = "R(2:2|(2:(1:4)|(1:(2:(2:8|9)|(1:10)))))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0002|java.lang.Object[] java.lang.Object[] r0 = r2.elementData\l}"];
subgraph cluster_Region_299915720 {
label = "R(2:(1:4)|(1:(2:(2:8|9)|(1:10))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1509697710 {
label = "IF [B:18:0x0005] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0005|if (r3 \<= r0.length) goto L4\l}"];
subgraph cluster_Region_1374217611 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0007|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1908790790 {
label = "R(1:(2:(2:8|9)|(1:10)))";
node [shape=record,color=blue];
subgraph cluster_Region_594799421 {
label = "R(2:(2:8|9)|(1:10))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1679021747 {
label = "IF [B:21:0x000a] THEN: R(2:8|9) ELSE: null";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x000a|if (r0 == kotlin.collections.ArrayDeque.emptyElementData) goto L8\l}"];
subgraph cluster_Region_810473602 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x000c|r2.elementData = new java.lang.Object[kotlin.ranges.RangesKt.coerceAtLeast(r3, 10)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|RETURN\l|return\l}"];
}
}
subgraph cluster_Region_1853883105 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0017|int int r0 = kotlin.collections.ArrayDeque.Companion.newCapacity$kotlin_stdlib(r0.length, r3)\lcopyElements(r0)\l}"];
}
}
}
}
}
}
}
Node_14 [shape=record,color=red,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0008}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0021}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0022}"];
MethodNode[shape=record,label="{private final void kotlin.collections.ArrayDeque.ensureCapacity((r2v0 'this' kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r3v0 'minCapacity' int A[D('minCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0016 \-\> B:15:?, CROSS_EDGE: B:25:0x0021 \-\> B:15:?, CROSS_EDGE: B:27:0x0029 \-\> B:15:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_14;Node_16 -> Node_17[style=dashed];
Node_16 -> Node_26;
Node_27 -> Node_15;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_20[style=dashed];
Node_19 -> Node_15;
Node_21 -> Node_22;
Node_21 -> Node_24[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_15;
Node_24 -> Node_25;
Node_14 -> Node_16;
Node_20 -> Node_21;
Node_25 -> Node_15;
Node_26 -> Node_27;
}

