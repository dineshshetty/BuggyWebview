digraph "CFG forkotlin.collections.ArrayDeque.negativeMod(I)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:11:0x0007  (LINE:89)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IGET  (r0 I:java.lang.Object[]) = (r1 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[] \l0x0004: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l0x0005: ARITH  (r0 I:int) = (r0 I:int) + (r2 I:int A[D('index' int)]) \l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x0008: RETURN  (r0 I:int) A[SYNTHETIC]\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0008|RETURN\lORIG_RETURN\l|0x0008: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{private final int kotlin.collections.ArrayDeque.negativeMod((r1 'this' I:kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r2 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:11:0x0007 \-\> B:12:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0008: r2 'index' I\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_13;
Node_13 -> Node_8;
Node_11 -> Node_12;
Node_12 -> Node_8;
}

