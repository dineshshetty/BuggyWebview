digraph "CFG forkotlin.collections.ArrayDeque.addAll(Ljava\/util\/Collection;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('elements' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:boolean) = (r3 I:java.util.Collection A[D('elements' java.util.Collection)]) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)] (LINE:272)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x000d \l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|RETURN\l|0x000b: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000d|0x000d: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)] (LINE:273)\l0x0011: INVOKE  (r1 I:int) = (r3 I:java.util.Collection A[D('elements' java.util.Collection)]) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l0x0015: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0016: INVOKE  (r2 I:kotlin.collections.ArrayDeque), (r0 I:int) type: DIRECT call: kotlin.collections.ArrayDeque.ensureCapacity(int):void A[MD:(int):void (m)]\l0x0019: IGET  (r0 I:int) = (r2 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int  (LINE:274)\l0x001b: INVOKE  (r1 I:int) = (r2 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)]\l0x001f: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0020: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.ArrayDeque), (r0 I:int) type: DIRECT call: kotlin.collections.ArrayDeque.positiveMod(int):int A[MD:(int):int (m)]\l0x0024: INVOKE  (r2 I:kotlin.collections.ArrayDeque), (r0 I:int), (r3 I:java.util.Collection A[D('elements' java.util.Collection)]) type: DIRECT call: kotlin.collections.ArrayDeque.copyCollectionElements(int, java.util.Collection):void A[MD:(int, java.util.Collection\<? extends E\>):void (m)]\l0x0027: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:275)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0028|RETURN\l|0x0028: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.ArrayDeque.addAll((r2 'this' I:kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r3 I:java.util.Collection\<? extends E\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0028 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Ljava\/util\/Collection\<+TE;\>;)Z\lDebug Info:\l  \-1 \-0x0028: r3 'elements' Ljava\/util\/Collection;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.addAll(java.util.Collection\<? extends E\>):boolean\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

