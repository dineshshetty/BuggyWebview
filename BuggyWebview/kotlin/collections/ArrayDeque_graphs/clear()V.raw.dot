digraph "CFG forkotlin.collections.ArrayDeque.clear()V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int  (LINE:521)\l0x0002: INVOKE  (r1 I:int) = (r6 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)]\l0x0006: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x0007: INVOKE  (r0 I:int) = (r6 I:kotlin.collections.ArrayDeque), (r0 I:int) type: DIRECT call: kotlin.collections.ArrayDeque.positiveMod(int):int A[MD:(int):int (m)]\l0x000b: IGET  (r1 I:int) = (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int  (LINE:522)\l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|0x000f: IF  (r1 I:??[int, byte, short, char]) \>= (r0 I:??[int, byte, short, char] A[D('tail' int)])  \-\> B:15:0x0017 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|0x0011: IGET  (r4 I:java.lang.Object[]) = (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:523)\l0x0013: INVOKE  (r4 I:java.lang.Object[]), (r3 I:java.lang.Object), (r1 I:int), (r0 I:int A[D('tail' int)]) type: STATIC call: kotlin.collections.ArraysKt.fill(java.lang.Object[], java.lang.Object, int, int):void A[MD:\<T\>:(T[], T, int, int):void (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x002f|0x002f: IPUT  (r2 I:int), (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int  (LINE:528)\l0x0031: IPUT  (r2 I:int), (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.size int  (LINE:529)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0033|RETURN\l|0x0033: RETURN    (LINE:530)\l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|0x0017: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY])  (LINE:524)\l0x0018: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:boolean) = (r1 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l0x001e: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0020|0x0020: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x002f \l}"];
Node_17 [shape=record,label="{17\:\ 0x0022|0x0022: IGET  (r1 I:java.lang.Object[]) = (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:525)\l0x0024: IGET  (r4 I:int) = (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int \l0x0026: ARRAY_LENGTH  (r5 I:int) = (r1 I:??[]) \l0x0027: INVOKE  (r1 I:java.lang.Object[]), (r3 I:java.lang.Object), (r4 I:int), (r5 I:int) type: STATIC call: kotlin.collections.ArraysKt.fill(java.lang.Object[], java.lang.Object, int, int):void A[MD:\<T\>:(T[], T, int, int):void (m)]\l0x002a: IGET  (r1 I:java.lang.Object[]) = (r6 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:526)\l0x002c: INVOKE  (r1 I:java.lang.Object[]), (r3 I:java.lang.Object), (r2 I:int), (r0 I:int A[D('tail' int)]) type: STATIC call: kotlin.collections.ArraysKt.fill(java.lang.Object[], java.lang.Object, int, int):void A[MD:\<T\>:(T[], T, int, int):void (m)]\l}"];
MethodNode[shape=record,label="{public void kotlin.collections.ArrayDeque.clear((r6 'this' I:kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:17:0x0022 \-\> B:18:0x002f, CROSS_EDGE: B:16:0x0020 \-\> B:18:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x0033: r0 'tail' I\lTYPE_VARS: [E]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.clear():void\}]\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_18;
}

