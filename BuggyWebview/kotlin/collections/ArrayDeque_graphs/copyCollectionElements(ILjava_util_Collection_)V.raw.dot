digraph "CFG forkotlin.collections.ArrayDeque.copyCollectionElements(ILjava\/util\/Collection;)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INVOKE  (r0 I:java.util.Iterator) = (r7 I:java.util.Collection A[D('elements' java.util.Collection)]) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:257)\l0x0004: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('internalIndex' int)])  (LINE:259)\l0x0005: IGET  (r2 I:java.lang.Object[]) = (r5 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[] \l0x0007: ARRAY_LENGTH  (r2 I:int) = (r2 I:??[]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|LOOP_START\lLOOP:0: B:21:0x0008\-\>B:24:0x0010\l|0x0008: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:32:0x001b \l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:260)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x001b \l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|LOOP_END\lLOOP:0: B:21:0x0008\-\>B:24:0x0010\l|0x0010: IGET  (r3 I:java.lang.Object[]) = (r5 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:261)\l0x0012: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0016: APUT  (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('index' int)]), (r4 I:??[OBJECT, ARRAY]) \l0x0018: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:259)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x001b|0x001b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:263)\l0x001c: IGET  (r2 I:int) = (r5 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.head int \l}"];
Node_26 [shape=record,label="{26\:\ 0x001e|LOOP_START\lLOOP:1: B:26:0x001e\-\>B:29:0x0026\l|0x001e: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:35:0x0031 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|0x0020: INVOKE  (r3 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:264)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0024|0x0024: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0031 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0026|LOOP_END\lLOOP:1: B:26:0x001e\-\>B:29:0x0026\l|0x0026: IGET  (r3 I:java.lang.Object[]) = (r5 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.elementData java.lang.Object[]  (LINE:265)\l0x0028: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002c: APUT  (r3 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char] A[D('index' int)]), (r4 I:??[OBJECT, ARRAY]) \l0x002e: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:263)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0031|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x0031|0x0031: INVOKE  (r1 I:int) = (r5 I:kotlin.collections.ArrayDeque) type: VIRTUAL call: kotlin.collections.ArrayDeque.size():int A[MD:():int (m)] (LINE:268)\l0x0035: INVOKE  (r2 I:int) = (r7 I:java.util.Collection A[D('elements' java.util.Collection)]) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l0x0039: ARITH  (r1 I:int) = (r1 I:int) + (r2 I:int) \l0x003a: IPUT  (r1 I:int), (r5 I:kotlin.collections.ArrayDeque) kotlin.collections.ArrayDeque.size int \l}"];
Node_31 [shape=record,label="{31\:\ 0x003c|RETURN\l|0x003c: RETURN    (LINE:269)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0031|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001b|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private final void kotlin.collections.ArrayDeque.copyCollectionElements((r5 'this' I:kotlin.collections.ArrayDeque\<E\> A[IMMUTABLE_TYPE, THIS]), (r6 I:int A[D('internalIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.Collection\<? extends E\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0010 \-\> B:21:0x0008, BACK_EDGE: B:29:0x0026 \-\> B:26:0x001e, CROSS_EDGE: B:26:0x001e \-\> B:30:0x0031, CROSS_EDGE: B:21:0x0008 \-\> B:25:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0005\-0x001b: r1 'index' I\l  0x001c\-0x0031: r1 'index' I\l  0x0004\-0x003c: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x003c: r6 'internalIndex' I\l  \-1 \-0x003c: r7 'elements' Ljava\/util\/Collection;\lTYPE_VARS: [E]\lSIGNATURE: (ILjava\/util\/Collection\<+TE;\>;)V\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_32;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_33;
Node_24 -> Node_21;
Node_33 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_35;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_29 -> Node_26;
Node_34 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_35 -> Node_30;
Node_32 -> Node_25;
}

