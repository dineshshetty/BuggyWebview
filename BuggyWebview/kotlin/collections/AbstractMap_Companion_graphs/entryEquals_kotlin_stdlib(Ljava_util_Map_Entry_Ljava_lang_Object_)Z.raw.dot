digraph "CFG forkotlin.collections.AbstractMap.Companion.entryEquals$kotlin_stdlib(Ljava\/util\/Map$Entry;Ljava\/lang\/Object;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"e\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('e' java.util.Map$Entry)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INSTANCE_OF  (r0 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) java.util.Map$Entry  (LINE:148)\l0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x000b \l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|0x000a: RETURN  (r1 I:boolean) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b|0x000b: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Map$Entry A[D('e' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:149)\l0x000f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0010: CHECK_CAST (r2 I:java.util.Map$Entry) = (java.util.Map$Entry) (r2 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map$Entry) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)]\l0x0016: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:? \l}"];
Node_20 [shape=record,label="{20\:\ 0x001c|0x001c: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.util.Map$Entry A[D('e' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)]\l0x0020: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('other' java.lang.Object)]) \l0x0021: CHECK_CAST (r2 I:java.util.Map$Entry) = (java.util.Map$Entry) (r2 I:??[OBJECT, ARRAY]) \l0x0023: INVOKE  (r2 I:java.lang.Object) = (r2 I:java.util.Map$Entry) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)]\l0x0027: INVOKE  (r0 I:boolean) = (r0 I:java.lang.Object), (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:? \l}"];
Node_22 [shape=record,label="{22\:\ 0x002d|RETURN\lORIG_RETURN\l|0x002d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x002e: RETURN  (r1 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|0x002e: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|0x002e: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public final boolean kotlin.collections.AbstractMap.Companion.entryEquals$kotlin_stdlib((r3 'this' I:kotlin.collections.AbstractMap$Companion A[IMMUTABLE_TYPE, THIS]), (r4 I:java.util.Map$Entry\<?, ?\> A[D('e' java.util.Map$Entry), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x002e \-\> B:14:?, CROSS_EDGE: B:21:0x002b \-\> B:23:0x002e, CROSS_EDGE: B:19:0x001a \-\> B:23:0x002e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002e: r4 'e' Ljava\/util\/Map$Entry;\l  \-1 \-0x002e: r5 'other' Ljava\/lang\/Object;\lSIGNATURE: (Ljava\/util\/Map$Entry\<**\>;Ljava\/lang\/Object;)Z\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_14;
Node_25 -> Node_14;
Node_24 -> Node_14;
}

