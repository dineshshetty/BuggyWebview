digraph "CFG forkotlin.collections.AbstractMap.Companion.entryEquals$kotlin_stdlib(Ljava\/util\/Map$Entry;Ljava\/lang\/Object;)Z" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"e\")\l}"];
Node_16 [shape=record,label="{16\:\ 0x0008|if ((r5 instanceof java.util.Map.Entry) != false) goto L5\l}"];
Node_17 [shape=record,label="{17\:\ 0x000a|RETURN\l|return false\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x000b}"];
Node_19 [shape=record,label="{19\:\ 0x001a|if (kotlin.jvm.internal.Intrinsics.areEqual(r4.getKey(), ((java.util.Map.Entry) r5).getKey()) == false) goto L11\l}"];
Node_20 [shape=record,label="{20\:\ 0x001c}"];
Node_21 [shape=record,label="{21\:\ 0x002b|if (kotlin.jvm.internal.Intrinsics.areEqual(r4.getValue(), ((java.util.Map.Entry) r5).getValue()) == false) goto L10\l}"];
Node_22 [shape=record,label="{22\:\ 0x002d|RETURN\lORIG_RETURN\l|return true\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_24 [shape=record,label="{24\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public final boolean kotlin.collections.AbstractMap.Companion.entryEquals$kotlin_stdlib((r3v0 'this' kotlin.collections.AbstractMap$Companion A[IMMUTABLE_TYPE, THIS]), (r4v0 'e' java.util.Map$Entry\<?, ?\> A[D('e' java.util.Map$Entry), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'other' java.lang.Object A[D('other' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x002e \-\> B:14:?, CROSS_EDGE: B:21:0x002b \-\> B:23:0x002e, CROSS_EDGE: B:19:0x001a \-\> B:23:0x002e\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/util\/Map$Entry\<**\>;Ljava\/lang\/Object;)Z\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_14;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_24;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_14;
Node_25 -> Node_14;
Node_24 -> Node_14;
}

