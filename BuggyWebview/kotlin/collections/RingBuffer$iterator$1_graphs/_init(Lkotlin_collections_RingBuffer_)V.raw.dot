digraph "CFG forkotlin.collections.RingBuffer$iterator$1.\<init\>(Lkotlin\/collections\/RingBuffer;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IPUT  \l  (r2 I:kotlin.collections.RingBuffer\<T\> A[D('$receiver' kotlin.collections.RingBuffer)])\l  (r1 I:kotlin.collections.RingBuffer$iterator$1)\l kotlin.collections.RingBuffer$iterator$1.this$0 kotlin.collections.RingBuffer \l0x0002: INVOKE  (r1 I:kotlin.collections.AbstractIterator) type: DIRECT call: kotlin.collections.AbstractIterator.\<init\>():void A[MD:():void (m)] (LINE:111)\l0x0005: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.RingBuffer A[D('$receiver' kotlin.collections.RingBuffer)]) type: VIRTUAL call: kotlin.collections.RingBuffer.size():int A[MD:():int (m)] (LINE:112)\l0x0009: IPUT  (r0 I:int), (r1 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.count int \l0x000b: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.RingBuffer A[D('$receiver' kotlin.collections.RingBuffer)]) type: STATIC call: kotlin.collections.RingBuffer.access$getStartIndex$p(kotlin.collections.RingBuffer):int A[MD:(kotlin.collections.RingBuffer):int (m)] (LINE:113)\l0x000f: IPUT  (r0 I:int), (r1 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.index int \l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:111)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{void kotlin.collections.RingBuffer$iterator$1.\<init\>((r1 'this' I:kotlin.collections.RingBuffer$iterator$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:kotlin.collections.RingBuffer\<T\> A[D('$receiver' kotlin.collections.RingBuffer), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | ANONYMOUS_CONSTRUCTOR\lUSE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0011: r2 '$receiver' Lkotlin\/collections\/RingBuffer;\lTYPE_VARS: EMPTY\lSIGNATURE: (Lkotlin\/collections\/RingBuffer\<TT;\>;)V\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

