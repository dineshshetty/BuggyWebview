digraph "CFG forkotlin.collections.RingBuffer$iterator$1.computeNext()V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.count int  (LINE:116)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0008 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r6 I:kotlin.collections.RingBuffer$iterator$1) type: VIRTUAL call: kotlin.collections.RingBuffer$iterator$1.done():void A[MD:():void (m)] (LINE:117)\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x002a: RETURN   A[SYNTHETIC] (LINE:124)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0008|0x0008: IGET  (r0 I:kotlin.collections.RingBuffer\<T\>) = (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.this$0 kotlin.collections.RingBuffer  (LINE:120)\l0x000a: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:kotlin.collections.RingBuffer) type: STATIC call: kotlin.collections.RingBuffer.access$getBuffer$p(kotlin.collections.RingBuffer):java.lang.Object[] A[MD:(kotlin.collections.RingBuffer):java.lang.Object[] (m)]\l0x000e: IGET  (r1 I:int) = (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.index int \l0x0010: AGET  (r0 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]) \l0x0012: INVOKE  (r6 I:kotlin.collections.RingBuffer$iterator$1), (r0 I:java.lang.Object) type: VIRTUAL call: kotlin.collections.RingBuffer$iterator$1.setNext(java.lang.Object):void A[MD:(T):void (m)]\l0x0015: IGET  (r0 I:kotlin.collections.RingBuffer\<T\>) = (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.this$0 kotlin.collections.RingBuffer  (LINE:121)\l0x0017: IGET  (r1 I:int) = (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.index int \l0x0019: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x001a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: ARITH  (r4 I:int) = (r1 I:int A[D('$this$forward$iv' int)]) + (r2 I:int A[D('n$iv' int)])  (LINE:208)\l0x001d: INVOKE  (r5 I:int) = (r0 I:kotlin.collections.RingBuffer A[D('this_$iv' kotlin.collections.RingBuffer)]) type: STATIC call: kotlin.collections.RingBuffer.access$getCapacity$p(kotlin.collections.RingBuffer):int A[MD:(kotlin.collections.RingBuffer):int (m)]\l0x0021: ARITH  (r4 I:int) = (r4 I:int) % (r5 I:int) \l0x0022: IPUT  (r4 I:int), (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.index int  (LINE:121)\l0x0024: IGET  (r0 I:int) = (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.count int  (LINE:122)\l0x0026: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l0x0028: IPUT  (r0 I:int), (r6 I:kotlin.collections.RingBuffer$iterator$1) kotlin.collections.RingBuffer$iterator$1.count int \l}"];
Node_6 [shape=record,label="{6\:\ 0x002a|RETURN\lORIG_RETURN\l|0x002a: RETURN    (LINE:124)\l}"];
MethodNode[shape=record,label="{protected void kotlin.collections.RingBuffer$iterator$1.computeNext((r6 'this' I:kotlin.collections.RingBuffer$iterator$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0008 \-\> B:6:0x002a\lDebug Info:\l  0x0017\-0x0022: r0 'this_$iv' Lkotlin\/collections\/RingBuffer;\l  0x0019\-0x0022: r1 '$this$forward$iv' I\l  0x001a\-0x0022: r2 'n$iv' I\l  0x001b\-0x0022: r3 '$i$f$forward' I\lMETHOD_OVERRIDE: [kotlin.collections.AbstractIterator.computeNext():void]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

