digraph "CFG forkotlin.collections.MapsKt___MapsKt.maxOf(Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Comparable;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$maxOf' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Set) = (r4 I:java.util.Map A[D('$this$maxOf' java.util.Map)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:283)\l0x000e: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:java.util.Iterator) = (r0 I:java.lang.Iterable) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)]\l0x0014: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|0x0018: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003d \l}"];
Node_22 [shape=record,label="{22\:\ 0x001a|0x001a: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001e: INVOKE  (r1 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r1 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0022: CHECK_CAST (r1 I:java.lang.Comparable) = (java.lang.Comparable) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0024|LOOP_START\lLOOP:0: B:23:0x0024\-\>B:33:0x0024\l|0x0024: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x003c \l}"];
Node_25 [shape=record,label="{25\:\ 0x002a|0x002a: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002e: INVOKE  (r2 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0032: CHECK_CAST (r2 I:java.lang.Comparable) = (java.lang.Comparable) (r2 I:??[OBJECT, ARRAY]) \l0x0034: INVOKE  (r3 I:int) = (r1 I:java.lang.Comparable), (r2 I:java.lang.Object) type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0038|0x0038: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:34:0x0024 \l}"];
Node_31 [shape=record,label="{31\:\ 0x003a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x003a|0x003a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x0024|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0024|LOOP_END\lSYNTHETIC\lLOOP:0: B:23:0x0024\-\>B:33:0x0024\l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x003c|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x003c|RETURN\l|0x003c: RETURN  (r1 I:R extends java.lang.Comparable\<? super R\>) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ 0x003d|0x003d: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException \l0x003f: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0042|0x0042: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final R extends java.lang.Comparable\<? super R\> kotlin.collections.MapsKt___MapsKt.maxOf((r4 I:java.util.Map\<? extends K, ? extends V\> A[D('$this$maxOf' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super java.util.Map$Entry\<? extends K, ? extends V\>, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x0038 \-\> B:23:0x0024, BACK_EDGE: B:27:0x003a \-\> B:23:0x0024, CROSS_EDGE: B:30:0x0042 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0042: r4 '$this$maxOf' Ljava\/util\/Map;\l  \-1 \-0x0042: r5 'selector' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>, V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;R::Ljava\/lang\/Comparable\<\-TR;\>;\>(Ljava\/util\/Map\<+TK;+TV;\>;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/Map$Entry\<+TK;+TV;\>;+TR;\>;)TR;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_32;
Node_25 -> Node_26;
Node_26 -> Node_31[style=dashed];
Node_26 -> Node_34;
Node_31 -> Node_27;
Node_27 -> Node_35;
Node_35 -> Node_33;
Node_33 -> Node_23;
Node_34 -> Node_33;
Node_32 -> Node_28;
Node_28 -> Node_19;
Node_29 -> Node_30;
Node_30 -> Node_19;
}

