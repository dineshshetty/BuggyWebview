digraph "CFG forkotlin.collections.MapsKt___MapsKt.onEachIndexed(Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/Map;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('$this$onEachIndexed' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"action\" \l0x0007: INVOKE  (r10 I:java.lang.Object A[D('action' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$onEachIndexed' java.util.Map)])  (LINE:570)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:608)\l0x000d: INVOKE  (r3 I:java.util.Set) = (r1 I:java.util.Map A[D('$this$onEachIndexed_u24lambda_u2d3' java.util.Map)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:570)\l0x0011: CHECK_CAST (r3 I:java.lang.Iterable) = (java.lang.Iterable) (r3 I:??[OBJECT, ARRAY]) \l0x0013: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:666)\l0x0015: INVOKE  (r6 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$forEachIndexed$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:667)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0019|LOOP_START\lLOOP:0: B:17:0x0019\-\>B:22:0x002a\l|0x0019: INVOKE  (r7 I:boolean) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|0x001d: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0035 \l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|0x001f: INVOKE  (r7 I:java.lang.Object) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0023: ARITH  (r8 I:int) = (r5 I:int A[D('index$iv' int)]) + (1 int) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0025|0x0025: IF  (r5 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:27:0x002a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0027|0x0027: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x002a|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002a|LOOP_END\lLOOP:0: B:17:0x0019\-\>B:22:0x002a\l|0x002a: INVOKE  (r5 I:java.lang.Integer) = (r5 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x002e: INVOKE  \l  (r10 I:kotlin.jvm.functions.Function2 A[D('action' kotlin.jvm.functions.Function2)])\l  (r5 I:java.lang.Object)\l  (r7 I:java.lang.Object A[D('item$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0031: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0035|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0035|RETURN\l|0x0035: RETURN  (r9 I:M extends java.util.Map\<? extends K, ? extends V\> A[D('$this$onEachIndexed' java.util.Map)]) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final M extends java.util.Map\<? extends K, ? extends V\> kotlin.collections.MapsKt___MapsKt.onEachIndexed((r9 I:M extends java.util.Map\<? extends K, ? extends V\> A[D('$this$onEachIndexed' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.util.Map$Entry\<? extends K, ? extends V\>, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x002a \-\> B:17:0x0019, CROSS_EDGE: B:20:0x0025 \-\> B:22:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0025: r5 'index$iv' I\l  0x0023\-0x0033: r7 'item$iv' Ljava\/lang\/Object;\l  0x0025\-0x0033: r8 'index$iv' I\l  0x0013\-0x0034: r3 '$this$forEachIndexed$iv' Ljava\/lang\/Iterable;\l  0x0014\-0x0034: r4 '$i$f$forEachIndexed' I\l  0x0033\-0x0034: r5 'index$iv' I\l  0x000c\-0x0035: r1 '$this$onEachIndexed_u24lambda_u2d3' Ljava\/util\/Map;\l  0x000d\-0x0035: r2 '$i$a$\-apply\-MapsKt___MapsKt$onEachIndexed$1' I\l  0x000b\-0x0035: r0 '$i$f$onEachIndexed' I\l  \-1 \-0x0035: r9 '$this$onEachIndexed' Ljava\/util\/Map;\l  \-1 \-0x0035: r10 'action' Lkotlin\/jvm\/functions\/Function2;\lTYPE_VARS: [V, K, M extends java.util.Map\<? extends K, ? extends V\>]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;M::Ljava\/util\/Map\<+TK;+TV;\>;\>(TM;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-Ljava\/util\/Map$Entry\<+TK;+TV;\>;Lkotlin\/Unit;\>;)TM;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_26;
Node_26 -> Node_22;
Node_22 -> Node_17;
Node_27 -> Node_22;
Node_25 -> Node_24;
Node_24 -> Node_15;
}

