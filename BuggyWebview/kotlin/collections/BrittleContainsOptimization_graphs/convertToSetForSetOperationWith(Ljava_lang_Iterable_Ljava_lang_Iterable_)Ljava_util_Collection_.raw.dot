digraph "CFG forkotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperationWith(Ljava\/lang\/Iterable;Ljava\/lang\/Iterable;)Ljava\/util\/Collection;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"source\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('source' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) java.util.Set  (LINE:29)\l}"];
Node_29 [shape=record,label="{29\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0013 \l}"];
Node_30 [shape=record,label="{30\:\ 0x000f|0x000f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) \l0x0010: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_48 [shape=record,label="{48\:\ ?|SYNTHETIC\lRETURN\l|0x004e: RETURN  (r0 I:java.util.Collection\<T\>) A[SYNTHETIC] (LINE:36)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0013|0x0013: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) java.util.Collection  (LINE:30)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x003e \l}"];
Node_33 [shape=record,label="{33\:\ 0x0018|0x0018: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('source' java.lang.Iterable)]) java.util.Collection  (LINE:32)\l}"];
Node_34 [shape=record,label="{34\:\ 0x001a|0x001a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x002a \l}"];
Node_35 [shape=record,label="{35\:\ 0x001c|0x001c: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('source' java.lang.Iterable)]) \l0x001d: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r0 I:int) = (r0 I:java.util.Collection) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l0x0023: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0024|0x0024: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:38:0x002a \l}"];
Node_37 [shape=record,label="{37\:\ 0x0026|0x0026: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) \l0x0027: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|0x004e: RETURN  (r0 I:java.util.Collection\<T\>) A[SYNTHETIC] (LINE:36)\l}"];
Node_38 [shape=record,label="{38\:\ 0x002a|0x002a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)])  (LINE:33)\l0x002b: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l0x002d: INVOKE  (r0 I:boolean) = (r0 I:java.util.Collection) type: STATIC call: kotlin.collections.BrittleContainsOptimizationKt.safeToConvertToSet(java.util.Collection):boolean A[MD:\<T\>:(java.util.Collection\<? extends T\>):boolean (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0031|0x0031: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003a \l}"];
Node_40 [shape=record,label="{40\:\ 0x0033|0x0033: INVOKE  (r0 I:java.util.HashSet) = (r2 I:java.lang.Iterable A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.toHashSet(java.lang.Iterable):java.util.HashSet A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.HashSet\<T\> (m)]\l0x0037: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lRETURN\l|0x004e: RETURN  (r0 I:java.util.Collection\<T\>) A[SYNTHETIC] (LINE:36)\l}"];
Node_41 [shape=record,label="{41\:\ 0x003a|0x003a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) \l0x003b: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|0x004e: RETURN  (r0 I:java.util.Collection\<T\>) A[SYNTHETIC] (LINE:36)\l}"];
Node_42 [shape=record,label="{42\:\ 0x003e|0x003e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:35)\l0x003f: SGET  (r0 I:boolean A[D('$i$f$brittleContainsOptimizationEnabled' int)]) =  kotlin.collections.CollectionSystemProperties.brittleContainsOptimizationEnabled boolean  (LINE:68)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0041|0x0041: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$f$brittleContainsOptimizationEnabled' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0048  (LINE:35)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0043|0x0043: INVOKE  (r0 I:java.util.HashSet) = (r2 I:java.lang.Iterable A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.toHashSet(java.lang.Iterable):java.util.HashSet A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.HashSet\<T\> (m)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x004c|0x004c: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x004e|RETURN\lORIG_RETURN\l|0x004e: RETURN  (r0 I:java.util.Collection\<T\>)  (LINE:36)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0048|0x0048: INVOKE  (r0 I:java.util.List) = (r2 I:java.lang.Iterable A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.List\<T\> (m)]\l}"];
MethodNode[shape=record,label="{public static final java.util.Collection\<T\> kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperationWith((r2 I:java.lang.Iterable\<? extends T\> A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.Iterable\<? extends T\> A[D('source' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0026 \-\> B:47:0x004e, CROSS_EDGE: B:40:0x0033 \-\> B:47:0x004e, CROSS_EDGE: B:41:0x003a \-\> B:47:0x004e, CROSS_EDGE: B:34:0x001a \-\> B:38:0x002a, CROSS_EDGE: B:46:0x004c \-\> B:47:0x004e, CROSS_EDGE: B:45:0x0048 \-\> B:46:0x004c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x003f\-0x0041: r0 '$i$f$brittleContainsOptimizationEnabled' I\l  \-1 \-0x004e: r2 '$this$convertToSetForSetOperationWith' Ljava\/lang\/Iterable;\l  \-1 \-0x004e: r3 'source' Ljava\/lang\/Iterable;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Ljava\/lang\/Iterable\<+TT;\>;)Ljava\/util\/Collection\<TT;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_48;
Node_48 -> Node_27;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_42;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_49;
Node_49 -> Node_27;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_50;
Node_50 -> Node_27;
Node_41 -> Node_51;
Node_51 -> Node_27;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_27;
Node_45 -> Node_46;
}

