digraph "CFG forkotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperation([Ljava\/lang\/Object;)Ljava\/util\/Collection;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$convertToSetForSetOperation' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:66)\l0x0006: SGET  (r0 I:boolean A[D('$i$f$brittleContainsOptimizationEnabled' int)]) =  kotlin.collections.CollectionSystemProperties.brittleContainsOptimizationEnabled boolean  (LINE:71)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$i$f$brittleContainsOptimizationEnabled' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x000f  (LINE:66)\l}"];
Node_12 [shape=record,label="{12\:\ 0x000a|0x000a: INVOKE  (r0 I:java.util.HashSet) = (r1 I:java.lang.Object[] A[D('$this$convertToSetForSetOperation' java.lang.Object[])]) type: STATIC call: kotlin.collections.ArraysKt.toHashSet(java.lang.Object[]):java.util.HashSet A[MD:\<T\>:(T[]):java.util.HashSet\<T\> (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0013|0x0013: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0015|RETURN\l|0x0015: RETURN  (r0 I:java.util.Collection\<T\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|0x000f: INVOKE  (r0 I:java.util.List) = (r1 I:java.lang.Object[] A[D('$this$convertToSetForSetOperation' java.lang.Object[])]) type: STATIC call: kotlin.collections.ArraysKt.asList(java.lang.Object[]):java.util.List A[MD:\<T\>:(T[]):java.util.List\<T\> (m)]\l}"];
MethodNode[shape=record,label="{public static final java.util.Collection\<T\> kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperation((r1 I:T[] A[D('$this$convertToSetForSetOperation' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000f \-\> B:14:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0008: r0 '$i$f$brittleContainsOptimizationEnabled' I\l  \-1 \-0x0015: r1 '$this$convertToSetForSetOperation' [Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;)Ljava\/util\/Collection\<TT;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

