digraph "CFG forkotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperationWith(Ljava\/lang\/Iterable;Ljava\/lang\/Iterable;)Ljava\/util\/Collection;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"source\")\l}"];
Node_29 [shape=record,label="{29\:\ 0x000d|if ((r2 instanceof java.util.Set) == false) goto L6\l}"];
Node_30 [shape=record,label="{30\:\ 0x000f}"];
Node_48 [shape=record,label="{48\:\ ?|SYNTHETIC\lRETURN\l|return (java.util.Collection) r2\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0013}"];
Node_32 [shape=record,label="{32\:\ 0x0015|if ((r2 instanceof java.util.Collection) == false) goto L20\l}"];
Node_33 [shape=record,label="{33\:\ 0x0018}"];
Node_34 [shape=record,label="{34\:\ 0x001a|if ((r3 instanceof java.util.Collection) == false) goto L14\l}"];
Node_35 [shape=record,label="{35\:\ 0x001c}"];
Node_36 [shape=record,label="{36\:\ 0x0024|if (((java.util.Collection) r3).size() \>= 2) goto L14\l}"];
Node_37 [shape=record,label="{37\:\ 0x0026}"];
Node_49 [shape=record,label="{49\:\ ?|SYNTHETIC\lRETURN\l|return (java.util.Collection) r2\l}"];
Node_38 [shape=record,label="{38\:\ 0x002a}"];
Node_39 [shape=record,label="{39\:\ 0x0031|if (safeToConvertToSet((java.util.Collection) r2) == false) goto L18\l}"];
Node_40 [shape=record,label="{40\:\ 0x0033}"];
Node_50 [shape=record,label="{50\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.collections.CollectionsKt.toHashSet(r2)\l}"];
Node_41 [shape=record,label="{41\:\ 0x003a}"];
Node_51 [shape=record,label="{51\:\ ?|SYNTHETIC\lRETURN\l|return (java.util.Collection) r2\l}"];
Node_42 [shape=record,label="{42\:\ 0x003e}"];
Node_43 [shape=record,label="{43\:\ 0x0041|if (kotlin.collections.CollectionsJVM.brittleContainsOptimizationEnabled == false) goto L25\l}"];
Node_44 [shape=record,label="{44\:\ 0x0043|java.util.HashSet r0 = kotlin.collections.CollectionsKt.toHashSet(r2)\l}"];
Node_46 [shape=record,label="{46\:\ 0x004c|PHI: r0 \l  PHI: (r0v7 java.util.Collection\<T\>) = (r0v6 java.util.Collection\<T\>), (r0v9 java.util.Collection\<T\>) binds: [B:45:0x0048, B:44:0x0043] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_47 [shape=record,label="{47\:\ 0x004e|RETURN\lORIG_RETURN\l|return r0\l}"];
Node_45 [shape=record,label="{45\:\ 0x0048|java.util.List r0 = kotlin.collections.CollectionsKt.toList(r2)\l}"];
MethodNode[shape=record,label="{public static final java.util.Collection\<T\> kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperationWith((r2v0 java.lang.Iterable\<? extends T\> A[D('$this$convertToSetForSetOperationWith' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'source' java.lang.Iterable\<? extends T\> A[D('source' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0026 \-\> B:47:0x004e, CROSS_EDGE: B:40:0x0033 \-\> B:47:0x004e, CROSS_EDGE: B:41:0x003a \-\> B:47:0x004e, CROSS_EDGE: B:34:0x001a \-\> B:38:0x002a, CROSS_EDGE: B:46:0x004c \-\> B:47:0x004e, CROSS_EDGE: B:45:0x0048 \-\> B:46:0x004c\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Ljava\/lang\/Iterable\<+TT;\>;)Ljava\/util\/Collection\<TT;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_48;
Node_48 -> Node_27;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_42;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_38;
Node_37 -> Node_49;
Node_49 -> Node_27;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_50;
Node_50 -> Node_27;
Node_41 -> Node_51;
Node_51 -> Node_27;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_27;
Node_45 -> Node_46;
}

