digraph "CFG forkotlin.collections.CollectionsKt___CollectionsJvmKt.minBy(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"selector\")\ljava.util.Iterator r3 = r9.iterator()\l}"];
Node_21 [shape=record,label="{21\:\ 0x0015|if (r3.hasNext() != false) goto L5\l}"];
Node_22 [shape=record,label="{22\:\ 0x0017|RETURN\lORIG_RETURN\l|return null\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0019|java.lang.Object r4 = r3.next()\l}"];
Node_24 [shape=record,label="{24\:\ 0x0021|if (r3.hasNext() != false) goto L7\l}"];
Node_26 [shape=record,label="{26\:\ 0x0024|java.lang.Comparable r5 = r10.invoke(r4)\lr4 = r4\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|LOOP_START\lLOOP:0: B:27:0x002a\-\>B:31:0x0040\lPHI: r4 r5 \l  PHI: (r4v2 'minElem$iv' java.lang.Object) = (r4v8 'minElem$iv' java.lang.Object), (r4v9 'minElem$iv' java.lang.Object) binds: [B:26:0x0024, B:31:0x0040] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v3 'minValue$iv' java.lang.Comparable) = (r5v2 'minValue$iv' java.lang.Comparable), (r5v4 'minValue$iv' java.lang.Comparable) binds: [B:26:0x0024, B:31:0x0040] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.Object r6 = r3.next()\ljava.lang.Comparable r7 = r10.invoke(r6)\lr4 = r4\l}"];
Node_28 [shape=record,label="{28\:\ 0x0038|if (r5.compareTo(r7) \<= 0) goto L11\l}"];
Node_29 [shape=record,label="{29\:\ 0x003a|r4 = r6\lr5 = r7\lr4 = (T) r4\l}"];
Node_30 [shape=record,label="{30\:\ 0x003c|PHI: r4 r5 \l  PHI: (r4v3 'minElem$iv' java.lang.Object) = (r4v10 'minElem$iv' java.lang.Object), (r4v11 'minElem$iv' java.lang.Object) binds: [B:28:0x0038, B:29:0x003a] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v4 'minValue$iv' java.lang.Comparable) = (r5v3 'minValue$iv' java.lang.Comparable), (r5v5 'minValue$iv' java.lang.Comparable) binds: [B:28:0x0038, B:29:0x003a] A[DONT_GENERATE, DONT_INLINE]\l|r4 = r4\l}"];
Node_31 [shape=record,label="{31\:\ 0x0040|LOOP_END\lLOOP:0: B:27:0x002a\-\>B:31:0x0040\l|if (r3.hasNext() != false) goto L8\l}"];
Node_33 [shape=record,label="{33\:\ 0x0043|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ ?|SYNTHETIC\lRETURN\l|return (T) r4\l}"];
Node_34 [shape=record,label="{34\:\ ?|SYNTHETIC\lRETURN\l|return r4\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ T kotlin.collections.CollectionsKt___CollectionsJvmKt.minBy((r9v0 java.lang.Iterable\<? extends T\> A[D('$this$minBy' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'selector' kotlin.jvm.functions.Function1\<? super T, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=Use minByOrNull instead., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this.minByOrNull(selector), imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{errorSince=1.5, hiddenSince=1.6, warningSince=1.4\}\}\}\lINLINE_NOT_NEEDED\lBACK_EDGE: B:31:0x0040 \-\> B:27:0x002a, CROSS_EDGE: B:31:0x0040 \-\> B:32:0x0043, CROSS_EDGE: B:28:0x0038 \-\> B:30:0x003c, CROSS_EDGE: B:24:0x0021 \-\> B:32:0x0043\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R::Ljava\/lang\/Comparable\<\-TR;\>;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TT;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l \-\> Type inference failed for: r4v1, types: [T, java.lang.Object]\l DEBUG: \l \-\> Multi\-variable search result rejected for r6v0, resolved type: java.lang.Object\}\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_19;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_34[style=dashed];
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_27;
Node_31 -> Node_33[style=dashed];
Node_33 -> Node_35;
Node_35 -> Node_19;
Node_34 -> Node_19;
}

