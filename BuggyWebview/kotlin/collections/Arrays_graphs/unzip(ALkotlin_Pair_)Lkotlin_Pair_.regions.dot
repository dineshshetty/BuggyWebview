digraph "CFG forkotlin.collections.ArraysKt__ArraysKt.unzip([Lkotlin\/Pair;)Lkotlin\/Pair;" {
subgraph cluster_Region_314418034 {
label = "R(3:1|(1:3)|6)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\ljava.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList(r6.length)\ljava.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList(r6.length)\lint r3 = 0\l\l}"];
subgraph cluster_LoopRegion_771460479 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0013|LOOP_START\lLOOP:0: B:3:0x0013\-\>B:4:0x0015\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:2:0x0000, B:4:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \< r2) goto L3\l}"];
subgraph cluster_Region_181259308 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|LOOP_END\lLOOP:0: B:3:0x0013\-\>B:4:0x0015\l|r4 = r6[r3]\lr0.add(r4.getFirst())\lr1.add(r4.getSecond())\lr3++\l}"];
}
}
Node_6 [shape=record,label="{6\:\ 0x002c|RETURN\l|return kotlin.TuplesKt.m15to(r0, r1)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x0028|SYNTHETIC\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x0028}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.Pair\<java.util.List\<T\>, java.util.List\<R\>\> kotlin.collections.ArraysKt__ArraysKt.unzip((r6v0 kotlin.Pair\<? extends T, ? extends R\>[] A[D('$this$unzip' kotlin.Pair[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:4:0x0015 \-\> B:3:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>([Lkotlin\/Pair\<+TT;+TR;\>;)Lkotlin\/Pair\<Ljava\/util\/List\<TT;\>;Ljava\/util\/List\<TR;\>;\>;\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_7[style=dashed];
Node_4 -> Node_3;
Node_6 -> Node_1;
Node_0 -> Node_2;
Node_7 -> Node_5;
Node_5 -> Node_6;
}

