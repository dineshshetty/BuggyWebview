digraph "CFG forkotlin.collections.ArraysKt__ArraysKt.ifEmpty([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function0;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"defaultValue\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|if (r1.length != 0) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|r0 = true\l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v6 boolean) binds: [B:5:0x000a, B:4:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x000d}"];
Node_10 [shape=record,label="{10\:\ ?|SYNTHETIC\lRETURN\l|return r2.invoke()\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012}"];
Node_9 [shape=record,label="{9\:\ 0x0013|RETURN\lORIG_RETURN\l|return r1\l}"];
Node_5 [shape=record,label="{5\:\ 0x000a|r0 = false\l}"];
MethodNode[shape=record,label="{private static final java.lang.Object kotlin.collections.ArraysKt__ArraysKt.ifEmpty((r1v0 '$this$ifEmpty' java.lang.Object[] A[D('$this$ifEmpty' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'defaultValue' kotlin.jvm.functions.Function0 A[D('defaultValue' kotlin.jvm.functions.Function0), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x0012 \-\> B:9:0x0013, CROSS_EDGE: B:5:0x000a \-\> B:6:0x000b\lTYPE_VARS: [R, C extends java.lang.Object[] & R]\lJadxCommentsAttr\{\l WARN: \l \-\> Incorrect types in method signature: \<C:[Ljava\/lang\/Object;:TR;R:Ljava\/lang\/Object;\>(TC;Lkotlin\/jvm\/functions\/Function0\<+TR;\>;)TR;\}\lSIGNATURE: \<C:[Ljava\/lang\/Object;:TR;R:Ljava\/lang\/Object;\>(TC;Lkotlin\/jvm\/functions\/Function0\<+TR;\>;)TR;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_10;
Node_10 -> Node_1;
Node_8 -> Node_9;
Node_9 -> Node_1;
Node_5 -> Node_6;
}

