digraph "CFG forkotlin.collections.UArraySortingKt.partition\-Aa5vz7o([SII)I" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('left' int)])  (LINE:45)\l0x0001: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('right' int)])  (LINE:46)\l0x0002: ARITH  (r2 I:int) = (r7 I:int A[D('left' int)]) + (r8 I:int A[D('right' int)])  (LINE:47)\l0x0004: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0006: INVOKE  (r2 I:short) = (r6 I:short[] A[D('array' short[])]), (r2 I:int) type: STATIC call: kotlin.UShortArray.get\-Mh2AYeg(short[], int):short A[MD:(short[], int):short (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|LOOP_START\lLOOP:0: B:23:0x000a\-\>B:35:0x000a\l|0x000a: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \> (r1 I:??[int, byte, short, char] A[D('j' int)])  \-\> B:33:0x0045  (LINE:48)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000c|LOOP_START\lLOOP:1: B:24:0x000c\-\>B:26:0x001c\l|0x000c: INVOKE  (r3 I:short) = (r6 I:short[] A[D('array' short[])]), (r0 I:int A[D('i' int)]) type: STATIC call: kotlin.UShortArray.get\-Mh2AYeg(short[], int):short A[MD:(short[], int):short (m)] (LINE:49)\l0x0010: CONST  (r4 I:??[int, float, short, byte, char]) = (65535(0xffff, float:9.1834E\-41) ??[int, float, short, byte, char]) \l0x0013: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (r4 I:??[int, boolean, short, byte, char]) \l0x0014: ARITH  (r5 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('pivot' short)]) & (r4 I:??[int, boolean, short, byte, char]) \l0x0016: INVOKE  (r3 I:int) = (r3 I:int), (r5 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|0x001a: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:38:0x001f \l}"];
Node_26 [shape=record,label="{26\:\ 0x001c|LOOP_END\lLOOP:1: B:24:0x000c\-\>B:26:0x001c\l|0x001c: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:50)\l}"];
Node_38 [shape=record,label="{38\:\ 0x001f|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|LOOP_START\lLOOP:2: B:27:0x001f\-\>B:29:0x002c\l|0x001f: INVOKE  (r3 I:short) = (r6 I:short[] A[D('array' short[])]), (r1 I:int A[D('j' int)]) type: STATIC call: kotlin.UShortArray.get\-Mh2AYeg(short[], int):short A[MD:(short[], int):short (m)] (LINE:51)\l0x0023: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (r4 I:??[int, boolean, short, byte, char]) \l0x0024: ARITH  (r5 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('pivot' short)]) & (r4 I:??[int, boolean, short, byte, char]) \l0x0026: INVOKE  (r3 I:int) = (r3 I:int), (r5 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x002a|0x002a: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:39:0x002f \l}"];
Node_29 [shape=record,label="{29\:\ 0x002c|LOOP_END\lLOOP:2: B:27:0x001f\-\>B:29:0x002c\l|0x002c: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (\-1 int)  (LINE:52)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002f|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002f|0x002f: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \> (r1 I:??[int, byte, short, char] A[D('j' int)])  \-\> B:36:0x000a  (LINE:53)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0031|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0031|0x0031: INVOKE  (r3 I:short) = (r6 I:short[] A[D('array' short[])]), (r0 I:int A[D('i' int)]) type: STATIC call: kotlin.UShortArray.get\-Mh2AYeg(short[], int):short A[MD:(short[], int):short (m)] (LINE:54)\l0x0035: INVOKE  (r4 I:short) = (r6 I:short[] A[D('array' short[])]), (r1 I:int A[D('j' int)]) type: STATIC call: kotlin.UShortArray.get\-Mh2AYeg(short[], int):short A[MD:(short[], int):short (m)] (LINE:55)\l0x0039: INVOKE  (r6 I:short[] A[D('array' short[])]), (r0 I:int A[D('i' int)]), (r4 I:short) type: STATIC call: kotlin.UShortArray.set\-01HTLdE(short[], int, short):void A[MD:(short[], int, short):void (m)]\l0x003c: INVOKE  (r6 I:short[] A[D('array' short[])]), (r1 I:int A[D('j' int)]), (r3 I:short A[D('tmp' short)]) type: STATIC call: kotlin.UShortArray.set\-01HTLdE(short[], int, short):void A[MD:(short[], int, short):void (m)] (LINE:56)\l0x003f: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:57)\l0x0042: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (\-1 int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x000a|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x000a|LOOP_END\lSYNTHETIC\lLOOP:0: B:23:0x000a\-\>B:35:0x000a\l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0045|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0045|RETURN\l|0x0045: RETURN  (r0 I:int A[D('i' int)])  (LINE:61)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final int kotlin.collections.UArraySortingKt.partition\-Aa5vz7o((r6 I:short[] A[D('array' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x001c \-\> B:24:0x000c, BACK_EDGE: B:29:0x002c \-\> B:27:0x001f, BACK_EDGE: B:30:0x002f \-\> B:23:0x000a, BACK_EDGE: B:31:0x0031 \-\> B:23:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0035\-0x0042: r3 'tmp' S\l  0x0001\-0x0045: r0 'i' I\l  0x0002\-0x0045: r1 'j' I\l  0x000a\-0x0045: r2 'pivot' S\l  \-1 \-0x0045: r6 'array' [S\l  \-1 \-0x0045: r7 'left' I\l  \-1 \-0x0045: r8 'right' I\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_33;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_38;
Node_26 -> Node_24;
Node_38 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_27;
Node_39 -> Node_30;
Node_30 -> Node_34[style=dashed];
Node_30 -> Node_36;
Node_34 -> Node_31;
Node_31 -> Node_37;
Node_37 -> Node_35;
Node_35 -> Node_23;
Node_36 -> Node_35;
Node_33 -> Node_32;
Node_32 -> Node_21;
}

