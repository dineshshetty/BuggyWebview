digraph "CFG forkotlin.collections.UArraySortingKt.quickSort\-Aa5vz7o([SII)V" {
subgraph cluster_Region_2067508039 {
label = "R(3:1|(1:3)|(1:(1:5)))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|int int r0 = m597partitionAa5vz7o(r2, r3, r4)\l}"];
subgraph cluster_IfRegion_2139425260 {
label = "IF [B:12:0x0006] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0006|if (r3 \< (r0 \- 1)) goto L3\l}"];
subgraph cluster_Region_471898701 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0008|m601quickSortAa5vz7o(r2, r3, r0 \- 1)\l}"];
}
}
subgraph cluster_Region_95181230 {
label = "R(1:(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_10988730 {
label = "IF [B:14:0x000d] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x000d|if (r0 \< r4) goto L5\l}"];
subgraph cluster_Region_652238458 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x000f|m601quickSortAa5vz7o(r2, r0, r4)\l}"];
}
}
}
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0012|ORIG_RETURN\l}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final void kotlin.collections.UArraySortingKt.quickSort\-Aa5vz7o((r2v0 'array' short[] A[D('array' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'left' int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'right' int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:14:0x000d \-\> B:16:0x0012, CROSS_EDGE: B:12:0x0006 \-\> B:14:0x000d\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_17[style=dashed];
Node_15 -> Node_16;
Node_9 -> Node_11;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

