digraph "CFG forkotlin.collections.UArraySortingKt.partition\-4UcCI2c([BII)I" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('left' int)])  (LINE:12)\l0x0001: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('right' int)])  (LINE:13)\l0x0002: ARITH  (r2 I:int) = (r6 I:int A[D('left' int)]) + (r7 I:int A[D('right' int)])  (LINE:14)\l0x0004: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0006: INVOKE  (r2 I:byte) = (r5 I:byte[] A[D('array' byte[])]), (r2 I:int) type: STATIC call: kotlin.UByteArray.get\-w2LRezQ(byte[], int):byte A[MD:(byte[], int):byte (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x000a|LOOP_START\lLOOP:0: B:23:0x000a\-\>B:35:0x000a\l|0x000a: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \> (r1 I:??[int, byte, short, char] A[D('j' int)])  \-\> B:33:0x0044  (LINE:15)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000c|LOOP_START\lLOOP:1: B:24:0x000c\-\>B:26:0x001a\l|0x000c: INVOKE  (r3 I:byte) = (r5 I:byte[] A[D('array' byte[])]), (r0 I:int A[D('i' int)]) type: STATIC call: kotlin.UByteArray.get\-w2LRezQ(byte[], int):byte A[MD:(byte[], int):byte (m)] (LINE:16)\l0x0010: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0012: ARITH  (r4 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('pivot' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0014: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|0x0018: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:38:0x001d \l}"];
Node_26 [shape=record,label="{26\:\ 0x001a|LOOP_END\lLOOP:1: B:24:0x000c\-\>B:26:0x001a\l|0x001a: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:17)\l}"];
Node_38 [shape=record,label="{38\:\ 0x001d|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001d|LOOP_START\lLOOP:2: B:27:0x001d\-\>B:29:0x002b\l|0x001d: INVOKE  (r3 I:byte) = (r5 I:byte[] A[D('array' byte[])]), (r1 I:int A[D('j' int)]) type: STATIC call: kotlin.UByteArray.get\-w2LRezQ(byte[], int):byte A[MD:(byte[], int):byte (m)] (LINE:18)\l0x0021: ARITH  (r3 I:??[int, boolean]) = (r3 I:??[int, boolean, short, byte, char]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0023: ARITH  (r4 I:??[int, boolean]) = (r2 I:??[int, boolean, short, byte, char] A[D('pivot' byte)]) & (255(0xff, float:3.57E\-43) ??[int, float, short, byte, char]) \l0x0025: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0029|0x0029: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:39:0x002e \l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|LOOP_END\lLOOP:2: B:27:0x001d\-\>B:29:0x002b\l|0x002b: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (\-1 int)  (LINE:19)\l}"];
Node_39 [shape=record,label="{39\:\ 0x002e|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|0x002e: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \> (r1 I:??[int, byte, short, char] A[D('j' int)])  \-\> B:36:0x000a  (LINE:20)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0030|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0030|0x0030: INVOKE  (r3 I:byte) = (r5 I:byte[] A[D('array' byte[])]), (r0 I:int A[D('i' int)]) type: STATIC call: kotlin.UByteArray.get\-w2LRezQ(byte[], int):byte A[MD:(byte[], int):byte (m)] (LINE:21)\l0x0034: INVOKE  (r4 I:byte) = (r5 I:byte[] A[D('array' byte[])]), (r1 I:int A[D('j' int)]) type: STATIC call: kotlin.UByteArray.get\-w2LRezQ(byte[], int):byte A[MD:(byte[], int):byte (m)] (LINE:22)\l0x0038: INVOKE  (r5 I:byte[] A[D('array' byte[])]), (r0 I:int A[D('i' int)]), (r4 I:byte) type: STATIC call: kotlin.UByteArray.set\-VurrAj0(byte[], int, byte):void A[MD:(byte[], int, byte):void (m)]\l0x003b: INVOKE  (r5 I:byte[] A[D('array' byte[])]), (r1 I:int A[D('j' int)]), (r3 I:byte A[D('tmp' byte)]) type: STATIC call: kotlin.UByteArray.set\-VurrAj0(byte[], int, byte):void A[MD:(byte[], int, byte):void (m)] (LINE:23)\l0x003e: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:24)\l0x0041: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (\-1 int) \l}"];
Node_37 [shape=record,label="{37\:\ 0x000a|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x000a|LOOP_END\lSYNTHETIC\lLOOP:0: B:23:0x000a\-\>B:35:0x000a\l}"];
Node_36 [shape=record,label="{36\:\ 0x000a|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0044|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0044|RETURN\l|0x0044: RETURN  (r0 I:int A[D('i' int)])  (LINE:28)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final int kotlin.collections.UArraySortingKt.partition\-4UcCI2c((r5 I:byte[] A[D('array' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('left' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('right' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x001a \-\> B:24:0x000c, BACK_EDGE: B:29:0x002b \-\> B:27:0x001d, BACK_EDGE: B:30:0x002e \-\> B:23:0x000a, BACK_EDGE: B:31:0x0030 \-\> B:23:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0034\-0x0041: r3 'tmp' B\l  0x0001\-0x0044: r0 'i' I\l  0x0002\-0x0044: r1 'j' I\l  0x000a\-0x0044: r2 'pivot' B\l  \-1 \-0x0044: r5 'array' [B\l  \-1 \-0x0044: r6 'left' I\l  \-1 \-0x0044: r7 'right' I\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_33;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_38;
Node_26 -> Node_24;
Node_38 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_27;
Node_39 -> Node_30;
Node_30 -> Node_34[style=dashed];
Node_30 -> Node_36;
Node_34 -> Node_31;
Node_31 -> Node_37;
Node_37 -> Node_35;
Node_35 -> Node_23;
Node_36 -> Node_35;
Node_33 -> Node_32;
Node_32 -> Node_21;
}

