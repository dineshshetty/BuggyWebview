digraph "CFG forkotlin.collections.CollectionsKt__CollectionsJVMKt.checkIndexOverflow(I)I" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:17:0x0017  (LINE:99)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0002|0x0002: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:100)\l0x0003: CONST  (r1 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char]) \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: INVOKE  (r0 I:boolean) = (r0 I:int), (r1 I:int), (r2 I:int) type: STATIC call: kotlin.internal.PlatformImplementationsKt.apiVersionIsAtLeast(int, int, int):boolean A[MD:(int, int, int):boolean (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:15:0x000f \l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)] (LINE:101)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.lang.ArithmeticException) =  java.lang.ArithmeticException  (LINE:103)\l0x0011: CONST_STR  (r1 I:java.lang.String) =  \"Index overflow has happened.\" \l0x0013: INVOKE  (r0 I:java.lang.ArithmeticException), (r1 I:java.lang.String) type: DIRECT call: java.lang.ArithmeticException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|0x0016: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|RETURN\l|0x0017: RETURN  (r3 I:int A[D('index' int)])  (LINE:105)\l}"];
MethodNode[shape=record,label="{private static final int kotlin.collections.CollectionsKt__CollectionsJVMKt.checkIndexOverflow((r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:16:0x0016 \-\> B:10:?, CROSS_EDGE: B:11:0x0000 \-\> B:17:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0017: r3 'index' I\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_17;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_17;
Node_15 -> Node_16;
Node_16 -> Node_10;
Node_17 -> Node_10;
}

