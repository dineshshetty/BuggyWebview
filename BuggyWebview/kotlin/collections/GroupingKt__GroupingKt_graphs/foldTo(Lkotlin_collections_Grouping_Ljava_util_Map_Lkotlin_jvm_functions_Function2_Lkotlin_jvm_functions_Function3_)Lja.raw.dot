digraph "CFG forkotlin.collections.GroupingKt__GroupingKt.foldTo(Lkotlin\/collections\/Grouping;Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function2;Lkotlin\/jvm\/functions\/Function3;)Ljava\/util\/Map;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY] A[D('destination' java.util.Map)]) \l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('initialValueSelector' kotlin.jvm.functions.Function2)]) \l0x0004: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('operation' kotlin.jvm.functions.Function3)]) \l0x0006: CONST_STR  (r3 I:java.lang.String) =  \"\<this\>\" \l0x0008: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY] A[D('$this$foldTo' kotlin.collections.Grouping)]) \l0x000a: INVOKE  (r4 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000d: CONST_STR  (r3 I:java.lang.String) =  \"destination\" \l0x000f: INVOKE  (r0 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0012: CONST_STR  (r3 I:java.lang.String) =  \"initialValueSelector\" \l0x0014: INVOKE  (r1 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0017: CONST_STR  (r3 I:java.lang.String) =  \"operation\" \l0x0019: INVOKE  (r2 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001c: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY] A[D('$this$foldTo' kotlin.collections.Grouping)])  (LINE:143)\l0x001f: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: INVOKE  (r7 I:java.util.Iterator) = (r5 I:kotlin.collections.Grouping A[D('$this$aggregateTo$iv' kotlin.collections.Grouping)]) type: INTERFACE call: kotlin.collections.Grouping.sourceIterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:305)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|LOOP_START\lLOOP:0: B:24:0x0024\-\>B:36:0x004f\l|0x0024: INVOKE  (r8 I:boolean) = (r7 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0028|0x0028: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:0x005a \l}"];
Node_26 [shape=record,label="{26\:\ 0x002a|0x002a: INVOKE  (r8 I:java.lang.Object) = (r7 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002e: INVOKE  (r9 I:java.lang.Object) = \l  (r5 I:kotlin.collections.Grouping A[D('$this$aggregateTo$iv' kotlin.collections.Grouping)])\l  (r8 I:java.lang.Object A[D('e$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.collections.Grouping.keyOf(java.lang.Object):java.lang.Object A[MD:(T):K (m)] (LINE:306)\l0x0032: INVOKE  (r10 I:java.lang.Object) = (r0 I:java.util.Map), (r9 I:java.lang.Object A[D('key$iv' java.lang.Object)]) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)] (LINE:307)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0036|0x0036: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('accumulator$iv' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0040  (LINE:308)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0038|0x0038: INVOKE  (r11 I:boolean) = (r0 I:java.util.Map), (r9 I:java.lang.Object A[D('key$iv' java.lang.Object)]) type: INTERFACE call: java.util.Map.containsKey(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x003c|0x003c: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0040 \l}"];
Node_30 [shape=record,label="{30\:\ 0x003e|0x003e: CONST  (r11 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0041|0x0041: MOVE  (r12 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('key$iv' java.lang.Object)]) \l0x0042: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('e$iv' java.lang.Object)]) \l0x0043: MOVE  (r14 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('accumulator$iv' java.lang.Object)]) \l0x0044: CONST  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0045|0x0045: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x004e  (LINE:143)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0047|0x0047: INVOKE  (r16 I:java.lang.Object) = \l  (r1 I:kotlin.jvm.functions.Function2)\l  (r12 I:java.lang.Object A[D('key' java.lang.Object)])\l  (r13 I:java.lang.Object A[D('e' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x004b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x004f|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x004f|LOOP_END\lLOOP:0: B:24:0x0024\-\>B:36:0x004f\l|0x004f: INVOKE  (r1 I:java.lang.Object) = \l  (r2 I:kotlin.jvm.functions.Function3)\l  (r12 I:java.lang.Object A[D('key' java.lang.Object)])\l  (r1 I:java.lang.Object)\l  (r13 I:java.lang.Object A[D('e' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)]\l0x0053: INVOKE  (r0 I:java.util.Map), (r9 I:java.lang.Object A[D('key$iv' java.lang.Object)]), (r1 I:java.lang.Object) type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l0x0056: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('initialValueSelector' kotlin.jvm.functions.Function2)]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x004e|0x004e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r14 I:??[OBJECT, ARRAY] A[D('acc' java.lang.Object)]) \l}"];
Node_40 [shape=record,label="{40\:\ 0x004f|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0040|0x0040: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x005a|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x005a|RETURN\l|0x005a: RETURN  (r0 I:M extends java.util.Map\<? super K, R\>)  (LINE:143)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final M extends java.util.Map\<? super K, R\> kotlin.collections.GroupingKt__GroupingKt.foldTo((r17 I:kotlin.collections.Grouping\<T, ? extends K\> A[D('$this$foldTo' kotlin.collections.Grouping), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:M extends java.util.Map\<? super K, R\> A[D('destination' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:kotlin.jvm.functions.Function2\<? super K, ? super T, ? extends R\> A[D('initialValueSelector' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r20 I:kotlin.jvm.functions.Function3\<? super K, ? super R, ? super T, ? extends R\> A[D('operation' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:36:0x004f \-\> B:24:0x0024, CROSS_EDGE: B:35:0x004e \-\> B:36:0x004f, CROSS_EDGE: B:31:0x0040 \-\> B:32:0x0041, CROSS_EDGE: B:27:0x0036 \-\> B:31:0x0040\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0044\-0x0053: r11 'first' Z\l  0x0042\-0x0053: r12 'key' Ljava\/lang\/Object;\l  0x0043\-0x0053: r13 'e' Ljava\/lang\/Object;\l  0x0044\-0x0053: r14 'acc' Ljava\/lang\/Object;\l  0x0045\-0x0053: r15 '$i$a$\-aggregateTo\-GroupingKt__GroupingKt$foldTo$1' I\l  0x002e\-0x0059: r8 'e$iv' Ljava\/lang\/Object;\l  0x0032\-0x0059: r9 'key$iv' Ljava\/lang\/Object;\l  0x0036\-0x0059: r10 'accumulator$iv' Ljava\/lang\/Object;\l  0x001f\-0x005a: r5 '$this$aggregateTo$iv' Lkotlin\/collections\/Grouping;\l  0x0020\-0x005a: r6 '$i$f$aggregateTo' I\l  0x001d\-0x005a: r3 '$i$f$foldTo' I\l  \-1 \-0x005a: r17 '$this$foldTo' Lkotlin\/collections\/Grouping;\l  \-1 \-0x005a: r18 'destination' Ljava\/util\/Map;\l  \-1 \-0x005a: r19 'initialValueSelector' Lkotlin\/jvm\/functions\/Function2;\l  \-1 \-0x005a: r20 'operation' Lkotlin\/jvm\/functions\/Function3;\lTYPE_VARS: [R, T, K, M extends java.util.Map\<? super K, R\>]\lSIGNATURE: \<T:Ljava\/lang\/Object;K:Ljava\/lang\/Object;R:Ljava\/lang\/Object;M::Ljava\/util\/Map\<\-TK;TR;\>;\>(Lkotlin\/collections\/Grouping\<TT;+TK;\>;TM;Lkotlin\/jvm\/functions\/Function2\<\-TK;\-TT;+TR;\>;Lkotlin\/jvm\/functions\/Function3\<\-TK;\-TR;\-TT;+TR;\>;)TM;\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_39;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_31;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_41;
Node_41 -> Node_36;
Node_36 -> Node_24;
Node_35 -> Node_40;
Node_40 -> Node_36;
Node_31 -> Node_32;
Node_39 -> Node_38;
Node_38 -> Node_22;
}

