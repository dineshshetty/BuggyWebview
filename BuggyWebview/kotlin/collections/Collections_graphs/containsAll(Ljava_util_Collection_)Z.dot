digraph "CFG forkotlin.collections.ArrayAsCollection.containsAll(Ljava\/util\/Collection;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"elements\")\ljava.lang.Iterable r0 = r8\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|if (r0.isEmpty() == false) goto L3\l}"];
Node_5 [shape=record,label="{5\:\ 0x0014|java.util.Iterator r2 = r0.iterator()\l}"];
Node_6 [shape=record,label="{6\:\ 0x0018|LOOP_START\lLOOP:0: B:6:0x0018\-\>B:9:0x0028\l}"];
Node_7 [shape=record,label="{7\:\ 0x001c|if (r2.hasNext() == false) goto L11\l}"];
Node_8 [shape=record,label="{8\:\ 0x001e|java.lang.Object r4 = r2.next()\l}"];
Node_9 [shape=record,label="{9\:\ 0x0028|LOOP_END\lLOOP:0: B:6:0x0018\-\>B:9:0x0028\l|if (contains(r4) != false) goto L4\l}"];
Node_13 [shape=record,label="{13\:\ 0x002a|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x002a|RETURN\lORIG_RETURN\l|return false\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.ArrayAsCollection.containsAll((r7v0 'this' kotlin.collections.ArrayAsCollection\<T\> A[IMMUTABLE_TYPE, THIS]), (r8v0 'elements' java.util.Collection\<? extends java.lang.Object\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:9:0x0028 \-\> B:6:0x0018, CROSS_EDGE: B:7:0x001c \-\> B:12:0x002d, CROSS_EDGE: B:3:0x0011 \-\> B:12:0x002d\lTYPE_VARS: [T]\lSIGNATURE: (Ljava\/util\/Collection\<+Ljava\/lang\/Object;\>;)Z\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.containsAll(java.util.Collection\<?\>):boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_5;
Node_3 -> Node_15[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_6;
Node_9 -> Node_13[style=dashed];
Node_13 -> Node_10;
Node_10 -> Node_1;
Node_14 -> Node_16;
Node_16 -> Node_1;
Node_15 -> Node_1;
}

