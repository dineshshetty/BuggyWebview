digraph "CFG forkotlin.collections.AbstractCollection.contains(Ljava\/lang\/Object;)Z" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:19)\l0x0001: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: INSTANCE_OF  (r2 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('$this$any$iv' java.lang.Iterable)]) java.util.Collection  (LINE:43)\l0x0006: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|0x0007: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0013 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|0x0009: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$any$iv' java.lang.Iterable)]) \l0x000a: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r2 I:boolean) = (r2 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0013 \l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|0x002c: RETURN  (r3 I:boolean) A[SYNTHETIC] (LINE:19)\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|0x0013: INVOKE  (r2 I:java.util.Iterator) = (r0 I:java.lang.Iterable A[D('$this$any$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:44)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|LOOP_START\lLOOP:0: B:27:0x0017\-\>B:30:0x0027\l|0x0017: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x002c \l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|0x001d: INVOKE  (r4 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0021: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0022: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: INVOKE  (r5 I:boolean A[D('it' java.lang.Object)]) = (r5 I:java.lang.Object A[D('it' java.lang.Object)]), (r8 I:java.lang.Object A[D('element' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:19)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|LOOP_END\lLOOP:0: B:27:0x0017\-\>B:30:0x0027\l|0x0027: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0017 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0029|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0029|RETURN\lORIG_RETURN\l|0x0029: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x002c: RETURN  (r3 I:boolean)  (LINE:19)\l}"];
Node_35 [shape=record,label="{35\:\ 0x002c|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|0x002c: RETURN  (r3 I:boolean) A[SYNTHETIC] (LINE:19)\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractCollection.contains((r7 'this' I:kotlin.collections.AbstractCollection\<E\> A[IMMUTABLE_TYPE, THIS]), (r8 I:E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:30:0x0027 \-\> B:27:0x0017, CROSS_EDGE: B:28:0x001b \-\> B:33:0x002c, CROSS_EDGE: B:24:0x0010 \-\> B:33:0x002c, CROSS_EDGE: B:22:0x0007 \-\> B:26:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;)Z\lDebug Info:\l  0x0022\-0x0027: r5 'it' Ljava\/lang\/Object;\l  0x0023\-0x0027: r6 '$i$a$\-any\-AbstractCollection$contains$1' I\l  0x0021\-0x002b: r4 'element$iv' Ljava\/lang\/Object;\l  0x0003\-0x002c: r0 '$this$any$iv' Ljava\/lang\/Iterable;\l  0x0004\-0x002c: r1 '$i$f$any' I\l  \-1 \-0x002c: r8 'element' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.contains(java.lang.Object):boolean\}]\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_36[style=dashed];
Node_36 -> Node_20;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_35;
Node_29 -> Node_30;
Node_30 -> Node_27;
Node_30 -> Node_34[style=dashed];
Node_34 -> Node_31;
Node_31 -> Node_20;
Node_35 -> Node_37;
Node_37 -> Node_20;
}

