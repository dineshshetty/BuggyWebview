digraph "CFG forkotlin.collections.AbstractCollection.containsAll(Ljava\/util\/Collection;)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('elements' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('elements' java.util.Collection)])  (LINE:22)\l0x0006: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0009: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)])  (LINE:46)\l0x000a: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r2 I:boolean) = (r2 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l0x0010: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0014 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0014|0x0014: INVOKE  (r2 I:java.util.Iterator) = (r0 I:java.lang.Iterable A[D('$this$all$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:47)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|LOOP_START\lLOOP:0: B:23:0x0018\-\>B:26:0x0028\l|0x0018: INVOKE  (r4 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x001c|0x001c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x002d \l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|0x001e: INVOKE  (r4 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0022: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0023: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: INVOKE  (r5 I:boolean A[D('it' java.lang.Object)]) = (r7 I:kotlin.collections.AbstractCollection), (r5 I:java.lang.Object A[D('it' java.lang.Object)]) type: VIRTUAL call: kotlin.collections.AbstractCollection.contains(java.lang.Object):boolean A[MD:(E):boolean (m)] (LINE:22)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0028|LOOP_END\lLOOP:0: B:23:0x0018\-\>B:26:0x0028\l|0x0028: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0018 \l}"];
Node_30 [shape=record,label="{30\:\ 0x002a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x002a|RETURN\lORIG_RETURN\l|0x002a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002d: RETURN  (r3 I:boolean)  (LINE:22)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN  (r3 I:boolean) A[SYNTHETIC] (LINE:22)\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x002d: RETURN  (r3 I:boolean) A[SYNTHETIC] (LINE:22)\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractCollection.containsAll((r7 'this' I:kotlin.collections.AbstractCollection\<E\> A[IMMUTABLE_TYPE, THIS]), (r8 I:java.util.Collection\<? extends java.lang.Object\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:26:0x0028 \-\> B:23:0x0018, CROSS_EDGE: B:24:0x001c \-\> B:29:0x002d, CROSS_EDGE: B:20:0x0011 \-\> B:29:0x002d\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (Ljava\/util\/Collection\<+Ljava\/lang\/Object;\>;)Z\lDebug Info:\l  0x0023\-0x0028: r5 'it' Ljava\/lang\/Object;\l  0x0024\-0x0028: r6 '$i$a$\-all\-AbstractCollection$containsAll$1' I\l  0x0022\-0x002c: r4 'element$iv' Ljava\/lang\/Object;\l  0x0008\-0x002d: r0 '$this$all$iv' Ljava\/lang\/Iterable;\l  0x0009\-0x002d: r1 '$i$f$all' I\l  \-1 \-0x002d: r8 'elements' Ljava\/util\/Collection;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.containsAll(java.util.Collection\<?\>):boolean\}]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_32[style=dashed];
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_23;
Node_26 -> Node_30[style=dashed];
Node_30 -> Node_27;
Node_27 -> Node_18;
Node_31 -> Node_33;
Node_33 -> Node_18;
Node_32 -> Node_18;
}

