digraph "CFG forkotlin.collections.AbstractCollection.contains(Ljava\/lang\/Object;)Z" {
Node_19 [shape=record,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0000|java.lang.Iterable r0 = r7\l}"];
Node_22 [shape=record,label="{22\:\ 0x0007|if ((r0 instanceof java.util.Collection) == false) goto L7\l}"];
Node_23 [shape=record,label="{23\:\ 0x0009}"];
Node_24 [shape=record,label="{24\:\ 0x0010|if (r0.isEmpty() == false) goto L7\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_20 [shape=record,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0013|java.util.Iterator r2 = r0.iterator()\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|LOOP_START\lLOOP:0: B:27:0x0017\-\>B:30:0x0027\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|if (r2.hasNext() == false) goto L14\l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|java.lang.Object r4 = r2.next()\l}"];
Node_30 [shape=record,label="{30\:\ 0x0027|LOOP_END\lLOOP:0: B:27:0x0017\-\>B:30:0x0027\l|if (kotlin.jvm.internal.Intrinsics.areEqual(r4, r8) == false) goto L8\l}"];
Node_34 [shape=record,label="{34\:\ 0x0029|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x0029|RETURN\lORIG_RETURN\l|return true\l}"];
Node_35 [shape=record,label="{35\:\ 0x002c|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractCollection.contains((r7v0 'this' kotlin.collections.AbstractCollection\<E\> A[IMMUTABLE_TYPE, THIS]), (r8v0 E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:30:0x0027 \-\> B:27:0x0017, CROSS_EDGE: B:28:0x001b \-\> B:33:0x002c, CROSS_EDGE: B:24:0x0010 \-\> B:33:0x002c, CROSS_EDGE: B:22:0x0007 \-\> B:26:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\lSIGNATURE: (TE;)Z\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.contains(java.lang.Object):boolean\}]\l}"];
MethodNode -> Node_19;Node_19 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_36[style=dashed];
Node_36 -> Node_20;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_35;
Node_29 -> Node_30;
Node_30 -> Node_27;
Node_30 -> Node_34[style=dashed];
Node_34 -> Node_31;
Node_31 -> Node_20;
Node_35 -> Node_37;
Node_37 -> Node_20;
}

