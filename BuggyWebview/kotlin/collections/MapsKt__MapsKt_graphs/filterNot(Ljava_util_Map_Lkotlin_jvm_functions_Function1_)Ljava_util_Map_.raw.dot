digraph "CFG forkotlin.collections.MapsKt__MapsKt.filterNot(Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$filterNot' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_INSTANCE  (r1 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap  (LINE:536)\l0x000d: INVOKE  (r1 I:java.util.LinkedHashMap) type: DIRECT call: java.util.LinkedHashMap.\<init\>():void A[MD:():void (c)]\l0x0010: CHECK_CAST (r1 I:java.util.Map) = (java.util.Map) (r1 I:??[OBJECT, ARRAY]) \l0x0012: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$filterNot' java.util.Map)]) \l0x0013: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: INVOKE  (r4 I:java.util.Set) = (r2 I:java.util.Map A[D('$this$filterNotTo$iv' java.util.Map)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:815)\l0x0018: INVOKE  (r4 I:java.util.Iterator) = (r4 I:java.util.Set) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|LOOP_START\lLOOP:0: B:18:0x001c\-\>B:27:0x001c\l|0x001c: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|0x0020: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0041 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|0x0022: INVOKE  (r5 I:java.lang.Object) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0026: CHECK_CAST (r5 I:java.util.Map$Entry) = (java.util.Map$Entry) (r5 I:??[OBJECT, ARRAY]) \l0x0028: INVOKE  (r6 I:java.lang.Object) = \l  (r9 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r5 I:java.lang.Object A[D('element$iv' java.util.Map$Entry)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:816)\l0x002c: CHECK_CAST (r6 I:java.lang.Boolean) = (java.lang.Boolean) (r6 I:??[OBJECT, ARRAY]) \l0x002e: INVOKE  (r6 I:boolean) = (r6 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0032|0x0032: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x001c \l}"];
Node_26 [shape=record,label="{26\:\ 0x0034|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0034|0x0034: INVOKE  (r6 I:java.lang.Object) = (r5 I:java.util.Map$Entry A[D('element$iv' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:817)\l0x0038: INVOKE  (r7 I:java.lang.Object) = (r5 I:java.util.Map$Entry A[D('element$iv' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)]\l0x003c: INVOKE  (r1 I:java.util.Map A[D('destination$iv' java.util.Map)]), (r6 I:java.lang.Object), (r7 I:java.lang.Object) type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x001c|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001c|LOOP_END\lSYNTHETIC\lLOOP:0: B:18:0x001c\-\>B:27:0x001c\l}"];
Node_28 [shape=record,label="{28\:\ 0x001c|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0041|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0041|RETURN\l|0x0041: RETURN  (r1 I:java.util.Map\<K, V\> A[D('destination$iv' java.util.Map)])  (LINE:536)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.collections.MapsKt__MapsKt.filterNot((r8 I:java.util.Map\<? extends K, ? extends V\> A[D('$this$filterNot' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function1\<? super java.util.Map$Entry\<? extends K, ? extends V\>, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0032 \-\> B:18:0x001c, BACK_EDGE: B:22:0x0034 \-\> B:18:0x001c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x0040: r5 'element$iv' Ljava\/util\/Map$Entry;\l  0x0012\-0x0041: r1 'destination$iv' Ljava\/util\/Map;\l  0x0013\-0x0041: r2 '$this$filterNotTo$iv' Ljava\/util\/Map;\l  0x0014\-0x0041: r3 '$i$f$filterNotTo' I\l  0x000b\-0x0041: r0 '$i$f$filterNot' I\l  \-1 \-0x0041: r8 '$this$filterNot' Ljava\/util\/Map;\l  \-1 \-0x0041: r9 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;\>(Ljava\/util\/Map\<+TK;+TV;\>;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/Map$Entry\<+TK;+TV;\>;Ljava\/lang\/Boolean;\>;)Ljava\/util\/Map\<TK;TV;\>;\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_25;
Node_20 -> Node_21;
Node_21 -> Node_26[style=dashed];
Node_21 -> Node_28;
Node_26 -> Node_22;
Node_22 -> Node_29;
Node_29 -> Node_27;
Node_27 -> Node_18;
Node_28 -> Node_27;
Node_25 -> Node_24;
Node_24 -> Node_16;
}

