digraph "CFG forkotlin.collections.MapsKt__MapsKt.filterTo(Ljava\/util\/Map;Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$filterTo' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"destination\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('destination' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x000c: INVOKE  (r7 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: INVOKE  (r1 I:java.util.Set) = (r5 I:java.util.Map A[D('$this$filterTo' java.util.Map)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:496)\l0x0014: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.util.Set) type: INTERFACE call: java.util.Set.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0018|LOOP_START\lLOOP:0: B:17:0x0018\-\>B:25:0x0018\l|0x0018: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x003c \l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|0x001e: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0022: CHECK_CAST (r2 I:java.util.Map$Entry) = (java.util.Map$Entry) (r2 I:??[OBJECT, ARRAY]) \l0x0024: INVOKE  (r3 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r2 I:java.lang.Object A[D('element' java.util.Map$Entry)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:497)\l0x0028: CHECK_CAST (r3 I:java.lang.Boolean) = (java.lang.Boolean) (r3 I:??[OBJECT, ARRAY]) \l0x002a: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x002e|0x002e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x0018 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0030|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0030|0x0030: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Map$Entry A[D('element' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:498)\l0x0034: INVOKE  (r4 I:java.lang.Object) = (r2 I:java.util.Map$Entry A[D('element' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)]\l0x0038: INVOKE  (r6 I:java.util.Map A[D('destination' java.util.Map)]), (r3 I:java.lang.Object), (r4 I:java.lang.Object) type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0018|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|LOOP_END\lSYNTHETIC\lLOOP:0: B:17:0x0018\-\>B:25:0x0018\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x003c|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x003c|RETURN\l|0x003c: RETURN  (r6 I:M extends java.util.Map\<? super K, ? super V\> A[D('destination' java.util.Map)])  (LINE:501)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final M extends java.util.Map\<? super K, ? super V\> kotlin.collections.MapsKt__MapsKt.filterTo((r5 I:java.util.Map\<? extends K, ? extends V\> A[D('$this$filterTo' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:M extends java.util.Map\<? super K, ? super V\> A[D('destination' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.util.Map$Entry\<? extends K, ? extends V\>, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x002e \-\> B:17:0x0018, BACK_EDGE: B:21:0x0030 \-\> B:17:0x0018\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x003c: r2 'element' Ljava\/util\/Map$Entry;\l  0x0010\-0x003c: r0 '$i$f$filterTo' I\l  \-1 \-0x003c: r5 '$this$filterTo' Ljava\/util\/Map;\l  \-1 \-0x003c: r6 'destination' Ljava\/util\/Map;\l  \-1 \-0x003c: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [V, K, M extends java.util.Map\<? super K, ? super V\>]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;M::Ljava\/util\/Map\<\-TK;\-TV;\>;\>(Ljava\/util\/Map\<+TK;+TV;\>;TM;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/Map$Entry\<+TK;+TV;\>;Ljava\/lang\/Boolean;\>;)TM;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20;
Node_20 -> Node_24[style=dashed];
Node_20 -> Node_26;
Node_24 -> Node_21;
Node_21 -> Node_27;
Node_27 -> Node_25;
Node_25 -> Node_17;
Node_26 -> Node_25;
Node_23 -> Node_22;
Node_22 -> Node_15;
}

