digraph "CFG forkotlin.collections.MapsKt__MapsKt.plus(Ljava\/util\/Map;Ljava\/lang\/Iterable;)Ljava\/util\/Map;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$plus' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"pairs\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('pairs' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r4 I:java.util.Map A[D('$this$plus' java.util.Map)]) type: INTERFACE call: java.util.Map.isEmpty():boolean A[MD:():boolean (c)] (LINE:637)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0015 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|0x0010: INVOKE  (r0 I:java.util.Map) = (r5 I:java.lang.Iterable A[D('pairs' java.lang.Iterable)]) type: STATIC call: kotlin.collections.MapsKt.toMap(java.lang.Iterable):java.util.Map A[MD:\<K, V\>:(java.lang.Iterable\<? extends kotlin.Pair\<? extends K, ? extends V\>\>):java.util.Map\<K, V\> (m)]\l}"];
Node_15 [shape=record,label="{15\:\ ?|SYNTHETIC\lRETURN\l|0x0024: RETURN  (r0 I:java.util.Map\<K, V\>) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|0x0015: NEW_INSTANCE  (r0 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap \l0x0017: INVOKE  (r0 I:java.util.LinkedHashMap), (r4 I:java.util.Map A[D('$this$plus' java.util.Map)]) type: DIRECT call: java.util.LinkedHashMap.\<init\>(java.util.Map):void A[MD:(java.util.Map\<? extends K, ? extends V\>):void (c)]\l0x001a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:790)\l0x001c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$plus_u24lambda_u2d12' java.util.LinkedHashMap)])  (LINE:637)\l0x001d: CHECK_CAST (r3 I:java.util.Map) = (java.util.Map) (r3 I:??[OBJECT, ARRAY]) \l0x001f: INVOKE  (r3 I:java.util.Map), (r5 I:java.lang.Iterable A[D('pairs' java.lang.Iterable)]) type: STATIC call: kotlin.collections.MapsKt.putAll(java.util.Map, java.lang.Iterable):void A[MD:\<K, V\>:(java.util.Map\<? super K, ? super V\>, java.lang.Iterable\<? extends kotlin.Pair\<? extends K, ? extends V\>\>):void (m)]\l0x0022: CHECK_CAST (r0 I:java.util.Map) = (java.util.Map) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0024|RETURN\lORIG_RETURN\l|0x0024: RETURN  (r0 I:java.util.Map\<K, V\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, V\> kotlin.collections.MapsKt__MapsKt.plus((r4 I:java.util.Map\<? extends K, ? extends V\> A[D('$this$plus' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Iterable\<? extends kotlin.Pair\<? extends K, ? extends V\>\> A[D('pairs' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:14:0x0024\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x0022: r1 '$this$plus_u24lambda_u2d12' Ljava\/util\/LinkedHashMap;\l  0x001c\-0x0022: r2 '$i$a$\-apply\-MapsKt__MapsKt$plus$2' I\l  \-1 \-0x0024: r4 '$this$plus' Ljava\/util\/Map;\l  \-1 \-0x0024: r5 'pairs' Ljava\/lang\/Iterable;\lTYPE_VARS: [V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;\>(Ljava\/util\/Map\<+TK;+TV;\>;Ljava\/lang\/Iterable\<+Lkotlin\/Pair\<+TK;+TV;\>;\>;)Ljava\/util\/Map\<TK;TV;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

