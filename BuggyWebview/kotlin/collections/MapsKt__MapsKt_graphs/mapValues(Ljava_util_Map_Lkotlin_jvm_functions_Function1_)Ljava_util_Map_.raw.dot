digraph "CFG forkotlin.collections.MapsKt__MapsKt.mapValues(Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$mapValues' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r11 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_INSTANCE  (r1 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap  (LINE:438)\l0x000d: INVOKE  (r2 I:int) = (r10 I:java.util.Map A[D('$this$mapValues' java.util.Map)]) type: INTERFACE call: java.util.Map.size():int A[MD:():int (c)]\l0x0011: INVOKE  (r2 I:int) = (r2 I:int) type: STATIC call: kotlin.collections.MapsKt.mapCapacity(int):int A[MD:(int):int (m)]\l0x0015: INVOKE  (r1 I:java.util.LinkedHashMap), (r2 I:int) type: DIRECT call: java.util.LinkedHashMap.\<init\>(int):void A[MD:(int):void (c)]\l0x0018: CHECK_CAST (r1 I:java.util.Map) = (java.util.Map) (r1 I:??[OBJECT, ARRAY]) \l0x001a: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$mapValues' java.util.Map)]) \l0x001b: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: INVOKE  (r4 I:java.util.Set) = (r2 I:java.util.Map A[D('$this$mapValuesTo$iv' java.util.Map)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:799)\l0x0020: CHECK_CAST (r4 I:java.lang.Iterable) = (java.lang.Iterable) (r4 I:??[OBJECT, ARRAY]) \l0x0022: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: INVOKE  (r6 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$associateByTo$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:800)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|LOOP_START\lLOOP:0: B:12:0x0027\-\>B:14:0x002d\l|0x0027: INVOKE  (r7 I:boolean) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|0x002b: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0043 \l}"];
Node_14 [shape=record,label="{14\:\ 0x002d|LOOP_END\lLOOP:0: B:12:0x0027\-\>B:14:0x002d\l|0x002d: INVOKE  (r7 I:java.lang.Object) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0031: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('element$iv$iv' java.lang.Object)])  (LINE:801)\l0x0032: CHECK_CAST (r8 I:java.util.Map$Entry) = (java.util.Map$Entry) (r8 I:??[OBJECT, ARRAY]) \l0x0034: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0035: INVOKE  (r8 I:java.lang.Object A[D('it$iv' java.util.Map$Entry)]) = (r8 I:java.util.Map$Entry A[D('it$iv' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:799)\l0x0039: INVOKE  (r9 I:java.lang.Object) = \l  (r11 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r7 I:java.lang.Object A[D('element$iv$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x003d: INVOKE  (r1 I:java.util.Map A[D('destination$iv' java.util.Map)]), (r8 I:java.lang.Object), (r9 I:java.lang.Object) type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0043|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0043|RETURN\l|0x0043: RETURN  (r1 I:java.util.Map\<K, R\> A[D('destination$iv' java.util.Map)])  (LINE:438)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, R\> kotlin.collections.MapsKt__MapsKt.mapValues((r10 I:java.util.Map\<? extends K, ? extends V\> A[D('$this$mapValues' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function1\<? super java.util.Map$Entry\<? extends K, ? extends V\>, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x002d \-\> B:12:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0034\-0x0039: r8 'it$iv' Ljava\/util\/Map$Entry;\l  0x0035\-0x0039: r9 '$i$a$\-associateByTo\-MapsKt__MapsKt$mapValuesTo$1$iv' I\l  0x0031\-0x0041: r7 'element$iv$iv' Ljava\/lang\/Object;\l  0x0022\-0x0042: r4 '$this$associateByTo$iv$iv' Ljava\/lang\/Iterable;\l  0x0023\-0x0042: r5 '$i$f$associateByTo' I\l  0x001a\-0x0043: r1 'destination$iv' Ljava\/util\/Map;\l  0x001b\-0x0043: r2 '$this$mapValuesTo$iv' Ljava\/util\/Map;\l  0x001c\-0x0043: r3 '$i$f$mapValuesTo' I\l  0x000b\-0x0043: r0 '$i$f$mapValues' I\l  \-1 \-0x0043: r10 '$this$mapValues' Ljava\/util\/Map;\l  \-1 \-0x0043: r11 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R, V, K]\lSIGNATURE: \<K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/util\/Map\<+TK;+TV;\>;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/Map$Entry\<+TK;+TV;\>;+TR;\>;)Ljava\/util\/Map\<TK;TR;\>;\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_16;
Node_16 -> Node_10;
}

