digraph "CFG forkotlin.collections.AbstractIterator.hasNext()Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.collections.State) = (r4 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.state kotlin.collections.State  (LINE:25)\l0x0002: SGET  (r1 I:kotlin.collections.State) =  kotlin.collections.State.Failed kotlin.collections.State \l0x0004: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0005: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|0x0006: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x000a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|0x0008: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x0022 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|0x000d: IGET  (r0 I:kotlin.collections.State) = (r4 I:kotlin.collections.AbstractIterator) kotlin.collections.AbstractIterator.state kotlin.collections.State  (LINE:26)\l0x000f: SGET  (r1 I:int[]) =  kotlin.collections.AbstractIterator.WhenMappings.$EnumSwitchMapping$0 int[] \l0x0011: INVOKE  (r0 I:int) = (r0 I:kotlin.collections.State) type: VIRTUAL call: kotlin.collections.State.ordinal():int A[MD:():int (c)]\l0x0015: AGET  (r0 I:??[int, float, short, byte, char]) = (r1 I:??[int, float][]), (r0 I:??[int, short, byte, char]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|0x0017: SWITCH  (r0 I:??)\l case 1: goto B:28:0x0020\l case 2: goto B:33:?\l default: goto B:26:0x001a \l}"];
Node_26 [shape=record,label="{26\:\ 0x001a|0x001a: INVOKE  (r2 I:boolean) = (r4 I:kotlin.collections.AbstractIterator) type: DIRECT call: kotlin.collections.AbstractIterator.tryToComputeNext():boolean A[MD:():boolean (m)] (LINE:29)\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN  (r2 I:boolean) A[SYNTHETIC] (LINE:26)\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|RETURN\lORIG_RETURN\l|0x0020: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:27)\l0x0021: RETURN  (r2 I:boolean)  (LINE:26)\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x0021: RETURN  (r2 I:boolean) A[SYNTHETIC] (LINE:26)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|0x0022: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:25)\l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"Failed requirement.\" \l0x0026: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x002a: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x002d|0x002d: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractIterator.hasNext((r4 'this' I:kotlin.collections.AbstractIterator\<T\> A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:28:0x0020 \-\> B:29:0x0021, CROSS_EDGE: B:25:0x0017 \-\> B:29:0x0021, CROSS_EDGE: B:31:0x002d \-\> B:18:?, CROSS_EDGE: B:22:0x000a \-\> B:23:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_30;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_28;
Node_25 -> Node_33;
Node_26 -> Node_32;
Node_32 -> Node_18;
Node_28 -> Node_18;
Node_33 -> Node_18;
Node_30 -> Node_31;
Node_31 -> Node_18;
Node_22 -> Node_23;
}

