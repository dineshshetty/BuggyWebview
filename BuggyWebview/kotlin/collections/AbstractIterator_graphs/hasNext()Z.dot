digraph "CFG forkotlin.collections.AbstractIterator.hasNext()Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0006|if (r4.state == kotlin.collections.State.Failed) goto L14\l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|r0 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x000b|PHI: r0 \l  PHI: (r0v2 boolean) = (r0v1 boolean), (r0v7 boolean) binds: [B:22:0x000a, B:21:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L12\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|kotlin.collections.State r0 = r4.state\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|switch(kotlin.collections.AbstractIterator.WhenMappings.$EnumSwitchMapping$0[r0.ordinal()]) \{\l    case 1: goto L10;\l    case 2: goto L11;\l    default: goto L7;\l\}\l}"];
Node_26 [shape=record,label="{26\:\ 0x001a}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return tryToComputeNext()\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0020|RETURN\lORIG_RETURN\l|return false\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022}"];
Node_31 [shape=record,label="{31\:\ 0x002d|throw new java.lang.IllegalArgumentException(\"Failed requirement.\".toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x000a|r0 = false\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.AbstractIterator.hasNext((r4v0 'this' kotlin.collections.AbstractIterator\<T\> A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:28:0x0020 \-\> B:29:0x0021, CROSS_EDGE: B:25:0x0017 \-\> B:29:0x0021, CROSS_EDGE: B:31:0x002d \-\> B:18:?, CROSS_EDGE: B:22:0x000a \-\> B:23:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.hasNext():boolean\}]\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_30;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_28;
Node_25 -> Node_33;
Node_26 -> Node_32;
Node_32 -> Node_18;
Node_28 -> Node_18;
Node_33 -> Node_18;
Node_30 -> Node_31;
Node_31 -> Node_18;
Node_22 -> Node_23;
}

