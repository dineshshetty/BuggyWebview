digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.firstNotNullOfOrNull(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$firstNotNullOfOrNull' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r4 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$firstNotNullOfOrNull' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:248)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|LOOP_START\lLOOP:0: B:27:0x000e\-\>B:30:0x001c\l|0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x001f \l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|0x0014: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0018: INVOKE  (r2 I:java.lang.Object) = \l  (r4 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r1 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:249)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|LOOP_END\lLOOP:0: B:27:0x000e\-\>B:30:0x001c\l|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('result' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000e  (LINE:250)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001e|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|RETURN\l|0x001e: RETURN  (r2 I:R A[D('result' java.lang.Object)])  (LINE:251)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x001f|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001f|RETURN\l|0x001f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:254)\l0x0020: RETURN  (r0 I:R) \l}"];
MethodNode[shape=record,label="{private static final R kotlin.collections.CollectionsKt___CollectionsKt.firstNotNullOfOrNull((r3 I:java.lang.Iterable\<? extends T\> A[D('$this$firstNotNullOfOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x001c \-\> B:27:0x000e, CROSS_EDGE: B:33:0x0020 \-\> B:25:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TR;\lDebug Info:\l  0x0018\-0x001f: r1 'element' Ljava\/lang\/Object;\l  0x001c\-0x001f: r2 'result' Ljava\/lang\/Object;\l  \-1 \-0x0020: r3 '$this$firstNotNullOfOrNull' Ljava\/lang\/Iterable;\l  \-1 \-0x0020: r4 'transform' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_29 -> Node_30;
Node_30 -> Node_27;
Node_30 -> Node_35[style=dashed];
Node_35 -> Node_31;
Node_31 -> Node_25;
Node_34 -> Node_32;
Node_32 -> Node_25;
}

