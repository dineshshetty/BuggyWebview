digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.maxOrThrow(Ljava\/lang\/Iterable;)F" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$max' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$max' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1896)\l0x0009: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1897)\l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x002f \l}"];
Node_28 [shape=record,label="{28\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1898)\l0x0013: CHECK_CAST (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:??[OBJECT, ARRAY]) \l0x0015: INVOKE  (r1 I:float) = (r1 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.floatValue():float A[MD:():float (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0019|LOOP_START\lLOOP:0: B:29:0x0019\-\>B:31:0x001f\l|0x0019: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:1899)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x002e \l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|LOOP_END\lLOOP:0: B:29:0x0019\-\>B:31:0x001f\l|0x001f: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:1900)\l0x0023: CHECK_CAST (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:??[OBJECT, ARRAY]) \l0x0025: INVOKE  (r2 I:float) = (r2 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.floatValue():float A[MD:():float (c)]\l0x0029: INVOKE  (r1 I:float A[D('max' float)]) = (r1 I:float A[D('max' float)]), (r2 I:float A[D('e' float)]) type: STATIC call: java.lang.Math.max(float, float):float A[MD:(float, float):float (c)] (LINE:1901)\l}"];
Node_35 [shape=record,label="{35\:\ 0x002e|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002e|RETURN\l|0x002e: RETURN  (r1 I:float A[D('max' float)])  (LINE:1903)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_33 [shape=record,label="{33\:\ 0x002f|0x002f: NEW_INSTANCE  (r1 I:java.util.NoSuchElementException A[D('max' float)]) =  java.util.NoSuchElementException  (LINE:1897)\l0x0031: INVOKE  (r1 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0034|0x0034: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final float kotlin.collections.CollectionsKt___CollectionsKt.maxOrThrow((r3 I:java.lang.Iterable\<java.lang.Float\> A[D('$this$max' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:31:0x001f \-\> B:29:0x0019, CROSS_EDGE: B:34:0x0034 \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0029\-0x002d: r2 'e' F\l  0x0019\-0x002f: r1 'max' F\l  0x0009\-0x0034: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x0034: r3 '$this$max' Ljava\/lang\/Iterable;\lSIGNATURE: (Ljava\/lang\/Iterable\<Ljava\/lang\/Float;\>;)F\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_33;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_35;
Node_31 -> Node_29;
Node_35 -> Node_32;
Node_32 -> Node_25;
Node_33 -> Node_34;
Node_34 -> Node_25;
}

