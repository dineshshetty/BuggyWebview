digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.contains(Ljava\/lang\/Iterable;Ljava\/lang\/Object;)Z" {
subgraph cluster_Region_1022192784 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\l}"];
subgraph cluster_Region_5578096 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_608988681 {
label = "IF [B:27:0x0007] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0007|if ((r1 instanceof java.util.Collection) == true) goto L3\l}"];
subgraph cluster_Region_2063155549 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0010|RETURN\l|return ((java.util.Collection) r1).contains(r2)\l}"];
}
}
subgraph cluster_Region_765930366 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0015|RETURN\l|return kotlin.collections.CollectionsKt.indexOf(r1, r2) \>= 0\l}"];
}
}
}
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0009}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0011}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0017|SYNTHETIC\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0019|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt___CollectionsKt.contains((r1v0 java.lang.Iterable\<? extends T\> A[D('$this$contains' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 T A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:34:0x001a \-\> B:25:?, CROSS_EDGE: B:33:0x0019 \-\> B:34:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;TT;)Z\l}"];
MethodNode -> Node_24;Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_30[style=dashed];
Node_29 -> Node_25;
Node_31 -> Node_32;
Node_31 -> Node_33;
Node_24 -> Node_26;
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_32 -> Node_25;
Node_33 -> Node_25;
}

