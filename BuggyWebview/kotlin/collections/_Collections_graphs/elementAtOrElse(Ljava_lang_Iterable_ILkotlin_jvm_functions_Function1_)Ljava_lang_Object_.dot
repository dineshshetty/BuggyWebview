digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.elementAtOrElse(Ljava\/lang\/Iterable;ILkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_52 [shape=record,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"defaultValue\")\l}"];
Node_55 [shape=record,label="{55\:\ 0x000c|if ((r4 instanceof java.util.List) == false) goto L12\l}"];
Node_56 [shape=record,label="{56\:\ 0x000e|java.util.List r0 = (java.util.List) r4\l}"];
Node_57 [shape=record,label="{57\:\ 0x0011|if (r5 \< 0) goto L10\l}"];
Node_58 [shape=record,label="{58\:\ 0x0013}"];
Node_59 [shape=record,label="{59\:\ 0x0017|if (r5 \> kotlin.collections.CollectionsKt.getLastIndex(r0)) goto L10\l}"];
Node_60 [shape=record,label="{60\:\ 0x0019}"];
Node_77 [shape=record,label="{77\:\ ?|SYNTHETIC\lRETURN\l|return (T) r0.get(r5)\l}"];
Node_53 [shape=record,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_61 [shape=record,label="{61\:\ 0x001e}"];
Node_62 [shape=record,label="{62\:\ 0x0026|RETURN\lORIG_RETURN\l|return r6.invoke(java.lang.Integer.valueOf(r5))\l}"];
Node_63 [shape=record,label="{63\:\ 0x0027|if (r5 \>= 0) goto L15\l}"];
Node_64 [shape=record,label="{64\:\ 0x0029}"];
Node_65 [shape=record,label="{65\:\ 0x0031|RETURN\l|return r6.invoke(java.lang.Integer.valueOf(r5))\l}"];
Node_66 [shape=record,label="{66\:\ 0x0032|java.util.Iterator r0 = r4.iterator()\lr1 = 0\l}"];
Node_67 [shape=record,label="{67\:\ 0x0037|LOOP_START\lLOOP:0: B:67:0x0037\-\>B:72:0x0046\lPHI: r1 \l  PHI: (r1v1 'count' int) = (r1v0 'count' int), (r1v2 'count' int) binds: [B:66:0x0032, B:72:0x0046] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_68 [shape=record,label="{68\:\ 0x003b|if (r0.hasNext() == false) goto L23\l}"];
Node_69 [shape=record,label="{69\:\ 0x003d|java.lang.Object r2 = r0.next()\lint r3 = r1 + 1\l}"];
Node_70 [shape=record,label="{70\:\ 0x0043|if (r5 != r1) goto L20\l}"];
Node_72 [shape=record,label="{72\:\ 0x0046|LOOP_END\lLOOP:0: B:67:0x0037\-\>B:72:0x0046\l|r1 = r3\l}"];
Node_75 [shape=record,label="{75\:\ 0x0045|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0045|RETURN\l|return r2\l}"];
Node_76 [shape=record,label="{76\:\ 0x0048|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0048|java.lang.Integer r2 = java.lang.Integer.valueOf(r5)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0050|RETURN\l|return r6.invoke(r2)\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.elementAtOrElse((r4v0 java.lang.Iterable\<? extends T\> A[D('$this$elementAtOrElse' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'defaultValue' kotlin.jvm.functions.Function1\<? super java.lang.Integer, ? extends T\> A[D('defaultValue' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:61:0x001e \-\> B:62:0x0026, CROSS_EDGE: B:57:0x0011 \-\> B:61:0x001e, CROSS_EDGE: B:65:0x0031 \-\> B:53:?, CROSS_EDGE: B:71:0x0045 \-\> B:53:?, BACK_EDGE: B:72:0x0046 \-\> B:67:0x0037, CROSS_EDGE: B:74:0x0050 \-\> B:53:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Integer;+TT;\>;)TT;\l}"];
MethodNode -> Node_52;Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_63;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_61;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_77;
Node_77 -> Node_53;
Node_61 -> Node_62;
Node_62 -> Node_53;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_66;
Node_64 -> Node_65;
Node_65 -> Node_53;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_76;
Node_69 -> Node_70;
Node_70 -> Node_72;
Node_70 -> Node_75[style=dashed];
Node_72 -> Node_67;
Node_75 -> Node_71;
Node_71 -> Node_53;
Node_76 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_53;
}

