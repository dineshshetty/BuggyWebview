digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.firstOrNull(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$firstOrNull' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0006: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('$this$firstOrNull' java.lang.Iterable)]) java.util.List  (LINE:262)\l0x0008: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x001e \l}"];
Node_32 [shape=record,label="{32\:\ 0x000b|0x000b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$firstOrNull' java.lang.Iterable)])  (LINE:263)\l0x000c: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:boolean) = (r0 I:java.util.List) type: INTERFACE call: java.util.List.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0015 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0014|RETURN\l|0x0014: RETURN  (r1 I:T)  (LINE:264)\l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0015|0x0015: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$firstOrNull' java.lang.Iterable)])  (LINE:266)\l0x0016: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l0x0018: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r1 I:int) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x001d|RETURN\l|0x001d: RETURN  (r0 I:T) \l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|0x001e: INVOKE  (r0 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$firstOrNull' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:269)\l0x0022: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:270)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0026|0x0026: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0029 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0028|RETURN\l|0x0028: RETURN  (r1 I:T)  (LINE:271)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0029|0x0029: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:272)\l}"];
Node_41 [shape=record,label="{41\:\ 0x002d|RETURN\l|0x002d: RETURN  (r1 I:T) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.firstOrNull((r3 I:java.lang.Iterable\<? extends T\> A[D('$this$firstOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:36:0x001d \-\> B:29:?, CROSS_EDGE: B:39:0x0028 \-\> B:29:?, CROSS_EDGE: B:41:0x002d \-\> B:29:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0022\-0x002d: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x002d: r3 '$this$firstOrNull' Ljava\/lang\/Iterable;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;)TT;\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_37;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_29;
Node_35 -> Node_36;
Node_36 -> Node_29;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_39 -> Node_29;
Node_40 -> Node_41;
Node_41 -> Node_29;
}

