digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.dropLast(Ljava\/util\/List;I)Ljava\/util\/List;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\l}"];
Node_25 [shape=record,label="{25\:\ 0x0006|if (r4 \< 0) goto L10\l}"];
Node_26 [shape=record,label="{26\:\ 0x0008|r1 = true\l}"];
Node_28 [shape=record,label="{28\:\ 0x000b|PHI: r1 \l  PHI: (r1v1 boolean) = (r1v0 boolean), (r1v6 boolean) binds: [B:27:0x000a, B:26:0x0008] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == false) goto L8\l}"];
Node_29 [shape=record,label="{29\:\ 0x000d}"];
Node_30 [shape=record,label="{30\:\ 0x001d|RETURN\l|return kotlin.collections.CollectionsKt.take(r3, kotlin.ranges.RangesKt.coerceAtLeast(r3.size() \- r4, 0))\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Requested element count \")\lr1.append(r4)\lr1.append(\" is less than zero.\")\l}"];
Node_32 [shape=record,label="{32\:\ 0x003e|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|r1 = false\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.dropLast((r3v0 java.util.List\<? extends T\> A[D('$this$dropLast' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x003e \-\> B:23:?, CROSS_EDGE: B:27:0x000a \-\> B:28:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<+TT;\>;I)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_30;
Node_30 -> Node_23;
Node_31 -> Node_32;
Node_32 -> Node_23;
Node_27 -> Node_28;
}

