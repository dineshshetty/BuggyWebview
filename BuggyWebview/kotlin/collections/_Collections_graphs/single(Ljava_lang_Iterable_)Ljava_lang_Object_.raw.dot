digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.single(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$single' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0006: INSTANCE_OF  (r0 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('$this$single' java.lang.Iterable)]) java.util.List  (LINE:590)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:36:0x0012 \l}"];
Node_34 [shape=record,label="{34\:\ 0x000a|0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$single' java.lang.Iterable)]) \l0x000b: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List) type: STATIC call: kotlin.collections.CollectionsKt.single(java.util.List):java.lang.Object A[MD:\<T\>:(java.util.List\<? extends T\>):T (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:T) \l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|0x0012: INVOKE  (r0 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$single' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:592)\l0x0016: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:593)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001a|0x001a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x002f \l}"];
Node_38 [shape=record,label="{38\:\ 0x001c|0x001c: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:595)\l0x0020: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:596)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x0027 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0026|RETURN\l|0x0026: RETURN  (r1 I:T A[D('single' java.lang.Object)])  (LINE:598)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0027|0x0027: NEW_INSTANCE  (r2 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:597)\l0x0029: CONST_STR  (r3 I:java.lang.String) =  \"Collection has more than one element.\" \l0x002b: INVOKE  (r2 I:java.lang.IllegalArgumentException), (r3 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x002e|0x002e: THROW  (r2 I:java.lang.Throwable) \l}"];
Node_43 [shape=record,label="{43\:\ 0x002f|0x002f: NEW_INSTANCE  (r1 I:java.util.NoSuchElementException A[D('single' java.lang.Object)]) =  java.util.NoSuchElementException  (LINE:594)\l0x0031: CONST_STR  (r2 I:java.lang.String) =  \"Collection is empty.\" \l0x0033: INVOKE  (r1 I:java.util.NoSuchElementException), (r2 I:java.lang.String) type: DIRECT call: java.util.NoSuchElementException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0036|0x0036: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.single((r4 I:java.lang.Iterable\<? extends T\> A[D('$this$single' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x0026 \-\> B:31:?, CROSS_EDGE: B:42:0x002e \-\> B:31:?, CROSS_EDGE: B:44:0x0036 \-\> B:31:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0020\-0x002f: r1 'single' Ljava\/lang\/Object;\l  0x0016\-0x0036: r0 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x0036: r4 '$this$single' Ljava\/lang\/Iterable;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;)TT;\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_31;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_43;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_31;
Node_41 -> Node_42;
Node_42 -> Node_31;
Node_43 -> Node_44;
Node_44 -> Node_31;
}

