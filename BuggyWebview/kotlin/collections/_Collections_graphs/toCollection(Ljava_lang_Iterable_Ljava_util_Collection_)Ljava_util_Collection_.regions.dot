digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.toCollection(Ljava\/lang\/Iterable;Ljava\/util\/Collection;)Ljava\/util\/Collection;" {
subgraph cluster_Region_1058571795 {
label = "R(3:1|(1:4)|6)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"destination\")\ljava.util.Iterator r0 = r2.iterator()\l\l}"];
subgraph cluster_LoopRegion_1041123273 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0012|java.lang.Object \lif (r0.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_1318442795 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0014|LOOP_END\lLOOP:0: B:19:0x000e\-\>B:21:0x0014\l|r3.add(r1)\l}"];
}
}
Node_22 [shape=record,label="{22\:\ 0x001c|RETURN\l|return r3\l}"];
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000e|LOOP_START\lLOOP:0: B:19:0x000e\-\>B:21:0x0014\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x001c|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super T\> kotlin.collections.CollectionsKt___CollectionsKt.toCollection((r2v0 java.lang.Iterable\<? extends T\> A[D('$this$toCollection' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'destination' C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0014 \-\> B:19:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [C extends java.util.Collection\<? super T\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TT;\>;\>(Ljava\/lang\/Iterable\<+TT;\>;TC;)TC;\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_20 -> Node_21;
Node_20 -> Node_23[style=dashed];
Node_21 -> Node_19;
Node_22 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_23 -> Node_22;
}

