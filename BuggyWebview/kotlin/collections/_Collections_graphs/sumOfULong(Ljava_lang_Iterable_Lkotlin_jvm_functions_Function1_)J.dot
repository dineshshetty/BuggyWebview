digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.sumOfULong(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)J" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"selector\")\llong r0 = kotlin.ULong.m316constructorimpl(0)\ljava.util.Iterator r2 = r6.iterator()\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|LOOP_START\lLOOP:0: B:19:0x0014\-\>B:21:0x001a\lPHI: r0 \l  PHI: (r0v4 'sum' long) = (r0v3 'sum' long), (r0v5 'sum' long) binds: [B:18:0x0000, B:21:0x001a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|if (r2.hasNext() == false) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|LOOP_END\lLOOP:0: B:19:0x0014\-\>B:21:0x001a\l|java.lang.Object r3 = (T) r2.next()\llong r0 = kotlin.ULong.m316constructorimpl(r7.invoke(r3).m367unboximpl() + r0)\l}"];
Node_23 [shape=record,label="{23\:\ 0x002e|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x002e|RETURN\l|return r0\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final long kotlin.collections.CollectionsKt___CollectionsKt.sumOfULong((r6v0 java.lang.Iterable\<? extends T\> A[D('$this$sumOf' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'selector' kotlin.jvm.functions.Function1\<? super T, kotlin.ULong\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x001a \-\> B:19:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Lkotlin\/ULong;\>;)J\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r3v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_19;
Node_23 -> Node_22;
Node_22 -> Node_17;
}

