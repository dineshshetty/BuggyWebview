digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.firstNotNullOfOrNull(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"transform\")\ljava.util.Iterator r0 = r3.iterator()\l}"];
Node_27 [shape=record,label="{27\:\ 0x000e|LOOP_START\lLOOP:0: B:27:0x000e\-\>B:30:0x001c\l}"];
Node_28 [shape=record,label="{28\:\ 0x0012|if (r0.hasNext() == false) goto L9\l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|java.lang.Object r1 = (T) r0.next()\ljava.lang.Object r2 = r4.invoke(r1)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|LOOP_END\lLOOP:0: B:27:0x000e\-\>B:30:0x001c\l|if (r2 == null) goto L2\l}"];
Node_35 [shape=record,label="{35\:\ 0x001e|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001e|RETURN\l|return r2\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x001f|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001f|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static final R kotlin.collections.CollectionsKt___CollectionsKt.firstNotNullOfOrNull((r3v0 java.lang.Iterable\<? extends T\> A[D('$this$firstNotNullOfOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'transform' kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:30:0x001c \-\> B:27:0x000e, CROSS_EDGE: B:33:0x0020 \-\> B:25:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TR;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_34;
Node_29 -> Node_30;
Node_30 -> Node_27;
Node_30 -> Node_35[style=dashed];
Node_35 -> Node_31;
Node_31 -> Node_25;
Node_34 -> Node_32;
Node_32 -> Node_25;
}

