digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.map(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"transform\")\ljava.util.Collection r1 = new java.util.ArrayList(kotlin.collections.CollectionsKt.collectionSizeOrDefault(r7, 10))\ljava.util.Iterator r4 = r7.iterator()\l}"];
Node_21 [shape=record,label="{21\:\ 0x001e|LOOP_START\lLOOP:0: B:21:0x001e\-\>B:23:0x0024\l}"];
Node_22 [shape=record,label="{22\:\ 0x0022|if (r4.hasNext() == false) goto L5\l}"];
Node_23 [shape=record,label="{23\:\ 0x0024|LOOP_END\lLOOP:0: B:21:0x001e\-\>B:23:0x0024\l|java.lang.Object r5 = (T) r4.next()\lr1.add(r8.invoke(r5))\l}"];
Node_26 [shape=record,label="{26\:\ 0x0030|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0030}"];
Node_25 [shape=record,label="{25\:\ 0x0033|RETURN\l|return (java.util.List) r1\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.CollectionsKt___CollectionsKt.map((r7v0 java.lang.Iterable\<? extends T\> A[D('$this$map' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'transform' kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:23:0x0024 \-\> B:21:0x001e\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)Ljava\/util\/List\<TR;\>;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r5v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_26;
Node_23 -> Node_21;
Node_26 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_19;
}

