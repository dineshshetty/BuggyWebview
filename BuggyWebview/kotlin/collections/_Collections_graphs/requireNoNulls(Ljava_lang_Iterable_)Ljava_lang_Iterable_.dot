digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.requireNoNulls(Ljava\/lang\/Iterable;)Ljava\/lang\/Iterable;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\ljava.util.Iterator r0 = r4.iterator()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0009|LOOP_START\lLOOP:0: B:29:0x0009\-\>B:32:0x0013\l}"];
Node_30 [shape=record,label="{30\:\ 0x000d|if (r0.hasNext() == false) goto L10\l}"];
Node_31 [shape=record,label="{31\:\ 0x000f|java.lang.Object r1 = r0.next()\l}"];
Node_32 [shape=record,label="{32\:\ 0x0013|LOOP_END\lLOOP:0: B:29:0x0009\-\>B:32:0x0013\l|if (r1 == null) goto L6\l}"];
Node_37 [shape=record,label="{37\:\ 0x0016|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0016|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"null element found in \")\lr2.append(r4)\lr2.append('.')\l}"];
Node_35 [shape=record,label="{35\:\ 0x0031|throw new java.lang.IllegalArgumentException(r2.toString())\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0032|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0032|RETURN\l|return r4\l}"];
MethodNode[shape=record,label="{public static final java.lang.Iterable\<T\> kotlin.collections.CollectionsKt___CollectionsKt.requireNoNulls((r4v0 java.lang.Iterable\<? extends T\> A[D('$this$requireNoNulls' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0013 \-\> B:29:0x0009, CROSS_EDGE: B:36:0x0032 \-\> B:27:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;)Ljava\/lang\/Iterable\<TT;\>;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r4v0, resolved type: java.lang.Iterable\<? extends T\>\}\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_38;
Node_31 -> Node_32;
Node_32 -> Node_29[style=dashed];
Node_32 -> Node_37;
Node_37 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_27;
Node_38 -> Node_36;
Node_36 -> Node_27;
}

