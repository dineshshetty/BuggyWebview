digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.scanIndexed(Ljava\/lang\/Iterable;Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function3;)Ljava\/util\/List;" {
subgraph cluster_Region_2021012901 {
label = "R(2:1|(2:(1:4)|(3:6|(1:9)|12)))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"operation\")\lint int r3 = kotlin.collections.CollectionsKt.collectionSizeOrDefault(r10, 9)\l}"];
subgraph cluster_Region_2008622527 {
label = "R(2:(1:4)|(3:6|(1:9)|12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_7874763 {
label = "IF [B:29:0x0013] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0013|if (r3 == 0) goto L3\l}"];
subgraph cluster_Region_2064885935 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.collections.CollectionsKt.listOf(r11)\l}"];
}
}
subgraph cluster_Region_1799272491 {
label = "R(3:6|(1:9)|12)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x001a|java.util.ArrayList java.util.ArrayList r4 = new java.util.ArrayList(r3 + 1)\lr4.add(r11)\lint r5 = 0\ljava.lang.Object r6 = (java.lang.Object) r11\ljava.util.Iterator java.util.Iterator\<? extends T\> r7 = r10.iterator()\l}"];
subgraph cluster_LoopRegion_373258306 {
label = "LOOP:0: (1:9)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0030|if (r7.hasNext() != false) goto L9\l}"];
subgraph cluster_Region_1596831007 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0032|LOOP_END\lLOOP:0: B:32:0x002c\-\>B:34:0x0032\l|java.lang.Object java.lang.Object r8 = (T) r7.next()\ljava.lang.Object r6 = (R) r12.invoke(java.lang.Integer.valueOf(r5), r6, r8)\lr4.add(r6)\lr5++\l}"];
}
}
Node_36 [shape=record,label="{36\:\ 0x0049|RETURN\lORIG_RETURN\l|return r4\l}"];
}
}
}
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0015}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x002c|LOOP_START\lLOOP:0: B:32:0x002c\-\>B:34:0x0032\lPHI: r5 r6 \l  PHI: (r5v3 'index$iv' int) = (r5v2 'index$iv' int), (r5v5 'index$iv' int) binds: [B:31:0x001a, B:34:0x0032] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'accumulator$iv' java.lang.Object) = (r6v1 'accumulator$iv' java.lang.Object), (r6v3 'accumulator$iv' java.lang.Object) binds: [B:31:0x001a, B:34:0x0032] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0045|SYNTHETIC\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0045}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.CollectionsKt___CollectionsKt.scanIndexed((r10v0 java.lang.Iterable\<? extends T\> A[D('$this$scanIndexed' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 R A[D('initial' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'operation' kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super R, ? super T, ? extends R\> A[D('operation' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x0032 \-\> B:32:0x002c, CROSS_EDGE: B:35:0x0045 \-\> B:36:0x0049\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;TR;Lkotlin\/jvm\/functions\/Function3\<\-Ljava\/lang\/Integer;\-TR;\-TT;+TR;\>;)Ljava\/util\/List\<TR;\>;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r8v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_26;Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_31[style=dashed];
Node_38 -> Node_27;
Node_31 -> Node_32;
Node_33 -> Node_34;
Node_33 -> Node_37[style=dashed];
Node_34 -> Node_32;
Node_36 -> Node_27;
Node_26 -> Node_28;
Node_30 -> Node_38;
Node_32 -> Node_33;
Node_37 -> Node_35;
Node_35 -> Node_36;
}

