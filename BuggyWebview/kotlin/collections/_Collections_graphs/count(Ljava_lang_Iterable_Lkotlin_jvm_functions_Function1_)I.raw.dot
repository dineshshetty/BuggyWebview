digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.count(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)I" {
Node_48 [shape=record,label="{48\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_50 [shape=record,label="{50\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$count' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INSTANCE_OF  (r1 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('$this$count' java.lang.Iterable)]) java.util.Collection  (LINE:1770)\l}"];
Node_51 [shape=record,label="{51\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x001a \l}"];
Node_52 [shape=record,label="{52\:\ 0x000f|0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$count' java.lang.Iterable)]) \l0x0010: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r1 I:boolean) = (r1 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x0016|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:56:0x001a \l}"];
Node_54 [shape=record,label="{54\:\ 0x0018|RETURN\l|0x0018: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: RETURN  (r1 I:int) \l}"];
Node_49 [shape=record,label="{49\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x001a|0x001a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1771)\l0x001b: INVOKE  (r2 I:java.util.Iterator) = (r5 I:java.lang.Iterable A[D('$this$count' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1772)\l}"];
Node_57 [shape=record,label="{57\:\ 0x001f|LOOP_START\lLOOP:0: B:57:0x001f\-\>B:68:0x001f\l|0x001f: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_58 [shape=record,label="{58\:\ 0x0023|0x0023: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x003d \l}"];
Node_59 [shape=record,label="{59\:\ 0x0025|0x0025: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0029: INVOKE  (r4 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r3 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x002d: CHECK_CAST (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:??[OBJECT, ARRAY]) \l0x002f: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x0033|0x0033: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:69:0x001f \l}"];
Node_65 [shape=record,label="{65\:\ 0x0035|SYNTHETIC\l}"];
Node_61 [shape=record,label="{61\:\ 0x0035|0x0035: ARITH  (r1 I:int) = (r1 I:int A[D('count' int)]) + (1 int) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0037|0x0037: IF  (r1 I:??[int, byte, short, char] A[D('count' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:70:0x001f \l}"];
Node_67 [shape=record,label="{67\:\ 0x0039|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0039|0x0039: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwCountOverflow():void A[MD:():void (m)]\l}"];
Node_71 [shape=record,label="{71\:\ 0x001f|SYNTHETIC\l}"];
Node_68 [shape=record,label="{68\:\ 0x001f|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x001f\-\>B:68:0x001f\l}"];
Node_70 [shape=record,label="{70\:\ 0x001f|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x001f|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x003d|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x003d|RETURN\l|0x003d: RETURN  (r1 I:int A[D('count' int)])  (LINE:1773)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt___CollectionsKt.count((r5 I:java.lang.Iterable\<? extends T\> A[D('$this$count' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:60:0x0033 \-\> B:57:0x001f, BACK_EDGE: B:62:0x0037 \-\> B:57:0x001f, BACK_EDGE: B:63:0x0039 \-\> B:57:0x001f, CROSS_EDGE: B:64:0x003d \-\> B:49:?, CROSS_EDGE: B:51:0x000d \-\> B:56:0x001a\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)I\lDebug Info:\l  0x0029\-0x003c: r3 'element' Ljava\/lang\/Object;\l  0x000b\-0x003d: r0 '$i$f$count' I\l  0x001b\-0x003d: r1 'count' I\l  \-1 \-0x003d: r5 '$this$count' Ljava\/lang\/Iterable;\l  \-1 \-0x003d: r6 'predicate' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_48;Node_48 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_56;
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_56;
Node_54 -> Node_49;
Node_56 -> Node_57;
Node_57 -> Node_58;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_66;
Node_59 -> Node_60;
Node_60 -> Node_65[style=dashed];
Node_60 -> Node_69;
Node_65 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_67[style=dashed];
Node_62 -> Node_70;
Node_67 -> Node_63;
Node_63 -> Node_71;
Node_71 -> Node_68;
Node_68 -> Node_57;
Node_70 -> Node_68;
Node_69 -> Node_68;
Node_66 -> Node_64;
Node_64 -> Node_49;
}

