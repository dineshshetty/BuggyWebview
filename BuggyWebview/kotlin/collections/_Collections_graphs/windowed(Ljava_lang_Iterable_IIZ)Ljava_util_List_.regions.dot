digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.windowed(Ljava\/lang\/Iterable;IIZ)Ljava\/util\/List;" {
subgraph cluster_Region_1396798830 {
label = "R(2:1|(2:(4:5|8|(1:(2:(1:1)|(3:20|(1:22)|24)))|18)|(3:28|(1:31)|34))) | DECL_VAR: int windowSize\l";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r16, \"\<this\>\")\lkotlin.collections.SlidingWindowKt.checkWindowSizeStep(r17, r18)\l}"];
subgraph cluster_Region_484097009 {
label = "R(2:(4:5|8|(1:(2:(1:1)|(3:20|(1:22)|24)))|18)|(3:28|(1:31)|34))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_31252286 {
label = "IF [B:73:0x0013, B:75:0x0017] THEN: R(4:5|8|(1:(2:(1:1)|(3:20|(1:22)|24)))|18) ELSE: null";
node [shape=record,color=blue];
Node_73 [shape=record,label="{73\:\ 0x0013|if ((r16 instanceof java.util.RandomAccess) != false) goto L3\l}"];
Node_75 [shape=record,label="{75\:\ 0x0017|ADDED_TO_REGION\l|if ((r16 instanceof java.util.List) != false) goto L5\l}"];
subgraph cluster_Region_1960060099 {
label = "R(4:5|8|(1:(2:(1:1)|(3:20|(1:22)|24)))|18)";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x0019|int int r4 = ((java.util.List) r16).size()\l}"];
Node_80 [shape=record,label="{80\:\ 0x0029|PHI: r7 \l  PHI: (r7v4 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r6 = (r4 \/ r18) + (r4 % r18 == 0 ? 0 : 1)\ljava.util.ArrayList java.util.ArrayList r7 = new java.util.ArrayList(r6)\lint r9 = 0\l}"];
subgraph cluster_LoopRegion_607309976 {
label = "LOOP:0: (1:(2:(1:1)|(3:20|(1:22)|24)))";
node [shape=record,color=blue];
subgraph cluster_Region_2080390005 {
label = "R(1:(2:(1:1)|(3:20|(1:22)|24)))";
node [shape=record,color=blue];
subgraph cluster_Region_894177847 {
label = "R(2:(1:1)|(3:20|(1:22)|24))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1035220353 {
label = "IF [B:85:0x0037, B:87:0x003f, B:88:0x0041] THEN: R(1:1) ELSE: null";
node [shape=record,color=blue];
Node_85 [shape=record,label="{85\:\ 0x0037|PHI: r10 \l  PHI: (r10v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r9 \>= 0 && r9 \< r4) == true) goto L13\l}"];
Node_87 [shape=record,label="{87\:\ 0x003f|ADDED_TO_REGION\l|if ((r10 = kotlin.ranges.RangesKt.coerceAtMost(r17, r4 \- r9)) \< r17) goto L15\l}"];
Node_88 [shape=record,label="{88\:\ 0x0041|ADDED_TO_REGION\l|if (r19 == true) goto L20\l}"];
subgraph cluster_Region_1376652943 {
label = "R(1:1)";
node [shape=record,color=blue];
Node_InsnContainer_1611313734 [shape=record,label="{|break\l}"];
}
}
subgraph cluster_Region_1029788322 {
label = "R(3:20|(1:22)|24)";
node [shape=record,color=blue];
Node_89 [shape=record,label="{89\:\ 0x0043|java.util.ArrayList java.util.ArrayList r11 = new java.util.ArrayList(r10)\lint r12 = 0\l}"];
subgraph cluster_LoopRegion_1776004784 {
label = "LOOP:1: (1:22)";
node [shape=record,color=blue];
Node_90 [shape=record,label="{90\:\ 0x0049|LOOP_START\lLOOP:1: B:90:0x0049\-\>B:91:0x004b\lPHI: r12 \l  PHI: (r12v1 int) = (r12v0 int), (r12v2 int) binds: [B:89:0x0043, B:91:0x004b] A[DONT_GENERATE, DONT_INLINE]\l|if (r12 \< r10) goto L22\l}"];
subgraph cluster_Region_1023174608 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_91 [shape=record,label="{91\:\ 0x004b|LOOP_END\lLOOP:1: B:90:0x0049\-\>B:91:0x004b\l|int r13 = r12\lr11.add(((java.util.List) r16).get(r13 + r9))\lr12++\l}"];
}
}
Node_92 [shape=record,label="{92\:\ 0x005c|LOOP_END\lLOOP:0: B:81:0x0030\-\>B:92:0x005c\l|r7.add(r11)\lr9 += r18\l}"];
}
}
}
}
Node_94 [shape=record,label="{94\:\ 0x0066|RETURN\l|return r7\l}"];
}
}
subgraph cluster_Region_530237038 {
label = "R(3:28|(1:31)|34)";
node [shape=record,color=blue];
Node_95 [shape=record,label="{95\:\ 0x0067|java.util.ArrayList java.util.ArrayList r4 = new java.util.ArrayList()\ljava.util.Iterator java.util.Iterator r5 = kotlin.collections.SlidingWindowKt.windowedIterator(r16.iterator(), r17, r18, r19, false)\l}"];
subgraph cluster_LoopRegion_1491812064 {
label = "LOOP:2: (1:31)";
node [shape=record,color=blue];
Node_97 [shape=record,label="{97\:\ 0x007a|if (r5.hasNext() != false) goto L31\l}"];
subgraph cluster_Region_1643914544 {
label = "R(1:31)";
node [shape=record,color=blue];
Node_98 [shape=record,label="{98\:\ 0x007c|LOOP_END\lLOOP:2: B:96:0x0076\-\>B:98:0x007c\l|java.lang.Object java.lang.Object r7 = r5.next()\ljava.util.List java.util.List r8 = (java.util.List) r7\lr4.add(r8)\l}"];
}
}
Node_100 [shape=record,label="{100\:\ 0x008d|RETURN\l|return r4\l}"];
}
}
}
Node_70 [shape=record,color=red,label="{70\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_74 [shape=record,color=red,label="{74\:\ 0x0015}"];
Node_77 [shape=record,color=red,label="{77\:\ 0x0024}"];
Node_78 [shape=record,color=red,label="{78\:\ 0x0026}"];
Node_81 [shape=record,color=red,label="{81\:\ 0x0030|LOOP_START\lLOOP:0: B:81:0x0030\-\>B:92:0x005c\lPHI: r9 \l  PHI: (r9v2 'index' int) = (r9v1 'index' int), (r9v3 'index' int) binds: [B:80:0x0029, B:92:0x005c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_82 [shape=record,color=red,label="{82\:\ 0x0032|REMOVE\lADDED_TO_REGION\l}"];
Node_83 [shape=record,color=red,label="{83\:\ 0x0034}"];
Node_86 [shape=record,color=red,label="{86\:\ 0x0039}"];
Node_101 [shape=record,color=red,label="{101\:\ 0x0063|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:101:0x0063\-\>B:93:0x0063 ?: BREAK  \l}"];
Node_93 [shape=record,color=red,label="{93\:\ 0x0063|EDGE_INSN: B:101:0x0063\-\>B:93:0x0063 ?: BREAK  , EDGE_INSN: B:102:0x0063\-\>B:93:0x0063 ?: BREAK  \l}"];
Node_71 [shape=record,color=red,label="{71\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_103 [shape=record,color=red,label="{103\:\ 0x005c|SYNTHETIC\l}"];
Node_102 [shape=record,color=red,label="{102\:\ 0x0063|SYNTHETIC\lADDED_TO_REGION\lEDGE_INSN: B:102:0x0063\-\>B:93:0x0063 ?: BREAK  \l}"];
Node_84 [shape=record,color=red,label="{84\:\ 0x0036}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x0028}"];
Node_96 [shape=record,color=red,label="{96\:\ 0x0076|LOOP_START\lLOOP:2: B:96:0x0076\-\>B:98:0x007c\l}"];
Node_104 [shape=record,color=red,label="{104\:\ 0x0089|SYNTHETIC\l}"];
Node_99 [shape=record,color=red,label="{99\:\ 0x0089}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.util.List\<T\>\> kotlin.collections.CollectionsKt___CollectionsKt.windowed((r16v0 java.lang.Iterable\<? extends T\> A[D('$this$windowed' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17v0 'size' int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18v0 'step' int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19v0 'partialWindows' boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:91:0x004b \-\> B:90:0x0049, BACK_EDGE: B:92:0x005c \-\> B:81:0x0030, CROSS_EDGE: B:87:0x003f \-\> B:89:0x0043, CROSS_EDGE: B:85:0x0037 \-\> B:93:0x0063, CROSS_EDGE: B:84:0x0036 \-\> B:85:0x0037, CROSS_EDGE: B:81:0x0030 \-\> B:84:0x0036, CROSS_EDGE: B:79:0x0028 \-\> B:80:0x0029, BACK_EDGE: B:98:0x007c \-\> B:96:0x0076, CROSS_EDGE: B:100:0x008d \-\> B:71:?, CROSS_EDGE: B:73:0x0013 \-\> B:95:0x0067\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;IIZ)Ljava\/util\/List\<Ljava\/util\/List\<TT;\>;\>;\l}"];
MethodNode -> Node_70;Node_72 -> Node_73;
Node_73 -> Node_74;
Node_73 -> Node_95[style=dashed];
Node_75 -> Node_76;
Node_75 -> Node_95[style=dashed];
Node_76 -> Node_77;
Node_80 -> Node_81;
Node_85 -> Node_86;
Node_85 -> Node_102[style=dashed];
Node_87 -> Node_88;
Node_87 -> Node_89[style=dashed];
Node_88 -> Node_89;
Node_88 -> Node_101[style=dashed];
Node_89 -> Node_90;
Node_90 -> Node_91;
Node_90 -> Node_103[style=dashed];
Node_91 -> Node_90;
Node_92 -> Node_81;
Node_94 -> Node_71;
Node_95 -> Node_96;
Node_97 -> Node_98;
Node_97 -> Node_104[style=dashed];
Node_98 -> Node_96;
Node_100 -> Node_71;
Node_70 -> Node_72;
Node_74 -> Node_75;
Node_77 -> Node_78;
Node_77 -> Node_79;
Node_78 -> Node_80;
Node_81 -> Node_82;
Node_81 -> Node_84;
Node_82 -> Node_83;
Node_82 -> Node_84;
Node_83 -> Node_85;
Node_86 -> Node_87;
Node_101 -> Node_93;
Node_93 -> Node_94;
Node_103 -> Node_92;
Node_102 -> Node_93;
Node_84 -> Node_85;
Node_79 -> Node_80;
Node_96 -> Node_97;
Node_104 -> Node_99;
Node_99 -> Node_100;
}

