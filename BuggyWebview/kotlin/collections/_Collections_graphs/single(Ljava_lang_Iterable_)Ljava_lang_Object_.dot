digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.single(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\l}"];
Node_33 [shape=record,label="{33\:\ 0x0008|if ((r4 instanceof java.util.List) == false) goto L6\l}"];
Node_34 [shape=record,label="{34\:\ 0x000a}"];
Node_35 [shape=record,label="{35\:\ 0x0011|RETURN\l|return (T) kotlin.collections.CollectionsKt.single((java.util.List) r4)\l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0012|java.util.Iterator r0 = r4.iterator()\l}"];
Node_37 [shape=record,label="{37\:\ 0x001a|if (r0.hasNext() == false) goto L13\l}"];
Node_38 [shape=record,label="{38\:\ 0x001c|java.lang.Object r1 = r0.next()\l}"];
Node_39 [shape=record,label="{39\:\ 0x0024|if (r0.hasNext() != false) goto L11\l}"];
Node_40 [shape=record,label="{40\:\ 0x0026|RETURN\l|return r1\l}"];
Node_41 [shape=record,label="{41\:\ 0x0027}"];
Node_42 [shape=record,label="{42\:\ 0x002e|throw new java.lang.IllegalArgumentException(\"Collection has more than one element.\")\l}"];
Node_43 [shape=record,label="{43\:\ 0x002f}"];
Node_44 [shape=record,label="{44\:\ 0x0036|throw new java.util.NoSuchElementException(\"Collection is empty.\")\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.single((r4v0 java.lang.Iterable\<? extends T\> A[D('$this$single' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x0026 \-\> B:31:?, CROSS_EDGE: B:42:0x002e \-\> B:31:?, CROSS_EDGE: B:44:0x0036 \-\> B:31:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;)TT;\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_36;
Node_34 -> Node_35;
Node_35 -> Node_31;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_43;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_31;
Node_41 -> Node_42;
Node_42 -> Node_31;
Node_43 -> Node_44;
Node_44 -> Node_31;
}

