digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.singleOrNull(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_38 [shape=record,label="{38\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$singleOrNull' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:661)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:662)\l0x000d: INVOKE  (r3 I:java.util.Iterator) = (r7 I:java.lang.Iterable A[D('$this$singleOrNull' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:663)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0011|LOOP_START\lLOOP:0: B:41:0x0011\-\>B:54:0x0011\l|0x0011: INVOKE  (r4 I:boolean) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l0x0015: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:52:0x002e \l}"];
Node_43 [shape=record,label="{43\:\ 0x0018|0x0018: INVOKE  (r4 I:java.lang.Object) = (r3 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x001c: INVOKE  (r6 I:java.lang.Object) = \l  (r8 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:664)\l0x0020: CHECK_CAST (r6 I:java.lang.Boolean) = (java.lang.Boolean) (r6 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r6 I:boolean) = (r6 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x0026|0x0026: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:55:0x0011 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0028|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x002b  (LINE:665)\l}"];
Node_47 [shape=record,label="{47\:\ 0x002b|0x002b: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('single' java.lang.Object)]) = (r4 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)])  (LINE:666)\l0x002c: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('found' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:667)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0011|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0011|LOOP_END\lSYNTHETIC\lLOOP:0: B:41:0x0011\-\>B:54:0x0011\l}"];
Node_53 [shape=record,label="{53\:\ 0x002a|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|RETURN\l|0x002a: RETURN  (r5 I:T) \l}"];
Node_39 [shape=record,label="{39\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_55 [shape=record,label="{55\:\ 0x0011|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x002e|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x002e|0x002e: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0031  (LINE:670)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0030|RETURN\l|0x0030: RETURN  (r5 I:T) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0031|RETURN\l|0x0031: RETURN  (r1 I:T A[D('single' java.lang.Object)])  (LINE:671)\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.singleOrNull((r7 I:java.lang.Iterable\<? extends T\> A[D('$this$singleOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:44:0x0026 \-\> B:41:0x0011, BACK_EDGE: B:47:0x002b \-\> B:41:0x0011, CROSS_EDGE: B:49:0x0030 \-\> B:39:?, CROSS_EDGE: B:50:0x0031 \-\> B:39:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\lDebug Info:\l  0x001c\-0x002d: r4 'element' Ljava\/lang\/Object;\l  0x000b\-0x0031: r0 '$i$f$singleOrNull' I\l  0x000c\-0x0031: r1 'single' Ljava\/lang\/Object;\l  0x000d\-0x0031: r2 'found' Z\l  \-1 \-0x0031: r7 '$this$singleOrNull' Ljava\/lang\/Iterable;\l  \-1 \-0x0031: r8 'predicate' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_38;Node_38 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_52;
Node_43 -> Node_44;
Node_44 -> Node_51[style=dashed];
Node_44 -> Node_55;
Node_51 -> Node_45;
Node_45 -> Node_47;
Node_45 -> Node_53[style=dashed];
Node_47 -> Node_56;
Node_56 -> Node_54;
Node_54 -> Node_41;
Node_53 -> Node_46;
Node_46 -> Node_39;
Node_55 -> Node_54;
Node_52 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_39;
Node_50 -> Node_39;
}

