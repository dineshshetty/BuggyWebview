digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.dropLastWhile(Ljava\/util\/List;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$dropLastWhile' java.util.List)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:boolean) = (r4 I:java.util.List A[D('$this$dropLastWhile' java.util.List)]) type: INTERFACE call: java.util.List.isEmpty():boolean A[MD:():boolean (c)] (LINE:731)\l}"];
Node_33 [shape=record,label="{33\:\ 0x000f|0x000f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:0x003d \l}"];
Node_34 [shape=record,label="{34\:\ 0x0011|0x0011: INVOKE  (r1 I:int) = (r4 I:java.util.List A[D('$this$dropLastWhile' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:732)\l0x0015: INVOKE  (r1 I:java.util.ListIterator) = (r4 I:java.util.List A[D('$this$dropLastWhile' java.util.List)]), (r1 I:int) type: INTERFACE call: java.util.List.listIterator(int):java.util.ListIterator A[MD:(int):java.util.ListIterator\<E\> (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0019|LOOP_START\lLOOP:0: B:35:0x0019\-\>B:38:0x002d\l|0x0019: INVOKE  (r2 I:boolean) = (r1 I:java.util.ListIterator A[D('iterator' java.util.ListIterator)]) type: INTERFACE call: java.util.ListIterator.hasPrevious():boolean A[MD:():boolean (c)] (LINE:733)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001d|0x001d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x003d \l}"];
Node_37 [shape=record,label="{37\:\ 0x001f|0x001f: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.ListIterator A[D('iterator' java.util.ListIterator)]) type: INTERFACE call: java.util.ListIterator.previous():java.lang.Object A[MD:():E (c)] (LINE:734)\l0x0023: INVOKE  (r2 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0027: CHECK_CAST (r2 I:java.lang.Boolean) = (java.lang.Boolean) (r2 I:??[OBJECT, ARRAY]) \l0x0029: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x002d|LOOP_END\lLOOP:0: B:35:0x0019\-\>B:38:0x002d\l|0x002d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0019 \l}"];
Node_43 [shape=record,label="{43\:\ 0x002f|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x002f|0x002f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$dropLastWhile' java.util.List)])  (LINE:735)\l0x0030: CHECK_CAST (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:??[OBJECT, ARRAY]) \l0x0032: INVOKE  (r3 I:int) = (r1 I:java.util.ListIterator A[D('iterator' java.util.ListIterator)]) type: INTERFACE call: java.util.ListIterator.nextIndex():int A[MD:():int (c)]\l0x0036: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l0x0038: INVOKE  (r2 I:java.util.List) = (r2 I:java.lang.Iterable), (r3 I:int) type: STATIC call: kotlin.collections.CollectionsKt.take(java.lang.Iterable, int):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):java.util.List\<T\> (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x003c|RETURN\l|0x003c: RETURN  (r2 I:java.util.List\<T\>) \l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x003d|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x003d|0x003d: INVOKE  (r1 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)] (LINE:739)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0041|RETURN\l|0x0041: RETURN  (r1 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.dropLastWhile((r4 I:java.util.List\<? extends T\> A[D('$this$dropLastWhile' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x002d \-\> B:35:0x0019, CROSS_EDGE: B:42:0x0041 \-\> B:31:?, CROSS_EDGE: B:33:0x000f \-\> B:41:0x003d\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)Ljava\/util\/List\<TT;\>;\lDebug Info:\l  0x0019\-0x003d: r1 'iterator' Ljava\/util\/ListIterator;\l  0x000b\-0x0041: r0 '$i$f$dropLastWhile' I\l  \-1 \-0x0041: r4 '$this$dropLastWhile' Ljava\/util\/List;\l  \-1 \-0x0041: r5 'predicate' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_44;
Node_37 -> Node_38;
Node_38 -> Node_35;
Node_38 -> Node_43[style=dashed];
Node_43 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_31;
Node_44 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_31;
}

