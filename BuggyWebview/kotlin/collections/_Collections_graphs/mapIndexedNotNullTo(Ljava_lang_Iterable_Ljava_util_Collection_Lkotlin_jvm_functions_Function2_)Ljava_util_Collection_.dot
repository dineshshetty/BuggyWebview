digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.mapIndexedNotNullTo(Ljava\/lang\/Iterable;Ljava\/util\/Collection;Lkotlin\/jvm\/functions\/Function2;)Ljava\/util\/Collection;" {
Node_34 [shape=record,label="{34\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"destination\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"transform\")\lr3 = 0\ljava.util.Iterator r4 = r11.iterator()\l}"];
Node_37 [shape=record,label="{37\:\ 0x0017|LOOP_START\lLOOP:0: B:37:0x0017\-\>B:45:0x0039\lPHI: r3 \l  PHI: (r3v1 'index' int) = (r3v0 'index' int), (r3v2 'index' int) binds: [B:36:0x0000, B:45:0x0039] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_38 [shape=record,label="{38\:\ 0x001b|if (r4.hasNext() == false) goto L13\l}"];
Node_39 [shape=record,label="{39\:\ 0x001d|java.lang.Object r5 = (T) r4.next()\lint r6 = r3 + 1\l}"];
Node_40 [shape=record,label="{40\:\ 0x0023|if (r3 \>= 0) goto L7\l}"];
Node_41 [shape=record,label="{41\:\ 0x0025|kotlin.collections.CollectionsKt.throwIndexOverflow()\l}"];
Node_42 [shape=record,label="{42\:\ 0x0028|java.lang.Object r9 = r13.invoke(java.lang.Integer.valueOf(r3), r5)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0032|if (r9 == null) goto L12\l}"];
Node_44 [shape=record,label="{44\:\ 0x0034|r12.add(r9)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0039|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x0039|LOOP_END\lLOOP:0: B:37:0x0017\-\>B:45:0x0039\l|r3 = r6\l}"];
Node_50 [shape=record,label="{50\:\ 0x0039|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x003c|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x003c|RETURN\l|return r12\l}"];
Node_35 [shape=record,label="{35\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super R\> kotlin.collections.CollectionsKt___CollectionsKt.mapIndexedNotNullTo((r11v0 java.lang.Iterable\<? extends T\> A[D('$this$mapIndexedNotNullTo' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'destination' C extends java.util.Collection\<? super R\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'transform' kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super T, ? extends R\> A[D('transform' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:45:0x0039 \-\> B:37:0x0017, CROSS_EDGE: B:43:0x0032 \-\> B:45:0x0039, CROSS_EDGE: B:40:0x0023 \-\> B:42:0x0028\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, C extends java.util.Collection\<? super R\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TR;\>;\>(Ljava\/lang\/Iterable\<+TT;\>;TC;Lkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-TT;+TR;\>;)TC;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r5v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_34;Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_48;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_50;
Node_44 -> Node_49;
Node_49 -> Node_45;
Node_45 -> Node_37;
Node_50 -> Node_45;
Node_48 -> Node_47;
Node_47 -> Node_35;
}

