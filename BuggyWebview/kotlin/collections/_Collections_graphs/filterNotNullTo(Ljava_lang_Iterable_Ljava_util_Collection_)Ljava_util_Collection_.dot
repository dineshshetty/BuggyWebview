digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.filterNotNullTo(Ljava\/lang\/Iterable;Ljava\/util\/Collection;)Ljava\/util\/Collection;" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"destination\")\ljava.util.Iterator r0 = r2.iterator()\l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|LOOP_START\lLOOP:0: B:31:0x000e\-\>B:39:0x000e\l}"];
Node_32 [shape=record,label="{32\:\ 0x0012|if (r0.hasNext() == false) goto L11\l}"];
Node_33 [shape=record,label="{33\:\ 0x0014|java.lang.Object r1 = r0.next()\l}"];
Node_34 [shape=record,label="{34\:\ 0x0018|if (r1 == null) goto L10\l}"];
Node_38 [shape=record,label="{38\:\ 0x001a|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x001a|r3.add(r1)\l}"];
Node_41 [shape=record,label="{41\:\ 0x000e|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x000e|LOOP_END\lSYNTHETIC\lLOOP:0: B:31:0x000e\-\>B:39:0x000e\l}"];
Node_40 [shape=record,label="{40\:\ 0x000e|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x001e|RETURN\l|return r3\l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super T\> kotlin.collections.CollectionsKt___CollectionsKt.filterNotNullTo((r2v0 java.lang.Iterable\<? extends T\> A[D('$this$filterNotNullTo' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'destination' C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x0018 \-\> B:31:0x000e, BACK_EDGE: B:35:0x001a \-\> B:31:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [C extends java.util.Collection\<? super T\>, T]\lSIGNATURE: \<C::Ljava\/util\/Collection\<\-TT;\>;T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;TC;)TC;\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_38[style=dashed];
Node_34 -> Node_40;
Node_38 -> Node_35;
Node_35 -> Node_41;
Node_41 -> Node_39;
Node_39 -> Node_31;
Node_40 -> Node_39;
Node_37 -> Node_36;
Node_36 -> Node_29;
}

