digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.minOfOrNull(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Comparable;" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$minOfOrNull' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$minOfOrNull' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:2465)\l0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2466)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0016 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0014|RETURN\l|0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: RETURN  (r1 I:R extends java.lang.Comparable\<? super R\>) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0016|0x0016: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2467)\l0x001a: INVOKE  (r1 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r1 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x001e: CHECK_CAST (r1 I:java.lang.Comparable) = (java.lang.Comparable) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0020|LOOP_START\lLOOP:0: B:43:0x0020\-\>B:51:0x0020\l|0x0020: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2468)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0038 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0026|0x0026: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2469)\l0x002a: INVOKE  (r2 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x002e: CHECK_CAST (r2 I:java.lang.Comparable) = (java.lang.Comparable) (r2 I:??[OBJECT, ARRAY]) \l0x0030: INVOKE  (r3 I:int) = \l  (r1 I:java.lang.Comparable A[D('minValue' java.lang.Comparable)])\l  (r2 I:java.lang.Object A[D('v' java.lang.Comparable)])\l type: INTERFACE call: java.lang.Comparable.compareTo(java.lang.Object):int A[MD:(T):int (c)] (LINE:2470)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0034|0x0034: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:52:0x0020 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0036|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0036|0x0036: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('minValue' java.lang.Comparable)]) = (r2 I:??[OBJECT, ARRAY] A[D('v' java.lang.Comparable)])  (LINE:2471)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0020|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0020|LOOP_END\lSYNTHETIC\lLOOP:0: B:43:0x0020\-\>B:51:0x0020\l}"];
Node_52 [shape=record,label="{52\:\ 0x0020|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0038|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:R extends java.lang.Comparable\<? super R\> A[D('minValue' java.lang.Comparable)])  (LINE:2474)\l}"];
MethodNode[shape=record,label="{private static final R extends java.lang.Comparable\<? super R\> kotlin.collections.CollectionsKt___CollectionsKt.minOfOrNull((r4 I:java.lang.Iterable\<? extends T\> A[D('$this$minOfOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super T, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0034 \-\> B:43:0x0020, BACK_EDGE: B:47:0x0036 \-\> B:43:0x0020, CROSS_EDGE: B:48:0x0038 \-\> B:37:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R::Ljava\/lang\/Comparable\<\-TR;\>;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TR;\lDebug Info:\l  0x0030\-0x0037: r2 'v' Ljava\/lang\/Comparable;\l  0x000e\-0x0038: r0 'iterator' Ljava\/util\/Iterator;\l  0x0020\-0x0038: r1 'minValue' Ljava\/lang\/Comparable;\l  \-1 \-0x0038: r4 '$this$minOfOrNull' Ljava\/lang\/Iterable;\l  \-1 \-0x0038: r5 'selector' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_37;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_46;
Node_46 -> Node_49[style=dashed];
Node_46 -> Node_52;
Node_49 -> Node_47;
Node_47 -> Node_53;
Node_53 -> Node_51;
Node_51 -> Node_43;
Node_52 -> Node_51;
Node_50 -> Node_48;
Node_48 -> Node_37;
}

