digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.sortedDescending(Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$sortedDescending' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Comparator) =  type: STATIC call: kotlin.comparisons.ComparisonsKt.reverseOrder():java.util.Comparator A[MD:\<T extends java.lang.Comparable\<? super T\>\>:():java.util.Comparator\<T extends java.lang.Comparable\<? super T\>\> (m)] (LINE:1063)\l0x0009: INVOKE  (r0 I:java.util.List) = (r1 I:java.lang.Iterable A[D('$this$sortedDescending' java.lang.Iterable)]), (r0 I:java.util.Comparator) type: STATIC call: kotlin.collections.CollectionsKt.sortedWith(java.lang.Iterable, java.util.Comparator):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, java.util.Comparator\<? super T\>):java.util.List\<T\> (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:java.util.List\<T extends java.lang.Comparable\<? super T\>\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T extends java.lang.Comparable\<? super T\>\> kotlin.collections.CollectionsKt___CollectionsKt.sortedDescending((r1 I:java.lang.Iterable\<? extends T extends java.lang.Comparable\<? super T\>\> A[D('$this$sortedDescending' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r1 '$this$sortedDescending' Ljava\/lang\/Iterable;\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\lSIGNATURE: \<T::Ljava\/lang\/Comparable\<\-TT;\>;\>(Ljava\/lang\/Iterable\<+TT;\>;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

