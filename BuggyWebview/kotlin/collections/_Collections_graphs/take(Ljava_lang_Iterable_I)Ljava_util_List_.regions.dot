digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.take(Ljava\/lang\/Iterable;I)Ljava\/util\/List;" {
subgraph cluster_Region_211293632 {
label = "R(2:1|(2:27|28)(1:(1:7)(4:(1:(2:(1:14)|(1:(1:17))))|18|(2:21|(1:23))|25)))";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\l}"];
subgraph cluster_IfRegion_690943040 {
label = "IF [B:66:0x000b] THEN: R(2:27|28) ELSE: R(1:(1:7)(4:(1:(2:(1:14)|(1:(1:17))))|18|(2:21|(1:23))|25))";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x000b|PHI: r1 \l  PHI: (r1v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r5 \>= 0) != true) goto L27\l}"];
subgraph cluster_Region_1989053761 {
label = "R(2:27|28)";
node [shape=record,color=blue];
Node_86 [shape=record,label="{86\:\ 0x0054}"];
Node_87 [shape=record,label="{87\:\ 0x0074|throw new java.lang.IllegalArgumentException((\"Requested element count \" + r5 + \" is less than zero.\").toString())\l}"];
}
subgraph cluster_Region_1907330577 {
label = "R(1:(1:7)(4:(1:(2:(1:14)|(1:(1:17))))|18|(2:21|(1:23))|25)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1037415409 {
label = "IF [B:67:0x000d] THEN: R(1:7) ELSE: R(4:(1:(2:(1:14)|(1:(1:17))))|18|(2:21|(1:23))|25) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_67 [shape=record,label="{67\:\ 0x000d|if (r5 == 0) goto L6\l}"];
subgraph cluster_Region_1661459711 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_69 [shape=record,label="{69\:\ 0x0013|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
}
subgraph cluster_Region_1771687783 {
label = "R(4:(1:(2:(1:14)|(1:(1:17))))|18|(2:21|(1:23))|25)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1633788251 {
label = "IF [B:71:0x0016] THEN: R(1:(2:(1:14)|(1:(1:17)))) ELSE: null";
node [shape=record,color=blue];
Node_71 [shape=record,label="{71\:\ 0x0016|if ((r4 instanceof java.util.Collection) != false) goto L11\l}"];
subgraph cluster_Region_1815311456 {
label = "R(1:(2:(1:14)|(1:(1:17))))";
node [shape=record,color=blue];
subgraph cluster_Region_2087262252 {
label = "R(2:(1:14)|(1:(1:17)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_559203194 {
label = "IF [B:73:0x001f] THEN: R(1:14) ELSE: null";
node [shape=record,color=blue];
Node_73 [shape=record,label="{73\:\ 0x001f|if (r5 \>= ((java.util.Collection) r4).size()) goto L13\l}"];
subgraph cluster_Region_1297339762 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x0025|RETURN\l|return kotlin.collections.CollectionsKt.toList(r4)\l}"];
}
}
subgraph cluster_Region_984889548 {
label = "R(1:(1:17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_245952462 {
label = "IF [B:76:0x0026] THEN: R(1:17) ELSE: null";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x0026|if (r5 == 1) goto L16\l}"];
subgraph cluster_Region_157327986 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_78 [shape=record,label="{78\:\ 0x0030|RETURN\l|return kotlin.collections.CollectionsKt.listOf(kotlin.collections.CollectionsKt.first(r4))\l}"];
}
}
}
}
}
}
Node_79 [shape=record,label="{79\:\ 0x0031|int r0 = 0\ljava.util.ArrayList java.util.ArrayList r1 = new java.util.ArrayList(r5)\ljava.util.Iterator r2 = r4.iterator()\l\l}"];
subgraph cluster_LoopRegion_1514872425 {
label = "LOOP:0: (2:21|(1:23))";
node [shape=record,color=blue];
Node_81 [shape=record,label="{81\:\ 0x003f|java.lang.Object \lif (r2.hasNext() != false) goto L21\l}"];
subgraph cluster_Region_63199792 {
label = "R(2:21|(1:23))";
node [shape=record,color=blue];
Node_82 [shape=record,label="{82\:\ 0x0041|r1.add(r3)\lr0++\l}"];
subgraph cluster_IfRegion_1570266960 {
label = "IF [B:83:0x004a] THEN: R(1:23) ELSE: null";
node [shape=record,color=blue];
Node_83 [shape=record,label="{83\:\ 0x004a|LOOP_END\lLOOP:0: B:80:0x003b\-\>B:83:0x004a\l|if (r0 == r5) goto L23\l}"];
subgraph cluster_Region_1101148084 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_88 [shape=record,label="{88\:\ 0x004c|SYNTHETIC\lEDGE_INSN: B:88:0x004c\-\>B:84:0x004c ?: BREAK  \l|break\l}"];
}
}
}
}
Node_85 [shape=record,label="{85\:\ 0x0053|RETURN\l|return kotlin.collections.CollectionsKt.optimizeReadOnlyList(r1)\l}"];
}
}
}
}
}
Node_60 [shape=record,color=red,label="{60\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_63 [shape=record,color=red,label="{63\:\ 0x0006}"];
Node_64 [shape=record,color=red,label="{64\:\ 0x0008}"];
Node_68 [shape=record,color=red,label="{68\:\ 0x000f}"];
Node_61 [shape=record,color=red,label="{61\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_70 [shape=record,color=red,label="{70\:\ 0x0014}"];
Node_72 [shape=record,color=red,label="{72\:\ 0x0018}"];
Node_74 [shape=record,color=red,label="{74\:\ 0x0021}"];
Node_77 [shape=record,color=red,label="{77\:\ 0x0028}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x003b|LOOP_START\lLOOP:0: B:80:0x003b\-\>B:83:0x004a\lPHI: r0 \l  PHI: (r0v6 'count' int) = (r0v5 'count' int), (r0v7 'count' int) binds: [B:79:0x0031, B:83:0x004a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_84 [shape=record,color=red,label="{84\:\ 0x004c|EDGE_INSN: B:88:0x004c\-\>B:84:0x004c ?: BREAK  \l}"];
Node_89 [shape=record,color=red,label="{89\:\ 0x004c|SYNTHETIC\l}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x000a}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.take((r4v0 java.lang.Iterable\<? extends T\> A[D('$this$take' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:75:0x0025 \-\> B:61:?, CROSS_EDGE: B:78:0x0030 \-\> B:61:?, BACK_EDGE: B:83:0x004a \-\> B:80:0x003b, CROSS_EDGE: B:85:0x0053 \-\> B:61:?, CROSS_EDGE: B:81:0x003f \-\> B:84:0x004c, CROSS_EDGE: B:71:0x0016 \-\> B:79:0x0031, CROSS_EDGE: B:87:0x0074 \-\> B:61:?, CROSS_EDGE: B:65:0x000a \-\> B:66:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;I)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_60;Node_62 -> Node_63;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_61;
Node_67 -> Node_68;
Node_67 -> Node_70[style=dashed];
Node_69 -> Node_61;
Node_71 -> Node_72;
Node_71 -> Node_79[style=dashed];
Node_73 -> Node_74;
Node_73 -> Node_76[style=dashed];
Node_75 -> Node_61;
Node_76 -> Node_77;
Node_76 -> Node_79[style=dashed];
Node_78 -> Node_61;
Node_79 -> Node_80;
Node_81 -> Node_82;
Node_81 -> Node_89[style=dashed];
Node_82 -> Node_83;
Node_83 -> Node_80[style=dashed];
Node_83 -> Node_88;
Node_88 -> Node_84;
Node_85 -> Node_61;
Node_60 -> Node_62;
Node_63 -> Node_64;
Node_63 -> Node_65;
Node_64 -> Node_66;
Node_68 -> Node_69;
Node_70 -> Node_71;
Node_72 -> Node_73;
Node_74 -> Node_75;
Node_77 -> Node_78;
Node_80 -> Node_81;
Node_84 -> Node_85;
Node_89 -> Node_84;
Node_65 -> Node_66;
}

