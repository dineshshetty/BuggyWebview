digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.windowed(Ljava\/lang\/Iterable;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
subgraph cluster_Region_489485985 {
label = "R(2:1|(2:(4:5|8|(1:(2:(1:23)|(2:13|(2:(1:16)|(1:21)))))|18)|(3:26|(1:29)|32)))";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"transform\")\lkotlin.collections.SlidingWindowKt.checkWindowSizeStep(r10, r11)\l}"];
subgraph cluster_Region_1210356377 {
label = "R(2:(4:5|8|(1:(2:(1:23)|(2:13|(2:(1:16)|(1:21)))))|18)|(3:26|(1:29)|32))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1794938724 {
label = "IF [B:69:0x0010, B:71:0x0014] THEN: R(4:5|8|(1:(2:(1:23)|(2:13|(2:(1:16)|(1:21)))))|18) ELSE: null";
node [shape=record,color=blue];
Node_69 [shape=record,label="{69\:\ 0x0010|if ((r9 instanceof java.util.RandomAccess) != false) goto L3\l}"];
Node_71 [shape=record,label="{71\:\ 0x0014|ADDED_TO_REGION\l|if ((r9 instanceof java.util.List) != false) goto L5\l}"];
subgraph cluster_Region_444783765 {
label = "R(4:5|8|(1:(2:(1:23)|(2:13|(2:(1:16)|(1:21)))))|18)";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x0016|int int r0 = ((java.util.List) r9).size()\l}"];
Node_76 [shape=record,label="{76\:\ 0x0027|PHI: r3 \l  PHI: (r3v4 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|int int r2 = (r0 \/ r11) + (r0 % r11 == 0 ? 0 : 1)\ljava.util.ArrayList java.util.ArrayList r3 = new java.util.ArrayList(r2)\lkotlin.collections.MovingSubList kotlin.collections.SlidingWindow r5 = new kotlin.collections.SlidingWindow((java.util.List) r9)\lint r6 = 0\l}"];
subgraph cluster_LoopRegion_1599181055 {
label = "LOOP:0: (1:(2:(1:23)|(2:13|(2:(1:16)|(1:21)))))";
node [shape=record,color=blue];
subgraph cluster_Region_624094282 {
label = "R(1:(2:(1:23)|(2:13|(2:(1:16)|(1:21)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1240334895 {
label = "R(2:(1:23)|(2:13|(2:(1:16)|(1:21))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1085324563 {
label = "IF [B:81:0x003d] THEN: R(1:23) ELSE: null";
node [shape=record,color=blue];
Node_81 [shape=record,label="{81\:\ 0x003d|PHI: r7 \l  PHI: (r7v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r6 \>= 0 && r6 \< r0) != true) goto L23\l}"];
subgraph cluster_Region_1202191297 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_95 [shape=record,label="{95\:\ 0x0057|SYNTHETIC\lEDGE_INSN: B:95:0x0057\-\>B:86:0x0057 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_844613103 {
label = "R(2:13|(2:(1:16)|(1:21)))";
node [shape=record,color=blue];
Node_82 [shape=record,label="{82\:\ 0x003f|int int r7 = kotlin.ranges.RangesKt.coerceAtMost(r10, r0 \- r6)\l}"];
subgraph cluster_Region_337792418 {
label = "R(2:(1:16)|(1:21))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2077466699 {
label = "IF [B:83:0x0045, B:84:0x0047] THEN: R(1:16) ELSE: null";
node [shape=record,color=blue];
Node_83 [shape=record,label="{83\:\ 0x0045|if (r12 != true) goto L15\l}"];
Node_84 [shape=record,label="{84\:\ 0x0047|ADDED_TO_REGION\l|if (r7 \< r10) goto L16\l}"];
subgraph cluster_Region_650159056 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_94 [shape=record,label="{94\:\ 0x0057|SYNTHETIC\lEDGE_INSN: B:94:0x0057\-\>B:86:0x0057 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_2008656989 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_85 [shape=record,label="{85\:\ 0x0049|LOOP_END\lLOOP:0: B:77:0x0036\-\>B:85:0x0049\l|r5.move(r6, r6 + r7)\lr3.add(r13.invoke(r5))\lr6 += r11\l}"];
}
}
}
}
}
}
Node_87 [shape=record,label="{87\:\ 0x005a|RETURN\l|return r3\l}"];
}
}
subgraph cluster_Region_759098076 {
label = "R(3:26|(1:29)|32)";
node [shape=record,color=blue];
Node_88 [shape=record,label="{88\:\ 0x005b|java.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList()\ljava.util.Iterator java.util.Iterator r1 = kotlin.collections.SlidingWindowKt.windowedIterator(r9.iterator(), r10, r11, r12, true)\l}"];
subgraph cluster_LoopRegion_269136940 {
label = "LOOP:1: (1:29)";
node [shape=record,color=blue];
Node_90 [shape=record,label="{90\:\ 0x006e|if (r1.hasNext() != false) goto L29\l}"];
subgraph cluster_Region_989404559 {
label = "R(1:29)";
node [shape=record,color=blue];
Node_91 [shape=record,label="{91\:\ 0x0070|LOOP_END\lLOOP:1: B:89:0x006a\-\>B:91:0x0070\l|java.lang.Object java.lang.Object r3 = r1.next()\ljava.util.List java.util.List r4 = (java.util.List) r3\lr0.add(r13.invoke(r4))\l}"];
}
}
Node_93 [shape=record,label="{93\:\ 0x0085|RETURN\l|return r0\l}"];
}
}
}
Node_66 [shape=record,color=red,label="{66\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_70 [shape=record,color=red,label="{70\:\ 0x0012}"];
Node_73 [shape=record,color=red,label="{73\:\ 0x0022}"];
Node_74 [shape=record,color=red,label="{74\:\ 0x0024}"];
Node_77 [shape=record,color=red,label="{77\:\ 0x0036|LOOP_START\lLOOP:0: B:77:0x0036\-\>B:85:0x0049\lPHI: r6 \l  PHI: (r6v4 'index' int) = (r6v3 'index' int), (r6v5 'index' int) binds: [B:76:0x0027, B:85:0x0049] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_78 [shape=record,color=red,label="{78\:\ 0x0038|REMOVE\lADDED_TO_REGION\l}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x003a}"];
Node_86 [shape=record,color=red,label="{86\:\ 0x0057|EDGE_INSN: B:94:0x0057\-\>B:86:0x0057 ?: BREAK  , EDGE_INSN: B:95:0x0057\-\>B:86:0x0057 ?: BREAK  \l}"];
Node_67 [shape=record,color=red,label="{67\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_97 [shape=record,color=red,label="{97\:\ 0x0049|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_96 [shape=record,color=red,label="{96\:\ 0x0049|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x003c}"];
Node_75 [shape=record,color=red,label="{75\:\ 0x0026}"];
Node_89 [shape=record,color=red,label="{89\:\ 0x006a|LOOP_START\lLOOP:1: B:89:0x006a\-\>B:91:0x0070\l}"];
Node_98 [shape=record,color=red,label="{98\:\ 0x0081|SYNTHETIC\l}"];
Node_92 [shape=record,color=red,label="{92\:\ 0x0081}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.CollectionsKt___CollectionsKt.windowed((r9v0 java.lang.Iterable\<? extends T\> A[D('$this$windowed' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'size' int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'step' int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'partialWindows' boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'transform' kotlin.jvm.functions.Function1\<? super java.util.List\<? extends T\>, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:85:0x0049 \-\> B:77:0x0036, CROSS_EDGE: B:83:0x0045 \-\> B:85:0x0049, CROSS_EDGE: B:81:0x003d \-\> B:86:0x0057, CROSS_EDGE: B:80:0x003c \-\> B:81:0x003d, CROSS_EDGE: B:77:0x0036 \-\> B:80:0x003c, CROSS_EDGE: B:75:0x0026 \-\> B:76:0x0027, BACK_EDGE: B:91:0x0070 \-\> B:89:0x006a, CROSS_EDGE: B:93:0x0085 \-\> B:67:?, CROSS_EDGE: B:69:0x0010 \-\> B:88:0x005b\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;IIZLkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/List\<+TT;\>;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_66;Node_68 -> Node_69;
Node_69 -> Node_70;
Node_69 -> Node_88[style=dashed];
Node_71 -> Node_72;
Node_71 -> Node_88[style=dashed];
Node_72 -> Node_73;
Node_76 -> Node_77;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_95;
Node_95 -> Node_86;
Node_82 -> Node_83;
Node_83 -> Node_84;
Node_83 -> Node_96[style=dashed];
Node_84 -> Node_94;
Node_84 -> Node_97[style=dashed];
Node_94 -> Node_86;
Node_85 -> Node_77;
Node_87 -> Node_67;
Node_88 -> Node_89;
Node_90 -> Node_91;
Node_90 -> Node_98[style=dashed];
Node_91 -> Node_89;
Node_93 -> Node_67;
Node_66 -> Node_68;
Node_70 -> Node_71;
Node_73 -> Node_74;
Node_73 -> Node_75;
Node_74 -> Node_76;
Node_77 -> Node_78;
Node_77 -> Node_80;
Node_78 -> Node_79;
Node_78 -> Node_80;
Node_79 -> Node_81;
Node_86 -> Node_87;
Node_97 -> Node_85;
Node_96 -> Node_85;
Node_80 -> Node_81;
Node_75 -> Node_76;
Node_89 -> Node_90;
Node_98 -> Node_92;
Node_92 -> Node_93;
}

