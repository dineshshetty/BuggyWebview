digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.slice(Ljava\/util\/List;Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$slice' java.util.List)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"indices\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('indices' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:873)\l0x000c: INVOKE  (r0 I:int) = (r6 I:java.lang.Iterable A[D('indices' java.lang.Iterable)]), (r0 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0017  (LINE:874)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0012|0x0012: INVOKE  (r1 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0016|RETURN\l|0x0016: RETURN  (r1 I:java.util.List\<T\>) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0017|0x0017: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:875)\l0x0019: INVOKE  (r1 I:java.util.ArrayList), (r0 I:int A[D('size' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x001c: INVOKE  (r2 I:java.util.Iterator) = (r6 I:java.lang.Iterable A[D('indices' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:876)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0020|LOOP_START\lLOOP:0: B:33:0x0020\-\>B:35:0x0026\l|0x0020: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|0x0024: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0038 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0026|LOOP_END\lLOOP:0: B:33:0x0020\-\>B:35:0x0026\l|0x0026: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002a: CHECK_CAST (r3 I:java.lang.Number) = (java.lang.Number) (r3 I:??[OBJECT, ARRAY]) \l0x002c: INVOKE  (r3 I:int) = (r3 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x0030: INVOKE  (r4 I:java.lang.Object) = (r5 I:java.util.List A[D('$this$slice' java.util.List)]), (r3 I:int A[D('index' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:877)\l0x0034: INVOKE  (r1 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0038|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0038|0x0038: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('list' java.util.ArrayList)])  (LINE:879)\l0x0039: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x003b|RETURN\l|0x003b: RETURN  (r2 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.slice((r5 I:java.util.List\<? extends T\> A[D('$this$slice' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.Iterable\<java.lang.Integer\> A[D('indices' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0026 \-\> B:33:0x0020, CROSS_EDGE: B:37:0x003b \-\> B:27:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0030\-0x0038: r3 'index' I\l  0x0010\-0x003b: r0 'size' I\l  0x001c\-0x003b: r1 'list' Ljava\/util\/ArrayList;\l  \-1 \-0x003b: r5 '$this$slice' Ljava\/util\/List;\l  \-1 \-0x003b: r6 'indices' Ljava\/lang\/Iterable;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<+TT;\>;Ljava\/lang\/Iterable\<Ljava\/lang\/Integer;\>;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_27;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_33;
Node_38 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_27;
}

