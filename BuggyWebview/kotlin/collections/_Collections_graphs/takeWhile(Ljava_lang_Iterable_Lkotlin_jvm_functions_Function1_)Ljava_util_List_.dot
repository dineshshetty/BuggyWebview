digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.takeWhile(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"predicate\")\ljava.util.ArrayList r1 = new java.util.ArrayList()\ljava.util.Iterator r2 = r5.iterator()\l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|LOOP_START\lLOOP:0: B:29:0x0014\-\>B:34:0x002b\l}"];
Node_30 [shape=record,label="{30\:\ 0x0018|if (r2.hasNext() == false) goto L11\l}"];
Node_31 [shape=record,label="{31\:\ 0x001a|java.lang.Object r3 = (T) r2.next()\l}"];
Node_32 [shape=record,label="{32\:\ 0x0028|if (r6.invoke(r3).booleanValue() != false) goto L6\l}"];
Node_34 [shape=record,label="{34\:\ 0x002b|LOOP_END\lLOOP:0: B:29:0x0014\-\>B:34:0x002b\l|r1.add(r3)\l}"];
Node_37 [shape=record,label="{37\:\ 0x002f|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x002f}"];
Node_36 [shape=record,label="{36\:\ 0x0032|RETURN\l|return r1\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x002f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.takeWhile((r5v0 java.lang.Iterable\<? extends T\> A[D('$this$takeWhile' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x002b \-\> B:29:0x0014, CROSS_EDGE: B:30:0x0018 \-\> B:35:0x002f\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_38;
Node_31 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_37[style=dashed];
Node_34 -> Node_29;
Node_37 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_27;
Node_38 -> Node_35;
}

