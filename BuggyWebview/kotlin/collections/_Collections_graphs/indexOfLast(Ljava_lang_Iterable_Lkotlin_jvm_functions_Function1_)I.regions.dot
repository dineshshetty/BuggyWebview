digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.indexOfLast(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function1;)I" {
subgraph cluster_Region_415792554 {
label = "R(3:1|(4:4|(1:6)|(1:9)(0)|11)|14)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"predicate\")\lint r1 = \-1\lint r2 = 0\ljava.util.Iterator java.util.Iterator\<? extends T\> r3 = r6.iterator()\l}"];
subgraph cluster_LoopRegion_1085309594 {
label = "LOOP:0: (4:4|(1:6)|(1:9)(0)|11)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0015|if (r3.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_193757006 {
label = "R(4:4|(1:6)|(1:9)(0)|11)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0017|java.lang.Object java.lang.Object r4 = (T) r3.next()\l}"];
subgraph cluster_IfRegion_458135924 {
label = "IF [B:38:0x001b] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x001b|if (r2 \< 0) goto L6\l}"];
subgraph cluster_Region_1276309460 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x001d|kotlin.collections.CollectionsKt.throwIndexOverflow()\l}"];
}
}
subgraph cluster_IfRegion_1108622359 {
label = "IF [B:41:0x002a] THEN: R(1:9) ELSE: R(0)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x002a|if (r7.invoke(r4).booleanValue() != false) goto L9\l}"];
subgraph cluster_Region_283265163 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x002c|r1 = r2\l}"];
}
subgraph cluster_Region_289122253 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_43 [shape=record,label="{43\:\ 0x002d|LOOP_END\lLOOP:0: B:35:0x0011\-\>B:43:0x002d\lPHI: r1 \l  PHI: (r1v2 'lastIndex' int) = (r1v1 'lastIndex' int), (r1v3 'lastIndex' int) binds: [B:47:0x002d, B:46:0x002d] A[DONT_GENERATE, DONT_INLINE]\l|r2++\l}"];
}
}
Node_44 [shape=record,label="{44\:\ 0x0031|RETURN\l|return r1\l}"];
}
Node_32 [shape=record,color=red,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0011|LOOP_START\lLOOP:0: B:35:0x0011\-\>B:43:0x002d\lPHI: r1 r2 \l  PHI: (r1v1 'lastIndex' int) = (r1v0 'lastIndex' int), (r1v2 'lastIndex' int) binds: [B:34:0x0000, B:43:0x002d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'index' int) = (r2v0 'index' int), (r2v2 'index' int) binds: [B:34:0x0000, B:43:0x002d] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0020}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x002d|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x002d|SYNTHETIC\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0031|SYNTHETIC\l}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt___CollectionsKt.indexOfLast((r6v0 java.lang.Iterable\<? extends T\> A[D('$this$indexOfLast' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:43:0x002d \-\> B:35:0x0011, CROSS_EDGE: B:41:0x002a \-\> B:43:0x002d, CROSS_EDGE: B:38:0x001b \-\> B:40:0x0020\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)I\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r4v1. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_32;Node_34 -> Node_35;
Node_36 -> Node_37;
Node_36 -> Node_45[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39;
Node_38 -> Node_40[style=dashed];
Node_39 -> Node_40;
Node_41 -> Node_42;
Node_41 -> Node_47[style=dashed];
Node_42 -> Node_46;
Node_43 -> Node_35;
Node_44 -> Node_33;
Node_32 -> Node_34;
Node_35 -> Node_36;
Node_40 -> Node_41;
Node_46 -> Node_43;
Node_47 -> Node_43;
Node_45 -> Node_44;
}

