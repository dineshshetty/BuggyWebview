digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.associateByTo(Ljava\/lang\/Iterable;Ljava\/util\/Map;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"destination\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"keySelector\")\ljava.util.Iterator r1 = r4.iterator()\l}"];
Node_19 [shape=record,label="{19\:\ 0x0014|LOOP_START\lLOOP:0: B:19:0x0014\-\>B:21:0x001a\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|if (r1.hasNext() == false) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x001a|LOOP_END\lLOOP:0: B:19:0x0014\-\>B:21:0x001a\l|java.lang.Object r2 = (T) r1.next()\lr5.put(r6.invoke(r2), r2)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|RETURN\l|return r5\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final M extends java.util.Map\<? super K, ? super T\> kotlin.collections.CollectionsKt___CollectionsKt.associateByTo((r4v0 java.lang.Iterable\<? extends T\> A[D('$this$associateByTo' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'destination' M extends java.util.Map\<? super K, ? super T\> A[D('destination' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'keySelector' kotlin.jvm.functions.Function1\<? super T, ? extends K\> A[D('keySelector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x001a \-\> B:19:0x0014\lINLINE_NOT_NEEDED\lTYPE_VARS: [T, K, M extends java.util.Map\<? super K, ? super T\>]\lSIGNATURE: \<T:Ljava\/lang\/Object;K:Ljava\/lang\/Object;M::Ljava\/util\/Map\<\-TK;\-TT;\>;\>(Ljava\/lang\/Iterable\<+TT;\>;TM;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TK;\>;)TM;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_23;
Node_21 -> Node_19;
Node_23 -> Node_22;
Node_22 -> Node_17;
}

