digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.singleOrNull(Ljava\/lang\/Iterable;)Ljava\/lang\/Object;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\l}"];
Node_35 [shape=record,label="{35\:\ 0x0009|if ((r4 instanceof java.util.List) == false) goto L9\l}"];
Node_36 [shape=record,label="{36\:\ 0x000b}"];
Node_37 [shape=record,label="{37\:\ 0x0013|if (((java.util.List) r4).size() != 1) goto L8\l}"];
Node_38 [shape=record,label="{38\:\ 0x0015}"];
Node_39 [shape=record,label="{39\:\ 0x001d|RETURN\lORIG_RETURN\l|return (T) ((java.util.List) r4).get(0)\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_40 [shape=record,label="{40\:\ 0x001e|java.util.Iterator r0 = r4.iterator()\l}"];
Node_41 [shape=record,label="{41\:\ 0x0026|if (r0.hasNext() != false) goto L12\l}"];
Node_42 [shape=record,label="{42\:\ 0x0028|RETURN\l|return null\l}"];
Node_43 [shape=record,label="{43\:\ 0x0029|java.lang.Object r2 = r0.next()\l}"];
Node_44 [shape=record,label="{44\:\ 0x0031|if (r0.hasNext() == false) goto L15\l}"];
Node_45 [shape=record,label="{45\:\ 0x0033|RETURN\l|return null\l}"];
Node_46 [shape=record,label="{46\:\ 0x0034|RETURN\l|return r2\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.singleOrNull((r4v0 java.lang.Iterable\<? extends T\> A[D('$this$singleOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x0013 \-\> B:39:0x001d, CROSS_EDGE: B:42:0x0028 \-\> B:33:?, CROSS_EDGE: B:45:0x0033 \-\> B:33:?, CROSS_EDGE: B:46:0x0034 \-\> B:33:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;)TT;\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_40;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_47;
Node_38 -> Node_39;
Node_39 -> Node_33;
Node_47 -> Node_33;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_43;
Node_42 -> Node_33;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_33;
Node_46 -> Node_33;
}

