digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.filterIsInstance(Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_30 [shape=record,label="{30\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"\<this\>\")\ljava.util.Collection r1 = new java.util.ArrayList()\ljava.util.Iterator r4 = r8.iterator()\l}"];
Node_33 [shape=record,label="{33\:\ 0x0013|LOOP_START\lLOOP:0: B:33:0x0013\-\>B:42:0x0013\l}"];
Node_34 [shape=record,label="{34\:\ 0x0017|if (r4.hasNext() == false) goto L11\l}"];
Node_35 [shape=record,label="{35\:\ 0x0019|java.lang.Object r5 = r4.next()\lkotlin.jvm.internal.Intrinsics.reifiedOperationMarker(3, \"R\")\l}"];
Node_36 [shape=record,label="{36\:\ 0x0025|if ((r5 instanceof java.lang.Object) == false) goto L10\l}"];
Node_40 [shape=record,label="{40\:\ 0x0027|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0027|r1.add(r5)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0013|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0013|LOOP_END\lSYNTHETIC\lLOOP:0: B:33:0x0013\-\>B:42:0x0013\l}"];
Node_43 [shape=record,label="{43\:\ 0x0013|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x002b|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x002b}"];
Node_39 [shape=record,label="{39\:\ 0x002e|RETURN\l|return (java.util.List) r1\l}"];
Node_31 [shape=record,label="{31\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ java.util.List\<R\> kotlin.collections.CollectionsKt___CollectionsKt.filterIsInstance((r8v0 java.lang.Iterable\<?\> A[D('$this$filterIsInstance' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:36:0x0025 \-\> B:33:0x0013, BACK_EDGE: B:37:0x0027 \-\> B:33:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<*\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_30;Node_30 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_41;
Node_35 -> Node_36;
Node_36 -> Node_40[style=dashed];
Node_36 -> Node_43;
Node_40 -> Node_37;
Node_37 -> Node_44;
Node_44 -> Node_42;
Node_42 -> Node_33;
Node_43 -> Node_42;
Node_41 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_31;
}

