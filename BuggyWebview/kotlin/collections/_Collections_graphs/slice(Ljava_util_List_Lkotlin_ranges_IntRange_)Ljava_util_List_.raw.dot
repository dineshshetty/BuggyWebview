digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.slice(Ljava\/util\/List;Lkotlin\/ranges\/IntRange;)Ljava\/util\/List;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$slice' java.util.List)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"indices\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('indices' kotlin.ranges.IntRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:865)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0015 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0010|0x0010: INVOKE  (r0 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.Integer) = (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getStart():java.lang.Integer A[MD:():java.lang.Integer (m)] (LINE:866)\l0x0019: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x001d: INVOKE  (r1 I:java.lang.Integer) = (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getEndInclusive():java.lang.Integer A[MD:():java.lang.Integer (m)]\l0x0021: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x0025: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0027: INVOKE  (r0 I:java.util.List) = (r2 I:java.util.List A[D('$this$slice' java.util.List)]), (r0 I:int), (r1 I:int) type: INTERFACE call: java.util.List.subList(int, int):java.util.List A[MD:(int, int):java.util.List\<E\> (c)]\l0x002b: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x002d: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Iterable) type: STATIC call: kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.List\<T\> (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|RETURN\l|0x0031: RETURN  (r0 I:java.util.List\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.slice((r2 I:java.util.List\<? extends T\> A[D('$this$slice' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0031 \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0031: r2 '$this$slice' Ljava\/util\/List;\l  \-1 \-0x0031: r3 'indices' Lkotlin\/ranges\/IntRange;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<+TT;\>;Lkotlin\/ranges\/IntRange;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

