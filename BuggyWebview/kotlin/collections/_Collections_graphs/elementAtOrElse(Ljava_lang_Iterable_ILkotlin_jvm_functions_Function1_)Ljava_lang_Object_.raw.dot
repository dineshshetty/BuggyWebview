digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.elementAtOrElse(Ljava\/lang\/Iterable;ILkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_52 [shape=record,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$elementAtOrElse' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"defaultValue\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('defaultValue' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INSTANCE_OF  (r0 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('$this$elementAtOrElse' java.lang.Iterable)]) java.util.List  (LINE:106)\l}"];
Node_55 [shape=record,label="{55\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0027 \l}"];
Node_56 [shape=record,label="{56\:\ 0x000e|0x000e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$elementAtOrElse' java.lang.Iterable)])  (LINE:107)\l0x000f: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x0011|0x0011: IF  (r5 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:61:0x001e \l}"];
Node_58 [shape=record,label="{58\:\ 0x0013|0x0013: INVOKE  (r1 I:int) = (r0 I:java.util.List) type: STATIC call: kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int A[MD:\<T\>:(java.util.List\<? extends T\>):int (m)]\l}"];
Node_59 [shape=record,label="{59\:\ 0x0017|0x0017: IF  (r5 I:??[int, byte, short, char] A[D('index' int)]) \> (r1 I:??[int, byte, short, char])  \-\> B:61:0x001e \l}"];
Node_60 [shape=record,label="{60\:\ 0x0019|0x0019: INVOKE  (r0 I:java.lang.Object) = (r0 I:java.util.List), (r5 I:int A[D('index' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l}"];
Node_77 [shape=record,label="{77\:\ ?|SYNTHETIC\lRETURN\l|0x0026: RETURN  (r0 I:T) A[SYNTHETIC]\l}"];
Node_53 [shape=record,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_61 [shape=record,label="{61\:\ 0x001e|0x001e: INVOKE  (r0 I:java.lang.Integer) = (r5 I:int A[D('index' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0022: INVOKE  (r0 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('defaultValue' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
Node_62 [shape=record,label="{62\:\ 0x0026|RETURN\lORIG_RETURN\l|0x0026: RETURN  (r0 I:T) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0027|0x0027: IF  (r5 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:66:0x0032  (LINE:108)\l}"];
Node_64 [shape=record,label="{64\:\ 0x0029|0x0029: INVOKE  (r0 I:java.lang.Integer) = (r5 I:int A[D('index' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:109)\l0x002d: INVOKE  (r0 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('defaultValue' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
Node_65 [shape=record,label="{65\:\ 0x0031|RETURN\l|0x0031: RETURN  (r0 I:T) \l}"];
Node_66 [shape=record,label="{66\:\ 0x0032|0x0032: INVOKE  (r0 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$elementAtOrElse' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:110)\l0x0036: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:111)\l}"];
Node_67 [shape=record,label="{67\:\ 0x0037|LOOP_START\lLOOP:0: B:67:0x0037\-\>B:72:0x0046\l|0x0037: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:112)\l}"];
Node_68 [shape=record,label="{68\:\ 0x003b|0x003b: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0048 \l}"];
Node_69 [shape=record,label="{69\:\ 0x003d|0x003d: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:113)\l0x0041: ARITH  (r3 I:int) = (r1 I:int A[D('count' int)]) + (1 int)  (LINE:114)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0043|0x0043: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('count' int)])  \-\> B:72:0x0046 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0046|LOOP_END\lLOOP:0: B:67:0x0037\-\>B:72:0x0046\l|0x0046: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)])  (LINE:114)\l}"];
Node_75 [shape=record,label="{75\:\ 0x0045|SYNTHETIC\l}"];
Node_71 [shape=record,label="{71\:\ 0x0045|RETURN\l|0x0045: RETURN  (r2 I:T A[D('element' java.lang.Object)])  (LINE:115)\l}"];
Node_76 [shape=record,label="{76\:\ 0x0048|SYNTHETIC\l}"];
Node_73 [shape=record,label="{73\:\ 0x0048|0x0048: INVOKE  (r2 I:java.lang.Integer) = (r5 I:int A[D('index' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)] (LINE:117)\l0x004c: INVOKE  (r2 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('defaultValue' kotlin.jvm.functions.Function1)]), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
Node_74 [shape=record,label="{74\:\ 0x0050|RETURN\l|0x0050: RETURN  (r2 I:T) \l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.elementAtOrElse((r4 I:java.lang.Iterable\<? extends T\> A[D('$this$elementAtOrElse' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super java.lang.Integer, ? extends T\> A[D('defaultValue' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:61:0x001e \-\> B:62:0x0026, CROSS_EDGE: B:57:0x0011 \-\> B:61:0x001e, CROSS_EDGE: B:65:0x0031 \-\> B:53:?, CROSS_EDGE: B:71:0x0045 \-\> B:53:?, BACK_EDGE: B:72:0x0046 \-\> B:67:0x0037, CROSS_EDGE: B:74:0x0050 \-\> B:53:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0037\-0x0043: r1 'count' I\l  0x0041\-0x0048: r2 'element' Ljava\/lang\/Object;\l  0x0043\-0x0048: r3 'count' I\l  0x0036\-0x0050: r0 'iterator' Ljava\/util\/Iterator;\l  0x0048\-0x0050: r1 'count' I\l  \-1 \-0x0050: r4 '$this$elementAtOrElse' Ljava\/lang\/Iterable;\l  \-1 \-0x0050: r5 'index' I\l  \-1 \-0x0050: r6 'defaultValue' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Integer;+TT;\>;)TT;\l}"];
MethodNode -> Node_52;Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_63;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_61;
Node_58 -> Node_59;
Node_59 -> Node_60[style=dashed];
Node_59 -> Node_61;
Node_60 -> Node_77;
Node_77 -> Node_53;
Node_61 -> Node_62;
Node_62 -> Node_53;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_66;
Node_64 -> Node_65;
Node_65 -> Node_53;
Node_66 -> Node_67;
Node_67 -> Node_68;
Node_68 -> Node_69[style=dashed];
Node_68 -> Node_76;
Node_69 -> Node_70;
Node_70 -> Node_72;
Node_70 -> Node_75[style=dashed];
Node_72 -> Node_67;
Node_75 -> Node_71;
Node_71 -> Node_53;
Node_76 -> Node_73;
Node_73 -> Node_74;
Node_74 -> Node_53;
}

