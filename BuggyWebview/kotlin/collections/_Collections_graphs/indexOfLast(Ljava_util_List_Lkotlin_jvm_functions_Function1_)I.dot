digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.indexOfLast(Ljava\/util\/List;Lkotlin\/jvm\/functions\/Function1;)I" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"predicate\")\ljava.util.ListIterator r1 = r3.listIterator(r3.size())\l}"];
Node_29 [shape=record,label="{29\:\ 0x0013|LOOP_START\lLOOP:0: B:29:0x0013\-\>B:32:0x0027\l}"];
Node_30 [shape=record,label="{30\:\ 0x0017|if (r1.hasPrevious() == false) goto L10\l}"];
Node_31 [shape=record,label="{31\:\ 0x0019}"];
Node_32 [shape=record,label="{32\:\ 0x0027|LOOP_END\lLOOP:0: B:29:0x0013\-\>B:32:0x0027\l|if (r4.invoke((T) r1.previous()).booleanValue() == false) goto L2\l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0029}"];
Node_34 [shape=record,label="{34\:\ 0x002d|RETURN\l|return r1.nextIndex()\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x002e|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x002e|RETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt___CollectionsKt.indexOfLast((r3v0 java.util.List\<? extends T\> A[D('$this$indexOfLast' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0027 \-\> B:29:0x0013, CROSS_EDGE: B:36:0x002f \-\> B:27:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)I\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r2v2. Raw type applied. Possible types: T, ? super T\}\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_38;
Node_31 -> Node_32;
Node_32 -> Node_29;
Node_32 -> Node_37[style=dashed];
Node_37 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_27;
Node_38 -> Node_35;
Node_35 -> Node_27;
}

