digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.maxOfWithOrNull(Ljava\/lang\/Iterable;Ljava\/util\/Comparator;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$maxOfWithOrNull' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"comparator\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('comparator' java.util.Comparator)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x000c: INVOKE  (r6 I:java.lang.Object A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: INVOKE  (r0 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$maxOfWithOrNull' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:2139)\l0x0013: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2140)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0017|0x0017: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x001b \l}"];
Node_40 [shape=record,label="{40\:\ 0x0019|RETURN\l|0x0019: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001a: RETURN  (r1 I:R) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x001b|0x001b: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2141)\l0x001f: INVOKE  (r1 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r1 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0023|LOOP_START\lLOOP:0: B:43:0x0023\-\>B:51:0x0023\l|0x0023: INVOKE  (r2 I:boolean) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2142)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0027|0x0027: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0039 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0029|0x0029: INVOKE  (r2 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2143)\l0x002d: INVOKE  (r2 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)]), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0031: INVOKE  (r3 I:int) = \l  (r5 I:java.util.Comparator A[D('comparator' java.util.Comparator)])\l  (r1 I:java.lang.Object A[D('maxValue' java.lang.Object)])\l  (r2 I:java.lang.Object A[D('v' java.lang.Object)])\l type: INTERFACE call: java.util.Comparator.compare(java.lang.Object, java.lang.Object):int A[MD:(T, T):int (c)] (LINE:2144)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0035|0x0035: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:52:0x0023 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0037|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0037|0x0037: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('maxValue' java.lang.Object)]) = (r2 I:??[OBJECT, ARRAY] A[D('v' java.lang.Object)])  (LINE:2145)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0023|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0023|LOOP_END\lSYNTHETIC\lLOOP:0: B:43:0x0023\-\>B:51:0x0023\l}"];
Node_52 [shape=record,label="{52\:\ 0x0023|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0039|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0039|RETURN\l|0x0039: RETURN  (r1 I:R A[D('maxValue' java.lang.Object)])  (LINE:2148)\l}"];
MethodNode[shape=record,label="{private static final R kotlin.collections.CollectionsKt___CollectionsKt.maxOfWithOrNull((r4 I:java.lang.Iterable\<? extends T\> A[D('$this$maxOfWithOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.util.Comparator\<? super R\> A[D('comparator' java.util.Comparator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0035 \-\> B:43:0x0023, BACK_EDGE: B:47:0x0037 \-\> B:43:0x0023, CROSS_EDGE: B:48:0x0039 \-\> B:37:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;Ljava\/util\/Comparator\<\-TR;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TR;\lDebug Info:\l  0x0031\-0x0038: r2 'v' Ljava\/lang\/Object;\l  0x0013\-0x0039: r0 'iterator' Ljava\/util\/Iterator;\l  0x0023\-0x0039: r1 'maxValue' Ljava\/lang\/Object;\l  \-1 \-0x0039: r4 '$this$maxOfWithOrNull' Ljava\/lang\/Iterable;\l  \-1 \-0x0039: r5 'comparator' Ljava\/util\/Comparator;\l  \-1 \-0x0039: r6 'selector' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_37;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_46;
Node_46 -> Node_49[style=dashed];
Node_46 -> Node_52;
Node_49 -> Node_47;
Node_47 -> Node_53;
Node_53 -> Node_51;
Node_51 -> Node_43;
Node_52 -> Node_51;
Node_50 -> Node_48;
Node_48 -> Node_37;
}

