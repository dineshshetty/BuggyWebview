digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.reduceIndexedOrNull(Ljava\/lang\/Iterable;Lkotlin\/jvm\/functions\/Function3;)Ljava\/lang\/Object;" {
Node_34 [shape=record,label="{34\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$reduceIndexedOrNull' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('operation' kotlin.jvm.functions.Function3)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:java.util.Iterator) = (r6 I:java.lang.Iterable A[D('$this$reduceIndexedOrNull' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:2702)\l0x000f: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2703)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0013|0x0013: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0017 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0015|RETURN\l|0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: RETURN  (r2 I:S) \l}"];
Node_35 [shape=record,label="{35\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0017|0x0017: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:2704)\l0x0018: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:2705)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001c|LOOP_START\lLOOP:0: B:41:0x001c\-\>B:46:0x0029\l|0x001c: INVOKE  (r4 I:boolean) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:2706)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|0x0020: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:48:0x0037 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0022|0x0022: ARITH  (r4 I:int) = (r2 I:int A[D('index' int)]) + (1 int)  (LINE:2707)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0024|0x0024: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:50:0x0029 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0026|0x0026: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0029|SYNTHETIC\l}"];
Node_46 [shape=record,label="{46\:\ 0x0029|LOOP_END\lLOOP:0: B:41:0x001c\-\>B:46:0x0029\l|0x0029: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x002d: INVOKE  (r5 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0031: INVOKE  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)]) = \l  (r7 I:kotlin.jvm.functions.Function3 A[D('operation' kotlin.jvm.functions.Function3)])\l  (r2 I:java.lang.Object)\l  (r3 I:java.lang.Object A[D('accumulator' java.lang.Object)])\l  (r5 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function3.invoke(java.lang.Object, java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2, P3):R (m)]\l0x0035: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0029|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0037|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0037|RETURN\l|0x0037: RETURN  (r3 I:S A[D('accumulator' java.lang.Object)])  (LINE:2709)\l}"];
MethodNode[shape=record,label="{public static final S kotlin.collections.CollectionsKt___CollectionsKt.reduceIndexedOrNull((r6 I:java.lang.Iterable\<? extends T extends S\> A[D('$this$reduceIndexedOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function3\<? super java.lang.Integer, ? super S, ? super T extends S, ? extends S\> A[D('operation' kotlin.jvm.functions.Function3), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0029 \-\> B:41:0x001c, CROSS_EDGE: B:44:0x0024 \-\> B:46:0x0029, CROSS_EDGE: B:47:0x0037 \-\> B:35:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [S, T extends S]\lSIGNATURE: \<S:Ljava\/lang\/Object;T::TS;\>(Ljava\/lang\/Iterable\<+TT;\>;Lkotlin\/jvm\/functions\/Function3\<\-Ljava\/lang\/Integer;\-TS;\-TT;+TS;\>;)TS;\lDebug Info:\l  0x0018\-0x0024: r2 'index' I\l  0x0024\-0x0037: r4 'index' I\l  0x000b\-0x0037: r0 '$i$f$reduceIndexedOrNull' I\l  0x000f\-0x0037: r1 'iterator' Ljava\/util\/Iterator;\l  0x0037\-0x0037: r2 'index' I\l  0x001c\-0x0037: r3 'accumulator' Ljava\/lang\/Object;\l  \-1 \-0x0037: r6 '$this$reduceIndexedOrNull' Ljava\/lang\/Iterable;\l  \-1 \-0x0037: r7 'operation' Lkotlin\/jvm\/functions\/Function3;\l}"];
MethodNode -> Node_34;Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_40;
Node_38 -> Node_35;
Node_40 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_48;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_49;
Node_49 -> Node_46;
Node_46 -> Node_41;
Node_50 -> Node_46;
Node_48 -> Node_47;
Node_47 -> Node_35;
}

