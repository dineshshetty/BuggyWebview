digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.windowed(Ljava\/lang\/Iterable;IIZ)Ljava\/util\/List;" {
Node_70 [shape=record,label="{70\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_72 [shape=record,label="{72\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r16 I:??[OBJECT, ARRAY] A[D('$this$windowed' java.lang.Iterable)]) \l0x0002: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('size' int)]) \l0x0004: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('step' int)]) \l0x0006: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('partialWindows' boolean)]) \l0x0008: CONST_STR  (r4 I:java.lang.String) =  \"\<this\>\" \l0x000a: INVOKE  (r0 I:java.lang.Object), (r4 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000d: INVOKE  (r17 I:int A[D('size' int)]), (r18 I:int A[D('step' int)]) type: STATIC call: kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void A[MD:(int, int):void (m)] (LINE:3333)\l0x0010: INSTANCE_OF  (r4 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.util.RandomAccess  (LINE:3334)\l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x0013|0x0013: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:95:0x0067 \l}"];
Node_74 [shape=record,label="{74\:\ 0x0015|0x0015: INSTANCE_OF  (r4 I:boolean) = (r0 I:??[OBJECT, ARRAY]) java.util.List \l}"];
Node_75 [shape=record,label="{75\:\ 0x0017|0x0017: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:95:0x0067 \l}"];
Node_76 [shape=record,label="{76\:\ 0x0019|0x0019: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY])  (LINE:3335)\l0x001a: CHECK_CAST (r4 I:java.util.List) = (java.util.List) (r4 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r4 I:int) = (r4 I:java.util.List) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l0x0020: ARITH  (r6 I:int) = (r4 I:int A[D('thisSize' int)]) \/ (r2 I:int)  (LINE:3336)\l0x0022: ARITH  (r7 I:int) = (r4 I:int A[D('thisSize' int)]) % (r2 I:int) \l}"];
Node_77 [shape=record,label="{77\:\ 0x0024|0x0024: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x0028 \l}"];
Node_78 [shape=record,label="{78\:\ 0x0026|0x0026: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_80 [shape=record,label="{80\:\ 0x0029|0x0029: ARITH  (r6 I:int) = (r6 I:int) + (r7 I:int) \l0x002a: NEW_INSTANCE  (r7 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:3337)\l0x002c: INVOKE  (r7 I:java.util.ArrayList), (r6 I:int A[D('resultCapacity' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x002f: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3338)\l}"];
Node_81 [shape=record,label="{81\:\ 0x0030|LOOP_START\lLOOP:0: B:81:0x0030\-\>B:92:0x005c\l|0x0030: IF  (r9 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:84:0x0036  (LINE:3339)\l}"];
Node_82 [shape=record,label="{82\:\ 0x0032|0x0032: IF  (r9 I:??[int, byte, short, char] A[D('index' int)]) \>= (r4 I:??[int, byte, short, char] A[D('thisSize' int)])  \-\> B:84:0x0036 \l}"];
Node_83 [shape=record,label="{83\:\ 0x0034|0x0034: CONST  (r10 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_85 [shape=record,label="{85\:\ 0x0037|0x0037: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:102:0x0063 \l}"];
Node_86 [shape=record,label="{86\:\ 0x0039|0x0039: ARITH  (r10 I:int) = (r4 I:int A[D('thisSize' int)]) \- (r9 I:int A[D('index' int)])  (LINE:3340)\l0x003b: INVOKE  (r10 I:int) = (r1 I:int), (r10 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_87 [shape=record,label="{87\:\ 0x003f|0x003f: IF  (r10 I:??[int, byte, short, char] A[D('windowSize' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:89:0x0043  (LINE:3341)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0041|0x0041: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:101:0x0063 \l}"];
Node_101 [shape=record,label="{101\:\ 0x0063|SYNTHETIC\l}"];
Node_93 [shape=record,label="{93\:\ 0x0063|0x0063: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:3345)\l0x0064: CHECK_CAST (r5 I:java.util.List) = (java.util.List) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_94 [shape=record,label="{94\:\ 0x0066|RETURN\l|0x0066: RETURN  (r5 I:java.util.List\<java.util.List\<T\>\>) \l}"];
Node_71 [shape=record,label="{71\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_89 [shape=record,label="{89\:\ 0x0043|0x0043: NEW_INSTANCE  (r11 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:3342)\l0x0045: INVOKE  (r11 I:java.util.ArrayList), (r10 I:int A[D('windowSize' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0048: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_90 [shape=record,label="{90\:\ 0x0049|LOOP_START\lLOOP:1: B:90:0x0049\-\>B:91:0x004b\l|0x0049: IF  (r12 I:??[int, byte, short, char]) \>= (r10 I:??[int, byte, short, char] A[D('windowSize' int)])  \-\> B:103:0x005c \l}"];
Node_91 [shape=record,label="{91\:\ 0x004b|LOOP_END\lLOOP:1: B:90:0x0049\-\>B:91:0x004b\l|0x004b: MOVE  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3708)\l0x004c: CONST  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x004d: MOVE  (r15 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY])  (LINE:3342)\l0x004e: CHECK_CAST (r15 I:java.util.List) = (java.util.List) (r15 I:??[OBJECT, ARRAY]) \l0x0050: ARITH  (r8 I:int) = (r13 I:int A[D('it' int)]) + (r9 I:int A[D('index' int)]) \l0x0052: INVOKE  (r8 I:java.lang.Object) = (r15 I:java.util.List), (r8 I:int) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0056: INVOKE  (r11 I:java.util.ArrayList), (r8 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0059: ARITH  (r12 I:int) = (r12 I:int) + (1 int) \l}"];
Node_103 [shape=record,label="{103\:\ 0x005c|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x005c|LOOP_END\lLOOP:0: B:81:0x0030\-\>B:92:0x005c\l|0x005c: CHECK_CAST (r11 I:java.util.List) = (java.util.List) (r11 I:??[OBJECT, ARRAY]) \l0x005e: INVOKE  (r7 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r11 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0061: ARITH  (r9 I:int) = (r9 I:int A[D('index' int)]) + (r2 I:int)  (LINE:3343)\l}"];
Node_102 [shape=record,label="{102\:\ 0x0063|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x0036|0x0036: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0028|0x0028: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_95 [shape=record,label="{95\:\ 0x0067|0x0067: NEW_INSTANCE  (r4 I:java.util.ArrayList A[D('thisSize' int)]) =  java.util.ArrayList  (LINE:3347)\l0x0069: INVOKE  (r4 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x006c: INVOKE  (r6 I:java.util.Iterator) = (r16 I:java.lang.Iterable A[D('$this$windowed' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:3348)\l0x0070: INVOKE  (r5 I:java.util.Iterator) = (r6 I:java.util.Iterator), (r1 I:int), (r2 I:int), (r3 I:boolean), (r5 I:boolean) type: STATIC call: kotlin.collections.SlidingWindowKt.windowedIterator(java.util.Iterator, int, int, boolean, boolean):java.util.Iterator A[MD:\<T\>:(java.util.Iterator\<? extends T\>, int, int, boolean, boolean):java.util.Iterator\<java.util.List\<T\>\> (m)]\l0x0074: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_96 [shape=record,label="{96\:\ 0x0076|LOOP_START\lLOOP:2: B:96:0x0076\-\>B:98:0x007c\l|0x0076: INVOKE  (r7 I:boolean) = (r5 I:java.util.Iterator A[D('$this$forEach$iv' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_97 [shape=record,label="{97\:\ 0x007a|0x007a: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:104:0x0089 \l}"];
Node_98 [shape=record,label="{98\:\ 0x007c|LOOP_END\lLOOP:2: B:96:0x0076\-\>B:98:0x007c\l|0x007c: INVOKE  (r7 I:java.lang.Object) = (r5 I:java.util.Iterator A[D('$this$forEach$iv' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0080: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0081: CHECK_CAST (r8 I:java.util.List) = (java.util.List) (r8 I:??[OBJECT, ARRAY]) \l0x0083: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0084: INVOKE  (r4 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r8 I:java.lang.Object A[D('it' java.util.List)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:3349)\l}"];
Node_104 [shape=record,label="{104\:\ 0x0089|SYNTHETIC\l}"];
Node_99 [shape=record,label="{99\:\ 0x0089|0x008a: MOVE  (r5 I:??[OBJECT, ARRAY] A[D('$this$forEach$iv' java.util.Iterator)]) = (r4 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:3351)\l0x008b: CHECK_CAST (r5 I:java.util.List) = (java.util.List) (r5 I:??[OBJECT, ARRAY]) \l}"];
Node_100 [shape=record,label="{100\:\ 0x008d|RETURN\l|0x008d: RETURN  (r5 I:java.util.List\<java.util.List\<T\>\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.util.List\<T\>\> kotlin.collections.CollectionsKt___CollectionsKt.windowed((r16 I:java.lang.Iterable\<? extends T\> A[D('$this$windowed' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r17 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r18 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:91:0x004b \-\> B:90:0x0049, BACK_EDGE: B:92:0x005c \-\> B:81:0x0030, CROSS_EDGE: B:87:0x003f \-\> B:89:0x0043, CROSS_EDGE: B:85:0x0037 \-\> B:93:0x0063, CROSS_EDGE: B:84:0x0036 \-\> B:85:0x0037, CROSS_EDGE: B:81:0x0030 \-\> B:84:0x0036, CROSS_EDGE: B:79:0x0028 \-\> B:80:0x0029, BACK_EDGE: B:98:0x007c \-\> B:96:0x0076, CROSS_EDGE: B:100:0x008d \-\> B:71:?, CROSS_EDGE: B:73:0x0013 \-\> B:95:0x0067\lINLINE_NOT_NEEDED\lDebug Info:\l  0x004c\-0x0056: r13 'it' I\l  0x004d\-0x0056: r14 '$i$a$\-List\-CollectionsKt___CollectionsKt$windowed$1' I\l  0x003f\-0x0062: r10 'windowSize' I\l  0x0020\-0x0067: r4 'thisSize' I\l  0x002a\-0x0067: r6 'resultCapacity' I\l  0x002f\-0x0067: r7 'result' Ljava\/util\/ArrayList;\l  0x0030\-0x0067: r9 'index' I\l  0x0080\-0x0088: r7 'element$iv' Ljava\/lang\/Object;\l  0x0083\-0x0088: r8 'it' Ljava\/util\/List;\l  0x0084\-0x0088: r9 '$i$a$\-forEach\-CollectionsKt___CollectionsKt$windowed$2' I\l  0x0074\-0x008a: r5 '$this$forEach$iv' Ljava\/util\/Iterator;\l  0x0075\-0x008a: r6 '$i$f$forEach' I\l  0x006c\-0x008d: r4 'result' Ljava\/util\/ArrayList;\l  \-1 \-0x008d: r16 '$this$windowed' Ljava\/lang\/Iterable;\l  \-1 \-0x008d: r17 'size' I\l  \-1 \-0x008d: r18 'step' I\l  \-1 \-0x008d: r19 'partialWindows' Z\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;IIZ)Ljava\/util\/List\<Ljava\/util\/List\<TT;\>;\>;\l}"];
MethodNode -> Node_70;Node_70 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_95;
Node_74 -> Node_75;
Node_75 -> Node_76[style=dashed];
Node_75 -> Node_95;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_79;
Node_78 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_84;
Node_82 -> Node_83[style=dashed];
Node_82 -> Node_84;
Node_83 -> Node_85;
Node_85 -> Node_86[style=dashed];
Node_85 -> Node_102;
Node_86 -> Node_87;
Node_87 -> Node_88[style=dashed];
Node_87 -> Node_89;
Node_88 -> Node_89[style=dashed];
Node_88 -> Node_101;
Node_101 -> Node_93;
Node_93 -> Node_94;
Node_94 -> Node_71;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_103;
Node_91 -> Node_90;
Node_103 -> Node_92;
Node_92 -> Node_81;
Node_102 -> Node_93;
Node_84 -> Node_85;
Node_79 -> Node_80;
Node_95 -> Node_96;
Node_96 -> Node_97;
Node_97 -> Node_98[style=dashed];
Node_97 -> Node_104;
Node_98 -> Node_96;
Node_104 -> Node_99;
Node_99 -> Node_100;
Node_100 -> Node_71;
}

