digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.drop(Ljava\/lang\/Iterable;I)Ljava\/util\/List;" {
Node_104 [shape=record,label="{104\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_106 [shape=record,label="{106\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$drop' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:682)\l}"];
Node_107 [shape=record,label="{107\:\ 0x0006|0x0006: IF  (r6 I:??[int, byte, short, char] A[D('n' int)]) \< (0 ??[int, byte, short, char])  \-\> B:109:0x000a \l}"];
Node_108 [shape=record,label="{108\:\ 0x0008|0x0008: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_110 [shape=record,label="{110\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:146:0x0097 \l}"];
Node_111 [shape=record,label="{111\:\ 0x000d|0x000d: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:114:0x0014  (LINE:683)\l}"];
Node_112 [shape=record,label="{112\:\ 0x000f|0x000f: INVOKE  (r0 I:java.util.List) = (r5 I:java.lang.Iterable A[D('$this$drop' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.List\<T\> (m)]\l}"];
Node_113 [shape=record,label="{113\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_105 [shape=record,label="{105\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_114 [shape=record,label="{114\:\ 0x0014|0x0014: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INSTANCE_OF  (r2 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('$this$drop' java.lang.Iterable)]) java.util.Collection  (LINE:685)\l}"];
Node_115 [shape=record,label="{115\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:136:0x0072 \l}"];
Node_116 [shape=record,label="{116\:\ 0x0019|0x0019: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$drop' java.lang.Iterable)])  (LINE:686)\l0x001a: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x001c: INVOKE  (r2 I:int) = (r2 I:java.util.Collection) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l0x0020: ARITH  (r2 I:int) = (r2 I:int) \- (r6 I:int A[D('n' int)]) \l}"];
Node_117 [shape=record,label="{117\:\ 0x0021|0x0021: IF  (r2 I:??[int, byte, short, char] A[D('resultSize' int)]) \> (0 ??[int, byte, short, char])  \-\> B:120:0x0028  (LINE:687)\l}"];
Node_118 [shape=record,label="{118\:\ 0x0023|0x0023: INVOKE  (r0 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)] (LINE:688)\l}"];
Node_119 [shape=record,label="{119\:\ 0x0027|RETURN\l|0x0027: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_120 [shape=record,label="{120\:\ 0x0028|0x0028: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('resultSize' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:123:0x0033  (LINE:689)\l}"];
Node_121 [shape=record,label="{121\:\ 0x002a|0x002a: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.lang.Iterable A[D('$this$drop' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.last(java.lang.Iterable):java.lang.Object A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):T (m)] (LINE:690)\l0x002e: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Object) type: STATIC call: kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List A[MD:\<T\>:(T):java.util.List\<T\> (m)]\l}"];
Node_122 [shape=record,label="{122\:\ 0x0032|RETURN\l|0x0032: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_123 [shape=record,label="{123\:\ 0x0033|0x0033: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:691)\l0x0035: INVOKE  (r0 I:java.util.ArrayList), (r2 I:int A[D('resultSize' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0038: INSTANCE_OF  (r1 I:boolean A[D('list' java.util.ArrayList)]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$drop' java.lang.Iterable)]) java.util.List  (LINE:692)\l}"];
Node_124 [shape=record,label="{124\:\ 0x003a|0x003a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:137:0x0077 \l}"];
Node_125 [shape=record,label="{125\:\ 0x003c|0x003c: INSTANCE_OF  (r1 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('$this$drop' java.lang.Iterable)]) java.util.RandomAccess  (LINE:693)\l}"];
Node_126 [shape=record,label="{126\:\ 0x003e|0x003e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:130:0x0057 \l}"];
Node_127 [shape=record,label="{127\:\ 0x0040|0x0040: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('n' int)])  (LINE:694)\l0x0041: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$drop' java.lang.Iterable)]) \l0x0042: CHECK_CAST (r3 I:java.util.Collection) = (java.util.Collection) (r3 I:??[OBJECT, ARRAY]) \l0x0044: INVOKE  (r3 I:int) = (r3 I:java.util.Collection) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l}"];
Node_128 [shape=record,label="{128\:\ 0x0048|LOOP_START\lLOOP:0: B:128:0x0048\-\>B:129:0x004a\l|0x0048: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:148:0x006e \l}"];
Node_129 [shape=record,label="{129\:\ 0x004a|LOOP_END\lLOOP:0: B:128:0x0048\-\>B:129:0x004a\l|0x004a: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$drop' java.lang.Iterable)])  (LINE:695)\l0x004b: CHECK_CAST (r4 I:java.util.List) = (java.util.List) (r4 I:??[OBJECT, ARRAY]) \l0x004d: INVOKE  (r4 I:java.lang.Object) = (r4 I:java.util.List), (r1 I:int A[D('index' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0051: INVOKE  (r0 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0054: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:694)\l}"];
Node_148 [shape=record,label="{148\:\ 0x006e|SYNTHETIC\l}"];
Node_134 [shape=record,label="{134\:\ 0x006e|0x006e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('list' java.util.ArrayList)])  (LINE:700)\l0x006f: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_135 [shape=record,label="{135\:\ 0x0071|RETURN\l|0x0071: RETURN  (r1 I:java.util.List\<T\>) \l}"];
Node_130 [shape=record,label="{130\:\ 0x0057|0x0057: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('index' int)]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$drop' java.lang.Iterable)])  (LINE:697)\l0x0058: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY]) \l0x005a: INVOKE  (r1 I:java.util.ListIterator) = (r1 I:java.util.List), (r6 I:int A[D('n' int)]) type: INTERFACE call: java.util.List.listIterator(int):java.util.ListIterator A[MD:(int):java.util.ListIterator\<E\> (c)]\l0x005e: CHECK_CAST (r1 I:java.util.Iterator) = (java.util.Iterator) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_131 [shape=record,label="{131\:\ 0x0060|LOOP_START\lLOOP:1: B:131:0x0060\-\>B:133:0x0066\l|0x0060: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_132 [shape=record,label="{132\:\ 0x0064|0x0064: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:149:0x006e \l}"];
Node_133 [shape=record,label="{133\:\ 0x0066|LOOP_END\lLOOP:1: B:131:0x0060\-\>B:133:0x0066\l|0x0066: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x006a: INVOKE  (r0 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r3 I:java.lang.Object A[D('item' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:698)\l}"];
Node_149 [shape=record,label="{149\:\ 0x006e|SYNTHETIC\l}"];
Node_137 [shape=record,label="{137\:\ 0x0077|0x0077: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('list' java.util.ArrayList)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:706)\l0x0078: INVOKE  (r2 I:java.util.Iterator) = (r5 I:java.lang.Iterable A[D('$this$drop' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:707)\l}"];
Node_138 [shape=record,label="{138\:\ 0x007c|LOOP_START\lLOOP:2: B:138:0x007c\-\>B:153:0x007c\l|0x007c: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_139 [shape=record,label="{139\:\ 0x0080|0x0080: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:150:0x008f \l}"];
Node_140 [shape=record,label="{140\:\ 0x0082|0x0082: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l}"];
Node_141 [shape=record,label="{141\:\ 0x0086|0x0086: IF  (r1 I:??[int, byte, short, char] A[D('count' int)]) \< (r6 I:??[int, byte, short, char] A[D('n' int)])  \-\> B:151:0x008c  (LINE:708)\l}"];
Node_151 [shape=record,label="{151\:\ 0x008c|SYNTHETIC\l}"];
Node_143 [shape=record,label="{143\:\ 0x008c|0x008c: ARITH  (r1 I:int) = (r1 I:int A[D('count' int)]) + (1 int) \l}"];
Node_154 [shape=record,label="{154\:\ 0x007c|SYNTHETIC\l}"];
Node_153 [shape=record,label="{153\:\ 0x007c|LOOP_END\lSYNTHETIC\lLOOP:2: B:138:0x007c\-\>B:153:0x007c\l}"];
Node_152 [shape=record,label="{152\:\ 0x0088|SYNTHETIC\l}"];
Node_142 [shape=record,label="{142\:\ 0x0088|0x0088: INVOKE  (r0 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r3 I:java.lang.Object A[D('item' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_155 [shape=record,label="{155\:\ 0x007c|SYNTHETIC\l}"];
Node_150 [shape=record,label="{150\:\ 0x008f|SYNTHETIC\l}"];
Node_144 [shape=record,label="{144\:\ 0x008f|0x008f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('list' java.util.ArrayList)])  (LINE:710)\l0x0090: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY]) \l0x0092: INVOKE  (r2 I:java.util.List) = (r2 I:java.util.List) type: STATIC call: kotlin.collections.CollectionsKt.optimizeReadOnlyList(java.util.List):java.util.List A[MD:\<T\>:(java.util.List\<? extends T\>):java.util.List\<T\> (m)]\l}"];
Node_145 [shape=record,label="{145\:\ 0x0096|RETURN\l|0x0096: RETURN  (r2 I:java.util.List\<T\>) \l}"];
Node_136 [shape=record,label="{136\:\ 0x0072|0x0072: NEW_INSTANCE  (r0 I:java.util.ArrayList A[D('list' java.util.ArrayList)]) =  java.util.ArrayList  (LINE:704)\l0x0074: INVOKE  (r0 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l}"];
Node_146 [shape=record,label="{146\:\ 0x0097|0x0097: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('list' java.util.ArrayList)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3708)\l0x0098: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:682)\l0x009a: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x009d: CONST_STR  (r2 I:java.lang.String) =  \"Requested element count \" \l0x009f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00a2: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:int A[D('n' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x00a5: CONST_STR  (r2 I:java.lang.String) =  \" is less than zero.\" \l0x00a7: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x00aa: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-CollectionsKt___CollectionsKt$drop$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00ae: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x00b0: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x00b4: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_147 [shape=record,label="{147\:\ 0x00b7|0x00b7: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_109 [shape=record,label="{109\:\ 0x000a|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.drop((r5 I:java.lang.Iterable\<? extends T\> A[D('$this$drop' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:119:0x0027 \-\> B:105:?, CROSS_EDGE: B:122:0x0032 \-\> B:105:?, BACK_EDGE: B:129:0x004a \-\> B:128:0x0048, CROSS_EDGE: B:135:0x0071 \-\> B:105:?, BACK_EDGE: B:133:0x0066 \-\> B:131:0x0060, CROSS_EDGE: B:132:0x0064 \-\> B:134:0x006e, BACK_EDGE: B:142:0x0088 \-\> B:138:0x007c, BACK_EDGE: B:143:0x008c \-\> B:138:0x007c, CROSS_EDGE: B:145:0x0096 \-\> B:105:?, CROSS_EDGE: B:136:0x0072 \-\> B:137:0x0077, CROSS_EDGE: B:147:0x00b7 \-\> B:105:?, CROSS_EDGE: B:109:0x000a \-\> B:110:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0015\-0x0038: r1 'list' Ljava\/util\/ArrayList;\l  0x0041\-0x0057: r1 'index' I\l  0x006a\-0x006e: r3 'item' Ljava\/lang\/Object;\l  0x0038\-0x0072: r0 'list' Ljava\/util\/ArrayList;\l  0x0021\-0x0072: r2 'resultSize' I\l  0x0072\-0x0077: r1 'list' Ljava\/util\/ArrayList;\l  0x0086\-0x008c: r3 'item' Ljava\/lang\/Object;\l  0x0077\-0x0097: r0 'list' Ljava\/util\/ArrayList;\l  0x0078\-0x0097: r1 'count' I\l  0x0098\-0x00ae: r0 '$i$a$\-require\-CollectionsKt___CollectionsKt$drop$1' I\l  \-1 \-0x00b7: r5 '$this$drop' Ljava\/lang\/Iterable;\l  \-1 \-0x00b7: r6 'n' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;I)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_104;Node_104 -> Node_106;
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_109;
Node_108 -> Node_110;
Node_110 -> Node_111[style=dashed];
Node_110 -> Node_146;
Node_111 -> Node_112[style=dashed];
Node_111 -> Node_114;
Node_112 -> Node_113;
Node_113 -> Node_105;
Node_114 -> Node_115;
Node_115 -> Node_116[style=dashed];
Node_115 -> Node_136;
Node_116 -> Node_117;
Node_117 -> Node_118[style=dashed];
Node_117 -> Node_120;
Node_118 -> Node_119;
Node_119 -> Node_105;
Node_120 -> Node_121[style=dashed];
Node_120 -> Node_123;
Node_121 -> Node_122;
Node_122 -> Node_105;
Node_123 -> Node_124;
Node_124 -> Node_125[style=dashed];
Node_124 -> Node_137;
Node_125 -> Node_126;
Node_126 -> Node_127[style=dashed];
Node_126 -> Node_130;
Node_127 -> Node_128;
Node_128 -> Node_129[style=dashed];
Node_128 -> Node_148;
Node_129 -> Node_128;
Node_148 -> Node_134;
Node_134 -> Node_135;
Node_135 -> Node_105;
Node_130 -> Node_131;
Node_131 -> Node_132;
Node_132 -> Node_133[style=dashed];
Node_132 -> Node_149;
Node_133 -> Node_131;
Node_149 -> Node_134;
Node_137 -> Node_138;
Node_138 -> Node_139;
Node_139 -> Node_140[style=dashed];
Node_139 -> Node_150;
Node_140 -> Node_141;
Node_141 -> Node_151;
Node_141 -> Node_152[style=dashed];
Node_151 -> Node_143;
Node_143 -> Node_154;
Node_154 -> Node_153;
Node_153 -> Node_138;
Node_152 -> Node_142;
Node_142 -> Node_155;
Node_155 -> Node_153;
Node_150 -> Node_144;
Node_144 -> Node_145;
Node_145 -> Node_105;
Node_136 -> Node_137;
Node_146 -> Node_147;
Node_147 -> Node_105;
Node_109 -> Node_110;
}

