digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.random(Ljava\/util\/Collection;Lkotlin\/random\/Random;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1450518134 {
label = "R(2:1|(2:(1:7)|(1:4)))";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"random\")\l}"];
subgraph cluster_Region_2002221160 {
label = "R(2:(1:7)|(1:4))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_527127145 {
label = "IF [B:19:0x000e] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000e|if (r2.isEmpty() != false) goto L6\l}"];
subgraph cluster_Region_1998984193 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0027|throw new java.util.NoSuchElementException(\"Collection is empty.\")\l}"];
}
}
subgraph cluster_Region_136301061 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x001f|RETURN\l|return (T) kotlin.collections.CollectionsKt.elementAt(r2, r3.nextInt(r2.size()))\l}"];
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0010}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0020}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.random((r2v0 java.util.Collection\<? extends T\> A[D('$this$random' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'random' kotlin.random.Random A[D('random' kotlin.random.Random), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0027 \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<+TT;\>;Lkotlin\/random\/Random;)TT;\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_23 -> Node_17;
Node_21 -> Node_17;
Node_16 -> Node_18;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

