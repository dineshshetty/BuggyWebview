digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.take(Ljava\/lang\/Iterable;I)Ljava\/util\/List;" {
Node_60 [shape=record,label="{60\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_62 [shape=record,label="{62\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$take' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:890)\l}"];
Node_63 [shape=record,label="{63\:\ 0x0006|0x0006: IF  (r5 I:??[int, byte, short, char] A[D('n' int)]) \< (0 ??[int, byte, short, char])  \-\> B:65:0x000a \l}"];
Node_64 [shape=record,label="{64\:\ 0x0008|0x0008: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_66 [shape=record,label="{66\:\ 0x000b|0x000b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:86:0x0054 \l}"];
Node_67 [shape=record,label="{67\:\ 0x000d|0x000d: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x0014  (LINE:891)\l}"];
Node_68 [shape=record,label="{68\:\ 0x000f|0x000f: INVOKE  (r0 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x0013|RETURN\l|0x0013: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_61 [shape=record,label="{61\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_70 [shape=record,label="{70\:\ 0x0014|0x0014: INSTANCE_OF  (r1 I:boolean) = (r4 I:??[OBJECT, ARRAY] A[D('$this$take' java.lang.Iterable)]) java.util.Collection  (LINE:892)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0016|0x0016: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x0031 \l}"];
Node_72 [shape=record,label="{72\:\ 0x0018|0x0018: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$take' java.lang.Iterable)])  (LINE:893)\l0x0019: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r1 I:int) = (r1 I:java.util.Collection) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l}"];
Node_73 [shape=record,label="{73\:\ 0x001f|0x001f: IF  (r5 I:??[int, byte, short, char] A[D('n' int)]) \< (r1 I:??[int, byte, short, char])  \-\> B:76:0x0026 \l}"];
Node_74 [shape=record,label="{74\:\ 0x0021|0x0021: INVOKE  (r0 I:java.util.List) = (r4 I:java.lang.Iterable A[D('$this$take' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.toList(java.lang.Iterable):java.util.List A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):java.util.List\<T\> (m)]\l}"];
Node_75 [shape=record,label="{75\:\ 0x0025|RETURN\l|0x0025: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_76 [shape=record,label="{76\:\ 0x0026|0x0026: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:79:0x0031  (LINE:894)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0028|0x0028: INVOKE  (r0 I:java.lang.Object) = (r4 I:java.lang.Iterable A[D('$this$take' java.lang.Iterable)]) type: STATIC call: kotlin.collections.CollectionsKt.first(java.lang.Iterable):java.lang.Object A[MD:\<T\>:(java.lang.Iterable\<? extends T\>):T (m)]\l0x002c: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Object) type: STATIC call: kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List A[MD:\<T\>:(T):java.util.List\<T\> (m)]\l}"];
Node_78 [shape=record,label="{78\:\ 0x0030|RETURN\l|0x0030: RETURN  (r0 I:java.util.List\<T\>) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0031|0x0031: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:896)\l0x0032: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:897)\l0x0034: INVOKE  (r1 I:java.util.ArrayList), (r5 I:int A[D('n' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0037: INVOKE  (r2 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$take' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:898)\l}"];
Node_80 [shape=record,label="{80\:\ 0x003b|LOOP_START\lLOOP:0: B:80:0x003b\-\>B:83:0x004a\l|0x003b: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_81 [shape=record,label="{81\:\ 0x003f|0x003f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:89:0x004c \l}"];
Node_82 [shape=record,label="{82\:\ 0x0041|0x0041: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0045: INVOKE  (r1 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r3 I:java.lang.Object A[D('item' java.lang.Object)]) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:899)\l0x0048: ARITH  (r0 I:int) = (r0 I:int A[D('count' int)]) + (1 int)  (LINE:900)\l}"];
Node_83 [shape=record,label="{83\:\ 0x004a|LOOP_END\lLOOP:0: B:80:0x003b\-\>B:83:0x004a\l|0x004a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('count' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('n' int)])  \-\> B:80:0x003b \l}"];
Node_88 [shape=record,label="{88\:\ 0x004c|SYNTHETIC\l}"];
Node_84 [shape=record,label="{84\:\ 0x004c|0x004c: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('list' java.util.ArrayList)])  (LINE:903)\l0x004d: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY]) \l0x004f: INVOKE  (r2 I:java.util.List) = (r2 I:java.util.List) type: STATIC call: kotlin.collections.CollectionsKt.optimizeReadOnlyList(java.util.List):java.util.List A[MD:\<T\>:(java.util.List\<? extends T\>):java.util.List\<T\> (m)]\l}"];
Node_85 [shape=record,label="{85\:\ 0x0053|RETURN\l|0x0053: RETURN  (r2 I:java.util.List\<T\>) \l}"];
Node_89 [shape=record,label="{89\:\ 0x004c|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0054|0x0054: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('count' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3708)\l0x0055: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:890)\l0x0057: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x005a: CONST_STR  (r2 I:java.lang.String) =  \"Requested element count \" \l0x005c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x005f: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('n' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0062: CONST_STR  (r2 I:java.lang.String) =  \" is less than zero.\" \l0x0064: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0067: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-CollectionsKt___CollectionsKt$take$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x006b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x006d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0071: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_87 [shape=record,label="{87\:\ 0x0074|0x0074: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_65 [shape=record,label="{65\:\ 0x000a|0x000a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.take((r4 I:java.lang.Iterable\<? extends T\> A[D('$this$take' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:75:0x0025 \-\> B:61:?, CROSS_EDGE: B:78:0x0030 \-\> B:61:?, BACK_EDGE: B:83:0x004a \-\> B:80:0x003b, CROSS_EDGE: B:85:0x0053 \-\> B:61:?, CROSS_EDGE: B:81:0x003f \-\> B:84:0x004c, CROSS_EDGE: B:71:0x0016 \-\> B:79:0x0031, CROSS_EDGE: B:87:0x0074 \-\> B:61:?, CROSS_EDGE: B:65:0x000a \-\> B:66:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0045\-0x004c: r3 'item' Ljava\/lang\/Object;\l  0x0032\-0x0054: r0 'count' I\l  0x0037\-0x0054: r1 'list' Ljava\/util\/ArrayList;\l  0x0055\-0x006b: r0 '$i$a$\-require\-CollectionsKt___CollectionsKt$take$1' I\l  \-1 \-0x0074: r4 '$this$take' Ljava\/lang\/Iterable;\l  \-1 \-0x0074: r5 'n' I\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;I)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_60;Node_60 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_66;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_86;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_70;
Node_68 -> Node_69;
Node_69 -> Node_61;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_79;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_76;
Node_74 -> Node_75;
Node_75 -> Node_61;
Node_76 -> Node_77[style=dashed];
Node_76 -> Node_79;
Node_77 -> Node_78;
Node_78 -> Node_61;
Node_79 -> Node_80;
Node_80 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_89;
Node_82 -> Node_83;
Node_83 -> Node_80;
Node_83 -> Node_88[style=dashed];
Node_88 -> Node_84;
Node_84 -> Node_85;
Node_85 -> Node_61;
Node_89 -> Node_84;
Node_86 -> Node_87;
Node_87 -> Node_61;
Node_65 -> Node_66;
}

