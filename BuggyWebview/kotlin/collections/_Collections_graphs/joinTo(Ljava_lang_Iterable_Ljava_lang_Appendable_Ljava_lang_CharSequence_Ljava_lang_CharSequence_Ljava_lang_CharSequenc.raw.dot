digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.joinTo(Ljava\/lang\/Iterable;Ljava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Appendable;" {
Node_44 [shape=record,label="{44\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_46 [shape=record,label="{46\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$joinTo' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"buffer\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('buffer' java.lang.Appendable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"separator\" \l0x000c: INVOKE  (r6 I:java.lang.Object A[D('separator' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0011: INVOKE  (r7 I:java.lang.Object A[D('prefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"postfix\" \l0x0016: INVOKE  (r8 I:java.lang.Object A[D('postfix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0019: CONST_STR  (r0 I:java.lang.String) =  \"truncated\" \l0x001b: INVOKE  (r10 I:java.lang.Object A[D('truncated' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001e: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r7 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)] (LINE:3494)\l0x0021: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3495)\l0x0022: INVOKE  (r1 I:java.util.Iterator) = (r4 I:java.lang.Iterable A[D('$this$joinTo' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:3496)\l}"];
Node_47 [shape=record,label="{47\:\ 0x0026|LOOP_START\lLOOP:0: B:47:0x0026\-\>B:56:0x003e\l|0x0026: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_48 [shape=record,label="{48\:\ 0x002a|0x002a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:62:0x0042 \l}"];
Node_49 [shape=record,label="{49\:\ 0x002c|0x002c: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0030: ARITH  (r0 I:int) = (r0 I:int A[D('count' int)]) + (1 int)  (LINE:3497)\l0x0032: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0033|0x0033: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \<= (r3 I:??[int, byte, short, char])  \-\> B:52:0x0038 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0035|0x0035: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r6 I:java.lang.CharSequence A[D('separator' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_52 [shape=record,label="{52\:\ 0x0038|0x0038: IF  (r9 I:??[int, byte, short, char] A[D('limit' int)]) \< (0 ??[int, byte, short, char])  \-\> B:64:0x003e  (LINE:3498)\l}"];
Node_53 [shape=record,label="{53\:\ 0x003a|0x003a: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \> (r9 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:63:0x0042 \l}"];
Node_63 [shape=record,label="{63\:\ 0x0042|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x0042|0x0042: IF  (r9 I:??[int, byte, short, char] A[D('limit' int)]) \< (0 ??[int, byte, short, char])  \-\> B:60:0x0049  (LINE:3502)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0044|0x0044: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \<= (r9 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:60:0x0049 \l}"];
Node_59 [shape=record,label="{59\:\ 0x0046|0x0046: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r10 I:java.lang.CharSequence A[D('truncated' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_60 [shape=record,label="{60\:\ 0x0049|0x0049: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r8 I:java.lang.CharSequence A[D('postfix' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)] (LINE:3503)\l}"];
Node_61 [shape=record,label="{61\:\ 0x004c|RETURN\l|0x004c: RETURN  (r5 I:A extends java.lang.Appendable A[D('buffer' java.lang.Appendable)])  (LINE:3504)\l}"];
Node_45 [shape=record,label="{45\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_65 [shape=record,label="{65\:\ 0x003e|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x003e|LOOP_END\lLOOP:0: B:47:0x0026\-\>B:56:0x003e\l|0x003e: INVOKE  \l  (r5 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r2 I:java.lang.Object A[D('element' java.lang.Object)])\l  (r11 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l type: STATIC call: kotlin.text.StringsKt.appendElement(java.lang.Appendable, java.lang.Object, kotlin.jvm.functions.Function1):void A[MD:\<T\>:(java.lang.Appendable, T, kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\>):void (m)] (LINE:3499)\l}"];
Node_64 [shape=record,label="{64\:\ 0x003e|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x0042|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final A extends java.lang.Appendable kotlin.collections.CollectionsKt___CollectionsKt.joinTo((r4 I:java.lang.Iterable\<? extends T\> A[D('$this$joinTo' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:A extends java.lang.Appendable A[D('buffer' java.lang.Appendable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[D('separator' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.CharSequence A[D('postfix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.lang.CharSequence A[D('truncated' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:56:0x003e \-\> B:47:0x0026, CROSS_EDGE: B:58:0x0044 \-\> B:60:0x0049, CROSS_EDGE: B:57:0x0042 \-\> B:60:0x0049, CROSS_EDGE: B:52:0x0038 \-\> B:56:0x003e, CROSS_EDGE: B:50:0x0033 \-\> B:52:0x0038, CROSS_EDGE: B:48:0x002a \-\> B:57:0x0042\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0030\-0x0042: r2 'element' Ljava\/lang\/Object;\l  0x0022\-0x004c: r0 'count' I\l  \-1 \-0x004c: r4 '$this$joinTo' Ljava\/lang\/Iterable;\l  \-1 \-0x004c: r5 'buffer' Ljava\/lang\/Appendable;\l  \-1 \-0x004c: r6 'separator' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r7 'prefix' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r8 'postfix' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r9 'limit' I\l  \-1 \-0x004c: r10 'truncated' Ljava\/lang\/CharSequence;\l  \-1 \-0x004c: r11 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [A extends java.lang.Appendable, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;A::Ljava\/lang\/Appendable;\>(Ljava\/lang\/Iterable\<+TT;\>;TA;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/CharSequence;\>;)TA;\l}"];
MethodNode -> Node_44;Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_62;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_52;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_64;
Node_53 -> Node_63;
Node_53 -> Node_65[style=dashed];
Node_63 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_60;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_60;
Node_60 -> Node_61;
Node_61 -> Node_45;
Node_65 -> Node_56;
Node_56 -> Node_47;
Node_64 -> Node_56;
Node_62 -> Node_57;
}

