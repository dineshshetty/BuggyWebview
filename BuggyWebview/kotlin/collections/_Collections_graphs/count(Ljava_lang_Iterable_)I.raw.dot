digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.count(Ljava\/lang\/Iterable;)I" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$count' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INSTANCE_OF  (r0 I:boolean) = (r3 I:??[OBJECT, ARRAY] A[D('$this$count' java.lang.Iterable)]) java.util.Collection  (LINE:1752)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:42:0x0011 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0009|0x0009: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('$this$count' java.lang.Iterable)]) \l0x000a: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  (r0 I:int) = (r0 I:java.util.Collection) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_42 [shape=record,label="{42\:\ 0x0011|0x0011: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1753)\l0x0012: INVOKE  (r1 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$count' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1754)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0016|LOOP_START\lLOOP:0: B:43:0x0016\-\>B:51:0x0016\l|0x0016: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x001a|0x001a: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0028 \l}"];
Node_45 [shape=record,label="{45\:\ 0x001c|0x001c: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0020: ARITH  (r0 I:int) = (r0 I:int A[D('count' int)]) + (1 int) \l}"];
Node_46 [shape=record,label="{46\:\ 0x0022|0x0022: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:52:0x0016 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0024|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0024|0x0024: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwCountOverflow():void A[MD:():void (m)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x0016|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0016|LOOP_END\lSYNTHETIC\lLOOP:0: B:43:0x0016\-\>B:51:0x0016\l}"];
Node_52 [shape=record,label="{52\:\ 0x0016|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0028|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0028|RETURN\l|0x0028: RETURN  (r0 I:int A[D('count' int)])  (LINE:1755)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt___CollectionsKt.count((r3 I:java.lang.Iterable\<? extends T\> A[D('$this$count' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:46:0x0022 \-\> B:43:0x0016, BACK_EDGE: B:47:0x0024 \-\> B:43:0x0016, CROSS_EDGE: B:48:0x0028 \-\> B:37:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0020\-0x0027: r2 'element' Ljava\/lang\/Object;\l  0x0012\-0x0028: r0 'count' I\l  \-1 \-0x0028: r3 '$this$count' Ljava\/lang\/Iterable;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;)I\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41;
Node_41 -> Node_37;
Node_42 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_50;
Node_45 -> Node_46;
Node_46 -> Node_49[style=dashed];
Node_46 -> Node_52;
Node_49 -> Node_47;
Node_47 -> Node_53;
Node_53 -> Node_51;
Node_51 -> Node_43;
Node_52 -> Node_51;
Node_50 -> Node_48;
Node_48 -> Node_37;
}

