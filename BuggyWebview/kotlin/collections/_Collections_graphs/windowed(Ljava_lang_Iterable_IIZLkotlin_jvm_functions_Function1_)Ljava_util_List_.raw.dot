digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.windowed(Ljava\/lang\/Iterable;IIZLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_66 [shape=record,label="{66\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_68 [shape=record,label="{68\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('$this$windowed' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r13 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r10 I:int A[D('size' int)]), (r11 I:int A[D('step' int)]) type: STATIC call: kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void A[MD:(int, int):void (m)] (LINE:3373)\l0x000d: INSTANCE_OF  (r0 I:boolean) = (r9 I:??[OBJECT, ARRAY] A[D('$this$windowed' java.lang.Iterable)]) java.util.RandomAccess  (LINE:3374)\l0x000f: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_69 [shape=record,label="{69\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x005b \l}"];
Node_70 [shape=record,label="{70\:\ 0x0012|0x0012: INSTANCE_OF  (r0 I:boolean) = (r9 I:??[OBJECT, ARRAY] A[D('$this$windowed' java.lang.Iterable)]) java.util.List \l}"];
Node_71 [shape=record,label="{71\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x005b \l}"];
Node_72 [shape=record,label="{72\:\ 0x0016|0x0016: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$windowed' java.lang.Iterable)])  (LINE:3375)\l0x0017: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l0x0019: INVOKE  (r0 I:int) = (r0 I:java.util.List) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l0x001d: ARITH  (r2 I:int) = (r0 I:int A[D('thisSize' int)]) \/ (r11 I:int A[D('step' int)])  (LINE:3376)\l0x001f: ARITH  (r3 I:int) = (r0 I:int A[D('thisSize' int)]) % (r11 I:int A[D('step' int)]) \l0x0021: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x0022|0x0022: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:75:0x0026 \l}"];
Node_74 [shape=record,label="{74\:\ 0x0024|0x0024: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_76 [shape=record,label="{76\:\ 0x0027|0x0027: ARITH  (r2 I:int) = (r2 I:int) + (r3 I:int) \l0x0028: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:3377)\l0x002a: INVOKE  (r3 I:java.util.ArrayList), (r2 I:int A[D('resultCapacity' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x002d: NEW_INSTANCE  (r5 I:kotlin.collections.MovingSubList) =  kotlin.collections.MovingSubList  (LINE:3378)\l0x002f: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$windowed' java.lang.Iterable)]) \l0x0030: CHECK_CAST (r6 I:java.util.List) = (java.util.List) (r6 I:??[OBJECT, ARRAY]) \l0x0032: INVOKE  (r5 I:kotlin.collections.MovingSubList), (r6 I:java.util.List) type: DIRECT call: kotlin.collections.MovingSubList.\<init\>(java.util.List):void A[MD:(java.util.List\<? extends E\>):void (m)]\l0x0035: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3379)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0036|LOOP_START\lLOOP:0: B:77:0x0036\-\>B:85:0x0049\l|0x0036: IF  (r6 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:80:0x003c  (LINE:3380)\l}"];
Node_78 [shape=record,label="{78\:\ 0x0038|0x0038: IF  (r6 I:??[int, byte, short, char] A[D('index' int)]) \>= (r0 I:??[int, byte, short, char] A[D('thisSize' int)])  \-\> B:80:0x003c \l}"];
Node_79 [shape=record,label="{79\:\ 0x003a|0x003a: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_81 [shape=record,label="{81\:\ 0x003d|0x003d: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:95:0x0057 \l}"];
Node_82 [shape=record,label="{82\:\ 0x003f|0x003f: ARITH  (r7 I:int) = (r0 I:int A[D('thisSize' int)]) \- (r6 I:int A[D('index' int)])  (LINE:3381)\l0x0041: INVOKE  (r7 I:int) = (r10 I:int A[D('size' int)]), (r7 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_83 [shape=record,label="{83\:\ 0x0045|0x0045: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('partialWindows' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:96:0x0049  (LINE:3382)\l}"];
Node_84 [shape=record,label="{84\:\ 0x0047|0x0047: IF  (r7 I:??[int, byte, short, char] A[D('windowSize' int)]) \< (r10 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:94:0x0057 \l}"];
Node_94 [shape=record,label="{94\:\ 0x0057|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0057|0x0057: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:3387)\l0x0058: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_87 [shape=record,label="{87\:\ 0x005a|RETURN\l|0x005a: RETURN  (r1 I:java.util.List\<R\>) \l}"];
Node_67 [shape=record,label="{67\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_97 [shape=record,label="{97\:\ 0x0049|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0049|LOOP_END\lLOOP:0: B:77:0x0036\-\>B:85:0x0049\l|0x0049: ARITH  (r8 I:int) = (r6 I:int A[D('index' int)]) + (r7 I:int A[D('windowSize' int)])  (LINE:3383)\l0x004b: INVOKE  \l  (r5 I:kotlin.collections.MovingSubList A[D('window' kotlin.collections.MovingSubList)])\l  (r6 I:int A[D('index' int)])\l  (r8 I:int)\l type: VIRTUAL call: kotlin.collections.MovingSubList.move(int, int):void A[MD:(int, int):void (m)]\l0x004e: INVOKE  (r8 I:java.lang.Object) = \l  (r13 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r5 I:java.lang.Object A[D('window' kotlin.collections.MovingSubList)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:3384)\l0x0052: INVOKE  (r3 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r8 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0055: ARITH  (r6 I:int) = (r6 I:int A[D('index' int)]) + (r11 I:int A[D('step' int)])  (LINE:3385)\l}"];
Node_96 [shape=record,label="{96\:\ 0x0049|SYNTHETIC\l}"];
Node_95 [shape=record,label="{95\:\ 0x0057|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x003c|0x003c: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_75 [shape=record,label="{75\:\ 0x0026|0x0026: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_88 [shape=record,label="{88\:\ 0x005b|0x005b: NEW_INSTANCE  (r0 I:java.util.ArrayList A[D('thisSize' int)]) =  java.util.ArrayList  (LINE:3389)\l0x005d: INVOKE  (r0 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0060: INVOKE  (r2 I:java.util.Iterator) = (r9 I:java.lang.Iterable A[D('$this$windowed' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:3390)\l0x0064: INVOKE  (r1 I:java.util.Iterator) = \l  (r2 I:java.util.Iterator)\l  (r10 I:int A[D('size' int)])\l  (r11 I:int A[D('step' int)])\l  (r12 I:boolean A[D('partialWindows' boolean)])\l  (r1 I:boolean)\l type: STATIC call: kotlin.collections.SlidingWindowKt.windowedIterator(java.util.Iterator, int, int, boolean, boolean):java.util.Iterator A[MD:\<T\>:(java.util.Iterator\<? extends T\>, int, int, boolean, boolean):java.util.Iterator\<java.util.List\<T\>\> (m)]\l0x0068: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_89 [shape=record,label="{89\:\ 0x006a|LOOP_START\lLOOP:1: B:89:0x006a\-\>B:91:0x0070\l|0x006a: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator A[D('$this$forEach$iv' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_90 [shape=record,label="{90\:\ 0x006e|0x006e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:98:0x0081 \l}"];
Node_91 [shape=record,label="{91\:\ 0x0070|LOOP_END\lLOOP:1: B:89:0x006a\-\>B:91:0x0070\l|0x0070: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator A[D('$this$forEach$iv' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0074: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('element$iv' java.lang.Object)]) \l0x0075: CHECK_CAST (r4 I:java.util.List) = (java.util.List) (r4 I:??[OBJECT, ARRAY]) \l0x0077: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0078: INVOKE  (r6 I:java.lang.Object) = \l  (r13 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('it' java.util.List)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:3391)\l0x007c: INVOKE  (r0 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r6 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_98 [shape=record,label="{98\:\ 0x0081|SYNTHETIC\l}"];
Node_92 [shape=record,label="{92\:\ 0x0081|0x0082: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('$this$forEach$iv' java.util.Iterator)]) = (r0 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:3393)\l0x0083: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_93 [shape=record,label="{93\:\ 0x0085|RETURN\l|0x0085: RETURN  (r1 I:java.util.List\<R\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.CollectionsKt___CollectionsKt.windowed((r9 I:java.lang.Iterable\<? extends T\> A[D('$this$windowed' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:kotlin.jvm.functions.Function1\<? super java.util.List\<? extends T\>, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:85:0x0049 \-\> B:77:0x0036, CROSS_EDGE: B:83:0x0045 \-\> B:85:0x0049, CROSS_EDGE: B:81:0x003d \-\> B:86:0x0057, CROSS_EDGE: B:80:0x003c \-\> B:81:0x003d, CROSS_EDGE: B:77:0x0036 \-\> B:80:0x003c, CROSS_EDGE: B:75:0x0026 \-\> B:76:0x0027, BACK_EDGE: B:91:0x0070 \-\> B:89:0x006a, CROSS_EDGE: B:93:0x0085 \-\> B:67:?, CROSS_EDGE: B:69:0x0010 \-\> B:88:0x005b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0045\-0x0056: r7 'windowSize' I\l  0x001d\-0x005b: r0 'thisSize' I\l  0x0028\-0x005b: r2 'resultCapacity' I\l  0x002d\-0x005b: r3 'result' Ljava\/util\/ArrayList;\l  0x0035\-0x005b: r5 'window' Lkotlin\/collections\/MovingSubList;\l  0x0036\-0x005b: r6 'index' I\l  0x0074\-0x0080: r3 'element$iv' Ljava\/lang\/Object;\l  0x0077\-0x0080: r4 'it' Ljava\/util\/List;\l  0x0078\-0x0080: r5 '$i$a$\-forEach\-CollectionsKt___CollectionsKt$windowed$3' I\l  0x0068\-0x0082: r1 '$this$forEach$iv' Ljava\/util\/Iterator;\l  0x0069\-0x0082: r2 '$i$f$forEach' I\l  0x0060\-0x0085: r0 'result' Ljava\/util\/ArrayList;\l  \-1 \-0x0085: r9 '$this$windowed' Ljava\/lang\/Iterable;\l  \-1 \-0x0085: r10 'size' I\l  \-1 \-0x0085: r11 'step' I\l  \-1 \-0x0085: r12 'partialWindows' Z\l  \-1 \-0x0085: r13 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+TT;\>;IIZLkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/List\<+TT;\>;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_66;Node_66 -> Node_68;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_88;
Node_70 -> Node_71;
Node_71 -> Node_72[style=dashed];
Node_71 -> Node_88;
Node_72 -> Node_73;
Node_73 -> Node_74[style=dashed];
Node_73 -> Node_75;
Node_74 -> Node_76;
Node_76 -> Node_77;
Node_77 -> Node_78[style=dashed];
Node_77 -> Node_80;
Node_78 -> Node_79[style=dashed];
Node_78 -> Node_80;
Node_79 -> Node_81;
Node_81 -> Node_82[style=dashed];
Node_81 -> Node_95;
Node_82 -> Node_83;
Node_83 -> Node_84[style=dashed];
Node_83 -> Node_96;
Node_84 -> Node_94;
Node_84 -> Node_97[style=dashed];
Node_94 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_67;
Node_97 -> Node_85;
Node_85 -> Node_77;
Node_96 -> Node_85;
Node_95 -> Node_86;
Node_80 -> Node_81;
Node_75 -> Node_76;
Node_88 -> Node_89;
Node_89 -> Node_90;
Node_90 -> Node_91[style=dashed];
Node_90 -> Node_98;
Node_91 -> Node_89;
Node_98 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_67;
}

