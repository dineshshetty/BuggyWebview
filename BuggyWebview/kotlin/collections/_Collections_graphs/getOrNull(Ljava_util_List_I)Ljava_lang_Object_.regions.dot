digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.getOrNull(Ljava\/util\/List;I)Ljava\/lang\/Object;" {
subgraph cluster_Region_1945835329 {
label = "R(2:1|(2:(1:8)|(1:6)))";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r1, \"\<this\>\")\l}"];
subgraph cluster_Region_1277239377 {
label = "R(2:(1:8)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_608898156 {
label = "IF [B:23:0x0005, B:25:0x000b] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0005|if (r2 \< 0) goto L8\l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|ADDED_TO_REGION\l|if (r2 \> kotlin.collections.CollectionsKt.getLastIndex(r1)) goto L8\l}"];
subgraph cluster_Region_1630100133 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0012|RETURN\lORIG_RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1254299870 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|return r1.get(r2)\l}"];
}
}
}
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0007}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000d}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.CollectionsKt___CollectionsKt.getOrNull((r1v0 java.util.List\<? extends T\> A[D('$this$getOrNull' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:27:0x0012 \-\> B:28:0x0013, CROSS_EDGE: B:23:0x0005 \-\> B:27:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<+TT;\>;I)TT;\l}"];
MethodNode -> Node_20;Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_27 -> Node_21;
Node_29 -> Node_21;
Node_20 -> Node_22;
Node_24 -> Node_25;
Node_26 -> Node_29;
}

