digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.maxOrNull(Ljava\/lang\/Iterable;)Ljava\/lang\/Double;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\ljava.util.Iterator r0 = r5.iterator()\l}"];
Node_29 [shape=record,label="{29\:\ 0x000d|if (r0.hasNext() != false) goto L5\l}"];
Node_30 [shape=record,label="{30\:\ 0x000f|RETURN\l|return null\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|double r1 = r0.next().doubleValue()\l}"];
Node_33 [shape=record,label="{33\:\ 0x001b|LOOP_START\lLOOP:0: B:33:0x001b\-\>B:35:0x0021\lPHI: r1 \l  PHI: (r1v4 'max' double) = (r1v3 'max' double), (r1v5 'max' double) binds: [B:32:0x0011, B:35:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_34 [shape=record,label="{34\:\ 0x001f|if (r0.hasNext() == false) goto L9\l}"];
Node_35 [shape=record,label="{35\:\ 0x0021|LOOP_END\lLOOP:0: B:33:0x001b\-\>B:35:0x0021\l|double r3 = r0.next().doubleValue()\ldouble r1 = java.lang.Math.max(r1, r3)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0030|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0030}"];
Node_37 [shape=record,label="{37\:\ 0x0034|RETURN\l|return java.lang.Double.valueOf(r1)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Double kotlin.collections.CollectionsKt___CollectionsKt.maxOrNull((r5v0 java.lang.Iterable\<java.lang.Double\> A[D('$this$maxOrNull' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0021 \-\> B:33:0x001b, CROSS_EDGE: B:37:0x0034 \-\> B:27:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/Iterable\<Ljava\/lang\/Double;\>;)Ljava\/lang\/Double;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_27;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_33;
Node_38 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_27;
}

