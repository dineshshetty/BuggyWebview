digraph "CFG forkotlin.collections.CollectionsKt___CollectionsKt.slice(Ljava\/util\/List;Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"indices\")\lint r0 = kotlin.collections.CollectionsKt.collectionSizeOrDefault(r6, 10)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|if (r0 != 0) goto L6\l}"];
Node_30 [shape=record,label="{30\:\ 0x0012}"];
Node_31 [shape=record,label="{31\:\ 0x0016|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0017|java.util.ArrayList r1 = new java.util.ArrayList(r0)\ljava.util.Iterator r2 = r6.iterator()\l}"];
Node_33 [shape=record,label="{33\:\ 0x0020|LOOP_START\lLOOP:0: B:33:0x0020\-\>B:35:0x0026\l}"];
Node_34 [shape=record,label="{34\:\ 0x0024|if (r2.hasNext() == false) goto L10\l}"];
Node_35 [shape=record,label="{35\:\ 0x0026|LOOP_END\lLOOP:0: B:33:0x0020\-\>B:35:0x0026\l|int r3 = r2.next().intValue()\lr1.add(r5.get(r3))\l}"];
Node_38 [shape=record,label="{38\:\ 0x0038|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0038}"];
Node_37 [shape=record,label="{37\:\ 0x003b|RETURN\l|return r1\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt___CollectionsKt.slice((r5v0 java.util.List\<? extends T\> A[D('$this$slice' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'indices' java.lang.Iterable\<java.lang.Integer\> A[D('indices' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0026 \-\> B:33:0x0020, CROSS_EDGE: B:37:0x003b \-\> B:27:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<+TT;\>;Ljava\/lang\/Iterable\<Ljava\/lang\/Integer;\>;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_27;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_33;
Node_38 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_27;
}

