digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt$asList$6.indexOf(D)I" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|double[] r0 = r12.$this_asList\lr2 = 0\lint r3 = r0.length\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|LOOP_START\lLOOP:0: B:19:0x0005\-\>B:26:0x001c\lPHI: r2 \l  PHI: (r2v1 'index$iv' int) = (r2v0 'index$iv' int), (r2v3 'index$iv' int) binds: [B:18:0x0000, B:26:0x001c] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r3) goto L12\l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|r4 = r0[r2]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|if ((java.lang.Double.doubleToLongBits(r4) \> java.lang.Double.doubleToLongBits(r13) ? 1 : (java.lang.Double.doubleToLongBits(r4) == java.lang.Double.doubleToLongBits(r13) ? 0 : \-1)) != 0) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|r7 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|PHI: r7 \l  PHI: (r7v2 boolean) = (r7v1 boolean), (r7v3 boolean) binds: [B:23:0x0018, B:22:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == false) goto L7\l}"];
Node_26 [shape=record,label="{26\:\ 0x001c|LOOP_END\lLOOP:0: B:19:0x0005\-\>B:26:0x001c\l|int r2 = r2 + 1\l}"];
Node_30 [shape=record,label="{30\:\ 0x0020|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|r7 = false\l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|RETURN\lORIG_RETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public int kotlin.collections.ArraysKt___ArraysJvmKt$asList$6.indexOf((r12v0 'this' kotlin.collections.ArraysKt___ArraysJvmKt$asList$6 A[IMMUTABLE_TYPE, THIS]), (r13v0 'element' double A[D('element' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x001c \-\> B:19:0x0005, CROSS_EDGE: B:23:0x0018 \-\> B:24:0x0019, CROSS_EDGE: B:27:0x001f \-\> B:28:0x0020\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_30[style=dashed];
Node_26 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_17;
Node_23 -> Node_24;
Node_29 -> Node_27;
Node_27 -> Node_17;
}

