digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt$asList$6.indexOf(D)I" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: IGET  (r0 I:double[]) = (r12 I:kotlin.collections.ArraysKt___ArraysJvmKt$asList$6) kotlin.collections.ArraysKt___ArraysJvmKt$asList$6.$this_asList double[]  (LINE:215)\l0x0002: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0003: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3423)\l0x0004: ARRAY_LENGTH  (r3 I:int) = (r0 I:??[] A[D('$this$indexOfFirst$iv' double[])]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|LOOP_START\lLOOP:0: B:19:0x0005\-\>B:26:0x001c\l|0x0005: IF  (r2 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:29:0x001f \l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: AGET  (r4 I:??[long, double]) = \l  (r0 I:??[long, double][] A[D('$this$indexOfFirst$iv' double[])])\l  (r2 I:??[int, short, byte, char] A[D('index$iv' int)])\l  (LINE:3424)\l0x0009: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: INVOKE  (r7 I:long) = (r4 I:double A[D('it' double)]) type: STATIC call: java.lang.Double.doubleToLongBits(double):long A[MD:(double):long (c)] (LINE:215)\l0x000e: INVOKE  (r9 I:long) = (r13 I:double A[D('element' double)]) type: STATIC call: java.lang.Double.doubleToLongBits(double):long A[MD:(double):long (c)]\l0x0012: CMP_L  (r11 I:int) = (r7 I:long), (r9 I:long) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0018 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|0x0016: CONST  (r7 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|0x0019: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x001c \l}"];
Node_26 [shape=record,label="{26\:\ 0x001c|LOOP_END\lLOOP:0: B:19:0x0005\-\>B:26:0x001c\l|0x001c: ARITH  (r2 I:int) = (r2 I:int A[D('index$iv' int)]) + (1 int)  (LINE:3423)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0020|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0020: RETURN  (r2 I:int) A[SYNTHETIC] (LINE:215)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|0x0018: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001f|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: CONST  (r2 I:??[int, float, short, byte, char] A[D('index$iv' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:3428)\l0x0020: RETURN  (r2 I:int)  (LINE:215)\l}"];
MethodNode[shape=record,label="{public int kotlin.collections.ArraysKt___ArraysJvmKt$asList$6.indexOf((r12 'this' I:kotlin.collections.ArraysKt___ArraysJvmKt$asList$6 A[IMMUTABLE_TYPE, THIS]), (r13 I:double A[D('element' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:26:0x001c \-\> B:19:0x0005, CROSS_EDGE: B:23:0x0018 \-\> B:24:0x0019, CROSS_EDGE: B:27:0x001f \-\> B:28:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x0019: r4 'it' D\l  0x000a\-0x0019: r6 '$i$a$\-indexOfFirst\-ArraysKt___ArraysJvmKt$asList$6$indexOf$1' I\l  0x0004\-0x001f: r2 'index$iv' I\l  0x0002\-0x0020: r0 '$this$indexOfFirst$iv' [D\l  0x0003\-0x0020: r1 '$i$f$indexOfFirst' I\l  \-1 \-0x0020: r13 'element' D\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_26;
Node_24 -> Node_30[style=dashed];
Node_26 -> Node_19;
Node_30 -> Node_31;
Node_31 -> Node_17;
Node_23 -> Node_24;
Node_29 -> Node_27;
Node_27 -> Node_17;
}

