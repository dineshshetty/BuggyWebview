digraph "CFG forkotlin.collections.AbstractCollection$toString$1.invoke(Ljava\/lang\/Object;)Ljava\/lang\/CharSequence;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.collections.AbstractCollection\<E\>) = (r1 I:kotlin.collections.AbstractCollection$toString$1) kotlin.collections.AbstractCollection$toString$1.this$0 kotlin.collections.AbstractCollection  (LINE:27)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' java.lang.Object)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0007 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: CONST_STR  (r0 I:java.lang.String) =  \"(this Collection)\" \l}"];
Node_6 [shape=record,label="{6\:\ 0x000b|0x000b: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.Object A[D('it' java.lang.Object)]) type: STATIC call: java.lang.String.valueOf(java.lang.Object):java.lang.String A[MD:(java.lang.Object):java.lang.String (c)]\l}"];
MethodNode[shape=record,label="{public final java.lang.CharSequence kotlin.collections.AbstractCollection$toString$1.invoke((r1 'this' I:kotlin.collections.AbstractCollection$toString$1 A[IMMUTABLE_TYPE, THIS]), (r2 I:E A[D('it' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x0007 \-\> B:6:0x000b\lTYPE_VARS: EMPTY\lSIGNATURE: (TE;)Ljava\/lang\/CharSequence;\lDebug Info:\l  \-1 \-0x000d: r2 'it' Ljava\/lang\/Object;\lBRIDGED_BY: kotlin.collections.AbstractCollection$toString$1.invoke(java.lang.Object):java.lang.CharSequence\lJadxCommentsAttr\{\l WARN: \l \-\> Can't rename method to resolve collision\}\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function1.invoke(P1):R]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
}

