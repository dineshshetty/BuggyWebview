digraph "CFG forkotlin.collections.ArraysKt___ArraysJvmKt$asList$5.contains(F)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|float[] r0 = r11.$this_asList\lint r2 = r0.length\lr4 = 0\l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|LOOP_START\lLOOP:0: B:20:0x0006\-\>B:28:0x001e\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:19:0x0000, B:28:0x001e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0007|if (r4 \>= r2) goto L13\l}"];
Node_22 [shape=record,label="{22\:\ 0x0009|r6 = r0[r4]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|if (java.lang.Float.floatToIntBits(r6) != java.lang.Float.floatToIntBits(r12)) goto L12\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|r9 = true\l}"];
Node_26 [shape=record,label="{26\:\ 0x001a|PHI: r9 \l  PHI: (r9v2 boolean) = (r9v1 boolean), (r9v3 boolean) binds: [B:25:0x0019, B:24:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r9 == false) goto L8\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|LOOP_END\lLOOP:0: B:20:0x0006\-\>B:28:0x001e\l|int r4 = r4 + 1\l}"];
Node_32 [shape=record,label="{32\:\ 0x001c|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001c|RETURN\lORIG_RETURN\l|return true\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0019|r9 = false\l}"];
Node_31 [shape=record,label="{31\:\ 0x0022|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.ArraysKt___ArraysJvmKt$asList$5.contains((r11v0 'this' kotlin.collections.ArraysKt___ArraysJvmKt$asList$5 A[IMMUTABLE_TYPE, THIS]), (r12v0 'element' float A[D('element' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x001e \-\> B:20:0x0006, CROSS_EDGE: B:25:0x0019 \-\> B:26:0x001a, CROSS_EDGE: B:21:0x0007 \-\> B:30:0x0022\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_31;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_32[style=dashed];
Node_28 -> Node_20;
Node_32 -> Node_27;
Node_27 -> Node_18;
Node_25 -> Node_26;
Node_31 -> Node_33;
Node_33 -> Node_18;
}

