digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt(Ljava\/util\/List;Lkotlin\/jvm\/functions\/Function1;Z)Z" {
subgraph cluster_Region_401753527 {
label = "R(1:(2:(2:3|4)|(3:6|(2:9|(2:(1:13)|14)(0))|(2:(1:29)|(2:21|(2:(1:28)|(1:(2:23|(2:(1:27)|(1:25))))))))))";
node [shape=record,color=blue];
subgraph cluster_Region_1497682267 {
label = "R(2:(2:3|4)|(3:6|(2:9|(2:(1:13)|14)(0))|(2:(1:29)|(2:21|(2:(1:28)|(1:(2:23|(2:(1:27)|(1:25)))))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1723130504 {
label = "IF [B:35:0x0002] THEN: R(2:3|4) ELSE: null";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0002|if ((r6 instanceof java.util.RandomAccess) == false) goto L3\l}"];
subgraph cluster_Region_506274049 {
label = "R(2:3|4)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0004|kotlin.jvm.internal.Intrinsics.checkNotNull(r6, \"null cannot be cast to non\-null type kotlin.collections.MutableIterable\<T of kotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace\>\")\l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|RETURN\l|return filterInPlace$CollectionsKt__MutableCollectionsKt(kotlin.jvm.internal.TypeIntrinsics.asMutableIterable(r6), r7, r8)\l}"];
}
}
subgraph cluster_Region_1889376642 {
label = "R(3:6|(2:9|(2:(1:13)|14)(0))|(2:(1:29)|(2:21|(2:(1:28)|(1:(2:23|(2:(1:27)|(1:25))))))))";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0012|int r0 = 0\lkotlin.collections.IntIterator ?? r1 = new kotlin.ranges.IntRange(0, kotlin.collections.CollectionsKt.getLastIndex(r6)).iterator()\l}"];
subgraph cluster_LoopRegion_1397080883 {
label = "LOOP:0: (2:9|(2:(1:13)|14)(0))";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0025|if (r1.hasNext() != false) goto L9\l}"];
subgraph cluster_Region_1351499951 {
label = "R(2:9|(2:(1:13)|14)(0))";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0027|int int r2 = r1.nextInt()\ljava.lang.Object T r4 = r6.get(r2)\l}"];
subgraph cluster_IfRegion_270446838 {
label = "IF [B:42:0x0039] THEN: R(2:(1:13)|14) ELSE: R(0)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0039|if (r7.invoke(r4).booleanValue() != r8) goto L11\l}"];
subgraph cluster_Region_932239919 {
label = "R(2:(1:13)|14)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1419338463 {
label = "IF [B:44:0x003c] THEN: R(1:13) ELSE: null";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x003c|if (r0 != r2) goto L13\l}"];
subgraph cluster_Region_281817911 {
label = "R(1:13)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x003e|r6.set(r0, r4)\l}"];
}
}
Node_46 [shape=record,label="{46\:\ 0x0041|r0++\l}"];
}
subgraph cluster_Region_460783758 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
subgraph cluster_Region_1690752178 {
label = "R(2:(1:29)|(2:21|(2:(1:28)|(1:(2:23|(2:(1:27)|(1:25)))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_209844517 {
label = "IF [B:48:0x0049] THEN: R(1:29) ELSE: null";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x0049|if (r0 \>= r6.size()) goto L29\l}"];
subgraph cluster_Region_623364608 {
label = "R(1:29)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x005b|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1695787341 {
label = "R(2:21|(2:(1:28)|(1:(2:23|(2:(1:27)|(1:25))))))";
node [shape=record,color=blue];
Node_49 [shape=record,label="{49\:\ 0x004b|int int r1 = kotlin.collections.CollectionsKt.getLastIndex(r6)\l}"];
subgraph cluster_Region_1383453324 {
label = "R(2:(1:28)|(1:(2:23|(2:(1:27)|(1:25)))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1030818616 {
label = "IF [B:50:0x004f] THEN: R(1:28) ELSE: null";
node [shape=record,color=blue];
Node_50 [shape=record,label="{50\:\ 0x004f|if (r0 \> r1) goto L28\l}"];
subgraph cluster_Region_1898302268 {
label = "R(1:28)";
node [shape=record,color=blue];
Node_54 [shape=record,label="{54\:\ 0x0059|RETURN\lORIG_RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_596964078 {
label = "R(1:(2:23|(2:(1:27)|(1:25))))";
node [shape=record,color=blue];
subgraph cluster_LoopRegion_947407702 {
label = "LOOP:1: (2:23|(2:(1:27)|(1:25)))";
node [shape=record,color=blue];
subgraph cluster_Region_850855223 {
label = "R(2:23|(2:(1:27)|(1:25)))";
node [shape=record,color=blue];
Node_51 [shape=record,label="{51\:\ 0x0051|LOOP_START\lLOOP:1: B:51:0x0051\-\>B:53:0x0056\lPHI: r1 \l  PHI: (r1v5 'removeIndex' int) = (r1v3 'removeIndex' int), (r1v7 'removeIndex' int) binds: [B:50:0x004f, B:53:0x0056] A[DONT_GENERATE, DONT_INLINE]\l|r6.remove(r1)\l}"];
subgraph cluster_Region_1155862375 {
label = "R(2:(1:27)|(1:25))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_585177555 {
label = "IF [B:52:0x0054] THEN: R(1:27) ELSE: null";
node [shape=record,color=blue];
Node_52 [shape=record,label="{52\:\ 0x0054|if (r1 == r0) goto L26\l}"];
subgraph cluster_Region_457588972 {
label = "R(1:27)";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1326848957 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_53 [shape=record,label="{53\:\ 0x0056|LOOP_END\lLOOP:1: B:51:0x0051\-\>B:53:0x0056\l|r1\-\-\l}"];
}
}
}
}
}
}
}
}
}
}
}
Node_32 [shape=record,color=red,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0000}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x0021|LOOP_START\lLOOP:0: B:39:0x0021\-\>B:59:0x0021\lPHI: r0 \l  PHI: (r0v2 'writeIndex' int) = (r0v1 'writeIndex' int), (r0v3 'writeIndex' int) binds: [B:38:0x0012, B:59:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x003c|SYNTHETIC\l}"];
Node_61 [shape=record,color=red,label="{61\:\ 0x0021|SYNTHETIC\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0021|LOOP_END\lSYNTHETIC\lLOOP:0: B:39:0x0021\-\>B:59:0x0021\lPHI: r0 \l  PHI: (r0v3 'writeIndex' int) = (r0v2 'writeIndex' int), (r0v4 'writeIndex' int) binds: [B:60:0x0021, B:61:0x0021] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x0021|SYNTHETIC\l}"];
Node_57 [shape=record,color=red,label="{57\:\ 0x0045|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x0045}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x0059|SYNTHETIC\l}"];
MethodNode[shape=record,label="{private static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt((r6v0 java.util.List\<T\> A[D('$this$filterInPlace' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'predicateResultToRemove' boolean A[D('predicateResultToRemove' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:46:0x0041 \-\> B:39:0x0021, CROSS_EDGE: B:44:0x003c \-\> B:46:0x0041, BACK_EDGE: B:42:0x0039 \-\> B:39:0x0021, BACK_EDGE: B:53:0x0056 \-\> B:51:0x0051, CROSS_EDGE: B:55:0x005a \-\> B:33:?, CROSS_EDGE: B:50:0x004f \-\> B:54:0x0059, CROSS_EDGE: B:56:0x005b \-\> B:33:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r1v1, types: [kotlin.collections.IntIterator]\}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;Z)Z\l}"];
MethodNode -> Node_32;Node_35 -> Node_36;
Node_35 -> Node_38[style=dashed];
Node_36 -> Node_37;
Node_37 -> Node_33;
Node_38 -> Node_39;
Node_40 -> Node_41;
Node_40 -> Node_57[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_58;
Node_42 -> Node_60[style=dashed];
Node_44 -> Node_45;
Node_44 -> Node_46[style=dashed];
Node_45 -> Node_46;
Node_46 -> Node_61;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_56;
Node_56 -> Node_33;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_54;
Node_54 -> Node_33;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_62;
Node_63 -> Node_33;
Node_53 -> Node_51;
Node_32 -> Node_34;
Node_34 -> Node_35;
Node_39 -> Node_40;
Node_58 -> Node_44;
Node_61 -> Node_59;
Node_59 -> Node_39;
Node_60 -> Node_59;
Node_57 -> Node_47;
Node_47 -> Node_48;
Node_62 -> Node_63;
}

