digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.removeAll(Ljava\/util\/Collection;[Ljava\/lang\/Object;)Z" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"elements\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x000d|if (r4.length != 0) goto L12\l}"];
Node_18 [shape=record,label="{18\:\ 0x000f|r0 = true\l}"];
Node_20 [shape=record,label="{20\:\ 0x0012|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v8 boolean) binds: [B:19:0x0011, B:18:0x000f] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|if ((r0 ^ true) == false) goto L11\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015}"];
Node_23 [shape=record,label="{23\:\ 0x001d|if (r3.removeAll(kotlin.collections.BrittleContainsOptimization.convertToSetForSetOperation(r4)) == false) goto L10\l}"];
Node_24 [shape=record,label="{24\:\ 0x001f|RETURN\lORIG_RETURN\l|return true\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
Node_19 [shape=record,label="{19\:\ 0x0011|r0 = false\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.removeAll((r3v0 java.util.Collection\<? super T\> A[D('$this$removeAll' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'elements' T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x001d \-\> B:25:0x0020, CROSS_EDGE: B:21:0x0013 \-\> B:25:0x0020, CROSS_EDGE: B:19:0x0011 \-\> B:20:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<\-TT;\>;[TT;)Z\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_26;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_27;
Node_24 -> Node_15;
Node_27 -> Node_15;
Node_26 -> Node_15;
Node_19 -> Node_20;
}

