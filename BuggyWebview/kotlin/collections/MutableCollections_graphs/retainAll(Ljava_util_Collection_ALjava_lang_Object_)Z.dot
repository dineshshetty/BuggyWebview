digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll(Ljava\/util\/Collection;[Ljava\/lang\/Object;)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"elements\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|if (r3.length != 0) goto L11\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|r0 = true\l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|PHI: r0 \l  PHI: (r0v4 boolean) = (r0v3 boolean), (r0v9 boolean) binds: [B:17:0x0010, B:16:0x000e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|if ((r0 ^ true) == false) goto L9\l}"];
Node_20 [shape=record,label="{20\:\ 0x0014}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\l|return r2.retainAll(kotlin.collections.BrittleContainsOptimization.convertToSetForSetOperation(r3))\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d}"];
Node_23 [shape=record,label="{23\:\ 0x0021|RETURN\l|return retainNothing$CollectionsKt__MutableCollectionsKt(r2)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|r0 = false\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll((r2v0 java.util.Collection\<? super T\> A[D('$this$retainAll' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'elements' T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0021 \-\> B:13:?, CROSS_EDGE: B:17:0x0010 \-\> B:18:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<\-TT;\>;[TT;)Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
}

