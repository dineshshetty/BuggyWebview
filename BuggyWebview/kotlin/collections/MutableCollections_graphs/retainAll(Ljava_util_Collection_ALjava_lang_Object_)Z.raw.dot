digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll(Ljava\/util\/Collection;[Ljava\/lang\/Object;)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$retainAll' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('elements' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: ARRAY_LENGTH  (r0 I:int) = (r3 I:??[] A[D('elements' java.lang.Object[])])  (LINE:177)\l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:17:0x0010 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|0x000e: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0011|0x0011: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) ^ (r1 I:??[int, boolean, short, byte, char]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x001d \l}"];
Node_20 [shape=record,label="{20\:\ 0x0014|0x0014: INVOKE  (r0 I:java.util.Collection) = (r3 I:java.lang.Object[] A[D('elements' java.lang.Object[])]) type: STATIC call: kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperation(java.lang.Object[]):java.util.Collection A[MD:\<T\>:(T[]):java.util.Collection\<T\> (m)] (LINE:178)\l0x0018: INVOKE  (r0 I:boolean) = (r2 I:java.util.Collection A[D('$this$retainAll' java.util.Collection)]), (r0 I:java.util.Collection) type: INTERFACE call: java.util.Collection.retainAll(java.util.Collection):boolean A[MD:(java.util.Collection\<?\>):boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x001c|RETURN\l|0x001c: RETURN  (r0 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|0x001d: INVOKE  (r0 I:boolean) = (r2 I:java.util.Collection A[D('$this$retainAll' java.util.Collection)]) type: STATIC call: kotlin.collections.CollectionsKt__MutableCollectionsKt.retainNothing$CollectionsKt__MutableCollectionsKt(java.util.Collection):boolean A[MD:(java.util.Collection\<?\>):boolean (m)] (LINE:180)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:boolean) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|0x0010: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll((r2 I:java.util.Collection\<? super T\> A[D('$this$retainAll' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0021 \-\> B:13:?, CROSS_EDGE: B:17:0x0010 \-\> B:18:0x0011\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0021: r2 '$this$retainAll' Ljava\/util\/Collection;\l  \-1 \-0x0021: r3 'elements' [Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<\-TT;\>;[TT;)Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_23;
Node_23 -> Node_13;
Node_17 -> Node_18;
}

