digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll(Ljava\/util\/Collection;Lkotlin\/sequences\/Sequence;)Z" {
subgraph cluster_Region_698903240 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"elements\")\ljava.util.Collection java.util.Collection r0 = kotlin.collections.BrittleContainsOptimization.convertToSetForSetOperation(r3)\l}"];
subgraph cluster_Region_93839428 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_281686527 {
label = "IF [B:11:0x0014] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0014|if ((!r0.isEmpty()) != false) goto L3\l}"];
subgraph cluster_Region_1721951342 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x001a|RETURN\l|return r2.retainAll(r0)\l}"];
}
}
subgraph cluster_Region_2003436954 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x001f|RETURN\l|return retainNothing$CollectionsKt__MutableCollectionsKt(r2)\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0016}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x001b}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll((r2v0 java.util.Collection\<? super T\> A[D('$this$retainAll' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'elements' kotlin.sequences.Sequence\<? extends T\> A[D('elements' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001f \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<\-TT;\>;Lkotlin\/sequences\/Sequence\<+TT;\>;)Z\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_12 -> Node_13;
Node_14 -> Node_15;
}

