digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.addAll(Ljava\/util\/Collection;Ljava\/lang\/Iterable;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$addAll' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('elements' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000b: INSTANCE_OF  (r0 I:boolean) = (r5 I:??[OBJECT, ARRAY] A[D('elements' java.lang.Iterable)]) java.util.Collection  (LINE:116)\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0017 \l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('elements' java.lang.Iterable)]) \l0x0010: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l0x0012: INVOKE  (r0 I:boolean) = (r4 I:java.util.Collection A[D('$this$addAll' java.util.Collection)]), (r0 I:java.util.Collection) type: INTERFACE call: java.util.Collection.addAll(java.util.Collection):boolean A[MD:(java.util.Collection\<? extends E\>):boolean (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0016|RETURN\l|0x0016: RETURN  (r0 I:boolean) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0017|0x0017: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:118)\l0x0018: INVOKE  (r1 I:java.util.Iterator) = (r5 I:java.lang.Iterable A[D('elements' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:119)\l}"];
Node_25 [shape=record,label="{25\:\ 0x001c|LOOP_START\lLOOP:0: B:25:0x001c\-\>B:33:0x001c\l|0x001c: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0020|0x0020: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x002e \l}"];
Node_27 [shape=record,label="{27\:\ 0x0022|0x0022: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0026: INVOKE  (r3 I:boolean) = \l  (r4 I:java.util.Collection A[D('$this$addAll' java.util.Collection)])\l  (r2 I:java.lang.Object A[D('item' java.lang.Object)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:120)\l}"];
Node_28 [shape=record,label="{28\:\ 0x002a|0x002a: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x001c \l}"];
Node_32 [shape=record,label="{32\:\ 0x002c|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x002c|0x002c: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('result' boolean)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x001c|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x001c|LOOP_END\lSYNTHETIC\lLOOP:0: B:25:0x001c\-\>B:33:0x001c\l}"];
Node_34 [shape=record,label="{34\:\ 0x001c|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x002e|SYNTHETIC\l}"];
Node_30 [shape=record,label="{30\:\ 0x002e|RETURN\l|0x002e: RETURN  (r0 I:boolean A[D('result' boolean)])  (LINE:121)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.addAll((r4 I:java.util.Collection\<? super T\> A[D('$this$addAll' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.Iterable\<? extends T\> A[D('elements' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x002a \-\> B:25:0x001c, BACK_EDGE: B:29:0x002c \-\> B:25:0x001c, CROSS_EDGE: B:30:0x002e \-\> B:19:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<\-TT;\>;Ljava\/lang\/Iterable\<+TT;\>;)Z\lDebug Info:\l  0x0026\-0x002d: r2 'item' Ljava\/lang\/Object;\l  0x0018\-0x002e: r0 'result' Z\l  \-1 \-0x002e: r4 '$this$addAll' Ljava\/util\/Collection;\l  \-1 \-0x002e: r5 'elements' Ljava\/lang\/Iterable;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23;
Node_23 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_31;
Node_27 -> Node_28;
Node_28 -> Node_32[style=dashed];
Node_28 -> Node_34;
Node_32 -> Node_29;
Node_29 -> Node_35;
Node_35 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_33;
Node_31 -> Node_30;
Node_30 -> Node_19;
}

