digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll(Ljava\/util\/Collection;Lkotlin\/sequences\/Sequence;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$retainAll' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('elements' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:java.util.Collection) = (r3 I:kotlin.sequences.Sequence A[D('elements' kotlin.sequences.Sequence)]) type: STATIC call: kotlin.collections.BrittleContainsOptimizationKt.convertToSetForSetOperation(kotlin.sequences.Sequence):java.util.Collection A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):java.util.Collection\<T\> (m)] (LINE:187)\l0x000e: INVOKE  (r1 I:boolean) = (r0 I:java.util.Collection A[D('set' java.util.Collection)]) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)] (LINE:188)\l0x0012: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|0x0014: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x001b \l}"];
Node_12 [shape=record,label="{12\:\ 0x0016|0x0016: INVOKE  (r1 I:boolean) = \l  (r2 I:java.util.Collection A[D('$this$retainAll' java.util.Collection)])\l  (r0 I:java.util.Collection A[D('set' java.util.Collection)])\l type: INTERFACE call: java.util.Collection.retainAll(java.util.Collection):boolean A[MD:(java.util.Collection\<?\>):boolean (c)] (LINE:189)\l}"];
Node_13 [shape=record,label="{13\:\ 0x001a|RETURN\l|0x001a: RETURN  (r1 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x001b|0x001b: INVOKE  (r1 I:boolean) = (r2 I:java.util.Collection A[D('$this$retainAll' java.util.Collection)]) type: STATIC call: kotlin.collections.CollectionsKt__MutableCollectionsKt.retainNothing$CollectionsKt__MutableCollectionsKt(java.util.Collection):boolean A[MD:(java.util.Collection\<?\>):boolean (m)] (LINE:191)\l}"];
Node_15 [shape=record,label="{15\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.retainAll((r2 I:java.util.Collection\<? super T\> A[D('$this$retainAll' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.sequences.Sequence\<? extends T\> A[D('elements' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x001f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000e\-0x001f: r0 'set' Ljava\/util\/Collection;\l  \-1 \-0x001f: r2 '$this$retainAll' Ljava\/util\/Collection;\l  \-1 \-0x001f: r3 'elements' Lkotlin\/sequences\/Sequence;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Collection\<\-TT;\>;Lkotlin\/sequences\/Sequence\<+TT;\>;)Z\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

