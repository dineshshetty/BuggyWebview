digraph "CFG forkotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt(Ljava\/util\/List;Lkotlin\/jvm\/functions\/Function1;Z)Z" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r6 I:??[OBJECT, ARRAY] A[D('$this$filterInPlace' java.util.List)]) java.util.RandomAccess  (LINE:279)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0012 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0004|0x0004: CONST_STR  (r0 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.collections.MutableIterable\<T of kotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace\>\"  (LINE:280)\l0x0006: INVOKE  (r6 I:java.lang.Object A[D('$this$filterInPlace' java.util.List)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0009: INVOKE  (r0 I:java.lang.Iterable) = (r6 I:java.lang.Object A[D('$this$filterInPlace' java.util.List)]) type: STATIC call: kotlin.jvm.internal.TypeIntrinsics.asMutableIterable(java.lang.Object):java.lang.Iterable A[MD:(java.lang.Object):java.lang.Iterable (m)]\l0x000d: INVOKE  (r0 I:boolean) = \l  (r0 I:java.lang.Iterable)\l  (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r8 I:boolean A[D('predicateResultToRemove' boolean)])\l type: STATIC call: kotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt(java.lang.Iterable, kotlin.jvm.functions.Function1, boolean):boolean A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\>, boolean):boolean (m)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:boolean) \l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:282)\l0x0013: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:283)\l0x0015: INVOKE  (r2 I:int) = (r6 I:java.util.List A[D('$this$filterInPlace' java.util.List)]) type: STATIC call: kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int A[MD:\<T\>:(java.util.List\<? extends T\>):int (m)]\l0x0019: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001a: INVOKE  (r1 I:kotlin.ranges.IntRange), (r3 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x001d: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r1 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0021|LOOP_START\lLOOP:0: B:39:0x0021\-\>B:59:0x0021\l|0x0021: INVOKE  (r2 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:57:0x0045 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0027|0x0027: INVOKE  (r2 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x002b: INVOKE  (r4 I:java.lang.Object) = (r6 I:java.util.List A[D('$this$filterInPlace' java.util.List)]), (r2 I:int A[D('readIndex' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)] (LINE:284)\l0x002f: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:285)\l0x0033: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0035: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0039|0x0039: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('predicateResultToRemove' boolean)])  \-\> B:58:0x003c \l}"];
Node_58 [shape=record,label="{58\:\ 0x003c|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x003c|0x003c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('writeIndex' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('readIndex' int)])  \-\> B:46:0x0041  (LINE:288)\l}"];
Node_45 [shape=record,label="{45\:\ 0x003e|0x003e: INVOKE  \l  (r6 I:java.util.List A[D('$this$filterInPlace' java.util.List)])\l  (r0 I:int A[D('writeIndex' int)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: java.util.List.set(int, java.lang.Object):java.lang.Object A[MD:(int, E):E (c)] (LINE:289)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0041|0x0042: ARITH  (r0 I:int) = (r0 I:int A[D('writeIndex' int)]) + (1 int) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0021|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0021|LOOP_END\lSYNTHETIC\lLOOP:0: B:39:0x0021\-\>B:59:0x0021\l}"];
Node_60 [shape=record,label="{60\:\ 0x0021|SYNTHETIC\l}"];
Node_57 [shape=record,label="{57\:\ 0x0045|SYNTHETIC\l}"];
Node_47 [shape=record,label="{47\:\ 0x0045|0x0045: INVOKE  (r1 I:int) = (r6 I:java.util.List A[D('$this$filterInPlace' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:293)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0049|0x0049: IF  (r0 I:??[int, byte, short, char] A[D('writeIndex' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:56:0x005b \l}"];
Node_49 [shape=record,label="{49\:\ 0x004b|0x004b: INVOKE  (r1 I:int) = (r6 I:java.util.List A[D('$this$filterInPlace' java.util.List)]) type: STATIC call: kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int A[MD:\<T\>:(java.util.List\<? extends T\>):int (m)] (LINE:294)\l}"];
Node_50 [shape=record,label="{50\:\ 0x004f|0x004f: IF  (r0 I:??[int, byte, short, char] A[D('writeIndex' int)]) \> (r1 I:??[int, byte, short, char] A[D('removeIndex' int)])  \-\> B:54:0x0059 \l}"];
Node_51 [shape=record,label="{51\:\ 0x0051|LOOP_START\lLOOP:1: B:51:0x0051\-\>B:53:0x0056\l|0x0051: INVOKE  (r6 I:java.util.List A[D('$this$filterInPlace' java.util.List)]), (r1 I:int A[D('removeIndex' int)]) type: INTERFACE call: java.util.List.remove(int):java.lang.Object A[MD:(int):E (c)] (LINE:295)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0054|0x0054: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('removeIndex' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('writeIndex' int)])  \-\> B:62:0x0059  (LINE:294)\l}"];
Node_53 [shape=record,label="{53\:\ 0x0056|LOOP_END\lLOOP:1: B:51:0x0051\-\>B:53:0x0056\l|0x0056: ARITH  (r1 I:int) = (r1 I:int A[D('removeIndex' int)]) + (\-1 int) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0059|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ ?|SYNTHETIC\lRETURN\l|0x0059: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('removeIndex' int)]) = (1 ??[boolean, int, float, short, byte, char]) A[SYNTHETIC] (LINE:297)\l0x005a: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_54 [shape=record,label="{54\:\ 0x0059|RETURN\lORIG_RETURN\l|0x0059: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('removeIndex' int)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:297)\l0x005a: RETURN  (r1 I:boolean) \l}"];
Node_56 [shape=record,label="{56\:\ 0x005b|RETURN\l|0x005b: RETURN  (r3 I:boolean)  (LINE:299)\l}"];
MethodNode[shape=record,label="{private static final boolean kotlin.collections.CollectionsKt__MutableCollectionsKt.filterInPlace$CollectionsKt__MutableCollectionsKt((r6 I:java.util.List\<T\> A[D('$this$filterInPlace' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('predicateResultToRemove' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:46:0x0041 \-\> B:39:0x0021, CROSS_EDGE: B:44:0x003c \-\> B:46:0x0041, BACK_EDGE: B:42:0x0039 \-\> B:39:0x0021, BACK_EDGE: B:53:0x0056 \-\> B:51:0x0051, CROSS_EDGE: B:55:0x005a \-\> B:33:?, CROSS_EDGE: B:50:0x004f \-\> B:54:0x0059, CROSS_EDGE: B:56:0x005b \-\> B:33:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002b\-0x0042: r2 'readIndex' I\l  0x002f\-0x0042: r4 'element' Ljava\/lang\/Object;\l  0x004f\-0x0059: r1 'removeIndex' I\l  0x0013\-0x005b: r0 'writeIndex' I\l  \-1 \-0x005b: r6 '$this$filterInPlace' Ljava\/util\/List;\l  \-1 \-0x005b: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\l  \-1 \-0x005b: r8 'predicateResultToRemove' Z\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/List\<TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;Z)Z\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_33;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_57;
Node_41 -> Node_42;
Node_42 -> Node_58;
Node_42 -> Node_60[style=dashed];
Node_58 -> Node_44;
Node_44 -> Node_45[style=dashed];
Node_44 -> Node_46;
Node_45 -> Node_46;
Node_46 -> Node_61;
Node_61 -> Node_59;
Node_59 -> Node_39;
Node_60 -> Node_59;
Node_57 -> Node_47;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_56;
Node_49 -> Node_50;
Node_50 -> Node_51[style=dashed];
Node_50 -> Node_54;
Node_51 -> Node_52;
Node_52 -> Node_53[style=dashed];
Node_52 -> Node_62;
Node_53 -> Node_51;
Node_62 -> Node_63;
Node_63 -> Node_33;
Node_54 -> Node_33;
Node_56 -> Node_33;
}

