digraph "CFG forkotlin.collections.CollectionSystemProperties.\<clinit\>()V" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.collections.CollectionSystemProperties) =  kotlin.collections.CollectionSystemProperties \l0x0002: INVOKE  (r0 I:kotlin.collections.CollectionSystemProperties) type: DIRECT call: kotlin.collections.CollectionSystemProperties.\<init\>():void A[MD:():void (m)]\l0x0005: SPUT  (r0 I:kotlin.collections.CollectionSystemProperties) kotlin.collections.CollectionSystemProperties.INSTANCE kotlin.collections.CollectionSystemProperties \l0x0007: CONST_STR  (r0 I:java.lang.String) =  \"kotlin.collections.convert_arg_to_set_in_removeAll\"  (LINE:128)\l0x0009: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.String) type: STATIC call: java.lang.System.getProperty(java.lang.String):java.lang.String A[MD:(java.lang.String):java.lang.String (c)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0014 \l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|0x000f: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String) type: STATIC call: java.lang.Boolean.parseBoolean(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|0x0015: SPUT  (r0 I:boolean) kotlin.collections.CollectionSystemProperties.brittleContainsOptimizationEnabled boolean \l}"];
Node_15 [shape=record,label="{15\:\ 0x0017|RETURN\l|0x0017: RETURN   \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|0x0014: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{static void kotlin.collections.CollectionSystemProperties.\<clinit\>()  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0014 \-\> B:14:0x0015\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

