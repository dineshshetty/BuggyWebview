digraph "CFG forkotlin.collections.SlidingWindowKt.windowedSequence(Lkotlin\/sequences\/Sequence;IIZZ)Lkotlin\/sequences\/Sequence;" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$windowedSequence' kotlin.sequences.Sequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r8 I:int A[D('size' int)]), (r9 I:int A[D('step' int)]) type: STATIC call: kotlin.collections.SlidingWindowKt.checkWindowSizeStep(int, int):void A[MD:(int, int):void (m)] (LINE:18)\l0x0008: NEW_INSTANCE  (r0 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1) =  kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1  (LINE:19)\l0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x000b: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$windowedSequence' kotlin.sequences.Sequence)]) \l0x000c: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('size' int)]) \l0x000d: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('step' int)]) \l0x000e: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('partialWindows' boolean)]) \l0x000f: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('reuseBuffer' boolean)]) \l0x0010: INVOKE  \l  (r1 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1)\l  (r2 I:kotlin.sequences.Sequence)\l  (r3 I:int)\l  (r4 I:int)\l  (r5 I:boolean)\l  (r6 I:boolean)\l type: DIRECT call: kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.\<init\>(kotlin.sequences.Sequence, int, int, boolean, boolean):void A[MD:(kotlin.sequences.Sequence, int, int, boolean, boolean):void (m)]\l0x0013: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|RETURN\l|0x0015: RETURN  (r0 I:kotlin.sequences.Sequence\<java.util.List\<T\>\>) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.sequences.Sequence\<java.util.List\<T\>\> kotlin.collections.SlidingWindowKt.windowedSequence((r7 I:kotlin.sequences.Sequence\<? extends T\> A[D('$this$windowedSequence' kotlin.sequences.Sequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('reuseBuffer' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0015: r7 '$this$windowedSequence' Lkotlin\/sequences\/Sequence;\l  \-1 \-0x0015: r8 'size' I\l  \-1 \-0x0015: r9 'step' I\l  \-1 \-0x0015: r10 'partialWindows' Z\l  \-1 \-0x0015: r11 'reuseBuffer' Z\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Lkotlin\/sequences\/Sequence\<+TT;\>;IIZZ)Lkotlin\/sequences\/Sequence\<Ljava\/util\/List\<TT;\>;\>;\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

