digraph "CFG forkotlin.collections.SlidingWindowKt.checkWindowSizeStep(II)V" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: IF  (r4 I:??[int, byte, short, char] A[D('size' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:19:0x0006  (LINE:9)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0002|0x0002: IF  (r5 I:??[int, byte, short, char] A[D('step' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:19:0x0006 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0004|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0007|0x0007: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x004a \l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|0x0009: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: CONST_STR  (r1 I:java.lang.String) =  \" must be greater than zero.\"  (LINE:10)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000c|0x000c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size' int)]) == (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('step' int)])  \-\> B:24:0x002b \l}"];
Node_23 [shape=record,label="{23\:\ 0x000e|0x000e: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:11)\l0x0010: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0013: CONST_STR  (r3 I:java.lang.String) =  \"Both size \" \l0x0015: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0018: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:int A[D('size' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x001b: CONST_STR  (r3 I:java.lang.String) =  \" and step \" \l0x001d: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0020: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:int A[D('step' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0023: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0026: INVOKE  (r1 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x003f|0x0040: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('$i$a$\-require\-SlidingWindowKt$checkWindowSizeStep$1' int)]) =  java.lang.IllegalArgumentException  (LINE:9)\l0x0042: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0046: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_26 [shape=record,label="{26\:\ 0x0049|0x0049: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|0x002b: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:13)\l0x002d: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0030: CONST_STR  (r3 I:java.lang.String) =  \"size \" \l0x0032: INVOKE  (r2 I:java.lang.StringBuilder), (r3 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0035: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:int A[D('size' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0038: INVOKE  (r2 I:java.lang.StringBuilder), (r1 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003b: INVOKE  (r1 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x004a|RETURN\l|0x004a: RETURN    (LINE:15)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0006|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.SlidingWindowKt.checkWindowSizeStep((r4 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x002b \-\> B:25:0x003f, CROSS_EDGE: B:27:0x004a \-\> B:15:?, CROSS_EDGE: B:19:0x0006 \-\> B:20:0x0007, CROSS_EDGE: B:16:0x0000 \-\> B:19:0x0006\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000a\-0x0040: r0 '$i$a$\-require\-SlidingWindowKt$checkWindowSizeStep$1' I\l  \-1 \-0x004a: r4 'size' I\l  \-1 \-0x004a: r5 'step' I\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_15;
Node_24 -> Node_25;
Node_27 -> Node_15;
Node_19 -> Node_20;
}

