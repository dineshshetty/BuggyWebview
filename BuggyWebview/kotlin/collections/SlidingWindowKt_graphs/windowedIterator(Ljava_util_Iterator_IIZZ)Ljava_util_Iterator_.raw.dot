digraph "CFG forkotlin.collections.SlidingWindowKt.windowedIterator(Ljava\/util\/Iterator;IIZZ)Ljava\/util\/Iterator;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"iterator\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('iterator' java.util.Iterator)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:boolean) = (r8 I:java.util.Iterator A[D('iterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:23)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0009|0x0009: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0010 \l}"];
Node_12 [shape=record,label="{12\:\ 0x000b|0x000b: SGET  (r0 I:kotlin.collections.EmptyIterator) =  kotlin.collections.EmptyIterator.INSTANCE kotlin.collections.EmptyIterator \l0x000d: CHECK_CAST (r0 I:java.util.Iterator) = (java.util.Iterator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|RETURN\l|0x000f: RETURN  (r0 I:java.util.Iterator\<java.util.List\<T\>\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0010|0x0010: NEW_INSTANCE  (r0 I:kotlin.collections.SlidingWindowKt$windowedIterator$1) =  kotlin.collections.SlidingWindowKt$windowedIterator$1  (LINE:24)\l0x0012: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0014: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('size' int)]) \l0x0015: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('step' int)]) \l0x0016: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('iterator' java.util.Iterator)]) \l0x0017: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('reuseBuffer' boolean)]) \l0x0018: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('partialWindows' boolean)]) \l0x0019: INVOKE  \l  (r1 I:kotlin.collections.SlidingWindowKt$windowedIterator$1)\l  (r2 I:int)\l  (r3 I:int)\l  (r4 I:java.util.Iterator)\l  (r5 I:boolean)\l  (r6 I:boolean)\l  (r7 I:kotlin.coroutines.Continuation)\l type: DIRECT call: kotlin.collections.SlidingWindowKt$windowedIterator$1.\<init\>(int, int, java.util.Iterator, boolean, boolean, kotlin.coroutines.Continuation):void A[MD:(int, int, java.util.Iterator\<? extends T\>, boolean, boolean, kotlin.coroutines.Continuation\<? super kotlin.collections.SlidingWindowKt$windowedIterator$1\>):void (m)]\l0x001c: CHECK_CAST (r0 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r0 I:??[OBJECT, ARRAY]) \l0x001e: INVOKE  (r0 I:java.util.Iterator) = (r0 I:kotlin.jvm.functions.Function2) type: STATIC call: kotlin.sequences.SequencesKt.iterator(kotlin.jvm.functions.Function2):java.util.Iterator A[MD:\<T\>:(kotlin.jvm.functions.Function2\<? super kotlin.sequences.SequenceScope\<? super T\>, ? super kotlin.coroutines.Continuation\<? super kotlin.Unit\>, ? extends java.lang.Object\>):java.util.Iterator\<T\> (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0022|RETURN\l|0x0022: RETURN  (r0 I:java.util.Iterator\<java.util.List\<T\>\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Iterator\<java.util.List\<T\>\> kotlin.collections.SlidingWindowKt.windowedIterator((r8 I:java.util.Iterator\<? extends T\> A[D('iterator' java.util.Iterator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('step' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('partialWindows' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[D('reuseBuffer' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x0022 \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0022: r8 'iterator' Ljava\/util\/Iterator;\l  \-1 \-0x0022: r9 'size' I\l  \-1 \-0x0022: r10 'step' I\l  \-1 \-0x0022: r11 'partialWindows' Z\l  \-1 \-0x0022: r12 'reuseBuffer' Z\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Iterator\<+TT;\>;IIZZ)Ljava\/util\/Iterator\<Ljava\/util\/List\<TT;\>;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

