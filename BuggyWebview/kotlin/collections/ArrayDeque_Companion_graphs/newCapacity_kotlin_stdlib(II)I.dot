digraph "CFG forkotlin.collections.ArrayDeque.Companion.newCapacity$kotlin_stdlib(II)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|int r0 = (r4 \>\> 1) + r4\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|if ((r0 \- r5) \>= 0) goto L4\l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|r0 = r5\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|PHI: r0 \l  PHI: (r0v2 'newCapacity' int) = (r0v1 'newCapacity' int), (r0v4 'newCapacity' int) binds: [B:15:0x0005, B:16:0x0007] A[DONT_GENERATE, DONT_INLINE]\l|r1 = kotlin.collections.ArrayDeque.maxArraySize\l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|if ((r0 \- kotlin.collections.ArrayDeque.maxArraySize) \<= 0) goto L11\l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|if (r5 \<= kotlin.collections.ArrayDeque.maxArraySize) goto L8\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|r1 = Integer.MAX_VALUE\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|PHI: r1 \l  PHI: (r1v2 'newCapacity' int) = (r1v1 'newCapacity' int), (r1v3 'newCapacity' int) binds: [B:19:0x000f, B:20:0x0011] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|RETURN\lORIG_RETURN\l|return r1\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return r0\l}"];
MethodNode[shape=record,label="{public final int kotlin.collections.ArrayDeque.Companion.newCapacity$kotlin_stdlib((r3v0 'this' kotlin.collections.ArrayDeque$Companion A[IMMUTABLE_TYPE, THIS]), (r4v0 'oldCapacity' int A[D('oldCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'minCapacity' int A[D('minCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x000f \-\> B:21:0x0014, CROSS_EDGE: B:18:0x000d \-\> B:22:0x0015, CROSS_EDGE: B:15:0x0005 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_13;
Node_23 -> Node_13;
}

