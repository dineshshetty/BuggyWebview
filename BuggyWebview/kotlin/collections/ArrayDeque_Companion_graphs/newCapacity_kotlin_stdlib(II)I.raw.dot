digraph "CFG forkotlin.collections.ArrayDeque.Companion.newCapacity$kotlin_stdlib(II)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: ARITH  (r0 I:int) = (r4 I:int A[D('oldCapacity' int)]) \>\> (1 int)  (LINE:568)\l0x0002: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int A[D('oldCapacity' int)]) \l0x0003: ARITH  (r1 I:int) = (r0 I:int A[D('newCapacity' int)]) \- (r5 I:int A[D('minCapacity' int)])  (LINE:569)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: IF  (r1 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:17:0x0008 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newCapacity' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('minCapacity' int)])  (LINE:570)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: CONST  (r1 I:??[int, float, short, byte, char]) = (2147483639(0x7ffffff7, float:NaN) ??[int, float, short, byte, char])  (LINE:571)\l0x000b: ARITH  (r2 I:int) = (r0 I:int A[D('newCapacity' int)]) \- (r1 I:int) \l}"];
Node_18 [shape=record,label="{18\:\ 0x000d|0x000d: IF  (r2 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:23:? \l}"];
Node_19 [shape=record,label="{19\:\ 0x000f|0x000f: IF  (r5 I:??[int, byte, short, char] A[D('minCapacity' int)]) \<= (r1 I:??[int, byte, short, char])  \-\> B:21:0x0014  (LINE:572)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: CONST  (r1 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newCapacity' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|RETURN\lORIG_RETURN\l|0x0015: RETURN  (r0 I:int A[D('newCapacity' int)])  (LINE:573)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x0015: RETURN  (r0 I:int A[D('newCapacity' int)]) A[SYNTHETIC] (LINE:573)\l}"];
MethodNode[shape=record,label="{public final int kotlin.collections.ArrayDeque.Companion.newCapacity$kotlin_stdlib((r3 'this' I:kotlin.collections.ArrayDeque$Companion A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('oldCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('minCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x000f \-\> B:21:0x0014, CROSS_EDGE: B:18:0x000d \-\> B:22:0x0015, CROSS_EDGE: B:15:0x0005 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0003\-0x0015: r0 'newCapacity' I\l  \-1 \-0x0015: r4 'oldCapacity' I\l  \-1 \-0x0015: r5 'minCapacity' I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_23;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_13;
Node_23 -> Node_13;
}

