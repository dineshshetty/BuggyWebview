digraph "CFG forkotlin.collections.CollectionsKt__IteratorsKt.forEach(Ljava\/util\/Iterator;Lkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_1110054696 {
label = "R(2:1|(1:4))";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"operation\")\l}"];
subgraph cluster_LoopRegion_1356321135 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0010|if (r2.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_30949217 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0012|LOOP_END\lLOOP:0: B:3:0x000c\-\>B:5:0x0012\l|java.lang.Object java.lang.Object r1 = (T) r2.next()\lr3.invoke(r1)\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x000c|LOOP_START\lLOOP:0: B:3:0x000c\-\>B:5:0x0012\l}"];
Node_7 [shape=record,color=red,label="{7\:\ 0x001a|SYNTHETIC\l}"];
Node_6 [shape=record,color=red,label="{6\:\ 0x001a}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.CollectionsKt__IteratorsKt.forEach((r2v0 java.util.Iterator\<? extends T\> A[D('$this$forEach' java.util.Iterator), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'operation' kotlin.jvm.functions.Function1\<? super T, kotlin.Unit\> A[D('operation' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:5:0x0012 \-\> B:3:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r1v1. Raw type applied. Possible types: T, ? super T\}\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/util\/Iterator\<+TT;\>;Lkotlin\/jvm\/functions\/Function1\<\-TT;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_7[style=dashed];
Node_5 -> Node_3;
Node_0 -> Node_2;
Node_3 -> Node_4;
Node_7 -> Node_6;
Node_6 -> Node_1;
}

