digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.none\-JOV_ifY([BLkotlin\/jvm\/functions\/Function1;)Z" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$this$none\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$none_u2dJOV_ifY' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:int) = (r5 I:byte[] A[D('$this$none_u2dJOV_ifY' byte[])]) type: STATIC call: kotlin.UByteArray.getSize\-impl(byte[]):int A[MD:(byte[]):int (m)] (LINE:8416)\l0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0010|LOOP_START\lLOOP:0: B:15:0x0010\-\>B:19:0x0027\l|0x0010: IF  (r2 I:??[int, byte, short, char]) \>= (r0 I:??[int, byte, short, char])  \-\> B:22:0x002a \l}"];
Node_16 [shape=record,label="{16\:\ 0x0012|0x0012: INVOKE  (r3 I:byte) = (r5 I:byte[] A[D('$this$none_u2dJOV_ifY' byte[])]), (r2 I:int) type: STATIC call: kotlin.UByteArray.get\-w2LRezQ(byte[], int):byte A[MD:(byte[], int):byte (m)]\l0x0016: INVOKE  (r4 I:kotlin.UByte) = (r3 I:byte A[D('element' byte)]) type: STATIC call: kotlin.UByte.box\-impl(byte):kotlin.UByte A[MD:(byte):kotlin.UByte (m)]\l0x001a: INVOKE  (r4 I:java.lang.Object) = (r6 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r4 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x001e: CHECK_CAST (r4 I:java.lang.Boolean) = (java.lang.Boolean) (r4 I:??[OBJECT, ARRAY]) \l0x0020: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0024|0x0024: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0027 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|LOOP_END\lLOOP:0: B:15:0x0010\-\>B:19:0x0027\l|0x0027: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0026|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|RETURN\l|0x0026: RETURN  (r1 I:boolean) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x002a|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x002a|RETURN\l|0x002a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:8417)\l0x002b: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{private static final boolean kotlin.collections.unsigned.UArraysKt___UArraysKt.none\-JOV_ifY((r5 I:byte[] A[D('$this$none_u2dJOV_ifY' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function1\<? super kotlin.UByte, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0027 \-\> B:15:0x0010, CROSS_EDGE: B:21:0x002b \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x002a: r3 'element' B\l  \-1 \-0x002b: r5 '$this$none_u2dJOV_ifY' [B\l  \-1 \-0x002b: r6 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: ([BLkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/UByte;Ljava\/lang\/Boolean;\>;)Z\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_23[style=dashed];
Node_19 -> Node_15;
Node_23 -> Node_18;
Node_18 -> Node_13;
Node_22 -> Node_20;
Node_20 -> Node_13;
}

