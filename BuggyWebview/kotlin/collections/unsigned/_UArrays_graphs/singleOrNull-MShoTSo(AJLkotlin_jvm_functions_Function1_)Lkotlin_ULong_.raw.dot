digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.singleOrNull\-MShoTSo([JLkotlin\/jvm\/functions\/Function1;)Lkotlin\/ULong;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$this$singleOrNull\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$singleOrNull_u2dMShoTSo' long[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1544)\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1545)\l0x000c: INVOKE  (r2 I:int) = (r8 I:long[] A[D('$this$singleOrNull_u2dMShoTSo' long[])]) type: STATIC call: kotlin.ULongArray.getSize\-impl(long[]):int A[MD:(long[]):int (m)] (LINE:1546)\l0x0010: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|LOOP_START\lLOOP:0: B:21:0x0011\-\>B:28:0x0030\l|0x0011: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:32:0x0033 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: INVOKE  (r5 I:long) = (r8 I:long[] A[D('$this$singleOrNull_u2dMShoTSo' long[])]), (r3 I:int) type: STATIC call: kotlin.ULongArray.get\-s\-VKNKU(long[], int):long A[MD:(long[], int):long (m)]\l0x0018: INVOKE  (r7 I:kotlin.ULong) = (r5 I:long A[D('element' long)]) type: STATIC call: kotlin.ULong.box\-impl(long):kotlin.ULong A[MD:(long):kotlin.ULong (m)] (LINE:1547)\l0x001c: INVOKE  (r7 I:java.lang.Object) = (r9 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r7 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0020: CHECK_CAST (r7 I:java.lang.Boolean) = (java.lang.Boolean) (r7 I:??[OBJECT, ARRAY]) \l0x0022: INVOKE  (r7 I:boolean) = (r7 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0026|0x0026: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0030 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0028|0x0028: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x002b  (LINE:1548)\l}"];
Node_27 [shape=record,label="{27\:\ 0x002b|0x002b: INVOKE  (r0 I:kotlin.ULong A[D('single' kotlin.ULong)]) = (r5 I:long A[D('element' long)]) type: STATIC call: kotlin.ULong.box\-impl(long):kotlin.ULong A[MD:(long):kotlin.ULong (m)] (LINE:1549)\l0x002f: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('found' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1550)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0030|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x0030|LOOP_END\lLOOP:0: B:21:0x0011\-\>B:28:0x0030\l|0x0030: ARITH  (r3 I:int) = (r3 I:int) + (1 int)  (LINE:1546)\l}"];
Node_33 [shape=record,label="{33\:\ 0x002a|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x002a|RETURN\l|0x002a: RETURN  (r4 I:kotlin.ULong) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0030|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0033|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x0033|0x0033: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0036  (LINE:1553)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0035|RETURN\l|0x0035: RETURN  (r4 I:kotlin.ULong) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0036|RETURN\l|0x0036: RETURN  (r0 I:kotlin.ULong A[D('single' kotlin.ULong)])  (LINE:1554)\l}"];
MethodNode[shape=record,label="{private static final kotlin.ULong kotlin.collections.unsigned.UArraysKt___UArraysKt.singleOrNull\-MShoTSo((r8 I:long[] A[D('$this$singleOrNull_u2dMShoTSo' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function1\<? super kotlin.ULong, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x0030 \-\> B:21:0x0011, CROSS_EDGE: B:24:0x0026 \-\> B:28:0x0030, CROSS_EDGE: B:30:0x0035 \-\> B:19:?, CROSS_EDGE: B:31:0x0036 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x0033: r5 'element' J\l  0x000b\-0x0036: r0 'single' Lkotlin\/ULong;\l  0x000c\-0x0036: r1 'found' Z\l  \-1 \-0x0036: r8 '$this$singleOrNull_u2dMShoTSo' [J\l  \-1 \-0x0036: r9 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: ([JLkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/ULong;Ljava\/lang\/Boolean;\>;)Lkotlin\/ULong;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_35;
Node_25 -> Node_27;
Node_25 -> Node_33[style=dashed];
Node_27 -> Node_34;
Node_34 -> Node_28;
Node_28 -> Node_21;
Node_33 -> Node_26;
Node_26 -> Node_19;
Node_35 -> Node_28;
Node_32 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_19;
Node_31 -> Node_19;
}

