digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.forEach\-jgv0xPQ([ILkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_912836875 {
label = "R(2:1|(1:3))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"$this$forEach\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"action\")\lint int r0 = kotlin.UIntArray.m298getSizeimpl(r4)\lint r1 = 0\l}"];
subgraph cluster_LoopRegion_1039029148 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000f|LOOP_START\lLOOP:0: B:10:0x000f\-\>B:11:0x0011\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:9:0x0000, B:11:0x0011] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r0) goto L3\l}"];
subgraph cluster_Region_1160059496 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0011|LOOP_END\lLOOP:0: B:10:0x000f\-\>B:11:0x0011\l|int int r2 = kotlin.UIntArray.m297getpVg5ArA(r4, r1)\lr5.invoke(kotlin.UInt.m232boximpl(r2))\lr1++\l}"];
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001f|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x001f}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final void kotlin.collections.unsigned.UArraysKt___UArraysKt.forEach\-jgv0xPQ((r4v0 'forEach' int[] A[D('$this$forEach_u2djgv0xPQ' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'action' kotlin.jvm.functions.Function1\<? super kotlin.UInt, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0011 \-\> B:10:0x000f\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([ILkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/UInt;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_7 -> Node_9;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

