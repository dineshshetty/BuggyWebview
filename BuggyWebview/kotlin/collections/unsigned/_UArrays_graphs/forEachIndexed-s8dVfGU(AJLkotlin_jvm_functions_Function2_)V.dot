digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.forEachIndexed\-s8dVfGU([JLkotlin\/jvm\/functions\/Function2;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"$this$forEachIndexed\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"action\")\lr0 = 0\lint r1 = kotlin.ULongArray.m376getSizeimpl(r7)\lr2 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0010|LOOP_START\lLOOP:0: B:10:0x0010\-\>B:11:0x0012\lPHI: r0 r2 \l  PHI: (r0v3 'index' int) = (r0v2 'index' int), (r0v5 'index' int) binds: [B:9:0x0000, B:11:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:9:0x0000, B:11:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x0012|LOOP_END\lLOOP:0: B:10:0x0010\-\>B:11:0x0012\l|long r3 = kotlin.ULongArray.m375getsVKNKU(r7, r2)\lint r5 = r0 + 1\lr8.invoke(java.lang.Integer.valueOf(r0), kotlin.ULong.m310boximpl(r3))\lint r2 = r2 + 1\lr0 = r5\l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0027|RETURN\l|return\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final void kotlin.collections.unsigned.UArraysKt___UArraysKt.forEachIndexed\-s8dVfGU((r7v0 'forEachIndexed' long[] A[D('$this$forEachIndexed_u2ds8dVfGU' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'action' kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super kotlin.ULong, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0012 \-\> B:10:0x0010\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([JLkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-Lkotlin\/ULong;Lkotlin\/Unit;\>;)V\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_10;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

