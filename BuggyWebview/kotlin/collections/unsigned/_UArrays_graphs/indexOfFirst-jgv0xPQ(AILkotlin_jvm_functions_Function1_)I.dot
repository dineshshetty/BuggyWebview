digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.indexOfFirst\-jgv0xPQ([ILkotlin\/jvm\/functions\/Function1;)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"$this$indexOfFirst\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"predicate\")\lr2 = 0\lint r3 = r7.length\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|LOOP_START\lLOOP:0: B:16:0x000e\-\>B:20:0x0028\lPHI: r2 \l  PHI: (r2v1 'index$iv' int) = (r2v0 'index$iv' int), (r2v3 'index$iv' int) binds: [B:15:0x0000, B:20:0x0028] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r3) goto L9\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|r4 = r7[r2]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0025|if (r8.invoke(kotlin.UInt.m232boximpl(kotlin.UInt.m238constructorimpl(r4))).booleanValue() == false) goto L5\l}"];
Node_20 [shape=record,label="{20\:\ 0x0028|LOOP_END\lLOOP:0: B:16:0x000e\-\>B:20:0x0028\l|int r2 = r2 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x002c|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ ?|SYNTHETIC\lRETURN\l|return r2\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x002b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|RETURN\lORIG_RETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{private static final int kotlin.collections.unsigned.UArraysKt___UArraysKt.indexOfFirst\-jgv0xPQ((r7v0 'indexOfFirst' int[] A[D('$this$indexOfFirst_u2djgv0xPQ' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'predicate' kotlin.jvm.functions.Function1\<? super kotlin.UInt, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0028 \-\> B:16:0x000e, CROSS_EDGE: B:21:0x002b \-\> B:22:0x002c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([ILkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/UInt;Ljava\/lang\/Boolean;\>;)I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_23[style=dashed];
Node_20 -> Node_16;
Node_23 -> Node_25;
Node_25 -> Node_14;
Node_24 -> Node_21;
Node_21 -> Node_14;
}

