digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.associateWith\-jgv0xPQ([ILkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Map;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"$this$associateWith\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"valueSelector\")\ljava.util.LinkedHashMap r0 = new java.util.LinkedHashMap(kotlin.ranges.RangesKt.coerceAtLeast(kotlin.collections.MapsKt.mapCapacity(kotlin.UIntArray.m298getSizeimpl(r6)), 16))\lint r1 = kotlin.UIntArray.m298getSizeimpl(r6)\lr2 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0022|LOOP_START\lLOOP:0: B:11:0x0022\-\>B:12:0x0024\lPHI: r2 \l  PHI: (r2v2 int) = (r2v1 int), (r2v3 int) binds: [B:10:0x0000, B:12:0x0024] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L4\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|LOOP_END\lLOOP:0: B:11:0x0022\-\>B:12:0x0024\l|int r3 = kotlin.UIntArray.m297getpVg5ArA(r6, r2)\lr0.put(kotlin.UInt.m232boximpl(r3), r7.invoke(kotlin.UInt.m232boximpl(r3)))\lint r2 = r2 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x003d|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x003d}"];
Node_14 [shape=record,label="{14\:\ 0x0040|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.util.Map\<kotlin.UInt, V\> kotlin.collections.unsigned.UArraysKt___UArraysKt.associateWith\-jgv0xPQ((r6v0 'associateWith' int[] A[D('$this$associateWith_u2djgv0xPQ' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'valueSelector' kotlin.jvm.functions.Function1\<? super kotlin.UInt, ? extends V\> A[D('valueSelector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0024 \-\> B:11:0x0022\lINLINE_NOT_NEEDED\lTYPE_VARS: [V]\lSIGNATURE: \<V:Ljava\/lang\/Object;\>([ILkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/UInt;+TV;\>;)Ljava\/util\/Map\<Lkotlin\/UInt;TV;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

