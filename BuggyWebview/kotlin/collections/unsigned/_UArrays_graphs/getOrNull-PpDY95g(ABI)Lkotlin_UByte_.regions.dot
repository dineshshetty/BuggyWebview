digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.getOrNull\-PpDY95g([BI)Lkotlin\/UByte;" {
subgraph cluster_Region_1634429792 {
label = "R(2:1|(2:(1:8)|(1:6)))";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"$this$getOrNull\")\l}"];
subgraph cluster_Region_465266317 {
label = "R(2:(1:8)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2007166696 {
label = "IF [B:13:0x0005, B:15:0x000d] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0005|if (r3 \< 0) goto L8\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|ADDED_TO_REGION\l|if (r3 \> kotlin.collections.ArraysKt.getLastIndex(r2)) goto L8\l}"];
subgraph cluster_Region_1566397284 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0018|RETURN\lORIG_RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_1733759940 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ ?|SYNTHETIC\lRETURN\l|return kotlin.UByte.m156boximpl(kotlin.UByteArray.m219getw2LRezQ(r2, r3))\l}"];
}
}
}
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0007}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x000f}"];
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final kotlin.UByte kotlin.collections.unsigned.UArraysKt___UArraysKt.getOrNull\-PpDY95g((r2v0 'getOrNull' byte[] A[D('$this$getOrNull_u2dPpDY95g' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0018 \-\> B:18:0x0019, CROSS_EDGE: B:13:0x0005 \-\> B:17:0x0018\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_10;Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_17;
Node_17 -> Node_11;
Node_19 -> Node_11;
Node_10 -> Node_12;
Node_14 -> Node_15;
Node_16 -> Node_19;
}

