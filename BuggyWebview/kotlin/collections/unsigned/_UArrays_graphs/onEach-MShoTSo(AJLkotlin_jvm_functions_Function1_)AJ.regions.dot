digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.onEach\-MShoTSo([JLkotlin\/jvm\/functions\/Function1;)[J" {
subgraph cluster_Region_1786170004 {
label = "R(3:1|(1:3)|5)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"$this$onEach\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"action\")\lint int r2 = kotlin.ULongArray.m376getSizeimpl(r7)\lint r3 = 0\l}"];
subgraph cluster_LoopRegion_1030112299 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0011|LOOP_START\lLOOP:0: B:10:0x0011\-\>B:11:0x0013\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:9:0x0000, B:11:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \< r2) goto L3\l}"];
subgraph cluster_Region_547384008 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0013|LOOP_END\lLOOP:0: B:10:0x0011\-\>B:11:0x0013\l|long long r4 = kotlin.ULongArray.m375getsVKNKU(r7, r3)\lr8.invoke(kotlin.ULong.m310boximpl(r4))\lr3++\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0021|RETURN\l|return r7\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0021|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final long[] kotlin.collections.unsigned.UArraysKt___UArraysKt.onEach\-MShoTSo((r7v0 'onEach' long[] A[D('$this$onEach_u2dMShoTSo' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'action' kotlin.jvm.functions.Function1\<? super kotlin.ULong, kotlin.Unit\> A[D('action' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0013 \-\> B:10:0x0011\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([JLkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/ULong;Lkotlin\/Unit;\>;)[J\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_12 -> Node_8;
Node_7 -> Node_9;
Node_13 -> Node_12;
}

