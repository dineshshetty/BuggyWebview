digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.maxOrNull\-\-ajY\-9A([I)Lkotlin\/UInt;" {
subgraph cluster_Region_1910089309 {
label = "R(2:1|(2:(1:3)|(3:5|(2:8|(1:11)(0))|17)))";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"$this$maxOrNull\")\l}"];
subgraph cluster_Region_1406565220 {
label = "R(2:(1:3)|(3:5|(2:8|(1:11)(0))|17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1598905722 {
label = "IF [B:22:0x0009] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0009|if (kotlin.UIntArray.m300isEmptyimpl(r5) == true) goto L3\l}"];
subgraph cluster_Region_985046454 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x000b|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_2097401830 {
label = "R(3:5|(2:8|(1:11)(0))|17)";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x000d|int int r0 = kotlin.UIntArray.m297getpVg5ArA(r5, 0)\lkotlin.collections.IntIterator ?? r1 = new kotlin.ranges.IntRange(1, kotlin.collections.ArraysKt.getLastIndex(r5)).iterator()\l}"];
subgraph cluster_LoopRegion_667690554 {
label = "LOOP:0: (2:8|(1:11)(0))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0026|if (r1.hasNext() != false) goto L8\l}"];
subgraph cluster_Region_1146331610 {
label = "R(2:8|(1:11)(0))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0028|int int r2 = r1.nextInt()\lint int r3 = kotlin.UIntArray.m297getpVg5ArA(r5, r2)\l}"];
subgraph cluster_IfRegion_1435949290 {
label = "IF [B:29:0x0034] THEN: R(1:11) ELSE: R(0)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0034|if (kotlin.UnsignedUtils.uintCompare(r0, r3) \< 0) goto L10\l}"];
subgraph cluster_Region_735980549 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0036|r0 = r3\l}"];
}
subgraph cluster_Region_107032563 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_32 [shape=record,label="{32\:\ 0x003c|RETURN\l|return kotlin.UInt.m232boximpl(r0)\l}"];
}
}
}
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0022|LOOP_START\lLOOP:0: B:26:0x0022\-\>B:35:0x0022\lPHI: r0 \l  PHI: (r0v4 'max' int) = (r0v3 'max' int), (r0v5 'max' int) binds: [B:25:0x000d, B:35:0x0022] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x0036|SYNTHETIC\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0022|SYNTHETIC\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0022|LOOP_END\lSYNTHETIC\lLOOP:0: B:26:0x0022\-\>B:35:0x0022\lPHI: r0 \l  PHI: (r0v5 'max' int) = (r0v4 'max' int), (r0v6 'max' int) binds: [B:36:0x0022, B:37:0x0022] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0022|SYNTHETIC\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0038|SYNTHETIC\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0038}"];
MethodNode[shape=record,label="{public static final kotlin.UInt kotlin.collections.unsigned.UArraysKt___UArraysKt.maxOrNull\-\-ajY\-9A((r5v0 'maxOrNull' int[] A[D('$this$maxOrNull_u2d_u2dajY_u2d9A' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:29:0x0034 \-\> B:26:0x0022, BACK_EDGE: B:30:0x0036 \-\> B:26:0x0022, CROSS_EDGE: B:32:0x003c \-\> B:20:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r1v1, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_19;Node_21 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_25[style=dashed];
Node_23 -> Node_20;
Node_25 -> Node_26;
Node_27 -> Node_28;
Node_27 -> Node_34[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_33;
Node_29 -> Node_36[style=dashed];
Node_30 -> Node_37;
Node_32 -> Node_20;
Node_19 -> Node_21;
Node_26 -> Node_27;
Node_33 -> Node_30;
Node_37 -> Node_35;
Node_35 -> Node_26;
Node_36 -> Node_35;
Node_34 -> Node_31;
Node_31 -> Node_32;
}

