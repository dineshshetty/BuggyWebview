digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.flatMap\-JOV_ifY([BLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"$this$flatMap\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$flatMap_u2dJOV_ifY' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: NEW_INSTANCE  (r0 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:4594)\l0x000c: INVOKE  (r0 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x000f: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l0x0011: INVOKE  (r1 I:int) = (r4 I:byte[] A[D('$this$flatMap_u2dJOV_ifY' byte[])]) type: STATIC call: kotlin.UByteArray.getSize\-impl(byte[]):int A[MD:(byte[]):int (m)]\l0x0015: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|LOOP_START\lLOOP:0: B:11:0x0016\-\>B:12:0x0018\l|0x0016: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:15:0x002c \l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|LOOP_END\lLOOP:0: B:11:0x0016\-\>B:12:0x0018\l|0x0018: INVOKE  (r3 I:byte) = (r4 I:byte[] A[D('$this$flatMap_u2dJOV_ifY' byte[])]), (r2 I:int) type: STATIC call: kotlin.UByteArray.get\-w2LRezQ(byte[], int):byte A[MD:(byte[], int):byte (m)]\l0x001c: INVOKE  (r3 I:kotlin.UByte) = (r3 I:byte) type: STATIC call: kotlin.UByte.box\-impl(byte):kotlin.UByte A[MD:(byte):kotlin.UByte (m)]\l0x0020: INVOKE  (r3 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)]), (r3 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0024: CHECK_CAST (r3 I:java.lang.Iterable) = (java.lang.Iterable) (r3 I:??[OBJECT, ARRAY]) \l0x0026: INVOKE  (r0 I:java.util.Collection), (r3 I:java.lang.Iterable) type: STATIC call: kotlin.collections.CollectionsKt.addAll(java.util.Collection, java.lang.Iterable):boolean A[MD:\<T\>:(java.util.Collection\<? super T\>, java.lang.Iterable\<? extends T\>):boolean (m)]\l0x0029: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c|0x002c: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x002e|RETURN\l|0x002e: RETURN  (r0 I:java.util.List\<R\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.util.List\<R\> kotlin.collections.unsigned.UArraysKt___UArraysKt.flatMap\-JOV_ifY((r4 I:byte[] A[D('$this$flatMap_u2dJOV_ifY' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super kotlin.UByte, ? extends java.lang.Iterable\<? extends R\>\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0018 \-\> B:11:0x0016\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002e: r4 '$this$flatMap_u2dJOV_ifY' [B\l  \-1 \-0x002e: r5 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>([BLkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/UByte;+Ljava\/lang\/Iterable\<+TR;\>;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

