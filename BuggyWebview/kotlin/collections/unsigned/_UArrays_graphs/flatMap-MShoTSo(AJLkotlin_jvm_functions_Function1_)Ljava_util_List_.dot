digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.flatMap\-MShoTSo([JLkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"$this$flatMap\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"transform\")\ljava.util.Collection r0 = new java.util.ArrayList()\lint r1 = kotlin.ULongArray.m376getSizeimpl(r5)\lr2 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x0016|LOOP_START\lLOOP:0: B:11:0x0016\-\>B:12:0x0018\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:10:0x0000, B:12:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L4\l}"];
Node_12 [shape=record,label="{12\:\ 0x0018|LOOP_END\lLOOP:0: B:11:0x0016\-\>B:12:0x0018\l|kotlin.collections.CollectionsKt.addAll(r0, r6.invoke(kotlin.ULong.m310boximpl(kotlin.ULongArray.m375getsVKNKU(r5, r2))))\lint r2 = r2 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x002c|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x002c}"];
Node_14 [shape=record,label="{14\:\ 0x002e|RETURN\l|return r0\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.util.List\<R\> kotlin.collections.unsigned.UArraysKt___UArraysKt.flatMap\-MShoTSo((r5v0 'flatMap' long[] A[D('$this$flatMap_u2dMShoTSo' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'transform' kotlin.jvm.functions.Function1\<? super kotlin.ULong, ? extends java.lang.Iterable\<? extends R\>\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x0018 \-\> B:11:0x0016\lINLINE_NOT_NEEDED\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>([JLkotlin\/jvm\/functions\/Function1\<\-Lkotlin\/ULong;+Ljava\/lang\/Iterable\<+TR;\>;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

