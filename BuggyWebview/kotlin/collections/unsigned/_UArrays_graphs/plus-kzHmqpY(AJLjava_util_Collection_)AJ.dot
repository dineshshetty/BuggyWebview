digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysKt.plus\-kzHmqpY([JLjava\/util\/Collection;)[J" {
Node_9 [shape=record,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"$this$plus\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"elements\")\lint r0 = kotlin.ULongArray.m376getSizeimpl(r6)\llong[] r1 = java.util.Arrays.copyOf(r6, kotlin.ULongArray.m376getSizeimpl(r6) + r7.size())\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"copyOf(this, newSize)\")\ljava.util.Iterator r2 = r7.iterator()\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|LOOP_START\lLOOP:0: B:12:0x0024\-\>B:14:0x002a\lPHI: r0 \l  PHI: (r0v3 'index' int) = (r0v2 'index' int), (r0v4 'index' int) binds: [B:11:0x0000, B:14:0x002a] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0028|if (r2.hasNext() == false) goto L5\l}"];
Node_14 [shape=record,label="{14\:\ 0x002a|LOOP_END\lLOOP:0: B:12:0x0024\-\>B:14:0x002a\l|long r3 = r2.next().m367unboximpl()\lr1[r0] = r3\lr0 = r0 + 1\l}"];
Node_17 [shape=record,label="{17\:\ 0x003a|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x003a}"];
Node_16 [shape=record,label="{16\:\ 0x003e|RETURN\l|return kotlin.ULongArray.m370constructorimpl(r1)\l}"];
Node_10 [shape=record,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final long[] kotlin.collections.unsigned.UArraysKt___UArraysKt.plus\-kzHmqpY((r6v0 'plus' long[] A[D('$this$plus_u2dkzHmqpY' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'elements' java.util.Collection\<kotlin.ULong\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x002a \-\> B:12:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([JLjava\/util\/Collection\<Lkotlin\/ULong;\>;)[J\l}"];
MethodNode -> Node_9;Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_17;
Node_14 -> Node_12;
Node_17 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_10;
}

