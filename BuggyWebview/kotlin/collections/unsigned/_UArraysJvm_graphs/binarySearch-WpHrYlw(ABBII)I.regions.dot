digraph "CFG forkotlin.collections.unsigned.UArraysKt___UArraysJvmKt.binarySearch\-WpHrYlw([BBII)I" {
subgraph cluster_Region_265326544 {
label = "R(3:1|(2:3|(1:14)(1:(1:7)(1:11)))|18)";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"$this$binarySearch\")\lkotlin.collections.AbstractList.Companion.checkRangeIndexes$kotlin_stdlib(r8, r9, kotlin.UByteArray.m220getSizeimpl(r6))\lint r0 = r7 & kotlin.UByte.MAX_VALUE\lint r1 = r8\lint int r2 = r9 \- 1\l}"];
subgraph cluster_LoopRegion_149150364 {
label = "LOOP:0: (2:3|(1:14)(1:(1:7)(1:11)))";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x0013|LOOP_START\lLOOP:0: B:3:0x0013\-\>B:16:0x0013\lPHI: r1 r2 \l  PHI: (r1v2 'low' int) = (r1v1 'low' int), (r1v4 'low' int) binds: [B:2:0x0000, B:16:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'high' int) = (r2v0 'high' int), (r2v2 'high' int) binds: [B:2:0x0000, B:16:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \<= r2) goto L3\l}"];
subgraph cluster_Region_1122783763 {
label = "R(2:3|(1:14)(1:(1:7)(1:11)))";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0015|int int r3 = (r1 + r2) \>\>\> 1\lbyte r4 = r6[r3]\lint int r5 = kotlin.UnsignedUtils.uintCompare(r4, r0)\l}"];
subgraph cluster_IfRegion_1384781475 {
label = "IF [B:5:0x001f] THEN: R(1:14) ELSE: R(1:(1:7)(1:11))";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x001f|if (r5 \< 0) goto L13\l}"];
subgraph cluster_Region_1012512529 {
label = "R(1:14)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0021|int r1 = r3 + 1\l}"];
}
subgraph cluster_Region_1105292775 {
label = "R(1:(1:7)(1:11)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1152061780 {
label = "IF [B:7:0x0024] THEN: R(1:7) ELSE: R(1:11) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0024|if (r5 \> 0) goto L7\l}"];
subgraph cluster_Region_54950495 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0026|int r2 = r3 \- 1\l}"];
}
subgraph cluster_Region_588958958 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0029|RETURN\l|return r3\l}"];
}
}
}
}
}
}
Node_11 [shape=record,label="{11\:\ 0x002d|RETURN\l|return \-(r1 + 1)\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0024|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0013|SYNTHETIC\l}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0013|LOOP_END\lSYNTHETIC\lLOOP:0: B:3:0x0013\-\>B:16:0x0013\lPHI: r1 r2 \l  PHI: (r1v4 'low' int) = (r1v3 'low' int), (r1v2 'low' int) binds: [B:18:0x0013, B:17:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 'high' int) = (r2v1 'high' int), (r2v3 'high' int) binds: [B:18:0x0013, B:17:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0029|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0021|SYNTHETIC\l}"];
Node_18 [shape=record,color=red,label="{18\:\ 0x0013|SYNTHETIC\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x002a|SYNTHETIC\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x002a}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.unsigned.UArraysKt___UArraysJvmKt.binarySearch\-WpHrYlw((r6v0 'binarySearch' byte[] A[D('$this$binarySearch_u2dWpHrYlw' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'element' byte A[D('element' byte), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'fromIndex' int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'toIndex' int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:6:0x0021 \-\> B:3:0x0013, BACK_EDGE: B:8:0x0026 \-\> B:3:0x0013, CROSS_EDGE: B:11:0x002d \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lRENAME_REASON:not valid java name\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_12[style=dashed];
Node_4 -> Node_5;
Node_5 -> Node_13[style=dashed];
Node_5 -> Node_15;
Node_6 -> Node_18;
Node_7 -> Node_8;
Node_7 -> Node_14[style=dashed];
Node_8 -> Node_17;
Node_9 -> Node_1;
Node_11 -> Node_1;
Node_0 -> Node_2;
Node_13 -> Node_7;
Node_17 -> Node_16;
Node_16 -> Node_3;
Node_14 -> Node_9;
Node_15 -> Node_6;
Node_18 -> Node_16;
Node_12 -> Node_10;
Node_10 -> Node_11;
}

