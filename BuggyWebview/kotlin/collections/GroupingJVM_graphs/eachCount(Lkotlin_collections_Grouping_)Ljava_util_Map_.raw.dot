digraph "CFG forkotlin.collections.GroupingKt__GroupingJVMKt.eachCount(Lkotlin\/collections\/Grouping;)Ljava\/util\/Map;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('$this$eachCount' kotlin.collections.Grouping)]) \l0x0004: INVOKE  (r1 I:java.lang.Object), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0007: NEW_INSTANCE  (r0 I:java.util.LinkedHashMap) =  java.util.LinkedHashMap  (LINE:22)\l0x0009: INVOKE  (r0 I:java.util.LinkedHashMap) type: DIRECT call: java.util.LinkedHashMap.\<init\>():void A[MD:():void (c)]\l0x000c: CHECK_CAST (r0 I:java.util.Map) = (java.util.Map) (r0 I:??[OBJECT, ARRAY]) \l0x000e: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('$this$eachCount' kotlin.collections.Grouping)]) \l0x0010: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$foldTo$iv' kotlin.collections.Grouping)])  (LINE:53)\l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: INVOKE  (r6 I:java.util.Iterator) = (r4 I:kotlin.collections.Grouping A[D('$this$aggregateTo$iv$iv' kotlin.collections.Grouping)]) type: INTERFACE call: kotlin.collections.Grouping.sourceIterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (m)] (LINE:54)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0017|LOOP_START\lLOOP:0: B:3:0x0017\-\>B:15:0x0044\l|0x0017: INVOKE  (r7 I:boolean) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001b|0x001b: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0062 \l}"];
Node_5 [shape=record,label="{5\:\ 0x001d|0x001d: INVOKE  (r7 I:java.lang.Object) = (r6 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0021: INVOKE  (r8 I:java.lang.Object) = \l  (r4 I:kotlin.collections.Grouping A[D('$this$aggregateTo$iv$iv' kotlin.collections.Grouping)])\l  (r7 I:java.lang.Object A[D('e$iv$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.collections.Grouping.keyOf(java.lang.Object):java.lang.Object A[MD:(T):K (m)] (LINE:55)\l0x0025: INVOKE  (r9 I:java.lang.Object) = (r0 I:java.util.Map A[D('destination$iv' java.util.Map)]), (r8 I:java.lang.Object A[D('key$iv$iv' java.lang.Object)]) type: INTERFACE call: java.util.Map.get(java.lang.Object):java.lang.Object A[MD:(java.lang.Object):V (c)] (LINE:56)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0029|0x0029: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('accumulator$iv$iv' java.lang.Object)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0033  (LINE:57)\l}"];
Node_7 [shape=record,label="{7\:\ 0x002b|0x002b: INVOKE  (r11 I:boolean) = (r0 I:java.util.Map A[D('destination$iv' java.util.Map)]), (r8 I:java.lang.Object A[D('key$iv$iv' java.lang.Object)]) type: INTERFACE call: java.util.Map.containsKey(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002f|0x002f: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:10:0x0033 \l}"];
Node_9 [shape=record,label="{9\:\ 0x0031|0x0031: CONST  (r11 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0034|0x0034: MOVE  (r12 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('accumulator$iv$iv' java.lang.Object)]) \l0x0035: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('key$iv$iv' java.lang.Object)]) \l0x0036: MOVE  (r14 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('e$iv$iv' java.lang.Object)]) \l0x0037: CONST  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0038|0x0038: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('first$iv' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0042  (LINE:53)\l}"];
Node_13 [shape=record,label="{13\:\ 0x003a|0x003a: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003c: NEW_INSTANCE  (r17 I:kotlin.jvm.internal.Ref$IntRef) =  kotlin.jvm.internal.Ref$IntRef  (LINE:23)\l0x003e: INVOKE  (r17 I:kotlin.jvm.internal.Ref$IntRef) type: DIRECT call: kotlin.jvm.internal.Ref.IntRef.\<init\>():void A[MD:():void (m)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0044|SYNTHETIC\l}"];
Node_15 [shape=record,label="{15\:\ 0x0044|LOOP_END\lLOOP:0: B:3:0x0017\-\>B:15:0x0044\l|0x0044: MOVE  (r10 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY]) \l0x0046: CHECK_CAST (r10 I:kotlin.jvm.internal.Ref$IntRef) = (kotlin.jvm.internal.Ref$IntRef) (r10 I:??[OBJECT, ARRAY]) \l0x0048: CONST  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x004a: MOVE  (r18 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('acc' kotlin.jvm.internal.Ref$IntRef)])  (LINE:24)\l0x004c: CONST  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:58)\l0x004e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY] A[D('$this$eachCount_u24lambda_u2d2_u24lambda_u2d1' kotlin.jvm.internal.Ref$IntRef)])  (LINE:24)\l0x0050: MOVE  (r18 I:??[OBJECT, ARRAY] A[D('$this$eachCount_u24lambda_u2d2_u24lambda_u2d1' kotlin.jvm.internal.Ref$IntRef)]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$foldTo$iv' kotlin.collections.Grouping)]) \l0x0052: IGET  (r2 I:int A[D('$this$foldTo$iv' kotlin.collections.Grouping)]) = \l  (r1 I:kotlin.jvm.internal.Ref$IntRef A[D('$this$eachCount_u24lambda_u2d2_u24lambda_u2d1' kotlin.jvm.internal.Ref$IntRef)])\l kotlin.jvm.internal.Ref.IntRef.element int \l0x0054: CONST  (r16 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0056: ARITH  (r2 I:int) = (r2 I:int) + (1 int) \l0x0058: IPUT  \l  (r2 I:int)\l  (r1 I:kotlin.jvm.internal.Ref$IntRef A[D('$this$eachCount_u24lambda_u2d2_u24lambda_u2d1' kotlin.jvm.internal.Ref$IntRef)])\l kotlin.jvm.internal.Ref.IntRef.element int \l0x005a: INVOKE  \l  (r0 I:java.util.Map A[D('destination$iv' java.util.Map)])\l  (r8 I:java.lang.Object A[D('key$iv$iv' java.lang.Object)])\l  (r10 I:java.lang.Object A[D('acc' kotlin.jvm.internal.Ref$IntRef)])\l type: INTERFACE call: java.util.Map.put(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(K, V):V (c)]\l0x005d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r20 I:??[OBJECT, ARRAY] A[D('$this$eachCount' kotlin.collections.Grouping)]) \l0x005f: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY] A[D('$this$foldTo$iv' kotlin.collections.Grouping)]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0042|0x0042: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('acc$iv' java.lang.Object)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0044|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x0033|0x0033: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0062|SYNTHETIC\l}"];
Node_16 [shape=record,label="{16\:\ 0x0062|0x0062: MOVE  (r18 I:??[OBJECT, ARRAY] A[D('$this$foldTo$iv' kotlin.collections.Grouping)]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$foldTo$iv' kotlin.collections.Grouping)])  (LINE:59)\l0x0065: INVOKE  (r1 I:java.util.Set) = (r0 I:java.util.Map A[D('destination$iv' java.util.Map)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:25)\l0x0069: CHECK_CAST (r1 I:java.lang.Iterable) = (java.lang.Iterable) (r1 I:??[OBJECT, ARRAY]) \l0x006b: INVOKE  (r1 I:java.util.Iterator) = (r1 I:java.lang.Iterable) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x006f|LOOP_START\lLOOP:1: B:17:0x006f\-\>B:19:0x0075\l|0x006f: INVOKE  (r2 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0073|0x0073: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0096 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0075|LOOP_END\lLOOP:1: B:17:0x006f\-\>B:19:0x0075\l|0x0075: INVOKE  (r2 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0079: CHECK_CAST (r2 I:java.util.Map$Entry) = (java.util.Map$Entry) (r2 I:??[OBJECT, ARRAY]) \l0x007b: CONST_STR  (r3 I:java.lang.String) =  \"null cannot be cast to non\-null type kotlin.collections.MutableMap.MutableEntry\<K of kotlin.collections.GroupingKt__GroupingJVMKt.mapValuesInPlace$lambda\-4, R of kotlin.collections.GroupingKt__GroupingJVMKt.mapValuesInPlace$lambda\-4\>\" \l0x007d: INVOKE  (r2 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0080: INVOKE  (r3 I:java.util.Map$Entry) = (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.TypeIntrinsics.asMutableMapEntry(java.lang.Object):java.util.Map$Entry A[MD:(java.lang.Object):java.util.Map$Entry (m)]\l0x0085: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0086: INVOKE  (r5 I:java.lang.Object) = (r2 I:java.util.Map$Entry A[D('it' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)] (LINE:25)\l0x008a: CHECK_CAST (r5 I:kotlin.jvm.internal.Ref$IntRef) = (kotlin.jvm.internal.Ref$IntRef) (r5 I:??[OBJECT, ARRAY]) \l0x008c: IGET  (r2 I:int A[D('it' java.util.Map$Entry)]) = (r5 I:kotlin.jvm.internal.Ref$IntRef) kotlin.jvm.internal.Ref.IntRef.element int \l0x008e: INVOKE  (r2 I:java.lang.Integer) = (r2 I:int A[D('it' java.util.Map$Entry)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x0092: INVOKE  (r3 I:java.util.Map$Entry), (r2 I:java.lang.Object) type: INTERFACE call: java.util.Map.Entry.setValue(java.lang.Object):java.lang.Object A[MD:(V):V (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x0096|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0096|0x0096: INVOKE  (r0 I:java.util.Map) = (r0 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.TypeIntrinsics.asMutableMap(java.lang.Object):java.util.Map A[MD:(java.lang.Object):java.util.Map (m)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x009a|RETURN\l|0x009a: RETURN  (r0 I:java.util.Map\<K, java.lang.Integer\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.Map\<K, java.lang.Integer\> kotlin.collections.GroupingKt__GroupingJVMKt.eachCount((r20 I:kotlin.collections.Grouping\<T, ? extends K\> A[D('$this$eachCount' kotlin.collections.Grouping), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:15:0x0044 \-\> B:3:0x0017, CROSS_EDGE: B:14:0x0042 \-\> B:15:0x0044, CROSS_EDGE: B:10:0x0033 \-\> B:11:0x0034, CROSS_EDGE: B:6:0x0029 \-\> B:10:0x0033, BACK_EDGE: B:19:0x0075 \-\> B:17:0x006f\lDebug Info:\l  0x003c\-0x0041: r16 '$i$a$\-foldTo\-GroupingKt__GroupingJVMKt$eachCount$1' I\l  0x0010\-0x0052: r2 '$this$foldTo$iv' Lkotlin\/collections\/Grouping;\l  0x004c\-0x0052: r18 '$this$eachCount_u24lambda_u2d2_u24lambda_u2d1' Lkotlin\/jvm\/internal\/Ref$IntRef;\l  0x0052\-0x005a: r1 '$this$eachCount_u24lambda_u2d2_u24lambda_u2d1' Lkotlin\/jvm\/internal\/Ref$IntRef;\l  0x0048\-0x005a: r10 'acc' Lkotlin\/jvm\/internal\/Ref$IntRef;\l  0x0037\-0x005a: r11 'first$iv' Z\l  0x0035\-0x005a: r12 'acc$iv' Ljava\/lang\/Object;\l  0x0036\-0x005a: r13 'key$iv' Ljava\/lang\/Object;\l  0x0037\-0x005a: r14 'e$iv' Ljava\/lang\/Object;\l  0x0038\-0x005a: r15 '$i$a$\-aggregateTo\-GroupingKt__GroupingKt$foldTo$1$iv' I\l  0x004a\-0x005a: r17 '$i$a$\-foldTo\-GroupingKt__GroupingJVMKt$eachCount$2' I\l  0x004e\-0x005a: r19 '$i$a$\-apply\-GroupingKt__GroupingJVMKt$eachCount$2$1' I\l  0x0021\-0x0062: r7 'e$iv$iv' Ljava\/lang\/Object;\l  0x0025\-0x0062: r8 'key$iv$iv' Ljava\/lang\/Object;\l  0x0029\-0x0062: r9 'accumulator$iv$iv' Ljava\/lang\/Object;\l  0x0052\-0x0062: r18 '$this$foldTo$iv' Lkotlin\/collections\/Grouping;\l  0x0062\-0x0064: r2 '$this$foldTo$iv' Lkotlin\/collections\/Grouping;\l  0x0012\-0x0064: r4 '$this$aggregateTo$iv$iv' Lkotlin\/collections\/Grouping;\l  0x0013\-0x0064: r5 '$i$f$aggregateTo' I\l  0x000e\-0x0065: r0 'destination$iv' Ljava\/util\/Map;\l  0x0011\-0x0065: r3 '$i$f$foldTo' I\l  0x0064\-0x0065: r18 '$this$foldTo$iv' Lkotlin\/collections\/Grouping;\l  0x0085\-0x008e: r2 'it' Ljava\/util\/Map$Entry;\l  0x0086\-0x008e: r4 '$i$a$\-mapValuesInPlace\-GroupingKt__GroupingJVMKt$eachCount$3' I\l  \-1 \-0x009a: r20 '$this$eachCount' Lkotlin\/collections\/Grouping;\lTYPE_VARS: [T, K]\lSIGNATURE: \<T:Ljava\/lang\/Object;K:Ljava\/lang\/Object;\>(Lkotlin\/collections\/Grouping\<TT;+TK;\>;)Ljava\/util\/Map\<TK;Ljava\/lang\/Integer;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_22;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_10;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_11;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_24;
Node_24 -> Node_15;
Node_15 -> Node_3;
Node_14 -> Node_23;
Node_23 -> Node_15;
Node_10 -> Node_11;
Node_22 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_17;
Node_25 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_1;
}

