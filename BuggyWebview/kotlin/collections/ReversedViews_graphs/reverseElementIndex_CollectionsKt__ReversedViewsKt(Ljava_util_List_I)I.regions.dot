digraph "CFG forkotlin.collections.CollectionsKt__ReversedViewsKt.reverseElementIndex$CollectionsKt__ReversedViewsKt(Ljava\/util\/List;I)I" {
subgraph cluster_Region_1599036544 {
label = "R(1:(2:(1:4)|(2:6|7)))";
node [shape=record,color=blue];
subgraph cluster_Region_931827965 {
label = "R(2:(1:4)|(2:6|7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1594081401 {
label = "IF [B:11:0x000e] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000e|if (new kotlin.ranges.IntRange(0, kotlin.collections.CollectionsKt.getLastIndex(r5)).contains(r6) == true) goto L3\l}"];
subgraph cluster_Region_107988333 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0015|RETURN\l|return kotlin.collections.CollectionsKt.getLastIndex(r5) \- r6\l}"];
}
}
subgraph cluster_Region_593572476 {
label = "R(2:6|7)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0016}"];
Node_15 [shape=record,label="{15\:\ 0x0042|throw new java.lang.IndexOutOfBoundsException(\"Element index \" + r6 + \" must be in range [\" + new kotlin.ranges.IntRange(0, kotlin.collections.CollectionsKt.getLastIndex(r5)) + \"].\")\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,color=red,label="{10\:\ 0x0000}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0010}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.CollectionsKt__ReversedViewsKt.reverseElementIndex$CollectionsKt__ReversedViewsKt((r5v0 java.util.List\<?\> A[D('$this$reverseElementIndex' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0042 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/util\/List\<*\>;I)I\l}"];
MethodNode -> Node_8;Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
Node_10 -> Node_11;
Node_12 -> Node_13;
}

