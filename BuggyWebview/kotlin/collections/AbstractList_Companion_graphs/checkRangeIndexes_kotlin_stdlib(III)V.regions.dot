digraph "CFG forkotlin.collections.AbstractList.Companion.checkRangeIndexes$kotlin_stdlib(III)V" {
subgraph cluster_Region_1916227066 {
label = "R(1:(2:9|10)(1:(2:7|8)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1554193566 {
label = "IF [B:14:0x0002, B:15:0x0004] THEN: R(2:9|10) ELSE: R(1:(2:7|8)(0))";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0002|if (r4 \< 0) goto L9\l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|ADDED_TO_REGION\l|if (r5 \> r6) goto L9\l}"];
subgraph cluster_Region_1437923779 {
label = "R(2:9|10)";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0026}"];
Node_21 [shape=record,label="{21\:\ 0x004a|throw new java.lang.IndexOutOfBoundsException(\"fromIndex: \" + r4 + \", toIndex: \" + r5 + \", size: \" + r6)\l}"];
}
subgraph cluster_Region_1776206735 {
label = "R(1:(2:7|8)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_558767059 {
label = "IF [B:16:0x0006] THEN: R(2:7|8) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0006|if (r4 \> r5) goto L7\l}"];
subgraph cluster_Region_1707979912 {
label = "R(2:7|8)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0009}"];
Node_19 [shape=record,label="{19\:\ 0x0025|throw new java.lang.IllegalArgumentException(\"fromIndex: \" + r4 + \" \> toIndex: \" + r5)\l}"];
}
subgraph cluster_Region_390411027 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0008}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final void kotlin.collections.AbstractList.Companion.checkRangeIndexes$kotlin_stdlib((r3v0 'this' kotlin.collections.AbstractList$Companion A[IMMUTABLE_TYPE, THIS]), (r4v0 'fromIndex' int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'toIndex' int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'size' int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0025 \-\> B:12:?, CROSS_EDGE: B:21:0x004a \-\> B:12:?, CROSS_EDGE: B:14:0x0002 \-\> B:20:0x0026\lINLINE_NOT_NEEDED\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_11;Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_17 -> Node_12;
}

