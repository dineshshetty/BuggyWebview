digraph "CFG forkotlin.collections.AbstractList.Companion.checkBoundsIndexes$kotlin_stdlib(III)V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"startIndex: \"  (LINE:128)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0002|0x0002: IF  (r4 I:??[int, byte, short, char] A[D('startIndex' int)]) \< (0 ??[int, byte, short, char])  \-\> B:20:0x0026 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0004|0x0004: IF  (r5 I:??[int, byte, short, char] A[D('endIndex' int)]) \> (r6 I:??[int, byte, short, char] A[D('size' int)])  \-\> B:20:0x0026 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0006|0x0006: IF  (r4 I:??[int, byte, short, char] A[D('startIndex' int)]) \> (r5 I:??[int, byte, short, char] A[D('endIndex' int)])  \-\> B:18:0x0009  (LINE:131)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:134)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|0x0009: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:132)\l0x000b: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0010: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0013: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0016: CONST_STR  (r0 I:java.lang.String) =  \" \> endIndex: \" \l0x0018: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001b: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:int A[D('endIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x001e: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0022: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|0x0025: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x0026|0x0026: NEW_INSTANCE  (r1 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException  (LINE:129)\l0x0028: NEW_INSTANCE  (r2 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002a: INVOKE  (r2 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x002d: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0030: INVOKE  (r2 I:java.lang.StringBuilder), (r4 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0033: CONST_STR  (r0 I:java.lang.String) =  \", endIndex: \" \l0x0035: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0038: INVOKE  (r2 I:java.lang.StringBuilder), (r5 I:int A[D('endIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x003b: CONST_STR  (r0 I:java.lang.String) =  \", size: \" \l0x003d: INVOKE  (r2 I:java.lang.StringBuilder), (r0 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0040: INVOKE  (r2 I:java.lang.StringBuilder), (r6 I:int A[D('size' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0043: INVOKE  (r0 I:java.lang.String) = (r2 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0047: INVOKE  (r1 I:java.lang.IndexOutOfBoundsException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x004a|0x004a: THROW  (r1 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public final void kotlin.collections.AbstractList.Companion.checkBoundsIndexes$kotlin_stdlib((r3 'this' I:kotlin.collections.AbstractList$Companion A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('size' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x0025 \-\> B:12:?, CROSS_EDGE: B:21:0x004a \-\> B:12:?, CROSS_EDGE: B:14:0x0002 \-\> B:20:0x0026\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x004a: r4 'startIndex' I\l  \-1 \-0x004a: r5 'endIndex' I\l  \-1 \-0x004a: r6 'size' I\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_20;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_12;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
}

