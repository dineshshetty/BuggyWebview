digraph "CFG forkotlin.collections.AbstractList.Companion.orderedEquals$kotlin_stdlib(Ljava\/util\/Collection;Ljava\/util\/Collection;)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"c\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('c' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('other' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:int) = (r7 I:java.util.Collection A[D('c' java.util.Collection)]) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)] (LINE:145)\l0x000e: INVOKE  (r1 I:int) = (r8 I:java.util.Collection A[D('other' java.util.Collection)]) type: INTERFACE call: java.util.Collection.size():int A[MD:():int (c)]\l0x0012: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0016 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|RETURN\l|0x0015: RETURN  (r2 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0016|0x0016: INVOKE  (r0 I:java.util.Iterator) = (r8 I:java.util.Collection A[D('other' java.util.Collection)]) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:147)\l0x001a: INVOKE  (r1 I:java.util.Iterator) = (r7 I:java.util.Collection A[D('c' java.util.Collection)]) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:148)\l}"];
Node_21 [shape=record,label="{21\:\ 0x001e|LOOP_START\lLOOP:0: B:21:0x001e\-\>B:24:0x0030\l|0x001e: INVOKE  (r3 I:boolean) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x0022|0x0022: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x0033 \l}"];
Node_23 [shape=record,label="{23\:\ 0x0024|0x0024: INVOKE  (r3 I:java.lang.Object) = (r1 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0028: INVOKE  (r4 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('otherIterator' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:149)\l0x002c: INVOKE  (r5 I:boolean) = (r3 I:java.lang.Object A[D('elem' java.lang.Object)]), (r4 I:java.lang.Object A[D('elemOther' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)] (LINE:150)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0030|LOOP_END\lLOOP:0: B:21:0x001e\-\>B:24:0x0030\l|0x0030: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x001e \l}"];
Node_28 [shape=record,label="{28\:\ 0x0032|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0032|RETURN\l|0x0032: RETURN  (r2 I:boolean)  (LINE:151)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0033|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0033|RETURN\l|0x0033: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:154)\l0x0034: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.collections.AbstractList.Companion.orderedEquals$kotlin_stdlib((r6 'this' I:kotlin.collections.AbstractList$Companion A[IMMUTABLE_TYPE, THIS]), (r7 I:java.util.Collection\<?\> A[D('c' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.util.Collection\<?\> A[D('other' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:24:0x0030 \-\> B:21:0x001e, CROSS_EDGE: B:25:0x0032 \-\> B:16:?, CROSS_EDGE: B:27:0x0034 \-\> B:16:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x0033: r3 'elem' Ljava\/lang\/Object;\l  0x002c\-0x0033: r4 'elemOther' Ljava\/lang\/Object;\l  0x001a\-0x0034: r0 'otherIterator' Ljava\/util\/Iterator;\l  \-1 \-0x0034: r7 'c' Ljava\/util\/Collection;\l  \-1 \-0x0034: r8 'other' Ljava\/util\/Collection;\lSIGNATURE: (Ljava\/util\/Collection\<*\>;Ljava\/util\/Collection\<*\>;)Z\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_29;
Node_23 -> Node_24;
Node_24 -> Node_21;
Node_24 -> Node_28[style=dashed];
Node_28 -> Node_25;
Node_25 -> Node_16;
Node_29 -> Node_26;
Node_26 -> Node_16;
}

