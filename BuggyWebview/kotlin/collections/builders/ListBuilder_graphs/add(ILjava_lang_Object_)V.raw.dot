digraph "CFG forkotlin.collections.builders.ListBuilder.add(ILjava\/lang\/Object;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: INVOKE  (r2 I:kotlin.collections.builders.ListBuilder) type: DIRECT call: kotlin.collections.builders.ListBuilder.checkIsMutable():void A[MD:():void (m)] (LINE:90)\l0x0003: SGET  (r0 I:kotlin.collections.AbstractList$Companion) =  kotlin.collections.AbstractList.Companion kotlin.collections.AbstractList$Companion  (LINE:91)\l0x0005: IGET  (r1 I:int) = (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int \l0x0007: INVOKE  (r0 I:kotlin.collections.AbstractList$Companion), (r3 I:int A[D('index' int)]), (r1 I:int) type: VIRTUAL call: kotlin.collections.AbstractList.Companion.checkPositionIndex$kotlin_stdlib(int, int):void A[MD:(int, int):void (m)]\l0x000a: IGET  (r0 I:int) = (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.offset int  (LINE:92)\l0x000c: ARITH  (r0 I:int) = (r0 I:int) + (r3 I:int A[D('index' int)]) \l0x000d: INVOKE  (r2 I:kotlin.collections.builders.ListBuilder), (r0 I:int), (r4 I:java.lang.Object A[D('element' java.lang.Object)]) type: DIRECT call: kotlin.collections.builders.ListBuilder.addAtInternal(int, java.lang.Object):void A[MD:(int, E):void (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|RETURN\l|0x0010: RETURN    (LINE:93)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.collections.builders.ListBuilder.add((r2 'this' I:kotlin.collections.builders.ListBuilder\<E\> A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:E A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0010: r3 'index' I\l  \-1 \-0x0010: r4 'element' Ljava\/lang\/Object;\lTYPE_VARS: [E]\lSIGNATURE: (ITE;)V\lMETHOD_OVERRIDE: [ClspMth\{java.util.AbstractList.add(int, E):void\}, ClspMth\{java.util.List.add(int, E):void\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

