digraph "CFG forkotlin.collections.builders.ListBuilder.ensureCapacity(I)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.collections.builders.ListBuilder\<E\>) = (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.backing kotlin.collections.builders.ListBuilder  (LINE:180)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x0023 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: IF  (r3 I:??[int, byte, short, char] A[D('minCapacity' int)]) \< (0 ??[int, byte, short, char])  \-\> B:9:0x001d  (LINE:181)\l}"];
Node_5 [shape=record,label="{5\:\ 0x0006|0x0006: IGET  (r0 I:E[]) = (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[]  (LINE:182)\l0x0008: ARRAY_LENGTH  (r0 I:int) = (r0 I:??[]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0009|0x0009: IF  (r3 I:??[int, byte, short, char] A[D('minCapacity' int)]) \<= (r0 I:??[int, byte, short, char])  \-\> B:13:? \l}"];
Node_7 [shape=record,label="{7\:\ 0x000b|0x000b: SGET  (r0 I:kotlin.collections.ArrayDeque$Companion) =  kotlin.collections.ArrayDeque.Companion kotlin.collections.ArrayDeque$Companion  (LINE:183)\l0x000d: IGET  (r1 I:E[]) = (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[] \l0x000f: ARRAY_LENGTH  (r1 I:int) = (r1 I:??[]) \l0x0010: INVOKE  (r0 I:int) = (r0 I:kotlin.collections.ArrayDeque$Companion), (r1 I:int), (r3 I:int A[D('minCapacity' int)]) type: VIRTUAL call: kotlin.collections.ArrayDeque.Companion.newCapacity$kotlin_stdlib(int, int):int A[MD:(int, int):int (m)]\l0x0014: IGET  (r1 I:E[]) = (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[]  (LINE:184)\l0x0016: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r0 I:int A[D('newSize' int)]) type: STATIC call: kotlin.collections.builders.ListBuilderKt.copyOfUninitializedElements(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (m)]\l0x001a: IPUT  (r1 I:E[]), (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[] \l}"];
Node_8 [shape=record,label="{8\:\ 0x001c|RETURN\lORIG_RETURN\l|0x001c: RETURN    (LINE:186)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ ?|SYNTHETIC\lRETURN\l|0x001c: RETURN   A[SYNTHETIC] (LINE:186)\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: NEW_INSTANCE  (r0 I:java.lang.OutOfMemoryError) =  java.lang.OutOfMemoryError  (LINE:181)\l0x001f: INVOKE  (r0 I:java.lang.OutOfMemoryError) type: DIRECT call: java.lang.OutOfMemoryError.\<init\>():void A[MD:():void (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0022|0x0022: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0023|0x0023: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:180)\l0x0025: INVOKE  (r0 I:java.lang.IllegalStateException) type: DIRECT call: java.lang.IllegalStateException.\<init\>():void A[MD:():void (c)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0028|0x0028: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final void kotlin.collections.builders.ListBuilder.ensureCapacity((r2 'this' I:kotlin.collections.builders.ListBuilder\<E\> A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('minCapacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:6:0x0009 \-\> B:8:0x001c, CROSS_EDGE: B:10:0x0022 \-\> B:1:?, CROSS_EDGE: B:12:0x0028 \-\> B:1:?\lDebug Info:\l  0x0014\-0x001c: r0 'newSize' I\l  \-1 \-0x0028: r3 'minCapacity' I\lTYPE_VARS: [E]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_11;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_9;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_13;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_13 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_1;
}

