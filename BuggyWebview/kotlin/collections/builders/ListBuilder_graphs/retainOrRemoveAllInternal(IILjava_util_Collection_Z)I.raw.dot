digraph "CFG forkotlin.collections.builders.ListBuilder.retainOrRemoveAllInternal(IILjava\/util\/Collection;Z)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.collections.builders.ListBuilder\<E\>) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.backing kotlin.collections.builders.ListBuilder  (LINE:262)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:6:0x000e \l}"];
Node_4 [shape=record,label="{4\:\ 0x0004|0x0004: INVOKE  (r0 I:int) = \l  (r0 I:kotlin.collections.builders.ListBuilder)\l  (r8 I:int A[D('rangeOffset' int)])\l  (r9 I:int A[D('rangeLength' int)])\l  (r10 I:java.util.Collection A[D('elements' java.util.Collection)])\l  (r11 I:boolean A[D('retain' boolean)])\l type: DIRECT call: kotlin.collections.builders.ListBuilder.retainOrRemoveAllInternal(int, int, java.util.Collection, boolean):int A[MD:(int, int, java.util.Collection\<? extends E\>, boolean):int (m)] (LINE:263)\l0x0008: IGET  (r1 I:int) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int  (LINE:264)\l0x000a: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int A[D('removed' int)]) \l0x000b: IPUT  (r1 I:int), (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int \l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:int A[D('removed' int)])  (LINE:265)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('removed' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:267)\l0x000f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:268)\l}"];
Node_7 [shape=record,label="{7\:\ 0x0010|LOOP_START\lLOOP:0: B:7:0x0010\-\>B:17:0x0010\l|0x0010: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r9 I:??[int, byte, short, char] A[D('rangeLength' int)])  \-\> B:14:0x0030  (LINE:269)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0012|0x0012: IGET  (r2 I:E[]) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[]  (LINE:270)\l0x0014: ARITH  (r3 I:int) = (r8 I:int A[D('rangeOffset' int)]) + (r0 I:int A[D('i' int)]) \l0x0016: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r3 I:??[int, short, byte, char]) \l0x0018: INVOKE  (r2 I:boolean) = (r10 I:java.util.Collection A[D('elements' java.util.Collection)]), (r2 I:java.lang.Object) type: INTERFACE call: java.util.Collection.contains(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)]\l}"];
Node_9 [shape=record,label="{9\:\ 0x001c|0x001c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('retain' boolean)])  \-\> B:15:0x002d \l}"];
Node_15 [shape=record,label="{15\:\ 0x002d|SYNTHETIC\l}"];
Node_11 [shape=record,label="{11\:\ 0x002d|0x002d: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:273)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0010|SYNTHETIC\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|LOOP_END\lSYNTHETIC\lLOOP:0: B:7:0x0010\-\>B:17:0x0010\l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: IGET  (r2 I:E[]) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[]  (LINE:271)\l0x0020: ARITH  (r3 I:int) = (r1 I:int A[D('j' int)]) + (1 int) \l0x0022: ARITH  (r1 I:int) = (r1 I:int A[D('j' int)]) + (r8 I:int A[D('rangeOffset' int)]) \l0x0023: ARITH  (r4 I:int) = (r0 I:int A[D('i' int)]) + (1 int) \l0x0025: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (r8 I:int A[D('rangeOffset' int)]) \l0x0026: AGET  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char]) \l0x0028: APUT  (r2 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]), (r0 I:??[OBJECT, ARRAY]) \l0x002a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('j' int)]) \l0x002b: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0030|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0030|0x0030: ARITH  (r2 I:int) = (r9 I:int A[D('rangeLength' int)]) \- (r1 I:int A[D('j' int)])  (LINE:276)\l0x0032: IGET  (r3 I:E[]) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[]  (LINE:277)\l0x0034: ARITH  (r4 I:int) = (r8 I:int A[D('rangeOffset' int)]) + (r9 I:int A[D('rangeLength' int)]) \l0x0036: IGET  (r5 I:int) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int \l0x0038: ARITH  (r6 I:int) = (r8 I:int A[D('rangeOffset' int)]) + (r1 I:int A[D('j' int)]) \l0x003a: INVOKE  (r3 I:java.lang.Object[]), (r3 I:java.lang.Object[]), (r6 I:int), (r4 I:int), (r5 I:int) type: STATIC call: kotlin.collections.ArraysKt.copyInto(java.lang.Object[], java.lang.Object[], int, int, int):java.lang.Object[] A[MD:\<T\>:(T[], T[], int, int, int):T[] (m)]\l0x003d: IGET  (r3 I:E[]) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.array java.lang.Object[]  (LINE:278)\l0x003f: IGET  (r4 I:int) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int \l0x0041: ARITH  (r5 I:int) = (r4 I:int) \- (r2 I:int A[D('removed' int)]) \l0x0043: INVOKE  (r3 I:java.lang.Object[]), (r5 I:int), (r4 I:int) type: STATIC call: kotlin.collections.builders.ListBuilderKt.resetRange(java.lang.Object[], int, int):void A[MD:\<E\>:(E[], int, int):void (m)]\l0x0046: IGET  (r3 I:int) = (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int  (LINE:279)\l0x0048: ARITH  (r3 I:int) = (r3 I:int) \- (r2 I:int A[D('removed' int)]) \l0x0049: IPUT  (r3 I:int), (r7 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int \l}"];
Node_13 [shape=record,label="{13\:\ 0x004b|RETURN\l|0x004b: RETURN  (r2 I:int A[D('removed' int)])  (LINE:280)\l}"];
MethodNode[shape=record,label="{private final int kotlin.collections.builders.ListBuilder.retainOrRemoveAllInternal((r7 'this' I:kotlin.collections.builders.ListBuilder\<E\> A[IMMUTABLE_TYPE, THIS]), (r8 I:int A[D('rangeOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('rangeLength' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:java.util.Collection\<? extends E\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('retain' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:10:0x001e \-\> B:7:0x0010, BACK_EDGE: B:11:0x002d \-\> B:7:0x0010, CROSS_EDGE: B:13:0x004b \-\> B:1:?\lDebug Info:\l  0x0008\-0x000e: r0 'removed' I\l  0x0010\-0x0022: r1 'j' I\l  0x000f\-0x0025: r0 'i' I\l  0x0022\-0x002d: r3 'j' I\l  0x0025\-0x002d: r4 'i' I\l  0x002d\-0x004b: r0 'i' I\l  0x002d\-0x004b: r1 'j' I\l  0x0032\-0x004b: r2 'removed' I\l  \-1 \-0x004b: r8 'rangeOffset' I\l  \-1 \-0x004b: r9 'rangeLength' I\l  \-1 \-0x004b: r10 'elements' Ljava\/util\/Collection;\l  \-1 \-0x004b: r11 'retain' Z\lTYPE_VARS: [E]\lSIGNATURE: (IILjava\/util\/Collection\<+TE;\>;Z)I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_14;
Node_8 -> Node_9;
Node_9 -> Node_15;
Node_9 -> Node_16[style=dashed];
Node_15 -> Node_11;
Node_11 -> Node_18;
Node_18 -> Node_17;
Node_17 -> Node_7;
Node_16 -> Node_10;
Node_10 -> Node_19;
Node_19 -> Node_17;
Node_14 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_1;
}

