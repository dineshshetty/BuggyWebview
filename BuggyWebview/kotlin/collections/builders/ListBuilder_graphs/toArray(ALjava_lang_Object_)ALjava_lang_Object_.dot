digraph "CFG forkotlin.collections.builders.ListBuilder.toArray([Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"destination\")\lint r0 = r5.length\lint r1 = r4.length\l}"];
Node_3 [shape=record,label="{3\:\ 0x0008|if (r0 \>= r1) goto L6\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|E[] r0 = r4.array\lint r2 = r4.offset\ljava.lang.Object[] r0 = (T[]) java.util.Arrays.copyOfRange(r0, r2, r1 + r2, r5.getClass())\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"copyOfRange(array, offseâ€¦h, destination.javaClass)\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x001c|RETURN\l|return r0\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x001d|E[] r0 = r4.array\lkotlin.jvm.internal.Intrinsics.checkNotNull(r0, \"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.builders.ListBuilder.toArray\>\")\lint r2 = r4.offset\lkotlin.collections.ArraysKt.copyInto(r0, r5, 0, r2, r4.length + r2)\lint r0 = r5.length\lint r1 = r4.length\l}"];
Node_7 [shape=record,label="{7\:\ 0x0030|if (r0 \<= r1) goto L9\l}"];
Node_8 [shape=record,label="{8\:\ 0x0032|r5[r1] = null\l}"];
Node_9 [shape=record,label="{9\:\ 0x0035|RETURN\l|return r5\l}"];
MethodNode[shape=record,label="{public T[] kotlin.collections.builders.ListBuilder.toArray((r4v0 'this' kotlin.collections.builders.ListBuilder\<E\> A[IMMUTABLE_TYPE, THIS]), (r5v0 'destination' T[] A[D('destination' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:9:0x0035 \-\> B:1:?, CROSS_EDGE: B:7:0x0030 \-\> B:9:0x0035\lTYPE_VARS: [T, E]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;)[TT;\lMETHOD_OVERRIDE: [ClspMth\{\<T\> java.util.Collection.toArray(T[]):T[]\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_6;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_9;
Node_8 -> Node_9;
Node_9 -> Node_1;
}

