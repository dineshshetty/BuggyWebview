digraph "CFG forkotlin.collections.builders.ListBuilder.listIterator(I)Ljava\/util\/ListIterator;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: SGET  (r0 I:kotlin.collections.AbstractList$Companion) =  kotlin.collections.AbstractList.Companion kotlin.collections.AbstractList$Companion  (LINE:79)\l0x0002: IGET  (r1 I:int) = (r2 I:kotlin.collections.builders.ListBuilder) kotlin.collections.builders.ListBuilder.length int \l0x0004: INVOKE  (r0 I:kotlin.collections.AbstractList$Companion), (r3 I:int A[D('index' int)]), (r1 I:int) type: VIRTUAL call: kotlin.collections.AbstractList.Companion.checkPositionIndex$kotlin_stdlib(int, int):void A[MD:(int, int):void (m)]\l0x0007: NEW_INSTANCE  (r0 I:kotlin.collections.builders.ListBuilder$Itr) =  kotlin.collections.builders.ListBuilder$Itr  (LINE:80)\l0x0009: INVOKE  \l  (r0 I:kotlin.collections.builders.ListBuilder$Itr)\l  (r2 I:kotlin.collections.builders.ListBuilder)\l  (r3 I:int A[D('index' int)])\l type: DIRECT call: kotlin.collections.builders.ListBuilder.Itr.\<init\>(kotlin.collections.builders.ListBuilder, int):void A[MD:(kotlin.collections.builders.ListBuilder\<E\>, int):void (m)]\l0x000c: CHECK_CAST (r0 I:java.util.ListIterator) = (java.util.ListIterator) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:java.util.ListIterator\<E\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.util.ListIterator\<E\> kotlin.collections.builders.ListBuilder.listIterator((r2 'this' I:kotlin.collections.builders.ListBuilder\<E\> A[IMMUTABLE_TYPE, THIS]), (r3 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000e: r3 'index' I\lTYPE_VARS: [E]\lSIGNATURE: (I)Ljava\/util\/ListIterator\<TE;\>;\lMETHOD_OVERRIDE: [ClspMth\{java.util.List.listIterator(int):java.util.ListIterator\<E\>\}, ClspMth\{java.util.AbstractList.listIterator(int):java.util.ListIterator\<E\>\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

