digraph "CFG forkotlin.collections.builders.MapBuilder.toString()Ljava\/lang\/String;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|java.lang.StringBuilder r0 = new java.lang.StringBuilder((size() * 3) + 2)\lr0.append(\"\{\")\lr1 = 0\lkotlin.collections.builders.MapBuilder$EntriesItr r2 = entriesIterator$kotlin_stdlib()\l}"];
Node_16 [shape=record,label="{16\:\ 0x0017|LOOP_START\lLOOP:0: B:16:0x0017\-\>B:20:0x0024\lPHI: r1 \l  PHI: (r1v5 'i' int) = (r1v4 'i' int), (r1v6 'i' int) binds: [B:15:0x0000, B:20:0x0024] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|if (r2.hasNext() == false) goto L9\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|if (r1 \<= 0) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x001f|r0.append(\", \")\l}"];
Node_24 [shape=record,label="{24\:\ 0x0024|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0024|LOOP_END\lLOOP:0: B:16:0x0017\-\>B:20:0x0024\l|r2.nextAppendString(r0)\lint r1 = r1 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x0024|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002a|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x002a|r0.append(\"\}\")\ljava.lang.String r3 = r0.toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r3, \"sb.toString()\")\l}"];
Node_22 [shape=record,label="{22\:\ 0x0038|RETURN\l|return r3\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public java.lang.String kotlin.collections.builders.MapBuilder.toString((r5v0 'this' kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0024 \-\> B:16:0x0017, CROSS_EDGE: B:18:0x001d \-\> B:20:0x0024\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_24;
Node_24 -> Node_20;
Node_20 -> Node_16;
Node_25 -> Node_20;
Node_23 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_14;
}

