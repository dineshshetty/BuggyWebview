digraph "CFG forkotlin.collections.builders.MapBuilder.removeValue$kotlin_stdlib(Ljava\/lang\/Object;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r2 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.checkIsMutable$kotlin_stdlib():void A[MD:():void (m)] (LINE:434)\l0x0003: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.builders.MapBuilder), (r3 I:java.lang.Object A[D('element' java.lang.Object)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.findValue(java.lang.Object):int A[MD:(V):int (m)] (LINE:435)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0007|0x0007: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:14:0x000b  (LINE:436)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0009|RETURN\l|0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: RETURN  (r1 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x000b|0x000b: INVOKE  (r2 I:kotlin.collections.builders.MapBuilder), (r0 I:int A[D('index' int)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.removeKeyAt(int):void A[MD:(int):void (m)] (LINE:437)\l0x000e: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:438)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.collections.builders.MapBuilder.removeValue$kotlin_stdlib((r2 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r3 I:V A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0007\-0x000f: r0 'index' I\l  \-1 \-0x000f: r3 'element' Ljava\/lang\/Object;\lTYPE_VARS: [V, K]\lSIGNATURE: (TV;)Z\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

