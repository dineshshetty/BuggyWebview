digraph "CFG forkotlin.collections.builders.MapBuilder.containsAllEntries$kotlin_stdlib(Ljava\/util\/Collection;)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"m\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('m' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Iterator) = (r5 I:java.util.Collection A[D('m' java.util.Collection)]) type: INTERFACE call: java.util.Collection.iterator():java.util.Iterator A[MD:():java.util.Iterator\<E\> (c)] (LINE:383)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0009|LOOP_START\lLOOP:0: B:23:0x0009\-\>B:28:0x001e\l|0x0009: INVOKE  (r1 I:boolean) = (r0 I:java.util.Iterator A[D('it' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)] (LINE:384)\l}"];
Node_24 [shape=record,label="{24\:\ 0x000d|0x000d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0024 \l}"];
Node_25 [shape=record,label="{25\:\ 0x000f|0x000f: INVOKE  (r1 I:java.lang.Object) = (r0 I:java.util.Iterator A[D('it' java.util.Iterator)]) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)] (LINE:385)\l0x0014: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:388)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('entry' java.lang.Object)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0023 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0017|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_27 [shape=record,label="{27\:\ 0x0017|TRY_ENTER\lTRY_LEAVE\lTryCatch #0 \{ClassCastException \-\> 0x0021, blocks: (B:27:0x0017), top: B:35:0x0017 \}\lCatch: ClassCastException \-\> 0x0021\l|0x0017: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('entry' java.lang.Object)]) A[TRY_ENTER]\l0x0018: CHECK_CAST (r3 I:java.util.Map$Entry) = (java.util.Map$Entry) (r3 I:??[OBJECT, ARRAY]) A[Catch: ClassCastException \-\> 0x0021]\l0x001a: INVOKE  (r3 I:boolean) = (r4 I:kotlin.collections.builders.MapBuilder), (r3 I:java.util.Map$Entry) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.containsEntry$kotlin_stdlib(java.util.Map$Entry):boolean A[Catch: ClassCastException \-\> 0x0021, MD:(java.util.Map$Entry\<? extends K, ? extends V\>):boolean (m), TRY_LEAVE]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|LOOP_END\lLOOP:0: B:23:0x0009\-\>B:28:0x001e\l|0x001e: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0009 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0023|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0023|RETURN\l|0x0023: RETURN  (r2 I:boolean)  (LINE:389)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_30 [shape=record,label="{30\:\ 0x0021|ExcHandler: ClassCastException \-\> 0x0021\l|0x0021: MOVE_EXCEPTION  (r3 I:java.lang.ClassCastException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: ClassCastException \-\> 0x0021] (LINE:390)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0022|RETURN\l|0x0022: RETURN  (r2 I:boolean)  (LINE:391)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0024|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0024|RETURN\l|0x0024: CONST  (r1 I:??[boolean, int, float, short, byte, char] A[D('entry' java.lang.Object)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:394)\l0x0025: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.collections.builders.MapBuilder.containsAllEntries$kotlin_stdlib((r4 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r5 I:java.util.Collection\<?\> A[D('m' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x001e \-\> B:23:0x0009, CROSS_EDGE: B:28:0x001e \-\> B:32:0x0023, CROSS_EDGE: B:31:0x0022 \-\> B:21:?, CROSS_EDGE: B:35:0x0017 \-\> B:30:0x0021, CROSS_EDGE: B:34:0x0025 \-\> B:21:?\lINLINE_NOT_NEEDED\lTryCatch #0 \{ClassCastException \-\> 0x0021, blocks: (B:27:0x0017), top: B:35:0x0017 \}\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/util\/Collection\<*\>;)Z\lDebug Info:\l  0x0022\-0x0023: r3 'e' Ljava\/lang\/ClassCastException;\l  0x0013\-0x0024: r1 'entry' Ljava\/lang\/Object;\l  0x0009\-0x0025: r0 'it' Ljava\/util\/Iterator;\l  \-1 \-0x0025: r5 'm' Ljava\/util\/Collection;\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_38;
Node_25 -> Node_26;
Node_26 -> Node_35[style=dashed];
Node_26 -> Node_37;
Node_35 -> Node_27;
Node_35 -> Node_30;
Node_27 -> Node_28;
Node_27 -> Node_36;
Node_28 -> Node_23;
Node_28 -> Node_39[style=dashed];
Node_39 -> Node_32;
Node_32 -> Node_21;
Node_36 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_21;
Node_37 -> Node_32;
Node_38 -> Node_33;
Node_33 -> Node_21;
}

