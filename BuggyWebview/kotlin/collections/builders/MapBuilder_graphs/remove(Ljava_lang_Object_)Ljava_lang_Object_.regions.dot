digraph "CFG forkotlin.collections.builders.MapBuilder.remove(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
subgraph cluster_Region_1713568979 {
label = "R(2:1|(2:(1:3)|(2:5|6)))";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|int int r0 = removeKey$kotlin_stdlib(r4)\l}"];
subgraph cluster_Region_1181218839 {
label = "R(2:(1:3)|(2:5|6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1904553850 {
label = "IF [B:11:0x0004] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0004|if (r0 \< 0) goto L3\l}"];
subgraph cluster_Region_103925593 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x0006|RETURN\l|return null\l}"];
}
}
subgraph cluster_Region_2104578348 {
label = "R(2:5|6)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0008|V[] V[] r1 = r3.valuesArray\lkotlin.jvm.internal.Intrinsics.checkNotNull(r1)\lV r2 = r1[r0]\lkotlin.collections.builders.ListBuilderKt.resetAt(r1, r0)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|RETURN\l|return r2\l}"];
}
}
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public V kotlin.collections.builders.MapBuilder.remove((r3v0 'this' kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'key' java.lang.Object A[D('key' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0012 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/lang\/Object;)TV;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r4v0, resolved type: java.lang.Object\}\lMETHOD_OVERRIDE: [ClspMth\{java.util.Map.remove(java.lang.Object):V\}]\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_14[style=dashed];
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_8 -> Node_10;
}

