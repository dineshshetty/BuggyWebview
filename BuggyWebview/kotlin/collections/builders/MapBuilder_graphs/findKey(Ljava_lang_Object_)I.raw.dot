digraph "CFG forkotlin.collections.builders.MapBuilder.findKey(Ljava\/lang\/Object;)I" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r6 I:kotlin.collections.builders.MapBuilder), (r7 I:java.lang.Object A[D('key' java.lang.Object)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.hash(java.lang.Object):int A[MD:(K):int (m)] (LINE:255)\l0x0004: IGET  (r1 I:int) = (r6 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.maxProbeDistance int  (LINE:256)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0006|LOOP_START\lLOOP:0: B:29:0x0006\-\>B:49:0x0006\l|0x0007: IGET  (r2 I:int[]) = (r6 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:258)\l0x0009: AGET  (r2 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('hash' int)]) \l0x000b: CONST  (r3 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:259)\l}"];
Node_30 [shape=record,label="{30\:\ 0x000c|0x000c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x000f \l}"];
Node_32 [shape=record,label="{32\:\ 0x000f|0x000f: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:37:0x0020  (LINE:260)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0011|0x0011: IGET  (r4 I:K[]) = (r6 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.keysArray java.lang.Object[] \l0x0013: ARITH  (r5 I:int) = (r2 I:int A[D('index' int)]) + (\-1 int) \l0x0015: AGET  (r4 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][]), (r5 I:??[int, short, byte, char]) \l0x0017: INVOKE  (r4 I:boolean) = (r4 I:java.lang.Object), (r7 I:java.lang.Object A[D('key' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0020 \l}"];
Node_46 [shape=record,label="{46\:\ 0x001d|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|0x001d: ARITH  (r3 I:int) = (r2 I:int A[D('index' int)]) + (\-1 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x001f|RETURN\l|0x001f: RETURN  (r3 I:int) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0020|0x0020: ARITH  (r1 I:int) = (r1 I:int A[D('probesLeft' int)]) + (\-1 int)  (LINE:261)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0022|0x0022: IF  (r1 I:??[int, byte, short, char] A[D('probesLeft' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:40:0x0025 \l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|0x0025: ARITH  (r3 I:int) = (r0 I:int A[D('hash' int)]) + (\-1 int)  (LINE:262)\l}"];
Node_41 [shape=record,label="{41\:\ 0x0027|0x0027: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hash' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0030 \l}"];
Node_45 [shape=record,label="{45\:\ 0x0030|SYNTHETIC\l}"];
Node_43 [shape=record,label="{43\:\ 0x0030|0x0030: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0006|SYNTHETIC\l}"];
Node_49 [shape=record,label="{49\:\ 0x0006|LOOP_END\lSYNTHETIC\lLOOP:0: B:29:0x0006\-\>B:49:0x0006\l}"];
Node_48 [shape=record,label="{48\:\ 0x0029|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0029|0x0029: INVOKE  (r0 I:int) = (r6 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x002d: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_51 [shape=record,label="{51\:\ 0x0006|SYNTHETIC\l}"];
Node_44 [shape=record,label="{44\:\ 0x0024|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0024|RETURN\l|0x0024: RETURN  (r3 I:int) \l}"];
Node_47 [shape=record,label="{47\:\ 0x000e|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x000e|RETURN\l|0x000e: RETURN  (r3 I:int) \l}"];
MethodNode[shape=record,label="{private final int kotlin.collections.builders.MapBuilder.findKey((r6 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r7 I:K A[D('key' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:36:0x001f \-\> B:27:?, CROSS_EDGE: B:39:0x0024 \-\> B:27:?, BACK_EDGE: B:42:0x0029 \-\> B:29:0x0006, BACK_EDGE: B:43:0x0030 \-\> B:29:0x0006, CROSS_EDGE: B:32:0x000f \-\> B:37:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0004\-0x0027: r0 'hash' I\l  0x000b\-0x002f: r2 'index' I\l  0x0027\-0x002f: r3 'hash' I\l  0x002f\-0x0030: r0 'hash' I\l  0x0006\-0x0031: r1 'probesLeft' I\l  0x0030\-0x0031: r2 'index' I\l  0x0030\-0x0031: r3 'hash' I\l  \-1 \-0x0031: r7 'key' Ljava\/lang\/Object;\lTYPE_VARS: [V, K]\lSIGNATURE: (TK;)I\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_32;
Node_30 -> Node_47[style=dashed];
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_37;
Node_33 -> Node_34;
Node_34 -> Node_37;
Node_34 -> Node_46[style=dashed];
Node_46 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_27;
Node_37 -> Node_38;
Node_38 -> Node_40;
Node_38 -> Node_44[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_45;
Node_41 -> Node_48[style=dashed];
Node_45 -> Node_43;
Node_43 -> Node_50;
Node_50 -> Node_49;
Node_49 -> Node_29;
Node_48 -> Node_42;
Node_42 -> Node_51;
Node_51 -> Node_49;
Node_44 -> Node_39;
Node_39 -> Node_27;
Node_47 -> Node_31;
Node_31 -> Node_27;
}

