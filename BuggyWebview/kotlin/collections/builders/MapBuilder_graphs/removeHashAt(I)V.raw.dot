digraph "CFG forkotlin.collections.builders.MapBuilder.removeHashAt(I)V" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|0x0000: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('removedHash' int)])  (LINE:325)\l0x0001: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('removedHash' int)])  (LINE:326)\l0x0002: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:327)\l0x0003: IGET  (r3 I:int) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.maxProbeDistance int  (LINE:328)\l0x0005: ARITH  (r3 I:int) = (r3 I:int) * (2 int) \l0x0007: INVOKE  (r4 I:int) = (r9 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x000b: ARITH  (r4 I:int) = (r4 I:int) \/ (2 int) \l0x000d: INVOKE  (r3 I:int) = (r3 I:int), (r4 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|LOOP_START\lLOOP:0: B:32:0x0011\-\>B:51:0x005e\l|0x0012: ARITH  (r4 I:int) = (r0 I:int A[D('hash' int)]) + (\-1 int)  (LINE:330)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hash' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x001d \l}"];
Node_34 [shape=record,label="{34\:\ 0x0016|0x0016: INVOKE  (r0 I:int) = (r9 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x001a: ARITH  (r0 I:int) = (r0 I:int) + (\-1 int) \l}"];
Node_36 [shape=record,label="{36\:\ 0x001e|0x001e: ARITH  (r2 I:int) = (r2 I:int A[D('probeDistance' int)]) + (1 int)  (LINE:331)\l0x0020: IGET  (r4 I:int) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.maxProbeDistance int \l0x0022: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|0x0023: IF  (r2 I:??[int, byte, short, char] A[D('probeDistance' int)]) \<= (r4 I:??[int, byte, short, char])  \-\> B:40:0x002a \l}"];
Node_40 [shape=record,label="{40\:\ 0x002a|0x002a: IGET  (r4 I:int[]) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:336)\l0x002c: AGET  (r6 I:??[int, float, short, byte, char]) = (r4 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('hash' int)]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|0x002e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0033  (LINE:337)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0033|0x0033: CONST  (r5 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:342)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0034|0x0034: IF  (r6 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:47:0x003b \l}"];
Node_46 [shape=record,label="{46\:\ 0x0036|0x0036: APUT  (r4 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('hole' int)]), (r5 I:??[int, float, short, byte, char])  (LINE:348)\l0x0038: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hole' int)]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)])  (LINE:349)\l0x0039: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('probeDistance' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:350)\l}"];
Node_50 [shape=record,label="{50\:\ 0x005c|0x005c: ARITH  (r3 I:int) = (r3 I:int A[D('patchAttemptsLeft' int)]) + (\-1 int)  (LINE:366)\l}"];
Node_51 [shape=record,label="{51\:\ 0x005e|LOOP_END\lLOOP:0: B:32:0x0011\-\>B:51:0x005e\l|0x005e: IF  (r3 I:??[int, byte, short, char] A[D('patchAttemptsLeft' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:32:0x0011 \l}"];
Node_57 [shape=record,label="{57\:\ 0x0060|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0060|0x0060: IGET  (r4 I:int[]) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:368)\l0x0062: APUT  (r4 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('hole' int)]), (r5 I:??[int, float, short, byte, char]) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0064|RETURN\l|0x0064: RETURN    (LINE:369)\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x003b|0x003b: IGET  (r4 I:K[]) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.keysArray java.lang.Object[]  (LINE:352)\l0x003d: ARITH  (r7 I:int) = (r6 I:int A[D('index' int)]) + (\-1 int) \l0x003f: AGET  (r4 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][]), (r7 I:??[int, short, byte, char]) \l0x0041: INVOKE  (r4 I:int) = (r9 I:kotlin.collections.builders.MapBuilder), (r4 I:java.lang.Object) type: DIRECT call: kotlin.collections.builders.MapBuilder.hash(java.lang.Object):int A[MD:(K):int (m)]\l0x0045: ARITH  (r7 I:int) = (r4 I:int A[D('otherHash' int)]) \- (r0 I:int A[D('hash' int)])  (LINE:357)\l0x0047: INVOKE  (r8 I:int) = (r9 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x004b: ARITH  (r8 I:int) = (r8 I:int) + (\-1 int) \l0x004d: ARITH  (r7 I:??[int, boolean]) = (r7 I:??[int, boolean, short, byte, char]) & (r8 I:??[int, boolean, short, byte, char]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x004e|0x004e: IF  (r7 I:??[int, byte, short, char]) \< (r2 I:??[int, byte, short, char] A[D('probeDistance' int)])  \-\> B:50:0x005c \l}"];
Node_49 [shape=record,label="{49\:\ 0x0050|0x0050: IGET  (r7 I:int[]) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:359)\l0x0052: APUT  \l  (r7 I:??[int, float][])\l  (r1 I:??[int, short, byte, char] A[D('hole' int)])\l  (r6 I:??[int, float, short, byte, char] A[D('index' int)])\l \l0x0054: IGET  (r7 I:int[]) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.presenceArray int[]  (LINE:360)\l0x0056: ARITH  (r8 I:int) = (r6 I:int A[D('index' int)]) + (\-1 int) \l0x0058: APUT  (r7 I:??[int, float][]), (r8 I:??[int, short, byte, char]), (r1 I:??[int, float, short, byte, char] A[D('hole' int)]) \l0x005a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hole' int)]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)])  (LINE:361)\l0x005b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('probeDistance' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:362)\l}"];
Node_56 [shape=record,label="{56\:\ 0x0030|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|0x0030: APUT  (r4 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('hole' int)]), (r5 I:??[int, float, short, byte, char])  (LINE:339)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0032|RETURN\l|0x0032: RETURN    (LINE:340)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0025|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0025|0x0025: IGET  (r4 I:int[]) = (r9 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:333)\l0x0027: APUT  (r4 I:??[int, float][]), (r1 I:??[int, short, byte, char] A[D('hole' int)]), (r5 I:??[int, float, short, byte, char]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|RETURN\l|0x0029: RETURN    (LINE:334)\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|0x001d: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) \l}"];
MethodNode[shape=record,label="{private final void kotlin.collections.builders.MapBuilder.removeHashAt((r9 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r10 I:int A[D('removedHash' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x0032 \-\> B:30:?, CROSS_EDGE: B:53:0x0064 \-\> B:30:?, BACK_EDGE: B:51:0x005e \-\> B:32:0x0011, CROSS_EDGE: B:49:0x0050 \-\> B:50:0x005c, CROSS_EDGE: B:48:0x004e \-\> B:50:0x005c, CROSS_EDGE: B:35:0x001d \-\> B:36:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0001\-0x0014: r0 'hash' I\l  0x0014\-0x001c: r4 'hash' I\l  0x001c\-0x001d: r0 'hash' I\l  0x001d\-0x001e: r4 'hash' I\l  0x0045\-0x005c: r4 'otherHash' I\l  0x001e\-0x0065: r0 'hash' I\l  0x0002\-0x0065: r1 'hole' I\l  0x0003\-0x0065: r2 'probeDistance' I\l  0x0011\-0x0065: r3 'patchAttemptsLeft' I\l  0x002e\-0x0065: r6 'index' I\l  \-1 \-0x0065: r10 'removedHash' I\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_40;
Node_37 -> Node_55[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_44;
Node_41 -> Node_56[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_32;
Node_51 -> Node_57[style=dashed];
Node_57 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_30;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_56 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_30;
Node_55 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_30;
Node_35 -> Node_36;
}

