digraph "CFG forkotlin.collections.builders.MapBuilder.removeHashAt(I)V" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|r0 = r10\lr1 = r10\lr2 = 0\lint r3 = kotlin.ranges.RangesKt.coerceAtMost(r9.maxProbeDistance * 2, getHashSize() \/ 2)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0011|LOOP_START\lLOOP:0: B:32:0x0011\-\>B:51:0x005e\lPHI: r0 r1 r2 r3 \l  PHI: (r0v1 'hash' int) = (r0v0 'hash' int), (r0v3 'hash' int) binds: [B:31:0x0000, B:51:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'hole' int) = (r1v0 'hole' int), (r1v3 'hole' int) binds: [B:31:0x0000, B:51:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 'probeDistance' int) = (r2v0 'probeDistance' int), (r2v4 'probeDistance' int) binds: [B:31:0x0000, B:51:0x005e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 'patchAttemptsLeft' int) = (r3v2 'patchAttemptsLeft' int), (r3v4 'patchAttemptsLeft' int) binds: [B:31:0x0000, B:51:0x005e] A[DONT_GENERATE, DONT_INLINE]\l|int r4 = r0 + (\-1)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0014|if (r0 != 0) goto L27\l}"];
Node_34 [shape=record,label="{34\:\ 0x0016|int r0 = getHashSize() + (\-1)\l}"];
Node_36 [shape=record,label="{36\:\ 0x001e|PHI: r0 \l  PHI: (r0v3 'hash' int) = (r0v2 'hash' int), (r0v5 'hash' int) binds: [B:35:0x001d, B:34:0x0016] A[DONT_GENERATE, DONT_INLINE]\l|int r2 = r2 + 1\l}"];
Node_37 [shape=record,label="{37\:\ 0x0023|if (r2 \<= r9.maxProbeDistance) goto L7\l}"];
Node_40 [shape=record,label="{40\:\ 0x002a|int[] r4 = r9.hashArray\lr6 = r4[r0]\l}"];
Node_41 [shape=record,label="{41\:\ 0x002e|if (r6 != 0) goto L9\l}"];
Node_44 [shape=record,label="{44\:\ 0x0033}"];
Node_45 [shape=record,label="{45\:\ 0x0034|if (r6 \>= 0) goto L18\l}"];
Node_46 [shape=record,label="{46\:\ 0x0036|r4[r1] = \-1\lr1 = r0\lr2 = 0\l}"];
Node_50 [shape=record,label="{50\:\ 0x005c|PHI: r1 r2 \l  PHI: (r1v3 'hole' int) = (r1v1 'hole' int), (r1v2 'hole' int), (r1v4 'hole' int) binds: [B:48:0x004e, B:49:0x0050, B:46:0x0036] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v4 'probeDistance' int) = (r2v2 'probeDistance' int), (r2v3 'probeDistance' int), (r2v5 'probeDistance' int) binds: [B:48:0x004e, B:49:0x0050, B:46:0x0036] A[DONT_GENERATE, DONT_INLINE]\l|int r3 = r3 + (\-1)\l}"];
Node_51 [shape=record,label="{51\:\ 0x005e|LOOP_END\lLOOP:0: B:32:0x0011\-\>B:51:0x005e\l|if (r3 \>= 0) goto L2\l}"];
Node_57 [shape=record,label="{57\:\ 0x0060|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0060|r9.hashArray[r1] = \-1\l}"];
Node_53 [shape=record,label="{53\:\ 0x0064|RETURN\l|return\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,label="{47\:\ 0x003b|int r4 = hash(r9.keysArray[r6 + (\-1)])\l}"];
Node_48 [shape=record,label="{48\:\ 0x004e|if (((r4 \- r0) & (getHashSize() + (\-1))) \< r2) goto L12\l}"];
Node_49 [shape=record,label="{49\:\ 0x0050|r9.hashArray[r1] = r6\lr9.presenceArray[r6 + (\-1)] = r1\lr1 = r0\lr2 = 0\l}"];
Node_56 [shape=record,label="{56\:\ 0x0030|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x0030|r4[r1] = 0\l}"];
Node_43 [shape=record,label="{43\:\ 0x0032|RETURN\l|return\l}"];
Node_55 [shape=record,label="{55\:\ 0x0025|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0025|r9.hashArray[r1] = 0\l}"];
Node_39 [shape=record,label="{39\:\ 0x0029|RETURN\l|return\l}"];
Node_35 [shape=record,label="{35\:\ 0x001d|r0 = r4\l}"];
MethodNode[shape=record,label="{private final void kotlin.collections.builders.MapBuilder.removeHashAt((r9v0 'this' kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r10v0 'removedHash' int A[D('removedHash' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:43:0x0032 \-\> B:30:?, CROSS_EDGE: B:53:0x0064 \-\> B:30:?, BACK_EDGE: B:51:0x005e \-\> B:32:0x0011, CROSS_EDGE: B:49:0x0050 \-\> B:50:0x005c, CROSS_EDGE: B:48:0x004e \-\> B:50:0x005c, CROSS_EDGE: B:35:0x001d \-\> B:36:0x001e\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_40;
Node_37 -> Node_55[style=dashed];
Node_40 -> Node_41;
Node_41 -> Node_44;
Node_41 -> Node_56[style=dashed];
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_47;
Node_46 -> Node_50;
Node_50 -> Node_51;
Node_51 -> Node_32;
Node_51 -> Node_57[style=dashed];
Node_57 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_30;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_50;
Node_56 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_30;
Node_55 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_30;
Node_35 -> Node_36;
}

