digraph "CFG forkotlin.collections.builders.MapBuilder.rehash(I)V" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.length int  (LINE:223)\l0x0002: INVOKE  (r1 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.size():int A[MD:():int (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:25:0x000b \l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|0x0008: INVOKE  (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.compact():void A[MD:():void (m)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x000b|0x000b: INVOKE  (r0 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)] (LINE:224)\l}"];
Node_26 [shape=record,label="{26\:\ 0x000f|0x000f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('newHashSize' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x001e \l}"];
Node_27 [shape=record,label="{27\:\ 0x0011|0x0011: NEW_ARRAY  (r0 I:int[]) = (r4 I:int A[D('newHashSize' int), IMMUTABLE_TYPE]) type: int[]  (LINE:225)\l0x0013: IPUT  (r0 I:int[]), (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[] \l0x0015: SGET  (r0 I:kotlin.collections.builders.MapBuilder$Companion) =  kotlin.collections.builders.MapBuilder.Companion kotlin.collections.builders.MapBuilder$Companion  (LINE:226)\l0x0017: INVOKE  (r0 I:int) = (r0 I:kotlin.collections.builders.MapBuilder$Companion), (r4 I:int A[D('newHashSize' int)]) type: STATIC call: kotlin.collections.builders.MapBuilder.Companion.access$computeShift(kotlin.collections.builders.MapBuilder$Companion, int):int A[MD:(kotlin.collections.builders.MapBuilder$Companion, int):int (m)]\l0x001b: IPUT  (r0 I:int), (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashShift int \l}"];
Node_29 [shape=record,label="{29\:\ 0x0028|0x0028: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:230)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0029|LOOP_START\lLOOP:0: B:30:0x0029\-\>B:34:0x0035\l|0x0029: IGET  (r1 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.length int  (LINE:231)\l}"];
Node_31 [shape=record,label="{31\:\ 0x002b|0x002b: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:39:0x003f \l}"];
Node_32 [shape=record,label="{32\:\ 0x002d|0x002d: ARITH  (r1 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:232)\l0x002f: INVOKE  (r0 I:boolean) = (r3 I:kotlin.collections.builders.MapBuilder), (r0 I:int A[D('i' int)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.putRehash(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0033|0x0033: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0037 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0035|LOOP_END\lLOOP:0: B:30:0x0029\-\>B:34:0x0035\l|0x0035: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('i' int)]) \l}"];
Node_38 [shape=record,label="{38\:\ 0x0037|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0037|0x0037: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException) =  java.lang.IllegalStateException  (LINE:233)\l0x0039: CONST_STR  (r2 I:java.lang.String) =  \"This cannot happen with fixed magic multiplier and grow\-only hash array. Have object hashCodes changed?\" \l0x003b: INVOKE  (r0 I:java.lang.IllegalStateException), (r2 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x003e|0x003e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x003f|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x003f|RETURN\l|0x003f: RETURN    (LINE:237)\l}"];
Node_28 [shape=record,label="{28\:\ 0x001e|0x001e: IGET  (r0 I:int[]) = (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:228)\l0x0020: INVOKE  (r1 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x0024: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: INVOKE  (r0 I:int[]), (r2 I:int), (r2 I:int), (r1 I:int) type: STATIC call: kotlin.collections.ArraysKt.fill(int[], int, int, int):void A[MD:(int[], int, int, int):void (m)]\l}"];
MethodNode[shape=record,label="{private final void kotlin.collections.builders.MapBuilder.rehash((r3 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('newHashSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x0035 \-\> B:30:0x0029, CROSS_EDGE: B:37:0x003f \-\> B:21:?, CROSS_EDGE: B:28:0x001e \-\> B:29:0x0028, CROSS_EDGE: B:23:0x0006 \-\> B:25:0x000b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0029\-0x002f: r0 'i' I\l  0x002f\-0x003f: r1 'i' I\l  0x003f\-0x003f: r0 'i' I\l  \-1 \-0x003f: r4 'newHashSize' I\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_28;
Node_27 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_39;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_38;
Node_34 -> Node_30;
Node_38 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_21;
Node_39 -> Node_37;
Node_37 -> Node_21;
Node_28 -> Node_29;
}

