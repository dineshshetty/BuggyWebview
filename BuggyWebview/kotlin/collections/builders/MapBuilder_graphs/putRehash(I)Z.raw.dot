digraph "CFG forkotlin.collections.builders.MapBuilder.putRehash(I)Z" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: IGET  (r0 I:K[]) = (r6 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.keysArray java.lang.Object[]  (LINE:240)\l0x0002: AGET  (r0 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][]), (r7 I:??[int, short, byte, char] A[D('i' int)]) \l0x0004: INVOKE  (r0 I:int) = (r6 I:kotlin.collections.builders.MapBuilder), (r0 I:java.lang.Object) type: DIRECT call: kotlin.collections.builders.MapBuilder.hash(java.lang.Object):int A[MD:(K):int (m)]\l0x0008: IGET  (r1 I:int) = (r6 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.maxProbeDistance int  (LINE:241)\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|LOOP_START\lLOOP:0: B:25:0x000a\-\>B:41:0x000a\l|0x000b: IGET  (r2 I:int[]) = (r6 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:243)\l0x000d: AGET  (r3 I:??[int, float, short, byte, char]) = (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('hash' int)]) \l0x000f: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:244)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|0x0010: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x001b \l}"];
Node_29 [shape=record,label="{29\:\ 0x001b|0x001b: ARITH  (r1 I:int) = (r1 I:int A[D('probesLeft' int)]) + (\-1 int)  (LINE:249)\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|0x001d: IF  (r1 I:??[int, byte, short, char] A[D('probesLeft' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:33:0x0021 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0021|0x0021: ARITH  (r2 I:int) = (r0 I:int A[D('hash' int)]) + (\-1 int)  (LINE:250)\l}"];
Node_34 [shape=record,label="{34\:\ 0x0023|0x0023: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hash' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x002b \l}"];
Node_38 [shape=record,label="{38\:\ 0x002b|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x002b|0x002b: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) \l}"];
Node_42 [shape=record,label="{42\:\ 0x000a|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x000a|LOOP_END\lSYNTHETIC\lLOOP:0: B:25:0x000a\-\>B:41:0x000a\l}"];
Node_40 [shape=record,label="{40\:\ 0x0025|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0025|0x0025: INVOKE  (r0 I:int) = (r6 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x0029: ARITH  (r0 I:int) = (r0 I:int) \- (r4 I:int) \l}"];
Node_43 [shape=record,label="{43\:\ 0x000a|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x001f|SYNTHETIC\l}"];
Node_31 [shape=record,label="{31\:\ 0x001f|RETURN\l|0x001f: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: RETURN  (r2 I:boolean) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0012|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x0012|0x0012: ARITH  (r5 I:int) = (r7 I:int A[D('i' int)]) + (1 int)  (LINE:245)\l0x0014: APUT  (r2 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('hash' int)]), (r5 I:??[int, float, short, byte, char]) \l0x0016: IGET  (r2 I:int[]) = (r6 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.presenceArray int[]  (LINE:246)\l0x0018: APUT  \l  (r2 I:??[int, float][])\l  (r7 I:??[int, short, byte, char] A[D('i' int)])\l  (r0 I:??[int, float, short, byte, char] A[D('hash' int)])\l \l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|RETURN\l|0x001a: RETURN  (r4 I:boolean)  (LINE:247)\l}"];
MethodNode[shape=record,label="{private final boolean kotlin.collections.builders.MapBuilder.putRehash((r6 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r7 I:int A[D('i' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:32:0x0020 \-\> B:23:?, BACK_EDGE: B:35:0x0025 \-\> B:25:0x000a, BACK_EDGE: B:36:0x002b \-\> B:25:0x000a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0008\-0x0023: r0 'hash' I\l  0x0023\-0x002a: r2 'hash' I\l  0x000f\-0x002a: r3 'index' I\l  0x002a\-0x002b: r0 'hash' I\l  0x000a\-0x002c: r1 'probesLeft' I\l  0x002b\-0x002c: r2 'hash' I\l  0x002b\-0x002c: r3 'index' I\l  \-1 \-0x002c: r7 'i' I\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_26 -> Node_29;
Node_26 -> Node_37[style=dashed];
Node_29 -> Node_30;
Node_30 -> Node_33;
Node_30 -> Node_39[style=dashed];
Node_33 -> Node_34;
Node_34 -> Node_38;
Node_34 -> Node_40[style=dashed];
Node_38 -> Node_36;
Node_36 -> Node_42;
Node_42 -> Node_41;
Node_41 -> Node_25;
Node_40 -> Node_35;
Node_35 -> Node_43;
Node_43 -> Node_41;
Node_39 -> Node_31;
Node_31 -> Node_23;
Node_37 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_23;
}

