digraph "CFG forkotlin.collections.builders.MapBuilder.get(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.builders.MapBuilder), (r3 I:java.lang.Object A[D('key' java.lang.Object)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.findKey(java.lang.Object):int A[MD:(K):int (m)] (LINE:61)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:14:0x0008  (LINE:62)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|RETURN\l|0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: RETURN  (r1 I:V) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0008|0x0008: IGET  (r1 I:V[]) = (r2 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.valuesArray java.lang.Object[]  (LINE:63)\l0x000a: INVOKE  (r1 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x000d: AGET  (r1 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('index' int)]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:V) \l}"];
MethodNode[shape=record,label="{public V kotlin.collections.builders.MapBuilder.get((r2 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.Object A[D('key' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x000f \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/lang\/Object;)TV;\lDebug Info:\l  0x0004\-0x000f: r0 'index' I\l  \-1 \-0x000f: r3 'key' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Map.get(java.lang.Object):V\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

