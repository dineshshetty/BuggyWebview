digraph "CFG forkotlin.collections.builders.MapBuilder.rehash(I)V" {
subgraph cluster_Region_120831351 {
label = "R(4:(1:3)|(1:6)(1:19)|7|(2:10|(2:(1:15)|(1:12))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_857947565 {
label = "IF [B:23:0x0006] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0006|if (r3.length \> size()) goto L3\l}"];
subgraph cluster_Region_991778986 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0008|compact()\l}"];
}
}
subgraph cluster_IfRegion_1643388385 {
label = "IF [B:26:0x000f] THEN: R(1:6) ELSE: R(1:19)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x000f|if (r4 != getHashSize()) goto L6\l}"];
subgraph cluster_Region_766989495 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0011|r3.hashArray = new int[r4]\lr3.hashShift = kotlin.collections.builders.MapBuilder.Companion.computeShift(r4)\l}"];
}
subgraph cluster_Region_122931961 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x001e|kotlin.collections.ArraysKt.fill(r3.hashArray, 0, 0, getHashSize())\l}"];
}
}
Node_29 [shape=record,label="{29\:\ 0x0028|int r0 = 0\l}"];
subgraph cluster_LoopRegion_1298842418 {
label = "LOOP:0: (2:10|(2:(1:15)|(1:12)))";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x002b|if (r0 \< r3.length) goto L10\l}"];
subgraph cluster_Region_1615632517 {
label = "R(2:10|(2:(1:15)|(1:12)))";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x002d|int int r1 = r0 + 1\l}"];
subgraph cluster_Region_1457134257 {
label = "R(2:(1:15)|(1:12))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_2056149502 {
label = "IF [B:33:0x0033] THEN: R(1:15) ELSE: null";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0033|if (putRehash(r0) != true) goto L13\l}"];
subgraph cluster_Region_394272414 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x003e|throw new java.lang.IllegalStateException(\"This cannot happen with fixed magic multiplier and grow\-only hash array. Have object hashCodes changed?\")\l}"];
}
}
subgraph cluster_Region_883991326 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0035|LOOP_END\lLOOP:0: B:30:0x0029\-\>B:34:0x0035\l|r0 = r1\l}"];
}
}
}
}
}
Node_20 [shape=record,color=red,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0000}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x000b}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0029|LOOP_START\lLOOP:0: B:30:0x0029\-\>B:34:0x0035\lPHI: r0 \l  PHI: (r0v4 'i' int) = (r0v3 'i' int), (r0v7 'i' int) binds: [B:29:0x0028, B:34:0x0035] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x0037|SYNTHETIC\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0037}"];
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x003f|SYNTHETIC\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x003f}"];
MethodNode[shape=record,label="{private final void kotlin.collections.builders.MapBuilder.rehash((r3v0 'this' kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'newHashSize' int A[D('newHashSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x0035 \-\> B:30:0x0029, CROSS_EDGE: B:37:0x003f \-\> B:21:?, CROSS_EDGE: B:28:0x001e \-\> B:29:0x0028, CROSS_EDGE: B:23:0x0006 \-\> B:25:0x000b\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_20;Node_23 -> Node_24;
Node_23 -> Node_25[style=dashed];
Node_24 -> Node_25;
Node_26 -> Node_27;
Node_26 -> Node_28[style=dashed];
Node_27 -> Node_29;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_31 -> Node_32;
Node_31 -> Node_39[style=dashed];
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_38;
Node_36 -> Node_21;
Node_34 -> Node_30;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_25 -> Node_26;
Node_30 -> Node_31;
Node_38 -> Node_35;
Node_35 -> Node_36;
Node_39 -> Node_37;
Node_37 -> Node_21;
}

