digraph "CFG forkotlin.collections.builders.MapBuilder.addKey$kotlin_stdlib(Ljava\/lang\/Object;)I" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: INVOKE  (r8 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.checkIsMutable$kotlin_stdlib():void A[MD:():void (m)] (LINE:276)\l}"];
Node_39 [shape=record,label="{39\:\ 0x0003|LOOP_START\lLOOP:0: B:39:0x0003\-\>B:64:0x0003\l|0x0004: INVOKE  (r0 I:int) = (r8 I:kotlin.collections.builders.MapBuilder), (r9 I:java.lang.Object A[D('key' java.lang.Object)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.hash(java.lang.Object):int A[MD:(K):int (m)] (LINE:278)\l0x0008: IGET  (r1 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.maxProbeDistance int  (LINE:280)\l0x000a: ARITH  (r1 I:int) = (r1 I:int) * (2 int) \l0x000c: INVOKE  (r2 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x0010: ARITH  (r2 I:int) = (r2 I:int) \/ (2 int) \l0x0012: INVOKE  (r1 I:int) = (r1 I:int), (r2 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l0x0016: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:281)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0017|LOOP_START\lLOOP:1: B:40:0x0017\-\>B:69:0x0017\l|0x0018: IGET  (r3 I:int[]) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:283)\l0x001a: AGET  (r3 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('hash' int)]) \l0x001c: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:284)\l}"];
Node_41 [shape=record,label="{41\:\ 0x001d|0x001d: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \> (0 ??[int, byte, short, char])  \-\> B:49:0x004d \l}"];
Node_49 [shape=record,label="{49\:\ 0x004d|0x004d: IGET  (r5 I:K[] A[D('putIndex' int)]) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.keysArray java.lang.Object[]  (LINE:297)\l0x004f: ARITH  (r6 I:int) = (r3 I:int A[D('index' int)]) + (\-1 int) \l0x0051: AGET  (r5 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY][]), (r6 I:??[int, short, byte, char]) \l0x0053: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Object), (r9 I:java.lang.Object A[D('key' java.lang.Object)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_50 [shape=record,label="{50\:\ 0x0057|0x0057: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x005b \l}"];
Node_53 [shape=record,label="{53\:\ 0x005b|0x005b: ARITH  (r2 I:int) = (r2 I:int A[D('probeDistance' int)]) + (1 int)  (LINE:300)\l}"];
Node_54 [shape=record,label="{54\:\ 0x005d|0x005d: IF  (r2 I:??[int, byte, short, char] A[D('probeDistance' int)]) \<= (r1 I:??[int, byte, short, char] A[D('tentativeMaxProbeDistance' int)])  \-\> B:56:0x0069 \l}"];
Node_56 [shape=record,label="{56\:\ 0x0069|0x0069: ARITH  (r5 I:int) = (r0 I:int A[D('hash' int)]) + (\-1 int)  (LINE:304)\l}"];
Node_57 [shape=record,label="{57\:\ 0x006b|0x006b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('hash' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:67:0x0073 \l}"];
Node_67 [shape=record,label="{67\:\ 0x0073|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0073|0x0073: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('hash' int)]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x0017|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0017|LOOP_END\lSYNTHETIC\lLOOP:1: B:40:0x0017\-\>B:69:0x0017\l}"];
Node_68 [shape=record,label="{68\:\ 0x006d|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x006d|0x006d: INVOKE  (r0 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)]\l0x0071: ARITH  (r0 I:int) = (r0 I:int) \- (r4 I:int) \l}"];
Node_71 [shape=record,label="{71\:\ 0x0017|SYNTHETIC\l}"];
Node_62 [shape=record,label="{62\:\ 0x005f|SYNTHETIC\l}"];
Node_55 [shape=record,label="{55\:\ 0x005f|0x005f: INVOKE  (r4 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)] (LINE:301)\l0x0063: ARITH  (r4 I:int) = (r4 I:int) * (2 int) \l0x0065: INVOKE  (r8 I:kotlin.collections.builders.MapBuilder), (r4 I:int) type: DIRECT call: kotlin.collections.builders.MapBuilder.rehash(int):void A[MD:(int):void (m)]\l}"];
Node_65 [shape=record,label="{65\:\ 0x0003|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0003|LOOP_END\lSYNTHETIC\lLOOP:0: B:39:0x0003\-\>B:64:0x0003\l}"];
Node_61 [shape=record,label="{61\:\ 0x0059|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0059|0x0059: NEG  (r4 I:int) = (r3 I:int A[D('index' int)])  (LINE:298)\l}"];
Node_52 [shape=record,label="{52\:\ 0x005a|RETURN\l|0x005a: RETURN  (r4 I:int) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_63 [shape=record,label="{63\:\ 0x001f|SYNTHETIC\l}"];
Node_42 [shape=record,label="{42\:\ 0x001f|0x001f: IGET  (r5 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.length int  (LINE:285)\l0x0021: INVOKE  (r6 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getCapacity():int A[MD:():int (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0025|0x0025: IF  (r5 I:??[int, byte, short, char]) \< (r6 I:??[int, byte, short, char])  \-\> B:60:0x002b \l}"];
Node_44 [shape=record,label="{44\:\ 0x0027|0x0027: INVOKE  (r8 I:kotlin.collections.builders.MapBuilder), (r4 I:int) type: DIRECT call: kotlin.collections.builders.MapBuilder.ensureExtraCapacity(int):void A[MD:(int):void (m)] (LINE:286)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0003|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x002b|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x002b|0x002b: IGET  (r5 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.length int  (LINE:289)\l0x002d: ARITH  (r6 I:int) = (r5 I:int) + (1 int) \l0x002f: IPUT  (r6 I:int), (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.length int \l0x0031: IGET  (r6 I:K[]) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.keysArray java.lang.Object[]  (LINE:290)\l0x0033: APUT  \l  (r6 I:??[OBJECT, ARRAY][])\l  (r5 I:??[int, short, byte, char] A[D('putIndex' int)])\l  (r9 I:??[OBJECT, ARRAY] A[D('key' java.lang.Object)])\l \l0x0035: IGET  (r6 I:int[]) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.presenceArray int[]  (LINE:291)\l0x0037: APUT  \l  (r6 I:??[int, float][])\l  (r5 I:??[int, short, byte, char] A[D('putIndex' int)])\l  (r0 I:??[int, float, short, byte, char] A[D('hash' int)])\l \l0x0039: IGET  (r6 I:int[]) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.hashArray int[]  (LINE:292)\l0x003b: ARITH  (r7 I:int) = (r5 I:int A[D('putIndex' int)]) + (1 int) \l0x003d: APUT  (r6 I:??[int, float][]), (r0 I:??[int, short, byte, char] A[D('hash' int)]), (r7 I:??[int, float, short, byte, char]) \l0x003f: INVOKE  (r6 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.size():int A[MD:():int (m)] (LINE:293)\l0x0043: ARITH  (r6 I:int) = (r6 I:int) + (r4 I:int) \l0x0044: IPUT  (r6 I:int), (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.size int \l0x0046: IGET  (r4 I:int) = (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.maxProbeDistance int  (LINE:294)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0048|0x0048: IF  (r2 I:??[int, byte, short, char] A[D('probeDistance' int)]) \<= (r4 I:??[int, byte, short, char])  \-\> B:48:0x004c \l}"];
Node_47 [shape=record,label="{47\:\ 0x004a|0x004a: IPUT  (r2 I:int A[D('probeDistance' int)]), (r8 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.maxProbeDistance int \l}"];
Node_48 [shape=record,label="{48\:\ 0x004c|RETURN\l|0x004c: RETURN  (r5 I:int A[D('putIndex' int)])  (LINE:295)\l}"];
MethodNode[shape=record,label="{public final int kotlin.collections.builders.MapBuilder.addKey$kotlin_stdlib((r8 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r9 I:K A[D('key' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:44:0x0027 \-\> B:39:0x0003, CROSS_EDGE: B:46:0x0048 \-\> B:48:0x004c, CROSS_EDGE: B:52:0x005a \-\> B:37:?, BACK_EDGE: B:55:0x005f \-\> B:39:0x0003, BACK_EDGE: B:58:0x006d \-\> B:40:0x0017, BACK_EDGE: B:59:0x0073 \-\> B:40:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0031\-0x004d: r5 'putIndex' I\l  0x0008\-0x006b: r0 'hash' I\l  0x001c\-0x0072: r3 'index' I\l  0x006b\-0x0072: r5 'hash' I\l  0x0072\-0x0073: r0 'hash' I\l  0x0016\-0x0074: r1 'tentativeMaxProbeDistance' I\l  0x0017\-0x0074: r2 'probeDistance' I\l  0x0073\-0x0074: r3 'index' I\l  0x0073\-0x0074: r5 'hash' I\l  \-1 \-0x0074: r9 'key' Ljava\/lang\/Object;\lTYPE_VARS: [V, K]\lSIGNATURE: (TK;)I\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_49;
Node_41 -> Node_63[style=dashed];
Node_49 -> Node_50;
Node_50 -> Node_53;
Node_50 -> Node_61[style=dashed];
Node_53 -> Node_54;
Node_54 -> Node_56;
Node_54 -> Node_62[style=dashed];
Node_56 -> Node_57;
Node_57 -> Node_67;
Node_57 -> Node_68[style=dashed];
Node_67 -> Node_59;
Node_59 -> Node_70;
Node_70 -> Node_69;
Node_69 -> Node_40;
Node_68 -> Node_58;
Node_58 -> Node_71;
Node_71 -> Node_69;
Node_62 -> Node_55;
Node_55 -> Node_65;
Node_65 -> Node_64;
Node_64 -> Node_39;
Node_61 -> Node_51;
Node_51 -> Node_52;
Node_52 -> Node_37;
Node_63 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_60;
Node_44 -> Node_66;
Node_66 -> Node_64;
Node_60 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_48;
Node_47 -> Node_48;
Node_48 -> Node_37;
}

