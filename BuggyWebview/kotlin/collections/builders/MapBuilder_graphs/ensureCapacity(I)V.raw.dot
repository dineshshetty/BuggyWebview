digraph "CFG forkotlin.collections.builders.MapBuilder.ensureCapacity(I)V" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: IF  (r4 I:??[int, byte, short, char] A[D('capacity' int)]) \< (0 ??[int, byte, short, char])  \-\> B:43:0x005a  (LINE:180)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0002|0x0002: INVOKE  (r0 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getCapacity():int A[MD:():int (m)] (LINE:181)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0006|0x0006: IF  (r4 I:??[int, byte, short, char] A[D('capacity' int)]) \<= (r0 I:??[int, byte, short, char])  \-\> B:39:0x0044 \l}"];
Node_29 [shape=record,label="{29\:\ 0x0008|0x0008: INVOKE  (r0 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getCapacity():int A[MD:():int (m)] (LINE:182)\l0x000c: ARITH  (r0 I:int) = (r0 I:int) * (3 int) \l0x000e: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|0x0010: IF  (r4 I:??[int, byte, short, char] A[D('capacity' int)]) \<= (r0 I:??[int, byte, short, char] A[D('newSize' int)])  \-\> B:32:0x0013  (LINE:183)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newSize' int)]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('capacity' int)]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0013|0x0013: IGET  (r1 I:K[]) = (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.keysArray java.lang.Object[]  (LINE:184)\l0x0015: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r0 I:int A[D('newSize' int)]) type: STATIC call: kotlin.collections.builders.ListBuilderKt.copyOfUninitializedElements(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (m)]\l0x0019: IPUT  (r1 I:K[]), (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.keysArray java.lang.Object[] \l0x001b: IGET  (r1 I:V[]) = (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.valuesArray java.lang.Object[]  (LINE:185)\l}"];
Node_33 [shape=record,label="{33\:\ 0x001d|0x001d: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0024 \l}"];
Node_34 [shape=record,label="{34\:\ 0x001f|0x001f: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:java.lang.Object[]), (r0 I:int A[D('newSize' int)]) type: STATIC call: kotlin.collections.builders.ListBuilderKt.copyOfUninitializedElements(java.lang.Object[], int):java.lang.Object[] A[MD:\<T\>:(T[], int):T[] (m)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0025|0x0025: IPUT  (r1 I:V[]), (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.valuesArray java.lang.Object[] \l0x0027: IGET  (r1 I:int[]) = (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.presenceArray int[]  (LINE:186)\l0x0029: INVOKE  (r1 I:int[]) = (r1 I:int[]), (r0 I:int A[D('newSize' int)]) type: STATIC call: java.util.Arrays.copyOf(int[], int):int[] A[MD:(int[], int):int[] (c)]\l0x002d: CONST_STR  (r2 I:java.lang.String) =  \"copyOf(this, newSize)\" \l0x002f: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0032: IPUT  (r1 I:int[]), (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.presenceArray int[] \l0x0034: SGET  (r1 I:kotlin.collections.builders.MapBuilder$Companion) =  kotlin.collections.builders.MapBuilder.Companion kotlin.collections.builders.MapBuilder$Companion  (LINE:187)\l0x0036: INVOKE  (r1 I:int) = (r1 I:kotlin.collections.builders.MapBuilder$Companion), (r0 I:int A[D('newSize' int)]) type: STATIC call: kotlin.collections.builders.MapBuilder.Companion.access$computeHashSize(kotlin.collections.builders.MapBuilder$Companion, int):int A[MD:(kotlin.collections.builders.MapBuilder$Companion, int):int (m)]\l0x003a: INVOKE  (r2 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)] (LINE:188)\l}"];
Node_37 [shape=record,label="{37\:\ 0x003e|0x003e: IF  (r1 I:??[int, byte, short, char] A[D('newHashSize' int)]) \<= (r2 I:??[int, byte, short, char])  \-\> B:45:? \l}"];
Node_38 [shape=record,label="{38\:\ 0x0040|0x0040: INVOKE  (r3 I:kotlin.collections.builders.MapBuilder), (r1 I:int A[D('newHashSize' int)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.rehash(int):void A[MD:(int):void (m)]\l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:192)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_45 [shape=record,label="{45\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:192)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0024|0x0024: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_39 [shape=record,label="{39\:\ 0x0044|0x0044: IGET  (r0 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.length int  (LINE:189)\l0x0046: ARITH  (r0 I:int) = (r0 I:int) + (r4 I:int A[D('capacity' int)]) \l0x0047: INVOKE  (r1 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.size():int A[MD:():int (m)]\l0x004b: ARITH  (r0 I:int) = (r0 I:int) \- (r1 I:int) \l0x004c: INVOKE  (r1 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getCapacity():int A[MD:():int (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0050|0x0050: IF  (r0 I:??[int, byte, short, char]) \<= (r1 I:??[int, byte, short, char])  \-\> B:47:? \l}"];
Node_41 [shape=record,label="{41\:\ 0x0052|0x0052: INVOKE  (r0 I:int) = (r3 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getHashSize():int A[MD:():int (m)] (LINE:190)\l0x0056: INVOKE  (r3 I:kotlin.collections.builders.MapBuilder), (r0 I:int) type: DIRECT call: kotlin.collections.builders.MapBuilder.rehash(int):void A[MD:(int):void (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0059|RETURN\lORIG_RETURN\l|0x0059: RETURN    (LINE:192)\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0059: RETURN   A[SYNTHETIC] (LINE:192)\l}"];
Node_43 [shape=record,label="{43\:\ 0x005a|0x005a: NEW_INSTANCE  (r0 I:java.lang.OutOfMemoryError) =  java.lang.OutOfMemoryError  (LINE:180)\l0x005c: INVOKE  (r0 I:java.lang.OutOfMemoryError) type: DIRECT call: java.lang.OutOfMemoryError.\<init\>():void A[MD:():void (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x005f|0x005f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private final void kotlin.collections.builders.MapBuilder.ensureCapacity((r3 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r4 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x003e \-\> B:42:0x0059, CROSS_EDGE: B:35:0x0024 \-\> B:36:0x0025, CROSS_EDGE: B:30:0x0010 \-\> B:32:0x0013, CROSS_EDGE: B:41:0x0052 \-\> B:42:0x0059, CROSS_EDGE: B:40:0x0050 \-\> B:42:0x0059, CROSS_EDGE: B:44:0x005f \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0043: r0 'newSize' I\l  0x003a\-0x0043: r1 'newHashSize' I\l  \-1 \-0x005f: r4 'capacity' I\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_43;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_39;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_45;
Node_38 -> Node_46;
Node_46 -> Node_25;
Node_45 -> Node_25;
Node_35 -> Node_36;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_47;
Node_41 -> Node_42;
Node_42 -> Node_25;
Node_47 -> Node_25;
Node_43 -> Node_44;
Node_44 -> Node_25;
}

