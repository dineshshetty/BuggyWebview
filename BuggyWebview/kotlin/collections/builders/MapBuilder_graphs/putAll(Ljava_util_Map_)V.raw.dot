digraph "CFG forkotlin.collections.builders.MapBuilder.putAll(Ljava\/util\/Map;)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"from\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('from' java.util.Map)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r1 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.checkIsMutable$kotlin_stdlib():void A[MD:():void (m)] (LINE:81)\l0x0008: INVOKE  (r0 I:java.util.Set) = (r2 I:java.util.Map A[D('from' java.util.Map)]) type: INTERFACE call: java.util.Map.entrySet():java.util.Set A[MD:():java.util.Set\<java.util.Map$Entry\<K, V\>\> (c)] (LINE:82)\l0x000c: CHECK_CAST (r0 I:java.util.Collection) = (java.util.Collection) (r0 I:??[OBJECT, ARRAY]) \l0x000e: INVOKE  (r1 I:kotlin.collections.builders.MapBuilder), (r0 I:java.util.Collection) type: DIRECT call: kotlin.collections.builders.MapBuilder.putAllEntries(java.util.Collection):boolean A[MD:(java.util.Collection\<? extends java.util.Map$Entry\<? extends K, ? extends V\>\>):boolean (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x0011|RETURN\l|0x0011: RETURN    (LINE:83)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.collections.builders.MapBuilder.putAll((r1 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.Map\<? extends K, ? extends V\> A[D('from' java.util.Map), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0011: r2 'from' Ljava\/util\/Map;\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/util\/Map\<+TK;+TV;\>;)V\lMETHOD_OVERRIDE: [ClspMth\{java.util.Map.putAll(java.util.Map\<? extends K, ? extends V\>):void\}]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

