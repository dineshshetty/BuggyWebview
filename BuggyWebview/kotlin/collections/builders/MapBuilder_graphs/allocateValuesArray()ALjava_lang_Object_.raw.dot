digraph "CFG forkotlin.collections.builders.MapBuilder.allocateValuesArray()[Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: IGET  (r0 I:V[]) = (r2 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.valuesArray java.lang.Object[]  (LINE:195)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('curValuesArray' java.lang.Object[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005  (LINE:196)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|RETURN\l|0x0004: RETURN  (r0 I:V[] A[D('curValuesArray' java.lang.Object[])]) \l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r1 I:int) = (r2 I:kotlin.collections.builders.MapBuilder) type: DIRECT call: kotlin.collections.builders.MapBuilder.getCapacity():int A[MD:():int (m)] (LINE:197)\l0x0009: INVOKE  (r1 I:java.lang.Object[]) = (r1 I:int) type: STATIC call: kotlin.collections.builders.ListBuilderKt.arrayOfUninitializedElements(int):java.lang.Object[] A[MD:\<E\>:(int):E[] (m)]\l0x000d: IPUT  (r1 I:V[] A[D('newValuesArray' java.lang.Object[])]), (r2 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.valuesArray java.lang.Object[]  (LINE:198)\l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|RETURN\l|0x000f: RETURN  (r1 I:V[] A[D('newValuesArray' java.lang.Object[])])  (LINE:199)\l}"];
MethodNode[shape=record,label="{public final V[] kotlin.collections.builders.MapBuilder.allocateValuesArray((r2 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x000f \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0002\-0x000f: r0 'curValuesArray' [Ljava\/lang\/Object;\l  0x000d\-0x000f: r1 'newValuesArray' [Ljava\/lang\/Object;\lTYPE_VARS: [V, K]\lSIGNATURE: ()[TV;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

