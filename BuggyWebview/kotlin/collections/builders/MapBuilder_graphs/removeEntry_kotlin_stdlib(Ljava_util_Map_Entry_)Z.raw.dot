digraph "CFG forkotlin.collections.builders.MapBuilder.removeEntry$kotlin_stdlib(Ljava\/util\/Map$Entry;)Z" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"entry\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('entry' java.util.Map$Entry)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r4 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.checkIsMutable$kotlin_stdlib():void A[MD:():void (m)] (LINE:425)\l0x0008: INVOKE  (r0 I:java.lang.Object) = (r5 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getKey():java.lang.Object A[MD:():K (c)] (LINE:426)\l0x000c: INVOKE  (r0 I:int) = (r4 I:kotlin.collections.builders.MapBuilder), (r0 I:java.lang.Object) type: DIRECT call: kotlin.collections.builders.MapBuilder.findKey(java.lang.Object):int A[MD:(K):int (m)]\l0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:427)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0011|0x0011: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:15:0x0014 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0013|RETURN\l|0x0013: RETURN  (r1 I:boolean) \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0014|0x0014: IGET  (r2 I:V[]) = (r4 I:kotlin.collections.builders.MapBuilder) kotlin.collections.builders.MapBuilder.valuesArray java.lang.Object[]  (LINE:428)\l0x0016: INVOKE  (r2 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x0019: AGET  (r2 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY][]), (r0 I:??[int, short, byte, char] A[D('index' int)]) \l0x001b: INVOKE  (r3 I:java.lang.Object) = (r5 I:java.util.Map$Entry A[D('entry' java.util.Map$Entry)]) type: INTERFACE call: java.util.Map.Entry.getValue():java.lang.Object A[MD:():V (c)]\l0x001f: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Object), (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0023|0x0023: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:18:0x0026 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0025|RETURN\l|0x0025: RETURN  (r1 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0026|0x0026: INVOKE  (r4 I:kotlin.collections.builders.MapBuilder), (r0 I:int A[D('index' int)]) type: DIRECT call: kotlin.collections.builders.MapBuilder.removeKeyAt(int):void A[MD:(int):void (m)] (LINE:429)\l0x0029: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:430)\l}"];
Node_19 [shape=record,label="{19\:\ 0x002a|RETURN\l|0x002a: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public final boolean kotlin.collections.builders.MapBuilder.removeEntry$kotlin_stdlib((r4 'this' I:kotlin.collections.builders.MapBuilder\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r5 I:java.util.Map$Entry\<? extends K, ? extends V\> A[D('entry' java.util.Map$Entry), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0025 \-\> B:11:?, CROSS_EDGE: B:19:0x002a \-\> B:11:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x002a: r0 'index' I\l  \-1 \-0x002a: r5 'entry' Ljava\/util\/Map$Entry;\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/util\/Map$Entry\<+TK;+TV;\>;)Z\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_11;
Node_18 -> Node_19;
Node_19 -> Node_11;
}

