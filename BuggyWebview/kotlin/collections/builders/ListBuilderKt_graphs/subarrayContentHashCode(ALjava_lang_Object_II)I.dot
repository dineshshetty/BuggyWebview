digraph "CFG forkotlin.collections.builders.ListBuilderKt.subarrayContentHashCode([Ljava\/lang\/Object;II)I" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|r0 = 1\lr1 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x0002|LOOP_START\lLOOP:0: B:16:0x0002\-\>B:21:0x0012\lPHI: r0 r1 \l  PHI: (r0v1 'result' int) = (r0v0 'result' int), (r0v2 'result' int) binds: [B:15:0x0000, B:21:0x0012] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'i' int) = (r1v0 'i' int), (r1v2 'i' int) binds: [B:15:0x0000, B:21:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r7) goto L10\l}"];
Node_17 [shape=record,label="{17\:\ 0x0004|r2 = r5[r6 + r1]\lint r3 = r0 * 31\l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|if (r2 == null) goto L8\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|int r4 = r2.hashCode()\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0012|LOOP_END\lLOOP:0: B:16:0x0002\-\>B:21:0x0012\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:24:0x0012, B:25:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = r3 + r4\lint r1 = r1 + 1\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|r4 = 0\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|RETURN\l|return r0\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.builders.ListBuilderKt.subarrayContentHashCode((r5v0 T[] A[D('$this$subarrayContentHashCode' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'offset' int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0012 \-\> B:16:0x0002, CROSS_EDGE: B:20:0x0011 \-\> B:21:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;II)I\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_25;
Node_25 -> Node_21;
Node_21 -> Node_16;
Node_20 -> Node_24;
Node_24 -> Node_21;
Node_23 -> Node_22;
Node_22 -> Node_14;
}

