digraph "CFG forkotlin.collections.builders.ListBuilderKt.subarrayContentToString([Ljava\/lang\/Object;II)Ljava\/lang\/String;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|java.lang.StringBuilder r0 = new java.lang.StringBuilder((r6 * 3) + 2)\lr0.append(\"[\")\lr1 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|LOOP_START\lLOOP:0: B:15:0x000f\-\>B:18:0x0018\lPHI: r1 \l  PHI: (r1v4 'i' int) = (r1v3 'i' int), (r1v5 'i' int) binds: [B:14:0x0000, B:18:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r6) goto L8\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|if (r1 \<= 0) goto L7\l}"];
Node_17 [shape=record,label="{17\:\ 0x0013|r0.append(\", \")\l}"];
Node_22 [shape=record,label="{22\:\ 0x0018|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0018|LOOP_END\lLOOP:0: B:15:0x000f\-\>B:18:0x0018\l|r0.append(r4[r5 + r1])\lint r1 = r1 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x0018|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0022|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|r0.append(\"]\")\ljava.lang.String r2 = r0.toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r2, \"sb.toString()\")\l}"];
Node_20 [shape=record,label="{20\:\ 0x0030|RETURN\l|return r2\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.collections.builders.ListBuilderKt.subarrayContentToString((r4v0 T[] A[D('$this$subarrayContentToString' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'offset' int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:18:0x0018 \-\> B:15:0x000f, CROSS_EDGE: B:16:0x0011 \-\> B:18:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;II)Ljava\/lang\/String;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_22;
Node_22 -> Node_18;
Node_18 -> Node_15;
Node_23 -> Node_18;
Node_21 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_13;
}

