digraph "CFG forkotlin.collections.builders.ListBuilderKt.subarrayContentEquals([Ljava\/lang\/Object;IILjava\/util\/List;)Z" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r7 I:java.util.List A[D('other' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)] (LINE:363)\l0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0005|0x0005: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('length' int)]) == (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0008 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0008|0x0008: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:364)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0009|LOOP_START\lLOOP:0: B:21:0x0009\-\>B:25:0x001a\l|0x0009: IF  (r0 I:??[int, byte, short, char] A[D('i' int)]) \>= (r6 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:29:0x001d  (LINE:365)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: ARITH  (r2 I:int) = (r5 I:int A[D('offset' int)]) + (r0 I:int A[D('i' int)])  (LINE:366)\l0x000d: AGET  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][] A[D('$this$subarrayContentEquals' java.lang.Object[])]), (r2 I:??[int, short, byte, char]) \l0x000f: INVOKE  (r3 I:java.lang.Object) = (r7 I:java.util.List A[D('other' java.util.List)]), (r0 I:int A[D('i' int)]) type: INTERFACE call: java.util.List.get(int):java.lang.Object A[MD:(int):E (c)]\l0x0013: INVOKE  (r2 I:boolean) = (r2 I:java.lang.Object), (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.areEqual(java.lang.Object, java.lang.Object):boolean A[MD:(java.lang.Object, java.lang.Object):boolean (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|0x0017: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x001a \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|LOOP_END\lLOOP:0: B:21:0x0009\-\>B:25:0x001a\l|0x001a: ARITH  (r0 I:int) = (r0 I:int A[D('i' int)]) + (1 int)  (LINE:367)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0019|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:boolean) \l}"];
Node_29 [shape=record,label="{29\:\ 0x001d|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x001d|RETURN\l|0x001d: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:369)\l0x001e: RETURN  (r1 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.collections.builders.ListBuilderKt.subarrayContentEquals((r4 I:T[] A[D('$this$subarrayContentEquals' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('offset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.util.List\<?\> A[D('other' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0019 \-\> B:16:?, BACK_EDGE: B:25:0x001a \-\> B:21:0x0009, CROSS_EDGE: B:27:0x001e \-\> B:16:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0009\-0x001e: r0 'i' I\l  \-1 \-0x001e: r4 '$this$subarrayContentEquals' [Ljava\/lang\/Object;\l  \-1 \-0x001e: r5 'offset' I\l  \-1 \-0x001e: r6 'length' I\l  \-1 \-0x001e: r7 'other' Ljava\/util\/List;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;IILjava\/util\/List\<*\>;)Z\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_16;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_29;
Node_22 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_28[style=dashed];
Node_25 -> Node_21;
Node_28 -> Node_24;
Node_24 -> Node_16;
Node_29 -> Node_26;
Node_26 -> Node_16;
}

