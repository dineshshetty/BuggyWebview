digraph "CFG forkotlin.collections.builders.MapBuilder.Itr.remove()V" {
subgraph cluster_Region_1726078913 {
label = "R(1:(2:(1:9)|(1:5)))";
node [shape=record,color=blue];
subgraph cluster_Region_1494268287 {
label = "R(2:(1:9)|(1:5))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_898603877 {
label = "IF [B:17:0x0008] THEN: R(1:9) ELSE: null";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x0008|PHI: r0 \l  PHI: (r0v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r3.lastIndex != \-1) != true) goto L8\l}"];
subgraph cluster_Region_2118156187 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0026|throw new java.lang.IllegalStateException(\"Call next() before removing element from the iterator.\".toString())\l}"];
}
}
subgraph cluster_Region_372746309 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x000a|r3.map.checkIsMutable$kotlin_stdlib()\lr3.map.removeKeyAt(r3.lastIndex)\lr3.lastIndex = \-1\l}"];
}
}
}
Node_11 [shape=record,color=red,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0000}"];
Node_14 [shape=record,color=red,label="{14\:\ 0x0003}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0005}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x0018}"];
Node_12 [shape=record,color=red,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0019}"];
Node_16 [shape=record,color=red,label="{16\:\ 0x0007}"];
MethodNode[shape=record,label="{public final void kotlin.collections.builders.MapBuilder.Itr.remove((r3v0 'this' kotlin.collections.builders.MapBuilder$Itr\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0026 \-\> B:12:?, CROSS_EDGE: B:16:0x0007 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_11;Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_21 -> Node_12;
Node_18 -> Node_19;
Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15;
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_16 -> Node_17;
}

