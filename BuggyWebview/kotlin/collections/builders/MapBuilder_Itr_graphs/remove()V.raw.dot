digraph "CFG forkotlin.collections.builders.MapBuilder.Itr.remove()V" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r3 I:kotlin.collections.builders.MapBuilder$Itr) kotlin.collections.builders.MapBuilder.Itr.lastIndex int  (LINE:474)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0003|0x0003: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x0007 \l}"];
Node_15 [shape=record,label="{15\:\ 0x0005|0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0019 \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|0x000a: IGET  (r0 I:kotlin.collections.builders.MapBuilder\<K, V\>) = (r3 I:kotlin.collections.builders.MapBuilder$Itr) kotlin.collections.builders.MapBuilder.Itr.map kotlin.collections.builders.MapBuilder  (LINE:475)\l0x000c: INVOKE  (r0 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.checkIsMutable$kotlin_stdlib():void A[MD:():void (m)]\l0x000f: IGET  (r0 I:kotlin.collections.builders.MapBuilder\<K, V\>) = (r3 I:kotlin.collections.builders.MapBuilder$Itr) kotlin.collections.builders.MapBuilder.Itr.map kotlin.collections.builders.MapBuilder  (LINE:476)\l0x0011: IGET  (r2 I:int) = (r3 I:kotlin.collections.builders.MapBuilder$Itr) kotlin.collections.builders.MapBuilder.Itr.lastIndex int \l0x0013: INVOKE  (r0 I:kotlin.collections.builders.MapBuilder), (r2 I:int) type: STATIC call: kotlin.collections.builders.MapBuilder.access$removeKeyAt(kotlin.collections.builders.MapBuilder, int):void A[MD:(kotlin.collections.builders.MapBuilder, int):void (m)]\l0x0016: IPUT  (r1 I:int), (r3 I:kotlin.collections.builders.MapBuilder$Itr) kotlin.collections.builders.MapBuilder.Itr.lastIndex int  (LINE:477)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0018|RETURN\l|0x0018: RETURN    (LINE:478)\l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|0x0019: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:678)\l0x001b: NEW_INSTANCE  (r0 I:java.lang.IllegalStateException A[D('$i$a$\-check\-MapBuilder$Itr$remove$1' int)]) =  java.lang.IllegalStateException \l0x001d: CONST_STR  (r1 I:java.lang.String) =  \"Call next() before removing element from the iterator.\" \l0x001f: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0023: INVOKE  (r0 I:java.lang.IllegalStateException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalStateException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|0x0026: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final void kotlin.collections.builders.MapBuilder.Itr.remove((r3 'this' I:kotlin.collections.builders.MapBuilder$Itr\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0026 \-\> B:12:?, CROSS_EDGE: B:16:0x0007 \-\> B:17:0x0008\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001a\-0x001b: r0 '$i$a$\-check\-MapBuilder$Itr$remove$1' I\lTYPE_VARS: [V, K]\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_12;
Node_20 -> Node_21;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

