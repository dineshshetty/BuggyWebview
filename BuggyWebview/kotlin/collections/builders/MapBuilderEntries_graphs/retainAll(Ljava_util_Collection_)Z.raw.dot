digraph "CFG forkotlin.collections.builders.MapBuilderEntries.retainAll(Ljava\/util\/Collection;)Z" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('elements' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:kotlin.collections.builders.MapBuilder\<K, V\>) = (r1 I:kotlin.collections.builders.MapBuilderEntries) kotlin.collections.builders.MapBuilderEntries.backing kotlin.collections.builders.MapBuilder  (LINE:635)\l0x0007: INVOKE  (r0 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.checkIsMutable$kotlin_stdlib():void A[MD:():void (m)]\l0x000a: INVOKE  (r0 I:boolean) = \l  (r1 I:kotlin.collections.builders.AbstractMapBuilderEntrySet)\l  (r2 I:java.util.Collection A[D('elements' java.util.Collection)])\l type: SUPER call: kotlin.collections.builders.AbstractMapBuilderEntrySet.retainAll(java.util.Collection):boolean A[MD:(java.util.Collection):boolean (s)] (LINE:636)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:boolean) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.builders.MapBuilderEntries.retainAll((r1 'this' I:kotlin.collections.builders.MapBuilderEntries\<K, V\> A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.Collection\<? extends java.lang.Object\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000e: r2 'elements' Ljava\/util\/Collection;\lTYPE_VARS: [V, K]\lSIGNATURE: (Ljava\/util\/Collection\<+Ljava\/lang\/Object;\>;)Z\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.retainAll(java.util.Collection\<?\>):boolean\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

