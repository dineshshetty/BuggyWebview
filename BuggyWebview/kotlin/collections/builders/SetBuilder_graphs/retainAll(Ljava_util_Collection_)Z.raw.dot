digraph "CFG forkotlin.collections.builders.SetBuilder.retainAll(Ljava\/util\/Collection;)Z" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('elements' java.util.Collection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: IGET  (r0 I:kotlin.collections.builders.MapBuilder\<E, ?\>) = (r1 I:kotlin.collections.builders.SetBuilder) kotlin.collections.builders.SetBuilder.backing kotlin.collections.builders.MapBuilder  (LINE:48)\l0x0007: INVOKE  (r0 I:kotlin.collections.builders.MapBuilder) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.checkIsMutable$kotlin_stdlib():void A[MD:():void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r1 I:kotlin.collections.AbstractMutableSet), (r2 I:java.util.Collection A[D('elements' java.util.Collection)]) type: SUPER call: kotlin.collections.AbstractMutableSet.retainAll(java.util.Collection):boolean A[MD:(java.util.Collection\<?\>):boolean (c)] (LINE:49)\l}"];
Node_7 [shape=record,label="{7\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:boolean) \l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public boolean kotlin.collections.builders.SetBuilder.retainAll((r1 'this' I:kotlin.collections.builders.SetBuilder\<E\> A[IMMUTABLE_TYPE, THIS]), (r2 I:java.util.Collection\<? extends java.lang.Object\> A[D('elements' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000e: r2 'elements' Ljava\/util\/Collection;\lTYPE_VARS: [E]\lSIGNATURE: (Ljava\/util\/Collection\<+Ljava\/lang\/Object;\>;)Z\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.retainAll(java.util.Collection\<?\>):boolean\}]\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

