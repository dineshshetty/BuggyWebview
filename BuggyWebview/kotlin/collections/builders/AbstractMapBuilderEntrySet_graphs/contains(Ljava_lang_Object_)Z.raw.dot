digraph "CFG forkotlin.collections.builders.AbstractMapBuilderEntrySet.contains(Ljava\/lang\/Object;)Z" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) java.util.Map$Entry  (LINE:610)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0006 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0004|RETURN\l|0x0004: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0005: RETURN  (r0 I:boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0006|0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('element' java.lang.Object)]) \l0x0007: CHECK_CAST (r0 I:java.util.Map$Entry) = (java.util.Map$Entry) (r0 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:boolean) = (r1 I:kotlin.collections.builders.AbstractMapBuilderEntrySet), (r0 I:java.util.Map$Entry) type: VIRTUAL call: kotlin.collections.builders.AbstractMapBuilderEntrySet.contains(java.util.Map$Entry):boolean A[MD:(E extends java.util.Map$Entry\<? extends K, ? extends V\>):boolean (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|RETURN\l|0x000d: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public final \/* bridge *\/ boolean kotlin.collections.builders.AbstractMapBuilderEntrySet.contains((r1 'this' I:kotlin.collections.builders.AbstractMapBuilderEntrySet\<E extends java.util.Map$Entry\<? extends K, ? extends V\>, K, V\> A[IMMUTABLE_TYPE, THIS]), (r2 I:java.lang.Object A[D('element' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x000d \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000d: r2 'element' Ljava\/lang\/Object;\lTYPE_VARS: [E extends java.util.Map$Entry\<? extends K, ? extends V\>, V, K]\lMETHOD_OVERRIDE: [ClspMth\{java.util.Collection.contains(java.lang.Object):boolean\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

