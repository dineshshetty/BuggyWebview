digraph "CFG forkotlin.collections.builders.SerializedMap.readExternal(Ljava\/io\/ObjectInput;)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"input\")\lbyte r0 = r11.readByte()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|if (r0 != 0) goto L14\l}"];
Node_4 [shape=record,label="{4\:\ 0x000b|int r1 = r11.readInt()\l}"];
Node_5 [shape=record,label="{5\:\ 0x000f|if (r1 \< 0) goto L12\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|java.util.Map r2 = kotlin.collections.MapsKt.createMapBuilder(r1)\lr5 = 0\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|LOOP_START\lLOOP:0: B:7:0x0018\-\>B:8:0x001a\lPHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v2 int) binds: [B:6:0x0011, B:8:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|if (r5 \>= r1) goto L8\l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|LOOP_END\lLOOP:0: B:7:0x0018\-\>B:8:0x001a\l|java.lang.Object r8 = r11.readObject()\ljava.lang.Object r9 = r11.readObject()\lr2.put(r8, r9)\lint r5 = r5 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x002b|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x002b|r10.map = kotlin.collections.MapsKt.build(r2)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0032|RETURN\l|return\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_11 [shape=record,label="{11\:\ 0x0033|java.lang.StringBuilder r3 = new java.lang.StringBuilder()\lr3.append(\"Illegal size value: \")\lr3.append(r1)\lr3.append('.')\l}"];
Node_12 [shape=record,label="{12\:\ 0x004e|throw new java.io.InvalidObjectException(r3.toString())\l}"];
Node_13 [shape=record,label="{13\:\ 0x004f|java.lang.StringBuilder r2 = new java.lang.StringBuilder()\lr2.append(\"Unsupported flags value: \")\lr2.append(r0)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0065|throw new java.io.InvalidObjectException(r2.toString())\l}"];
MethodNode[shape=record,label="{public void kotlin.collections.builders.SerializedMap.readExternal((r10v0 'this' kotlin.collections.builders.SerializedMap A[IMMUTABLE_TYPE, THIS]), (r11v0 'input' java.io.ObjectInput A[D('input' java.io.ObjectInput), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:8:0x001a \-\> B:7:0x0018, CROSS_EDGE: B:12:0x004e \-\> B:1:?, CROSS_EDGE: B:14:0x0065 \-\> B:1:?\lTYPE_VARS: EMPTY\lMETHOD_OVERRIDE: [ClspMth\{java.io.Externalizable.readExternal(java.io.ObjectInput):void throws java.lang.ClassNotFoundException, java.io.IOException\}]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_13;
Node_4 -> Node_5;
Node_5 -> Node_6[style=dashed];
Node_5 -> Node_11;
Node_6 -> Node_7;
Node_7 -> Node_8[style=dashed];
Node_7 -> Node_15;
Node_8 -> Node_7;
Node_15 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_11 -> Node_12;
Node_12 -> Node_1;
Node_13 -> Node_14;
Node_14 -> Node_1;
}

