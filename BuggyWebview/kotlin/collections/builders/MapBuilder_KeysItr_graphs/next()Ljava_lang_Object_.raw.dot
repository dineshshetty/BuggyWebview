digraph "CFG forkotlin.collections.builders.MapBuilder.KeysItr.next()Ljava\/lang\/Object;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.builders.MapBuilder$KeysItr) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.getIndex$kotlin_stdlib():int A[MD:():int (m)] (LINE:483)\l0x0004: INVOKE  (r1 I:kotlin.collections.builders.MapBuilder) = (r2 I:kotlin.collections.builders.MapBuilder$KeysItr) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.getMap$kotlin_stdlib():kotlin.collections.builders.MapBuilder A[MD:():kotlin.collections.builders.MapBuilder\<K, V\> (m)]\l0x0008: INVOKE  (r1 I:int) = (r1 I:kotlin.collections.builders.MapBuilder) type: STATIC call: kotlin.collections.builders.MapBuilder.access$getLength$p(kotlin.collections.builders.MapBuilder):int A[MD:(kotlin.collections.builders.MapBuilder):int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x000c|0x000c: IF  (r0 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:14:0x002c \l}"];
Node_12 [shape=record,label="{12\:\ 0x000e|0x000e: INVOKE  (r0 I:int) = (r2 I:kotlin.collections.builders.MapBuilder$KeysItr) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.getIndex$kotlin_stdlib():int A[MD:():int (m)] (LINE:484)\l0x0012: ARITH  (r1 I:int) = (r0 I:int) + (1 int) \l0x0014: INVOKE  (r2 I:kotlin.collections.builders.MapBuilder$KeysItr), (r1 I:int) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.setIndex$kotlin_stdlib(int):void A[MD:(int):void (m)]\l0x0017: INVOKE  (r2 I:kotlin.collections.builders.MapBuilder$KeysItr), (r0 I:int) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.setLastIndex$kotlin_stdlib(int):void A[MD:(int):void (m)]\l0x001a: INVOKE  (r0 I:kotlin.collections.builders.MapBuilder) = (r2 I:kotlin.collections.builders.MapBuilder$KeysItr) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.getMap$kotlin_stdlib():kotlin.collections.builders.MapBuilder A[MD:():kotlin.collections.builders.MapBuilder\<K, V\> (m)] (LINE:485)\l0x001e: INVOKE  (r0 I:java.lang.Object[]) = (r0 I:kotlin.collections.builders.MapBuilder) type: STATIC call: kotlin.collections.builders.MapBuilder.access$getKeysArray$p(kotlin.collections.builders.MapBuilder):java.lang.Object[] A[MD:(kotlin.collections.builders.MapBuilder):java.lang.Object[] (m)]\l0x0022: INVOKE  (r1 I:int) = (r2 I:kotlin.collections.builders.MapBuilder$KeysItr) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.getLastIndex$kotlin_stdlib():int A[MD:():int (m)]\l0x0026: AGET  (r0 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY][]), (r1 I:??[int, short, byte, char]) \l0x0028: INVOKE  (r2 I:kotlin.collections.builders.MapBuilder$KeysItr) type: VIRTUAL call: kotlin.collections.builders.MapBuilder.KeysItr.initNext$kotlin_stdlib():void A[MD:():void (m)] (LINE:486)\l}"];
Node_13 [shape=record,label="{13\:\ 0x002b|RETURN\l|0x002b: RETURN  (r0 I:K A[D('result' java.lang.Object)])  (LINE:487)\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x002c|0x002c: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException A[D('result' java.lang.Object)]) =  java.util.NoSuchElementException  (LINE:483)\l0x002e: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|0x0031: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public K kotlin.collections.builders.MapBuilder.KeysItr.next((r2 'this' I:kotlin.collections.builders.MapBuilder$KeysItr\<K, V\> A[IMMUTABLE_TYPE, THIS]))  | DONT_RENAME\lUSE_LINES_HINTS\lCROSS_EDGE: B:15:0x0031 \-\> B:9:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [V, K]\lSIGNATURE: ()TK;\lDebug Info:\l  0x0028\-0x002c: r0 'result' Ljava\/lang\/Object;\lMETHOD_OVERRIDE: [ClspMth\{java.util.Iterator.next():E\}]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

