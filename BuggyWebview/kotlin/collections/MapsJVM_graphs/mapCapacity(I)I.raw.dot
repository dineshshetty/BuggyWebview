digraph "CFG forkotlin.collections.MapsKt__MapsJVMKt.mapCapacity(I)I" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0001|0x0001: IF  (r2 I:??[int, byte, short, char] A[D('expectedSize' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:19:0x0005  (LINE:151)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0003|0x0003: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('expectedSize' int)]) \l}"];
Node_27 [shape=record,label="{27\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:156)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0005|0x0005: CONST  (r0 I:??[int, float, short, byte, char]) = (3 ??[int, float, short, byte, char])  (LINE:152)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0006|0x0006: IF  (r2 I:??[int, byte, short, char] A[D('expectedSize' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:22:0x000b \l}"];
Node_21 [shape=record,label="{21\:\ 0x0008|0x0008: ARITH  (r0 I:int) = (r2 I:int A[D('expectedSize' int)]) + (1 int) \l}"];
Node_28 [shape=record,label="{28\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:156)\l}"];
Node_22 [shape=record,label="{22\:\ 0x000b|0x000b: CONST  (r0 I:??[int, float, short, byte, char]) = (1073741824(0x40000000, float:2.0) ??[int, float, short, byte, char])  (LINE:153)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000d|0x000d: IF  (r2 I:??[int, byte, short, char] A[D('expectedSize' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:25:0x0018 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000f|0x000f: CAST (r0 I:float) = (float) (r2 I:int A[D('expectedSize' int)]) \l0x0010: CONST  (r1 I:??[int, float, short, byte, char]) = (1061158912(0x3f400000, float:0.75) ??[int, float, short, byte, char]) \l0x0012: ARITH  (r0 I:float) = (r0 I:float) \/ (r1 I:float) \l0x0013: CONST  (r1 I:??[int, float, short, byte, char]) = (1065353216(0x3f800000, float:1.0) ??[int, float, short, byte, char]) \l0x0015: ARITH  (r0 I:float) = (r0 I:float) + (r1 I:float) \l0x0016: CAST (r0 I:int) = (int) (r0 I:float) \l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:int) A[SYNTHETIC] (LINE:156)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0018|RETURN\lORIG_RETURN\l|0x0018: CONST  (r0 I:??[int, float, short, byte, char]) = (2147483647(0x7fffffff, float:NaN) ??[int, float, short, byte, char])  (LINE:155)\l0x001b: RETURN  (r0 I:int)  (LINE:156)\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.MapsKt__MapsJVMKt.mapCapacity((r2 I:int A[D('expectedSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0008 \-\> B:26:0x001b, CROSS_EDGE: B:24:0x000f \-\> B:26:0x001b, CROSS_EDGE: B:25:0x0018 \-\> B:26:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001b: r2 'expectedSize' I\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_27;
Node_27 -> Node_16;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_28;
Node_28 -> Node_16;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_29;
Node_29 -> Node_16;
Node_25 -> Node_16;
}

