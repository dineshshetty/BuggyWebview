digraph "CFG forkotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.\<init\>(Lkotlin\/sequences\/Sequence;IIZZ)V" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IPUT  (r1 I:kotlin.sequences.Sequence), (r0 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1) kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$this_windowedSequence$inlined kotlin.sequences.Sequence \l0x0002: IPUT  (r2 I:int), (r0 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1) kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$size$inlined int \l0x0004: IPUT  (r3 I:int), (r0 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1) kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$step$inlined int \l0x0006: IPUT  (r4 I:boolean), (r0 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1) kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$partialWindows$inlined boolean \l0x0008: IPUT  (r5 I:boolean), (r0 I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1) kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.$reuseBuffer$inlined boolean \l0x000a: INVOKE  (r0 I:java.lang.Object) type: DIRECT call: java.lang.Object.\<init\>():void A[MD:():void (c)] (LINE:21)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000d|RETURN\l|0x000d: RETURN   \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public void kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1.\<init\>((r0 'this' I:kotlin.collections.SlidingWindowKt$windowedSequence$$inlined$Sequence$1 A[IMMUTABLE_TYPE, THIS]), (r1 I:kotlin.sequences.Sequence A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | ANONYMOUS_CONSTRUCTOR\lUSE_LINES_HINTS\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

