digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.lastIndexOf([DD)I" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$lastIndexOf' double[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r6 I:??[] A[D('$this$lastIndexOf' double[])])  (LINE:2179)\l0x0006: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l0x0007: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0008|0x0008: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:25:0x001a \l}"];
Node_18 [shape=record,label="{18\:\ 0x000a|LOOP_START\lLOOP:0: B:18:0x000a\-\>B:24:0x0018\l|0x000a: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: ARITH  (r0 I:int) = (r0 I:int) + (r1 I:int) \l0x000c: AGET  (r3 I:??[long, double]) = (r6 I:??[long, double][] A[D('$this$lastIndexOf' double[])]), (r2 I:??[int, short, byte, char] A[D('index' int)])  (LINE:2180)\l0x000e: CMP_G  (r5 I:int) = (r7 I:double A[D('element' double)]), (r3 I:double) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0010|0x0010: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0014 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0012|0x0012: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|0x0015: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x0018 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0018|LOOP_END\lLOOP:0: B:18:0x000a\-\>B:24:0x0018\l|0x0018: IF  (r0 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:18:0x000a  (LINE:2179)\l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x0017|RETURN\l|0x0017: RETURN  (r2 I:int A[D('index' int)])  (LINE:2181)\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0014|0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|RETURN\l|0x001a: RETURN  (r1 I:int)  (LINE:2184)\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ int kotlin.collections.ArraysKt___ArraysKt.lastIndexOf((r6 I:double[] A[D('$this$lastIndexOf' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:double A[D('element' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast \{ it == element \}' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=indexOfLast \{ it == element \}, imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{errorSince=1.6, hiddenSince=1.7, warningSince=1.4\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000b\-0x001a: r2 'index' I\l  \-1 \-0x001a: r6 '$this$lastIndexOf' [D\l  \-1 \-0x001a: r7 'element' D\lBACK_EDGE: B:24:0x0018 \-\> B:18:0x000a, CROSS_EDGE: B:25:0x001a \-\> B:15:?, CROSS_EDGE: B:21:0x0014 \-\> B:22:0x0015, CROSS_EDGE: B:17:0x0008 \-\> B:25:0x001a\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_25;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_24;
Node_22 -> Node_26[style=dashed];
Node_24 -> Node_18;
Node_24 -> Node_27[style=dashed];
Node_27 -> Node_25;
Node_26 -> Node_23;
Node_23 -> Node_15;
Node_21 -> Node_22;
Node_25 -> Node_15;
}

