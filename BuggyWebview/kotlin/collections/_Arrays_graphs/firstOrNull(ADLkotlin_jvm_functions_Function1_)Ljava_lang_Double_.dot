digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.firstOrNull([DLkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Double;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"predicate\")\lint r1 = r6.length\lr2 = 0\l}"];
Node_16 [shape=record,label="{16\:\ 0x000d|LOOP_START\lLOOP:0: B:16:0x000d\-\>B:21:0x0026\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:15:0x0000, B:21:0x0026] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L10\l}"];
Node_17 [shape=record,label="{17\:\ 0x000f|r3 = r6[r2]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001f|if (r7.invoke(java.lang.Double.valueOf(r3)).booleanValue() == false) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0026|LOOP_END\lLOOP:0: B:16:0x000d\-\>B:21:0x0026\l|int r2 = r2 + 1\l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021}"];
Node_20 [shape=record,label="{20\:\ 0x0025|RETURN\l|return java.lang.Double.valueOf(r3)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0029|SYNTHETIC\l}"];
Node_22 [shape=record,label="{22\:\ 0x0029|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{public static final java.lang.Double kotlin.collections.ArraysKt___ArraysKt.firstOrNull((r6v0 '$this$firstOrNull' double[] A[D('$this$firstOrNull' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'predicate' kotlin.jvm.functions.Function1\<? super java.lang.Double, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:21:0x0026 \-\> B:16:0x000d, CROSS_EDGE: B:23:0x002a \-\> B:14:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([DLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Double;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/Double;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_24;
Node_17 -> Node_18;
Node_18 -> Node_21;
Node_18 -> Node_25[style=dashed];
Node_21 -> Node_16;
Node_25 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_14;
Node_24 -> Node_22;
Node_22 -> Node_14;
}

