digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.indexOf([DD)I" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lr0 = 0\lint r1 = r5.length\l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|LOOP_START\lLOOP:0: B:18:0x0007\-\>B:25:0x0015\lPHI: r0 \l  PHI: (r0v2 'index' int) = (r0v1 'index' int), (r0v4 'index' int) binds: [B:17:0x0000, B:25:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= r1) goto L12\l}"];
Node_19 [shape=record,label="{19\:\ 0x0009}"];
Node_20 [shape=record,label="{20\:\ 0x000d|if ((r6 \> r5[r0] ? 1 : (r6 == r5[r0] ? 0 : \-1)) != 0) goto L11\l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|r2 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|PHI: r2 \l  PHI: (r2v2 boolean) = (r2v1 boolean), (r2v3 boolean) binds: [B:22:0x0011, B:21:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L7\l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|LOOP_END\lLOOP:0: B:18:0x0007\-\>B:25:0x0015\l|int r0 = r0 + 1\l}"];
Node_28 [shape=record,label="{28\:\ 0x0014|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|RETURN\l|return r0\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|r2 = false\l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|RETURN\l|return \-1\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ int kotlin.collections.ArraysKt___ArraysKt.indexOf((r5v0 '$this$indexOf' double[] A[D('$this$indexOf' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'element' double A[D('element' double), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst \{ it == element \}' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=indexOfFirst \{ it == element \}, imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{errorSince=1.6, hiddenSince=1.7, warningSince=1.4\}\}\}\lINLINE_NOT_NEEDED\lBACK_EDGE: B:25:0x0015 \-\> B:18:0x0007, CROSS_EDGE: B:22:0x0011 \-\> B:23:0x0012, CROSS_EDGE: B:27:0x0019 \-\> B:16:?\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_29;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_28[style=dashed];
Node_25 -> Node_18;
Node_28 -> Node_24;
Node_24 -> Node_16;
Node_22 -> Node_23;
Node_29 -> Node_26;
Node_26 -> Node_16;
}

