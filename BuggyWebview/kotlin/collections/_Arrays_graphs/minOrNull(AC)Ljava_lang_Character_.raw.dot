digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.minOrNull([C)Ljava\/lang\/Character;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$minOrNull' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r5 I:??[] A[D('$this$minOrNull' char[])])  (LINE:18567)\l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x000c \l}"];
Node_26 [shape=record,label="{26\:\ 0x000a|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0011 \l}"];
Node_29 [shape=record,label="{29\:\ 0x000f|RETURN\l|0x000f: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: RETURN  (r0 I:java.lang.Character) \l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0011|0x0011: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = (r5 I:char[] A[D('$this$minOrNull' char[]), IMMUTABLE_TYPE]), (r2 I:??[int, short, byte, char])  (LINE:18568)\l0x0013: NEW_INSTANCE  (r2 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:18569)\l0x0015: INVOKE  (r3 I:int) = (r5 I:char[] A[D('$this$minOrNull' char[])]) type: STATIC call: kotlin.collections.ArraysKt.getLastIndex(char[]):int A[MD:(char[]):int (m)]\l0x0019: INVOKE  (r2 I:kotlin.ranges.IntRange), (r1 I:int), (r3 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x001c: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r2 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|LOOP_START\lLOOP:0: B:32:0x0020\-\>B:41:0x0020\l|0x0020: INVOKE  (r2 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0034 \l}"];
Node_34 [shape=record,label="{34\:\ 0x0026|0x0026: INVOKE  (r2 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x002a: AGET  (r3 I:char A[IMMUTABLE_TYPE]) = (r5 I:char[] A[D('$this$minOrNull' char[]), IMMUTABLE_TYPE]), (r2 I:??[int, short, byte, char] A[D('i' int)])  (LINE:18570)\l0x002c: INVOKE  (r4 I:int) = (r0 I:int A[D('min' char)]), (r3 I:int A[D('e' char)]) type: STATIC call: kotlin.jvm.internal.Intrinsics.compare(int, int):int A[MD:(int, int):int (m)] (LINE:18571)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0030|0x0030: IF  (r4 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:42:0x0020 \l}"];
Node_39 [shape=record,label="{39\:\ 0x0032|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0032|0x0032: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('min' char)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('e' char)]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0020|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0020|LOOP_END\lSYNTHETIC\lLOOP:0: B:32:0x0020\-\>B:41:0x0020\l}"];
Node_42 [shape=record,label="{42\:\ 0x0020|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0034|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x0034|0x0034: INVOKE  (r1 I:java.lang.Character) = (r0 I:char A[D('min' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:18573)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0038|RETURN\l|0x0038: RETURN  (r1 I:java.lang.Character) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Character kotlin.collections.ArraysKt___ArraysKt.minOrNull((r5 I:char[] A[D('$this$minOrNull' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0030 \-\> B:32:0x0020, BACK_EDGE: B:36:0x0032 \-\> B:32:0x0020, CROSS_EDGE: B:38:0x0038 \-\> B:23:?, CROSS_EDGE: B:27:0x000c \-\> B:28:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002a\-0x0033: r2 'i' I\l  0x002c\-0x0033: r3 'e' C\l  0x0013\-0x0038: r0 'min' C\l  \-1 \-0x0038: r5 '$this$minOrNull' [C\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_31;
Node_29 -> Node_23;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_40;
Node_34 -> Node_35;
Node_35 -> Node_39[style=dashed];
Node_35 -> Node_42;
Node_39 -> Node_36;
Node_36 -> Node_43;
Node_43 -> Node_41;
Node_41 -> Node_32;
Node_42 -> Node_41;
Node_40 -> Node_37;
Node_37 -> Node_38;
Node_38 -> Node_23;
Node_27 -> Node_28;
}

