digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.zip([J[JLkotlin\/jvm\/functions\/Function2;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"other\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"transform\")\lint r1 = java.lang.Math.min(r7.length, r8.length)\ljava.util.ArrayList r2 = new java.util.ArrayList(r1)\lr3 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x001c|LOOP_START\lLOOP:0: B:11:0x001c\-\>B:12:0x001e\lPHI: r3 \l  PHI: (r3v1 'i' int) = (r3v0 'i' int), (r3v4 'i' int) binds: [B:10:0x0000, B:12:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r1) goto L4\l}"];
Node_12 [shape=record,label="{12\:\ 0x001e|LOOP_END\lLOOP:0: B:11:0x001c\-\>B:12:0x001e\l|r2.add(r9.invoke(java.lang.Long.valueOf(r7[r3]), java.lang.Long.valueOf(r8[r3])))\lint r3 = r3 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0034|SYNTHETIC\l}"];
Node_13 [shape=record,label="{13\:\ 0x0034}"];
Node_14 [shape=record,label="{14\:\ 0x0037|RETURN\l|return r2\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<V\> kotlin.collections.ArraysKt___ArraysKt.zip((r7v0 '$this$zip' long[] A[D('$this$zip' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'other' long[] A[D('other' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'transform' kotlin.jvm.functions.Function2\<? super java.lang.Long, ? super java.lang.Long, ? extends V\> A[D('transform' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x001e \-\> B:11:0x001c\lINLINE_NOT_NEEDED\lTYPE_VARS: [V]\lSIGNATURE: \<V:Ljava\/lang\/Object;\>([J[JLkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Long;\-Ljava\/lang\/Long;+TV;\>;)Ljava\/util\/List\<TV;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

