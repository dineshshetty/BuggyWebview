digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.mapNotNull([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r13 I:java.lang.Object A[D('$this$mapNotNull' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"transform\" \l0x0007: INVOKE  (r14 I:java.lang.Object A[D('transform' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:11653)\l0x000d: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0010: CHECK_CAST (r1 I:java.util.Collection) = (java.util.Collection) (r1 I:??[OBJECT, ARRAY]) \l0x0012: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('$this$mapNotNull' java.lang.Object[])]) \l0x0013: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$mapNotNullTo$iv' java.lang.Object[])])  (LINE:25448)\l0x0015: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: ARRAY_LENGTH  (r6 I:int) = (r4 I:??[] A[D('$this$forEach$iv$iv' java.lang.Object[])])  (LINE:25449)\l0x0017: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x0018|LOOP_START\lLOOP:0: B:16:0x0018\-\>B:20:0x0028\l|0x0018: IF  (r7 I:??[int, byte, short, char]) \>= (r6 I:??[int, byte, short, char])  \-\> B:23:0x002b \l}"];
Node_17 [shape=record,label="{17\:\ 0x001a|0x001a: AGET  (r8 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY][] A[D('$this$forEach$iv$iv' java.lang.Object[])]), (r7 I:??[int, short, byte, char]) \l0x001c: MOVE  (r9 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('element$iv$iv' java.lang.Object)]) \l0x001d: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: INVOKE  (r11 I:java.lang.Object) = \l  (r14 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)])\l  (r9 I:java.lang.Object A[D('element$iv' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:25448)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0022|0x0022: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0028 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0024|0x0024: CONST  (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:25450)\l0x0025: INVOKE  \l  (r1 I:java.util.Collection A[D('destination$iv' java.util.Collection)])\l  (r11 I:java.lang.Object A[D('it$iv' java.lang.Object)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:25448)\l}"];
Node_24 [shape=record,label="{24\:\ 0x0028|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0028|LOOP_END\lLOOP:0: B:16:0x0018\-\>B:20:0x0028\l|0x0028: ARITH  (r7 I:int) = (r7 I:int) + (1 int) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0028|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x002b|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x002b|0x002d: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY] A[D('destination$iv' java.util.Collection)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x002f|RETURN\l|0x002f: RETURN  (r1 I:java.util.List\<R\>)  (LINE:11653)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<R\> kotlin.collections.ArraysKt___ArraysKt.mapNotNull((r13 I:T[] A[D('$this$mapNotNull' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0028 \-\> B:16:0x0018, CROSS_EDGE: B:18:0x0022 \-\> B:20:0x0028\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001d\-0x0028: r9 'element$iv' Ljava\/lang\/Object;\l  0x001e\-0x0028: r10 '$i$a$\-forEach\-ArraysKt___ArraysKt$mapNotNullTo$1$iv' I\l  0x0024\-0x0028: r11 'it$iv' Ljava\/lang\/Object;\l  0x0025\-0x0028: r12 '$i$a$\-let\-ArraysKt___ArraysKt$mapNotNullTo$1$1$iv' I\l  0x001c\-0x002b: r8 'element$iv$iv' Ljava\/lang\/Object;\l  0x0015\-0x002c: r4 '$this$forEach$iv$iv' [Ljava\/lang\/Object;\l  0x0016\-0x002c: r5 '$i$f$forEach' I\l  0x0012\-0x002d: r1 'destination$iv' Ljava\/util\/Collection;\l  0x0013\-0x002d: r2 '$this$mapNotNullTo$iv' [Ljava\/lang\/Object;\l  0x0014\-0x002d: r3 '$i$f$mapNotNullTo' I\l  0x000b\-0x002f: r0 '$i$f$mapNotNull' I\l  \-1 \-0x002f: r13 '$this$mapNotNull' [Ljava\/lang\/Object;\l  \-1 \-0x002f: r14 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)Ljava\/util\/List\<TR;\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_24;
Node_24 -> Node_20;
Node_20 -> Node_16;
Node_25 -> Node_20;
Node_23 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_14;
}

