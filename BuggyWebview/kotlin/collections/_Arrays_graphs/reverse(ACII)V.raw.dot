digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.reverse([CII)V" {
Node_10 [shape=record,label="{10\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$reverse' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: SGET  (r0 I:kotlin.collections.AbstractList$Companion) =  kotlin.collections.AbstractList.Companion kotlin.collections.AbstractList$Companion  (LINE:5720)\l0x0007: ARRAY_LENGTH  (r1 I:int) = (r5 I:??[] A[D('$this$reverse' char[])]) \l0x0008: INVOKE  \l  (r0 I:kotlin.collections.AbstractList$Companion)\l  (r6 I:int A[D('fromIndex' int)])\l  (r7 I:int A[D('toIndex' int)])\l  (r1 I:int)\l type: VIRTUAL call: kotlin.collections.AbstractList.Companion.checkRangeIndexes$kotlin_stdlib(int, int, int):void A[MD:(int, int, int):void (m)]\l0x000b: ARITH  (r0 I:int) = (r6 I:int A[D('fromIndex' int)]) + (r7 I:int A[D('toIndex' int)])  (LINE:5721)\l0x000d: ARITH  (r0 I:int) = (r0 I:int) \/ (2 int) \l}"];
Node_13 [shape=record,label="{13\:\ 0x000f|0x000f: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('fromIndex' int)]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('midPoint' int)])  \-\> B:15:0x0012  (LINE:5722)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0011|RETURN\l|0x0011: RETURN   \l}"];
Node_11 [shape=record,label="{11\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|0x0012: ARITH  (r1 I:int) = (r7 I:int A[D('toIndex' int)]) + (\-1 int)  (LINE:5723)\l0x0014: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('fromIndex' int)])  (LINE:5724)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0015|LOOP_START\lLOOP:0: B:16:0x0015\-\>B:17:0x0017\l|0x0015: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \>= (r0 I:??[int, byte, short, char] A[D('midPoint' int)])  \-\> B:19:0x0025 \l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|LOOP_END\lLOOP:0: B:16:0x0015\-\>B:17:0x0017\l|0x0017: AGET  (r3 I:char A[IMMUTABLE_TYPE]) = (r5 I:char[] A[D('$this$reverse' char[]), IMMUTABLE_TYPE]), (r2 I:??[int, short, byte, char] A[D('index' int)])  (LINE:5725)\l0x0019: AGET  (r4 I:char A[IMMUTABLE_TYPE]) = (r5 I:char[] A[D('$this$reverse' char[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char] A[D('reverseIndex' int)])  (LINE:5726)\l0x001b: APUT  \l  (r5 I:char[] A[D('$this$reverse' char[]), IMMUTABLE_TYPE])\l  (r2 I:??[int, short, byte, char] A[D('index' int)])\l  (r4 I:char A[IMMUTABLE_TYPE])\l \l0x001d: APUT  \l  (r5 I:char[] A[D('$this$reverse' char[]), IMMUTABLE_TYPE])\l  (r1 I:??[int, short, byte, char] A[D('reverseIndex' int)])\l  (r3 I:char A[D('tmp' char), IMMUTABLE_TYPE])\l  (LINE:5727)\l0x0020: ARITH  (r1 I:int) = (r1 I:int A[D('reverseIndex' int)]) + (\-1 int) \l0x0022: ARITH  (r2 I:int) = (r2 I:int A[D('index' int)]) + (1 int)  (LINE:5724)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0025|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0025|RETURN\l|0x0025: RETURN    (LINE:5730)\l}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.ArraysKt___ArraysKt.reverse((r5 I:char[] A[D('$this$reverse' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:17:0x0017 \-\> B:16:0x0015, CROSS_EDGE: B:18:0x0025 \-\> B:11:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0019\-0x0020: r3 'tmp' C\l  0x0015\-0x0025: r2 'index' I\l  0x000f\-0x0025: r0 'midPoint' I\l  0x0014\-0x0025: r1 'reverseIndex' I\l  \-1 \-0x0025: r5 '$this$reverse' [C\l  \-1 \-0x0025: r6 'fromIndex' I\l  \-1 \-0x0025: r7 'toIndex' I\l}"];
MethodNode -> Node_10;Node_10 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_14[style=dashed];
Node_13 -> Node_15;
Node_14 -> Node_11;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_16;
Node_19 -> Node_18;
Node_18 -> Node_11;
}

