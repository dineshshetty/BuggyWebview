digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.indexOfFirst([BLkotlin\/jvm\/functions\/Function1;)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$indexOfFirst' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1639)\l0x000c: ARRAY_LENGTH  (r2 I:int) = (r4 I:??[] A[D('$this$indexOfFirst' byte[])]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|LOOP_START\lLOOP:0: B:15:0x000d\-\>B:19:0x0022\l|0x000d: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:22:0x0025 \l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|0x000f: AGET  (r3 I:??[int, short, byte, char]) = (r4 I:byte[] A[D('$this$indexOfFirst' byte[]), IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char] A[D('index' int)])  (LINE:1640)\l0x0011: INVOKE  (r3 I:java.lang.Byte) = (r3 I:byte) type: STATIC call: java.lang.Byte.valueOf(byte):java.lang.Byte A[MD:(byte):java.lang.Byte (c)]\l0x0015: INVOKE  (r3 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r3 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0019: CHECK_CAST (r3 I:java.lang.Boolean) = (java.lang.Boolean) (r3 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001f|0x001f: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0022 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0022|LOOP_END\lLOOP:0: B:15:0x000d\-\>B:19:0x0022\l|0x0022: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:1639)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0021|RETURN\l|0x0021: RETURN  (r1 I:int A[D('index' int)])  (LINE:1641)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0025|RETURN\l|0x0025: CONST  (r1 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:1644)\l0x0026: RETURN  (r1 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.ArraysKt___ArraysKt.indexOfFirst((r4 I:byte[] A[D('$this$indexOfFirst' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super java.lang.Byte, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0022 \-\> B:15:0x000d, CROSS_EDGE: B:21:0x0026 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0025: r1 'index' I\l  0x000b\-0x0026: r0 '$i$f$indexOfFirst' I\l  \-1 \-0x0026: r4 '$this$indexOfFirst' [B\l  \-1 \-0x0026: r5 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: ([BLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Byte;Ljava\/lang\/Boolean;\>;)I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_23[style=dashed];
Node_19 -> Node_15;
Node_23 -> Node_18;
Node_18 -> Node_13;
Node_22 -> Node_20;
Node_20 -> Node_13;
}

