digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.take([FI)Ljava\/util\/List;" {
Node_29 [shape=record,label="{29\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lr0 = 0\l}"];
Node_32 [shape=record,label="{32\:\ 0x0007|if (r7 \< 0) goto L27\l}"];
Node_33 [shape=record,label="{33\:\ 0x0009|r2 = true\l}"];
Node_35 [shape=record,label="{35\:\ 0x000c|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v6 boolean) binds: [B:34:0x000b, B:33:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L25\l}"];
Node_36 [shape=record,label="{36\:\ 0x000e|if (r7 != 0) goto L9\l}"];
Node_37 [shape=record,label="{37\:\ 0x0010}"];
Node_38 [shape=record,label="{38\:\ 0x0014|RETURN\l|return kotlin.collections.CollectionsKt.emptyList()\l}"];
Node_30 [shape=record,label="{30\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_39 [shape=record,label="{39\:\ 0x0015}"];
Node_40 [shape=record,label="{40\:\ 0x0016|if (r7 \< r6.length) goto L13\l}"];
Node_41 [shape=record,label="{41\:\ 0x0018}"];
Node_42 [shape=record,label="{42\:\ 0x001c|RETURN\l|return kotlin.collections.ArraysKt.toList(r6)\l}"];
Node_43 [shape=record,label="{43\:\ 0x001d|if (r7 != 1) goto L16\l}"];
Node_44 [shape=record,label="{44\:\ 0x001f}"];
Node_45 [shape=record,label="{45\:\ 0x0029|RETURN\l|return kotlin.collections.CollectionsKt.listOf(java.lang.Float.valueOf(r6[0]))\l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|r1 = 0\ljava.util.ArrayList r2 = new java.util.ArrayList(r7)\lint r3 = r6.length\l}"];
Node_47 [shape=record,label="{47\:\ 0x0031|LOOP_START\lLOOP:0: B:47:0x0031\-\>B:51:0x0041\lPHI: r0 r1 \l  PHI: (r0v5 int) = (r0v1 int), (r0v8 int) binds: [B:46:0x002a, B:51:0x0041] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v4 'count' int) = (r1v3 'count' int), (r1v5 'count' int) binds: [B:46:0x002a, B:51:0x0041] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 \>= r3) goto L24\l}"];
Node_48 [shape=record,label="{48\:\ 0x0033|r4 = r6[r0]\lr2.add(java.lang.Float.valueOf(r4))\lint r1 = r1 + 1\l}"];
Node_49 [shape=record,label="{49\:\ 0x003e|if (r1 != r7) goto L20\l}"];
Node_51 [shape=record,label="{51\:\ 0x0041|LOOP_END\lLOOP:0: B:47:0x0031\-\>B:51:0x0041\l|int r0 = r0 + 1\l}"];
Node_57 [shape=record,label="{57\:\ 0x0044|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x0044}"];
Node_53 [shape=record,label="{53\:\ 0x0047|RETURN\l|return r2\l}"];
Node_56 [shape=record,label="{56\:\ 0x0044|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x0048|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Requested element count \")\lr1.append(r7)\lr1.append(\" is less than zero.\")\l}"];
Node_55 [shape=record,label="{55\:\ 0x0068|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_34 [shape=record,label="{34\:\ 0x000b|r2 = false\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Float\> kotlin.collections.ArraysKt___ArraysKt.take((r6v0 '$this$take' float[] A[D('$this$take' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:42:0x001c \-\> B:30:?, CROSS_EDGE: B:45:0x0029 \-\> B:30:?, BACK_EDGE: B:51:0x0041 \-\> B:47:0x0031, CROSS_EDGE: B:53:0x0047 \-\> B:30:?, CROSS_EDGE: B:47:0x0031 \-\> B:52:0x0044, CROSS_EDGE: B:55:0x0068 \-\> B:30:?, CROSS_EDGE: B:34:0x000b \-\> B:35:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([FI)Ljava\/util\/List\<Ljava\/lang\/Float;\>;\l}"];
MethodNode -> Node_29;Node_29 -> Node_31;
Node_31 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_34;
Node_33 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_54;
Node_36 -> Node_37[style=dashed];
Node_36 -> Node_39;
Node_37 -> Node_38;
Node_38 -> Node_30;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_30;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_46;
Node_44 -> Node_45;
Node_45 -> Node_30;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_56;
Node_48 -> Node_49;
Node_49 -> Node_51;
Node_49 -> Node_57[style=dashed];
Node_51 -> Node_47;
Node_57 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_30;
Node_56 -> Node_52;
Node_54 -> Node_55;
Node_55 -> Node_30;
Node_34 -> Node_35;
}

