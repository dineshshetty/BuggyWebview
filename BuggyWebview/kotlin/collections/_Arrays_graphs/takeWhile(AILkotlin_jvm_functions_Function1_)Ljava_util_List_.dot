digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.takeWhile([ILkotlin\/jvm\/functions\/Function1;)Ljava\/util\/List;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"predicate\")\ljava.util.ArrayList r1 = new java.util.ArrayList()\lint r2 = r6.length\lr3 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x0012|LOOP_START\lLOOP:0: B:15:0x0012\-\>B:19:0x0027\lPHI: r3 \l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:14:0x0000, B:19:0x0027] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x0014|r4 = r6[r3]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0024|if (r7.invoke(java.lang.Integer.valueOf(r4)).booleanValue() != false) goto L5\l}"];
Node_19 [shape=record,label="{19\:\ 0x0027|LOOP_END\lLOOP:0: B:15:0x0012\-\>B:19:0x0027\l|r1.add(java.lang.Integer.valueOf(r4))\lint r3 = r3 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0031}"];
Node_21 [shape=record,label="{21\:\ 0x0034|RETURN\l|return r1\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0031|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Integer\> kotlin.collections.ArraysKt___ArraysKt.takeWhile((r6v0 '$this$takeWhile' int[] A[D('$this$takeWhile' int[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'predicate' kotlin.jvm.functions.Function1\<? super java.lang.Integer, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0027 \-\> B:15:0x0012, CROSS_EDGE: B:15:0x0012 \-\> B:20:0x0031\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Integer;Ljava\/lang\/Boolean;\>;)Ljava\/util\/List\<Ljava\/lang\/Integer;\>;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_22;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_23[style=dashed];
Node_19 -> Node_15;
Node_23 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
Node_22 -> Node_20;
}

