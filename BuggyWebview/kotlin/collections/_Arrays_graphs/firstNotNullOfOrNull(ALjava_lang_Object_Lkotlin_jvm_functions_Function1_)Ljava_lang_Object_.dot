digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.firstNotNullOfOrNull([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"transform\")\lint r0 = r4.length\lr1 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|LOOP_START\lLOOP:0: B:15:0x000c\-\>B:19:0x0017\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:14:0x0000, B:19:0x0017] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L9\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|java.lang.Object r3 = r5.invoke(r4[r1])\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|if (r3 == null) goto L5\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|LOOP_END\lLOOP:0: B:15:0x000c\-\>B:19:0x0017\l|int r1 = r1 + 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x0016|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\l|return r3\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x001a|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x001a|RETURN\l|return null\l}"];
MethodNode[shape=record,label="{private static final R kotlin.collections.ArraysKt___ArraysKt.firstNotNullOfOrNull((r4v0 T[] A[D('$this$firstNotNullOfOrNull' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'transform' kotlin.jvm.functions.Function1\<? super T, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0017 \-\> B:15:0x000c, CROSS_EDGE: B:21:0x001b \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)TR;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_22[style=dashed];
Node_19 -> Node_15;
Node_22 -> Node_18;
Node_18 -> Node_13;
Node_23 -> Node_20;
Node_20 -> Node_13;
}

