digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.maxByOrThrow([FLkotlin\/jvm\/functions\/Function1;)F" {
subgraph cluster_Region_291535875 {
label = "R(2:1|(2:(1:22)|(2:5|(2:(1:7)|(3:9|(2:12|(1:15)(0))|20)))))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"selector\")\l}"];
subgraph cluster_Region_1213701245 {
label = "R(2:(1:22)|(2:5|(2:(1:7)|(3:9|(2:12|(1:15)(0))|20))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1117789161 {
label = "IF [B:30:0x0013] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0013|PHI: r1 \l  PHI: (r1v2 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r9.length == 0) != false) goto L21\l}"];
subgraph cluster_Region_717705664 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_42 [shape=record,label="{42\:\ 0x0056|throw new java.util.NoSuchElementException()\l}"];
}
}
subgraph cluster_Region_2093547166 {
label = "R(2:5|(2:(1:7)|(3:9|(2:12|(1:15)(0))|20)))";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0015|float r1 = r9[0]\lint int r3 = kotlin.collections.ArraysKt.getLastIndex(r9)\l}"];
subgraph cluster_Region_953528575 {
label = "R(2:(1:7)|(3:9|(2:12|(1:15)(0))|20))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1793506782 {
label = "IF [B:32:0x001b] THEN: R(1:7) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x001b|if (r3 == 0) goto L7\l}"];
subgraph cluster_Region_1905777357 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x001d|RETURN\l|return r1\l}"];
}
}
subgraph cluster_Region_1373738354 {
label = "R(3:9|(2:12|(1:15)(0))|20)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x001e|java.lang.Comparable java.lang.Comparable r4 = r10.invoke(java.lang.Float.valueOf(r1))\lkotlin.collections.IntIterator ?? r2 = new kotlin.ranges.IntRange(1, r3).iterator()\l}"];
subgraph cluster_LoopRegion_308401679 {
label = "LOOP:0: (2:12|(1:15)(0))";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0035|if (r2.hasNext() != false) goto L12\l}"];
subgraph cluster_Region_1341561652 {
label = "R(2:12|(1:15)(0))";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0037|int int r5 = r2.nextInt()\lfloat r6 = r9[r5]\ljava.lang.Comparable R r7 = r10.invoke(java.lang.Float.valueOf(r6))\l}"];
subgraph cluster_IfRegion_1567567581 {
label = "IF [B:38:0x004b] THEN: R(1:15) ELSE: R(0)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x004b|if (r4.compareTo(r7) \< 0) goto L14\l}"];
subgraph cluster_Region_2038024431 {
label = "R(1:15)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x004d|r1 = r6\lr4 = r7\l}"];
}
subgraph cluster_Region_1276471276 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_40 [shape=record,label="{40\:\ 0x0050|RETURN\l|return r1\l}"];
}
}
}
}
}
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x000e}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0010}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0031|LOOP_START\lLOOP:0: B:35:0x0031\-\>B:45:0x0031\lPHI: r1 r4 \l  PHI: (r1v5 'maxElem' float) = (r1v4 'maxElem' float), (r1v6 'maxElem' float) binds: [B:34:0x001e, B:45:0x0031] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v3 'maxValue' java.lang.Comparable) = (r4v2 'maxValue' java.lang.Comparable), (r4v4 'maxValue' java.lang.Comparable) binds: [B:34:0x001e, B:45:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_44 [shape=record,color=red,label="{44\:\ 0x004d|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x0031|SYNTHETIC\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0031|LOOP_END\lSYNTHETIC\lLOOP:0: B:35:0x0031\-\>B:45:0x0031\lPHI: r1 r4 \l  PHI: (r1v6 'maxElem' float) = (r1v5 'maxElem' float), (r1v7 'maxElem' float) binds: [B:46:0x0031, B:47:0x0031] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v4 'maxValue' java.lang.Comparable) = (r4v3 'maxValue' java.lang.Comparable), (r4v5 'maxValue' java.lang.Comparable) binds: [B:46:0x0031, B:47:0x0031] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0031|SYNTHETIC\l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0050|SYNTHETIC\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0051}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0012}"];
MethodNode[shape=record,label="{public static final float kotlin.collections.ArraysKt___ArraysKt.maxByOrThrow((r9v0 '$this$maxBy' float[] A[D('$this$maxBy' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'selector' kotlin.jvm.functions.Function1\<? super java.lang.Float, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x004b \-\> B:35:0x0031, BACK_EDGE: B:39:0x004d \-\> B:35:0x0031, CROSS_EDGE: B:40:0x0050 \-\> B:25:?, CROSS_EDGE: B:42:0x0056 \-\> B:25:?, CROSS_EDGE: B:29:0x0012 \-\> B:30:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>]\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r2v1, types: [kotlin.collections.IntIterator]\}\lSIGNATURE: \<R::Ljava\/lang\/Comparable\<\-TR;\>;\>([FLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Float;+TR;\>;)F\l}"];
MethodNode -> Node_24;Node_26 -> Node_27;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_41;
Node_42 -> Node_25;
Node_31 -> Node_32;
Node_32 -> Node_33;
Node_32 -> Node_34[style=dashed];
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_36 -> Node_37;
Node_36 -> Node_43[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_44;
Node_38 -> Node_46[style=dashed];
Node_39 -> Node_47;
Node_40 -> Node_25;
Node_24 -> Node_26;
Node_27 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_35 -> Node_36;
Node_44 -> Node_39;
Node_47 -> Node_45;
Node_45 -> Node_35;
Node_46 -> Node_45;
Node_43 -> Node_40;
Node_41 -> Node_42;
Node_29 -> Node_30;
}

