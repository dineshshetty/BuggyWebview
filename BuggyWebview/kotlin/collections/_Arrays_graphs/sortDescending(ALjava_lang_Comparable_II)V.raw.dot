digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sortDescending([Ljava\/lang\/Comparable;II)V" {
Node_4 [shape=record,label="{4\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$sortDescending' java.lang.Comparable[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:java.util.Comparator) =  type: STATIC call: kotlin.comparisons.ComparisonsKt.reverseOrder():java.util.Comparator A[MD:\<T extends java.lang.Comparable\<? super T\>\>:():java.util.Comparator\<T extends java.lang.Comparable\<? super T\>\> (m)] (LINE:8434)\l0x0009: INVOKE  \l  (r1 I:java.lang.Object[] A[D('$this$sortDescending' java.lang.Comparable[])])\l  (r0 I:java.util.Comparator)\l  (r2 I:int A[D('fromIndex' int)])\l  (r3 I:int A[D('toIndex' int)])\l type: STATIC call: kotlin.collections.ArraysKt.sortWith(java.lang.Object[], java.util.Comparator, int, int):void A[MD:\<T\>:(T[], java.util.Comparator\<? super T\>, int, int):void (m)]\l}"];
Node_7 [shape=record,label="{7\:\ 0x000c|RETURN\l|0x000c: RETURN    (LINE:8435)\l}"];
Node_5 [shape=record,label="{5\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.ArraysKt___ArraysKt.sortDescending((r1 I:T extends java.lang.Comparable\<? super T\>[] A[D('$this$sortDescending' java.lang.Comparable[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('fromIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[D('toIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000c: r1 '$this$sortDescending' [Ljava\/lang\/Comparable;\l  \-1 \-0x000c: r2 'fromIndex' I\l  \-1 \-0x000c: r3 'toIndex' I\lTYPE_VARS: [T extends java.lang.Comparable\<? super T\>]\lSIGNATURE: \<T::Ljava\/lang\/Comparable\<\-TT;\>;\>([TT;II)V\l}"];
MethodNode -> Node_4;Node_4 -> Node_6;
Node_6 -> Node_7;
Node_7 -> Node_5;
}

