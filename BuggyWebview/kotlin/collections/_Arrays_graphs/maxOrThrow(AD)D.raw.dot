digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.maxOrThrow([D)D" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$max' double[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r6 I:??[] A[D('$this$max' double[])])  (LINE:13853)\l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x000c \l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0030 \l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: AGET  (r2 I:??[long, double]) = (r6 I:??[long, double][] A[D('$this$max' double[])]), (r2 I:??[int, short, byte, char])  (LINE:13854)\l0x0011: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:13855)\l0x0013: INVOKE  (r4 I:int) = (r6 I:double[] A[D('$this$max' double[])]) type: STATIC call: kotlin.collections.ArraysKt.getLastIndex(double[]):int A[MD:(double[]):int (m)]\l0x0017: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r4 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x001a: INVOKE  (r0 I:kotlin.collections.IntIterator) = (r0 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x001e|LOOP_START\lLOOP:0: B:23:0x001e\-\>B:25:0x0024\l|0x001e: INVOKE  (r1 I:boolean) = (r0 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|0x0022: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x002f \l}"];
Node_25 [shape=record,label="{25\:\ 0x0024|LOOP_END\lLOOP:0: B:23:0x001e\-\>B:25:0x0024\l|0x0024: INVOKE  (r1 I:int) = (r0 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0028: AGET  (r4 I:??[long, double]) = (r6 I:??[long, double][] A[D('$this$max' double[])]), (r1 I:??[int, short, byte, char] A[D('i' int)])  (LINE:13856)\l0x002a: INVOKE  (r2 I:double A[D('max' double)]) = (r2 I:double A[D('max' double)]), (r4 I:double A[D('e' double)]) type: STATIC call: java.lang.Math.max(double, double):double A[MD:(double, double):double (c)] (LINE:13857)\l}"];
Node_29 [shape=record,label="{29\:\ 0x002f|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x002f|RETURN\l|0x002f: RETURN  (r2 I:double A[D('max' double)])  (LINE:13859)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_27 [shape=record,label="{27\:\ 0x0030|0x0030: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException) =  java.util.NoSuchElementException  (LINE:13853)\l0x0032: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x0035|0x0035: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final double kotlin.collections.ArraysKt___ArraysKt.maxOrThrow((r6 I:double[] A[D('$this$max' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x0024 \-\> B:23:0x001e, CROSS_EDGE: B:28:0x0035 \-\> B:16:?, CROSS_EDGE: B:20:0x000c \-\> B:21:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x002e: r1 'i' I\l  0x002a\-0x002e: r4 'e' D\l  0x0011\-0x0030: r2 'max' D\l  \-1 \-0x0035: r6 '$this$max' [D\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_20;
Node_19 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_29;
Node_25 -> Node_23;
Node_29 -> Node_26;
Node_26 -> Node_16;
Node_27 -> Node_28;
Node_28 -> Node_16;
Node_20 -> Node_21;
}

