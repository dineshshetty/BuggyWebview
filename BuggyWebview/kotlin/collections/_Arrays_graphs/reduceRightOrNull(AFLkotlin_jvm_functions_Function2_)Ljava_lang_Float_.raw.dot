digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.reduceRightOrNull([FLkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/Float;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$reduceRightOrNull' float[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"operation\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('operation' kotlin.jvm.functions.Function2)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: INVOKE  (r1 I:int) = (r5 I:float[] A[D('$this$reduceRightOrNull' float[])]) type: STATIC call: kotlin.collections.ArraysKt.getLastIndex(float[]):int A[MD:(float[]):int (m)] (LINE:20766)\l}"];
Node_15 [shape=record,label="{15\:\ 0x000f|0x000f: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:18:0x0013  (LINE:20767)\l}"];
Node_16 [shape=record,label="{16\:\ 0x0011|RETURN\l|0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0012: RETURN  (r2 I:java.lang.Float) \l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0013|0x0013: ARITH  (r2 I:int) = (r1 I:int A[D('index' int)]) + (\-1 int)  (LINE:20768)\l0x0015: AGET  (r1 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('$this$reduceRightOrNull' float[])]), (r1 I:??[int, short, byte, char] A[D('index' int)]) \l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|LOOP_START\lLOOP:0: B:19:0x0017\-\>B:20:0x0019\l|0x0017: IF  (r2 I:??[int, byte, short, char] A[D('index' int)]) \< (0 ??[int, byte, short, char])  \-\> B:23:0x0031  (LINE:20769)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0019|LOOP_END\lLOOP:0: B:19:0x0017\-\>B:20:0x0019\l|0x0019: ARITH  (r3 I:int) = (r2 I:int A[D('index' int)]) + (\-1 int)  (LINE:20770)\l0x001b: AGET  (r2 I:??[int, float, short, byte, char]) = (r5 I:??[int, float][] A[D('$this$reduceRightOrNull' float[])]), (r2 I:??[int, short, byte, char] A[D('index' int)]) \l0x001d: INVOKE  (r2 I:java.lang.Float) = (r2 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l0x0021: INVOKE  (r4 I:java.lang.Float) = (r1 I:float A[D('accumulator' float)]) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)]\l0x0025: INVOKE  (r2 I:java.lang.Object) = \l  (r6 I:kotlin.jvm.functions.Function2 A[D('operation' kotlin.jvm.functions.Function2)])\l  (r2 I:java.lang.Object)\l  (r4 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0029: CHECK_CAST (r2 I:java.lang.Number) = (java.lang.Number) (r2 I:??[OBJECT, ARRAY]) \l0x002b: INVOKE  (r1 I:float A[D('accumulator' float)]) = (r2 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.floatValue():float A[MD:():float (c)]\l0x002f: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0031|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0031|0x0031: INVOKE  (r3 I:java.lang.Float) = (r1 I:float A[D('accumulator' float)]) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[MD:(float):java.lang.Float (c)] (LINE:20772)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0035|RETURN\l|0x0035: RETURN  (r3 I:java.lang.Float) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Float kotlin.collections.ArraysKt___ArraysKt.reduceRightOrNull((r5 I:float[] A[D('$this$reduceRightOrNull' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.functions.Function2\<? super java.lang.Float, ? super java.lang.Float, java.lang.Float\> A[D('operation' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0019 \-\> B:19:0x0017, CROSS_EDGE: B:22:0x0035 \-\> B:13:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000f\-0x0015: r1 'index' I\l  0x0015\-0x001b: r2 'index' I\l  0x001b\-0x0031: r3 'index' I\l  0x000b\-0x0035: r0 '$i$f$reduceRightOrNull' I\l  0x0017\-0x0035: r1 'accumulator' F\l  0x0031\-0x0035: r2 'index' I\l  \-1 \-0x0035: r5 '$this$reduceRightOrNull' [F\l  \-1 \-0x0035: r6 'operation' Lkotlin\/jvm\/functions\/Function2;\lSIGNATURE: ([FLkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Float;\-Ljava\/lang\/Float;Ljava\/lang\/Float;\>;)Ljava\/lang\/Float;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_18;
Node_16 -> Node_13;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_19;
Node_23 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_13;
}

