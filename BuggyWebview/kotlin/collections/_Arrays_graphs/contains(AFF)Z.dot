digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.contains([FF)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"\<this\>\")\lint r2 = r10.length\lr4 = 0\l}"];
Node_20 [shape=record,label="{20\:\ 0x000a|LOOP_START\lLOOP:0: B:20:0x000a\-\>B:28:0x001c\lPHI: r4 \l  PHI: (r4v1 int) = (r4v0 int), (r4v2 int) binds: [B:19:0x0000, B:28:0x001c] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_21 [shape=record,label="{21\:\ 0x000b|if (r4 \>= r2) goto L13\l}"];
Node_22 [shape=record,label="{22\:\ 0x000d|r6 = r10[r4]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0013|if ((r6 \> r11 ? 1 : (r6 == r11 ? 0 : \-1)) != 0) goto L12\l}"];
Node_24 [shape=record,label="{24\:\ 0x0015|r7 = true\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|PHI: r7 \l  PHI: (r7v2 boolean) = (r7v1 boolean), (r7v3 boolean) binds: [B:25:0x0017, B:24:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 == false) goto L8\l}"];
Node_28 [shape=record,label="{28\:\ 0x001c|LOOP_END\lLOOP:0: B:20:0x000a\-\>B:28:0x001c\l|int r4 = r4 + 1\l}"];
Node_31 [shape=record,label="{31\:\ 0x001a|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|RETURN\lORIG_RETURN\l|return true\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0017|r7 = false\l}"];
Node_32 [shape=record,label="{32\:\ 0x0020|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return false\l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ boolean kotlin.collections.ArraysKt___ArraysKt.contains((r10v0 '$this$contains' float[] A[D('$this$contains' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'element' float A[D('element' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any \{ it == element \}' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=any \{ it == element \}, imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{errorSince=1.6, hiddenSince=1.7, warningSince=1.4\}\}\}\lINLINE_NOT_NEEDED\lBACK_EDGE: B:28:0x001c \-\> B:20:0x000a, CROSS_EDGE: B:25:0x0017 \-\> B:26:0x0018, CROSS_EDGE: B:21:0x000b \-\> B:30:0x0020\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_32;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_31[style=dashed];
Node_28 -> Node_20;
Node_31 -> Node_27;
Node_27 -> Node_18;
Node_25 -> Node_26;
Node_32 -> Node_33;
Node_33 -> Node_18;
}

