digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.first([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"predicate\")\lint r1 = r5.length\lr2 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|LOOP_START\lLOOP:0: B:15:0x000d\-\>B:19:0x001e\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v3 int) binds: [B:14:0x0000, B:19:0x001e] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L9\l}"];
Node_16 [shape=record,label="{16\:\ 0x000f|r3 = r5[r2]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001b|if (r6.invoke(r3).booleanValue() == false) goto L5\l}"];
Node_19 [shape=record,label="{19\:\ 0x001e|LOOP_END\lLOOP:0: B:15:0x000d\-\>B:19:0x001e\l|int r2 = r2 + 1\l}"];
Node_22 [shape=record,label="{22\:\ 0x001d|SYNTHETIC\l}"];
Node_18 [shape=record,label="{18\:\ 0x001d|RETURN\l|return r3\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0021}"];
Node_21 [shape=record,label="{21\:\ 0x0028|throw new java.util.NoSuchElementException(\"Array contains no element matching the predicate.\")\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.ArraysKt___ArraysKt.first((r5v0 T[] A[D('$this$first' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x001e \-\> B:15:0x000d, CROSS_EDGE: B:21:0x0028 \-\> B:13:?\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_23;
Node_16 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_22[style=dashed];
Node_19 -> Node_15;
Node_22 -> Node_18;
Node_18 -> Node_13;
Node_23 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

