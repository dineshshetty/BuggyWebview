digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.slice([DLjava\/lang\/Iterable;)Ljava\/util\/List;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$slice' double[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"indices\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('indices' java.lang.Iterable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:4545)\l0x000c: INVOKE  (r0 I:int) = (r7 I:java.lang.Iterable A[D('indices' java.lang.Iterable)]), (r0 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('size' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0017  (LINE:4546)\l}"];
Node_17 [shape=record,label="{17\:\ 0x0012|0x0012: INVOKE  (r1 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|RETURN\l|0x0016: RETURN  (r1 I:java.util.List\<java.lang.Double\>) \l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0017|0x0017: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:4547)\l0x0019: INVOKE  (r1 I:java.util.ArrayList), (r0 I:int A[D('size' int)]) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x001c: INVOKE  (r2 I:java.util.Iterator) = (r7 I:java.lang.Iterable A[D('indices' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:4548)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0020|LOOP_START\lLOOP:0: B:20:0x0020\-\>B:22:0x0026\l|0x0020: INVOKE  (r3 I:boolean) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0024|0x0024: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x003a \l}"];
Node_22 [shape=record,label="{22\:\ 0x0026|LOOP_END\lLOOP:0: B:20:0x0020\-\>B:22:0x0026\l|0x0026: INVOKE  (r3 I:java.lang.Object) = (r2 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x002a: CHECK_CAST (r3 I:java.lang.Number) = (java.lang.Number) (r3 I:??[OBJECT, ARRAY]) \l0x002c: INVOKE  (r3 I:int) = (r3 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x0030: AGET  (r4 I:??[long, double]) = (r6 I:??[long, double][] A[D('$this$slice' double[])]), (r3 I:??[int, short, byte, char] A[D('index' int)])  (LINE:4549)\l0x0032: INVOKE  (r4 I:java.lang.Double) = (r4 I:double) type: STATIC call: java.lang.Double.valueOf(double):java.lang.Double A[MD:(double):java.lang.Double (c)]\l0x0036: INVOKE  (r1 I:java.util.ArrayList A[D('list' java.util.ArrayList)]), (r4 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_25 [shape=record,label="{25\:\ 0x003a|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x003a|0x003a: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('list' java.util.ArrayList)])  (LINE:4551)\l0x003b: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x003d|RETURN\l|0x003d: RETURN  (r2 I:java.util.List\<java.lang.Double\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Double\> kotlin.collections.ArraysKt___ArraysKt.slice((r6 I:double[] A[D('$this$slice' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.Iterable\<java.lang.Integer\> A[D('indices' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:22:0x0026 \-\> B:20:0x0020, CROSS_EDGE: B:24:0x003d \-\> B:14:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0030\-0x003a: r3 'index' I\l  0x0010\-0x003d: r0 'size' I\l  0x001c\-0x003d: r1 'list' Ljava\/util\/ArrayList;\l  \-1 \-0x003d: r6 '$this$slice' [D\l  \-1 \-0x003d: r7 'indices' Ljava\/lang\/Iterable;\lSIGNATURE: ([DLjava\/lang\/Iterable\<Ljava\/lang\/Integer;\>;)Ljava\/util\/List\<Ljava\/lang\/Double;\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_19;
Node_17 -> Node_18;
Node_18 -> Node_14;
Node_19 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_25;
Node_22 -> Node_20;
Node_25 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_14;
}

