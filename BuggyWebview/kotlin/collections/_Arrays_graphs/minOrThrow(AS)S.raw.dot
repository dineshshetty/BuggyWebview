digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.minOrThrow([S)S" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$min' short[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r4 I:??[] A[D('$this$min' short[])])  (LINE:16363)\l0x0006: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0008|0x0008: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:26:0x000c \l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x000d|0x000d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x002f \l}"];
Node_28 [shape=record,label="{28\:\ 0x000f|0x000f: AGET  (r0 I:short A[IMMUTABLE_TYPE]) = (r4 I:short[] A[D('$this$min' short[]), IMMUTABLE_TYPE]), (r2 I:??[int, short, byte, char])  (LINE:16364)\l0x0011: NEW_INSTANCE  (r2 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:16365)\l0x0013: INVOKE  (r3 I:int) = (r4 I:short[] A[D('$this$min' short[])]) type: STATIC call: kotlin.collections.ArraysKt.getLastIndex(short[]):int A[MD:(short[]):int (m)]\l0x0017: INVOKE  (r2 I:kotlin.ranges.IntRange), (r1 I:int), (r3 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x001a: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r2 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x001e|LOOP_START\lLOOP:0: B:29:0x001e\-\>B:39:0x001e\l|0x001e: INVOKE  (r2 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x0022|0x0022: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x002e \l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|0x0024: INVOKE  (r2 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0028: AGET  (r3 I:short A[IMMUTABLE_TYPE]) = (r4 I:short[] A[D('$this$min' short[]), IMMUTABLE_TYPE]), (r2 I:??[int, short, byte, char] A[D('i' int)])  (LINE:16366)\l}"];
Node_32 [shape=record,label="{32\:\ 0x002a|0x002a: IF  (r0 I:??[int, byte, short, char] A[D('min' short)]) \<= (r3 I:??[int, byte, short, char] A[D('e' short)])  \-\> B:40:0x001e  (LINE:16367)\l}"];
Node_38 [shape=record,label="{38\:\ 0x002c|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x002c|0x002c: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('min' short)]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('e' short)]) \l}"];
Node_41 [shape=record,label="{41\:\ 0x001e|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x001e|LOOP_END\lSYNTHETIC\lLOOP:0: B:29:0x001e\-\>B:39:0x001e\l}"];
Node_40 [shape=record,label="{40\:\ 0x001e|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x002e|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x002e|RETURN\l|0x002e: RETURN  (r0 I:short A[D('min' short)])  (LINE:16369)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x002f|0x002f: NEW_INSTANCE  (r0 I:java.util.NoSuchElementException A[D('min' short)]) =  java.util.NoSuchElementException  (LINE:16363)\l0x0031: INVOKE  (r0 I:java.util.NoSuchElementException) type: DIRECT call: java.util.NoSuchElementException.\<init\>():void A[MD:():void (c)]\l}"];
Node_36 [shape=record,label="{36\:\ 0x0034|0x0034: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|0x000c: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final short kotlin.collections.ArraysKt___ArraysKt.minOrThrow((r4 I:short[] A[D('$this$min' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x002a \-\> B:29:0x001e, BACK_EDGE: B:33:0x002c \-\> B:29:0x001e, CROSS_EDGE: B:36:0x0034 \-\> B:22:?, CROSS_EDGE: B:26:0x000c \-\> B:27:0x000d\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x002d: r2 'i' I\l  0x002a\-0x002d: r3 'e' S\l  0x0011\-0x002f: r0 'min' S\l  \-1 \-0x0034: r4 '$this$min' [S\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_37;
Node_31 -> Node_32;
Node_32 -> Node_38[style=dashed];
Node_32 -> Node_40;
Node_38 -> Node_33;
Node_33 -> Node_41;
Node_41 -> Node_39;
Node_39 -> Node_29;
Node_40 -> Node_39;
Node_37 -> Node_34;
Node_34 -> Node_22;
Node_35 -> Node_36;
Node_36 -> Node_22;
Node_26 -> Node_27;
}

