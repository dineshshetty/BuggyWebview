digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.singleOrNull([SLkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Short;" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$singleOrNull' short[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3167)\l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:3168)\l0x000d: ARRAY_LENGTH  (r3 I:int) = (r8 I:??[] A[D('$this$singleOrNull' short[])])  (LINE:3169)\l0x000e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|LOOP_START\lLOOP:0: B:21:0x000f\-\>B:28:0x002c\l|0x000f: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0010|0x0010: IF  (r4 I:??[int, byte, short, char]) \>= (r3 I:??[int, byte, short, char])  \-\> B:32:0x002f \l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: AGET  (r6 I:short A[IMMUTABLE_TYPE]) = (r8 I:short[] A[D('$this$singleOrNull' short[]), IMMUTABLE_TYPE]), (r4 I:??[int, short, byte, char]) \l0x0014: INVOKE  (r7 I:java.lang.Short) = (r6 I:short A[D('element' short)]) type: STATIC call: java.lang.Short.valueOf(short):java.lang.Short A[MD:(short):java.lang.Short (c)] (LINE:3170)\l0x0018: INVOKE  (r7 I:java.lang.Object) = (r9 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r7 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x001c: CHECK_CAST (r7 I:java.lang.Boolean) = (java.lang.Boolean) (r7 I:??[OBJECT, ARRAY]) \l0x001e: INVOKE  (r7 I:boolean) = (r7 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0022|0x0022: IF  (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x002c \l}"];
Node_25 [shape=record,label="{25\:\ 0x0024|0x0024: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x0027  (LINE:3171)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0027|0x0027: INVOKE  (r1 I:java.lang.Short A[D('single' java.lang.Short)]) = (r6 I:short A[D('element' short)]) type: STATIC call: java.lang.Short.valueOf(short):java.lang.Short A[MD:(short):java.lang.Short (c)] (LINE:3172)\l0x002b: CONST  (r2 I:??[boolean, int, float, short, byte, char] A[D('found' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:3173)\l}"];
Node_34 [shape=record,label="{34\:\ 0x002c|SYNTHETIC\l}"];
Node_28 [shape=record,label="{28\:\ 0x002c|LOOP_END\lLOOP:0: B:21:0x000f\-\>B:28:0x002c\l|0x002c: ARITH  (r4 I:int) = (r4 I:int) + (1 int)  (LINE:3169)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0026|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0026|RETURN\l|0x0026: RETURN  (r5 I:java.lang.Short) \l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x002c|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002f|SYNTHETIC\l}"];
Node_29 [shape=record,label="{29\:\ 0x002f|0x002f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('found' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0032  (LINE:3176)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0031|RETURN\l|0x0031: RETURN  (r5 I:java.lang.Short) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0032|RETURN\l|0x0032: RETURN  (r1 I:java.lang.Short A[D('single' java.lang.Short)])  (LINE:3177)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Short kotlin.collections.ArraysKt___ArraysKt.singleOrNull((r8 I:short[] A[D('$this$singleOrNull' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:kotlin.jvm.functions.Function1\<? super java.lang.Short, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:28:0x002c \-\> B:21:0x000f, CROSS_EDGE: B:24:0x0022 \-\> B:28:0x002c, CROSS_EDGE: B:30:0x0031 \-\> B:19:?, CROSS_EDGE: B:31:0x0032 \-\> B:19:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x002f: r6 'element' S\l  0x000b\-0x0032: r0 '$i$f$singleOrNull' I\l  0x000c\-0x0032: r1 'single' Ljava\/lang\/Short;\l  0x000d\-0x0032: r2 'found' Z\l  \-1 \-0x0032: r8 '$this$singleOrNull' [S\l  \-1 \-0x0032: r9 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: ([SLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Short;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/Short;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_32;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_35;
Node_25 -> Node_27;
Node_25 -> Node_33[style=dashed];
Node_27 -> Node_34;
Node_34 -> Node_28;
Node_28 -> Node_21;
Node_33 -> Node_26;
Node_26 -> Node_19;
Node_35 -> Node_28;
Node_32 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_19;
Node_31 -> Node_19;
}

