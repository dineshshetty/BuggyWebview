digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.mapTo([FLjava\/util\/Collection;Lkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Collection;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"destination\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"transform\")\lint r1 = r5.length\lr2 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x0012|LOOP_START\lLOOP:0: B:10:0x0012\-\>B:11:0x0014\lPHI: r2 \l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:9:0x0000, B:11:0x0014] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x0014|LOOP_END\lLOOP:0: B:10:0x0012\-\>B:11:0x0014\l|r3 = r5[r2]\lr6.add(r7.invoke(java.lang.Float.valueOf(r3)))\lint r2 = r2 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x0024|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0024|RETURN\l|return r6\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super R\> kotlin.collections.ArraysKt___ArraysKt.mapTo((r5v0 '$this$mapTo' float[] A[D('$this$mapTo' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'destination' C extends java.util.Collection\<? super R\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'transform' kotlin.jvm.functions.Function1\<? super java.lang.Float, ? extends R\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0014 \-\> B:10:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: [R, C extends java.util.Collection\<? super R\>]\lSIGNATURE: \<R:Ljava\/lang\/Object;C::Ljava\/util\/Collection\<\-TR;\>;\>([FTC;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Float;+TR;\>;)TC;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_10;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

