digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.zip([D[D)Ljava\/util\/List;" {
subgraph cluster_Region_2094515226 {
label = "R(3:1|(1:3)|6)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r13, \"other\")\lint int r2 = java.lang.Math.min(r12.length, r13.length)\ljava.util.ArrayList java.util.ArrayList r3 = new java.util.ArrayList(r2)\lint r4 = 0\l}"];
subgraph cluster_LoopRegion_1054010850 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0018|LOOP_START\lLOOP:0: B:11:0x0018\-\>B:12:0x001a\lPHI: r4 \l  PHI: (r4v1 'i$iv' int) = (r4v0 'i$iv' int), (r4v2 'i$iv' int) binds: [B:10:0x0000, B:12:0x001a] A[DONT_GENERATE, DONT_INLINE]\l|if (r4 \< r2) goto L3\l}"];
subgraph cluster_Region_224523423 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_12 [shape=record,label="{12\:\ 0x001a|LOOP_END\lLOOP:0: B:11:0x0018\-\>B:12:0x001a\l|double r5 = r12[r4]\ldouble r7 = r13[r4]\lr3.add(kotlin.TuplesKt.m15to(java.lang.Double.valueOf(r5), java.lang.Double.valueOf(r7)))\lr4++\l}"];
}
}
Node_14 [shape=record,label="{14\:\ 0x0034|RETURN\l|return r3\l}"];
}
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0031|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0031}"];
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<kotlin.Pair\<java.lang.Double, java.lang.Double\>\> kotlin.collections.ArraysKt___ArraysKt.zip((r12v0 '$this$zip' double[] A[D('$this$zip' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'other' double[] A[D('other' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x001a \-\> B:11:0x0018\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([D[D)Ljava\/util\/List\<Lkotlin\/Pair\<Ljava\/lang\/Double;Ljava\/lang\/Double;\>;\>;\l}"];
MethodNode -> Node_8;Node_10 -> Node_11;
Node_11 -> Node_12;
Node_11 -> Node_15[style=dashed];
Node_12 -> Node_11;
Node_14 -> Node_9;
Node_8 -> Node_10;
Node_15 -> Node_13;
Node_13 -> Node_14;
}

