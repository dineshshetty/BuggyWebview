digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.joinTo([JLjava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Appendable;" {
subgraph cluster_Region_663328171 {
label = "R(5:1|(3:3|(1:5)|(2:(1:8)|(2:(1:16)(1:19)|18)))|(1:11)|12|13)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"buffer\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"separator\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"prefix\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"postfix\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"truncated\")\lr7.append(r9)\lint r0 = 0\lint r2 = 0\l\l}"];
subgraph cluster_LoopRegion_1855728913 {
label = "LOOP:0: (3:3|(1:5)|(2:(1:8)|(2:(1:16)(1:19)|18)))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0024|LOOP_START\lLOOP:0: B:27:0x0024\-\>B:38:0x004f\lPHI: r0 r2 \l  PHI: (r0v7 'count' int) = (r0v6 'count' int), (r0v9 'count' int) binds: [B:26:0x0000, B:38:0x004f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:26:0x0000, B:38:0x004f] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \< r1) goto L3\l}"];
subgraph cluster_Region_1023356994 {
label = "R(3:3|(1:5)|(2:(1:8)|(2:(1:16)(1:19)|18)))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0026|r3 = r6[r2]\lr0++\l}"];
subgraph cluster_IfRegion_1533891809 {
label = "IF [B:29:0x002b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x002b|if (r0 \> 1) goto L5\l}"];
subgraph cluster_Region_2019226287 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x002d|r7.append(r8)\l}"];
}
}
subgraph cluster_Region_1079848858 {
label = "R(2:(1:8)|(2:(1:16)(1:19)|18))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_815970026 {
label = "IF [B:31:0x0030, B:32:0x0032] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0030|if (r11 \>= 0) goto L7\l}"];
Node_32 [shape=record,label="{32\:\ 0x0032|ADDED_TO_REGION\l|if (r0 \> r11) goto L8\l}"];
subgraph cluster_Region_733247544 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x0052|SYNTHETIC\lEDGE_INSN: B:44:0x0052\-\>B:39:0x0052 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_1973091740 {
label = "R(2:(1:16)(1:19)|18)";
node [shape=record,color=blue];
subgraph cluster_IfRegion_609172730 {
label = "IF [B:35:0x0036] THEN: R(1:16) ELSE: R(1:19)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0036|if (r13 != null) goto L16\l}"];
subgraph cluster_Region_187657558 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0038|r7.append(r13.invoke(java.lang.Long.valueOf(r3)))\l}"];
}
subgraph cluster_Region_581415510 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0046|r7.append(java.lang.String.valueOf(r3))\l}"];
}
}
Node_38 [shape=record,label="{38\:\ 0x004f|LOOP_END\lLOOP:0: B:27:0x0024\-\>B:38:0x004f\l|r2++\l}"];
}
}
}
}
subgraph cluster_IfRegion_2119862084 {
label = "IF [B:39:0x0052, B:40:0x0054] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0052|EDGE_INSN: B:44:0x0052\-\>B:39:0x0052 ?: BREAK  \lPHI: r0 \l  PHI: (r0v8 'count' int) = (r0v7 'count' int), (r0v9 'count' int) binds: [B:45:0x0052, B:44:0x0052] A[DONT_GENERATE, DONT_INLINE]\l|if (r11 \>= 0) goto L10\l}"];
Node_40 [shape=record,label="{40\:\ 0x0054|ADDED_TO_REGION\l|if (r0 \> r11) goto L11\l}"];
subgraph cluster_Region_718957442 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_41 [shape=record,label="{41\:\ 0x0056|r7.append(r12)\l}"];
}
}
Node_42 [shape=record,label="{42\:\ 0x0059|r7.append(r10)\l}"];
Node_43 [shape=record,label="{43\:\ 0x005c|RETURN\l|return r7\l}"];
}
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x004f|SYNTHETIC\l}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x004f|SYNTHETIC\l}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0052|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final A extends java.lang.Appendable kotlin.collections.ArraysKt___ArraysKt.joinTo((r6v0 '$this$joinTo' long[] A[D('$this$joinTo' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'buffer' A extends java.lang.Appendable A[D('buffer' java.lang.Appendable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'separator' java.lang.CharSequence A[D('separator' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'prefix' java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'postfix' java.lang.CharSequence A[D('postfix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'limit' int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'truncated' java.lang.CharSequence A[D('truncated' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 kotlin.jvm.functions.Function1\<? super java.lang.Long, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x004f \-\> B:27:0x0024, CROSS_EDGE: B:37:0x0046 \-\> B:38:0x004f, CROSS_EDGE: B:40:0x0054 \-\> B:42:0x0059, CROSS_EDGE: B:39:0x0052 \-\> B:42:0x0059, CROSS_EDGE: B:31:0x0030 \-\> B:35:0x0036, CROSS_EDGE: B:29:0x002b \-\> B:31:0x0030, CROSS_EDGE: B:27:0x0024 \-\> B:39:0x0052\lINLINE_NOT_NEEDED\lTYPE_VARS: [A extends java.lang.Appendable]\lSIGNATURE: \<A::Ljava\/lang\/Appendable;\>([JTA;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Long;+Ljava\/lang\/CharSequence;\>;)TA;\l}"];
MethodNode -> Node_24;Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_45[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30;
Node_29 -> Node_31[style=dashed];
Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_35[style=dashed];
Node_32 -> Node_35[style=dashed];
Node_32 -> Node_44;
Node_44 -> Node_39;
Node_35 -> Node_36;
Node_35 -> Node_37[style=dashed];
Node_36 -> Node_47;
Node_37 -> Node_46;
Node_38 -> Node_27;
Node_39 -> Node_40;
Node_39 -> Node_42[style=dashed];
Node_40 -> Node_41;
Node_40 -> Node_42[style=dashed];
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_25;
Node_24 -> Node_26;
Node_47 -> Node_38;
Node_46 -> Node_38;
Node_45 -> Node_39;
}

