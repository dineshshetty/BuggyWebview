digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.maxOrThrow([J)J" {
subgraph cluster_Region_1250825541 {
label = "R(2:1|(2:(1:19)|(3:5|(2:8|(1:11)(0))|16)))";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\l}"];
subgraph cluster_Region_1402343582 {
label = "R(2:(1:19)|(3:5|(2:8|(1:11)(0))|16))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1591118074 {
label = "IF [B:27:0x000d] THEN: R(1:19) ELSE: null";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x000d|PHI: r0 \l  PHI: (r0v3 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r7.length == 0) != false) goto L18\l}"];
subgraph cluster_Region_990492391 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0036|throw new java.util.NoSuchElementException()\l}"];
}
}
subgraph cluster_Region_54239726 {
label = "R(3:5|(2:8|(1:11)(0))|16)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x000f|long r2 = r7[0]\lkotlin.collections.IntIterator ?? r0 = new kotlin.ranges.IntRange(1, kotlin.collections.ArraysKt.getLastIndex(r7)).iterator()\l}"];
subgraph cluster_LoopRegion_353518801 {
label = "LOOP:0: (2:8|(1:11)(0))";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0022|if (r0.hasNext() != false) goto L8\l}"];
subgraph cluster_Region_1266197324 {
label = "R(2:8|(1:11)(0))";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0024|int int r1 = r0.nextInt()\llong r4 = r7[r1]\l}"];
subgraph cluster_IfRegion_903392061 {
label = "IF [B:32:0x002c] THEN: R(1:11) ELSE: R(0)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x002c|if (r2 \< r4) goto L10\l}"];
subgraph cluster_Region_341307711 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x002e|r2 = r4\l}"];
}
subgraph cluster_Region_26720510 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
Node_34 [shape=record,label="{34\:\ 0x0030|RETURN\l|return r2\l}"];
}
}
}
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,color=red,label="{24\:\ 0x0008}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x000a}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x001e|LOOP_START\lLOOP:0: B:29:0x001e\-\>B:39:0x001e\lPHI: r2 \l  PHI: (r2v2 'max' long) = (r2v1 'max' long), (r2v3 'max' long) binds: [B:28:0x000f, B:39:0x001e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_38 [shape=record,color=red,label="{38\:\ 0x002e|SYNTHETIC\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x001e|SYNTHETIC\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x001e|LOOP_END\lSYNTHETIC\lLOOP:0: B:29:0x001e\-\>B:39:0x001e\lPHI: r2 \l  PHI: (r2v3 'max' long) = (r2v2 'max' long), (r2v4 'max' long) binds: [B:40:0x001e, B:41:0x001e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x001e|SYNTHETIC\l}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x0030|SYNTHETIC\l}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x0031}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x000c}"];
MethodNode[shape=record,label="{public static final long kotlin.collections.ArraysKt___ArraysKt.maxOrThrow((r7v0 '$this$max' long[] A[D('$this$max' long[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x002c \-\> B:29:0x001e, BACK_EDGE: B:33:0x002e \-\> B:29:0x001e, CROSS_EDGE: B:36:0x0036 \-\> B:22:?, CROSS_EDGE: B:26:0x000c \-\> B:27:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r0v6, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_21;Node_23 -> Node_24;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_35;
Node_36 -> Node_22;
Node_28 -> Node_29;
Node_30 -> Node_31;
Node_30 -> Node_37[style=dashed];
Node_31 -> Node_32;
Node_32 -> Node_38;
Node_32 -> Node_40[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_22;
Node_21 -> Node_23;
Node_24 -> Node_25;
Node_24 -> Node_26;
Node_25 -> Node_27;
Node_29 -> Node_30;
Node_38 -> Node_33;
Node_41 -> Node_39;
Node_39 -> Node_29;
Node_40 -> Node_39;
Node_37 -> Node_34;
Node_35 -> Node_36;
Node_26 -> Node_27;
}

