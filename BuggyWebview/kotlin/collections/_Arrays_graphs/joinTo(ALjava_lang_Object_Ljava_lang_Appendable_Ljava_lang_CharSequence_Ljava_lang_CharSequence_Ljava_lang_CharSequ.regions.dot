digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.joinTo([Ljava\/lang\/Object;Ljava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Appendable;" {
subgraph cluster_Region_1923103880 {
label = "R(5:1|(3:3|(1:5)|(2:(1:8)|(1:16)))|(1:11)|12|13)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"buffer\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"separator\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"prefix\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"postfix\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"truncated\")\lr6.append(r8)\lint r0 = 0\lint r2 = 0\l\l}"];
subgraph cluster_LoopRegion_2007972559 {
label = "LOOP:0: (3:3|(1:5)|(2:(1:8)|(1:16)))";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0024|LOOP_START\lLOOP:0: B:24:0x0024\-\>B:32:0x0036\lPHI: r0 r2 \l  PHI: (r0v7 'count' int) = (r0v6 'count' int), (r0v9 'count' int) binds: [B:23:0x0000, B:32:0x0036] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v1 int) = (r2v0 int), (r2v2 int) binds: [B:23:0x0000, B:32:0x0036] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \< r1) goto L3\l}"];
subgraph cluster_Region_1458671604 {
label = "R(3:3|(1:5)|(2:(1:8)|(1:16)))";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x0026|r3 = r5[r2]\lr0++\l}"];
subgraph cluster_IfRegion_2123994443 {
label = "IF [B:26:0x002b] THEN: R(1:5) ELSE: null";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x002b|if (r0 \> 1) goto L5\l}"];
subgraph cluster_Region_127577265 {
label = "R(1:5)";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x002d|r6.append(r7)\l}"];
}
}
subgraph cluster_Region_405838614 {
label = "R(2:(1:8)|(1:16))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_221160044 {
label = "IF [B:28:0x0030, B:29:0x0032] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0030|if (r10 \>= 0) goto L7\l}"];
Node_29 [shape=record,label="{29\:\ 0x0032|ADDED_TO_REGION\l|if (r0 \> r10) goto L8\l}"];
subgraph cluster_Region_1640986089 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x003c|SYNTHETIC\lEDGE_INSN: B:38:0x003c\-\>B:33:0x003c ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_1467617810 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0036|LOOP_END\lLOOP:0: B:24:0x0024\-\>B:32:0x0036\l|kotlin.text.StringsKt.appendElement(r6, r3, r12)\lr2++\l}"];
}
}
}
}
subgraph cluster_IfRegion_895939649 {
label = "IF [B:33:0x003c, B:34:0x003e] THEN: R(1:11) ELSE: null";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x003c|EDGE_INSN: B:38:0x003c\-\>B:33:0x003c ?: BREAK  \lPHI: r0 \l  PHI: (r0v8 'count' int) = (r0v7 'count' int), (r0v9 'count' int) binds: [B:39:0x003c, B:38:0x003c] A[DONT_GENERATE, DONT_INLINE]\l|if (r10 \>= 0) goto L10\l}"];
Node_34 [shape=record,label="{34\:\ 0x003e|ADDED_TO_REGION\l|if (r0 \> r10) goto L11\l}"];
subgraph cluster_Region_1874350685 {
label = "R(1:11)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0040|r6.append(r11)\l}"];
}
}
Node_36 [shape=record,label="{36\:\ 0x0043|r6.append(r9)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0046|RETURN\l|return r6\l}"];
}
Node_21 [shape=record,color=red,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0036|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0036|SYNTHETIC\lADDED_TO_REGION\l}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x003c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final A extends java.lang.Appendable kotlin.collections.ArraysKt___ArraysKt.joinTo((r5v0 T[] A[D('$this$joinTo' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'buffer' A extends java.lang.Appendable A[D('buffer' java.lang.Appendable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'separator' java.lang.CharSequence A[D('separator' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'prefix' java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'postfix' java.lang.CharSequence A[D('postfix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'limit' int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'truncated' java.lang.CharSequence A[D('truncated' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 kotlin.jvm.functions.Function1\<? super T, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:32:0x0036 \-\> B:24:0x0024, CROSS_EDGE: B:34:0x003e \-\> B:36:0x0043, CROSS_EDGE: B:33:0x003c \-\> B:36:0x0043, CROSS_EDGE: B:28:0x0030 \-\> B:32:0x0036, CROSS_EDGE: B:26:0x002b \-\> B:28:0x0030, CROSS_EDGE: B:24:0x0024 \-\> B:33:0x003c\lINLINE_NOT_NEEDED\lTYPE_VARS: [A extends java.lang.Appendable, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;A::Ljava\/lang\/Appendable;\>([TT;TA;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-TT;+Ljava\/lang\/CharSequence;\>;)TA;\l}"];
MethodNode -> Node_21;Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_39[style=dashed];
Node_25 -> Node_26;
Node_26 -> Node_27;
Node_26 -> Node_28[style=dashed];
Node_27 -> Node_28;
Node_28 -> Node_29;
Node_28 -> Node_40[style=dashed];
Node_29 -> Node_38;
Node_29 -> Node_41[style=dashed];
Node_38 -> Node_33;
Node_32 -> Node_24;
Node_33 -> Node_34;
Node_33 -> Node_36[style=dashed];
Node_34 -> Node_35;
Node_34 -> Node_36[style=dashed];
Node_35 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_22;
Node_21 -> Node_23;
Node_41 -> Node_32;
Node_40 -> Node_32;
Node_39 -> Node_33;
}

