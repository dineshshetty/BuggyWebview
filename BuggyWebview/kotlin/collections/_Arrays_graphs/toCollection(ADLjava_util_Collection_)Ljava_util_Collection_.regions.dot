digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.toCollection([DLjava\/util\/Collection;)Ljava\/util\/Collection;" {
subgraph cluster_Region_1368884587 {
label = "R(3:1|(1:3)|5)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"destination\")\lint r1 = 0\l\l}"];
subgraph cluster_LoopRegion_206495458 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000c|LOOP_START\lLOOP:0: B:10:0x000c\-\>B:11:0x000e\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:9:0x0000, B:11:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r0) goto L3\l}"];
subgraph cluster_Region_1924405872 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000e|LOOP_END\lLOOP:0: B:10:0x000c\-\>B:11:0x000e\l|r2 = r5[r1]\lr6.add(java.lang.Double.valueOf(r2))\lr1++\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x001a|RETURN\l|return r6\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x001a|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super java.lang.Double\> kotlin.collections.ArraysKt___ArraysKt.toCollection((r5v0 '$this$toCollection' double[] A[D('$this$toCollection' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'destination' C extends java.util.Collection\<? super java.lang.Double\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x000e \-\> B:10:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: [C extends java.util.Collection\<? super java.lang.Double\>]\lSIGNATURE: \<C::Ljava\/util\/Collection\<\-Ljava\/lang\/Double;\>;\>([DTC;)TC;\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_12 -> Node_8;
Node_7 -> Node_9;
Node_13 -> Node_12;
}

