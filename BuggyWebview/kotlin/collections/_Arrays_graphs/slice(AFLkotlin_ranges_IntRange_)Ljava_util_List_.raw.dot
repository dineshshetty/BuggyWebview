digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.slice([FLkotlin\/ranges\/IntRange;)Ljava\/util\/List;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$slice' float[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"indices\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('indices' kotlin.ranges.IntRange)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:boolean) = (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.isEmpty():boolean A[MD:():boolean (m)] (LINE:4435)\l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0015 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0010|0x0010: INVOKE  (r0 I:java.util.List) =  type: STATIC call: kotlin.collections.CollectionsKt.emptyList():java.util.List A[MD:\<T\>:():java.util.List\<T\> (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:java.util.List\<java.lang.Float\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0015|0x0015: INVOKE  (r0 I:java.lang.Integer) = (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getStart():java.lang.Integer A[MD:():java.lang.Integer (m)] (LINE:4436)\l0x0019: INVOKE  (r0 I:int) = (r0 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x001d: INVOKE  (r1 I:java.lang.Integer) = (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange)]) type: VIRTUAL call: kotlin.ranges.IntRange.getEndInclusive():java.lang.Integer A[MD:():java.lang.Integer (m)]\l0x0021: INVOKE  (r1 I:int) = (r1 I:java.lang.Integer) type: VIRTUAL call: java.lang.Integer.intValue():int A[MD:():int (c)]\l0x0025: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l0x0027: INVOKE  (r0 I:float[]) = (r2 I:float[] A[D('$this$slice' float[])]), (r0 I:int), (r1 I:int) type: STATIC call: kotlin.collections.ArraysKt.copyOfRange(float[], int, int):float[] A[MD:(float[], int, int):float[] (m)]\l0x002b: INVOKE  (r0 I:java.util.List) = (r0 I:float[]) type: STATIC call: kotlin.collections.ArraysKt.asList(float[]):java.util.List A[MD:(float[]):java.util.List\<java.lang.Float\> (m)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x002f|RETURN\l|0x002f: RETURN  (r0 I:java.util.List\<java.lang.Float\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Float\> kotlin.collections.ArraysKt___ArraysKt.slice((r2 I:float[] A[D('$this$slice' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:kotlin.ranges.IntRange A[D('indices' kotlin.ranges.IntRange), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:15:0x002f \-\> B:9:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002f: r2 '$this$slice' [F\l  \-1 \-0x002f: r3 'indices' Lkotlin\/ranges\/IntRange;\lSIGNATURE: ([FLkotlin\/ranges\/IntRange;)Ljava\/util\/List\<Ljava\/lang\/Float;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_14;
Node_12 -> Node_13;
Node_13 -> Node_9;
Node_14 -> Node_15;
Node_15 -> Node_9;
}

