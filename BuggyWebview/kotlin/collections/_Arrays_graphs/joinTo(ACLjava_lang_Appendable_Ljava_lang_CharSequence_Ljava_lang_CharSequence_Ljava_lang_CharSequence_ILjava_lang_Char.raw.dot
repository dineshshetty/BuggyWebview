digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.joinTo([CLjava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Appendable;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$joinTo' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"buffer\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('buffer' java.lang.Appendable)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"separator\" \l0x000c: INVOKE  (r7 I:java.lang.Object A[D('separator' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0011: INVOKE  (r8 I:java.lang.Object A[D('prefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0014: CONST_STR  (r0 I:java.lang.String) =  \"postfix\" \l0x0016: INVOKE  (r9 I:java.lang.Object A[D('postfix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0019: CONST_STR  (r0 I:java.lang.String) =  \"truncated\" \l0x001b: INVOKE  (r11 I:java.lang.Object A[D('truncated' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001e: INVOKE  \l  (r6 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r8 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)] (LINE:24071)\l0x0021: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:24072)\l0x0022: ARRAY_LENGTH  (r1 I:int) = (r5 I:??[] A[D('$this$joinTo' char[])])  (LINE:24073)\l0x0023: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x0024|LOOP_START\lLOOP:0: B:27:0x0024\-\>B:38:0x0049\l|0x0024: IF  (r2 I:??[int, byte, short, char]) \>= (r1 I:??[int, byte, short, char])  \-\> B:45:0x004c \l}"];
Node_28 [shape=record,label="{28\:\ 0x0026|0x0026: AGET  (r3 I:char A[IMMUTABLE_TYPE]) = (r5 I:char[] A[D('$this$joinTo' char[]), IMMUTABLE_TYPE]), (r2 I:??[int, short, byte, char]) \l0x0028: ARITH  (r0 I:int) = (r0 I:int A[D('count' int)]) + (1 int)  (LINE:24074)\l0x002a: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x002b|0x002b: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \<= (r4 I:??[int, byte, short, char])  \-\> B:31:0x0030 \l}"];
Node_30 [shape=record,label="{30\:\ 0x002d|0x002d: INVOKE  \l  (r6 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r7 I:java.lang.CharSequence A[D('separator' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0030|0x0030: IF  (r10 I:??[int, byte, short, char] A[D('limit' int)]) \< (0 ??[int, byte, short, char])  \-\> B:35:0x0036  (LINE:24075)\l}"];
Node_32 [shape=record,label="{32\:\ 0x0032|0x0032: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \> (r10 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:44:0x004c \l}"];
Node_44 [shape=record,label="{44\:\ 0x004c|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x004c|0x004c: IF  (r10 I:??[int, byte, short, char] A[D('limit' int)]) \< (0 ??[int, byte, short, char])  \-\> B:42:0x0053  (LINE:24082)\l}"];
Node_40 [shape=record,label="{40\:\ 0x004e|0x004e: IF  (r0 I:??[int, byte, short, char] A[D('count' int)]) \<= (r10 I:??[int, byte, short, char] A[D('limit' int)])  \-\> B:42:0x0053 \l}"];
Node_41 [shape=record,label="{41\:\ 0x0050|0x0050: INVOKE  \l  (r6 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r11 I:java.lang.CharSequence A[D('truncated' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0053|0x0053: INVOKE  \l  (r6 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)])\l  (r9 I:java.lang.CharSequence A[D('postfix' java.lang.CharSequence)])\l type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)] (LINE:24083)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0056|RETURN\l|0x0056: RETURN  (r6 I:A extends java.lang.Appendable A[D('buffer' java.lang.Appendable)])  (LINE:24084)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_35 [shape=record,label="{35\:\ 0x0036|0x0036: IF  (r12 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('transform' kotlin.jvm.functions.Function1)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0046  (LINE:24076)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0038|0x0038: INVOKE  (r4 I:java.lang.Character) = (r3 I:char A[D('element' char)]) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)] (LINE:24077)\l0x003c: INVOKE  (r4 I:java.lang.Object) = (r12 I:kotlin.jvm.functions.Function1 A[D('transform' kotlin.jvm.functions.Function1)]), (r4 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0040: CHECK_CAST (r4 I:java.lang.CharSequence) = (java.lang.CharSequence) (r4 I:??[OBJECT, ARRAY]) \l0x0042: INVOKE  (r6 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)]), (r4 I:java.lang.CharSequence) type: INTERFACE call: java.lang.Appendable.append(java.lang.CharSequence):java.lang.Appendable A[MD:(java.lang.CharSequence):java.lang.Appendable throws java.io.IOException (c)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0049|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0049|LOOP_END\lLOOP:0: B:27:0x0024\-\>B:38:0x0049\l|0x0049: ARITH  (r2 I:int) = (r2 I:int) + (1 int)  (LINE:24073)\l}"];
Node_37 [shape=record,label="{37\:\ 0x0046|0x0046: INVOKE  (r6 I:java.lang.Appendable A[D('buffer' java.lang.Appendable)]), (r3 I:char A[D('element' char)]) type: INTERFACE call: java.lang.Appendable.append(char):java.lang.Appendable A[MD:(char):java.lang.Appendable throws java.io.IOException (c)] (LINE:24079)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0049|SYNTHETIC\l}"];
Node_45 [shape=record,label="{45\:\ 0x004c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final A extends java.lang.Appendable kotlin.collections.ArraysKt___ArraysKt.joinTo((r5 I:char[] A[D('$this$joinTo' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:A extends java.lang.Appendable A[D('buffer' java.lang.Appendable), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:java.lang.CharSequence A[D('separator' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.CharSequence A[D('postfix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.CharSequence A[D('truncated' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, ? extends java.lang.CharSequence\> A[D('transform' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x0049 \-\> B:27:0x0024, CROSS_EDGE: B:37:0x0046 \-\> B:38:0x0049, CROSS_EDGE: B:40:0x004e \-\> B:42:0x0053, CROSS_EDGE: B:39:0x004c \-\> B:42:0x0053, CROSS_EDGE: B:31:0x0030 \-\> B:35:0x0036, CROSS_EDGE: B:29:0x002b \-\> B:31:0x0030, CROSS_EDGE: B:27:0x0024 \-\> B:39:0x004c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0028\-0x004c: r3 'element' C\l  0x0022\-0x0056: r0 'count' I\l  \-1 \-0x0056: r5 '$this$joinTo' [C\l  \-1 \-0x0056: r6 'buffer' Ljava\/lang\/Appendable;\l  \-1 \-0x0056: r7 'separator' Ljava\/lang\/CharSequence;\l  \-1 \-0x0056: r8 'prefix' Ljava\/lang\/CharSequence;\l  \-1 \-0x0056: r9 'postfix' Ljava\/lang\/CharSequence;\l  \-1 \-0x0056: r10 'limit' I\l  \-1 \-0x0056: r11 'truncated' Ljava\/lang\/CharSequence;\l  \-1 \-0x0056: r12 'transform' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [A extends java.lang.Appendable]\lSIGNATURE: \<A::Ljava\/lang\/Appendable;\>([CTA;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;+Ljava\/lang\/CharSequence;\>;)TA;\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_45;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_35;
Node_32 -> Node_35[style=dashed];
Node_32 -> Node_44;
Node_44 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_42;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_42;
Node_41 -> Node_42;
Node_42 -> Node_43;
Node_43 -> Node_25;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_37;
Node_36 -> Node_47;
Node_47 -> Node_38;
Node_38 -> Node_27;
Node_37 -> Node_46;
Node_46 -> Node_38;
Node_45 -> Node_39;
}

