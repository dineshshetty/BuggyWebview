digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.count([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)I" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$count' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:12868)\l0x000c: ARRAY_LENGTH  (r2 I:int) = (r6 I:??[] A[D('$this$count' java.lang.Object[])])  (LINE:12869)\l0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x000e|LOOP_START\lLOOP:0: B:15:0x000e\-\>B:19:0x0020\l|0x000e: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:21:0x0023 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0010|0x0010: AGET  (r4 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][] A[D('$this$count' java.lang.Object[])]), (r3 I:??[int, short, byte, char]) \l0x0012: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0016: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x001c|0x001c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:23:0x0020 \l}"];
Node_18 [shape=record,label="{18\:\ 0x001e|0x001e: ARITH  (r1 I:int) = (r1 I:int A[D('count' int)]) + (1 int) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0020|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0020|LOOP_END\lLOOP:0: B:15:0x000e\-\>B:19:0x0020\l|0x0020: ARITH  (r3 I:int) = (r3 I:int) + (1 int) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0020|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0023|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0023|RETURN\l|0x0023: RETURN  (r1 I:int A[D('count' int)])  (LINE:12870)\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.ArraysKt___ArraysKt.count((r6 I:T[] A[D('$this$count' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0020 \-\> B:15:0x000e, CROSS_EDGE: B:17:0x001c \-\> B:19:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0023: r4 'element' Ljava\/lang\/Object;\l  0x000b\-0x0023: r0 '$i$f$count' I\l  0x000c\-0x0023: r1 'count' I\l  \-1 \-0x0023: r6 '$this$count' [Ljava\/lang\/Object;\l  \-1 \-0x0023: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)I\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_22;
Node_22 -> Node_19;
Node_19 -> Node_15;
Node_23 -> Node_19;
Node_21 -> Node_20;
Node_20 -> Node_13;
}

