digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.fold([SLjava\/lang\/Object;Lkotlin\/jvm\/functions\/Function2;)Ljava\/lang\/Object;" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"operation\")\lr1 = (R) r7\lint r2 = r6.length\lr3 = 0\l}"];
Node_10 [shape=record,label="{10\:\ 0x000e|LOOP_START\lLOOP:0: B:10:0x000e\-\>B:11:0x0010\lPHI: r1 r3 \l  PHI: (r1v1 'accumulator' java.lang.Object) = (r1v0 'accumulator' java.lang.Object), (r1v2 'accumulator' java.lang.Object) binds: [B:9:0x0000, B:11:0x0010] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:9:0x0000, B:11:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L4\l}"];
Node_11 [shape=record,label="{11\:\ 0x0010|LOOP_END\lLOOP:0: B:10:0x000e\-\>B:11:0x0010\l|short r4 = r6[r3]\ljava.lang.Object r1 = r1\ljava.lang.Object r1 = (R) r8.invoke(r1, java.lang.Short.valueOf(r4))\lint r3 = r3 + 1\l}"];
Node_13 [shape=record,label="{13\:\ 0x001d|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|RETURN\l|return (R) r1\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final R kotlin.collections.ArraysKt___ArraysKt.fold((r6v0 '$this$fold' short[] A[D('$this$fold' short[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 R A[D('initial' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'operation' kotlin.jvm.functions.Function2\<? super R, ? super java.lang.Short, ? extends R\> A[D('operation' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0010 \-\> B:10:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [R]\lSIGNATURE: \<R:Ljava\/lang\/Object;\>([STR;Lkotlin\/jvm\/functions\/Function2\<\-TR;\-Ljava\/lang\/Short;+TR;\>;)TR;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Type inference failed for r1v5. Raw type applied. Possible types: R, ? super R\}\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_10;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

