digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sumBy([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$sumBy' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"selector\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('selector' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:22012)\l0x000c: ARRAY_LENGTH  (r2 I:int) = (r6 I:??[] A[D('$this$sumBy' java.lang.Object[])])  (LINE:22013)\l0x000d: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_10 [shape=record,label="{10\:\ 0x000e|LOOP_START\lLOOP:0: B:10:0x000e\-\>B:11:0x0010\l|0x000e: IF  (r3 I:??[int, byte, short, char]) \>= (r2 I:??[int, byte, short, char])  \-\> B:13:0x0020 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0010|LOOP_END\lLOOP:0: B:10:0x000e\-\>B:11:0x0010\l|0x0010: AGET  (r4 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY][] A[D('$this$sumBy' java.lang.Object[])]), (r3 I:??[int, short, byte, char]) \l0x0012: INVOKE  (r5 I:java.lang.Object) = \l  (r7 I:kotlin.jvm.functions.Function1 A[D('selector' kotlin.jvm.functions.Function1)])\l  (r4 I:java.lang.Object A[D('element' java.lang.Object)])\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)] (LINE:22014)\l0x0016: CHECK_CAST (r5 I:java.lang.Number) = (java.lang.Number) (r5 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r5 I:int) = (r5 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x001c: ARITH  (r1 I:int) = (r1 I:int A[D('sum' int)]) + (r5 I:int) \l0x001d: ARITH  (r3 I:int) = (r3 I:int) + (1 int)  (LINE:22013)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0020|SYNTHETIC\l}"];
Node_12 [shape=record,label="{12\:\ 0x0020|RETURN\l|0x0020: RETURN  (r1 I:int A[D('sum' int)])  (LINE:22016)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final int kotlin.collections.ArraysKt___ArraysKt.sumBy((r6 I:T[] A[D('$this$sumBy' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super T, java.lang.Integer\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=Use sumOf instead., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=this.sumOf(selector), imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{warningSince=1.5\}\}\}\lINLINE_NOT_NEEDED\lBACK_EDGE: B:11:0x0010 \-\> B:10:0x000e\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Integer;\>;)I\lDebug Info:\l  0x0012\-0x0020: r4 'element' Ljava\/lang\/Object;\l  0x000b\-0x0020: r0 '$i$f$sumBy' I\l  0x000c\-0x0020: r1 'sum' I\l  \-1 \-0x0020: r6 '$this$sumBy' [Ljava\/lang\/Object;\l  \-1 \-0x0020: r7 'selector' Lkotlin\/jvm\/functions\/Function1;\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_13;
Node_11 -> Node_10;
Node_13 -> Node_12;
Node_12 -> Node_8;
}

