digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.last([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/Object;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"predicate\")\lint r1 = r5.length + (\-1)\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|if (r1 \< 0) goto L10\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|LOOP_START\lLOOP:0: B:17:0x0010\-\>B:20:0x0022\lPHI: r1 \l  PHI: (r1v3 int) = (r1v1 int), (r1v4 int) binds: [B:16:0x000e, B:20:0x0022] A[DONT_GENERATE, DONT_INLINE]\l|r2 = r1\lint r1 = r1 + (\-1)\lr3 = r5[r2]\l}"];
Node_18 [shape=record,label="{18\:\ 0x001f|if (r6.invoke(r3).booleanValue() == false) goto L5\l}"];
Node_20 [shape=record,label="{20\:\ 0x0022|LOOP_END\lLOOP:0: B:17:0x0010\-\>B:20:0x0022\l|if (r1 \< 0) goto L6\l}"];
Node_24 [shape=record,label="{24\:\ 0x0025|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x0021|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|RETURN\l|return r3\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0025}"];
Node_23 [shape=record,label="{23\:\ 0x002c|throw new java.util.NoSuchElementException(\"Array contains no element matching the predicate.\")\l}"];
MethodNode[shape=record,label="{public static final T kotlin.collections.ArraysKt___ArraysKt.last((r5v0 T[] A[D('$this$last' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'predicate' kotlin.jvm.functions.Function1\<? super T, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x002c \-\> B:14:?, BACK_EDGE: B:20:0x0022 \-\> B:17:0x0010, CROSS_EDGE: B:16:0x000e \-\> B:22:0x0025\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;Ljava\/lang\/Boolean;\>;)TT;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_22;
Node_17 -> Node_18;
Node_18 -> Node_20;
Node_18 -> Node_25[style=dashed];
Node_20 -> Node_17[style=dashed];
Node_20 -> Node_24;
Node_24 -> Node_22;
Node_25 -> Node_19;
Node_19 -> Node_14;
Node_22 -> Node_23;
Node_23 -> Node_14;
}

