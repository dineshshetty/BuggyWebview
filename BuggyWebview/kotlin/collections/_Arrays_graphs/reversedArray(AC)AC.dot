digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.reversedArray([C)[C" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\l}"];
Node_17 [shape=record,label="{17\:\ 0x0007|if (r6.length != 0) goto L13\l}"];
Node_18 [shape=record,label="{18\:\ 0x0009|r0 = true\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|PHI: r0 \l  PHI: (r0v3 boolean) = (r0v2 boolean), (r0v6 boolean) binds: [B:19:0x000b, B:18:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L7\l}"];
Node_21 [shape=record,label="{21\:\ 0x000e|RETURN\l|return r6\l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|char[] r0 = new char[r6.length]\lint r2 = kotlin.collections.ArraysKt.getLastIndex(r6)\lkotlin.collections.IntIterator r1 = new kotlin.ranges.IntRange(0, r2).iterator()\l}"];
Node_23 [shape=record,label="{23\:\ 0x001f|LOOP_START\lLOOP:0: B:23:0x001f\-\>B:25:0x0025\l}"];
Node_24 [shape=record,label="{24\:\ 0x0023|if (r1.hasNext() == false) goto L11\l}"];
Node_25 [shape=record,label="{25\:\ 0x0025|LOOP_END\lLOOP:0: B:23:0x001f\-\>B:25:0x0025\l|int r3 = r1.nextInt()\lr0[r2 \- r3] = r6[r3]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0030|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0030|RETURN\l|return r0\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|r0 = false\l}"];
MethodNode[shape=record,label="{public static final char[] kotlin.collections.ArraysKt___ArraysKt.reversedArray((r6v0 '$this$reversedArray' char[] A[D('$this$reversedArray' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:25:0x0025 \-\> B:23:0x001f, CROSS_EDGE: B:26:0x0030 \-\> B:15:?, CROSS_EDGE: B:19:0x000b \-\> B:20:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r1v1, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_15;
Node_22 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_27;
Node_25 -> Node_23;
Node_27 -> Node_26;
Node_26 -> Node_15;
Node_19 -> Node_20;
}

