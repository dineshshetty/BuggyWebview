digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.filterIndexed([DLkotlin\/jvm\/functions\/Function2;)Ljava\/util\/List;" {
Node_13 [shape=record,label="{13\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_15 [shape=record,label="{15\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY] A[D('predicate' kotlin.jvm.functions.Function2)]) \l0x0002: CONST_STR  (r1 I:java.lang.String) =  \"\<this\>\" \l0x0004: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY] A[D('$this$filterIndexed' double[])]) \l0x0006: INVOKE  (r2 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"predicate\" \l0x000b: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000e: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: NEW_INSTANCE  (r3 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:3941)\l0x0011: INVOKE  (r3 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x0014: CHECK_CAST (r3 I:java.util.Collection) = (java.util.Collection) (r3 I:??[OBJECT, ARRAY]) \l0x0016: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY] A[D('$this$filterIndexed' double[])]) \l0x0018: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0019: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$filterIndexedTo$iv' double[])])  (LINE:24786)\l0x001a: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:24787)\l0x001c: ARRAY_LENGTH  (r9 I:int) = (r6 I:??[] A[D('$this$forEachIndexed$iv$iv' double[])])  (LINE:24788)\l0x001d: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_16 [shape=record,label="{16\:\ 0x001e|LOOP_START\lLOOP:0: B:16:0x001e\-\>B:20:0x0044\l|0x001e: IF  (r10 I:??[int, byte, short, char]) \>= (r9 I:??[int, byte, short, char])  \-\> B:23:0x004d \l}"];
Node_17 [shape=record,label="{17\:\ 0x0020|0x0020: AGET  (r11 I:??[long, double]) = (r6 I:??[long, double][] A[D('$this$forEachIndexed$iv$iv' double[])]), (r10 I:??[int, short, byte, char]) \l0x0022: ARITH  (r13 I:int) = (r8 I:int A[D('index$iv$iv' int)]) + (1 int) \l0x0024: MOVE  (r14 I:??[long, double]) = (r11 I:??[long, double] A[D('item$iv$iv' double)]) \l0x0025: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$filterIndexed' int)])  (LINE:24789)\l0x0029: INVOKE  (r1 I:java.lang.Integer) = (r8 I:int A[D('index$iv' int)]) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x002d: INVOKE  (r2 I:java.lang.Double) = (r14 I:double A[D('element$iv' double)]) type: STATIC call: java.lang.Double.valueOf(double):java.lang.Double A[MD:(double):java.lang.Double (c)]\l0x0031: INVOKE  (r1 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function2), (r1 I:java.lang.Object), (r2 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function2.invoke(java.lang.Object, java.lang.Object):java.lang.Object A[MD:(P1, P2):R (m)]\l0x0035: CHECK_CAST (r1 I:java.lang.Boolean) = (java.lang.Boolean) (r1 I:??[OBJECT, ARRAY]) \l0x0037: INVOKE  (r1 I:boolean) = (r1 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_18 [shape=record,label="{18\:\ 0x003b|0x003b: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0044 \l}"];
Node_19 [shape=record,label="{19\:\ 0x003d|0x003d: INVOKE  (r1 I:java.lang.Double) = (r14 I:double A[D('element$iv' double)]) type: STATIC call: java.lang.Double.valueOf(double):java.lang.Double A[MD:(double):java.lang.Double (c)]\l0x0041: INVOKE  (r3 I:java.util.Collection A[D('destination$iv' java.util.Collection)]), (r1 I:java.lang.Object) type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_24 [shape=record,label="{24\:\ 0x0044|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0044|LOOP_END\lLOOP:0: B:16:0x001e\-\>B:20:0x0044\l|0x0045: ARITH  (r10 I:int) = (r10 I:int) + (1 int) \l0x0047: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r18 I:??[OBJECT, ARRAY] A[D('$this$filterIndexed' double[])]) \l0x0049: MOVE  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv' int)]) \l0x004a: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$filterIndexed' int)]) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0044|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x004d|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x004d|0x004d: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$filterIndexed' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$filterIndexed' int)])  (LINE:24791)\l0x0050: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('destination$iv' java.util.Collection)]) \l0x0051: CHECK_CAST (r1 I:java.util.List) = (java.util.List) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0053|RETURN\l|0x0053: RETURN  (r1 I:java.util.List\<java.lang.Double\>)  (LINE:3941)\l}"];
Node_14 [shape=record,label="{14\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.Double\> kotlin.collections.ArraysKt___ArraysKt.filterIndexed((r18 I:double[] A[D('$this$filterIndexed' double[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r19 I:kotlin.jvm.functions.Function2\<? super java.lang.Integer, ? super java.lang.Double, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function2), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:20:0x0044 \-\> B:16:0x001e, CROSS_EDGE: B:18:0x003b \-\> B:20:0x0044\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001c\-0x0024: r8 'index$iv$iv' I\l  0x000f\-0x0029: r1 '$i$f$filterIndexed' I\l  0x0024\-0x0045: r8 'index$iv' I\l  0x0025\-0x0045: r14 'element$iv' D\l  0x0027\-0x0045: r16 '$i$a$\-forEachIndexed\-ArraysKt___ArraysKt$filterIndexedTo$7$iv' I\l  0x0022\-0x004d: r11 'item$iv$iv' D\l  0x0024\-0x004d: r13 'index$iv$iv' I\l  0x0029\-0x004d: r17 '$i$f$filterIndexed' I\l  0x004d\-0x004f: r1 '$i$f$filterIndexed' I\l  0x001a\-0x004f: r6 '$this$forEachIndexed$iv$iv' [D\l  0x001b\-0x004f: r7 '$i$f$forEachIndexed' I\l  0x004d\-0x004f: r8 'index$iv$iv' I\l  0x0016\-0x0050: r3 'destination$iv' Ljava\/util\/Collection;\l  0x0018\-0x0050: r4 '$this$filterIndexedTo$iv' [D\l  0x0019\-0x0050: r5 '$i$f$filterIndexedTo' I\l  0x004f\-0x0053: r17 '$i$f$filterIndexed' I\l  \-1 \-0x0053: r18 '$this$filterIndexed' [D\l  \-1 \-0x0053: r19 'predicate' Lkotlin\/jvm\/functions\/Function2;\lSIGNATURE: ([DLkotlin\/jvm\/functions\/Function2\<\-Ljava\/lang\/Integer;\-Ljava\/lang\/Double;Ljava\/lang\/Boolean;\>;)Ljava\/util\/List\<Ljava\/lang\/Double;\>;\l}"];
MethodNode -> Node_13;Node_13 -> Node_15;
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_23;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_25;
Node_19 -> Node_24;
Node_24 -> Node_20;
Node_20 -> Node_16;
Node_25 -> Node_20;
Node_23 -> Node_21;
Node_21 -> Node_22;
Node_22 -> Node_14;
}

