digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sortByDescending([Ljava\/lang\/Object;Lkotlin\/jvm\/functions\/Function1;)V" {
subgraph cluster_Region_2106744079 {
label = "R(2:1|(1:(1:3)))";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"selector\")\l}"];
subgraph cluster_Region_1421226523 {
label = "R(1:(1:3))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1930365436 {
label = "IF [B:10:0x000d] THEN: R(1:3) ELSE: null";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000d|if (r3.length \> 1) goto L3\l}"];
subgraph cluster_Region_982589799 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x000f|kotlin.collections.ArraysKt.sortWith(r3, new kotlin.comparisons.ComparisonsKt__ComparisonsKt$compareByDescending$1(r4))\l}"];
}
}
}
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x0019|ORIG_RETURN\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final void kotlin.collections.ArraysKt___ArraysKt.sortByDescending((r3v0 T[] A[D('$this$sortByDescending' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'selector' kotlin.jvm.functions.Function1\<? super T, ? extends R extends java.lang.Comparable\<? super R\>\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x000d \-\> B:12:0x0019\lINLINE_NOT_NEEDED\lTYPE_VARS: [R extends java.lang.Comparable\<? super R\>, T]\lSIGNATURE: \<T:Ljava\/lang\/Object;R::Ljava\/lang\/Comparable\<\-TR;\>;\>([TT;Lkotlin\/jvm\/functions\/Function1\<\-TT;+TR;\>;)V\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_12;
Node_7 -> Node_9;
Node_12 -> Node_8;
Node_13 -> Node_8;
}

