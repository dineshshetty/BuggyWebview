digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.filterNotNullTo([Ljava\/lang\/Object;Ljava\/util\/Collection;)Ljava\/util\/Collection;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"destination\")\lint r0 = r3.length\lr1 = 0\l}"];
Node_15 [shape=record,label="{15\:\ 0x000c|LOOP_START\lLOOP:0: B:15:0x000c\-\>B:19:0x0015\lPHI: r1 \l  PHI: (r1v1 int) = (r1v0 int), (r1v2 int) binds: [B:14:0x0000, B:19:0x0015] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L9\l}"];
Node_16 [shape=record,label="{16\:\ 0x000e|r2 = r3[r1]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0010|if (r2 == null) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x0012|r4.add(r2)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0015|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0015|LOOP_END\lLOOP:0: B:15:0x000c\-\>B:19:0x0015\l|int r1 = r1 + 1\l}"];
Node_23 [shape=record,label="{23\:\ 0x0015|SYNTHETIC\l}"];
Node_21 [shape=record,label="{21\:\ 0x0018|SYNTHETIC\l}"];
Node_20 [shape=record,label="{20\:\ 0x0018|RETURN\l|return r4\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final C extends java.util.Collection\<? super T\> kotlin.collections.ArraysKt___ArraysKt.filterNotNullTo((r3v0 T[] A[D('$this$filterNotNullTo' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'destination' C extends java.util.Collection\<? super T\> A[D('destination' java.util.Collection), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:19:0x0015 \-\> B:15:0x000c, CROSS_EDGE: B:17:0x0010 \-\> B:19:0x0015\lINLINE_NOT_NEEDED\lTYPE_VARS: [C extends java.util.Collection\<? super T\>, T]\lSIGNATURE: \<C::Ljava\/util\/Collection\<\-TT;\>;T:Ljava\/lang\/Object;\>([TT;TC;)TC;\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_21;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_23;
Node_18 -> Node_22;
Node_22 -> Node_19;
Node_19 -> Node_15;
Node_23 -> Node_19;
Node_21 -> Node_20;
Node_20 -> Node_13;
}

