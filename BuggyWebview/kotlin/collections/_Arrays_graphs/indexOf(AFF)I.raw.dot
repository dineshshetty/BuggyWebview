digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.indexOf([FF)I" {
Node_15 [shape=record,label="{15\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_17 [shape=record,label="{17\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$indexOf' float[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1577)\l0x0006: ARRAY_LENGTH  (r1 I:int) = (r3 I:??[] A[D('$this$indexOf' float[])]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x0007|LOOP_START\lLOOP:0: B:18:0x0007\-\>B:25:0x0015\l|0x0007: IF  (r0 I:??[int, byte, short, char] A[D('index' int)]) \>= (r1 I:??[int, byte, short, char])  \-\> B:29:0x0018 \l}"];
Node_19 [shape=record,label="{19\:\ 0x0009|0x0009: AGET  (r2 I:??[int, float, short, byte, char]) = (r3 I:??[int, float][] A[D('$this$indexOf' float[])]), (r0 I:??[int, short, byte, char] A[D('index' int)])  (LINE:1578)\l0x000b: CMP_G  (r2 I:int) = (r4 I:float A[D('element' float)]), (r2 I:float) \l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0011 \l}"];
Node_21 [shape=record,label="{21\:\ 0x000f|0x000f: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0012|0x0012: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0015 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0015|LOOP_END\lLOOP:0: B:18:0x0007\-\>B:25:0x0015\l|0x0015: ARITH  (r0 I:int) = (r0 I:int A[D('index' int)]) + (1 int)  (LINE:1577)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0014|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x0014|RETURN\l|0x0014: RETURN  (r0 I:int A[D('index' int)])  (LINE:1579)\l}"];
Node_16 [shape=record,label="{16\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0011|0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0018|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0018|RETURN\l|0x0018: CONST  (r0 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:1582)\l0x0019: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static final \/* synthetic *\/ int kotlin.collections.ArraysKt___ArraysKt.indexOf((r3 I:float[] A[D('$this$indexOf' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:float A[D('element' float), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\l\{Lkotlin\/Deprecated;=Annotation\{RUNTIME, type=Lkotlin\/Deprecated;, values=\{message=The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst \{ it == element \}' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list., replaceWith=\{ENCODED_ANNOTATION: Annotation\{null, type=Lkotlin\/ReplaceWith;, values=\{expression=indexOfFirst \{ it == element \}, imports=[[]]\}\}\}\}\}, Lkotlin\/DeprecatedSinceKotlin;=Annotation\{RUNTIME, type=Lkotlin\/DeprecatedSinceKotlin;, values=\{errorSince=1.6, hiddenSince=1.7, warningSince=1.4\}\}\}\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0006\-0x0018: r0 'index' I\l  \-1 \-0x0019: r3 '$this$indexOf' [F\l  \-1 \-0x0019: r4 'element' F\lBACK_EDGE: B:25:0x0015 \-\> B:18:0x0007, CROSS_EDGE: B:22:0x0011 \-\> B:23:0x0012, CROSS_EDGE: B:27:0x0019 \-\> B:16:?\l}"];
MethodNode -> Node_15;Node_15 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_29;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_25;
Node_23 -> Node_28[style=dashed];
Node_25 -> Node_18;
Node_28 -> Node_24;
Node_24 -> Node_16;
Node_22 -> Node_23;
Node_29 -> Node_26;
Node_26 -> Node_16;
}

