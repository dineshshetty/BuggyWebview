digraph "CFG forkotlin.collections.ArraysKt___ArraysKt.sumOfLong([FLkotlin\/jvm\/functions\/Function1;)J" {
subgraph cluster_Region_1232391430 {
label = "R(3:1|(1:3)|5)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"selector\")\llong r0 = 0\lint r3 = 0\l\l}"];
subgraph cluster_LoopRegion_888987672 {
label = "LOOP:0: (1:3)";
node [shape=record,color=blue];
Node_10 [shape=record,label="{10\:\ 0x000e|LOOP_START\lLOOP:0: B:10:0x000e\-\>B:11:0x0010\lPHI: r0 r3 \l  PHI: (r0v3 'sum' long) = (r0v2 'sum' long), (r0v4 'sum' long) binds: [B:9:0x0000, B:11:0x0010] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 int) = (r3v0 int), (r3v2 int) binds: [B:9:0x0000, B:11:0x0010] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \< r2) goto L3\l}"];
subgraph cluster_Region_44233112 {
label = "R(1:3)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0010|LOOP_END\lLOOP:0: B:10:0x000e\-\>B:11:0x0010\l|r4 = r7[r3]\lr0 += r8.invoke(java.lang.Float.valueOf(r4)).longValue()\lr3++\l}"];
}
}
Node_12 [shape=record,label="{12\:\ 0x0024|RETURN\l|return r0\l}"];
}
Node_7 [shape=record,color=red,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0024|SYNTHETIC\l}"];
Node_8 [shape=record,color=red,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final long kotlin.collections.ArraysKt___ArraysKt.sumOfLong((r7v0 '$this$sumOf' float[] A[D('$this$sumOf' float[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'selector' kotlin.jvm.functions.Function1\<? super java.lang.Float, java.lang.Long\> A[D('selector' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:11:0x0010 \-\> B:10:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ([FLkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Float;Ljava\/lang\/Long;\>;)J\l}"];
MethodNode -> Node_7;Node_9 -> Node_10;
Node_10 -> Node_11;
Node_10 -> Node_13[style=dashed];
Node_11 -> Node_10;
Node_12 -> Node_8;
Node_7 -> Node_9;
Node_13 -> Node_12;
}

