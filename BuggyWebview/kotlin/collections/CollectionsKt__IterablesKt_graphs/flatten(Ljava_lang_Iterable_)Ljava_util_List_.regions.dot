digraph "CFG forkotlin.collections.CollectionsKt__IterablesKt.flatten(Ljava\/lang\/Iterable;)Ljava\/util\/List;" {
subgraph cluster_Region_580761126 {
label = "R(3:1|(1:4)|7)";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\ljava.util.ArrayList java.util.ArrayList r0 = new java.util.ArrayList()\ljava.util.Iterator r1 = r4.iterator()\l\l}"];
subgraph cluster_LoopRegion_366508597 {
label = "LOOP:0: (1:4)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0012|java.lang.Iterable \lif (r1.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_912804325 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0014|LOOP_END\lLOOP:0: B:12:0x000e\-\>B:14:0x0014\l|java.lang.Iterable r2 = r1.next()\lkotlin.collections.CollectionsKt.addAll(r0, r2)\l}"];
}
}
Node_16 [shape=record,label="{16\:\ 0x0024|RETURN\l|return r0\l}"];
}
Node_9 [shape=record,color=red,label="{9\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_12 [shape=record,color=red,label="{12\:\ 0x000e|LOOP_START\lLOOP:0: B:12:0x000e\-\>B:14:0x0014\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x0021|SYNTHETIC\l}"];
Node_15 [shape=record,color=red,label="{15\:\ 0x0021}"];
Node_10 [shape=record,color=red,label="{10\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<T\> kotlin.collections.CollectionsKt__IterablesKt.flatten((r4v0 java.lang.Iterable\<? extends java.lang.Iterable\<? extends T\>\> A[D('$this$flatten' java.lang.Iterable), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:14:0x0014 \-\> B:12:0x000e\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>(Ljava\/lang\/Iterable\<+Ljava\/lang\/Iterable\<+TT;\>;\>;)Ljava\/util\/List\<TT;\>;\l}"];
MethodNode -> Node_9;Node_11 -> Node_12;
Node_13 -> Node_14;
Node_13 -> Node_17[style=dashed];
Node_14 -> Node_12;
Node_16 -> Node_10;
Node_9 -> Node_11;
Node_12 -> Node_13;
Node_17 -> Node_15;
Node_15 -> Node_16;
}

