digraph "CFG forkotlin.collections.RingBuffer.\<init\>([Ljava\/lang\/Object;I)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"buffer\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('buffer' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r3 I:kotlin.collections.AbstractList) type: DIRECT call: kotlin.collections.AbstractList.\<init\>():void A[MD:():void (m)] (LINE:89)\l0x0008: IPUT  (r4 I:java.lang.Object[] A[D('buffer' java.lang.Object[])]), (r3 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.buffer java.lang.Object[] \l0x000b: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:91)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|0x000d: IF  (r5 I:??[int, byte, short, char] A[D('filledSize' int)]) \< (0 ??[int, byte, short, char])  \-\> B:23:0x0011 \l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|0x000f: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|0x0012: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0047 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0014|0x0014: ARRAY_LENGTH  (r2 I:int) = (r4 I:??[] A[D('buffer' java.lang.Object[])])  (LINE:92)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0015|0x0015: IF  (r5 I:??[int, byte, short, char] A[D('filledSize' int)]) \> (r2 I:??[int, byte, short, char])  \-\> B:28:0x0018 \l}"];
Node_28 [shape=record,label="{28\:\ 0x0018|0x0018: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x0019|0x0019: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0022 \l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|0x001c: ARRAY_LENGTH  (r0 I:int) = (r4 I:??[] A[D('buffer' java.lang.Object[])])  (LINE:97)\l0x001d: IPUT  (r0 I:int), (r3 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.capacity int \l0x001f: IPUT  (r5 I:int A[D('filledSize' int)]), (r3 I:kotlin.collections.RingBuffer) kotlin.collections.RingBuffer.size int  (LINE:100)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0021|RETURN\l|0x0021: RETURN    (LINE:89)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0022|0x0022: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:208)\l0x0023: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:92)\l0x0025: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0028: CONST_STR  (r2 I:java.lang.String) =  \"ring buffer filled size: \" \l0x002a: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002d: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('filledSize' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0030: CONST_STR  (r2 I:java.lang.String) =  \" cannot be larger than the buffer size: \" \l0x0032: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0035: ARRAY_LENGTH  (r2 I:int) = (r4 I:??[] A[D('buffer' java.lang.Object[])]) \l0x0036: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0039: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-RingBuffer$2' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003d: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x003f: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0043: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0046|0x0046: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0047|0x0047: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:208)\l0x0048: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:91)\l0x004a: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x004d: CONST_STR  (r2 I:java.lang.String) =  \"ring buffer filled size should not be negative but it is \" \l0x004f: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0052: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('filledSize' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0055: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-RingBuffer$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0059: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x005b: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x005f: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0062|0x0062: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public void kotlin.collections.RingBuffer.\<init\>((r3 'this' I:kotlin.collections.RingBuffer\<T\> A[IMMUTABLE_TYPE, THIS]), (r4 I:java.lang.Object[] A[D('buffer' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('filledSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0046 \-\> B:19:?, CROSS_EDGE: B:26:0x0015 \-\> B:29:0x0019, CROSS_EDGE: B:35:0x0062 \-\> B:19:?, CROSS_EDGE: B:23:0x0011 \-\> B:24:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0023\-0x003d: r0 '$i$a$\-require\-RingBuffer$2' I\l  0x0048\-0x0059: r0 '$i$a$\-require\-RingBuffer$1' I\l  \-1 \-0x0062: r4 'buffer' [Ljava\/lang\/Object;\l  \-1 \-0x0062: r5 'filledSize' I\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_34;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_29[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_23 -> Node_24;
}

