digraph "CFG forkotlin.collections.RingBuffer.toArray([Ljava\/lang\/Object;)[Ljava\/lang\/Object;" {
Node_22 [shape=record,label="{22\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"array\")\l}"];
Node_25 [shape=record,label="{25\:\ 0x000a|if (r7.length \>= size()) goto L21\l}"];
Node_26 [shape=record,label="{26\:\ 0x000c|java.lang.Object[] r0 = (T[]) java.util.Arrays.copyOf(r7, size())\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"copyOf(this, newSize)\")\l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|PHI: r0 \l  PHI: (r0v3 'result' java.lang.Object[]) = (r0v2 'result' java.lang.Object[]), (r0v5 'result' java.lang.Object[]) binds: [B:27:0x001a, B:26:0x000c] A[DONT_GENERATE, DONT_INLINE]\l|int r1 = size()\lr2 = 0\lint r3 = r6.startIndex\l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|LOOP_START\lLOOP:0: B:29:0x0023\-\>B:32:0x0029\lPHI: r2 r3 \l  PHI: (r2v1 'widx' int) = (r2v0 'widx' int), (r2v4 'widx' int) binds: [B:28:0x001b, B:32:0x0029] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'idx' int) = (r3v0 'idx' int), (r3v5 'idx' int) binds: [B:28:0x001b, B:32:0x0029] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L20\l}"];
Node_30 [shape=record,label="{30\:\ 0x0025}"];
Node_31 [shape=record,label="{31\:\ 0x0027|if (r3 \>= r6.capacity) goto L9\l}"];
Node_32 [shape=record,label="{32\:\ 0x0029|LOOP_END\lLOOP:0: B:29:0x0023\-\>B:32:0x0029\l|r0 = r0\lr0[r2] = r6.buffer[r3]\lint r2 = r2 + 1\lint r3 = r3 + 1\l}"];
Node_42 [shape=record,label="{42\:\ 0x0034|SYNTHETIC\l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|r3 = 0\l}"];
Node_34 [shape=record,label="{34\:\ 0x0035|LOOP_START\lLOOP:1: B:34:0x0035\-\>B:35:0x0037\lPHI: r2 r3 \l  PHI: (r2v2 'widx' int) = (r2v1 'widx' int), (r2v3 'widx' int) binds: [B:33:0x0034, B:35:0x0037] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 'idx' int) = (r3v2 'idx' int), (r3v4 'idx' int) binds: [B:33:0x0034, B:35:0x0037] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \>= r1) goto L13\l}"];
Node_35 [shape=record,label="{35\:\ 0x0037|LOOP_END\lLOOP:1: B:34:0x0035\-\>B:35:0x0037\l|r0 = r0\lr0[r2] = r6.buffer[r3]\lint r2 = r2 + 1\lint r3 = r3 + 1\l}"];
Node_43 [shape=record,label="{43\:\ 0x0042|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0042}"];
Node_37 [shape=record,label="{37\:\ 0x0047|if (r0.length \<= size()) goto L17\l}"];
Node_38 [shape=record,label="{38\:\ 0x0049|r0 = r0\lr0[size()] = null\l}"];
Node_39 [shape=record,label="{39\:\ 0x0050|kotlin.jvm.internal.Intrinsics.checkNotNull(r0, \"null cannot be cast to non\-null type kotlin.Array\<T of kotlin.collections.RingBuffer.toArray\>\")\l}"];
Node_40 [shape=record,label="{40\:\ 0x0055|RETURN\l|return (T[]) r0\l}"];
Node_23 [shape=record,label="{23\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0034|SYNTHETIC\l}"];
Node_27 [shape=record,label="{27\:\ 0x001a|r0 = (T[]) r7\l}"];
MethodNode[shape=record,label="{public T[] kotlin.collections.RingBuffer.toArray((r6v0 'this' kotlin.collections.RingBuffer\<T\> A[IMMUTABLE_TYPE, THIS]), (r7v0 'array' T[] A[D('array' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | DONT_RENAME\lUSE_LINES_HINTS\lBACK_EDGE: B:32:0x0029 \-\> B:29:0x0023, BACK_EDGE: B:35:0x0037 \-\> B:34:0x0035, CROSS_EDGE: B:37:0x0047 \-\> B:39:0x0050, CROSS_EDGE: B:29:0x0023 \-\> B:33:0x0034, CROSS_EDGE: B:27:0x001a \-\> B:28:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;)[TT;\lJadxCommentsAttr\{\l WARN: \l \-\> Multi\-variable type inference failed\l DEBUG: \l \-\> Multi\-variable search result rejected for r0v11, resolved type: T[]\l \-\> Multi\-variable search result rejected for r0v12, resolved type: T[]\}\lMETHOD_OVERRIDE: [ClspMth\{\<T\> java.util.Collection.toArray(T[]):T[]\}]\l}"];
MethodNode -> Node_22;Node_22 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_41;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_42;
Node_32 -> Node_29;
Node_42 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_43;
Node_35 -> Node_34;
Node_43 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_39;
Node_38 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_23;
Node_41 -> Node_33;
Node_27 -> Node_28;
}

