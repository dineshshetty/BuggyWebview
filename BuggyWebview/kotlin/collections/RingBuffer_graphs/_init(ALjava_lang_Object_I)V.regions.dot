digraph "CFG forkotlin.collections.RingBuffer.\<init\>([Ljava\/lang\/Object;I)V" {
subgraph cluster_Region_2022796229 {
label = "R(2:1|(2:(2:14|15)|(1:(2:(2:12|13)|(1:9)))))";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"buffer\")\lr3.buffer = r4\l}"];
subgraph cluster_Region_1172039096 {
label = "R(2:(2:14|15)|(1:(2:(2:12|13)|(1:9))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1396170159 {
label = "IF [B:24:0x0012] THEN: R(2:14|15) ELSE: null";
node [shape=record,color=blue];
Node_24 [shape=record,label="{24\:\ 0x0012|PHI: r2 \l  PHI: (r2v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r5 \>= 0) == false) goto L14\l}"];
subgraph cluster_Region_1037555094 {
label = "R(2:14|15)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0047}"];
Node_35 [shape=record,label="{35\:\ 0x0062|throw new java.lang.IllegalArgumentException((\"ring buffer filled size should not be negative but it is \" + r5).toString())\l}"];
}
}
subgraph cluster_Region_1324043946 {
label = "R(1:(2:(2:12|13)|(1:9)))";
node [shape=record,color=blue];
subgraph cluster_Region_1409783018 {
label = "R(2:(2:12|13)|(1:9))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_967893344 {
label = "IF [B:29:0x0019] THEN: R(2:12|13) ELSE: null";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0019|PHI: r0 \l  PHI: (r0v5 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r5 \<= r4.length) == false) goto L12\l}"];
subgraph cluster_Region_986249381 {
label = "R(2:12|13)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0022}"];
Node_33 [shape=record,label="{33\:\ 0x0046|throw new java.lang.IllegalArgumentException((\"ring buffer filled size: \" + r5 + \" cannot be larger than the buffer size: \" + r4.length).toString())\l}"];
}
}
subgraph cluster_Region_776109896 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x001c|r3.capacity = r4.length\lr3.size = r5\l}"];
}
}
}
}
}
Node_18 [shape=record,color=red,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x000d}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x000f}"];
Node_25 [shape=record,color=red,label="{25\:\ 0x0014}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0015}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0018}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0021}"];
Node_19 [shape=record,color=red,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_23 [shape=record,color=red,label="{23\:\ 0x0011}"];
MethodNode[shape=record,label="{public void kotlin.collections.RingBuffer.\<init\>((r3v0 'this' kotlin.collections.RingBuffer\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'buffer' java.lang.Object[] A[D('buffer' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'filledSize' int A[D('filledSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0046 \-\> B:19:?, CROSS_EDGE: B:26:0x0015 \-\> B:29:0x0019, CROSS_EDGE: B:35:0x0062 \-\> B:19:?, CROSS_EDGE: B:23:0x0011 \-\> B:24:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_18;Node_20 -> Node_21;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_30 -> Node_31;
Node_18 -> Node_20;
Node_21 -> Node_22;
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_29;
Node_28 -> Node_29;
Node_31 -> Node_19;
Node_23 -> Node_24;
}

