digraph "CFG forkotlin.collections.RingBuffer.removeFirst(I)V" {
subgraph cluster_Region_449604142 {
label = "R(1:(2:(2:20|21)|(1:(2:18|19)(1:(3:10|(1:16)(1:12)|13)(0)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1527366141 {
label = "R(2:(2:20|21)|(1:(2:18|19)(1:(3:10|(1:16)(1:12)|13)(0))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_358952632 {
label = "IF [B:30:0x0007] THEN: R(2:20|21) ELSE: null";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0007|PHI: r2 \l  PHI: (r2v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r8 \>= 0) == false) goto L20\l}"];
subgraph cluster_Region_750513712 {
label = "R(2:20|21)";
node [shape=record,color=blue];
Node_45 [shape=record,label="{45\:\ 0x0069}"];
Node_46 [shape=record,label="{46\:\ 0x0084|throw new java.lang.IllegalArgumentException((\"n shouldn't be negative but it is \" + r8).toString())\l}"];
}
}
subgraph cluster_Region_1432321171 {
label = "R(1:(2:18|19)(1:(3:10|(1:16)(1:12)|13)(0)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1087130092 {
label = "IF [B:35:0x0011] THEN: R(2:18|19) ELSE: R(1:(3:10|(1:16)(1:12)|13)(0))";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0011|PHI: r0 \l  PHI: (r0v4 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE, REMOVE]\l|if ((r8 \<= size()) == false) goto L18\l}"];
subgraph cluster_Region_2086715299 {
label = "R(2:18|19)";
node [shape=record,color=blue];
Node_43 [shape=record,label="{43\:\ 0x0041}"];
Node_44 [shape=record,label="{44\:\ 0x0068|throw new java.lang.IllegalArgumentException((\"n shouldn't be greater than the buffer size: n = \" + r8 + \", size = \" + size()).toString())\l}"];
}
subgraph cluster_Region_265880689 {
label = "R(1:(3:10|(1:16)(1:12)|13)(0)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_558648061 {
label = "IF [B:36:0x0013] THEN: R(3:10|(1:16)(1:12)|13) ELSE: R(0) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0013|if (r8 \> 0) goto L10\l}"];
subgraph cluster_Region_1141896786 {
label = "R(3:10|(1:16)(1:12)|13)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0015|int int r0 = r7.startIndex\lint int r5 = (r0 + r8) % r7.capacity\l}"];
subgraph cluster_IfRegion_1932604317 {
label = "IF [B:38:0x0023] THEN: R(1:16) ELSE: R(1:12)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0023|if (r0 \<= r5) goto L16\l}"];
subgraph cluster_Region_1567845884 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_40 [shape=record,label="{40\:\ 0x0032|kotlin.collections.ArraysKt.fill(r7.buffer, (java.lang.Object) null, r0, r5)\l}"];
}
subgraph cluster_Region_1529387080 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_39 [shape=record,label="{39\:\ 0x0025|kotlin.collections.ArraysKt.fill(r7.buffer, (java.lang.Object) null, r0, r7.capacity)\lkotlin.collections.ArraysKt.fill(r7.buffer, (java.lang.Object) null, 0, r5)\l}"];
}
}
Node_41 [shape=record,label="{41\:\ 0x0037|r7.startIndex = r5\lr7.size = size() \- r8\l}"];
}
subgraph cluster_Region_65926161 {
label = "R(0)";
node [shape=record,color=blue];
}
}
}
}
}
}
}
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,color=red,label="{26\:\ 0x0000}"];
Node_27 [shape=record,color=red,label="{27\:\ 0x0002}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0004}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0009}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x000d}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0010}"];
Node_42 [shape=record,color=red,label="{42\:\ 0x0040|ORIG_RETURN\l}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_47 [shape=record,color=red,label="{47\:\ ?|SYNTHETIC\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x0006}"];
MethodNode[shape=record,label="{public final void kotlin.collections.RingBuffer.removeFirst((r7v0 'this' kotlin.collections.RingBuffer\<T\> A[IMMUTABLE_TYPE, THIS]), (r8v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:40:0x0032 \-\> B:41:0x0037, CROSS_EDGE: B:36:0x0013 \-\> B:42:0x0040, CROSS_EDGE: B:44:0x0068 \-\> B:25:?, CROSS_EDGE: B:32:0x000d \-\> B:35:0x0011, CROSS_EDGE: B:46:0x0084 \-\> B:25:?, CROSS_EDGE: B:29:0x0006 \-\> B:30:0x0007\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_24;Node_30 -> Node_31[style=dashed];
Node_30 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_25;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_43;
Node_43 -> Node_44;
Node_44 -> Node_25;
Node_36 -> Node_37;
Node_36 -> Node_47[style=dashed];
Node_37 -> Node_38;
Node_38 -> Node_39[style=dashed];
Node_38 -> Node_40;
Node_40 -> Node_41;
Node_39 -> Node_41;
Node_41 -> Node_42;
Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28;
Node_27 -> Node_29;
Node_28 -> Node_30;
Node_31 -> Node_32;
Node_32 -> Node_34;
Node_32 -> Node_35;
Node_34 -> Node_35;
Node_42 -> Node_25;
Node_47 -> Node_25;
Node_29 -> Node_30;
}

