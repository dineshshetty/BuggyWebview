digraph "CFG forkotlin.collections.RingBuffer.\<init\>([Ljava\/lang\/Object;I)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"buffer\")\lr3.buffer = r4\lr0 = true\l}"];
Node_21 [shape=record,label="{21\:\ 0x000d|if (r5 \< 0) goto L16\l}"];
Node_22 [shape=record,label="{22\:\ 0x000f|r2 = true\l}"];
Node_24 [shape=record,label="{24\:\ 0x0012|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v7 boolean) binds: [B:23:0x0011, B:22:0x000f] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L14\l}"];
Node_25 [shape=record,label="{25\:\ 0x0014}"];
Node_26 [shape=record,label="{26\:\ 0x0015|if (r5 \> r4.length) goto L7\l}"];
Node_28 [shape=record,label="{28\:\ 0x0018|r0 = false\l}"];
Node_29 [shape=record,label="{29\:\ 0x0019|PHI: r0 \l  PHI: (r0v5 boolean) = (r0v1 boolean), (r0v10 boolean) binds: [B:26:0x0015, B:28:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L12\l}"];
Node_30 [shape=record,label="{30\:\ 0x001c|r3.capacity = r4.length\lr3.size = r5\l}"];
Node_31 [shape=record,label="{31\:\ 0x0021|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0022|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"ring buffer filled size: \")\lr1.append(r5)\lr1.append(\" cannot be larger than the buffer size: \")\lr1.append(r4.length)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0046|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_34 [shape=record,label="{34\:\ 0x0047|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"ring buffer filled size should not be negative but it is \")\lr1.append(r5)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0062|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_23 [shape=record,label="{23\:\ 0x0011|r2 = false\l}"];
MethodNode[shape=record,label="{public void kotlin.collections.RingBuffer.\<init\>((r3v0 'this' kotlin.collections.RingBuffer\<T\> A[IMMUTABLE_TYPE, THIS]), (r4v0 'buffer' java.lang.Object[] A[D('buffer' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'filledSize' int A[D('filledSize' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0046 \-\> B:19:?, CROSS_EDGE: B:26:0x0015 \-\> B:29:0x0019, CROSS_EDGE: B:35:0x0062 \-\> B:19:?, CROSS_EDGE: B:23:0x0011 \-\> B:24:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: [T]\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_23;
Node_22 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_34;
Node_25 -> Node_26;
Node_26 -> Node_28;
Node_26 -> Node_29[style=dashed];
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_19;
Node_32 -> Node_33;
Node_33 -> Node_19;
Node_34 -> Node_35;
Node_35 -> Node_19;
Node_23 -> Node_24;
}

