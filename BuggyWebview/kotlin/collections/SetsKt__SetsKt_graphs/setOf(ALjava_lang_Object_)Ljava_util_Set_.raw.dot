digraph "CFG forkotlin.collections.SetsKt__SetsKt.setOf([Ljava\/lang\/Object;)Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"elements\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('elements' java.lang.Object[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: ARRAY_LENGTH  (r0 I:int) = (r1 I:??[] A[D('elements' java.lang.Object[])])  (LINE:44)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0006|0x0006: IF  (r0 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:5:0x000d \l}"];
Node_4 [shape=record,label="{4\:\ 0x0008|0x0008: INVOKE  (r0 I:java.util.Set) = (r1 I:java.lang.Object[] A[D('elements' java.lang.Object[])]) type: STATIC call: kotlin.collections.ArraysKt.toSet(java.lang.Object[]):java.util.Set A[MD:\<T\>:(T[]):java.util.Set\<T\> (m)]\l}"];
Node_7 [shape=record,label="{7\:\ ?|SYNTHETIC\lRETURN\l|0x0011: RETURN  (r0 I:java.util.Set\<T\>) A[SYNTHETIC]\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_5 [shape=record,label="{5\:\ 0x000d|0x000d: INVOKE  (r0 I:java.util.Set) =  type: STATIC call: kotlin.collections.SetsKt.emptySet():java.util.Set A[MD:\<T\>:():java.util.Set\<T\> (m)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x0011|RETURN\lORIG_RETURN\l|0x0011: RETURN  (r0 I:java.util.Set\<T\>) \l}"];
MethodNode[shape=record,label="{public static final java.util.Set\<T\> kotlin.collections.SetsKt__SetsKt.setOf((r1 I:T[] A[D('elements' java.lang.Object[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:5:0x000d \-\> B:6:0x0011\lDebug Info:\l  \-1 \-0x0011: r1 'elements' [Ljava\/lang\/Object;\lTYPE_VARS: [T]\lSIGNATURE: \<T:Ljava\/lang\/Object;\>([TT;)Ljava\/util\/Set\<TT;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_7;
Node_7 -> Node_1;
Node_5 -> Node_6;
Node_6 -> Node_1;
}

