digraph "CFG forkotlin.collections.SetsKt__SetsKt.buildSet(ILkotlin\/jvm\/functions\/Function1;)Ljava\/util\/Set;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"builderAction\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('builderAction' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0006: INVOKE  (r0 I:java.util.Set) = (r1 I:int A[D('capacity' int)]) type: STATIC call: kotlin.collections.SetsKt.createSetBuilder(int):java.util.Set A[MD:\<E\>:(int):java.util.Set\<E\> (m)] (LINE:160)\l0x000a: INVOKE  (r2 I:kotlin.jvm.functions.Function1 A[D('builderAction' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x000d: INVOKE  (r0 I:java.util.Set) = (r0 I:java.util.Set) type: STATIC call: kotlin.collections.SetsKt.build(java.util.Set):java.util.Set A[MD:\<E\>:(java.util.Set\<E\>):java.util.Set\<E\> (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:java.util.Set\<E\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.util.Set\<E\> kotlin.collections.SetsKt__SetsKt.buildSet((r1 I:int A[D('capacity' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:kotlin.jvm.functions.Function1\<? super java.util.Set\<E\>, kotlin.Unit\> A[D('builderAction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0011: r1 'capacity' I\l  \-1 \-0x0011: r2 'builderAction' Lkotlin\/jvm\/functions\/Function1;\lTYPE_VARS: [E]\lSIGNATURE: \<E:Ljava\/lang\/Object;\>(ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/util\/Set\<TE;\>;Lkotlin\/Unit;\>;)Ljava\/util\/Set\<TE;\>;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

