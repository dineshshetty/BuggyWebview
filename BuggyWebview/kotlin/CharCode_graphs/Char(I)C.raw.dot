digraph "CFG forkotlin.CharCodeKt.Char(I)C" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IF  (r3 I:??[int, byte, short, char] A[D('code' int)]) \< (0 ??[int, byte, short, char])  \-\> B:7:0x0009  (LINE:22)\l}"];
Node_3 [shape=record,label="{3\:\ 0x0002|0x0002: CONST  (r0 I:??[int, float, short, byte, char]) = (65535(0xffff, float:9.1834E\-41) ??[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x0005|0x0005: IF  (r3 I:??[int, byte, short, char] A[D('code' int)]) \> (r0 I:??[int, byte, short, char])  \-\> B:7:0x0009 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0007|0x0007: CAST (r0 I:char) = (char) (r3 I:int A[D('code' int)])  (LINE:25)\l}"];
Node_6 [shape=record,label="{6\:\ 0x0008|RETURN\l|0x0008: RETURN  (r0 I:char) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_7 [shape=record,label="{7\:\ 0x0009|0x0009: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:23)\l0x000b: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x000d: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0010: CONST_STR  (r2 I:java.lang.String) =  \"Invalid Char code: \" \l0x0012: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0015: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:int A[D('code' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0018: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x001c: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x001f|0x001f: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{private static final char kotlin.CharCodeKt.Char((r3 I:int A[D('code' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:8:0x001f \-\> B:1:?, CROSS_EDGE: B:2:0x0000 \-\> B:7:0x0009\lDebug Info:\l  \-1 \-0x001f: r3 'code' I\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3[style=dashed];
Node_2 -> Node_7;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_7;
Node_5 -> Node_6;
Node_6 -> Node_1;
Node_7 -> Node_8;
Node_8 -> Node_1;
}

