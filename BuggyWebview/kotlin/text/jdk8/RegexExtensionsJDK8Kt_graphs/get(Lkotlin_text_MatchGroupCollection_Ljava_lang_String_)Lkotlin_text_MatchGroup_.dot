digraph "CFG forkotlin.text.jdk8.RegexExtensionsJDK8Kt.get(Lkotlin\/text\/MatchGroupCollection;Ljava\/lang\/String;)Lkotlin\/text\/MatchGroup;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"name\")\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|if ((r2 instanceof kotlin.text.MatchNamedGroupCollection) == false) goto L10\l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|kotlin.text.MatchNamedGroupCollection r0 = (kotlin.text.MatchNamedGroupCollection) r2\l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|PHI: r0 \l  PHI: (r0v4 'namedGroups' kotlin.text.MatchNamedGroupCollection) = (r0v3 'namedGroups' kotlin.text.MatchNamedGroupCollection), (r0v7 'namedGroups' kotlin.text.MatchNamedGroupCollection) binds: [B:5:0x0012, B:4:0x000e] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == null) goto L8\l}"];
Node_7 [shape=record,label="{7\:\ 0x0015}"];
Node_8 [shape=record,label="{8\:\ 0x0019|RETURN\l|return r0.get(r3)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a}"];
Node_10 [shape=record,label="{10\:\ 0x0021|throw new java.lang.UnsupportedOperationException(\"Retrieving groups by name is not supported on this platform.\")\l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|r0 = null\l}"];
MethodNode[shape=record,label="{public static final kotlin.text.MatchGroup kotlin.text.jdk8.RegexExtensionsJDK8Kt.get((r2v0 '$this$get' kotlin.text.MatchGroupCollection A[D('$this$get' kotlin.text.MatchGroupCollection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'name' java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0021 \-\> B:1:?, CROSS_EDGE: B:5:0x0012 \-\> B:6:0x0013\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_5 -> Node_6;
}

