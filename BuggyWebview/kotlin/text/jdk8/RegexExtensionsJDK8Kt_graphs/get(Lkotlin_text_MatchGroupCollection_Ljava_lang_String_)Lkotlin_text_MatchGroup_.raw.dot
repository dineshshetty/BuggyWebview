digraph "CFG forkotlin.text.jdk8.RegexExtensionsJDK8Kt.get(Lkotlin\/text\/MatchGroupCollection;Ljava\/lang\/String;)Lkotlin\/text\/MatchGroup;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$get' kotlin.text.MatchGroupCollection)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"name\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('name' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INSTANCE_OF  (r0 I:boolean) = (r2 I:??[OBJECT, ARRAY] A[D('$this$get' kotlin.text.MatchGroupCollection)]) kotlin.text.MatchNamedGroupCollection  (LINE:31)\l}"];
Node_3 [shape=record,label="{3\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:5:0x0012 \l}"];
Node_4 [shape=record,label="{4\:\ 0x000e|0x000e: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$get' kotlin.text.MatchGroupCollection)]) \l0x000f: CHECK_CAST (r0 I:kotlin.text.MatchNamedGroupCollection) = (kotlin.text.MatchNamedGroupCollection) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0013|0x0013: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:9:0x001a \l}"];
Node_7 [shape=record,label="{7\:\ 0x0015|0x0015: INVOKE  (r1 I:kotlin.text.MatchGroup) = \l  (r0 I:kotlin.text.MatchNamedGroupCollection A[D('namedGroups' kotlin.text.MatchNamedGroupCollection)])\l  (r3 I:java.lang.String A[D('name' java.lang.String)])\l type: INTERFACE call: kotlin.text.MatchNamedGroupCollection.get(java.lang.String):kotlin.text.MatchGroup A[MD:(java.lang.String):kotlin.text.MatchGroup (m)] (LINE:34)\l}"];
Node_8 [shape=record,label="{8\:\ 0x0019|RETURN\l|0x0019: RETURN  (r1 I:kotlin.text.MatchGroup) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x001a|0x001a: NEW_INSTANCE  (r0 I:java.lang.UnsupportedOperationException A[D('namedGroups' kotlin.text.MatchNamedGroupCollection)]) =  java.lang.UnsupportedOperationException  (LINE:32)\l0x001c: CONST_STR  (r1 I:java.lang.String) =  \"Retrieving groups by name is not supported on this platform.\" \l0x001e: INVOKE  (r0 I:java.lang.UnsupportedOperationException), (r1 I:java.lang.String) type: DIRECT call: java.lang.UnsupportedOperationException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x0021|0x0021: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_5 [shape=record,label="{5\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final kotlin.text.MatchGroup kotlin.text.jdk8.RegexExtensionsJDK8Kt.get((r2 I:kotlin.text.MatchGroupCollection A[D('$this$get' kotlin.text.MatchGroupCollection), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.String A[D('name' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:10:0x0021 \-\> B:1:?, CROSS_EDGE: B:5:0x0012 \-\> B:6:0x0013\lDebug Info:\l  0x0015\-0x001a: r0 'namedGroups' Lkotlin\/text\/MatchNamedGroupCollection;\l  \-1 \-0x0021: r2 '$this$get' Lkotlin\/text\/MatchGroupCollection;\l  \-1 \-0x0021: r3 'name' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_5;
Node_4 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_9;
Node_7 -> Node_8;
Node_8 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_1;
Node_5 -> Node_6;
}

