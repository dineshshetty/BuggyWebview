digraph "CFG forkotlin.text.RegexOption.\<init\>(Ljava\/lang\/String;IIIILkotlin\/jvm\/internal\/DefaultConstructorMarker;)V" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: ARITH  (r5 I:??[int, boolean]) = (r5 I:??[int, boolean, short, byte, char]) & (2 ??[int, float, short, byte, char])  (LINE:29)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0002|0x0002: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x0005 \l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_12 [shape=record,label="{12\:\ 0x0005|0x0005: INVOKE  (r0 I:kotlin.text.RegexOption), (r1 I:java.lang.String), (r2 I:int), (r3 I:int), (r4 I:int) type: DIRECT call: kotlin.text.RegexOption.\<init\>(java.lang.String, int, int, int):void A[MD:(java.lang.String, int, int, int):void (m)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|RETURN\l|0x0008: RETURN    (LINE:64)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{\/* synthetic *\/ void kotlin.text.RegexOption.\<init\>((r0 'this' I:kotlin.text.RegexOption A[IMMUTABLE_TYPE, THIS]), (r1 I:java.lang.String A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:kotlin.jvm.internal.DefaultConstructorMarker A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lCROSS_EDGE: B:10:0x0002 \-\> B:12:0x0005\lINLINE_NOT_NEEDED\lSKIP_MTH_ARGS: \{0, 1\}\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_12;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

