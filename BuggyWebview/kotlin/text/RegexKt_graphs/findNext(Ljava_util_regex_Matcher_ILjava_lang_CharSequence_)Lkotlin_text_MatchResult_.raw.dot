digraph "CFG forkotlin.text.RegexKt.findNext(Ljava\/util\/regex\/Matcher;ILjava\/lang\/CharSequence;)Lkotlin\/text\/MatchResult;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r0 I:boolean) = (r1 I:java.util.regex.Matcher A[D('$this$findNext' java.util.regex.Matcher)]), (r2 I:int A[D('from' int)]) type: VIRTUAL call: java.util.regex.Matcher.find(int):boolean A[MD:(int):boolean (c)] (LINE:344)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0004|0x0004: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0008 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0006|SYNTHETIC\lRETURN\l|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: RETURN  (r0 I:kotlin.text.MatchResult) A[SYNTHETIC]\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0008|0x0008: NEW_INSTANCE  (r0 I:kotlin.text.MatcherMatchResult) =  kotlin.text.MatcherMatchResult \l0x000a: INVOKE  \l  (r0 I:kotlin.text.MatcherMatchResult)\l  (r1 I:java.util.regex.Matcher A[D('$this$findNext' java.util.regex.Matcher)])\l  (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence)])\l type: DIRECT call: kotlin.text.MatcherMatchResult.\<init\>(java.util.regex.Matcher, java.lang.CharSequence):void A[MD:(java.util.regex.Matcher, java.lang.CharSequence):void (m)]\l0x000d: CHECK_CAST (r0 I:kotlin.text.MatchResult) = (kotlin.text.MatchResult) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x000f|RETURN\lORIG_RETURN\l|0x000f: RETURN  (r0 I:kotlin.text.MatchResult) \l}"];
MethodNode[shape=record,label="{public static final kotlin.text.MatchResult kotlin.text.RegexKt.findNext((r1 I:java.util.regex.Matcher A[D('$this$findNext' java.util.regex.Matcher), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:int A[D('from' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.lang.CharSequence A[D('input' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0008 \-\> B:14:0x000f\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x000f: r1 '$this$findNext' Ljava\/util\/regex\/Matcher;\l  \-1 \-0x000f: r2 'from' I\l  \-1 \-0x000f: r3 'input' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_9;
Node_13 -> Node_14;
Node_14 -> Node_9;
}

