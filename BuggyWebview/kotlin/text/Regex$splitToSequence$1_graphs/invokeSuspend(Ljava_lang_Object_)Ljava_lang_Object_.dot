digraph "CFG forkotlin.text.Regex$splitToSequence$1.invokeSuspend(Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()\l}"];
Node_3 [shape=record,label="{3\:\ 0x0007|switch(r10.label) \{\l    case 0: goto L24;\l    case 1: goto L21;\l    case 2: goto L9;\l    case 3: goto L6;\l    default: goto L3;\l\}\l}"];
Node_4 [shape=record,label="{4\:\ 0x000a}"];
Node_5 [shape=record,label="{5\:\ 0x0011|throw new java.lang.IllegalStateException(\"call to 'resume' before 'invoke' with coroutine\")\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_6 [shape=record,label="{6\:\ 0x0012|kotlin.ResultKt.throwOnFailure(r11)\l}"];
Node_27 [shape=record,label="{27\:\ 0x00a5}"];
Node_28 [shape=record,label="{28\:\ 0x00a7|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_7 [shape=record,label="{7\:\ 0x0018|r1 = r10\lint r3 = r1.I$0\ljava.util.regex.Matcher r4 = (java.util.regex.Matcher) r1.L$1\lkotlin.sequences.SequenceScope r5 = (kotlin.sequences.SequenceScope) r1.L$0\lkotlin.ResultKt.throwOnFailure(r11)\l}"];
Node_18 [shape=record,label="{18\:\ 0x0073|PHI: r1 r3 r4 r5 \l  PHI: (r1v4 kotlin.text.Regex$splitToSequence$1) = (r1v3 kotlin.text.Regex$splitToSequence$1), (r1v5 kotlin.text.Regex$splitToSequence$1) binds: [B:16:0x0070, B:7:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v4 'splitCount' int) = (r3v3 'splitCount' int), (r3v9 'splitCount' int) binds: [B:16:0x0070, B:7:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v6 'matcher' java.util.regex.Matcher) = (r4v5 'matcher' java.util.regex.Matcher), (r4v10 'matcher' java.util.regex.Matcher) binds: [B:16:0x0070, B:7:0x0018] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v8 '$this$sequence' kotlin.sequences.SequenceScope) = (r5v7 '$this$sequence' kotlin.sequences.SequenceScope), (r5v10 '$this$sequence' kotlin.sequences.SequenceScope) binds: [B:16:0x0070, B:7:0x0018] A[DONT_GENERATE, DONT_INLINE]\l|int r6 = r4.end()\lint r3 = r3 + 1\l}"];
Node_19 [shape=record,label="{19\:\ 0x007b|if (r3 == (r1.$limit \- 1)) goto L17\l}"];
Node_20 [shape=record,label="{20\:\ 0x007d}"];
Node_21 [shape=record,label="{21\:\ 0x0081|if (r4.find() != false) goto L14\l}"];
Node_15 [shape=record,label="{15\:\ 0x0052|PHI: r1 r3 r4 r5 r6 \l  PHI: (r1v3 kotlin.text.Regex$splitToSequence$1) = (r1v1 kotlin.text.Regex$splitToSequence$1), (r1v4 kotlin.text.Regex$splitToSequence$1) binds: [B:14:0x004c, B:21:0x0081] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 'splitCount' int) = (r3v2 'splitCount' int), (r3v5 'splitCount' int) binds: [B:14:0x004c, B:21:0x0081] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r4v5 'matcher' java.util.regex.Matcher) = (r4v2 'matcher' java.util.regex.Matcher), (r4v6 'matcher' java.util.regex.Matcher) binds: [B:14:0x004c, B:21:0x0081] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r5v7 '$this$sequence' kotlin.sequences.SequenceScope) = (r5v6 '$this$sequence' kotlin.sequences.SequenceScope), (r5v8 '$this$sequence' kotlin.sequences.SequenceScope) binds: [B:14:0x004c, B:21:0x0081] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'nextStart' int) = (r6v1 'nextStart' int), (r6v5 'nextStart' int) binds: [B:14:0x004c, B:21:0x0081] A[DONT_GENERATE, DONT_INLINE]\l|r1.L$0 = r5\lr1.L$1 = r4\lr1.I$0 = r3\lr1.label = 2\l}"];
Node_16 [shape=record,label="{16\:\ 0x0070|if (r5.yield(r1.$input.subSequence(r6, r4.start()).toString(), r1) != r0) goto L10\l}"];
Node_17 [shape=record,label="{17\:\ 0x0072|RETURN\l|return r0\l}"];
Node_23 [shape=record,label="{23\:\ 0x0084|java.lang.CharSequence r2 = r1.$input\lr1.L$0 = null\lr1.L$1 = null\lr1.label = 3\l}"];
Node_24 [shape=record,label="{24\:\ 0x00a1|if (r5.yield(r2.subSequence(r6, r2.length()).toString(), r1) != r0) goto L20\l}"];
Node_25 [shape=record,label="{25\:\ 0x00a3|RETURN\l|return r0\l}"];
Node_26 [shape=record,label="{26\:\ 0x00a4}"];
Node_8 [shape=record,label="{8\:\ 0x0027|kotlin.ResultKt.throwOnFailure(r11)\l}"];
Node_33 [shape=record,label="{33\:\ 0x00bb}"];
Node_34 [shape=record,label="{34\:\ 0x00bd|RETURN\l|return kotlin.Unit.INSTANCE\l}"];
Node_9 [shape=record,label="{9\:\ 0x002d|kotlin.ResultKt.throwOnFailure(r11)\lr1 = r10\lkotlin.sequences.SequenceScope r3 = (kotlin.sequences.SequenceScope) r1.L$0\ljava.util.regex.Pattern r4 = r1.this$0.nativePattern\ljava.util.regex.Matcher r4 = r4.matcher(r1.$input)\l}"];
Node_10 [shape=record,label="{10\:\ 0x0043|if (r1.$limit == 1) goto L29\l}"];
Node_11 [shape=record,label="{11\:\ 0x0045}"];
Node_12 [shape=record,label="{12\:\ 0x0049|if (r4.find() != false) goto L28\l}"];
Node_14 [shape=record,label="{14\:\ 0x004c|r5 = r3\lr3 = 0\lr6 = 0\l}"];
Node_29 [shape=record,label="{29\:\ 0x00a8|r1.label = 1\l}"];
Node_30 [shape=record,label="{30\:\ 0x00b7|if (r3.yield(r1.$input.toString(), r1) != r0) goto L32\l}"];
Node_31 [shape=record,label="{31\:\ 0x00b9|RETURN\l|return r0\l}"];
Node_32 [shape=record,label="{32\:\ 0x00ba}"];
MethodNode[shape=record,label="{public final java.lang.Object kotlin.text.Regex$splitToSequence$1.invokeSuspend((r10v0 'this' kotlin.text.Regex$splitToSequence$1 A[IMMUTABLE_TYPE, THIS]), (r11v0 '$result' java.lang.Object A[IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | CROSS_EDGE: B:28:0x00a7 \-\> B:1:?, CROSS_EDGE: B:17:0x0072 \-\> B:1:?, BACK_EDGE: B:16:0x0070 \-\> B:18:0x0073, CROSS_EDGE: B:25:0x00a3 \-\> B:1:?, CROSS_EDGE: B:26:0x00a4 \-\> B:27:0x00a5, CROSS_EDGE: B:19:0x007b \-\> B:23:0x0084, CROSS_EDGE: B:34:0x00bd \-\> B:1:?, CROSS_EDGE: B:14:0x004c \-\> B:15:0x0052, CROSS_EDGE: B:31:0x00b9 \-\> B:1:?, CROSS_EDGE: B:32:0x00ba \-\> B:33:0x00bb, CROSS_EDGE: B:10:0x0043 \-\> B:29:0x00a8\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Unsupported multi\-entry loop pattern (BACK_EDGE: B:16:0x0070 \-\> B:18:0x0073). Please submit an issue!!!\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [273=5]\}\lMETHOD_OVERRIDE: [kotlin.coroutines.jvm.internal.BaseContinuationImpl.invokeSuspend(java.lang.Object):java.lang.Object]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_6;
Node_3 -> Node_7;
Node_3 -> Node_8;
Node_3 -> Node_9;
Node_4 -> Node_5;
Node_5 -> Node_1;
Node_6 -> Node_27;
Node_27 -> Node_28;
Node_28 -> Node_1;
Node_7 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_23;
Node_20 -> Node_21;
Node_21 -> Node_15;
Node_21 -> Node_23[style=dashed];
Node_15 -> Node_16;
Node_16 -> Node_17[style=dashed];
Node_16 -> Node_18;
Node_17 -> Node_1;
Node_23 -> Node_24;
Node_24 -> Node_25[style=dashed];
Node_24 -> Node_26;
Node_25 -> Node_1;
Node_26 -> Node_27;
Node_8 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_1;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_29;
Node_11 -> Node_12;
Node_12 -> Node_14;
Node_12 -> Node_29[style=dashed];
Node_14 -> Node_15;
Node_29 -> Node_30;
Node_30 -> Node_31[style=dashed];
Node_30 -> Node_32;
Node_31 -> Node_1;
Node_32 -> Node_33;
}

