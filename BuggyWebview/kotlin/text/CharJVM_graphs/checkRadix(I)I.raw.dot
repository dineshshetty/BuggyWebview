digraph "CFG forkotlin.text.CharsKt__CharJVMKt.checkRadix(I)I" {
Node_7 [shape=record,label="{7\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_9 [shape=record,label="{9\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:313)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (36 ??[int, float, short, byte, char]) \l0x0005: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0008: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r5 I:int A[D('radix' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:12:0x000f \l}"];
Node_11 [shape=record,label="{11\:\ 0x000e|RETURN\l|0x000e: RETURN  (r5 I:int A[D('radix' int)])  (LINE:316)\l}"];
Node_8 [shape=record,label="{8\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_12 [shape=record,label="{12\:\ 0x000f|0x000f: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:314)\l0x0011: NEW_INSTANCE  (r3 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0013: INVOKE  (r3 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0016: CONST_STR  (r4 I:java.lang.String) =  \"radix \" \l0x0018: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x001b: INVOKE  (r3 I:java.lang.StringBuilder), (r5 I:int A[D('radix' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x001e: CONST_STR  (r4 I:java.lang.String) =  \" was not in valid range \" \l0x0020: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0023: NEW_INSTANCE  (r4 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange \l0x0025: INVOKE  (r4 I:kotlin.ranges.IntRange), (r1 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0028: INVOKE  (r3 I:java.lang.StringBuilder), (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.Object):java.lang.StringBuilder A[MD:(java.lang.Object):java.lang.StringBuilder (c)]\l0x002b: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x002f: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_13 [shape=record,label="{13\:\ 0x0032|0x0032: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.CharsKt__CharJVMKt.checkRadix((r5 I:int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0032 \-\> B:8:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0032: r5 'radix' I\l}"];
MethodNode -> Node_7;Node_7 -> Node_9;
Node_9 -> Node_10;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_12;
Node_11 -> Node_8;
Node_12 -> Node_13;
Node_13 -> Node_8;
}

