digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigIntegerOrNull(Ljava\/lang\/String;I)Ljava\/math\/BigInteger;" {
Node_21 [shape=record,label="{21\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_23 [shape=record,label="{23\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$toBigIntegerOrNull' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r6 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.checkRadix(int):int A[MD:(int):int (m)] (LINE:194)\l0x0008: INVOKE  (r0 I:int) = (r5 I:java.lang.String A[D('$this$toBigIntegerOrNull' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:195)\l0x000c: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:196)\l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: SWITCH  (r0 I:?? A[D('length' int)])\l case 0: goto B:31:0x0026\l case 1: goto B:28:0x001b\l default: goto B:25:0x0011 \l}"];
Node_25 [shape=record,label="{25\:\ 0x0011|0x0011: INVOKE  (r3 I:char) = (r5 I:java.lang.String A[D('$this$toBigIntegerOrNull' java.lang.String)]), (r1 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:200)\l0x0015: CONST  (r4 I:??[int, float, short, byte, char]) = (45 ??[int, float, short, byte, char]) \l}"];
Node_26 [shape=record,label="{26\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x0027 \l}"];
Node_27 [shape=record,label="{27\:\ 0x0019|0x0019: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x0027|0x0027: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('start' int)])  (LINE:201)\l}"];
Node_33 [shape=record,label="{33\:\ 0x0028|LOOP_START\lLOOP:0: B:33:0x0028\-\>B:37:0x0035\l|0x0028: IF  (r3 I:??[int, byte, short, char] A[D('index' int)]) \>= (r0 I:??[int, byte, short, char] A[D('length' int)])  \-\> B:41:0x0038 \l}"];
Node_34 [shape=record,label="{34\:\ 0x002a|0x002a: INVOKE  (r4 I:char) = (r5 I:java.lang.String A[D('$this$toBigIntegerOrNull' java.lang.String)]), (r3 I:int A[D('index' int)]) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:202)\l0x002e: INVOKE  (r4 I:int) = (r4 I:char), (r6 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.digitOf(char, int):int A[MD:(char, int):int (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0032|0x0032: IF  (r4 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:37:0x0035 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0035|LOOP_END\lLOOP:0: B:33:0x0028\-\>B:37:0x0035\l|0x0035: ARITH  (r3 I:int) = (r3 I:int A[D('index' int)]) + (1 int)  (LINE:201)\l}"];
Node_40 [shape=record,label="{40\:\ 0x0034|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0034|RETURN\l|0x0034: RETURN  (r2 I:java.math.BigInteger)  (LINE:203)\l}"];
Node_22 [shape=record,label="{22\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x0038|SYNTHETIC\l}"];
Node_38 [shape=record,label="{38\:\ 0x0038|0x0038: NEW_INSTANCE  (r1 I:java.math.BigInteger A[D('start' int)]) =  java.math.BigInteger \l0x003a: INVOKE  (r2 I:int) = (r6 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.checkRadix(int):int A[MD:(int):int (m)] (LINE:207)\l0x003e: INVOKE  (r1 I:java.math.BigInteger), (r5 I:java.lang.String A[D('$this$toBigIntegerOrNull' java.lang.String)]), (r2 I:int) type: DIRECT call: java.math.BigInteger.\<init\>(java.lang.String, int):void A[MD:(java.lang.String, int):void (c)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0041|RETURN\l|0x0041: RETURN  (r1 I:java.math.BigInteger) \l}"];
Node_28 [shape=record,label="{28\:\ 0x001b|0x001b: INVOKE  (r1 I:char) = (r5 I:java.lang.String A[D('$this$toBigIntegerOrNull' java.lang.String)]), (r1 I:int) type: VIRTUAL call: java.lang.String.charAt(int):char A[MD:(int):char (c)] (LINE:198)\l0x001f: INVOKE  (r1 I:int) = (r1 I:char), (r6 I:int A[D('radix' int)]) type: STATIC call: kotlin.text.CharsKt.digitOf(char, int):int A[MD:(char, int):int (m)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0023|0x0023: IF  (r1 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:38:0x0038 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0025|RETURN\l|0x0025: RETURN  (r2 I:java.math.BigInteger) \l}"];
Node_31 [shape=record,label="{31\:\ 0x0026|RETURN\l|0x0026: RETURN  (r2 I:java.math.BigInteger)  (LINE:197)\l}"];
MethodNode[shape=record,label="{public static final java.math.BigInteger kotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigIntegerOrNull((r5 I:java.lang.String A[D('$this$toBigIntegerOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:37:0x0035 \-\> B:33:0x0028, CROSS_EDGE: B:39:0x0041 \-\> B:22:?, CROSS_EDGE: B:26:0x0017 \-\> B:32:0x0027, CROSS_EDGE: B:30:0x0025 \-\> B:22:?, CROSS_EDGE: B:29:0x0023 \-\> B:38:0x0038, CROSS_EDGE: B:31:0x0026 \-\> B:22:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0027\-0x0038: r1 'start' I\l  0x0028\-0x0038: r3 'index' I\l  0x000c\-0x0049: r0 'length' I\l  \-1 \-0x0049: r5 '$this$toBigIntegerOrNull' Ljava\/lang\/String;\l  \-1 \-0x0049: r6 'radix' I\l}"];
MethodNode -> Node_21;Node_21 -> Node_23;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_24 -> Node_28;
Node_24 -> Node_31;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_41;
Node_34 -> Node_35;
Node_35 -> Node_37;
Node_35 -> Node_40[style=dashed];
Node_37 -> Node_33;
Node_40 -> Node_36;
Node_36 -> Node_22;
Node_41 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_22;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_38;
Node_30 -> Node_22;
Node_31 -> Node_22;
}

