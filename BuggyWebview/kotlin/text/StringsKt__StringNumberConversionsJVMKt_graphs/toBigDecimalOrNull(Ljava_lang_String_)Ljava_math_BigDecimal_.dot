digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigDecimalOrNull(Ljava\/lang\/String;)Ljava\/math\/BigDecimal;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"\<this\>\")\l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|TRY_ENTER\lTryCatch #0 \{NumberFormatException \-\> 0x001e, blocks: (B:19:0x0008, B:21:0x0013), top: B:28:0x0008 \}\lCatch: NumberFormatException \-\> 0x001e\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|if (kotlin.text.StringNumberConversionsJVM.value.matches(r5) == false) goto L10\l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|TRY_LEAVE\lTryCatch #0 \{NumberFormatException \-\> 0x001e, blocks: (B:19:0x0008, B:21:0x0013), top: B:28:0x0008 \}\lCatch: NumberFormatException \-\> 0x001e\l}"];
Node_22 [shape=record,label="{22\:\ 0x001a}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|return new java.math.BigDecimal(r5)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|return null\l}"];
Node_25 [shape=record,label="{25\:\ 0x001e|ExcHandler: NumberFormatException \-\> 0x001e\l}"];
Node_27 [shape=record,label="{27\:\ 0x0021|RETURN\lORIG_RETURN\l|return null\l}"];
MethodNode[shape=record,label="{public static final java.math.BigDecimal kotlin.text.StringsKt__StringNumberConversionsJVMKt.toBigDecimalOrNull((r5v0 '$this$toBigDecimalOrNull' java.lang.String A[D('$this$toBigDecimalOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001e \-\> B:27:0x0021, CROSS_EDGE: B:20:0x0011 \-\> B:27:0x0021, CROSS_EDGE: B:28:0x0008 \-\> B:25:0x001e\lINLINE_NOT_NEEDED\lTryCatch #0 \{NumberFormatException \-\> 0x001e, blocks: (B:19:0x0008, B:21:0x0013), top: B:28:0x0008 \}\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_28;
Node_28 -> Node_19;
Node_28 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_22;
Node_21 -> Node_29;
Node_22 -> Node_30;
Node_30 -> Node_17;
Node_29 -> Node_25;
Node_31 -> Node_17;
Node_25 -> Node_27;
Node_27 -> Node_17;
}

