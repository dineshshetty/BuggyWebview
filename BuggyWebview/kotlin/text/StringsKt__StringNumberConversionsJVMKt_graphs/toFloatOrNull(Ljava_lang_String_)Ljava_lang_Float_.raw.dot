digraph "CFG forkotlin.text.StringsKt__StringNumberConversionsJVMKt.toFloatOrNull(Ljava\/lang\/String;)Ljava\/lang\/Float;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$toFloatOrNull' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:151)\l0x0007: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:285)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0008|SYNTHETIC\lEXC_TOP_SPLITTER\l}"];
Node_19 [shape=record,label="{19\:\ 0x0008|TRY_ENTER\lTryCatch #0 \{NumberFormatException \-\> 0x0020, blocks: (B:19:0x0008, B:21:0x0013), top: B:28:0x0008 \}\lCatch: NumberFormatException \-\> 0x0020\l|0x0008: SGET  (r2 I:kotlin.text.Regex) =  kotlin.text.ScreenFloatValueRegEx.value kotlin.text.Regex A[Catch: NumberFormatException \-\> 0x0020, TRY_ENTER]\l0x000a: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$toFloatOrNull' java.lang.String)]) \l0x000b: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) A[Catch: NumberFormatException \-\> 0x0020]\l0x000d: INVOKE  (r2 I:boolean) = (r2 I:kotlin.text.Regex), (r3 I:java.lang.CharSequence) type: VIRTUAL call: kotlin.text.Regex.matches(java.lang.CharSequence):boolean A[Catch: NumberFormatException \-\> 0x0020, MD:(java.lang.CharSequence):boolean (m)]\l}"];
Node_20 [shape=record,label="{20\:\ 0x0011|0x0011: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:? \l}"];
Node_21 [shape=record,label="{21\:\ 0x0013|TRY_LEAVE\lTryCatch #0 \{NumberFormatException \-\> 0x0020, blocks: (B:19:0x0008, B:21:0x0013), top: B:28:0x0008 \}\lCatch: NumberFormatException \-\> 0x0020\l|0x0013: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$toFloatOrNull' java.lang.String)])  (LINE:286)\l0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  (r4 I:float) = (r2 I:java.lang.String A[D('p0' java.lang.String)]) type: STATIC call: java.lang.Float.parseFloat(java.lang.String):float A[Catch: NumberFormatException \-\> 0x0020, MD:(java.lang.String):float throws java.lang.NumberFormatException (c)] (LINE:151)\l0x0019: INVOKE  (r1 I:java.lang.Float) = (r4 I:float) type: STATIC call: java.lang.Float.valueOf(float):java.lang.Float A[Catch: NumberFormatException \-\> 0x0020, MD:(float):java.lang.Float (c), TRY_LEAVE]\l}"];
Node_29 [shape=record,label="{29\:\ ?|SYNTHETIC\lEXC_BOTTOM_SPLITTER\l}"];
Node_30 [shape=record,label="{30\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN  (r1 I:java.lang.Float) A[SYNTHETIC] (LINE:151)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x0023: RETURN  (r1 I:java.lang.Float) A[SYNTHETIC] (LINE:151)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0020|ExcHandler: NumberFormatException \-\> 0x0020\l|0x0020: MOVE_EXCEPTION  (r2 I:java.lang.NumberFormatException A[CUSTOM_DECLARE]) =  A[DONT_INLINE, ExcHandler: NumberFormatException \-\> 0x0020] (LINE:289)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0023|RETURN\lORIG_RETURN\l|0x0023: RETURN  (r1 I:java.lang.Float)  (LINE:151)\l}"];
MethodNode[shape=record,label="{public static final java.lang.Float kotlin.text.StringsKt__StringNumberConversionsJVMKt.toFloatOrNull((r5 I:java.lang.String A[D('$this$toFloatOrNull' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x0020 \-\> B:27:0x0023, CROSS_EDGE: B:20:0x0011 \-\> B:27:0x0023, CROSS_EDGE: B:28:0x0008 \-\> B:25:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0014\-0x0019: r2 'p0' Ljava\/lang\/String;\l  0x0015\-0x0019: r3 '$i$a$\-screenFloatValue\-StringsKt__StringNumberConversionsJVMKt$toFloatOrNull$1' I\l  0x0021\-0x0022: r2 'e$iv' Ljava\/lang\/NumberFormatException;\l  0x0006\-0x0023: r0 '$i$f$screenFloatValue' I\l  \-1 \-0x0023: r5 '$this$toFloatOrNull' Ljava\/lang\/String;\lTryCatch #0 \{NumberFormatException \-\> 0x0020, blocks: (B:19:0x0008, B:21:0x0013), top: B:28:0x0008 \}\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_28;
Node_28 -> Node_19;
Node_28 -> Node_25;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_31;
Node_21 -> Node_29;
Node_21 -> Node_30;
Node_29 -> Node_25;
Node_30 -> Node_17;
Node_31 -> Node_17;
Node_25 -> Node_27;
Node_27 -> Node_17;
}

