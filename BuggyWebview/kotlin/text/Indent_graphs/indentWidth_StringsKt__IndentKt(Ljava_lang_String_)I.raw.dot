digraph "CFG forkotlin.text.StringsKt__IndentKt.indentWidth$StringsKt__IndentKt(Ljava\/lang\/String;)I" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$indentWidth' java.lang.String)])  (LINE:99)\l0x0001: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x0003: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0004: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:184)\l0x0005: INVOKE  (r3 I:int) = (r0 I:java.lang.CharSequence A[D('$this$indexOfFirst$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0009|LOOP_START\lLOOP:0: B:3:0x0009\-\>B:8:0x001a\l|0x0009: CONST  (r4 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_4 [shape=record,label="{4\:\ 0x000a|0x000a: IF  (r2 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:15:0x001d \l}"];
Node_5 [shape=record,label="{5\:\ 0x000c|0x000c: INVOKE  (r5 I:char) = (r0 I:java.lang.CharSequence A[D('$this$indexOfFirst$iv' java.lang.CharSequence)]), (r2 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:185)\l0x0010: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: INVOKE  (r7 I:boolean) = (r5 I:char A[D('it' char)]) type: STATIC call: kotlin.text.CharsKt.isWhitespace(char):boolean A[MD:(char):boolean (m)] (LINE:99)\l0x0015: ARITH  (r5 I:??[int, boolean] A[D('it' char)]) = (r7 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0017|0x0017: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:8:0x001a \l}"];
Node_8 [shape=record,label="{8\:\ 0x001a|LOOP_END\lLOOP:0: B:3:0x0009\-\>B:8:0x001a\l|0x001a: ARITH  (r2 I:int) = (r2 I:int A[D('index$iv' int)]) + (1 int)  (LINE:184)\l}"];
Node_14 [shape=record,label="{14\:\ 0x001e|SYNTHETIC\l}"];
Node_10 [shape=record,label="{10\:\ 0x001e|0x001e: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$indexOfFirst$iv' java.lang.CharSequence)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:99)\l0x001f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:122)\l}"];
Node_11 [shape=record,label="{11\:\ 0x0020|0x0020: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' int)]) != (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:?  (LINE:99)\l}"];
Node_12 [shape=record,label="{12\:\ 0x0022|0x0022: INVOKE  (r2 I:int) = (r8 I:java.lang.String A[D('$this$indentWidth' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x0026: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('it' int)]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_13 [shape=record,label="{13\:\ 0x0027|RETURN\lORIG_RETURN\l|0x0027: RETURN  (r0 I:int A[D('it' int)]) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ ?|SYNTHETIC\lRETURN\l|0x0027: RETURN  (r0 I:int A[D('it' int)]) A[SYNTHETIC]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001d|SYNTHETIC\l}"];
Node_9 [shape=record,label="{9\:\ 0x001d|0x001d: CONST  (r2 I:??[int, float, short, byte, char] A[D('index$iv' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:189)\l}"];
MethodNode[shape=record,label="{private static final int kotlin.text.StringsKt__IndentKt.indentWidth$StringsKt__IndentKt((r8 I:java.lang.String A[D('$this$indentWidth' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lBACK_EDGE: B:8:0x001a \-\> B:3:0x0009, CROSS_EDGE: B:11:0x0020 \-\> B:13:0x0027, CROSS_EDGE: B:9:0x001d \-\> B:10:0x001e\lDebug Info:\l  0x0010\-0x0015: r5 'it' C\l  0x0011\-0x0015: r6 '$i$a$\-indexOfFirst\-StringsKt__IndentKt$indentWidth$1' I\l  0x0005\-0x001d: r2 'index$iv' I\l  0x0003\-0x001e: r0 '$this$indexOfFirst$iv' Ljava\/lang\/CharSequence;\l  0x0004\-0x001e: r1 '$i$f$indexOfFirst' I\l  0x001f\-0x0027: r0 'it' I\l  0x0020\-0x0027: r1 '$i$a$\-let\-StringsKt__IndentKt$indentWidth$2' I\l  \-1 \-0x0027: r8 '$this$indentWidth' Ljava\/lang\/String;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Don't trust debug lines info. Repeating lines: [99=4]\}\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_15;
Node_5 -> Node_6;
Node_6 -> Node_8;
Node_6 -> Node_14[style=dashed];
Node_8 -> Node_3;
Node_14 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_16;
Node_12 -> Node_13;
Node_13 -> Node_1;
Node_16 -> Node_1;
Node_15 -> Node_9;
Node_9 -> Node_10;
}

