digraph "CFG forkotlin.text.StringsKt__IndentKt.prependIndent(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r11 I:java.lang.Object A[D('$this$prependIndent' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"indent\" \l0x0007: INVOKE  (r12 I:java.lang.Object A[D('indent' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('$this$prependIndent' java.lang.String)])  (LINE:85)\l0x000b: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r0 I:kotlin.sequences.Sequence) = (r0 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.lineSequence(java.lang.CharSequence):kotlin.sequences.Sequence A[MD:(java.lang.CharSequence):kotlin.sequences.Sequence\<java.lang.String\> (m)]\l0x0011: NEW_INSTANCE  (r1 I:kotlin.text.StringsKt__IndentKt$prependIndent$1) =  kotlin.text.StringsKt__IndentKt$prependIndent$1  (LINE:86)\l0x0013: INVOKE  (r1 I:kotlin.text.StringsKt__IndentKt$prependIndent$1), (r12 I:java.lang.String A[D('indent' java.lang.String)]) type: DIRECT call: kotlin.text.StringsKt__IndentKt$prependIndent$1.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (m)]\l0x0016: CHECK_CAST (r1 I:kotlin.jvm.functions.Function1) = (kotlin.jvm.functions.Function1) (r1 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r2 I:kotlin.sequences.Sequence) = (r0 I:kotlin.sequences.Sequence), (r1 I:kotlin.jvm.functions.Function1) type: STATIC call: kotlin.sequences.SequencesKt.map(kotlin.sequences.Sequence, kotlin.jvm.functions.Function1):kotlin.sequences.Sequence A[MD:\<T, R\>:(kotlin.sequences.Sequence\<? extends T\>, kotlin.jvm.functions.Function1\<? super T, ? extends R\>):kotlin.sequences.Sequence\<R\> (m)]\l0x001c: CONST_STR  (r0 I:java.lang.String) =  \"n\"  (LINE:97)\l0x001e: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x001f: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l0x0021: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0022: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0025: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0026: CONST  (r9 I:??[int, float, short, byte, char]) = (62 ??[int, float, short, byte, char]) \l0x0028: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0029: INVOKE  (r0 I:java.lang.String) = \l  (r2 I:kotlin.sequences.Sequence)\l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.lang.CharSequence)\l  (r5 I:java.lang.CharSequence)\l  (r6 I:int)\l  (r7 I:java.lang.CharSequence)\l  (r8 I:kotlin.jvm.functions.Function1)\l  (r9 I:int)\l  (r10 I:java.lang.Object)\l type: STATIC call: kotlin.sequences.SequencesKt.joinToString$default(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String A[MD:(kotlin.sequences.Sequence, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.String (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x002d|RETURN\l|0x002d: RETURN  (r0 I:java.lang.String) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__IndentKt.prependIndent((r11 I:java.lang.String A[D('$this$prependIndent' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String A[D('indent' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x002d: r11 '$this$prependIndent' Ljava\/lang\/String;\l  \-1 \-0x002d: r12 'indent' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

