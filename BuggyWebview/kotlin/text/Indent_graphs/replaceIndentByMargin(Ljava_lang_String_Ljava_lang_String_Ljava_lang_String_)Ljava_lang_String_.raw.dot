digraph "CFG forkotlin.text.StringsKt__IndentKt.replaceIndentByMargin(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r36 I:??[OBJECT, ARRAY] A[D('$this$replaceIndentByMargin' java.lang.String)]) \l0x0002: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r38 I:??[OBJECT, ARRAY] A[D('marginPrefix' java.lang.String)]) \l0x0004: CONST_STR  (r1 I:java.lang.String) =  \"\<this\>\" \l0x0006: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0009: CONST_STR  (r1 I:java.lang.String) =  \"newIndent\" \l0x000b: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r37 I:??[OBJECT, ARRAY] A[D('newIndent' java.lang.String)]) \l0x000d: INVOKE  (r8 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0010: CONST_STR  (r1 I:java.lang.String) =  \"marginPrefix\" \l0x0012: INVOKE  (r7 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0015: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY])  (LINE:34)\l0x0016: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x0018: INVOKE  (r1 I:boolean) = (r1 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.isBlank(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (m)]\l0x001c: ARITH  (r1 I:??[int, boolean]) = (r1 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_3 [shape=record,label="{3\:\ 0x001e|0x001e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x0151 \l}"];
Node_4 [shape=record,label="{4\:\ 0x0020|0x0020: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY])  (LINE:35)\l0x0021: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x0023: INVOKE  (r9 I:java.util.List) = (r1 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.lines(java.lang.CharSequence):java.util.List A[MD:(java.lang.CharSequence):java.util.List\<java.lang.String\> (m)]\l0x0027: INVOKE  (r1 I:int) = (r36 I:java.lang.String A[D('$this$replaceIndentByMargin' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:37)\l0x002b: INVOKE  (r2 I:int) = (r37 I:java.lang.String A[D('newIndent' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x002f: INVOKE  (r3 I:int) = (r9 I:java.util.List A[D('lines' java.util.List)]) type: INTERFACE call: java.util.List.size():int A[MD:():int (c)]\l0x0033: ARITH  (r2 I:int) = (r2 I:int) * (r3 I:int) \l0x0035: ARITH  (r10 I:int) = (r1 I:int) + (r2 I:int) \l0x0037: INVOKE  (r11 I:kotlin.jvm.functions.Function1) = (r37 I:java.lang.String A[D('newIndent' java.lang.String)]) type: STATIC call: kotlin.text.StringsKt__IndentKt.getIndentFunction$StringsKt__IndentKt(java.lang.String):kotlin.jvm.functions.Function1 A[MD:(java.lang.String):kotlin.jvm.functions.Function1\<java.lang.String, java.lang.String\> (m)]\l0x003b: MOVE  (r12 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('lines' java.util.List)]) \l0x003c: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x003d: INVOKE  (r14 I:int) = (r12 I:java.util.List A[D('$this$reindent$iv' java.util.List)]) type: STATIC call: kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int A[MD:\<T\>:(java.util.List\<? extends T\>):int (m)] (LINE:123)\l0x0041: MOVE  (r15 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('$this$reindent$iv' java.util.List)])  (LINE:124)\l0x0042: CHECK_CAST (r15 I:java.lang.Iterable) = (java.lang.Iterable) (r15 I:??[OBJECT, ARRAY]) \l0x0044: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0046: NEW_INSTANCE  (r1 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:125)\l0x0048: INVOKE  (r1 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x004b: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x004c: CHECK_CAST (r6 I:java.util.Collection) = (java.util.Collection) (r6 I:??[OBJECT, ARRAY]) \l0x004e: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY] A[D('$this$mapIndexedNotNull$iv$iv' java.lang.Iterable)]) \l0x0050: CONST  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0052: MOVE  (r19 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY] A[D('$this$mapIndexedNotNullTo$iv$iv$iv' java.lang.Iterable)])  (LINE:135)\l0x0054: CONST  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0056: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:136)\l0x0057: INVOKE  (r21 I:java.util.Iterator) = (r19 I:java.lang.Iterable A[D('$this$forEachIndexed$iv$iv$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:137)\l}"];
Node_5 [shape=record,label="{5\:\ 0x005b|LOOP_START\lLOOP:0: B:5:0x005b\-\>B:40:0x0110\l|0x005b: INVOKE  (r2 I:boolean) = (r21 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_6 [shape=record,label="{6\:\ 0x005f|0x005f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x0119 \l}"];
Node_7 [shape=record,label="{7\:\ 0x0061|0x0061: INVOKE  (r22 I:java.lang.Object) = (r21 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0065: ARITH  (r23 I:int) = (r1 I:int A[D('index$iv$iv$iv$iv' int)]) + (1 int) \l}"];
Node_8 [shape=record,label="{8\:\ 0x0067|0x0067: IF  (r1 I:??[int, byte, short, char] A[D('index$iv$iv$iv$iv' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:10:0x006c \l}"];
Node_9 [shape=record,label="{9\:\ 0x0069|0x0069: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_10 [shape=record,label="{10\:\ 0x006c|0x006c: MOVE  (r24 I:??[OBJECT, ARRAY]) = (r22 I:??[OBJECT, ARRAY] A[D('item$iv$iv$iv$iv' java.lang.Object)]) \l0x006e: MOVE  (r25 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv$iv' int)]) \l0x0070: CONST  (r26 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0072: MOVE  (r27 I:??[OBJECT, ARRAY]) = (r24 I:??[OBJECT, ARRAY] A[D('element$iv$iv$iv' java.lang.Object)])  (LINE:135)\l0x0074: CHECK_CAST (r27 I:java.lang.String) = (java.lang.String) (r27 I:??[OBJECT, ARRAY]) \l0x0076: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r25 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv$iv' int)]) \l0x0078: CONST  (r28 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x007a: CONST  (r29 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:138)\l}"];
Node_11 [shape=record,label="{11\:\ 0x007c|0x007c: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index$iv' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0080 \l}"];
Node_12 [shape=record,label="{12\:\ 0x007e|0x007e: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index$iv' int)]) != (r14 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastIndex$iv' int)])  \-\> B:16:0x008f \l}"];
Node_16 [shape=record,label="{16\:\ 0x008f|0x008f: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r27 I:??[OBJECT, ARRAY] A[D('value$iv' java.lang.String)])  (LINE:141)\l0x0091: CONST  (r30 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0093: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('line' java.lang.String)])  (LINE:38)\l0x0094: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x0096: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0097: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:142)\l0x0098: INVOKE  (r0 I:int) = (r1 I:java.lang.CharSequence A[D('$this$indexOfFirst$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x009c|LOOP_START\lLOOP:1: B:17:0x009c\-\>B:22:0x00b0\l|0x009c: MOVE  (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$indexOfFirst' int)]) \l0x009e: CONST  (r2 I:??[int, float, short, byte, char] A[D('$i$f$indexOfFirst' int)]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_18 [shape=record,label="{18\:\ 0x009f|0x009f: IF  (r3 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:49:0x00b5 \l}"];
Node_19 [shape=record,label="{19\:\ 0x00a1|0x00a1: INVOKE  (r32 I:char) = (r1 I:java.lang.CharSequence A[D('$this$indexOfFirst$iv' java.lang.CharSequence)]), (r3 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:143)\l0x00a5: CONST  (r33 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a7: INVOKE  (r34 I:boolean) = (r32 I:char A[D('it' char)]) type: STATIC call: kotlin.text.CharsKt.isWhitespace(char):boolean A[MD:(char):boolean (m)] (LINE:38)\l0x00ab: ARITH  (r32 I:??[int, boolean] A[D('it' char)]) = (r34 I:??[int, boolean, short, byte, char]) ^ (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_20 [shape=record,label="{20\:\ 0x00ad|0x00ad: IF  (r32 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x00b0 \l}"];
Node_22 [shape=record,label="{22\:\ 0x00b0|LOOP_END\lLOOP:1: B:17:0x009c\-\>B:22:0x00b0\l|0x00b0: ARITH  (r3 I:int) = (r3 I:int A[D('index$iv' int)]) + (1 int)  (LINE:142)\l0x00b2: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$indexOfFirst' int)]) \l}"];
Node_48 [shape=record,label="{48\:\ 0x00b6|SYNTHETIC\l}"];
Node_24 [shape=record,label="{24\:\ 0x00b6|0x00b6: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:38)\l}"];
Node_25 [shape=record,label="{25\:\ 0x00b8|0x00b8: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('firstNonWhitespaceIndex' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:27:0x00c1  (LINE:41)\l}"];
Node_26 [shape=record,label="{26\:\ 0x00ba|0x00ba: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('line' java.lang.String)]) \l0x00bb: MOVE  (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)]) \l0x00bd: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) \l0x00be: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r29 I:??[OBJECT, ARRAY]) \l}"];
Node_32 [shape=record,label="{32\:\ 0x00f7|0x00f7: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x0103 \l}"];
Node_33 [shape=record,label="{33\:\ 0x00f9|0x00f9: INVOKE  (r0 I:java.lang.Object) = \l  (r11 I:kotlin.jvm.functions.Function1 A[D('indentAddFunction$iv' kotlin.jvm.functions.Function1)])\l  (r1 I:java.lang.Object)\l type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x00fd: MOVE  (r29 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY])  (LINE:141)\l0x00ff: CHECK_CAST (r29 I:java.lang.String) = (java.lang.String) (r29 I:??[OBJECT, ARRAY]) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0101|0x0101: IF  (r29 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:37:0x0106 \l}"];
Node_37 [shape=record,label="{37\:\ 0x0106|0x0106: IF  (r29 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:47:0x0110 \l}"];
Node_38 [shape=record,label="{38\:\ 0x0108|0x0108: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r29 I:??[OBJECT, ARRAY]) \l0x010a: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:148)\l0x010b: INVOKE  \l  (r7 I:java.util.Collection A[D('destination$iv$iv$iv' java.util.Collection)])\l  (r0 I:java.lang.Object A[D('it$iv$iv$iv' java.lang.Object)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:135)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0110|SYNTHETIC\l}"];
Node_40 [shape=record,label="{40\:\ 0x0110|LOOP_END\lLOOP:0: B:5:0x005b\-\>B:40:0x0110\l|0x0110: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r36 I:??[OBJECT, ARRAY] A[D('$this$replaceIndentByMargin' java.lang.String)])  (LINE:137)\l0x0112: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) \l0x0113: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv$iv$iv' int)]) \l0x0115: MOVE  (r7 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) = (r38 I:??[OBJECT, ARRAY] A[D('marginPrefix' java.lang.String)]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x0110|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0103|0x0103: MOVE  (r29 I:??[OBJECT, ARRAY]) = (r27 I:??[OBJECT, ARRAY] A[D('value$iv' java.lang.String)]) \l}"];
Node_27 [shape=record,label="{27\:\ 0x00c1|0x00c1: CONST  (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:42)\l0x00c3: CONST  (r32 I:??[int, float, short, byte, char]) = (4 ??[int, float, short, byte, char]) \l0x00c5: CONST  (r33 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00c7: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('line' java.lang.String)]) \l0x00c8: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r38 I:??[OBJECT, ARRAY] A[D('marginPrefix' java.lang.String)]) \l0x00ca: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('firstNonWhitespaceIndex' int)]) \l0x00cb: MOVE  (r35 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('line' java.lang.String)]) \l0x00cd: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('line' java.lang.String)]) = (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00cf: MOVE  (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)]) \l0x00d1: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)]) = (r32 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00d3: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) \l0x00d4: MOVE  (r6 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) = (r33 I:??[OBJECT, ARRAY]) \l0x00d6: INVOKE  (r1 I:boolean) = (r1 I:java.lang.String), (r2 I:java.lang.String), (r3 I:int), (r4 I:boolean), (r5 I:int), (r6 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.startsWith$default(java.lang.String, java.lang.String, int, boolean, int, java.lang.Object):boolean A[MD:(java.lang.String, java.lang.String, int, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x00da|0x00da: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x00f2 \l}"];
Node_29 [shape=record,label="{29\:\ 0x00dc|0x00dc: INVOKE  (r1 I:int) = (r38 I:java.lang.String A[D('marginPrefix' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x00e0: ARITH  (r1 I:int) = (r1 I:int) + (r0 I:int A[D('firstNonWhitespaceIndex' int)]) \l0x00e1: CONST_STR  (r2 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.String\" \l0x00e3: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r35 I:??[OBJECT, ARRAY] A[D('line' java.lang.String)]) \l0x00e5: INVOKE  (r3 I:java.lang.Object A[D('line' java.lang.String)]), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x00e8: INVOKE  (r1 I:java.lang.String) = (r3 I:java.lang.String A[D('line' java.lang.String)]), (r1 I:int) type: VIRTUAL call: java.lang.String.substring(int):java.lang.String A[MD:(int):java.lang.String (c)]\l0x00ec: CONST_STR  (r2 I:java.lang.String) =  \"this as java.lang.String).substring(startIndex)\" \l0x00ee: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x00f2|0x00f2: MOVE  (r3 I:??[OBJECT, ARRAY] A[D('line' java.lang.String)]) = (r35 I:??[OBJECT, ARRAY] A[D('line' java.lang.String)])  (LINE:43)\l0x00f4: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r29 I:??[OBJECT, ARRAY]) \l}"];
Node_49 [shape=record,label="{49\:\ 0x00b5|SYNTHETIC\l}"];
Node_23 [shape=record,label="{23\:\ 0x00b5|0x00b5: CONST  (r3 I:??[int, float, short, byte, char] A[D('index$iv' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:147)\l}"];
Node_13 [shape=record,label="{13\:\ 0x0080|0x0080: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r27 I:??[OBJECT, ARRAY] A[D('value$iv' java.lang.String)]) \l0x0082: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x0084: INVOKE  (r1 I:boolean) = (r1 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.isBlank(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (m)]\l}"];
Node_14 [shape=record,label="{14\:\ 0x0088|0x0088: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:16:0x008f \l}"];
Node_15 [shape=record,label="{15\:\ 0x008a|0x008a: MOVE  (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv' int)])  (LINE:139)\l0x008c: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) \l}"];
Node_45 [shape=record,label="{45\:\ 0x0119|SYNTHETIC\l}"];
Node_41 [shape=record,label="{41\:\ 0x0119|0x0119: MOVE  (r7 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) = (r6 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)])  (LINE:149)\l0x011b: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('destination$iv$iv$iv' java.util.Collection)]) \l0x011c: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l0x011f: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0121: CHECK_CAST (r17 I:java.lang.Iterable) = (java.lang.Iterable) (r17 I:??[OBJECT, ARRAY]) \l0x0123: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:151)\l0x0125: INVOKE  (r0 I:java.lang.StringBuilder), (r10 I:int A[D('resultSizeEstimate$iv' int)]) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l0x0128: MOVE  (r18 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x012a: CHECK_CAST (r18 I:java.lang.Appendable) = (java.lang.Appendable) (r18 I:??[OBJECT, ARRAY]) \l0x012c: CONST_STR  (r0 I:java.lang.String) =  \"n\" \l0x012e: MOVE  (r19 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0130: CHECK_CAST (r19 I:java.lang.CharSequence) = (java.lang.CharSequence) (r19 I:??[OBJECT, ARRAY]) \l0x0132: CONST  (r20 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0134: CONST  (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0136: CONST  (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0138: CONST  (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x013a: CONST  (r24 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x013c: CONST  (r25 I:??[int, float, short, byte, char]) = (124(0x7c, float:1.74E\-43) ??[int, float, short, byte, char]) \l0x013e: CONST  (r26 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0140: INVOKE  (r0 I:java.lang.Appendable) = \l  (r17 I:java.lang.Iterable)\l  (r18 I:java.lang.Appendable)\l  (r19 I:java.lang.CharSequence)\l  (r20 I:java.lang.CharSequence)\l  (r21 I:java.lang.CharSequence)\l  (r22 I:int)\l  (r23 I:java.lang.CharSequence)\l  (r24 I:kotlin.jvm.functions.Function1)\l  (r25 I:int)\l  (r26 I:java.lang.Object)\l type: STATIC call: kotlin.collections.CollectionsKt.joinTo$default(java.lang.Iterable, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.Appendable A[MD:(java.lang.Iterable, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.Appendable (m)]\l0x0144: CHECK_CAST (r0 I:java.lang.StringBuilder) = (java.lang.StringBuilder) (r0 I:??[OBJECT, ARRAY]) \l0x0146: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:152)\l0x014a: CONST_STR  (r1 I:java.lang.String) =  \"mapIndexedNotNull \{ inde…\"n\")n        .toString()\" \l0x014c: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0150|RETURN\l|0x0150: RETURN  (r0 I:java.lang.String)  (LINE:37)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0151|0x0151: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:122)\l0x0153: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException A[D('$i$a$\-require\-StringsKt__IndentKt$replaceIndentByMargin$1' int)]) =  java.lang.IllegalArgumentException \l0x0155: CONST_STR  (r1 I:java.lang.String) =  \"marginPrefix must be non\-blank string.\" \l0x0157: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x015b: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_44 [shape=record,label="{44\:\ 0x015e|0x015e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__IndentKt.replaceIndentByMargin((r36 I:java.lang.String A[D('$this$replaceIndentByMargin' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37 I:java.lang.String A[D('newIndent' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r38 I:java.lang.String A[D('marginPrefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:40:0x0110 \-\> B:5:0x005b, CROSS_EDGE: B:37:0x0106 \-\> B:40:0x0110, BACK_EDGE: B:22:0x00b0 \-\> B:17:0x009c, CROSS_EDGE: B:35:0x0103 \-\> B:37:0x0106, CROSS_EDGE: B:34:0x0101 \-\> B:37:0x0106, CROSS_EDGE: B:32:0x00f7 \-\> B:35:0x0103, CROSS_EDGE: B:29:0x00dc \-\> B:32:0x00f7, CROSS_EDGE: B:30:0x00f2 \-\> B:32:0x00f7, CROSS_EDGE: B:23:0x00b5 \-\> B:24:0x00b6, CROSS_EDGE: B:12:0x007e \-\> B:16:0x008f, CROSS_EDGE: B:11:0x007c \-\> B:13:0x0080, CROSS_EDGE: B:8:0x0067 \-\> B:10:0x006c, CROSS_EDGE: B:44:0x015e \-\> B:1:?\lDebug Info:\l  0x0057\-0x0067: r1 'index$iv$iv$iv$iv' I\l  0x006c\-0x0070: r1 'index$iv$iv$iv' I\l  0x0097\-0x009e: r2 '$i$f$indexOfFirst' I\l  0x00a5\-0x00ab: r32 'it' C\l  0x00a7\-0x00ab: r33 '$i$a$\-indexOfFirst\-StringsKt__IndentKt$replaceIndentByMargin$2$firstNonWhitespaceIndex$1' I\l  0x0098\-0x00b5: r3 'index$iv' I\l  0x0096\-0x00b6: r1 '$this$indexOfFirst$iv' Ljava\/lang\/CharSequence;\l  0x009e\-0x00b6: r31 '$i$f$indexOfFirst' I\l  0x0091\-0x00cd: r4 'line' Ljava\/lang\/String;\l  0x0078\-0x00d1: r5 'index$iv' I\l  0x004e\-0x00d4: r6 'destination$iv$iv$iv' Ljava\/util\/Collection;\l  0x00cd\-0x00e5: r35 'line' Ljava\/lang\/String;\l  0x00e5\-0x00f2: r3 'line' Ljava\/lang\/String;\l  0x00f2\-0x00f4: r35 'line' Ljava\/lang\/String;\l  0x00b7\-0x00f7: r0 'firstNonWhitespaceIndex' I\l  0x00f4\-0x00f7: r3 'line' Ljava\/lang\/String;\l  0x0093\-0x00f7: r30 '$i$a$\-reindent\-StringsKt__IndentKt$replaceIndentByMargin$2' I\l  0x0076\-0x0106: r27 'value$iv' Ljava\/lang\/String;\l  0x007a\-0x0106: r28 '$i$a$\-mapIndexedNotNull\-StringsKt__IndentKt$reindent$1$iv' I\l  0x00d1\-0x0106: r31 'index$iv' I\l  0x010a\-0x010e: r0 'it$iv$iv$iv' Ljava\/lang\/Object;\l  0x010b\-0x010e: r1 '$i$a$\-let\-CollectionsKt___CollectionsKt$mapIndexedNotNullTo$1$1$iv$iv$iv' I\l  0x0065\-0x0110: r22 'item$iv$iv$iv$iv' Ljava\/lang\/Object;\l  0x006e\-0x0110: r24 'element$iv$iv$iv' Ljava\/lang\/Object;\l  0x0070\-0x0110: r25 'index$iv$iv$iv' I\l  0x0072\-0x0110: r26 '$i$a$\-forEachIndexed\-CollectionsKt___CollectionsKt$mapIndexedNotNullTo$1$iv$iv$iv' I\l  0x00d4\-0x0119: r7 'destination$iv$iv$iv' Ljava\/util\/Collection;\l  0x0067\-0x0119: r23 'index$iv$iv$iv$iv' I\l  0x0119\-0x011a: r1 'index$iv$iv$iv$iv' I\l  0x0119\-0x011a: r6 'destination$iv$iv$iv' Ljava\/util\/Collection;\l  0x0054\-0x011a: r19 '$this$forEachIndexed$iv$iv$iv$iv' Ljava\/lang\/Iterable;\l  0x0056\-0x011a: r20 '$i$f$forEachIndexed' I\l  0x011a\-0x011b: r7 'destination$iv$iv$iv' Ljava\/util\/Collection;\l  0x0050\-0x011b: r17 '$this$mapIndexedNotNullTo$iv$iv$iv' Ljava\/lang\/Iterable;\l  0x0052\-0x011b: r18 '$i$f$mapIndexedNotNullTo' I\l  0x0044\-0x011f: r15 '$this$mapIndexedNotNull$iv$iv' Ljava\/lang\/Iterable;\l  0x0046\-0x011f: r16 '$i$f$mapIndexedNotNull' I\l  0x0037\-0x0150: r10 'resultSizeEstimate$iv' I\l  0x003b\-0x0150: r11 'indentAddFunction$iv' Lkotlin\/jvm\/functions\/Function1;\l  0x003c\-0x0150: r12 '$this$reindent$iv' Ljava\/util\/List;\l  0x003d\-0x0150: r13 '$i$f$reindent' I\l  0x0041\-0x0150: r14 'lastIndex$iv' I\l  0x0027\-0x0151: r9 'lines' Ljava\/util\/List;\l  0x0152\-0x0153: r0 '$i$a$\-require\-StringsKt__IndentKt$replaceIndentByMargin$1' I\l  \-1 \-0x015e: r36 '$this$replaceIndentByMargin' Ljava\/lang\/String;\l  \-1 \-0x015e: r37 'newIndent' Ljava\/lang\/String;\l  \-1 \-0x015e: r38 'marginPrefix' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4[style=dashed];
Node_3 -> Node_43;
Node_4 -> Node_5;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_45;
Node_7 -> Node_8;
Node_8 -> Node_9[style=dashed];
Node_8 -> Node_10;
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19[style=dashed];
Node_18 -> Node_49;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_20 -> Node_48[style=dashed];
Node_22 -> Node_17;
Node_48 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_27;
Node_26 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_47;
Node_38 -> Node_46;
Node_46 -> Node_40;
Node_40 -> Node_5;
Node_47 -> Node_40;
Node_35 -> Node_37;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_29 -> Node_32;
Node_30 -> Node_32;
Node_49 -> Node_23;
Node_23 -> Node_24;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_37;
Node_45 -> Node_41;
Node_41 -> Node_42;
Node_42 -> Node_1;
Node_43 -> Node_44;
Node_44 -> Node_1;
}

