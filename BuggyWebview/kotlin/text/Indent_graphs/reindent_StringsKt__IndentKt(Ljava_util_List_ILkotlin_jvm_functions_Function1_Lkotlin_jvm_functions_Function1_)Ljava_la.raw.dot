digraph "CFG forkotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt(Ljava\/util\/List;ILkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0001: INVOKE  (r1 I:int) = (r21 I:java.util.List A[D('$this$reindent' java.util.List)]) type: STATIC call: kotlin.collections.CollectionsKt.getLastIndex(java.util.List):int A[MD:\<T\>:(java.util.List\<? extends T\>):int (m)] (LINE:111)\l0x0005: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r21 I:??[OBJECT, ARRAY] A[D('$this$reindent' java.util.List)])  (LINE:112)\l0x0007: CHECK_CAST (r2 I:java.lang.Iterable) = (java.lang.Iterable) (r2 I:??[OBJECT, ARRAY]) \l0x0009: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:190)\l0x000c: INVOKE  (r4 I:java.util.ArrayList) type: DIRECT call: java.util.ArrayList.\<init\>():void A[MD:():void (c)]\l0x000f: CHECK_CAST (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:??[OBJECT, ARRAY]) \l0x0011: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY] A[D('$this$mapIndexedNotNull$iv' java.lang.Iterable)]) \l0x0012: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$mapIndexedNotNullTo$iv$iv' java.lang.Iterable)])  (LINE:200)\l0x0014: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:201)\l0x0016: INVOKE  (r10 I:java.util.Iterator) = (r7 I:java.lang.Iterable A[D('$this$forEachIndexed$iv$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:202)\l}"];
Node_3 [shape=record,label="{3\:\ 0x001a|LOOP_START\lLOOP:0: B:3:0x001a\-\>B:25:0x007e\l|0x001a: INVOKE  (r11 I:boolean) = (r10 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_4 [shape=record,label="{4\:\ 0x001e|0x001e: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0084 \l}"];
Node_5 [shape=record,label="{5\:\ 0x0020|0x0020: INVOKE  (r11 I:java.lang.Object) = (r10 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0024: ARITH  (r12 I:int) = (r9 I:int A[D('index$iv$iv$iv' int)]) + (1 int) \l}"];
Node_6 [shape=record,label="{6\:\ 0x0026|0x0026: IF  (r9 I:??[int, byte, short, char] A[D('index$iv$iv$iv' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:8:0x002b \l}"];
Node_7 [shape=record,label="{7\:\ 0x0028|0x0028: INVOKE   type: STATIC call: kotlin.collections.CollectionsKt.throwIndexOverflow():void A[MD:():void (m)]\l}"];
Node_8 [shape=record,label="{8\:\ 0x002b|0x002b: MOVE  (r13 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('item$iv$iv$iv' java.lang.Object)]) \l0x002c: CONST  (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002d: MOVE  (r15 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('element$iv$iv' java.lang.Object)])  (LINE:200)\l0x002e: CHECK_CAST (r15 I:java.lang.String) = (java.lang.String) (r15 I:??[OBJECT, ARRAY]) \l0x0030: MOVE  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv' int)]) \l0x0032: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l0x0034: CONST  (r16 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0036: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$reindent' int)])  (LINE:113)\l0x0038: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$reindent' int)]) = (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l}"];
Node_9 [shape=record,label="{9\:\ 0x003a|0x003a: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:11:0x003e \l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|0x003c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('lastIndex' int)])  \-\> B:14:0x0055 \l}"];
Node_14 [shape=record,label="{14\:\ 0x0055|0x0055: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)])  (LINE:116)\l0x0057: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('index' int)]) = (r24 I:??[OBJECT, ARRAY] A[D('indentCutFunction' kotlin.jvm.functions.Function1)]) \l0x0059: INVOKE  (r19 I:java.lang.Object) = (r0 I:kotlin.jvm.functions.Function1 A[D('index' int)]), (r15 I:java.lang.Object A[D('value' java.lang.String)]) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x005d: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r19 I:??[OBJECT, ARRAY]) \l0x005f: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_15 [shape=record,label="{15\:\ 0x0061|0x0061: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x0070 \l}"];
Node_16 [shape=record,label="{16\:\ 0x0063|0x0063: MOVE  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastIndex' int)]) \l0x0065: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('lastIndex' int)]) = (r23 I:??[OBJECT, ARRAY] A[D('indentAddFunction' kotlin.jvm.functions.Function1)]) \l0x0067: INVOKE  (r0 I:java.lang.Object) = (r1 I:kotlin.jvm.functions.Function1 A[D('lastIndex' int)]), (r0 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x006b: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x006d|0x006d: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0076 \l}"];
Node_20 [shape=record,label="{20\:\ 0x0074|0x0074: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY] A[D('value' java.lang.String)]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0076|0x0076: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x007e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0078|0x0078: CONST  (r15 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:203)\l0x0079: INVOKE  \l  (r4 I:java.util.Collection A[D('destination$iv$iv' java.util.Collection)])\l  (r0 I:java.lang.Object A[D('it$iv$iv' java.lang.Object)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)] (LINE:200)\l}"];
Node_29 [shape=record,label="{29\:\ 0x007e|SYNTHETIC\l}"];
Node_25 [shape=record,label="{25\:\ 0x007e|LOOP_END\lLOOP:0: B:3:0x001a\-\>B:25:0x007e\l|0x007e: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv' int)]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index$iv$iv$iv' int)])  (LINE:202)\l0x007f: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$reindent' int)]) \l0x0081: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastIndex' int)]) \l}"];
Node_30 [shape=record,label="{30\:\ 0x007e|SYNTHETIC\l}"];
Node_19 [shape=record,label="{19\:\ 0x0070|0x0070: MOVE  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastIndex' int)]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastIndex' int)]) \l0x0072: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('lastIndex' int)]) = (r23 I:??[OBJECT, ARRAY] A[D('indentAddFunction' kotlin.jvm.functions.Function1)]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x003e|0x003e: MOVE  (r17 I:??[OBJECT, ARRAY]) = (r15 I:??[OBJECT, ARRAY] A[D('value' java.lang.String)]) \l0x0040: CHECK_CAST (r17 I:java.lang.CharSequence) = (java.lang.CharSequence) (r17 I:??[OBJECT, ARRAY]) \l0x0042: INVOKE  (r17 I:boolean) = (r17 I:java.lang.CharSequence) type: STATIC call: kotlin.text.StringsKt.isBlank(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (m)]\l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|0x0046: IF  (r17 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:14:0x0055 \l}"];
Node_13 [shape=record,label="{13\:\ 0x0048|0x0048: CONST  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:114)\l0x004a: MOVE  (r19 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('lastIndex' int)]) \l0x004c: MOVE  (r1 I:??[OBJECT, ARRAY] A[D('lastIndex' int)]) = (r23 I:??[OBJECT, ARRAY] A[D('indentAddFunction' kotlin.jvm.functions.Function1)]) \l0x004e: MOVE  (r20 I:??[OBJECT, ARRAY]) = (r17 I:??[OBJECT, ARRAY]) \l0x0050: MOVE  (r17 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l0x0052: MOVE  (r0 I:??[OBJECT, ARRAY] A[D('index' int)]) = (r20 I:??[OBJECT, ARRAY]) \l}"];
Node_28 [shape=record,label="{28\:\ 0x0084|SYNTHETIC\l}"];
Node_26 [shape=record,label="{26\:\ 0x0084|0x0084: MOVE  (r18 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$reindent' int)]) = (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$i$f$reindent' int)])  (LINE:204)\l0x0087: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('destination$iv$iv' java.util.Collection)]) \l0x0088: CHECK_CAST (r0 I:java.util.List) = (java.util.List) (r0 I:??[OBJECT, ARRAY]) \l0x008b: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x008c: CHECK_CAST (r4 I:java.lang.Iterable) = (java.lang.Iterable) (r4 I:??[OBJECT, ARRAY]) \l0x008e: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:118)\l0x0090: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('resultSizeEstimate' int)]) \l0x0092: INVOKE  (r0 I:java.lang.StringBuilder), (r2 I:int) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l0x0095: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x0096: CHECK_CAST (r5 I:java.lang.Appendable) = (java.lang.Appendable) (r5 I:??[OBJECT, ARRAY]) \l0x0098: CONST_STR  (r0 I:java.lang.String) =  \"n\" \l0x009a: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x009b: CHECK_CAST (r6 I:java.lang.CharSequence) = (java.lang.CharSequence) (r6 I:??[OBJECT, ARRAY]) \l0x009d: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x009e: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x009f: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a0: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a1: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a2: CONST  (r12 I:??[int, float, short, byte, char]) = (124(0x7c, float:1.74E\-43) ??[int, float, short, byte, char]) \l0x00a4: CONST  (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x00a5: INVOKE  (r0 I:java.lang.Appendable) = \l  (r4 I:java.lang.Iterable)\l  (r5 I:java.lang.Appendable)\l  (r6 I:java.lang.CharSequence)\l  (r7 I:java.lang.CharSequence)\l  (r8 I:java.lang.CharSequence)\l  (r9 I:int)\l  (r10 I:java.lang.CharSequence)\l  (r11 I:kotlin.jvm.functions.Function1)\l  (r12 I:int)\l  (r13 I:java.lang.Object)\l type: STATIC call: kotlin.collections.CollectionsKt.joinTo$default(java.lang.Iterable, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.Appendable A[MD:(java.lang.Iterable, java.lang.Appendable, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, int, java.lang.CharSequence, kotlin.jvm.functions.Function1, int, java.lang.Object):java.lang.Appendable (m)]\l0x00a9: CHECK_CAST (r0 I:java.lang.StringBuilder) = (java.lang.StringBuilder) (r0 I:??[OBJECT, ARRAY]) \l0x00ab: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:119)\l0x00af: CONST_STR  (r3 I:java.lang.String) =  \"mapIndexedNotNull \{ inde…\"n\")n        .toString()\" \l0x00b1: INVOKE  (r0 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x00b4|RETURN\l|0x00b4: RETURN  (r0 I:java.lang.String)  (LINE:112)\l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.lang.String kotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt((r21 I:java.util.List\<java.lang.String\> A[D('$this$reindent' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22 I:int A[D('resultSizeEstimate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23 I:kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[D('indentAddFunction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24 I:kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[D('indentCutFunction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:25:0x007e \-\> B:3:0x001a, CROSS_EDGE: B:22:0x0076 \-\> B:25:0x007e, CROSS_EDGE: B:20:0x0074 \-\> B:22:0x0076, CROSS_EDGE: B:17:0x006d \-\> B:22:0x0076, CROSS_EDGE: B:19:0x0070 \-\> B:20:0x0074, CROSS_EDGE: B:10:0x003c \-\> B:14:0x0055, CROSS_EDGE: B:9:0x003a \-\> B:11:0x003e, CROSS_EDGE: B:6:0x0026 \-\> B:8:0x002b\lDebug Info:\l  0x0016\-0x0026: r9 'index$iv$iv$iv' I\l  0x0032\-0x0034: r16 'index' I\l  0x0034\-0x003a: r17 'index' I\l  0x0001\-0x003a: r0 '$i$f$reindent' I\l  0x003a\-0x0059: r0 'index' I\l  0x0005\-0x0067: r1 'lastIndex' I\l  0x0067\-0x0070: r19 'lastIndex' I\l  0x0070\-0x0074: r1 'lastIndex' I\l  0x0030\-0x0076: r15 'value' Ljava\/lang\/String;\l  0x0036\-0x0076: r16 '$i$a$\-mapIndexedNotNull\-StringsKt__IndentKt$reindent$1' I\l  0x0059\-0x0076: r17 'index' I\l  0x0078\-0x007c: r0 'it$iv$iv' Ljava\/lang\/Object;\l  0x0079\-0x007c: r15 '$i$a$\-let\-CollectionsKt___CollectionsKt$mapIndexedNotNullTo$1$1$iv$iv' I\l  0x002b\-0x007e: r9 'index$iv$iv' I\l  0x0024\-0x007e: r11 'item$iv$iv$iv' Ljava\/lang\/Object;\l  0x002c\-0x007e: r13 'element$iv$iv' Ljava\/lang\/Object;\l  0x002d\-0x007e: r14 '$i$a$\-forEachIndexed\-CollectionsKt___CollectionsKt$mapIndexedNotNullTo$1$iv$iv' I\l  0x0026\-0x0084: r12 'index$iv$iv$iv' I\l  0x003a\-0x0084: r18 '$i$f$reindent' I\l  0x0074\-0x0084: r19 'lastIndex' I\l  0x0084\-0x0086: r0 '$i$f$reindent' I\l  0x0014\-0x0086: r7 '$this$forEachIndexed$iv$iv$iv' Ljava\/lang\/Iterable;\l  0x0015\-0x0086: r8 '$i$f$forEachIndexed' I\l  0x0084\-0x0086: r9 'index$iv$iv$iv' I\l  0x0011\-0x0087: r4 'destination$iv$iv' Ljava\/util\/Collection;\l  0x0012\-0x0087: r5 '$this$mapIndexedNotNullTo$iv$iv' Ljava\/lang\/Iterable;\l  0x0013\-0x0087: r6 '$i$f$mapIndexedNotNullTo' I\l  0x0009\-0x008b: r2 '$this$mapIndexedNotNull$iv' Ljava\/lang\/Iterable;\l  0x000a\-0x008b: r3 '$i$f$mapIndexedNotNull' I\l  0x0084\-0x00b4: r1 'lastIndex' I\l  0x0086\-0x00b4: r18 '$i$f$reindent' I\l  \-1 \-0x00b4: r21 '$this$reindent' Ljava\/util\/List;\l  \-1 \-0x00b4: r22 'resultSizeEstimate' I\l  \-1 \-0x00b4: r23 'indentAddFunction' Lkotlin\/jvm\/functions\/Function1;\l  \-1 \-0x00b4: r24 'indentCutFunction' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/util\/List\<Ljava\/lang\/String;\>;ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/String;Ljava\/lang\/String;\>;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/String;Ljava\/lang\/String;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_4;
Node_4 -> Node_5[style=dashed];
Node_4 -> Node_28;
Node_5 -> Node_6;
Node_6 -> Node_7[style=dashed];
Node_6 -> Node_8;
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11[style=dashed];
Node_10 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_19;
Node_16 -> Node_17;
Node_17 -> Node_20[style=dashed];
Node_17 -> Node_22;
Node_20 -> Node_22;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_30;
Node_23 -> Node_29;
Node_29 -> Node_25;
Node_25 -> Node_3;
Node_30 -> Node_25;
Node_19 -> Node_20;
Node_11 -> Node_12;
Node_12 -> Node_13[style=dashed];
Node_12 -> Node_14;
Node_13 -> Node_22;
Node_28 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_1;
}

