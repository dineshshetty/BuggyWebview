digraph "CFG forkotlin.text.StringsKt__IndentKt.replaceIndentByMargin(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_1787169173 {
label = "R(2:1|(2:(4:3|(6:6|(1:8)|9|(1:39)(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))|(1:26)(0)|28)|41|42)|(1:45))) | DECL_VAR: java.lang.Appendable null, java.util.Collection destination$iv$iv$iv, java.lang.String null\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r36, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r37, \"newIndent\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r38, \"marginPrefix\")\l}"];
subgraph cluster_Region_804220486 {
label = "R(2:(4:3|(6:6|(1:8)|9|(1:39)(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))|(1:26)(0)|28)|41|42)|(1:45))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1533304771 {
label = "IF [B:3:0x001e] THEN: R(4:3|(6:6|(1:8)|9|(1:39)(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))|(1:26)(0)|28)|41|42) ELSE: null";
node [shape=record,color=blue];
Node_3 [shape=record,label="{3\:\ 0x001e|if ((!kotlin.text.StringsKt.isBlank(r38)) == true) goto L3\l}"];
subgraph cluster_Region_202408036 {
label = "R(4:3|(6:6|(1:8)|9|(1:39)(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))|(1:26)(0)|28)|41|42)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x0020|java.util.List java.util.List r9 = kotlin.text.StringsKt.lines(r36)\lint int r10 = r36.length() + (r37.length() * r9.size())\lkotlin.jvm.functions.Function1 kotlin.jvm.functions.Function1 r11 = getIndentFunction$StringsKt__IndentKt(r37)\lint int r14 = kotlin.collections.CollectionsKt.getLastIndex(r9)\ljava.lang.Iterable java.util.List r15 = r9\ljava.util.Collection java.util.Collection r6 = new java.util.ArrayList()\lint r1 = 0\ljava.util.Iterator r21 = r15.iterator()\l\l}"];
subgraph cluster_LoopRegion_1035313822 {
label = "LOOP:0: (6:6|(1:8)|9|(1:39)(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))|(1:26)(0)|28)";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x005f|java.lang.Object \lif (r21.hasNext() != false) goto L6\l}"];
subgraph cluster_Region_2047839757 {
label = "R(6:6|(1:8)|9|(1:39)(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))|(1:26)(0)|28)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0061|java.lang.Object r22 = r21.next()\lint int r23 = r1 + 1\l}"];
subgraph cluster_IfRegion_1448644110 {
label = "IF [B:8:0x0067] THEN: R(1:8) ELSE: null";
node [shape=record,color=blue];
Node_8 [shape=record,label="{8\:\ 0x0067|if (r1 \< 0) goto L8\l}"];
subgraph cluster_Region_1730530844 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x0069|kotlin.collections.CollectionsKt.throwIndexOverflow()\l}"];
}
}
Node_10 [shape=record,label="{10\:\ 0x006c|int r25 = r1\ljava.lang.String java.lang.String r27 = (java.lang.String) r22\ljava.lang.String r29 = null\l}"];
subgraph cluster_IfRegion_126235535 {
label = "IF [B:11:0x007c, B:12:0x007e, B:14:0x0088] THEN: R(1:39) ELSE: R(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))";
node [shape=record,color=blue];
Node_11 [shape=record,label="{11\:\ 0x007c|if (r25 == 0) goto L37\l}"];
Node_12 [shape=record,label="{12\:\ 0x007e|ADDED_TO_REGION\l|if (r25 == r14) goto L37\l}"];
Node_14 [shape=record,label="{14\:\ 0x0088|ADDED_TO_REGION\l|if (kotlin.text.StringsKt.isBlank(r27) == true) goto L39\l}"];
subgraph cluster_Region_1922314888 {
label = "R(1:39)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x008a|r7 = r6\l}"];
}
subgraph cluster_Region_84670015 {
label = "R(5:12|(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))|19|(1:21)(2:31|(1:34)(1:33))|(1:30))";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x008f|java.lang.CharSequence java.lang.String r1 = r27\lint r2 = 0\lint r3 = 0\lint int r0 = r1.length()\l}"];
subgraph cluster_LoopRegion_871104992 {
label = "LOOP:1: (2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))";
node [shape=record,color=blue];
subgraph cluster_Region_674371433 {
label = "R(2:13|(2:15|(2:(1:18)|(1:17)))(2:36|1))";
node [shape=record,color=blue];
Node_17 [shape=record,label="{17\:\ 0x009c|LOOP_START\lLOOP:1: B:17:0x009c\-\>B:22:0x00b0\lPHI: r2 r3 \l  PHI: (r2v4 '$i$f$indexOfFirst' int) = (r2v3 '$i$f$indexOfFirst' int), (r2v9 '$i$f$indexOfFirst' int) binds: [B:16:0x008f, B:22:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v2 'index$iv' int) = (r3v1 'index$iv' int), (r3v9 'index$iv' int) binds: [B:16:0x008f, B:22:0x00b0] A[DONT_GENERATE, DONT_INLINE]\l|int r31 = r2\l}"];
subgraph cluster_IfRegion_392703190 {
label = "IF [B:18:0x009f] THEN: R(2:15|(2:(1:18)|(1:17))) ELSE: R(2:36|1)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x009f|if (r3 \< r0) goto L15\l}"];
subgraph cluster_Region_2003798223 {
label = "R(2:15|(2:(1:18)|(1:17)))";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x00a1|char char r32 = r1.charAt(r3)\l}"];
subgraph cluster_Region_1250941465 {
label = "R(2:(1:18)|(1:17))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1346393840 {
label = "IF [B:20:0x00ad] THEN: R(1:18) ELSE: null";
node [shape=record,color=blue];
Node_20 [shape=record,label="{20\:\ 0x00ad|if ((!kotlin.text.CharsKt.isWhitespace(r32)) == true) goto L18\l}"];
subgraph cluster_Region_1522413700 {
label = "R(1:18)";
node [shape=record,color=blue];
Node_48 [shape=record,label="{48\:\ 0x00b6|SYNTHETIC\lEDGE_INSN: B:48:0x00b6\-\>B:24:0x00b6 ?: BREAK  \l|break\l}"];
}
}
subgraph cluster_Region_1020332484 {
label = "R(1:17)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x00b0|LOOP_END\lLOOP:1: B:17:0x009c\-\>B:22:0x00b0\l|r3++\lr2 = r31\l}"];
}
}
}
subgraph cluster_Region_483063408 {
label = "R(2:36|1)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x00b5|EDGE_INSN: B:23:0x00b5\-\>B:24:0x00b6 ?: BREAK  \l|r3 = \-1\l}"];
Node_InsnContainer_329400545 [shape=record,label="{|break\l}"];
}
}
}
}
Node_24 [shape=record,label="{24\:\ 0x00b6|EDGE_INSN: B:48:0x00b6\-\>B:24:0x00b6 ?: BREAK  , EDGE_INSN: B:23:0x00b5\-\>B:24:0x00b6 ?: BREAK  \lPHI: r3 \l  PHI: (r3v4 'index$iv' int) = (r3v3 'index$iv' int), (r3v2 'index$iv' int) binds: [B:23:0x00b5, B:48:0x00b6] A[DONT_GENERATE, DONT_INLINE]\l|int r0 = r3\l}"];
subgraph cluster_IfRegion_600017110 {
label = "IF [B:25:0x00b8] THEN: R(1:21) ELSE: R(2:31|(1:34)(1:33))";
node [shape=record,color=blue];
Node_25 [shape=record,label="{25\:\ 0x00b8|if (r0 == (\-1)) goto L21\l}"];
subgraph cluster_Region_1720537332 {
label = "R(1:21)";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x00ba|r7 = r6\lr1 = null\l}"];
}
subgraph cluster_Region_1344347617 {
label = "R(2:31|(1:34)(1:33))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x00c1|r7 = r6\l}"];
subgraph cluster_IfRegion_160238746 {
label = "IF [B:28:0x00da] THEN: R(1:34) ELSE: R(1:33)";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x00da|if (kotlin.text.StringsKt.startsWith$default(r27, r38, r0, false, 4, (java.lang.Object) null) == false) goto L34\l}"];
subgraph cluster_Region_460475032 {
label = "R(1:34)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x00f2|r1 = null\l}"];
}
subgraph cluster_Region_1360774751 {
label = "R(1:33)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x00dc|kotlin.jvm.internal.Intrinsics.checkNotNull(r27, \"null cannot be cast to non\-null type java.lang.String\")\ljava.lang.String r1 = r27.substring(r38.length() + r0)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"this as java.lang.String).substring(startIndex)\")\l}"];
}
}
}
}
subgraph cluster_IfRegion_675776863 {
label = "IF [B:32:0x00f7, B:34:0x0101] THEN: R(1:30) ELSE: null";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x00f7|PHI: r1 r7 \l  PHI: (r1v29 java.lang.String) = (r1v25 java.lang.String), (r1v28 java.lang.String), (r1v30 java.lang.String) binds: [B:30:0x00f2, B:29:0x00dc, B:26:0x00ba] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r7v6 'destination$iv$iv$iv' java.util.Collection) = (r7v5 'destination$iv$iv$iv' java.util.Collection), (r7v5 'destination$iv$iv$iv' java.util.Collection), (r7v7 'destination$iv$iv$iv' java.util.Collection) binds: [B:30:0x00f2, B:29:0x00dc, B:26:0x00ba] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 == null) goto L30\l}"];
Node_34 [shape=record,label="{34\:\ 0x0101|ADDED_TO_REGION\l|if ((r29 = r11.invoke(r1)) == null) goto L30\l}"];
subgraph cluster_Region_1134627468 {
label = "R(1:30)";
node [shape=record,color=blue];
Node_35 [shape=record,label="{35\:\ 0x0103|r29 = r27\l}"];
}
}
}
}
subgraph cluster_IfRegion_423737033 {
label = "IF [B:37:0x0106] THEN: R(1:26) ELSE: R(0)";
node [shape=record,color=blue];
Node_37 [shape=record,label="{37\:\ 0x0106|PHI: r7 r29 \l  PHI: (r7v3 'destination$iv$iv$iv' java.util.Collection) = (r7v2 'destination$iv$iv$iv' java.util.Collection), (r7v6 'destination$iv$iv$iv' java.util.Collection), (r7v6 'destination$iv$iv$iv' java.util.Collection) binds: [B:15:0x008a, B:35:0x0103, B:34:0x0101] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r29v1 java.lang.String) = (r29v0 java.lang.String), (r29v2 java.lang.String), (r29v4 java.lang.String) binds: [B:15:0x008a, B:35:0x0103, B:34:0x0101] A[DONT_GENERATE, DONT_INLINE]\l|if (r29 != null) goto L26\l}"];
subgraph cluster_Region_2018082983 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ 0x0108|r7.add(r29)\l}"];
}
subgraph cluster_Region_1074962548 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_40 [shape=record,label="{40\:\ 0x0110|LOOP_END\lLOOP:0: B:5:0x005b\-\>B:40:0x0110\l|r6 = r7\lr1 = r23\l}"];
}
}
Node_41 [shape=record,label="{41\:\ 0x0119|java.lang.Appendable r0 = kotlin.collections.CollectionsKt.joinTo((java.util.List) r6, new java.lang.StringBuilder(r10), (r14 & 2) != 0 ? \", \" : \"n\", (r14 & 4) != 0 ? \"\" : null, (r14 & 8) != 0 ? \"\" : null, (r14 & 16) != 0 ? \-1 : 0, (r14 & 32) != 0 ? \"...\" : null, (r14 & 64) != 0 ? null : null)\ljava.lang.String java.lang.String r0 = ((java.lang.StringBuilder) r0).toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"mapIndexedNotNull \{ inde…\"n\")n        .toString()\")\l}"];
Node_42 [shape=record,label="{42\:\ 0x0150|RETURN\l|return r0\l}"];
}
}
subgraph cluster_Region_1962534269 {
label = "R(1:45)";
node [shape=record,color=blue];
Node_44 [shape=record,label="{44\:\ 0x015e|throw new java.lang.IllegalArgumentException(\"marginPrefix must be non\-blank string.\".toString())\l}"];
}
}
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_5 [shape=record,color=red,label="{5\:\ 0x005b|LOOP_START\lLOOP:0: B:5:0x005b\-\>B:40:0x0110\lPHI: r1 r6 \l  PHI: (r1v14 'index$iv$iv$iv$iv' int) = (r1v13 'index$iv$iv$iv$iv' int), (r1v19 'index$iv$iv$iv$iv' int) binds: [B:4:0x0020, B:40:0x0110] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r6v2 'destination$iv$iv$iv' java.util.Collection) = (r6v1 'destination$iv$iv$iv' java.util.Collection), (r6v3 'destination$iv$iv$iv' java.util.Collection) binds: [B:4:0x0020, B:40:0x0110] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x00f9}"];
Node_46 [shape=record,color=red,label="{46\:\ 0x0110|SYNTHETIC\l}"];
Node_47 [shape=record,color=red,label="{47\:\ 0x0110|SYNTHETIC\l}"];
Node_49 [shape=record,color=red,label="{49\:\ 0x00b5|SYNTHETIC\l}"];
Node_13 [shape=record,color=red,label="{13\:\ 0x0080}"];
Node_45 [shape=record,color=red,label="{45\:\ 0x0119|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0151}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__IndentKt.replaceIndentByMargin((r36v0 '$this$replaceIndentByMargin' java.lang.String A[D('$this$replaceIndentByMargin' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r37v0 'newIndent' java.lang.String A[D('newIndent' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r38v0 'marginPrefix' java.lang.String A[D('marginPrefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:40:0x0110 \-\> B:5:0x005b, CROSS_EDGE: B:37:0x0106 \-\> B:40:0x0110, BACK_EDGE: B:22:0x00b0 \-\> B:17:0x009c, CROSS_EDGE: B:35:0x0103 \-\> B:37:0x0106, CROSS_EDGE: B:34:0x0101 \-\> B:37:0x0106, CROSS_EDGE: B:32:0x00f7 \-\> B:35:0x0103, CROSS_EDGE: B:29:0x00dc \-\> B:32:0x00f7, CROSS_EDGE: B:30:0x00f2 \-\> B:32:0x00f7, CROSS_EDGE: B:23:0x00b5 \-\> B:24:0x00b6, CROSS_EDGE: B:12:0x007e \-\> B:16:0x008f, CROSS_EDGE: B:11:0x007c \-\> B:13:0x0080, CROSS_EDGE: B:8:0x0067 \-\> B:10:0x006c, CROSS_EDGE: B:44:0x015e \-\> B:1:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_3 -> Node_4;
Node_3 -> Node_43[style=dashed];
Node_4 -> Node_5;
Node_6 -> Node_7;
Node_6 -> Node_45[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_8 -> Node_10[style=dashed];
Node_9 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_13;
Node_12 -> Node_16[style=dashed];
Node_14 -> Node_15;
Node_14 -> Node_16[style=dashed];
Node_15 -> Node_37;
Node_16 -> Node_17;
Node_17 -> Node_18;
Node_18 -> Node_19;
Node_18 -> Node_49[style=dashed];
Node_19 -> Node_20;
Node_20 -> Node_22[style=dashed];
Node_20 -> Node_48;
Node_48 -> Node_24;
Node_22 -> Node_17;
Node_23 -> Node_24;
Node_24 -> Node_25;
Node_25 -> Node_26;
Node_25 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_30;
Node_30 -> Node_32;
Node_29 -> Node_32;
Node_32 -> Node_33[style=dashed];
Node_32 -> Node_35;
Node_34 -> Node_35;
Node_34 -> Node_37[style=dashed];
Node_35 -> Node_37;
Node_37 -> Node_38;
Node_37 -> Node_47[style=dashed];
Node_38 -> Node_46;
Node_40 -> Node_5;
Node_41 -> Node_42;
Node_42 -> Node_1;
Node_44 -> Node_1;
Node_0 -> Node_2;
Node_5 -> Node_6;
Node_33 -> Node_34;
Node_46 -> Node_40;
Node_47 -> Node_40;
Node_49 -> Node_23;
Node_13 -> Node_14;
Node_45 -> Node_41;
Node_43 -> Node_44;
}

