digraph "CFG forkotlin.text.StringsKt__IndentKt.trimMargin(Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r1 I:java.lang.Object A[D('$this$trimMargin' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"marginPrefix\" \l0x0007: INVOKE  (r2 I:java.lang.Object A[D('marginPrefix' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"\"  (LINE:26)\l0x000c: INVOKE  (r0 I:java.lang.String) = \l  (r1 I:java.lang.String A[D('$this$trimMargin' java.lang.String)])\l  (r0 I:java.lang.String)\l  (r2 I:java.lang.String A[D('marginPrefix' java.lang.String)])\l type: STATIC call: kotlin.text.StringsKt.replaceIndentByMargin(java.lang.String, java.lang.String, java.lang.String):java.lang.String A[MD:(java.lang.String, java.lang.String, java.lang.String):java.lang.String (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:java.lang.String) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__IndentKt.trimMargin((r1 I:java.lang.String A[D('$this$trimMargin' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[D('marginPrefix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x0010: r1 '$this$trimMargin' Ljava\/lang\/String;\l  \-1 \-0x0010: r2 'marginPrefix' Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

