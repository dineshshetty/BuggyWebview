digraph "CFG forkotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt(Ljava\/util\/List;ILkotlin\/jvm\/functions\/Function1;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
subgraph cluster_Region_1300992997 {
label = "R(4:1|(6:4|(1:6)|7|(1:23)(3:10|(1:12)(1:20)|14)|(1:16)(0)|18)|25|26) | DECL_VAR: java.lang.Appendable null, int lastIndex, java.lang.String null\l";
node [shape=record,color=blue];
Node_2 [shape=record,label="{2\:\ 0x0000|boolean r0 = false\lint int r1 = kotlin.collections.CollectionsKt.getLastIndex(r21)\ljava.lang.Iterable java.util.List\<java.lang.String\> r2 = r21\ljava.util.Collection java.util.Collection r4 = new java.util.ArrayList()\lint r9 = 0\ljava.util.Iterator r10 = r2.iterator()\l\l}"];
subgraph cluster_LoopRegion_739335071 {
label = "LOOP:0: (6:4|(1:6)|7|(1:23)(3:10|(1:12)(1:20)|14)|(1:16)(0)|18)";
node [shape=record,color=blue];
Node_4 [shape=record,label="{4\:\ 0x001e|java.lang.Object \lif (r10.hasNext() != false) goto L4\l}"];
subgraph cluster_Region_909064635 {
label = "R(6:4|(1:6)|7|(1:23)(3:10|(1:12)(1:20)|14)|(1:16)(0)|18)";
node [shape=record,color=blue];
Node_5 [shape=record,label="{5\:\ 0x0020|java.lang.Object r11 = r10.next()\lint int r12 = r9 + 1\l}"];
subgraph cluster_IfRegion_2032495162 {
label = "IF [B:6:0x0026] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_6 [shape=record,label="{6\:\ 0x0026|if (r9 \< 0) goto L6\l}"];
subgraph cluster_Region_449874512 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_7 [shape=record,label="{7\:\ 0x0028|kotlin.collections.CollectionsKt.throwIndexOverflow()\l}"];
}
}
Node_8 [shape=record,label="{8\:\ 0x002b|java.lang.String java.lang.String r15 = (java.lang.String) r11\lint r16 = r9\lboolean r18 = r0\l}"];
subgraph cluster_IfRegion_820067149 {
label = "IF [B:9:0x003a, B:10:0x003c, B:12:0x0046] THEN: R(1:23) ELSE: R(3:10|(1:12)(1:20)|14)";
node [shape=record,color=blue];
Node_9 [shape=record,label="{9\:\ 0x003a|if (r16 == 0) goto L21\l}"];
Node_10 [shape=record,label="{10\:\ 0x003c|ADDED_TO_REGION\l|if (r16 == r1) goto L21\l}"];
Node_12 [shape=record,label="{12\:\ 0x0046|ADDED_TO_REGION\l|if (kotlin.text.StringsKt.isBlank(r15) == true) goto L23\l}"];
subgraph cluster_Region_1359202333 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_13 [shape=record,label="{13\:\ 0x0048|r19 = r1\lr0 = null\l}"];
}
subgraph cluster_Region_171699464 {
label = "R(3:10|(1:12)(1:20)|14)";
node [shape=record,color=blue];
Node_14 [shape=record,label="{14\:\ 0x0055|java.lang.String java.lang.String r0 = r24.invoke(r15)\l}"];
subgraph cluster_IfRegion_1584777304 {
label = "IF [B:15:0x0061] THEN: R(1:12) ELSE: R(1:20)";
node [shape=record,color=blue];
Node_15 [shape=record,label="{15\:\ 0x0061|if (r0 != null) goto L12\l}"];
subgraph cluster_Region_1082551651 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_16 [shape=record,label="{16\:\ 0x0063|r19 = r1\ljava.lang.String r0 = r23.invoke(r0)\l}"];
}
subgraph cluster_Region_262895145 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x0070|r19 = r1\l}"];
}
}
Node_20 [shape=record,label="{20\:\ 0x0074|PHI: r19 \l  PHI: (r19v4 'lastIndex' int) = (r19v3 'lastIndex' int), (r19v5 'lastIndex' int) binds: [B:19:0x0070, B:17:0x006d] A[DONT_GENERATE, DONT_INLINE]\l|r0 = r15\l}"];
}
}
subgraph cluster_IfRegion_346567330 {
label = "IF [B:22:0x0076] THEN: R(1:16) ELSE: R(0)";
node [shape=record,color=blue];
Node_22 [shape=record,label="{22\:\ 0x0076|PHI: r0 r19 \l  PHI: (r0v11 java.lang.String) = (r0v10 java.lang.String), (r0v16 java.lang.String), (r0v18 java.lang.String) binds: [B:13:0x0048, B:20:0x0074, B:17:0x006d] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r19v1 'lastIndex' int) = (r19v0 'lastIndex' int), (r19v4 'lastIndex' int), (r19v5 'lastIndex' int) binds: [B:13:0x0048, B:20:0x0074, B:17:0x006d] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 != null) goto L16\l}"];
subgraph cluster_Region_908664770 {
label = "R(1:16)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0078|r4.add(r0)\l}"];
}
subgraph cluster_Region_1492343113 {
label = "R(0)";
node [shape=record,color=blue];
}
}
Node_25 [shape=record,label="{25\:\ 0x007e|LOOP_END\lLOOP:0: B:3:0x001a\-\>B:25:0x007e\l|r9 = r12\lr0 = r18\lr1 = r19\l}"];
}
}
Node_26 [shape=record,label="{26\:\ 0x0084|java.lang.Appendable r0 = kotlin.collections.CollectionsKt.joinTo((java.util.List) r4, new java.lang.StringBuilder(r22), (r14 & 2) != 0 ? \", \" : \"n\", (r14 & 4) != 0 ? \"\" : null, (r14 & 8) != 0 ? \"\" : null, (r14 & 16) != 0 ? \-1 : 0, (r14 & 32) != 0 ? \"...\" : null, (r14 & 64) != 0 ? null : null)\ljava.lang.String java.lang.String r0 = ((java.lang.StringBuilder) r0).toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"mapIndexedNotNull \{ indeâ€¦\"n\")n        .toString()\")\l}"];
Node_27 [shape=record,label="{27\:\ 0x00b4|RETURN\l|return r0\l}"];
}
Node_0 [shape=record,color=red,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_3 [shape=record,color=red,label="{3\:\ 0x001a|LOOP_START\lLOOP:0: B:3:0x001a\-\>B:25:0x007e\lPHI: r0 r1 r9 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v12 boolean) binds: [B:2:0x0000, B:25:0x007e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'lastIndex' int) = (r1v0 'lastIndex' int), (r1v3 'lastIndex' int) binds: [B:2:0x0000, B:25:0x007e] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r9v1 'index$iv$iv' int) = (r9v0 'index$iv$iv' int), (r9v3 'index$iv$iv' int) binds: [B:2:0x0000, B:25:0x007e] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_17 [shape=record,color=red,label="{17\:\ 0x006d|if (r0 == null) goto L14\l}"];
Node_29 [shape=record,color=red,label="{29\:\ 0x007e|SYNTHETIC\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x007e|SYNTHETIC\l}"];
Node_11 [shape=record,color=red,label="{11\:\ 0x003e}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0084|SYNTHETIC\l}"];
Node_1 [shape=record,color=red,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final java.lang.String kotlin.text.StringsKt__IndentKt.reindent$StringsKt__IndentKt((r21v0 java.util.List\<java.lang.String\> A[D('$this$reindent' java.util.List), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r22v0 'resultSizeEstimate' int A[D('resultSizeEstimate' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r23v0 kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[D('indentAddFunction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r24v0 kotlin.jvm.functions.Function1\<? super java.lang.String, java.lang.String\> A[D('indentCutFunction' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | INCONSISTENT_CODE\lMETHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:25:0x007e \-\> B:3:0x001a, CROSS_EDGE: B:22:0x0076 \-\> B:25:0x007e, CROSS_EDGE: B:20:0x0074 \-\> B:22:0x0076, CROSS_EDGE: B:17:0x006d \-\> B:22:0x0076, CROSS_EDGE: B:19:0x0070 \-\> B:20:0x0074, CROSS_EDGE: B:10:0x003c \-\> B:14:0x0055, CROSS_EDGE: B:9:0x003a \-\> B:11:0x003e, CROSS_EDGE: B:6:0x0026 \-\> B:8:0x002b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Code restructure failed: missing block: B:17:0x006d, code lost:\l    if (r0 == null) goto L14;\l\}\lSIGNATURE: (Ljava\/util\/List\<Ljava\/lang\/String;\>;ILkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/String;Ljava\/lang\/String;\>;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/String;Ljava\/lang\/String;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_0;Node_2 -> Node_3;
Node_4 -> Node_5;
Node_4 -> Node_28[style=dashed];
Node_5 -> Node_6;
Node_6 -> Node_7;
Node_6 -> Node_8[style=dashed];
Node_7 -> Node_8;
Node_8 -> Node_9;
Node_9 -> Node_10[style=dashed];
Node_9 -> Node_11;
Node_10 -> Node_11;
Node_10 -> Node_14[style=dashed];
Node_12 -> Node_13;
Node_12 -> Node_14[style=dashed];
Node_13 -> Node_22;
Node_14 -> Node_15;
Node_15 -> Node_16;
Node_15 -> Node_19[style=dashed];
Node_16 -> Node_17;
Node_19 -> Node_20;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_22 -> Node_30[style=dashed];
Node_23 -> Node_29;
Node_25 -> Node_3;
Node_26 -> Node_27;
Node_27 -> Node_1;
Node_0 -> Node_2;
Node_3 -> Node_4;
Node_17 -> Node_20;
Node_17 -> Node_22[style=dashed];
Node_29 -> Node_25;
Node_30 -> Node_25;
Node_11 -> Node_12;
Node_28 -> Node_26;
}

