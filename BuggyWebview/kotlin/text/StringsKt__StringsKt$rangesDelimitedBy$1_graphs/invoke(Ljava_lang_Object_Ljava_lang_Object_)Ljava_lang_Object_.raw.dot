digraph "CFG forkotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1.invoke(Ljava\/lang\/Object;Ljava\/lang\/Object;)Ljava\/lang\/Object;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('p1' java.lang.Object)])  (LINE:1242)\l0x0001: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x0003: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('p2' java.lang.Object)]) \l0x0004: CHECK_CAST (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:??[OBJECT, ARRAY]) \l0x0006: INVOKE  (r1 I:int) = (r1 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x000a: INVOKE  (r0 I:kotlin.Pair) = (r2 I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1), (r0 I:java.lang.CharSequence), (r1 I:int) type: VIRTUAL call: kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1.invoke(java.lang.CharSequence, int):kotlin.Pair A[MD:(java.lang.CharSequence, int):kotlin.Pair\<java.lang.Integer, java.lang.Integer\> (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000e|RETURN\l|0x000e: RETURN  (r0 I:kotlin.Pair\<? extends java.lang.Integer, ? extends java.lang.Integer\>) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public \/* bridge *\/ \/* synthetic *\/ kotlin.Pair\<? extends java.lang.Integer, ? extends java.lang.Integer\> kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1.invoke((r2 'this' I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:java.lang.CharSequence A[D('p1' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:java.lang.Integer A[D('p2' java.lang.Object), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lDebug Info:\l  \-1 \-0x000e: r3 'p1' Ljava\/lang\/Object;\l  \-1 \-0x000e: r4 'p2' Ljava\/lang\/Object;\lJadxCommentsAttr\{\l DEBUG: \l \-\> Return type fixed from 'java.lang.Object' to match base method\l \-\> Method arguments types fixed to match base method, original types: [java.lang.Object, java.lang.Object]\}\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function2.invoke(P1, P2):R]\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

