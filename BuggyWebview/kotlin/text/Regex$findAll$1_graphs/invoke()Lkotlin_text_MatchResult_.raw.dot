digraph "CFG forkotlin.text.Regex$findAll$1.invoke()Lkotlin\/text\/MatchResult;" {
Node_0 [shape=record,label="{0\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_2 [shape=record,label="{2\:\ 0x0000|0x0000: IGET  (r0 I:kotlin.text.Regex) = (r3 I:kotlin.text.Regex$findAll$1) kotlin.text.Regex$findAll$1.this$0 kotlin.text.Regex  (LINE:136)\l0x0002: IGET  (r1 I:java.lang.CharSequence) = (r3 I:kotlin.text.Regex$findAll$1) kotlin.text.Regex$findAll$1.$input java.lang.CharSequence \l0x0004: IGET  (r2 I:int) = (r3 I:kotlin.text.Regex$findAll$1) kotlin.text.Regex$findAll$1.$startIndex int \l0x0006: INVOKE  (r0 I:kotlin.text.MatchResult) = (r0 I:kotlin.text.Regex), (r1 I:java.lang.CharSequence), (r2 I:int) type: VIRTUAL call: kotlin.text.Regex.find(java.lang.CharSequence, int):kotlin.text.MatchResult A[MD:(java.lang.CharSequence, int):kotlin.text.MatchResult (m)]\l}"];
Node_3 [shape=record,label="{3\:\ 0x000a|RETURN\l|0x000a: RETURN  (r0 I:kotlin.text.MatchResult) \l}"];
Node_1 [shape=record,label="{1\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final kotlin.text.MatchResult kotlin.text.Regex$findAll$1.invoke((r3 'this' I:kotlin.text.Regex$findAll$1 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function0.invoke():R]\lBRIDGED_BY: kotlin.text.Regex$findAll$1.invoke():kotlin.text.MatchResult\lRENAME_REASON:avoid collision after fix types in other method\l}"];
MethodNode -> Node_0;Node_0 -> Node_2;
Node_2 -> Node_3;
Node_3 -> Node_1;
}

