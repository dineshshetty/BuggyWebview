digraph "CFG forkotlin.text.StringsKt__IndentKt$prependIndent$1.invoke(Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_12 [shape=record,label="{12\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_14 [shape=record,label="{14\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"it\")\l}"];
Node_15 [shape=record,label="{15\:\ 0x000d|if (kotlin.text.StringsKt.isBlank(r3) == false) goto L10\l}"];
Node_16 [shape=record,label="{16\:\ 0x0010}"];
Node_17 [shape=record,label="{17\:\ 0x001a|if (r3.length() \>= r2.$indent.length()) goto L8\l}"];
Node_18 [shape=record,label="{18\:\ 0x001c}"];
Node_22 [shape=record,label="{22\:\ ?|SYNTHETIC\lRETURN\l|return r2.$indent\l}"];
Node_13 [shape=record,label="{13\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x001f}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|return r3\l}"];
Node_20 [shape=record,label="{20\:\ 0x0021|java.lang.StringBuilder r0 = new java.lang.StringBuilder()\lr0.append(r2.$indent)\lr0.append(r3)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0032|RETURN\lORIG_RETURN\l|return r0.toString()\l}"];
MethodNode[shape=record,label="{public final java.lang.String kotlin.text.StringsKt__IndentKt$prependIndent$1.invoke((r2v0 'this' kotlin.text.StringsKt__IndentKt$prependIndent$1 A[IMMUTABLE_TYPE, THIS]), (r3v0 'it' java.lang.String A[D('it' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:19:0x001f \-\> B:21:0x0032, CROSS_EDGE: B:20:0x0021 \-\> B:21:0x0032\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lREPLACED_BY: kotlin.text.StringsKt__IndentKt$prependIndent$1.invoke(java.lang.String):java.lang.String\lBRIDGED_BY: kotlin.text.StringsKt__IndentKt$prependIndent$1.invoke(java.lang.String):java.lang.String\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function1.invoke(P1):R]\l}"];
MethodNode -> Node_12;Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_16[style=dashed];
Node_15 -> Node_20;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_19;
Node_18 -> Node_22;
Node_22 -> Node_13;
Node_19 -> Node_23;
Node_23 -> Node_13;
Node_20 -> Node_21;
Node_21 -> Node_13;
}

