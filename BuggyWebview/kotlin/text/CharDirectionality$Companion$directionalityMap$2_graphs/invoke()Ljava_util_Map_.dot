digraph "CFG forkotlin.text.CharDirectionality$Companion$directionalityMap$2.invoke()Ljava\/util\/Map;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|kotlin.text.CharDirectionality[] r0 = kotlin.text.CharDirectionality.values()\lint r2 = kotlin.ranges.RangesKt.coerceAtLeast(kotlin.collections.MapsKt.mapCapacity(r0.length), 16)\ljava.util.Map r3 = new java.util.LinkedHashMap(r2)\lint r6 = r0.length\lr7 = 0\l}"];
Node_11 [shape=record,label="{11\:\ 0x001b|LOOP_START\lLOOP:0: B:11:0x001b\-\>B:12:0x001d\lPHI: r7 \l  PHI: (r7v1 int) = (r7v0 int), (r7v2 int) binds: [B:10:0x0000, B:12:0x001d] A[DONT_GENERATE, DONT_INLINE]\l|if (r7 \>= r6) goto L4\l}"];
Node_12 [shape=record,label="{12\:\ 0x001d|LOOP_END\lLOOP:0: B:11:0x001b\-\>B:12:0x001d\l|r8 = r0[r7]\lr3.put(java.lang.Integer.valueOf(r8.getValue()), r8)\lint r7 = r7 + 1\l}"];
Node_15 [shape=record,label="{15\:\ 0x0031|SYNTHETIC\l}"];
Node_14 [shape=record,label="{14\:\ 0x0031|RETURN\l|return r3\l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public final java.util.Map\<java.lang.Integer, ? extends kotlin.text.CharDirectionality\> kotlin.text.CharDirectionality$Companion$directionalityMap$2.invoke((r11v0 'this' kotlin.text.CharDirectionality$Companion$directionalityMap$2 A[IMMUTABLE_TYPE, THIS]))  | USE_LINES_HINTS\lBACK_EDGE: B:12:0x001d \-\> B:11:0x001b\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: ()Ljava\/util\/Map\<Ljava\/lang\/Integer;Lkotlin\/text\/CharDirectionality;\>;\lREPLACED_BY: kotlin.text.CharDirectionality$Companion$directionalityMap$2.invoke():java.util.Map\<java.lang.Integer, ? extends kotlin.text.CharDirectionality\>\lBRIDGED_BY: kotlin.text.CharDirectionality$Companion$directionalityMap$2.invoke():java.util.Map\<java.lang.Integer, ? extends kotlin.text.CharDirectionality\>\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function0.invoke():R]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_15;
Node_12 -> Node_11;
Node_15 -> Node_14;
Node_14 -> Node_9;
}

