digraph "CFG forkotlin.text.CharsKt__CharKt.equals(CCZ)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000}"];
Node_20 [shape=record,label="{20\:\ 0x0001|if (r6 != r7) goto L5\l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|RETURN\l|return true\l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0004}"];
Node_23 [shape=record,label="{23\:\ 0x0005|if (r8 != false) goto L8\l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|RETURN\l|return false\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|char r2 = java.lang.Character.toUpperCase(r6)\lchar r3 = java.lang.Character.toUpperCase(r7)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|if (r2 == r3) goto L14\l}"];
Node_27 [shape=record,label="{27\:\ 0x0012}"];
Node_28 [shape=record,label="{28\:\ 0x001a|if (java.lang.Character.toLowerCase(r2) != java.lang.Character.toLowerCase(r3)) goto L12\l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|RETURN\lORIG_RETURN\l|return false\l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|return true\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.CharsKt__CharKt.equals((r6v0 '$this$equals' char A[D('$this$equals' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'other' char A[D('other' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0007 \-\> B:18:?, CROSS_EDGE: B:31:0x001e \-\> B:18:?, CROSS_EDGE: B:28:0x001a \-\> B:31:0x001e, CROSS_EDGE: B:26:0x0010 \-\> B:31:0x001e\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_18;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_18;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_33[style=dashed];
Node_30 -> Node_18;
Node_33 -> Node_18;
Node_32 -> Node_18;
}

