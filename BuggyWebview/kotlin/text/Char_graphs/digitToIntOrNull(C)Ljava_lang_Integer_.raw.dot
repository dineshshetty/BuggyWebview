digraph "CFG forkotlin.text.CharsKt__CharKt.digitToIntOrNull(C)Ljava\/lang\/Integer;" {
Node_11 [shape=record,label="{11\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:59)\l0x0002: INVOKE  (r0 I:int) = (r4 I:char A[D('$this$digitToIntOrNull' char)]), (r0 I:int) type: STATIC call: kotlin.text.CharsKt.digitOf(char, int):int A[MD:(char, int):int (m)]\l0x0006: INVOKE  (r0 I:java.lang.Integer) = (r0 I:int) type: STATIC call: java.lang.Integer.valueOf(int):java.lang.Integer A[MD:(int):java.lang.Integer (c)]\l0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY]) \l0x000b: CHECK_CAST (r1 I:java.lang.Number) = (java.lang.Number) (r1 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r1 I:int) = (r1 I:java.lang.Number) type: VIRTUAL call: java.lang.Number.intValue():int A[MD:():int (c)]\l0x0011: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:345)\l}"];
Node_14 [shape=record,label="{14\:\ 0x0012|0x0012: IF  (r1 I:??[int, byte, short, char] A[D('it' int)]) \< (0 ??[int, byte, short, char])  \-\> B:16:0x0016  (LINE:59)\l}"];
Node_15 [shape=record,label="{15\:\ 0x0014|0x0014: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_17 [shape=record,label="{17\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:19:0x001a \l}"];
Node_19 [shape=record,label="{19\:\ 0x001a|RETURN\lORIG_RETURN\l|0x001a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: RETURN  (r0 I:java.lang.Integer) \l}"];
Node_12 [shape=record,label="{12\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:java.lang.Integer) A[SYNTHETIC]\l}"];
Node_16 [shape=record,label="{16\:\ 0x0016|0x0016: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.lang.Integer kotlin.text.CharsKt__CharKt.digitToIntOrNull((r4 I:char A[D('$this$digitToIntOrNull' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:17:0x0017 \-\> B:20:0x001b, CROSS_EDGE: B:16:0x0016 \-\> B:17:0x0017\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x0017: r1 'it' I\l  0x0012\-0x0017: r2 '$i$a$\-takeIf\-CharsKt__CharKt$digitToIntOrNull$1' I\l  \-1 \-0x001b: r4 '$this$digitToIntOrNull' C\l}"];
MethodNode -> Node_11;Node_11 -> Node_13;
Node_13 -> Node_14;
Node_14 -> Node_15[style=dashed];
Node_14 -> Node_16;
Node_15 -> Node_17;
Node_17 -> Node_19;
Node_17 -> Node_21[style=dashed];
Node_19 -> Node_12;
Node_21 -> Node_12;
Node_16 -> Node_17;
}

