digraph "CFG forkotlin.text.CharsKt__CharKt.equals(CCZ)Z" {
Node_17 [shape=record,label="{17\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,label="{19\:\ 0x0000|0x0000: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:234)\l}"];
Node_20 [shape=record,label="{20\:\ 0x0001|0x0001: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$equals' char)]) != (r7 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' char)])  \-\> B:22:0x0004 \l}"];
Node_21 [shape=record,label="{21\:\ 0x0003|RETURN\l|0x0003: RETURN  (r0 I:boolean) \l}"];
Node_18 [shape=record,label="{18\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:235)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|0x0005: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:25:0x0008 \l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|RETURN\l|0x0007: RETURN  (r1 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|0x0008: INVOKE  (r2 I:char) = (r6 I:char A[D('$this$equals' char)]) type: STATIC call: java.lang.Character.toUpperCase(char):char A[MD:(char):char (c)] (LINE:237)\l0x000c: INVOKE  (r3 I:char) = (r7 I:char A[D('other' char)]) type: STATIC call: java.lang.Character.toUpperCase(char):char A[MD:(char):char (c)] (LINE:238)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0010|0x0010: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('thisUpper' char)]) == (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('otherUpper' char)])  \-\> B:32:?  (LINE:240)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0012|0x0012: INVOKE  (r4 I:char) = (r2 I:char A[D('thisUpper' char)]) type: STATIC call: java.lang.Character.toLowerCase(char):char A[MD:(char):char (c)]\l0x0016: INVOKE  (r5 I:char) = (r3 I:char A[D('otherUpper' char)]) type: STATIC call: java.lang.Character.toLowerCase(char):char A[MD:(char):char (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x001a|0x001a: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:30:0x001d \l}"];
Node_30 [shape=record,label="{30\:\ 0x001d|RETURN\lORIG_RETURN\l|0x001d: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001e: RETURN  (r0 I:boolean) \l}"];
Node_33 [shape=record,label="{33\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_32 [shape=record,label="{32\:\ ?|SYNTHETIC\lRETURN\l|0x001e: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.CharsKt__CharKt.equals((r6 I:char A[D('$this$equals' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:char A[D('other' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x0007 \-\> B:18:?, CROSS_EDGE: B:31:0x001e \-\> B:18:?, CROSS_EDGE: B:28:0x001a \-\> B:31:0x001e, CROSS_EDGE: B:26:0x0010 \-\> B:31:0x001e\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x001e: r2 'thisUpper' C\l  0x0010\-0x001e: r3 'otherUpper' C\l  \-1 \-0x001e: r6 '$this$equals' C\l  \-1 \-0x001e: r7 'other' C\l  \-1 \-0x001e: r8 'ignoreCase' Z\l}"];
MethodNode -> Node_17;Node_17 -> Node_19;
Node_19 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_18;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_18;
Node_25 -> Node_26;
Node_26 -> Node_27[style=dashed];
Node_26 -> Node_32;
Node_27 -> Node_28;
Node_28 -> Node_30;
Node_28 -> Node_33[style=dashed];
Node_30 -> Node_18;
Node_33 -> Node_18;
Node_32 -> Node_18;
}

