digraph "CFG forkotlin.text.CharsKt__CharKt.digitToChar(II)C" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:111)\l0x0002: CONST  (r1 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0003: CONST  (r2 I:??[int, float, short, byte, char]) = (36 ??[int, float, short, byte, char]) \l0x0005: INVOKE  (r0 I:kotlin.ranges.IntRange), (r1 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0008: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r4 I:int A[D('radix' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:29:0x003f \l}"];
Node_20 [shape=record,label="{20\:\ 0x000e|0x000e: IF  (r3 I:??[int, byte, short, char] A[D('$this$digitToChar' int)]) \< (0 ??[int, byte, short, char])  \-\> B:27:0x0020  (LINE:114)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0010|0x0010: IF  (r3 I:??[int, byte, short, char] A[D('$this$digitToChar' int)]) \>= (r4 I:??[int, byte, short, char] A[D('radix' int)])  \-\> B:27:0x0020 \l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: CONST  (r0 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char])  (LINE:117)\l}"];
Node_23 [shape=record,label="{23\:\ 0x0014|0x0014: IF  (r3 I:??[int, byte, short, char] A[D('$this$digitToChar' int)]) \>= (r0 I:??[int, byte, short, char])  \-\> B:25:0x001a \l}"];
Node_24 [shape=record,label="{24\:\ 0x0016|0x0016: ARITH  (r0 I:int) = (r3 I:int A[D('$this$digitToChar' int)]) + (48 int)  (LINE:118)\l0x0018: CAST (r0 I:char) = (char) (r0 I:int) \l}"];
Node_31 [shape=record,label="{31\:\ ?|SYNTHETIC\lRETURN\l|0x001f: RETURN  (r0 I:char) A[SYNTHETIC] (LINE:117)\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x001a|0x001a: ARITH  (r1 I:int) = (r3 I:int A[D('$this$digitToChar' int)]) + (65 int)  (LINE:120)\l0x001c: CAST (r1 I:char) = (char) (r1 I:int) \l0x001d: ARITH  (r1 I:int) = (r1 I:int) \- (r0 I:int) \l0x001e: CAST (r0 I:char) = (char) (r1 I:int) \l}"];
Node_26 [shape=record,label="{26\:\ 0x001f|RETURN\lORIG_RETURN\l|0x001f: RETURN  (r0 I:char)  (LINE:117)\l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|0x0020: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:115)\l0x0022: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0024: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0027: CONST_STR  (r2 I:java.lang.String) =  \"Digit \" \l0x0029: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x002c: INVOKE  (r1 I:java.lang.StringBuilder), (r3 I:int A[D('$this$digitToChar' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x002f: CONST_STR  (r2 I:java.lang.String) =  \" does not represent a valid digit in radix \" \l0x0031: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0034: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('radix' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0037: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x003b: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_28 [shape=record,label="{28\:\ 0x003e|0x003e: THROW  (r0 I:java.lang.Throwable) \l}"];
Node_29 [shape=record,label="{29\:\ 0x003f|0x003f: NEW_INSTANCE  (r0 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException  (LINE:112)\l0x0041: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0043: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0046: CONST_STR  (r2 I:java.lang.String) =  \"Invalid radix: \" \l0x0048: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x004b: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('radix' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x004e: CONST_STR  (r2 I:java.lang.String) =  \". Valid radix values are in range 2..36\" \l0x0050: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0053: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0057: INVOKE  (r0 I:java.lang.IllegalArgumentException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_30 [shape=record,label="{30\:\ 0x005a|0x005a: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final char kotlin.text.CharsKt__CharKt.digitToChar((r3 I:int A[D('$this$digitToChar' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('radix' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:25:0x001a \-\> B:26:0x001f, CROSS_EDGE: B:28:0x003e \-\> B:17:?, CROSS_EDGE: B:20:0x000e \-\> B:27:0x0020, CROSS_EDGE: B:30:0x005a \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x005a: r3 '$this$digitToChar' I\l  \-1 \-0x005a: r4 'radix' I\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_29;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_27;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_27;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_31;
Node_31 -> Node_17;
Node_25 -> Node_26;
Node_26 -> Node_17;
Node_27 -> Node_28;
Node_28 -> Node_17;
Node_29 -> Node_30;
Node_30 -> Node_17;
}

