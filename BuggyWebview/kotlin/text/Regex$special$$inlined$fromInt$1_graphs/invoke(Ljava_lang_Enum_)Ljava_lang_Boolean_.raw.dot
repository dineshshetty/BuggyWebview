digraph "CFG forkotlin.text.Regex$special$$inlined$fromInt$1.invoke(Ljava\/lang\/Enum;)Ljava\/lang\/Boolean;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: IGET  (r0 I:int) = (r2 I:kotlin.text.Regex$special$$inlined$fromInt$1) kotlin.text.Regex$special$$inlined$fromInt$1.$value int  (LINE:23)\l0x0002: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('it' java.lang.Enum)]) \l0x0003: CHECK_CAST (r1 I:kotlin.text.FlagEnum) = (kotlin.text.FlagEnum) (r1 I:??[OBJECT, ARRAY]) \l0x0005: INVOKE  (r1 I:int) = (r1 I:kotlin.text.FlagEnum) type: INTERFACE call: kotlin.text.FlagEnum.getMask():int A[MD:():int (m)]\l0x0009: ARITH  (r0 I:??[int, boolean]) = (r0 I:??[int, boolean, short, byte, char]) & (r1 I:??[int, boolean, short, byte, char]) \l0x000a: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY] A[D('it' java.lang.Enum)]) \l0x000b: CHECK_CAST (r1 I:kotlin.text.FlagEnum) = (kotlin.text.FlagEnum) (r1 I:??[OBJECT, ARRAY]) \l0x000d: INVOKE  (r1 I:int) = (r1 I:kotlin.text.FlagEnum) type: INTERFACE call: kotlin.text.FlagEnum.getValue():int A[MD:():int (m)]\l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|0x0011: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:13:0x0015 \l}"];
Node_12 [shape=record,label="{12\:\ 0x0013|0x0013: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_14 [shape=record,label="{14\:\ 0x0016|0x0016: INVOKE  (r0 I:java.lang.Boolean) = (r0 I:boolean) type: STATIC call: java.lang.Boolean.valueOf(boolean):java.lang.Boolean A[MD:(boolean):java.lang.Boolean (c)]\l}"];
Node_15 [shape=record,label="{15\:\ 0x001a|RETURN\l|0x001a: RETURN  (r0 I:java.lang.Boolean) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_13 [shape=record,label="{13\:\ 0x0015|0x0015: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public final java.lang.Boolean kotlin.text.Regex$special$$inlined$fromInt$1.invoke((r2 'this' I:kotlin.text.Regex$special$$inlined$fromInt$1 A[IMMUTABLE_TYPE, THIS]), (r3 I:kotlin.text.RegexOption A[D('it' java.lang.Enum), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:13:0x0015 \-\> B:14:0x0016\lINLINE_NOT_NEEDED\lSIGNATURE: (Lkotlin\/text\/RegexOption;)Ljava\/lang\/Boolean;\lDebug Info:\l  \-1 \-0x001a: r3 'it' Ljava\/lang\/Enum;\lREPLACED_BY: kotlin.text.Regex$special$$inlined$fromInt$1.invoke(kotlin.text.RegexOption):java.lang.Boolean\lMETHOD_OVERRIDE: [kotlin.jvm.functions.Function1.invoke(P1):R]\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_12[style=dashed];
Node_11 -> Node_13;
Node_12 -> Node_14;
Node_14 -> Node_15;
Node_15 -> Node_9;
Node_13 -> Node_14;
}

