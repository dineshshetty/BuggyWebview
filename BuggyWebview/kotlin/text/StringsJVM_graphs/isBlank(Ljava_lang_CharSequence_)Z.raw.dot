digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.isBlank(Ljava\/lang\/CharSequence;)Z" {
Node_44 [shape=record,label="{44\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_46 [shape=record,label="{46\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('$this$isBlank' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: INVOKE  (r0 I:int) = (r9 I:java.lang.CharSequence A[D('$this$isBlank' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:621)\l0x0009: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000a: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_47 [shape=record,label="{47\:\ 0x000b|0x000b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:61:0x0045 \l}"];
Node_48 [shape=record,label="{48\:\ 0x000d|0x000d: INVOKE  (r0 I:kotlin.ranges.IntRange) = (r9 I:java.lang.CharSequence A[D('$this$isBlank' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getIndices(java.lang.CharSequence):kotlin.ranges.IntRange A[MD:(java.lang.CharSequence):kotlin.ranges.IntRange (m)]\l0x0011: CHECK_CAST (r0 I:java.lang.Iterable) = (java.lang.Iterable) (r0 I:??[OBJECT, ARRAY]) \l0x0013: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: INSTANCE_OF  (r4 I:boolean) = (r0 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) java.util.Collection  (LINE:829)\l}"];
Node_49 [shape=record,label="{49\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0023 \l}"];
Node_50 [shape=record,label="{50\:\ 0x0018|0x0018: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) \l0x0019: CHECK_CAST (r4 I:java.util.Collection) = (java.util.Collection) (r4 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r4 I:boolean) = (r4 I:java.util.Collection) type: INTERFACE call: java.util.Collection.isEmpty():boolean A[MD:():boolean (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x001f|0x001f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:53:0x0023 \l}"];
Node_52 [shape=record,label="{52\:\ 0x0021|0x0021: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$this$all$iv' java.lang.Iterable)]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_60 [shape=record,label="{60\:\ 0x0043|0x0043: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$all$iv' java.lang.Iterable)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:? \l}"];
Node_65 [shape=record,label="{65\:\ ?|SYNTHETIC\lRETURN\l|0x0046: RETURN  (r1 I:boolean) A[SYNTHETIC] (LINE:621)\l}"];
Node_45 [shape=record,label="{45\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_53 [shape=record,label="{53\:\ 0x0023|0x0023: INVOKE  (r4 I:java.util.Iterator) = (r0 I:java.lang.Iterable A[D('$this$all$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:830)\l}"];
Node_54 [shape=record,label="{54\:\ 0x0027|LOOP_START\lLOOP:0: B:54:0x0027\-\>B:57:0x003e\l|0x0027: INVOKE  (r5 I:boolean) = (r4 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_55 [shape=record,label="{55\:\ 0x002b|0x002b: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:63:0x0042 \l}"];
Node_56 [shape=record,label="{56\:\ 0x002d|0x002d: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY]) \l0x002e: CHECK_CAST (r5 I:kotlin.collections.IntIterator) = (kotlin.collections.IntIterator) (r5 I:??[OBJECT, ARRAY]) \l0x0030: INVOKE  (r5 I:int) = (r5 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0034: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('element$iv' int)]) \l0x0035: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0036: INVOKE  (r8 I:char) = (r9 I:java.lang.CharSequence A[D('$this$isBlank' java.lang.CharSequence)]), (r6 I:int A[D('it' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:621)\l0x003a: INVOKE  (r6 I:boolean A[D('it' int)]) = (r8 I:char) type: STATIC call: kotlin.text.CharsKt.isWhitespace(char):boolean A[MD:(char):boolean (m)]\l}"];
Node_57 [shape=record,label="{57\:\ 0x003e|LOOP_END\lLOOP:0: B:54:0x0027\-\>B:57:0x003e\l|0x003e: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:54:0x0027 \l}"];
Node_64 [shape=record,label="{64\:\ 0x0040|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x0040|0x0040: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$all$iv' java.lang.Iterable)]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0042|SYNTHETIC\l}"];
Node_59 [shape=record,label="{59\:\ 0x0042|0x0042: CONST  (r0 I:??[boolean, int, float, short, byte, char] A[D('$this$all$iv' java.lang.Iterable)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:831)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0045|RETURN\lORIG_RETURN\l|0x0045: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0046: RETURN  (r1 I:boolean)  (LINE:621)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.isBlank((r9 I:java.lang.CharSequence A[D('$this$isBlank' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:60:0x0043 \-\> B:62:0x0046, BACK_EDGE: B:57:0x003e \-\> B:54:0x0027, CROSS_EDGE: B:58:0x0040 \-\> B:60:0x0043, CROSS_EDGE: B:59:0x0042 \-\> B:60:0x0043, CROSS_EDGE: B:49:0x0016 \-\> B:53:0x0023, CROSS_EDGE: B:47:0x000b \-\> B:61:0x0045\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0035\-0x003e: r6 'it' I\l  0x0036\-0x003e: r7 '$i$a$\-all\-StringsKt__StringsJVMKt$isBlank$1' I\l  0x0034\-0x0042: r5 'element$iv' I\l  0x0013\-0x0043: r0 '$this$all$iv' Ljava\/lang\/Iterable;\l  0x0014\-0x0043: r3 '$i$f$all' I\l  \-1 \-0x0046: r9 '$this$isBlank' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_44;Node_44 -> Node_46;
Node_46 -> Node_47;
Node_47 -> Node_48[style=dashed];
Node_47 -> Node_61;
Node_48 -> Node_49;
Node_49 -> Node_50[style=dashed];
Node_49 -> Node_53;
Node_50 -> Node_51;
Node_51 -> Node_52[style=dashed];
Node_51 -> Node_53;
Node_52 -> Node_60;
Node_60 -> Node_61[style=dashed];
Node_60 -> Node_65;
Node_65 -> Node_45;
Node_53 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_63;
Node_56 -> Node_57;
Node_57 -> Node_54;
Node_57 -> Node_64[style=dashed];
Node_64 -> Node_58;
Node_58 -> Node_60;
Node_63 -> Node_59;
Node_59 -> Node_60;
Node_61 -> Node_45;
}

