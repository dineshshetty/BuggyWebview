digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.equals(Ljava\/lang\/String;Ljava\/lang\/String;Z)Z" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$equals' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0008  (LINE:54)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0002|0x0002: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.String)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:31:0x0006  (LINE:55)\l}"];
Node_30 [shape=record,label="{30\:\ 0x0004|SYNTHETIC\lRETURN\l|0x0004: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0007: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,label="{31\:\ 0x0006|RETURN\lORIG_RETURN\l|0x0006: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: RETURN  (r0 I:boolean) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0008|0x0008: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:35:0x000f  (LINE:56)\l}"];
Node_34 [shape=record,label="{34\:\ 0x000a|0x000a: INVOKE  (r0 I:boolean) = (r1 I:java.lang.String A[D('$this$equals' java.lang.String)]), (r2 I:java.lang.Object A[D('other' java.lang.String)]) type: VIRTUAL call: java.lang.String.equals(java.lang.Object):boolean A[MD:(java.lang.Object):boolean (c)] (LINE:57)\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x0013: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:56)\l}"];
Node_35 [shape=record,label="{35\:\ 0x000f|0x000f: INVOKE  (r0 I:boolean) = (r1 I:java.lang.String A[D('$this$equals' java.lang.String)]), (r2 I:java.lang.String A[D('other' java.lang.String)]) type: VIRTUAL call: java.lang.String.equalsIgnoreCase(java.lang.String):boolean A[MD:(java.lang.String):boolean (c)] (LINE:59)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0013|RETURN\lORIG_RETURN\l|0x0013: RETURN  (r0 I:boolean)  (LINE:56)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.equals((r1 I:java.lang.String A[D('$this$equals' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.String A[D('other' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0006 \-\> B:32:0x0007, CROSS_EDGE: B:36:0x0013 \-\> B:27:?, CROSS_EDGE: B:35:0x000f \-\> B:36:0x0013\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0013: r1 '$this$equals' Ljava\/lang\/String;\l  \-1 \-0x0013: r2 'other' Ljava\/lang\/String;\l  \-1 \-0x0013: r3 'ignoreCase' Z\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29[style=dashed];
Node_28 -> Node_33;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_31;
Node_30 -> Node_27;
Node_31 -> Node_27;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_35;
Node_34 -> Node_38;
Node_38 -> Node_27;
Node_35 -> Node_36;
Node_36 -> Node_27;
}

