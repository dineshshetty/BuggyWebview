digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.repeat(Ljava\/lang\/CharSequence;I)Ljava\/lang\/String;" {
Node_64 [shape=record,label="{64\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_66 [shape=record,label="{66\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lr1 = 0\l}"];
Node_67 [shape=record,label="{67\:\ 0x0007|if (r5 \< 0) goto L29\l}"];
Node_68 [shape=record,label="{68\:\ 0x0009|r2 = true\l}"];
Node_70 [shape=record,label="{70\:\ 0x000c|PHI: r2 \l  PHI: (r2v1 boolean) = (r2v0 boolean), (r2v14 boolean) binds: [B:69:0x000b, B:68:0x0009] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 == false) goto L27\l}"];
Node_71 [shape=record,label="{71\:\ 0x000e}"];
Node_72 [shape=record,label="{72\:\ 0x0010|switch(r5) \{\l    case 0: goto L26;\l    case 1: goto L24;\l    default: goto L7;\l\}\l}"];
Node_73 [shape=record,label="{73\:\ 0x0013}"];
Node_74 [shape=record,label="{74\:\ 0x0017|switch(r4.length()) \{\l    case 0: goto L23;\l    case 1: goto L17;\l    default: goto L9;\l\}\l}"];
Node_75 [shape=record,label="{75\:\ 0x001a|java.lang.StringBuilder r1 = new java.lang.StringBuilder(r4.length() * r5)\lkotlin.collections.IntIterator r0 = new kotlin.ranges.IntRange(1, r5).iterator()\l}"];
Node_83 [shape=record,label="{83\:\ 0x004b|LOOP_START\lLOOP:0: B:83:0x004b\-\>B:85:0x0051\l}"];
Node_84 [shape=record,label="{84\:\ 0x004f|if (r0.hasNext() == false) goto L13\l}"];
Node_85 [shape=record,label="{85\:\ 0x0051|LOOP_END\lLOOP:0: B:83:0x004b\-\>B:85:0x0051\l|r0.nextInt()\lr1.append(r4)\l}"];
Node_90 [shape=record,label="{90\:\ 0x0059|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0059|java.lang.String r2 = r1.toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r2, \"\{n                    vaâ€¦tring()n                \}\")\l}"];
Node_87 [shape=record,label="{87\:\ 0x0063|RETURN\lORIG_RETURN\l|return r2\l}"];
Node_65 [shape=record,label="{65\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_78 [shape=record,label="{78\:\ 0x0035|char r0 = r4.charAt(0)\lchar[] r3 = new char[r5]\l}"];
Node_79 [shape=record,label="{79\:\ 0x003c|LOOP_START\lLOOP:1: B:79:0x003c\-\>B:80:0x003e\lPHI: r1 \l  PHI: (r1v3 int) = (r1v0 int), (r1v5 int) binds: [B:78:0x0035, B:80:0x003e] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r5) goto L20\l}"];
Node_80 [shape=record,label="{80\:\ 0x003e|LOOP_END\lLOOP:1: B:79:0x003c\-\>B:80:0x003e\l|r3[r1] = r0\lint r1 = r1 + 1\l}"];
Node_91 [shape=record,label="{91\:\ 0x0043|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0043}"];
Node_93 [shape=record,label="{93\:\ ?|SYNTHETIC\lRETURN\l|return new java.lang.String(r3)\l}"];
Node_95 [shape=record,label="{95\:\ ?|SYNTHETIC\lRETURN\l|return \"\"\l}"];
Node_76 [shape=record,label="{76\:\ 0x002f}"];
Node_92 [shape=record,label="{92\:\ ?|SYNTHETIC\lRETURN\l|return r4.toString()\l}"];
Node_94 [shape=record,label="{94\:\ ?|SYNTHETIC\lRETURN\l|return \"\"\l}"];
Node_88 [shape=record,label="{88\:\ 0x0064|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Count 'n' must be non\-negative, but was \")\lr1.append(r5)\lr1.append('.')\l}"];
Node_89 [shape=record,label="{89\:\ 0x0084|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_69 [shape=record,label="{69\:\ 0x000b|r2 = false\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.repeat((r4v0 '$this$repeat' java.lang.CharSequence A[D('$this$repeat' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:85:0x0051 \-\> B:83:0x004b, BACK_EDGE: B:80:0x003e \-\> B:79:0x003c, CROSS_EDGE: B:81:0x0043 \-\> B:87:0x0063, CROSS_EDGE: B:74:0x0017 \-\> B:87:0x0063, CROSS_EDGE: B:76:0x002f \-\> B:87:0x0063, CROSS_EDGE: B:72:0x0010 \-\> B:87:0x0063, CROSS_EDGE: B:89:0x0084 \-\> B:65:?, CROSS_EDGE: B:69:0x000b \-\> B:70:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r0v6, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_64;Node_64 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_69;
Node_68 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_88;
Node_71 -> Node_72;
Node_72 -> Node_73;
Node_72 -> Node_76;
Node_72 -> Node_94;
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_74 -> Node_78;
Node_74 -> Node_95;
Node_75 -> Node_83;
Node_83 -> Node_84;
Node_84 -> Node_85[style=dashed];
Node_84 -> Node_90;
Node_85 -> Node_83;
Node_90 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_65;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_91;
Node_80 -> Node_79;
Node_91 -> Node_81;
Node_81 -> Node_93;
Node_93 -> Node_65;
Node_95 -> Node_65;
Node_76 -> Node_92;
Node_92 -> Node_65;
Node_94 -> Node_65;
Node_88 -> Node_89;
Node_89 -> Node_65;
Node_69 -> Node_70;
}

