digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.split(Ljava\/lang\/CharSequence;Ljava\/util\/regex\/Pattern;I)Ljava\/util\/List;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r2 I:java.lang.Object A[D('$this$split' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"regex\" \l0x0007: INVOKE  (r3 I:java.lang.Object A[D('regex' java.util.regex.Pattern)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r4 I:int A[D('limit' int)]) type: STATIC call: kotlin.text.StringsKt.requireNonNegativeLimit(int):void A[MD:(int):void (m)] (LINE:393)\l}"];
Node_19 [shape=record,label="{19\:\ 0x000d|0x000d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limit' int)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0011  (LINE:394)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000f|0x000f: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char]) \l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|0x0012: INVOKE  (r0 I:java.lang.String[]) = \l  (r3 I:java.util.regex.Pattern A[D('regex' java.util.regex.Pattern)])\l  (r2 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r0 I:int)\l type: VIRTUAL call: java.util.regex.Pattern.split(java.lang.CharSequence, int):java.lang.String[] A[MD:(java.lang.CharSequence, int):java.lang.String[] (c)]\l0x0016: CONST_STR  (r1 I:java.lang.String) =  \"regex.split(this, if (limit == 0) \-1 else limit)\" \l0x0018: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001b: CHECK_CAST (r0 I:java.lang.Object[]) = (java.lang.Object[]) (r0 I:??[OBJECT, ARRAY]) \l0x001d: INVOKE  (r0 I:java.util.List) = (r0 I:java.lang.Object[]) type: STATIC call: kotlin.collections.ArraysKt.asList(java.lang.Object[]):java.util.List A[MD:\<T\>:(T[]):java.util.List\<T\> (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:java.util.List\<java.lang.String\>) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|0x0011: MOVE  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)]) \l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsJVMKt.split((r2 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:java.util.regex.Pattern A[D('regex' java.util.regex.Pattern), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0011 \-\> B:22:0x0012\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0021: r2 '$this$split' Ljava\/lang\/CharSequence;\l  \-1 \-0x0021: r3 'regex' Ljava\/util\/regex\/Pattern;\l  \-1 \-0x0021: r4 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;Ljava\/util\/regex\/Pattern;I)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_17;
Node_21 -> Node_22;
}

