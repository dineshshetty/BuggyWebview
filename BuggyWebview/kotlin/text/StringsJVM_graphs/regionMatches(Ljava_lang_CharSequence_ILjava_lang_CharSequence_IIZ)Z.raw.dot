digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.regionMatches(Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;IIZ)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$regionMatches' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('other' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INSTANCE_OF  (r0 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('$this$regionMatches' java.lang.CharSequence)]) java.lang.String  (LINE:639)\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0021 \l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: INSTANCE_OF  (r0 I:boolean) = (r9 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) java.lang.String \l}"];
Node_25 [shape=record,label="{25\:\ 0x0010|0x0010: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:28:0x0021 \l}"];
Node_26 [shape=record,label="{26\:\ 0x0012|0x0012: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$regionMatches' java.lang.CharSequence)])  (LINE:640)\l0x0013: CHECK_CAST (r1 I:java.lang.String) = (java.lang.String) (r1 I:??[OBJECT, ARRAY]) \l0x0015: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) \l0x0016: CHECK_CAST (r3 I:java.lang.String) = (java.lang.String) (r3 I:??[OBJECT, ARRAY]) \l0x0018: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('thisOffset' int)]) \l0x0019: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('otherOffset' int)]) \l0x001a: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)]) \l0x001b: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x001c: INVOKE  (r0 I:boolean) = (r1 I:java.lang.String), (r2 I:int), (r3 I:java.lang.String), (r4 I:int), (r5 I:int), (r6 I:boolean) type: STATIC call: kotlin.text.StringsKt.regionMatches(java.lang.String, int, java.lang.String, int, int, boolean):boolean A[MD:(java.lang.String, int, java.lang.String, int, int, boolean):boolean (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0020|RETURN\l|0x0020: RETURN  (r0 I:boolean) \l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0021|0x0021: INVOKE  (r0 I:boolean) = \l  (r7 I:java.lang.CharSequence A[D('$this$regionMatches' java.lang.CharSequence)])\l  (r8 I:int A[D('thisOffset' int)])\l  (r9 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)])\l  (r10 I:int A[D('otherOffset' int)])\l  (r11 I:int A[D('length' int)])\l  (r12 I:boolean A[D('ignoreCase' boolean)])\l type: STATIC call: kotlin.text.StringsKt.regionMatchesImpl(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean A[MD:(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean (m)] (LINE:642)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0025|RETURN\l|0x0025: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.regionMatches((r7 I:java.lang.CharSequence A[D('$this$regionMatches' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:int A[D('thisOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('otherOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0025 \-\> B:21:?, CROSS_EDGE: B:23:0x000c \-\> B:28:0x0021\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0025: r7 '$this$regionMatches' Ljava\/lang\/CharSequence;\l  \-1 \-0x0025: r8 'thisOffset' I\l  \-1 \-0x0025: r9 'other' Ljava\/lang\/CharSequence;\l  \-1 \-0x0025: r10 'otherOffset' I\l  \-1 \-0x0025: r11 'length' I\l  \-1 \-0x0025: r12 'ignoreCase' Z\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_21;
}

