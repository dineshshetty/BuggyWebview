digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.decodeToString([BIIZ)Ljava\/lang\/String;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$decodeToString' byte[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: SGET  (r0 I:kotlin.collections.AbstractList$Companion) =  kotlin.collections.AbstractList.Companion kotlin.collections.AbstractList$Companion  (LINE:243)\l0x0007: ARRAY_LENGTH  (r1 I:int) = (r3 I:??[] A[D('$this$decodeToString' byte[])]) \l0x0008: INVOKE  \l  (r0 I:kotlin.collections.AbstractList$Companion)\l  (r4 I:int A[D('startIndex' int)])\l  (r5 I:int A[D('endIndex' int)])\l  (r1 I:int)\l type: VIRTUAL call: kotlin.collections.AbstractList.Companion.checkBoundsIndexes$kotlin_stdlib(int, int, int):void A[MD:(int, int, int):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000b|0x000b: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('throwOnInvalidSequence' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:22:0x0017  (LINE:245)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000d|0x000d: NEW_INSTANCE  (r0 I:java.lang.String) =  java.lang.String \l0x000f: ARITH  (r1 I:int) = (r5 I:int A[D('endIndex' int)]) \- (r4 I:int A[D('startIndex' int)])  (LINE:246)\l0x0011: SGET  (r2 I:java.nio.charset.Charset) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l0x0013: INVOKE  \l  (r0 I:java.lang.String)\l  (r3 I:byte[] A[D('$this$decodeToString' byte[])])\l  (r4 I:int A[D('startIndex' int)])\l  (r1 I:int)\l  (r2 I:java.nio.charset.Charset)\l type: DIRECT call: java.lang.String.\<init\>(byte[], int, int, java.nio.charset.Charset):void A[MD:(byte[], int, int, java.nio.charset.Charset):void (c)]\l}"];
Node_21 [shape=record,label="{21\:\ 0x0016|RETURN\l|0x0016: RETURN  (r0 I:java.lang.String) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0017|0x0017: SGET  (r0 I:java.nio.charset.Charset) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset  (LINE:249)\l0x0019: INVOKE  (r0 I:java.nio.charset.CharsetDecoder) = (r0 I:java.nio.charset.Charset) type: VIRTUAL call: java.nio.charset.Charset.newDecoder():java.nio.charset.CharsetDecoder A[MD:():java.nio.charset.CharsetDecoder (c)]\l0x001d: SGET  (r1 I:java.nio.charset.CodingErrorAction) =  java.nio.charset.CodingErrorAction.REPORT java.nio.charset.CodingErrorAction  (LINE:250)\l0x001f: INVOKE  (r0 I:java.nio.charset.CharsetDecoder) = (r0 I:java.nio.charset.CharsetDecoder), (r1 I:java.nio.charset.CodingErrorAction) type: VIRTUAL call: java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetDecoder A[MD:(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetDecoder (c)]\l0x0023: SGET  (r1 I:java.nio.charset.CodingErrorAction) =  java.nio.charset.CodingErrorAction.REPORT java.nio.charset.CodingErrorAction  (LINE:251)\l0x0025: INVOKE  (r0 I:java.nio.charset.CharsetDecoder) = (r0 I:java.nio.charset.CharsetDecoder), (r1 I:java.nio.charset.CodingErrorAction) type: VIRTUAL call: java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetDecoder A[MD:(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetDecoder (c)]\l0x002a: ARITH  (r1 I:int) = (r5 I:int A[D('endIndex' int)]) \- (r4 I:int A[D('startIndex' int)])  (LINE:253)\l0x002c: INVOKE  (r1 I:java.nio.ByteBuffer) = (r3 I:byte[] A[D('$this$decodeToString' byte[])]), (r4 I:int A[D('startIndex' int)]), (r1 I:int) type: STATIC call: java.nio.ByteBuffer.wrap(byte[], int, int):java.nio.ByteBuffer A[MD:(byte[], int, int):java.nio.ByteBuffer (c)]\l0x0030: INVOKE  (r1 I:java.nio.CharBuffer) = (r0 I:java.nio.charset.CharsetDecoder A[D('decoder' java.nio.charset.CharsetDecoder)]), (r1 I:java.nio.ByteBuffer) type: VIRTUAL call: java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer):java.nio.CharBuffer A[MD:(java.nio.ByteBuffer):java.nio.CharBuffer throws java.nio.charset.CharacterCodingException (c)]\l0x0034: INVOKE  (r1 I:java.lang.String) = (r1 I:java.nio.CharBuffer) type: VIRTUAL call: java.nio.CharBuffer.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0038: CONST_STR  (r2 I:java.lang.String) =  \"decoder.decode(ByteBuffeâ€¦\- startIndex)).toString()\" \l0x003a: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x003d|RETURN\l|0x003d: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.decodeToString((r3 I:byte[] A[D('$this$decodeToString' byte[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('throwOnInvalidSequence' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x003d \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002a\-0x003d: r0 'decoder' Ljava\/nio\/charset\/CharsetDecoder;\l  \-1 \-0x003d: r3 '$this$decodeToString' [B\l  \-1 \-0x003d: r4 'startIndex' I\l  \-1 \-0x003d: r5 'endIndex' I\l  \-1 \-0x003d: r6 'throwOnInvalidSequence' Z\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

