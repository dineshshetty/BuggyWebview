digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.repeat(Ljava\/lang\/CharSequence;I)Ljava\/lang\/String;" {
subgraph cluster_Region_352269017 {
label = "R(2:1|(2:(2:27|28)|(1:6)))";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lint r1 = 0\l}"];
subgraph cluster_Region_2000462012 {
label = "R(2:(2:27|28)|(1:6))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_417035727 {
label = "IF [B:70:0x000c] THEN: R(2:27|28) ELSE: null";
node [shape=record,color=blue];
Node_70 [shape=record,label="{70\:\ 0x000c|PHI: r2 \l  PHI: (r2v1 boolean A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|if ((r5 \>= 0) == false) goto L27\l}"];
subgraph cluster_Region_1754044041 {
label = "R(2:27|28)";
node [shape=record,color=blue];
Node_88 [shape=record,label="{88\:\ 0x0064}"];
Node_89 [shape=record,label="{89\:\ 0x0084|throw new java.lang.IllegalArgumentException((\"Count 'n' must be non\-negative, but was \" + r5 + '.').toString())\l}"];
}
}
subgraph cluster_Region_179243645 {
label = "R(1:6)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_402940628 {
label = "Switch: 3
 case 0 -> R(1:26)
 case 1 -> R(1:25)
 case default -> R(1:8)";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x0010|switch(r5) \{\l    case 0: goto L26;\l    case 1: goto L24;\l    default: goto L7;\l\}\l}"];
subgraph cluster_Region_1538398486 {
label = "R(1:26)";
node [shape=record,color=blue];
Node_94 [shape=record,label="{94\:\ ?|SYNTHETIC\lRETURN\l|return \"\"\l}"];
}
subgraph cluster_Region_1460069431 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_92 [shape=record,label="{92\:\ ?|SYNTHETIC\lRETURN\l|return r4.toString()\l}"];
}
subgraph cluster_Region_621342792 {
label = "R(1:8)";
node [shape=record,color=blue];
subgraph cluster_SwitchRegion_505492735 {
label = "Switch: 3
 case 0 -> R(1:23)
 case 1 -> R(3:17|(1:19)|22)
 case default -> R(4:9|(1:12)|14|15)";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x0017|switch(r4.length()) \{\l    case 0: goto L23;\l    case 1: goto L17;\l    default: goto L9;\l\}\l}"];
subgraph cluster_Region_1427174532 {
label = "R(1:23)";
node [shape=record,color=blue];
Node_95 [shape=record,label="{95\:\ ?|SYNTHETIC\lRETURN\l|return \"\"\l}"];
}
subgraph cluster_Region_1023583698 {
label = "R(3:17|(1:19)|22)";
node [shape=record,color=blue];
Node_78 [shape=record,label="{78\:\ 0x0035|char char r0 = r4.charAt(0)\lchar[] char[] r3 = new char[r5]\l}"];
subgraph cluster_LoopRegion_771109223 {
label = "LOOP:1: (1:19)";
node [shape=record,color=blue];
Node_79 [shape=record,label="{79\:\ 0x003c|LOOP_START\lLOOP:1: B:79:0x003c\-\>B:80:0x003e\lPHI: r1 \l  PHI: (r1v3 int) = (r1v0 int), (r1v5 int) binds: [B:78:0x0035, B:80:0x003e] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \< r5) goto L19\l}"];
subgraph cluster_Region_123118947 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_80 [shape=record,label="{80\:\ 0x003e|LOOP_END\lLOOP:1: B:79:0x003c\-\>B:80:0x003e\l|r3[r1] = r0\lr1++\l}"];
}
}
Node_93 [shape=record,label="{93\:\ ?|SYNTHETIC\lRETURN\l|return new java.lang.String(r3)\l}"];
}
subgraph cluster_Region_1342579025 {
label = "R(4:9|(1:12)|14|15)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x001a|java.lang.StringBuilder java.lang.StringBuilder r1 = new java.lang.StringBuilder(r4.length() * r5)\lkotlin.collections.IntIterator ?? r0 = new kotlin.ranges.IntRange(1, r5).iterator()\l}"];
subgraph cluster_LoopRegion_2116589165 {
label = "LOOP:0: (1:12)";
node [shape=record,color=blue];
Node_84 [shape=record,label="{84\:\ 0x004f|if (r0.hasNext() != false) goto L12\l}"];
subgraph cluster_Region_1281838911 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_85 [shape=record,label="{85\:\ 0x0051|LOOP_END\lLOOP:0: B:83:0x004b\-\>B:85:0x0051\l|r0.nextInt()\lr1.append(r4)\l}"];
}
}
Node_86 [shape=record,label="{86\:\ 0x0059|java.lang.String java.lang.String r2 = r1.toString()\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r2, \"\{n                    vaâ€¦tring()n                \}\")\l}"];
Node_87 [shape=record,label="{87\:\ 0x0063|RETURN\lORIG_RETURN\l|return r2\l}"];
}
}
}
}
}
}
}
Node_64 [shape=record,color=red,label="{64\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_67 [shape=record,color=red,label="{67\:\ 0x0007}"];
Node_68 [shape=record,color=red,label="{68\:\ 0x0009}"];
Node_71 [shape=record,color=red,label="{71\:\ 0x000e}"];
Node_73 [shape=record,color=red,label="{73\:\ 0x0013}"];
Node_83 [shape=record,color=red,label="{83\:\ 0x004b|LOOP_START\lLOOP:0: B:83:0x004b\-\>B:85:0x0051\l}"];
Node_90 [shape=record,color=red,label="{90\:\ 0x0059|SYNTHETIC\l}"];
Node_65 [shape=record,color=red,label="{65\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_91 [shape=record,color=red,label="{91\:\ 0x0043|SYNTHETIC\l}"];
Node_81 [shape=record,color=red,label="{81\:\ 0x0043}"];
Node_76 [shape=record,color=red,label="{76\:\ 0x002f}"];
Node_69 [shape=record,color=red,label="{69\:\ 0x000b}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.repeat((r4v0 '$this$repeat' java.lang.CharSequence A[D('$this$repeat' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'n' int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:85:0x0051 \-\> B:83:0x004b, BACK_EDGE: B:80:0x003e \-\> B:79:0x003c, CROSS_EDGE: B:81:0x0043 \-\> B:87:0x0063, CROSS_EDGE: B:74:0x0017 \-\> B:87:0x0063, CROSS_EDGE: B:76:0x002f \-\> B:87:0x0063, CROSS_EDGE: B:72:0x0010 \-\> B:87:0x0063, CROSS_EDGE: B:89:0x0084 \-\> B:65:?, CROSS_EDGE: B:69:0x000b \-\> B:70:0x000c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lJadxCommentsAttr\{\l WARN: \l \-\> Type inference failed for: r0v6, types: [kotlin.collections.IntIterator]\}\l}"];
MethodNode -> Node_64;Node_66 -> Node_67;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_65;
Node_72 -> Node_73;
Node_72 -> Node_76;
Node_72 -> Node_94;
Node_94 -> Node_65;
Node_92 -> Node_65;
Node_74 -> Node_75;
Node_74 -> Node_78;
Node_74 -> Node_95;
Node_95 -> Node_65;
Node_78 -> Node_79;
Node_79 -> Node_80;
Node_79 -> Node_91[style=dashed];
Node_80 -> Node_79;
Node_93 -> Node_65;
Node_75 -> Node_83;
Node_84 -> Node_85;
Node_84 -> Node_90[style=dashed];
Node_85 -> Node_83;
Node_86 -> Node_87;
Node_87 -> Node_65;
Node_64 -> Node_66;
Node_67 -> Node_68;
Node_67 -> Node_69;
Node_68 -> Node_70;
Node_71 -> Node_72;
Node_73 -> Node_74;
Node_83 -> Node_84;
Node_90 -> Node_86;
Node_91 -> Node_81;
Node_81 -> Node_93;
Node_76 -> Node_92;
Node_69 -> Node_70;
}

