digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.equals(Ljava\/lang\/String;Ljava\/lang\/String;Z)Z" {
subgraph cluster_Region_37147030 {
label = "R(1:(1:2)(1:(1:8)(1:10)))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1242661925 {
label = "IF [B:28:0x0000] THEN: R(1:2) ELSE: R(1:(1:8)(1:10))";
node [shape=record,color=blue];
Node_28 [shape=record,label="{28\:\ 0x0000|if (r1 == null) goto L2\l}"];
subgraph cluster_Region_1684354543 {
label = "R(1:2)";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0002|RETURN\l|return r2 == null\l}"];
}
subgraph cluster_Region_608008455 {
label = "R(1:(1:8)(1:10)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_280213111 {
label = "IF [B:33:0x0008] THEN: R(1:8) ELSE: R(1:10) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_33 [shape=record,label="{33\:\ 0x0008|if (r3 == false) goto L7\l}"];
subgraph cluster_Region_1455765736 {
label = "R(1:8)";
node [shape=record,color=blue];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|return r1.equals(r2)\l}"];
}
subgraph cluster_Region_465741202 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_36 [shape=record,label="{36\:\ 0x0013|RETURN\lORIG_RETURN\l|return r1.equalsIgnoreCase(r2)\l}"];
}
}
}
}
}
Node_26 [shape=record,color=red,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x0004|SYNTHETIC\l}"];
Node_27 [shape=record,color=red,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_31 [shape=record,color=red,label="{31\:\ 0x0006|ORIG_RETURN\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x000a}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x000f}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.equals((r1v0 '$this$equals' java.lang.String A[D('$this$equals' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2v0 'other' java.lang.String A[D('other' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:31:0x0006 \-\> B:32:0x0007, CROSS_EDGE: B:36:0x0013 \-\> B:27:?, CROSS_EDGE: B:35:0x000f \-\> B:36:0x0013\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_26;Node_28 -> Node_29;
Node_28 -> Node_33[style=dashed];
Node_29 -> Node_30;
Node_29 -> Node_31;
Node_33 -> Node_34;
Node_33 -> Node_35[style=dashed];
Node_38 -> Node_27;
Node_36 -> Node_27;
Node_26 -> Node_28;
Node_30 -> Node_27;
Node_31 -> Node_27;
Node_34 -> Node_38;
Node_35 -> Node_36;
}

