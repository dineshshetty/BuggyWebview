digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.regionMatches(Ljava\/lang\/String;ILjava\/lang\/String;IIZ)Z" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$regionMatches' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('other' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r11 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0011  (LINE:653)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|0x000c: INVOKE  (r0 I:boolean) = \l  (r6 I:java.lang.String A[D('$this$regionMatches' java.lang.String)])\l  (r7 I:int A[D('thisOffset' int)])\l  (r8 I:java.lang.String A[D('other' java.lang.String)])\l  (r9 I:int A[D('otherOffset' int)])\l  (r10 I:int A[D('length' int)])\l type: VIRTUAL call: java.lang.String.regionMatches(int, java.lang.String, int, int):boolean A[MD:(int, java.lang.String, int, int):boolean (c)] (LINE:654)\l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x001b: RETURN  (r0 I:boolean) A[SYNTHETIC]\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0011|0x0011: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$regionMatches' java.lang.String)])  (LINE:656)\l0x0012: MOVE  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x0013: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('thisOffset' int)]) \l0x0014: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('other' java.lang.String)]) \l0x0015: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('otherOffset' int)]) \l0x0016: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('length' int)]) \l0x0017: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:boolean), (r2 I:int), (r3 I:java.lang.String), (r4 I:int), (r5 I:int) type: VIRTUAL call: java.lang.String.regionMatches(boolean, int, java.lang.String, int, int):boolean A[MD:(boolean, int, java.lang.String, int, int):boolean (c)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x001b|RETURN\lORIG_RETURN\l|0x001b: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.regionMatches((r6 I:java.lang.String A[D('$this$regionMatches' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('thisOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[D('other' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:int A[D('otherOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0011 \-\> B:22:0x001b\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x001b: r6 '$this$regionMatches' Ljava\/lang\/String;\l  \-1 \-0x001b: r7 'thisOffset' I\l  \-1 \-0x001b: r8 'other' Ljava\/lang\/String;\l  \-1 \-0x001b: r9 'otherOffset' I\l  \-1 \-0x001b: r10 'length' I\l  \-1 \-0x001b: r11 'ignoreCase' Z\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_17;
}

