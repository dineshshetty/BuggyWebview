digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.replace(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Z)Ljava\/lang\/String;" {
Node_36 [shape=record,label="{36\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$replace' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"oldValue\" \l0x0007: INVOKE  (r11 I:java.lang.Object A[D('oldValue' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"newValue\" \l0x000c: INVOKE  (r12 I:java.lang.Object A[D('newValue' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$replace' java.lang.String)])  (LINE:87)\l0x0010: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0011: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$replace_u24lambda_u2d2' java.lang.String)])  (LINE:88)\l0x0012: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l0x0014: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0015: INVOKE  (r2 I:int) = \l  (r2 I:java.lang.CharSequence)\l  (r11 I:java.lang.String A[D('oldValue' java.lang.String)])\l  (r3 I:int)\l  (r13 I:boolean A[D('ignoreCase' boolean)])\l type: STATIC call: kotlin.text.StringsKt.indexOf(java.lang.CharSequence, java.lang.String, int, boolean):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean):int (m)]\l}"];
Node_39 [shape=record,label="{39\:\ 0x0019|0x0019: IF  (r2 I:??[int, byte, short, char] A[D('occurrenceIndex' int)]) \>= (0 ??[int, byte, short, char])  \-\> B:41:0x001c  (LINE:90)\l}"];
Node_40 [shape=record,label="{40\:\ 0x001b|RETURN\l|0x001b: RETURN  (r0 I:java.lang.String A[D('$this$replace_u24lambda_u2d2' java.lang.String)]) \l}"];
Node_37 [shape=record,label="{37\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ 0x001c|0x001c: INVOKE  (r3 I:int) = (r11 I:java.lang.String A[D('oldValue' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:92)\l0x0020: CONST  (r4 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:93)\l0x0021: INVOKE  (r4 I:int) = (r3 I:int A[D('oldValueLength' int)]), (r4 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0025: INVOKE  (r5 I:int) = (r0 I:java.lang.String A[D('$this$replace_u24lambda_u2d2' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:94)\l0x0029: ARITH  (r5 I:int) = (r5 I:int) \- (r3 I:int A[D('oldValueLength' int)]) \l0x002a: INVOKE  (r6 I:int) = (r12 I:java.lang.String A[D('newValue' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x002e: ARITH  (r5 I:int) = (r5 I:int) + (r6 I:int) \l}"];
Node_42 [shape=record,label="{42\:\ 0x002f|0x002f: IF  (r5 I:??[int, byte, short, char] A[D('newLengthHint' int)]) \< (0 ??[int, byte, short, char])  \-\> B:50:0x0067  (LINE:95)\l}"];
Node_43 [shape=record,label="{43\:\ 0x0031|0x0031: NEW_INSTANCE  (r6 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:96)\l0x0033: INVOKE  (r6 I:java.lang.StringBuilder), (r5 I:int A[D('newLengthHint' int)]) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l0x0036: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:98)\l}"];
Node_44 [shape=record,label="{44\:\ 0x0037|LOOP_START\lLOOP:0: B:44:0x0037\-\>B:47:0x0051\l|0x0037: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$replace_u24lambda_u2d2' java.lang.String)])  (LINE:100)\l0x0038: CHECK_CAST (r8 I:java.lang.CharSequence) = (java.lang.CharSequence) (r8 I:??[OBJECT, ARRAY]) \l0x003a: INVOKE  \l  (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)])\l  (r8 I:java.lang.CharSequence)\l  (r7 I:int A[D('i' int)])\l  (r2 I:int A[D('occurrenceIndex' int)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x003d: INVOKE  \l  (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)])\l  (r12 I:java.lang.String A[D('newValue' java.lang.String)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0040: ARITH  (r7 I:int A[D('i' int)]) = (r2 I:int A[D('occurrenceIndex' int)]) + (r3 I:int A[D('oldValueLength' int)])  (LINE:101)\l0x0042: INVOKE  (r8 I:int) = (r0 I:java.lang.String A[D('$this$replace_u24lambda_u2d2' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:102)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0046|0x0046: IF  (r2 I:??[int, byte, short, char] A[D('occurrenceIndex' int)]) \>= (r8 I:??[int, byte, short, char])  \-\> B:53:0x0053 \l}"];
Node_46 [shape=record,label="{46\:\ 0x0048|0x0048: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$replace_u24lambda_u2d2' java.lang.String)])  (LINE:103)\l0x0049: CHECK_CAST (r8 I:java.lang.CharSequence) = (java.lang.CharSequence) (r8 I:??[OBJECT, ARRAY]) \l0x004b: ARITH  (r9 I:int) = (r2 I:int A[D('occurrenceIndex' int)]) + (r4 I:int A[D('searchStep' int)]) \l0x004d: INVOKE  (r2 I:int A[D('occurrenceIndex' int)]) = \l  (r8 I:java.lang.CharSequence)\l  (r11 I:java.lang.String A[D('oldValue' java.lang.String)])\l  (r9 I:int)\l  (r13 I:boolean A[D('ignoreCase' boolean)])\l type: STATIC call: kotlin.text.StringsKt.indexOf(java.lang.CharSequence, java.lang.String, int, boolean):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean):int (m)]\l}"];
Node_47 [shape=record,label="{47\:\ 0x0051|LOOP_END\lLOOP:0: B:44:0x0037\-\>B:47:0x0051\l|0x0051: IF  (r2 I:??[int, byte, short, char] A[D('occurrenceIndex' int)]) \> (0 ??[int, byte, short, char])  \-\> B:44:0x0037  (LINE:104)\l}"];
Node_52 [shape=record,label="{52\:\ 0x0053|SYNTHETIC\l}"];
Node_48 [shape=record,label="{48\:\ 0x0053|0x0053: MOVE  (r8 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$replace_u24lambda_u2d2' java.lang.String)])  (LINE:105)\l0x0054: CHECK_CAST (r8 I:java.lang.CharSequence) = (java.lang.CharSequence) (r8 I:??[OBJECT, ARRAY]) \l0x0056: INVOKE  (r9 I:int) = (r0 I:java.lang.String A[D('$this$replace_u24lambda_u2d2' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x005a: INVOKE  \l  (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)])\l  (r8 I:java.lang.CharSequence)\l  (r7 I:int A[D('i' int)])\l  (r9 I:int)\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x005d: INVOKE  (r8 I:java.lang.String) = (r6 I:java.lang.StringBuilder A[D('stringBuilder' java.lang.StringBuilder)]) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0061: CONST_STR  (r9 I:java.lang.String) =  \"stringBuilder.append(this, i, length).toString()\" \l0x0063: INVOKE  (r8 I:java.lang.Object), (r9 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_49 [shape=record,label="{49\:\ 0x0066|RETURN\l|0x0066: RETURN  (r8 I:java.lang.String) \l}"];
Node_53 [shape=record,label="{53\:\ 0x0053|SYNTHETIC\l}"];
Node_50 [shape=record,label="{50\:\ 0x0067|0x0067: NEW_INSTANCE  (r6 I:java.lang.OutOfMemoryError A[D('stringBuilder' java.lang.StringBuilder)]) =  java.lang.OutOfMemoryError  (LINE:95)\l0x0069: INVOKE  (r6 I:java.lang.OutOfMemoryError) type: DIRECT call: java.lang.OutOfMemoryError.\<init\>():void A[MD:():void (c)]\l}"];
Node_51 [shape=record,label="{51\:\ 0x006c|0x006c: THROW  (r6 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.replace((r10 I:java.lang.String A[D('$this$replace' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.String A[D('oldValue' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.String A[D('newValue' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:47:0x0051 \-\> B:44:0x0037, CROSS_EDGE: B:49:0x0066 \-\> B:37:?, CROSS_EDGE: B:45:0x0046 \-\> B:48:0x0053, CROSS_EDGE: B:51:0x006c \-\> B:37:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0036\-0x0067: r6 'stringBuilder' Ljava\/lang\/StringBuilder;\l  0x0037\-0x0067: r7 'i' I\l  0x0010\-0x006c: r0 '$this$replace_u24lambda_u2d2' Ljava\/lang\/String;\l  0x0011\-0x006c: r1 '$i$a$\-run\-StringsKt__StringsJVMKt$replace$2' I\l  0x0019\-0x006c: r2 'occurrenceIndex' I\l  0x0020\-0x006c: r3 'oldValueLength' I\l  0x0025\-0x006c: r4 'searchStep' I\l  0x002f\-0x006c: r5 'newLengthHint' I\l  \-1 \-0x006c: r10 '$this$replace' Ljava\/lang\/String;\l  \-1 \-0x006c: r11 'oldValue' Ljava\/lang\/String;\l  \-1 \-0x006c: r12 'newValue' Ljava\/lang\/String;\l  \-1 \-0x006c: r13 'ignoreCase' Z\l}"];
MethodNode -> Node_36;Node_36 -> Node_38;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_41;
Node_40 -> Node_37;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_50;
Node_43 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_53;
Node_46 -> Node_47;
Node_47 -> Node_44;
Node_47 -> Node_52[style=dashed];
Node_52 -> Node_48;
Node_48 -> Node_49;
Node_49 -> Node_37;
Node_53 -> Node_48;
Node_50 -> Node_51;
Node_51 -> Node_37;
}

