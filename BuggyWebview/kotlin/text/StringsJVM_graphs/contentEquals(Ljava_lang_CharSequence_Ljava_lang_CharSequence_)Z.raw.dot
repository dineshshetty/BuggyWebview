digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.contentEquals(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Z" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|0x0000: INSTANCE_OF  (r0 I:boolean) = (r1 I:??[OBJECT, ARRAY] A[D('$this$contentEquals' java.lang.CharSequence)]) java.lang.String  (LINE:586)\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|0x0002: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000e \l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|0x0004: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('other' java.lang.CharSequence)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:24:0x000e \l}"];
Node_23 [shape=record,label="{23\:\ 0x0006|0x0006: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('$this$contentEquals' java.lang.CharSequence)])  (LINE:587)\l0x0007: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l0x0009: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r2 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: VIRTUAL call: java.lang.String.contentEquals(java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence):boolean (c)]\l}"];
Node_26 [shape=record,label="{26\:\ ?|SYNTHETIC\lRETURN\l|0x0012: RETURN  (r0 I:boolean) A[SYNTHETIC] (LINE:586)\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e|0x000e: INVOKE  (r0 I:boolean) = \l  (r1 I:java.lang.CharSequence A[D('$this$contentEquals' java.lang.CharSequence)])\l  (r2 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)])\l type: STATIC call: kotlin.text.StringsKt.contentEqualsImpl(java.lang.CharSequence, java.lang.CharSequence):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence):boolean (m)] (LINE:589)\l}"];
Node_25 [shape=record,label="{25\:\ 0x0012|RETURN\lORIG_RETURN\l|0x0012: RETURN  (r0 I:boolean)  (LINE:586)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.contentEquals((r1 I:java.lang.CharSequence A[D('$this$contentEquals' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r2 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:24:0x000e \-\> B:25:0x0012, CROSS_EDGE: B:21:0x0002 \-\> B:24:0x000e\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0012: r1 '$this$contentEquals' Ljava\/lang\/CharSequence;\l  \-1 \-0x0012: r2 'other' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21;
Node_21 -> Node_22[style=dashed];
Node_21 -> Node_24;
Node_22 -> Node_23[style=dashed];
Node_22 -> Node_24;
Node_23 -> Node_26;
Node_26 -> Node_19;
Node_24 -> Node_25;
Node_25 -> Node_19;
}

