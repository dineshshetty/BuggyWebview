digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.split(Ljava\/lang\/CharSequence;Ljava\/util\/regex\/Pattern;I)Ljava\/util\/List;" {
subgraph cluster_Region_800312073 {
label = "R(3:1|4|5)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"regex\")\lkotlin.text.StringsKt.requireNonNegativeLimit(r4)\l}"];
Node_22 [shape=record,label="{22\:\ 0x0012|PHI: r0 \l  PHI: (r0v3 int A[REMOVE]) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|java.lang.String[] java.lang.String[] r0 = r3.split(r2, r4 == 0 ? \-1 : r4)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, \"regex.split(this, if (limit == 0) \-1 else limit)\")\l}"];
Node_23 [shape=record,label="{23\:\ 0x0021|RETURN\l|return kotlin.collections.ArraysKt.asList(r0)\l}"];
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_19 [shape=record,color=red,label="{19\:\ 0x000d}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x000f}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0011}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsJVMKt.split((r2v0 '$this$split' java.lang.CharSequence A[D('$this$split' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3v0 'regex' java.util.regex.Pattern A[D('regex' java.util.regex.Pattern), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'limit' int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0011 \-\> B:22:0x0012\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;Ljava\/util\/regex\/Pattern;I)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_22 -> Node_23;
Node_23 -> Node_17;
Node_16 -> Node_18;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_20 -> Node_22;
Node_21 -> Node_22;
}

