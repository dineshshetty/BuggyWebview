digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.repeat(Ljava\/lang\/CharSequence;I)Ljava\/lang\/String;" {
Node_64 [shape=record,label="{64\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_66 [shape=record,label="{66\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$repeat' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:795)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_67 [shape=record,label="{67\:\ 0x0007|0x0007: IF  (r5 I:??[int, byte, short, char] A[D('n' int)]) \< (0 ??[int, byte, short, char])  \-\> B:69:0x000b \l}"];
Node_68 [shape=record,label="{68\:\ 0x0009|0x0009: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_70 [shape=record,label="{70\:\ 0x000c|0x000c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:88:0x0064 \l}"];
Node_71 [shape=record,label="{71\:\ 0x000e|0x000e: CONST_STR  (r2 I:java.lang.String) =  \"\"  (LINE:797)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0010|0x0010: SWITCH  (r5 I:?? A[D('n' int)])\l case 0: goto B:94:?\l case 1: goto B:76:0x002f\l default: goto B:73:0x0013 \l}"];
Node_73 [shape=record,label="{73\:\ 0x0013|0x0013: INVOKE  (r3 I:int) = (r4 I:java.lang.CharSequence A[D('$this$repeat' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:801)\l}"];
Node_74 [shape=record,label="{74\:\ 0x0017|0x0017: SWITCH  (r3 I:??)\l case 0: goto B:95:?\l case 1: goto B:78:0x0035\l default: goto B:75:0x001a \l}"];
Node_75 [shape=record,label="{75\:\ 0x001a|0x001a: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:805)\l0x001c: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('$this$repeat' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0020: ARITH  (r2 I:int) = (r2 I:int) * (r5 I:int A[D('n' int)]) \l0x0022: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l0x0025: NEW_INSTANCE  (r2 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:806)\l0x0027: INVOKE  (r2 I:kotlin.ranges.IntRange), (r0 I:int), (r5 I:int A[D('n' int)]) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x002a: INVOKE  (r0 I:kotlin.collections.IntIterator) = (r2 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_83 [shape=record,label="{83\:\ 0x004b|LOOP_START\lLOOP:0: B:83:0x004b\-\>B:85:0x0051\l|0x004b: INVOKE  (r2 I:boolean) = (r0 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)] (LINE:806)\l}"];
Node_84 [shape=record,label="{84\:\ 0x004f|0x004f: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:90:0x0059 \l}"];
Node_85 [shape=record,label="{85\:\ 0x0051|LOOP_END\lLOOP:0: B:83:0x004b\-\>B:85:0x0051\l|0x0051: INVOKE  (r2 I:int) = (r0 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x0055: INVOKE  \l  (r1 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r4 I:java.lang.CharSequence A[D('$this$repeat' java.lang.CharSequence)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder A[MD:(java.lang.CharSequence):java.lang.StringBuilder (c)] (LINE:807)\l}"];
Node_90 [shape=record,label="{90\:\ 0x0059|SYNTHETIC\l}"];
Node_86 [shape=record,label="{86\:\ 0x0059|0x0059: INVOKE  (r2 I:java.lang.String) = (r1 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)]) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:809)\l0x005e: CONST_STR  (r0 I:java.lang.String) =  \"\{n                    vaâ€¦tring()n                \}\"  (LINE:807)\l0x0060: INVOKE  (r2 I:java.lang.Object), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_87 [shape=record,label="{87\:\ 0x0063|RETURN\lORIG_RETURN\l|0x0063: RETURN  (r2 I:java.lang.String)  (LINE:797)\l}"];
Node_65 [shape=record,label="{65\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_78 [shape=record,label="{78\:\ 0x0035|0x0035: INVOKE  (r0 I:char) = (r4 I:java.lang.CharSequence A[D('$this$repeat' java.lang.CharSequence)]), (r1 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:803)\l0x0039: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:828)\l0x003a: NEW_ARRAY  (r3 I:char[]) = (r5 I:int A[D('n' int), IMMUTABLE_TYPE]) type: char[]  (LINE:803)\l}"];
Node_79 [shape=record,label="{79\:\ 0x003c|LOOP_START\lLOOP:1: B:79:0x003c\-\>B:80:0x003e\l|0x003c: IF  (r1 I:??[int, byte, short, char]) \>= (r5 I:??[int, byte, short, char] A[D('n' int)])  \-\> B:91:0x0043 \l}"];
Node_80 [shape=record,label="{80\:\ 0x003e|LOOP_END\lLOOP:1: B:79:0x003c\-\>B:80:0x003e\l|0x003e: APUT  (r3 I:char[] A[IMMUTABLE_TYPE]), (r1 I:??[int, short, byte, char]), (r0 I:char A[D('char' char), IMMUTABLE_TYPE]) \l0x0040: ARITH  (r1 I:int) = (r1 I:int) + (1 int) \l}"];
Node_91 [shape=record,label="{91\:\ 0x0043|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0043|0x0043: NEW_INSTANCE  (r1 I:java.lang.String) =  java.lang.String \l0x0045: INVOKE  (r1 I:java.lang.String), (r3 I:char[]) type: DIRECT call: java.lang.String.\<init\>(char[]):void A[MD:(char[]):void (c)]\l0x0048: MOVE  (r2 I:??[OBJECT, ARRAY] A[D('$i$a$\-let\-StringsKt__StringsJVMKt$repeat$2' int)]) = (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_93 [shape=record,label="{93\:\ ?|SYNTHETIC\lRETURN\l|0x0063: RETURN  (r2 I:java.lang.String) A[SYNTHETIC] (LINE:797)\l}"];
Node_95 [shape=record,label="{95\:\ ?|SYNTHETIC\lRETURN\l|0x0063: RETURN  (r2 I:java.lang.String) A[SYNTHETIC] (LINE:797)\l}"];
Node_76 [shape=record,label="{76\:\ 0x002f|0x002f: INVOKE  (r2 I:java.lang.String) = (r4 I:java.lang.Object A[D('$this$repeat' java.lang.CharSequence)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:799)\l}"];
Node_92 [shape=record,label="{92\:\ ?|SYNTHETIC\lRETURN\l|0x0063: RETURN  (r2 I:java.lang.String) A[SYNTHETIC] (LINE:797)\l}"];
Node_94 [shape=record,label="{94\:\ ?|SYNTHETIC\lRETURN\l|0x0063: RETURN  (r2 I:java.lang.String) A[SYNTHETIC] (LINE:797)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0064|0x0064: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:828)\l0x0065: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:795)\l0x0067: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x006a: CONST_STR  (r2 I:java.lang.String) =  \"Count 'n' must be non\-negative, but was \" \l0x006c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x006f: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('n' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0072: CONST  (r2 I:??[int, float, short, byte, char]) = (46 ??[int, float, short, byte, char]) \l0x0074: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x0077: INVOKE  (r0 I:java.lang.String A[D('$i$a$\-require\-StringsKt__StringsJVMKt$repeat$1' int)]) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x007b: NEW_INSTANCE  (r1 I:java.lang.IllegalArgumentException) =  java.lang.IllegalArgumentException \l0x007d: INVOKE  (r0 I:java.lang.String) = (r0 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0081: INVOKE  (r1 I:java.lang.IllegalArgumentException), (r0 I:java.lang.String) type: DIRECT call: java.lang.IllegalArgumentException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_89 [shape=record,label="{89\:\ 0x0084|0x0084: THROW  (r1 I:java.lang.Throwable) \l}"];
Node_69 [shape=record,label="{69\:\ 0x000b|0x000b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.repeat((r4 I:java.lang.CharSequence A[D('$this$repeat' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('n' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:85:0x0051 \-\> B:83:0x004b, BACK_EDGE: B:80:0x003e \-\> B:79:0x003c, CROSS_EDGE: B:81:0x0043 \-\> B:87:0x0063, CROSS_EDGE: B:74:0x0017 \-\> B:87:0x0063, CROSS_EDGE: B:76:0x002f \-\> B:87:0x0063, CROSS_EDGE: B:72:0x0010 \-\> B:87:0x0063, CROSS_EDGE: B:89:0x0084 \-\> B:65:?, CROSS_EDGE: B:69:0x000b \-\> B:70:0x000c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0025\-0x002f: r1 'sb' Ljava\/lang\/StringBuilder;\l  0x0039\-0x0049: r0 'char' C\l  0x003a\-0x0049: r2 '$i$a$\-let\-StringsKt__StringsJVMKt$repeat$2' I\l  0x0055\-0x0059: r2 'i' I\l  0x004b\-0x005d: r1 'sb' Ljava\/lang\/StringBuilder;\l  0x0065\-0x007b: r0 '$i$a$\-require\-StringsKt__StringsJVMKt$repeat$1' I\l  \-1 \-0x0095: r4 '$this$repeat' Ljava\/lang\/CharSequence;\l  \-1 \-0x0095: r5 'n' I\l}"];
MethodNode -> Node_64;Node_64 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_69;
Node_68 -> Node_70;
Node_70 -> Node_71[style=dashed];
Node_70 -> Node_88;
Node_71 -> Node_72;
Node_72 -> Node_73;
Node_72 -> Node_76;
Node_72 -> Node_94;
Node_73 -> Node_74;
Node_74 -> Node_75;
Node_74 -> Node_78;
Node_74 -> Node_95;
Node_75 -> Node_83;
Node_83 -> Node_84;
Node_84 -> Node_85[style=dashed];
Node_84 -> Node_90;
Node_85 -> Node_83;
Node_90 -> Node_86;
Node_86 -> Node_87;
Node_87 -> Node_65;
Node_78 -> Node_79;
Node_79 -> Node_80[style=dashed];
Node_79 -> Node_91;
Node_80 -> Node_79;
Node_91 -> Node_81;
Node_81 -> Node_93;
Node_93 -> Node_65;
Node_95 -> Node_65;
Node_76 -> Node_92;
Node_92 -> Node_65;
Node_94 -> Node_65;
Node_88 -> Node_89;
Node_89 -> Node_65;
Node_69 -> Node_70;
}

