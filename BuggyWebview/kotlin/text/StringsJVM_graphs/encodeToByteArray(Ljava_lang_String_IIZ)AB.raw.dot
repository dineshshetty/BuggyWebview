digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.encodeToByteArray(Ljava\/lang\/String;IIZ)[B" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r5 I:java.lang.Object A[D('$this$encodeToByteArray' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: SGET  (r0 I:kotlin.collections.AbstractList$Companion) =  kotlin.collections.AbstractList.Companion kotlin.collections.AbstractList$Companion  (LINE:286)\l0x0007: INVOKE  (r1 I:int) = (r5 I:java.lang.String A[D('$this$encodeToByteArray' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)]\l0x000b: INVOKE  \l  (r0 I:kotlin.collections.AbstractList$Companion)\l  (r6 I:int A[D('startIndex' int)])\l  (r7 I:int A[D('endIndex' int)])\l  (r1 I:int)\l type: VIRTUAL call: kotlin.collections.AbstractList.Companion.checkBoundsIndexes$kotlin_stdlib(int, int, int):void A[MD:(int, int, int):void (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x000e|0x000e: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('throwOnInvalidSequence' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x002a  (LINE:288)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0010|0x0010: INVOKE  (r0 I:java.lang.String) = \l  (r5 I:java.lang.String A[D('$this$encodeToByteArray' java.lang.String)])\l  (r6 I:int A[D('startIndex' int)])\l  (r7 I:int A[D('endIndex' int)])\l type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)] (LINE:289)\l0x0014: CONST_STR  (r1 I:java.lang.String) =  \"this as java.lang.Stringâ€¦ing(startIndex, endIndex)\" \l0x0016: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0019: SGET  (r1 I:java.nio.charset.Charset) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset \l0x001b: CONST_STR  (r2 I:java.lang.String) =  \"null cannot be cast to non\-null type java.lang.String\" \l0x001d: INVOKE  (r0 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0020: INVOKE  (r0 I:byte[]) = (r0 I:java.lang.String), (r1 I:java.nio.charset.Charset) type: VIRTUAL call: java.lang.String.getBytes(java.nio.charset.Charset):byte[] A[MD:(java.nio.charset.Charset):byte[] (c)]\l0x0024: CONST_STR  (r1 I:java.lang.String) =  \"this as java.lang.String).getBytes(charset)\" \l0x0026: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0029|RETURN\l|0x0029: RETURN  (r0 I:byte[]) \l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_38 [shape=record,label="{38\:\ 0x002a|0x002a: SGET  (r0 I:java.nio.charset.Charset) =  kotlin.text.Charsets.UTF_8 java.nio.charset.Charset  (LINE:292)\l0x002c: INVOKE  (r0 I:java.nio.charset.CharsetEncoder) = (r0 I:java.nio.charset.Charset) type: VIRTUAL call: java.nio.charset.Charset.newEncoder():java.nio.charset.CharsetEncoder A[MD:():java.nio.charset.CharsetEncoder (c)]\l0x0030: SGET  (r1 I:java.nio.charset.CodingErrorAction) =  java.nio.charset.CodingErrorAction.REPORT java.nio.charset.CodingErrorAction  (LINE:293)\l0x0032: INVOKE  (r0 I:java.nio.charset.CharsetEncoder) = (r0 I:java.nio.charset.CharsetEncoder), (r1 I:java.nio.charset.CodingErrorAction) type: VIRTUAL call: java.nio.charset.CharsetEncoder.onMalformedInput(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetEncoder A[MD:(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetEncoder (c)]\l0x0036: SGET  (r1 I:java.nio.charset.CodingErrorAction) =  java.nio.charset.CodingErrorAction.REPORT java.nio.charset.CodingErrorAction  (LINE:294)\l0x0038: INVOKE  (r0 I:java.nio.charset.CharsetEncoder) = (r0 I:java.nio.charset.CharsetEncoder), (r1 I:java.nio.charset.CodingErrorAction) type: VIRTUAL call: java.nio.charset.CharsetEncoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetEncoder A[MD:(java.nio.charset.CodingErrorAction):java.nio.charset.CharsetEncoder (c)]\l0x003d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r5 I:??[OBJECT, ARRAY] A[D('$this$encodeToByteArray' java.lang.String)])  (LINE:296)\l0x003e: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x0040: INVOKE  (r1 I:java.nio.CharBuffer) = (r1 I:java.lang.CharSequence), (r6 I:int A[D('startIndex' int)]), (r7 I:int A[D('endIndex' int)]) type: STATIC call: java.nio.CharBuffer.wrap(java.lang.CharSequence, int, int):java.nio.CharBuffer A[MD:(java.lang.CharSequence, int, int):java.nio.CharBuffer (c)]\l0x0044: INVOKE  (r1 I:java.nio.ByteBuffer) = (r0 I:java.nio.charset.CharsetEncoder A[D('encoder' java.nio.charset.CharsetEncoder)]), (r1 I:java.nio.CharBuffer) type: VIRTUAL call: java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer):java.nio.ByteBuffer A[MD:(java.nio.CharBuffer):java.nio.ByteBuffer throws java.nio.charset.CharacterCodingException (c)]\l0x0048: INVOKE  (r2 I:boolean) = (r1 I:java.nio.ByteBuffer A[D('byteBuffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.hasArray():boolean A[MD:():boolean (c)] (LINE:297)\l}"];
Node_39 [shape=record,label="{39\:\ 0x004c|0x004c: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x006c \l}"];
Node_40 [shape=record,label="{40\:\ 0x004e|0x004e: INVOKE  (r2 I:int) = (r1 I:java.nio.ByteBuffer A[D('byteBuffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.arrayOffset():int A[MD:():int (c)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0052|0x0052: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x006c \l}"];
Node_42 [shape=record,label="{42\:\ 0x0054|0x0054: INVOKE  (r2 I:int) = (r1 I:java.nio.ByteBuffer A[D('byteBuffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.remaining():int A[MD:():int (c)]\l0x0058: INVOKE  (r3 I:byte[]) = (r1 I:java.nio.ByteBuffer A[D('byteBuffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.array():byte[] A[MD:():byte[] (c)]\l0x005c: INVOKE  (r3 I:java.lang.Object) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNull(java.lang.Object):void A[MD:(java.lang.Object):void (m)]\l0x005f: ARRAY_LENGTH  (r3 I:int) = (r3 I:??[]) \l}"];
Node_43 [shape=record,label="{43\:\ 0x0060|0x0060: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:45:0x006c \l}"];
Node_44 [shape=record,label="{44\:\ 0x0062|0x0062: INVOKE  (r2 I:byte[]) = (r1 I:java.nio.ByteBuffer A[D('byteBuffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.array():byte[] A[MD:():byte[] (c)] (LINE:298)\l0x0066: CONST_STR  (r3 I:java.lang.String) =  \"\{n        byteBuffer.array()n    \}\"  (LINE:297)\l0x0068: INVOKE  (r2 I:java.lang.Object), (r3 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0077: RETURN  (r2 I:byte[]) A[SYNTHETIC] (LINE:297)\l}"];
Node_45 [shape=record,label="{45\:\ 0x006c|0x006c: INVOKE  (r2 I:int) = (r1 I:java.nio.ByteBuffer A[D('byteBuffer' java.nio.ByteBuffer)]) type: VIRTUAL call: java.nio.ByteBuffer.remaining():int A[MD:():int (c)] (LINE:300)\l0x0070: NEW_ARRAY  (r2 I:byte[]) = (r2 I:int A[IMMUTABLE_TYPE]) type: byte[] \l0x0072: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0073: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:828)\l0x0074: INVOKE  (r1 I:java.nio.ByteBuffer A[D('byteBuffer' java.nio.ByteBuffer)]), (r3 I:byte[] A[D('it' byte[])]) type: VIRTUAL call: java.nio.ByteBuffer.get(byte[]):java.nio.ByteBuffer A[MD:(byte[]):java.nio.ByteBuffer (c)] (LINE:300)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0077|RETURN\lORIG_RETURN\l|0x0077: RETURN  (r2 I:byte[])  (LINE:297)\l}"];
MethodNode[shape=record,label="{public static final byte[] kotlin.text.StringsKt__StringsJVMKt.encodeToByteArray((r5 I:java.lang.String A[D('$this$encodeToByteArray' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:boolean A[D('throwOnInvalidSequence' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:46:0x0077 \-\> B:33:?, CROSS_EDGE: B:45:0x006c \-\> B:46:0x0077, CROSS_EDGE: B:41:0x0052 \-\> B:45:0x006c, CROSS_EDGE: B:39:0x004c \-\> B:45:0x006c\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0073\-0x0077: r3 'it' [B\l  0x0074\-0x0077: r4 '$i$a$\-also\-StringsKt__StringsJVMKt$encodeToByteArray$1' I\l  0x003d\-0x0077: r0 'encoder' Ljava\/nio\/charset\/CharsetEncoder;\l  0x0048\-0x0077: r1 'byteBuffer' Ljava\/nio\/ByteBuffer;\l  \-1 \-0x0077: r5 '$this$encodeToByteArray' Ljava\/lang\/String;\l  \-1 \-0x0077: r6 'startIndex' I\l  \-1 \-0x0077: r7 'endIndex' I\l  \-1 \-0x0077: r8 'throwOnInvalidSequence' Z\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_38;
Node_36 -> Node_37;
Node_37 -> Node_33;
Node_38 -> Node_39;
Node_39 -> Node_40[style=dashed];
Node_39 -> Node_45;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_45;
Node_42 -> Node_43;
Node_43 -> Node_44[style=dashed];
Node_43 -> Node_45;
Node_44 -> Node_47;
Node_47 -> Node_33;
Node_45 -> Node_46;
Node_46 -> Node_33;
}

