digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.replace(Ljava\/lang\/String;CCZ)Ljava\/lang\/String;" {
Node_38 [shape=record,label="{38\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_40 [shape=record,label="{40\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$replace' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0005|0x0005: IF  (r13 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x0011  (LINE:70)\l}"];
Node_42 [shape=record,label="{42\:\ 0x0007|0x0007: INVOKE  (r0 I:java.lang.String) = \l  (r10 I:java.lang.String A[D('$this$replace' java.lang.String)])\l  (r11 I:char A[D('oldChar' char)])\l  (r12 I:char A[D('newChar' char)])\l type: VIRTUAL call: java.lang.String.replace(char, char):java.lang.String A[MD:(char, char):java.lang.String (c)]\l0x000b: CONST_STR  (r1 I:java.lang.String) =  \"this as java.lang.String…replace(oldChar, newChar)\" \l0x000d: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_43 [shape=record,label="{43\:\ 0x0010|RETURN\l|0x0010: RETURN  (r0 I:java.lang.String) \l}"];
Node_39 [shape=record,label="{39\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x0011|0x0011: INVOKE  (r0 I:int) = (r10 I:java.lang.String A[D('$this$replace' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:72)\l0x0015: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0017: INVOKE  (r1 I:java.lang.StringBuilder), (r0 I:int) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l0x001a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]) \l0x001b: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$replace' java.lang.String)])  (LINE:73)\l0x001d: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l0x001f: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:826)\l}"];
Node_45 [shape=record,label="{45\:\ 0x0021|LOOP_START\lLOOP:0: B:45:0x0021\-\>B:51:0x0036\l|0x0021: INVOKE  (r6 I:int) = (r3 I:java.lang.CharSequence A[D('$this$forEach$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_46 [shape=record,label="{46\:\ 0x0025|0x0025: IF  (r5 I:??[int, byte, short, char]) \>= (r6 I:??[int, byte, short, char])  \-\> B:54:0x003d \l}"];
Node_47 [shape=record,label="{47\:\ 0x0027|0x0027: INVOKE  (r6 I:char) = (r3 I:java.lang.CharSequence A[D('$this$forEach$iv' java.lang.CharSequence)]), (r5 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x002b: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('element$iv' char)]) \l0x002c: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002d: INVOKE  (r9 I:boolean) = (r7 I:char A[D('c' char)]), (r11 I:char A[D('oldChar' char)]), (r13 I:boolean A[D('ignoreCase' boolean)]) type: STATIC call: kotlin.text.CharsKt.equals(char, char, boolean):boolean A[MD:(char, char, boolean):boolean (m)] (LINE:74)\l}"];
Node_48 [shape=record,label="{48\:\ 0x0031|0x0031: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:50:0x0035 \l}"];
Node_49 [shape=record,label="{49\:\ 0x0033|0x0033: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('newChar' char)]) \l}"];
Node_56 [shape=record,label="{56\:\ 0x0036|SYNTHETIC\l}"];
Node_51 [shape=record,label="{51\:\ 0x0036|LOOP_END\lLOOP:0: B:45:0x0021\-\>B:51:0x0036\l|0x0036: INVOKE  (r0 I:java.lang.StringBuilder A[D('$this$replace_u24lambda_u2d1' java.lang.StringBuilder)]), (r9 I:char) type: VIRTUAL call: java.lang.StringBuilder.append(char):java.lang.StringBuilder A[MD:(char):java.lang.StringBuilder (c)]\l0x003a: ARITH  (r5 I:int) = (r5 I:int) + (1 int) \l}"];
Node_50 [shape=record,label="{50\:\ 0x0035|0x0035: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('c' char)]) \l}"];
Node_55 [shape=record,label="{55\:\ 0x0036|SYNTHETIC\l}"];
Node_54 [shape=record,label="{54\:\ 0x003d|SYNTHETIC\l}"];
Node_52 [shape=record,label="{52\:\ 0x003d|0x003f: INVOKE  (r0 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:72)\l0x0043: CONST_STR  (r1 I:java.lang.String) =  \"StringBuilder(capacity).…builderAction).toString()\" \l0x0045: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_53 [shape=record,label="{53\:\ 0x0048|RETURN\l|0x0048: RETURN  (r0 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsJVMKt.replace((r10 I:java.lang.String A[D('$this$replace' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:char A[D('oldChar' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:char A[D('newChar' char), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:51:0x0036 \-\> B:45:0x0021, CROSS_EDGE: B:50:0x0035 \-\> B:51:0x0036, CROSS_EDGE: B:53:0x0048 \-\> B:39:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x002c\-0x003a: r7 'c' C\l  0x002d\-0x003a: r8 '$i$a$\-forEach\-StringsKt__StringsJVMKt$replace$1$1' I\l  0x002b\-0x003d: r6 'element$iv' C\l  0x001f\-0x003e: r3 '$this$forEach$iv' Ljava\/lang\/CharSequence;\l  0x0020\-0x003e: r4 '$i$f$forEach' I\l  0x001b\-0x003f: r0 '$this$replace_u24lambda_u2d1' Ljava\/lang\/StringBuilder;\l  0x001c\-0x003f: r2 '$i$a$\-buildString\-StringsKt__StringsJVMKt$replace$1' I\l  \-1 \-0x0048: r10 '$this$replace' Ljava\/lang\/String;\l  \-1 \-0x0048: r11 'oldChar' C\l  \-1 \-0x0048: r12 'newChar' C\l  \-1 \-0x0048: r13 'ignoreCase' Z\l}"];
MethodNode -> Node_38;Node_38 -> Node_40;
Node_40 -> Node_41;
Node_41 -> Node_42[style=dashed];
Node_41 -> Node_44;
Node_42 -> Node_43;
Node_43 -> Node_39;
Node_44 -> Node_45;
Node_45 -> Node_46;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_54;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_50;
Node_49 -> Node_56;
Node_56 -> Node_51;
Node_51 -> Node_45;
Node_50 -> Node_55;
Node_55 -> Node_51;
Node_54 -> Node_52;
Node_52 -> Node_53;
Node_53 -> Node_39;
}

