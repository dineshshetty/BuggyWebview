digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.regionMatches(Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;IIZ)Z" {
Node_20 [shape=record,label="{20\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"other\")\l}"];
Node_23 [shape=record,label="{23\:\ 0x000c|if ((r7 instanceof java.lang.String) == false) goto L8\l}"];
Node_24 [shape=record,label="{24\:\ 0x000e}"];
Node_25 [shape=record,label="{25\:\ 0x0010|if ((r9 instanceof java.lang.String) == false) goto L8\l}"];
Node_26 [shape=record,label="{26\:\ 0x0012}"];
Node_27 [shape=record,label="{27\:\ 0x0020|RETURN\l|return kotlin.text.StringsKt.regionMatches((java.lang.String) r7, r8, (java.lang.String) r9, r10, r11, r12)\l}"];
Node_21 [shape=record,label="{21\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0021}"];
Node_29 [shape=record,label="{29\:\ 0x0025|RETURN\l|return kotlin.text.StringsKt.regionMatchesImpl(r7, r8, r9, r10, r11, r12)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.regionMatches((r7v0 '$this$regionMatches' java.lang.CharSequence A[D('$this$regionMatches' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'thisOffset' int A[D('thisOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'other' java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'otherOffset' int A[D('otherOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:29:0x0025 \-\> B:21:?, CROSS_EDGE: B:23:0x000c \-\> B:28:0x0021\lINLINE_NOT_NEEDED\l}"];
MethodNode -> Node_20;Node_20 -> Node_22;
Node_22 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_28;
Node_24 -> Node_25;
Node_25 -> Node_26[style=dashed];
Node_25 -> Node_28;
Node_26 -> Node_27;
Node_27 -> Node_21;
Node_28 -> Node_29;
Node_29 -> Node_21;
}

