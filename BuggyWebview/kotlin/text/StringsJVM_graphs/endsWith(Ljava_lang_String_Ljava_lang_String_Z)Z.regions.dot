digraph "CFG forkotlin.text.StringsKt__StringsJVMKt.endsWith(Ljava\/lang\/String;Ljava\/lang\/String;Z)Z" {
subgraph cluster_Region_1064566136 {
label = "R(2:1|(2:(1:4)|(1:7)))";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"suffix\")\l}"];
subgraph cluster_Region_697364586 {
label = "R(2:(1:4)|(1:7))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_505407947 {
label = "IF [B:19:0x000a] THEN: R(1:4) ELSE: null";
node [shape=record,color=blue];
Node_19 [shape=record,label="{19\:\ 0x000a|if (r10 == false) goto L3\l}"];
subgraph cluster_Region_150782023 {
label = "R(1:4)";
node [shape=record,color=blue];
Node_21 [shape=record,label="{21\:\ 0x0010|RETURN\l|return r8.endsWith(r9)\l}"];
}
}
subgraph cluster_Region_675570717 {
label = "R(1:7)";
node [shape=record,color=blue];
Node_23 [shape=record,label="{23\:\ 0x0027|RETURN\l|return kotlin.text.StringsKt.regionMatches(r8, r8.length() \- r9.length(), r9, 0, r9.length(), true)\l}"];
}
}
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x000c}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0011}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsJVMKt.endsWith((r8v0 '$this$endsWith' java.lang.String A[D('$this$endsWith' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'suffix' java.lang.String A[D('suffix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x0027 \-\> B:17:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_22[style=dashed];
Node_21 -> Node_17;
Node_23 -> Node_17;
Node_16 -> Node_18;
Node_20 -> Node_21;
Node_22 -> Node_23;
}

