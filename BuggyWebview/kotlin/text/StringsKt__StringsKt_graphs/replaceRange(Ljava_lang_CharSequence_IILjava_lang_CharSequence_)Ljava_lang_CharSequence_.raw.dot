digraph "CFG forkotlin.text.StringsKt__StringsKt.replaceRange(Ljava\/lang\/CharSequence;IILjava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$replaceRange' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"replacement\" \l0x0007: INVOKE  (r6 I:java.lang.Object A[D('replacement' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x000a|0x000a: IF  (r5 I:??[int, byte, short, char] A[D('endIndex' int)]) \< (r4 I:??[int, byte, short, char] A[D('startIndex' int)])  \-\> B:22:0x002b  (LINE:504)\l}"];
Node_20 [shape=record,label="{20\:\ 0x000c|0x000c: NEW_INSTANCE  (r0 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:506)\l0x000e: INVOKE  (r0 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0011: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:507)\l0x0012: INVOKE  \l  (r0 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r3 I:java.lang.CharSequence A[D('$this$replaceRange' java.lang.CharSequence)])\l  (r1 I:int)\l  (r4 I:int A[D('startIndex' int)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x0015: CONST_STR  (r1 I:java.lang.String) =  \"this.append(value, startIndex, endIndex)\" \l0x0017: INVOKE  (r0 I:java.lang.Object A[D('sb' java.lang.StringBuilder)]), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x001a: INVOKE  \l  (r0 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r6 I:java.lang.CharSequence A[D('replacement' java.lang.CharSequence)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence):java.lang.StringBuilder A[MD:(java.lang.CharSequence):java.lang.StringBuilder (c)] (LINE:508)\l0x001d: INVOKE  (r2 I:int) = (r3 I:java.lang.CharSequence A[D('$this$replaceRange' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:509)\l0x0021: INVOKE  \l  (r0 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r3 I:java.lang.CharSequence A[D('$this$replaceRange' java.lang.CharSequence)])\l  (r5 I:int A[D('endIndex' int)])\l  (r2 I:int)\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x0024: INVOKE  (r0 I:java.lang.Object A[D('sb' java.lang.StringBuilder)]), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0027: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('sb' java.lang.StringBuilder)])  (LINE:510)\l0x0028: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_21 [shape=record,label="{21\:\ 0x002a|RETURN\l|0x002a: RETURN  (r1 I:java.lang.CharSequence) \l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_22 [shape=record,label="{22\:\ 0x002b|0x002b: NEW_INSTANCE  (r0 I:java.lang.IndexOutOfBoundsException A[D('sb' java.lang.StringBuilder)]) =  java.lang.IndexOutOfBoundsException  (LINE:505)\l0x002d: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x002f: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x0032: CONST_STR  (r2 I:java.lang.String) =  \"End index (\" \l0x0034: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0037: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('endIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x003a: CONST_STR  (r2 I:java.lang.String) =  \") is less than start index (\" \l0x003c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x003f: INVOKE  (r1 I:java.lang.StringBuilder), (r4 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0042: CONST_STR  (r2 I:java.lang.String) =  \").\" \l0x0044: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0047: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004b: INVOKE  (r0 I:java.lang.IndexOutOfBoundsException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_23 [shape=record,label="{23\:\ 0x004e|0x004e: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.replaceRange((r3 I:java.lang.CharSequence A[D('$this$replaceRange' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:java.lang.CharSequence A[D('replacement' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:23:0x004e \-\> B:17:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0011\-0x002b: r0 'sb' Ljava\/lang\/StringBuilder;\l  \-1 \-0x004e: r3 '$this$replaceRange' Ljava\/lang\/CharSequence;\l  \-1 \-0x004e: r4 'startIndex' I\l  \-1 \-0x004e: r5 'endIndex' I\l  \-1 \-0x004e: r6 'replacement' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_22;
Node_20 -> Node_21;
Node_21 -> Node_17;
Node_22 -> Node_23;
Node_23 -> Node_17;
}

