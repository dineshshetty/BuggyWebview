digraph "CFG forkotlin.text.StringsKt__StringsKt.trimStart(Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$trimStart' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$trimStart' java.lang.CharSequence)])  (LINE:187)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1608)\l0x0008: INVOKE  (r3 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|LOOP_START\lLOOP:0: B:29:0x000c\-\>B:33:0x0022\l|0x000c: IF  (r2 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:37:0x0025 \l}"];
Node_30 [shape=record,label="{30\:\ 0x000e|0x000e: INVOKE  (r4 I:char) = (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]), (r2 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1609)\l0x0012: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: INVOKE  (r4 I:boolean A[D('p0' char)]) = (r4 I:char A[D('p0' char)]) type: STATIC call: kotlin.text.CharsKt.isWhitespace(char):boolean A[MD:(char):boolean (m)] (LINE:187)\l}"];
Node_31 [shape=record,label="{31\:\ 0x0017|0x0017: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('p0' char)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0022 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0022|LOOP_END\lLOOP:0: B:29:0x000c\-\>B:33:0x0022\l|0x0022: ARITH  (r2 I:int) = (r2 I:int A[D('index$iv' int)]) + (1 int)  (LINE:1608)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0019|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0019|0x0019: INVOKE  (r3 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1610)\l0x001d: INVOKE  (r3 I:java.lang.CharSequence) = \l  (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)])\l  (r2 I:int A[D('index$iv' int)])\l  (r3 I:int)\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x002a: RETURN  (r3 I:java.lang.CharSequence) A[SYNTHETIC] (LINE:187)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0025|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0025|0x0025: CONST_STR  (r2 I:java.lang.String A[D('index$iv' int)]) =  \"\"  (LINE:1612)\l0x0027: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x0028: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x002a|RETURN\lORIG_RETURN\l|0x002a: RETURN  (r3 I:java.lang.CharSequence)  (LINE:187)\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trimStart((r6 I:java.lang.CharSequence A[D('$this$trimStart' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:33:0x0022 \-\> B:29:0x000c, CROSS_EDGE: B:34:0x0025 \-\> B:35:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0012\-0x0017: r4 'p0' C\l  0x0013\-0x0017: r5 '$i$a$\-trimStart\-StringsKt__StringsKt$trimStart$3' I\l  0x0008\-0x0025: r2 'index$iv' I\l  0x0006\-0x002a: r0 '$this$trimStart$iv' Ljava\/lang\/CharSequence;\l  0x0007\-0x002a: r1 '$i$f$trimStart' I\l  \-1 \-0x002a: r6 '$this$trimStart' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_37;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_36[style=dashed];
Node_33 -> Node_29;
Node_36 -> Node_32;
Node_32 -> Node_38;
Node_38 -> Node_27;
Node_37 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_27;
}

