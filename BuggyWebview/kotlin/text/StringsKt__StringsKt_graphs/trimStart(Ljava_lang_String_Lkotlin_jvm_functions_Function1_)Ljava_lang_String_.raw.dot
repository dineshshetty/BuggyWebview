digraph "CFG forkotlin.text.StringsKt__StringsKt.trimStart(Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/String;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$trimStart' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$trimStart' java.lang.String)])  (LINE:124)\l0x000c: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x000e: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1509)\l0x0010: INVOKE  (r4 I:int) = (r1 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0014|LOOP_START\lLOOP:0: B:29:0x0014\-\>B:33:0x0033\l|0x0014: IF  (r3 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r4 I:??[int, byte, short, char])  \-\> B:37:0x0036 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0016|0x0016: INVOKE  (r5 I:char) = (r1 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]), (r3 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1510)\l0x001a: INVOKE  (r5 I:java.lang.Character) = (r5 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x001e: INVOKE  (r5 I:java.lang.Object) = (r7 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r5 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x0022: CHECK_CAST (r5 I:java.lang.Boolean) = (java.lang.Boolean) (r5 I:??[OBJECT, ARRAY]) \l0x0024: INVOKE  (r5 I:boolean) = (r5 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0028|0x0028: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0033 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0033|LOOP_END\lLOOP:0: B:29:0x0014\-\>B:33:0x0033\l|0x0033: ARITH  (r3 I:int) = (r3 I:int A[D('index$iv' int)]) + (1 int)  (LINE:1509)\l}"];
Node_38 [shape=record,label="{38\:\ 0x002a|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x002a|0x002a: INVOKE  (r4 I:int) = (r1 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1511)\l0x002e: INVOKE  (r4 I:java.lang.CharSequence) = \l  (r1 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)])\l  (r3 I:int A[D('index$iv' int)])\l  (r4 I:int)\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x003b|0x003b: INVOKE  (r1 I:java.lang.String) = (r4 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:124)\l}"];
Node_36 [shape=record,label="{36\:\ 0x003f|RETURN\l|0x003f: RETURN  (r1 I:java.lang.String) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0036|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x0036|0x0036: CONST_STR  (r3 I:java.lang.String A[D('index$iv' int)]) =  \"\"  (LINE:1513)\l0x0038: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r3 I:??[OBJECT, ARRAY]) \l0x0039: CHECK_CAST (r4 I:java.lang.CharSequence) = (java.lang.CharSequence) (r4 I:??[OBJECT, ARRAY]) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.trimStart((r6 I:java.lang.String A[D('$this$trimStart' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:33:0x0033 \-\> B:29:0x0014, CROSS_EDGE: B:34:0x0036 \-\> B:35:0x003b\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0010\-0x0036: r3 'index$iv' I\l  0x000e\-0x003b: r1 '$this$trimStart$iv' Ljava\/lang\/CharSequence;\l  0x000f\-0x003b: r2 '$i$f$trimStart' I\l  0x000b\-0x003f: r0 '$i$f$trimStart' I\l  \-1 \-0x003f: r6 '$this$trimStart' Ljava\/lang\/String;\l  \-1 \-0x003f: r7 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/String;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/String;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_37;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_38[style=dashed];
Node_33 -> Node_29;
Node_38 -> Node_32;
Node_32 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_27;
Node_37 -> Node_34;
Node_34 -> Node_35;
}

