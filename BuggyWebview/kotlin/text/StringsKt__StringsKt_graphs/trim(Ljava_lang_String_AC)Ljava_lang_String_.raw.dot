digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/String;[C)Ljava\/lang\/String;" {
Node_54 [shape=record,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r10 I:java.lang.Object A[D('$this$trim' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"chars\" \l0x0007: INVOKE  (r11 I:java.lang.Object A[D('chars' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$trim' java.lang.String)])  (LINE:151)\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$trim$iv' java.lang.String)])  (LINE:1541)\l0x000d: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l0x000f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1542)\l0x0011: INVOKE  (r5 I:int) = (r2 I:java.lang.CharSequence A[D('$this$trim$iv$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1543)\l0x0015: ARITH  (r5 I:int) = (r5 I:int) + (\-1 int) \l0x0017: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1544)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0018|LOOP_START\lLOOP:0: B:57:0x0018\-\>B:77:0x0018\l|0x0018: IF  (r4 I:??[int, byte, short, char] A[D('startIndex$iv$iv' int)]) \> (r5 I:??[int, byte, short, char] A[D('endIndex$iv$iv' int)])  \-\> B:71:0x0038  (LINE:1546)\l}"];
Node_58 [shape=record,label="{58\:\ 0x001a|0x001a: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound$iv$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x001e  (LINE:1547)\l}"];
Node_59 [shape=record,label="{59\:\ 0x001c|0x001c: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex$iv$iv' int)]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x001f|0x001f: INVOKE  (r8 I:char) = (r2 I:java.lang.CharSequence A[D('$this$trim$iv$iv' java.lang.CharSequence)]), (r7 I:int A[D('index$iv$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1548)\l0x0023: CONST  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: INVOKE  (r8 I:boolean A[D('it' char)]) = (r11 I:char[] A[D('chars' char[])]), (r8 I:char A[D('it' char)]) type: STATIC call: kotlin.collections.ArraysKt.contains(char[], char):boolean A[MD:(char[], char):boolean (m)] (LINE:151)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0028|0x0028: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound$iv$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x0031  (LINE:1550)\l}"];
Node_72 [shape=record,label="{72\:\ 0x0031|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0031|0x0031: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match$iv$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0034  (LINE:1556)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0034|0x0034: ARITH  (r5 I:int) = (r5 I:int A[D('endIndex$iv$iv' int)]) + (\-1 int) \l}"];
Node_78 [shape=record,label="{78\:\ 0x0018|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0018|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x0018\-\>B:77:0x0018\l}"];
Node_75 [shape=record,label="{75\:\ 0x0038|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0038|0x0038: ARITH  (r7 I:int) = (r5 I:int A[D('endIndex$iv$iv' int)]) + (1 int)  (LINE:1563)\l0x003a: INVOKE  (r2 I:java.lang.CharSequence A[D('$this$trim$iv$iv' java.lang.CharSequence)]) = \l  (r2 I:java.lang.CharSequence A[D('$this$trim$iv$iv' java.lang.CharSequence)])\l  (r4 I:int A[D('startIndex$iv$iv' int)])\l  (r7 I:int)\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l0x003e: INVOKE  (r0 I:java.lang.String A[D('$this$trim$iv' java.lang.String)]) = (r2 I:java.lang.Object A[D('$this$trim$iv$iv' java.lang.CharSequence)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:1541)\l}"];
Node_70 [shape=record,label="{70\:\ 0x0042|RETURN\l|0x0042: RETURN  (r0 I:java.lang.String A[D('$this$trim$iv' java.lang.String)])  (LINE:151)\l}"];
Node_55 [shape=record,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_76 [shape=record,label="{76\:\ 0x002a|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x002a|0x002a: IF  (r8 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match$iv$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x002e  (LINE:1551)\l}"];
Node_73 [shape=record,label="{73\:\ 0x002e|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x002e|0x002e: ARITH  (r4 I:int) = (r4 I:int A[D('startIndex$iv$iv' int)]) + (1 int) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0018|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x002c|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x002c|0x002c: CONST  (r6 I:??[boolean, int, float, short, byte, char] A[D('startFound$iv$iv' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1552)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0018|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x001e|0x001e: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('endIndex$iv$iv' int)]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x0038|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.trim((r10 I:java.lang.String A[D('$this$trim' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:64:0x002c \-\> B:57:0x0018, BACK_EDGE: B:65:0x002e \-\> B:57:0x0018, BACK_EDGE: B:68:0x0034 \-\> B:57:0x0018, CROSS_EDGE: B:60:0x001e \-\> B:61:0x001f, CROSS_EDGE: B:57:0x0018 \-\> B:69:0x0038\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0024\-0x0028: r9 '$i$a$\-trim\-StringsKt__StringsKt$trim$2' I\l  0x0023\-0x0028: r8 'it' C\l  0x001f\-0x0037: r7 'index$iv$iv' I\l  0x0028\-0x0037: r8 'match$iv$iv' Z\l  0x000f\-0x003e: r2 '$this$trim$iv$iv' Ljava\/lang\/CharSequence;\l  0x0010\-0x003e: r3 '$i$f$trim' I\l  0x0011\-0x003e: r4 'startIndex$iv$iv' I\l  0x0017\-0x003e: r5 'endIndex$iv$iv' I\l  0x0018\-0x003e: r6 'startFound$iv$iv' Z\l  0x000b\-0x0042: r0 '$this$trim$iv' Ljava\/lang\/String;\l  0x000c\-0x0042: r1 '$i$f$trim' I\l  \-1 \-0x0042: r10 '$this$trim' Ljava\/lang\/String;\l  \-1 \-0x0042: r11 'chars' [C\l}"];
MethodNode -> Node_54;Node_54 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_71;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_72;
Node_62 -> Node_76[style=dashed];
Node_72 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_75[style=dashed];
Node_68 -> Node_78;
Node_78 -> Node_77;
Node_77 -> Node_57;
Node_75 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_55;
Node_76 -> Node_63;
Node_63 -> Node_73;
Node_63 -> Node_74[style=dashed];
Node_73 -> Node_65;
Node_65 -> Node_79;
Node_79 -> Node_77;
Node_74 -> Node_64;
Node_64 -> Node_80;
Node_80 -> Node_77;
Node_60 -> Node_61;
Node_71 -> Node_69;
}

