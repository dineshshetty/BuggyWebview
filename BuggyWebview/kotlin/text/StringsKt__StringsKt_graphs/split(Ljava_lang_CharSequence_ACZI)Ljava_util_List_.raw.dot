digraph "CFG forkotlin.text.StringsKt__StringsKt.split(Ljava\/lang\/CharSequence;[CZI)Ljava\/util\/List;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r9 I:java.lang.Object A[D('$this$split' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"delimiters\" \l0x0007: INVOKE  (r10 I:java.lang.Object A[D('delimiters' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: ARRAY_LENGTH  (r0 I:int) = (r10 I:??[] A[D('delimiters' char[])])  (LINE:1330)\l0x000b: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000c|0x000c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:32:0x001a \l}"];
Node_30 [shape=record,label="{30\:\ 0x000e|0x000e: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1331)\l0x000f: AGET  (r0 I:char A[IMMUTABLE_TYPE]) = (r10 I:char[] A[D('delimiters' char[]), IMMUTABLE_TYPE]), (r0 I:??[int, short, byte, char]) \l0x0011: INVOKE  (r0 I:java.lang.String) = (r0 I:char) type: STATIC call: java.lang.String.valueOf(char):java.lang.String A[MD:(char):java.lang.String (c)]\l0x0015: INVOKE  (r0 I:java.util.List) = \l  (r9 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r0 I:java.lang.String)\l  (r11 I:boolean A[D('ignoreCase' boolean)])\l  (r12 I:int A[D('limit' int)])\l type: STATIC call: kotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt(java.lang.CharSequence, java.lang.String, boolean, int):java.util.List A[MD:(java.lang.CharSequence, java.lang.String, boolean, int):java.util.List\<java.lang.String\> (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0019|RETURN\l|0x0019: RETURN  (r0 I:java.util.List\<java.lang.String\>) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x001a|0x001a: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1334)\l0x001b: CONST  (r6 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x001c: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('$this$split' java.lang.CharSequence)]) \l0x001e: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('delimiters' char[])]) \l0x001f: MOVE  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x0020: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r12 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('limit' int)]) \l0x0021: INVOKE  (r0 I:kotlin.sequences.Sequence) = \l  (r1 I:java.lang.CharSequence)\l  (r2 I:char[])\l  (r3 I:int)\l  (r4 I:boolean)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence, char[], int, boolean, int, int, java.lang.Object):kotlin.sequences.Sequence A[MD:(java.lang.CharSequence, char[], int, boolean, int, int, java.lang.Object):kotlin.sequences.Sequence (m)]\l0x0025: INVOKE  (r0 I:java.lang.Iterable) = (r0 I:kotlin.sequences.Sequence) type: STATIC call: kotlin.sequences.SequencesKt.asIterable(kotlin.sequences.Sequence):java.lang.Iterable A[MD:\<T\>:(kotlin.sequences.Sequence\<? extends T\>):java.lang.Iterable\<T\> (m)]\l0x0029: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002a: NEW_INSTANCE  (r2 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:1631)\l0x002c: CONST  (r3 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l0x002e: INVOKE  (r3 I:int) = (r0 I:java.lang.Iterable A[D('$this$map$iv' java.lang.Iterable)]), (r3 I:int) type: STATIC call: kotlin.collections.CollectionsKt.collectionSizeOrDefault(java.lang.Iterable, int):int A[MD:\<T\>:(java.lang.Iterable\<? extends T\>, int):int (m)]\l0x0032: INVOKE  (r2 I:java.util.ArrayList), (r3 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l0x0035: CHECK_CAST (r2 I:java.util.Collection) = (java.util.Collection) (r2 I:??[OBJECT, ARRAY]) \l0x0037: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r0 I:??[OBJECT, ARRAY] A[D('$this$map$iv' java.lang.Iterable)]) \l0x0038: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0039: INVOKE  (r5 I:java.util.Iterator) = (r3 I:java.lang.Iterable A[D('$this$mapTo$iv$iv' java.lang.Iterable)]) type: INTERFACE call: java.lang.Iterable.iterator():java.util.Iterator A[MD:():java.util.Iterator\<T\> (c)] (LINE:1632)\l}"];
Node_33 [shape=record,label="{33\:\ 0x003d|LOOP_START\lLOOP:0: B:33:0x003d\-\>B:35:0x0043\l|0x003d: INVOKE  (r6 I:boolean) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_34 [shape=record,label="{34\:\ 0x0041|0x0041: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:38:0x0053 \l}"];
Node_35 [shape=record,label="{35\:\ 0x0043|LOOP_END\lLOOP:0: B:33:0x003d\-\>B:35:0x0043\l|0x0043: INVOKE  (r6 I:java.lang.Object) = (r5 I:java.util.Iterator) type: INTERFACE call: java.util.Iterator.next():java.lang.Object A[MD:():E (c)]\l0x0047: MOVE  (r7 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('item$iv$iv' java.lang.Object)])  (LINE:1633)\l0x0048: CHECK_CAST (r7 I:kotlin.ranges.IntRange) = (kotlin.ranges.IntRange) (r7 I:??[OBJECT, ARRAY]) \l0x004a: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x004b: INVOKE  (r7 I:java.lang.String A[D('it' kotlin.ranges.IntRange)]) = \l  (r9 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r7 I:kotlin.ranges.IntRange A[D('it' kotlin.ranges.IntRange)])\l type: STATIC call: kotlin.text.StringsKt.substring(java.lang.CharSequence, kotlin.ranges.IntRange):java.lang.String A[MD:(java.lang.CharSequence, kotlin.ranges.IntRange):java.lang.String (m)] (LINE:1334)\l0x004f: INVOKE  \l  (r2 I:java.util.Collection A[D('destination$iv$iv' java.util.Collection)])\l  (r7 I:java.lang.Object A[D('it' kotlin.ranges.IntRange)])\l type: INTERFACE call: java.util.Collection.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l}"];
Node_38 [shape=record,label="{38\:\ 0x0053|SYNTHETIC\l}"];
Node_36 [shape=record,label="{36\:\ 0x0053|0x0054: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY] A[D('destination$iv$iv' java.util.Collection)]) \l}"];
Node_37 [shape=record,label="{37\:\ 0x0057|RETURN\l|0x0057: RETURN  (r2 I:java.util.List\<java.lang.String\>)  (LINE:1334)\l}"];
MethodNode[shape=record,label="{public static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split((r9 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:char[] A[D('delimiters' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:35:0x0043 \-\> B:33:0x003d, CROSS_EDGE: B:37:0x0057 \-\> B:27:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x004a\-0x004f: r7 'it' Lkotlin\/ranges\/IntRange;\l  0x004b\-0x004f: r8 '$i$a$\-map\-StringsKt__StringsKt$split$2' I\l  0x0047\-0x0053: r6 'item$iv$iv' Ljava\/lang\/Object;\l  0x0037\-0x0054: r2 'destination$iv$iv' Ljava\/util\/Collection;\l  0x0038\-0x0054: r3 '$this$mapTo$iv$iv' Ljava\/lang\/Iterable;\l  0x0039\-0x0054: r4 '$i$f$mapTo' I\l  0x0029\-0x0057: r0 '$this$map$iv' Ljava\/lang\/Iterable;\l  0x002a\-0x0057: r1 '$i$f$map' I\l  \-1 \-0x0057: r9 '$this$split' Ljava\/lang\/CharSequence;\l  \-1 \-0x0057: r10 'delimiters' [C\l  \-1 \-0x0057: r11 'ignoreCase' Z\l  \-1 \-0x0057: r12 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;[CZI)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_27;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_34 -> Node_35[style=dashed];
Node_34 -> Node_38;
Node_35 -> Node_33;
Node_38 -> Node_36;
Node_36 -> Node_37;
Node_37 -> Node_27;
}

