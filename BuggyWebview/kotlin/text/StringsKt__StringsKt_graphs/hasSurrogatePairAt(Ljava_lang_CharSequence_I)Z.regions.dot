digraph "CFG forkotlin.text.StringsKt__StringsKt.hasSurrogatePairAt(Ljava\/lang\/CharSequence;I)Z" {
subgraph cluster_Region_1550676580 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_30 [shape=record,label="{30\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, \"\<this\>\")\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|RETURN\l|return new kotlin.ranges.IntRange(0, r3.length() + (\-2)).contains(r4) && java.lang.Character.isHighSurrogate(r3.charAt(r4)) && java.lang.Character.isLowSurrogate(r3.charAt(r4 + 1))\l}"];
}
Node_28 [shape=record,color=red,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_32 [shape=record,color=red,label="{32\:\ 0x0017}"];
Node_33 [shape=record,color=red,label="{33\:\ 0x001f|REMOVE\lADDED_TO_REGION\l}"];
Node_34 [shape=record,color=red,label="{34\:\ 0x0021}"];
Node_35 [shape=record,color=red,label="{35\:\ 0x002b|REMOVE\lADDED_TO_REGION\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x002d|ORIG_RETURN\l}"];
Node_29 [shape=record,color=red,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,color=red,label="{41\:\ ?|SYNTHETIC\l}"];
Node_40 [shape=record,color=red,label="{40\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return false\l}"];
Node_39 [shape=record,color=red,label="{39\:\ ?|SYNTHETIC\lRETURN\lADDED_TO_REGION\l|return false\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.hasSurrogatePairAt((r3v0 '$this$hasSurrogatePairAt' java.lang.CharSequence A[D('$this$hasSurrogatePairAt' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4v0 'index' int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x002b \-\> B:38:0x0030, CROSS_EDGE: B:33:0x001f \-\> B:38:0x0030, CROSS_EDGE: B:31:0x0015 \-\> B:38:0x0030\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_28;Node_30 -> Node_31;
Node_31 -> Node_32;
Node_31 -> Node_39;
Node_28 -> Node_30;
Node_32 -> Node_33;
Node_33 -> Node_34;
Node_33 -> Node_40;
Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_41;
Node_36 -> Node_29;
Node_41 -> Node_29;
Node_40 -> Node_29;
Node_39 -> Node_29;
}

