digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/CharSequence;[C)Ljava\/lang\/CharSequence;" {
Node_54 [shape=record,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$trim' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"chars\" \l0x0007: INVOKE  (r9 I:java.lang.Object A[D('chars' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$trim' java.lang.CharSequence)])  (LINE:146)\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1519)\l0x000d: INVOKE  (r3 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1520)\l0x0011: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x0013: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1521)\l}"];
Node_57 [shape=record,label="{57\:\ 0x0014|LOOP_START\lLOOP:0: B:57:0x0014\-\>B:77:0x0014\l|0x0014: IF  (r2 I:??[int, byte, short, char] A[D('startIndex$iv' int)]) \> (r3 I:??[int, byte, short, char] A[D('endIndex$iv' int)])  \-\> B:71:0x0034  (LINE:1523)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0016|0x0016: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x001a  (LINE:1524)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0018|0x0018: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex$iv' int)]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x001b|0x001b: INVOKE  (r6 I:char) = (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)]), (r5 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1525)\l0x001f: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0020: INVOKE  (r6 I:boolean A[D('it' char)]) = (r9 I:char[] A[D('chars' char[])]), (r6 I:char A[D('it' char)]) type: STATIC call: kotlin.collections.ArraysKt.contains(char[], char):boolean A[MD:(char[], char):boolean (m)] (LINE:146)\l}"];
Node_62 [shape=record,label="{62\:\ 0x0024|0x0024: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:72:0x002d  (LINE:1527)\l}"];
Node_72 [shape=record,label="{72\:\ 0x002d|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x002d|0x002d: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x0030  (LINE:1533)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0030|0x0030: ARITH  (r3 I:int) = (r3 I:int A[D('endIndex$iv' int)]) + (\-1 int) \l}"];
Node_78 [shape=record,label="{78\:\ 0x0014|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0014|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x0014\-\>B:77:0x0014\l}"];
Node_76 [shape=record,label="{76\:\ 0x0034|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x0034|0x0034: ARITH  (r5 I:int) = (r3 I:int A[D('endIndex$iv' int)]) + (1 int)  (LINE:1540)\l0x0036: INVOKE  (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)]) = \l  (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)])\l  (r2 I:int A[D('startIndex$iv' int)])\l  (r5 I:int)\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_70 [shape=record,label="{70\:\ 0x003a|RETURN\l|0x003a: RETURN  (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)])  (LINE:146)\l}"];
Node_55 [shape=record,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_75 [shape=record,label="{75\:\ 0x0026|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0026|0x0026: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x002a  (LINE:1528)\l}"];
Node_73 [shape=record,label="{73\:\ 0x002a|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x002a|0x002a: ARITH  (r2 I:int) = (r2 I:int A[D('startIndex$iv' int)]) + (1 int) \l}"];
Node_79 [shape=record,label="{79\:\ 0x0014|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0028|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0028|0x0028: CONST  (r4 I:??[boolean, int, float, short, byte, char] A[D('startFound$iv' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1529)\l}"];
Node_80 [shape=record,label="{80\:\ 0x0014|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x001a|0x001a: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('endIndex$iv' int)]) \l}"];
Node_71 [shape=record,label="{71\:\ 0x0034|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trim((r8 I:java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:64:0x0028 \-\> B:57:0x0014, BACK_EDGE: B:65:0x002a \-\> B:57:0x0014, BACK_EDGE: B:68:0x0030 \-\> B:57:0x0014, CROSS_EDGE: B:60:0x001a \-\> B:61:0x001b, CROSS_EDGE: B:57:0x0014 \-\> B:69:0x0034\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0020\-0x0024: r7 '$i$a$\-trim\-StringsKt__StringsKt$trim$1' I\l  0x001f\-0x0024: r6 'it' C\l  0x001b\-0x0033: r5 'index$iv' I\l  0x0024\-0x0033: r6 'match$iv' Z\l  0x000b\-0x003a: r0 '$this$trim$iv' Ljava\/lang\/CharSequence;\l  0x000c\-0x003a: r1 '$i$f$trim' I\l  0x000d\-0x003a: r2 'startIndex$iv' I\l  0x0013\-0x003a: r3 'endIndex$iv' I\l  0x0014\-0x003a: r4 'startFound$iv' Z\l  \-1 \-0x003a: r8 '$this$trim' Ljava\/lang\/CharSequence;\l  \-1 \-0x003a: r9 'chars' [C\l}"];
MethodNode -> Node_54;Node_54 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_71;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_72;
Node_62 -> Node_75[style=dashed];
Node_72 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_76[style=dashed];
Node_68 -> Node_78;
Node_78 -> Node_77;
Node_77 -> Node_57;
Node_76 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_55;
Node_75 -> Node_63;
Node_63 -> Node_73;
Node_63 -> Node_74[style=dashed];
Node_73 -> Node_65;
Node_65 -> Node_79;
Node_79 -> Node_77;
Node_74 -> Node_64;
Node_64 -> Node_80;
Node_80 -> Node_77;
Node_60 -> Node_61;
Node_71 -> Node_69;
}

