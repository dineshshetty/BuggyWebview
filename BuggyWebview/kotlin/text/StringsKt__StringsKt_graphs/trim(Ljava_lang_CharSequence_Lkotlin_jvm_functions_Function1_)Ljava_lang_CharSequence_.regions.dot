digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_1592196814 {
label = "R(3:1|(3:3|5|(1:(1:19)(1:22))(1:(1:12)(1:9)))|14)";
node [shape=record,color=blue];
Node_56 [shape=record,label="{56\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"predicate\")\lint r1 = 0\lint int r2 = r6.length() \- 1\lboolean r3 = false\l}"];
subgraph cluster_LoopRegion_82547765 {
label = "LOOP:0: (3:3|5|(1:(1:19)(1:22))(1:(1:12)(1:9)))";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ 0x0013|LOOP_START\lLOOP:0: B:57:0x0013\-\>B:77:0x0013\lPHI: r1 r2 r3 \l  PHI: (r1v1 'startIndex' int) = (r1v0 'startIndex' int), (r1v3 'startIndex' int) binds: [B:56:0x0000, B:77:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v2 'endIndex' int) = (r2v1 'endIndex' int), (r2v3 'endIndex' int) binds: [B:56:0x0000, B:77:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v1 'startFound' boolean) = (r3v0 'startFound' boolean), (r3v3 'startFound' boolean) binds: [B:56:0x0000, B:77:0x0013] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \<= r2) goto L3\l}"];
subgraph cluster_Region_1092665485 {
label = "R(3:3|5|(1:(1:19)(1:22))(1:(1:12)(1:9)))";
node [shape=record,color=blue];
Node_58 [shape=record,label="{58\:\ 0x0015|int r4 = !r3 ? r1 : r2\l}"];
Node_61 [shape=record,label="{61\:\ 0x001a|PHI: r4 \l  PHI: (r4v3 'index' int) =  binds: [] A[DONT_GENERATE, DONT_INLINE]\l|boolean boolean r5 = r7.invoke(java.lang.Character.valueOf(r6.charAt(r4))).booleanValue()\l}"];
subgraph cluster_IfRegion_133311642 {
label = "IF [B:62:0x002c] THEN: R(1:(1:19)(1:22)) ELSE: R(1:(1:12)(1:9))";
node [shape=record,color=blue];
Node_62 [shape=record,label="{62\:\ 0x002c|if (r3 == false) goto L16\l}"];
subgraph cluster_Region_1241202846 {
label = "R(1:(1:19)(1:22))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1083289665 {
label = "IF [B:63:0x002e] THEN: R(1:19) ELSE: R(1:22)";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x002e|if (r5 == true) goto L18\l}"];
subgraph cluster_Region_837342417 {
label = "R(1:19)";
node [shape=record,color=blue];
Node_65 [shape=record,label="{65\:\ 0x0032|r1++\l}"];
}
subgraph cluster_Region_1608532335 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_64 [shape=record,label="{64\:\ 0x0030|r3 = true\l}"];
}
}
}
subgraph cluster_Region_605767352 {
label = "R(1:(1:12)(1:9)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_580737188 {
label = "IF [B:66:0x0035] THEN: R(1:12) ELSE: R(1:9) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x0035|if (r5 != true) goto L12\l}"];
subgraph cluster_Region_1144662370 {
label = "R(1:12)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x003c|SYNTHETIC\lEDGE_INSN: B:75:0x003c\-\>B:69:0x003c ?: BREAK  \l|break\l}"];
}
subgraph cluster_Region_676943593 {
label = "R(1:9)";
node [shape=record,color=blue];
Node_68 [shape=record,label="{68\:\ 0x0038|r2\-\-\l}"];
}
}
}
}
}
}
Node_70 [shape=record,label="{70\:\ 0x0042|RETURN\l|return r6.subSequence(r1, r2 + 1)\l}"];
}
Node_54 [shape=record,color=red,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_59 [shape=record,color=red,label="{59\:\ 0x0017}"];
Node_72 [shape=record,color=red,label="{72\:\ 0x0035|SYNTHETIC\l}"];
Node_78 [shape=record,color=red,label="{78\:\ 0x0013|SYNTHETIC\l}"];
Node_77 [shape=record,color=red,label="{77\:\ 0x0013|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x0013\-\>B:77:0x0013\lPHI: r1 r2 r3 \l  PHI: (r1v3 'startIndex' int) = (r1v1 'startIndex' int), (r1v2 'startIndex' int), (r1v1 'startIndex' int) binds: [B:80:0x0013, B:79:0x0013, B:78:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r2v3 'endIndex' int) = (r2v2 'endIndex' int), (r2v2 'endIndex' int), (r2v4 'endIndex' int) binds: [B:80:0x0013, B:79:0x0013, B:78:0x0013] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r3v3 'startFound' boolean) = (r3v2 'startFound' boolean), (r3v1 'startFound' boolean), (r3v1 'startFound' boolean) binds: [B:80:0x0013, B:79:0x0013, B:78:0x0013] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_69 [shape=record,color=red,label="{69\:\ 0x003c|EDGE_INSN: B:75:0x003c\-\>B:69:0x003c ?: BREAK  \l}"];
Node_55 [shape=record,color=red,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_76 [shape=record,color=red,label="{76\:\ 0x002e|SYNTHETIC\l}"];
Node_73 [shape=record,color=red,label="{73\:\ 0x0032|SYNTHETIC\l}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x0013|SYNTHETIC\l}"];
Node_74 [shape=record,color=red,label="{74\:\ 0x0030|SYNTHETIC\l}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x0013|SYNTHETIC\l}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x0019}"];
Node_71 [shape=record,color=red,label="{71\:\ 0x003c|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trim((r6v0 '$this$trim' java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'predicate' kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:64:0x0030 \-\> B:57:0x0013, BACK_EDGE: B:65:0x0032 \-\> B:57:0x0013, BACK_EDGE: B:68:0x0038 \-\> B:57:0x0013, CROSS_EDGE: B:60:0x0019 \-\> B:61:0x001a, CROSS_EDGE: B:57:0x0013 \-\> B:69:0x003c\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_54;Node_56 -> Node_57;
Node_57 -> Node_58;
Node_57 -> Node_71[style=dashed];
Node_58 -> Node_59;
Node_58 -> Node_60;
Node_61 -> Node_62;
Node_62 -> Node_72[style=dashed];
Node_62 -> Node_76;
Node_63 -> Node_73;
Node_63 -> Node_74[style=dashed];
Node_65 -> Node_79;
Node_64 -> Node_80;
Node_66 -> Node_68[style=dashed];
Node_66 -> Node_75;
Node_75 -> Node_69;
Node_68 -> Node_78;
Node_70 -> Node_55;
Node_54 -> Node_56;
Node_59 -> Node_61;
Node_72 -> Node_66;
Node_78 -> Node_77;
Node_77 -> Node_57;
Node_69 -> Node_70;
Node_76 -> Node_63;
Node_73 -> Node_65;
Node_79 -> Node_77;
Node_74 -> Node_64;
Node_80 -> Node_77;
Node_60 -> Node_61;
Node_71 -> Node_69;
}

