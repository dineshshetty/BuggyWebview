digraph "CFG forkotlin.text.StringsKt__StringsKt.startsWith(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Z" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$startsWith' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"prefix\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('prefix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|0x000a: IF  (r9 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0022  (LINE:848)\l}"];
Node_28 [shape=record,label="{28\:\ 0x000c|0x000c: INSTANCE_OF  (r0 I:boolean) = (r7 I:??[OBJECT, ARRAY] A[D('$this$startsWith' java.lang.CharSequence)]) java.lang.String \l}"];
Node_29 [shape=record,label="{29\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0022 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0010|0x0010: INSTANCE_OF  (r0 I:boolean) = (r8 I:??[OBJECT, ARRAY] A[D('prefix' java.lang.CharSequence)]) java.lang.String \l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|0x0012: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x0022 \l}"];
Node_32 [shape=record,label="{32\:\ 0x0014|0x0014: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$startsWith' java.lang.CharSequence)])  (LINE:849)\l0x0015: CHECK_CAST (r0 I:java.lang.String) = (java.lang.String) (r0 I:??[OBJECT, ARRAY]) \l0x0017: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('prefix' java.lang.CharSequence)]) \l0x0018: CHECK_CAST (r1 I:java.lang.String) = (java.lang.String) (r1 I:??[OBJECT, ARRAY]) \l0x001a: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: CONST  (r3 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x001c: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001d: INVOKE  (r0 I:boolean) = (r0 I:java.lang.String), (r1 I:java.lang.String), (r2 I:boolean), (r3 I:int), (r4 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.startsWith$default(java.lang.String, java.lang.String, boolean, int, java.lang.Object):boolean A[MD:(java.lang.String, java.lang.String, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x0021|RETURN\l|0x0021: RETURN  (r0 I:boolean) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0022|0x0022: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:851)\l0x0023: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0024: INVOKE  (r5 I:int) = (r8 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0028: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$startsWith' java.lang.CharSequence)]) \l0x0029: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('prefix' java.lang.CharSequence)]) \l0x002a: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x002b: INVOKE  (r0 I:boolean) = (r1 I:java.lang.CharSequence), (r2 I:int), (r3 I:java.lang.CharSequence), (r4 I:int), (r5 I:int), (r6 I:boolean) type: STATIC call: kotlin.text.StringsKt.regionMatchesImpl(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean A[MD:(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean (m)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x002f|RETURN\l|0x002f: RETURN  (r0 I:boolean) \l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.startsWith((r7 I:java.lang.CharSequence A[D('$this$startsWith' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x002f \-\> B:25:?, CROSS_EDGE: B:29:0x000e \-\> B:34:0x0022, CROSS_EDGE: B:27:0x000a \-\> B:34:0x0022\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x002f: r7 '$this$startsWith' Ljava\/lang\/CharSequence;\l  \-1 \-0x002f: r8 'prefix' Ljava\/lang\/CharSequence;\l  \-1 \-0x002f: r9 'ignoreCase' Z\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_35 -> Node_25;
}

