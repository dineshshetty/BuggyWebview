digraph "CFG forkotlin.text.StringsKt__StringsKt.removeRange(Ljava\/lang\/CharSequence;II)Ljava\/lang\/CharSequence;" {
subgraph cluster_Region_1299689427 {
label = "R(2:1|(2:10|11)(1:(1:6)(2:8|9)))";
node [shape=record,color=blue];
Node_26 [shape=record,label="{26\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\l}"];
subgraph cluster_IfRegion_1467138844 {
label = "IF [B:27:0x0005] THEN: R(2:10|11) ELSE: R(1:(1:6)(2:8|9))";
node [shape=record,color=blue];
Node_27 [shape=record,label="{27\:\ 0x0005|if (r6 \< r5) goto L10\l}"];
subgraph cluster_Region_7787382 {
label = "R(2:10|11)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0035}"];
Node_35 [shape=record,label="{35\:\ 0x0058|throw new java.lang.IndexOutOfBoundsException(\"End index (\" + r6 + \") is less than start index (\" + r5 + \").\")\l}"];
}
subgraph cluster_Region_2128664302 {
label = "R(1:(1:6)(2:8|9)) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
subgraph cluster_IfRegion_236578774 {
label = "IF [B:29:0x0008] THEN: R(1:6) ELSE: R(2:8|9) | ELSE_IF_CHAIN\l";
node [shape=record,color=blue];
Node_29 [shape=record,label="{29\:\ 0x0008|if (r6 == r5) goto L5\l}"];
subgraph cluster_Region_1337114410 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_31 [shape=record,label="{31\:\ 0x0012|RETURN\l|return r4.subSequence(0, r4.length())\l}"];
}
subgraph cluster_Region_1426052522 {
label = "R(2:8|9)";
node [shape=record,color=blue];
Node_32 [shape=record,label="{32\:\ 0x0013|java.lang.StringBuilder java.lang.StringBuilder r1 = new java.lang.StringBuilder(r4.length() \- (r6 \- r5))\lr1.append(r4, 0, r5)\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"this.append(value, startIndex, endIndex)\")\lr1.append(r4, r6, r4.length())\lkotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r1, \"this.append(value, startIndex, endIndex)\")\l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|RETURN\l|return r1\l}"];
}
}
}
}
}
Node_24 [shape=record,color=red,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,color=red,label="{28\:\ 0x0007}"];
Node_30 [shape=record,color=red,label="{30\:\ 0x000a}"];
Node_25 [shape=record,color=red,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.removeRange((r4v0 '$this$removeRange' java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'startIndex' int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'endIndex' int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0034 \-\> B:25:?, CROSS_EDGE: B:35:0x0058 \-\> B:25:?\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_24;Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_25;
Node_29 -> Node_30;
Node_29 -> Node_32[style=dashed];
Node_31 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_24 -> Node_26;
Node_28 -> Node_29;
Node_30 -> Node_31;
}

