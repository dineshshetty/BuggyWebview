digraph "CFG forkotlin.text.StringsKt__StringsKt.indexOfAny(Ljava\/lang\/CharSequence;[CIZ)I" {
Node_60 [shape=record,label="{60\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_62 [shape=record,label="{62\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r12 I:java.lang.Object A[D('$this$indexOfAny' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"chars\" \l0x0007: INVOKE  (r13 I:java.lang.Object A[D('chars' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:933)\l}"];
Node_63 [shape=record,label="{63\:\ 0x000b|0x000b: IF  (r15 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('ignoreCase' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x0020 \l}"];
Node_64 [shape=record,label="{64\:\ 0x000d|0x000d: ARRAY_LENGTH  (r1 I:int) = (r13 I:??[] A[D('chars' char[])]) \l}"];
Node_65 [shape=record,label="{65\:\ 0x000e|0x000e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x0020 \l}"];
Node_66 [shape=record,label="{66\:\ 0x0010|0x0010: INSTANCE_OF  (r1 I:boolean) = (r12 I:??[OBJECT, ARRAY] A[D('$this$indexOfAny' java.lang.CharSequence)]) java.lang.String \l}"];
Node_67 [shape=record,label="{67\:\ 0x0012|0x0012: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x0020 \l}"];
Node_68 [shape=record,label="{68\:\ 0x0014|0x0014: INVOKE  (r0 I:char) = (r13 I:char[] A[D('chars' char[])]) type: STATIC call: kotlin.collections.ArraysKt.single(char[]):char A[MD:(char[]):char (m)] (LINE:934)\l0x0018: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('$this$indexOfAny' java.lang.CharSequence)])  (LINE:935)\l0x0019: CHECK_CAST (r1 I:java.lang.String) = (java.lang.String) (r1 I:??[OBJECT, ARRAY]) \l0x001b: INVOKE  (r1 I:int) = (r1 I:java.lang.String), (r0 I:int A[D('char' char)]), (r14 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.String.indexOf(int, int):int A[MD:(int, int):int (c)]\l}"];
Node_69 [shape=record,label="{69\:\ 0x001f|RETURN\l|0x001f: RETURN  (r1 I:int) \l}"];
Node_61 [shape=record,label="{61\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_70 [shape=record,label="{70\:\ 0x0020|0x0020: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:938)\l0x0022: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0023: INVOKE  (r3 I:int) = (r14 I:int A[D('startIndex' int)]), (r2 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0027: INVOKE  (r4 I:int) = (r12 I:java.lang.CharSequence A[D('$this$indexOfAny' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)]\l0x002b: INVOKE  (r1 I:kotlin.ranges.IntRange), (r3 I:int), (r4 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x002e: INVOKE  (r1 I:kotlin.collections.IntIterator) = (r1 I:kotlin.ranges.IntRange) type: VIRTUAL call: kotlin.ranges.IntRange.iterator():kotlin.collections.IntIterator A[MD:():java.util.Iterator\<java.lang.Integer\> (m)]\l}"];
Node_71 [shape=record,label="{71\:\ 0x0032|LOOP_START\lLOOP:0: B:71:0x0032\-\>B:80:0x0056\l|0x0032: INVOKE  (r3 I:boolean) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.hasNext():boolean A[MD:():boolean (c)]\l}"];
Node_72 [shape=record,label="{72\:\ 0x0036|0x0036: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:85:0x0059 \l}"];
Node_73 [shape=record,label="{73\:\ 0x0038|0x0038: INVOKE  (r3 I:int) = (r1 I:kotlin.collections.IntIterator) type: VIRTUAL call: kotlin.collections.IntIterator.nextInt():int A[MD:():int (m)]\l0x003c: INVOKE  (r4 I:char) = (r12 I:java.lang.CharSequence A[D('$this$indexOfAny' java.lang.CharSequence)]), (r3 I:int A[D('index' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:939)\l0x0040: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r13 I:??[OBJECT, ARRAY] A[D('chars' char[])])  (LINE:940)\l0x0041: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0042: ARRAY_LENGTH  (r7 I:int) = (r5 I:??[] A[D('$this$any$iv' char[])])  (LINE:1618)\l0x0043: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_74 [shape=record,label="{74\:\ 0x0044|LOOP_START\lLOOP:1: B:74:0x0044\-\>B:78:0x0052\l|0x0044: IF  (r8 I:??[int, byte, short, char]) \>= (r7 I:??[int, byte, short, char])  \-\> B:88:0x0055 \l}"];
Node_75 [shape=record,label="{75\:\ 0x0046|0x0046: AGET  (r9 I:char A[IMMUTABLE_TYPE]) = (r5 I:char[] A[D('$this$any$iv' char[]), IMMUTABLE_TYPE]), (r8 I:??[int, short, byte, char]) \l0x0048: MOVE  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('element$iv' char)]) \l0x0049: CONST  (r11 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x004a: INVOKE  (r10 I:boolean A[D('it' char)]) = (r10 I:char A[D('it' char)]), (r4 I:char A[D('charAtIndex' char)]), (r15 I:boolean A[D('ignoreCase' boolean)]) type: STATIC call: kotlin.text.CharsKt.equals(char, char, boolean):boolean A[MD:(char, char, boolean):boolean (m)] (LINE:940)\l}"];
Node_76 [shape=record,label="{76\:\ 0x004e|0x004e: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:78:0x0052 \l}"];
Node_78 [shape=record,label="{78\:\ 0x0052|LOOP_END\lLOOP:1: B:74:0x0044\-\>B:78:0x0052\l|0x0052: ARITH  (r8 I:int) = (r8 I:int) + (1 int) \l}"];
Node_89 [shape=record,label="{89\:\ 0x0050|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x0050|0x0050: CONST  (r5 I:??[boolean, int, float, short, byte, char] A[D('$this$any$iv' char[])]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_87 [shape=record,label="{87\:\ 0x0056|SYNTHETIC\l}"];
Node_80 [shape=record,label="{80\:\ 0x0056|LOOP_END\lLOOP:0: B:71:0x0032\-\>B:80:0x0056\l|0x0056: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('$this$any$iv' char[])]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x0032  (LINE:940)\l}"];
Node_84 [shape=record,label="{84\:\ 0x0058|SYNTHETIC\l}"];
Node_81 [shape=record,label="{81\:\ 0x0058|RETURN\l|0x0058: RETURN  (r3 I:int A[D('index' int)])  (LINE:941)\l}"];
Node_88 [shape=record,label="{88\:\ 0x0055|SYNTHETIC\l}"];
Node_79 [shape=record,label="{79\:\ 0x0055|0x0055: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('$this$any$iv' char[])]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1619)\l}"];
Node_86 [shape=record,label="{86\:\ 0x0056|SYNTHETIC\l}"];
Node_85 [shape=record,label="{85\:\ 0x0059|SYNTHETIC\l}"];
Node_82 [shape=record,label="{82\:\ 0x0059|RETURN\l|0x0059: CONST  (r0 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:943)\l0x005a: RETURN  (r0 I:int) \l}"];
MethodNode[shape=record,label="{public static final int kotlin.text.StringsKt__StringsKt.indexOfAny((r12 I:java.lang.CharSequence A[D('$this$indexOfAny' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:80:0x0056 \-\> B:71:0x0032, CROSS_EDGE: B:81:0x0058 \-\> B:61:?, BACK_EDGE: B:78:0x0052 \-\> B:74:0x0044, CROSS_EDGE: B:79:0x0055 \-\> B:80:0x0056, CROSS_EDGE: B:83:0x005a \-\> B:61:?, CROSS_EDGE: B:65:0x000e \-\> B:70:0x0020, CROSS_EDGE: B:63:0x000b \-\> B:70:0x0020\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0018\-0x0020: r0 'char' C\l  0x0049\-0x004e: r10 'it' C\l  0x004a\-0x004e: r11 '$i$a$\-any\-StringsKt__StringsKt$indexOfAny$1' I\l  0x0048\-0x0055: r9 'element$iv' C\l  0x0041\-0x0056: r5 '$this$any$iv' [C\l  0x0042\-0x0056: r6 '$i$f$any' I\l  0x003c\-0x0059: r3 'index' I\l  0x0040\-0x0059: r4 'charAtIndex' C\l  \-1 \-0x005a: r12 '$this$indexOfAny' Ljava\/lang\/CharSequence;\l  \-1 \-0x005a: r13 'chars' [C\l  \-1 \-0x005a: r14 'startIndex' I\l  \-1 \-0x005a: r15 'ignoreCase' Z\l}"];
MethodNode -> Node_60;Node_60 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_70;
Node_64 -> Node_65;
Node_65 -> Node_66[style=dashed];
Node_65 -> Node_70;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_70;
Node_68 -> Node_69;
Node_69 -> Node_61;
Node_70 -> Node_71;
Node_71 -> Node_72;
Node_72 -> Node_73[style=dashed];
Node_72 -> Node_85;
Node_73 -> Node_74;
Node_74 -> Node_75[style=dashed];
Node_74 -> Node_88;
Node_75 -> Node_76;
Node_76 -> Node_78;
Node_76 -> Node_89[style=dashed];
Node_78 -> Node_74;
Node_89 -> Node_77;
Node_77 -> Node_87;
Node_87 -> Node_80;
Node_80 -> Node_71;
Node_80 -> Node_84[style=dashed];
Node_84 -> Node_81;
Node_81 -> Node_61;
Node_88 -> Node_79;
Node_79 -> Node_86;
Node_86 -> Node_80;
Node_85 -> Node_82;
Node_82 -> Node_61;
}

