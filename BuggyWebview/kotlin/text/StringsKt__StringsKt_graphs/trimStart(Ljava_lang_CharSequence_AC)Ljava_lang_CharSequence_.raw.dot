digraph "CFG forkotlin.text.StringsKt__StringsKt.trimStart(Ljava\/lang\/CharSequence;[C)Ljava\/lang\/CharSequence;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$trimStart' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"chars\" \l0x0007: INVOKE  (r7 I:java.lang.Object A[D('chars' char[])]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$trimStart' java.lang.CharSequence)])  (LINE:156)\l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1564)\l0x000d: INVOKE  (r3 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0011|LOOP_START\lLOOP:0: B:29:0x0011\-\>B:33:0x0027\l|0x0011: IF  (r2 I:??[int, byte, short, char] A[D('index$iv' int)]) \>= (r3 I:??[int, byte, short, char])  \-\> B:36:0x002a \l}"];
Node_30 [shape=record,label="{30\:\ 0x0013|0x0013: INVOKE  (r4 I:char) = (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]), (r2 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1565)\l0x0017: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0018: INVOKE  (r4 I:boolean A[D('it' char)]) = (r7 I:char[] A[D('chars' char[])]), (r4 I:char A[D('it' char)]) type: STATIC call: kotlin.collections.ArraysKt.contains(char[], char):boolean A[MD:(char[], char):boolean (m)] (LINE:156)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001c|0x001c: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('it' char)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0027 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0027|LOOP_END\lLOOP:0: B:29:0x0011\-\>B:33:0x0027\l|0x0027: ARITH  (r2 I:int) = (r2 I:int A[D('index$iv' int)]) + (1 int)  (LINE:1564)\l}"];
Node_37 [shape=record,label="{37\:\ 0x001e|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001e|0x001e: INVOKE  (r3 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1566)\l0x0022: INVOKE  (r3 I:java.lang.CharSequence) = \l  (r0 I:java.lang.CharSequence A[D('$this$trimStart$iv' java.lang.CharSequence)])\l  (r2 I:int A[D('index$iv' int)])\l  (r3 I:int)\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x002f: RETURN  (r3 I:java.lang.CharSequence) A[SYNTHETIC] (LINE:156)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_36 [shape=record,label="{36\:\ 0x002a|SYNTHETIC\l}"];
Node_34 [shape=record,label="{34\:\ 0x002a|0x002a: CONST_STR  (r2 I:java.lang.String A[D('index$iv' int)]) =  \"\"  (LINE:1568)\l0x002c: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]) \l0x002d: CHECK_CAST (r3 I:java.lang.CharSequence) = (java.lang.CharSequence) (r3 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x002f|RETURN\lORIG_RETURN\l|0x002f: RETURN  (r3 I:java.lang.CharSequence)  (LINE:156)\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trimStart((r6 I:java.lang.CharSequence A[D('$this$trimStart' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7 I:char[] A[D('chars' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:33:0x0027 \-\> B:29:0x0011, CROSS_EDGE: B:34:0x002a \-\> B:35:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0017\-0x001c: r4 'it' C\l  0x0018\-0x001c: r5 '$i$a$\-trimStart\-StringsKt__StringsKt$trimStart$1' I\l  0x000d\-0x002a: r2 'index$iv' I\l  0x000b\-0x002f: r0 '$this$trimStart$iv' Ljava\/lang\/CharSequence;\l  0x000c\-0x002f: r1 '$i$f$trimStart' I\l  \-1 \-0x002f: r6 '$this$trimStart' Ljava\/lang\/CharSequence;\l  \-1 \-0x002f: r7 'chars' [C\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_36;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_37[style=dashed];
Node_33 -> Node_29;
Node_37 -> Node_32;
Node_32 -> Node_38;
Node_38 -> Node_27;
Node_36 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_27;
}

