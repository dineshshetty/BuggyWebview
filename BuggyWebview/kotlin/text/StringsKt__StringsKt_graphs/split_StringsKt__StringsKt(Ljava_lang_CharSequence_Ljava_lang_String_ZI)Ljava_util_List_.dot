digraph "CFG forkotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/lang\/String;ZI)Ljava\/util\/List;" {
Node_52 [shape=record,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0000|kotlin.text.StringsKt.requireNonNegativeLimit(r10)\lr0 = 0\lint r1 = kotlin.text.StringsKt.indexOf(r7, r8, 0, r9)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0009|if (r1 == (\-1)) goto L22\l}"];
Node_56 [shape=record,label="{56\:\ 0x000b|r3 = true\l}"];
Node_57 [shape=record,label="{57\:\ 0x000c|if (r10 != 1) goto L5\l}"];
Node_59 [shape=record,label="{59\:\ 0x000f|if (r10 \<= 0) goto L6\l}"];
Node_61 [shape=record,label="{61\:\ 0x0012|r3 = false\l}"];
Node_62 [shape=record,label="{62\:\ 0x0013|PHI: r3 \l  PHI: (r3v1 'isLimited' boolean) = (r3v0 'isLimited' boolean), (r3v2 'isLimited' boolean) binds: [B:59:0x000f, B:61:0x0012] A[DONT_GENERATE, DONT_INLINE]\l|r5 = 10\l}"];
Node_63 [shape=record,label="{63\:\ 0x0017|if (r3 == false) goto L10\l}"];
Node_64 [shape=record,label="{64\:\ 0x0019|int r5 = kotlin.ranges.RangesKt.coerceAtMost(r10, 10)\l}"];
Node_65 [shape=record,label="{65\:\ 0x001d|PHI: r5 \l  PHI: (r5v1 int) = (r5v0 int), (r5v6 int) binds: [B:63:0x0017, B:64:0x0019] A[DONT_GENERATE, DONT_INLINE]\l|java.util.ArrayList r4 = new java.util.ArrayList(r5)\l}"];
Node_66 [shape=record,label="{66\:\ 0x0020|LOOP_START\lLOOP:0: B:66:0x0020\-\>B:71:0x003f\lPHI: r0 r1 \l  PHI: (r0v1 'currentOffset' int) = (r0v0 'currentOffset' int), (r0v2 'currentOffset' int) binds: [B:65:0x001d, B:71:0x003f] A[DONT_GENERATE, DONT_INLINE]\l  PHI: (r1v1 'nextIndex' int) = (r1v0 'nextIndex' int), (r1v2 'nextIndex' int) binds: [B:65:0x001d, B:71:0x003f] A[DONT_GENERATE, DONT_INLINE]\l|r4.add(r7.subSequence(r0, r1).toString())\lint r0 = r1 + r8.length()\l}"];
Node_67 [shape=record,label="{67\:\ 0x0031|if (r3 == false) goto L19\l}"];
Node_68 [shape=record,label="{68\:\ 0x0033}"];
Node_69 [shape=record,label="{69\:\ 0x0039|if (r4.size() == (r10 + (\-1))) goto L15\l}"];
Node_76 [shape=record,label="{76\:\ 0x0041|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0041|r4.add(r7.subSequence(r0, r7.length()).toString())\l}"];
Node_73 [shape=record,label="{73\:\ 0x0053|RETURN\l|return r4\l}"];
Node_53 [shape=record,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_70 [shape=record,label="{70\:\ 0x003b|int r1 = kotlin.text.StringsKt.indexOf(r7, r8, r0, r9)\l}"];
Node_71 [shape=record,label="{71\:\ 0x003f|LOOP_END\lLOOP:0: B:66:0x0020\-\>B:71:0x003f\l|if (r1 != (\-1)) goto L11\l}"];
Node_77 [shape=record,label="{77\:\ 0x0041|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0054}"];
Node_75 [shape=record,label="{75\:\ 0x005c|RETURN\l|return kotlin.collections.CollectionsKt.listOf(r7.toString())\l}"];
MethodNode[shape=record,label="{private static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt((r7v0 '$this$split' java.lang.CharSequence A[D('$this$split' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'delimiter' java.lang.String A[D('delimiter' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'limit' int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:71:0x003f \-\> B:66:0x0020, CROSS_EDGE: B:69:0x0039 \-\> B:72:0x0041, CROSS_EDGE: B:67:0x0031 \-\> B:70:0x003b, CROSS_EDGE: B:63:0x0017 \-\> B:65:0x001d, CROSS_EDGE: B:59:0x000f \-\> B:62:0x0013, CROSS_EDGE: B:75:0x005c \-\> B:53:?, CROSS_EDGE: B:55:0x0009 \-\> B:74:0x0054\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\lSIGNATURE: (Ljava\/lang\/CharSequence;Ljava\/lang\/String;ZI)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_52;Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_74;
Node_56 -> Node_57;
Node_57 -> Node_59;
Node_57 -> Node_74[style=dashed];
Node_59 -> Node_61;
Node_59 -> Node_62[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_70;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_76;
Node_76 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_53;
Node_70 -> Node_71;
Node_71 -> Node_66;
Node_71 -> Node_77[style=dashed];
Node_77 -> Node_72;
Node_74 -> Node_75;
Node_75 -> Node_53;
}

