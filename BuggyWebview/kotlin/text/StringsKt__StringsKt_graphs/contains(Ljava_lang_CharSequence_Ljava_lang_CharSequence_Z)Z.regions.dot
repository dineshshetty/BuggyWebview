digraph "CFG forkotlin.text.StringsKt__StringsKt.contains(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Z" {
subgraph cluster_Region_95727108 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_34 [shape=record,label="{34\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, \"other\")\l}"];
Node_35 [shape=record,label="{35\:\ 0x000e|RETURN\l|return r12 instanceof java.lang.String ? kotlin.text.StringsKt.indexOf$default(r11, (java.lang.String) r12, 0, r13, 2, (java.lang.Object) null) \>= 0 : indexOf$StringsKt__StringsKt$default(r11, r12, 0, r11.length(), r13, false, 16, null) \>= 0\l}"];
}
Node_32 [shape=record,color=red,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_36 [shape=record,color=red,label="{36\:\ 0x0010}"];
Node_37 [shape=record,color=red,label="{37\:\ 0x001c}"];
Node_39 [shape=record,color=red,label="{39\:\ 0x001f|SYNTHETIC\l}"];
Node_33 [shape=record,color=red,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_46 [shape=record,color=red,label="{46\:\ ?|SYNTHETIC\l}"];
Node_40 [shape=record,color=red,label="{40\:\ 0x0021}"];
Node_41 [shape=record,color=red,label="{41\:\ 0x0031}"];
Node_43 [shape=record,color=red,label="{43\:\ 0x0034|ORIG_RETURN\l}"];
Node_47 [shape=record,color=red,label="{47\:\ ?|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.contains((r11v0 '$this$contains' java.lang.CharSequence A[D('$this$contains' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12v0 'other' java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x001c \-\> B:44:0x0035, CROSS_EDGE: B:43:0x0034 \-\> B:44:0x0035, CROSS_EDGE: B:41:0x0031 \-\> B:44:0x0035\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_32;Node_34 -> Node_35;
Node_35 -> Node_36;
Node_35 -> Node_40;
Node_32 -> Node_34;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_46;
Node_39 -> Node_33;
Node_46 -> Node_33;
Node_40 -> Node_41;
Node_41 -> Node_43;
Node_41 -> Node_47;
Node_43 -> Node_33;
Node_47 -> Node_33;
}

