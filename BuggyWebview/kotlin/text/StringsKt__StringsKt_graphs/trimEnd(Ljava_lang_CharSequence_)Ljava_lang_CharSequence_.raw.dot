digraph "CFG forkotlin.text.StringsKt__StringsKt.trimEnd(Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r6 I:java.lang.Object A[D('$this$trimEnd' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r6 I:??[OBJECT, ARRAY] A[D('$this$trimEnd' java.lang.CharSequence)])  (LINE:198)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: INVOKE  (r2 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trimEnd$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1613)\l0x000b: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l}"];
Node_29 [shape=record,label="{29\:\ 0x000d|0x000d: IF  (r2 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:34:0x0027 \l}"];
Node_30 [shape=record,label="{30\:\ 0x000f|LOOP_START\lLOOP:0: B:30:0x000f\-\>B:33:0x0025\l|0x000f: MOVE  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: ARITH  (r2 I:int) = (r2 I:int) + (\-1 int) \l0x0012: INVOKE  (r4 I:char) = (r0 I:java.lang.CharSequence A[D('$this$trimEnd$iv' java.lang.CharSequence)]), (r3 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1614)\l0x0016: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0017: INVOKE  (r4 I:boolean A[D('p0' char)]) = (r4 I:char A[D('p0' char)]) type: STATIC call: kotlin.text.CharsKt.isWhitespace(char):boolean A[MD:(char):boolean (m)] (LINE:198)\l}"];
Node_31 [shape=record,label="{31\:\ 0x001b|0x001b: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('p0' char)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:33:0x0025 \l}"];
Node_33 [shape=record,label="{33\:\ 0x0025|LOOP_END\lLOOP:0: B:30:0x000f\-\>B:33:0x0025\l|0x0025: IF  (r2 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:30:0x000f  (LINE:1613)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0027|SYNTHETIC\l}"];
Node_37 [shape=record,label="{37\:\ 0x001d|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x001d|0x001d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1615)\l0x001e: ARITH  (r4 I:int) = (r3 I:int A[D('index$iv' int)]) + (1 int) \l0x0020: INVOKE  (r2 I:java.lang.CharSequence) = (r0 I:java.lang.CharSequence A[D('$this$trimEnd$iv' java.lang.CharSequence)]), (r2 I:int), (r4 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_38 [shape=record,label="{38\:\ ?|SYNTHETIC\lRETURN\l|0x002b: RETURN  (r2 I:java.lang.CharSequence) A[SYNTHETIC] (LINE:198)\l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0027|0x0027: CONST_STR  (r2 I:java.lang.String) =  \"\"  (LINE:1617)\l0x0029: CHECK_CAST (r2 I:java.lang.CharSequence) = (java.lang.CharSequence) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x002b|RETURN\lORIG_RETURN\l|0x002b: RETURN  (r2 I:java.lang.CharSequence)  (LINE:198)\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trimEnd((r6 I:java.lang.CharSequence A[D('$this$trimEnd' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:33:0x0025 \-\> B:30:0x000f, CROSS_EDGE: B:34:0x0027 \-\> B:35:0x002b, CROSS_EDGE: B:29:0x000d \-\> B:34:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x001b: r4 'p0' C\l  0x0017\-0x001b: r5 '$i$a$\-trimEnd\-StringsKt__StringsKt$trimEnd$3' I\l  0x0010\-0x0027: r3 'index$iv' I\l  0x0006\-0x002b: r0 '$this$trimEnd$iv' Ljava\/lang\/CharSequence;\l  0x0007\-0x002b: r1 '$i$f$trimEnd' I\l  \-1 \-0x002b: r6 '$this$trimEnd' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_33;
Node_31 -> Node_37[style=dashed];
Node_33 -> Node_30;
Node_33 -> Node_36[style=dashed];
Node_36 -> Node_34;
Node_37 -> Node_32;
Node_32 -> Node_38;
Node_38 -> Node_27;
Node_34 -> Node_35;
Node_35 -> Node_27;
}

