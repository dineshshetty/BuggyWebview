digraph "CFG forkotlin.text.StringsKt__StringsKt.commonPrefixWith(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Ljava\/lang\/String;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, \"other\")\lint r0 = java.lang.Math.min(r4.length(), r5.length())\lr1 = 0\l}"];
Node_35 [shape=record,label="{35\:\ 0x0017|LOOP_START\lLOOP:0: B:35:0x0017\-\>B:38:0x0027\lPHI: r1 \l  PHI: (r1v2 'i' int) = (r1v1 'i' int), (r1v5 'i' int) binds: [B:34:0x0000, B:38:0x0027] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r0) goto L15\l}"];
Node_36 [shape=record,label="{36\:\ 0x0019}"];
Node_37 [shape=record,label="{37\:\ 0x0025|if (kotlin.text.CharsKt.equals(r4.charAt(r1), r5.charAt(r1), r6) == false) goto L6\l}"];
Node_38 [shape=record,label="{38\:\ 0x0027|LOOP_END\lLOOP:0: B:35:0x0017\-\>B:38:0x0027\l|int r1 = r1 + 1\l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x002a}"];
Node_40 [shape=record,label="{40\:\ 0x0030|if (kotlin.text.StringsKt.hasSurrogatePairAt(r4, r1 + (\-1)) != false) goto L14\l}"];
Node_41 [shape=record,label="{41\:\ 0x0032}"];
Node_42 [shape=record,label="{42\:\ 0x0038|if (kotlin.text.StringsKt.hasSurrogatePairAt(r5, r1 + (\-1)) == false) goto L11\l}"];
Node_44 [shape=record,label="{44\:\ 0x003c|PHI: r1 \l  PHI: (r1v4 'i' int) = (r1v3 'i' int), (r1v2 'i' int) binds: [B:43:0x003a, B:42:0x0038] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0045|RETURN\l|return r4.subSequence(0, r1).toString()\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x003a|int r1 = r1 + (\-1)\l}"];
Node_47 [shape=record,label="{47\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.commonPrefixWith((r4v0 '$this$commonPrefixWith' java.lang.CharSequence A[D('$this$commonPrefixWith' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'other' java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x0027 \-\> B:35:0x0017, CROSS_EDGE: B:42:0x0038 \-\> B:44:0x003c, CROSS_EDGE: B:40:0x0030 \-\> B:43:0x003a, CROSS_EDGE: B:35:0x0017 \-\> B:39:0x002a\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_47;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_35;
Node_46 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_33;
Node_43 -> Node_44;
Node_47 -> Node_39;
}

