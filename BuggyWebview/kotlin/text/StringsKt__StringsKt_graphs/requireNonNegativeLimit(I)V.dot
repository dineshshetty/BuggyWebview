digraph "CFG forkotlin.text.StringsKt__StringsKt.requireNonNegativeLimit(I)V" {
Node_18 [shape=record,label="{18\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0000|if (r3 \< 0) goto L8\l}"];
Node_21 [shape=record,label="{21\:\ 0x0002|r0 = true\l}"];
Node_23 [shape=record,label="{23\:\ 0x0005|PHI: r0 \l  PHI: (r0v1 boolean) = (r0v0 boolean), (r0v5 boolean) binds: [B:22:0x0004, B:21:0x0002] A[DONT_GENERATE, DONT_INLINE]\l|if (r0 == false) goto L6\l}"];
Node_24 [shape=record,label="{24\:\ 0x0007|RETURN\l|return\l}"];
Node_19 [shape=record,label="{19\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_25 [shape=record,label="{25\:\ 0x0008|java.lang.StringBuilder r1 = new java.lang.StringBuilder()\lr1.append(\"Limit must be non\-negative, but was \")\lr1.append(r3)\l}"];
Node_26 [shape=record,label="{26\:\ 0x0023|throw new java.lang.IllegalArgumentException(r1.toString().toString())\l}"];
Node_22 [shape=record,label="{22\:\ 0x0004|r0 = false\l}"];
MethodNode[shape=record,label="{public static final void kotlin.text.StringsKt__StringsKt.requireNonNegativeLimit((r3v0 'limit' int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:26:0x0023 \-\> B:19:?, CROSS_EDGE: B:22:0x0004 \-\> B:23:0x0005\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_18;Node_18 -> Node_20;
Node_20 -> Node_21[style=dashed];
Node_20 -> Node_22;
Node_21 -> Node_23;
Node_23 -> Node_24[style=dashed];
Node_23 -> Node_25;
Node_24 -> Node_19;
Node_25 -> Node_26;
Node_26 -> Node_19;
Node_22 -> Node_23;
}

