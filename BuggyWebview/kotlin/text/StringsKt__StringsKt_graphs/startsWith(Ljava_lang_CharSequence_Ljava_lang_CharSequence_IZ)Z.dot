digraph "CFG forkotlin.text.StringsKt__StringsKt.startsWith(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;IZ)Z" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"prefix\")\l}"];
Node_27 [shape=record,label="{27\:\ 0x000a|if (r10 != false) goto L10\l}"];
Node_28 [shape=record,label="{28\:\ 0x000c}"];
Node_29 [shape=record,label="{29\:\ 0x000e|if ((r7 instanceof java.lang.String) == false) goto L10\l}"];
Node_30 [shape=record,label="{30\:\ 0x0010}"];
Node_31 [shape=record,label="{31\:\ 0x0012|if ((r8 instanceof java.lang.String) == false) goto L10\l}"];
Node_32 [shape=record,label="{32\:\ 0x0014}"];
Node_33 [shape=record,label="{33\:\ 0x0022|RETURN\l|return kotlin.text.StringsKt.startsWith$default((java.lang.String) r7, (java.lang.String) r8, r9, false, 4, null)\l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0023}"];
Node_35 [shape=record,label="{35\:\ 0x0030|RETURN\l|return kotlin.text.StringsKt.regionMatchesImpl(r7, r9, r8, 0, r8.length(), r10)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.startsWith((r7v0 '$this$startsWith' java.lang.CharSequence A[D('$this$startsWith' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'prefix' java.lang.CharSequence A[D('prefix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'startIndex' int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x0030 \-\> B:25:?, CROSS_EDGE: B:29:0x000e \-\> B:34:0x0023, CROSS_EDGE: B:27:0x000a \-\> B:34:0x0023\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_34;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_34;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_35 -> Node_25;
}

