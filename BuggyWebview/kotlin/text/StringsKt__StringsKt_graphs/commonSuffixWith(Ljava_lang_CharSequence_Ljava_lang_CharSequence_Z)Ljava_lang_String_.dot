digraph "CFG forkotlin.text.StringsKt__StringsKt.commonSuffixWith(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Ljava\/lang\/String;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"other\")\lint r0 = r6.length()\lint r1 = r7.length()\lint r2 = java.lang.Math.min(r0, r1)\lr3 = 0\l}"];
Node_35 [shape=record,label="{35\:\ 0x0017|LOOP_START\lLOOP:0: B:35:0x0017\-\>B:38:0x002f\lPHI: r3 \l  PHI: (r3v1 'i' int) = (r3v0 'i' int), (r3v4 'i' int) binds: [B:34:0x0000, B:38:0x002f] A[DONT_GENERATE, DONT_INLINE]\l|if (r3 \>= r2) goto L15\l}"];
Node_36 [shape=record,label="{36\:\ 0x0019}"];
Node_37 [shape=record,label="{37\:\ 0x002d|if (kotlin.text.CharsKt.equals(r6.charAt((r0 \- r3) + (\-1)), r7.charAt((r1 \- r3) + (\-1)), r8) == false) goto L6\l}"];
Node_38 [shape=record,label="{38\:\ 0x002f|LOOP_END\lLOOP:0: B:35:0x0017\-\>B:38:0x002f\l|int r3 = r3 + 1\l}"];
Node_47 [shape=record,label="{47\:\ 0x0032|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x0032}"];
Node_40 [shape=record,label="{40\:\ 0x003a|if (kotlin.text.StringsKt.hasSurrogatePairAt(r6, (r0 \- r3) + (\-1)) != false) goto L14\l}"];
Node_41 [shape=record,label="{41\:\ 0x003c}"];
Node_42 [shape=record,label="{42\:\ 0x0044|if (kotlin.text.StringsKt.hasSurrogatePairAt(r7, (r1 \- r3) + (\-1)) == false) goto L11\l}"];
Node_44 [shape=record,label="{44\:\ 0x0048|PHI: r3 \l  PHI: (r3v3 'i' int) = (r3v2 'i' int), (r3v1 'i' int) binds: [B:43:0x0046, B:42:0x0044] A[DONT_GENERATE, DONT_INLINE]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0052|RETURN\l|return r6.subSequence(r0 \- r3, r0).toString()\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x0046|int r3 = r3 + (\-1)\l}"];
Node_46 [shape=record,label="{46\:\ 0x0032|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.commonSuffixWith((r6v0 '$this$commonSuffixWith' java.lang.CharSequence A[D('$this$commonSuffixWith' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'other' java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x002f \-\> B:35:0x0017, CROSS_EDGE: B:42:0x0044 \-\> B:44:0x0048, CROSS_EDGE: B:40:0x003a \-\> B:43:0x0046, CROSS_EDGE: B:35:0x0017 \-\> B:39:0x0032\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_46;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_47;
Node_38 -> Node_35;
Node_47 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_33;
Node_43 -> Node_44;
Node_46 -> Node_39;
}

