digraph "CFG forkotlin.text.StringsKt__StringsKt.removeSuffix(Ljava\/lang\/String;Ljava\/lang\/CharSequence;)Ljava\/lang\/String;" {
Node_14 [shape=record,label="{14\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_16 [shape=record,label="{16\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$removeSuffix' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"suffix\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('suffix' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('$this$removeSuffix' java.lang.String)])  (LINE:626)\l0x000b: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l0x000d: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: CONST  (r2 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x000f: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0010: INVOKE  (r0 I:boolean) = \l  (r0 I:java.lang.CharSequence)\l  (r5 I:java.lang.CharSequence A[D('suffix' java.lang.CharSequence)])\l  (r1 I:boolean)\l  (r2 I:int)\l  (r3 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt.endsWith$default(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean A[MD:(java.lang.CharSequence, java.lang.CharSequence, boolean, int, java.lang.Object):boolean (m)]\l}"];
Node_17 [shape=record,label="{17\:\ 0x0014|0x0014: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:20:0x0029 \l}"];
Node_18 [shape=record,label="{18\:\ 0x0016|0x0016: INVOKE  (r0 I:int) = (r4 I:java.lang.String A[D('$this$removeSuffix' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:627)\l0x001a: INVOKE  (r2 I:int) = (r5 I:java.lang.CharSequence A[D('suffix' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x001e: ARITH  (r0 I:int) = (r0 I:int) \- (r2 I:int) \l0x001f: INVOKE  (r0 I:java.lang.String) = (r4 I:java.lang.String A[D('$this$removeSuffix' java.lang.String)]), (r1 I:int), (r0 I:int) type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)]\l0x0023: CONST_STR  (r1 I:java.lang.String) =  \"this as java.lang.Stringâ€¦ing(startIndex, endIndex)\" \l0x0025: INVOKE  (r0 I:java.lang.Object), (r1 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_19 [shape=record,label="{19\:\ 0x0028|RETURN\l|0x0028: RETURN  (r0 I:java.lang.String) \l}"];
Node_15 [shape=record,label="{15\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_20 [shape=record,label="{20\:\ 0x0029|RETURN\l|0x0029: RETURN  (r4 I:java.lang.String A[D('$this$removeSuffix' java.lang.String)])  (LINE:629)\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.removeSuffix((r4 I:java.lang.String A[D('$this$removeSuffix' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.CharSequence A[D('suffix' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:20:0x0029 \-\> B:15:?\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0029: r4 '$this$removeSuffix' Ljava\/lang\/String;\l  \-1 \-0x0029: r5 'suffix' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_14;Node_14 -> Node_16;
Node_16 -> Node_17;
Node_17 -> Node_18[style=dashed];
Node_17 -> Node_20;
Node_18 -> Node_19;
Node_19 -> Node_15;
Node_20 -> Node_15;
}

