digraph "CFG forkotlin.text.StringsKt__StringsKt.removeRange(Ljava\/lang\/CharSequence;II)Ljava\/lang\/CharSequence;" {
Node_24 [shape=record,label="{24\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_26 [shape=record,label="{26\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$removeRange' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_27 [shape=record,label="{27\:\ 0x0005|0x0005: IF  (r6 I:??[int, byte, short, char] A[D('endIndex' int)]) \< (r5 I:??[int, byte, short, char] A[D('startIndex' int)])  \-\> B:34:0x0035  (LINE:549)\l}"];
Node_28 [shape=record,label="{28\:\ 0x0007|0x0007: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:552)\l}"];
Node_29 [shape=record,label="{29\:\ 0x0008|0x0008: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('endIndex' int)]) != (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startIndex' int)])  \-\> B:32:0x0013 \l}"];
Node_30 [shape=record,label="{30\:\ 0x000a|0x000a: INVOKE  (r1 I:int) = (r4 I:java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:553)\l0x000e: INVOKE  (r0 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence)]), (r0 I:int), (r1 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0012|RETURN\l|0x0012: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_25 [shape=record,label="{25\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_32 [shape=record,label="{32\:\ 0x0013|0x0013: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder  (LINE:555)\l0x0015: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0019: ARITH  (r3 I:int) = (r6 I:int A[D('endIndex' int)]) \- (r5 I:int A[D('startIndex' int)]) \l0x001b: ARITH  (r2 I:int) = (r2 I:int) \- (r3 I:int) \l0x001c: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:int) type: DIRECT call: java.lang.StringBuilder.\<init\>(int):void A[MD:(int):void (c)]\l0x001f: INVOKE  \l  (r1 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r4 I:java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence)])\l  (r0 I:int)\l  (r5 I:int A[D('startIndex' int)])\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)] (LINE:556)\l0x0022: CONST_STR  (r0 I:java.lang.String) =  \"this.append(value, startIndex, endIndex)\" \l0x0024: INVOKE  (r1 I:java.lang.Object A[D('sb' java.lang.StringBuilder)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0027: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:557)\l0x002b: INVOKE  \l  (r1 I:java.lang.StringBuilder A[D('sb' java.lang.StringBuilder)])\l  (r4 I:java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence)])\l  (r6 I:int A[D('endIndex' int)])\l  (r2 I:int)\l type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.CharSequence, int, int):java.lang.StringBuilder A[MD:(java.lang.CharSequence, int, int):java.lang.StringBuilder (c)]\l0x002e: INVOKE  (r1 I:java.lang.Object A[D('sb' java.lang.StringBuilder)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0031: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY] A[D('sb' java.lang.StringBuilder)])  (LINE:558)\l0x0032: CHECK_CAST (r0 I:java.lang.CharSequence) = (java.lang.CharSequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_33 [shape=record,label="{33\:\ 0x0034|RETURN\l|0x0034: RETURN  (r0 I:java.lang.CharSequence) \l}"];
Node_34 [shape=record,label="{34\:\ 0x0035|0x0035: NEW_INSTANCE  (r0 I:java.lang.IndexOutOfBoundsException) =  java.lang.IndexOutOfBoundsException  (LINE:550)\l0x0037: NEW_INSTANCE  (r1 I:java.lang.StringBuilder) =  java.lang.StringBuilder \l0x0039: INVOKE  (r1 I:java.lang.StringBuilder) type: DIRECT call: java.lang.StringBuilder.\<init\>():void A[MD:():void (c)]\l0x003c: CONST_STR  (r2 I:java.lang.String) =  \"End index (\" \l0x003e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0041: INVOKE  (r1 I:java.lang.StringBuilder), (r6 I:int A[D('endIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x0044: CONST_STR  (r2 I:java.lang.String) =  \") is less than start index (\" \l0x0046: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0049: INVOKE  (r1 I:java.lang.StringBuilder), (r5 I:int A[D('startIndex' int)]) type: VIRTUAL call: java.lang.StringBuilder.append(int):java.lang.StringBuilder A[MD:(int):java.lang.StringBuilder (c)]\l0x004c: CONST_STR  (r2 I:java.lang.String) =  \").\" \l0x004e: INVOKE  (r1 I:java.lang.StringBuilder), (r2 I:java.lang.String) type: VIRTUAL call: java.lang.StringBuilder.append(java.lang.String):java.lang.StringBuilder A[MD:(java.lang.String):java.lang.StringBuilder (c)]\l0x0051: INVOKE  (r1 I:java.lang.String) = (r1 I:java.lang.StringBuilder) type: VIRTUAL call: java.lang.StringBuilder.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0055: INVOKE  (r0 I:java.lang.IndexOutOfBoundsException), (r1 I:java.lang.String) type: DIRECT call: java.lang.IndexOutOfBoundsException.\<init\>(java.lang.String):void A[MD:(java.lang.String):void (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x0058|0x0058: THROW  (r0 I:java.lang.Throwable) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.removeRange((r4 I:java.lang.CharSequence A[D('$this$removeRange' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:33:0x0034 \-\> B:25:?, CROSS_EDGE: B:35:0x0058 \-\> B:25:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001f\-0x0035: r1 'sb' Ljava\/lang\/StringBuilder;\l  \-1 \-0x0058: r4 '$this$removeRange' Ljava\/lang\/CharSequence;\l  \-1 \-0x0058: r5 'startIndex' I\l  \-1 \-0x0058: r6 'endIndex' I\l}"];
MethodNode -> Node_24;Node_24 -> Node_26;
Node_26 -> Node_27;
Node_27 -> Node_28[style=dashed];
Node_27 -> Node_34;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_32;
Node_30 -> Node_31;
Node_31 -> Node_25;
Node_32 -> Node_33;
Node_33 -> Node_25;
Node_34 -> Node_35;
Node_35 -> Node_25;
}

