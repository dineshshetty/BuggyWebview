digraph "CFG forkotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt(Ljava\/lang\/CharSequence;[CIZI)Lkotlin\/sequences\/Sequence;" {
Node_8 [shape=record,label="{8\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_10 [shape=record,label="{10\:\ 0x0000|0x0000: INVOKE  (r6 I:int A[D('limit' int)]) type: STATIC call: kotlin.text.StringsKt.requireNonNegativeLimit(int):void A[MD:(int):void (m)] (LINE:1240)\l0x0003: NEW_INSTANCE  (r0 I:kotlin.text.DelimitedRangesSequence) =  kotlin.text.DelimitedRangesSequence  (LINE:1242)\l0x0005: NEW_INSTANCE  (r1 I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1) =  kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1 \l0x0007: INVOKE  \l  (r1 I:kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1)\l  (r3 I:char[] A[D('delimiters' char[])])\l  (r5 I:boolean A[D('ignoreCase' boolean)])\l type: DIRECT call: kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$1.\<init\>(char[], boolean):void A[MD:(char[], boolean):void (m)]\l0x000a: CHECK_CAST (r1 I:kotlin.jvm.functions.Function2) = (kotlin.jvm.functions.Function2) (r1 I:??[OBJECT, ARRAY]) \l0x000c: INVOKE  \l  (r0 I:kotlin.text.DelimitedRangesSequence)\l  (r2 I:java.lang.CharSequence A[D('$this$rangesDelimitedBy' java.lang.CharSequence)])\l  (r4 I:int A[D('startIndex' int)])\l  (r6 I:int A[D('limit' int)])\l  (r1 I:kotlin.jvm.functions.Function2)\l type: DIRECT call: kotlin.text.DelimitedRangesSequence.\<init\>(java.lang.CharSequence, int, int, kotlin.jvm.functions.Function2):void A[MD:(java.lang.CharSequence, int, int, kotlin.jvm.functions.Function2\<? super java.lang.CharSequence, ? super java.lang.Integer, kotlin.Pair\<java.lang.Integer, java.lang.Integer\>\>):void (m)]\l0x000f: CHECK_CAST (r0 I:kotlin.sequences.Sequence) = (kotlin.sequences.Sequence) (r0 I:??[OBJECT, ARRAY]) \l}"];
Node_11 [shape=record,label="{11\:\ 0x0011|RETURN\l|0x0011: RETURN  (r0 I:kotlin.sequences.Sequence\<kotlin.ranges.IntRange\>) \l}"];
Node_9 [shape=record,label="{9\:\ ?|MTH_EXIT_BLOCK\l}"];
MethodNode[shape=record,label="{private static final kotlin.sequences.Sequence\<kotlin.ranges.IntRange\> kotlin.text.StringsKt__StringsKt.rangesDelimitedBy$StringsKt__StringsKt((r2 I:java.lang.CharSequence A[D('$this$rangesDelimitedBy' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r3 I:char[] A[D('delimiters' char[]), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0011: r2 '$this$rangesDelimitedBy' Ljava\/lang\/CharSequence;\l  \-1 \-0x0011: r3 'delimiters' [C\l  \-1 \-0x0011: r4 'startIndex' I\l  \-1 \-0x0011: r5 'ignoreCase' Z\l  \-1 \-0x0011: r6 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;[CIZI)Lkotlin\/sequences\/Sequence\<Lkotlin\/ranges\/IntRange;\>;\l}"];
MethodNode -> Node_8;Node_8 -> Node_10;
Node_10 -> Node_11;
Node_11 -> Node_9;
}

