digraph "CFG forkotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/lang\/String;ZI)Ljava\/util\/List;" {
Node_52 [shape=record,label="{52\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_54 [shape=record,label="{54\:\ 0x0000|0x0000: INVOKE  (r10 I:int A[D('limit' int)]) type: STATIC call: kotlin.text.StringsKt.requireNonNegativeLimit(int):void A[MD:(int):void (m)] (LINE:1346)\l0x0003: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1348)\l0x0004: INVOKE  (r1 I:int) = \l  (r7 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r8 I:java.lang.String A[D('delimiter' java.lang.String)])\l  (r0 I:int A[D('currentOffset' int)])\l  (r9 I:boolean A[D('ignoreCase' boolean)])\l type: STATIC call: kotlin.text.StringsKt.indexOf(java.lang.CharSequence, java.lang.String, int, boolean):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean):int (m)] (LINE:1349)\l0x0008: CONST  (r2 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:1350)\l}"];
Node_55 [shape=record,label="{55\:\ 0x0009|0x0009: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nextIndex' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:74:0x0054 \l}"];
Node_56 [shape=record,label="{56\:\ 0x000b|0x000b: CONST  (r3 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l}"];
Node_57 [shape=record,label="{57\:\ 0x000c|0x000c: IF  (r10 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('limit' int)]) != (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:59:0x000f \l}"];
Node_59 [shape=record,label="{59\:\ 0x000f|0x000f: IF  (r10 I:??[int, byte, short, char] A[D('limit' int)]) \<= (0 ??[int, byte, short, char])  \-\> B:61:0x0012  (LINE:1354)\l}"];
Node_61 [shape=record,label="{61\:\ 0x0012|0x0012: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_62 [shape=record,label="{62\:\ 0x0013|0x0013: NEW_INSTANCE  (r4 I:java.util.ArrayList) =  java.util.ArrayList  (LINE:1355)\l0x0015: CONST  (r5 I:??[int, float, short, byte, char]) = (10 ??[int, float, short, byte, char]) \l}"];
Node_63 [shape=record,label="{63\:\ 0x0017|0x0017: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isLimited' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:65:0x001d \l}"];
Node_64 [shape=record,label="{64\:\ 0x0019|0x0019: INVOKE  (r5 I:int) = (r10 I:int A[D('limit' int)]), (r5 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l}"];
Node_65 [shape=record,label="{65\:\ 0x001d|0x001d: INVOKE  (r4 I:java.util.ArrayList), (r5 I:int) type: DIRECT call: java.util.ArrayList.\<init\>(int):void A[MD:(int):void (c)]\l}"];
Node_66 [shape=record,label="{66\:\ 0x0020|LOOP_START\lLOOP:0: B:66:0x0020\-\>B:71:0x003f\l|0x0020: INVOKE  (r5 I:java.lang.CharSequence) = \l  (r7 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r0 I:int A[D('currentOffset' int)])\l  (r1 I:int A[D('nextIndex' int)])\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)] (LINE:1357)\l0x0024: INVOKE  (r5 I:java.lang.String) = (r5 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x0028: INVOKE  (r4 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r5 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x002b: INVOKE  (r5 I:int) = (r8 I:java.lang.String A[D('delimiter' java.lang.String)]) type: VIRTUAL call: java.lang.String.length():int A[MD:():int (c)] (LINE:1358)\l0x002f: ARITH  (r0 I:int A[D('currentOffset' int)]) = (r1 I:int A[D('nextIndex' int)]) + (r5 I:int) \l}"];
Node_67 [shape=record,label="{67\:\ 0x0031|0x0031: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('isLimited' boolean)]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:70:0x003b  (LINE:1360)\l}"];
Node_68 [shape=record,label="{68\:\ 0x0033|0x0033: INVOKE  (r5 I:int) = (r4 I:java.util.ArrayList A[D('result' java.util.ArrayList)]) type: VIRTUAL call: java.util.ArrayList.size():int A[MD:():int (c)]\l0x0037: ARITH  (r6 I:int) = (r10 I:int A[D('limit' int)]) + (\-1 int) \l}"];
Node_69 [shape=record,label="{69\:\ 0x0039|0x0039: IF  (r5 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:76:0x0041 \l}"];
Node_76 [shape=record,label="{76\:\ 0x0041|SYNTHETIC\l}"];
Node_72 [shape=record,label="{72\:\ 0x0041|0x0041: INVOKE  (r2 I:int) = (r7 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1364)\l0x0045: INVOKE  (r2 I:java.lang.CharSequence) = \l  (r7 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r0 I:int A[D('currentOffset' int)])\l  (r2 I:int)\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l0x0049: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l0x004d: INVOKE  (r4 I:java.util.ArrayList A[D('result' java.util.ArrayList)]), (r2 I:java.lang.Object) type: VIRTUAL call: java.util.ArrayList.add(java.lang.Object):boolean A[MD:(E):boolean (c)]\l0x0050: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r4 I:??[OBJECT, ARRAY] A[D('result' java.util.ArrayList)])  (LINE:1365)\l0x0051: CHECK_CAST (r2 I:java.util.List) = (java.util.List) (r2 I:??[OBJECT, ARRAY]) \l}"];
Node_73 [shape=record,label="{73\:\ 0x0053|RETURN\l|0x0053: RETURN  (r2 I:java.util.List\<java.lang.String\>) \l}"];
Node_53 [shape=record,label="{53\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_70 [shape=record,label="{70\:\ 0x003b|0x003b: INVOKE  (r1 I:int A[D('nextIndex' int)]) = \l  (r7 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence)])\l  (r8 I:java.lang.String A[D('delimiter' java.lang.String)])\l  (r0 I:int A[D('currentOffset' int)])\l  (r9 I:boolean A[D('ignoreCase' boolean)])\l type: STATIC call: kotlin.text.StringsKt.indexOf(java.lang.CharSequence, java.lang.String, int, boolean):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean):int (m)] (LINE:1361)\l}"];
Node_71 [shape=record,label="{71\:\ 0x003f|LOOP_END\lLOOP:0: B:66:0x0020\-\>B:71:0x003f\l|0x003f: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('nextIndex' int)]) != (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:66:0x0020  (LINE:1362)\l}"];
Node_77 [shape=record,label="{77\:\ 0x0041|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0054|0x0054: INVOKE  (r2 I:java.lang.String) = (r7 I:java.lang.Object A[D('$this$split' java.lang.CharSequence)]) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)] (LINE:1351)\l0x0058: INVOKE  (r2 I:java.util.List) = (r2 I:java.lang.Object) type: STATIC call: kotlin.collections.CollectionsKt.listOf(java.lang.Object):java.util.List A[MD:\<T\>:(T):java.util.List\<T\> (m)]\l}"];
Node_75 [shape=record,label="{75\:\ 0x005c|RETURN\l|0x005c: RETURN  (r2 I:java.util.List\<java.lang.String\>) \l}"];
MethodNode[shape=record,label="{private static final java.util.List\<java.lang.String\> kotlin.text.StringsKt__StringsKt.split$StringsKt__StringsKt((r7 I:java.lang.CharSequence A[D('$this$split' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[D('delimiter' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10 I:int A[D('limit' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:71:0x003f \-\> B:66:0x0020, CROSS_EDGE: B:69:0x0039 \-\> B:72:0x0041, CROSS_EDGE: B:67:0x0031 \-\> B:70:0x003b, CROSS_EDGE: B:63:0x0017 \-\> B:65:0x001d, CROSS_EDGE: B:59:0x000f \-\> B:62:0x0013, CROSS_EDGE: B:75:0x005c \-\> B:53:?, CROSS_EDGE: B:55:0x0009 \-\> B:74:0x0054\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0013\-0x0054: r3 'isLimited' Z\l  0x0020\-0x0054: r4 'result' Ljava\/util\/ArrayList;\l  0x0004\-0x005c: r0 'currentOffset' I\l  0x0008\-0x005c: r1 'nextIndex' I\l  \-1 \-0x005c: r7 '$this$split' Ljava\/lang\/CharSequence;\l  \-1 \-0x005c: r8 'delimiter' Ljava\/lang\/String;\l  \-1 \-0x005c: r9 'ignoreCase' Z\l  \-1 \-0x005c: r10 'limit' I\lSIGNATURE: (Ljava\/lang\/CharSequence;Ljava\/lang\/String;ZI)Ljava\/util\/List\<Ljava\/lang\/String;\>;\l}"];
MethodNode -> Node_52;Node_52 -> Node_54;
Node_54 -> Node_55;
Node_55 -> Node_56[style=dashed];
Node_55 -> Node_74;
Node_56 -> Node_57;
Node_57 -> Node_59;
Node_57 -> Node_74[style=dashed];
Node_59 -> Node_61;
Node_59 -> Node_62[style=dashed];
Node_61 -> Node_62;
Node_62 -> Node_63;
Node_63 -> Node_64[style=dashed];
Node_63 -> Node_65;
Node_64 -> Node_65;
Node_65 -> Node_66;
Node_66 -> Node_67;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_70;
Node_68 -> Node_69;
Node_69 -> Node_70[style=dashed];
Node_69 -> Node_76;
Node_76 -> Node_72;
Node_72 -> Node_73;
Node_73 -> Node_53;
Node_70 -> Node_71;
Node_71 -> Node_66;
Node_71 -> Node_77[style=dashed];
Node_77 -> Node_72;
Node_74 -> Node_75;
Node_75 -> Node_53;
}

