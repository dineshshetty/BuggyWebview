digraph "CFG forkotlin.text.StringsKt__StringsKt.contentEqualsImpl(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;)Z" {
subgraph cluster_Region_158123591 {
label = "R(1:(2:(1:6)|(1:(2:(1:10)|(1:(2:(1:25)|(3:16|(1:(2:(1:22)|(1:20)))|24)))))))";
node [shape=record,color=blue];
subgraph cluster_Region_85922954 {
label = "R(2:(1:6)|(1:(2:(1:10)|(1:(2:(1:25)|(3:16|(1:(2:(1:22)|(1:20)))|24))))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_769200096 {
label = "IF [B:57:0x0002, B:59:0x0006] THEN: R(1:6) ELSE: null";
node [shape=record,color=blue];
Node_57 [shape=record,label="{57\:\ 0x0002|if ((r6 instanceof java.lang.String) == true) goto L3\l}"];
Node_59 [shape=record,label="{59\:\ 0x0006|ADDED_TO_REGION\l|if ((r7 instanceof java.lang.String) == true) goto L5\l}"];
subgraph cluster_Region_2137497185 {
label = "R(1:6)";
node [shape=record,color=blue];
Node_61 [shape=record,label="{61\:\ 0x000c|RETURN\l|return kotlin.jvm.internal.Intrinsics.areEqual(r6, r7)\l}"];
}
}
subgraph cluster_Region_274080052 {
label = "R(1:(2:(1:10)|(1:(2:(1:25)|(3:16|(1:(2:(1:22)|(1:20)))|24)))))";
node [shape=record,color=blue];
subgraph cluster_Region_1838206192 {
label = "R(2:(1:10)|(1:(2:(1:25)|(3:16|(1:(2:(1:22)|(1:20)))|24))))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_148076717 {
label = "IF [B:63:0x000e] THEN: R(1:10) ELSE: null";
node [shape=record,color=blue];
Node_63 [shape=record,label="{63\:\ 0x000e|if (r6 == r7) goto L10\l}"];
subgraph cluster_Region_1266973504 {
label = "R(1:10)";
node [shape=record,color=blue];
Node_64 [shape=record,label="{64\:\ 0x0010|RETURN\l|return true\l}"];
}
}
subgraph cluster_Region_1794817157 {
label = "R(1:(2:(1:25)|(3:16|(1:(2:(1:22)|(1:20)))|24)))";
node [shape=record,color=blue];
subgraph cluster_Region_23468646 {
label = "R(2:(1:25)|(3:16|(1:(2:(1:22)|(1:20)))|24))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_316869879 {
label = "IF [B:66:0x0012, B:67:0x0014, B:69:0x001e] THEN: R(1:25) ELSE: null";
node [shape=record,color=blue];
Node_66 [shape=record,label="{66\:\ 0x0012|if (r6 == null) goto L25\l}"];
Node_67 [shape=record,label="{67\:\ 0x0014|ADDED_TO_REGION\l|if (r7 == null) goto L25\l}"];
Node_69 [shape=record,label="{69\:\ 0x001e|ADDED_TO_REGION\l|if (r6.length() != r7.length()) goto L25\l}"];
subgraph cluster_Region_2052402064 {
label = "R(1:25)";
node [shape=record,color=blue];
Node_78 [shape=record,label="{78\:\ 0x0037|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_2038960975 {
label = "R(3:16|(1:(2:(1:22)|(1:20)))|24)";
node [shape=record,color=blue];
Node_71 [shape=record,label="{71\:\ 0x0021|int r2 = 0\lint int r3 = r6.length()\l}"];
subgraph cluster_LoopRegion_1307294646 {
label = "LOOP:0: (1:(2:(1:22)|(1:20)))";
node [shape=record,color=blue];
Node_72 [shape=record,label="{72\:\ 0x0026|LOOP_START\lLOOP:0: B:72:0x0026\-\>B:76:0x0033\lPHI: r2 \l  PHI: (r2v2 'i' int) = (r2v1 'i' int), (r2v3 'i' int) binds: [B:71:0x0021, B:76:0x0033] A[DONT_GENERATE, DONT_INLINE]\l|if (r2 \< r3) goto L18\l}"];
subgraph cluster_Region_1165278923 {
label = "R(1:(2:(1:22)|(1:20)))";
node [shape=record,color=blue];
subgraph cluster_Region_1953511721 {
label = "R(2:(1:22)|(1:20))";
node [shape=record,color=blue];
subgraph cluster_IfRegion_1478894425 {
label = "IF [B:74:0x0030] THEN: R(1:22) ELSE: null";
node [shape=record,color=blue];
Node_74 [shape=record,label="{74\:\ 0x0030|if (r6.charAt(r2) != r7.charAt(r2)) goto L21\l}"];
subgraph cluster_Region_2130577380 {
label = "R(1:22)";
node [shape=record,color=blue];
Node_75 [shape=record,label="{75\:\ 0x0032|RETURN\l|return false\l}"];
}
}
subgraph cluster_Region_1673405575 {
label = "R(1:20)";
node [shape=record,color=blue];
Node_76 [shape=record,label="{76\:\ 0x0033|LOOP_END\lLOOP:0: B:72:0x0026\-\>B:76:0x0033\l|r2++\l}"];
}
}
}
}
Node_77 [shape=record,label="{77\:\ 0x0036|RETURN\l|return true\l}"];
}
}
}
}
}
}
}
Node_54 [shape=record,color=red,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_56 [shape=record,color=red,label="{56\:\ 0x0000}"];
Node_58 [shape=record,color=red,label="{58\:\ 0x0004}"];
Node_60 [shape=record,color=red,label="{60\:\ 0x0008}"];
Node_55 [shape=record,color=red,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_62 [shape=record,color=red,label="{62\:\ 0x000d}"];
Node_65 [shape=record,color=red,label="{65\:\ 0x0011}"];
Node_68 [shape=record,color=red,label="{68\:\ 0x0016}"];
Node_73 [shape=record,color=red,label="{73\:\ 0x0028}"];
Node_79 [shape=record,color=red,label="{79\:\ 0x0032|SYNTHETIC\l}"];
Node_80 [shape=record,color=red,label="{80\:\ 0x0036|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.contentEqualsImpl((r6v0 '$this$contentEqualsImpl' java.lang.CharSequence A[D('$this$contentEqualsImpl' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'other' java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:64:0x0010 \-\> B:55:?, CROSS_EDGE: B:75:0x0032 \-\> B:55:?, BACK_EDGE: B:76:0x0033 \-\> B:72:0x0026, CROSS_EDGE: B:77:0x0036 \-\> B:55:?, CROSS_EDGE: B:78:0x0037 \-\> B:55:?, CROSS_EDGE: B:67:0x0014 \-\> B:78:0x0037, CROSS_EDGE: B:66:0x0012 \-\> B:78:0x0037, CROSS_EDGE: B:57:0x0002 \-\> B:62:0x000d\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_54;Node_57 -> Node_58;
Node_57 -> Node_62[style=dashed];
Node_59 -> Node_60;
Node_59 -> Node_62[style=dashed];
Node_61 -> Node_55;
Node_63 -> Node_64;
Node_63 -> Node_65[style=dashed];
Node_64 -> Node_55;
Node_66 -> Node_67[style=dashed];
Node_66 -> Node_78;
Node_67 -> Node_68[style=dashed];
Node_67 -> Node_78;
Node_69 -> Node_71[style=dashed];
Node_69 -> Node_78;
Node_78 -> Node_55;
Node_71 -> Node_72;
Node_72 -> Node_73;
Node_72 -> Node_80[style=dashed];
Node_74 -> Node_76[style=dashed];
Node_74 -> Node_79;
Node_75 -> Node_55;
Node_76 -> Node_72;
Node_77 -> Node_55;
Node_54 -> Node_56;
Node_56 -> Node_57;
Node_58 -> Node_59;
Node_60 -> Node_61;
Node_62 -> Node_63;
Node_65 -> Node_66;
Node_68 -> Node_69;
Node_73 -> Node_74;
Node_79 -> Node_75;
Node_80 -> Node_77;
}

