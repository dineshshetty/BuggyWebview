digraph "CFG forkotlin.text.StringsKt__StringsKt.substringBeforeLast(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
Node_16 [shape=record,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_18 [shape=record,label="{18\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r7 I:java.lang.Object A[D('$this$substringBeforeLast' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"delimiter\" \l0x0007: INVOKE  (r8 I:java.lang.Object A[D('delimiter' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST_STR  (r0 I:java.lang.String) =  \"missingDelimiterValue\" \l0x000c: INVOKE  (r9 I:java.lang.Object A[D('missingDelimiterValue' java.lang.String)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000f: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r7 I:??[OBJECT, ARRAY] A[D('$this$substringBeforeLast' java.lang.String)])  (LINE:475)\l0x0010: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l0x0012: CONST  (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0013: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: CONST  (r5 I:??[int, float, short, byte, char]) = (6 ??[int, float, short, byte, char]) \l0x0015: CONST  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('delimiter' java.lang.String)]) \l0x0017: INVOKE  (r0 I:int) = (r1 I:java.lang.CharSequence), (r2 I:java.lang.String), (r3 I:int), (r4 I:boolean), (r5 I:int), (r6 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.lastIndexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int (m)]\l0x001b: CONST  (r1 I:??[int, float, short, byte, char]) = (\-1 ??[int, float, short, byte, char])  (LINE:476)\l}"];
Node_19 [shape=record,label="{19\:\ 0x001c|0x001c: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) != (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:21:0x0020 \l}"];
Node_20 [shape=record,label="{20\:\ 0x001e|0x001e: MOVE  (r1 I:??[OBJECT, ARRAY]) = (r9 I:??[OBJECT, ARRAY] A[D('missingDelimiterValue' java.lang.String)]) \l}"];
Node_23 [shape=record,label="{23\:\ ?|SYNTHETIC\lRETURN\l|0x002a: RETURN  (r1 I:java.lang.String) A[SYNTHETIC]\l}"];
Node_17 [shape=record,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,label="{21\:\ 0x0020|0x0020: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0021: INVOKE  (r1 I:java.lang.String) = (r7 I:java.lang.String A[D('$this$substringBeforeLast' java.lang.String)]), (r1 I:int), (r0 I:int A[D('index' int)]) type: VIRTUAL call: java.lang.String.substring(int, int):java.lang.String A[MD:(int, int):java.lang.String (c)]\l0x0025: CONST_STR  (r2 I:java.lang.String) =  \"this as java.lang.Stringâ€¦ing(startIndex, endIndex)\" \l0x0027: INVOKE  (r1 I:java.lang.Object), (r2 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l}"];
Node_22 [shape=record,label="{22\:\ 0x002a|RETURN\lORIG_RETURN\l|0x002a: RETURN  (r1 I:java.lang.String) \l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.substringBeforeLast((r7 I:java.lang.String A[D('$this$substringBeforeLast' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8 I:java.lang.String A[D('delimiter' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9 I:java.lang.String A[D('missingDelimiterValue' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0020 \-\> B:22:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x002a: r0 'index' I\l  \-1 \-0x002a: r7 '$this$substringBeforeLast' Ljava\/lang\/String;\l  \-1 \-0x002a: r8 'delimiter' Ljava\/lang\/String;\l  \-1 \-0x002a: r9 'missingDelimiterValue' Ljava\/lang\/String;\l}"];
MethodNode -> Node_16;Node_16 -> Node_18;
Node_18 -> Node_19;
Node_19 -> Node_20[style=dashed];
Node_19 -> Node_21;
Node_20 -> Node_23;
Node_23 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_17;
}

