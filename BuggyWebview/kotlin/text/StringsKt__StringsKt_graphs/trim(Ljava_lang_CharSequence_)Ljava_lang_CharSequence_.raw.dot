digraph "CFG forkotlin.text.StringsKt__StringsKt.trim(Ljava\/lang\/CharSequence;)Ljava\/lang\/CharSequence;" {
Node_54 [shape=record,label="{54\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_56 [shape=record,label="{56\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r8 I:java.lang.Object A[D('$this$trim' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r8 I:??[OBJECT, ARRAY] A[D('$this$trim' java.lang.CharSequence)])  (LINE:176)\l0x0006: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0007: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1586)\l0x0008: INVOKE  (r3 I:int) = (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:1587)\l0x000c: ARITH  (r3 I:int) = (r3 I:int) + (\-1 int) \l0x000e: CONST  (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1588)\l}"];
Node_57 [shape=record,label="{57\:\ 0x000f|LOOP_START\lLOOP:0: B:57:0x000f\-\>B:77:0x000f\l|0x000f: IF  (r2 I:??[int, byte, short, char] A[D('startIndex$iv' int)]) \> (r3 I:??[int, byte, short, char] A[D('endIndex$iv' int)])  \-\> B:72:0x002f  (LINE:1590)\l}"];
Node_58 [shape=record,label="{58\:\ 0x0011|0x0011: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:60:0x0015  (LINE:1591)\l}"];
Node_59 [shape=record,label="{59\:\ 0x0013|0x0013: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('startIndex$iv' int)]) \l}"];
Node_61 [shape=record,label="{61\:\ 0x0016|0x0016: INVOKE  (r6 I:char) = (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)]), (r5 I:int A[D('index$iv' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:1592)\l0x001a: CONST  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x001b: INVOKE  (r6 I:boolean A[D('p0' char)]) = (r6 I:char A[D('p0' char)]) type: STATIC call: kotlin.text.CharsKt.isWhitespace(char):boolean A[MD:(char):boolean (m)] (LINE:176)\l}"];
Node_62 [shape=record,label="{62\:\ 0x001f|0x001f: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('startFound$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:73:0x0028  (LINE:1594)\l}"];
Node_73 [shape=record,label="{73\:\ 0x0028|SYNTHETIC\l}"];
Node_66 [shape=record,label="{66\:\ 0x0028|0x0028: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:68:0x002b  (LINE:1600)\l}"];
Node_68 [shape=record,label="{68\:\ 0x002b|0x002b: ARITH  (r3 I:int) = (r3 I:int A[D('endIndex$iv' int)]) + (\-1 int) \l}"];
Node_78 [shape=record,label="{78\:\ 0x000f|SYNTHETIC\l}"];
Node_77 [shape=record,label="{77\:\ 0x000f|LOOP_END\lSYNTHETIC\lLOOP:0: B:57:0x000f\-\>B:77:0x000f\l}"];
Node_75 [shape=record,label="{75\:\ 0x002f|SYNTHETIC\l}"];
Node_69 [shape=record,label="{69\:\ 0x002f|0x002f: ARITH  (r5 I:int) = (r3 I:int A[D('endIndex$iv' int)]) + (1 int)  (LINE:1607)\l0x0031: INVOKE  (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)]) = \l  (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)])\l  (r2 I:int A[D('startIndex$iv' int)])\l  (r5 I:int)\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_70 [shape=record,label="{70\:\ 0x0035|RETURN\l|0x0035: RETURN  (r0 I:java.lang.CharSequence A[D('$this$trim$iv' java.lang.CharSequence)])  (LINE:176)\l}"];
Node_55 [shape=record,label="{55\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_76 [shape=record,label="{76\:\ 0x0021|SYNTHETIC\l}"];
Node_63 [shape=record,label="{63\:\ 0x0021|0x0021: IF  (r6 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('match$iv' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:71:0x0025  (LINE:1595)\l}"];
Node_71 [shape=record,label="{71\:\ 0x0025|SYNTHETIC\l}"];
Node_65 [shape=record,label="{65\:\ 0x0025|0x0025: ARITH  (r2 I:int) = (r2 I:int A[D('startIndex$iv' int)]) + (1 int) \l}"];
Node_79 [shape=record,label="{79\:\ 0x000f|SYNTHETIC\l}"];
Node_74 [shape=record,label="{74\:\ 0x0023|SYNTHETIC\l}"];
Node_64 [shape=record,label="{64\:\ 0x0023|0x0023: CONST  (r4 I:??[boolean, int, float, short, byte, char] A[D('startFound$iv' boolean)]) = (1 ??[boolean, int, float, short, byte, char])  (LINE:1596)\l}"];
Node_80 [shape=record,label="{80\:\ 0x000f|SYNTHETIC\l}"];
Node_60 [shape=record,label="{60\:\ 0x0015|0x0015: MOVE  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('endIndex$iv' int)]) \l}"];
Node_72 [shape=record,label="{72\:\ 0x002f|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trim((r8 I:java.lang.CharSequence A[D('$this$trim' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:64:0x0023 \-\> B:57:0x000f, BACK_EDGE: B:65:0x0025 \-\> B:57:0x000f, BACK_EDGE: B:68:0x002b \-\> B:57:0x000f, CROSS_EDGE: B:60:0x0015 \-\> B:61:0x0016, CROSS_EDGE: B:57:0x000f \-\> B:69:0x002f\lINLINE_NOT_NEEDED\lDebug Info:\l  0x001b\-0x001f: r7 '$i$a$\-trim\-StringsKt__StringsKt$trim$3' I\l  0x001a\-0x001f: r6 'p0' C\l  0x0016\-0x002e: r5 'index$iv' I\l  0x001f\-0x002e: r6 'match$iv' Z\l  0x0006\-0x0035: r0 '$this$trim$iv' Ljava\/lang\/CharSequence;\l  0x0007\-0x0035: r1 '$i$f$trim' I\l  0x0008\-0x0035: r2 'startIndex$iv' I\l  0x000e\-0x0035: r3 'endIndex$iv' I\l  0x000f\-0x0035: r4 'startFound$iv' Z\l  \-1 \-0x0035: r8 '$this$trim' Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_54;Node_54 -> Node_56;
Node_56 -> Node_57;
Node_57 -> Node_58[style=dashed];
Node_57 -> Node_72;
Node_58 -> Node_59[style=dashed];
Node_58 -> Node_60;
Node_59 -> Node_61;
Node_61 -> Node_62;
Node_62 -> Node_73;
Node_62 -> Node_76[style=dashed];
Node_73 -> Node_66;
Node_66 -> Node_68;
Node_66 -> Node_75[style=dashed];
Node_68 -> Node_78;
Node_78 -> Node_77;
Node_77 -> Node_57;
Node_75 -> Node_69;
Node_69 -> Node_70;
Node_70 -> Node_55;
Node_76 -> Node_63;
Node_63 -> Node_71;
Node_63 -> Node_74[style=dashed];
Node_71 -> Node_65;
Node_65 -> Node_79;
Node_79 -> Node_77;
Node_74 -> Node_64;
Node_64 -> Node_80;
Node_80 -> Node_77;
Node_60 -> Node_61;
Node_72 -> Node_69;
}

