digraph "CFG forkotlin.text.StringsKt__StringsKt.hasSurrogatePairAt(Ljava\/lang\/CharSequence;I)Z" {
Node_28 [shape=record,label="{28\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_30 [shape=record,label="{30\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r3 I:java.lang.Object A[D('$this$hasSurrogatePairAt' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: NEW_INSTANCE  (r0 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:385)\l0x0007: INVOKE  (r1 I:int) = (r3 I:java.lang.CharSequence A[D('$this$hasSurrogatePairAt' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x000b: ARITH  (r1 I:int) = (r1 I:int) + (\-2 int) \l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000e: INVOKE  (r0 I:kotlin.ranges.IntRange), (r2 I:int), (r1 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0011: INVOKE  (r0 I:boolean) = (r0 I:kotlin.ranges.IntRange), (r4 I:int A[D('index' int)]) type: VIRTUAL call: kotlin.ranges.IntRange.contains(int):boolean A[MD:(int):boolean (m)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0015|0x0015: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:39:? \l}"];
Node_32 [shape=record,label="{32\:\ 0x0017|0x0017: INVOKE  (r0 I:char) = (r3 I:java.lang.CharSequence A[D('$this$hasSurrogatePairAt' java.lang.CharSequence)]), (r4 I:int A[D('index' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:386)\l0x001b: INVOKE  (r0 I:boolean) = (r0 I:char) type: STATIC call: java.lang.Character.isHighSurrogate(char):boolean A[MD:(char):boolean (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x001f|0x001f: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:? \l}"];
Node_34 [shape=record,label="{34\:\ 0x0021|0x0021: ARITH  (r0 I:int) = (r4 I:int A[D('index' int)]) + (1 int)  (LINE:387)\l0x0023: INVOKE  (r0 I:char) = (r3 I:java.lang.CharSequence A[D('$this$hasSurrogatePairAt' java.lang.CharSequence)]), (r0 I:int) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0027: INVOKE  (r0 I:boolean) = (r0 I:char) type: STATIC call: java.lang.Character.isLowSurrogate(char):boolean A[MD:(char):boolean (c)]\l}"];
Node_35 [shape=record,label="{35\:\ 0x002b|0x002b: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:41:? \l}"];
Node_36 [shape=record,label="{36\:\ 0x002d|RETURN\lORIG_RETURN\l|0x002d: CONST  (r2 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x0030: RETURN  (r2 I:boolean)  (LINE:385)\l}"];
Node_29 [shape=record,label="{29\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_41 [shape=record,label="{41\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r2 I:boolean) A[SYNTHETIC] (LINE:385)\l}"];
Node_40 [shape=record,label="{40\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r2 I:boolean) A[SYNTHETIC] (LINE:385)\l}"];
Node_39 [shape=record,label="{39\:\ ?|SYNTHETIC\lRETURN\l|0x0030: RETURN  (r2 I:boolean) A[SYNTHETIC] (LINE:385)\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.hasSurrogatePairAt((r3 I:java.lang.CharSequence A[D('$this$hasSurrogatePairAt' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r4 I:int A[D('index' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:35:0x002b \-\> B:38:0x0030, CROSS_EDGE: B:33:0x001f \-\> B:38:0x0030, CROSS_EDGE: B:31:0x0015 \-\> B:38:0x0030\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0030: r3 '$this$hasSurrogatePairAt' Ljava\/lang\/CharSequence;\l  \-1 \-0x0030: r4 'index' I\l}"];
MethodNode -> Node_28;Node_28 -> Node_30;
Node_30 -> Node_31;
Node_31 -> Node_32[style=dashed];
Node_31 -> Node_39;
Node_32 -> Node_33;
Node_33 -> Node_34[style=dashed];
Node_33 -> Node_40;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_41;
Node_36 -> Node_29;
Node_41 -> Node_29;
Node_40 -> Node_29;
Node_39 -> Node_29;
}

