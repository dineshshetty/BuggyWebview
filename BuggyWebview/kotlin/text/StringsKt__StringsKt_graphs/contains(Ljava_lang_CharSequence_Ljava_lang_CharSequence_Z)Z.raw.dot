digraph "CFG forkotlin.text.StringsKt__StringsKt.contains(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Z" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r11 I:java.lang.Object A[D('$this$contains' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r12 I:java.lang.Object A[D('other' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INSTANCE_OF  (r0 I:boolean) = (r12 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) java.lang.String  (LINE:1145)\l0x000c: CONST  (r1 I:??[boolean, int, float, short, byte, char]) = (1 ??[boolean, int, float, short, byte, char]) \l0x000d: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l}"];
Node_35 [shape=record,label="{35\:\ 0x000e|0x000e: IF  (r0 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:40:0x0021 \l}"];
Node_36 [shape=record,label="{36\:\ 0x0010|0x0010: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)])  (LINE:1146)\l0x0011: CHECK_CAST (r4 I:java.lang.String) = (java.lang.String) (r4 I:??[OBJECT, ARRAY]) \l0x0013: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0014: CONST  (r7 I:??[int, float, short, byte, char]) = (2 ??[int, float, short, byte, char]) \l0x0015: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0016: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('$this$contains' java.lang.CharSequence)]) \l0x0017: MOVE  (r6 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x0018: INVOKE  (r0 I:int) = (r3 I:java.lang.CharSequence), (r4 I:java.lang.String), (r5 I:int), (r6 I:boolean), (r7 I:int), (r8 I:java.lang.Object) type: STATIC call: kotlin.text.StringsKt.indexOf$default(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, java.lang.String, int, boolean, int, java.lang.Object):int (m)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x001c|0x001c: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:39:0x001f \l}"];
Node_39 [shape=record,label="{39\:\ 0x001f|SYNTHETIC\lRETURN\l|0x001f: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0035: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_46 [shape=record,label="{46\:\ ?|SYNTHETIC\lRETURN\l|0x0035: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0021|0x0021: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:1148)\l0x0022: INVOKE  (r6 I:int) = (r11 I:java.lang.CharSequence A[D('$this$contains' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0026: CONST  (r8 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0027: CONST  (r9 I:??[int, float, short, byte, char]) = (16 ??[int, float, short, byte, char]) \l0x0029: CONST  (r10 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x002a: MOVE  (r3 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('$this$contains' java.lang.CharSequence)]) \l0x002b: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r12 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) \l0x002c: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r13 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x002d: INVOKE  (r0 I:int) = \l  (r3 I:java.lang.CharSequence)\l  (r4 I:java.lang.CharSequence)\l  (r5 I:int)\l  (r6 I:int)\l  (r7 I:boolean)\l  (r8 I:boolean)\l  (r9 I:int)\l  (r10 I:java.lang.Object)\l type: STATIC call: kotlin.text.StringsKt__StringsKt.indexOf$StringsKt__StringsKt$default(java.lang.CharSequence, java.lang.CharSequence, int, int, boolean, boolean, int, java.lang.Object):int A[MD:(java.lang.CharSequence, java.lang.CharSequence, int, int, boolean, boolean, int, java.lang.Object):int (m)]\l}"];
Node_41 [shape=record,label="{41\:\ 0x0031|0x0031: IF  (r0 I:??[int, byte, short, char]) \< (0 ??[int, byte, short, char])  \-\> B:43:0x0034 \l}"];
Node_43 [shape=record,label="{43\:\ 0x0034|RETURN\lORIG_RETURN\l|0x0034: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0035: RETURN  (r1 I:boolean) \l}"];
Node_47 [shape=record,label="{47\:\ ?|SYNTHETIC\lRETURN\l|0x0035: RETURN  (r1 I:boolean) A[SYNTHETIC]\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.contains((r11 I:java.lang.CharSequence A[D('$this$contains' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:37:0x001c \-\> B:44:0x0035, CROSS_EDGE: B:43:0x0034 \-\> B:44:0x0035, CROSS_EDGE: B:41:0x0031 \-\> B:44:0x0035\lINLINE_NOT_NEEDED\lDebug Info:\l  \-1 \-0x0035: r11 '$this$contains' Ljava\/lang\/CharSequence;\l  \-1 \-0x0035: r12 'other' Ljava\/lang\/CharSequence;\l  \-1 \-0x0035: r13 'ignoreCase' Z\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_40;
Node_36 -> Node_37;
Node_37 -> Node_39;
Node_37 -> Node_46[style=dashed];
Node_39 -> Node_33;
Node_46 -> Node_33;
Node_40 -> Node_41;
Node_41 -> Node_43;
Node_41 -> Node_47[style=dashed];
Node_43 -> Node_33;
Node_47 -> Node_33;
}

