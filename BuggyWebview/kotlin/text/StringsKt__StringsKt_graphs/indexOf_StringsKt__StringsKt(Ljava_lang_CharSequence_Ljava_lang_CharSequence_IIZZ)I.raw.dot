digraph "CFG forkotlin.text.StringsKt__StringsKt.indexOf$StringsKt__StringsKt(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;IIZZ)I" {
Node_86 [shape=record,label="{86\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_88 [shape=record,label="{88\:\ 0x0000|0x0000: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:973)\l}"];
Node_89 [shape=record,label="{89\:\ 0x0001|0x0001: IF  (r15 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('last' boolean)]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:91:0x0017 \l}"];
Node_90 [shape=record,label="{90\:\ 0x0003|0x0003: NEW_INSTANCE  (r1 I:kotlin.ranges.IntRange) =  kotlin.ranges.IntRange  (LINE:974)\l0x0005: INVOKE  (r0 I:int) = (r12 I:int A[D('startIndex' int)]), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0009: INVOKE  (r2 I:int) = (r10 I:java.lang.CharSequence A[D('$this$indexOf' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x000d: INVOKE  (r2 I:int) = (r13 I:int A[D('endIndex' int)]), (r2 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l0x0011: INVOKE  (r1 I:kotlin.ranges.IntRange), (r0 I:int), (r2 I:int) type: DIRECT call: kotlin.ranges.IntRange.\<init\>(int, int):void A[MD:(int, int):void (m)]\l0x0014: CHECK_CAST (r1 I:kotlin.ranges.IntProgression) = (kotlin.ranges.IntProgression) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_92 [shape=record,label="{92\:\ 0x0027|0x0027: MOVE  (r0 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY])  (LINE:973)\l0x0028: INSTANCE_OF  (r1 I:boolean) = (r10 I:??[OBJECT, ARRAY] A[D('$this$indexOf' java.lang.CharSequence)]) java.lang.String  (LINE:978)\l}"];
Node_93 [shape=record,label="{93\:\ 0x002a|0x002a: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:106:0x005c \l}"];
Node_94 [shape=record,label="{94\:\ 0x002c|0x002c: INSTANCE_OF  (r1 I:boolean) = (r11 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) java.lang.String \l}"];
Node_95 [shape=record,label="{95\:\ 0x002e|0x002e: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:106:0x005c \l}"];
Node_96 [shape=record,label="{96\:\ 0x0030|0x0030: INVOKE  (r1 I:int) = (r0 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getFirst():int A[MD:():int (m)] (LINE:979)\l0x0034: INVOKE  (r2 I:int) = (r0 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getLast():int A[MD:():int (m)]\l0x0038: INVOKE  (r3 I:int) = (r0 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getStep():int A[MD:():int (m)]\l}"];
Node_97 [shape=record,label="{97\:\ 0x003c|0x003c: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:99:0x0040 \l}"];
Node_98 [shape=record,label="{98\:\ 0x003e|0x003e: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \<= (r2 I:??[int, byte, short, char])  \-\> B:120:0x0044 \l}"];
Node_120 [shape=record,label="{120\:\ 0x0044|SYNTHETIC\l}"];
Node_101 [shape=record,label="{101\:\ 0x0044|LOOP_START\lLOOP:0: B:101:0x0044\-\>B:105:0x005a\l|0x0044: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)])  (LINE:980)\l0x0045: CHECK_CAST (r4 I:java.lang.String) = (java.lang.String) (r4 I:??[OBJECT, ARRAY]) \l0x0047: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x0048: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$indexOf' java.lang.CharSequence)]) \l0x0049: CHECK_CAST (r6 I:java.lang.String) = (java.lang.String) (r6 I:??[OBJECT, ARRAY]) \l0x004b: INVOKE  (r8 I:int) = (r11 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x004f: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l0x0050: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x0051: INVOKE  (r4 I:boolean) = (r4 I:java.lang.String), (r5 I:int), (r6 I:java.lang.String), (r7 I:int), (r8 I:int), (r9 I:boolean) type: STATIC call: kotlin.text.StringsKt.regionMatches(java.lang.String, int, java.lang.String, int, int, boolean):boolean A[MD:(java.lang.String, int, java.lang.String, int, int, boolean):boolean (m)]\l}"];
Node_102 [shape=record,label="{102\:\ 0x0055|0x0055: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:104:0x0058 \l}"];
Node_104 [shape=record,label="{104\:\ 0x0058|0x0058: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:119:0x0084  (LINE:979)\l}"];
Node_105 [shape=record,label="{105\:\ 0x005a|LOOP_END\lLOOP:0: B:101:0x0044\-\>B:105:0x005a\l|0x005a: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (r3 I:int) \l}"];
Node_119 [shape=record,label="{119\:\ 0x0084|SYNTHETIC\l}"];
Node_127 [shape=record,label="{127\:\ ?|SYNTHETIC\lRETURN\l|0x0084: CONST  (r1 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char]) A[SYNTHETIC] (LINE:989)\l0x0085: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_87 [shape=record,label="{87\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_118 [shape=record,label="{118\:\ 0x0057|SYNTHETIC\l}"];
Node_103 [shape=record,label="{103\:\ 0x0057|RETURN\l|0x0057: RETURN  (r1 I:int A[D('index' int)])  (LINE:981)\l}"];
Node_99 [shape=record,label="{99\:\ 0x0040|0x0040: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:116:0x0084 \l}"];
Node_100 [shape=record,label="{100\:\ 0x0042|0x0042: IF  (r2 I:??[int, byte, short, char]) \> (r1 I:??[int, byte, short, char] A[D('index' int)])  \-\> B:124:? \l}"];
Node_124 [shape=record,label="{124\:\ ?|SYNTHETIC\lRETURN\l|0x0084: CONST  (r1 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char]) A[SYNTHETIC] (LINE:989)\l0x0085: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_116 [shape=record,label="{116\:\ 0x0084|RETURN\lORIG_RETURN\l|0x0084: CONST  (r1 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char])  (LINE:989)\l0x0085: RETURN  (r1 I:int) \l}"];
Node_106 [shape=record,label="{106\:\ 0x005c|0x005c: INVOKE  (r1 I:int) = (r0 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getFirst():int A[MD:():int (m)] (LINE:984)\l0x0060: INVOKE  (r2 I:int) = (r0 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getLast():int A[MD:():int (m)]\l0x0064: INVOKE  (r3 I:int) = (r0 I:kotlin.ranges.IntProgression A[D('indices' kotlin.ranges.IntProgression)]) type: VIRTUAL call: kotlin.ranges.IntProgression.getStep():int A[MD:():int (m)]\l}"];
Node_107 [shape=record,label="{107\:\ 0x0068|0x0068: IF  (r3 I:??[int, byte, short, char]) \<= (0 ??[int, byte, short, char])  \-\> B:109:0x006c \l}"];
Node_108 [shape=record,label="{108\:\ 0x006a|0x006a: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \<= (r2 I:??[int, byte, short, char])  \-\> B:123:0x0070 \l}"];
Node_123 [shape=record,label="{123\:\ 0x0070|SYNTHETIC\l}"];
Node_111 [shape=record,label="{111\:\ 0x0070|LOOP_START\lLOOP:1: B:111:0x0070\-\>B:115:0x0082\l|0x0070: CONST  (r5 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:985)\l0x0071: INVOKE  (r8 I:int) = (r11 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0075: MOVE  (r4 I:??[OBJECT, ARRAY]) = (r11 I:??[OBJECT, ARRAY] A[D('other' java.lang.CharSequence)]) \l0x0076: MOVE  (r6 I:??[OBJECT, ARRAY]) = (r10 I:??[OBJECT, ARRAY] A[D('$this$indexOf' java.lang.CharSequence)]) \l0x0077: MOVE  (r7 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('index' int)]) \l0x0078: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r14 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('ignoreCase' boolean)]) \l0x0079: INVOKE  (r4 I:boolean) = (r4 I:java.lang.CharSequence), (r5 I:int), (r6 I:java.lang.CharSequence), (r7 I:int), (r8 I:int), (r9 I:boolean) type: STATIC call: kotlin.text.StringsKt.regionMatchesImpl(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean A[MD:(java.lang.CharSequence, int, java.lang.CharSequence, int, int, boolean):boolean (m)]\l}"];
Node_112 [shape=record,label="{112\:\ 0x007d|0x007d: IF  (r4 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:114:0x0080 \l}"];
Node_114 [shape=record,label="{114\:\ 0x0080|0x0080: IF  (r1 I:??[int, boolean, OBJECT, ARRAY, byte, short, char] A[D('index' int)]) == (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:121:0x0084  (LINE:984)\l}"];
Node_115 [shape=record,label="{115\:\ 0x0082|LOOP_END\lLOOP:1: B:111:0x0070\-\>B:115:0x0082\l|0x0082: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (r3 I:int) \l}"];
Node_121 [shape=record,label="{121\:\ 0x0084|SYNTHETIC\l}"];
Node_128 [shape=record,label="{128\:\ ?|SYNTHETIC\lRETURN\l|0x0084: CONST  (r1 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char]) A[SYNTHETIC] (LINE:989)\l0x0085: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_122 [shape=record,label="{122\:\ 0x007f|SYNTHETIC\l}"];
Node_113 [shape=record,label="{113\:\ 0x007f|RETURN\l|0x007f: RETURN  (r1 I:int A[D('index' int)])  (LINE:986)\l}"];
Node_109 [shape=record,label="{109\:\ 0x006c|0x006c: IF  (r3 I:??[int, byte, short, char]) \>= (0 ??[int, byte, short, char])  \-\> B:125:? \l}"];
Node_110 [shape=record,label="{110\:\ 0x006e|0x006e: IF  (r2 I:??[int, byte, short, char]) \> (r1 I:??[int, byte, short, char] A[D('index' int)])  \-\> B:126:? \l}"];
Node_126 [shape=record,label="{126\:\ ?|SYNTHETIC\lRETURN\l|0x0084: CONST  (r1 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char]) A[SYNTHETIC] (LINE:989)\l0x0085: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_125 [shape=record,label="{125\:\ ?|SYNTHETIC\lRETURN\l|0x0084: CONST  (r1 I:??[int, float, short, byte, char] A[D('index' int)]) = (\-1 ??[int, float, short, byte, char]) A[SYNTHETIC] (LINE:989)\l0x0085: RETURN  (r1 I:int) A[SYNTHETIC]\l}"];
Node_91 [shape=record,label="{91\:\ 0x0017|0x0017: INVOKE  (r1 I:int) = (r10 I:java.lang.CharSequence A[D('$this$indexOf' java.lang.CharSequence)]) type: STATIC call: kotlin.text.StringsKt.getLastIndex(java.lang.CharSequence):int A[MD:(java.lang.CharSequence):int (m)] (LINE:976)\l0x001b: INVOKE  (r1 I:int) = (r12 I:int A[D('startIndex' int)]), (r1 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtMost(int, int):int A[MD:(int, int):int (m)]\l0x001f: INVOKE  (r0 I:int) = (r13 I:int A[D('endIndex' int)]), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.coerceAtLeast(int, int):int A[MD:(int, int):int (m)]\l0x0023: INVOKE  (r1 I:kotlin.ranges.IntProgression) = (r1 I:int), (r0 I:int) type: STATIC call: kotlin.ranges.RangesKt.downTo(int, int):kotlin.ranges.IntProgression A[MD:(int, int):kotlin.ranges.IntProgression (m)]\l}"];
MethodNode[shape=record,label="{private static final int kotlin.text.StringsKt__StringsKt.indexOf$StringsKt__StringsKt((r10 I:java.lang.CharSequence A[D('$this$indexOf' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r11 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r12 I:int A[D('startIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r13 I:int A[D('endIndex' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r14 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r15 I:boolean A[D('last' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | METHOD_CANDIDATE_FOR_INLINE\lUSE_LINES_HINTS\lBACK_EDGE: B:105:0x005a \-\> B:101:0x0044, CROSS_EDGE: B:117:0x0085 \-\> B:87:?, CROSS_EDGE: B:100:0x0042 \-\> B:116:0x0084, CROSS_EDGE: B:99:0x0040 \-\> B:116:0x0084, CROSS_EDGE: B:98:0x003e \-\> B:101:0x0044, CROSS_EDGE: B:97:0x003c \-\> B:99:0x0040, CROSS_EDGE: B:113:0x007f \-\> B:87:?, BACK_EDGE: B:115:0x0082 \-\> B:111:0x0070, CROSS_EDGE: B:114:0x0080 \-\> B:116:0x0084, CROSS_EDGE: B:110:0x006e \-\> B:116:0x0084, CROSS_EDGE: B:109:0x006c \-\> B:116:0x0084, CROSS_EDGE: B:108:0x006a \-\> B:111:0x0070, CROSS_EDGE: B:107:0x0068 \-\> B:109:0x006c, CROSS_EDGE: B:93:0x002a \-\> B:106:0x005c, CROSS_EDGE: B:91:0x0017 \-\> B:92:0x0027\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0034\-0x005c: r1 'index' I\l  0x0060\-0x0084: r1 'index' I\l  0x0028\-0x0085: r0 'indices' Lkotlin\/ranges\/IntProgression;\l  \-1 \-0x0085: r10 '$this$indexOf' Ljava\/lang\/CharSequence;\l  \-1 \-0x0085: r11 'other' Ljava\/lang\/CharSequence;\l  \-1 \-0x0085: r12 'startIndex' I\l  \-1 \-0x0085: r13 'endIndex' I\l  \-1 \-0x0085: r14 'ignoreCase' Z\l  \-1 \-0x0085: r15 'last' Z\l}"];
MethodNode -> Node_86;Node_86 -> Node_88;
Node_88 -> Node_89;
Node_89 -> Node_90[style=dashed];
Node_89 -> Node_91;
Node_90 -> Node_92;
Node_92 -> Node_93;
Node_93 -> Node_94[style=dashed];
Node_93 -> Node_106;
Node_94 -> Node_95;
Node_95 -> Node_96[style=dashed];
Node_95 -> Node_106;
Node_96 -> Node_97;
Node_97 -> Node_98[style=dashed];
Node_97 -> Node_99;
Node_98 -> Node_99[style=dashed];
Node_98 -> Node_120;
Node_120 -> Node_101;
Node_101 -> Node_102;
Node_102 -> Node_104;
Node_102 -> Node_118[style=dashed];
Node_104 -> Node_105[style=dashed];
Node_104 -> Node_119;
Node_105 -> Node_101;
Node_119 -> Node_127;
Node_127 -> Node_87;
Node_118 -> Node_103;
Node_103 -> Node_87;
Node_99 -> Node_100[style=dashed];
Node_99 -> Node_116;
Node_100 -> Node_120[style=dashed];
Node_100 -> Node_124;
Node_124 -> Node_87;
Node_116 -> Node_87;
Node_106 -> Node_107;
Node_107 -> Node_108[style=dashed];
Node_107 -> Node_109;
Node_108 -> Node_109[style=dashed];
Node_108 -> Node_123;
Node_123 -> Node_111;
Node_111 -> Node_112;
Node_112 -> Node_114;
Node_112 -> Node_122[style=dashed];
Node_114 -> Node_115[style=dashed];
Node_114 -> Node_121;
Node_115 -> Node_111;
Node_121 -> Node_128;
Node_128 -> Node_87;
Node_122 -> Node_113;
Node_113 -> Node_87;
Node_109 -> Node_110[style=dashed];
Node_109 -> Node_125;
Node_110 -> Node_123[style=dashed];
Node_110 -> Node_126;
Node_126 -> Node_87;
Node_125 -> Node_87;
Node_91 -> Node_92;
}

