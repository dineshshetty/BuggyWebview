digraph "CFG forkotlin.text.StringsKt__StringsKt.trimStart(Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1;)Ljava\/lang\/CharSequence;" {
Node_26 [shape=record,label="{26\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_28 [shape=record,label="{28\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$trimStart' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"predicate\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('predicate' kotlin.jvm.functions.Function1)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: CONST  (r0 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) \l0x000b: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:113)\l0x000c: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('$this$trimStart' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l}"];
Node_29 [shape=record,label="{29\:\ 0x0010|LOOP_START\lLOOP:0: B:29:0x0010\-\>B:34:0x002f\l|0x0010: IF  (r1 I:??[int, byte, short, char] A[D('index' int)]) \>= (r2 I:??[int, byte, short, char])  \-\> B:37:0x0032 \l}"];
Node_30 [shape=record,label="{30\:\ 0x0012|0x0012: INVOKE  (r3 I:char) = (r4 I:java.lang.CharSequence A[D('$this$trimStart' java.lang.CharSequence)]), (r1 I:int A[D('index' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)] (LINE:114)\l0x0016: INVOKE  (r3 I:java.lang.Character) = (r3 I:char) type: STATIC call: java.lang.Character.valueOf(char):java.lang.Character A[MD:(char):java.lang.Character (c)]\l0x001a: INVOKE  (r3 I:java.lang.Object) = (r5 I:kotlin.jvm.functions.Function1 A[D('predicate' kotlin.jvm.functions.Function1)]), (r3 I:java.lang.Object) type: INTERFACE call: kotlin.jvm.functions.Function1.invoke(java.lang.Object):java.lang.Object A[MD:(P1):R (m)]\l0x001e: CHECK_CAST (r3 I:java.lang.Boolean) = (java.lang.Boolean) (r3 I:??[OBJECT, ARRAY]) \l0x0020: INVOKE  (r3 I:boolean) = (r3 I:java.lang.Boolean) type: VIRTUAL call: java.lang.Boolean.booleanValue():boolean A[MD:():boolean (c)]\l}"];
Node_31 [shape=record,label="{31\:\ 0x0024|0x0024: IF  (r3 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:34:0x002f \l}"];
Node_34 [shape=record,label="{34\:\ 0x002f|LOOP_END\lLOOP:0: B:29:0x0010\-\>B:34:0x002f\l|0x002f: ARITH  (r1 I:int) = (r1 I:int A[D('index' int)]) + (1 int)  (LINE:113)\l}"];
Node_38 [shape=record,label="{38\:\ 0x0026|SYNTHETIC\l}"];
Node_32 [shape=record,label="{32\:\ 0x0026|0x0026: INVOKE  (r2 I:int) = (r4 I:java.lang.CharSequence A[D('$this$trimStart' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:115)\l0x002a: INVOKE  (r2 I:java.lang.CharSequence) = (r4 I:java.lang.CharSequence A[D('$this$trimStart' java.lang.CharSequence)]), (r1 I:int A[D('index' int)]), (r2 I:int) type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l}"];
Node_33 [shape=record,label="{33\:\ 0x002e|RETURN\l|0x002e: RETURN  (r2 I:java.lang.CharSequence) \l}"];
Node_27 [shape=record,label="{27\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_37 [shape=record,label="{37\:\ 0x0032|SYNTHETIC\l}"];
Node_35 [shape=record,label="{35\:\ 0x0032|0x0032: CONST_STR  (r1 I:java.lang.String A[D('index' int)]) =  \"\"  (LINE:117)\l0x0034: CHECK_CAST (r1 I:java.lang.CharSequence) = (java.lang.CharSequence) (r1 I:??[OBJECT, ARRAY]) \l}"];
Node_36 [shape=record,label="{36\:\ 0x0036|RETURN\l|0x0036: RETURN  (r1 I:java.lang.CharSequence) \l}"];
MethodNode[shape=record,label="{public static final java.lang.CharSequence kotlin.text.StringsKt__StringsKt.trimStart((r4 I:java.lang.CharSequence A[D('$this$trimStart' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:kotlin.jvm.functions.Function1\<? super java.lang.Character, java.lang.Boolean\> A[D('predicate' kotlin.jvm.functions.Function1), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:34:0x002f \-\> B:29:0x0010, CROSS_EDGE: B:36:0x0036 \-\> B:27:?\lINLINE_NOT_NEEDED\lDebug Info:\l  0x000c\-0x0032: r1 'index' I\l  0x000b\-0x0036: r0 '$i$f$trimStart' I\l  \-1 \-0x0036: r4 '$this$trimStart' Ljava\/lang\/CharSequence;\l  \-1 \-0x0036: r5 'predicate' Lkotlin\/jvm\/functions\/Function1;\lSIGNATURE: (Ljava\/lang\/CharSequence;Lkotlin\/jvm\/functions\/Function1\<\-Ljava\/lang\/Character;Ljava\/lang\/Boolean;\>;)Ljava\/lang\/CharSequence;\l}"];
MethodNode -> Node_26;Node_26 -> Node_28;
Node_28 -> Node_29;
Node_29 -> Node_30[style=dashed];
Node_29 -> Node_37;
Node_30 -> Node_31;
Node_31 -> Node_34;
Node_31 -> Node_38[style=dashed];
Node_34 -> Node_29;
Node_38 -> Node_32;
Node_32 -> Node_33;
Node_33 -> Node_27;
Node_37 -> Node_35;
Node_35 -> Node_36;
Node_36 -> Node_27;
}

