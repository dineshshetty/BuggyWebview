digraph "CFG forkotlin.text.StringsKt__StringsKt.replaceBefore(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;)Ljava\/lang\/String;" {
subgraph cluster_Region_1203800768 {
label = "R(2:1|2)";
node [shape=record,color=blue];
Node_18 [shape=record,label="{18\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, \"delimiter\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, \"replacement\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, \"missingDelimiterValue\")\lint int r0 = kotlin.text.StringsKt.indexOf$default((java.lang.CharSequence) r7, r8, 0, false, 6, (java.lang.Object) null)\l}"];
Node_19 [shape=record,label="{19\:\ 0x0021|RETURN\l|return r0 == \-1 ? r10 : kotlin.text.StringsKt.replaceRange((java.lang.CharSequence) r7, 0, r0, (java.lang.CharSequence) r9).toString()\l}"];
}
Node_16 [shape=record,color=red,label="{16\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_20 [shape=record,color=red,label="{20\:\ 0x0023}"];
Node_23 [shape=record,color=red,label="{23\:\ ?|SYNTHETIC\l}"];
Node_17 [shape=record,color=red,label="{17\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_21 [shape=record,color=red,label="{21\:\ 0x0025}"];
Node_22 [shape=record,color=red,label="{22\:\ 0x0034|ORIG_RETURN\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.replaceBefore((r7v0 '$this$replaceBefore' java.lang.String A[D('$this$replaceBefore' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'delimiter' java.lang.String A[D('delimiter' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'replacement' java.lang.String A[D('replacement' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r10v0 'missingDelimiterValue' java.lang.String A[D('missingDelimiterValue' java.lang.String), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lCROSS_EDGE: B:21:0x0025 \-\> B:22:0x0034\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_16;Node_18 -> Node_19;
Node_19 -> Node_20;
Node_19 -> Node_21;
Node_16 -> Node_18;
Node_20 -> Node_23;
Node_23 -> Node_17;
Node_21 -> Node_22;
Node_22 -> Node_17;
}

