digraph "CFG forkotlin.text.StringsKt__StringsKt.regionMatchesImpl(Ljava\/lang\/CharSequence;ILjava\/lang\/CharSequence;IIZ)Z" {
Node_42 [shape=record,label="{42\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_44 [shape=record,label="{44\:\ 0x0000|kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, \"\<this\>\")\lkotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, \"other\")\l}"];
Node_45 [shape=record,label="{45\:\ 0x000b|if (r7 \< 0) goto L18\l}"];
Node_46 [shape=record,label="{46\:\ 0x000d|if (r5 \< 0) goto L18\l}"];
Node_47 [shape=record,label="{47\:\ 0x000f}"];
Node_48 [shape=record,label="{48\:\ 0x0014|if (r5 \> (r4.length() \- r8)) goto L18\l}"];
Node_49 [shape=record,label="{49\:\ 0x0016}"];
Node_50 [shape=record,label="{50\:\ 0x001b|if (r7 \<= (r6.length() \- r8)) goto L8\l}"];
Node_52 [shape=record,label="{52\:\ 0x001e|r1 = 0\l}"];
Node_53 [shape=record,label="{53\:\ 0x001f|LOOP_START\lLOOP:0: B:53:0x001f\-\>B:57:0x0034\lPHI: r1 \l  PHI: (r1v5 'index' int) = (r1v4 'index' int), (r1v6 'index' int) binds: [B:52:0x001e, B:57:0x0034] A[DONT_GENERATE, DONT_INLINE]\l|if (r1 \>= r8) goto L16\l}"];
Node_54 [shape=record,label="{54\:\ 0x0021}"];
Node_55 [shape=record,label="{55\:\ 0x0031|if (kotlin.text.CharsKt.equals(r4.charAt(r5 + r1), r6.charAt(r7 + r1), r9) != false) goto L12\l}"];
Node_57 [shape=record,label="{57\:\ 0x0034|LOOP_END\lLOOP:0: B:53:0x001f\-\>B:57:0x0034\l|int r1 = r1 + 1\l}"];
Node_61 [shape=record,label="{61\:\ 0x0033|SYNTHETIC\l}"];
Node_56 [shape=record,label="{56\:\ 0x0033|RETURN\l|return false\l}"];
Node_43 [shape=record,label="{43\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_62 [shape=record,label="{62\:\ 0x0037|SYNTHETIC\l}"];
Node_58 [shape=record,label="{58\:\ 0x0037|RETURN\l|return true\l}"];
Node_60 [shape=record,label="{60\:\ 0x0039|RETURN\l|return false\l}"];
MethodNode[shape=record,label="{public static final boolean kotlin.text.StringsKt__StringsKt.regionMatchesImpl((r4v0 '$this$regionMatchesImpl' java.lang.CharSequence A[D('$this$regionMatchesImpl' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5v0 'thisOffset' int A[D('thisOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6v0 'other' java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r7v0 'otherOffset' int A[D('otherOffset' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r8v0 'length' int A[D('length' int), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r9v0 'ignoreCase' boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:57:0x0034 \-\> B:53:0x001f, CROSS_EDGE: B:59:0x0038 \-\> B:43:?, CROSS_EDGE: B:60:0x0039 \-\> B:43:?, CROSS_EDGE: B:48:0x0014 \-\> B:60:0x0039, CROSS_EDGE: B:46:0x000d \-\> B:60:0x0039, CROSS_EDGE: B:45:0x000b \-\> B:60:0x0039\lINLINE_NOT_NEEDED\lTYPE_VARS: EMPTY\l}"];
MethodNode -> Node_42;Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_46[style=dashed];
Node_45 -> Node_60;
Node_46 -> Node_47[style=dashed];
Node_46 -> Node_60;
Node_47 -> Node_48;
Node_48 -> Node_49[style=dashed];
Node_48 -> Node_60;
Node_49 -> Node_50;
Node_50 -> Node_52;
Node_50 -> Node_60[style=dashed];
Node_52 -> Node_53;
Node_53 -> Node_54[style=dashed];
Node_53 -> Node_62;
Node_54 -> Node_55;
Node_55 -> Node_57;
Node_55 -> Node_61[style=dashed];
Node_57 -> Node_53;
Node_61 -> Node_56;
Node_56 -> Node_43;
Node_62 -> Node_58;
Node_58 -> Node_43;
Node_60 -> Node_43;
}

