digraph "CFG forkotlin.text.StringsKt__StringsKt.commonPrefixWith(Ljava\/lang\/CharSequence;Ljava\/lang\/CharSequence;Z)Ljava\/lang\/String;" {
Node_32 [shape=record,label="{32\:\ ?|MTH_ENTER_BLOCK\l}"];
Node_34 [shape=record,label="{34\:\ 0x0000|0x0000: CONST_STR  (r0 I:java.lang.String) =  \"\<this\>\" \l0x0002: INVOKE  (r4 I:java.lang.Object A[D('$this$commonPrefixWith' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x0005: CONST_STR  (r0 I:java.lang.String) =  \"other\" \l0x0007: INVOKE  (r5 I:java.lang.Object A[D('other' java.lang.CharSequence)]), (r0 I:java.lang.String) type: STATIC call: kotlin.jvm.internal.Intrinsics.checkNotNullParameter(java.lang.Object, java.lang.String):void A[MD:(java.lang.Object, java.lang.String):void (m)]\l0x000a: INVOKE  (r0 I:int) = (r4 I:java.lang.CharSequence A[D('$this$commonPrefixWith' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)] (LINE:886)\l0x000e: INVOKE  (r1 I:int) = (r5 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]) type: INTERFACE call: java.lang.CharSequence.length():int A[MD:():int (c)]\l0x0012: INVOKE  (r0 I:int) = (r0 I:int), (r1 I:int) type: STATIC call: java.lang.Math.min(int, int):int A[MD:(int, int):int (c)]\l0x0016: CONST  (r1 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:888)\l}"];
Node_35 [shape=record,label="{35\:\ 0x0017|LOOP_START\lLOOP:0: B:35:0x0017\-\>B:38:0x0027\l|0x0017: IF  (r1 I:??[int, byte, short, char] A[D('i' int)]) \>= (r0 I:??[int, byte, short, char] A[D('shortestLength' int)])  \-\> B:47:0x002a  (LINE:889)\l}"];
Node_36 [shape=record,label="{36\:\ 0x0019|0x0019: INVOKE  (r2 I:char) = (r4 I:java.lang.CharSequence A[D('$this$commonPrefixWith' java.lang.CharSequence)]), (r1 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x001d: INVOKE  (r3 I:char) = (r5 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]), (r1 I:int A[D('i' int)]) type: INTERFACE call: java.lang.CharSequence.charAt(int):char A[MD:(int):char (c)]\l0x0021: INVOKE  (r2 I:boolean) = (r2 I:char), (r3 I:char), (r6 I:boolean A[D('ignoreCase' boolean)]) type: STATIC call: kotlin.text.CharsKt.equals(char, char, boolean):boolean A[MD:(char, char, boolean):boolean (m)]\l}"];
Node_37 [shape=record,label="{37\:\ 0x0025|0x0025: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:46:0x002a \l}"];
Node_38 [shape=record,label="{38\:\ 0x0027|LOOP_END\lLOOP:0: B:35:0x0017\-\>B:38:0x0027\l|0x0027: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (1 int)  (LINE:890)\l}"];
Node_46 [shape=record,label="{46\:\ 0x002a|SYNTHETIC\l}"];
Node_39 [shape=record,label="{39\:\ 0x002a|0x002a: ARITH  (r2 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int)  (LINE:892)\l0x002c: INVOKE  (r2 I:boolean) = (r4 I:java.lang.CharSequence A[D('$this$commonPrefixWith' java.lang.CharSequence)]), (r2 I:int) type: STATIC call: kotlin.text.StringsKt.hasSurrogatePairAt(java.lang.CharSequence, int):boolean A[MD:(java.lang.CharSequence, int):boolean (m)]\l}"];
Node_40 [shape=record,label="{40\:\ 0x0030|0x0030: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) != (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:43:0x003a \l}"];
Node_41 [shape=record,label="{41\:\ 0x0032|0x0032: ARITH  (r2 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int) \l0x0034: INVOKE  (r2 I:boolean) = (r5 I:java.lang.CharSequence A[D('other' java.lang.CharSequence)]), (r2 I:int) type: STATIC call: kotlin.text.StringsKt.hasSurrogatePairAt(java.lang.CharSequence, int):boolean A[MD:(java.lang.CharSequence, int):boolean (m)]\l}"];
Node_42 [shape=record,label="{42\:\ 0x0038|0x0038: IF  (r2 I:??[int, boolean, OBJECT, ARRAY, byte, short, char]) == (0 ??[int, boolean, OBJECT, ARRAY, byte, short, char])  \-\> B:44:0x003c \l}"];
Node_44 [shape=record,label="{44\:\ 0x003c|0x003c: CONST  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (0 ??[int, float, boolean, short, byte, char, OBJECT, ARRAY])  (LINE:895)\l0x003d: INVOKE  (r2 I:java.lang.CharSequence) = \l  (r4 I:java.lang.CharSequence A[D('$this$commonPrefixWith' java.lang.CharSequence)])\l  (r2 I:int)\l  (r1 I:int A[D('i' int)])\l type: INTERFACE call: java.lang.CharSequence.subSequence(int, int):java.lang.CharSequence A[MD:(int, int):java.lang.CharSequence (c)]\l0x0041: INVOKE  (r2 I:java.lang.String) = (r2 I:java.lang.Object) type: VIRTUAL call: java.lang.Object.toString():java.lang.String A[MD:():java.lang.String (c)]\l}"];
Node_45 [shape=record,label="{45\:\ 0x0045|RETURN\l|0x0045: RETURN  (r2 I:java.lang.String) \l}"];
Node_33 [shape=record,label="{33\:\ ?|MTH_EXIT_BLOCK\l}"];
Node_43 [shape=record,label="{43\:\ 0x003a|0x003a: ARITH  (r1 I:int) = (r1 I:int A[D('i' int)]) + (\-1 int)  (LINE:893)\l}"];
Node_47 [shape=record,label="{47\:\ 0x002a|SYNTHETIC\l}"];
MethodNode[shape=record,label="{public static final java.lang.String kotlin.text.StringsKt__StringsKt.commonPrefixWith((r4 I:java.lang.CharSequence A[D('$this$commonPrefixWith' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r5 I:java.lang.CharSequence A[D('other' java.lang.CharSequence), IMMUTABLE_TYPE, METHOD_ARGUMENT]), (r6 I:boolean A[D('ignoreCase' boolean), IMMUTABLE_TYPE, METHOD_ARGUMENT]))  | USE_LINES_HINTS\lBACK_EDGE: B:38:0x0027 \-\> B:35:0x0017, CROSS_EDGE: B:42:0x0038 \-\> B:44:0x003c, CROSS_EDGE: B:40:0x0030 \-\> B:43:0x003a, CROSS_EDGE: B:35:0x0017 \-\> B:39:0x002a\lINLINE_NOT_NEEDED\lDebug Info:\l  0x0016\-0x0045: r0 'shortestLength' I\l  0x0017\-0x0045: r1 'i' I\l  \-1 \-0x0045: r4 '$this$commonPrefixWith' Ljava\/lang\/CharSequence;\l  \-1 \-0x0045: r5 'other' Ljava\/lang\/CharSequence;\l  \-1 \-0x0045: r6 'ignoreCase' Z\l}"];
MethodNode -> Node_32;Node_32 -> Node_34;
Node_34 -> Node_35;
Node_35 -> Node_36[style=dashed];
Node_35 -> Node_47;
Node_36 -> Node_37;
Node_37 -> Node_38[style=dashed];
Node_37 -> Node_46;
Node_38 -> Node_35;
Node_46 -> Node_39;
Node_39 -> Node_40;
Node_40 -> Node_41[style=dashed];
Node_40 -> Node_43;
Node_41 -> Node_42;
Node_42 -> Node_43[style=dashed];
Node_42 -> Node_44;
Node_44 -> Node_45;
Node_45 -> Node_33;
Node_43 -> Node_44;
Node_47 -> Node_39;
}

